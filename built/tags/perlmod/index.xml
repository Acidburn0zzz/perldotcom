<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perlmod on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perlmod/</link>
    <description>Recent content in Perlmod on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Dec 2016 08:40:57 +0000</lastBuildDate>
    <atom:link href="/tags/perlmod/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl module names are filepaths - and that&#39;s all</title>
      <link>http://localhost:1313/article/perl-module-names-are-filepaths---and-that-s-all/</link>
      <pubDate>Wed, 14 Dec 2016 08:40:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-module-names-are-filepaths---and-that-s-all/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s common in Perl parlance to treat the words &amp;ldquo;module&amp;rdquo; and &amp;ldquo;package&amp;rdquo; as synonyms, and in practice they almost refer to the same thing. A module name is shorthand for a filepath, but a package name refers to a namespace within the Perl symbol table. It&amp;rsquo;s easy to forget this because module names and packages are written in the same colon-separated notation, and conventionally we give packages the same name as the module filepath. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Test::More; &lt;span style=&#34;color:#75715e&#34;&gt;# load Test/More.pm&lt;/span&gt;

Test::More::ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# call the ok function in the Test::More namespace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, &lt;code&gt;Test::More&lt;/code&gt; appears twice, but it really refers to two separate things; the first is a filepath, the second is a symbol namespace. They do not have to have the same name. Unfortunately &lt;a href=&#34;https://perldoc.perl.org/perlmod.html&#34;&gt;perlmod&lt;/a&gt; perpetuates this myth:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A module is just a set of related functions in a library file, i.e., a
Perl package with the same name as the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll make a quick module called &amp;ldquo;ACME::Foo::Bar&amp;rdquo;, &lt;code&gt;lib/ACME/Foo/Bar.pm&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Whatever2;

&lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; $VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;=head1 NAME
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ACME::Foo::Bar - proof that module names and packages are not the same
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=cut&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;me&lt;/span&gt; { __PACKAGE__ }

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the package name &lt;code&gt;Whatever2&lt;/code&gt; is completely different to the module name &lt;code&gt;ACME::Foo::Bar&lt;/code&gt;. At the terminal I can test it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -Ilib -MACME::Foo::Bar -E &#39;say Whatever2::me&#39;
Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl happily loads the ACME::Foo::Bar module and the &lt;code&gt;Whatever2&lt;/code&gt; namespace (I originally used &lt;code&gt;Whatever&lt;/code&gt; as the package name, but there is another package on CPAN with that name).&lt;/p&gt;

&lt;h3 id=&#34;as-a-distribution&#34;&gt;As a distribution&lt;/h3&gt;

&lt;p&gt;By adding a makefile, I can make this an installable distribution, &lt;code&gt;Makefile.PL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.008000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::MakeMaker;
WriteMakefile(
  NAME           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACME::Foo::Bar&amp;#39;&lt;/span&gt;,
  VERSION_FROM   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/ACME/Foo/Bar.pm&amp;#39;&lt;/span&gt;,
  ABSTRACT_FROM  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/ACME/Foo/Bar.pm&amp;#39;&lt;/span&gt;,
  AUTHOR         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David Farrell&amp;#39;&lt;/span&gt;,
  LICENSE        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl5&amp;#39;&lt;/span&gt;,
  MIN_PERL_VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5.008000&amp;#34;&lt;/span&gt;,
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hell, I can add some tests while we&amp;rsquo;re at it, &lt;code&gt;t/whatever.t&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACME::Foo::Bar&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import module&amp;#39;&lt;/span&gt; }

is Whatever2::me, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Whatever2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;me() returns package name&amp;#39;&lt;/span&gt;;

done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Installation is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl Makefile.PL
Generating a Unix-style Makefile
Writing Makefile for ACME::Foo::Bar
Writing MYMETA.yml and MYMETA.json
$ make
cp README.pod blib/lib/ACME/Foo/README.pod
cp lib/ACME/Foo/Bar.pm blib/lib/ACME/Foo/Bar.pm
Manifying 2 pod documents
$ make test
PERL_DL_NONLAZY=1 &amp;quot;/home/dfarrell/.plenv/versions/5.22.0/bin/perl5.22.0&amp;quot; &amp;quot;-MExtUtils::Command::MM&amp;quot; &amp;quot;-MTest::Harness&amp;quot; &amp;quot;-e&amp;quot; &amp;quot;undef *Test::Harness::Switches; test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&amp;quot; t/*.t
t/whatever.t .. ok
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.01 cusr  0.00 csys =  0.02 CPU)
Result: PASS
$ make install
Manifying 2 pod documents
Installing /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/site_perl/5.22.0/ACME/Foo/Bar.pm
Installing /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/site_perl/5.22.0/ACME/Foo/README.pod
Installing /home/dfarrell/.plenv/versions/5.22.0/man/man3/ACME::Foo::README.3
Installing /home/dfarrell/.plenv/versions/5.22.0/man/man3/ACME::Foo::Bar.3
Appending installation info to /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/5.22.0/x86_64-linux/perllocal.pod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can test the installed version at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MACME::Foo::Bar -E &#39;say Whatever2::me&#39;
Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tada! Works like a charm.&lt;/p&gt;

&lt;h3 id=&#34;toolchain-issues&#34;&gt;Toolchain issues&lt;/h3&gt;

&lt;p&gt;So now I have a distribution with a module containing a different package name, how well does it work with the CPAN toolchain? I&amp;rsquo;ve uploaded the distribution to CPAN, and you can view it on &lt;a href=&#34;https://metacpan.org/release/DFARRELL/ACME-Foo-Bar-0.02&#34;&gt;metacpan&lt;/a&gt;, and its CPAN Testers &lt;a href=&#34;http://www.cpantesters.org/distro/A/ACME-Foo-Bar.html?oncpan=1&amp;amp;distmat=1&amp;amp;version=0.02&amp;amp;grade=2&#34;&gt;results&lt;/a&gt; are looking good.&lt;/p&gt;

&lt;p&gt;There is one big issue though: the PAUSE indexer. PAUSE is the server which maintains CPAN data and its packages &lt;a href=&#34;https://cpan.metacpan.org/modules/02packages.details.txt&#34;&gt;list&lt;/a&gt; is an index mapping package names to distributions. The indexer requires that a distribution has a module with a matching package name in it. This makes sense as it discourages users from uploading conflicting package names into different distributions.&lt;/p&gt;

&lt;p&gt;CPAN clients lookup the package name in the packages list to know which distribution to install, so if my &lt;code&gt;Whatever2&lt;/code&gt; package isn&amp;rsquo;t in the list, I can&amp;rsquo;t install &lt;code&gt;ACME::Foo::Bar&lt;/code&gt; that way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan Whatever2
CPAN: Storable loaded ok (v2.53)
Reading &#39;/home/dfarrell/.local/share/.cpan/Metadata&#39;
  Database was generated on Thu, 15 Dec 2016 13:53:43 GMT
Warning: Cannot install Whatever2, don&#39;t know what it is.
Try the command

    i /Whatever2/

to find objects with matching identifiers.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But referencing it by its distribution name works fine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan DFARRELL/ACME-Foo-Bar-0.02.tar.gz
--&amp;gt; Working on DFARRELL/ACME-Foo-Bar-0.02.tar.gz
Fetching http://www.cpan.org/authors/id/D/DF/DFARRELL/ACME-Foo-Bar-0.02.tar.gz ... OK
Configuring ACME-Foo-Bar-0.02 ... OK
Building and testing ACME-Foo-Bar-0.02 ... OK
Successfully installed ACME-Foo-Bar-0.02
1 distribution installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One exception to this is &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt;, which falls back on a file search of the metacpan API if it doesn&amp;rsquo;t find the package in &lt;a href=&#34;http://cpanmetadb.plackperl.org/&#34;&gt;CPAN meta DB&lt;/a&gt;. So this works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Neil Bowers has written an excellent &lt;a href=&#34;http://neilb.org/2015/09/05/cpan-glossary.html#cuckoo-package&#34;&gt;glossary&lt;/a&gt; of CPAN terms. Packages with a namespace different to their module name are known as &amp;lsquo;cuckoo&amp;rsquo; packages.&lt;/p&gt;

&lt;p&gt;As conventions go, using the same package and module name is useful and recommended. Especially if the code is going to be shared via CPAN or otherwise. But it&amp;rsquo;s good to know that they&amp;rsquo;re not the same thing.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;strong&gt;Updates&lt;/strong&gt;:&lt;em&gt;Changed example to use &amp;ldquo;require&amp;rdquo; instead of &amp;ldquo;use&amp;rdquo;, as &amp;ldquo;use&amp;rdquo; calls &amp;ldquo;import()&amp;rdquo; on the namespace. Changed the package name to &amp;ldquo;Whatever2&amp;rdquo; to avoid a CPAN conflict. Thanks to Perlancar, Aristotle and Grinnz for the feedback on /r/perl. 2016-12-15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

