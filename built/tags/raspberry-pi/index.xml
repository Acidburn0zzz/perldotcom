<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2020 10:39:00 +0000</lastBuildDate>
    <atom:link href="/tags/raspberry-pi/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Rock Pi S Review</title>
      <link>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</link>
      <pubDate>Thu, 23 Jan 2020 10:39:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</guid>
      <description>&lt;p&gt;When writing articles like these, there is an inevitable comparison to the
Raspberry Pi series. There is no way to fight this,
and for good reason. The first Raspberry Pi ushered in a slew of Single
Board Computers (SBCs), and one of them is the Rock Pi S, a new board from Seeed
Studio.&lt;/p&gt;

&lt;p&gt;In the interest of full disclosure, the Rock Pi S was provided by Seeed
Studio for this review. Specifically, it&amp;rsquo;s the model with 512MB of RAM and
4Gb of built-in flash.&lt;/p&gt;

&lt;p&gt;The Rock Pi S competes in the same segment as the Raspberry Pi Zero, particularly the Zero W
with built-in WiFi. Its form factor is different; where the Zero is
shaped like a stick of gum, the Rock Pi S is closer to a square. The Rock
also has USB-C for power, an ethernet jack, and a USB-A port. Depending on the
project, it can end up being cheaper than the Zero, since you don&amp;rsquo;t have to
buy a micro-USB to USB-A adapter to hook up most other devices.&lt;/p&gt;

&lt;p&gt;You do still need a micro SD card. While there are versions of the Rock with
built-in flash, it&amp;rsquo;s small and not meant for booting an OS. Note that the size of the built-in flash
is listed in giga&lt;em&gt;bits&lt;/em&gt;. The 4Gb version is actually 512 mega&lt;em&gt;bytes&lt;/em&gt;. So get an
SD card.&lt;/p&gt;

&lt;p&gt;Which leaves us the question of which SD card. Some people automatically
reach for a class 10 or UHS-I card, since those have the highest performance on
the box. Trouble is, the traditional class ratings on SD cards only tell you
the sequential read and write performance. That&amp;rsquo;s fine for cameras, but
running an operating system means lots of random reads. Testing often showed
that a good class 4 card was better than a lot of the class 10 cards out there.&lt;/p&gt;

&lt;p&gt;These days, we don&amp;rsquo;t have to worry about that, because the SD Association
came up with the &lt;a href=&#34;https://www.sdcard.org/developers/overview/application/index.html&#34;&gt;Application Performance Classes&lt;/a&gt;
of A1 and A2. These set a minimum of random IO operations per second, which
is just what we want. So get an A1 card and you&amp;rsquo;ll be happy with the results.&lt;/p&gt;

&lt;p&gt;The big thing in the Rock&amp;rsquo;s favor is a quad core ARM processor. While it&amp;rsquo;s not
going to set any Bitcoin mining records, I&amp;rsquo;ve found multicore
processors are handy for hardware projects. On a single core processor running
Linux, your program can get interrupted by something else at any time. This
means that a program running on a mere 16MHz Arduino may run better than a
1GHz Raspberry Pi. A quad core processor mitigates this, since secondary
programs have 3 other cores to work with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/rockpi2.jpg&#34; alt=&#34;The Rock Pi S&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Rock is powered over its USB-C port. I found attaching it to a
laptop USB port provided enough power to get going. This is also handy because
you can run &lt;code&gt;adb shell&lt;/code&gt; to connect to the Rock&amp;rsquo;s OS. &amp;ldquo;ADB&amp;rdquo; is the
Android Debug Bridge, and while the Rock does support running Android, I used
a Ubuntu Bionic image. Yes, &lt;code&gt;adb&lt;/code&gt; did still work with Ubuntu installed. This is great for
headless installs, since you won&amp;rsquo;t have networking available at first boot.&lt;/p&gt;

&lt;p&gt;Since it&amp;rsquo;s running Ubuntu, we have &lt;code&gt;perl&lt;/code&gt; from the start:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v:

This is perl 5, version 26, subversion 1 (v5.26.1) built for aarch64-linux-gnu-thread-multi
(with 67 registered patches, see perl -V for more detail)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you won&amp;rsquo;t have is an equivalent to &lt;a href=&#34;https://metacpan.org/pod/RPi::WiringPi&#34;&gt;RPi::WiringPi&lt;/a&gt;
to control GPIO (&amp;ldquo;General Purpose Input/Output&amp;rdquo;). GPIO is the most basic
building block for hardware programming. We&amp;rsquo;re either controlling the output
voltage to cause something to happen, like blinking an LED, or we&amp;rsquo;re taking
input to see if something happened, like hitting a switch. It&amp;rsquo;s simple, but
very useful. Tons of hardware projects come down to just seeing if something
is on, or turning something on.&lt;/p&gt;

&lt;p&gt;What we lack is a library to do that on the Rock Pi S. That&amp;rsquo;s OK, because it&amp;rsquo;s
Linux, and Linux provides a simple sysfs interface to access GPIO pins. As long
as there&amp;rsquo;s a GPIO driver for the board, you can control the pins.&lt;/p&gt;

&lt;p&gt;The Rock has two headers, one of which is color coded and has the main pins you want to work with in most projects. Note
that there are a few variations of the pinout depending on the version of
the board you get. The version should be printed on the board (I received a
V12 board), so make sure you&amp;rsquo;re looking at the right pinout for your board.
See the &lt;a href=&#34;https://wiki.radxa.com/RockpiS/hardware/rockpiS#gpio&#34;&gt;GPIO header documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that the pins are specified as 3.3V input. That means you don&amp;rsquo;t want to put 5V
into them. Feeding it 5V might cause glitches, or could break the board
completely.&lt;/p&gt;

&lt;p&gt;To get at the pins, we can use the &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/gpio/sysfs.html&#34;&gt;Linux sysfs interface&lt;/a&gt;.
You will note a big fat deprecation warning at the top. The new way to do it
is with gpio-cdev, which requires some &lt;code&gt;ioctl()&lt;/code&gt; calls. Since this is
more difficult to handle&amp;ndash;it requires importing some constants from the
kernel headers, instead of just accessing files&amp;ndash;we&amp;rsquo;ll stick with the sysfs
interface for now. That said, if someone would like to make a CPAN module
that provides those kernel symbols (and maybe the ones for I2C and SPI, as
well), I would welcome that.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what we need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the pin accessible by writing the pin number to &lt;code&gt;/sys/class/gpio/export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the pin as an input pin by writing &amp;ldquo;in&amp;rdquo; to &lt;code&gt;/sys/class/gpioN/direction&lt;/code&gt; (where N is the pin number)&lt;/li&gt;
&lt;li&gt;Read the current value from &lt;code&gt;/sys/class/gpioN/value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since pullups are active, a pin not connected to anything will output a 1, and connecting it to ground will give you a 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can connect a wire from a ground pin to the pin you select, and the value
output should go from 1 to 0.&lt;/p&gt;

&lt;p&gt;You may be wondering why this is backwards; don&amp;rsquo;t you want to see a 1 when
something is connected? The reason is pullup resistors. If a pin is
disconnected, it will tend to &amp;ldquo;float&amp;rdquo;, picking up interference from the
electronics around it. That results in getting random 0&amp;rsquo;s and 1&amp;rsquo;s. If you
instead connect a resistor tied to high voltage, 1 is what you consistently get
on the pin.
If you then connect that pin to ground, it will see a 0 instead. We
just have to remember that the whole thing is backwards from what we normally
expect&amp;ndash;1 for disconnected, 0 for connected.&lt;/p&gt;

&lt;p&gt;The full program is at the end of the article. The &lt;code&gt;export_pin&lt;/code&gt; and &lt;code&gt;set_input&lt;/code&gt;
functions both take a pin number and ask the kernel to export it for
use or set it as input (respectively).  The &lt;code&gt;read_pin&lt;/code&gt; function takes a pin
and returns its current value (either 1 or 0). The &lt;code&gt;write_pin&lt;/code&gt; function is
just a helper function for doing the file IO for other functions.&lt;/p&gt;

&lt;p&gt;At the very bottom is the code to wrap all this together. We export the pin
passed in from the command line, set it as input, and then read the pin in a
loop. By outputting &amp;ldquo;\r&amp;rdquo;, the previously printed value is overwritten in the
terminal, rather than having one long string of values. Since we&amp;rsquo;re using
the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; version of &lt;code&gt;sleep&lt;/code&gt;, we can use
seconds in floating point to slow the output down without being too slow.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been waiting for a board like this for a while, packing in a multicore
processor, networking, a full sized USB jack, and running on Linux in a sub $20
price range. This might be a new favorite.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.26&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sys/class/gpio&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant SLEEP_TIME &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();
$GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\A\d+\z/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();



&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_input&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;export_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/export&amp;#39;&lt;/span&gt;, $pin );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/value&amp;#39;&lt;/span&gt;;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t read from $full_path: $!\n&amp;#34;&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$in&amp;gt;&lt;/span&gt; ) {
        $data &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $line;
    }

    close( $in );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $data;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($path, $data) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $path;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t write to $full_path: $!\n&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$data&amp;#34;&lt;/span&gt;;
    close $out;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;usage&lt;/span&gt;
{
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: rockpi_gpio.pl &amp;lt;pin number&amp;gt;\n&amp;#34;&lt;/span&gt;;
}


export_pin( $GPIO );
set_input( $GPIO );
$| &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# Autoflush output&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_pin( $GPIO );
    chomp $in;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$in\r&amp;#34;&lt;/span&gt;;
    sleep SLEEP_TIME;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2018/</link>
      <pubDate>Mon, 02 Apr 2018 21:48:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::diceware&#34;&gt;App::diceware&lt;/a&gt; is a simple Diceware passphrase generator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::ContentAPI&#34;&gt;Google::ContentAPI&lt;/a&gt; provides an interface for Google&amp;rsquo;s Content API for Shopping&lt;/li&gt;
&lt;li&gt;Perl XS binding for the Duktape Javascript embeddable engine with &lt;a href=&#34;https://metacpan.org/pod/JavaScript::Duktape::XS&#34;&gt;JavaScript::Duktape::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get an HTTP Client for Firebase Cloud Messaging using &lt;a href=&#34;https://metacpan.org/pod/WWW::FCM::HTTP&#34;&gt;WWW::FCM::HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bash::Completion::Plugins::Sqitch&#34;&gt;Bash::Completion::Plugins::Sqitch&lt;/a&gt; provides bash completion for Sqitch commands&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Font::FreeType&#34;&gt;Font::FreeType&lt;/a&gt; can read font files and render glyphs from Perl using FreeType2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Release::Checklist&#34;&gt;Release::Checklist&lt;/a&gt; is a QA checklist for CPAN releases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A Perl interface to the Big List of Naughty Strings with &lt;a href=&#34;https://metacpan.org/pod/Data::BLNS&#34;&gt;Data::BLNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create ICC profiles and use associated color functions using &lt;a href=&#34;https://metacpan.org/pod/ICC::Profile&#34;&gt;ICC::Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Markua::Parser&#34;&gt;Markua::Parser&lt;/a&gt; can parse Markua files for writing books&lt;/li&gt;
&lt;li&gt;Easily provide JSON-LD mark-up for your objects using &lt;a href=&#34;https://metacpan.org/pod/MooX::Role::JSON_LD&#34;&gt;MooX::Role::JSON_LD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SkewHeap&#34;&gt;SkewHeap&lt;/a&gt; is a fast heap structure for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/YAML::Dump&#34;&gt;YAML::Dump&lt;/a&gt; is a simplified YAML dumper with boolean support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Connector&#34;&gt;AnyEvent::Connector&lt;/a&gt; provides &lt;code&gt;tcp_connect&lt;/code&gt; á la AnyEvent::Socket with transparent proxy handling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Caller::Easy&#34;&gt;Caller::Easy&lt;/a&gt; provides a much nicer (than builtin) interface to the call stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Util::MaybeXS&#34;&gt;List::Util::MaybeXS&lt;/a&gt; it&amp;rsquo;s List::Util but with a pure Perl fallback&lt;/li&gt;
&lt;li&gt;Create prototypes with &lt;a href=&#34;https://metacpan.org/pod/Package::Prototype&#34;&gt;Package::Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This Perl Critic policy checks for loops on hashes: &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitLoopOnHash&#34;&gt;Perl::Critic::Policy::Variables::ProhibitLoopOnHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sys::Linux::Syscall::Execve&#34;&gt;Sys::Linux::Syscall::Execve&lt;/a&gt; provides a raw &lt;code&gt;execve()&lt;/code&gt; wrapper that preserves memory addresses&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::xUnit&#34;&gt;Test2::Tools::xUnit&lt;/a&gt; is a Perl xUnit framework built on Test2::Workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Control a typical stepper motor with the Raspberry Pi using &lt;a href=&#34;https://metacpan.org/pod/RPi::StepperMotor&#34;&gt;RPi::StepperMotor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get IP address encryption for pseudo anonymization with &lt;a href=&#34;https://metacpan.org/pod/Net::Address::IP::Cipher&#34;&gt;Net::Address::IP::Cipher&lt;/a&gt;. Might be useful for GDPR compliance?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get HTML validation via &lt;a href=&#34;https://metacpan.org/pod/HTML::Tidy5&#34;&gt;HTML::Tidy5&lt;/a&gt; (the author&amp;rsquo;s intended replacement for HTML::Lint)&lt;/li&gt;
&lt;li&gt;Automatically reload open browser windows when your application changes using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AutoReload&#34;&gt;Mojolicious::Plugin::AutoReload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::ServerTiming&#34;&gt;Plack::Middleware::ServerTiming&lt;/a&gt; adds the Server-Timing header to HTTP responses&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RT::Authen::OAuth2&#34;&gt;RT::Authen::OAuth2&lt;/a&gt; is another OAuth2 implementation&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---october-2016/</link>
      <pubDate>Thu, 03 Nov 2016 03:57:34 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---october-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve status information about Open Tibia MMORPG Servers with &lt;a href=&#34;https://metacpan.org/pod/Net::OTServ&#34;&gt;Net::OTServ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::TNT::ExpressConnect&#34;&gt;Business::TNT::ExpressConnect&lt;/a&gt; provides an interface to the shipping company&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;Tarantool is an in memory no-SQL store, use it with Perl using &lt;a href=&#34;https://metacpan.org/pod/DR::Tnt&#34;&gt;DR::Tnt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pandoc&#34;&gt;Pandoc&lt;/a&gt; is a wrapper for the useful document conversion tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/stasis&#34;&gt;stasis&lt;/a&gt; is an encrypting archive tool using tar, gpg and Perl. It is also a sneaky indexed package without a .pm file (disclosure - I am the module author).&lt;/li&gt;
&lt;li&gt;Get subtitles for videos using &lt;a href=&#34;https://metacpan.org/pod/WWW::SubDB&#34;&gt;WWW::SubDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bread::Runner&#34;&gt;Bread::Runner&lt;/a&gt; is a generic app runner for Bread::Board, the Inversion of Control framework&lt;/li&gt;
&lt;li&gt;Share locks with child processes using &lt;a href=&#34;https://metacpan.org/pod/File::Lock::ParentLock&#34;&gt;File::Lock::ParentLock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::Netfilter::Log&#34;&gt;Linux::Netfilter::Log&lt;/a&gt; is a Linux netfilter logging (libnetfilter_log) wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BSON::XS&#34;&gt;BSON::XS&lt;/a&gt; is an XS implementation of MongoDB&amp;rsquo;s BSON serialization&lt;/li&gt;
&lt;li&gt;Ajv is the premier JavaScript JSON schema validator, now you can use it with &lt;a href=&#34;https://metacpan.org/pod/Data::JSONSchema::Ajv&#34;&gt;Data::JSONSchema::Ajv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::MoneyCurrency&#34;&gt;Data::MoneyCurrency&lt;/a&gt; provides data about countries&amp;rsquo; currencies&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Templatize&amp;rdquo; data with &lt;a href=&#34;https://metacpan.org/pod/Data::Xslate&#34;&gt;Data::Xslate&lt;/a&gt; - useful for conditional config files and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::JSON::Slurper&#34;&gt;File::JSON::Slurper&lt;/a&gt; slurps and decodes JSON files in a single step&lt;/li&gt;
&lt;li&gt;This looks fun; create black and white PNG files from arrays using &lt;a href=&#34;https://metacpan.org/pod/Image::PNG::Write::BW&#34;&gt;Image::PNG::Write::BW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Postgresql58&#34;&gt;Test::Postgresql58&lt;/a&gt; is a Perl 5.8 compatible version of Test::Postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Distribute tasks among multiple workers with &lt;a href=&#34;https://metacpan.org/pod/Broker::Async&#34;&gt;Broker::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Continual::Process&#34;&gt;Continual::Process&lt;/a&gt; keeps processes running &amp;hellip; forever&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Import::Box&#34;&gt;Import::Box&lt;/a&gt; is a new way to import functions but not pollute the importing namespace&lt;/li&gt;
&lt;li&gt;Using Test2 and missing &lt;code&gt;explain()&lt;/code&gt;? Then you&amp;rsquo;ll love &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::Explain&#34;&gt;Test2::Tools::Explain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/T&#34;&gt;T&lt;/a&gt; encapsulates test imports to avoid polluting main (uses Import::Box)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::HTU21D&#34;&gt;Device::Chip::HTU21D&lt;/a&gt; is a chip driver for HTU21D&lt;/li&gt;
&lt;li&gt;Control Gqrx (software driven radio) using the Remote Control protocol using &lt;a href=&#34;https://metacpan.org/pod/GQRX::Remote&#34;&gt;GQRX::Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RPi::EnvUI&#34;&gt;App::RPi::EnvUI&lt;/a&gt; is a single page app grow room environment control for Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compute verb actants for Portuguese using &lt;a href=&#34;https://metacpan.org/pod/Lingua::PT::Actants&#34;&gt;Lingua::PT::Actants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently create and consume authenticated and encrypted messages using &lt;a href=&#34;https://metacpan.org/pod/Crypt::EAMessage&#34;&gt;Crypt::EAMessage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLx::DetachedObject&#34;&gt;PDLx::DetachedObject&lt;/a&gt; enables subclassing the non-standard PDL classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLx::Mask&#34;&gt;PDLx::Mask&lt;/a&gt; can mask multiple piddles with automatic two way feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t call it a framework; &lt;a href=&#34;https://metacpan.org/pod/MVC::Neaf&#34;&gt;MVC::Neaf&lt;/a&gt; is a new, minimalist web tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

