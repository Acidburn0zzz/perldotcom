<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Subroutines on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-subroutines/</link>
    <description>Recent content in Perl Subroutines on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Feb 2006 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-subroutines/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Advanced Subroutine Techniques</title>
      <link>http://localhost:1313/pub/2006/02/23/advanced_subroutines.html/</link>
      <pubDate>Thu, 23 Feb 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/02/23/advanced_subroutines.html/</guid>
      <description>

&lt;p&gt;In &amp;ldquo;&lt;a href=&#34;http://localhost:1313/pub/2005/11/03/subroutines.html&#34;&gt;Making Sense of Subroutines&lt;/a&gt;,&amp;rdquo; I wrote about what subroutines are and why you want to use them. This article expands on that topic, discussing some of the more common techniques for subroutines to make them even more useful.&lt;/p&gt;

&lt;p&gt;Several of these techniques are advanced, but you can use each one by itself without understanding the others. Furthermore, not every technique is useful in every situation. As with all techniques, consider these as tools in your toolbox, not things you have to do every time you open your editor.&lt;/p&gt;

&lt;h3 id=&#34;named-arguments&#34;&gt;Named Arguments&lt;/h3&gt;

&lt;h4 id=&#34;positional-arguments&#34;&gt;Positional Arguments&lt;/h4&gt;

&lt;p&gt;Subroutines, by default, use &amp;ldquo;positional arguments.&amp;rdquo; This means that the arguments to the subroutine must occur in a specific order. For subroutines with a small argument list (three or fewer items), this isn&amp;rsquo;t a problem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub pretty_print {
    my ($filename, $text, $text_width) = @_;

    # Format $text to $text_width somehow.

    open my $fh, &#39;&amp;gt;&#39;, $filename
        or die &amp;quot;Cannot open &#39;$filename&#39; for writing: $!\n&amp;quot;;

    print $fh $text;

    close $fh;

    return;
}

pretty_print( &#39;filename&#39;, $long_text, 80 );
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-problem&#34;&gt;The Problem&lt;/h4&gt;

&lt;p&gt;However, once everyone starts using your subroutine, it starts expanding what it can do. Argument lists tend to expand, making it harder and harder to remember the order of arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub pretty_print {
    my (
        $filename, $text, $text_width, $justification, $indent,
        $sentence_lead
    ) = @_;

    # Format $text to $text_width somehow. If $justification is set, justify
    # appropriately. If $indent is set, indent the first line by one tab. If
    # $sentence_lead is set, make sure all sentences start with two spaces.

    open my $fh, &#39;&amp;gt;&#39;, $filename
        or die &amp;quot;Cannot open &#39;$filename&#39; for writing: $!\n&amp;quot;;

    print $fh $text;

    close $fh;

    return;
}

pretty_print( &#39;filename&#39;, $long_text, 80, &#39;full&#39;, undef, 1 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick&amp;ndash;what does that &lt;code&gt;1&lt;/code&gt; at the end of the subroutine mean? If it took you more than five seconds to figure it out, then the subroutine call is unmaintainable. Now, imagine that the subroutine isn&amp;rsquo;t right there, isn&amp;rsquo;t documented or commented, and was written by someone who is quitting next week.&lt;/p&gt;

&lt;h4 id=&#34;the-solution&#34;&gt;The Solution&lt;/h4&gt;

&lt;p&gt;The most maintainable solution is to use &amp;ldquo;named arguments.&amp;rdquo; In Perl 5, the best way to implement this is by using a hash reference. Hashes also work, but they require additional work on the part of the subroutine author to verify that the argument list is even. A hashref makes any unmatched keys immediately obvious as a compile error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub pretty_print {
    my ($args) = @_;

    # Format $args-&amp;gt;{text} to $args-&amp;gt;{text_width} somehow.
    # If $args-&amp;gt;{justification} is set, justify appropriately.
    # If $args-&amp;gt;{indent} is set, indent the first line by one tab.
    # If $args-&amp;gt;{sentence_lead} is set, make sure all sentences start with
    # two spaces.

    open my $fh, &#39;&amp;gt;&#39;, $args-&amp;gt;{filename}
        or die &amp;quot;Cannot open &#39;$args-&amp;gt;{filename}&#39; for writing: $!\n&amp;quot;;

    print $fh $args-&amp;gt;{text};

    close $fh;

    return;
}

pretty_print({
    filename      =&amp;gt; &#39;filename&#39;,
    text          =&amp;gt; $long_text,
    text_width    =&amp;gt; 80,
    justification =&amp;gt; &#39;full&#39;,
    sentence_lead =&amp;gt; 1,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the reader can immediately see exactly what the call to &lt;code&gt;pretty_print()&lt;/code&gt; is doing.&lt;/p&gt;

&lt;h4 id=&#34;and-optional-arguments&#34;&gt;And Optional Arguments&lt;/h4&gt;

&lt;p&gt;By using named arguments, you gain the benefit that some or all of your arguments can be optional without forcing our users to put &lt;code&gt;undef&lt;/code&gt; in all of the positions they don&amp;rsquo;t want to specify.&lt;/p&gt;

&lt;h3 id=&#34;validation&#34;&gt;Validation&lt;/h3&gt;

&lt;p&gt;Argument validation is more difficult in Perl than in other languages. In C or Java, for instance, every variable has a type associated with it. This includes subroutine declarations, meaning that trying to pass the wrong type of variable to a subroutine gives a compile-time error. By contrast, because &lt;code&gt;perl&lt;/code&gt; flattens everything to a single list, there is no compile-time checking at all. (Well, there kinda is with prototypes.)&lt;/p&gt;

&lt;p&gt;This has been such a problem that there are dozens of modules on CPAN to address the problem. The most commonly recommended one is &lt;a href=&#34;https://metacpan.org/pod/Params::Validate&#34;&gt;&lt;code&gt;Params::Validate&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h3&gt;

&lt;p&gt;Prototypes in Perl are a way of letting Perl know exactly what to expect for a given subroutine, at compile time. If you&amp;rsquo;ve ever tried to pass an array to the &lt;code&gt;vec()&lt;/code&gt; built-in and you saw &lt;code&gt;Not enough arguments for vec&lt;/code&gt;, you&amp;rsquo;ve hit a prototype.&lt;/p&gt;

&lt;p&gt;For the most part, prototypes are more trouble than they&amp;rsquo;re worth. For one thing, Perl doesn&amp;rsquo;t check prototypes for methods because that would require the ability to determine, at compile time, which class will handle the method. Because you can alter &lt;code&gt;@ISA&lt;/code&gt; at runtime&amp;ndash;you see the problem. The main reason, however, is that prototypes aren&amp;rsquo;t very smart. If you specify &lt;code&gt;sub foo ($$$)&lt;/code&gt;, you cannot pass it an array of three scalars (this is the problem with &lt;code&gt;vec()&lt;/code&gt;). Instead, you have to say &lt;code&gt;foo( $x[0], $x[1], $x[2] )&lt;/code&gt;, and that&amp;rsquo;s just a pain.&lt;/p&gt;

&lt;p&gt;Prototypes &lt;em&gt;can&lt;/em&gt; be very useful for one reason&amp;ndash;the ability to pass subroutines in as the first argument. &lt;a href=&#34;https://metacpan.org/pod/Test::Exception&#34;&gt;&lt;code&gt;Test::Exception&lt;/code&gt;&lt;/a&gt; uses this to excellent advantage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub do_this_to (&amp;amp;;$) {
    my ($action, $name) = @_;

    $action-&amp;gt;( $name );
}

do_this_to { print &amp;quot;Hello, $_[0]\n&amp;quot; } &#39;World&#39;;
do_this_to { print &amp;quot;Goodbye, $_[0]\n&amp;quot; } &#39;cruel world!&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;context-awareness&#34;&gt;Context Awareness&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;wantarray&lt;/code&gt; built-in, a subroutine can determine its calling context. Context for subroutines, in Perl, is one of three things&amp;ndash;list, scalar, or void. List context means that the return value will be used as a list, scalar context means that the return value will be used as a scalar, and void context means that the return value won&amp;rsquo;t be used at all.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub check_context {
    # True
    if ( wantarray ) {
        print &amp;quot;List context\n&amp;quot;;
    }
    # False, but defined
    elsif ( defined wantarray ) {
        print &amp;quot;Scalar context\n&amp;quot;;
    }
    # False and undefined
    else {
        print &amp;quot;Void context\n&amp;quot;;
    }
}

my @x       = check_context();  # prints &#39;List context&#39;
my %x       = check_context();  # prints &#39;List context&#39;
my ($x, $y) = check_context();  # prints &#39;List context&#39;

my $x       = check_context();  # prints &#39;Scalar context&#39;

check_context();                # prints &#39;Void context&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For CPAN modules that implement or augment context awareness, look at &lt;a href=&#34;https://metacpan.org/pod/Contextual::Return&#34;&gt;&lt;code&gt;Contextual::Return&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Sub::Context&#34;&gt;&lt;code&gt;Sub::Context&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Return::Value&#34;&gt;&lt;code&gt;Return::Value&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: you can misuse context awareness heavily by having the subroutine do something completely different when called in scalar versus list context. Don&amp;rsquo;t do that. A subroutine should be a single, easily identifiable unit of work. Not everyone understands all of the different permutations of context, including your standard Perl expert.&lt;/p&gt;

&lt;p&gt;Instead, I recommend having a standard return value, except in void context. If your return value is expensive to calculate and is calculated only for the purposes of returning it, then knowing if you&amp;rsquo;re in void context may be very helpful. This can be a premature optimization, however, so always measure (benchmarking and profiling) before and after to make sure you&amp;rsquo;re optimizing what needs optimizing.&lt;/p&gt;

&lt;h3 id=&#34;mimicking-perl-s-internal-functions&#34;&gt;Mimicking Perl&amp;rsquo;s Internal Functions&lt;/h3&gt;

&lt;p&gt;A lot of Perl&amp;rsquo;s internal functions modify their arguments and/or use &lt;code&gt;$_&lt;/code&gt; or &lt;code&gt;@_&lt;/code&gt; as a default if no parameters are provided. A perfect example of this is &lt;code&gt;chomp()&lt;/code&gt;. Here&amp;rsquo;s a version of &lt;code&gt;chomp()&lt;/code&gt; that illustrates some of these techniques:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub my_chomp {
    # This is a special case in the chomp documentation
    return if ref($/);

    # If a return value is expected ...
    if ( defined wantarray ) {
        my $count = 0;
        $count += (@_ ? (s!$/!!g for @_) : s!$/!!g);
        return $count;
    }
    # Otherwise, don&#39;t bother counting
    else {
        @_ ? do{ s!$/!!g for @_ } : s!$/!!g;
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;return;&lt;/code&gt; instead of &lt;code&gt;return undef;&lt;/code&gt; if you want to return nothing. If someone assigns the return value to an array, the latter creates an array of one value (&lt;code&gt;undef&lt;/code&gt;), which evaluates to true. The former will correctly handle all contexts.&lt;/li&gt;
&lt;li&gt;If you want to modify &lt;code&gt;$_&lt;/code&gt; if no parameters are given, you have to check &lt;code&gt;@_&lt;/code&gt; explicitly. You cannot do something like &lt;code&gt;@_ = ($_) unless @_;&lt;/code&gt; because &lt;code&gt;$_&lt;/code&gt; will lose its magic.&lt;/li&gt;
&lt;li&gt;This doesn&amp;rsquo;t calculate &lt;code&gt;$count&lt;/code&gt; unless &lt;code&gt;$count&lt;/code&gt; is useful (using a check for void context).&lt;/li&gt;
&lt;li&gt;The key is the aliasing of &lt;code&gt;@_&lt;/code&gt;. If you modify &lt;code&gt;@_&lt;/code&gt; directly (as opposed to assigning the values in &lt;code&gt;@_&lt;/code&gt; to variables), then you modify the actual parameters passed in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope I have introduced you to a few more tools in your toolbox. The art of writing a good subroutine is very complex. Each of the techniques I have presented is one tool in the programmer&amp;rsquo;s toolbox. Just as a master woodworker wouldn&amp;rsquo;t use a drill for every project, a master programmer doesn&amp;rsquo;t make every subroutine use named arguments or mimic a built-in. You must evaluate each technique every time to see if it will make the code more maintainable. Overusing these techniques will make your code &lt;em&gt;less&lt;/em&gt; maintainable. Using them appropriately will make your life easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making Sense of Subroutines</title>
      <link>http://localhost:1313/pub/2005/11/03/subroutines.html/</link>
      <pubDate>Thu, 03 Nov 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/11/03/subroutines.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s Note: This article has a followup in &lt;a href=&#34;http://localhost:1313/pub/2006/02/23/advanced_subroutines.html&#34;&gt;Advanced Subroutine Techniques&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A subroutine (or routine, function, procedure, macro, etc.) is, at its heart, a named chunk of work. It&amp;rsquo;s shorthand that allows you to think about your problem in bigger chunks. Bigger chunks means two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can break the problem up into smaller problems that you can solve independently.&lt;/li&gt;
&lt;li&gt;You can use these solutions to solve your overall problem with greater confidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well-written subroutines will make your programs smaller (in lines and memory), faster (both in writing and executing), less buggy, and easier to modify.&lt;/p&gt;

&lt;h3 id=&#34;you-re-kidding-right&#34;&gt;You&amp;rsquo;re Kidding, Right?&lt;/h3&gt;

&lt;p&gt;Consider this: when you lift your sandwich to take a bite, you don&amp;rsquo;t think about all the work that goes into contracting your muscles and coordinating your movements so that the mayo doesn&amp;rsquo;t end up in your hair. You, in essence, execute a series of subroutines that say &amp;ldquo;Lift the sandwich up to my mouth and take a bite of it, then put it back down on the plate.&amp;rdquo; If you had to think about all of your muscle contractions and coordinating them every time you wanted to take a bite, you&amp;rsquo;d starve to death.&lt;/p&gt;

&lt;p&gt;The same is true for your code. We write programs for a human&amp;rsquo;s benefit. The computer doesn&amp;rsquo;t care how complicated or simple your code is to read&amp;ndash;it converts everything to the same 1s and 0s whether it has perfect indentation or is all on one line. Programming guidelines, and nearly every single programming language feature, exist for human benefit.&lt;/p&gt;

&lt;h3 id=&#34;tell-me-more&#34;&gt;Tell Me More&lt;/h3&gt;

&lt;p&gt;Subroutines truly are the magical cure for all that ails your programs. When done right, you will find that you write your programs in half the time, you have more confidence in what you&amp;rsquo;ve written, and you can explain it to others more easily.&lt;/p&gt;

&lt;h4 id=&#34;naming&#34;&gt;Naming&lt;/h4&gt;

&lt;p&gt;A subroutine provides a name for a series of steps. This is especially important when dealing with complicated processes (or algorithms). While this includes ivory-tower solutions such as the Guttler-Rossman transformation (for sorting), this also includes the overly complicated way your company does accounts receivables. By putting a name on it, you&amp;rsquo;re making it easier to work with.&lt;/p&gt;

&lt;h4 id=&#34;code-reuse&#34;&gt;Code Reuse&lt;/h4&gt;

&lt;p&gt;Face it&amp;ndash;you&amp;rsquo;re going to need to do the same thing over and over in different parts of your code. If you have the same 30 lines of code in 40 places, it&amp;rsquo;s much harder to apply a bugfix or a requirements change. Even better, if your code uses subroutines, it&amp;rsquo;s much easier to optimize just that one little bit that&amp;rsquo;s slowing the whole application down. Studies have shown that 80 percent of the application&amp;rsquo;s runtime generally occurs within one percent of an application&amp;rsquo;s code. If that one percent is in a few subroutines, you can optimize it and hide the nasty details from the rest of your code.&lt;/p&gt;

&lt;h4 id=&#34;testability&#34;&gt;Testability&lt;/h4&gt;

&lt;p&gt;To many people, &amp;ldquo;test&amp;rdquo; is a four-letter word. I firmly believe this is because they don&amp;rsquo;t have enough interfaces to test against. A subroutine provides a way of grabbing a section of your code and testing it independently of all the rest of your code. This independence is key to having confidence in your tests, both now and in the future.&lt;/p&gt;

&lt;p&gt;In addition, when someone finds a bug, the bug will usually occur in a single subroutine. When this happens, you can alter that one subroutine, leaving the rest of the system unchanged. The fewer changes made to an application, the more confidence there is in the fix not introducing new bugs along with the bugfix.&lt;/p&gt;

&lt;h4 id=&#34;ease-of-development&#34;&gt;Ease of Development&lt;/h4&gt;

&lt;p&gt;No one argues that subroutines are bad when there are ten developers working on a project. They allow different developers to work on different parts of the application in parallel. (If there are dependencies, one developer can &lt;em&gt;stub&lt;/em&gt; the missing subroutines.) However, they provide an equal amount of benefit for the solo developer: they allow you to focus on one specific part of the application without having to build all of the pieces up together. You will be happy for the good names you chose when you have to read code you wrote six months ago.&lt;/p&gt;

&lt;p&gt;Consider the following example of a convoluted conditional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ((($x &amp;gt; 3 &amp;amp;&amp;amp; $x&amp;lt;12) || ($x&amp;gt;15 &amp;amp;&amp;amp; $x&amp;lt;23)) &amp;amp;&amp;amp;
    (($y&amp;lt;2260 &amp;amp;&amp;amp; $y&amp;gt;2240) || ($z&amp;gt;foo_bar() &amp;amp;&amp;amp; $z&amp;lt;bar_foo()))) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s very hard to exactly what&amp;rsquo;s going on. Some judicious white space can help, as can improved layout. That leaves:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (
     (
       ( $x &amp;gt; 3 &amp;amp;&amp;amp; $x &amp;lt; 12) || ($x &amp;gt; 15 &amp;amp;&amp;amp; $x &amp;lt; 23)
     )
     &amp;amp;&amp;amp;
     (
       ($y &amp;lt; 2260 &amp;amp;&amp;amp; $y &amp;gt; 2240) || ($z &amp;gt; foo_bar() &amp;amp;&amp;amp; $z &amp;lt; bar_foo())
     )
   )
{
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gah, that&amp;rsquo;s almost worse. Enter a subroutine to the rescue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub is_between {
    my ($value, $left, $right) = @_;

    return ( $left &amp;lt; $value &amp;amp;&amp;amp; $value &amp;lt; $right );
}

if (
    ( is_between( $x, 3, 12 ) ||
      is_between( $x, 15, 23 )
    ) &amp;amp;&amp;amp; (
      is_between( $y, 2240, 2260 ) ||
      is_between( $z, foo_bar(), bar_foo() )
    ) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s so much easier to read. One thing to notice is that, in this case, the rewrite doesn&amp;rsquo;t actually save any characters. In fact, this is slightly longer than the original version. Yet, it&amp;rsquo;s easier to read, which makes it easier to both validate for correctness as well as to modify safely. (When writing this subroutine for the article, I actually found an error I had made&amp;ndash;I had flipped the values for comparing &lt;code&gt;$y&lt;/code&gt; so that the &lt;code&gt;$y&lt;/code&gt; conditional could never be true.)&lt;/p&gt;

&lt;h3 id=&#34;how-do-i-know-if-i-m-doing-it-right&#34;&gt;How Do I Know if I&amp;rsquo;m Doing It Right?&lt;/h3&gt;

&lt;p&gt;Just as there are good sandwiches (turkey club on dark rye) and bad sandwiches (peanut butter and banana on Wonder bread), there are also good and bad subroutines. While writing good subroutines is very much an art form, there are several characteristics you can look for when writing good subroutines. A good subroutine is readable and has a well-defined interface, strong internal cohesion, and loose external coupling.&lt;/p&gt;

&lt;h4 id=&#34;readability&#34;&gt;Readability&lt;/h4&gt;

&lt;p&gt;The best subroutines are concise&amp;ndash;usually 25-50 lines long, which is one or two average screens in height. (While &lt;em&gt;your&lt;/em&gt; screen might be 110 lines high, you will one day have to debug your code on a VT100 terminal at 3 a.m. on a Sunday.)&lt;/p&gt;

&lt;p&gt;Part of being readable also means that the code isn&amp;rsquo;t overly indented. The guidelines for the Linux kernel code include a statement that all code should be less 80 characters wide and that indentations should be eight characters wide. This is to discourage more than three levels of indentation. It&amp;rsquo;s too hard to follow the logic flows with any more than that.&lt;/p&gt;

&lt;h4 id=&#34;well-defined-interfaces&#34;&gt;Well-Defined Interfaces&lt;/h4&gt;

&lt;p&gt;This means that you know all of the inputs and all of the outputs. Doing this allows you to muck with either side of this wall and, so long as you keep to the contract, you have a &lt;em&gt;guarantee&lt;/em&gt; that the code on the other side of the interface will be safe from harm. This is also critical to good testing. By having a solid interface, you can write test suites to validate both the subroutine and to mock the subroutine to test the code that uses it.&lt;/p&gt;

&lt;h4 id=&#34;strong-internal-cohesion&#34;&gt;Strong Internal Cohesion&lt;/h4&gt;

&lt;p&gt;Internal cohesion is about how strongly the lines of code within the subroutine relate to one another. Ideally, a subroutine does one thing and only one thing. This means that someone calling the subroutine can be confident that it will do only what they want to have done.&lt;/p&gt;

&lt;h4 id=&#34;loose-external-coupling&#34;&gt;Loose External Coupling&lt;/h4&gt;

&lt;p&gt;This means that changes to code outside of the subroutine will not affect how the subroutine performs, and vice versa. This allows you to make changes within the subroutine safely. This is also known as having no side effects.&lt;/p&gt;

&lt;p&gt;As an example, a loosely coupled subroutine should not access global variables unnecessarily. Proper scoping is critical for any variables you create in your subroutine, using the &lt;code&gt;my&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;This also means that a subroutine should be able to run without depending upon other subroutines to be run before or after it. In functional programming, this means that the function is &lt;em&gt;stateless&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Perl has global special variables (such as &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;@_&lt;/code&gt;, &lt;code&gt;$?&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt;, and &lt;code&gt;$!&lt;/code&gt;). If you modify them, be sure to localize them with the &lt;code&gt;local&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h3 id=&#34;what-should-i-call-it&#34;&gt;What Should I Call It?&lt;/h3&gt;

&lt;p&gt;Naming things well is important for all parts of your code. With subroutines, it&amp;rsquo;s even more important. A subroutine is a chunk of work described to the reader only by its name. If the name is too short, no one knows what it means. If the name is too long, then it&amp;rsquo;s too hard to understand and potentially difficult to type. If the name is too specific, you will confuse the reader when you call it for more general circumstances.&lt;/p&gt;

&lt;p&gt;Subroutine names should flow when read out loud: &lt;code&gt;doThis()&lt;/code&gt; for actions and &lt;code&gt;is_that()&lt;/code&gt; for Boolean checks. Ideally, a subroutine name should be &lt;code&gt;verbNoun()&lt;/code&gt; (or &lt;code&gt;verb_noun()&lt;/code&gt;). To test this, take a section of your code and read it out loud to your closest non-geek friend. When you&amp;rsquo;re done, ask them what that piece of code should do. If they have no idea, your subroutines (and variables) may have poor names. (I&amp;rsquo;ve provided examples in two forms, &amp;ldquo;camelCase&amp;rdquo; and &amp;ldquo;under_score.&amp;rdquo; Some people prefer one way and some prefer the other. As long as you&amp;rsquo;re consistent, it doesn&amp;rsquo;t matter which you choose.)&lt;/p&gt;

&lt;h3 id=&#34;what-else-can-i-do&#34;&gt;What Else Can I Do?&lt;/h3&gt;

&lt;p&gt;(This section assumes a strong grasp of Perl fundamentals, especially hashes and references.)&lt;/p&gt;

&lt;p&gt;Perl is one of a class of languages that allows you to treat subroutines as first-class objects. This means you can use subroutines in nearly every place you can use a variable. This concept comes from functional programming (FP), and is a very powerful technique.&lt;/p&gt;

&lt;p&gt;The basic building block of FP in Perl is the reference to a subroutine, or &lt;code&gt;subref&lt;/code&gt;. For a named subroutine, you can say &lt;code&gt;my $subref = \&amp;amp;foobar;&lt;/code&gt;. You can then say &lt;code&gt;$subref-&amp;gt;(1, 2)&lt;/code&gt; and it will be as if you said &lt;code&gt;foobar(1, 2)&lt;/code&gt;. A subref is a regular scalar, so you can pass it around as you can any other reference (say, to an array or hash) and you can put them into arrays and hashes. You can also construct them anonymously by saying &lt;code&gt;my $subref = sub { ... };&lt;/code&gt; (where the &lt;code&gt;...&lt;/code&gt; is the body of the subroutine).&lt;/p&gt;

&lt;p&gt;This provides several very neat options.&lt;/p&gt;

&lt;h4 id=&#34;closures&#34;&gt;Closures&lt;/h4&gt;

&lt;p&gt;Closures are the main building blocks for using subroutines in functional programming. A closure is a subroutine that remembers its lexical scratchpad. In English, this means that if you take a reference to a subroutine that uses a &lt;code&gt;my&lt;/code&gt; variable defined outside of it, it will remember the value of that variable when it was defined and be able to access it, even if you use the subroutine outside of the scope of that variable.&lt;/p&gt;

&lt;p&gt;There are two main variations of closures you see in normal code. The first is a named closure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    my $counter = 0;
    sub inc_counter { return $counter++ }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you call &lt;code&gt;inc_counter()&lt;/code&gt;, you&amp;rsquo;re obviously out of scope for the &lt;code&gt;$counter&lt;/code&gt; variable. Yet, it will increment the counter and return the value as if it were in scope.&lt;/p&gt;

&lt;p&gt;This is a very good way to handle global state, if you&amp;rsquo;re uncomfortable with object-oriented programming. Just extend the idea to multiple variables and have a getter and setter for each one.&lt;/p&gt;

&lt;p&gt;The second is an anonymous closure.&lt;/p&gt;

&lt;h4 id=&#34;recursion&#34;&gt;Recursion&lt;/h4&gt;

&lt;p&gt;Many recursive functions are simple enough that they do not need to keep any state. Those that do are more complicated, especially if you want to be able to call the function more than once at a time. Enter anonymous subroutines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub recursionSetup {
    my ($x, $y) = @_;

    my @stack;

    my $_recurse = sub {
        my ($foo, $bar) = @_;

        # Do stuff here with $x, $y, and @stack;
    };
    my $val = $_recurse-&amp;gt;( $x, $y );

    return $val;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;inner-subroutines&#34;&gt;Inner Subroutines&lt;/h4&gt;

&lt;p&gt;Subroutine definitions are global in Perl. This means that Perl doesn&amp;rsquo;t have inner subroutines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo {
    sub bar {
    }

    # This bar() should only be accessible from within foo(),
    # but it is accessible from everywhere
    bar():
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter anonymous subroutines again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo {
    my $bar = sub {
    };

    # This $bar is only accessible from within foo()
    $bar-&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dispatch-tables&#34;&gt;Dispatch Tables&lt;/h4&gt;

&lt;p&gt;Often, you need to call a specific subroutine based some user input. The first attempts to do this usually look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( $input eq &#39;foo&#39; ) {
    foo( @params );
}
elsif ( $input eq &#39;bar&#39; ) {
    bar( @params );
}
else {
    die &amp;quot;Cannot find the subroutine &#39;$input&#39;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, some enterprising soul learns about soft references and tries something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;{ $input }( @params );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s unsafe, because you don&amp;rsquo;t know what &lt;code&gt;$input&lt;/code&gt; will to contain. You cannot guarantee &lt;em&gt;anything&lt;/em&gt; about it, even with taint and all that jazz on. It&amp;rsquo;s much safer just to use dispatch tables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %dispatch = (
    foo =&amp;gt; sub { ... },
    bar =&amp;gt; \&amp;amp;bar,
);

if ( exists $dispatch{ $input } ) {
    $dispatch{ $input }-&amp;gt;( @params );
}
else {
    die &amp;quot;Cannot find the subroutine &#39;$input&#39;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding and removing available subroutines is simpler than the &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;elsif&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; scenario, and this is much safer than the soft references scenario. It&amp;rsquo;s the best of both worlds.&lt;/p&gt;

&lt;h4 id=&#34;subroutine-factories&#34;&gt;Subroutine Factories&lt;/h4&gt;

&lt;p&gt;Often, you will have many subroutines that look very similar. You might have accessors for an object that differ only in which attribute they access. Alternately, you might have a group of mathematical functions that differ only in the constants they use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub make_multiplier { 
    my ($multiplier) = @_;

    return sub {
        my ($value) = @_;
        return $value * $multiplier;
    };
}

my $times_two  = make_multiplier( 2 );
my $times_four = make_multiplier( 4 );

print $times_two-&amp;gt;( 6 ), &amp;quot;\n&amp;quot;;
print $times_four-&amp;gt;( 3 ), &amp;quot;\n&amp;quot;;

----

12
12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try that code and see what it does. You should see the values below the dotted line.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Subroutines are arguably the most powerful tool in a programmer&amp;rsquo;s toolbox. They provide the ability to reuse sections of code, validate those sections, and create new algorithms that solve problems in novel ways. They will reduce the amount of time you spend programming, yet allow you to do more in that time. They will reduce the number of bugs in your code ten-fold, and allow other people to work with you while feeling safe about it. They truly are programming&amp;rsquo;s super-tool.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

