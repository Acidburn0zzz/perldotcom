<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Template Toolkit on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/template-toolkit/</link>
    <description>Recent content in Template Toolkit on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2018 10:36:08 +0000</lastBuildDate>
    <atom:link href="/tags/template-toolkit/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl and CGI</title>
      <link>http://localhost:1313/article/perl-and-cgi/</link>
      <pubDate>Mon, 12 Nov 2018 10:36:08 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-and-cgi/</guid>
      <description>

&lt;p&gt;CGI stands for &lt;a href=&#34;https://tools.ietf.org/html/rfc3875#section-6.2.1&#34;&gt;Common Gateway Interface&lt;/a&gt;, it&amp;rsquo;s a protocol for executing scripts via web requests, and in the late 1990&amp;rsquo;s was the main way to write dynamic programs for the Web. It&amp;rsquo;s also the name of the Perl &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;module&lt;/a&gt; we used (and for me, still use) to code for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; you probably don&amp;rsquo;t want to use CGI for modern web development, see &lt;a href=&#34;#why-not-to-use-cgi&#34;&gt;Why Not to Use CGI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-and-http&#34;&gt;CGI and HTTP&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of HTTP (HyperText Transfer Protocol), which is the communications protocol used by most Internet services. Broadly speaking, CGI programs receive HTTP requests, and return HTTP responses. An HTTP response header must include the status and the content-type. CGI (the interface) makes this easy.&lt;/p&gt;

&lt;p&gt;We could hardcode a Perl script to return an HTTP response header and HTML in the body:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
Status: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But CGI.pm can handle the header for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you don&amp;rsquo;t have to just send HTML text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
This is now text
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that is not the limit, by far. The content-type is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;Multipurpose Internet Mail Extension (MIME) type&lt;/a&gt;, and it determines how the browser handles the message once it returns. The above example treats the &amp;ldquo;This is now text&amp;rdquo; message as text, and displays it as such. If the content-type was &amp;ldquo;text/html&amp;rdquo;, it would be parsed for HTML like a web page. If it was &amp;ldquo;application/json&amp;rdquo;, it might be displayed like text, or formatted into a browsable form, depending on your browser or extensions. If it was &amp;ldquo;application/vnd.ms-excel&amp;rdquo; or even &amp;ldquo;text/csv&amp;rdquo;, the browser would likely open in in Excel or another spreadsheet program, or possibly directly into a gene sequencer, like happens to those I generate at work.&lt;/p&gt;

&lt;p&gt;And, if the program was this &amp;ndash;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpg&amp;#39;&lt;/span&gt; );
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/user/images/author/dave-jacoby.jpg&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$img&amp;gt;&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;ndash; you would get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/author/dave-jacoby.jpg&#34; alt=&#34;/images/author/dave-jacoby.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;processing-input&#34;&gt;Processing input&lt;/h2&gt;

&lt;p&gt;The first way to pass data is with the query string, (the portion of a URI beginning with &lt;code&gt;?&lt;/code&gt;), which you see in URLs like &lt;code&gt;https://example.com/?foo=bar&lt;/code&gt;. This uses the &amp;ldquo;GET&amp;rdquo; request method, and becomes available to the program as &lt;code&gt;$ENV-&amp;gt;{QUERY_STRING}&lt;/code&gt;, which in this case is &lt;code&gt;foo=bar&lt;/code&gt; (CGI programs receive their arguments as environment variables). But CGI provides the &lt;code&gt;param&lt;/code&gt; method which parses the query string into key value pairs, so you can work with them like a hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param($_) } $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param() ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qq{PARAM:\N}&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $k ( sort keys %param ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, $k, $param{$k};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;# PARAM:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# foo: bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, now, let&amp;rsquo;s make a web page like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/url/of/simple.cgi&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And click submit. The browser will send an HTTP &amp;ldquo;POST&amp;rdquo; request, with the form input as key value pairs in the request body. CGI handles this and places the data in &lt;code&gt;$cgi-&amp;gt;param&lt;/code&gt;, just like with &amp;ldquo;GET&amp;rdquo;. Only, with &amp;ldquo;POST&amp;rdquo; the size of input can be much larger (URL&amp;rsquo;s are generally limited to 2048 bytes by browsers).&lt;/p&gt;

&lt;h2 id=&#34;generating-html&#34;&gt;Generating HTML&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make that form above, using the HTML-generation techniques that come with CGI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output;
$output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start_form(
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/simple.cgi&amp;#34;&lt;/span&gt;
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;textfield( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_form;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with this, is the code to generate HTML with CGI can get very long and unreadable. The maintainers of CGI agree, which is why this is at the top of &lt;a href=&#34;https://metacpan.org/pod/CGI#HTML-Generation-functions-should-no-longer-be-used&#34;&gt;the documentation for CGI.pm&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All HTML generation functions within CGI.pm are no longer being maintained. [&amp;hellip;] The rationale for this is that the HTML generation functions of CGI.pm are an obfuscation at best and a maintenance nightmare at worst. You should be using a template engine for better separation of concerns. See &lt;a href=&#34;https://metacpan.org/pod/CGI::Alternatives&#34;&gt;CGI::Alternatives&lt;/a&gt; for an example of using CGI.pm with the &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Template Toolkit, that form might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Template;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;DATA&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/url/of/program&amp;#39;&lt;/span&gt;} ;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;
$template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;process(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$input,$data)
    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Template process failed&amp;#34;&lt;/span&gt;, $template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error();

__DATA__
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[% action %]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use Template Toolkit for all my server-side web work. It&amp;rsquo;s also the default in many of Perl&amp;rsquo;s web frameworks.&lt;/p&gt;

&lt;h2 id=&#34;configuring-cgi-on-apache&#34;&gt;Configuring CGI on Apache&lt;/h2&gt;

&lt;p&gt;To use CGI, your web server should have &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_cgi.html&#34;&gt;mod_cgi&lt;/a&gt; installed. Once installed, you will have to to configure your server to execute CGI programs.&lt;/p&gt;

&lt;p&gt;The first way is to have &lt;code&gt;cgi-bin&lt;/code&gt; directories where every file gets executed instead of transferred.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www/cgi-bin&amp;quot;&amp;gt;
    Options ExecCGI
    SetHandler cgi-script
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other is to allow CGI to be enabled per directory, with a configuration that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www&amp;quot;&amp;gt;
    Options +ExecCGI
    AddHandler cgi-script .cgi
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add a &lt;code&gt;.htaccess&lt;/code&gt; file in each directory that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler cgi-script .cgi
Options +ExecCGI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that &lt;code&gt;foo.pl&lt;/code&gt; will transfer but &lt;code&gt;foo.cgi&lt;/code&gt; will run, even if both are executable.&lt;/p&gt;

&lt;h2 id=&#34;why-not-to-use-cgi&#34;&gt;Why not to use CGI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg202130.html&#34;&gt;In May 2013, Ricardo Signes, then Perl5 Pumpking, sent this to the Perl5 Porters list&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it&amp;rsquo;s time to seriously consider removing CGI.pm from the core distribution. It is no longer what I&amp;rsquo;d point &lt;em&gt;anyone&lt;/em&gt; at for writing &lt;em&gt;any&lt;/em&gt; sort of web code. It is in the core, as far as I know, because once it was the state of the art, and a major reason for many people to use the language. I don&amp;rsquo;t think either is true now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was marked deprecated with 5.20 and removed from Core with 5.22. This is not catastrophic; it is still available in CPAN, so you would have to install it, or have your administrator install it, depending on your circumstances.&lt;/p&gt;

&lt;p&gt;So, why did CGI drop from &amp;ldquo;state of the art&amp;rdquo; to discouraged by its own maintainers?&lt;/p&gt;

&lt;p&gt;There are two big issues with CGI: speed and complexity. Every HTTP request triggers the forking of a new process on the web server, which is costly for server resources. A more efficient and faster way is to use a multi-process daemon which does its forking on startup and maintains a pool of processes to handle requests.&lt;/p&gt;

&lt;p&gt;CGI isn&amp;rsquo;t good at managing the complexity of larger web applications: it has no MVC architecture to help developers separate concerns. This tends to lead to hard-to-maintain programs.&lt;/p&gt;

&lt;p&gt;The rise of web frameworks such as Ruby on Rails, and the application servers they run on, have done much to solve both problems. There are many web frameworks written in Perl; among the most popular are &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Manual&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CGI also contains a security &lt;a href=&#34;https://metacpan.org/pod/distribution/CGI/lib/CGI.pod#Fetching-the-value-or-values-of-a-single-named-parameter&#34;&gt;vulnerability&lt;/a&gt; which must be coded around to avoid parameter injection.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;good&amp;rdquo; parts of CGI.pm, the header creation and parameter parsing, are well-explained in the module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;documentation&lt;/a&gt;. As for the deprecated HTML generation functions, they are documented &lt;a href=&#34;https://metacpan.org/pod/CGI::HTML::Functions&#34;&gt;separately&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lincoln Stein, the creator of CGI.pm also wrote the &lt;a href=&#34;https://www.amazon.com/Official-Guide-Programming-CGI-pm-Lincoln/dp/0471247448&#34;&gt;Official Guide&lt;/a&gt;. The book is 20 years old, and out of date but remains a clear and concise resource about CGI.pm.&lt;/p&gt;

&lt;p&gt;Lee Johnson, the current maintainer of CGI.pm wrote a long form blog &lt;a href=&#34;https://leejo.github.io/2016/02/22/all_software_is_legacy/&#34;&gt;post&lt;/a&gt; about the history of CGI, its current state and future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How We Wrote the Template Toolkit Book ...</title>
      <link>http://localhost:1313/pub/2004/01/30/ttbook.html/</link>
      <pubDate>Fri, 30 Jan 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/01/30/ttbook.html/</guid>
      <description>

&lt;p&gt;There are a number of tools available for writing books. Many people would immediately reach for their favorite word processor, but having written one book using Microsoft Word I&amp;rsquo;m very unlikely to repeat the experience. Darren Chamberlain, Andy Wardley, and I are all Perl hackers, so when we got together to write &lt;a href=&#34;http://www.oreilly.com/catalog/perltt/index.html?CMP=IL7015&#34;&gt;Perl Template Toolkit&lt;/a&gt;, it didn&amp;rsquo;t take us long to agree that we wanted to write it using POD (Plain Old Documentation).&lt;/p&gt;

&lt;p&gt;Of course, any chosen format has its pros and cons. With POD we had all the advantages of working with plain text files and all of the existing POD tools were available to convert our text into various other formats, but there were also some disadvantages. These largely stem from the way that books (especially technical books) are written. Authors rarely write the chapters in the order in which they are published in the finished book. In fact, it&amp;rsquo;s very common for the chapters to rearranged a few times before the book is published.&lt;/p&gt;

&lt;p&gt;Now this poses a problem with internal references. It&amp;rsquo;s all very well saying &amp;ldquo;see chapter Six for further details&amp;rdquo;, but when the book is rearranged and Chapter Six becomes Chapter Four, all of these references are broken. Most word processors will allow you to insert these references as &amp;ldquo;tags&amp;rdquo; that get expanded (correctly) as the document is printed. POD and emacs doesn&amp;rsquo;t support this functionality.&lt;/p&gt;

&lt;p&gt;Another common problem with technical books is the discrepancy between the code listings in the book and the code that actually got run to produce the output shown. It&amp;rsquo;s easily done. You create an example program and cut-and-paste the code into the document. You then find a subtle bug in the code and fix it in the version that you&amp;rsquo;re running but forget to fix it in the book. What would be really useful would be if you could just use tags saying &amp;ldquo;insert this program file here&amp;rdquo; and even &amp;ldquo;insert the output of running the program here&amp;rdquo;. That&amp;rsquo;s functionality that no word processor offers.&lt;/p&gt;

&lt;p&gt;Of course, these shortcomings would be simple to solve if you had a powerful templating system at the ready. Luckily Andy, Darren, and I had the Template Toolkit (TT) handy.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-book-templates-the-book-templates-span&#34;&gt;&lt;span id=&#34;The_Book_Templates&#34;&gt;The Book Templates&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We produced a series of templates that controlled the book&amp;rsquo;s structure and a Perl program that pulled together each chapter into a single POD file. This program was very similar to the &lt;code&gt;tpage&lt;/code&gt; program that comes with TT, but was specialized for our requirements.&lt;/p&gt;

&lt;h4 id=&#34;span-id-separating-code-from-code-separating-code-from-code-span&#34;&gt;&lt;span id=&#34;Separating_code_from_code&#34;&gt;Separating Code from Code&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;There was one problem we had to address very early on with our book templates. This was the problem of listing TT code within a TT template. We needed a way to distinguish the template directives we were using to produce the book from the template directives we were demonstrating &lt;em&gt;in the book&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Of course TT provides a simple way to achieve this. You can define the characters that TT uses to recognize template directives. By default it looks for &lt;code&gt;[% ... %]&lt;/code&gt;, but there are a number of predefined groups of tags that you can turn on using the &lt;code&gt;TAGS&lt;/code&gt; directive. All of our book templates started with the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% TAGS star %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When it sees this directive, the TT parser starts to look for template directives that are delimited with &lt;code&gt;[* ... *]&lt;/code&gt;. The default delimiters (&lt;code&gt;[% ... %]&lt;/code&gt;) are treated as plain text and passed through unaltered. Therefore, by using this directive we can use &lt;code&gt;[% ... %]&lt;/code&gt; in our example code and &lt;code&gt;[* ... *]&lt;/code&gt; for the template directives that we wanted TT to process.&lt;/p&gt;

&lt;p&gt;Of course, the page where we introduced the &lt;code&gt;TAGS&lt;/code&gt; directive and gave examples of its usage was still a little complex.&lt;/p&gt;

&lt;p&gt;In the rest of this article, I&amp;rsquo;ll go back to using the &lt;code&gt;[% ... %]&lt;/code&gt; style of tags.&lt;/p&gt;

&lt;h4 id=&#34;span-id-useful-blocks-and-macros-useful-blocks-and-macros-span&#34;&gt;&lt;span id=&#34;Useful_blocks_and_macros&#34;&gt;Useful Blocks and Macros&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;We defined a number of useful blocks and macros that expanded to useful phrases that would be used throughout the book. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% TT = &#39;Template Toolkit&#39;;

     versions = {
       stable = &#39;2.10&#39;
       developer = &#39;2.10a&#39;
     } %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first of these must have saved each of us many hours of typing time and the second gave us an easy way to keep the text up-to-date if Andy released a new version of TT while we were writing the book. A template using these variables might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  The current stable version of the [% TT %] is [% stable %]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;span-id-keeping-track-of-chapters-keeping-track-of-chapters-span&#34;&gt;&lt;span id=&#34;Keeping_track_of_chapters&#34;&gt;Keeping Track of Chapters&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;We used a slightly more complex set of variables and macros to solve the problem of keeping chapter references consistent. First we defined an array that contained details of the chapters (in the current order):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Chapters = [
    {  name  = &#39;intro&#39;
       title = &amp;quot;Introduction to the Template Toolkit&amp;quot;
    }
    {  name  = &#39;web&#39;
       title = &amp;quot;A Simple Web Site&amp;quot;
    }
    {  name  = &#39;language&#39;
       title = &amp;quot;The Template Language&amp;quot;
    }
    {  name  = &#39;directives&#39;
       title = &amp;quot;Template Directives&amp;quot;
    }
    {  name  = &#39;filters&#39;
       title = &amp;quot;Filters&amp;quot;
    }
    {  name  = &#39;plugins&#39;
       title = &amp;quot;Plugins&amp;quot;
    }
    ... etc ...
   ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each entry in this array is a hash with two keys. The name is the name of the directory in our source tree that contains that chapter&amp;rsquo;s files and the title is the human-readable name of the chapter.&lt;/p&gt;

&lt;p&gt;The next step is to convert this into a hash so that we can look up the details of a chapter when given its symbolic name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    FOREACH c = Chapters;
      c.number = loop.count;
      Chapter.${c.name} = c;
    END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we are adding a new key to the hash that describes a chapter. We use the &lt;code&gt;loop.count&lt;/code&gt; variable to set the chapter number. This means that we can reorder our original &lt;code&gt;Chapters&lt;/code&gt; array and the chapter numbers in the &lt;code&gt;Chapter&lt;/code&gt; hash will always remain accurate.&lt;/p&gt;

&lt;p&gt;Using this hash, it&amp;rsquo;s now simple to create a macro that lets us reference chapters. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  MACRO chref(id) BLOCK;
    THROW chapter &amp;quot;invalid chapter id: $id&amp;quot;
      UNLESS (c = Chapter.$id);
    seen = global.chapter.$id;
    global.chapter.$id = 1;
    seen ? &amp;quot;Chapter $c.number&amp;quot;
         : &amp;quot;Chapter $c.number, I&amp;lt;$c.title&amp;gt;&amp;quot;;
  END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The macro takes one argument, which is the id of the chapter (this is the unique name from the original array). If this chapter doesn&amp;rsquo;t exist in the &lt;code&gt;Chapter&lt;/code&gt; hash then the macro throws an error. If the chapter exists in the hash then the macro displays a reference to the chapter. Notice that we remember when we have seen a particular chapter (using &lt;code&gt;global.chapter.$id&lt;/code&gt;) &amp;ndash; this is because O&amp;rsquo;Reilly&amp;rsquo;s style guide says that a chapter is referenced differently the first time it is mentioned in another chapter. The first time, it is referenced as &amp;ldquo;Chapter 2, &lt;em&gt;A Simple Web Site&lt;/em&gt;&amp;rdquo;, and on subsequent references it is simply called &amp;ldquo;Chapter 2. &amp;ldquo;&lt;/p&gt;

&lt;p&gt;So with this mechanism in place, we can have templates that say things like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Plugins are covered in more detail in [% chref(plugins) %].
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And TT will convert that to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Plugins are covered in more detail in Chapter 6, I&amp;lt;Plugins&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we subsequently reorder the book again, the chapter number will be replaced with the new correct number.&lt;/p&gt;

&lt;h4 id=&#34;span-id-running-example-code-running-example-code-span&#34;&gt;&lt;span id=&#34;Running_example_code&#34;&gt;Running Example Code&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The other problem I mentioned above is that of ensuring that sample code and its output remain in step. The solution to this problem is a great example of the power of TT.&lt;/p&gt;

&lt;p&gt;The macro that inserts an example piece of code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  MACRO example(file, title) BLOCK;
    global.example = global.example + 1;
    INCLUDE example
      title = title or &amp;quot;F&amp;lt;$file&amp;gt;&amp;quot;
      id    = &amp;quot;$chapter.id/example/$file&amp;quot;
      file  = &amp;quot;example/$file&amp;quot;
      n     = global.example;
    global.exref.$file = global.example;
  END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The macro takes two arguments, the name of the file containing the example code and (optionally) a title for the example. If the title is omitted then the filename is used in its place. All of the examples in a particular chapter are numbered sequentially and the &lt;code&gt;global.example&lt;/code&gt; variable holds the last used value, which we increment. The macro then works out the path of the example file (the structure of our directory tree is very strict) and &lt;code&gt;INCLUDE&lt;/code&gt;s a template called &lt;code&gt;example&lt;/code&gt;, passing it various information about the example file. After processing the example, we store the number that is associated with this example by storing it in the hash &lt;code&gt;global.exref.$file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;example&lt;/code&gt; template looks like this:&lt;/p&gt;

&lt;p&gt;[% IF publishing -%] =begin example [% title %]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      Z&amp;lt;[% id %]&amp;gt;[% INSERT $file FILTER indent(4) +%]

  =end
  [% ELSE -%]
  B&amp;lt;Example [% n %]: [% title %]&amp;gt;

  [% INSERT $file FILTER indent(4) +%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[% END -%]&lt;/p&gt;

&lt;p&gt;This template looks at a global flag called &lt;code&gt;publishing&lt;/code&gt;, which determines if we are processing this file for submission to O&amp;rsquo;Reilly or just for our own internal use. The &lt;code&gt;Z&amp;lt; ... &amp;gt;&lt;/code&gt; POD escape is an O&amp;rsquo;Reilly extension used to identify the destination of a link anchor (we&amp;rsquo;ll see the link itself later on). Having worked out how to label the example, the template simply inserts it and indents it by four spaces.&lt;/p&gt;

&lt;p&gt;This template is used within our chapter template by adding code like &lt;code&gt;[% example(&#39;xpath&#39;, &#39;Processing XML with XPath&#39;) %]&lt;/code&gt; to your document. That will be expanded to something like, &amp;ldquo;Example 2: Processing XML with Xpath,&amp;rdquo; followed by the source of the example file, &lt;code&gt;xpath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of that gets the example code into that document. We now have to do two other things. We need to be able to reference the code from the text of the chapter (&amp;lsquo;As example 3 demonstrates&amp;hellip;&amp;rsquo;), and we also need to include the results of running the code.&lt;/p&gt;

&lt;p&gt;For the first of these there is a macro called &lt;code&gt;exref&lt;/code&gt;, which is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  MACRO exref(file) BLOCK;
    # may be a forward reference to next example
    SET n = global.example + 1
      UNLESS (n = global.exref.$file);
    INCLUDE exref
      id    = &amp;quot;$chapter.id/example/$file&amp;quot;;
  END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works in conjunction with another template, also called &lt;code&gt;exref&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% IF publishing -%]
  A&amp;lt;[% id %]&amp;gt;
  [%- ELSE -%]
  example [% n %]
  [%- END -%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The clever thing about this is that you can use it &lt;em&gt;before&lt;/em&gt; you have included the example code. So you can do things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  This is demonstrated in [% exref(&#39;xpath&#39;) %].

  [% example(&#39;xpath&#39;, &#39;Processing XML with XPath&#39;) %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as you only look at a maximum of one example ahead, it still works. Notice that the &lt;code&gt;A&amp;lt; ... &amp;gt;&lt;/code&gt; POD escape is another O&amp;rsquo;Reilly extension that marks a link anchor. So within the O&amp;rsquo;Reilly publishing system it&amp;rsquo;s the &lt;code&gt;A&amp;lt;foo&amp;gt;&lt;/code&gt; and the associated &lt;code&gt;Z&amp;lt;foo&amp;gt;&lt;/code&gt; that make the link between the reference and the actual example code.&lt;/p&gt;

&lt;p&gt;The final thing we need is to be able to run the example code and insert the output into the document. For this we defined a macro called &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  MACRO output(file) BLOCK;
    n = global.example;
    &amp;quot;B&amp;lt;Output of example $n:&amp;gt;\n\n&amp;quot;;
    INCLUDE &amp;quot;example/$file&amp;quot; FILTER indent(4);
  END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty simple. The macro is passed the name of the example file. It assumes that this is the most recent example included in the document so it gets the example number from &lt;code&gt;global.example&lt;/code&gt;. It then displays a header and &lt;code&gt;INCLUDE&lt;/code&gt;s the file. Notice that the major difference between &lt;code&gt;example&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; is that &lt;code&gt;example&lt;/code&gt; uses &lt;code&gt;INSERT&lt;/code&gt; to just insert the file&amp;rsquo;s contents, whereas &lt;code&gt;output&lt;/code&gt; uses &lt;code&gt;INCLUDE&lt;/code&gt;, which loads the file and processes it.&lt;/p&gt;

&lt;p&gt;With all of these macros and templates, we can now have example code in our document and be sure that the output we show really reflects the output that you would get by running that code. So we can put something like this in the document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  The use of GET and SET is demonstrated in [% exref(&#39;get_set&#39;) %].

  [% example(&#39;get_set&#39;, &#39;GET and SET&#39;) %]

  [% output(&#39;get_set&#39;) %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that will be expanded to the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  The use of GET and SET is demonstrated in example 1.

  B&amp;lt;Example 1: GET and SET&amp;gt;

      [% SET foo = &#39;bar -%]
      The variable foo is set to &amp;quot;[% GET foo %]&amp;quot;.

  B&amp;lt;Output of example 1:

      The variable foo is set to &amp;quot;bar&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As another bonus, all of the example code is neatly packaged away in individual files that can easily be made into a tarball for distribution from the book&amp;rsquo;s web site.&lt;/p&gt;

&lt;h4 id=&#34;span-id-other-templates-blocks-and-macros-other-templates-blocks-and-macros-span&#34;&gt;&lt;span id=&#34;Other_templates,_blocks_and_macros&#34;&gt;Other Templates, Blocks, and Macros&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Once we started creating these timesaving templates, we found a huge numbers of areas where we could make our lives easier. We had macros that inserted references to other books in a standard manner, macros for inserting figures and screenshots, as well as templates that ensured that all our chapters had the same standard structure and warned us if any of the necessary sections were missing. I&amp;rsquo;m convinced that the TT templates we wrote for the project saved us all a tremendous amount of time that would have otherwise been spent organizing and reorganizing the work of the three authors. I would really recommend a similar approach to other authors.&lt;/p&gt;

&lt;p&gt;The Template Toolkit is often seen as a tool for building web sites, but we have successfully demonstrated one more non-Web area where the Template Toolkit excels.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

