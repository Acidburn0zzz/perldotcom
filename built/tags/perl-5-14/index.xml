<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 5 14 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-5-14/</link>
    <description>Recent content in Perl 5 14 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 May 2011 15:08:19 -0800</lastBuildDate>
    <atom:link href="/tags/perl-5-14/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>New Features of Perl 5.14: Non-destructive Substitution</title>
      <link>http://localhost:1313/pub/2011/05/new-features-of-perl-514-non-destructive-substitution.html/</link>
      <pubDate>Wed, 18 May 2011 15:08:19 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/05/new-features-of-perl-514-non-destructive-substitution.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://news.perlfoundation.org/2011/05/perl-514.html&#34;&gt;Perl 5.14 is now available&lt;/a&gt;. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features.&lt;/p&gt;

&lt;p&gt;One such feature is non-destructive substitution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use 5.014;

    my $greeting  = &#39;Hello, world!&#39;;

    # be more elite
    say $greeting =~ tr/aeiou/4310V/r;

    # then run away
    say $greeting =~ s/Hello/Goodbye/r;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new &lt;code&gt;/r&lt;/code&gt; modifier to the substitution and transliteration operators causes Perl to return the modified string, rather than modifying the original string in place. This replaces the idiomatic but unwieldy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my  $greeting  = &#39;Hello, world!&#39;;
    my ($leetgreet = $greeting) =~ tr/aeiou/4310V/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature is even more useful for avoiding two common problems with substitutions in &lt;code&gt;map&lt;/code&gt; expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { s/foo/BAR/ } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only does the substitution modify the values of &lt;code&gt;@original&lt;/code&gt; in place, but the substitution returns a true value if the substitution succeeded and a false value otherwise. While that code &lt;em&gt;looks&lt;/em&gt; correct, it&amp;rsquo;s very subtly wrong. The corrected version of this code in Perl 5.12 or earlier is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { my $copy = $_; $copy =~ s/foo/BAR/; $copy } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.14 requires the addition of a single character to produce the intended behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { s/foo/BAR/r } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;code&gt;perldoc perlop&lt;/code&gt; for documentation of the &lt;code&gt;/r&lt;/code&gt; modifier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features of Perl 5.14: package BLOCK</title>
      <link>http://localhost:1313/pub/2011/05/new-features-of-perl-514-package-block.html/</link>
      <pubDate>Mon, 16 May 2011 11:31:25 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/05/new-features-of-perl-514-package-block.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://news.perlfoundation.org/2011/05/perl-514.html&#34;&gt;Perl 5.14 is now available&lt;/a&gt;. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features. This series of articles provides a quick introduction to several of these features.&lt;/p&gt;

&lt;p&gt;One such feature is the package BLOCK syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package My::Class
    {
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you declare a package, you may now provide a block at the end of the declaration. Within that block, the current namespace will be the provided package name. Outside of that block, the previously effective namespace will be in effect. The block provides normal lexical scoping, so that any lexical variables declared within the block will be visible only inside the block. As well, any lexical pragmas will respect the block&amp;rsquo;s scoping.&lt;/p&gt;

&lt;p&gt;You do not need a trailing semicolon after the closing curly brace.&lt;/p&gt;

&lt;p&gt;You may combine this with the package VERSION syntax introduced in Perl 5.12:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package My::Class v2011.05.16
    {
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VERSION must be an integer, a real number (with a single decimal), or a dotted-decimal v-string as shown in the previous example. When present, the VERSION declaration sets the package-scoped &lt;code&gt;$VERSION&lt;/code&gt; variable within the given namespace to the provided value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc -f package&lt;/code&gt; documents this syntax.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

