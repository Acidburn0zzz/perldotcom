<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vm Development on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/vm-development/</link>
    <description>Recent content in Vm Development on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/vm-development/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week in Perl 6, August 17-23, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050825.html/</link>
      <pubDate>Thu, 25 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050825.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another Monday summary, which hopefully provides some evidence that Mondays can get better. It always feels like writing summaries is an uphill battle, so perhaps I should switch to writing about &lt;em&gt;Perl 6 Language&lt;/em&gt; first and &lt;em&gt;Perl 6 Compilers&lt;/em&gt; last. Then it will be downhill&amp;ndash;maybe next time.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;&lt;em&gt;Perl 6 Compilers&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;more-random-pictures-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-5df6d5df1f7334c9-b37e4512b56d673a-b37e4512b56d673a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/5df6d5df1f7334c9/b37e4512b56d673a#b37e4512b56d673a&#34;&gt;More Random Pictures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted links to two more images he had created. This time the images were not about Pugs, but were just kind of cute. He also provided an explanation of one when prompted.&lt;/p&gt;

&lt;h4 id=&#34;methods-as-functions-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-991210418285b790-764485d7f50ba0d6-764485d7f50ba0d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/991210418285b790/764485d7f50ba0d6#764485d7f50ba0d6&#34;&gt;Methods as Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu noticed that it was impossible to use a method of one argument as a function. Autrijus offered Yiyi a commit bit, but also kindly posted the resolution to &lt;em&gt;Perl 6 Language&lt;/em&gt;. Thanks, Autrijus!&lt;/p&gt;

&lt;h4 id=&#34;methods-on-code-blocks-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-27b84b1000158dea-c8c3fa783e9e12ff-c8c3fa783e9e12ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/27b84b1000158dea/c8c3fa783e9e12ff#c8c3fa783e9e12ff&#34;&gt;Methods on Code Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu discovered that &lt;code&gt;{ a b c }.pairs&lt;/code&gt; would cause Pugs to spin out of control. Luke Palmer fixed it. Hopefully one of the two of them added a test.&lt;/p&gt;

&lt;h4 id=&#34;autrijus-secret-sauce-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-02299ab5870973c4-8e32342c5609a396-8e32342c5609a396&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/02299ab5870973c4/8e32342c5609a396#8e32342c5609a396&#34;&gt;Autrijus&amp;rsquo; Secret Sauce&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kris Bosland asked a few question I have been wondering about Autrijus&amp;rsquo; new graphics. Autrijus kindly provided the answers.&lt;/p&gt;

&lt;h4 id=&#34;documentation-attack-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-8bd2f4f42b70f313-61b3de1e503a2079-61b3de1e503a2079&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8bd2f4f42b70f313/61b3de1e503a2079#61b3de1e503a2079&#34;&gt;Documentation Attack&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew has decided the best way for him to delurk is to update documentation for Pugs. Dudley Flanders and chromatic both provided support, information, and suggestions for him.&lt;/p&gt;

&lt;h4 id=&#34;neko-vm-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e2bdf956e1e221a1-72f5247ee7649c7f-72f5247ee7649c7f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e2bdf956e1e221a1/72f5247ee7649c7f#72f5247ee7649c7f&#34;&gt;Neko VM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicolas Cannasse announced his release of a high-level, multi-language VM and wondered what others thought of creating a Perl 6-to-Neko compiler. Autrijus and Leo provided a few corrections and comments.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;the-faq-she-is-gone-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2cbcd0b56016f39e-f603de821bd82788-f603de821bd82788&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2cbcd0b56016f39e/f603de821bd82788#f603de821bd82788&#34;&gt;The FAQ, She is &lt;em&gt;Gone&lt;/em&gt;!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amias Channer noticed that the FAQ on &lt;em&gt;parrotcode.org&lt;/em&gt; was gone. While no one responded, the FAQ appears to be back.&lt;/p&gt;

&lt;h4 id=&#34;platform-specific-c-files-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a1a2585585948a0e-1e57f5a3d76d39be-1e57f5a3d76d39be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a1a2585585948a0e/1e57f5a3d76d39be#1e57f5a3d76d39be&#34;&gt;Platform-Specific C Files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stephen Hill wanted to know where to put a platform-specific C file to provide missing functionality. Leo provided a few friendly pointers.&lt;/p&gt;

&lt;h4 id=&#34;tclarray-get-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ef0a4c8f958ef68a-1b62eeff558fafbf-1b62eeff558fafbf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ef0a4c8f958ef68a/1b62eeff558fafbf#1b62eeff558fafbf&#34;&gt;&lt;code&gt;TclArray.get&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amos Robinson provided an implementation of &lt;code&gt;get&lt;/code&gt; for &lt;code&gt;TclArray&lt;/code&gt;. Will gratefully applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;icu-being-passed-up-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d4d70231f322b5a7-09a158e118872b35-09a158e118872b35&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d4d70231f322b5a7/09a158e118872b35#09a158e118872b35&#34;&gt;ICU Being Passed Up&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck wondered if &lt;em&gt;Configure.pl&lt;/em&gt; was passing up ICU. Warnock applied, so Adrian took matter into his own hands by providing a possible solution. Jerry Gay offered to take ownership of the problem if no ICU-enabled soul picked it up. There have been no progress reports since then, though.&lt;/p&gt;

&lt;h4 id=&#34;java-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fb87be7c89a064fd-695419f2c8dff8ff-utoken-6-o-zdcaaadwxq4ss-whfjzzhfxvem0yxapkbptx7zz7xn9-upzohci8neeoqevuhyvpyhchj-rs3vgheuc2bmy-beoegim&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fb87be7c89a064fd/695419f2c8dff8ff?utoken=6-o-ZDcAAADWXQ4sS--whFjzzhFxvEM0yxapKbptX7zZ7xn9_uPzOhCI8nEEOQevUhyvpyHCHJ_Rs3VGheUC2BMy_BEOeGIM&#34;&gt;Java on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce asked some preliminary questions about running Java with Parrot. I provide preliminary answers, and Nattfodd and Autrijus posted links to related work. The important question of what to call it remained unraised. I vote for &amp;ldquo;Jot.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;gdbmhash-t-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfa8a4023a1c428b-04198072ba7640e3-04198072ba7640e3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfa8a4023a1c428b/04198072ba7640e3#04198072ba7640e3&#34;&gt;&lt;em&gt;gdbmhash.t&lt;/em&gt; Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce noticed that &lt;em&gt;gdbmhash.t&lt;/em&gt; was failing with an unhelpful error message. Andy Dougherty provided a patch that made the error message slightly more helpful. Jerry Gay applied it.&lt;/p&gt;

&lt;h4 id=&#34;begin-blocks-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e368bdce610d3a36-6d17bfa68979833b-6d17bfa68979833b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e368bdce610d3a36/6d17bfa68979833b#6d17bfa68979833b&#34;&gt;&lt;code&gt;BEGIN&lt;/code&gt; Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted some &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bca89d6f066ff4d5/ff59334843ed8a09#ff59334843ed8a09&#34;&gt;thoughts and information about &lt;code&gt;BEGIN&lt;/code&gt; blocks in Perl 6 and the &lt;code&gt;@IMMEDIATE&lt;/code&gt; pragma in PIR&lt;/a&gt;. It involved creating constant PMCs and freezing them into the bytecode. Then he made it work.&lt;/p&gt;

&lt;h4 id=&#34;amber-for-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-838867df299aa9d5-50d2592e48e9fca6-50d2592e48e9fca6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/838867df299aa9d5/50d2592e48e9fca6#50d2592e48e9fca6&#34;&gt;Amber for Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Citing chatter overheard on its intelligence networks, Parrot raised the terror alert to Amber, or maybe Roger Browne released version 0.2.3 of his &amp;ldquo;Eiffel-like&amp;rdquo; scripting language, Amber. I can never keep track of these things.&lt;/p&gt;

&lt;h4 id=&#34;tcl-parray-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-50d7bf4bc9de1965-98355c62212be267-98355c62212be267&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/50d7bf4bc9de1965/98355c62212be267#98355c62212be267&#34;&gt;Tcl &lt;code&gt;parray&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amos Robinson offered to provide an implementation of Tcl&amp;rsquo;s &lt;code&gt;parray&lt;/code&gt;, including tests. Will wanted to apply it, but the attachment did not come through.&lt;/p&gt;

&lt;h4 id=&#34;parrot-vs-neko-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-33b939f5da9cd02c-6c3a82da7890e791-6c3a82da7890e791&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33b939f5da9cd02c/6c3a82da7890e791#6c3a82da7890e791&#34;&gt;Parrot Vs. Neko&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicolas Cannasse wondered why Parrot performed so poorly on the fib benchmark. Leo explained that this benchmark stressed a currently unoptimized portion of Parrot (function calls). He also provided a few pointers on which benchmarks Parrot does well.&lt;/p&gt;

&lt;h4 id=&#34;using-pmcs-from-c-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e21e0822d799bc59-c6056fdb34ba43ee-c6056fdb34ba43ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e21e0822d799bc59/c6056fdb34ba43ee#c6056fdb34ba43ee&#34;&gt;Using PMCs from C&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol&amp;rsquo;s Lua compiler uses only PMCs. Thus, he wanted to know how to access these PMCs from NCI functions. Leo provided an answer, but also suggested he look at the new calling conventions, which perform auto-conversion in both directions.&lt;/p&gt;

&lt;h4 id=&#34;pmc-for-reference-counting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7a27e6d3f08791e3-11797f657fac9f96-11797f657fac9f96&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7a27e6d3f08791e3/11797f657fac9f96#11797f657fac9f96&#34;&gt;PMC for Reference Counting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted a relatively full analysis of how to generalize the DOD&amp;rsquo;s registration system for further reuse. He also asked for ideas about names. I think the whole thing looks good and that &amp;ldquo;AddrRegistry&amp;rdquo; is a good name. Perhaps that has too many vowels&amp;ndash;&amp;ldquo;AddrRgstry&amp;rdquo; and sometimes &amp;ldquo;AddrRgstr&amp;rdquo; might work.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;type-inferencing-in-perl-5-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5ea04271d14d1735-c3fb0f3d9389ac94-c3fb0f3d9389ac94&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5ea04271d14d1735/c3fb0f3d9389ac94#c3fb0f3d9389ac94&#34;&gt;Type Inferencing in Perl 5&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus (while discussing type inference in Perl 6) recalled that there was a Google Summer of Code project on &lt;a href=&#34;https://metacpan.org/pod/Devel::TypeCheck&#34;&gt;type inferencing in Perl 5&lt;/a&gt;. Gary Jackson, the summer coder, provide a more detailed description of his work.&lt;/p&gt;

&lt;h4 id=&#34;hello-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fc3e95a0ecb80d-9a8a8d8ae66896a5-9a8a8d8ae66896a5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fc3e95a0ecb80d/9a8a8d8ae66896a5#9a8a8d8ae66896a5&#34;&gt;&lt;code&gt;+&amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Daniel Brockman wondered if &lt;code&gt;+&amp;quot;hello&amp;quot;&lt;/code&gt; still evaluated to a NaN. Larry reasoned that it might, and then went on to speculate about the what the extra exception information would do when a &lt;code&gt;Num&lt;/code&gt; gets jammed into a &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;generic-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f5d1415442ec3a4c-b2923a4a9bc6a21f-b2923a4a9bc6a21f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f5d1415442ec3a4c/b2923a4a9bc6a21f#b2923a4a9bc6a21f&#34;&gt;Generic Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus found the frequent use of generic classes confusing, as he thought that only roles were type parameterizable. Larry explained that roles could be promoted to classes pretty easily, but that the distinction between them was still useful and meaningful.&lt;/p&gt;

&lt;h4 id=&#34;gc-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d6bc9237b9210a4b-002483f30c6191a0-002483f30c6191a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d6bc9237b9210a4b/002483f30c6191a0#002483f30c6191a0&#34;&gt;GC API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa posted a revised GC API after the previous discussion. More discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;name-conflicts-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-577cce02541d3c9d-e07672b3e69f9a23-e07672b3e69f9a23&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/577cce02541d3c9d/e07672b3e69f9a23#e07672b3e69f9a23&#34;&gt;Name Conflicts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu wondered what would happen if he declared two lexicals with different declarators. Larry answered that it would be a compile-time error.&lt;/p&gt;

&lt;h4 id=&#34;parsing-numbers-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-61f4044520874f29-bce78cf3287e4b20-bce78cf3287e4b20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/61f4044520874f29/bce78cf3287e4b20#bce78cf3287e4b20&#34;&gt;Parsing Numbers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt posted a list of different possible ways to write numbers, asking which were valid and which not. Many weighed in, including Larry.&lt;/p&gt;

&lt;h4 id=&#34;bindings-and-routine-signatures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-53232788dc4c7341-ae4d28708146c1f7-ae4d28708146c1f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/53232788dc4c7341/ae4d28708146c1f7#ae4d28708146c1f7&#34;&gt;Bindings and Routine Signatures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer noticed that implementing binding as anonymous subroutines and then binding existing variables created delimited continuations, and binding globals, full continuations. While interesting, Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;visibilty-of-self-and-class-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6dadcb39e23cc5a3-814d5f890cb8a43c-814d5f890cb8a43c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6dadcb39e23cc5a3/814d5f890cb8a43c#814d5f890cb8a43c&#34;&gt;Visibilty of &lt;code&gt;$?SELF&lt;/code&gt; and &lt;code&gt;$?CLASS&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered what scopes will have &lt;code&gt;$?SELF&lt;/code&gt; and &lt;code&gt;$?CLASS&lt;/code&gt; available to them. Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;time-to-take-her-home-her-dizzy-head-is-conscience-laden-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c19bea30514933f4-a10c571d683f9567-a10c571d683f9567&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c19bea30514933f4/a10c571d683f9567#a10c571d683f9567&#34;&gt;&amp;ldquo;Time to Take Her Home Her Dizzy Head is Conscience-Laden&amp;rdquo;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amusingly enough, the thread about time has a big gap between July 5 and August 15. The thread also reminded me why I have an analog watch.&lt;/p&gt;

&lt;h4 id=&#34;is-params-validate-necessary-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c1aa2d1bea721f06-f627657ac28724cb-f627657ac28724cb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c1aa2d1bea721f06/f627657ac28724cb#f627657ac28724cb&#34;&gt;Is Params::Validate Necessary?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dave Rolsky hoped that Params::Validate would no longer be necessary in Perl 6. This led to much discussion of the parameter declaration syntax in Perl 6 and a few suggested changes.&lt;/p&gt;

&lt;h4 id=&#34;constants-are-dead-long-live-read-only-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2e66199c576a8436-66d074fed528ff06-66d074fed528ff06&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2e66199c576a8436/66d074fed528ff06#66d074fed528ff06&#34;&gt;Constants are Dead; Long Live Read-Only!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apparently &lt;code&gt;is constant&lt;/code&gt; is gone and &lt;code&gt;is readonly&lt;/code&gt; is here. The discussion contains mores than that, but that is my take-away point.&lt;/p&gt;

&lt;h4 id=&#34;multidimensional-hyper-ops-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7233bd8e8a597da9-ca18a76f98fb7633-ca18a76f98fb7633&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7233bd8e8a597da9/ca18a76f98fb7633#ca18a76f98fb7633&#34;&gt;Multidimensional Hyper Ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered how hyper ops would work on multi-dimensional inputs. The short answer is &amp;ldquo;recurse when possible, apply when not.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;serializing-code-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9d416d7fa643e7b3-86deff4c1b749572-86deff4c1b749572&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9d416d7fa643e7b3/86deff4c1b749572#86deff4c1b749572&#34;&gt;Serializing Code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted an analysis of a new HTML::Prototype module that hinges on serializing code between the various layers of implementation. Many folks thought this was cool and discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-hash-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f6ed7b076781243d-67cb807fbf3e4432-67cb807fbf3e4432&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f6ed7b076781243d/67cb807fbf3e4432#67cb807fbf3e4432&#34;&gt;Slurpy Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered if one could bind a slurpy hash by name. The answer is no.&lt;/p&gt;

&lt;h4 id=&#34;making-pairs-less-magical-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-14ab4e67088e4bf1-e9b1e791ac08d43b-e9b1e791ac08d43b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/14ab4e67088e4bf1/e9b1e791ac08d43b#e9b1e791ac08d43b&#34;&gt;Making Pairs Less Magical&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wants pairs to be less magical, as their special treatment has caused much confusion of late. Much discussion continues.&lt;/p&gt;

&lt;h4 id=&#34;lazy-scalars-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8953c45b2d6e7d33-5675c9fddfb1612a-5675c9fddfb1612a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8953c45b2d6e7d33/5675c9fddfb1612a#5675c9fddfb1612a&#34;&gt;Lazy Scalars?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu wants lazily evaluated scalars. Ingo Blechschmidt, Luke Palmer, and Larry all provided ways to achieve that end. The simplest solution is to create an anonymous closure, it seems.&lt;/p&gt;

&lt;h4 id=&#34;using-foreign-languages-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3439e609dc66e2a4-8e313d44d1218bf5-8e313d44d1218bf5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3439e609dc66e2a4/8e313d44d1218bf5#8e313d44d1218bf5&#34;&gt;Using Foreign Languages&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to use identifiers from other languages that do not have compatible identifiers. Yuval reasoned that it would be dangerous to try to accommodate them too closely. Perhaps something like the Sinhala &amp;ldquo;karenawa,&amp;rdquo; which marks the preceding word as being foreign (English specifically), will work?&lt;/p&gt;

&lt;h4 id=&#34;symbolic-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-665698a47599cf92-fa397dbfbefc62c2-fa397dbfbefc62c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/665698a47599cf92/fa397dbfbefc62c2#fa397dbfbefc62c2&#34;&gt;Symbolic References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered to use symbolic references of magic variables such as &lt;code&gt;$?SELF&lt;/code&gt;. Larry provided a few answers.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, Through August 14, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</link>
      <pubDate>Thu, 18 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</guid>
      <description>

&lt;p&gt;As you will note from the date in the title, it&amp;rsquo;s been a short week. We&amp;rsquo;re switching back to a midnight Sunday/Monday rollover in order to make life easier for the Perl.com types. So, if I can avoid being distracted too much by the second Ashes test, I&amp;rsquo;ll try to get the summary finished before Monday is out, which should please chromatic.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Another low-volume week in &lt;em&gt;perl6-compiler&lt;/em&gt;; probably because, with the high speed of Pugs development, most of the discussion happens on IRC.&lt;/p&gt;

&lt;h4 id=&#34;container-model-pictures-and-questions-http-groups-google-com-groups-threadm-20050806162158-gb2263-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050806162158.GB2263@aut.dyndns.org&#34;&gt;Container Model, Pictures, and Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus fielded some questions about, and updated the pictures of, the container model.&lt;/p&gt;

&lt;h4 id=&#34;why-pxperl-http-groups-google-com-groups-threadm-20050808125840-22956-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050808125840.22956.qmail@lists.develooper.com&#34;&gt;Why PXPerl?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert (No Surname) asked what were the benefits of PXPerl over the ActiveState distribution. In short, PXPerl comes with Parrot and Pugs, which ActiveState doesn&amp;rsquo;t. If you set your path appropriately, you can continue to use the ActiveState Perl and just rely on PXPerl for Parrot and Pugs.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-lexical-declarations-http-groups-google-com-groups-threadm-20050809193348-ga27323-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050809193348.GA27323@wall.org&#34;&gt;Hoisting Lexical Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry answered some of Autrijus&amp;rsquo;s questions about Perl 6&amp;rsquo;s lexical scoping rules. Apparently what Pugs currently does is close enough to sane to be going on with.&lt;/p&gt;

&lt;h4 id=&#34;warnock-in-pugsland-http-groups-google-com-groups-threadm-20050811040041-gb56898-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050811040041.GB56898@aut.dyndns.org&#34;&gt;Warnock in Pugsland&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, in Pugsland, a Warnocked patch usually means that the person who posted the patch simply received a committer bit and didn&amp;rsquo;t mention the fact on the list.&lt;/p&gt;

&lt;h4 id=&#34;metamodel-notes-http-pugscode-org-images-metamodel-png&#34;&gt;&lt;a href=&#34;http://pugscode.org/images/metamodel.png&#34;&gt;Metamodel Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray posted some &lt;a href=&#34;http://groups.google.com/groups?threadm=20050811193918.GB12852@vs2.capwiz.com&#34;&gt;notes&lt;/a&gt; and &lt;a href=&#34;http://groups.google.com/groups?threadm=20050812170838.GA820@aut.dyndns.org&#34;&gt;ASCII art&lt;/a&gt; about the metamodel. Autrijus added pointers to further pictures.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;updated-intro-pod-http-groups-google-com-groups-threadm-01bf01c59ba4-384dc5d0-0200a8c0-server&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=01bf01c59ba4$384dc5d0$0200a8c0@SERVER&#34;&gt;Updated &lt;em&gt;intro.pod&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington posted a rewrite of Parrot&amp;rsquo;s &lt;em&gt;intro.pod&lt;/em&gt; document, now with a discussion of PIR. Huzzah!&lt;/p&gt;

&lt;h4 id=&#34;test-builder-and-friends-on-parrot-http-groups-google-com-groups-threadm-1123570251-22403-70-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123570251.22403.70.camel@localhost&#34;&gt;Test::Builder and Friends on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Following prompting from Geoff Young and Jeff Horwitz, chromatic has implemented Test::Builder and Test::Builder::Tester in pure Parrot. For his next trick, he intends to port Test::More and Parrot::Test.&lt;/p&gt;

&lt;p&gt;Tests are good, m&amp;rsquo;kay?&lt;/p&gt;

&lt;h4 id=&#34;how-to-add-a-new-opcode-http-groups-google-com-groups-threadm-1123573276-8867-6-camel-lgerd-hrz-uni-siegen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123573276.8867.6.camel@lgerd.hrz.uni-siegen.de&#34;&gt;How to Add a New Opcode?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra asked how to add an opcode to Parrot. Klaas-Jan Stol and Leo gave the answers.&lt;/p&gt;

&lt;h4 id=&#34;cleaning-up-the-call-opcodes-http-groups-google-com-groups-threadm-42fa0ffb-6090605-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FA0FFB.6090605@toetsch.at&#34;&gt;Cleaning Up the Call Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo reposted about cleaning up the various function-calling opcodes to take account of the fact that the calling conventions have changed. He asked for opinions and actually received a couple, which is handy, since he ended up Warnocked last time.&lt;/p&gt;

&lt;h4 id=&#34;parrot-i-http-groups-google-com-groups-threadm-d113603e0508101127396ed8c7-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=d113603e0508101127396ed8c7@mail.gmail.com&#34;&gt;&lt;code&gt;parrot -I&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger wondered if there was some way of telling Parrot to add directories to its load path. Leo seemed to think it was not that good an idea, and proposed using a relative path in a &lt;code&gt;.include&lt;/code&gt; directive.&lt;/p&gt;

&lt;h4 id=&#34;dominance-frontiers-http-groups-google-com-groups-threadm-45ec99fc050810182530001652-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050810182530001652@mail.gmail.com&#34;&gt;Dominance Frontiers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls continued his work on dominance frontiers to improve Parrot&amp;rsquo;s optimizer.&lt;/p&gt;

&lt;h4 id=&#34;pge-globber-empty-strings-http-groups-google-com-groups-threadm-rt-3-0-11-36882-119083-2-43242787217334-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36882-119083.2.43242787217334@perl.org&#34;&gt;PGE Globber, Empty Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda reported on trying to match empty strings with PGE&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt; implementation. It turned out to be a problem with &lt;code&gt;Data::Escape&lt;/code&gt;. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;deprecated-opcodes-http-groups-google-com-groups-threadm-42fdf124-2090502-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FDF124.2090502@toetsch.at&#34;&gt;Deprecated Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a list of opcodes that are due for the chop (or alteration) soon. If you&amp;rsquo;re doing anything with Parrot, it&amp;rsquo;s probably a good idea to take a look at this list. One of those who did was chromatic, who asked if Leo could give some examples of translating code so as not to use the old forms.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. Eight balls to go with one wicket needed. I think I&amp;rsquo;ll pause for a while.&lt;/p&gt;

&lt;p&gt;Damn. Australia have saved the game.&lt;/p&gt;

&lt;h4 id=&#34;translating-or-at-least-parsing-java-interface-definitions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4554&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4554&#34;&gt;Translating (Or at Least Parsing) Java Interface Definitions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if anyone had done any work on parsing Java interface declarations and (ideally) translating them to roughly equivalent Perl 6. Apparently, Gaal Yahas has done something along these lines (with Parse::RecDescent for Perl 5), but doesn&amp;rsquo;t own the code. He outlined the approach he took.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-meta-object-protocols-and-object-meta-isa-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4558&#34;&gt;Perl 6 Meta Object Protocols and &lt;code&gt;$object.meta.isa(?)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little is busy documenting the Perl 6 metamodel that he&amp;rsquo;s implemented in Perl 5 and that Autrijus is busy porting to Haskell. He posted an overview to the list and asked for comment. There then followed lots of discussion. I think I understood some of it.&lt;/p&gt;

&lt;h4 id=&#34;object-meta-isa-redux-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4574&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4574&#34;&gt;&lt;code&gt;$object.meta.isa(?)&lt;/code&gt; Redux&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan split the discussion of &lt;code&gt;$object.meta.isa(?)&lt;/code&gt; off from the earlier metamodel thread into a thread of its own and asked for comments once more. Larry commented that &amp;ldquo;the Apocalypses are primarily intended to be entertaining rather than factual.&amp;rdquo; Also in this thread, Luke let slip that there&amp;rsquo;s now a &lt;code&gt;Set&lt;/code&gt; role in Perl 6, which has the enormous advantage of letting us specify argument types in a sensible way without having to overload the junctions.&lt;/p&gt;

&lt;h4 id=&#34;obj-meta-add-method-foo-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4576&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4576&#34;&gt;&lt;code&gt;$obj.meta.add_method(&#39;foo&#39; =&amp;gt; ???)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan continued discussing the metamodel with a thread about the &lt;code&gt;add_method&lt;/code&gt; method. Autrijus was the only person with comments.&lt;/p&gt;

&lt;h4 id=&#34;proposed-new-traits-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4588&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4588&#34;&gt;Proposed New Traits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus said that he&amp;rsquo;d started to write the inferencer and had immediately run into the problem that every type can potentially contain &lt;code&gt;undef&lt;/code&gt;. He proposed adding an &lt;code&gt;is defined&lt;/code&gt; trait, which would cause a variable to immediately throw an exception if anyone attempted to assign it an undefined value. He also proposed a &lt;code&gt;typed&lt;/code&gt; trait, but I was a little less clear on why this would be a good idea. I have to confess that I didn&amp;rsquo;t understand what Larry&amp;rsquo;s reply was driving at, but that&amp;rsquo;s okay, because Autrijus did seem to understand it.&lt;/p&gt;

&lt;h4 id=&#34;my-pi-is-constant-3-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4600&#34;&gt;&lt;code&gt;my $pi is constant = 3&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if an example of the &lt;code&gt;is constant&lt;/code&gt; trait shown in Synopsis 6 was a special form or a typo. At least, I think that&amp;rsquo;s what he was asking; I may be wearing my stupid head today, though. Larry thought it was neither. I think. It seems there&amp;rsquo;s more to constancy than meets the eye. (Just ask any married couple.)&lt;/p&gt;

&lt;h4 id=&#34;typed-type-variables-my-foo-x-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4625&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4625&#34;&gt;Typed Type Variables (&lt;code&gt;my Foo ::x&lt;/code&gt;)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stuart Cook asked about the meaning of type annotations on type variables. Autrijus answered and Thomas Sandlaß agreed with him.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-www-mail-archive-com-perl6-language-perl-org-msg21349-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language@perl.org/msg21349.html&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark commented on an earlier discussion of using IO in &lt;code&gt;BEGIN&lt;/code&gt; blocks, pointing out that this was just a specific case of the more general problem of attempting to serialize things to bytecodes that were simply unserializable. I reckon the trick of it will be to do such things in &lt;code&gt;INIT&lt;/code&gt; or possibly &lt;code&gt;CHECK&lt;/code&gt; blocks (I can never remember which way round those two go).&lt;/p&gt;

&lt;h4 id=&#34;generic-classes-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4658&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4658&#34;&gt;Generic Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked about generic classes, but nobody answered before the end of the summary week. Expect Matt to address this one in the next summary.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m sorry to have to say this, but I don&amp;rsquo;t think I have to apologize for anything this week. WorldCon was fun.&lt;/p&gt;

&lt;h4 id=&#34;everything-else&#34;&gt;Everything Else&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.geeksunite.net/&#34;&gt;Help Chip!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, August 2-9, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050811.html/</link>
      <pubDate>Thu, 11 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050811.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another summary, brought to you by Chinese food. The attentive among you will notice that this summary is a day late, because I did not feel like doing it yesterday. If only I could do that at work.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;&lt;em&gt;Perl 6 Compilers&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;pugs-argument-processing-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-be055bd40627492d-a60044757ceb3e61-a60044757ceb3e61&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/be055bd40627492d/a60044757ceb3e61#a60044757ceb3e61&#34;&gt;Pugs Argument Processing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim Konovalov submitted a patch to Pugs affecting &lt;code&gt;@*ARGS&lt;/code&gt; processing. In the world of Pugs, this means that he received a committer bit and applied it himself.&lt;/p&gt;

&lt;h4 id=&#34;type-inferencing-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-114ffdd27a9cb125-e4a4dc51ec90239f-e4a4dc51ec90239f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/114ffdd27a9cb125/e4a4dc51ec90239f#e4a4dc51ec90239f&#34;&gt;Type Inferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wants to type push Perl 6&amp;rsquo;s type inferencing as far as it can go (and maybe a little beyond). To this end, he has been soliciting input from all comers. It looks like he has put a lot of thought and research into it. One day, I expect to be thanking Autrijus for important (if likely difficult to understand) compiler errors and warnings.&lt;/p&gt;

&lt;h4 id=&#34;www-kontent-release-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c27335567a8fc562-f11a7310269764d7-f11a7310269764d7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c27335567a8fc562/f11a7310269764d7#f11a7310269764d7&#34;&gt;&lt;code&gt;WWW::Kontent&lt;/code&gt; Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon announced the release of &lt;code&gt;WWW::Kontent&lt;/code&gt; 0.01: &amp;ldquo;a flexible web content management system written in Perl 6 and executable with Pugs.&amp;rdquo; It looks nifty to me. Maybe we need to fight Ruby on Rails with Perl 6 on Pylons or something. That doesn&amp;rsquo;t quite have the right ring to it, but there has to be something catchy there somewhere.&lt;/p&gt;

&lt;h4 id=&#34;array-interpolation-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-338b1f8acccceb81-b635247572c975e7-utoken-yhabadyaaaa7xvmbcvgjeix9iodtufmwhfkjzg-vgvjcjymxbutyydtxzyjpnmpnxytgmavkyeewco1g0jwxn3xylxnej39l&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/338b1f8acccceb81/b635247572c975e7?utoken=YHABADYAAAA7xVMbCVGjeIx9IodtUfMwhFkjZG-vgVJcJYMxbUTYyDTxzYJPNMPNXytgmAvkYeEWcO1g0jwXN3xYLXnEJ39L&#34;&gt;Array Interpolation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Phil Crow wondered why Pugs would not interpolate his arrays. Ingo Blechschmidt and Patrick explained that &lt;code&gt;@foo&lt;/code&gt; does not interpolate, but &lt;code&gt;@foo[]&lt;/code&gt; does. I sense a frequently asked question here.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-9-released-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3ac98d6a866ae1c4-f9e5fa2b6e17c67b-f9e5fa2b6e17c67b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3ac98d6a866ae1c4/f9e5fa2b6e17c67b#f9e5fa2b6e17c67b&#34;&gt;Pugs 6.2.9 Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the release of Pugs 6.2.9. It is full of nifty new features, including the ability to lay on hands!&lt;/p&gt;

&lt;h4 id=&#34;white-space-before-parens-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3ac98d6a866ae1c4-f9e5fa2b6e17c67b-f9e5fa2b6e17c67b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3ac98d6a866ae1c4/f9e5fa2b6e17c67b#f9e5fa2b6e17c67b&#34;&gt;White Space Before Parens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Shitov wondered why Perl 6 no longer allowed white space between function names and parens. Autrijus explained that it allows &lt;code&gt;print (1+2)*3&lt;/code&gt; to print 9 instead of 3. As someone who just last week explained the peculiarity of Ruby printing 3 in the above situation to a complete novice, I welcome the change.&lt;/p&gt;

&lt;h4 id=&#34;container-model-pictures-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c236932902cb3333-c0a37ac28a00a3d2-c0a37ac28a00a3d2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c236932902cb3333/c0a37ac28a00a3d2#c0a37ac28a00a3d2&#34;&gt;Container Model Pictures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a few pretty pictures explaining the &lt;a href=&#34;http://pugscode.org/images/simple-compilation.png&#34;&gt;compiler model&lt;/a&gt; and the &lt;a href=&#34;http://pugscode.org/images/container.png&#34;&gt;container model&lt;/a&gt;. While the compiler model was readily understandable to me, the container one wasn&amp;rsquo;t. Fortunately, when prompted, Autrijus provided a great explanation to accompany the diagram.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-5-8-7-4-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fbdc7bfb5ff3d803-588edb288e8527c7-588edb288e8527c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fbdc7bfb5ff3d803/588edb288e8527c7#588edb288e8527c7&#34;&gt;PxPerl 5.8.7-4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Upon discovering that Pugs released a new version, Grégoire Péan released a new version of PxPerl that includes the new Pugs. I (and many others) thank Grégoire for lowering the entry bar for Perl 6 hacking on Windows.&lt;/p&gt;

&lt;h4 id=&#34;hosting-lexical-declarations-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-05cc1e19db2fcc14-4814ff30475fc03e-4814ff30475fc03e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/05cc1e19db2fcc14/4814ff30475fc03e#4814ff30475fc03e&#34;&gt;Hosting Lexical Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Declaring lexicals mid-block confuses things, especially declaring them mid-statement, as in &lt;code&gt;$x = $x + my $x if $x;&lt;/code&gt;. Autrijus proposed hoisting declarations of lexicals to the top of the block. Unfortunately, this can make &lt;code&gt;CALLER::&lt;/code&gt; do funny things. Thus, he suggests outlawing it. Larry agreed.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;export-ld-library-path-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a929f3cbfe2aa9ec-25db76653bac717d-25db76653bac717d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a929f3cbfe2aa9ec/25db76653bac717d#25db76653bac717d&#34;&gt;Export &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bdonlan noticed that Parrot&amp;rsquo;s test suite was not setting &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, which makes tests fail. Leo pointed out that most users manually set their &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, as Parrot often needs this, but he agreed that the tests should do it just in case.&lt;/p&gt;

&lt;h4 id=&#34;improved-argument-processing-for-ops2c-pl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cc9242e455d1a63b-5d25c6b934119abe-5d25c6b934119abe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cc9242e455d1a63b/5d25c6b934119abe#5d25c6b934119abe&#34;&gt;Improved Argument Processing for &lt;em&gt;ops2c.pl&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tom submitted a patch that improves the command-line argument processing powers of &lt;em&gt;ops2c.pl&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;ansi-escape-codes-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-be5dc2f14b0dfd42-896d89835150a493-896d89835150a493&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/be5dc2f14b0dfd42/896d89835150a493#896d89835150a493&#34;&gt;ANSI Escape Codes in Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol was having trouble putting special characters like ANSI clear screen and &amp;ldquo;¥&amp;rdquo; into strings. Nick pointed out that he need to be careful with encodings and escapes. In Parrot, &lt;code&gt;\O&lt;/code&gt; is an octal escape. In Lua, it is apparently not.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-3-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b5b68a0cf335822b-4ac938caaa6ff298-4ac938caaa6ff298&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b5b68a0cf335822b/4ac938caaa6ff298#4ac938caaa6ff298&#34;&gt;Parrot 0.2.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced the release of Parrot 0.2.3, &amp;ldquo;Serenity,&amp;rdquo; which reminds me, Firefly is coming back soon! I can&amp;rsquo;t wait! Oddly, Google seems to have swallowed his release notice, but not his warnings.&lt;/p&gt;

&lt;h4 id=&#34;strange-filename-based-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d72580222deb1646-2b5afda2517c90bd-2b5afda2517c90bd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d72580222deb1646/2b5afda2517c90bd#2b5afda2517c90bd&#34;&gt;Strange Filename-Based Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace found a bug that would disappear if the file was renamed. Leo, with the help of valgrind, provided Michal with a pointer. Michal used that to find a likely culprit and provide a patch, which Leo then refined.&lt;/p&gt;

&lt;h4 id=&#34;gdbm-hash-on-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-455218c176531ba6-8bb0656904124f4c-8bb0656904124f4c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/455218c176531ba6/8bb0656904124f4c#8bb0656904124f4c&#34;&gt;GDBM Hash on MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing &lt;code&gt;gdbmhash&lt;/code&gt; on MinGW. Bernhard Schmalhofer applied it.&lt;/p&gt;

&lt;h4 id=&#34;pystring-link-problem-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1b63e4b253bb0eab-b10f19b834c85c0d-b10f19b834c85c0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1b63e4b253bb0eab/b10f19b834c85c0d#b10f19b834c85c0d&#34;&gt;PyString Link Problem&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad also fixed a link problem with &lt;em&gt;pystring.o&lt;/em&gt;. Jonathan Worthington applied that patch.&lt;/p&gt;

&lt;h4 id=&#34;filling-a-large-data-structure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-239e824edb7ff767-f1899af22d2a289e-f1899af22d2a289e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/239e824edb7ff767/f1899af22d2a289e#f1899af22d2a289e&#34;&gt;Filling a Large Data Structure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger wanted to know how to fill a large data structure in PIR, other than explicitly. Leo suggested reading it in from a config file.&lt;/p&gt;

&lt;h4 id=&#34;helping-perl-6-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d0083cd312e17ab1-eb025a6949933347-eb025a6949933347&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0083cd312e17ab1/eb025a6949933347#eb025a6949933347&#34;&gt;Helping Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rjtucke asked the ever-dangerous question, &amp;ldquo;How can I help?&amp;rdquo;. Unfortunately, I think he asked it on Google Groups, and thus no one saw it.&lt;/p&gt;

&lt;h4 id=&#34;pge-glob-escapes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-94887d69a826227d-3f587ac32513e71e-3f587ac32513e71e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/94887d69a826227d/3f587ac32513e71e#3f587ac32513e71e&#34;&gt;PGE Glob Escapes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;PGE Glob Escapes; millions die before it can be rounded up again.&amp;rdquo; Actually, Will Coleda noticed that he could not add a literal &lt;code&gt;*&lt;/code&gt; to globs in PGE. Patrick fixed it so he could.&lt;/p&gt;

&lt;h4 id=&#34;language-test-requirements-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3b9d082baa68c620-1f18c584c09e5053-1f18c584c09e5053&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3b9d082baa68c620/1f18c584c09e5053#1f18c584c09e5053&#34;&gt;Language Test Requirements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger has decided to write a Z-code-to-PIR translator. He wants to integrate its test suite with Parrot&amp;rsquo;s language tests. Unfortunately, it does not use &lt;code&gt;Test::Simple&lt;/code&gt;, or even Perl. Thus he wanted to know a good way to integrate it. Will Coleda, Bernhard Schmalhofer, and chromatic all provided suggestions.&lt;/p&gt;

&lt;h4 id=&#34;mod-parrot-0-3-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-16ec7ea4d9ba4872-b52140fff1d78310-b52140fff1d78310&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/16ec7ea4d9ba4872/b52140fff1d78310#b52140fff1d78310&#34;&gt;&lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck provided a patch to fix &lt;em&gt;src/call_list.txt&lt;/em&gt; for &lt;code&gt;mod_parrot-0.3&lt;/code&gt;. chromatic applied it.&lt;/p&gt;

&lt;h4 id=&#34;making-makefile-a-little-too-clean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-91cb1b36db9f3f30-e85db560e0496873-e85db560e0496873&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/91cb1b36db9f3f30/e85db560e0496873#e85db560e0496873&#34;&gt;Making Makefile a Little too Clean&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick noticed that the Parrot build was breaking. Jonathan Worthington narrowed it down to an exact revision number. Leo realized his mistake and fixed it.&lt;/p&gt;

&lt;h4 id=&#34;cygwin-status-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-66c1435caa126e36-98038a170b66dea6-98038a170b66dea6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/66c1435caa126e36/98038a170b66dea6#98038a170b66dea6&#34;&gt;Cygwin Status&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer applied some old patches from Joshua Gatcomb, in the hope of improving Cygwin support. Nick Glencross provided needed &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6e3982c2438d4160/635220a375758f6d#635220a375758f6d&#34;&gt;Parrot Cygwin test results&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;calling-super-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6782c143d9e3f9d7-0ab141d87d211369-0ab141d87d211369&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6782c143d9e3f9d7/0ab141d87d211369#0ab141d87d211369&#34;&gt;Calling &lt;code&gt;SUPER&lt;/code&gt; Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol wondered how to call a specific parent methods (possibly bypassing child methods). Leo answered.&lt;/p&gt;

&lt;h4 id=&#34;compiling-pugs-and-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-065a98fa7217b71a-dedda1b8cd1df427-dedda1b8cd1df427&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/065a98fa7217b71a/dedda1b8cd1df427#dedda1b8cd1df427&#34;&gt;Compiling Pugs and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck was having trouble compiling Pugs against Parrot. Leo worked with him to find a solution, although they haven&amp;rsquo;t resolved it yet.&lt;/p&gt;

&lt;h4 id=&#34;pure-parrot-test-builder-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c040e2a5d3303f6-bdec8011da7b4800-bdec8011da7b4800&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c040e2a5d3303f6/bdec8011da7b4800#bdec8011da7b4800&#34;&gt;Pure Parrot Test::Builder&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;chromatic has written pure-Parrot versions of Test::Builder and Test::Builder::Tester. As always, patches are welcome.&lt;/p&gt;

&lt;h4 id=&#34;adding-a-new-opcode-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-abcba81ef69f865c-b1d018e3114ce1f1-b1d018e3114ce1f1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/abcba81ef69f865c/b1d018e3114ce1f1#b1d018e3114ce1f1&#34;&gt;Adding a New Opcode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wanted to know how to add a new opcode to parrot. Klaas-Jan Stol and Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;more-win32-patches-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5472a5cdd52bd3dc-a48d4d6482a9b13b-a48d4d6482a9b13b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5472a5cdd52bd3dc/a48d4d6482a9b13b#a48d4d6482a9b13b&#34;&gt;More Win32 Patches&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided several patches for MinGW and Win32. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;updated-intro-pod-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e36d2b676a916edf-41d4393ec1a5e334-41d4393ec1a5e334&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e36d2b676a916edf/41d4393ec1a5e334#41d4393ec1a5e334&#34;&gt;Updated &lt;em&gt;intro.pod&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington posted an updated &lt;em&gt;intro.pod&lt;/em&gt;. Autrijus provided a few edits, and Jonathan is planning on committing it.&lt;/p&gt;

&lt;h4 id=&#34;comment-fix-in-pir-mode-el-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f2ea6e2b54a62425-53d23545fd068850-53d23545fd068850&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f2ea6e2b54a62425/53d23545fd068850#53d23545fd068850&#34;&gt;Comment Fix in &lt;em&gt;pir-mode.el&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jim McKim made the mistake of using Emacs. Fortunately, he counterbalanced that failing with the virtue of submitting a patch to fix an error in &lt;em&gt;pir-mode.el&lt;/em&gt; to make the file work better. chromatic applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;commit-bit-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0d69e4b22417d1c7-95e0762f7e93b784-95e0762f7e93b784&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d69e4b22417d1c7/95e0762f7e93b784#95e0762f7e93b784&#34;&gt;Commit Bit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls seemed to be having trouble using his newly acquired commit bit. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;segfault-with-e-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c9d5b091d9f074a-2518470dafaa44f2-2518470dafaa44f2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c9d5b091d9f074a/2518470dafaa44f2#2518470dafaa44f2&#34;&gt;Segfault with &lt;code&gt;-E&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tom noticed that &lt;code&gt;parrot -E&lt;/code&gt; segfaulted and provided a patch. He was not very confident about the patch.&lt;/p&gt;

&lt;h4 id=&#34;make-test-in-bc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-636c7816a8e30105-e03cba61e9968bca-e03cba61e9968bca&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/636c7816a8e30105/e03cba61e9968bca#e03cba61e9968bca&#34;&gt;&lt;code&gt;make test&lt;/code&gt; in &lt;em&gt;bc&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed that &lt;code&gt;make test&lt;/code&gt; in &lt;em&gt;bc&lt;/em&gt; dies because he does not have &lt;code&gt;antlr&lt;/code&gt; installed. Bernhard Schmalhofer said that he would try and fix it up to use the config-test for &lt;code&gt;antlr&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;interpreter-c-breakage-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bed06d6981b46f90-20a4e2bc68c05819-20a4e2bc68c05819&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bed06d6981b46f90/20a4e2bc68c05819#20a4e2bc68c05819&#34;&gt;&lt;em&gt;interpreter.c&lt;/em&gt; Breakage&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed that &lt;em&gt;interpreter.c&lt;/em&gt; broke during a recent compilation. Leo pointed out that he need to &lt;code&gt;make realclean&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;mingw-meets-m4-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-73a2bf56f29a06c3-f6ba5da370dc450d-f6ba5da370dc450d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/73a2bf56f29a06c3/f6ba5da370dc450d#f6ba5da370dc450d&#34;&gt;MinGW Meets m4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided two patches to make m4 work on MinGW. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;substr-segfault-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-383873bdf6b2ae0e-72e13310f799ff92-72e13310f799ff92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/383873bdf6b2ae0e/72e13310f799ff92#72e13310f799ff92&#34;&gt;&lt;code&gt;substr&lt;/code&gt; Segfault&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda posted a short PIR test that will segfault in the &lt;code&gt;substr&lt;/code&gt; opcode. This led to some discussion of variable-width encodings. Leo explained that &lt;code&gt;substr&lt;/code&gt; was a call that would probably force Parrot to rectify variable-width encodings into fixed-width ones (which it does lazily). Then he fixed it (presumably as he had suggested).&lt;/p&gt;

&lt;h4 id=&#34;parrot-cygwin-meets-treefrog-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c34526dde0f3cc4-f0d9ef39989dd4a6-f0d9ef39989dd4a6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c34526dde0f3cc4/f0d9ef39989dd4a6#f0d9ef39989dd4a6&#34;&gt;Parrot Cygwin Meets Treefrog&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve &amp;ldquo;treefrog&amp;rdquo; posted a patch he needed to get Cygwin testing. I think he may have posted it to Google Groups directly, though. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;call-opcode-cleanups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c7402b70371fb311-8c637a3801067f3a-8c637a3801067f3a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c7402b70371fb311/8c637a3801067f3a#8c637a3801067f3a&#34;&gt;Call Opcode Cleanups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo attempted to free himself from the horns of Warnock by reposting his suggested call opcode cleanup. Patrick and I voiced our support. More accurately, I voiced support and Patrick indifference.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;complex-control-flow-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-23345901e82f1cb5-4fb0b85a4f5ffa2c-4fb0b85a4f5ffa2c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/23345901e82f1cb5/4fb0b85a4f5ffa2c#4fb0b85a4f5ffa2c&#34;&gt;Complex Control Flow&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Hamilton began speculating that Perl 6 might have an extremely complicated control flow. Then he began to wonder aloud about a form of control flow I can only describe as brain-melting. Luke Palmer suggested that his proposal might best start as a module.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-parameters-and-flattening-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ebc571b19072db20-307e6736ab46b391-307e6736ab46b391&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ebc571b19072db20/307e6736ab46b391#307e6736ab46b391&#34;&gt;Slurpy Parameters and Flattening&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt&amp;rsquo;s question of the flattening (or not) of slurpy params continued producing some suggestions. Piers seemed somewhat unhappy with earlier answers, but the thread died out.&lt;/p&gt;

&lt;h4 id=&#34;does-if-topicalize-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0465204f271ce9cd-380c684482e0bb78-380c684482e0bb78&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0465204f271ce9cd/380c684482e0bb78#380c684482e0bb78&#34;&gt;Does &lt;code&gt;if&lt;/code&gt; Topicalize?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer noticed &lt;code&gt;if foo() -&amp;gt; $foo { ... }&lt;/code&gt; in an OSCON talk and wondered if &lt;code&gt;if&lt;/code&gt; now topicalized. Stuart Cook offered a workaround.&lt;/p&gt;

&lt;h4 id=&#34;data-constructors-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f00f1d5500c678f6-fb0eaa8a7b334f4d-fb0eaa8a7b334f4d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f00f1d5500c678f6/fb0eaa8a7b334f4d#fb0eaa8a7b334f4d&#34;&gt;Data Constructors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer posted his thoughts on unifying units and data constructors (as in Haskell or ML). Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;calling-methods-on-undef-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-615d21124b153ae0-f6cbeb1d58f527a8-f6cbeb1d58f527a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/615d21124b153ae0/f6cbeb1d58f527a8#f6cbeb1d58f527a8&#34;&gt;Calling Methods on &lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what would happen if he called &lt;code&gt;undef.chars&lt;/code&gt; or &lt;code&gt;char undef&lt;/code&gt;. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon responded that it would return &lt;code&gt;undef&lt;/code&gt; in the absence of &lt;code&gt;use fatal&lt;/code&gt;. Larry confirmed this behavior.&lt;/p&gt;

&lt;h4 id=&#34;reassigning-ref-and-meta-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-21a135e1140c86cc-6b9a07062460e34c-6b9a07062460e34c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/21a135e1140c86cc/6b9a07062460e34c#6b9a07062460e34c&#34;&gt;Reassigning &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what would happen if he assigned to &lt;code&gt;.ref&lt;/code&gt; or &lt;code&gt;.meta&lt;/code&gt;. Luke Palmer figured that it would not be allowed. I think it should cause a large person to come over to your house and kick you. This is probably a good reason I don&amp;rsquo;t write error messages.&lt;/p&gt;

&lt;h4 id=&#34;questioning-ref-and-meta-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-17e69f24e28c43b1-abc3309f3107553b-abc3309f3107553b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/17e69f24e28c43b1/abc3309f3107553b#abc3309f3107553b&#34;&gt;Questioning &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt left a bunch of blanks for people to fill in with respect to &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;. Luke Palmer apparently segfaulted in the attempt to fill in the blanks.&lt;/p&gt;

&lt;h4 id=&#34;subscripting-pairs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-685af26a93bf2de5-5367cfdd8bda29e8-5367cfdd8bda29e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/685af26a93bf2de5/5367cfdd8bda29e8#5367cfdd8bda29e8&#34;&gt;Subscripting Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if one could subscript pairs. Larry declared no.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-test-in-parrot-0-2-3-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ec30cf943e4290b4-17263f56385a6b31-17263f56385a6b31&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ec30cf943e4290b4/17263f56385a6b31#17263f56385a6b31&#34;&gt;Perl 6 Test in Parrot 0.2.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Shitov was having trouble running Perl 6 under the latest Parrot. Autrijus pointed out that he was trying to run the compiler attempt abandoned in June of 2004 and then pointed him toward Pugs.&lt;/p&gt;

&lt;h4 id=&#34;java-gt-perl-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f20535fdbe875d63-c49c08621487c7f6-c49c08621487c7f6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f20535fdbe875d63/c49c08621487c7f6#c49c08621487c7f6&#34;&gt;Java -&amp;gt; Perl ?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if any work had started on parsing Java interface definitions and translating them to Perl 6. Warnock applies (which probably means no).&lt;/p&gt;

&lt;h4 id=&#34;metaobject-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5ea04271d14d1735-6db35ec67d56d088-6db35ec67d56d088&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5ea04271d14d1735/6db35ec67d56d088#6db35ec67d56d088&#34;&gt;MetaObject Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little posted some of his thoughts on the MetaObject internals for comment. Many questions ensued, my eyes glazed over, the summarizer punted.&lt;/p&gt;

&lt;h4 id=&#34;defined-and-typed-traits-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8c5f8ce3d6b4bbbc-4fcbb26681d490eb-4fcbb26681d490eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8c5f8ce3d6b4bbbc/4fcbb26681d490eb#4fcbb26681d490eb&#34;&gt;&lt;code&gt;defined&lt;/code&gt; and &lt;code&gt;typed&lt;/code&gt; Traits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus mused about how to deal with &lt;code&gt;defined&lt;/code&gt; and &lt;code&gt;typed&lt;/code&gt; traits in Perl 6. This led Larry to wonder about &lt;code&gt;undef&lt;/code&gt; being a class, or a class being &lt;code&gt;undef&lt;/code&gt;, or something confusing.&lt;/p&gt;

&lt;h4 id=&#34;is-constant-sugar-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2e66199c576a8436-728ad09f9782b179-728ad09f9782b179&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2e66199c576a8436/728ad09f9782b179#728ad09f9782b179&#34;&gt;&lt;code&gt;is constant&lt;/code&gt; Sugar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered how &lt;code&gt;is constant&lt;/code&gt; would desugar if it were a special form. Larry came up with suggestions, some of which said it desugared and some of which said it didn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, through August 2, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</link>
      <pubDate>Mon, 08 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</guid>
      <description>

&lt;p&gt;In case you were wondering, Darwin ports didn&amp;rsquo;t work its magic and I still don&amp;rsquo;t have a working Haskell compiler. Thank Juerd for feather, even if I did have to turn my laptop upside down to read the MOTD. Rot-180: oN hes +snf&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;There were 12 messages in the compiler list this week. Either everyone has decamped to IRC or OSCON, or the compiler&amp;rsquo;s getting mature enough that most of the interesting discussion about it happens in &lt;em&gt;perl6-language&lt;/em&gt; as Autrijus and others seek clarification.&lt;/p&gt;

&lt;h4 id=&#34;some-thoughts-on-pil-complete-type-inferencing-http-groups-google-com-groups-threadm-20050728205921-ga61292-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050728205921.GA61292@aut.dyndns.org&#34;&gt;Some Thoughts on PIL/Complete Type Inferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus has been doing some thinking on the next version of PIL (The Pugs Intermediate Language), which will be a little less tightly coupled with PIR/Parrot. He outlined his thinking (which he seems to have directed towards being able to do useful things and optimizations with Type information) in this thread.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-containers-http-groups-google-com-groups-threadm-20050730224910-gb5372-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050730224910.GB5372@aut.dyndns.org&#34;&gt;Definition of Containers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that he&amp;rsquo;d checked in the first part of the new PIL run core. In case you were wondering, containers are the things that Perl variables have as values. They&amp;rsquo;re where things like &lt;code&gt;tie&lt;/code&gt; magic happens.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-variable-declarations-http-groups-google-com-groups-threadm-20050731180628-gc15882-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050731180628.GC15882@aut.dyndns.org&#34;&gt;Hoisting Variable Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Hands up! How does the scoping of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $x = $x + my $x if $x;
   #1   #2      #3    #4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;work in Perl 6?&lt;/p&gt;

&lt;p&gt;In Perl 5, all those &lt;code&gt;$x&lt;/code&gt;s refer to the same thing. In Perl 6, #1 and #2 refer to &lt;code&gt;$OUTER::x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This behavior (lexical scopes really are lexical) makes a compiler writer&amp;rsquo;s head hurt. Autrijus outlined a plan for making it work.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;dominance-frontier-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d69e4b22417d1c7-4ed1469ec095319d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d69e4b22417d1c7/4ed1469ec095319d&#34;&gt;Dominance Frontier&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls had posted a patch adding &amp;ldquo;dominance frontiers&amp;rdquo; to IMCC. (I&amp;rsquo;m afraid I don&amp;rsquo;t know what a dominance frontier is, but it sounds like it might be fun.) This week, he wondered if someone could apply it any time soon, because he had another patch that depended on it.&lt;/p&gt;

&lt;p&gt;It turned out that the patch broke a test or two, and Will Coleda, Andy Dougherty, Patrick, and Leo set about helping to track it down. It looks like they have found the issues, and work continues to fix them.&lt;/p&gt;

&lt;h4 id=&#34;make-languages-should-continue-after-building-a-language-failed-http-groups-google-com-groups-threadm-rt-3-0-11-36647-118350-14-1074362091832-perl-org&#34;&gt;&lt;code&gt;make languages&lt;/code&gt; Should Continue After Building a Language &lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36647-118350.14.1074362091832@perl.org&#34;&gt;Failed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever looked through the Parrot Makefiles and wondered what the deal is with &lt;code&gt;.dummy&lt;/code&gt;? If so, this thread explains everything.&lt;/p&gt;

&lt;h4 id=&#34;pmc-syntax-http-groups-google-com-groups-threadm-42e7e7ec-1040907-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E7E7EC.1040907@home.nl&#34;&gt;PMC Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked if there&amp;rsquo;s any documentation on the complete syntax for &lt;em&gt;.pmc&lt;/em&gt; files when writing PMCs. Apparently there isn&amp;rsquo;t, apart from the source of &lt;em&gt;pmc2c.pl&lt;/em&gt;, but Will Coleda and Leo helped Klaas-Jan out.&lt;/p&gt;

&lt;h4 id=&#34;embedding-partcl-http-groups-google-com-groups-threadm-42e838dc-9080804-web-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E838DC.9080804@web.de&#34;&gt;Embedding ParTcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thilo Planz had some problems embedding ParTcl into a PIR application. It mostly worked, but he had a few questions. Will Coleda helped out again.&lt;/p&gt;

&lt;h4 id=&#34;compiling-dynamic-pmcs-http-groups-google-com-groups-threadm-42e8a3a2-5010100-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E8A3A2.5010100@home.nl&#34;&gt;Compiling Dynamic PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan had more questions about compiling PMCs&amp;ndash;dynamic ones, this time. It appears that the docs he was following didn&amp;rsquo;t quite reflect reality. Leo solved the problem and Klaas-Jan sent in a doc patch. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;parrot-cannot-start-up-if-stderr-or-stdout-is-closed-http-groups-google-com-groups-threadm-rt-3-0-11-36677-118403-17-3306028943918-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36677-118403.17.3306028943918@perl.org&#34;&gt;Parrot Cannot Start up if &lt;code&gt;STDERR&lt;/code&gt; or &lt;code&gt;STDOUT&lt;/code&gt; is Closed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael Schwern pointed out that Parrot won&amp;rsquo;t start if you close either &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt;, eschewing the standard joke response (&amp;ldquo;Doctor, it hurts when I do this.&amp;rdquo; &amp;ldquo;Well don&amp;rsquo;t do that, then.&amp;rdquo;) Jerry Gay wrote a test and Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;accessing-hash-with-strings-keys-http-groups-google-com-groups-threadm-42e9eaf7-1050509-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E9EAF7.1050509@home.nl&#34;&gt;Accessing Hash with Strings/Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apparently, Klaas-Jan is working on writing a Lua compiler to target Parrot. He&amp;rsquo;s obviously working on it a good deal at the moment. :)&lt;/p&gt;

&lt;p&gt;He wanted to know how he could extend the standard Hash PMC to return &lt;code&gt;None&lt;/code&gt; if there is no key found. As is traditional in these cases, Leo helped him out. It turns out that part of the problem is that &lt;em&gt;pmc2c.pl&lt;/em&gt; isn&amp;rsquo;t that strict in its syntax checking. If anyone reading this has the tuits &amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;does-it-cost-anything-to-use-a-big-pmc-everywhere-http-groups-google-com-groups-threadm-20050729165847-70341-qmail-web51110-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050729165847.70341.qmail@web51110.mail.yahoo.com&#34;&gt;Does It Cost Anything to Use a Big PMC Everywhere?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a move guaranteed to gladden at least Dan Sugalski&amp;rsquo;s heart, Amir Karger popped up to say that he&amp;rsquo;s working getting the Z-machine interpreter working. He wondered if there was any way of dedicating a register to a particular constant in order to avoid copying a global every time he called a sub. Leo helped out.&lt;/p&gt;

&lt;h4 id=&#34;super-http-groups-google-com-groups-threadm-42ecde37-2010308-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ECDE37.2010308@toetsch.at&#34;&gt;Super!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;d added a new &lt;code&gt;Super&lt;/code&gt; PMC which will make it easier to call superclass methods.&lt;/p&gt;

&lt;h4 id=&#34;lua-project-http-groups-google-com-groups-threadm-42ef7e8f-9010304-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42EF7E8F.9010304@home.nl&#34;&gt;Lua Project&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan unveiled his project to get the &lt;a href=&#34;http://members.home.nl/joeijoei/parrot&#34;&gt;Lua compiler targeting Parrot&lt;/a&gt;. It&amp;rsquo;s apparently &amp;ldquo;far from complete,&amp;rdquo; but hey, it&amp;rsquo;s good to welcome yet another language to the Parrot cage.&lt;/p&gt;

&lt;h4 id=&#34;announcing-mod-parrot-0-3-http-groups-google-com-groups-threadm-pine-lnx-4-44-0508021908110-3368-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0508021908110.3368-100000@booger.sixgeeks.org&#34;&gt;Announcing &lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced the release of &lt;a href=&#34;http://www.smashing.org/mod_parrot&#34;&gt;&lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;, complete with support for all Apache hooks, autogeneration of &lt;code&gt;request_rec&lt;/code&gt; methods, and a &lt;code&gt;mod_pugs&lt;/code&gt; proof of concept. Crumbs. And there&amp;rsquo;s more. Check out the announcement, download the code, and start making Apache do weird things. Go on, you know you want to.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-use-and-abuse-of-liskov-http-www-mail-archive-com-perl6-language-40perl-org-msg20981-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20981.html&#34;&gt;The Use and Abuse of Liskov&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Damian and Luke&amp;rsquo;s discussion of the right way to do MMD looks to be finally winding down. It seems Luke&amp;rsquo;s convinced Damian of the righteousness of his cause. (Or at least, if he&amp;rsquo;s wrong, he&amp;rsquo;s wrong in a subtler way than Damian realized.) I don&amp;rsquo;t think there&amp;rsquo;s been a final decision as yet, but we&amp;rsquo;re definitely moving forward.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-parameters-and-auto-flattening-http-www-mail-archive-com-perl6-language-40perl-org-msg21085-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21085.html&#34;&gt;Slurpy Parameters and Auto-Flattening&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt asked for some clarification of the behavior of slurpy parameters. It&amp;rsquo;s not often I hope that Luke is wrong, but I really hope the answer he gave Ingo isn&amp;rsquo;t the true state of things.&lt;/p&gt;

&lt;h4 id=&#34;exposing-the-garbage-collector-http-www-mail-archive-com-perl6-language-40perl-org-msg21067-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21067.html&#34;&gt;Exposing the Garbage Collector&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bah! I propose a simple, slow, yet powerful feature that is useful to implement a whole bunch of other possible APIs for getting at stuff, and people go and suggest making any one of various heavier APIs the One True API. It&amp;rsquo;s enough to make a person despair.&lt;/p&gt;

&lt;p&gt;Ah, apologies, I&amp;rsquo;m letting personal concerns get in the way of the summary, but what the hell, I&amp;rsquo;m leaving it.&lt;/p&gt;

&lt;h4 id=&#34;messing-with-the-type-hierarchy-http-www-mail-archive-com-perl6-language-40perl-org-msg21092-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21092.html&#34;&gt;Messing with the Type Hierarchy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke had a few things to say about what happens when you monkey with the type hierarchy, so he said them. The usual suspects joined in, most of them addressing the particular instance that Luke had chosen to illustrate his point, rather than discussing the broader point, but hey, this is &lt;em&gt;perl6-language&lt;/em&gt;. That&amp;rsquo;s what happens.&lt;/p&gt;

&lt;p&gt;Luke&amp;rsquo;s broader question was, &amp;ldquo;Should it be possible to write a class that isn&amp;rsquo;t a leaf in the existing hierarchy?&amp;rdquo; The example that everyone addressed was the idea of writing a &lt;code&gt;Complex&lt;/code&gt; class that wedged in between &lt;code&gt;Real&lt;/code&gt; and &lt;code&gt;Num&lt;/code&gt; in the hierarchy (which, as several people pointed out, isn&amp;rsquo;t necessarily the right way to think about it anyway, hence the discussion).&lt;/p&gt;

&lt;p&gt;My gut feeling was that the answer to the general question should be &amp;ldquo;Yes, but be very, very careful, and don&amp;rsquo;t be surprise if it bites you later.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;elimination-of-item-pair-and-any-junction-http-www-mail-archive-com-perl6-language-40perl-org-msg21094-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21094.html&#34;&gt;Elimination of &lt;code&gt;Item|Pair&lt;/code&gt; and &lt;code&gt;Any|Junction&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The discussion of appropriate default prototypes and the like continued. Autrijus proposed a way of rejigging the type hierarchy to make default argument types a little clearer. I found things getting a little weird, to be honest&amp;ndash;there&amp;rsquo;s even talk of eliminating &lt;code&gt;Object&lt;/code&gt; as a type name, which seems a little strange.&lt;/p&gt;

&lt;h4 id=&#34;execution-platform-object-gestalt-http-www-mail-archive-com-perl6-language-40perl-org-msg21098-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21098.html&#34;&gt;Execution Platform Object? Gestalt?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Randal proposed that, as the number of possible platforms that Perl 6 can run on proliferates, it&amp;rsquo;d be really handy if there were some useful global that held knowledge about the platform and its capabilities. He proposed &lt;code&gt;$*OS&lt;/code&gt; as a decent place to put it. Larry thought we probably would have something like that, but thought that there might end up being two globals: &lt;code&gt;$*OS&lt;/code&gt; and &lt;code&gt;$*VM&lt;/code&gt;. The usual &amp;ldquo;Why don&amp;rsquo;t we call it&amp;rdquo; thread sprang up, but it seems that the most important upshot is that this particular bike shed will definitely be painted.&lt;/p&gt;

&lt;h4 id=&#34;the-meaning-of-returns-http-www-mail-archive-com-perl6-language-40perl-org-msg21114-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21114.html&#34;&gt;The Meaning of &lt;code&gt;returns&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The continuing invasion by the rampaging hordes from &lt;em&gt;p6c&lt;/em&gt; continued apace. This time, Autrijus had a discussion on the implications of &lt;code&gt;returns&lt;/code&gt; and its implications for type inferencing.&lt;/p&gt;

&lt;h4 id=&#34;lazy-list-syntax-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;Lazy List Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Flavio S. Glock wondered how to go about creating a lazy list from an object. Apparently the magic he was missing was &lt;code&gt;prefix:=&lt;/code&gt;, which is syntactic sugar for calling the &lt;code&gt;.next&lt;/code&gt; method on anything that supports iteration, which is nice.&lt;/p&gt;

&lt;h4 id=&#34;an-idea-for-doing-pack-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;An Idea for Doing &lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa had an idea about a possible &lt;code&gt;pack&lt;/code&gt; API; he outlined it on the list. Yuval Kogman seemed to like it, but there&amp;rsquo;s been nothing from anyone else on the list.&lt;/p&gt;

&lt;h4 id=&#34;inferring-foo-of-int-does-foo-of-any-http-www-mail-archive-com-perl6-language-40perl-org-msg21124-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21124.html&#34;&gt;Inferring &lt;code&gt;(Foo of Int).does(Foo of Any)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus again, this time thinking about the kind of type inferences that Perl aggregate types allow. Once I had my head in the right space, it made a great deal of sense, even if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array of Item).does(Array of Int); # false
Array of Int).does(Array of Item); # also false!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;made my head hurt the first time I read it.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collector-api-http-www-mail-archive-com-perl6-language-40perl-org-msg21081-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21081.html&#34;&gt;Garbage Collector API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Various people proposed additions to the proposed Garbage Collector API.&lt;/p&gt;

&lt;h4 id=&#34;value-confess-http-www-mail-archive-com-perl6-language-40perl-org-msg21140-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21140.html&#34;&gt;&lt;code&gt;$value.confess()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent Royal-Gordon had a cunning idea for debugging: having Perl 6 capture the call stack at its point of creation and stashing that in a property called &lt;code&gt;confess&lt;/code&gt;, which he could examine in a debugging context to find out where a value came from. As he pointed out, this would be expensive, but useful. He&amp;rsquo;s currently Warnocked, but I get the feeling it should be possible to write an extension to do what he wants without adding anything extra to Perl 6 itself. It might be a little tricky if he wants the call stack to change on mutation, though.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-is-rw-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21148-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21148.html&#34;&gt;Slurpy &lt;code&gt;is rw&lt;/code&gt; Arrays&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Having received clarification of the behavior of normal slurpy arrays, Ingo Blechschmidt asked for clarification of the behavior of Slurp &lt;code&gt;is rw&lt;/code&gt; arrays. Adriano Ferreira and Thomas Sandlaß seemed to talk sense in reply.&lt;/p&gt;

&lt;h4 id=&#34;curious-use-of-assuming-in-s06-http-www-mail-archive-com-perl6-language-40perl-org-msg21154-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21154.html&#34;&gt;Curious Use of &lt;code&gt;.assuming&lt;/code&gt; in S06&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;textfrom := &amp;amp;substr.assuming(:str($text) :len(Inf))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;found in Synopsis 6 was a mistake, or if the syntax should be like that. It turns out that the syntax is supposed to be like that. Apparently being able to do without the commas was one of the reasons for making colon pair syntax look like that.&lt;/p&gt;

&lt;h4 id=&#34;laziness-and-io-http-www-mail-archive-com-perl6-language-40perl-org-msg21158-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21158.html&#34;&gt;Laziness and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a currently Warnocked post, David Formosa outlined a potential problem with lazy IO.&lt;/p&gt;

&lt;h4 id=&#34;sub-foo-x-returns-ref-x-http-www-mail-archive-com-perl6-language-40perl-org-msg21159-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21159.html&#34;&gt;&lt;code&gt;sub foo ($x) returns ref($x)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In his continuing discussion of the Perl 6 type system and the inferences that you can draw about it, Autrijus posted a discussion of how to declare that a function that returns a value with the same type as its argument. He suggested that the best way forward would be to declare something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub identity ($x) returns ref($x) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and asked for better suggestions. Thomas Sandlaß had suggestions.&lt;/p&gt;

&lt;h4 id=&#34;say-s-return-value-http-www-mail-archive-com-perl6-language-40perl-org-msg21160-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21160.html&#34;&gt;&lt;code&gt;&amp;amp;say&lt;/code&gt;&amp;rsquo;s Return Value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas thought that &lt;code&gt;&amp;amp;print&lt;/code&gt; and &lt;code&gt;&amp;amp;say&lt;/code&gt; should &lt;code&gt;fail&lt;/code&gt; on errors and return the printed string on success (but true). Larry thought not. It looks like they&amp;rsquo;ll end up returning a Boolean or throwing an exception.&lt;/p&gt;

&lt;h4 id=&#34;arrayref-ref-http-www-mail-archive-com-perl6-language-40perl-org-msg21161-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21161.html&#34;&gt;&lt;code&gt;$arrayref.ref&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo continues his ongoing task of getting clarification of the semantics of a whole host of things. This time he wanted to know about the behavior of references. Larry clarified.&lt;/p&gt;

&lt;h4 id=&#34;binding-scalars-to-aggregates-http-www-mail-archive-com-perl6-language-40perl-org-msg21162-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21162.html&#34;&gt;Binding Scalars to Aggregates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Next up in Ingo&amp;rsquo;s clarification project was binding scalars to aggregates. (Or did he mean binding aggregates to scalars?) Again, Larry came through with answers. It turns out that there&amp;rsquo;s more to this than meets the eye at first glance. Autrijus&amp;rsquo;s post on containers over in &lt;em&gt;perl6-compiler&lt;/em&gt; addresses some of these issues, as well.&lt;/p&gt;

&lt;h4 id=&#34;binding-hashes-to-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21163-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21163.html&#34;&gt;Binding Hashes to Arrays?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo asks, &amp;ldquo;Is it legal to bind a hash to an array, or vice versa?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Larry answers, &amp;ldquo;Not at the moment.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;module-init-hooks-and-pragmas-http-www-mail-archive-com-perl6-language-40perl-org-msg21175-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21175.html&#34;&gt;Module Init Hooks and Pragmas&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered what function in a module to call when you &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;eliminating-and-http-www-mail-archive-com-perl6-language-40perl-org-msg21178-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21178.html&#34;&gt;Eliminating &lt;code&gt;&amp;amp;{}&lt;/code&gt; and &lt;code&gt;*{}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if we really need the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;stringification-of-pairs-http-www-mail-archive-com-perl6-language-40perl-org-msg21179-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21179.html&#34;&gt;Stringification of Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;For some reason, Ingo&amp;rsquo;s shortest question (&amp;ldquo;How do pairs stringify?&amp;rdquo;) attracted the largest response. Well, at first blush it looks like it did. What actually happened was that Warnock claimed it, but the &lt;code&gt;References:&lt;/code&gt; header in Andrew Shitov&amp;rsquo;s posed discussed below was a little broken.&lt;/p&gt;

&lt;h4 id=&#34;zip-with-http-www-mail-archive-com-perl6-language-40perl-org-msg21182-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21182.html&#34;&gt;&lt;code&gt;zip&lt;/code&gt; with ()&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some strange behavior of &lt;code&gt;zip&lt;/code&gt; caught out Andrew Shitov. Ingo explained the problem. There was quite a bit of discussion of the various subtleties exposed.&lt;/p&gt;

&lt;p&gt;Sometimes I pity the poor swine who&amp;rsquo;s going to have to write &lt;em&gt;Programming Perl 6&lt;/em&gt;. It&amp;rsquo;s going to make the current camel look like a slim volume, if we&amp;rsquo;re not careful.&lt;/p&gt;

&lt;h4 id=&#34;mutating-map-and-grep-http-www-mail-archive-com-perl6-language-40perl-org-msg21185-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21185.html&#34;&gt;Mutating &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if it was true that Perl 6&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc., wouldn&amp;rsquo;t allow mutating values in their source array. He wondered if it would be possible to use a pragma to get the old, Perl-5-ish, behavior back. Thomas Sandlaß wondered if simply explicitly declaring the given block&amp;rsquo;s argument as &lt;code&gt;rw&lt;/code&gt; wouldn&amp;rsquo;t do the job. There is no word from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;acknowledgements-adverts-apologies-alliteration-and-conference-envy&#34;&gt;Acknowledgements, Adverts, Apologies, Alliteration, and Conference Envy&lt;/h4&gt;

&lt;p&gt;Damn. Couldn&amp;rsquo;t think of a word beginning with &amp;ldquo;a&amp;rdquo; that means &amp;ldquo;conference.&amp;rdquo; [&lt;em&gt;Editor&amp;rsquo;s note: attendance?&lt;/em&gt;] To all you lucky people in Portland at OSCON, I wish I was there and am a seething mass of envy. Well, not that seething: I&amp;rsquo;m consoling myself by going to the WorldCon in Glasgow, instead.&lt;/p&gt;

&lt;h4 id=&#34;help-chip&#34;&gt;Help Chip&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;geeksunite.org&lt;/a&gt;: tell all your friends; this cannot stand.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;, now running on a new engine. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 20-26, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050728.html/</link>
      <pubDate>Thu, 28 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050728.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by microwaved Chinese food and air conditioning. I love the modern era. Without further ado, I bring you:&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;pxperl-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-72ef8db2a30decff-d6cdda584ed03036-d6cdda584ed03036&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/72ef8db2a30decff/d6cdda584ed03036#d6cdda584ed03036&#34;&gt;PxPerl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced the release of PxPerl 5.8.7-3, allowing easy access for people who want to play with Pugs and Parrot on Windows.&lt;/p&gt;

&lt;h4 id=&#34;test-report-for-windows-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-59cbdc5407af6d1d-b5fab8f688683f68-b5fab8f688683f68&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/59cbdc5407af6d1d/b5fab8f688683f68#b5fab8f688683f68&#34;&gt;Test Report for Windows&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ronald Hill reported some failing tests for Pugs on Windows. Fortunately, given Pugs&amp;rsquo; development, there is a reasonable chance of having these problems fixed. Unfortunately, given Pugs&amp;rsquo; development, no such information made it to the list.&lt;/p&gt;

&lt;h4 id=&#34;parsing-perl-6-rules-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b015b73040e20441-1468fa0cd2c60b47-1468fa0cd2c60b47&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b015b73040e20441/1468fa0cd2c60b47#1468fa0cd2c60b47&#34;&gt;Parsing Perl 6 Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered how Jeff Pinyan&amp;rsquo;s parsing-Perl-6-rules project was going. Jeff said that it did not get very far, but he posted what he did have to &lt;a href=&#34;http://feather.perl6.nl/~japhy/&#34;&gt;his feather site&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pugs-problems-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-82ee149bb2d85bc1-4d1fcdb883424696-4d1fcdb883424696&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/82ee149bb2d85bc1/4d1fcdb883424696#4d1fcdb883424696&#34;&gt;Pugs Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim Konovalov found two problems while playing with &lt;code&gt;slurp&lt;/code&gt;. Adriano Ferreira showed him how to work around &lt;code&gt;slurp&lt;/code&gt; not accepting a &lt;code&gt;:raw&lt;/code&gt; option. Nobody commented on the peculiar &lt;code&gt;$*ARGS[0]&lt;/code&gt; value when the argument is &lt;code&gt;-foobarfluffy&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;official-perl-6-rules-grammar-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-0011d8b97dee7e89-55fb939f0dee60c2-55fb939f0dee60c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/0011d8b97dee7e89/55fb939f0dee60c2#55fb939f0dee60c2&#34;&gt;Official Perl 6 Rules Grammar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick announced an &amp;ldquo;official Perl 6 grammar,&amp;rdquo; which he will maintain closely with PGE in Parrot. It is incomplete at this point, but patches are most welcome.&lt;/p&gt;

&lt;h4 id=&#34;pil-nodes-descriptions-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e044f2bf561fe482-6bd06c83cd64f720-6bd06c83cd64f720&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e044f2bf561fe482/6bd06c83cd64f720#6bd06c83cd64f720&#34;&gt;PIL Nodes Descriptions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal posted a request for a clue batting, listing various types of nodes in PIL and explaining her guesses at their descriptions. Stuart Cook and Patrick both provided a little help, although they did not address everything on her list.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-faq-patch-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e390005d62b36314-1f78076fe32525de-1f78076fe32525de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e390005d62b36314/1f78076fe32525de#1f78076fe32525de&#34;&gt;Perl 6 FAQ Patch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus provided a patch for the Perl 6 FAQ to remove an outdated question. Robert Spier applied the patch (modulo some confusion about staged versus live copies).&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;opcode-optimizability-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9d51af690526ca50-7ce11972f9700fc4-7ce11972f9700fc4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9d51af690526ca50/7ce11972f9700fc4#7ce11972f9700fc4&#34;&gt;Opcode Optimizability&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls noted that it is often simpler from an optimizer writer&amp;rsquo;s standpoint to do constant folding and optimization on a smaller set of opcodes (just one variant of &lt;code&gt;add&lt;/code&gt; instead of five (seven, if you count &lt;code&gt;inc&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt;)). Leo explained that removing these opcodes isn&amp;rsquo;t an option, but suggest to add to the FAQ the recommendation for compiler writers to emit only the more verbose codes.&lt;/p&gt;

&lt;h4 id=&#34;refcounting-hash-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5c57948de0eb65d5-4524a529265756a1-4524a529265756a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5c57948de0eb65d5/4524a529265756a1#4524a529265756a1&#34;&gt;Refcounting Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wants to use a hash to hold reference counts for Ponie (something like &lt;code&gt;dod_register_pmc&lt;/code&gt; in &lt;em&gt;pmc.c&lt;/em&gt;), but he doesn&amp;rsquo;t want to duplicate code. Leo suggested that he move some of the code into a PMC and then switch the real registry to use that PMC.&lt;/p&gt;

&lt;h4 id=&#34;new-pge-test-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-64c78fe69846258d-5be1667694bf333b-5be1667694bf333b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/64c78fe69846258d/5be1667694bf333b#5be1667694bf333b&#34;&gt;New PGE Test&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Mitchell N. Charity submitted a test for a &amp;ldquo;large&amp;rdquo; Pugs grammar. It currently fails. Patrick noted that the test likely came from &lt;em&gt;rx_grammar.pl&lt;/em&gt; in the Pugs distribution. This probably led to his above addition of an &amp;ldquo;Official Perl 6 Rules Grammar.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;jit-emit-help-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-be7db5a4fa863bf4-e0016e90bd49ac12-utoken-2ft0qzcaaadwxq4ss-whfjzzhfxvem00gqo7azl4xkybyor3fdcx1wpjjkp5fy-ceg7-g7huovyh7ocruduwaccdqfgxnog&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/be7db5a4fa863bf4/e0016e90bd49ac12?utoken=2ft0QzcAAADWXQ4sS--whFjzzhFxvEM00gQo7AZl4XkybyOr3FDcx1wpJJKp5Fy_CeG7_g7HuOvyH7OCrUDUWaccdqfgXNOG&#34;&gt;JIT Emit Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble decided that he would play with an x86_64 code generator. Unfortunately, he hit some stumbling blocks. Leo offered to help him and provided pointers from &lt;em&gt;#parrot&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;call-opcode-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-84a72c2aaf83c847-d2efb9430a077b30-d2efb9430a077b30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/84a72c2aaf83c847/d2efb9430a077b30#d2efb9430a077b30&#34;&gt;Call Opcode Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo wants to clean up some of the various &lt;code&gt;invoke&lt;/code&gt; opcodes. He posted a request for comment, but Warnock applies. It seems that Leo&amp;rsquo;s requests for comments like this get Warnocked a lot.&lt;/p&gt;

&lt;h4 id=&#34;spawnw-return-value-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b3b8c5aecdcc2354-759b9235518ec3e9-759b9235518ec3e9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b3b8c5aecdcc2354/759b9235518ec3e9#759b9235518ec3e9&#34;&gt;&lt;code&gt;spawnw&lt;/code&gt; Return Value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Prompted by Jonathan Worthington submitting a patch to &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/efb75561665e2c80/bb36e3935b3179ad#bb36e3935b3179ad&#34;&gt;make the &lt;code&gt;spawnw&lt;/code&gt; tests pass on Windows&lt;/a&gt; (applied), Jerry Gay opened a TODO ticket for switching &lt;code&gt;spawnw&lt;/code&gt; to return something object-like to wrap platform-specific oddities.&lt;/p&gt;

&lt;h4 id=&#34;bugs-in-ops2vim-pl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1791b6c68817f702-6ba2941807f35823-6ba2941807f35823&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1791b6c68817f702/6ba2941807f35823#6ba2941807f35823&#34;&gt;Bugs in &lt;em&gt;ops2vim.pl&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed a bug in &lt;em&gt;ops2vim.pl&lt;/em&gt; and suggested a fix. Jerry Gay fixed it.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-ctx-branch-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3a36357193751b7c-f08ee194474ddbfe-f08ee194474ddbfe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3a36357193751b7c/f08ee194474ddbfe#f08ee194474ddbfe&#34;&gt;Leo&amp;rsquo;s Ctx Branch Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay and Leo worked together to get his branch passing a few more tests on Windows. Nick Glencross wondered if the Python dynclasses tests were running, too. Jonathan Worthington explained that they were being skipped for the moment.&lt;/p&gt;

&lt;h4 id=&#34;raised-by-the-aliens-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5e7adae80c68ae2c-0702375e91fd82a8-0702375e91fd82a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5e7adae80c68ae2c/0702375e91fd82a8#0702375e91fd82a8&#34;&gt;Raised by the Aliens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse was surprised to discover that you cannot use &lt;code&gt;addparent&lt;/code&gt; with a PMC for either argument. He suggested that either should work or should have official documentation.&lt;/p&gt;

&lt;h4 id=&#34;patches-accumulating-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-571902f4a4f653f2-9e8223e529f9ba66-9e8223e529f9ba66&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/571902f4a4f653f2/9e8223e529f9ba66#9e8223e529f9ba66&#34;&gt;Patches Accumulating&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo requested that people with commit bits pick up some of the patches that were building up, as he was running a little low on tuits.&lt;/p&gt;

&lt;h4 id=&#34;dump-cfg-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6ef439c886066b14-55e991eba8cdcd52-55e991eba8cdcd52&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6ef439c886066b14/55e991eba8cdcd52#55e991eba8cdcd52&#34;&gt;Dump CFG&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls moved the &lt;code&gt;dump_cfg&lt;/code&gt; call from &lt;em&gt;reg_alloc.c&lt;/em&gt; to &lt;em&gt;cfg.c&lt;/em&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;string-to-cstring-leaks-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f1a4315013d4c915-672164862ef435bc-672164862ef435bc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f1a4315013d4c915/672164862ef435bc#672164862ef435bc&#34;&gt;&lt;code&gt;string_to_cstring&lt;/code&gt; Leaks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington plugged a few leaks caused by &lt;code&gt;string_to_cstring&lt;/code&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;deleting-globals-lexicals-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e21b573a0ea70bde-65f90008008e2c3c-65f90008008e2c3c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e21b573a0ea70bde/65f90008008e2c3c#65f90008008e2c3c&#34;&gt;Deleting Globals/Lexicals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noted that there was no way to delete globals or lexicals. Leo posted one (untested) way to do it.&lt;/p&gt;

&lt;h4 id=&#34;generating-win32-executables-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6854673d53122c92-607b7bf7c9e361c8-607b7bf7c9e361c8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6854673d53122c92/607b7bf7c9e361c8#607b7bf7c9e361c8&#34;&gt;Generating Win32 Executables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington laid some groundwork for generating executables on Windows. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;library-loading-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f047dcf93759ecab-6e03ce901bb57ca5-6e03ce901bb57ca5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f047dcf93759ecab/6e03ce901bb57ca5#6e03ce901bb57ca5&#34;&gt;Library Loading on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington beefed up the library searching logic in Parrot to be a little more Windowsy. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;pbc-merge-utility-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8b4e5b0f87adba1d-57ed94ccb95085f8-57ed94ccb95085f8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8b4e5b0f87adba1d/57ed94ccb95085f8#57ed94ccb95085f8&#34;&gt;PBC Merge Utility&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a request for a utility that could merge several PBC files into one.&lt;/p&gt;

&lt;h4 id=&#34;calling-super-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2bf16c7f57ee1a2e-59ec396d410b5d29-59ec396d410b5d29&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2bf16c7f57ee1a2e/59ec396d410b5d29#59ec396d410b5d29&#34;&gt;Calling Super Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noticed that there was no way to call the method from a super class. Leo pointed out a way to do it by accessing the slots of the parent directly.&lt;/p&gt;

&lt;h4 id=&#34;cmd-buffer-reallocation-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3b01415e4da2325f-20c2be9a86a7a693-20c2be9a86a7a693&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3b01415e4da2325f/20c2be9a86a7a693#20c2be9a86a7a693&#34;&gt;&lt;code&gt;cmd&lt;/code&gt; Buffer Reallocation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Greg Bacon fixed a bug in the reallocation of the &lt;code&gt;cmd&lt;/code&gt; buffer on Win32. Jonathan Worthington applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;data-dump-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d819d5808bcfa1e3-0c0ef49282c078e7-0c0ef49282c078e7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d819d5808bcfa1e3/0c0ef49282c078e7#0c0ef49282c078e7&#34;&gt;&lt;code&gt;Data::Dump&lt;/code&gt; (PGE)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda added a TODO for making PGE&amp;rsquo;s match objects compatible with &lt;code&gt;Data::Dumper&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;does-hash-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-57829b80613a030f-eba85e09e75dd15e-eba85e09e75dd15e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/57829b80613a030f/eba85e09e75dd15e#eba85e09e75dd15e&#34;&gt;&lt;code&gt;does Hash&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wants &lt;code&gt;Data::Dumper&lt;/code&gt; to check if an object &lt;code&gt;does&lt;/code&gt; &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; and dump it thusly if it has no default &lt;code&gt;dump&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rx-ops-s-future-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5087777195497561-6f8550b9c3e177b1-6f8550b9c3e177b1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5087777195497561/6f8550b9c3e177b1#6f8550b9c3e177b1&#34;&gt;&lt;em&gt;rx.ops&lt;/em&gt;&amp;rsquo;s Future&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered about the future of the rx ops. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon, who wrote them, recons they are not long for this world. He mentioned though that the intstacks and the bitmap handling code might be worth saving.&lt;/p&gt;

&lt;h4 id=&#34;debugger-list-breakpoints-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-caf85c11387a0550-d8343c914258b2f4-d8343c914258b2f4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/caf85c11387a0550/d8343c914258b2f4#d8343c914258b2f4&#34;&gt;Debugger-List Breakpoints&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda noticed that the debugger was not quite compatible with Perl&amp;rsquo;s. Leo replied that the debugger&amp;rsquo;s whole command loop was a mess that required a turn of the crank.&lt;/p&gt;

&lt;h4 id=&#34;u-escape-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c5fec6e374846f70-ea379969e2c28c73-ea379969e2c28c73&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c5fec6e374846f70/ea379969e2c28c73#ea379969e2c28c73&#34;&gt;&lt;code&gt;\u&lt;/code&gt; Escape Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda brought up an old ticket for some Unicode escape issues. Leo asked for a test case.&lt;/p&gt;

&lt;h4 id=&#34;string-gt-int-conversions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1460def887a4d5c6-2423989ff6a521de-2423989ff6a521de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1460def887a4d5c6/2423989ff6a521de#2423989ff6a521de&#34;&gt;&lt;code&gt;string&lt;/code&gt; -&amp;gt; &lt;code&gt;int&lt;/code&gt; Conversions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noticed that there are no opcode octal and hex conversions. Leo suggested adding one of the form &lt;code&gt;set Ix, Sy, Ibase # Ibase = 2..36&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;make-make-languages-failures-non-fatal-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c471cd54c2f4d224-ef07478f722221f5-ef07478f722221f5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c471cd54c2f4d224/ef07478f722221f5#ef07478f722221f5&#34;&gt;Make &lt;code&gt;make languages&lt;/code&gt; Failures Non-Fatal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer suggested that &lt;code&gt;make languages&lt;/code&gt; should not give up after the first failure, but should instead build the remaining languages.&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-on-windows-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2bf0400fe7338eef-5e293e31dfb2e70c-5e293e31dfb2e70c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2bf0400fe7338eef/5e293e31dfb2e70c#5e293e31dfb2e70c&#34;&gt;Dynclasses on Windows&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross and Jonathan Worthington discussed how to make dynclasses build on Windows.&lt;/p&gt;

&lt;h4 id=&#34;resizable-array-allocation-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-292d52cb41823a62-7b5c88c024a74769-7b5c88c024a74769&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/292d52cb41823a62/7b5c88c024a74769#7b5c88c024a74769&#34;&gt;&lt;code&gt;Resizable*Array&lt;/code&gt; Allocation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles submitted a patch making all the various &lt;code&gt;Resizeable*Array&lt;/code&gt; PMCs share their allocation strategy. Bernhard Schmalhofer applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mmd-roundup-take-2-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b1fb0985a8682d17-42a030138f39041a-42a030138f39041a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b1fb0985a8682d17/42a030138f39041a#42a030138f39041a&#34;&gt;MMD Roundup: Take 2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark attempted to de-Warnock a suggested change by Leo. Unfortunately, his thoughts on the matter were, &amp;ldquo;This is really a call for the designer to make, isn&amp;rsquo;t it?&amp;rdquo; Leo suggested starting a &lt;em&gt;WARNOCKED&lt;/em&gt; file for these things. Will countered that adding it to the DESIGN section in &lt;em&gt;docs/ROADMAP&lt;/em&gt;, would mean that Chip needs only look in one place.&lt;/p&gt;

&lt;h4 id=&#34;parrot-failures-on-mac-os-x-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-522f18e94ff1e97b-607ed4ce47a5eab6-607ed4ce47a5eab6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/522f18e94ff1e97b/607ed4ce47a5eab6#607ed4ce47a5eab6&#34;&gt;Parrot Failures on Mac OS X&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark forwarded some failures on Mac OS X to the Parrot list (from the Ponie one).&lt;/p&gt;

&lt;h4 id=&#34;parrot-needs-stderr-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e06edd0f30a68d33-a197458082a6d861-a197458082a6d861&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e06edd0f30a68d33/a197458082a6d861#a197458082a6d861&#34;&gt;Parrot Needs &lt;code&gt;STDERR&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark noticed that running Parrot with a closed &lt;code&gt;STDERR&lt;/code&gt; makes Parrot unhappy.&lt;/p&gt;

&lt;h4 id=&#34;gmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4cd9e2926bc83d64-f8d878256d60c2a1-f8d878256d60c2a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4cd9e2926bc83d64/f8d878256d60c2a1#f8d878256d60c2a1&#34;&gt;GMC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alexandre Buisse and many others have been talking about his Generation Mark and Compact Garbage Collector. Plans are rapidly taking shape.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;user-defined-context-behavior-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-43135a1d4f0bbfcc-80e0a74f25f015a0-80e0a74f25f015a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/43135a1d4f0bbfcc/80e0a74f25f015a0#80e0a74f25f015a0&#34;&gt;User-Defined Context Behavior&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wanted to know how to make his own custom class that would act specially in list context. Thomas Sandlaß suggested overloading &lt;code&gt;&amp;amp;infix:&amp;lt;=&amp;gt;&lt;/code&gt;. Sadly, his answer doesn&amp;rsquo;t seem to have made it to Google Groups.&lt;/p&gt;

&lt;h4 id=&#34;hash-creation-with-duplicate-keys-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c073d7300ae39e81-bd1f191a0b4b4dd7-bd1f191a0b4b4dd7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c073d7300ae39e81/bd1f191a0b4b4dd7#bd1f191a0b4b4dd7&#34;&gt;Hash Creation with Duplicate Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt noticed that in Perl 5 hash definitions, the rightmost duplicate wins, whereas the leftmost wins in Perl 6. He wondered if this was a bug or not. Luke explained that it was that way for named variable bindings. Larry figured it should be that way &lt;em&gt;only&lt;/em&gt; for named variable binding. If Pugs has not done it yet, some brave soul could probably add tests and find it implemented before they had finished committing.&lt;/p&gt;

&lt;h4 id=&#34;tail-calls-methods-and-currying-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6961593735eeb3dc-1b1408f6f11c2504-1b1408f6f11c2504&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6961593735eeb3dc/1b1408f6f11c2504#1b1408f6f11c2504&#34;&gt;Tail Calls, Methods, and Currying&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon wondered about tail calls, noting that the current method (&lt;code&gt;$obj.can(&#39;meth&#39;).goto($obj, *@args);&lt;/code&gt;) is kinda ugly. Larry mused that &lt;code&gt;return g()&lt;/code&gt; should go ahead and tail call. If the code does not want a tailcall there, then it should avoid it manually.&lt;/p&gt;

&lt;h4 id=&#34;pairs-and-binding-play-poorly-together-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0e070011c30ef520-b9aafc0d0d0e27c7-b9aafc0d0d0e27c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0e070011c30ef520/b9aafc0d0d0e27c7#b9aafc0d0d0e27c7&#34;&gt;Pairs and Binding Play Poorly Together&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that pairs and bindings (such as in a &lt;code&gt;for&lt;/code&gt; loop) play badly together. Larry supposed that the &lt;code&gt;Bare&lt;/code&gt; code object could have parameters of type &lt;code&gt;Pair|Item&lt;/code&gt; (note no &lt;code&gt;Junction&lt;/code&gt;) by default to solve this problem. Damian supported the exclusion of &lt;code&gt;Junction&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;method-introspection-and-meta-meta-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b64f6f0757aba82f-e7c6e6b4fde0dd38-e7c6e6b4fde0dd38&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b64f6f0757aba82f/e7c6e6b4fde0dd38#e7c6e6b4fde0dd38&#34;&gt;Method Introspection and Meta &lt;code&gt;meta.classes&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic wondered about subroutine and method introspection. Sam Vilain thought he might want to look at Stevan Little&amp;rsquo;s Perl 6 MetaModel. He also talked about closing the loop on meta-meta-meta headaches. Apparently Smalltalk has done this somewhere.&lt;/p&gt;

&lt;h4 id=&#34;big-object-rethink-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-69ce157a34ae688d-50c133e45c608ede-50c133e45c608ede&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/69ce157a34ae688d/50c133e45c608ede#50c133e45c608ede&#34;&gt;Big Object Rethink&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry posted a fairly major rethink of member variables and methods. Honestly I did not quite follow what he described, and there is a lot to summarize&amp;ndash;Hey! Look over there! ::PUNT:: Nothing to see here, move along.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collection-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-087904100f8ba53c-fa49a0002e4742b9-fa49a0002e4742b9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/087904100f8ba53c/fa49a0002e4742b9#fa49a0002e4742b9&#34;&gt;Garbage Collection API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa (after being lightly chastized by an unknown summarizer) started a new thread expanding on his desire for a GC API. I thought there were replies to this, but they don&amp;rsquo;t seem to have made it to Google.&lt;/p&gt;

&lt;h4 id=&#34;exposing-the-gc-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-419828b0fad1dcb8-3eb110889aa7bc0d-3eb110889aa7bc0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/419828b0fad1dcb8/3eb110889aa7bc0d#3eb110889aa7bc0d&#34;&gt;Exposing the GC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley thought that it might be useful to expose the GC to get an array of all objects of a particular class. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon thought that the ability to get such an array would be useful, but that it should merely be an implementation detail of whether an array of weak refs or the GC or Harry Potter was invoked.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists, please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 13-19, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</link>
      <pubDate>Thu, 21 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</guid>
      <description>

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by the words &amp;ldquo;displacement&amp;rdquo; and &amp;ldquo;activity.&amp;rdquo; So far today, I&amp;rsquo;ve caught up with everything unread in NetNewsWire, my Flickr groups, every other mailing list I&amp;rsquo;m subscribed to, and completed about five Sudoku. Now I&amp;rsquo;m dragging out this introduction and I don&amp;rsquo;t know why; I enjoy writing these things.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This was another quiet week on the list. However, you only have to watch the SVN commit log and the other stuff on &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;PlanetSix&lt;/a&gt; to know that things are still proceeding apace. Last time I looked, it seemed that Stevan Little was working on bootstrapping the Perl 5 implementation of the Perl 6 MetaModel to implement it in terms of itself.&lt;/p&gt;

&lt;p&gt;Rather mind-bogglingly, Pugs is now targeting JavaScript as well.&lt;/p&gt;

&lt;p&gt;The current Pugs release is 6.2.8.&lt;/p&gt;

&lt;h4 id=&#34;creating-threads-in-begin-http-groups-google-com-groups-threadm-20050714153213-gb73297-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050714153213.GB73297@plum.flirble.org&#34;&gt;Creating Threads in &lt;code&gt;BEGIN&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted what he described as a &amp;ldquo;note to collective self&amp;rdquo; wondering about how Perl 6 will cope with people creating threads inside of &lt;code&gt;BEGIN&lt;/code&gt; blocks. According to Luke, &amp;ldquo;it won&amp;rsquo;t.&amp;rdquo; Larry thought that it might be okay to create threads at &lt;code&gt;CHECK&lt;/code&gt; time, so long as any spawned threads didn&amp;rsquo;t do any real work later than &lt;code&gt;CHECK&lt;/code&gt; time.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-modules-http-groups-google-com-groups-threadm-002a01c58944-c9231c30-0200a8c0-madaboutipv6&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=002a01c58944$c9231c30$0200a8c0@madaboutipv6&#34;&gt;Perl 6 Modules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gav&amp;hellip; (I presume the ellipsis is important to someone) wondered what he needed to do to write Perl 6 modules. Nathan Gray pointed him at the &lt;a href=&#34;http://svn.openfoundry.org/pugs/docs/other/porting_howto&#34;&gt;porting how-to&lt;/a&gt; in the Pugs distribution.&lt;/p&gt;

&lt;h4 id=&#34;is-namespace-qualification-really-required-http-groups-google-com-groups-threadm-200507151916-j6fjgm18017026-webmail-sunflower-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200507151916.j6FJGm18017026@webmail.sunflower.com&#34;&gt;Is Namespace Qualification Really Required?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Phil Crow came across some weirdness with namespace resolution. It seems that you have to qualify function names explicitly in signatures. Autrijus agreed that it was a bug and asked for Phil to write a TODO test. Discussion ensued&amp;ndash;I think the fix is in SVN now.&lt;/p&gt;

&lt;h4 id=&#34;parsing-perl-6-grammars-http-groups-google-com-groups-threadm-20050719180105-ga30311-vs2-capwiz-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050719180105.GA30311@vs2.capwiz.com&#34;&gt;Parsing Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered about the state of Jeff &amp;ldquo;Japhy&amp;rdquo; Pinyan&amp;rsquo;s effort to implement a Perl 6 rules parser. Japhy said that it&amp;rsquo;s been on hold for a while, but that he&amp;rsquo;d started to work on it again, basing it on his earlier &lt;a href=&#34;https://metacpan.org/pod/Regexp::Parser&#34;&gt;Regexp::Parser&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;pmc-changes-http-groups-google-com-groups-threadm-20050713142025-gr73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713142025.GR73056@plum.flirble.org&#34;&gt;PMC Changes?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if the PMC layout is likely to remain stable, or if there might be changes in relation to the generational garbage collector. In particular, he wanted to know if the API would remain stable. Leo thought that there might be changes in the layout, but the API shouldn&amp;rsquo;t change.&lt;/p&gt;

&lt;h4 id=&#34;partcl-accelerator-http-groups-google-com-groups-threadm-643ed742-47aa-4d16-8a8a-bb956f020e90-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=643ED742-47AA-4D16-8A8A-BB956F020E90@coleda.com&#34;&gt;ParTcl Accelerator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda showed some timings for ParTcl, the Parrot implementation of Tcl, and made a few suggestions about how to get things going faster. Patrick and Leo mused on the issues involved.&lt;/p&gt;

&lt;h4 id=&#34;partitioning-pmcs-http-groups-google-com-groups-threadm-20050713140849-gp73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713140849.GP73056@plum.flirble.org&#34;&gt;Partitioning PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had some questions about making PMCs and Ponie play well together, with particular reference to using &lt;code&gt;SvFLAGS()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;embedding-extending-interface-http-groups-google-com-groups-threadm-20050713144138-gt73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144138.GT73056@plum.flirble.org&#34;&gt;Embedding/Extending Interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if Chromatic was still waiting for confirmation that his automated embedding tools were the Right Thing. Apparently, Chromatic is waiting for confirmation, but offered to send his existing patch, if only to force the discussion.&lt;/p&gt;

&lt;h4 id=&#34;ponie-questions-http-groups-google-com-groups-threadm-20050713144716-gu73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144716.GU73056@plum.flirble.org&#34;&gt;Ponie Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had a bunch of questions about various subsystems, mostly in relation to Ponie. Leo came good with answers.&lt;/p&gt;

&lt;h4 id=&#34;parrot-project-management-http-groups-google-com-groups-threadm-cff4c4c41b42a1f39d7d4fe68f914841-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=cff4c4c41b42a1f39d7d4fe68f914841@perl.org&#34;&gt;Parrot Project Management&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure if Will Coleda&amp;rsquo;s suffering culture shock about the way Parrot project management happens, or if we&amp;rsquo;re really not doing it right. The first rule of Parrot/Perl 6 development is that if you really want something, then the only way to guarantee that it gets done is to do it yourself. It&amp;rsquo;s certainly worked for me over the years.&lt;/p&gt;

&lt;h4 id=&#34;tcl-gc-issues-solved-http-groups-google-com-groups-threadm-198c87380507140823527d4165-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c87380507140823527d4165@mail.gmail.com&#34;&gt;Tcl GC Issues&amp;ndash;Solved&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse announced that as of r8617 in SVN, the longstanding GC bug that ParTcl occasionally tickled has been fixed. There was no rejoicing on the list, but at least one summarizer was really pleased to hear it.&lt;/p&gt;

&lt;h4 id=&#34;gmc-for-dummies-http-groups-google-com-groups-threadm-42d853a9-8060902-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42D853A9.8060902@gmail.com&#34;&gt;GMC for Dummies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Summer of Code intern Alexandre Buisse, who is working on a new GC system for Parrot, pointed us all at &lt;a href=&#34;http://perso.ens-lyon.fr/alexandre.buisse/divers/gmc_for_dummies.pod&#34;&gt;an introduction to the Generational Mark and Compact scheme&lt;/a&gt; that he&amp;rsquo;s working to implement. He and Leo had a discussion about implications, assumptions, and other stuff.&lt;/p&gt;

&lt;p&gt;Bob Rogers asked some tricky questions relating to circular structures and timely destruction. Discussion of this continues.&lt;/p&gt;

&lt;h4 id=&#34;register-allocation-fun&#34;&gt;Register Allocation Fun&lt;/h4&gt;

&lt;p&gt;There was a flurry of patches from Curtis Rawls, who appears to be working on refactoring and (one hopes) fixing the IMCC register allocator. Way to go, Curtis.&lt;/p&gt;

&lt;h4 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h4&gt;

&lt;h4 id=&#34;mml-dispatch-http-www-mail-archive-com-perl6-language-40perl-org-msg20826-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20826.html&#34;&gt;MML Dispatch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The ongoing discussion of the right way to dispatch multimethods is still, um, going on. Damian and Luke appear to have a fundamental disagreement about what the Right Thing is. &amp;ldquo;Manhattan!&amp;rdquo; &amp;ldquo;Pure!&amp;rdquo; &amp;ldquo;Manhattan!&amp;rdquo;&amp;ndash;it&amp;rsquo;s not quite that bad, but they seem to have entrenched positions. Elsewhere in the thread, Larry mused on which was more general, classes or roles. Thomas Sandlaß wondered how they stood in relation to types.&lt;/p&gt;

&lt;p&gt;Your summarizer wondered how he was ever going to explain all this and punted.&lt;/p&gt;

&lt;h4 id=&#34;method-calls-on-self-http-www-mail-archive-com-perl6-language-40perl-org-msg20769-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20769.html&#34;&gt;Method Calls on &lt;code&gt;$self&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;My eyes, they burn! At this rate, I&amp;rsquo;m simply going to use &lt;code&gt;$?SELF&lt;/code&gt; in all my Perl 6 classes. Larry&amp;rsquo;s latest suggestion seems to please even fewer people than &lt;code&gt;./method&lt;/code&gt;, which is really saying something. As someone who&amp;rsquo;s not a fan of &lt;code&gt;./&lt;/code&gt;, I found myself slightly surprised to agree with Autrijus, who reckons you get used to it really quickly.&lt;/p&gt;

&lt;h4 id=&#34;the-perl-6-library-system-http-www-mail-archive-com-perl6-language-40perl-org-msg20944-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20944.html&#34;&gt;The Perl 6 Library System&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In response to a question from Autrijus about coderefs in &lt;code&gt;@INC&lt;/code&gt;, or whatever Perl 6 is going to call it, Larry mused on the possible eventual design of Perl 6&amp;rsquo;s library system. It seemed to me that he was dropping a rather heavy hint to any interested readers who might like to come up with a first cut of Perl 6&amp;rsquo;s library system.&lt;/p&gt;

&lt;p&gt;Later, he did some thinking aloud about treating strings as arrays, or vice versa.&lt;/p&gt;

&lt;h4 id=&#34;method-resolution-order-http-www-mail-archive-com-perl6-language-40perl-org-msg20913-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20913.html&#34;&gt;Method Resolution Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan &amp;ldquo;MetaModel&amp;rdquo; Little cheered Larry&amp;rsquo;s statement that methods, subs, submethods, and &amp;ldquo;anything in between&amp;rdquo; all live in the same namespace. If you want to give two code-like things the same name, then you must explicitly declare them as multi.&lt;/p&gt;

&lt;p&gt;Stevan went on to ask a bunch of questions about the semantics of method resolution, so as to get the Perl 6 MetaModel working right. Discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;type-class-haskell-does-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20958-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20958.html&#34;&gt;&lt;code&gt;Type::Class::Haskell&lt;/code&gt; Does Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I haven&amp;rsquo;t the faintest idea what Yuval Kogman is talking about. Dammit, I need to learn Haskell now. Luckily, Autrijus, Luke, David Formosa, and Damian did seem to understand it. There was ASCII art and everything. Sadly, there&amp;rsquo;s no Unicode art, but it&amp;rsquo;s only a matter of time.&lt;/p&gt;

&lt;h4 id=&#34;optimization-pipeline-http-www-mail-archive-com-perl6-language-40perl-org-msg20959-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20959.html&#34;&gt;Optimization Pipeline&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted an outline of the optimization pipeline idea that he&amp;rsquo;d brought up in a Hackathon. If confess that it looks rather like something discussed a few months (years?) ago that Chip shot down rather convincingly. (I remember this because I took pretty much the same position as Yuval, and I really didn&amp;rsquo;t want to be convinced.)&lt;/p&gt;

&lt;h4 id=&#34;stm-semantics-the-transactional-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20971-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20971.html&#34;&gt;STM Semantics, the Transactional Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman discussed some issues with Software Transactional Memory (STM). A short discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;more-method-resolution-order-questions-http-www-mail-archive-com-perl6-language-40perl-org-msg20976-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20976.html&#34;&gt;More Method Resolution Order Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Returning from reading up on method resolution orders and class precedence lists, Stevan Little had a pile of questions and suggestions about Perl 6&amp;rsquo;s method resolution semantics. He pushed for using &amp;ldquo;C3&amp;rdquo; as Perl&amp;rsquo;s algorithm of choice and is implementing it in Perl6::MetaModel until and unless @Larry decides differently. He&amp;rsquo;s off to a flying start in that the One True Larry thinks it&amp;rsquo;s a good idea.&lt;/p&gt;

&lt;h4 id=&#34;accessor-only-virtual-attributes-http-www-mail-archive-com-perl6-language-40perl-org-msg20983-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20983.html&#34;&gt;Accessor-Only Virtual Attributes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered what would happen if he made an &amp;ldquo;accessor&amp;rdquo; for an attribute that didn&amp;rsquo;t really exist. He wanted to be able to disguise accessor methods as attributes within class and subclass scope (at least, I think that&amp;rsquo;s what he wants). Larry seemed to think he was barking up the wrong tree&amp;ndash;class attributes are only likely to be accessible using the &lt;code&gt;$.whatever&lt;/code&gt; form within their declaring class and not any subclasses. Larry&amp;rsquo;s &amp;ldquo;got some driving to do&amp;rdquo; so expect some more thoughts about this in the next summary.&lt;/p&gt;

&lt;h4 id=&#34;strange-interaction-between-pairs-and-named-binding-http-www-mail-archive-com-perl6-language-40perl-org-msg20985-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20985.html&#34;&gt;Strange Interaction Between Pairs and Named Binding&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, although&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt; Pair $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;works,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt;      $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;doesn&amp;rsquo;t, which is somewhat counter-intuitive. The problem is, the second cas treats the pair as a named argument specifier. After discussion, Autrijus suggested that the best thing might be to specify that the &lt;code&gt;Bare&lt;/code&gt; code object (which includes pointy and non-pointy blocks) have &lt;code&gt;Any&lt;/code&gt; as a default parameter type&amp;ndash;essentially turning off the special behavior of pairs when calling named blocks. I&amp;rsquo;m all for this myself, but Larry has yet to speak.&lt;/p&gt;

&lt;h4 id=&#34;how-do-subroutines-check-types-http-www-mail-archive-com-perl6-language-40perl-org-msg20997-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20997.html&#34;&gt;How Do Subroutines Check Types?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some questions about specifying types in subroutine definitions. Specifically, he wanted to be able to specify that a sub only take instances of a class &lt;code&gt;Foo&lt;/code&gt; and its subclasses but not the class &lt;code&gt;Foo&lt;/code&gt; (or its subclasses) itself. Thomas Sandlaß thought that what Ingo wanted is the default behavior and you actually have to do some work to get it to behave any other way.&lt;/p&gt;

&lt;h4 id=&#34;referring-to-package-variables-in-the-default-namespace-http-www-mail-archive-com-perl6-language-40perl-org-msg21001-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21001.html&#34;&gt;Referring to Package Variables in the Default Namespace&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matthew Hodgson asked for some clarification of how the default package namespace works. Apparently, Pugs and Synopsis 10 are slightly at odds. Larry had some answers. Matthew probably has some more questions.&lt;/p&gt;

&lt;h3 id=&#34;crikey-that-went-quickly&#34;&gt;Crikey! That Went Quickly&lt;/h3&gt;

&lt;p&gt;Or, for the traditionalists among you:&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies and Alliteration&lt;/h3&gt;

&lt;h4 id=&#34;hunting-the-perfect-archive&#34;&gt;Hunting the Perfect Archive&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m still on the lookout for a replacement for Google groups for my message links. I need an archive that&amp;rsquo;s up to date with the lists, and has URLs that are easy to derive from &lt;code&gt;Message-ID&lt;/code&gt;s. Bonus points for good thread handling.&lt;/p&gt;

&lt;h4 id=&#34;help-chip-http-geeksunite-org&#34;&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;Help Chip&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tell all your friends, this cannot stand.&lt;/p&gt;

&lt;h4 id=&#34;the-usual-coda&#34;&gt;The Usual Coda&lt;/h4&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 5-12, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050714.html/</link>
      <pubDate>Thu, 14 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050714.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another summary from the frog house, a house so green you can see it from outer space (according to Google Earth).&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;&lt;em&gt;Perl 6 Compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;building-pugs-workaround-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-970364a0f2f52b9e-3d87824ffe636644-3d87824ffe636644&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/970364a0f2f52b9e/3d87824ffe636644#3d87824ffe636644&#34;&gt;Building Pugs Workaround&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain posted a useful workaround to the error &lt;code&gt;error: field `_crypt_struct&#39; has incomplete type&lt;/code&gt;, which occurs on some systems. Fortunately, &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e6246066a58d0751/ffcfa88d592a26c9#ffcfa88d592a26c9&#34;&gt;Salvador Ortiz Garcia found a fix&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pugs-pirate-pirate-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-49f0827f81def78d-b88e8886f14b55c7-b88e8886f14b55c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/49f0827f81def78d/b88e8886f14b55c7#b88e8886f14b55c7&#34;&gt;Pugs, Pirate. Pirate, Pugs.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus began plotting with the Pirate folks. Thoughts include unifying PIL and PAST, or possibly retargeting PIL to PAST. Perhaps the result should be a more nautical dog. Maybe schipperke.&lt;/p&gt;

&lt;h4 id=&#34;implicit-invocants-and-pain-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-cb4496b1e466142b-d6a35534fbc745aa-d6a35534fbc745aa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/cb4496b1e466142b/d6a35534fbc745aa#d6a35534fbc745aa&#34;&gt;Implicit Invocants and Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry (as the summary will later explain) ruled that &lt;code&gt;./method&lt;/code&gt; was gone. He further ruled that &lt;code&gt;.method&lt;/code&gt; would pitch fits at either compile or run time if &lt;code&gt;$_ =:= $?SELF&lt;/code&gt; were false. Autrijus found this quite difficult to implement. Talk continues, and my instincts tell me that this too will pass, although Larry assures us that it is absolutely permanent for at least a week.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;key-question-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c182587ef8cbc62-4c48cd30a6a3f878-4c48cd30a6a3f878&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c182587ef8cbc62/4c48cd30a6a3f878#4c48cd30a6a3f878&#34;&gt;Key Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klass-Jan Stol found that using a assigning a floating point value to a key and then using it makes Parrot segfault. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrot-copyrights-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-01fc3ff8a6203ea6-ae4374d359358914-ae4374d359358914&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/01fc3ff8a6203ea6/ae4374d359358914#ae4374d359358914&#34;&gt;Parrot Copyrights&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal hinted that the Perl Foundation has almost finished hammering out some legal stuff and there will soon be sweeping changes throughout the repository addressing copyright issues.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-in-globs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5e4230c5bcd0fc94-0bdb158c243fa88c-0bdb158c243fa88c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5e4230c5bcd0fc94/0bdb158c243fa88c#0bdb158c243fa88c&#34;&gt;Character Classes in Globs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda noted that Tcl would pass more tests if PGE supported character classes in globs. Patrick, unable to resist the siren call of passing tests, implemented it.&lt;/p&gt;

&lt;h4 id=&#34;amber-for-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7f12c68f90744406-667e5992eeedcd29-667e5992eeedcd29&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7f12c68f90744406/667e5992eeedcd29#667e5992eeedcd29&#34;&gt;Amber for Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne announced that he had succeed in extracting viable DNA from a Parrot encased in amber since the Jurassic age. Either that or he released Amber version 0.2.2&amp;ndash;I&amp;rsquo;m not sure which.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fb1b9a5072fcbc55-bf163135cb4a7a27-bf163135cb4a7a27&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fb1b9a5072fcbc55/bf163135cb4a7a27#bf163135cb4a7a27&#34;&gt;Leo&amp;rsquo;s Branch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo has created a branch in SVN (&lt;em&gt;branches/leo-ctx5&lt;/em&gt;) of his work implementing the new calling conventions. This led to some discussion of &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/621435fc758277c1/fa477ead1d6957e1#fa477ead1d6957e1&#34;&gt;how to deal with optional arguments&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-mod-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-520665e89857bff8-24115e27fd5aeb37-24115e27fd5aeb37&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/520665e89857bff8/24115e27fd5aeb37#24115e27fd5aeb37&#34;&gt;Leo&amp;rsquo;s Branch Meets &lt;code&gt;mod_parrot&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz posted some observations and troubles he was having with Leo&amp;rsquo;s branch of new calling conventions. Leo warned that the branch was still young, but would gladly take test cases.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3de317517c40bfa3-157132eab2cbe703-157132eab2cbe703&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3de317517c40bfa3/157132eab2cbe703#157132eab2cbe703&#34;&gt;Leo&amp;rsquo;s Branch Meets PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After the initial discussion of optional parameters, Patrick updated the &lt;em&gt;leo_ctx5&lt;/em&gt; branch of PGE to the new calling conventions. All tests pass.&lt;/p&gt;

&lt;h4 id=&#34;get-onto-the-bus-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4fe4d8d6b23aec8e-41f4834e16082655-41f4834e16082655&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4fe4d8d6b23aec8e/41f4834e16082655#41f4834e16082655&#34;&gt;Get Onto the Bus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse found a Bus Error when running &lt;em&gt;languages/tcl/examples/bench.tcl&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;mingw-patch-resurrection-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-51ac75d80345b160-99254fc869fb1f97-99254fc869fb1f97&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/51ac75d80345b160/99254fc869fb1f97#99254fc869fb1f97&#34;&gt;MinGW Patch Resurrection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad resurrected a patch from mid-June with a set of action items. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;scared-parrots-like-scheme-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7f319f6edcee5fe-88e0bd3eb7606a57-88e0bd3eb7606a57&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7f319f6edcee5fe/88e0bd3eb7606a57#88e0bd3eb7606a57&#34;&gt;Scared Parrots Like Scheme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joh Lenz posted an announcement that he had an alpha version of Chicken (a Scheme to C compiler) backending to Parrot. Leo provided answers to some of his questions.&lt;/p&gt;

&lt;h4 id=&#34;bytecode-vs-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-64ebf15daf416f4a-224e3552a6a356a0-224e3552a6a356a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/64ebf15daf416f4a/224e3552a6a356a0#224e3552a6a356a0&#34;&gt;Bytecode Vs. PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse posted a list of questions about the place of PMCs. Some of the core tradeoffs include maintainability, portability, optimization, duplicate implementations, and security.&lt;/p&gt;

&lt;h4 id=&#34;make-svnclean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8bd8095c14224951-4b2a7f23442595b5-4b2a7f23442595b5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8bd8095c14224951/4b2a7f23442595b5#4b2a7f23442595b5&#34;&gt;&lt;code&gt;make svnclean&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that someone removed &lt;code&gt;make svnclean&lt;/code&gt;, but that he found it useful. Chip suggested renaming it &lt;code&gt;make svnclobber&lt;/code&gt;, as it does more than just clean.&lt;/p&gt;

&lt;h4 id=&#34;pmc2c-pl-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-303a65c78710702d-d277f7d8ed2d9c1f-d277f7d8ed2d9c1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/303a65c78710702d/d277f7d8ed2d9c1f#d277f7d8ed2d9c1f&#34;&gt;&lt;em&gt;pmc2c.pl&lt;/em&gt; Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found a bug in the shortcut to avoid writing a PMC dump file. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;define-cache-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a6ccdcd2d2f1979d-2628963df14329d6-2628963df14329d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a6ccdcd2d2f1979d/2628963df14329d6#2628963df14329d6&#34;&gt;Define &lt;code&gt;cache&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark suggested that it was probably not wise to &lt;code&gt;#define&lt;/code&gt; &lt;code&gt;cache&lt;/code&gt;. They removed it.&lt;/p&gt;

&lt;h4 id=&#34;parrots-getting-smarter-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-36e9e7223850dcbe-c6e71a192649f4e8-c6e71a192649f4e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/36e9e7223850dcbe/c6e71a192649f4e8#c6e71a192649f4e8&#34;&gt;Parrots Getting Smarter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that at least one parrot understood the concept of zero, putting it some distance ahead of Romans when it comes to math. Once the Parrots start to grow opposable thumbs, I will welcome our new Parrot overlords.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-exceptions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4762ca5b69bec1cd-e69e85ac96c3ed6f-e69e85ac96c3ed6f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4762ca5b69bec1cd/e69e85ac96c3ed6f#e69e85ac96c3ed6f&#34;&gt;Leo&amp;rsquo;s Branch Meets Exceptions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted two suggestions for how the new calling conventions could interact with exceptions. Autrijus liked the idea of unifying exception handlers with the rest of calls and returns.&lt;/p&gt;

&lt;h4 id=&#34;control-flow-graph-bugs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7cdffa86f6f4ebb6-8ec31c6030b0950e-8ec31c6030b0950e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7cdffa86f6f4ebb6/8ec31c6030b0950e#8ec31c6030b0950e&#34;&gt;Control Flow Graph Bugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls noted what he thought might be a bug in the &lt;code&gt;compute_dominators&lt;/code&gt; function. Leo confirmed that it was likely a bug. Later he posted a note saying he was working on a new implementation for some of the CFG algorithms. He asked for a hand, but Warnock applied. Actually, I think I have looked at that code before. I would help be happy to take a look, Curtis.&lt;/p&gt;

&lt;h4 id=&#34;todo-steal-good-ideas-from-dan-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f5db2c4bec9b285f-4c502fffd9480eab-4c502fffd9480eab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f5db2c4bec9b285f/4c502fffd9480eab#4c502fffd9480eab&#34;&gt;TODO: Steal Good Ideas from Dan&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda opened a ticket suggesting that we open tickets based on some of Dan&amp;rsquo;s latest posts to Squaks of the Parrot. Remember: &amp;ldquo;talent imitates, but genius steals.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;punie-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fa0b911b26481df3-d3aa6dfdb0522d30-d3aa6dfdb0522d30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fa0b911b26481df3/d3aa6dfdb0522d30#d3aa6dfdb0522d30&#34;&gt;Punie&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal wants to add Punie (a Perl 1 compiler) to SVN. Response was positive.&lt;/p&gt;

&lt;h4 id=&#34;mobilizing-pm-groups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e09da82d02a0486a-7f74455bca561f06-7f74455bca561f06&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e09da82d02a0486a/7f74455bca561f06#7f74455bca561f06&#34;&gt;Mobilizing PM groups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if there had been any work mobilizing Perl Monger groups for the good of Parrot. Maybe I should finally look up the Cambridge or Boston PM group.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As usual in &lt;em&gt;p6l&lt;/em&gt; land, there are a couple of really long threads. As usual in &lt;em&gt;p6summarizer&lt;/em&gt; land, they will get short summaries. Odd how that happens.&lt;/p&gt;

&lt;h4 id=&#34;conflicting-autogenerated-accessors-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-35bee7deb1a4defc-f959d1b2d0c37f34-f959d1b2d0c37f34&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/35bee7deb1a4defc/f959d1b2d0c37f34#f959d1b2d0c37f34&#34;&gt;Conflicting Autogenerated Accessors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Stevan Little wondered what would happen with conflicting autogenerated accessor names. Larry said they would carp as soon as they were discovered.&lt;/p&gt;

&lt;h4 id=&#34;dbi-v2-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d6ccf668de28e368-5556b425d916aada-5556b425d916aada&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d6ccf668de28e368/5556b425d916aada#5556b425d916aada&#34;&gt;DBI v2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The first really long thread has to do with the next version of DBI. I am not really a database person, but apparently those who are have &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b8d9be2e31c02600/c43179f8586e8b72#c43179f8586e8b72&#34;&gt;strong opinions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;time-local-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c19bea30514933f4-3b16c5e62f1cffbe-3b16c5e62f1cffbe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c19bea30514933f4/3b16c5e62f1cffbe#3b16c5e62f1cffbe&#34;&gt;Time::Local&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The next really long thread has to do with the next version of Time::Local. I am not really a Time person, but apparently those who are have strong opinions.&lt;/p&gt;

&lt;h4 id=&#34;submethods-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7a159cc98802b975-7eb8b200aa302aac-7eb8b200aa302aac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7a159cc98802b975/7eb8b200aa302aac#7eb8b200aa302aac&#34;&gt;Submethods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little and Larry Wall talked about submethods, their purpose, and their interaction with the metamodel. I must say that I have only partially wrapped my head around metamodels at all.&lt;/p&gt;

&lt;h4 id=&#34;smd-considered-harmful-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f81ec2a928ff59b7-c89f2f00d5c263de-c89f2f00d5c263de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f81ec2a928ff59b7/c89f2f00d5c263de#c89f2f00d5c263de&#34;&gt;SMD Considered Harmful?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Yuval Kogman conjectured that MMD should be the one true MD, as it allowed nifty extensibility. This week, Stuart Cook offered a sort of compromise. I rather like Stuart&amp;rsquo;s compromise.&lt;/p&gt;

&lt;h4 id=&#34;dependency-injection-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-322560d7d27fb63c-7332b80612ba1300-7332b80612ba1300&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/322560d7d27fb63c/7332b80612ba1300#7332b80612ba1300&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wants to be able to have classes that inject themselves in correctly at use time, based on what is actually used. Larry commented, but one quote really caught my attention: &amp;ldquo;Globals are bad only if you use them to hold non-global values.&amp;rdquo; &amp;lt;off-topic&amp;gt;There is an important lesson imbedded in that quote. We really should learn rules not to follow them blindly, but so that we understand the spirit behind them and respect that instead. Not that I have had screaming matches with any programmers who blindly eschew globals and &lt;code&gt;goto&lt;/code&gt;s without understanding why. &amp;lt;/off-topic&amp;gt; That was more of a rant then just off-topic. Oh well.&lt;/p&gt;

&lt;h4 id=&#34;file-seek-interface-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ab5aff3faacb3d55-0fabc28358cb62be-0fabc28358cb62be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ab5aff3faacb3d55/0fabc28358cb62be#0fabc28358cb62be&#34;&gt;&lt;code&gt;File.seek&lt;/code&gt; Interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian wondered what the &lt;code&gt;seek&lt;/code&gt; interface would look like for handles. Larry likes the idea of it working entirely through opaque position objects using &lt;code&gt;`&lt;/code&gt; to specify units.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-perl-5-82-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-efafd6d6e69625ad-4006f811870dbf22-4006f811870dbf22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/efafd6d6e69625ad/4006f811870dbf22#4006f811870dbf22&#34;&gt;Perl 6/Perl 5 ~ 82%&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael Hendricks noticed that (according to &lt;a href=&#34;https://metacpan.org/pod/Text::TypingEffort&#34;&gt;Text::TypingEffort&lt;/a&gt;). Perl 6 requires 18 percent less effort than Perl 5. He suggests that this is a bad thing for the community&amp;rsquo;s waistline. I conjecture that Perl developers will use the extra time they save for activities such as running and canoeing, and as a result will paradoxically lose weight from expending less effort at work.&lt;/p&gt;

&lt;h4 id=&#34;creating-value-types-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-afe5ce7665d8c7cb-4d5909caa7ae0e1f-4d5909caa7ae0e1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/afe5ce7665d8c7cb/4d5909caa7ae0e1f#4d5909caa7ae0e1f&#34;&gt;Creating Value Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to create a value type. Luke Palmer suggested using an &lt;code&gt;is value&lt;/code&gt; trait. He then went on to speculate about mutating value traits and COW semantics. Larry though that perhaps an &lt;code&gt;is copy&lt;/code&gt; trait was called for. Oooh, a preposition at the end of a sentence; makes me want to occasionally split infinitives.&lt;/p&gt;

&lt;h4 id=&#34;oo-isa-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-543393430f6292d0-525e5dfe05a1bd18-525e5dfe05a1bd18&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/543393430f6292d0/525e5dfe05a1bd18#525e5dfe05a1bd18&#34;&gt;OO &lt;code&gt;.isa&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt viciously lied when claiming to post a &amp;ldquo;quick&amp;rdquo; &lt;code&gt;isa&lt;/code&gt; question. This quickly went the way of the meta object. I think I mentioned my take on those earlier (powerful, but ow).&lt;/p&gt;

&lt;h4 id=&#34;method-call-on-invocant-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-93f95d3dd9c36110-cd3de4e88dc2868d-cd3de4e88dc2868d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/93f95d3dd9c36110/cd3de4e88dc2868d#cd3de4e88dc2868d&#34;&gt;Method Call on Invocant&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The last really long thread has to do with the next chapter in the &amp;ldquo;method call on self&amp;rdquo; saga. I am a bit of a &amp;ldquo;method call on self&amp;rdquo; person, and apparently those who are have strong opinions. It&amp;rsquo;s worth noting this time that Larry updated the current state of the world. Now &lt;code&gt;./method&lt;/code&gt; is gone and &lt;code&gt;.method&lt;/code&gt; only works when &lt;code&gt;$_ =:= $?SELF&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;use-and-require-question-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8c1270622f08e693-aad674b8d5e852ee-aad674b8d5e852ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8c1270622f08e693/aad674b8d5e852ee#aad674b8d5e852ee&#34;&gt;&lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; actually do. Gall Yahas suggested they return the last thing in the used/required file. Larry agreed and held that they would also return the same thing. He also warned that &lt;code&gt;%INC&lt;/code&gt; would probably work differently in Perl 6.&lt;/p&gt;

&lt;h4 id=&#34;user-defined-infix-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c4349076f6416aca-5a12927bc3af87d9-5a12927bc3af87d9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c4349076f6416aca/5a12927bc3af87d9#5a12927bc3af87d9&#34;&gt;User-Defined &lt;code&gt;infix&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if an method &lt;code&gt;infix:&amp;lt;===&amp;gt;&lt;/code&gt; would need marking as export for a script that &lt;code&gt;use&lt;/code&gt;s it to get the method. Larry explained that the method &lt;code&gt;infix:&amp;lt;===&amp;gt;&lt;/code&gt; would be available by name, but would have to be marked as export for the syntactic sugar of &lt;code&gt;A === B&lt;/code&gt; to work.&lt;/p&gt;

&lt;h4 id=&#34;hackathon-notes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c189bc6a1ff45b63-6930a91ec364db48-6930a91ec364db48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c189bc6a1ff45b63/6930a91ec364db48#6930a91ec364db48&#34;&gt;Hackathon Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a link to his Hackathon notes. This spawned several threads. David Storrs tried to convince people to change subject lines, with limited success. Much of the discussion focused on MMD and how confusing it was. Damian Conway posted his set of three rules that would prevent AIs from harming humans and his set of eight rules that would prevent MMDs from harming programmers, proving that MMDs are almost three times more dangerous than AIs.&lt;/p&gt;

&lt;h4 id=&#34;raw-binary-data-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-34204e4b08d29684-adb4216e9160ce7d-adb4216e9160ce7d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/34204e4b08d29684/adb4216e9160ce7d#adb4216e9160ce7d&#34;&gt;Raw Binary Data&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa wanted to play with raw binary data in Perl 6. I try and avoid raw things except sushi. Larry suggested that this would just be a string with its maximum abstraction level set to bytes.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 29-July 5, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</link>
      <pubDate>Thu, 07 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</guid>
      <description>

&lt;p&gt;My, doesn&amp;rsquo;t time fly? Another fortnight gone and another summary to write. It&amp;rsquo;s a hard life, I tell you!&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;where-s-everyone-gone&#34;&gt;Where&amp;rsquo;s Everyone Gone?&lt;/h4&gt;

&lt;p&gt;It seems that most of the Perl 6 compiler development discussions occur at Hackathons and on IRC, with summaries appearing in developers&amp;rsquo; weblogs. What&amp;rsquo;s a summarizer to do? For now, I&amp;rsquo;ll point you at &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;Planet Perl 6&lt;/a&gt;, which aggregates a bunch of relevant blogs.&lt;/p&gt;

&lt;h4 id=&#34;pge-now-supports-grammars-built-in-rules-http-groups-google-com-groups-threadm-b7a12d0375515a6b4381efe3d71ef61e-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=b7a12d0375515a6b4381efe3d71ef61e@perl.org&#34;&gt;PGE Now Supports Grammars, Built-In Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal raved about the &amp;ldquo;totally awesome&amp;rdquo; PGE grammar support. I doubt she&amp;rsquo;s alone in her enthusiasm.&lt;/p&gt;

&lt;h4 id=&#34;multiple-implementations-are-good-m-kay-http-groups-google-com-groups-threadm-20050702165140-gh5089-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702165140.GH5089@pmichaud.com&#34;&gt;Multiple Implementations Are Good, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick discussed the idea of a &amp;ldquo;final&amp;rdquo; Perl 6 compiler, pointing out that it isn&amp;rsquo;t clear that there needs to be a &amp;ldquo;final&amp;rdquo; compiler. As long as multiple implementations are compatible.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;new-calling-conventions-http-groups-google-com-groups-threadm-42c16b5a-7040101-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C16B5A.7040101@home.nl&#34;&gt;New Calling Conventions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked a bunch of questions about the new calling conventions and Leo answered them.&lt;/p&gt;

&lt;h4 id=&#34;parrot-segfaults-http-groups-google-com-groups-threadm-200506291354-19610-parrot-jensbeimsurfen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200506291354.19610.parrot@jensbeimsurfen.de&#34;&gt;Parrot Segfaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;What&amp;rsquo;s a tester to do? You find a bug that makes Parrot dump core, so you write a test to document the bug and make sure it gets fixed. But the test leaves core files lying about. It goes without saying that Parrot should never dump core without the active assistance of an NCI call or some other unsafe call blowing up in its face.&lt;/p&gt;

&lt;p&gt;This makes it a little embarrassing that PIR code generated by Pugs can cause a Parrot segfault, though the cause appears be mixed up calling convention style in the generated call.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1120142239.14968.20.camel@wombat%0A.dlib.indiana.edu&#34;&gt;Brian Wheeler&amp;rsquo;s segfaulting Pugs script&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;python-pmcs-http-groups-google-com-groups-threadm-42c395fe-7010701-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C395FE.7010701@toetsch.at&#34;&gt;Python PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that the various &lt;em&gt;dynclasses/py*.pmc&lt;/em&gt; Parrot support PMCs don&amp;rsquo;t yet support all the semantics that Python needs. He outlined some outstanding issues and announced that, as calling conventions and context handling were changing, he&amp;rsquo;d be turning off compiling &lt;em&gt;py*.pmc&lt;/em&gt; for the time being.&lt;/p&gt;

&lt;h4 id=&#34;pge-bug-http-groups-google-com-groups-threadm-42c40534-1000102-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C40534.1000102@toetsch.at&#34;&gt;PGE Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It appears that the upcoming changes in Parrot&amp;rsquo;s context handling tweak a bug in PGE. The discussion moved onto a discussion of PGE&amp;rsquo;s implementation strategy; Nicholas Clark was keen to make sure it didn&amp;rsquo;t repeat some of the Perl 5&amp;rsquo;s regex engine&amp;rsquo;s infelicities. While this discussion continued, Leo spent half a day with &lt;code&gt;gdb&lt;/code&gt; and tracked down the problem, which turned out to be that a register wasn&amp;rsquo;t getting initialized in the right place.&lt;/p&gt;

&lt;h4 id=&#34;left-recursive-grammars-are-bad-m-kay-http-groups-google-com-groups-threadm-rt-3-0-11-36437-116436-17-8864180085717-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36437-116436.17.8864180085717@perl.org&#34;&gt;Left-Recursive Grammars Are Bad, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While experimenting with PGE grammars, Will Coleda managed to write a left-recursive grammar that blew Parrot&amp;rsquo;s call stack with impressive ease. Luke apologized for things blowing up so spectacularly, but pointed out that PGE didn&amp;rsquo;t support left-recursive grammars and showed a rewritten grammar that didn&amp;rsquo;t have the same problem (but which doesn&amp;rsquo;t appear to match the same expressions).&lt;/p&gt;

&lt;h4 id=&#34;coroutines-http-groups-google-com-groups-threadm-ebb4ed649916ee6a195be937c1921d48-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ebb4ed649916ee6a195be937c1921d48@toetsch.at&#34;&gt;Coroutines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed to &lt;a href=&#34;ftp://ftp.inf.puc-rio.br/pub/docs/techreports/04_15_moura.pdf&#34;&gt;a summary of coroutines&lt;/a&gt; (PDF), and noted that we still hadn&amp;rsquo;t defined the syntax of Parrot coroutines, especially with respect to argument passing. He discussed it with Matt Fowles and solicited a set of tests that expressed the semantics they came up with.&lt;/p&gt;

&lt;h4 id=&#34;partcl-perl-6-grammars-http-groups-google-com-groups-threadm-d1e396f5-6ae6-43d3-b0a0-08cc710dba6c-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=D1E396F5-6AE6-43D3-B0A0-08CC710DBA6C@coleda.com&#34;&gt;ParTcl, Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda announced that, thanks to Matt Diephouse&amp;rsquo;s work, ParTcl (Tcl on Parrot) is now able to run part of Tcl&amp;rsquo;s cvs-latest test suite. The tests aren&amp;rsquo;t fully native yet, being currently driven through a Perl test harness and only passing ten percent of the tests, but hopefully the situation will improve and ParTcl will end up able to run the tests completely natively (while passing far more of them). Congratulations on the work so far, though.&lt;/p&gt;

&lt;h4 id=&#34;python-and-parrot-http-groups-google-com-groups-threadm-42c51ccb-7010008-tewk-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C51CCB.7010008@tewk.com&#34;&gt;Python and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew popped up to say that he too is working on a Python compiler targeting Parrot and wondered how to handle things like Python&amp;rsquo;s &lt;code&gt;self&lt;/code&gt; parameter. Michal Wallace and Leo chipped in with suggestions.&lt;/p&gt;

&lt;h4 id=&#34;another-month-another-release-http-groups-google-com-groups-threadm-42c7c447-8000302-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C7C447.8000302@toetsch.at&#34;&gt;Another Month, Another Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Has it really been a month? Seems so. Parrot walked through the traditional feature freeze and code freeze before being released on Sunday. The latest release is &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;, referencing the website that discusses Chip&amp;rsquo;s problems with his former employer. You should definitely visit the Geeksunite site&amp;ndash;Chip needs our help.&lt;/p&gt;

&lt;h4 id=&#34;lower-in-default-find-name-scope-http-groups-google-com-groups-threadm-20050702012449-ga25256-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702012449.GA25256@pmichaud.com&#34;&gt;&lt;code&gt;lower&lt;/code&gt; in Default &lt;code&gt;find_name&lt;/code&gt; Scope&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick posted a code fragment whose output surprised him&amp;ndash;it turned out that looking up &lt;code&gt;lower&lt;/code&gt; as a name in the default scope returns an NCI object. Leo explained why this was so, prompting Patrick to suggest that it would be useful if, somewhere in the Parrot documentation, there were some descriptions of Parrot&amp;rsquo;s built-in namespace. Leo encourage others to comment on namespace issues, and hoped for some decisions as well.&lt;/p&gt;

&lt;h4 id=&#34;copyrights-http-groups-google-com-groups-threadm-fecf197f-def8-4e4f-8fe9-ee0b2036516e-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=FECF197F-DEF8-4E4F-8FE9-EE0B2036516E@coleda.com&#34;&gt;Copyrights&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re like me, discussion of copyrights and licenses is the sort of thing that either really winds you up or induces serious drowsiness, depending on your mood as you read the thread. It&amp;rsquo;s one of those &amp;ldquo;too important not to think about, but too tedious to think about any more than is absolutely necessary&amp;rdquo; topics. That said, Will Coleda said that he had thought that all of Parrot&amp;rsquo;s code should to have its copyright assigned to the Perl Foundation. However, on inspection, he noticed a multiplicity of copyright notices in the actual code, including one file in the repository with a Microsoft copyright.&lt;/p&gt;

&lt;h4 id=&#34;pge-code-blocks-http-groups-google-com-groups-threadm-198c873805070414191b878a4d-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873805070414191b878a4d@mail.gmail.com&#34;&gt;PGE: Code Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wondered about the plan for integrating code blocks into PGE. He thought it&amp;rsquo;d be nice to be able to specify a compiler to use along with the code block (or, for the time being, just to be able to use PIR code). Patrick said that there is a plan (or several) for handling this, but getting blocks to work well needs coordination between PGE and the compiler language. In essence, when PGE encounters a code block, it needs to hand off to the target language&amp;rsquo;s compiler to parse to the end of the code block, and get back from the compiler the length of the block thus parsed.&lt;/p&gt;

&lt;h4 id=&#34;possible-bug-calculating-denominators-http-groups-google-com-groups-threadm-45ec99fc05070423504732f4fd-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc05070423504732f4fd@mail.gmail.com&#34;&gt;Possible Bug Calculating Denominators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls posted a fragment of code that seems to break Inc&amp;rsquo;s &lt;code&gt;computed_denominators&lt;/code&gt; algorithm. Leo wasn&amp;rsquo;t surprised that there were probably bugs in that part of IMCC, which was contributed by Angel Faus, who no longer seems to be participating in Parrot development. Which means it&amp;rsquo;s not been maintained for a while for lack of tuits. Anyone with an appropriate supply of tuits is welcome (nay, encouraged) to take it on.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;type-variables-vs-type-literals-http-www-nntp-perl-org-group-perl-perl6-language-22041&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22041&#34;&gt;Type Variables Vs. Type Literals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus had a question about the difference between&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (::T $x, ::T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (T $x, T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Larry answered about four times, mulling over various options. It&amp;rsquo;s times like that remind me why it&amp;rsquo;s worth following the list in detail rather than reading the summaries&amp;ndash;it&amp;rsquo;s good to see Larry thinking aloud, considering all sorts of (seemingly) wacky options and getting feedback.&lt;/p&gt;

&lt;h4 id=&#34;mr-clean-vs-perl-6-http-www-nntp-perl-org-group-perl-perl6-language-22042&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22042&#34;&gt;Mr. Clean Vs. Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman had some comments about fascism, strong (but I think he meant static) typing, cleaning products, Perl 6, and type inferencing. Stephane Payrard hoped that &amp;ldquo;Perl6 could become the playground of type theory searchers.&amp;rdquo; (To which I can only respond with a highly personal &amp;ldquo;Ick!&amp;rdquo;)&lt;/p&gt;

&lt;h4 id=&#34;documentation-trait-docstring-equivalent-http-www-nntp-perl-org-group-perl-perl6-language-22044&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22044&#34;&gt;Documentation Trait/Docstring Equivalent&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The Platypus (AKA David Formosa) wondered if documentation traits on subs would be useful. The first to hope that it would be was Chromatic, commenting that it&amp;rsquo;s a shame for Perl 6 to throw away potentially useful data recklessly. Larry commented that he always cringes when he hears &amp;ldquo;the documentation&amp;rdquo; as if it&amp;rsquo;s the only thing. Again, Larry&amp;rsquo;s thinking aloud on this subject is well worth your time.&lt;/p&gt;

&lt;h4 id=&#34;smd-is-for-weenies-http-www-nntp-perl-org-group-perl-perl6-language-22045&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22045&#34;&gt;SMD Is for Weenies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;So says Yuval Kogman, and who are we to doubt him? Yuval wanted to make multimethods the default type. Sam Vilain disagreed, pointing up the usefulness of warnings like &amp;ldquo;method foo redefined at &amp;hellip;.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;dbi-v2-the-plan-and-how-you-can-help-http-www-nntp-perl-org-group-perl-perl6-language-22054&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22054&#34;&gt;DBI v2: The Plan and How You Can Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce outlined his current thinking on how DBI v2 will work (DBI v2&amp;rsquo;s going to be Perl-6-only) and a local roadmap for the first things that need doing. He then opened the floor for detailed proposals for what a Perl 6 DBI API should look like. (I wonder if DBI v2&amp;rsquo;s going to be an important enough tool that it&amp;rsquo;ll want an RFC type process.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m glossing over &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22058&#34;&gt;the ensuing discussion&lt;/a&gt;&amp;ndash;it&amp;rsquo;s at the stage where, if you&amp;rsquo;re interested, you&amp;rsquo;re better off joining in directly.&lt;/p&gt;

&lt;h4 id=&#34;should-assuming-always-be-non-mutating-http-www-nntp-perl-org-group-perl-perl6-language-22060&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22060&#34;&gt;Should &lt;code&gt;.assuming&lt;/code&gt; Always Be Non-Mutating?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some suggestions about the behavior of the currying method &lt;code&gt;.assuming&lt;/code&gt;, arguing that it should always return a new thing and not alter the state of the underlying object. Larry agreed.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-www-nntp-perl-org-group-perl-perl6-language-22061&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22061&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Coo. The pointy block thread returns. The question is, where to?&lt;/p&gt;

&lt;h4 id=&#34;time-local-http-www-nntp-perl-org-group-perl-perl6-language-22076&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22076&#34;&gt;Time::Local&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas announced that he&amp;rsquo;d added &lt;code&gt;localtime&lt;/code&gt; to Pugs in order to address Dave Rolsky&amp;rsquo;s needs when porting the very lovely and worthwhile DateTime family of modules. He noted that Perl 6&amp;rsquo;s final time-related interfaces were rather underspecified and had a bunch of questions. The one thing that&amp;rsquo;s absolutely certain is that the default Perl time API will use subsecond resolution by default.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that, every time you start to discuss how computers handle &amp;ldquo;human&amp;rdquo; things such as time, dates, or writing systems, people often seem to have very strong and deeply held ideas of the Right Way of doing things, and those Right Ways are almost all different. Larry&amp;rsquo;s job is probably going to be to work out the Least Wrong Way. (If you&amp;rsquo;ve not heard &lt;a href=&#34;http://perlcast.com/audio/Perlcast_015.mp3&#34;&gt;Dave Rolsky&amp;rsquo;s talks about the underlying reasons for writing DateTime&lt;/a&gt; (MP3) and the headaches it gave him, then I suggest you seek it out.)&lt;/p&gt;

&lt;h4 id=&#34;autogenerated-attribute-accessor-names-http-www-nntp-perl-org-group-perl-perl6-language-22097&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22097&#34;&gt;Autogenerated Attribute Accessor Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;MetaModel maker Stevan Little wondered what to do when attribute names clashed, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo { has @.bar; has $.bar; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No answers yet.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;Summarizing a week is definitely way easier than summarizing a fortnight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m apologizing in advance for the fact that, for those of you who read this via the mailing list, some of the links probably don&amp;rsquo;t work yet. The thing is, the thread links are generated directly from the &lt;code&gt;message-id&lt;/code&gt;s because that&amp;rsquo;s the information I have access to and, so far as I know, Google Groups is the only archive that has a RESTful search interface that lets me use &lt;code&gt;message-id&lt;/code&gt;s as my key. If you know of an archive site that does this, but is more timely in its archiving of &lt;em&gt;perl6-language&lt;/em&gt; in particular, then please let me know and I&amp;rsquo;ll start using that instead. Ideally, it should allow me to directly address a message complete with its thread context.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, you really should pay a visit to &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;. For the life of me, I can&amp;rsquo;t see what I would have done differently in Chip&amp;rsquo;s situation, and I&amp;rsquo;m staggered by what&amp;rsquo;s happened to him.&lt;/p&gt;

&lt;p&gt;Right, back to our standard coda:&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 21-28, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050630.html/</link>
      <pubDate>Thu, 30 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050630.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Long time no see &amp;hellip; err, write &amp;hellip; uh, read &amp;hellip; um &amp;hellip; this. Yeah, long time no this. As Piers hinted, two weeks ago I moved. Moving sucks. For those of you who care, I am still in Cambridge; for those of you who care more, I think you misunderstand the summarizer/summary reader relationship. Essentially it revolves around summaries; the summary of my move is Cambridge to Cambridge.&lt;/p&gt;

&lt;p&gt;As Piers noted last week, this is a low-volume, high-action week, in no small part due to the hack-a-thons. Last week&amp;rsquo;s was in Austria, this week&amp;rsquo;s is near Toronto. Perhaps some nice soul who was actually at these hack-a-thons will summarize them when it is over.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pge-announcements-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-abfc8d43c0030ae2-db08ca00d5df5bad-db08ca00d5df5bad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/abfc8d43c0030ae2/db08ca00d5df5bad#db08ca00d5df5bad&#34;&gt;PGE Announcements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick announced that PGE now supports grammars and more built-in rules. He even offered to field requests for built-in rules (although he would prefer patches).&lt;/p&gt;

&lt;h4 id=&#34;caller-s-context-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-f26c2b6b94f58bec-4f9964a9246294c5-4f9964a9246294c5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f26c2b6b94f58bec/4f9964a9246294c5#4f9964a9246294c5&#34;&gt;Caller&amp;rsquo;s Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wanted to know how to determine if his sub is called in void context. He conjectured that &lt;code&gt;want&lt;/code&gt; might fill his wants. There is no response yet.&lt;/p&gt;

&lt;h4 id=&#34;self-hosting-goals-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a7006466f65ed918-649a0c2ebdc39551-649a0c2ebdc39551&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a7006466f65ed918/649a0c2ebdc39551#649a0c2ebdc39551&#34;&gt;Self-Hosting Goals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas explained that one good reason for Perl 6 to be self-hosting is that it would allow the people who love it most (Perl hackers) to hack on it. The theory is that low-level languages like C unnecessarily narrow the field of contributors (especially those that only know Perl). People expressed some concerns expressed over confusion about the language Ponie should be written in. No one disputes that this is C.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;indexing-hashtables-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-47fabb48ef7956e8-b0617764c7f5cf9d-b0617764c7f5cf9d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/47fabb48ef7956e8/b0617764c7f5cf9d#b0617764c7f5cf9d&#34;&gt;Indexing Hashtables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked for a clue bat with respect to indexing hash tables in PIR. Joshua Juran and Leo each took a swing.&lt;/p&gt;

&lt;h4 id=&#34;parrot-loses-with-fedora-core-4-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1d557b9589f65929-f387af585e3cea74-f387af585e3cea74&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1d557b9589f65929/f387af585e3cea74#f387af585e3cea74&#34;&gt;Parrot Loses with Fedora Core 4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick reported that Fedora Core 4 and Parrot don&amp;rsquo;t get along well. Leo suggested a possible solution. Patrick has posted no response.&lt;/p&gt;

&lt;h4 id=&#34;default-method-resolution-order-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-95280ad597d4790d-d5dc071ccab92032-d5dc071ccab92032&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/95280ad597d4790d/d5dc071ccab92032#d5dc071ccab92032&#34;&gt;Default Method Resolution Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne wondered what the default MRO order is. Leo provided the answer: left-to-right, depth-first, discard all but the last occurrence of duplicates, divine intervention.&lt;/p&gt;

&lt;h4 id=&#34;win32-tests-failing-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-30bae80d039db434-38e92b8e886cb1a9-38e92b8e886cb1a9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/30bae80d039db434/38e92b8e886cb1a9#38e92b8e886cb1a9&#34;&gt;Win32 Tests Failing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Craig the Last-Nameless-One posted a list of failing tests and problems on Windows. Leo provided a few answers.&lt;/p&gt;

&lt;h4 id=&#34;method-inheritance-needs-perl-loving-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a0dd2cb3fefa091b-1f5a59bc9780dd12-1f5a59bc9780dd12&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a0dd2cb3fefa091b/1f5a59bc9780dd12#1f5a59bc9780dd12&#34;&gt;Method Inheritance Needs Perl Loving&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced a Perl job for the interested: method inheritance in the PMC compiler. This naturally led to discussion of numerical hierarchies. I was a little disappointed that quaternions appeared, but Hamiltonian and Surreal Numbers did not. Honestly, where are our priorities?&lt;/p&gt;

&lt;h4 id=&#34;tracing-and-debugging-pain-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-63231fc4b4354b74-8308d6a82a7391ee-8308d6a82a7391ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63231fc4b4354b74/8308d6a82a7391ee#8308d6a82a7391ee&#34;&gt;Tracing and Debugging Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse posted a general description of the problems he was having with tracing, debugging, and GC. Warnock might apply in a day or two.&lt;/p&gt;

&lt;h4 id=&#34;segmented-context-and-register-memory-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aac073aea211da64-3eb0faddd82cf78f-3eb0faddd82cf78f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aac073aea211da64/3eb0faddd82cf78f#3eb0faddd82cf78f&#34;&gt;Segmented Context and Register Memory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip posted a partial reply to Leo&amp;rsquo;s context and register overhaul patch. Andy Dougherty responded to some of Chip&amp;rsquo;s finer points. If you find the nuances of C&amp;rsquo;s pointer pain interesting, this thread is for you.&lt;/p&gt;

&lt;h4 id=&#34;improving-parrot-s-test-framework-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d9c6844fdd0370dd-89aeb7672bec78f4-89aeb7672bec78f4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d9c6844fdd0370dd/89aeb7672bec78f4#89aeb7672bec78f4&#34;&gt;Improving Parrot&amp;rsquo;s Test Framework&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic wants to improve Parrot&amp;rsquo;s test framework by stealing ideas from Test::Class. He wants to know if anyone else has an interest.&lt;/p&gt;

&lt;h4 id=&#34;setattribute-fails-with-multi-level-inheritance-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aa53a7af485b291f-7063cd92d09e5fa0-7063cd92d09e5fa0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aa53a7af485b291f/7063cd92d09e5fa0#7063cd92d09e5fa0&#34;&gt;&lt;code&gt;setattribute&lt;/code&gt; Fails with Multi-Level Inheritance&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne opened a ticket describing an error with &lt;code&gt;setattribute&lt;/code&gt; when using several layers of inheritance.&lt;/p&gt;

&lt;h4 id=&#34;register-allocation-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c5863248089d19c-a86685a0a333ba85-a86685a0a333ba85&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c5863248089d19c/a86685a0a333ba85#a86685a0a333ba85&#34;&gt;Register Allocation Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo opened a ticket for a problem with improper control flow tracking. Bill Coffman wondered whether the new register design is in place yet.&lt;/p&gt;

&lt;h4 id=&#34;pass-by-value-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a3e7c1a8234ed020-e249e566eb001b7b-e249e566eb001b7b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a3e7c1a8234ed020/e249e566eb001b7b#e249e566eb001b7b&#34;&gt;Pass by Value PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol mused that the new calling conventions could work to allow passing PMCs by value.&lt;/p&gt;

&lt;h4 id=&#34;parrot-fall-down-go-boom-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a49d5b1ae8374fc1-844cb69766ad6b3e-844cb69766ad6b3e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a49d5b1ae8374fc1/844cb69766ad6b3e#844cb69766ad6b3e&#34;&gt;Parrot Fall Down Go Boom&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles reported a segfaulting Parrot that passes its tests. Sadly, no one solved his problem in the four hours between his posting it and writing the summary.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;you-know-that-but-you-go-on-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-792e4adc208c9568-f4ca247b7b29cf04-f4ca247b7b29cf04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/792e4adc208c9568/f4ca247b7b29cf04#f4ca247b7b29cf04&#34;&gt;You Know That, But You Go On&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;As Piers noted, arguments about &lt;code&gt;./method&lt;/code&gt; versus &lt;code&gt;.method&lt;/code&gt; continue. Like Piers, I don&amp;rsquo;t like &lt;code&gt;./&lt;/code&gt;. I guess I was the only person who liked &lt;code&gt;$^&lt;/code&gt; as the invocant. Ah well, I guess I will just go on summarizing.&lt;/p&gt;

&lt;h4 id=&#34;binding-functions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-257b160616561992-d396c7a60a1d47a7-d396c7a60a1d47a7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/257b160616561992/d396c7a60a1d47a7#d396c7a60a1d47a7&#34;&gt;Binding Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wanted to use a Ruby idiom involving rebinding functions. Damian told him that he could, but also pointed him to &lt;code&gt;wrap&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;oo-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-caf03c9ef13ce6e5-8b7df20d9c8e6aab-8b7df20d9c8e6aab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/caf03c9ef13ce6e5/8b7df20d9c8e6aab#8b7df20d9c8e6aab&#34;&gt;OO Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András posted a question about method calls in Perl 6. Juerd and Piers provided answers.&lt;/p&gt;

&lt;h4 id=&#34;autoload-and-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-69acf71fe3cc023e-01dcb95c7294c925-01dcb95c7294c925&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/69acf71fe3cc023e/01dcb95c7294c925#01dcb95c7294c925&#34;&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; and &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week&amp;rsquo;s thread about &lt;code&gt;AUTOLOAD&lt;/code&gt; continued. It still seems to be fishing for some official decision.&lt;/p&gt;

&lt;h4 id=&#34;magic-mutators-and-proxies-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5196c30a34c9d60a-87bf624ff2f251be-87bf624ff2f251be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5196c30a34c9d60a/87bf624ff2f251be#87bf624ff2f251be&#34;&gt;Magic Mutators and Proxies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered if he could make proxies behave like he wanted to. Luke Palmer explained, yes, but he would need to use binding instead of assignment.&lt;/p&gt;

&lt;h4 id=&#34;quasiquoting-and-ppi-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d1335f4b4c548a25-f4ab8859af6f2269-f4ab8859af6f2269&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d1335f4b4c548a25/f4ab8859af6f2269#f4ab8859af6f2269&#34;&gt;Quasiquoting and PPI&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman asked how Quasiquoting and PPI would interact with the AST. Autrijus posted some explanation and Adam Kennedy cleared up some terms.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 8-21, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</link>
      <pubDate>Thu, 23 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</guid>
      <description>

&lt;p&gt;Surprise! It&amp;rsquo;s me again. You may be wondering what happened to last week&amp;rsquo;s summary (I know I was) and where Matt had gone. Well, I&amp;rsquo;m not entirely sure where exactly he is now, but last week was moving week for him.&lt;/p&gt;

&lt;p&gt;Those of you reading this on the mailing lists may also be wondering why this summary is so late. Um &amp;hellip; three words: &lt;em&gt;World of Warcraft&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As a summarizer, when you see the &amp;ldquo;last fortnight&amp;rdquo; view of a mailing list containing 21 messages, several thoughts spring, unbidden, to your mind: &amp;ldquo;Is my mail broken again?&amp;rdquo; &amp;ldquo;Has everyone given up?&amp;rdquo; &amp;ldquo;Phew, this group won&amp;rsquo;t take long to do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It turns out that the answer to both of those questions is &amp;ldquo;No.&amp;rdquo; What actually happened was that most of the stuff that normally happens in mail happened at the Austrian Perl Workshop and Leo Tötsch&amp;rsquo;s house, with a side order of IRC conversation and a bunch of spinoff threads in &lt;em&gt;p6l&lt;/em&gt; and &lt;em&gt;p6i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the last fortnight, &lt;a href=&#34;http://use.perl.org/~autrijus/journal/&#34;&gt;Pugs reached the point where it has a (mostly) working Parrot back end, and&lt;/a&gt; BÁRTHAZI Andras wondered if we shouldn&amp;rsquo;t &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622861&#34;&gt;start a &lt;em&gt;perl6-general&lt;/em&gt; mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;140 messages in this one. &lt;em&gt;p6c&lt;/em&gt; lulled me into a false sense of security. Again, you may notice a bewilderingly fast rate of change this summary. It turns out that they weren&amp;rsquo;t just working on Pugs at Leo&amp;rsquo;s house. Perl 6 Hackathons give great productivity.&lt;/p&gt;

&lt;h4 id=&#34;this-is-not-your-father-s-parrot&#34;&gt;This Is Not Your Father&amp;rsquo;s Parrot&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s been some serious work going on under the Parrot hood in the last two weeks. Leo and Chip have drastically reworked the calling conventions, which now use four new opcodes: &lt;code&gt;set_args&lt;/code&gt;, &lt;code&gt;set_returns&lt;/code&gt;, &lt;code&gt;get_params&lt;/code&gt;, and &lt;code&gt;get_results&lt;/code&gt;. At the time of writing, IMCC doesn&amp;rsquo;t give you full syntactic help with them, but they&amp;rsquo;re easy enough to use explicitly for the time being and the help is getting there. Check out the &lt;a href=&#34;http://svn.perl.org/parrot/trunk/docs/pdds/pdd03_calling_conventions.pod&#34;&gt;Parrot Calling Conventions PDD&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Also getting rejigged is the continuation/register frame architecture. Taking advantage of the fact that this is a &lt;em&gt;virtual&lt;/em&gt; machine, we now have an unlimited number of registers per register frame. Combine this with the new calling conventions, in which arguments are passed outside of the register frame, and all of a sudden a full continuation becomes a simple pointer to the register frame and everything gets saved as if by magic, which opens up a whole bunch of possibilities, which has interesting implications for the register allocator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://use.perl.org/~chip/journal/&#34;&gt;Chip&amp;rsquo;s design notes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;new-generational-gc-scheme-http-groups-google-com-groups-threadm-41b037ed050608072845298c13-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41b037ed050608072845298c13@mail.gmail.com&#34;&gt;New Generational GC Scheme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alexandre Buisse posted his outline for a Google Summer of Code project to implement a shiny new Generational Garbage Collection scheme. Discussion of tunability and threading issues followed.&lt;/p&gt;

&lt;h4 id=&#34;ordered-hashes-more-thoughts-http-groups-google-com-groups-threadm-493a37523a8d17448240da1ddde924b4044d9040-msgboscld2win-dmn1-fmr-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=493A37523A8D17448240DA1DDDE924B4044D9040@MSGBOSCLD2WIN.DMN1.FMR.COM&#34;&gt;Ordered Hashes: More Thoughts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Tolkin helpfully provided a summary of his thoughts about ordered hashes: &amp;ldquo;An ordered hash that does not support deletes could cause a user-visible bug. At a minimum, it should support the special case of delete that is supported by the Perl &lt;code&gt;each()&lt;/code&gt; operator.&amp;rdquo; Dan pointed out that reusing the ordered hash code for anything other than the lexical pad it was specifically implemented for was just looking for trouble.&lt;/p&gt;

&lt;h4 id=&#34;the-thread-that-i-really-hoped-matt-would-be-summarizing-http-groups-google-com-groups-threadm-20050612111515-ga19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612111515.GA19372@tytlal.topaz.cx&#34;&gt;The Thread That I Really Hoped Matt Would Be Summarizing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;AKA &amp;ldquo;Attack of the 50-foot register allocator vs. the undead continuation monster.&amp;rdquo; Piers Cawley and Chip had something of a disagreement about interactions between continuations and the register allocator. After discussion on IRC, it became apparent that they were talking past each other. The new &amp;ldquo;the register frame is the continuation&amp;rdquo; means that yes, the register allocator definitely can&amp;rsquo;t rely on being able to reuse registers that persist over function calls, but that&amp;rsquo;s all right because you can always grab more registers.&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-20050612113805-gc19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612113805.GC19372@tytlal.topaz.cx&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember the missing multimethod functions I mentioned last time? At the time, Chip hadn&amp;rsquo;t ruled on whether taking them out was the Right Thing or not. He has since ruled that it was.&lt;/p&gt;

&lt;p&gt;This is probably not quite the right place to suggest this, but what the heck. Maybe in future when planning user visible changes of this sort, they should spend at least one release period deprecated and throwing warnings when used.&lt;/p&gt;

&lt;h4 id=&#34;pge-namespaced-rules-http-groups-google-com-groups-threadm-42aa039b-8030000-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA039B.8030000@coleda.com&#34;&gt;PGE, Namespaced Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda worried that PGE subrules appear to be globally scoped. It turns out that Patrick worries, too, but is currently in the process of thrashing out how to scope them. He outlined his current thinking.&lt;/p&gt;

&lt;h4 id=&#34;pmcs-and-objects-question-http-groups-google-com-groups-threadm-42aa13d4-1010201-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA13D4.1010201@home.nl&#34;&gt;PMCs and Objects Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol wondered about the possibilities of overriding PMC behavior with Parrot classes. He outlined possibilities and wondered if he was correct. Chip thought that it should be possible to implement (for instance) Perl&amp;rsquo;s datatypes in pure PIR, if only for debugging and fun. I&amp;rsquo;m still not entirely sure if it&amp;rsquo;s possible to make a &lt;code&gt;ParrotClass&lt;/code&gt; that inherits from a PMC, though.&lt;/p&gt;

&lt;h4 id=&#34;software-transactional-memory-http-groups-google-com-groups-threadm-rt-3-0-11-36250-115576-12-1956142453591-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36250-115576.12.1956142453591@perl.org&#34;&gt;Software Transactional Memory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It seems the design team have drunk deeply of the Software Transaction Memory (STM) Kool Aid. STM is, to quote Chip, a &amp;ldquo;wicked cool&amp;rdquo; way of doing threading. Expect a more-fleshed-out design document eventually.&lt;/p&gt;

&lt;h4 id=&#34;parrot-bc-http-groups-google-com-groups-threadm-1579101353-20050611234913-rblasch-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1579101353.20050611234913@rblasch.org&#34;&gt;Parrot &lt;code&gt;bc&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;According to the configuration scripts, Parrot looks for the GNU version of &lt;code&gt;bc&lt;/code&gt; solely for checking that Parrot &lt;code&gt;bc&lt;/code&gt; is working. This is all very well, but there is no Parrot implementation of &lt;code&gt;bc&lt;/code&gt; in the SVN repository. Apparently, there&amp;rsquo;s a broken version of it sitting on Bernhard Schmalhofer&amp;rsquo;s local hard disk.&lt;/p&gt;

&lt;p&gt;None of which addressed the issue of why, even with a &amp;ldquo;working&amp;rdquo; version, the tests need to access GNU &lt;code&gt;bc&lt;/code&gt;. Surely it&amp;rsquo;s possible to write tests statically. The only time you&amp;rsquo;d need an authoritative version would be when you were adding tests. Oops, editorializing again.&lt;/p&gt;

&lt;h4 id=&#34;substituting-for-pge-http-groups-google-com-groups-threadm-42abb476-3030109-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ABB476.3030109@coleda.com&#34;&gt;Substituting for PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if it was possible to do substitutions with PGE yet. &amp;ldquo;Yes, sort of,&amp;rdquo; Patrick replied. You can substitute the first occurrence by grabbing the match data and using &lt;code&gt;substr&lt;/code&gt;. Everything else is for another day.&lt;/p&gt;

&lt;h4 id=&#34;unexpected-behavior-calling-method-http-groups-google-com-groups-threadm-42ac11c4-9000501-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AC11C4.9000501@home.nl&#34;&gt;Unexpected Behavior Calling Method&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol had some problems implementing delegated addition. Apparently it&amp;rsquo;s because the signatures of the &lt;code&gt;__add&lt;/code&gt; methods caught him out. Also, it&amp;rsquo;s a really bad idea to delegate to a method called &lt;code&gt;__add&lt;/code&gt;, because Parrot expects some very particular behavior from it. Think about calling it &lt;code&gt;add&lt;/code&gt; instead.&lt;/p&gt;

&lt;h4 id=&#34;parrot-goals-and-priorities-http-groups-google-com-groups-threadm-20050612103228-gi4954-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612103228.GI4954@tytlal.topaz.cx&#34;&gt;Parrot Goals and Priorities&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip&amp;rsquo;s put the slides of his Austrian Perl Workshop talk on &lt;a href=&#34;http://feather.perl6.nl/~chip/Chip_APW.pdf&#34;&gt;the Parrot project and its priorities&lt;/a&gt; up on feather. Check them out; they&amp;rsquo;re good.&lt;/p&gt;

&lt;h4 id=&#34;new-todos-http-rt-perl-org-rt3-search-listing-html-bookmark-frt-3b-404-7c-258-7c-242-7c10-242-7c11-241-7c7-241-7c9-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20resolved-246-7cstatus-242-7c-21-3d-248-7cresolved-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20rejected-246-7cstatus-242-7c-21-3d-248-7crejected-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2414-7cqueue-20-3d-20parrot-245-7cqueue-241-7c-3d-246-7cparrot-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2417-7csubject-20like-20todo-247-7csubject-244-7clike-244-7ctodo-242-7c12-241-7c0-241-7c0-ticketssortby-created-ticketssortorder-desc-rowsperpage-50&#34;&gt;&lt;a href=&#34;http://rt.perl.org/rt3/Search/Listing.html?Bookmark=FrT%3B%404%7C%258%7C%242%7C10%242%7C11%241%7C7%241%7C9%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20resolved%246%7CStatus%242%7C%21%3D%248%7Cresolved%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20rejected%246%7CStatus%242%7C%21%3D%248%7Crejected%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2414%7CQueue%20%3D%20parrot%245%7CQueue%241%7C%3D%246%7Cparrot%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2417%7CSubject%20LIKE%20TODO%247%7CSubject%244%7CLIKE%244%7CTODO%242%7C12%241%7C0%241%7C0&amp;amp;TicketsSortBy=Created&amp;amp;TicketsSortOrder=DESC&amp;amp;RowsPerPage=50&#34;&gt;New TODOs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda&amp;rsquo;s been busy injecting a bunch of handy TODO items in the Parrot RT system. Check &amp;lsquo;em out, you might be able to do some of them.&lt;/p&gt;

&lt;h4 id=&#34;new-list-for-pirate-http-groups-google-com-groups-threadm-pine-lnx-4-62-0506122306160-11002-hydrogen-sabren-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.62.0506122306160.11002@hydrogen.sabren.com&#34;&gt;New List for Pirate&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace announced the creation of &lt;a href=&#34;http://cornerhost.com/mailman/listinfo/pirate&#34;&gt;a new list for work on Pirate&lt;/a&gt;, a Python compiler for Parrot. If Python on Parrot is your bag, I suggest you sign up.&lt;/p&gt;

&lt;h4 id=&#34;adding-methods-to-existing-classes-http-groups-google-com-groups-threadm-20050615203833-gc7329-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050615203833.GC7329@pmichaud.com&#34;&gt;Adding Methods to Existing Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick wondered how to add methods to existing classes. It turns out that the trick is to use &lt;code&gt;find_type&lt;/code&gt; instead of &lt;code&gt;findclass&lt;/code&gt;. According to Leo, &lt;code&gt;findclass&lt;/code&gt; is deprecated.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. 1242 GMT+1 on Thursday as I write this, and there are, oh, 246 messages in &lt;em&gt;perl6-language&lt;/em&gt;. This could get sketchy.&lt;/p&gt;

&lt;h4 id=&#34;reduce-metaoperator-on-an-empty-list&#34;&gt;Reduce Metaoperator on an Empty List&lt;/h4&gt;

&lt;p&gt;Wow! The &amp;ldquo;Reduce metaoperator on an empty list&amp;rdquo; discussion is still going.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-type-blocks-http-aspn-activestate-com-aspn-mail-message-perl6-language-2617767&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2617767&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Type Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Much to my personal chagrin, it looks like &lt;code&gt;return()&lt;/code&gt; inside a of pointy block will use an escape continuation and will probably be picky about making sure that you can only invoke the pointy block from somewhere dynamically &amp;ldquo;below&amp;rdquo; the block in which it was created. This means no cunning tricks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub call_with_current_continuation(Code $code) {
  $code({ return $^cc })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is probably a good thing.&lt;/p&gt;

&lt;h4 id=&#34;caller-and-want-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619348&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619348&#34;&gt;&lt;code&gt;caller&lt;/code&gt; and &lt;code&gt;want&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas asked for clarification about the behavior of the &lt;code&gt;caller&lt;/code&gt; builtin. Larry provided it.&lt;/p&gt;

&lt;h4 id=&#34;musing-on-registerable-event-handlers-for-some-specific-events-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619327&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619327&#34;&gt;Musing on Registerable Event Handlers for Some Specific Events&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy hoped that Perl 6 would have some sort of minimal set of hooks for handling events. (Personally, I&amp;rsquo;d like a maximal set of hooks for anything that changes the runtime structure of Perl, but I&amp;rsquo;m greedy like that.) Larry said that there would be such a thing, but that it wasn&amp;rsquo;t designed yet. He appeared to volunteer Adam as an initial designer. Discussion ensued, but there&amp;rsquo;s no concrete design yet. Slightly tangentially, Dan discussed his &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000414.html&#34;&gt;thoughts about a Parrot notifications manager&lt;/a&gt; on his blog, which might be useful to some.&lt;/p&gt;

&lt;h4 id=&#34;speed-bump-placement-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621258&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621258&#34;&gt;Speed Bump Placement&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a thread discussing adding an &lt;code&gt;eval STRING&lt;/code&gt;-type behavior to the right-hand side of a substitution, Larry said that &amp;ldquo;Deciding where (and where not) to put the speed bumps is a pretty good description of my job. It&amp;rsquo;s impossible to have a language without bumps, so I reserve the right to put the necessary bumps where I think they&amp;rsquo;ll do the most good and/or least harm.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I thought that was worth reading by more than just the list subscribers.&lt;/p&gt;

&lt;h4 id=&#34;mmd-vs-anonymous-parameter-types-referencing-early-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622814&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622814&#34;&gt;MMD Vs. Anonymous Parameter Types Referencing Early Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip threw up his hands and despaired of ever efficiently implementing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  multi sub is_equal(Integer $a, Integer where { $_ == $a } $b: ) { 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is cute, but Chip claims you need Jedi mind powers if you want to make it work.&lt;/p&gt;

&lt;p&gt;Then Thomas Sandlaß popped up to say that actually, there was already a language called Cecil that allowed you to do precisely that sort of thing (called Predicate Dispatch) and there were several efficient implementation strategies. After a nudge from Chip, he even provided a link. Larry thought it eminently doable, too, and sketched out a strategy.&lt;/p&gt;

&lt;p&gt;That strategy (which applies almost everywhere in Perl, when you think about) boils down to &amp;ldquo;If you can&amp;rsquo;t do it at compile time, do it at runtime (and pretend you did it at runtime).&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;state-of-the-design-documents-http-aspn-activestate-com-aspn-mail-message-perl6-language-2620863&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2620863&#34;&gt;State of the Design Documents&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb worries about the state of the synopses. He argued (quite persuasively) that the thing to do would be to put the synopses into public change control with global read access, but with write access limited to @Larry. The community could then provide new documentation in the form of patches, which @Larry would approve, reject, or modify as appropriate, which all hangs on whether @Larry has sufficient tuits.&lt;/p&gt;

&lt;p&gt;Patrick pointed out that this already exists and that he had volunteered as gatekeeper and patch dispatcher, but that there were very few patches so far. But now you all know about it, right?&lt;/p&gt;

&lt;p&gt;Some discussion followed about how to flesh out things, but the important thing is the &lt;a href=&#34;http://svn.perl.org/perl6/doc/trunk&#34;&gt;Perl 6 design document repository&lt;/a&gt; URL.&lt;/p&gt;

&lt;h4 id=&#34;how-much-do-we-close-over-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621742&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621742&#34;&gt;How Much Do We Close Over?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley wants to be able to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo { my $x = 1; return sub { eval $^codestring } }
say foo().(&#39;$x&#39;); # 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 5, this gives warnings about an undeclared variable. Chip maintained that this is actually the Right Thing. Piers understood that it may not be the right thing in all cases, but he wanted to be able to make it work when needed, if necessarily, with predeclaration. There was some discussion, but nothing from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622126&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622126&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt noted that that &lt;code&gt;BEGIN {...}&lt;/code&gt; can be a little scary when you want to compile to bytecode. Consider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = BEGIN { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is okay, until you have a version of Perl that compiles that to bytecode. The response ran along the lines of &amp;ldquo;Don&amp;rsquo;t do that, then!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Personally I&amp;rsquo;d write that as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = INIT { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that my recollection that &lt;code&gt;INIT&lt;/code&gt; blocks happen after the code is compiled but before it starts to run&amp;ndash;or do I mean a &lt;code&gt;CHECK&lt;/code&gt; block?&lt;/p&gt;

&lt;h4 id=&#34;anonymous-macros-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622133&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622133&#34;&gt;Anonymous Macros&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo also wondered if anonymous macros (at compile time) were allowed. Larry had no problem with macros being first-class objects during the compile. He also went on to wonder if they should be multidispatch, too.&lt;/p&gt;

&lt;h4 id=&#34;perl-defined-object-array-hash-classes-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622337&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622337&#34;&gt;Perl Defined &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt; Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While toying with Pugs, Eric Hodges managed to overwrite the internal definition of the &lt;code&gt;Object&lt;/code&gt; class, which obviously caused him pain. Larry reckons we&amp;rsquo;ll have constructs like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Object is augmented { ... };
class Object is replaced { ... };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(names up for grabs). My personal preference is for making &lt;code&gt;augmented&lt;/code&gt; the default behavior, but I&amp;rsquo;ll live if I can have a pragma that makes it that way.&lt;/p&gt;

&lt;h4 id=&#34;hash1-hash2&#34;&gt;&lt;code&gt;%hash1 »...« %hash2&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa wondered about the behavior of hyperops when applied to a pair of hashes. He wanted things arranged so that if you had a hash with keys in common, then the hypering process would keep them together. Luke agreed that it would be useful (so do I, for that matter) and then everyone started talking about inner and outer joins and my database comprehension head swapped out for the moment.&lt;/p&gt;

&lt;h4 id=&#34;binding-slices&#34;&gt;Binding Slices&lt;/h4&gt;

&lt;p&gt;With a small correction for syntactical niceness, Piers wondered if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @y := @foo[0...][1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would bind &lt;code&gt;@y&lt;/code&gt; to a column of the two-dimensional matrix represented by &lt;code&gt;@foo[][]&lt;/code&gt;, so that writing to &lt;code&gt;@y&lt;/code&gt; would affect &lt;code&gt;@foo&lt;/code&gt; and vice versa. @Larry hasn&amp;rsquo;t said anything yet.&lt;/p&gt;

&lt;h4 id=&#34;alias-the-rubymeter-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622775&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622775&#34;&gt;&lt;code&gt;alias&lt;/code&gt; the RubyMeter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI Andras wondered if Perl 6 would have something like Ruby&amp;rsquo;s rather lovely &lt;code&gt;alias&lt;/code&gt;. Larry thought you should be able to write a macro to do the job, but wasn&amp;rsquo;t entirely sure how exactly it would be done. Further discussion centered on whether the feature was a good idea and whether it had the right name. One school of thought thinks it already exists as &lt;code&gt;:=&lt;/code&gt;, but I&amp;rsquo;m not quite so sure.&lt;/p&gt;

&lt;h4 id=&#34;caller-block-vs-any-hope-of-efficiency-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622877&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622877&#34;&gt;&lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; Vs. Any Hope of Efficiency&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip hopes that using &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; as a general-purpose block promoter will be disallowed unless the calling block has already marked itself as callable. Larry thought that this would be okay, noting that he saw &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; being mostly used for introspective purposes.&lt;/p&gt;

&lt;h4 id=&#34;creating-a-web-templating-engine-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622993&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622993&#34;&gt;Creating a Web Templating Engine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wow! Perl 6 isn&amp;rsquo;t even finished, and already Andras is talking about writing a web templating engine for it. He outlined his plan and wondered how to go about implementing it. He and Ingo discussed it.&lt;/p&gt;

&lt;h4 id=&#34;hyper-concat-http-aspn-activestate-com-aspn-mail-message-perl6-language-2630895&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2630895&#34;&gt;Hyper Concat&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Klausner has been playing with &lt;code&gt;»~«&lt;/code&gt; and uncovered some weirdness. Said weirdness lead to a discussion of &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2658196&#34;&gt;the default strings/patterns in &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sub-my-zip-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710261&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710261&#34;&gt;&lt;code&gt;sub my_zip (...?) {}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus worried that the current Pugs implementation of &lt;code&gt;zip&lt;/code&gt; was signatureless, which, among other things, makes it uncompilable to Parrot. He wondered what its function signature should be. Larry came up with the (admittedly slightly weird) goods.&lt;/p&gt;

&lt;h4 id=&#34;ignoring-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710606&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710606&#34;&gt;Ignoring Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered if he&amp;rsquo;d be able to write a class method as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(Class undef:) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when his class methods made no references to the class object itself. Damian thought that the syntax should actually be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(FooClass ::class) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that subs and methods should complain about unused non-optional non-invocant parameters. There&amp;rsquo;s more; see the sub for details.&lt;/p&gt;

&lt;h4 id=&#34;scalar-dereferencing-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710912&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710912&#34;&gt;Scalar Dereferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered about the semantics of a scalar reference in the face of stringification and numification. He provided an example of Pugs&amp;rsquo; current behavior that may or may not be correct. Larry described broken behavior before thinking again and describing the really correct behavior, along with a summary of his raccoon problems.&lt;/p&gt;

&lt;h4 id=&#34;taking-given-as-read-http-aspn-activestate-com-aspn-mail-message-perl6-language-2711310&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2711310&#34;&gt;Taking &lt;code&gt;given&lt;/code&gt; as Read&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wondered how to write a function that would look like a &lt;code&gt;given&lt;/code&gt; block to any &lt;code&gt;when&lt;/code&gt;s inside of it. It turns out that you can&amp;rsquo;t, yet. Damian thought that the right way to do it would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub factorial (Int $n is topic) {
  return 1 when 0;
  $n * factorial($n - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading this again, I find myself wondering if the &lt;code&gt;return&lt;/code&gt; is really necessary.&lt;/p&gt;

&lt;h4 id=&#34;method&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;People don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;. Other people don&amp;rsquo;t like &lt;code&gt;.method&lt;/code&gt; in methods. I think we have what we have on the &amp;ldquo;least worst option&amp;rdquo; principle&amp;ndash;but I would say that I don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;autoload-and-http-aspn-activestate-com-aspn-mail-message-perl6-language-2713984&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2713984&#34;&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; and &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered about the prototype of &lt;code&gt;AUTOLOAD&lt;/code&gt;. In the discussion that ensued, some people felt that whatever happened, &lt;code&gt;AUTOLOAD&lt;/code&gt; should return a code ref that &lt;em&gt;perl&lt;/em&gt; would call.&lt;/p&gt;

&lt;h3 id=&#34;th-th-the-that-s-all-folks&#34;&gt;Th-Th-The-That&amp;rsquo;s All, Folks!&lt;/h3&gt;

&lt;p&gt;I remember now why I gave up writing summaries in the first place. First, I started missing weeks, which meant that there was so much to write up in the fortnightly summaries, and then discussions grew interesting, which meant writing them took so much longer because there were hard things to understand first.&lt;/p&gt;

&lt;p&gt;Still, once in a while is refreshing, but I really should stop putting things off until the last minute.&lt;/p&gt;

&lt;p&gt;Ahem.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 1-7, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</link>
      <pubDate>Thu, 09 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</guid>
      <description>

&lt;p&gt;Crumbs. I&amp;rsquo;ve remembered to write the summary this week. Now if I can just remember to bill O&amp;rsquo;Reilly for, err, 2003&amp;rsquo;s summaries. Heck, it&amp;rsquo;s not like waiting for the dollar to get stronger has paid off.&lt;/p&gt;

&lt;p&gt;Ah well, no use crying over spilled milk. On with the show. Maybe, just maybe, &lt;code&gt;darwinports&lt;/code&gt; will work its magic and I&amp;rsquo;ll have a working Haskell compiler by the time I&amp;rsquo;ve finished writing.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;undef-issues-http-groups-google-com-groups-threadm-20050601002444-gb32060-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601002444.GB32060@wall.org&#34;&gt;&lt;code&gt;undef&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;d probably forgotten this, but Larry pointed out that in Perl 6 there will no longer be a function &lt;code&gt;undef()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;. Instead there&amp;rsquo;ll be a function &lt;code&gt;undefine()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;, but he thinks that we should usually &lt;code&gt;fail()&lt;/code&gt; to construct our undefined values.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;keys-http-groups-google-com-groups-threadm-20050601021042-22209-qmail-web32914-mail-mud-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601021042.22209.qmail@web32914.mail.mud.yahoo.com&#34;&gt;Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure I understood what TOGoS was driving at with a suggestion about keys and properties. Luckily Leo, Dan, and Chip all seemed to. The discussion continued through the week.&lt;/p&gt;

&lt;h4 id=&#34;loop-improvements-http-groups-google-com-groups-threadm-45ec99fc050531202812aa4da9-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050531202812aa4da9@mail.gmail.com&#34;&gt;Loop Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh no! It&amp;rsquo;s the register allocator problems again. One of these days, I swear I&amp;rsquo;m going to swot up on this stuff properly, work out whether it&amp;rsquo;s really the case that full continuations break any conceivable register allocator, and summarize all of the issues for everyone in a nice white paper/summary.&lt;/p&gt;

&lt;h4 id=&#34;hp-ux-build-notes-http-groups-google-com-groups-threadm-20050601114223-30367-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601114223.30367.qmail@lists.develooper.com&#34;&gt;HP-UX Build Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross posted some of his issues with getting Parrot up on an HP-UX machine. After a good deal of discussion and tool-chain fettling, he made things build and posted a patch to fix the knowledge, which was promptly applied (r8280, for those of you with the &lt;code&gt;svn&lt;/code&gt; chops to know how to take advantage of that).&lt;/p&gt;

&lt;h4 id=&#34;mod-pugs-status-http-groups-google-com-groups-threadm-pine-lnx-4-44-0506011358160-20203-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0506011358160.20203-100000@booger.sixgeeks.org&#34;&gt;&lt;code&gt;mod_pugs&lt;/code&gt; Status&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced that &lt;code&gt;mod_parrot&lt;/code&gt; now comes bundled with &lt;code&gt;mod_pugs&lt;/code&gt;, which means that you can now write Apache extensions in Perl 6. I don&amp;rsquo;t know about you, but my mind is still boggling.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-1-http-groups-google-com-groups-threadm-42a18449-3060709-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A18449.3060709@toetsch.at&#34;&gt;Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Parrot spent most of the week in a feature freeze for the release of Parrot 0.2.1 &amp;ldquo;APW,&amp;rdquo; which went ahead as planned on the 4th of June.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-solaris-http-groups-google-com-groups-threadm-8c73533bea34422-bd4-27eb1-mblk-r28-sysops-aol-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=8C73533BEA34422-BD4-27EB1@mblk-r28.sysops.aol.com&#34;&gt;Parrot on Solaris&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Peter Sinnott reported problems with Parrot on Solaris. It turns out that different implementations of &lt;code&gt;atan&lt;/code&gt; behave slightly differently, which isn&amp;rsquo;t good. I believe the problem remains unresolved.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-the-mac-os-http-groups-google-com-groups-threadm-ffcb1edd23308e83c738cd420c94e7c1-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ffcb1edd23308e83c738cd420c94e7c1@gmail.com&#34;&gt;Parrot on the Mac OS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Juran&amp;rsquo;s questions about getting Parrot running on Mac OS Classic went Warnocked.&lt;/p&gt;

&lt;h4 id=&#34;parrot-tests-get-todo-http-groups-google-com-groups-threadm-1117736102-12568-25-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1117736102.12568.25.camel@localhost&#34;&gt;Parrot Tests Get TODO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Continuing the drive for consistent testing structures everywhere in Perl land, Chromatic applied a patch to &lt;code&gt;Parrot::Test&lt;/code&gt; that makes TODO tests work in a way that &lt;code&gt;Test::Builder&lt;/code&gt; understands. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-a06210200bec56c538a32-5b192-168-0-8-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06210200bec56c538a32@%5B192.168.0.8%5D&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan was somewhat bemused to find that the MMD functions&amp;rsquo; defaults had disappeared when he did a sync with &lt;code&gt;subversion&lt;/code&gt;. He wondered whether this was deliberate. Turns out that it was. I&amp;rsquo;m not sure whether Chip&amp;rsquo;s ruled that it was right, though.&lt;/p&gt;

&lt;h4 id=&#34;google-s-summer-of-code-2005-http-groups-google-com-groups-threadm-bbfd0f3e0506030500752b4585-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=bbfd0f3e0506030500752b4585@mail.gmail.com&#34;&gt;Google&amp;rsquo;s Summer of Code 2005&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember earlier when I talked about IMCC&amp;rsquo;s register allocation? Well, Dheeraj Khumar Arora is looking at working on improving IMCC&amp;rsquo;s optimizations as part of Google&amp;rsquo;s Summer of Code 2005. The usual thread ensued.&lt;/p&gt;

&lt;h4 id=&#34;building-nci-dynclasses-on-hp-ux-http-groups-google-com-groups-threadm-20050603120906-10247-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050603120906.10247.qmail@lists.develooper.com&#34;&gt;Building &lt;em&gt;nci/dynclasses&lt;/em&gt; on HP-UX&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Not content with getting Parrot to build on HP-UX, Nick Glencross next set his sights on making &lt;em&gt;nci/dynclasses&lt;/em&gt; work on HP-UX. It sounds like there&amp;rsquo;ll be a patch forthcoming some time next week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050605160218.31074.qmail@lists.develooper.com&#34;&gt;Nick Paints the Big HP-UX Picture&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;announcing-amber-for-parrot-0-2-1-http-groups-google-com-groups-threadm-1118002708-9863-14-camel-eden&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1118002708.9863.14.camel@eden&#34;&gt;Announcing Amber for Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne announced another new language that targets Parrot: &lt;a href=&#34;http://xamber.org/&#34;&gt;Amber&lt;/a&gt;. It borrows a good deal of syntax and semantics from Eiffel, with a large sprinkling of Ruby for good measure.&lt;/p&gt;

&lt;h4 id=&#34;a-note-wrt-exception-handlers-http-groups-google-com-groups-threadm-42a3f803-6040406-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A3F803.6040406@toetsch.at&#34;&gt;A note WRT exception handlers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a quick discussion of the correct use of exception handlers in Parrot. Essentially, the rule is that your exception handler should jump back to the point just after the exception handler block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    push_eh except_N
    # Code that might fail
    clear_eh
resume_N:
    ...
except_N:
    ...
    goto resume_N
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, eh?&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-reduce-metaoperator-thread&#34;&gt;The Reduce Metaoperator Thread&lt;/h4&gt;

&lt;p&gt;Remember when I discussed this thread two weeks ago? It&amp;rsquo;s still going strong.&lt;/p&gt;

&lt;p&gt;Larry ended up stating that there will be an optional property, &lt;code&gt;identval&lt;/code&gt;, on operators which will be set by default on all operators with obvious identity values. Or it might be called &lt;code&gt;initvalue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3684&#34;&gt;Larry Makes Up His Mind&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;construction-clarification-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3551&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3551&#34;&gt;Construction Clarification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wondered about how object constructors will work. It turned out that the code he&amp;rsquo;d carefully written by hand pretty much described the default behavior. Damian and Larry provided details. Hopefully, some keen p6porter has already incorporated any new information into the appropriate Synopses.&lt;/p&gt;

&lt;h4 id=&#34;a-comprehensive-list-of-perl-6-rule-tokens-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3577&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3577&#34;&gt;A Comprehensive List of Perl 6 Rule Tokens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick responded to his own post last week to clarify some things about the capturing behavior of various rule types. He, Japhy, and Thomas Sandlaß thrashed out the gory details.&lt;/p&gt;

&lt;h4 id=&#34;default-invocant-of-methods-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3578&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3578&#34;&gt;Default Invocant of Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry addressed Ingo Blechschmidt&amp;rsquo;s questions about class methods.&lt;/p&gt;

&lt;p&gt;Class is a role? My head hurts.&lt;/p&gt;

&lt;h4 id=&#34;returns-and-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3579&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3579&#34;&gt;&lt;code&gt;returns&lt;/code&gt; and Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered how to specify the signature of a context-sensitive function. The consensus seems to be to use a junction, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo() returns Str|Int {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;declarations-of-constants-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3556&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3556&#34;&gt;Declarations of Constants&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy had wondered how much compile-time optimization of constants would happen. Damian thought not as much as Adam thought, but suggested that he could use macros to get more optimization if he needed it.&lt;/p&gt;

&lt;h4 id=&#34;time-functions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3558&#34;&gt;Time Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The good thing about &lt;code&gt;localtime&lt;/code&gt; et al. is that everyone knows them. The bad thing about them is that they&amp;rsquo;re at such a low level that you either end up reinventing wheels, getting it wrong, or boggling at the size of the library you need to install to get access to good time manipulation. I wonder what Perl 6 will end up with.&lt;/p&gt;

&lt;h4 id=&#34;empty-hash-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3600&#34;&gt;Empty Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke wondered if &lt;code&gt;{}&lt;/code&gt; should be an empty hash rather than empty code, and why &lt;code&gt;{ %hash }&lt;/code&gt; no longer makes a shallow copy of the hash, but code that returns &lt;code&gt;%hash&lt;/code&gt;. There was some discussion, but no answers came from anyone else on the design team.&lt;/p&gt;

&lt;h4 id=&#34;chars-in-a-list-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3631&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3631&#34;&gt;&lt;code&gt;chars&lt;/code&gt; in a List Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb revisited a long-Warnocked subject. He wants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@chars = &#39;hello&#39;.chars; # &amp;lt;h e l l o&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, in a list context, &lt;code&gt;chars&lt;/code&gt; should return a list of the characters in the string. Stuart Cook thought it was a good idea.&lt;/p&gt;

&lt;h4 id=&#34;transparent-opaque-references-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3517&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3517&#34;&gt;Transparent/Opaque References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Um &amp;hellip; I&amp;rsquo;m not sure what Thomas Sandlaß and Juerd were talking about. I&amp;rsquo;ll tell you what, let&amp;rsquo;s swap places: you read the thread and write me a summary of it.&lt;/p&gt;

&lt;h4 id=&#34;idea-for-making-and-optional-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3645&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3645&#34;&gt;Idea for Making &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, and &lt;code&gt;$&lt;/code&gt; Optional&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas wondered if it would be possible to make variable sigils optional. The short answer is yes, with a pragma, and probably left for CP6AN.&lt;/p&gt;

&lt;h4 id=&#34;using-rules-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3647&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3647&#34;&gt;Using Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about using rules in a web templating system he was working on. Aankhen supplied an answer.&lt;/p&gt;

&lt;p&gt;(Look, it&amp;rsquo;s two messages. Any summary I wrote that told you more than the above sentence would be about as long as the original messages.)&lt;/p&gt;

&lt;h4 id=&#34;multi-subroutine-names-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3657&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3657&#34;&gt;(Multi)Subroutine Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dakkar wondered how he could get at the long name of a multi sub. Rod Adams thought it&amp;rsquo;d be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo&amp;lt;Array, Int&amp;gt;
&amp;amp;foo&amp;lt;Hash, Int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but also thought it might been changed. Thomas Sandlaß agreed that it had changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo:(Array, Int)
&amp;amp;foo:(Hash, Int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy.&lt;/p&gt;

&lt;h4 id=&#34;flattening-arguments-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3665&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3665&#34;&gt;Flattening Arguments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about the behavior of flattening arguments in Pugs when compared to that described in &lt;em&gt;Perl 6 and Parrot Essentials&lt;/em&gt;. Answer: The book&amp;rsquo;s right, they&amp;rsquo;re just not implemented in Pugs. Yet.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3685&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3685&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh boy. Ingo Blechschmidt opened a can of worms when he asked about &lt;code&gt;return&lt;/code&gt; within pointy subs. However, because the worms were slow in starting, you&amp;rsquo;ll have to wait for Matt&amp;rsquo;s summary next week when he explains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub callcc (Code $code) { $code(-&amp;gt; $r {return $r}) }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;meanwhile-in-another-place&#34;&gt;Meanwhile, in Another Place&lt;/h3&gt;

&lt;p&gt;Once upon a long time ago, Jon Orwant threw coffee cups and swore and Perl 6 was born. Later that afternoon, Dan Sugalski started doodling design sketches for what was to become Parrot. Parrot&amp;rsquo;s first &lt;em&gt;README&lt;/em&gt; in CVS dates from August 11th, 2001, and the first archived mailing list post is from August 1st, 2000, but that&amp;rsquo;s a reply.&lt;/p&gt;

&lt;p&gt;As well as being Parrot&amp;rsquo;s original developer, Dan is also Parrot&amp;rsquo;s first commercial user.&lt;/p&gt;

&lt;p&gt;Last week, he announced in his blog that, having already given up his designer&amp;rsquo;s hat earlier this year, &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000400.html&#34;&gt;he&amp;rsquo;s stopped doing any Parrot development&lt;/a&gt;. The plan is that he&amp;rsquo;ll be publishing a few design documents and historical explanations of various bits of Parrot design on his blog, but otherwise, that&amp;rsquo;s all he wrote.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the first, and I&amp;rsquo;m sure I won&amp;rsquo;t be the last to say this. Dan, thank you very much for all the work you&amp;rsquo;ve put into Parrot over the years. Good luck with whatever you do next.&lt;/p&gt;

&lt;h3 id=&#34;the-end-for-now&#34;&gt;The End &amp;hellip; for Now&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 25, 2005-May 31, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050602.html/</link>
      <pubDate>Thu, 02 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050602.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by Aliya&amp;rsquo;s new friends, Masha Nannifer and Philippe, and my own secret running joke. Without further ado, I bring you Perl 6 Compiler.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;method-chaining-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-896e66b5cef6d677-e8f9ca07d7b1dc6f-e8f9ca07d7b1dc6f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/896e66b5cef6d677/e8f9ca07d7b1dc6f#e8f9ca07d7b1dc6f&#34;&gt;Method Chaining&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alex Gutteridge discovered that he couldn&amp;rsquo;t chain attribute access such as &lt;code&gt;$bowl.fish.eyes.say;&lt;/code&gt; in Pugs. Later he provided his example in test form (in case anyone wanted to add it). Maybe someone added them, maybe not; Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pugs-link-issues-on-debian-sid-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-12735f0c524edb53-bdc3f08faf125f5f-bdc3f08faf125f5f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/12735f0c524edb53/bdc3f08faf125f5f#bdc3f08faf125f5f&#34;&gt;Pugs Link Issues on Debian Sid&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András had trouble making Pugs work on Debian Sid with Perl 5 support. Autrijus provided helpful pointers. I assume from his final silence that the final pointer worked.&lt;/p&gt;

&lt;h4 id=&#34;pugs-ast-compilation-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-70f338f3a2256f07-13d6ee45390ecb00-13d6ee45390ecb00&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/70f338f3a2256f07/13d6ee45390ecb00#13d6ee45390ecb00&#34;&gt;&lt;code&gt;Pugs.AST.*&lt;/code&gt; Compilation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson wanted to speed up the compilation of &lt;code&gt;Pugs.AST.*&lt;/code&gt; modules by turning off optimizations. Autrijus told him that this was a core module that needed its speed, and optimizations would stay.&lt;/p&gt;

&lt;h4 id=&#34;pugs-types-export-list-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a13a6669f7555211-29fa93e63a1859e8-29fa93e63a1859e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a13a6669f7555211/29fa93e63a1859e8#29fa93e63a1859e8&#34;&gt;&lt;code&gt;Pugs.Types&lt;/code&gt; Export List&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson added an export list to &lt;code&gt;Pugs.Types&lt;/code&gt;. Autrijus happily applied it and sent him a commit bit.&lt;/p&gt;

&lt;h4 id=&#34;export-withargs-from-main-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fb0bfd20062be074-89c3a26a58d0566a-89c3a26a58d0566a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fb0bfd20062be074/89c3a26a58d0566a#89c3a26a58d0566a&#34;&gt;Export &lt;code&gt;withArgs&lt;/code&gt; from &lt;code&gt;Main&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson added an export to &lt;code&gt;Main&lt;/code&gt;. Samuel Bronson happily applied it himself this time.&lt;/p&gt;

&lt;h4 id=&#34;out-of-date-hs-plugins-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-473d55dfb23cb82b-dfb2bf1285cb5d68-dfb2bf1285cb5d68&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/473d55dfb23cb82b/dfb2bf1285cb5d68#dfb2bf1285cb5d68&#34;&gt;Out-of-Date hs-plugins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim had trouble compiling Pugs with Parrot support. Autrijus helped him fix his problem, and there was much rejoicing.&lt;/p&gt;

&lt;h4 id=&#34;chomp-problem-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-146f4e62d950196a-b457fd0e6bac2224-b457fd0e6bac2224&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/146f4e62d950196a/b457fd0e6bac2224#b457fd0e6bac2224&#34;&gt;&lt;code&gt;chomp&lt;/code&gt; Problem&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks found a problem with &lt;code&gt;chomp&lt;/code&gt; and submitted a test. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pugs-makefile-issue-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e9da852ea30990fc-11806b69b57c9a53-11806b69b57c9a53&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e9da852ea30990fc/11806b69b57c9a53#11806b69b57c9a53&#34;&gt;Pugs &lt;em&gt;makefile&lt;/em&gt; Issue&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan noticed that Pugs was creating a useless &lt;em&gt;Pugs.exe.bat&lt;/em&gt;. Autrijus asked if he would be willing to investigate a patch. He responded that he would put it in his queue.&lt;/p&gt;

&lt;h4 id=&#34;loop-or-do-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-43829f825c10b04e-80f020826b1ec28b-80f020826b1ec28b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/43829f825c10b04e/80f020826b1ec28b#80f020826b1ec28b&#34;&gt;&lt;code&gt;loop&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wondered why &lt;code&gt;do { ... }&lt;/code&gt; was in Pugs, reasoning that &lt;code&gt;loop { ... } while&lt;/code&gt; was the correct thing. Luke Palmer explained that &lt;code&gt;do { ... }&lt;/code&gt; was part of the with-or-without-a-postfix &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-5-8-6-2-with-pugs-6-2-5-and-parrot-0-2-0-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-44797562829e45bf-0ec9118d0a5df14e-0ec9118d0a5df14e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/44797562829e45bf/0ec9118d0a5df14e#0ec9118d0a5df14e&#34;&gt;PxPerl 5.8.6.2 with Pugs 6.2.5 and Parrot 0.2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced the release of PxPerl 5.8.6.2, which includes Pugs 6.2.5 and Parrot 0.2.0. This means that Windows folk can test Pugs and Parrot without having to fight with compilers.&lt;/p&gt;

&lt;h4 id=&#34;build-errors-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c8d85c57fa0cd9d7-e8d11297c80c534b-e8d11297c80c534b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c8d85c57fa0cd9d7/e8d11297c80c534b#e8d11297c80c534b&#34;&gt;&lt;code&gt;BUILD&lt;/code&gt; Errors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks found the handling of a named argument to a constructor confusing. He asked for confirmation but no one provided it. Perhaps this poor summary can save him.&lt;/p&gt;

&lt;h4 id=&#34;white-space-and-function-calls-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2cd54cc42ccc7faf-e229eeb82b638977-e229eeb82b638977&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2cd54cc42ccc7faf/e229eeb82b638977#e229eeb82b638977&#34;&gt;White Space and Function Calls&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David D. Zuhn didn&amp;rsquo;t know about the forbidding of white space between a function call and its parentheses. Carl told him that and about the &lt;code&gt;.()&lt;/code&gt; variant that allows white space.&lt;/p&gt;

&lt;h4 id=&#34;pug-s-make-clean-issues-long-commands-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-0ad94f1b41e69ee1-1db579766f53aa86-1db579766f53aa86&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/0ad94f1b41e69ee1/1db579766f53aa86#1db579766f53aa86&#34;&gt;Pug&amp;rsquo;s &lt;code&gt;make clean&lt;/code&gt; Issues &lt;em&gt;Long&lt;/em&gt; Commands&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks noticed that &lt;code&gt;make clean&lt;/code&gt; issued a command so long that it broke his &lt;code&gt;nmake&lt;/code&gt;. Fortunately he had a really old &lt;code&gt;nmake&lt;/code&gt; and updating fixed the problem.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;thr-windows-h-with-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-081cb54a4ed511fe-67a7f34afdf97217-67a7f34afdf97217&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/081cb54a4ed511fe/67a7f34afdf97217#67a7f34afdf97217&#34;&gt;&lt;em&gt;thr_windows.h&lt;/em&gt; with MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing two compilation problems in &lt;em&gt;thr_windows.h&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrot-slides-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-42f822db3b2b4c7d-e40c457dca60a311-e40c457dca60a311&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/42f822db3b2b4c7d/e40c457dca60a311#e40c457dca60a311&#34;&gt;Parrot Slides?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble posted a request for slides and notes on Parrot and Perl 6 for a presentation he was working on. Many people provided links in various languages. I usually steal from Dan&amp;rsquo;s presentations when I need something like this.&lt;/p&gt;

&lt;h4 id=&#34;problems-with-perl-5-6-1-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e4f90647f62c3661-0a9baaa67250616b-0a9baaa67250616b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e4f90647f62c3661/0a9baaa67250616b#0a9baaa67250616b&#34;&gt;Problems with Perl 5.6.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad had a problem building Parrot with MinGW and Perl 5.6.1, related to Windows and its binary vs. text distinction. This problem will also crop up if you ever try to &lt;code&gt;seek&lt;/code&gt; on files in Windows; not that I have ever lost several days debugging that problem.&lt;/p&gt;

&lt;h4 id=&#34;ordered-hash-thoughts-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-86466b906c8e6e10-24a935c5c2c71aa8-24a935c5c2c71aa8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/86466b906c8e6e10/24a935c5c2c71aa8#24a935c5c2c71aa8&#34;&gt;Ordered Hash Thoughts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted his thoughts on a modification to ordered hash, as adding a new element by index breaks the string-hashing part of it. Dan suggested that the ordered hash just pitch exceptions in the bad cases, as it was designed to be lightweight and fast.&lt;/p&gt;

&lt;h4 id=&#34;subrules-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c600922a3fcec692-759e9ee7e172f6ad-759e9ee7e172f6ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c600922a3fcec692/759e9ee7e172f6ad#759e9ee7e172f6ad&#34;&gt;Subrules Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli provided a patch adding tests for subrules to PGE. Warnock applied, at least until Patrick read this summary.&lt;/p&gt;

&lt;h4 id=&#34;python-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ea055b495d6878a2-23a59ac23ea8606d-23a59ac23ea8606d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ea055b495d6878a2/23a59ac23ea8606d#23a59ac23ea8606d&#34;&gt;Python on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bloves inquired as to the state of Python on Parrot. The phrasing of the question itself provided some confusion. Michal Wallace provided a link to Pirate, hoping it would help.&lt;/p&gt;

&lt;h4 id=&#34;resizable-array-defeats-list-c-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7c24021ab507253d-855d8042ec831341-855d8042ec831341&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7c24021ab507253d/855d8042ec831341#855d8042ec831341&#34;&gt;&lt;code&gt;Resizable*Array&lt;/code&gt; Defeats &lt;em&gt;list.c&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Slowly but steadily, my &lt;code&gt;{Fixed,Resizable}&amp;lt;type&amp;gt;Array&lt;/code&gt; PMCs are defeating the less consistent array implementations. Leo offered the job of slaying &lt;em&gt;list.c&lt;/em&gt; to any interested party. Jerry Gay expressed interest.&lt;/p&gt;

&lt;h4 id=&#34;encodings-on-char-constants-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d71521e3e4e51418-b4da146647db3e6c-b4da146647db3e6c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d71521e3e4e51418/b4da146647db3e6c#b4da146647db3e6c&#34;&gt;Encodings on &amp;ldquo;Char Constants&amp;rdquo;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers wants to be able to supply an encoding for his character constants that use &lt;code&gt;&#39;&lt;/code&gt;. He also wanted to find the integer that corresponds to a character. Leo explained how he could do the former and that &lt;code&gt;ord&lt;/code&gt; is useful for the latter.&lt;/p&gt;

&lt;h4 id=&#34;broken-links-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-01803083e71e519c-05c4703b1d5e89b4-05c4703b1d5e89b4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/01803083e71e519c/05c4703b1d5e89b4#05c4703b1d5e89b4&#34;&gt;Broken Links&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Fayland Lam pointed out that the links from the last summary were a little broken. Hopefully this summary will be better.&lt;/p&gt;

&lt;h4 id=&#34;refcounts-and-dod-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3f1726696d729ec9-c791d65ce745c731-c791d65ce745c731&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3f1726696d729ec9/c791d65ce745c731#c791d65ce745c731&#34;&gt;Refcounts and DOD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace wondered how best to make Python&amp;rsquo;s refcounts work for embedding it in Parrot. Nicholas Clark pointed out that &lt;code&gt;Parrot_[un]register_pmc&lt;/code&gt; would work. Dan noted that if the Python library were to become a Parrot extension, these could become no-ops as Parrot&amp;rsquo;s DOD would do the necessary work.&lt;/p&gt;

&lt;h4 id=&#34;bigint-fixes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c581e03e878f4d8a-d5f8daa08f078f3c-d5f8daa08f078f3c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c581e03e878f4d8a/d5f8daa08f078f3c#d5f8daa08f078f3c&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt; Fixes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew added some tests and fixes to &lt;em&gt;BigInt.pmc&lt;/em&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mingw-and-gmp-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a09a64c88328db95-b9c59f2722a5f595-b9c59f2722a5f595&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a09a64c88328db95/b9c59f2722a5f595#b9c59f2722a5f595&#34;&gt;MinGW and GMP&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing GMP for MinGW. Leo provided a slight correction, which François incorporated. Leo then applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;index-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c81da92bc01890a5-6a6dd5a236cf22eb-6a6dd5a236cf22eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c81da92bc01890a5/6a6dd5a236cf22eb#6a6dd5a236cf22eb&#34;&gt;&lt;code&gt;index&lt;/code&gt; Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne found a failure in the &lt;code&gt;index&lt;/code&gt; opcode. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;mingw-and-gdbm-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-33dfb7a365e4a083-fe4b4af306994134-fe4b4af306994134&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33dfb7a365e4a083/fe4b4af306994134#fe4b4af306994134&#34;&gt;MinGW and GDBM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing GDBMfor MinGW. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mod-operation-fails-with-negative-integers-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8894e415b47b8d24-a2ed829260b2d8dc-a2ed829260b2d8dc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8894e415b47b8d24/a2ed829260b2d8dc#a2ed829260b2d8dc&#34;&gt;&lt;code&gt;mod&lt;/code&gt; Operation Fails with Negative Integers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne noticed that &lt;code&gt;mod&lt;/code&gt;ing with or by negative integers could produce negatives, such as &lt;code&gt;3 mod -3 = -3&lt;/code&gt;. Leo fixed them to provide 0. I hate that fact about C; not that I have ever lost several days debugging that problem, either.&lt;/p&gt;

&lt;h4 id=&#34;tracing-and-debugging-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f40aab493be196c2-5d73d39d325ac0df-5d73d39d325ac0df&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f40aab493be196c2/5d73d39d325ac0df#5d73d39d325ac0df&#34;&gt;Tracing and Debugging&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo noted that debugging Parrot has grown more difficult, as the number of abstractions has increased. Is your compiler, IMCC, your PMC, or Parrot broken? Maybe two or three of them? To facilitate debugging, Leo suggested a &lt;code&gt;debug_break&lt;/code&gt; opcode and a &lt;code&gt;Debugger&lt;/code&gt; PMC. It sounds nifty. He also added support for lexically scoped trace and debug flags.&lt;/p&gt;

&lt;h4 id=&#34;adding-unicode-hex-and-octal-escapes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-72ffc881d1d75457-f85ac2dda841e70f-f85ac2dda841e70f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/72ffc881d1d75457/f85ac2dda841e70f#f85ac2dda841e70f&#34;&gt;Adding Unicode, Hex, and Octal Escapes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda added more complete escape sequence support to Tcl. Matt Diephouse integrated the patch into his latest version.&lt;/p&gt;

&lt;h4 id=&#34;the-state-of-partcl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3bba0dbcc811c84d-ad2ff9ee718948b2-ad2ff9ee718948b2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3bba0dbcc811c84d/ad2ff9ee718948b2#ad2ff9ee718948b2&#34;&gt;the State of ParTcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda proudly noted that as of r8193, ParTcl passed all tests, even with &lt;code&gt;gc-debug&lt;/code&gt;. Much praise goes to Matt Diephouse for his cleanup of the Tcl parser.&lt;/p&gt;

&lt;h4 id=&#34;strength-reduction-optimization-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0dcc4f1f752418ce-0c782ec5ad4c954e-0c782ec5ad4c954e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0dcc4f1f752418ce/0c782ec5ad4c954e#0c782ec5ad4c954e&#34;&gt;Strength Reduction Optimization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls provided a flurry of patches improving Parrot&amp;rsquo;s strength reduction optimization. Leo applied the patches.&lt;/p&gt;

&lt;h4 id=&#34;todo-readline-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-82f5be5069a649b7-97de5fb125248fdc-97de5fb125248fdc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/82f5be5069a649b7/97de5fb125248fdc#97de5fb125248fdc&#34;&gt;TODO: &lt;code&gt;readline&lt;/code&gt; Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for adding &lt;code&gt;readline&lt;/code&gt; support to Parrot.&lt;/p&gt;

&lt;h4 id=&#34;get-mmd-dispatch-type-fix-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4533f856ba99f0ae-d00c8b88bcfbd51b-d00c8b88bcfbd51b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4533f856ba99f0ae/d00c8b88bcfbd51b#d00c8b88bcfbd51b&#34;&gt;&lt;code&gt;get_mmd_dispatch_type&lt;/code&gt; Fix&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky provided a patch that fixes a bug in &lt;em&gt;mmd.c&lt;/em&gt;. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;uninitialized-variable-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2f5aa6c61a77aa58-40d686bdf7e7eee9-40d686bdf7e7eee9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2f5aa6c61a77aa58/40d686bdf7e7eee9#40d686bdf7e7eee9&#34;&gt;Uninitialized Variable&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky fixed an uninitialized variable. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;improved-loadlib-handling-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9491a345632a0111-0a09d861dccc0018-0a09d861dccc0018&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9491a345632a0111/0a09d861dccc0018#0a09d861dccc0018&#34;&gt;Improved &lt;code&gt;loadlib&lt;/code&gt; Handling&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers improved &lt;code&gt;loadlib&lt;/code&gt;&amp;rsquo;s handling of absolute paths. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;dod-sweep-fix-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b3bca2ddf30f69ce-17b19f2de2b3ecd2-17b19f2de2b3ecd2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b3bca2ddf30f69ce/17b19f2de2b3ecd2#17b19f2de2b3ecd2&#34;&gt;DOD Sweep Fix&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky prevented the NULL &lt;code&gt;PMC_EXT&lt;/code&gt; from being added to the PMC &lt;code&gt;ext&lt;/code&gt; pool during a DOD sweep. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;packfile-double-destroy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3773a79fd720ee41-2cd1145fa93e777d-2cd1145fa93e777d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3773a79fd720ee41/2cd1145fa93e777d#2cd1145fa93e777d&#34;&gt;Packfile Double Destroy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky fixed a problem with double destruction of nested packfiles. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;tcl-autoconverts-list-lt-gt-string-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0182c9ebfb0736bb-d531fecfb9c449a5-d531fecfb9c449a5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0182c9ebfb0736bb/d531fecfb9c449a5#d531fecfb9c449a5&#34;&gt;Tcl Autoconverts List &amp;lt;-&amp;gt; String&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tcl can autoconvert between lists and strings. Will Coleda wondered how to implement this behavior to best support language interoperability. People offered suggestions, but there was no real agreement on the best solution, though.&lt;/p&gt;

&lt;h4 id=&#34;todo-classification-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-952a2970ad1a2aaa-64d83aa594a8438b-64d83aa594a8438b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/952a2970ad1a2aaa/64d83aa594a8438b#64d83aa594a8438b&#34;&gt;TODO Classification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic, inspired by Pugs, added TODO classification to Parrot::Test. He threatened to apply the patch if there were no objections &amp;hellip; none yet.&lt;/p&gt;

&lt;h4 id=&#34;hll-group-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-75ed82ed26e93acf-a3e9619005dbeba1-a3e9619005dbeba1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/75ed82ed26e93acf/a3e9619005dbeba1#a3e9619005dbeba1&#34;&gt;HLL Group Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for loading high-level language PMC groups dynamically using the &lt;code&gt;.HLL&lt;/code&gt; directive. This will load the lib dynamically and change the return type of some ops to reflect the HLL&amp;rsquo;s preferences. It is nifty.&lt;/p&gt;

&lt;h4 id=&#34;pistol-wielding-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-56d66dd2f4202b8c-acea6702a7bdbeb4-acea6702a7bdbeb4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/56d66dd2f4202b8c/acea6702a7bdbeb4#acea6702a7bdbeb4&#34;&gt;Pistol-Wielding Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for PIR versions of the &lt;a href=&#34;http://shootout.alioth.debian.org/&#34;&gt;Computer Language Shootout&lt;/a&gt; tests. This will provide a means of gauging Parrot&amp;rsquo;s performance against other languages. Kinda nifty.&lt;/p&gt;

&lt;h4 id=&#34;nmake-v1-5-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7280549fef836ac0-8255877b03808230-8255877b03808230&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7280549fef836ac0/8255877b03808230#8255877b03808230&#34;&gt;&lt;code&gt;nmake&lt;/code&gt; v1.5 Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Sandever also had trouble with overly long lines and &lt;code&gt;nmake&lt;/code&gt;. Upgrading &lt;code&gt;nmake&lt;/code&gt; fixed his problem, too.&lt;/p&gt;

&lt;h4 id=&#34;optimizer-producing-bad-code-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7df5b27c42f22e6-8a84a8e385b74ec1-8a84a8e385b74ec1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7df5b27c42f22e6/8a84a8e385b74ec1#8a84a8e385b74ec1&#34;&gt;Optimizer Producing Bad Code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross noticed that the optimizer was producing some bad code. Leo fixed one of the problems, but missed the other.&lt;/p&gt;

&lt;h4 id=&#34;keys-design-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0b09cf75ebded75b-a3ac293d1aaace86-a3ac293d1aaace86&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0b09cf75ebded75b/a3ac293d1aaace86#a3ac293d1aaace86&#34;&gt;Keys Design&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted an explanation of his original design for keys.&lt;/p&gt;

&lt;h4 id=&#34;loop-improvements-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ef896a743922b55e-91db59b1a73aee04-91db59b1a73aee04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ef896a743922b55e/91db59b1a73aee04#91db59b1a73aee04&#34;&gt;Loop Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls provided a patch to improve the loop struct in the IMCC optimizer. Leo applied it and asked if he would take a whack at reducing the resource consumption of Bill Coffman&amp;rsquo;s register allocation patch. Dan and Bob Rogers both expressed interested in speeding up the compiler.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;hash-slices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-fe42b63a7e74721b-04e18f0b56fb64b3-04e18f0b56fb64b3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/fe42b63a7e74721b/04e18f0b56fb64b3#04e18f0b56fb64b3&#34;&gt;Hash Slices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks thought he was having trouble with hash slices. Actually he was having trouble with the &lt;code&gt;s/-&amp;gt;/./&lt;/code&gt; in his Perl 5 conversion.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-and-refactoring-support-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fb02214da27797-0409dbac1ab2d41a-0409dbac1ab2d41a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fb02214da27797/0409dbac1ab2d41a#0409dbac1ab2d41a&#34;&gt;Perl 6 and Refactoring Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley resurrected Matisse Enzer&amp;rsquo;s thread about IDEs and tools for Perl 6. He observed that Perl 6 might provide a great deal of support for such things. Deborah Pickett noted that it might not be theoretically possible to parse Perl 6 safely. Luke Palmer felt that it would not be possible, given &lt;code&gt;BEGIN&lt;/code&gt; blocks and the like.&lt;/p&gt;

&lt;h4 id=&#34;os-but-os-unix-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6f589edd45ffad1e-2eb118f67d19a368-2eb118f67d19a368&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6f589edd45ffad1e/2eb118f67d19a368#2eb118f67d19a368&#34;&gt;&lt;code&gt;$*OS but OS::unix&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon suggested that &lt;code&gt;$*OS&lt;/code&gt; be a class that mixes in the correct &lt;code&gt;OS::class&lt;/code&gt;. Then MMD could do the heavy lifting. I like this idea.&lt;/p&gt;

&lt;h4 id=&#34;reduction-junctions-and-cribbage-scoring-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-35f6c8d0d9aa4371-5eaac5d52de792d6-5eaac5d52de792d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/35f6c8d0d9aa4371/5eaac5d52de792d6#5eaac5d52de792d6&#34;&gt;Reduction Junctions and Cribbage Scoring&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon wanted to use junctions and reductions to score cribbage hands. Unfortunately, he used junctions as a set. This led to discussions of the correct implementation, and of a Set module that should be part of Perl 6. I want such a set module to have a powerset function that returns the powerset of a particular set (preferably lazily instantiated). Also, my cribbage scoring algorithm is better: 1) lay down hand, 2) announce score, 3) peg.&lt;/p&gt;

&lt;h4 id=&#34;syntax-for-using-perl-5-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8843447d9562a359-79007e1d5ba75d38-79007e1d5ba75d38&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8843447d9562a359/79007e1d5ba75d38#79007e1d5ba75d38&#34;&gt;Syntax for Using Perl 5&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus added support to Pugs for using Perl 5 modules. This led him to wonder what the correct syntax for this actually was. Many suggestions, but no decisions, arrived.&lt;/p&gt;

&lt;h4 id=&#34;mmd-and-smd-interaction&#34;&gt;MMD and SMD Interaction&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wondered how MMD and SMD would interact. Warnock applied.&lt;/p&gt;

&lt;h4 id=&#34;making-perl-6-grammars-generative-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3ba81c6b33ec5605-db8a961b884b69ae-db8a961b884b69ae&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3ba81c6b33ec5605/db8a961b884b69ae#db8a961b884b69ae&#34;&gt;Making Perl 6 Grammars Generative&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aufrank wondered if Perl 6 grammars could be made generative. I would say that this does not belong in the core simply because of its niche application; however, if I were to do this, I would start by using the Perl 6 grammar grammar and modify the way the parse tree is used. Sadly, aufrank posted to Google Groups, so nobody else expressed opinions.&lt;/p&gt;

&lt;h4 id=&#34;links-and-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3d1ff082d4338b04-bd268cbd6f0eb52a-bd268cbd6f0eb52a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3d1ff082d4338b04/bd268cbd6f0eb52a#bd268cbd6f0eb52a&#34;&gt;Links and References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß suggested a &lt;code&gt;Link&lt;/code&gt; class to fill the role of auto-dereferencing variables that Luke called &amp;ldquo;transparent&amp;rdquo; references.&lt;/p&gt;

&lt;h4 id=&#34;use-syntax-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b9b8fb5488a7da33-7e2fe8ee49ea4132-7e2fe8ee49ea4132&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b9b8fb5488a7da33/7e2fe8ee49ea4132#7e2fe8ee49ea4132&#34;&gt;Use Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon wondered how exactly ranges of versions and multi-language interoperability would work in Perl 6. Rod Adams provided a few answers.&lt;/p&gt;

&lt;h4 id=&#34;anonymous-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a5c5cdb1a30742ce-fedb6c6b85ae2f0c-fedb6c6b85ae2f0c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a5c5cdb1a30742ce/fedb6c6b85ae2f0c#fedb6c6b85ae2f0c&#34;&gt;Anonymous Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Simon Cozens announced that he was having a lot of fun converting Maypole to Perl 6. Then he asked how make anonymous subclasses that inherit from other classes and add new methods. Ingo Blechschmidt provided the answers.&lt;/p&gt;

&lt;h4 id=&#34;introspectable-code-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-fe1eb1f7887a4625-0a739544e951e569-0a739544e951e569&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/fe1eb1f7887a4625/0a739544e951e569#0a739544e951e569&#34;&gt;Introspectable Code Objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt thought it would be nifty if code objects were fully introspectable. Luke agreed, but felt that being able to access them at the statement level might be problematic. I think most of what Ingo would want this for is doable with macros that parse normally (or modify a block), but then munge the resulting match object appropriately.&lt;/p&gt;

&lt;h4 id=&#34;signatures-as-first-class-types-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bf516a1c019f25b1-fad6bfc4f1650717-fad6bfc4f1650717&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bf516a1c019f25b1/fad6bfc4f1650717#fad6bfc4f1650717&#34;&gt;Signatures As First-Class Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman hoped that signatures would be available as first-class types in Perl 6. Ingo Blechschmidt agreed. Sam Vilain pointed to the start of such a translation.&lt;/p&gt;

&lt;h4 id=&#34;new-and-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8f03c86d34ed66e2-4e33e251e46fa668-4e33e251e46fa668&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8f03c86d34ed66e2/4e33e251e46fa668#4e33e251e46fa668&#34;&gt;&lt;code&gt;new&lt;/code&gt; and MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wanted to create a specialized on arguments to &lt;code&gt;new&lt;/code&gt; using MMD. Damian told him that his technique was a way to do it, and that &lt;code&gt;bless&lt;/code&gt; would still call &lt;code&gt;BUILDALL&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;code-ownership-and-debuggability-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b5bc2a3c0bec2d57-c0a0aa45d2cf43cd-c0a0aa45d2cf43cd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b5bc2a3c0bec2d57/c0a0aa45d2cf43cd#c0a0aa45d2cf43cd&#34;&gt;Code Ownership and Debuggability&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted his thoughts on code ownership and debuggability in the age of frameworks and generated code.&lt;/p&gt;

&lt;h4 id=&#34;strongly-typed-containers-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-99b61afd411441c3-5377eb7fe6083922-5377eb7fe6083922&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/99b61afd411441c3/5377eb7fe6083922#5377eb7fe6083922&#34;&gt;Strongly Typed Containers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wondered how to make a strongly typed container class (similar to C++ templates). Sam Villain provided a pointer to earlier threads and mentioned Haskell&amp;rsquo;s Generic Algebraic Data Types.&lt;/p&gt;

&lt;h4 id=&#34;constants-and-optimizations-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d60365097dfc4f24-55b6d56db611c9c6-55b6d56db611c9c6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d60365097dfc4f24/55b6d56db611c9c6#55b6d56db611c9c6&#34;&gt;Constants and Optimizations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to create constants so that the optimizer would be able to do as much as possible. Damian suggested that macros would be one solution. This makes me wonder if there is a way to declare a function so that the compiler can create a macro version for constants automatically. That would be nifty.&lt;/p&gt;

&lt;h4 id=&#34;date-time-formatting-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9c02afd5621d8f36-065dacbad0d9ddcd-065dacbad0d9ddcd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9c02afd5621d8f36/065dacbad0d9ddcd#065dacbad0d9ddcd&#34;&gt;Date/Time Formatting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered what sort of date/time formating Perl 6 would support. Rob Kinyon suggested porting &lt;code&gt;DateTime&lt;/code&gt;. This certainly sounds like something that belongs in a module.&lt;/p&gt;

&lt;h4 id=&#34;and-pow-i-found-illumination-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-60859d989e786eec-130fd7a73ed5bb7d-130fd7a73ed5bb7d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/60859d989e786eec/130fd7a73ed5bb7d#130fd7a73ed5bb7d&#34;&gt;And Pow, I Found Illumination&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After much discussion, @Larry has weighed in on the thread I started about reductions on empty lists. Damian feels that it should fail, as finding an appropriate identity operator is no simple task. Somehow a discussion of modulus and division slipped in too.&lt;/p&gt;

&lt;h4 id=&#34;sub-call-versus-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-952a0bb378deaa92-ecc8fdcafb41ff92-ecc8fdcafb41ff92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/952a0bb378deaa92/ecc8fdcafb41ff92#ecc8fdcafb41ff92&#34;&gt;Sub Call Versus MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wanted a sanity check on sub calls versus MMD. Larry provided an answer, but did not weigh in on his sanity.&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-4-2-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c5d553fa29733b95-d434d39327b75214-d434d39327b75214&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c5d553fa29733b95/d434d39327b75214#d434d39327b75214&#34;&gt;&lt;code&gt;(1,(2,3),4)[2]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;People continue to feel very divided about &lt;code&gt;(1,(2,3),4)[2]&lt;/code&gt; and &lt;code&gt;@x = [1,2,3]&lt;/code&gt;. There are strong opinions on both sides about arrayrefs in array and scalar contexts. I appear to be allied with the losing side. Hopefully things will change.&lt;/p&gt;

&lt;h4 id=&#34;unicode-cheat-sheet-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ef172220cda5a462-710cc944649b901a-710cc944649b901a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ef172220cda5a462/710cc944649b901a#710cc944649b901a&#34;&gt;Unicode Cheat Sheet&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon posted a request for a Unicode cheat sheet so he could make his own nifty symbols. Gaal Yahas and Sam Vilain provided pointers.&lt;/p&gt;

&lt;h4 id=&#34;comprehensive-list-of-rules-tokens-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e9cfaffbe7ce5364-2335c47b32fa6af6-2335c47b32fa6af6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e9cfaffbe7ce5364/2335c47b32fa6af6#2335c47b32fa6af6&#34;&gt;Comprehensive List of Rules Tokens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Pinyan wants a comprehensive list of Perl 6 rule tokens so he can create a Perl 5 module to parse them. Much discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;default-invocant-of-methods-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0d33ae0ce9a439fa-cb997504f9511ada-cb997504f9511ada&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0d33ae0ce9a439fa/cb997504f9511ada#cb997504f9511ada&#34;&gt;Default Invocant of Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if a method&amp;rsquo;s &lt;code&gt;Class&lt;/code&gt; could be a default invocant or only instances of it. Somehow this led Larry to musing about &lt;code&gt;Class&lt;/code&gt; as a role than people can mixin instead of inherit from. He confuses me.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 18 - 24, 2005</title>
      <link>http://localhost:1313/pub/2005/05/p6pdigest/20050526.html/</link>
      <pubDate>Fri, 27 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/05/p6pdigest/20050526.html/</guid>
      <description>

&lt;p&gt;Note to self: It&amp;rsquo;s generally not a good idea to go installing Tiger on the day you return from holiday. It&amp;rsquo;s especially not a good idea to fail to check that it didn&amp;rsquo;t completely and utterly radish your Postfix configuration. And your Emacs. And the backing store for your website. And a bunch of other stuff. It&amp;rsquo;s an especially bad idea not to have backups of things like your aliases file&amp;hellip;&lt;/p&gt;

&lt;p&gt;Nor is it a good idea to get preoccupied with all these joys and completely forget that you should be writing the Perl 6 summary.&lt;/p&gt;

&lt;p&gt;Ahem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very, very sorry.&lt;/p&gt;

&lt;p&gt;So, on with the show.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in perl6-compiler&lt;/h3&gt;

&lt;h4 id=&#34;inline-pugs-http-groups-google-com-groups-threadm-20050518205201-ga70318-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050518205201.GA70318@aut.dyndns.org&#34;&gt;&lt;code&gt;Inline::Pugs&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the availability of &lt;a href=&#34;https://metacpan.org/pod/Inline::Pugs&#34;&gt;Inline::Pugs&lt;/a&gt;. If you&amp;rsquo;ve ever wanted to mix up Perl&amp;rsquo;s 5 and 6 in one program, your prayers have been answered. Just grab Pugs and Inline and you&amp;rsquo;re set. Brian Ingerson made things even more delightfully evil:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!perl
use pugs;
sub postfix:&amp;lt;!&amp;gt; { [*] 1..$_ }
sub sum_factorial { [+] 0..$_! }
no pugs;
print sum_factorial(3); # 21
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;experimental-coroutine-support-http-groups-google-com-groups-threadm-20050520154253-ga3870-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050520154253.GA3870@aut.dyndns.org&#34;&gt;Experimental Coroutine Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that Pugs now has an experimental implementation of coroutines. It&amp;rsquo;s almost certainly not final, but it&amp;rsquo;s good enough for exploration and feedback purposes.&lt;/p&gt;

&lt;h4 id=&#34;graphing-tool-for-perlguts-illustrated-http-groups-google-com-groups-threadm-20050520190606-gb16763-woobling-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050520190606.GB16763@woobling.org&#34;&gt;Graphing Tool for PerlGuts Illustrated&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman asked what tool generated the &amp;ldquo;pretty diagrams&amp;rdquo; in PerlGuts Illustrated because he wanted to use it for diagrams in a forthcoming PugsGuts Illustrated. Ingy said that Gisle had hand hacked PostScript based on initial diagrams drawn on graph paper. After some discussion, the plan seems to be that Yuval will just draw diagrams, scan them, and bung them into the Pugs repository. He&amp;rsquo;ll rely on the &lt;a href=&#34;http://www.lazyweb.org/&#34;&gt;LazyWeb&lt;/a&gt; to turn them into beautiful scalable graphics.&lt;/p&gt;

&lt;h4 id=&#34;perl-development-server-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-d6c1550edc339757-53af7c2c05de2e04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/d6c1550edc339757/53af7c2c05de2e04&#34;&gt;Perl Development Server&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Okay everyone, repeat after me: &amp;ldquo;Juerd is a star!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You may ask me why, and I shall tell you.&lt;/p&gt;

&lt;p&gt;Juerd and his cosponsors, Twistspace, will make a Perl 6 development server available over the internet to any Perl 6 developers who are working on &amp;ldquo;everything that improves Perl 6 development&amp;rdquo;. If you&amp;rsquo;ve been put off working on Pugs by the hassles of getting Haskell working on your machine, or if you have the kind of bandwidth that makes svn updates a painful prospect, worry no longer. Just sign up for a development account.&lt;/p&gt;

&lt;p&gt;There was much rejoicing and suggesting of hostnames. Rather bizarrely, there was also discussion of the etymology of &amp;ldquo;sipuli&amp;rdquo; (Finnish for &amp;ldquo;onion&amp;rdquo;, in case you were wondering).&lt;/p&gt;

&lt;h4 id=&#34;two-releases-in-one-day-http-groups-google-com-groups-threadm-20050523214341-ga27266-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050523214341.GA27266@aut.dyndns.org&#34;&gt;Two Releases in One Day&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the release of Pugs 6.2.4. About half an hour later he announced the release of Pugs 6.2.5.&lt;/p&gt;

&lt;h4 id=&#34;undef-issues-http-groups-google-com-groups-threadm-42931d93-4020304-hohum-me-uk&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42931D93.4020304@hohum.me.uk&#34;&gt;&lt;code&gt;Undef&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Taylor thought he&amp;rsquo;d found some issues with Perl 6&amp;rsquo;s understanding of &lt;code&gt;undef&lt;/code&gt;. It turned out that he&amp;rsquo;d found some issues with his own understanding of same.&lt;/p&gt;

&lt;h4 id=&#34;method-attribute-chaining-http-groups-google-com-groups-threadm-198c085f-4f22-4848-9620-1b3bc4ec0428-ebi-ac-uk&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198C085F-4F22-4848-9620-1B3BC4EC0428@ebi.ac.uk&#34;&gt;Method/Attribute Chaining&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alex Gutteridge found some weirdness with the chaining of autogenerated attribute methods (I wonder if the same weirdness occurs with hand rolled attribute methods). So far it remains unfixed, but given the speed of Pugs development I doubt it&amp;rsquo;ll stay that way for long.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in perl6-internals&lt;/h3&gt;

&lt;h4 id=&#34;parrot-as-an-extension-language-http-groups-google-com-groups-threadm-20050517141532-ga35977-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050517141532.GA35977@aut.dyndns.org&#34;&gt;Parrot as an Extension Language&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Colin Adams continued to have problems using Parrot as an extension language for Eiffel. It turns out that interfacing between statically strongly typed languages and Parrot isn&amp;rsquo;t easy.&lt;/p&gt;

&lt;h4 id=&#34;fixing-t-src-manifest-t-http-groups-google-com-groups-threadm-pine-lnx-4-58-0505172312220-4578-localhost-localdomain&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.58.0505172312220.4578@localhost.localdomain&#34;&gt;Fixing &lt;em&gt;t/src/manifest.t&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli reported problems with &lt;em&gt;t/src/manifest.t&lt;/em&gt; and wondered how some of the failures came about. Jürgen Bömmels thought that the problem was an overzealous test&amp;ndash;the original version of which simply ensured that version control and the &lt;em&gt;MANIFEST&lt;/em&gt; were in sync. He provided his suggested version of a less eager, but still svn compatible test. Further discussion thrashed out the various different use cases for manifest checking.&lt;/p&gt;

&lt;h4 id=&#34;more-t-p6rules-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-af56efd05563633c-7dcb91f0f59f5772&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/af56efd05563633c/7dcb91f0f59f5772&#34;&gt;More &lt;em&gt;t/p6rules&lt;/em&gt; Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli posted a bunch of tests for the Perl 6 rules. Well, he did once he&amp;rsquo;d done battling his mailer&amp;rsquo;s somewhat bizarre choice of MIME type for his test files. Remember, if you&amp;rsquo;re about to attach a &lt;em&gt;.t&lt;/em&gt; file to a message you send to the list, make sure your mailer doesn&amp;rsquo;t declare it to be an &lt;code&gt;application/x-troff&lt;/code&gt; file&amp;ndash;&lt;code&gt;text/plain&lt;/code&gt; is your friend.&lt;/p&gt;

&lt;p&gt;Then someone applied his patches.&lt;/p&gt;

&lt;h4 id=&#34;stressing-the-hash-http-groups-google-com-groups-threadm-428def0e-3040304-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=428DEF0E.3040304@toetsch.at&#34;&gt;Stressing the Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo asked for some stress and bench mark tests for hashes because he was in the process of redoing &lt;em&gt;src/hash.c&lt;/em&gt;. Bob Rogers provided one.&lt;/p&gt;

&lt;h4 id=&#34;in-other-news-pypy-gets-an-initial-release-http-groups-google-com-groups-threadm-428f0933-8060200-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=428F0933.8060200@toetsch.at&#34;&gt;In Other News, PyPy Gets an Initial Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo crossposted the announcement of PyPy 0.6, a Python implementation written in Python. It&amp;rsquo;s not bootstrapping yet, but it&amp;rsquo;s getting there&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;pir-compilers-broken-http-groups-google-com-groups-threadm-rt-3-0-11-35944-113457-6-35375312685319-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-35944-113457.6.35375312685319@perl.org&#34;&gt;PIR Compilers Broken&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda had some problems with his TCL in PIR implementation. It turns Nick Glencross helped to track down the problems with the snippet he posted. I&amp;rsquo;m not sure whether his fix is extendable to work with the real ParTCL.&lt;/p&gt;

&lt;h4 id=&#34;mmd-http-groups-google-com-groups-threadm-pine-lnx-4-44-0505241423110-17298-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0505241423110.17298-100000@booger.sixgeeks.org&#34;&gt;MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While working on mod_parrot, Jeff Horwitz ran into an issue with Multi Method Dispatch (MMD). In particularly he didn&amp;rsquo;t seem to be able to declare a multimethod that accepted an arbitrary PMC. Leo asked for a &lt;em&gt;.t&lt;/em&gt; file so he could explore the issue further, which Jeff provided.&lt;/p&gt;

&lt;h4 id=&#34;state-of-partcl-http-groups-google-com-groups-threadm-4292895c-5000301-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4292895C.5000301@coleda.com&#34;&gt;State of ParTCL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda posted a summary of the current state of ParTCL. By the sound of things, it&amp;rsquo;s getting there.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;virtual-methods-http-www-nntp-perl-org-group-perl-perl6-language-21315&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21315&#34;&gt;Virtual Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Whilst noting that Perl 6 doesn&amp;rsquo;t really need to be able to declare methods as virtual in the same way as C++, since one can simply use the handy &lt;code&gt;...&lt;/code&gt; to do the job, Aaron Sherman noted that there was a case for something similar when declaring &amp;ldquo;stub&amp;rdquo; methods that Roles could override. The idea being that you would implement an initial behaviour that you could further decorate by a Role. Except, as Luke pointed out, the Roles system as currently defined treats all such methods as overridable.&lt;/p&gt;

&lt;p&gt;Aaron wasn&amp;rsquo;t sure that this was such a good idea and produced code to illustrate why.&lt;/p&gt;

&lt;h4 id=&#34;default-precedence-of-user-defined-infix-ops-http-www-nntp-perl-org-group-perl-perl6-language-21316&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21316&#34;&gt;Default Precedence of User-Defined infix ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt pointed out that user defined infix operators work in Pugs now. He wondered what their default precedence should be and how to define the precedence explicitly. Luke came forth with an answer, Sam Vilain asked an evil question, and Damian Conway suggested that, given how drastically precedence weirdness can mess with a programmer&amp;rsquo;s head, there shouldn&amp;rsquo;t be a default precedence at all, and if there were, it should be looser than &lt;code&gt;infix:&amp;lt;+&amp;gt;&lt;/code&gt;. I agree with Damian.&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-4-2-http-www-nntp-perl-org-group-perl-perl6-language-21323&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21323&#34;&gt;&lt;code&gt;1,(2,3),4)[2]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Argh! My head hurts!&lt;/p&gt;

&lt;p&gt;However, if you&amp;rsquo;re not sure &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21377&#34;&gt;how context works in Perl 6&lt;/a&gt;, Juerd provided a really good summary later in the thread&lt;/p&gt;

&lt;h4 id=&#34;reduce-metaoperator-on-an-empty-list-http-www-nntp-perl-org-group-perl-perl6-language-21330&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21330&#34;&gt;Reduce Metaoperator on an Empty List&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles wondered how the shiny new reduce metaoperator worked given an empty list. Various suggestions were forthcoming, but I lean towards Randal&amp;rsquo;s &lt;code&gt;inject&lt;/code&gt; solution&amp;ndash;but I&amp;rsquo;m a Smalltalk fan, so there&amp;rsquo;s no surprise there. Personally, I reckon that the metaoperator version should just return undef given an empty list. If you want anything clever you should eschew the syntactic sugar and use &lt;code&gt;inject&lt;/code&gt; or something like it. It seems that the consensus leans towards using an &lt;code&gt;identity&lt;/code&gt; attribute on the infix operator.&lt;/p&gt;

&lt;p&gt;BTW, what happens when you apply &lt;code&gt;[/]&lt;/code&gt; to a list with one element?&lt;/p&gt;

&lt;h4 id=&#34;complex-arithmetic-http-www-nntp-perl-org-group-perl-perl6-language-21347&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21347&#34;&gt;Complex Arithmetic&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Doing complex arithmetic right in a programming language is tricky. Edward Cherlin wondered if Perl 6 should follow what seems to be the consensus among programming languages that care about this sort of thing and use the shared definitions used by APL, Common LISP, and Ada. Luke thought it might be better to leave this to C6PAN. (This is the discerning language designer&amp;rsquo;s equivalent to paying no attention to the man behind the curtain methinks).&lt;/p&gt;

&lt;h4 id=&#34;syntax-for-specifying-role-parameters-http-www-nntp-perl-org-group-perl-perl6-language-21350&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21350&#34;&gt;Syntax for Specifying Role Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if the syntax for specifying role parameters should be the same as the standard subroutine signature syntax (with a slightly modified proposed meaning for &lt;code&gt;:&lt;/code&gt;). Thomas Sandlaß had some related suggestions to add. Nothing from any of the design team yet.&lt;/p&gt;

&lt;h4 id=&#34;method-http-www-nntp-perl-org-group-perl-perl6-language-21351&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21351&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Martin Kuel can&amp;rsquo;t make himself like &lt;code&gt;./method&lt;/code&gt; as a shortcut for &lt;code&gt;$whatever_you_call_self_this_week.method&lt;/code&gt;. Frankly, I can&amp;rsquo;t blame him, but then I continue to think that the originally specified semantics of &lt;code&gt;.method&lt;/code&gt; (calls method on &lt;code&gt;$_&lt;/code&gt;, whether in a method or a sub, or anywhere else for that matter) are fine.&lt;/p&gt;

&lt;h4 id=&#34;uniq-http-www-nntp-perl-org-group-perl-perl6-language-21355&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21355&#34;&gt;&lt;code&gt;uniq&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo wondered why &lt;code&gt;uniq&lt;/code&gt; wasn&amp;rsquo;t in the current draft of Synopsis 29. He also wondered if its default comparator should be &lt;code&gt;=:=&lt;/code&gt;. It turns out that there&amp;rsquo;s rather more to the semantics of &lt;code&gt;uniq&lt;/code&gt; than you&amp;rsquo;d expect; Damian&amp;rsquo;s &amp;ldquo;hyper correct&amp;rdquo; implementation blew my mind.&lt;/p&gt;

&lt;h4 id=&#34;s-junction-http-www-nntp-perl-org-group-perl-perl6-language-21363&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21363&#34;&gt;&lt;code&gt;s/.../{ $junction }/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Junctions? In substitutions? What is Ingo thinking? Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;argument-type-checking-http-www-nntp-perl-org-group-perl-perl6-language-21371&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21371&#34;&gt;Argument Type Checking&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb sought reassurance that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo (Int $bar) { say $bar }
foo &#39;hello&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would do the right thing, namely throw an exception. Luke reassured him.&lt;/p&gt;

&lt;h4 id=&#34;how-to-create-a-new-meta-operator-http-www-nntp-perl-org-group-perl-perl6-language-21375&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21375&#34;&gt;How to Create a New Meta Operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo&amp;rsquo;s obviously been in a very wondering mood this week. This time he wondered if he could create a new meta operator in the obvious (to anyone who&amp;rsquo;s read Apocalypse 12 carefully) way. What? You&amp;rsquo;ve not read Apocalypse 12 carefully? Shame on you! Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub infix_circumfix_meta_operator:{&#39;-&amp;gt;&#39;, &#39;&amp;lt;-&#39;} (Code &amp;amp;op, $left, $right)
{ op $left + 1, $right + 1 }

say 2 -&amp;gt;+&amp;lt;- 3; # 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke thought so, but threw in his own question about how we&amp;rsquo;d specify meta operators that only work on particular classes of operators.&lt;/p&gt;

&lt;h4 id=&#34;how-to-invoke-a-method-reference-http-www-nntp-perl-org-group-perl-perl6-language-21376&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21376&#34;&gt;How to Invoke a Method Reference&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Continuing to mine his wondering vein, Ingo asked how to invoke method references. Juerd thought it&amp;rsquo;d work pretty much as it does in Perl 5.&lt;/p&gt;

&lt;h4 id=&#34;junctive-and-higher-order-types-http-www-nntp-perl-org-group-perl-perl6-language-21392&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21392&#34;&gt;Junctive and Higher-Order Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain&amp;rsquo;s question about converting a Haskellish chunk of code into Perl 6 went Warnocked.&lt;/p&gt;

&lt;h4 id=&#34;foo-1-2-3-4-http-www-nntp-perl-org-group-perl-perl6-language-21393&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21393&#34;&gt;&lt;code&gt;foo(1: 2: 3: 4:)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was &lt;em&gt;so&lt;/em&gt; tempted to use &amp;ldquo;Multimethod colonoscopy&amp;rdquo; as the heading for this section. Aren&amp;rsquo;t you glad I resisted?&lt;/p&gt;

&lt;p&gt;Autrijus has started to implement multi-level invocants in MMDs. He asked a bunch of sanity check questions before proceeding. Luke and Damian provided the sanity.&lt;/p&gt;

&lt;h4 id=&#34;lazy-context-http-www-nntp-perl-org-group-perl-perl6-language-21402&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21402&#34;&gt;Lazy Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Borrowing Ingo&amp;rsquo;s wondering hat, Yuval Kogman had questions about the semantics of laziness. Laziness is one of many features of Perl 6 that&amp;rsquo;s reasonably easy to understand from the point of view of the user, but which is a big old can of worms from the point of view of the implementer. I think I understood Yuval&amp;rsquo;s proposed semantics/implementation, but it stumps me when it comes to summarizing it. People seemed to like it though.&lt;/p&gt;

&lt;h4 id=&#34;declaration-of-my-variables-using-symbolic-referentiation-http-www-nntp-perl-org-group-perl-perl6-language-21412&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21412&#34;&gt;Declaration of &lt;code&gt;my()&lt;/code&gt; Variables Using Symbolic Referentiation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Snatching back his wondering hat, Ingo asked a question I didn&amp;rsquo;t understand about declaring &lt;code&gt;my&lt;/code&gt; variables using symbolic referentiation. Frankly, I don&amp;rsquo;t even understand the subject. The consensus of those responding seemed to be that what Ingo wanted to do was pretty silly in the first place.&lt;/p&gt;

&lt;h4 id=&#34;explicit-laws-about-whitespace-in-rules-http-www-nntp-perl-org-group-perl-perl6-language-21425&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21425&#34;&gt;Explicit Laws about Whitespace in Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff &amp;ldquo;japhy&amp;rdquo; Pinyan wanted to know what the rules were about permitting whitespace in rules. In particular, was it legal to write &lt;code&gt;\c [CHARACTER NAME]&lt;/code&gt;, or must he write &lt;code&gt;\c[CHARACTER NAME]&lt;/code&gt;. Damian reckons only the second is legal.&lt;/p&gt;

&lt;h3 id=&#34;and-we-re-done&#34;&gt;And We&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s it for another week. Tune in at the same time next week when Mr. Fowles will entertain you all with his interpretation of the coming week&amp;rsquo;s events. I&amp;rsquo;ll be back here the week after that.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now that I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 3, 2005 - May 17, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050519.html/</link>
      <pubDate>Thu, 19 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050519.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome ot another fortnight&amp;rsquo;s summary. Wouldn&amp;rsquo;t it just figure that I can&amp;rsquo;t think of anything sufficiently non-sequiterish to amuse myself. Perhaps I need a running gag like Leon Brocard or chromatic&amp;rsquo;s cummingesque capitalization. Maybe I should start one and not tell you. That could be fun.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-commit-emails-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1c9e026f0f0e7903-286f5a062264ee23-286f5a062264ee23&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1c9e026f0f0e7903/286f5a062264ee23#286f5a062264ee23&#34;&gt;Pugs commit emails&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you have ever been foolish enough to want an email for every commit in Pugs, Sam Vilain created a way to help you sip from the firehose. Have fun.&lt;/p&gt;

&lt;h4 id=&#34;given-when-nested-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2025f76d55caf683-ae383ce46fd7b5fd-ae383ce46fd7b5fd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2025f76d55caf683/ae383ce46fd7b5fd#ae383ce46fd7b5fd&#34;&gt;&lt;code&gt;given&lt;/code&gt; &lt;code&gt;when&lt;/code&gt; nested&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer had a question about how nested &lt;code&gt;when&lt;/code&gt; statements in a &lt;code&gt;given&lt;/code&gt; block should act. His intuition disagreed with Pugs, but most others supported Pugs.&lt;/p&gt;

&lt;h4 id=&#34;i-don-t-need-to-walk-around-in-circles-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-8523b893c996fa70-76b3a96677269d8c-76b3a96677269d8c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8523b893c996fa70/76b3a96677269d8c#76b3a96677269d8c&#34;&gt;I don&amp;rsquo;t need to walk around in circles&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus has made Pugs into a registered compiler for Parrot. Because Pugs already allowed you to embed Parrot code (PIR anyway) directly into Perl 6, this allows you to embed the Perl 6 in your PIR in your Perl 6. Now the possibilities are endless, at least until you blow your mental stack. Those of you with tail call optimization in your mental stack may simply go into an infinite loop if you prefer.&lt;/p&gt;

&lt;h4 id=&#34;xor-on-lists-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-96465d8b9ad451d9-64a06cc494ffd6ac-64a06cc494ffd6ac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/96465d8b9ad451d9/64a06cc494ffd6ac#64a06cc494ffd6ac&#34;&gt;xor on lists&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Trewth Seeker expressed his opinion about the proper definition of xor quite strongly. Unfortunately, his opinion is at odds with established mathematics, as Mark Biggar pointed out to him.&lt;/p&gt;

&lt;h4 id=&#34;pge-features-update-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-bcca948a1e74f7e7-1c76f7aaa60db60c-1c76f7aaa60db60c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/bcca948a1e74f7e7/1c76f7aaa60db60c#1c76f7aaa60db60c&#34;&gt;PGE features update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick provided an update on the state of the Perl Grammar Engine. It has many nifty new features.&lt;/p&gt;

&lt;h4 id=&#34;pugs-on-cygwin-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-1a6127fc512f3042-1a6127fc512f3042&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/1a6127fc512f3042#1a6127fc512f3042&#34;&gt;Pugs on Cygwin&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon and Gaal Yahas worked to improve Pugs support for Cygwin. Unfortunately the thread winds down with an unanswered question. Fortunately Stevan clued me in on IRC that things are not working just yet.&lt;/p&gt;

&lt;h4 id=&#34;pugs-gets-some-objects-and-some-rules-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1f38571c074915e2-048f7c691486ebfb-048f7c691486ebfb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1f38571c074915e2/048f7c691486ebfb#048f7c691486ebfb&#34;&gt;Pugs gets some objects and some rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that Pugs now has basic support for Objects and Rules. Sometimes he scares me, though usually he just makes me really want to learn Haskell.&lt;/p&gt;

&lt;h4 id=&#34;regression-test-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-329b67f64c39aa38-07e4d4fb94cb9b8c-07e4d4fb94cb9b8c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/329b67f64c39aa38/07e4d4fb94cb9b8c#07e4d4fb94cb9b8c&#34;&gt;regression test&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Miroslav Silovic provided a regression test for hyper ops. Some people just don&amp;rsquo;t appreciate the fun of regressing.&lt;/p&gt;

&lt;h4 id=&#34;basic-test-for-classes-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-299b5349fa11d3ce-fe404aea60d99b7f-fe404aea60d99b7f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/299b5349fa11d3ce/fe404aea60d99b7f#fe404aea60d99b7f&#34;&gt;basic test for classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little provided a patch for a simple object test. Autrijus applied it. That&amp;rsquo;s odd, because I am pretty sure that Stevan has the commit bit&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;torturing-pge-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-038577a4ba20a869-8f58d037069d30c3-8f58d037069d30c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/038577a4ba20a869/8f58d037069d30c3#8f58d037069d30c3&#34;&gt;torturing PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd provided a link to a big rule that could segfault PGE. It kind reminds me of a homework assignment I had to create a regular expression which matched all strings of numbers that did not contain any repeated digits. That&amp;rsquo;s easy in Perl, but hard in math. I think the resultant regex was somewhere around 17 MB.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-3-with-live-cd-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b11fbbc15f76458a-6d583eb2e080a85a-6d583eb2e080a85a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b11fbbc15f76458a/6d583eb2e080a85a#6d583eb2e080a85a&#34;&gt;Pugs 6.2.3 with Live CD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus released Pugs 6.2.3 which contains 10% more awesome then Pugs 6.2.2. You should check it out on the &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/5707e93ba2942868/d8085652bc85fe9d#d8085652bc85fe9d&#34;&gt;live CD&lt;/a&gt; that Ingo Blechschmidt released.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-meets-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a28bef89de27ef42-a4797d46952f98eb-a4797d46952f98eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a28bef89de27ef42/a4797d46952f98eb#a4797d46952f98eb&#34;&gt;PXPerl meets Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced that he has added Pugs binaries to his windows distribution of Perl. Pretty cool. Autrijus innocently asked him to take on the slightly larger task of producing binaries of Parrot too, so that Pugs could be at its most powerful.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;p&gt;Wow, did you see how I mentioned Parrot before going into this new section. That was an awesome transition! My high school English teachers would be so proud.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7fc88a464c05c257-a2cb3834be55832d-a2cb3834be55832d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7fc88a464c05c257/a2cb3834be55832d#a2cb3834be55832d&#34;&gt;character classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick wants character class opcodes of the form find first and find first not. Leo pointed him to some hysterical raisins who might help.&lt;/p&gt;

&lt;h4 id=&#34;pge-on-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-998bbdec6ed1c605-dc9f6a1c35fb2475-dc9f6a1c35fb2475&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/998bbdec6ed1c605/dc9f6a1c35fb2475#dc9f6a1c35fb2475&#34;&gt;PGE on MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad fixed a problem with building PGE on MinGW. Patrick applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;pio-fdopen-return-value-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1855df6e00ad2066-0955bdf6c42d7ad5-0955bdf6c42d7ad5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1855df6e00ad2066/0955bdf6c42d7ad5#0955bdf6c42d7ad5&#34;&gt;&lt;code&gt;PIO_fdopen&lt;/code&gt; return value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer both intoduced me to the wonderfully cute phrase &amp;ldquo;untodid&amp;rdquo; and provided a patch making &lt;code&gt;PIO_fdopen&lt;/code&gt; return &lt;code&gt;NULL&lt;/code&gt; when given bad flags. Leo applied the patch, but Melvin Smith warned that this might be a bad idea. Silence followed.&lt;/p&gt;

&lt;h4 id=&#34;embedding-initialization-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a639642be132a3ed-340eb5f582823fbc-340eb5f582823fbc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a639642be132a3ed/340eb5f582823fbc#340eb5f582823fbc&#34;&gt;embedding initialization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz was having trouble embedding PIR into C. Leo provided some pointers. Jeff was happy.&lt;/p&gt;

&lt;h4 id=&#34;test-builder-updates-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfe99da639662579-4f4b690aad4b7085-4f4b690aad4b7085&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfe99da639662579/4f4b690aad4b7085#4f4b690aad4b7085&#34;&gt;&lt;code&gt;Test::Builder&lt;/code&gt; updates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Previously, Michael G Schwern announced an update to &lt;code&gt;Test::Builder&lt;/code&gt;. chromatic asked if it was worth the upgrade. Michael replied probably, but I don&amp;rsquo;t think anyone has acted on it.&lt;/p&gt;

&lt;h4 id=&#34;miniparrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-32acc707df5678be-a02606ff9a675e14-a02606ff9a675e14&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/32acc707df5678be/a02606ff9a675e14#a02606ff9a675e14&#34;&gt;miniparrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert Spier created a miniparrot at Bernhard Schmalhofer&amp;rsquo;s request. This miniparrot does not replace our make system, but it does make our website less camel centric.&lt;/p&gt;

&lt;h4 id=&#34;autrijus-gets-the-commit-bit-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c9fba41dfdb3f3d-4ff623e3cd504a1f-4ff623e3cd504a1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c9fba41dfdb3f3d/4ff623e3cd504a1f#4ff623e3cd504a1f&#34;&gt;Autrijus gets the commit bit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo, Autrijus, and Chip had one of the nerdiest conversations ever. The summary of which is that Autrijus gets commit priveledges for Parrot. The general consensus was that he was too productive in Haskell and we needed to hobble him with a real man&amp;rsquo;s language like C.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-0-nlnet&#34;&gt;Parrot 0.2.0 &amp;ldquo;NLnet&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;Leo announed the release of Parrot 0.2.0. This one didn&amp;rsquo;t seem to make it to Slashdot. That&amp;rsquo;s kinda sad, because I always get a warm feeling when I know about stuff before /. Oddly, Google Groups seems to have lost the email.&lt;/p&gt;

&lt;h4 id=&#34;really-make-realclean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aa874e35b6f28552-18f381f84fa2936d-18f381f84fa2936d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aa874e35b6f28552/18f381f84fa2936d#18f381f84fa2936d&#34;&gt;really &lt;code&gt;make realclean&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;make realclean&lt;/code&gt; failed to find a few files: a flaw forcefully fixed by Jerry Gay.&lt;/p&gt;

&lt;h4 id=&#34;load-bytecode-shouldn-t-segfault-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e10e881681cc12bb-033a9daa09e266dc-033a9daa09e266dc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e10e881681cc12bb/033a9daa09e266dc#033a9daa09e266dc&#34;&gt;&lt;code&gt;load_bytecode&lt;/code&gt; shouldn&amp;rsquo;t segfault&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers made it not. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;tell-me-sweet-little-lies-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-292d8031e69aa7d4-c631eba65d3914ee-c631eba65d3914ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/292d8031e69aa7d4/c631eba65d3914ee#c631eba65d3914ee&#34;&gt;tell me sweet little lies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick put out a request for a rudimentary set of lies and damn lies. People are welcome to provide benchmarks too.&lt;/p&gt;

&lt;h4 id=&#34;parrot-panic-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f60ca9f6570a9f60-0e347dcda6994a2b-0e347dcda6994a2b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f60ca9f6570a9f60/0e347dcda6994a2b#0e347dcda6994a2b&#34;&gt;Parrot Panic&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo found that Parrot was panicking during start up. He rolled that patch back.&lt;/p&gt;

&lt;h4 id=&#34;make-testr-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0b023369b149e2ee-82ed1327511876c2-82ed1327511876c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0b023369b149e2ee/82ed1327511876c2#82ed1327511876c2&#34;&gt;&lt;code&gt;make testr&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for a make test target which would invoke Parrot twice, once to compile to PBC and once to run it. Dino Morelli provided a patch. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;trans-test-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-336fe78e94f31ad3-577a01d8ece6819c-577a01d8ece6819c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/336fe78e94f31ad3/577a01d8ece6819c#577a01d8ece6819c&#34;&gt;trans test failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks opened a ticket for some failing test long ago. Now he wondered if there was a status update. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrotcode-org-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bc41c57d2f7a4d71-0e6d70a3111e7708-0e6d70a3111e7708&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bc41c57d2f7a4d71/0e6d70a3111e7708#0e6d70a3111e7708&#34;&gt;parrotcode.org update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo noticed that parrotcode.org needed a little loving. Robert Spier provided it. He also mentioned that people could provide their own patches for it against &lt;a href=&#34;https://svn.perl.org/perl.org/docs/live/parrotcode/&#34;&gt;https://svn.perl.org/perl.org/docs/live/parrotcode/&lt;/a&gt; . Now is your chance to contribute to Parrot&amp;rsquo;s public face.&lt;/p&gt;

&lt;h4 id=&#34;runtime-parrot-library-search-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b1062fb6face9703-5c3eecc29c906898-5c3eecc29c906898&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b1062fb6face9703/5c3eecc29c906898#5c3eecc29c906898&#34;&gt;&lt;em&gt;runtime/parrot/library&lt;/em&gt; search&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Scott Duff wondered why &lt;em&gt;runtime/parrot/library&lt;/em&gt; wasn&amp;rsquo;t in Parrot&amp;rsquo;s search paths. Leo added it for &lt;code&gt;load_bytecode&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;on-the-road-to-a-tiny-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-049e4a3c48c6274d-3c20fba58ff26540-3c20fba58ff26540&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/049e4a3c48c6274d/3c20fba58ff26540#3c20fba58ff26540&#34;&gt;on the road to a tiny Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo began down the road to miniparrot, creating first a Parrot without a config and using that to generate a &lt;em&gt;config.fpmc&lt;/em&gt; for Parrot. The information provided there helps to create a larger Parrot.&lt;/p&gt;

&lt;h4 id=&#34;mmd-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1d987d4e9415d34a-12a8965b20f47ffe-12a8965b20f47ffe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1d987d4e9415d34a/12a8965b20f47ffe#12a8965b20f47ffe&#34;&gt;MMD pmcs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers posted some questions about how to work with multi subs and provided a preliminary patch. Leo provided some answers but felt the need to pin down the calling conventions before the patch.&lt;/p&gt;

&lt;h4 id=&#34;commit-bit-for-matt-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ffd93a0d7541b15e-27241f1437349aa8-27241f1437349aa8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ffd93a0d7541b15e/27241f1437349aa8#27241f1437349aa8&#34;&gt;commit bit for Matt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse received a commit bit. Congrats. Leo took the opportunity to remind himself to run &lt;code&gt;make test&lt;/code&gt; before committing.&lt;/p&gt;

&lt;h4 id=&#34;null-deref-in-real-exception-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8614b5f46c5afef5-553050aade71547f-553050aade71547f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8614b5f46c5afef5/553050aade71547f#553050aade71547f&#34;&gt;&lt;code&gt;NULL&lt;/code&gt; deref in &lt;code&gt;real_exception&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found a &lt;code&gt;NULL&lt;/code&gt; reference in &lt;code&gt;real_exception&lt;/code&gt;. Leo explained that he needed to call &lt;code&gt;Parrot_run_native&lt;/code&gt; to allocate the exception structute (and set the stack top pointer). Nicholas didn&amp;rsquo;t want to set the stack top as he was tracking some Perl refcount bugs.&lt;/p&gt;

&lt;h4 id=&#34;pge-hs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-df3de3fb2eeb410a-fe7da5fcfd60abce-fe7da5fcfd60abce&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/df3de3fb2eeb410a/fe7da5fcfd60abce#fe7da5fcfd60abce&#34;&gt;PGE::Hs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus provided a patch to make PGE escape strings as Haskell FFI expects. Patrick suggested a slightly different approach, which Autrijus took.&lt;/p&gt;

&lt;h4 id=&#34;bug-in-boolean-pmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c807b55b5b5fccae-c607085a119c0b8a-c607085a119c0b8a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c807b55b5b5fccae/c607085a119c0b8a#c607085a119c0b8a&#34;&gt;Bug in &lt;em&gt;Boolean.pmc&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;John Lenz found and fixed a bug in &lt;em&gt;Boolean.pmc&lt;/em&gt;. Leo applied the patch and Juergen Boemmels provided a test.&lt;/p&gt;

&lt;h4 id=&#34;svn-revision-number-for-releases-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-405badc06d95e7c0-cc0c17bc1121f0f7-cc0c17bc1121f0f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/405badc06d95e7c0/cc0c17bc1121f0f7#cc0c17bc1121f0f7&#34;&gt;svn revision number for releases&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty noticed that &lt;em&gt;Configure.pl&lt;/em&gt; printed &amp;ldquo;failed&amp;rdquo; for release tarballs as they don&amp;rsquo;t have &lt;em&gt;.svn&lt;/em&gt; directories. He changed it to print &amp;ldquo;done&amp;rdquo;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;spawnw-args-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bf7035014666b2b9-2943dc9085cadbc7-2943dc9085cadbc7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bf7035014666b2b9/2943dc9085cadbc7#2943dc9085cadbc7&#34;&gt;&lt;code&gt;spawnw @args&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz provided a patch which allows &lt;code&gt;spawnw&lt;/code&gt; to take an array. Leo applied it (with a brief reminder on platform-specific ettiquette).&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-build-problem-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-734aeacca7a2525c-f5cb85bdab6dccba-f5cb85bdab6dccba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/734aeacca7a2525c/f5cb85bdab6dccba#f5cb85bdab6dccba&#34;&gt;dynclasses build problem on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay fixed a problem building dynclasses on Win32. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;basic-jit-questions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-db2456cee6742f2f-70b1228c1a52baec-70b1228c1a52baec&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/db2456cee6742f2f/70b1228c1a52baec#70b1228c1a52baec&#34;&gt;basic JIT questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas had a few basic questions about Parrot&amp;rsquo;s JIT. Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;anon-tests-and-test-fixes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-408a3cb30102dfb8-7e35467c2a796f11-7e35467c2a796f11&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/408a3cb30102dfb8/7e35467c2a796f11#7e35467c2a796f11&#34;&gt;&lt;code&gt;@ANON&lt;/code&gt; tests and test fixes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay fixed some tests and added some more. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;filepath-manipulations-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2db83ca25ad07b27-e8d004953498e264-e8d004953498e264&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2db83ca25ad07b27/e8d004953498e264#e8d004953498e264&#34;&gt;filepath manipulations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for some filepath and string manipulation support in Parrot.&lt;/p&gt;

&lt;h4 id=&#34;call-syntax-abstraction-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0d1f0af755511965-28f480998102a287-28f480998102a287&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d1f0af755511965/28f480998102a287#28f480998102a287&#34;&gt;call syntax abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a failed attempt to dewarnock himself, Leo reported his call syntax abstraction proposal.&lt;/p&gt;

&lt;h4 id=&#34;old-tags-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3e3ea01ccb0a5b8f-66c327425726a9a4-66c327425726a9a4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3e3ea01ccb0a5b8f/66c327425726a9a4#66c327425726a9a4&#34;&gt;Old Tags&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencros suggested renaming (or possibly removing) some old tag files from our CVS days. Leo was unsure about the removing option but liked the renaming one.&lt;/p&gt;

&lt;h4 id=&#34;mingw-build-problems-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0e5de5ce8d80ad28-179f66a06c9a42b1-179f66a06c9a42b1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0e5de5ce8d80ad28/179f66a06c9a42b1#179f66a06c9a42b1&#34;&gt;MinGW build problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch to fix some build problems on MinGW. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;omniscient-debugging-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b664bb995e03f74a-7e3edecbf5fa176f-7e3edecbf5fa176f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b664bb995e03f74a/7e3edecbf5fa176f#7e3edecbf5fa176f&#34;&gt;omniscient debugging in parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Bach wondered how much of Omniscient Debugging would be possibly in Parrot. Leo reasoned that someone could add it with some work. It would involve replacing all mutating vtables with special versions that store extra information to allow them to roll back.&lt;/p&gt;

&lt;h4 id=&#34;embedding-extending-interface-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a3c02b85fe7dab97-0dd2d3aa6c0c6eac-0dd2d3aa6c0c6eac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a3c02b85fe7dab97/0dd2d3aa6c0c6eac#0dd2d3aa6c0c6eac&#34;&gt;embedding/extending interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz wondered who else was actively working on mebedding Parrot. Nicholas Clark provided a very uncertain pointer.&lt;/p&gt;

&lt;h4 id=&#34;oo-support-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2f54befe55c2801b-13f88903b1e55817-13f88903b1e55817&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2f54befe55c2801b/13f88903b1e55817#13f88903b1e55817&#34;&gt;OO support in Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus explained that Parrot&amp;rsquo;s current implementation made attribute access difficult. Leo went further saying that he felt it was wrong. The consensus is that Parrot needs to allow non-absolute access to attributes, so Leo made it so.&lt;/p&gt;

&lt;h4 id=&#34;config-t-fails-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-609bfa968e2c2748-93c5d7e042370d94-93c5d7e042370d94&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/609bfa968e2c2748/93c5d7e042370d94#93c5d7e042370d94&#34;&gt;&lt;em&gt;config.t&lt;/em&gt; fails&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad found that &lt;em&gt;config.t&lt;/em&gt; fails without first doing a make clean. Leo deemed his initial solution a little too quick and too dirty.&lt;/p&gt;

&lt;h4 id=&#34;find-ops-return-for-not-found-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5042d59e5340262d-36e82c42a485fbf4-36e82c42a485fbf4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5042d59e5340262d/36e82c42a485fbf4#36e82c42a485fbf4&#34;&gt;&lt;code&gt;find&lt;/code&gt; ops return for not found&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick provided a patch which changes the return value of &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;find_not&lt;/code&gt; to the string&amp;rsquo;s length (instead of -1) if the character does not occur. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;clean-config-files-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b7edc1d5b4a79948-a195783cc90b9c74-a195783cc90b9c74&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b7edc1d5b4a79948/a195783cc90b9c74#a195783cc90b9c74&#34;&gt;clean &lt;em&gt;*_config&lt;/em&gt; files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch to clean the &lt;em&gt;_config&lt;/em&gt; files during make clean. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;mmd-for-logical-ops-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e6463d091600d139-af299cdf102930a1-af299cdf102930a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e6463d091600d139/af299cdf102930a1#af299cdf102930a1&#34;&gt;MMD for logical ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo changed the logical ops to return one of their operands as appropriate.&lt;/p&gt;

&lt;h4 id=&#34;warning-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4f9738434ec37119-16502accf94d42c3-16502accf94d42c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4f9738434ec37119/16502accf94d42c3#16502accf94d42c3&#34;&gt;warning cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch to remove a warning on Win32. Bernhard Schmalhofer applied it.&lt;/p&gt;

&lt;h4 id=&#34;namespace-updates-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8fbcda0e4fea46bc-989bedc1fe123bba-989bedc1fe123bba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8fbcda0e4fea46bc/989bedc1fe123bba#989bedc1fe123bba&#34;&gt;Namespace updates?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered whether any resolution with respect to namespaces had come about. Leo told him not much.&lt;/p&gt;

&lt;h4 id=&#34;rules-questions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1987b48227865162-dc17602c62d57779-dc17602c62d57779&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1987b48227865162/dc17602c62d57779#dc17602c62d57779&#34;&gt;rules questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli was trying to add some unit tests when he ran into questions. Patrick provided some answers but suggested further conversation move to p6l, which it did.&lt;/p&gt;

&lt;h4 id=&#34;md5-library-clean-ups-and-speed-ups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-84537d46ad68aec8-7c7b42dbc44b14eb-7c7b42dbc44b14eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/84537d46ad68aec8/7c7b42dbc44b14eb#7c7b42dbc44b14eb&#34;&gt;MD5 library clean ups and speed ups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross posted some updates to the MD5 library. This led to a few rounds of speading it up and comparing its speed with various other MD5 libraries. The final result is: slower than C but MUCH faster than pure Perl.&lt;/p&gt;

&lt;h4 id=&#34;disassemble-segfaults-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d59c059249517f20-61b3155e3eaff442-61b3155e3eaff442&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d59c059249517f20/61b3155e3eaff442#61b3155e3eaff442&#34;&gt;disassemble segfaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers pointed out that disassemble was sefaulting on some byte code. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;s-internal-exception-real-1-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2d8e4d3646a48533-373a611f6b34a423-373a611f6b34a423&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2d8e4d3646a48533/373a611f6b34a423#373a611f6b34a423&#34;&gt;s/internal (exception)/real \1/&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch which changed some internal exceptions to real ones. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;failing-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fd25e1240fc31a36-c6ff787f1079c944-c6ff787f1079c944&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fd25e1240fc31a36/c6ff787f1079c944#c6ff787f1079c944&#34;&gt;failing tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce reported some failing tests on Mac OS X. Leo fixed them.&lt;/p&gt;

&lt;h4 id=&#34;small-typo-in-pbc-compat-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5f95d1a73976ef8f-a73dd18bfb03a1ba-a73dd18bfb03a1ba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5f95d1a73976ef8f/a73dd18bfb03a1ba#a73dd18bfb03a1ba&#34;&gt;small typo in &lt;em&gt;PBC_COMPAT&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Uwe Voelker provided a patch fixing a typo in &lt;em&gt;PBC_COMPAT&lt;/em&gt;, which chromatic applied. He also noticed that &lt;em&gt;p6rules/*.t&lt;/em&gt; did not have plans. Patrick welcomes all updates to PGE tests.&lt;/p&gt;

&lt;h4 id=&#34;t-p6rules-ws-t-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-43fbda5c0bca516d-e25f37048470ebac-e25f37048470ebac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/43fbda5c0bca516d/e25f37048470ebac#e25f37048470ebac&#34;&gt;&lt;em&gt;t/p6rules/ws.t&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli added some tests for p6rules. Patrick applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;index-up-bug-in-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b8ff7a2c541316df-46f720060661402f-46f720060661402f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b8ff7a2c541316df/46f720060661402f#46f720060661402f&#34;&gt;index up bug in PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay found a bug in PGE involving escaping sequences strangely. Leo tracked it down, and Patrick fixed it.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-python-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3ac1410a897a65a7-fc7d16edadaba47e-fc7d16edadaba47e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3ac1410a897a65a7/fc7d16edadaba47e#fc7d16edadaba47e&#34;&gt;Parrot on Python&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew wondered what the state of Python on Parrot was. Sam Ruby and Michal Wallace provided updates. Hopefully it will take off again soon.&lt;/p&gt;

&lt;h4 id=&#34;paths-with-spaces-need-quoting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-713f7dac40d3e360-60c1fff22857df30-60c1fff22857df30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/713f7dac40d3e360/60c1fff22857df30#60c1fff22857df30&#34;&gt;paths with spaces need quoting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke provided a patch to quote some paths that needed it in dynclasses. chromatic wondered if that would break with paths that already contain quotes.&lt;/p&gt;

&lt;h4 id=&#34;cvsignore&#34;&gt;&lt;em&gt;.cvsignore&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Juergen Boemmels noticed that the SVN repository still contains some &lt;em&gt;.cvsignore&lt;/em&gt; files. He suggested removing them, but a few things need to be updated to the svn world before that can happen. Bernhard Schmalhofer made it happen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6521054da9c7175e/35b62bf9ee9a9d1a#35b62bf9ee9a9d1a&#34;&gt;request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d922b0043944172c/b7f5598c02bc4d98#b7f5598c02bc4d98&#34;&gt;resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;null-pointer-deref-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-135f3c5e3b6d97a1-1f5a2ab4fd84866a-1f5a2ab4fd84866a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/135f3c5e3b6d97a1/1f5a2ab4fd84866a#1f5a2ab4fd84866a&#34;&gt;&lt;code&gt;NULL&lt;/code&gt; pointer deref&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Taylor found a &lt;code&gt;NULL&lt;/code&gt; pointer problem in Parrot. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;parrot-embedded-in-xslt-2-0-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-30165dd23e622cc6-c4c507469c556412-c4c507469c556412&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/30165dd23e622cc6/c4c507469c556412#c4c507469c556412&#34;&gt;Parrot embedded in XSLT 2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Colin Paul Adams wondered how he could get information back from an embedded parrot. Autrijus pointed him to &lt;code&gt;Parrot_call_sub&lt;/code&gt; with a signature of &lt;code&gt;SS&lt;/code&gt; (takes a string and returns a string).&lt;/p&gt;

&lt;h4 id=&#34;thread-detatch-hangs-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3accff3812d6da9f-036422b041a4fe07-036422b041a4fe07&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3accff3812d6da9f/036422b041a4fe07#036422b041a4fe07&#34;&gt;thread detatch hangs on win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay noticed that thread detatch was hanging on Win32. He provided a patch to skip it so that other tests could fail in its place. Leo applied the patch.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;semantics-of-coroutines-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ebb2304e24db640c-ae65c8bd8165b831-ae65c8bd8165b831&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ebb2304e24db640c/ae65c8bd8165b831#ae65c8bd8165b831&#34;&gt;Semantics of Coroutines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered whether coroutines were invokable with new arguments on successive invocations. Some pointed out that allowing the arguments to change is a more powerful model, but I didn&amp;rsquo;t see anything definitive.&lt;/p&gt;

&lt;h4 id=&#34;function-composition-operator-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-428c785d48667618-2ff554091f0fb10e-2ff554091f0fb10e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/428c785d48667618/2ff554091f0fb10e#2ff554091f0fb10e&#34;&gt;function composition operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi wondered if there was a function composition binary operator. While one does not exist, it&amp;rsquo;s addable (as Ingo Blechschmidt demonstrated much later).&lt;/p&gt;

&lt;h4 id=&#34;initialization-of-state-vars-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ded38746a879d57d-8e4420427d51b692-8e4420427d51b692&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ded38746a879d57d/8e4420427d51b692#8e4420427d51b692&#34;&gt;initialization of state vars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how state vars and parentheses would interact. Larry replied that his examples were probably correct.&lt;/p&gt;

&lt;h4 id=&#34;automap-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3d403aa8ff6e493e-ac666ce340cf819b-ac666ce340cf819b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3d403aa8ff6e493e/ac666ce340cf819b#ac666ce340cf819b&#34;&gt;&lt;code&gt;==&amp;gt;&lt;/code&gt; automap?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman wondered if a single arg sub or block would automatically map when used on the sharp side of a pipe. Luke Palmer thought this might be too much dwimmery.&lt;/p&gt;

&lt;h4 id=&#34;refactoring-ide-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fb02214da27797-8075562d8daca262-8075562d8daca262&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fb02214da27797/8075562d8daca262#8075562d8daca262&#34;&gt;refactoring IDE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;J Matisse Enzer wondered if Perl 6 would have strong IDE tools like refactoring supported or automated syntax completion. Larry explained that he would like to make it possible for Perl 6 to support these things &amp;ldquo;just as Perl 1 built in all the system interfaces&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;reduce-precedence-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-31098c67d7610b76-a80524d587239256-a80524d587239256&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/31098c67d7610b76/a80524d587239256#a80524d587239256&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; precedence&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what the precedence for the &lt;code&gt;reduce&lt;/code&gt; metaoperator was. Luke Palmer said &amp;ldquo;listop&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;piping-into-random-things-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-76e3502dbafa5451-3fa6c4d58fe52fd6-3fa6c4d58fe52fd6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/76e3502dbafa5451/3fa6c4d58fe52fd6#3fa6c4d58fe52fd6&#34;&gt;piping into random things&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered about piping into various things such as arrays, scalars, hashes, and filehandles. Larry gave one of his characteristically speculative answers.&lt;/p&gt;

&lt;h4 id=&#34;that-s-why-they-call-me-mister-bitterness-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bc1df31bfa2b0ac1-ffee56c03be536be-ffee56c03be536be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bc1df31bfa2b0ac1/ffee56c03be536be#ffee56c03be536be&#34;&gt;That&amp;rsquo;s why they call me Mister Bitterness&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what &amp;ldquo;complain bitterly&amp;rdquo; meant in the context of the yada operator. Larry explained that &lt;code&gt;...&lt;/code&gt; would fail, &lt;code&gt;???&lt;/code&gt; would warn, and &lt;code&gt;!!!&lt;/code&gt; would die.&lt;/p&gt;

&lt;h4 id=&#34;isa-specifics-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5176b3ff12be2364-ac1d8dceea604062-ac1d8dceea604062&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5176b3ff12be2364/ac1d8dceea604062#ac1d8dceea604062&#34;&gt;&lt;code&gt;isa&lt;/code&gt; specifics&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered how &lt;code&gt;isa&lt;/code&gt; would act when called with junctions, nothing, classes, or instances. Larry explained that it would act intelligently by autothreading, returning a list of all options, returning a bool, or something I didn&amp;rsquo;t follow.&lt;/p&gt;

&lt;h4 id=&#34;available-operators-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-affcbfe2b37386a9-d0e890171b91a4ab-d0e890171b91a4ab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/affcbfe2b37386a9/d0e890171b91a4ab#d0e890171b91a4ab&#34;&gt;available operators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd created a somewhat lengthy list of available operators, hoping to inspire someone to come up with a good operator for block labels. This led to a very meandering thread.&lt;/p&gt;

&lt;h4 id=&#34;reduce-meta-operator-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1ed77c281581466c-cc032c3414c33e07-cc032c3414c33e07&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1ed77c281581466c/cc032c3414c33e07#cc032c3414c33e07&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; meta operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some of you might be confused by my earlier meantion of a &lt;code&gt;reduce&lt;/code&gt; metaoperator. Larry introduced one. Much debate ensued, but Larry seems fairly set on it.&lt;/p&gt;

&lt;h4 id=&#34;override-built-ins-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ef4af74285e64feb-7f31dec5a5de054a-7f31dec5a5de054a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ef4af74285e64feb/7f31dec5a5de054a#7f31dec5a5de054a&#34;&gt;override built ins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige wondered if he would be able to redefine built in functions such as &lt;code&gt;read&lt;/code&gt; in Perl 6. Larry explained that Perl 6 will give you so much rope that you could hang yourself from several trees while blowing off your own foot with it.&lt;/p&gt;

&lt;h4 id=&#34;opening-stdout-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-be554c423ebff952-0d073403e2d9e2ab-0d073403e2d9e2ab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/be554c423ebff952/0d073403e2d9e2ab#0d073403e2d9e2ab&#34;&gt;opening stdout&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered how to open stdout or a file named &amp;ldquo;-&amp;rdquo;. Larry explained that &lt;code&gt;io()&lt;/code&gt; would have the dwimmy parts like opening stdout, while open would not try and dwim.&lt;/p&gt;

&lt;h4 id=&#34;adverbial-blocks-explained-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-44ccdfc251bb3e15-cb47e226098267a2-cb47e226098267a2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/44ccdfc251bb3e15/cb47e226098267a2#cb47e226098267a2&#34;&gt;adverbial blocks explained&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Terrence Brannon stumbled upon the phrase &amp;ldquo;adverbial blocks&amp;rdquo; but didn&amp;rsquo;t understand what it meant. Luke Palmer provided a very clear and cogent explanation.&lt;/p&gt;

&lt;h4 id=&#34;circular-dereferencing-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7f64391fbe1526a5-bdda0e7a23279fcc-bdda0e7a23279fcc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7f64391fbe1526a5/bdda0e7a23279fcc#bdda0e7a23279fcc&#34;&gt;circular dereferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noticed that the autodereferencing of references would cause an infinite loop for circular refernce. Larry recanted and decided that the full on autodrill down was not as cool as he had initially thought, but he did warn us that next week he might think it was even cooler.&lt;/p&gt;

&lt;h4 id=&#34;scoping-of-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-10906cbd3833dfe8-c17c3cb539812c71-c17c3cb539812c71&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/10906cbd3833dfe8/c17c3cb539812c71#c17c3cb539812c71&#34;&gt;scoping of &lt;code&gt;$/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what sort of scope &lt;code&gt;$/&lt;/code&gt; would have. Luke Palmer replied that it would be lexical just like Perl 5. Larry corrected him pointing out that it would actually be lexical, unlike Perl 5.&lt;/p&gt;

&lt;h4 id=&#34;binding-subs-return-values-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9a7d2a6903d58234-133ea4e1aee20e19-133ea4e1aee20e19&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9a7d2a6903d58234/133ea4e1aee20e19#133ea4e1aee20e19&#34;&gt;binding subs&amp;rsquo; return values&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered what binding of subs&amp;rsquo; return values would do by default. Juerd answered that it would allow modification only for subs declared as lvalues.&lt;/p&gt;

&lt;h4 id=&#34;use-fatal-no-fatal-exceptions-and-undef-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0bc2bfd53fb240e0-c961990fd9b8090f-c961990fd9b8090f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0bc2bfd53fb240e0/c961990fd9b8090f#c961990fd9b8090f&#34;&gt;&lt;code&gt;use fatal&lt;/code&gt;, &lt;code&gt;no fatal&lt;/code&gt;, exceptions, and &lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wondered how various scopes fatality levels would interact. Luke Palmer explained that you need to do 360s on the control pad while holding block. He also provided some thorough examples.&lt;/p&gt;

&lt;h4 id=&#34;xml-grammar-in-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-76d4ea76b181e160-e99e0455a5a65b9f-e99e0455a5a65b9f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/76d4ea76b181e160/e99e0455a5a65b9f#e99e0455a5a65b9f&#34;&gt;XML grammar in Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A while back Juerd wrote a Perl 5 script to transform the EBNF spec of XML into Perl 6 rules. Now that Pugs might be able to support it, he suggests that it would be a good project for a brave soul. No takers have yet appeared.&lt;/p&gt;

&lt;h4 id=&#34;mailing-list-indexing-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6561aa2cc9862ea7-17956d9845658363-17956d9845658363&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6561aa2cc9862ea7/17956d9845658363#17956d9845658363&#34;&gt;mailing list indexing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman posted a link to his initial version of an annotated version of the mailing list. He asked for comments, but Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;prefix-adverbs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-68f2f37ecdf43bc3-759611c278caea0d-759611c278caea0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/68f2f37ecdf43bc3/759611c278caea0d#759611c278caea0d&#34;&gt;prefix adverbs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Someone who posted to Google Groups (receiving the unfortunate name mangling of &lt;code&gt;arcadi.sheh...@gmail.com&lt;/code&gt;) asked if it made sense to write &lt;code&gt;$a = stuff @foo, how =&amp;gt; &#39;scrambled&#39;, 1, 2, 3;&lt;/code&gt; as &lt;code&gt;$a = :&amp;gt;how(&#39;scrambled&#39;) stuff @foo, 1, 2, 3;&lt;/code&gt; or some such. Sadly, we will never know.&lt;/p&gt;

&lt;h4 id=&#34;semantics-of-split-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ad8f212972168670-769c309f02b8daa5-769c309f02b8daa5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ad8f212972168670/769c309f02b8daa5#769c309f02b8daa5&#34;&gt;semantics of &lt;code&gt;split&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked if he had Pugs splitting correctly. It wasn&amp;rsquo;t, but it is now.&lt;/p&gt;

&lt;h4 id=&#34;s29-punt-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6a2d3da3e1c1d25c-cf637256c360f285-cf637256c360f285&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6a2d3da3e1c1d25c/cf637256c360f285#cf637256c360f285&#34;&gt;S29: punt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams announced that he found the real world intruding too much and was going to have to leave off his work on S29. Sam Vilain, Aaron Sherman, and Max Maischein all volunteered to take up the effort.&lt;/p&gt;

&lt;h4 id=&#34;chomp-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4397075a85638757-e8f9bc28bf62d8d9-e8f9bc28bf62d8d9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4397075a85638757/e8f9bc28bf62d8d9#e8f9bc28bf62d8d9&#34;&gt;chomp!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered exactly what &lt;code&gt;is chomped&lt;/code&gt; did. Larry Wall explained exactly what &lt;code&gt;is chomped&lt;/code&gt; does.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8d0b000a2006c805-4ad613ff400c8219-4ad613ff400c8219&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8d0b000a2006c805/4ad613ff400c8219#4ad613ff400c8219&#34;&gt;character classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick, based on his experience with PGE, suggested a slightly new syntax for character classes in Perl 6. Larry liked the syntax and went on to muse about other unresolved issues involving character classes.&lt;/p&gt;

&lt;h4 id=&#34;numification-of-match-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1223c3f11e0a6444-e7c68ffcd90eab2e-e7c68ffcd90eab2e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1223c3f11e0a6444/e7c68ffcd90eab2e#e7c68ffcd90eab2e&#34;&gt;Numification of match objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noticed that numification of match objects made strings of digits numify to 1 (i.e., true). He didn&amp;rsquo;t like this. Actually no one did, so it has changed to numify as one would expect. After all, it can numify to &lt;code&gt;0 but true&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;traits-and-properties-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-16823aec5ef20ced-cec5b69464b40e22-cec5b69464b40e22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/16823aec5ef20ced/cec5b69464b40e22#cec5b69464b40e22&#34;&gt;traits and properties API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stéphane Payrard wondered when and how traits would interact with properties. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon and Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;single-element-lists-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89d14842806995e3-26d0e71ecf3a2add-26d0e71ecf3a2add&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89d14842806995e3/26d0e71ecf3a2add#26d0e71ecf3a2add&#34;&gt;single element lists&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Scott Duff wondered what &lt;code&gt;(1)[0]&lt;/code&gt; would do. Larry though that we would have to specialize &lt;code&gt;()[]&lt;/code&gt; to parse as &lt;code&gt;(,)[]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;void-type-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-10e17e64680febd3-b313716c6e95b3a8-b313716c6e95b3a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/10e17e64680febd3/b313716c6e95b3a8#b313716c6e95b3a8&#34;&gt;Void type?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß, Rod Adams, and Autrijus speculated about ways to deal with a Void type. Nothing definitive came out of it though.&lt;/p&gt;

&lt;h4 id=&#34;uniquely-identifying-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-09b2db1a9e7db5f9-6077664d96af973e-6077664d96af973e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/09b2db1a9e7db5f9/6077664d96af973e#6077664d96af973e&#34;&gt;uniquely identifying objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered if there was a way to uniquely identify objects in Perl 6. Larry pointed him to the &lt;code&gt;.id&lt;/code&gt; and the associated &lt;code&gt;=:=&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-lexicals-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-49e7c4a0ea58c70e-ff5dc221a156fbdf-ff5dc221a156fbdf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/49e7c4a0ea58c70e/ff5dc221a156fbdf#ff5dc221a156fbdf&#34;&gt;&lt;code&gt;BEGIN&lt;/code&gt; and lexicals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Benjamin Smith wondered if &lt;code&gt;BEGIN&lt;/code&gt; could modify lexicals that don&amp;rsquo;t really exist yet. Larry expressed the opinion that one should be able to modify compiler state in &lt;code&gt;BEGIN&lt;/code&gt; blocks; however, he did not answer the question of what Benjamin&amp;rsquo;s example does.&lt;/p&gt;

&lt;h4 id=&#34;vs-in-rules-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-99f41fce83f47882-0baafe36b1533bac-0baafe36b1533bac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/99f41fce83f47882/0baafe36b1533bac#0baafe36b1533bac&#34;&gt;&lt;code&gt;::&lt;/code&gt; vs &lt;code&gt;:::&lt;/code&gt; in rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick confused many people when he asked about the difference between &lt;code&gt;::&lt;/code&gt; and &lt;code&gt;:::&lt;/code&gt; at the top level of rules. The answer seems to be that &lt;code&gt;:::&lt;/code&gt; will fail the entire match while &lt;code&gt;::&lt;/code&gt; will simply fail it at that offset in the string on which it is attempting to match.&lt;/p&gt;

&lt;h4 id=&#34;negatives-of-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-acba3cb531632d51-81a1eeddf0fe0110-81a1eeddf0fe0110&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/acba3cb531632d51/81a1eeddf0fe0110#81a1eeddf0fe0110&#34;&gt;negatives of junctions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry noticed that &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;!~&lt;/code&gt; will confuse English speakers when applied to junctions. Luke noticed that defining &lt;code&gt;$a != $b&lt;/code&gt; as &lt;code&gt;!( $a == $b )&lt;/code&gt; works, averting tragedy.&lt;/p&gt;

&lt;h4 id=&#34;boxed-types-from-builtins-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-269675add9b4e867-bfd9ff194b555aed-bfd9ff194b555aed&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/269675add9b4e867/bfd9ff194b555aed#bfd9ff194b555aed&#34;&gt;boxed types from builtins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman worried that many built in functions return boxed types which could cause a big speed hit. Rod Adams explained that this was necessary but optimizations would be made available.&lt;/p&gt;

&lt;h4 id=&#34;method-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5325e618c8a13d53-b3e9bc09565e4d0c-b3e9bc09565e4d0c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5325e618c8a13d53/b3e9bc09565e4d0c#b3e9bc09565e4d0c&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd suggested using &lt;code&gt;./method&lt;/code&gt; to mean &lt;code&gt;$?SELF.method&lt;/code&gt; (in an attempt to solve the long standing debate of &lt;code&gt;$?SELF.method&lt;/code&gt; vs &lt;code&gt;$_.method&lt;/code&gt;). Much discussion ensued although the general response seems favorable.&lt;/p&gt;

&lt;h4 id=&#34;operators-everywhere-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-59c945653fd23792-3f82db7c6ffaa285-3f82db7c6ffaa285&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/59c945653fd23792/3f82db7c6ffaa285#3f82db7c6ffaa285&#34;&gt;operators everywhere&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon noted that there seemed to be an extremely large number of operators. He expressed concern, because he had believed that P6 was going to have a small core with modules. Larry explained that most of these operators were the combination of a small set of operators and meta operators in a combinatorially explosive way, giving the wonderfully lucid example of &lt;code&gt;[&amp;gt;&amp;gt;+^=&amp;lt;&amp;lt;]&lt;/code&gt;. Much discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;build-and-submethods&#34;&gt;&lt;code&gt;BUILD&lt;/code&gt; and submethods&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wanted to be sure that all appropriate submethods would be called when they should and that only the correct one would be called when they shouldn&amp;rsquo;t all be. Larry answered that it did work as he expected.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bc0db43280956c54/e9174e5538ded4a3#e9174e5538ded4a3&#34;&gt;question about subclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/dcb6befb3e298ed6/f1afbb4dcfb70859#f1afbb4dcfb70859&#34;&gt;same question but with roles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;vs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f29e96d82fe0cf63-b6b426ef593bb255-b6b426ef593bb255&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f29e96d82fe0cf63/b6b426ef593bb255#b6b426ef593bb255&#34;&gt;&lt;code&gt;$.&lt;/code&gt; vs &lt;code&gt;$:&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer was having trouble understanding the difference between &lt;code&gt;$.&lt;/code&gt; and &lt;code&gt;$:&lt;/code&gt;. Aaron Sherman prointed out a few differences according to A12.&lt;/p&gt;

&lt;h4 id=&#34;not-4-3-2-1-0-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-37b0c3369432ae1b-497ff7b0b8174f0f-497ff7b0b8174f0f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/37b0c3369432ae1b/497ff7b0b8174f0f#497ff7b0b8174f0f&#34;&gt;&lt;code&gt;not 4,3,2,1,0;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered what the signature for &lt;code&gt;not&lt;/code&gt; was in Perl 6. Larry explained that unlike Perl 5, Perl 6&amp;rsquo;s &lt;code&gt;not&lt;/code&gt; function should act like &lt;code&gt;!&amp;lt;&amp;lt;[4,3,2,1,0]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;multiple-colons-in-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1c07dcb50dcca284-e3ba8ab5be76d706-e3ba8ab5be76d706&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1c07dcb50dcca284/e3ba8ab5be76d706#e3ba8ab5be76d706&#34;&gt;multiple colons in MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer caught Autrijus off guard when he pointed out that multis could have multiple levels of &lt;code&gt;:&lt;/code&gt;, each of which is less important than the last. Larry surmised that they might not have documented this hard enough.&lt;/p&gt;

&lt;h4 id=&#34;nested-captures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7ee563a776c4282d-f6d7519e8ce9a504-f6d7519e8ce9a504&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7ee563a776c4282d/f6d7519e8ce9a504#f6d7519e8ce9a504&#34;&gt;Nested Captures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks started a very long thread when he noted that nested captures caused extra layers in the match array rather than counting parens like Perl 5. This led to discussion of 0 vs 1 indexing. Discussion ensued, with the resulting decision that &lt;code&gt;$0 == $/[0]&lt;/code&gt;. There was much rejoicing.&lt;/p&gt;

&lt;h4 id=&#34;1-28-2-56-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a809c4f79d842213-832fa3e105a673c6-832fa3e105a673c6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a809c4f79d842213/832fa3e105a673c6#832fa3e105a673c6&#34;&gt;&lt;code&gt;&#39;1.28&#39; * &#39;2.56&#39;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered what path &lt;code&gt;&#39;1.28&#39; * &#39;2.56&#39;&lt;/code&gt; should take to arrive at 3.2768. Larry told him that infix * used prefix + to numify non-Num args.&lt;/p&gt;

&lt;h4 id=&#34;methods-from-roles-vs-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c988130fd5e548a3-66c00f93abebc818-66c00f93abebc818&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c988130fd5e548a3/66c00f93abebc818#66c00f93abebc818&#34;&gt;methods from roles vs classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wants to lazily load a role but only the first time it is necessary. Luke Palmer assured him that his example would work correctly.&lt;/p&gt;

&lt;h4 id=&#34;currying-and-defaults-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bbdb12a0d4615470-a3a24b1502bda023-a3a24b1502bda023&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bbdb12a0d4615470/a3a24b1502bda023#a3a24b1502bda023&#34;&gt;currying and defaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman, in his efforts to get up to speed on S29, wondered how currying would interact with default values. Larry explained that default values would not be bound until the invocation of the curried function.&lt;/p&gt;

&lt;h4 id=&#34;precedence-of-custom-infix-ops-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-82117b977c93b143-639f21ba2587a6f9-639f21ba2587a6f9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/82117b977c93b143/639f21ba2587a6f9#639f21ba2587a6f9&#34;&gt;precedence of custom infix ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to define the precedence of custon infix ops. Luke Palmer pointed out the looser, tighter, and equiv traits (by default it is &lt;code&gt;equiv( &amp;amp;infix:&amp;lt;+&amp;gt; ) )&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, April 26 - May 3, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050505.html/</link>
      <pubDate>Thu, 05 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050505.html/</guid>
      <description>

&lt;p&gt;All,&lt;/p&gt;

&lt;p&gt;Welcome to another week&amp;rsquo;s summary. This week I shall endeavor not to delete my summary accidentally or destroy the world. Here we go with p6c.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;implicit-on-for-loops-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-69683b9aa7be224e-04e2d9f3c1e0a485-04e2d9f3c1e0a485&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/69683b9aa7be224e/04e2d9f3c1e0a485#04e2d9f3c1e0a485&#34;&gt;Implicit &lt;code&gt;$_&lt;/code&gt; on &lt;code&gt;for&lt;/code&gt; Loops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kiran Kumar found a bug in Pugs involving &lt;code&gt;for&lt;/code&gt; loops which use &lt;code&gt;$_&lt;/code&gt; but don&amp;rsquo;t iterate over it. Aaron Sherman and Luke Palmer confirmed the bug. There&amp;rsquo;s no word as to its final status, but given the rate of development of Pugs&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;pugs-darcs-trouble-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-7ba880a18e930ef0-eb57bb2f9e835725-eb57bb2f9e835725&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7ba880a18e930ef0/eb57bb2f9e835725#eb57bb2f9e835725&#34;&gt;Pugs Darcs Trouble&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Glenn Ehrlich noticed that Pugs&amp;rsquo; Darcs repository wasn&amp;rsquo;t updating. Sam Vilain explained that occasionally a daemon needed kicking.&lt;/p&gt;

&lt;h4 id=&#34;memory-game-v0-2-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-27c9aa32b07143ac-d66c656ee7ac6104-d66c656ee7ac6104&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/27c9aa32b07143ac/d66c656ee7ac6104#d66c656ee7ac6104&#34;&gt;Memory Game v0.2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András announced the release of the latest version of Memory. He also put out a call for 85x75 pixel photos for the next version.&lt;/p&gt;

&lt;h4 id=&#34;haddock-for-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3b3b13aba5edc94a-71bcde78a82cf6e4-71bcde78a82cf6e4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3b3b13aba5edc94a/71bcde78a82cf6e4#71bcde78a82cf6e4&#34;&gt;Haddock for Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stuart Cook decided that the easiest way for him to understand Pugs internals was to provide better documentation. To that end he started working with &lt;a href=&#34;http://haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt; to automatically generate cross-linked documentation for Pugs. He even met with some success.&lt;/p&gt;

&lt;h4 id=&#34;is-export-trait-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-666781ac15240dd4-f454e750eba3d680-f454e750eba3d680&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/666781ac15240dd4/f454e750eba3d680#f454e750eba3d680&#34;&gt;&lt;code&gt;is export&lt;/code&gt; Trait&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Garrett Rooney wondered why the &lt;code&gt;is export&lt;/code&gt; trait appeared to do nothing in Pugs. Stevan Little explained that it was just a place holder which, though it parses, does nothing semantically yet.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-2-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-c8cfa416b5e7a7c7-c8cfa416b5e7a7c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7&#34;&gt;Pugs 6.2.2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus proudly announced the release of Pugs 6.2.2. It features many, many changes. High on the list is a bunch of speed ups, and also thread-safe, deadlock-free internal storage.&lt;/p&gt;

&lt;h4 id=&#34;pugs-on-cygwin-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-c8cfa416b5e7a7c7-c8cfa416b5e7a7c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7&#34;&gt;Pugs on Cygwin&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon noticed that Pugs had trouble on Cygwin. He has made some headway rectifying the situation, although work remains to be done.&lt;/p&gt;

&lt;h4 id=&#34;pugs-todo-model-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-9483fd2a5aec22e9-54c6a4194d06bb4d-54c6a4194d06bb4d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/9483fd2a5aec22e9/54c6a4194d06bb4d#54c6a4194d06bb4d&#34;&gt;Pugs TODO Model&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan has put some more thought into the TODO model for Pugs. His latest suggestion, annotating TODO tests with a flag indicating why they are not passing, seems a little less hackish then the last one and received general support.&lt;/p&gt;

&lt;h4 id=&#34;parrot-hiding-inside-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b671d5f9c4af29f7-21ab762083e523b7-21ab762083e523b7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b671d5f9c4af29f7/21ab762083e523b7#21ab762083e523b7&#34;&gt;Parrot Hiding Inside Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wanted to embed the newly released PGE, which is PIR code that runs on Parrot. He decided to embed Parrot into Pugs. He also posted an interesting link to &lt;a href=&#34;http://repetae.net/john/computer/jhc/jhc.html&#34;&gt;JHC&lt;/a&gt; as a possible bootstrap solution.&lt;/p&gt;

&lt;h4 id=&#34;new-pge-released-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-013c11d7818c06ce-989a407cc3427641-989a407cc3427641&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/013c11d7818c06ce/989a407cc3427641#989a407cc3427641&#34;&gt;New PGE Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Maybe I should have mentioned this first. Patrick R. Michaud released a new version of the Parrot Grammar Engine. It is entirely PIR code and generates PIR code. It has many features but not enough tests&amp;hellip; &amp;lt;cough&amp;gt;hint&amp;lt;/cough&amp;gt;.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;monthly-release-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c84185258e7e0d7b-f7f3543949eda594-f7f3543949eda594&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c84185258e7e0d7b/f7f3543949eda594#f7f3543949eda594&#34;&gt;Monthly Release?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jared Rhine wondered if the monthly releases included April. Chip announced that April&amp;rsquo;s release would be slushier then most, but would start on the fourth.&lt;/p&gt;

&lt;h4 id=&#34;t-op-debuginfo-t-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b03818f8c24a714d-bc38b1b8f82072c2-bc38b1b8f82072c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b03818f8c24a714d/bc38b1b8f82072c2#bc38b1b8f82072c2&#34;&gt;&lt;em&gt;t/op/debuginfo.t&lt;/em&gt; Failure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad noticed a failure in &lt;code&gt;debuginfo&lt;/code&gt;. Leo pointed out that it was an issue of flushing output handles. Francois provided a patch (well, actually two patches). Warnock applies to the second.&lt;/p&gt;

&lt;h4 id=&#34;partcl-happy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-59555e75b86096e7-417caf2641040a92-417caf2641040a92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/59555e75b86096e7/417caf2641040a92#417caf2641040a92&#34;&gt;ParTcl Happy?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda thought that ParTcl&amp;rsquo;s GC bugs had finally gone away. Leo burst his bubble. Apparently these GC bugs can disappear and reappear according to sunspot activity.&lt;/p&gt;

&lt;h4 id=&#34;s1zzegfault-in-load-bytecode-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-28bb0c982dc96158-4bb715005cd477ff-4bb715005cd477ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/28bb0c982dc96158/4bb715005cd477ff#4bb715005cd477ff&#34;&gt;S1zzegfault in &lt;code&gt;load_bytecode&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross submitted a patch fixing a segfault in &lt;code&gt;load_bytecode&lt;/code&gt;. Jens pointed out that it should use &lt;code&gt;real_exception&lt;/code&gt; instead of &lt;code&gt;internal_exception&lt;/code&gt;. chromatic offered to write the test. There is no official committed message though.&lt;/p&gt;

&lt;h4 id=&#34;large-packfile-tinker-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f66e120a77b7dea1-a76a1532c9d73a71-a76a1532c9d73a71&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f66e120a77b7dea1/a76a1532c9d73a71#a76a1532c9d73a71&#34;&gt;Large &lt;code&gt;PackFile&lt;/code&gt; Tinker&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo implemented a change in the interpreter &lt;code&gt;PackFile&lt;/code&gt; structure which has been under discussion for a long time. Unfortunately, it has the potential to break a lot of JIT stuff. Tests and fixes would be wonderful.&lt;/p&gt;

&lt;h4 id=&#34;pmc-inheritance-issue-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3355689f7d93ef77-efa3de4e8a1773d0-efa3de4e8a1773d0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3355689f7d93ef77/efa3de4e8a1773d0#efa3de4e8a1773d0&#34;&gt;PMC Inheritance Issue&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had some trouble with his Perl5 PMCs. Later, he posted a &amp;ldquo;mea culpa&amp;rdquo; email, but Leo provided some useful pointers anyway.&lt;/p&gt;

&lt;h4 id=&#34;rt-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e5f150409499a4b9-e90b1895bf492ec0-e90b1895bf492ec0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e5f150409499a4b9/e90b1895bf492ec0#e90b1895bf492ec0&#34;&gt;RT Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer cleaned out an old ticket from RT.&lt;/p&gt;

&lt;h4 id=&#34;rfc-assign-px-py-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8e7c77c1e58a7a63-7521b02224111fd6-7521b02224111fd6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8e7c77c1e58a7a63/7521b02224111fd6#7521b02224111fd6&#34;&gt;RFC &lt;code&gt;assign Px, Py&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some time ago, Leo requested comments on the semantics of &lt;code&gt;assign&lt;/code&gt;. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon tried to de-Warnock the thread with his support. He also suggested a &lt;code&gt;clone&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4 id=&#34;null-in-real-exception-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8614b5f46c5afef5-9127affc3fb8db0f-9127affc3fb8db0f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8614b5f46c5afef5/9127affc3fb8db0f#9127affc3fb8db0f&#34;&gt;NULL in &lt;code&gt;real_exception&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark struggled with a NULL pointer deref in &lt;code&gt;real_exception&lt;/code&gt;. Leo pointed him toward the correct approach.&lt;/p&gt;

&lt;h4 id=&#34;unary-operator-overhaul-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0ada304f7b12b3b9-78369daf6a33d1ec-78369daf6a33d1ec&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0ada304f7b12b3b9/78369daf6a33d1ec#78369daf6a33d1ec&#34;&gt;Unary Operator Overhaul&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Having finished overhauling the infix operators, Leo set to work updating the unary operators to provide variants which allocate their results.&lt;/p&gt;

&lt;h4 id=&#34;die-die-die-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-726a70c07d030bc9-b5218dafc585575b-b5218dafc585575b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/726a70c07d030bc9/b5218dafc585575b#b5218dafc585575b&#34;&gt;Die &lt;code&gt;die&lt;/code&gt;, die!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he was removing the &lt;code&gt;die&lt;/code&gt; opcode and adding a Bruce Willis opcode in its place. Unlike Mr. Willis, the &lt;code&gt;die_hard&lt;/code&gt; opcode actually &lt;code&gt;died&lt;/code&gt; relatively easily. Leo then renamed it to just &lt;code&gt;die&lt;/code&gt; out of popular demand.&lt;/p&gt;

&lt;h4 id=&#34;core-dump-with-computed-goto-core-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5cc6fc1e15d9aca5-2ec2ad5764204fee-2ec2ad5764204fee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5cc6fc1e15d9aca5/2ec2ad5764204fee#2ec2ad5764204fee&#34;&gt;Core Dump with Computed goto Core&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross found a core dump with the computed goto core. Leo explained that a hackish attempted optimization caused it. He also fixed it.&lt;/p&gt;

&lt;h4 id=&#34;ignore-generated-files-in-svn-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6f24da5492f08cf3-fac81156831a7cce-fac81156831a7cce&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6f24da5492f08cf3/fac81156831a7cce#fac81156831a7cce&#34;&gt;Ignore Generated Files in SVN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juergen Boemmels made SVN ignore some &lt;em&gt;.so&lt;/em&gt; files. Leo asked if it could also ignore &lt;em&gt;.rej&lt;/em&gt; and &lt;em&gt;.orig&lt;/em&gt; files.&lt;/p&gt;

&lt;h4 id=&#34;dynsuper-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3afbf12eccf3dd61-a49d30cc2e4850c2-a49d30cc2e4850c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3afbf12eccf3dd61/a49d30cc2e4850c2#a49d30cc2e4850c2&#34;&gt;&lt;code&gt;DYNSUPER&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found that &lt;code&gt;DYNSUPER&lt;/code&gt; did not work well with his dynamic classes. Leo provided a suggestion for something to try and also suggested a &lt;code&gt;super&lt;/code&gt; vtable call.&lt;/p&gt;

&lt;h4 id=&#34;mmd-type-info-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a86ffd2aa7f742c0-51154d82ec3ad392-51154d82ec3ad392&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a86ffd2aa7f742c0/51154d82ec3ad392#51154d82ec3ad392&#34;&gt;MMD Type Info&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered how Parrot carries around the type info for MMD. Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;imc-http-server-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b00883386e35f9bb-f7f80c8c5ba7c896-f7f80c8c5ba7c896&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b00883386e35f9bb/f7f80c8c5ba7c896#f7f80c8c5ba7c896&#34;&gt;IMC HTTP Server&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Amslser wrote a tiny webserver in IMC. This led to the discovery of that the binary to ASCII transcoding is missing. Leo suggested several possible solutions.&lt;/p&gt;

&lt;h4 id=&#34;ponie-s-use-of-pmc-flag-bits-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-63537ac226178af4-cc3076d2e3060e93-cc3076d2e3060e93&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63537ac226178af4/cc3076d2e3060e93#cc3076d2e3060e93&#34;&gt;Ponie&amp;rsquo;s Use of PMC Flag Bits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark asked how best to use the 8 private bits of PMC in Ponie. His initial thought was to mark type with it. Leo suggested that adding the type to the flag bits was unnecessary, as one can usually just call a vtable or MMD function directly and the type will work out.&lt;/p&gt;

&lt;h4 id=&#34;built-in-mmds-as-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1a771b6b259aba13-264e518a2ae3e29a-264e518a2ae3e29a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1a771b6b259aba13/264e518a2ae3e29a#264e518a2ae3e29a&#34;&gt;Built-in MMDs as Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for calling built-in MMDs on objects as methods.&lt;/p&gt;

&lt;h4 id=&#34;unary-and-infix-ops-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-16710a4ac706a01e-49e7fa9bd58cb829-49e7fa9bd58cb829&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/16710a4ac706a01e/49e7fa9bd58cb829#49e7fa9bd58cb829&#34;&gt;Unary and Infix Ops Update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a summary and TODO for his overhaul of opcodes that return new results. Jerry Gay and Bob Rogers helped fill out the corners. Bob even provided some tests.&lt;/p&gt;

&lt;h4 id=&#34;parrot-and-ref-counting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c07a32bc11b665cc-d549c4a3dd3225ad-d549c4a3dd3225ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c07a32bc11b665cc/d549c4a3dd3225ad#d549c4a3dd3225ad&#34;&gt;Parrot and Ref Counting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robin Redeker wondered why Parrot had decided to go with a non-ref counting GC. Dan Sugalski took responsibility for the decision and explained his motivations. Non-ref counting GCs are essentially simpler, cleaner, and faster. You can get a more detailed answer from reading the thread or Dan&amp;rsquo;s &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000200.html&#34;&gt;Squawks of the Parrot: What the heck is: Garbage Collection&lt;/a&gt; from way back when.&lt;/p&gt;

&lt;h4 id=&#34;deprecate-fast-call-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6d7d76ccd034d582-bbf3b646460a8de9-bbf3b646460a8de9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6d7d76ccd034d582/bbf3b646460a8de9#bbf3b646460a8de9&#34;&gt;Deprecate &lt;code&gt;fast_call&lt;/code&gt;?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo mused that he would like to deprecate the &lt;code&gt;fast_call&lt;/code&gt; PIR construct. No one squawked, so I call it officially deprecated.&lt;/p&gt;

&lt;h4 id=&#34;win32-thread-primitives-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-66b98ffd6b21d491-7055c56da4e90399-7055c56da4e90399&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/66b98ffd6b21d491/7055c56da4e90399#7055c56da4e90399&#34;&gt;Win32 Thread Primitives&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky and Leo went back and forth a few times working out thread primitives for Windows. I am not sure what state they finally reached.&lt;/p&gt;

&lt;h4 id=&#34;call-syntax-abstraction-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-06c1d2b53c317fda-739ced0badff1626-739ced0badff1626&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06c1d2b53c317fda/739ced0badff1626#739ced0badff1626&#34;&gt;Call Syntax Abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a proposal for a calling convention abstraction. No comments have appeared yet, but it has not been up for long.&lt;/p&gt;

&lt;h4 id=&#34;tailcalls-in-pir-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-06bc2256eb0fa02f-4764b4627545d841-4764b4627545d841&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06bc2256eb0fa02f/4764b4627545d841#4764b4627545d841&#34;&gt;Tailcalls in PIR&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick R. Michaud wondered if PIR supported tailcalls and tailmethods yet. Leo provided a few pointers. Bob Rogers suggested a nice syntax, which Leo implemented.&lt;/p&gt;

&lt;h4 id=&#34;vtables-in-extend-h-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8275c0e33fbe7f73-8afa1165fe253894-8afa1165fe253894&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8275c0e33fbe7f73/8afa1165fe253894#8afa1165fe253894&#34;&gt;Vtables in &lt;em&gt;extend.h&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark noted a need for vtables in &lt;em&gt;extend.h&lt;/em&gt;. Leo agreed that they should be auto-generated. chromatic eagerly requested the chance to write the Perl code that does this auto-generation.&lt;/p&gt;

&lt;h4 id=&#34;s-bailout-bail-out-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfe99da639662579-fcdb54c7e2a042c0-fcdb54c7e2a042c0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfe99da639662579/fcdb54c7e2a042c0#fcdb54c7e2a042c0&#34;&gt;&lt;code&gt;s/BAILOUT/BAIL_OUT/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael G. Schwern announced that he&amp;rsquo;d removed &lt;code&gt;BAILOUT&lt;/code&gt; from Test::Builder in favor of &lt;code&gt;BAIL_OUT&lt;/code&gt;. He admitted that a deprecated &lt;code&gt;BAILOUT&lt;/code&gt; would remain as undocumented. At some point we should update.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;anonymous-roles-and-closures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-925efba5007e366b-278b07bf0ab6408d-278b07bf0ab6408d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/925efba5007e366b/278b07bf0ab6408d#278b07bf0ab6408d&#34;&gt;Anonymous Roles and Closures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wondered if he could generate anonymous roles that are also closures. It made my head hurt. People seem to think it&amp;rsquo;s possible though.&lt;/p&gt;

&lt;h4 id=&#34;peter-piper-picked-a-hash-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-24e369fba3ed626e-b64aaafcca1c055e-b64aaafcca1c055e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24e369fba3ed626e/b64aaafcca1c055e#b64aaafcca1c055e&#34;&gt;Peter Piper picked a hash&amp;hellip;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what &lt;code&gt;pick&lt;/code&gt; would return when called on a hash. Rod Adams suggested that it would return a pair. Larry thought that would be a good idea, if perhaps difficult to implement.&lt;/p&gt;

&lt;h4 id=&#34;all-junctions-bad-subjects-indecision-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e08f7de7b69df5eb-aba86b97f1a1251c-aba86b97f1a1251c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e08f7de7b69df5eb/aba86b97f1a1251c#aba86b97f1a1251c&#34;&gt;All (Junctions, Bad Subjects, Indecision)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb found that he could use junctions to quickly answer questions but not provide specifics. Sadly, he is not the first person to have this problem. Junctions naturally provide Boolean operations but do not naturally explain what motivated that answer. Perhaps they should be thrown out along with the axiom of choice. After all, do we really need a basis for ALL of our vector spaces?&lt;/p&gt;

&lt;h4 id=&#34;is-rw-a-no-op-on-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-90ff5afe035da8da-baef5fa481f0fdf3-baef5fa481f0fdf3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/90ff5afe035da8da/baef5fa481f0fdf3#baef5fa481f0fdf3&#34;&gt;&lt;code&gt;is rw&lt;/code&gt; a No-Op on References?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if &lt;code&gt;is rw&lt;/code&gt; did anything for references, as you can still modify the value to which they refer. Juerd answered basically yes.&lt;/p&gt;

&lt;h4 id=&#34;complex-number-package-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2a97f706fe9155c1-cf1a5838783a72ad-cf1a5838783a72ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2a97f706fe9155c1/cf1a5838783a72ad#cf1a5838783a72ad&#34;&gt;Complex Number Package&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Lang wondered about creating a complex number package. Including returning junctions of values for roots of unity. Unfortunately these lists can be quite large, even infinite. Thus, he wondered if he could use lazy junctions. Thomas Sandlaß conjectured that he could by the &amp;ldquo;law of laziness preservation&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;auto-threading-of-junctions-and-threads-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-778dca4cf38a52d8-361f6f87d1cff32c-361f6f87d1cff32c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/778dca4cf38a52d8/361f6f87d1cff32c#361f6f87d1cff32c&#34;&gt;Auto-Threading of Junctions and Threads&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman worried that the auto-threading of junction would actually run in separate threads. This is most assuredly not the common case, although some warped soul could implement it that way.&lt;/p&gt;

&lt;h4 id=&#34;context-of-indices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c96c85ea8f511acc-3ad64e02a95dcf69-3ad64e02a95dcf69&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c96c85ea8f511acc/3ad64e02a95dcf69#3ad64e02a95dcf69&#34;&gt;Context of Indices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked what context &lt;code&gt;want&lt;/code&gt; would provide when used as an index. Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;sun-s-fortress-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-017005a999609b34-630048a564c26aed-630048a564c26aed&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/017005a999609b34/630048a564c26aed#630048a564c26aed&#34;&gt;Sun&amp;rsquo;s Fortress&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a link to a next-generation computer language from Sun called Fortress and then went on to ask about parameterized types, tuple types, and block labels. Bad Autrijus! Make summarizers lives hard. Then we have to punt like this rather than try to extract the three different threads at once.&lt;/p&gt;

&lt;h4 id=&#34;restricting-variable-scopes-with-while-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2ef6fef80e878793-436d5489b9a75b49-436d5489b9a75b49&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2ef6fef80e878793/436d5489b9a75b49#436d5489b9a75b49&#34;&gt;Restricting Variable Scopes With &lt;code&gt;while&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wanted to know how he could restrict the scope of variables used in the conditionals of his &lt;code&gt;while&lt;/code&gt; statement to the loop. This led to some discussion about the implementation of &lt;code&gt;while&lt;/code&gt; as a macro or some other beast. Larry began to ponder the submacro.&lt;/p&gt;

&lt;h4 id=&#34;first-last-et-al-support-in-pugs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-dd5ffb21b1415af0-a0831d58dd4fc1ff-a0831d58dd4fc1ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/dd5ffb21b1415af0/a0831d58dd4fc1ff#a0831d58dd4fc1ff&#34;&gt;&lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt; et al. Support in Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen decided to try to add support for &lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt; blocks and the like into Pugs. This led him to p6l with some questions about traits which are closures. Answers and suggestions followed.&lt;/p&gt;

&lt;h4 id=&#34;junctions-of-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a3d674ff66f67da0-fa3e3e7418df928c-fa3e3e7418df928c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a3d674ff66f67da0/fa3e3e7418df928c#fa3e3e7418df928c&#34;&gt;Junctions of Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how junctions of classes would act. The consensus seems to be that they act as type specifiers of a sort, restricting whatever the variables they describe can contain.&lt;/p&gt;

&lt;h4 id=&#34;subtype-declarations-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f221c018f819b86f-4c031821dcb63e17-4c031821dcb63e17&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f221c018f819b86f/4c031821dcb63e17#4c031821dcb63e17&#34;&gt;Subtype Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered what exactly subtype declarations provided and suggested jettisoning them. Larry remained unconvinced.&lt;/p&gt;

&lt;h4 id=&#34;labels-on-blocks-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f9148955e4c08bb2-0b2779b4506808ff-0b2779b4506808ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f9148955e4c08bb2/0b2779b4506808ff#0b2779b4506808ff&#34;&gt;Labels on Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered if there was some way to attach labels to blocks. Discussion ensued, including a comment from Larry that it won&amp;rsquo;t need to be redone.&lt;/p&gt;

&lt;h4 id=&#34;open-and-pipe-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ed05cb58e8f61b17-b22033c9c8530e13-b22033c9c8530e13&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ed05cb58e8f61b17/b22033c9c8530e13#b22033c9c8530e13&#34;&gt;&lt;code&gt;open&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas proposed a basic &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt; built-in for discussion. Discussion followed. Larry mentioned that he has &amp;ldquo;pretty much&amp;rdquo; blessed &lt;code&gt;io&lt;/code&gt; (from &lt;a href=&#34;https://metacpan.org/pod/IO::All&#34;&gt;IO::All&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&#34;is-if-function-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a6c71df5881d333e-f3d3ef24db245638-f3d3ef24db245638&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a6c71df5881d333e/f3d3ef24db245638#f3d3ef24db245638&#34;&gt;Is &lt;code&gt;if&lt;/code&gt; Function?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if &lt;code&gt;if&lt;/code&gt; as a function had unintended consequences. Fortunately, &lt;code&gt;if&lt;/code&gt; is not a function, it is a statement-level construct.&lt;/p&gt;

&lt;h4 id=&#34;junctions-in-use-statements-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-072b19fefc404f80-fbb2a6e537cddab5-fbb2a6e537cddab5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/072b19fefc404f80/fbb2a6e537cddab5#fbb2a6e537cddab5&#34;&gt;Junctions in &lt;code&gt;use&lt;/code&gt; Statements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if he could say &lt;code&gt;use strict &amp;amp; warnings&lt;/code&gt;. Larry explained that there were parsing problems with it and possibly limited utility, but he has not officially ruled it out, as the problems have workarounds.&lt;/p&gt;

&lt;h4 id=&#34;foo-one-foo-self-foo-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d3ab335df56c8fc4-fd9dc1f0e0e1cf20-fd9dc1f0e0e1cf20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d3ab335df56c8fc4/fd9dc1f0e0e1cf20#fd9dc1f0e0e1cf20&#34;&gt;&lt;code&gt;.foo() == one($_.foo(), $?SELF.foo())&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This great quandary continues. This week, Larry is leaning towards the &lt;code&gt;.foo() == $_.foo()&lt;/code&gt; camp, but nothing is yet set. He also suggested &lt;code&gt;$^&lt;/code&gt; as being equivalent to &lt;code&gt;$?SELF&lt;/code&gt; (which I really like). Time will tell how this one will work out. My prediction is that the argument will rage on until Pugs is ready to implement it and needs a definitive answer&amp;hellip;then it will change a few more times.&lt;/p&gt;

&lt;h4 id=&#34;type-system-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-82ecf6620c641ddd-500a69e034596d36-500a69e034596d36&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/82ecf6620c641ddd/500a69e034596d36#500a69e034596d36&#34;&gt;Type System Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked a few questions about the type system, and at which times it did what things. Larry provided some answers.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

