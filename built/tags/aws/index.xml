<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/aws/</link>
    <description>Recent content in Aws on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jan 2020 20:19:30 +0000</lastBuildDate>
    <atom:link href="/tags/aws/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - December 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</link>
      <pubDate>Sun, 05 Jan 2020 20:19:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create a REST accessible AWS Lambda functions with &lt;a href=&#34;https://metacpan.org/pod/AWS::Lambda::Quick&#34;&gt;AWS::Lambda::Quick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Entry Point (for docker and other containers) &lt;a href=&#34;https://metacpan.org/pod/App::aep&#34;&gt;App::aep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::lrrr&#34;&gt;App::lrrr&lt;/a&gt; watches one or more directories and re-runs a given command when the contents change&lt;/li&gt;
&lt;li&gt;Get an auth token for GitHub with &lt;a href=&#34;https://metacpan.org/pod/GitHub::Apps::Auth&#34;&gt;GitHub::Apps::Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neovim::Ext&#34;&gt;Neovim::Ext&lt;/a&gt; provides Perl bindings for neovim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Thumbalizr&#34;&gt;WebService::Thumbalizr&lt;/a&gt; provides an interface to the web service to create screenshots of web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get the path to the source file or parent directory using &lt;a href=&#34;https://metacpan.org/pod/Path::This&#34;&gt;Path::This&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use libarchive from Perl with &lt;a href=&#34;https://metacpan.org/pod/Archive::Raw&#34;&gt;Archive::Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::NamedParams&#34;&gt;DBIx::NamedParams&lt;/a&gt; let&amp;rsquo;s you use execute SQL queries using named parameters (instead of &amp;lsquo;?&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Read and validate CSVs with &lt;a href=&#34;https://metacpan.org/pod/Data::Validate::CSV&#34;&gt;Data::Validate::CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Nanoid&#34;&gt;Nanoid&lt;/a&gt; is a port of the JavaScript unique string generator library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Validate::Simple&#34;&gt;Validate::Simple&lt;/a&gt; is a generic data validation module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/OSSEC&#34;&gt;OSSEC&lt;/a&gt; (intrusion detection) with Perl&lt;/li&gt;
&lt;li&gt;Faster promises with &lt;a href=&#34;https://metacpan.org/pod/Promise::XS&#34;&gt;Promise::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::CI&#34;&gt;Test::CI&lt;/a&gt;: get details about the current CI environment&lt;/li&gt;
&lt;li&gt;Write object-oriented tests that work with Test2 using &lt;a href=&#34;https://metacpan.org/pod/Test::Class::Tiny&#34;&gt;Test::Class::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::TraceCalls&#34;&gt;Test::TraceCalls&lt;/a&gt; outputs all subroutines called by a test script in JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/overload::open&#34;&gt;overload::open&lt;/a&gt; let&amp;rsquo;s you hook into the &lt;code&gt;open&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ISAL::Crypto&#34;&gt;ISAL::Crypto&lt;/a&gt; can &amp;ldquo;run multiple hash calculations at the same time on one cpu using vector registers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Cyclotomic&#34;&gt;Math::Polynomial::Cyclotomic&lt;/a&gt; s a &amp;ldquo;cyclotomic polynomials generator&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Throttle::Adaptive&#34;&gt;Throttle::Adaptive&lt;/a&gt; implements the &amp;ldquo;adaptive throttling&amp;rdquo; algorithm described in Google&amp;rsquo;s SRE book&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make a Dancer2 app mobile-aware using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::MobileDevice&#34;&gt;Dancer2::Plugin::MobileDevice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mail::Qmail::Filter&#34;&gt;Mail::Qmail::Filter&lt;/a&gt; filters incoming e-mails when using qmail as an MTA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Results::Role::Struct&#34;&gt;Mojo::DB::Results::Role::Struct&lt;/a&gt; returns database query results as structs&lt;/li&gt;
&lt;li&gt;Apply roles to Mojo database results with &lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Role::ResultsRoles&#34;&gt;Mojo::DB::Role::ResultsRoles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2018/</link>
      <pubDate>Mon, 07 Jan 2019 02:16:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::Credentials&#34;&gt;Amazon::Credentials&lt;/a&gt; is an AWS credentials discoverer&lt;/li&gt;
&lt;li&gt;Migrate installed modules from one perl to another with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-MigrateModules/script/perl-migrate-modules&#34;&gt;App::MigrateModules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CloudHealth::API&#34;&gt;CloudHealth::API&lt;/a&gt; is a REST API Client for the Cloud monitoring/management service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SecurityCenter&#34;&gt;Net::SecurityCenter&lt;/a&gt; provides a perly interface to Tenable SecurityCenter REST API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::TimePiece&#34;&gt;DBIx::Class::InflateColumn::TimePiece&lt;/a&gt; can autocreate Time::Piece objects from integer columns&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Database::Async&#34;&gt;Database::Async&lt;/a&gt; is an early-release asynchronous database interface&lt;/li&gt;
&lt;li&gt;Lookup file extension descriptions with &lt;a href=&#34;https://metacpan.org/pod/File::Extension&#34;&gt;File::Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicruft&#34;&gt;Unicruft&lt;/a&gt; provides a Perl interface to libunicruft, the unicruft transliteration library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Char::Replace&#34;&gt;Char::Replace&lt;/a&gt; implements naive XS character replacement as a faster alternative to substitution or transliteration&lt;/li&gt;
&lt;li&gt;Get a coordination channel implemented with Promises via &lt;a href=&#34;https://metacpan.org/pod/Promises::Channel&#34;&gt;Promises::Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Instance::DNS&#34;&gt;Test::Instance::DNS&lt;/a&gt; provides a local mock DNS server for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::LUHN_XS&#34;&gt;Algorithm::LUHN_XS&lt;/a&gt; implements an XS Version of Algorithm::LUHN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MathML::itex2MML&#34;&gt;MathML::itex2MML&lt;/a&gt; converts itex equations to MathML&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Statistics::Running::Tiny&#34;&gt;Statistics::Running::Tiny&lt;/a&gt; calculates basic descriptive statistics (min/max/skew/kurtosis etc) without storing the data points&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---june-2018/</link>
      <pubDate>Wed, 04 Jul 2018 10:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---june-2018/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s the Fourth of July holiday here in the US, so this month&amp;rsquo;s cover image has been given a USA-style makeover. Below you&amp;rsquo;ll find my curated list of June&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Grep Microsoft Office documents with &lt;a href=&#34;https://metacpan.org/pod/App::Greple::msdoc&#34;&gt;App::Greple::msdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::JC::Client&#34;&gt;App::JC::Client&lt;/a&gt; is a small command line client for JIRA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::ReportPrereqs&#34;&gt;App::ReportPrereqs&lt;/a&gt; prints a nicely formatted report on distribution / project dependencies using the cpanfile&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::XRay&#34;&gt;AWS::XRay&lt;/a&gt; provides an interface to the request tracing service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::SendGrid::V3&#34;&gt;Email::SendGrid::V3&lt;/a&gt; is a class for emailing via the SendGrid v3 Web API&lt;/li&gt;
&lt;li&gt;A base class for Mattermost bots: &lt;a href=&#34;https://metacpan.org/pod/Net::Mattermost::Bot&#34;&gt;Net::Mattermost::Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access OpenGL prototyping tools using &lt;a href=&#34;https://metacpan.org/pod/OpenGL::Sandbox&#34;&gt;OpenGL::Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the You Need A Budget API with &lt;a href=&#34;https://metacpan.org/pod/WWW::YNAB&#34;&gt;WWW::YNAB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract the version of Perl a module declares with &lt;a href=&#34;https://metacpan.org/pod/Module::Extract::DeclaredVersion&#34;&gt;Module::Extract::DeclaredVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get module permissions from MetaCPAN API using &lt;a href=&#34;https://metacpan.org/pod/PAUSE::Permissions::MetaCPAN&#34;&gt;PAUSE::Permissions::MetaCPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Elasticsearch::Model&#34;&gt;Elasticsearch::Model&lt;/a&gt; is a replacement for ElasticSearchX::Model that works with Elasticsearch v6+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::AMEX::Transaction&#34;&gt;Finance::AMEX::Transaction&lt;/a&gt; parses AMEX transaction files: EPRAW, EPPRC, EPTRN, CBNOT, GRRCN&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devel::CallParser has been patched to fix RT#110623 as an alt distribution: &lt;a href=&#34;https://metacpan.org/pod/Alt::Devel::CallParser::ButWorking&#34;&gt;Alt::Devel::CallParser::ButWorking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::XSConstructor&#34;&gt;Class::XSConstructor&lt;/a&gt; is a wow-fast (but limited) constructor in XS, See also &lt;a href=&#34;https://metacpan.org/pod/MooX::XSConstructor&#34;&gt;MooX::XSConstructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Embed Tiny C code in your Perl program using &lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC::Inline&#34;&gt;FFI::TinyCC::Inline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::TooMuchCode&#34;&gt;Perl::Critic::TooMuchCode&lt;/a&gt; provides critic policies for unused imports, constants and other detritus&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wow, get a Perl interface to the Gameboy Advance with &lt;a href=&#34;https://metacpan.org/pod/Device::GBA&#34;&gt;Device::GBA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manage and monitor the Synaccess NP-05B networked power strip with &lt;a href=&#34;https://metacpan.org/pod/Device::Power::Synaccess::NP05B&#34;&gt;Device::Power::Synaccess::NP05B&lt;/a&gt;. See also &lt;a href=&#34;https://metacpan.org/pod/App::np05bctl&#34;&gt;App::np05bctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Control a FeelTech FY32xx signal generator using &lt;a href=&#34;https://metacpan.org/pod/Electronics::SigGen::FY3200&#34;&gt;Electronics::SigGen::FY3200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::TL1UDP&#34;&gt;Net::TL1UDP&lt;/a&gt; provides a Transaction Language 1 (TL-1) UDP interface&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::GPIOExpander::MCP23017&#34;&gt;RPi::GPIOExpander::MCP23017&lt;/a&gt; interface with the MCP23017 GPIO Expander Integrated Circuit over I2C&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Showterm&#34;&gt;Dancer2::Plugin::Showterm&lt;/a&gt; is a Dancer2 port of &lt;a href=&#34;http://showterm.io/&#34;&gt;showterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::ConfigAppStart&#34;&gt;MojoX::ConfigAppStart&lt;/a&gt; can start Mojo apps using Config::App&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2017/</link>
      <pubDate>Tue, 13 Jun 2017 09:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;p&gt;N.B. I&amp;rsquo;ll be speaking at &lt;a href=&#34;http://www.perlconference.us/tpc-2017-dc/&#34;&gt;The Perl Conference: DC 2017&lt;/a&gt;. My talk &lt;a href=&#34;http://www.perlconference.us/tpc-2017-dc/talks/#what_s_new_on_cpan_annual_edition&#34;&gt;What&amp;rsquo;s New on CPAN - Annual Edition&lt;/a&gt; will cover some highlights and curiosities from the past year of CPAN uploads. Come and say hi!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Async::Trello&#34;&gt;Net::Async::Trello&lt;/a&gt; is a low level, minimalist client for Trello&lt;/li&gt;
&lt;li&gt;Get a non blocking interface to Music Player Daemon with &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Net::MPD&#34;&gt;AnyEvent::Net::MPD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/VMware::vCloudDirector&#34;&gt;VMware::vCloudDirector&lt;/a&gt; provides an interface to VMWare vCloud Directory REST API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CloudDeploy&#34;&gt;CloudDeploy&lt;/a&gt; is a toolkit for building and managing AWS CloudFormation stacks&lt;/li&gt;
&lt;li&gt;A simple distributed cloud friendly cron for the masses using &lt;a href=&#34;https://metacpan.org/pod/CloudCron&#34;&gt;CloudCron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate color data for testing using &lt;a href=&#34;https://metacpan.org/pod/Data::Faker::Colour&#34;&gt;Data::Faker::Colour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::PCAP&#34;&gt;File::PCAP&lt;/a&gt; is a module for reading/writing PCAP files&lt;/li&gt;
&lt;li&gt;Automatically normalize Unicode hash keys with &lt;a href=&#34;https://metacpan.org/pod/Hash::Normalize&#34;&gt;Hash::Normalize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::DNS::Extlang&#34;&gt;Net::DNS::Extlang&lt;/a&gt; is a DNS extension language&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::CLI&#34;&gt;API::CLI&lt;/a&gt; is a generic framework for creating REST API command line clients&lt;/li&gt;
&lt;li&gt;Benchmark different parameter validation modules using &lt;a href=&#34;https://metacpan.org/pod/Benchmark::Featureset::ParamCheck&#34;&gt;Benchmark::Featureset::ParamCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ref::Util::XS&#34;&gt;Ref::Util::XS&lt;/a&gt; is the XS implementation of Ref::Util&lt;/li&gt;
&lt;li&gt;Get a superfast router using &lt;a href=&#34;https://metacpan.org/pod/Router::XS&#34;&gt;Router::XS&lt;/a&gt; (disclaimer: I am the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SQS::Worker&#34;&gt;SQS::Worker&lt;/a&gt; is a lightweight framework for async processing of messages from SQS queues&lt;/li&gt;
&lt;li&gt;Get tab completion in the Reply REPL for exported symbol names with &lt;a href=&#34;https://metacpan.org/pod/Reply::Plugin::Autocomplete::ExportedSymbols&#34;&gt;Reply::Plugin::Autocomplete::ExportedSymbols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interact with the Palo Alto firewall API with &lt;a href=&#34;https://metacpan.org/pod/Device::PaloAlto::Firewall&#34;&gt;Device::PaloAlto::Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract GPS data from GPS units using &lt;a href=&#34;https://metacpan.org/pod/GPSD::Parse&#34;&gt;GPSD::Parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access and manipulate Raspberry Pi GPIO pins with &lt;a href=&#34;https://metacpan.org/pod/RPi::Pin&#34;&gt;RPi::Pin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Sane&#34;&gt;Image::Sane&lt;/a&gt; let&amp;rsquo;s you use SANE-compatible scanner devices from Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Tutorial&#34;&gt;XS::Tutorial&lt;/a&gt; provides documentation for learning Perl XS (disclosure, I am the module author).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AI::XGBoost&#34;&gt;AI::XGBoost&lt;/a&gt; is a Perl wrapper for XGBoost, the gradient boosting machine learning framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::DB::Big&#34;&gt;Bio::DB::Big&lt;/a&gt; provides a perly interface to BigWig and BigBed files via libBigWig&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log LWP requests as curl commands using &lt;a href=&#34;https://metacpan.org/pod/LWP::CurlLog&#34;&gt;LWP::CurlLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::HTTP::LocalServer&#34;&gt;Test::HTTP::LocalServer&lt;/a&gt; implements a tiny HTTP server for testing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::Plugin::Selector&#34;&gt;WWW::Mechanize::Plugin::Selector&lt;/a&gt; adds a CSS selector method for WWW::Mechanize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Cloudfront cache invalidation with Paws</title>
      <link>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</link>
      <pubDate>Mon, 03 Apr 2017 08:12:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/&#34;&gt;Deploy a static website with Paws&lt;/a&gt;, I developed a simple script to upload files to AWS S3, using &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;. In this article I&amp;rsquo;ll describe a script to invalidate CloudFront caches: this can be used to force CloudFront to re-cache files which have changed on S3.&lt;/p&gt;

&lt;h3 id=&#34;aws-cloudfront&#34;&gt;AWS CloudFront&lt;/h3&gt;

&lt;p&gt;CloudFront is Amazon&amp;rsquo;s Content Delivery Network service. It&amp;rsquo;s used to cache local versions of files so that they can be delivered to requests faster; for example if you used S3 to host your website in Amazon&amp;rsquo;s US East region, files on the website might load faster for East Coast customers than those on the West Coast. With a CDN like CloudFront however, copies of the website files can be saved all over the World, so that visitor&amp;rsquo;s browsers fetch the website files from closer geographic locations, improving the website speed.&lt;/p&gt;

&lt;p&gt;When cached website files are updated on S3, they need to be invalidated from the CloudFront cache. This forces CloudFront to fetch fresh copies of invalidated files.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;Using CloudFront with Paws is pretty easy. For cache invalidation all you really need is a CloudFront distribution id, and a list of files to be invalidated. This is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gettimeofday&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;distribution-id=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DISTRIBUTION_ID,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys=s&amp;#39;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @KEYS,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--distribution-id and --region are required&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $DISTRIBUTION_ID &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION;

&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no objects to invalidate!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @KEYS;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalidating cached keys: %s\n&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;, @KEYS;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();

$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, I use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to process the command line options. The script requires a CloudFront distribution id and an AWS region string. The &lt;code&gt;--keys&lt;/code&gt; switch is optional as the script also reads keys from &lt;code&gt;STDIN&lt;/code&gt;. This snippet is curious:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It sets the &lt;code&gt;STDIN&lt;/code&gt; filehandle to non-blocking mode. That way, if STDIN is empty when the script tries to read from it, it won&amp;rsquo;t block. On the next line, &lt;code&gt;map&lt;/code&gt; is used to prepend a slash to every key. This is required by CloudFront.&lt;/p&gt;

&lt;p&gt;The script then creates a Paws CloudFront object, and the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; &lt;code&gt;gettimeofday&lt;/code&gt; function is used to calculate a cheap unique id (it returns the current epoch seconds and microseconds).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the script calls the &lt;code&gt;CreateInvalidation&lt;/code&gt; method to send the data to AWS CloudFront:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;combining-tools&#34;&gt;Combining tools&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;s3-upload&lt;/code&gt; script prints the keys it updated on STDOUT, and &lt;code&gt;cf-invalid&lt;/code&gt; can read keys from STDIN. This makes for convenient chaining:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload --files static --bucket example.com --region us-east-1 \
| ./cf-invalid --distribution-id e9d4922bd9120 --region us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And because the scripts use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, the option names can be shortened:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload -f static -b example.com -r us-east-1 | ./cf-invalid -d e9d4922bd9120 -r us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, keys (filenames) can be specified as arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./cf-invalid -d e9d4922bd9120 -r us-east-1 -k index.html -k about.html -k contact.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both scripts are available on &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a static website with AWS S3 and Paws</title>
      <link>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</link>
      <pubDate>Tue, 21 Feb 2017 10:04:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</guid>
      <description>

&lt;p&gt;Amazon Web Services (AWS) is Amazon&amp;rsquo;s cloud services platform and S3 is the AWS file storage service. S3 is commonly used to host static websites. With Perl we have many modules for using AWS, but I like &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;, developed by &lt;a href=&#34;https://metacpan.org/author/JLMARTIN&#34;&gt;Jose Luis Martinez&lt;/a&gt; which supports many AWS services, including S3. In this article I&amp;rsquo;ll walk you through a Perl script I developed to upload and maintain a static website using S3 and Paws.&lt;/p&gt;

&lt;h3 id=&#34;aws-setup&#34;&gt;AWS setup&lt;/h3&gt;

&lt;p&gt;To use AWS from the command line you&amp;rsquo;ll need a to generate a key id and secret key for your account which you can get from the &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS website&lt;/a&gt;. Once you login with your Amazon credentials, click on your account name and go to &amp;ldquo;My Security Credentials&amp;rdquo;. Once you have a key id and secret key, you need to create the credentials files as used by &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;awscli&lt;/a&gt;. You can either install awscli and run &lt;code&gt;aws configure&lt;/code&gt;, else create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/.aws/default:
[default]
output = JSON
region = us-east

~/.aws/config:
[default]
aws_access_key_id = XXXXXXXXXXXX
aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the region value to the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html&#34;&gt;AWS region&lt;/a&gt; you want to use, and replace the &amp;ldquo;XXX&amp;rdquo; values with your own key id and secret key values. These files are stored in a different &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence&#34;&gt;location&lt;/a&gt; on Windows.&lt;/p&gt;

&lt;h3 id=&#34;create-an-s3-bucket&#34;&gt;Create an S3 bucket&lt;/h3&gt;

&lt;p&gt;S3 organizes files by bucket. Every bucket has URI-like name, which is unique across AWS. So if you&amp;rsquo;re going to host a website on S3, you&amp;rsquo;ll need to create a bucket for the website. This can be done via the AWS &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;web interface&lt;/a&gt;, the command-line &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/reference/s3/mb.html&#34;&gt;app&lt;/a&gt; or with Paws:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;);
$s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateBucket(Bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mystaticwebsite.com&amp;#39;&lt;/span&gt;, ACL &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ACL&lt;/code&gt; argument specifies that the bucket can be read publicly, but not edited, which makes sense for website files. At some point, you&amp;rsquo;ll need to enable the &amp;ldquo;static web hosting&amp;rdquo; &lt;a href=&#34;https://console.aws.amazon.com/s3/buckets/&#34;&gt;option&lt;/a&gt; for the bucket, but that&amp;rsquo;s not necessary to upload files to it.&lt;/p&gt;

&lt;h3 id=&#34;upload-files-to-s3&#34;&gt;Upload files to S3&lt;/h3&gt;

&lt;p&gt;S3 files are stored as objects in buckets. Every file has a key, which is similar to the filename. I&amp;rsquo;ve developed a &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;script&lt;/a&gt; called &lt;code&gt;s3-upload&lt;/code&gt; which uses Paws to upload files to S3 buckets. It uses &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to parse command line options. It requires &lt;code&gt;--bucket&lt;/code&gt; for the S3 bucket name, &lt;code&gt;--region&lt;/code&gt; for the AWS region, and &lt;code&gt;--files&lt;/code&gt; for the directory filepath:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Path::Tiny &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bucket=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BUCKET,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BASEPATH,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete-stale&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DELETE_STALE,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;must provide --bucket --region --files&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $BUCKET &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $BASEPATH;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory $BASEPATH not found&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d $BASEPATH;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $remote_objects &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_remote_objects($s3);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_objects  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upload($s3, $remote_objects);

delete_stale_objects($s3, $remote_objects, $local_objects) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $DELETE_STALE;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve omitted the subroutine definitions for brevity (see the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; for details). The script begins by validating the input options, then creates an &lt;code&gt;$s3&lt;/code&gt; object. It calls &lt;code&gt;get_remote_objects&lt;/code&gt; which returns a hashref of keys (files) and their last modified time currently in the bucket. It passes this to &lt;code&gt;upload&lt;/code&gt; which only uploads files that have been modified since being uploaded to S3 (you don&amp;rsquo;t want to upload the entire website if only one file has changed). &lt;code&gt;upload&lt;/code&gt; does many things, but essentially, it uses &lt;a href=&#34;https://metacpan.org/pod/Paws::S3::PutObject&#34;&gt;PutObject&lt;/a&gt; to upload files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  $s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;PutObject(
    Bucket  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $BUCKET,
    Key     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $key,
    ACL     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;,
    Body    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $path&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;slurp_raw,
  );
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;Key&lt;/code&gt; is the filename and &lt;code&gt;Body&lt;/code&gt; the raw bytes of the file. The &lt;code&gt;upload&lt;/code&gt; subroutine also returns a hashref of local keys and their last modified time. Optionally, the script can call &lt;code&gt;delete_stale_objects&lt;/code&gt; which deletes files from S3 which do not exist in the local tree.&lt;/p&gt;

&lt;p&gt;The script can be run like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will print any files uploaded to STDOUT and all other output to STDERR. The intention is to make it possible to pipe the filenames uploaded to other programs. A useful one might be a Cloudfront script which invalidates the cache for any files uploaded.&lt;/p&gt;

&lt;h3 id=&#34;more-features&#34;&gt;More features&lt;/h3&gt;

&lt;p&gt;Whilst the above script does the job, there are some features missing that are useful for static websites. Firstly, you might want to specify the MIME type of the files being uploaded. This is so when browsers fetch the files, S3 responds with the correct content type &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&#34;&gt;header&lt;/a&gt;. Otherwise, HTML files may not be displayed as websites, images may be downloaded instead of displayed, and so on. I use &lt;a href=&#34;https://metacpan.org/pod/Media::Type::Simple&#34;&gt;Media::Type::Simple&lt;/a&gt; for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Media::Type::Simple;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# setup mime types, add missing&lt;/span&gt;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime_types, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $MIME_TYPES &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t find $MIME_TYPES $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $media &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Media::Type::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($mime_types);
$media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/font-woff2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ext  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $path &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\.(\w+)$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval { @ext ? $media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;type_from_ext($ext[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) : undef };
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; STDERR $@ &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $@;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve uploaded a copy of &lt;code&gt;mime.types&lt;/code&gt; to the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/mime.types&#34;&gt;repo&lt;/a&gt;, and added a &lt;code&gt;--mime-types&lt;/code&gt; option for the filepath to a mime.types file (defaulting to &lt;code&gt;/etc/mime.types&lt;/code&gt;). Also not all media types are defined, so the code adds a custom definition for &lt;code&gt;woff2&lt;/code&gt;. The mime type is passed to &lt;code&gt;PutObject&lt;/code&gt; when a file is uploaded.&lt;/p&gt;

&lt;p&gt;Other useful options supported by the script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--strip&lt;/code&gt;- it seems cleaner to visit: &lt;code&gt;/home&lt;/code&gt; than &lt;code&gt;/home.html&lt;/code&gt;. The &lt;code&gt;--strip&lt;/code&gt; option can be used to specify any extensions to strip from filenames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--max-age&lt;/code&gt; - set a cache control header to have browsers cache files instead of downloading them on every page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt; - override the default behavior and upload all files, regardless of whether they already exist in the S3 bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These options can be used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale --mime-types mime.types --strip html --max-age 31536000 --force
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; is on GitHub. If you need help configuring a static website for AWS, Amazon have provided a good &lt;a href=&#34;http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - November 2014</title>
      <link>http://localhost:1313/article/137/2014/12/2/What-s-new-on-CPAN---November-2014/</link>
      <pubDate>Tue, 02 Dec 2014 14:15:16 +0000</pubDate>
      
      <guid>http://localhost:1313/article/137/2014/12/2/What-s-new-on-CPAN---November-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Lot&amp;rsquo;s of cool new stuff on CPAN in November, including: a new take on fatpacking Perl programs, TiVo for LWP and a lightning-fast Plack handler.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ceph::Rados&#34;&gt;Ceph::Rados&lt;/a&gt; provides a Perl interface to librados, the distributed object store&lt;/li&gt;
&lt;li&gt;Manage your to-do lists with &lt;a href=&#34;https://metacpan.org/pod/todoist&#34;&gt;App::todoist&lt;/a&gt; an app for todoist.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::loggrep&#34;&gt;App::loggrep&lt;/a&gt; implements a date search for log files&lt;/li&gt;
&lt;li&gt;Exchange SMS with Perl and ClickSend using &lt;a href=&#34;https://metacpan.org/pod/SMS::ClickSend&#34;&gt;SMS::ClickSend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Implode&#34;&gt;App::Implode&lt;/a&gt; packs Perl programs into a single executable file using a cpanfile. Alternative to App::FatPacker et al&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GnuCash::SQLite&#34;&gt;GnuCash::SQLite&lt;/a&gt; provides a Perl interface for GnuCash SQLite files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Want a parsed list of all Amazon Web Service ip addresses? Check out &lt;a href=&#34;https://metacpan.org/pod/AWS::Networks&#34;&gt;AWS::Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/recommended&#34;&gt;recommended&lt;/a&gt; loads preferred modules on demand at runtime, but won&amp;rsquo;t die if they&amp;rsquo;re not available&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Bitbucket&#34;&gt;Dist::Zilla::Plugin::Bitbucket&lt;/a&gt; is a Dist Zilla plugin for GitHub alternative, Bitbucket&lt;/li&gt;
&lt;li&gt;Need to create a temp directory whilst running tests? Check out &lt;a href=&#34;https://metacpan.org/pod/Test::TempDir::Tiny&#34;&gt;Test::TempDir::Tiny&lt;/a&gt;, it will create a temp directory and not delete it if tests fail.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::ConsistentHash::JumpHash&#34;&gt;Algorithm::ConsistentHash::JumpHash&lt;/a&gt; implements the Jump consistent hash algorithm&lt;/li&gt;
&lt;li&gt;Parse and format IRC messages using &lt;a href=&#34;https://metacpan.org/pod/String::Tagged::IRC&#34;&gt;String::Tagged::IRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Lexer&#34;&gt;Regexp::Lexer&lt;/a&gt; tokenizes regexes, very cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;games-entertainment&#34;&gt;Games &amp;amp; Entertainment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Trifid&#34;&gt;Crypt::Trifid&lt;/a&gt; implements the classic Trifid cipher dating from 1901. Do not hash your passwords with it!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chess::PGN::Extract&#34;&gt;Chess::PGN::Extract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Video::Generator&#34;&gt;Video::Generator&lt;/a&gt; is a Perl class for, err creating videos&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;math-science-language&#34;&gt;Math, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::KEGG::API&#34;&gt;Bio::KEGG::API&lt;/a&gt; provides a Perl interface to the KEGG database (Kyoto Encyclopedia of Genes and Genomes)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::StockAccount&#34;&gt;Finance::StockAccount&lt;/a&gt; is a well-documented, comprehensive module for monitoring stock portfoloio performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::Git&#34;&gt;Types::Git&lt;/a&gt; is an interesting distribution; it provides several Perl Type::Tiny classes for Git related types&lt;/li&gt;
&lt;li&gt;Ingy and David&amp;rsquo;s Inline module has a great new &lt;a href=&#34;https://metacpan.org/pod/Inline::Module::Tutorial&#34;&gt;tutorial&lt;/a&gt;, it&amp;rsquo;s well worth reading.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::Prototype&#34;&gt;MooX::Prototype&lt;/a&gt; implements the prototype pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TiVo for LWP; record and playback LWP interactions with &lt;a href=&#34;https://metacpan.org/pod/Test::VCR::LWP&#34;&gt;Test::VCR::LWP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::JSON::RPC::Autodoc&#34;&gt;Test::JSON::RPC::Autodoc&lt;/a&gt; generates markdown documentation for JSON RPC Web applications&lt;/li&gt;
&lt;li&gt;What a great idea: &lt;a href=&#34;https://metacpan.org/pod/Selenium::Screenshot&#34;&gt;Selenium::Screenshot&lt;/a&gt; lets you compare and contrast Selenium screenshots to detect UI changes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gazelle&#34;&gt;Gazelle&lt;/a&gt; is an XS-based, preforking Plack handler, for, (to quote the docs) &amp;ldquo;performance freaks&amp;rdquo;. Let&amp;rsquo;s see some benchmarks!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN July 2014</title>
      <link>http://localhost:1313/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</link>
      <pubDate>Fri, 01 Aug 2014 12:38:59 +0000</pubDate>
      
      <guid>http://localhost:1313/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AntTweakBar&#34;&gt;AntTweakBar&lt;/a&gt; provides Perl bindings for the GUI library&lt;/li&gt;
&lt;li&gt;Use PayPoint&amp;rsquo;s merchant engine with &lt;a href=&#34;https://metacpan.org/pod/Business::PayPoint::MCPE&#34;&gt;Business::PayPoint::MCPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PCDuino&#34;&gt;Device::PCDuino&lt;/a&gt; is a hardware interface for the pcDuino, by Timm Murray author of UAV::Pilot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HBase::JSONRest&#34;&gt;HBase::JSONRest&lt;/a&gt; is a RESTful interface to Apache HBase&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::Utils&#34;&gt;Net::Amazon::Utils&lt;/a&gt; provides helper utils for AWS&lt;/li&gt;
&lt;li&gt;Access Desk.com&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/WWW::Desk&#34;&gt;WWW::Desk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test GnuPG email sign/encrypt with &lt;a href=&#34;https://metacpan.org/pod/App::Eduard&#34;&gt;App::Eduard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::plackbench&#34;&gt;App::plackbench&lt;/a&gt; is a benchmarking tool for Plack applications&lt;/li&gt;
&lt;li&gt;Ensure that you only run a command once with &lt;a href=&#34;https://metacpan.org/pod/App::single&#34;&gt;App::single&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Lite&#34;&gt;Bio::Lite&lt;/a&gt; is a lightweight implementation of useful bio Perl functions&lt;/li&gt;
&lt;li&gt;Convert email addresses into the DNS rname format and vice versa using &lt;a href=&#34;https://metacpan.org/pod/DNS::RName::Converter&#34;&gt;DNS::RName::Converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; provides a simple implementation of an ordered hash with robust performance. Author David Golden &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;presented&lt;/a&gt; the module and comparison benchmarks recently at NY.pm (&lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generate sets of English names with &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::EN&#34;&gt;Mock::Person::EN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Markdown::Github&#34;&gt;Pod::Markdown::Github&lt;/a&gt; converts POD to Github-sepcific markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Benchmark::Report::GitHub&#34;&gt;Benchmark::Report::GitHub&lt;/a&gt; generates benchmark reports from Travis-CI and publishes them on GitHub wiki&lt;/li&gt;
&lt;li&gt;Augment your DBIx::Class schema objects with additional logic using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Wrapper&#34;&gt;DBIx::Class::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::Contributors&#34;&gt;Dist::Zilla::Plugin::Git::Contributors&lt;/a&gt; pulls all of the author names from your Git commit history and adds them to your module&amp;rsquo;s metadata&lt;/li&gt;
&lt;li&gt;Looking for a drop-in replacement for Getop::Long with tab completion? Check out &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::Complete&#34;&gt;Getopt::Long::Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JCONF is a JSON format optimized for configuration files. &lt;a href=&#34;https://metacpan.org/pod/JCONF::Writer&#34;&gt;JCONF::Writer&lt;/a&gt; produces JCONF files from Perl data structures&lt;/li&gt;
&lt;li&gt;Enable OAuth2 support in command line applications with &lt;a href=&#34;https://metacpan.org/pod/OAuth::Cmdline&#34;&gt;OAuth::Cmdline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pegex::Forth&#34;&gt;Pegex::Forth&lt;/a&gt; is a Forth parser and interpreter built on Pegex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Refine&#34;&gt;Refine&lt;/a&gt; is a clever module that let&amp;rsquo;s you add methods to objects (not classes) at runtime&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Type::Tiny::XS&#34;&gt;Type::Tiny::XS&lt;/a&gt; for an even faster Type::Tiny&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Map::Tube::London&#34;&gt;Map::Tube::London&lt;/a&gt; will tell you the shortest route between two stations on the London Underground&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Pangram&#34;&gt;Text::Pangram&lt;/a&gt; identifies strings which are pangrams&lt;/li&gt;
&lt;li&gt;Access your Zombies Run! stats using &lt;a href=&#34;https://metacpan.org/pod/WebService::ZombiesRun&#34;&gt;WebService::ZombiesRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mojolicious&#34;&gt;Mojolicious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::UnixSocket&#34;&gt;Mojo::UserAgent::UnixSocket&lt;/a&gt; enables Mojo::UserAgent to interact with sockets&lt;/li&gt;
&lt;li&gt;Use HTML::Template::Pro templates in your application with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::HTMLTemplateProRenderer&#34;&gt;Mojolicious::Plugin::HTMLTemplateProRenderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support RESTful operations with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::REST&#34;&gt;Mojolicious::Plugin::REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Log webpage user events with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Surveil&#34;&gt;Mojolicious::Plugin::Surveil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subtests&#34;&gt;Test::Subtests&lt;/a&gt; is interesting: it wraps Test::More tests into subtests and can allow some of them to fail&lt;/li&gt;
&lt;li&gt;Write RSpec - like tests for Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Test::Spec&#34;&gt;Rex::Test::Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::DateTime::RFC3339&#34;&gt;Test::Deep::DateTime::RFC3339&lt;/a&gt; tests that RFC3339 timestamps are within a certain tolerance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Docker::MySQL&#34;&gt;Test::Docker::MySQL&lt;/a&gt; launches MySQL docker containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reuse your Kelp routes with &lt;a href=&#34;https://metacpan.org/pod/KelpX::AppBuilder&#34;&gt;KelpX::AppBuilder&lt;/a&gt; (Kelp is a Plack based web micro-framework)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming&#34;&gt;Plack::App::CGIBin::Streaming&lt;/a&gt; enables CGI applcaitions to use the Palck streaming protocol&lt;/li&gt;
&lt;li&gt;Tie variables to DuckDuckGo search using &lt;a href=&#34;https://metacpan.org/pod/Tie::DuckDuckGo&#34;&gt;Tie::DuckDuckGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

