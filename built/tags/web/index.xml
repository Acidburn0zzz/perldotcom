<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/web/</link>
    <description>Recent content in Web on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Jul 2014 12:26:52 +0000</lastBuildDate>
    <atom:link href="/tags/web/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generate static websites from dynamic Perl web apps</title>
      <link>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</link>
      <pubDate>Tue, 15 Jul 2014 12:26:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Static websites aren&amp;rsquo;t suitable for every situation, but they have several advantages over dynamic apps; they&amp;rsquo;re more efficient, more secure and simpler to deploy. That said, developing and maintaining a static site is a pain, there&amp;rsquo;s just too much repetitive boilerplate code. Enter &lt;a href=&#34;https://metacpan.org/pod/wallflower&#34;&gt;Wallflower&lt;/a&gt;, it generates static websites from PSGI compatible Perl web applications. You get the best of both worlds: develop the routes, templates and unit tests in your favourite web framework but deploy it as a static website with Wallflower.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=App-Wallflower+1.004&#34;&gt;results&lt;/a&gt; for the latest version (v1.004) of App::Wallflower show it runs on just about any Perl and operating system, including Windows. You can install it from CPAN by going to the command line and typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::Wallflower&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wallflower-in-action&#34;&gt;Wallflower in action&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple application using &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a skeleton application for us. Now change into the root application directory and create a new directory to hold the static files, we&amp;rsquo;ll call it &amp;ldquo;static&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd MyApp
$ mkdir static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s all we need to generate the static site with wallflower:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wallflower &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;d static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wallflower will request the application root page (&amp;lsquo;/&amp;rsquo;) and spider all links it finds from there, copying the files to the static folder. This includes files referenced in your html and css, such as JavaScript files. If your app has links to all of its pages, this is all you need.&lt;/p&gt;

&lt;h3 id=&#34;test-the-static-site-with-nginx&#34;&gt;Test the static site with nginx&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s deploy the site with nginx locally (you&amp;rsquo;ll need nginx installed for this). First create the virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;server {
    listen &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
    server_name localhost;
    root &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#e6db74&#34;&gt;/MyApp/s&lt;/span&gt;tatic;
    location &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; {
        index index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html;
        rewrite &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/$ /i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html break;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming a unix-like platform, save the virtual host file to &amp;ldquo;/etc/nginx/sites-available/localhost&amp;rdquo;. Next enter these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ sudo cp static &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ cd &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/&lt;/span&gt;nginx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sites&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enabled
$ sudo ln &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/sites-available/&lt;/span&gt;localhost&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to start nginx. On RHEL/Fedora/CentOS you can start nginx with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Ubuntu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo service nginx start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now check out the site at &lt;a href=&#34;http://localhost:&#34;&gt;http://localhost:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/102/dancer2.png&#34; alt=&#34;The default Dancer app - statically deployed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty good to me!&lt;/p&gt;

&lt;h3 id=&#34;wallflower-tips&#34;&gt;Wallflower Tips&lt;/h3&gt;

&lt;p&gt;A few things I&amp;rsquo;ve found whilst using Wallflower:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use absolute urls over relative ones. So if you host your font files in your css directory, use: &amp;ldquo;/css/MyFont.ttf&amp;rdquo; instead of &amp;ldquo;MyFont.ttf&amp;rdquo; in your css files.&lt;/li&gt;
&lt;li&gt;Think about files you use but aren&amp;rsquo;t directly linked to in your app&amp;rsquo;s HTML pages, the sitemap.xml file for example. Feed urls for these files to Wallflower with the -F option.&lt;/li&gt;
&lt;li&gt;Watch out for urls in commented code as Wallflower will copy these too!&lt;/li&gt;
&lt;li&gt;The Wallflower docs recommend using extensions in your urls to ensure the correct content-type is set. I found this wasn&amp;rsquo;t required when I deployed the files with nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you prefer developing applications with Catalyst, Dancer or Mojolicious, Wallflower is a useful tool that can be incorporated into your development and deployment process. For further examples of Wallflower in action, check out the &lt;a href=&#34;https://metacpan.org/pod/Wallflower::Tutorial&#34;&gt;tutorial&lt;/a&gt; and advent calendar &lt;a href=&#34;http://www.perladvent.org/2012/2012-12-22.html&#34;&gt;entry&lt;/a&gt; by Wallflower creator Philippe Bruhat (BooK).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Â©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/ruthanddave/9432335346/in/photolist-9YgULK-6CwkPH-m68vYZ-4P7TsV-4Pc9dL-7UqEXc-8rbEQq-mPFbgf-Hw6fU-2JcQ24-7ZdMJc-5q1xn5-fnvbFu-fpNhu5-bY6j7J-6HC9cQ-7Y666Z-4RGjZ5-c5bJ5A-5Ma2Kx-7UshUJ-buamir-qLy2D-26mzb-nUfKdk-818aoT-4ne9U5-azaNvR-c7Ztsj-sbu9W-4hrgcG-8r8yrv-hdmVrd-a72iqb-4Kebyi-aEpfqd-6cdRLZ-7iqNqm-6XsteA-b8crZZ-ubPgJ-8pBxDZ-6R63RH-6AnSCX-byKj2-8b97G8-d6X7B-dddPtT-6pUqhf-ejhHg3|&#34;&gt;Ruth Hartnup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML pro-parsing tips</title>
      <link>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</link>
      <pubDate>Thu, 10 Jul 2014 12:33:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Perl has some fantastic modules for parsing HTML and one of the best is XML::LibXML. It&amp;rsquo;s an interface to the libxml2 C library; super fast but also super-picky. I&amp;rsquo;ve often found XML::LibXML croaking on relatively simple - but incorrectly formed HTML. If you find this, do not give up! This article shares 3 simple techniques for overcoming malformed HTML when parsing with XML::LibXML.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tip-1-turn-on-recovery-mode&#34;&gt;Tip 1: turn on recovery mode&lt;/h3&gt;

&lt;p&gt;If XML::LibXML is croaking on a later part of the HTML, try turning on recovery mode, which will return all of the correctly parsed HTML up until XML::LibXML encountered the error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; XML::LibXML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $xml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( recover &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $xml&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With recovery mode set to 1, the parser will still warn about parsing errors. To suppress the warnings, set recover to 2.&lt;/p&gt;

&lt;h3 id=&#34;tip-2-sanitize-the-input-first-with-html-scrubber&#34;&gt;Tip 2: sanitize the input first with HTML::Scrubber&lt;/h3&gt;

&lt;p&gt;Sometimes recovery mode alone is not enough - XML::LibXML will croak at the first whiff of HTML if there are two doctype declarations for example. In these situations, consider sanitizing the HTML with &lt;a href=&#34;https://metacpan.org/pod/HTML::Scrubber&#34;&gt;HTML::Scrubber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTML::Scrubber provides both whitelist and blacklist functions to include or exclude HTML tags and attributes. It&amp;rsquo;s a powerful combination which allows you to create a custom filter to scrub the HTML that you want to parse.&lt;/p&gt;

&lt;p&gt;By default HTML::Scrubber removes all tags, but in the case of a duplicate doctype declaration, you just need that one tag removed. Let&amp;rsquo;s remove all div tags too for good measure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTML::Scrubber;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HTML::Scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( deny &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;doctype&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt; ],
                                    allow&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubbed_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;scrub($html);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $scrubbed_html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;deny&amp;rdquo; rule sets the scrubber blacklist (what to exclude) and the &amp;ldquo;allow&amp;rdquo; rule specifies the whitelist (what to include). Here we passed an asterisk (&amp;rdquo;*&amp;rdquo;) to allow, which means allow everything, but because we&amp;rsquo;re denying div and doctype tags, they&amp;rsquo;ll be removed.&lt;/p&gt;

&lt;h3 id=&#34;tip-3-extract-a-subset-of-data-with-a-regex-capture&#34;&gt;Tip 3: extract a subset of data with a regex capture&lt;/h3&gt;

&lt;p&gt;If the subset HTML you want to parse has a unique identifier (such as an id attribute), consider using a regex capture to extract it from the HTML document. You can then scrub or immediately parse this subset with XML::LibXML.&lt;/p&gt;

&lt;p&gt;For example recently I had to extract an HTML table from a badly-formed web page. Fortunately the table had an id attribute, which made extracting it with a regex a piece-of-cake:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/(&amp;lt;table id=&amp;#34;t2&amp;#34;&amp;gt;.*?&amp;lt;\/table&amp;gt;)/s&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $1 );
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the use of the &amp;ldquo;s&amp;rdquo; modifier in the regex to match multiline. Many HTML pages contain newlines and you don&amp;rsquo;t want your match fail because of that.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully these tips will make parsing HTML with XML::LibXML easier. My GitHub account has a web scraper &lt;a href=&#34;https://gist.github.com/sillymoose/998b9199007589199dce#file-get_swift_code-pl-L42&#34;&gt;script&lt;/a&gt; that uses some of these tips. If you&amp;rsquo;re looking for an entirely different approach to parsing HTML, check out &lt;a href=&#34;https://metacpan.org/pod/XML::Rabbit&#34;&gt;XML::Rabbit&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTML::TreeBuilder&#34;&gt;HTML::TreeBuilder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;text=HTML+pro-parsing+tips&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing files is a breeze with this DBIx::Class plugin</title>
      <link>http://localhost:1313/article/98/2014/6/30/Managing-files-is-a-breeze-with-this-DBIx--Class-plugin/</link>
      <pubDate>Mon, 30 Jun 2014 12:17:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/98/2014/6/30/Managing-files-is-a-breeze-with-this-DBIx--Class-plugin/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Managing application file uploads is challenging: storage, de-duplication, retrieval and permissions all need to be handled. DBIx::Class::InflateColumn::FS simplifies the challenge by handling the backend storage of files so the programmer can focus on application development. Let&amp;rsquo;s take a closer look at how it works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To use this example, you&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::FS&#34;&gt;DBIx::Class::InflateColumn::FS&lt;/a&gt; from CPAN. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=DBIx-Class-InflateColumn-FS+0.01007&#34;&gt;results&lt;/a&gt; show that it should run on all platforms, including Windows. You&amp;rsquo;ll also need &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Schema::Loader&#34;&gt;DBIx::Class::Schema::Loader&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/File::MimeInfo&#34;&gt;File::MimeInfo&lt;/a&gt; if you don&amp;rsquo;t already have them and &lt;a href=&#34;https://sqlite.org/&#34;&gt;SQLite3&lt;/a&gt;. To install the Perl modules, open the terminal and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan DBIx::Class::InflateColumn::FS DBIx::Class::Schema::Loader File::MimeInfo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;setup-the-result-class&#34;&gt;Setup the result class&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create an example class for handling file uploads. DBIx::Class maps objects to database tables, so we need to create a database table that represents our file upload object. This is the SQL code for creating the upload table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;create table upload (
    id          integer     primary key,
    file        text        &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; null,
    mime        text        &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; null
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the code into a script called create_upload.sql and run it at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sqlite3 MyApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; create_upload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sql&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create the upload table. Next we can use the &amp;ldquo;dbicdump&amp;rdquo; app that comes with DBIx::Class::Schema::Loader to create the basic result class for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dbicdump MyApp::Schema dbi:SQLite:MyApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open up the newly-created MyApp/Schema/Result/Upload.pm in a text editor and add the following code, below the line beginning &amp;ldquo;# DO NOT MODIFY &amp;hellip;&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::MimeInfo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;;

__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_components(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InflateColumn::FS&amp;#34;&lt;/span&gt;);
__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_columns(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,
    {   
        data_type      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TEXT&amp;#39;&lt;/span&gt;,
        is_fs_column   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        fs_column_path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploads&amp;#39;&lt;/span&gt;,
    }   
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extension&lt;/span&gt; { 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    [ extensions($self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mime) ]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code enables the DBIx::Class::InflateColumn::FS plugin on the &amp;ldquo;file&amp;rdquo; attribute of our Upload class. Additionally we&amp;rsquo;ve added a subroutine called &amp;ldquo;extension&amp;rdquo; that will return the file extension for the file.&lt;/p&gt;

&lt;h3 id=&#34;create-an-upload&#34;&gt;Create an upload&lt;/h3&gt;

&lt;p&gt;This script will create an upload object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; MyApp::Schema;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; MIME::Types;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;

open(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!; 

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyApp::Schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbi:SQLite:MyApp.db&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Add the file to the database and file system&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $upload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resultset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Upload&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
        create({ file &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $file,
                 mime &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (MIME::Types&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mimeTypeOf($ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])) });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Saving the script as &amp;ldquo;create_upload.pl&amp;rdquo; we can call it at the terminal, passing the filepath to the file we want to save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl create_upload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl perltricks_logo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;png&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just by creating the object, DBIx::Class::InflateColumn::FS will save the file in our uploads directory. No need to write extra code that explicitly copies the file.&lt;/p&gt;

&lt;h3 id=&#34;retrieve-an-upload&#34;&gt;Retrieve an upload&lt;/h3&gt;

&lt;p&gt;This script will retrieve the upload object. DBIx::Class::InflateColumn::FS automatically inflates the &amp;ldquo;file&amp;rdquo; column to be a &lt;a href=&#34;https://metacpan.org/pod/Path::Class::File&#34;&gt;Path::Class::File&lt;/a&gt; object, which gives us many convenience methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; MyApp::Schema;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyApp::Schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbi:SQLite:MyApp.db&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# retrieve the upload&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $upload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resultset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Upload&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# get the relative path&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;relative;

&lt;span style=&#34;color:#75715e&#34;&gt;# get the absolute path&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;absolute;

&lt;span style=&#34;color:#75715e&#34;&gt;# get the base filename&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;basename;

&lt;span style=&#34;color:#75715e&#34;&gt;# get the mime type (image/png)&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mime;

&lt;span style=&#34;color:#75715e&#34;&gt;# get the file extension&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;extension;

&lt;span style=&#34;color:#75715e&#34;&gt;# get a read filehandle&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;openr;

&lt;span style=&#34;color:#75715e&#34;&gt;# get a write filehandle&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;openw;

&lt;span style=&#34;color:#75715e&#34;&gt;# get an append filehandle&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;opena;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;delete-an-upload&#34;&gt;Delete an upload&lt;/h3&gt;

&lt;p&gt;DBIx::Class::InflateColumn::FS makes it super-simple to delete files. Simply call delete on the result object to delete it from the table and the file system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; MyApp::Schema;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyApp::Schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbi:SQLite:MyApp.db&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# retrieve the upload&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $upload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $schema&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;resultset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Upload&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# delete the file from the database and file system&lt;/span&gt;
$upload&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;delete;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;DBIx::Class::InflateColumn::FS is useful as-is, but it shines in certain situations. For example if you&amp;rsquo;re managing image files, it really pays to store the original high-quality image, and dynamically re-size the image when requested. This way you minimize disk use and retain the flexibility in the application logic to adjust the images as required.&lt;/p&gt;

&lt;p&gt;Thanks to Devin Austin whose Catalyst advent calendar &lt;a href=&#34;http://www.catalystframework.org/calendar/2008/5&#34;&gt;article&lt;/a&gt; was a useful source for this article.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F98%2F2014%2F6%2F30%2FManaging-files-is-a-breeze-with-this-DBIx--Class-plugin&amp;amp;text=Managing+files+is+a+breeze+with+this+DBIx%3A%3AClass+plugin&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F98%2F2014%2F6%2F30%2FManaging-files-is-a-breeze-with-this-DBIx--Class-plugin&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;Â©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/brightmeadow/3748310435/in/photolist-6He56Z-bDdcmL-5Jp3Z-aZWgk-aaGbZM-aZWfK-5uGDfb-63MA6m-88qSJK-6B33mX-76En59-6N6eHG-5UFiwj-3rXHK-aZWiH-4CmaD2-6vWgnX-3bai1p-c3CSTq-3PChVM-7hdnBS-2iYPPt-8Vx4Eo-4Cmav8-6P8qMy-jfddWn-4RoQjt-5ZrohQ-eQikQL-dGWiLV-4C7epr-dH2HeL-4C7eve-bnpqbW-4CmavB-8Nvnmc-8SfZR6-3ppzd-7PEzCG-FLPq-9gXmeE-dGWi5t-8Sg3sF-7h9qon-8EWHyq-dGWhC6-buGn9s-c1AukG-7VSc8B-dRCTcZ&#34;&gt;Cas&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rethinking Everything: Perl and the Web in 201x</title>
      <link>http://localhost:1313/pub/2010/08/rethinking-perl-web.html/</link>
      <pubDate>Fri, 20 Aug 2010 10:30:56 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/rethinking-perl-web.html/</guid>
      <description>

&lt;p&gt;In 1999 and 2000 I worked on the Everything Engine, a website management system written in Perl 5 which runs sites like &lt;a href=&#34;http://everything2.org/&#34;&gt;Everything 2&lt;/a&gt; and &lt;a href=&#34;http://perlmonks.org/&#34;&gt;PerlMonks&lt;/a&gt;. The system has its flaws&amp;ndash;many of them due to our inexperience building and maintaining large systems with the Perl of the time.&lt;/p&gt;

&lt;p&gt;We could build it much better today, with modern libraries and techniques in Perl. In truth, building such a system today would solve a lot of uses for MVC applications.&lt;/p&gt;

&lt;h3 id=&#34;how-everything-works&#34;&gt;&lt;strong&gt;How Everything Works&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The fundamental concept of Everything is that everything is a node. A node is an individual entity containing attributes, including a unique identifier and one or more addressing mechanisms expressible through a URI. Each node also has a nodetype (itself a node) which contains information about the node&amp;rsquo;s characteristics, such as the attributes it contains, the types of operations it supports, and any mechanisms to view node information.&lt;/p&gt;

&lt;p&gt;In other words, a node is an object, a nodetype is a class, and there&amp;rsquo;s a metaobject protocol governing the relationships of nodes and nodetypes.&lt;/p&gt;

&lt;p&gt;The Everything Engine provides a sort of routing system which might remind you of routes in one of the new heavy-model MVC systems. In one sense, Everything provided its own implementation of MVC, where URIs and URI components helped the controller find the appropriate model (node) and model operation (nodemethod), which eventually caused the rendering of a series of templates, or the view.&lt;/p&gt;

&lt;p&gt;The system provides node inheritance for attributes and behaviors such as creating, reading, updating, and deleting nodes. Because every node inherited from node, every node has at least general behavior through any interface into the system. If you create a new nodetype, you can do useful things with nodes of that type without having to write any specific views or mess with routing or the like. You have the option of making prettier or more featureful or better or at least different views, but the default inherited views and behaviors are sufficient for the basic CRUD operations.&lt;/p&gt;

&lt;h3 id=&#34;what-everything-didn-t-and-did-well&#34;&gt;&lt;strong&gt;What Everything Didn&amp;rsquo;t and Did Well&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Not everything went right. Remember, this system came about in 1998 and 1999, just as mod_perl was the shiny new technology in the world of Perl web development. Object-relational mapping was still difficult (if even understood much), CGI.pm was still the king, and Template Toolkit hadn&amp;rsquo;t taken over as the obvious first place to look for your templating needs.&lt;/p&gt;

&lt;p&gt;Our hand-written ORM has its flaws, as dealing with node inheritance and lookup of node types and (yes) serializing code to the database to &lt;code&gt;eval&lt;/code&gt; into a running instance of the system at initialization time. The XML serialization scheme for bundling core nodes and custom nodes was even worse, not only due to our use of the DOM.&lt;/p&gt;

&lt;p&gt;Without a well-understood mechanism and framework and example of doing MVC well in Perl 5, Everything&amp;rsquo;s custom interpretation of MVC was odd. Where MVC helps separate application responsibilities into loosely-coupled layers, passing around a CGI object to models and templates violates that encapsulation. (The less said about the custom method dispatch strategy the better.)&lt;/p&gt;

&lt;p&gt;Most of the problems with the system are obvious in retrospect, over a decade later (especially with a decade of experience creating new systems, maintaining existing systems, and stealing ideas from other projects which have made different mistakes).&lt;/p&gt;

&lt;p&gt;Even with all of those mistakes, the system worked reasonably well in many cases. Adding new features was easy (even if deploying them is less so). Creating new behaviors by reusing existing primitives makes building simple systems easy. The usability provided by inherited defaults made it easy to iterate and experiment and refine new behaviors.&lt;/p&gt;

&lt;p&gt;We also eventually produced a system to bind UI widgets&amp;ndash;HTML, in our case&amp;ndash;to node attributes. That made displaying and editing mechanisms much, much easier.&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t start a new site with Everything as it exists today, but I&amp;rsquo;ve wanted a modern version of it for a long, long time. Modern Perl has almost all of the pieces needed to rebuild it.&lt;/p&gt;

&lt;h3 id=&#34;doing-everything-better&#34;&gt;&lt;strong&gt;Doing Everything Better&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://moose.perl.org/&#34;&gt;Moose&lt;/a&gt; object system provides an obvious way to define nodes. A node is merely a Moose object, and a nodetype is its class. This provides a well-understood and robust mechanism for dealing with attributes and methods and roles and the like, and the metaobject protocol provided by &lt;a href=&#34;https://metacpan.org/pod/Class::MOP&#34;&gt;Class::MOP&lt;/a&gt; allows introspective capabilities which will become obviously important soon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt; support is obviously the current best way to deploy a web application in Perl 5, as it allows reusable middleware and offers many deployment strategies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; is the first ORM to consider in Perl 5 right now. I&amp;rsquo;m partial to &lt;a href=&#34;https://metacpan.org/pod/KiokuDB&#34;&gt;KiokuDB&lt;/a&gt; for applications where I need persistent objects but don&amp;rsquo;t need to provide a relational interface to interact with the data. The ability to use either one as a serialization backend is important.&lt;/p&gt;

&lt;p&gt;Any of the modern frameworks or libraries or toolkits for providing the controller part of the MVC application will do. In particular, all this layer of the application needs to do is to map requests to nodes, manage concerns of user authentication and logging, invoke the fat model objects to perform their business actions, then dispatch to the view to render the appropriate information in the user interface. I like the simplicity of Dancer, but anything compatible with Plack will work for web applications.&lt;/p&gt;

&lt;h3 id=&#34;a-new-architecture-for-perl-apps&#34;&gt;&lt;strong&gt;A New Architecture for Perl Apps&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s my vision.&lt;/p&gt;

&lt;p&gt;I run a publishing company. I want to manage a web site with information about existing and upcoming books.&lt;/p&gt;

&lt;p&gt;I start by defining some models: a Book has a title, an ISBN, a price, one or more Authors, a short blurb, a full description, and publication date, and a cover image. An Author has a name, a biography, and an image.&lt;/p&gt;

&lt;p&gt;For each attribute of each model, I choose two types: the type for the object attribute itself (an ISBN is a ten- or thirteen-digit number, an author is an Author object, et cetera) as well as the type for the UI (Authors display as a list of authors and they require a multiple selection UI widget to display). That author selection widget is interesting because it can be a parametric role: a role which knows how to display multiple *something*s, where that &lt;em&gt;something&lt;/em&gt; is a parameter in this case constrained only to Authors.&lt;/p&gt;

&lt;p&gt;Obviously I need some mechanism to define new UI and attribute types, but assume that the system comes with a rich set of types (password, phone number, long input, short input, et cetera) from which I can build more.&lt;/p&gt;

&lt;p&gt;My serialization layer already knows how to serialize these models. That&amp;rsquo;s part of the magic of using KiokuDB, and there are mechanisms available for DBIx::Class to perform the same mapping.&lt;/p&gt;

&lt;p&gt;Given these models, the controller layer can create default URI mapping routes for basic CRUD operations. The HTTP verbs &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; map nicely. As well, the first URI component beneath the application itself can map to the type of model required, such that &lt;em&gt;&lt;a href=&#34;http://example.com/awesomebooksaboutperl/authors/chromatic&#34;&gt;http://example.com/awesomebooksaboutperl/authors/chromatic&lt;/a&gt;&lt;/em&gt; obviously returns my author page. Without a unique identifier, &lt;em&gt;&lt;a href=&#34;http://example.com/awesomebooksaboutperl/authors/&#34;&gt;http://example.com/awesomebooksaboutperl/authors/&lt;/a&gt;&lt;/em&gt; could list all authors.&lt;/p&gt;

&lt;p&gt;With the UI information associated with models, I don&amp;rsquo;t even have to write any templates to get a bare-bones UI. The system can use Moose&amp;rsquo;s introspection mechanism to read all of the object attributes then bind them to HTML widgets for the appropriate display type (reading, creating, and updating). This is particularly easy with a system like Moose where another parametric role can customize the appropriate elements to render based on access controls. That is, users can update their own passwords and administrators can update anyone&amp;rsquo;s passwords, but users cannot even see the password entry fields for other users. The model object decorated with this UI role can decline to make inappropriate information available to the template rendering system at all.&lt;/p&gt;

&lt;p&gt;Even better, the UI decoration role can provide different destination output types as well, such as JSON or XML or even serialized objects themselves suitable for transportation between similar systems.&lt;/p&gt;

&lt;p&gt;I care most about HTML for this web application, but it&amp;rsquo;s nice to have a JSON or Atom view of my data, especially because I can define another route (or perhaps you get this by adding an attribute to your models) which generates syndication information automatically; if I add a new book, it&amp;rsquo;s part of the &lt;em&gt;&lt;a href=&#34;http://example.com/awesomeperlbooks/comingsoon.xml&#34;&gt;http://example.com/awesomeperlbooks/comingsoon.xml&lt;/a&gt;&lt;/em&gt; Atom feed. Internally, the controller might map that URI to &lt;em&gt;&lt;a href=&#34;http://example.com/awesomeperlbooks/books/?view=atom;sort_by=desc;limit=10&#34;&gt;http://example.com/awesomeperlbooks/books/?view=atom;sort_by=desc;limit=10&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Whatever the other output options, I want my HTML to make generous use of CSS selectors, such that I have the option of customizing the result purely in CSS, where possible. (I don&amp;rsquo;t mind writing custom HTML, but the less of that I have to do the better.) This is because it&amp;rsquo;s possible to build a big page out of several models rendered together: each model should be able to render as a fragment, which makes Ajax applications easier to write.&lt;/p&gt;

&lt;p&gt;Perhaps the real benefit of this system is that it can host itself, in that it&amp;rsquo;s very easy to write an administrative console which allows people to define their own models and types and widgets using the system as its own interface. I&amp;rsquo;m still likely to write my own models by hand in Vim, but I don&amp;rsquo;t mind customizing an HTML template fragment in a web browser window on a development server, at least if I can deploy the entire system as if I&amp;rsquo;d written it by hand to files in the filesystem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve discussed this system with a few people and various projects exist to make much of it work. Consider modeling, serialization, and deployment solved thanks to Moose, DBIx::Class and KiokuDB, and Plack. What&amp;rsquo;s left is some middleware, some conventions for routing and mapping, and a little bit of magic UI widget binding and default templates. I wish we&amp;rsquo;d had this great technology a decade ago, but now with modern Perl we may be able to create a postmodern fat-model MVC web framework that makes the easy things trivial, the hard things easy, and the annoying things wonderful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Testing with HTTP::Recorder</title>
      <link>http://localhost:1313/pub/2004/06/04/recorder.html/</link>
      <pubDate>Fri, 04 Jun 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/06/04/recorder.html/</guid>
      <description>

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; is a browser-independent recorder that records interactions with web sites and produces scripts for automated playback. Recorder produces &lt;code&gt;WWW::Mechanize&lt;/code&gt; scripts by default (see &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;&lt;code&gt;WWW::Mechanize&lt;/code&gt;&lt;/a&gt; by Andy Lester), but provides functionality to use your own custom logger.&lt;/p&gt;

&lt;h3 id=&#34;why-use-http-recorder&#34;&gt;Why Use &lt;code&gt;HTTP::Recorder&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Simply speaking, &lt;code&gt;HTTP::Recorder&lt;/code&gt; removes a great deal of the tedium from writing scripts for web automation. If you&amp;rsquo;re like me, you&amp;rsquo;d rather spend your time writing code that&amp;rsquo;s interesting and challenging, rather than digging through HTML files, looking for the names of forms an fields, so that you can write your automation scripts. &lt;code&gt;HTTP::Recorder&lt;/code&gt; records what you do as you do it, so that you can focus on the things you care about.&lt;/p&gt;

&lt;h4 id=&#34;automated-testing&#34;&gt;Automated Testing&lt;/h4&gt;

&lt;p&gt;We all know that testing our code is good, and that writing automated tests that can be run again and again to check for regressions is even better. However, writing test scripts by hand can be tedious and prone to errors. You&amp;rsquo;re more likely to write tests if it&amp;rsquo;s easy to do so. The biggest obstacle to testing shouldn&amp;rsquo;t be the mechanics of getting the tests written â it should be figuring out what needs to be tested, and how best to test it.&lt;/p&gt;

&lt;p&gt;Part of your test suite should be devoted to testing things the way the user uses them, and &lt;code&gt;HTTP::Recorder&lt;/code&gt; makes it easy to produce automation to do that, which allows you to put your energy into the parts of your code that need your attention and your expertise.&lt;/p&gt;

&lt;h4 id=&#34;automate-repetitive-tasks&#34;&gt;Automate Repetitive Tasks&lt;/h4&gt;

&lt;p&gt;When you think about web automation, the first thing you think of may be automated testing, but there are other uses for automation as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check your bank balance.&lt;/li&gt;
&lt;li&gt;Check airline fares.&lt;/li&gt;
&lt;li&gt;Check movie times.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-set-it-up&#34;&gt;How to Set It Up&lt;/h3&gt;

&lt;h4 id=&#34;use-it-with-a-web-proxy&#34;&gt;Use It with a Web Proxy&lt;/h4&gt;

&lt;p&gt;One way to use &lt;code&gt;HTTP::Recorder&lt;/code&gt; (as recommended in the POD) is to set it as the user agent of a web proxy (see &lt;a href=&#34;https://metacpan.org/pod/HTTP::Proxy&#34;&gt;&lt;code&gt;HTTP::Proxy&lt;/code&gt;&lt;/a&gt; by Phillipe &amp;ldquo;BooK&amp;rdquo; Bruhat). Start the proxy running like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/perl

    use HTTP::Proxy;
    use HTTP::Recorder;

    my $proxy = HTTP::Proxy-&amp;gt;new();

    # create a new HTTP::Recorder object
    my $agent = new HTTP::Recorder;

    # set the log file (optional)
    $agent-&amp;gt;file(&amp;quot;/tmp/myfile&amp;quot;);

    # set HTTP::Recorder as the agent for the proxy
    $proxy-&amp;gt;agent( $agent );

    # start the proxy
    $proxy-&amp;gt;start();

    1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, instruct your favorite web browser to use your new proxy for HTTP traffic.&lt;/p&gt;

&lt;h4 id=&#34;other-ways-to-use-it&#34;&gt;Other Ways to Use It&lt;/h4&gt;

&lt;p&gt;Since &lt;code&gt;HTTP::Recorder&lt;/code&gt; is a subclass of LWP::UserAgent, so you can use it in any way that you can use its parent class.&lt;/p&gt;

&lt;h3 id=&#34;how-to-use-it&#34;&gt;How to Use It&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve set up &lt;code&gt;HTTP::Recorder&lt;/code&gt;, just navigate to web pages, follow links, and fill in forms the way you normally do, with the web browser of your choice. &lt;code&gt;HTTP::Recorder&lt;/code&gt; will record your actions and produce a &lt;code&gt;WWW::Mechanize&lt;/code&gt; script that you can use to replay those actions.&lt;/p&gt;

&lt;p&gt;The script is written to a logfile. By default, this file is &lt;code&gt;/tmp/scriptfile&lt;/code&gt;, but you can specify another pathname when you set things up. See &lt;a href=&#34;#config&#34;&gt;Configuration Options&lt;/a&gt; for information about configuring the logfile.&lt;/p&gt;

&lt;h4 id=&#34;span-id-control-panel-http-recorder-control-panel-span&#34;&gt;&lt;span id=&#34;control_panel&#34;&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; Control Panel&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;HTTP::Recorder&lt;/code&gt; control panel allows you to use to view and edit scripts as you create them. By default, you can access the control panel by using the &lt;code&gt;HTTP::Recorder&lt;/code&gt; UserAgent to access the control URL. By default, the control URL is &lt;code&gt;http://http-recorder/&lt;/code&gt;, but this address is configurable. See &lt;a href=&#34;#config&#34;&gt;Configuration Options&lt;/a&gt; for more information about setting the control URL.&lt;/p&gt;

&lt;p&gt;The control panel won&amp;rsquo;t automatically refresh , but if you create &lt;code&gt;HTTP::Recorder&lt;/code&gt; with &lt;code&gt;showwindow =&amp;gt; 1&lt;/code&gt;, a JavaScript popup window will be opened and refreshed every time something is recorded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_06_04_recorder/control.jpg&#34; width=&#34;400&#34; height=&#34;425&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goto Page.&lt;/strong&gt; You can enter a URL in the control panel to begin a recording session. For SSL sessions, the initial URL must be entered into this field rather than into the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Current Script.&lt;/strong&gt; The current script is displayed in a textfield, which you can edit as you create it. Changes you make in the control panel won&amp;rsquo;t be saved until you click the Update button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update.&lt;/strong&gt; Saves changes made the script via the control panel. If you prefer to edit your script as you create it, you can save your changes as you make them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clear.&lt;/strong&gt; Deletes the current script and clears the text field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reset.&lt;/strong&gt; Reverts the text field to the currently saved version of the script. Any changes you&amp;rsquo;ve made to the script won&amp;rsquo;t be applied if you haven&amp;rsquo;t clicked Update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download.&lt;/strong&gt; Displays a plain text version of the script, suitable for saving.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close.&lt;/strong&gt; Closes the window (using JavaScript).&lt;/p&gt;

&lt;h4 id=&#34;updating-scripts-as-they-re-recorded&#34;&gt;Updating Scripts as They&amp;rsquo;re Recorded&lt;/h4&gt;

&lt;p&gt;You can record many things, and then turn the recordings into scripts later, or you can make changes and additions as you go by editing the script in the &lt;a href=&#34;http://localhost:1313/pub/2004/06/04/recorder.html?page=1#control_panel&#34;&gt;Control Panel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, if you record filling in this form and clicking the Submit button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_06_04_recorder/form1.jpg&#34; width=&#34;271&#34; height=&#34;36&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; produces the following lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $agent-&amp;gt;form_name(&amp;quot;form1&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;name&amp;quot;, &amp;quot;Linda Julien&amp;quot;);
    $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;form1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you&amp;rsquo;re writing automated tests, you probably don&amp;rsquo;t want to enter hard-coded values into the form. You may want to re-write these lines of code so that they&amp;rsquo;ll accept a variable for the value of the &lt;code&gt;name&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;You can change the code to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $name = &amp;quot;Linda Julien&amp;quot;;

    $agent-&amp;gt;form_name(&amp;quot;form1&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;name&amp;quot;, $name);
    $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;form1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or even this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub fill_in_name {
      my $name = shift;

      $agent-&amp;gt;form_name(&amp;quot;form1&amp;quot;);
      $agent-&amp;gt;field(&amp;quot;name&amp;quot;, $name);
      $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;form1&amp;quot;);
    }

    fill_in_name(&amp;quot;Linda Julien&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then click the Update button. &lt;code&gt;HTTP::Recorder&lt;/code&gt; will save your changes, and you can continue recording as before.&lt;/p&gt;

&lt;p&gt;You may also want to add tests as you go, making sure that the results of submitting the form were what you expected:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_06_04_recorder/form2.jpg&#34; width=&#34;242&#34; height=&#34;69&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can add tests to the script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub fill_in_name {
      my $name = shift;

      $agent-&amp;gt;form_name(&amp;quot;form1&amp;quot;);
      $agent-&amp;gt;field(&amp;quot;name&amp;quot;, $name);
      $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;form1&amp;quot;);
    }

    my $entry = &amp;quot;Linda Julien&amp;quot;;
    fill_in_name($entry);

    $agent-&amp;gt;content =~ /You entered this name: (.*)/;
    is ($1, $entry);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-http-recorder-with-ssl&#34;&gt;Using &lt;code&gt;HTTP::Recorder&lt;/code&gt; with SSL&lt;/h4&gt;

&lt;p&gt;In order to do what it does, &lt;code&gt;HTTP::Recorder&lt;/code&gt; relies on the ability to see and modify the contents of requests and their resulting responses&amp;hellip;and the whole point of SSL is to make sure you can&amp;rsquo;t easily do that. &lt;code&gt;HTTP::Recorder&lt;/code&gt; works around this, however, by handling the SSL connection to the server itself, and and communicating with your browser via plain HTTP.&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Caution:&lt;/strong&gt; Keep in mind that communication between your browser and &lt;code&gt;HTTP::Recorder&lt;/code&gt; isn&amp;rsquo;t encrypted, so take care when recording sensitive information, like passwords or credit card numbers. If you&amp;rsquo;re running the Recorder as a proxy on your local machine, you have less to worry about than if you&amp;rsquo;re running it as a proxy on a remote machine. The resulting script for playback will be encrypted as usual.*&lt;/p&gt;

&lt;p&gt;If you want to record SSL sessions, here&amp;rsquo;s how you do it:&lt;/p&gt;

&lt;p&gt;Start at the control panel, and enter the initial URL there rather than in your browser. Then interact with the web site as you normally would. &lt;code&gt;HTTP::Recorder&lt;/code&gt; will record form submissions, following links, etc.&lt;/p&gt;

&lt;h4 id=&#34;replaying-your-scripts&#34;&gt;Replaying your Scripts&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; getting pages, following links, filling in fields and submitting forms, etc., but it doesn&amp;rsquo;t (at this point) generate a complete perl script. Remember that you&amp;rsquo;ll need to add standard script headers and initialize the &lt;code&gt;WWW::Mechanize&lt;/code&gt; agent, with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

    use strict;
    use warnings;
    use WWW::Mechanize;
    use Test::More qw(no_plan);

    my $agent = WWW::Mechanize-&amp;gt;new();
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;span-id-config-configuration-options-span&#34;&gt;&lt;span id=&#34;config&#34;&gt;Configuration Options&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Output file.&lt;/strong&gt; You can change the filename for the scripts that &lt;code&gt;HTTP::Recorder&lt;/code&gt; generates with the &lt;code&gt;$recorder-&amp;gt;file([$value])&lt;/code&gt; method. The default output file is &amp;lsquo;/tmp/scriptfile&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prefix.&lt;/strong&gt; &lt;code&gt;HTTP::Recorder&lt;/code&gt; adds parameters to link URLs and adds fields to forms. By default, its parameters begin with &amp;ldquo;rec-&amp;rdquo;, but you can change this prefix with the &lt;code&gt;$recorder-&amp;gt;prefix([$value])&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logger.&lt;/strong&gt; The &lt;code&gt;HTTP::Recorder&lt;/code&gt; distribution includes a default logging module, which outputs &lt;code&gt;WWW::Mechanize&lt;/code&gt; scripts. You can change the logger with the &lt;code&gt;$recorder-&amp;gt;logger([$value])&lt;/code&gt; method, replacing it with a logger that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;subclasses the standard logger to provice special functionality unique to your site&lt;/li&gt;
&lt;li&gt;outputs an entirely different type of script&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RT (Request Tracker) 3.1 by &lt;a href=&#34;http://www.bestpractical.com/&#34;&gt;Best Practical Solutions&lt;/a&gt; has a Query Builder that&amp;rsquo;s a good example of a page that benefits from a custom logger:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_06_04_recorder/BuildQuery.jpg&#34; width=&#34;400&#34; height=&#34;312&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This page has several Field/Operator/Value groupings. Left to its own devices, the default &lt;code&gt;HTTP::Recorder::Logger&lt;/code&gt; will record every field for which a value has been set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $agent-&amp;gt;form_name(&amp;quot;BuildQuery&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;ActorOp&amp;quot;, &amp;quot;=&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AndOr&amp;quot;, &amp;quot;AND&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;TimeOp&amp;quot;, &amp;quot;&amp;lt;&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;WatcherOp&amp;quot;, &amp;quot;LIKE&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;QueueOp&amp;quot;, &amp;quot;=&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;PriorityOp&amp;quot;, &amp;quot;&amp;lt;&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;LinksOp&amp;quot;, &amp;quot;=&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;idOp&amp;quot;, &amp;quot;&amp;lt;&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AttachmentField&amp;quot;, &amp;quot;Subject&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;ActorField&amp;quot;, &amp;quot;Owner&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;PriorityField&amp;quot;, &amp;quot;Priority&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;StatusOp&amp;quot;, &amp;quot;=&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;DateField&amp;quot;, &amp;quot;Created&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;TimeField&amp;quot;, &amp;quot;TimeWorked&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;LinksField&amp;quot;, &amp;quot;HasMember&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;WatcherField&amp;quot;, &amp;quot;Requestor.EmailAddress&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AttachmentOp&amp;quot;, &amp;quot;LIKE&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;ValueOfAttachment&amp;quot;, &amp;quot;foo&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;DateOp&amp;quot;, &amp;quot;&amp;lt;&amp;quot;);
    $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;BuildQuery&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But on this page, there&amp;rsquo;s no need to record setting the values of fields (XField) and operators (XOp) unless a value (ValueOfX) has actually been set. We can do this with a custom logger that checks for the presence of a value, and only records the value of the field and operator fields if the value field has been set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package HTTP::Recorder::RTLogger;

    use strict;
    use warnings;
    use HTTP::Recorder::Logger;
    our @ISA = qw( HTTP::Recorder::Logger );

    sub SetFieldsAndSubmit {
        my $self = shift;
        my %args = (
            name =&amp;gt; &amp;quot;&amp;quot;,
            number =&amp;gt; undef,
            fields =&amp;gt; {},
            button_name =&amp;gt; {},
            button_value =&amp;gt; {},
            button_number =&amp;gt; {},
            @_
            );

    $self-&amp;gt;SetForm(name =&amp;gt; $args{name}, number =&amp;gt; $args{number});
    my %fields = %{$args{fields}};
    foreach my $field (sort keys %fields) {
        if ( $args{name} eq &#39;BuildQuery&#39; &amp;amp;&amp;amp;
         ($field =~ /(.*)Op$/ || $field =~ /(.*)Field$/) &amp;amp;&amp;amp;
         !exists ($fields{&#39;ValueOf&#39; . $1})) {
        next;
        }
        $self-&amp;gt;SetField(name =&amp;gt; $field,
                value =&amp;gt; $args{fields}-&amp;gt;{$field});
    }
    $self-&amp;gt;Submit(name =&amp;gt; $args{name},
              number =&amp;gt; $args{number},
              button_name =&amp;gt; $args{button_name},
              button_value =&amp;gt; $args{button_value},
              button_number =&amp;gt; $args{button_number},
              );
    }

    1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tell &lt;code&gt;HTTP::Recorder&lt;/code&gt; to use the custom logger like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $logger = new HTTP::Recorder::RTLogger;
    $agent-&amp;gt;logger($logger);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it will record a much more reasonable number of things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $agent-&amp;gt;form_name(&amp;quot;BuildQuery&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AndOr&amp;quot;, &amp;quot;AND&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AttachmentField&amp;quot;, &amp;quot;Subject&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;AttachmentOp&amp;quot;, &amp;quot;LIKE&amp;quot;);
    $agent-&amp;gt;field(&amp;quot;ValueOfAttachment&amp;quot;, &amp;quot;foo&amp;quot;);
    $agent-&amp;gt;submit_form(form_name =&amp;gt; &amp;quot;BuildQuery&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Control panel.&lt;/strong&gt; By default, you can access the &lt;code&gt;HTTP::Recorder&lt;/code&gt; control panel by using the Recorder to get &lt;code&gt;http://http-recorder&lt;/code&gt;. You can change this URL with the &lt;code&gt;$recorder-&amp;gt;control([$value])&lt;/code&gt; method.&lt;/p&gt;

&lt;h5 id=&#34;logger-options&#34;&gt;Logger Options&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Agent name.&lt;/strong&gt; By default, &lt;code&gt;HTTP::Recorder::Logger&lt;/code&gt; outputs scripts with the agent name &lt;code&gt;$agent&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $agent-&amp;gt;follow_link(text =&amp;gt; &amp;quot;Foo&amp;quot;, n =&amp;gt; 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you prefer a different agent name (in order to drop recorded lines into existing scripts, conform to company conventions, etc.), you can change that with the &lt;code&gt;$logger-&amp;gt;agentname([value])&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $recorder-&amp;gt;agentname(&amp;quot;mech&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will produce the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $mech-&amp;gt;follow_link(text =&amp;gt; &amp;quot;Foo&amp;quot;, n =&amp;gt; 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-http-recorder-works&#34;&gt;How &lt;code&gt;HTTP::Recorder&lt;/code&gt; Works&lt;/h3&gt;

&lt;p&gt;The biggest challenge to writing a web recorder is knowing what the user is doing, so that it can be recorded. A proxy can watch requests and responses go by, the only thing you&amp;rsquo;ll learn is the URL that was requested and its parameters. &lt;code&gt;HTTP::Recorder&lt;/code&gt; solves this problem by rewriting HTTP responses as they come through, and adding additional information to the page&amp;rsquo;s links and forms, so that it can extract that information again when the next request comes through.&lt;/p&gt;

&lt;p&gt;As an example, a page might contain a link like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;a href=&amp;quot;http://www.cpan.org/&amp;quot;&amp;gt;CPAN&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user follows the link, and we want to record it, we need to know all of the relevant information about the action, so that we can produce a line of code that will replay the action. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the fact that a link was followed.&lt;/li&gt;
&lt;li&gt;the text of the link.&lt;/li&gt;
&lt;li&gt;the URL of the link.&lt;/li&gt;
&lt;li&gt;the index (in case there are multiple links on the page of the same name).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; overloads LWP::UserAgent&amp;rsquo;s &lt;code&gt;send_request&lt;/code&gt; method, so that it can see requests and responses as they come through, and modify them as needed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; rewrites the link so that it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://www.cpan.org/?rec-url=http%3A%2F%2Fwww.cpan.org%2F&amp;amp;rec-action=follow&amp;amp;rec-text=CPAN&amp;amp;rec-index=1&amp;quot;&amp;gt;CPAN&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, with the rewritten page, if the user follows this link, the request will contain all of the information needed to record the action.&lt;/p&gt;

&lt;p&gt;Forms are handled likewise, with additional fields being added to the form so that the information can be extracted later. &lt;code&gt;HTTP::Recorder&lt;/code&gt; then removes the added parameters from the resulting request, and forwards the request along in something close to its originally intended state.&lt;/p&gt;

&lt;h3 id=&#34;looking-ahead&#34;&gt;Looking Ahead&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;HTTP::Recorder&lt;/code&gt; won&amp;rsquo;t record 100% of every script you need to write, and while future versions will undoubtedly have more features, they still won&amp;rsquo;t write your scripts for you. However, it will record the simple things, and it will give you example code that you can cut, paste, and modify to write the scripts that you need.&lt;/p&gt;

&lt;p&gt;Some ideas for the future include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choosing from a list of simple tests based on the fields on the page and their current values.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Threaded&amp;rdquo; recording, so that multiple sessions won&amp;rsquo;t be recorded in the same file, overlapped with each other.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Add script header&amp;rdquo; feature.&lt;/li&gt;
&lt;li&gt;Supporting more configuration options from the control panel.&lt;/li&gt;
&lt;li&gt;Other loggers.&lt;/li&gt;
&lt;li&gt;JavaScript support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;where-to-get-http-recorder&#34;&gt;Where to Get &lt;code&gt;HTTP::Recorder&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The latest released version of &lt;code&gt;HTTP::Recorder&lt;/code&gt; is available at &lt;a href=&#34;https://metacpan.org/pod/HTTP::Recorder&#34;&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;contributions-requests-and-bugs&#34;&gt;Contributions, Requests, and Bugs&lt;/h3&gt;

&lt;p&gt;Patches, feature requests, and problem reports are welcomed at &lt;a href=&#34;http://rt.cpan.org&#34;&gt;http://rt.cpan.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can subscribe to the mailing list for users and developers of HTTP::Recorder at &lt;a href=&#34;http://lists.fsck.com/mailman/listinfo/http-recorder&#34;&gt;http://lists.fsck.com/mailman/listinfo/http-recorder&lt;/a&gt;, or by sending email to http-recorder-request@lists.fsck.com with the subject &amp;ldquo;subscribe&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The mailing list archives can be found at &lt;a href=&#34;http://lists.fsck.com/piper-mail/http-recorder&#34;&gt;http://lists.fsck.com/piper-mail/http-recorder&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;see-also&#34;&gt;See Also&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;&lt;code&gt;WWW::Mechanize&lt;/code&gt;&lt;/a&gt; by Andy Lester.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Proxy&#34;&gt;&lt;code&gt;HTTP::Proxy&lt;/code&gt;&lt;/a&gt; by Phillipe &amp;ldquo;BooK&amp;rdquo; Bruhat.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing Protein Domains with Perl</title>
      <link>http://localhost:1313/pub/2001/11/16/perlbio2.html/</link>
      <pubDate>Fri, 16 Nov 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/11/16/perlbio2.html/</guid>
      <description>

&lt;p&gt;The Perl programming language is popular with biologists because of its practicality. In my book, &lt;a href=&#34;http://www.oreilly.com/catalog/begperlbio/&#34;&gt;Beginning Perl for Bioinformatics&lt;/a&gt;, I demonstrate how many of the things biologists want to write programs for are readily&amp;ndash;even enjoyably&amp;ndash;accomplished with Perl.&lt;/p&gt;

&lt;p&gt;My book teaches biologists how to program in Perl, even if they have never programmed before. This article will use Perl at the level found in the middle-to-late chapters in my book, after some of the basics have been learned. However, this article can be read by biologists who do not (yet) know any programming. They should be able to skim the program code in this article, only reading the comments, to get a general feel for how Perl is used in practical applications, using real biological data.&lt;/p&gt;

&lt;p&gt;Biological data on computers tends to be either in structured ASCII flat files&amp;ndash;that is to say, in plain-text files&amp;ndash;or in relational databases. Both of these data sources are easy to handle with Perl programs. For this article, I will discuss one of the flat-file data sources, the &lt;a href=&#34;http://ca.expasy.org/prosite/&#34;&gt;Prosite database&lt;/a&gt;, which contains valuable biological information about protein domains. I will demonstrate how to use Perl to extract and use the protein domain information. In &lt;em&gt;Beginning Perl for Bioinformatics&lt;/em&gt; I also show how to work with several other similar data sources, including GenBank (Genetic Data Bank), PDB (Protein DataBank), BLAST (Basic Local Alignment Search Tool) output files, and REBASE (Restriction Enzyme Database).&lt;/p&gt;

&lt;h3 id=&#34;what-is-prosite&#34;&gt;What is Prosite?&lt;/h3&gt;

&lt;p&gt;Prosite stands for &amp;ldquo;A Dictionary of Protein Sites and Patterns.&amp;rdquo; To learn more about the fascinating biology behind Prosite, visit the &lt;a href=&#34;http://ca.expasy.org/cgi-bin/lists?prosuser.txt&#34;&gt;Prosite User Manual&lt;/a&gt;. Here&amp;rsquo;s an introductory description of Prosite from the user manual:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Prosite is a method of determining what is the function of uncharacterized proteins translated from genomic or cDNA sequences. It consists of a database of biologically significant sites and patterns formulated in such a way that with appropriate computational tools it can rapidly and reliably identify to which known family of protein (if any) the new sequence belongs.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In some cases, the sequence of an unknown protein is too distantly related to any protein of known structure to detect its resemblance by overall sequence alignment. However, it can be identified by the occurrence in its sequence of a particular cluster of residue types, variously known as a pattern, a motif, a signature, or a fingerprint. These motifs arise because of particular requirements on the structure of specific regions of a protein, which may be important, for example, for their binding properties, or for their enzymatic activity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prosite is available as a set of plain-text files that provide the data, plus documentation. The &lt;a href=&#34;http://www.expasy.ch/prosite&#34;&gt;Prosite home page&lt;/a&gt; provides a user interface that allows you to query the database and examine the documentation. The database can also be obtained for local installation from the &lt;a href=&#34;ftp://www.expasy.ch/databases/prosite&#34;&gt;Prosite ftp site&lt;/a&gt;. Its use is free of charge for noncommercial users.
There is some fascinating and important biology involved here; and in the programs that follow there are interesting and useful Perl programming techniques. See the Prosite User Manual for the biology background, and &lt;em&gt;Beginning Perl for Bioinformatics&lt;/em&gt; for the programming background. Or just keep reading to get a taste for what is possible when you combine programming skills with biological data.&lt;/p&gt;

&lt;h3 id=&#34;prosite-data&#34;&gt;Prosite Data&lt;/h3&gt;

&lt;p&gt;The Prosite data can be downloaded to your computer. It is in the ASCII flat file called &lt;a href=&#34;ftp://ca.expasy.org/databases/prosite/release_with_updates/prosite.dat&#34;&gt;prosite.dat&lt;/a&gt; and is more than 4MB in size. A small version of this file created for this article, called &lt;em&gt;prosmall.dat&lt;/em&gt;, is available &lt;a href=&#34;http://perl.com/2001/11/16/examples/prosmall.dat&#34;&gt;here&lt;/a&gt;. This version of the data has just the first few records from the complete file, making it easier for you to download and test, and it&amp;rsquo;s the file that we&amp;rsquo;ll use in the code discussed later in this article.&lt;/p&gt;

&lt;p&gt;Prosite also provides an accompanying data file, &lt;a href=&#34;ftp://ca.expasy.org/databases/prosite/release_with_updates/prosite.doc&#34;&gt;prosite.doc&lt;/a&gt;, which contains documentation for all the records in &lt;em&gt;prosite.dat&lt;/em&gt;. Though we will not use it for this article, I do recommend you look at it and think about how to use the information along with the code presented here if you plan on doing more with Prosite.&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;p&gt;&lt;a href=&#34;http://conferences.oreilly.com/biocon/&#34;&gt;&lt;img src=&#34;http://oreilly.com/graphics_new/biocon_logo.gif&#34; alt=&#34;O&amp;#39;Reilly Bioinformatics Technology Conference&#34; width=&#34;120&#34; height=&#34;70&#34; /&gt;&lt;/a&gt; James Tisdall will be speaking at O&#39;Reilly&#39;s first Bioinformatics Technology Conference, January 28-31, 2002, in Tuscon, Arizona. For more information visit &lt;a href=&#34;http://conferences.oreilly.com/biocon/&#34;&gt;Bioinformatics Conference Web site&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Prosite data in &lt;a href=&#34;ftp://ca.expasy.org/databases/prosite/release_with_updates/prosite.dat&#34;&gt;prosite.dat&lt;/a&gt; (or our much smaller test file &lt;em&gt;prosmall.dat&lt;/em&gt;) is organized in &amp;ldquo;records,&amp;rdquo; each of which consists of several lines, and which always include an ID line and a termination line containing &amp;ldquo;//&amp;rdquo;. The Prosite lines all begin with a two-character code that specifies the kind of data that appears on that line. Here&amp;rsquo;s a breakdown of all the possible line types that a record may contain from the &lt;a href=&#34;http://ca.expasy.org/cgi-bin/lists?prosuser.txt&#34;&gt;Prosite User Manual&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;**
ID
Identification (Begins each entry; one per entry)&lt;/p&gt;

&lt;p&gt;AC
Accession number (one per entry)&lt;/p&gt;

&lt;p&gt;DT
Date (one per entry)&lt;/p&gt;

&lt;p&gt;DE
Short description (one per entry)&lt;/p&gt;

&lt;p&gt;PA
Pattern (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;MA
Matrix/profile (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;RU
Rule (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;NR
Numerical results (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;CC
Comments (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;DR
Cross references to SWISS-PROT (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;3D
Cross references to PDB (&amp;gt;=0 per entry)&lt;/p&gt;

&lt;p&gt;DO
Pointer to the documentation file (one per entry)&lt;/p&gt;

&lt;p&gt;//
Termination line (Ends each entry; one per entry)&lt;/p&gt;

&lt;p&gt;Each of these line types has certain kinds of information that are formatted in a specific manner, as is detailed in the Prosite documentation.&lt;/p&gt;

&lt;h3 id=&#34;prosite-patterns&#34;&gt;Prosite Patterns&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look specifically at the Prosite patterns. These are presented in a kind of mini-language that describes a set of short stretches of protein that may be a region of known biological activity. Here&amp;rsquo;s the description of the pattern &amp;ldquo;language&amp;rdquo; from the &lt;a href=&#34;http://ca.expasy.org/cgi-bin/lists?prosuser.txt&#34;&gt;Prosite User Manual&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The PA (PAttern) lines contains the definition of a Prosite pattern. The patterns are described using the following conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The standard IUPAC one-letter codes for the amino acids are used.&lt;/li&gt;
&lt;li&gt;The symbol `x&amp;rsquo; is used for a position where any amino acid is accepted.&lt;/li&gt;
&lt;li&gt;Ambiguities are indicated by listing the acceptable amino acids for a given position, between square parentheses `[ ]&amp;rsquo;. For example: [ALT] stands for Ala or Leu or Thr.&lt;/li&gt;
&lt;li&gt;Ambiguities are also indicated by listing between a pair of curly brackets `{ }&amp;rsquo; the amino acids that are not accepted at a given position. For example: {AM} stands for any amino acid except Ala and Met.&lt;/li&gt;
&lt;li&gt;Each element in a pattern is separated from its neighbor by a `-&amp;lsquo;.&lt;/li&gt;
&lt;li&gt;Repetition of an element of the pattern can be indicated by following that element with a numerical value or a numerical range between parenthesis. Examples: x(3) corresponds to x-x-x, x(2,4) corresponds to x-x or x-x-x or x-x-x-x.&lt;/li&gt;
&lt;li&gt;When a pattern is restricted to either the N- or C-terminal of a sequence, that pattern either starts with a `&amp;lt;&amp;rsquo; ` a ends or respectively symbol with&amp;gt;&amp;rsquo; symbol.&lt;/li&gt;
&lt;li&gt;A period ends the pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;perl-subroutine-to-translate-prosite-patterns-into-perl-regular-expressions&#34;&gt;Perl Subroutine to Translate Prosite Patterns into Perl Regular Expressions&lt;/h4&gt;

&lt;p&gt;In order to use this pattern data in our Perl program, we need to translate the Prosite patterns into Perl regular expressions, which are the main way that you search for patterns in data in Perl. For the sake of this article I will assume that you know the basic regular expression syntax. (If not, just read the program comments, and skip the Perl regular expressions.) As an example of what the following subroutine does, it will translate the Prosite pattern &lt;code&gt;[AC]-x-V-x(4)-{ED}.&lt;/code&gt; into the equivalent Perl regular expression &lt;code&gt;[AC].V.{4}[^ED]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, then, is our first Perl code, the subroutine &lt;code&gt;PROSITE_2_regexp&lt;/code&gt;, to translate the Prosite patterns to Perl regular expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#
# Calculate a Perl regular expression
#  from a PROSITE pattern
#
sub PROSITE_2_regexp {

  #
  # Collect the PROSITE pattern
  #
  my($pattern) = @_;

  #
  # Copy the pattern to a regular expression
  #
  my $regexp = $pattern;

  #
  # Now start translating the pattern to an
  #  equivalent regular expression
  #

  #
  # Remove the period at the end of the pattern
  #
  $regexp =~ s/.$//;

  #
  # Replace &#39;x&#39; with a dot &#39;.&#39;
  #
  $regexp =~ s/x/./g;

  #
  # Leave an ambiguity such as &#39;[ALT]&#39; as is.
  #   However, there are two patterns [G&amp;gt;] that need
  #   special treatment (and the PROSITE documentation
  #   is a bit vague, perhaps).
  #
  $regexp =~ s/\[G\&amp;gt;\]/(G|\$)/;

  #
  # Ambiguities such as {AM} translate to [^AM].
  #
  $regexp =~ s/{([A-Z]+)}/[^$1]/g;

  #
  # Remove the &#39;-&#39; between elements in a pattern
  #
  $regexp =~ s/-//g;

  #
  # Repetitions such as x(3) translate as x{3}
  #
  $regexp =~ s/\((\d+)\)/{$1}/g;

  #
  # Repetitions such as x(2,4) translate as x{2,4}
  #
  $regexp =~ s/\((\d+,\d+)\)/{$1}/g;

  #
  # &#39;&amp;lt;&#39; &amp;quot;beginning # $regexp=&amp;quot;~&amp;quot; &#39; &#39;^&#39; ; \&amp;lt; ^ becomes for of s sequence&amp;quot;&amp;gt;&#39; becomes &#39;$&#39; for &amp;quot;end of sequence&amp;quot;
  #
  $regexp =~ s/\&amp;gt;/\$/;

  #
  # Return the regular expression
  #
  return $regexp;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subroutine &lt;code&gt;PROSITE_2_regexp&lt;/code&gt; takes the Prosite pattern and translates its parts step by step into the equivalent Perl regular expression, as explained in the comments for the subroutine. If you do not know Perl regular expression syntax at this point, just read the comments&amp;ndash;that is, the lines that start with the # character. That will give you the general idea of the subroutine, even if you don&amp;rsquo;t know any Perl at all.&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn more about the power of regular expressions from O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://www.oreilly.com/catalog/regex/&#34;&gt;Mastering Regular Expressions: Powerful Techniques for Perl and Other Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;perl-subroutine-to-parse-prosite-records-into-their-line-types&#34;&gt;Perl Subroutine to Parse Prosite Records into Their Line Types&lt;/h4&gt;

&lt;p&gt;The other task we need to accomplish is to parse the various types of lines, so that, for instance, we can get the ID and the PA pattern lines easily. The next subroutine accomplishes this task: given a Prosite record, it returns a hash with the lines of each type indexed by a key that is the two-character &amp;ldquo;line type&amp;rdquo;. The keys we&amp;rsquo;ll be interested in are the ID key for the line that has the identification information; and the PA key for the line(s) that have the pattern information.&lt;/p&gt;

&lt;p&gt;This &amp;ldquo;get_line_types&amp;rdquo; subroutine does more than we need. It makes a hash index on all the line types, not just the ID and PA lines that we&amp;rsquo;ll actually use here. But that&amp;rsquo;s OK. The subroutine is short and simple enough, and we may want to use it later to do things with some of the other types of lines in a Prosite record.&lt;/p&gt;

&lt;p&gt;By building our hash to store the lines of a record, we can extract any of the data lines from the record that we like, just by giving the line type code (such as ID for identification number). We can use this hash to extract two line types that will interest us here, the ID identifier line and the PA pattern line. Then, by translating the Prosite pattern into a Perl regular expression (using our first subroutine), we will be in a position to actually look for all the patterns in a protein sequence. In other words, we will have extracted the pattern information and made it available for use in our Perl program, so we can search for the patterns in the protein sequence.&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re interested in learning Perl, don&amp;rsquo;t miss O&amp;rsquo;Reilly&amp;rsquo;s best-selling &lt;a href=&#34;http://www.oreilly.com/catalog/lperl3/&#34;&gt;Learning Perl, 3rd Edition&lt;/a&gt;, which has been updated to cover Perl version 5.6 and rewritten to reflect the needs of programmers learning Perl today. For a complete list of O&amp;rsquo;Reilly&amp;rsquo;s books on Perl, go to &lt;a href=&#34;http://perl.oreilly.com&#34;&gt;perl.oreilly.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, then, is our second subroutine, which accepts a Prosite record, and returns a hash which has the lines of the record indexed by their line types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#
# Parse a PROSITE record into &amp;quot;line types&amp;quot; hash
#
sub get_line_types {

  #
  # Collect the PROSITE record
  #
  my($record) = @_;

  #
  # Initialize the hash
  #   key   = line type
  #   value = lines
  #
  my %line_types_hash = ();

  #
  # Split the PROSITE record to an array of lines
  #
  my @records = split(/\n/,$record);

  #
  # Loop through the lines of the PROSITE record
  #
  foreach my $line (@records) {

    #
    # Extract the 2-character name
    # of the line type
    #
    my $line_type = substr($line,0,2);

    #
    # Append the line to the hash
    # indexed by this line type
    #
    (defined $line_types_hash{$line_type})
    ?  ($line_types_hash{$line_type} .= $line)
    :  ($line_types_hash{$line_type} = $line);
  }

  #
  # Return the hash
  #
  return %line_types_hash;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;main-program&#34;&gt;Main Program&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s see the code at work. The following program uses the subroutines we&amp;rsquo;ve just defined to read in the Prosite records one at a time from the database in the flat file prosmall.txt. It then separates the different kinds of lines (such as &amp;ldquo;PA&amp;rdquo; for pattern), and translates the patterns into regular expressions, using the subroutine PROSITE_2_regexp we already wrote. Finally, it searches for the regular expressions in the protein sequence, and reports the position of the matched pattern in the sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
#
# Parse patterns from the PROSITE database, and
# search for them in a protein sequence
#

#
# Turn on useful warnings and constraints
#
use strict;
use warnings;

#
# Declare variables
#

#
# The PROSITE database
#
my $prosite_file = &#39;prosmall.dat&#39;;

#
# A &amp;quot;handle&amp;quot; for the opened PROSITE file
#
my $prosite_filehandle;

#
# Store each PROSITE record that is read in
#
my $record = &#39;&#39;;

#
# The protein sequence to search
# (use &amp;quot;join&amp;quot; and &amp;quot;qw&amp;quot; to keep line length short)
#
my $protein = join &#39;&#39;, qw(
MNIDDKLEGLFLKCGGIDEMQSSRTMVVMGGVSG
QSTVSGELQDSVLQDRSMPHQEILAADEVLQESE
MRQQDMISHDELMVHEETVKNDEEQMETHERLPQ
);

#
# open the PROSITE database or exit the program
#
open($prosite_filehandle, $prosite_file)
 or die &amp;quot;Cannot open PROSITE file $prosite_file&amp;quot;;

#
# set input separator to termination line //
#
$/ = &amp;quot;//\n&amp;quot;;

#
# Loop through the PROSITE records
#
while($record = &amp;lt;$prosite_filehandle&amp;gt;) {

  #
  # Parse the PROSITE record into its &amp;quot;line types&amp;quot;
  #
  my %line_types = get_line_types($record);

  #
  # Skip records without an ID (the first record)
  #
  defined $line_types{&#39;ID&#39;} or next;

  #
  # Skip records that are not PATTERN
  # (such as MATRIX or RULE)
  #
  $line_types{&#39;ID&#39;} =~ /PATTERN/ or next;

  #
  # Get the ID of this record
  #
  my $id = $line_types{&#39;ID&#39;};
  $id =~ s/^ID   //;
  $id =~ s/; .*//;

  #
  # Get the PROSITE pattern from the PA line(s)
  #
  my $pattern = $line_types{&#39;PA&#39;};
  # Remove the PA line type tag(s)
  $pattern =~ s/PA   //g;

  #
  # Calculate the Perl regular expression
  # from the PROSITE pattern
  #
  my $regexp =  PROSITE_2_regexp($pattern);

  #
  # Find the PROSITE regular expression patterns
  # in the protein sequence, and report
  #
  while ($protein =~ /$regexp/g) {
    my $position = (pos $protein) - length($&amp;amp;) +1;
    print &amp;quot;Found $id at position $position\n&amp;quot;;
    print &amp;quot;   match:   $&amp;amp;\n&amp;quot;;
    print &amp;quot;   pattern: $pattern\n&amp;quot;;
    print &amp;quot;   regexp:  $regexp\n\n&amp;quot;;
  }
}

#
# Exit the program
#
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program is available online as the file &lt;a href=&#34;http://perl.com/2001/11/16/examples/parse_prosite&#34;&gt;parse_prosite&lt;/a&gt;. The tiny example Prosite database is available as the file &lt;a href=&#34;http://perl.com/2001/11/16/examples/prosmall.dat&#34;&gt;prosmall.dat&lt;/a&gt;. If you save these files on your (Unix, Linux, Macintosh, or Windows) computer, you can enter the following command at your command-line prompt (in the same folder in which you saved the two files):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% perl parse_prosite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it will produce the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Found PKC_PHOSPHO_SITE at position 22
   match:   SSR
   pattern: [ST]-x-[RK].
   regexp:  [ST].[RK]

Found PKC_PHOSPHO_SITE at position 86
   match:   TVK
   pattern: [ST]-x-[RK].
   regexp:  [ST].[RK]

Found CK2_PHOSPHO_SITE at position 76
   match:   SHDE
   pattern: [ST]-x(2)-[DE].
   regexp:  [ST].{2}[DE]

Found MYRISTYL at position 30
   match:   GGVSGQ
   pattern: G-{EDRKHPFYW}-x(2)-[STAGCN]-{P}.
   regexp:  G[^EDRKHPFYW].{2}[STAGCN][^P]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see, our short program goes through the Prosite database one record at a time, parsing each record according to the types of lines within it. If the record has an ID and a pattern, it then extracts them, creates a Perl regular expression from the pattern, and finally searches in a protein sequence for the regular expression, reporting on the patterns found.&lt;/p&gt;

&lt;h3 id=&#34;the-next-step&#34;&gt;The Next Step&lt;/h3&gt;

&lt;p&gt;This article has shown you how to take biological data from the Prosite database and use it in your own programs. With this ability, you can write programs specific to your particular research needs.&lt;/p&gt;

&lt;p&gt;Many kinds of data discovery are possible: you could combine searches for Prosite patterns with some other computation. For instance, you may want to also search the associated genomic DNA or cDNA for restriction sites surrounding a particular Prosite pattern in the translated protein, in preparation for cloning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;James Tisdall has also written &lt;a href=&#34;http://www.oreilly.com/news/perlbio_1001.html&#34;&gt;Why Biologists Want to Program Computers&lt;/a&gt; for &lt;em&gt;oreilly.com&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;

&lt;p&gt;While such programs are interesting in their own right, their importance in laboratory research really lies in the fact that their use can save enormous amounts of time; time which can then be used for other, less routine, tasks on which biological research critically depends.&lt;/p&gt;

&lt;p&gt;This article gives an example of using Perl to extract and use data from a flat file database, of which there are many in biological research. In fact, some of the most important biological databases are in flat file format, including GenBank and PDB, the primary databases for DNA sequence information and for protein structures.&lt;/p&gt;

&lt;p&gt;With the ability to write your own programs, the true power of bioinformatics can be applied in your lab. Learning the Perl programming language can give you a direct entry into this valuable new laboratory technique.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates recently released (October 2001) &lt;a href=&#34;http://oreilly.com/catalog/begperlbio/&#34;&gt;Beginning Perl for Bioinformatics&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/catalog/begperlbio/chapter/ch10.html&#34;&gt;Sample Chapter 10, GenBank&lt;/a&gt;, is available free online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also look at the &lt;a href=&#34;http://www.oreilly.com/catalog/begperlbio/toc.html&#34;&gt;Table of Contents&lt;/a&gt;, the &lt;a href=&#34;http://www.oreilly.com/catalog/begperlbio/toc.html&#34;&gt;Index&lt;/a&gt;, and the &lt;a href=&#34;http://www.oreilly.com/catalog/begperlbio/desc.html&#34;&gt;Full Description&lt;/a&gt; of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, &lt;a href=&#34;http://oreilly.com/catalog/begperlbio/&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Beginners Intro to Perl - Part 4</title>
      <link>http://localhost:1313/pub/2000/12/begperl4.html/</link>
      <pubDate>Wed, 06 Dec 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/12/begperl4.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this venerable series is undergoing updates. You might be interested in the newer versions, available at:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/04/23/a-beginners-introduction-to-perl-510.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/05/07/beginners-introduction-to-perl-510-part-2.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Files and Strings with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.oreilly.com/2008/06/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Regular Expressions with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://broadcast.oreilly.com/2008/09/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl Web Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;it-s-cgi-time&#34;&gt;It&amp;rsquo;s CGI time&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Beginners Intro to Perl&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;â¢&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/10/begperl1.html&#34;&gt;Part 1 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
â¢&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl2.html&#34;&gt;Part 2 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
â¢&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl3.html&#34;&gt;Part 3 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
â¢&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/12/begperl5.html&#34;&gt;Part 5 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
â¢&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/01/begperl6.html&#34;&gt;Part 6 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
â¢&lt;a href=&#34;#cgi&#34;&gt;What is CGI?&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#cgi_program&#34;&gt;A Real CGI Program&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#uhoh&#34;&gt;Uh-Oh!&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#second_script&#34;&gt;Our Second Script&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#trust&#34;&gt;Trust No One&lt;/a&gt;&lt;br /&gt;
â¢&lt;a href=&#34;#play_around&#34;&gt;Play Around!&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So far, we&amp;rsquo;ve talked about Perl as a language for mangling numbers, strings, and files - the original purpose of the language. Now it&amp;rsquo;s time to talk about what Perl does on the Web. In this installment, we&amp;rsquo;re going to talk about CGI programming.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cgi-what-is-cgi-span&#34;&gt;&lt;span id=&#34;cgi&#34;&gt;What is CGI?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Web is based on a client-server model: your browser (the client) making requests to a Web server. Most of these are simple requests for documents or images, which the server delivers to the browser for display.&lt;/p&gt;

&lt;p&gt;Of course, sometimes you want the server to do more than just dump the contents of a file. You&amp;rsquo;d like to do something with a server-side program - whether that &amp;ldquo;something&amp;rdquo; is using Web-based e-mail, looking up a phone number in a database or ordering a copy of &lt;em&gt;Evil Geniuses in a Nutshell&lt;/em&gt; for your favorite techie. This means the browser must be able to send information (an e-mail address, a name to look up, shipping information for a book) to the server, and the server must be able to use that information and return the results to the user.&lt;/p&gt;

&lt;p&gt;The standard for communication between a user&amp;rsquo;s Web browser and a server-side program running on the Web server is called &lt;strong&gt;CGI&lt;/strong&gt;, or Common Gateway Interface. It is supported by all popular Web server software. To get the most out of this article, you will need to have a server that supports CGI. This may be a server running on your desktop machine or an account with your ISP (though probably not a free Web-page service). If you don&amp;rsquo;t know whether you have CGI capabilities, ask your ISP or a local sysadmin how to set things up.&lt;/p&gt;

&lt;p&gt;Notice that I haven&amp;rsquo;t described how CGI works; that&amp;rsquo;s because you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to know. There&amp;rsquo;s a standard Perl module called &lt;code&gt;CGI.pm&lt;/code&gt; that will handle the CGI protocol for you. CGI.pm is part of the core Perl distribution, and any properly installed Perl should have it available.&lt;/p&gt;

&lt;p&gt;Telling your CGI program that you want to use the CGI module is as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use CGI &#39;:standard&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;use CGI &#39;:standard&#39;;&lt;/code&gt; statement tells Perl that you want to use the CGI.pm module in your program. This will load the module and make a set of CGI functions available for your code.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cgi-program-a-real-cgi-program-span&#34;&gt;&lt;span id=&#34;cgi_program&#34;&gt;A Real CGI Program&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s write our first real CGI program. Instead of doing something complex, we&amp;rsquo;ll write something that will simply throw back whatever we throw at it. We&amp;rsquo;ll call this script &lt;code&gt;backatcha.cgi&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/perl

use CGI &#39;:standard&#39;;

print header();
print start_html();

for $i (param()) {
    print &amp;quot;&amp;lt;b&amp;gt;&amp;quot;, $i, &amp;quot;&amp;lt;/b&amp;gt;: &amp;quot;, param($i), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
}

print end_html();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve never used HTML, the pair of &amp;lt;b&amp;gt; and &amp;lt;/b&amp;gt; tags mean &amp;ldquo;begin bold&amp;rdquo; and &amp;ldquo;end bold&amp;rdquo;, respectively, and the &amp;lt;br&amp;gt; tag means &amp;ldquo;line break.&amp;rdquo; (A good paper reference to HTML is O&amp;rsquo;Reilly&amp;rsquo;s &lt;em&gt;HTML &amp;amp; XHTML: The Definitive Guide&lt;/em&gt;, and online, I like &lt;a href=&#34;http://www.htmlhelp.com/&#34;&gt;the Web Design Group&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Install this program on your server and do a test run. (If you don&amp;rsquo;t have a Web server of your own, we&amp;rsquo;ve put a copy online for you &lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/backatcha.pl&#34;&gt;here&lt;/a&gt;.) Here&amp;rsquo;s a short list of what you do to install a CGI program:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the program is placed where your Web server will recognize it as a CGI script. This may be a special &lt;code&gt;cgi-bin&lt;/code&gt; directory or making sure the program&amp;rsquo;s filename ends in &lt;code&gt;.pl&lt;/code&gt; or &lt;code&gt;.cgi&lt;/code&gt;. If you don&amp;rsquo;t know where to place the program, your ISP or sysadmin should.&lt;/li&gt;
&lt;li&gt;Make sure the program can be run by the server. If you are using a Unix system, you may have to give the Web-server user read and execute permission for the program. It&amp;rsquo;s easiest to give these permissions to everybody by using &lt;code&gt;chmod filename 755&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make a note of the program&amp;rsquo;s URL, which will probably be something like http://&lt;em&gt;server name&lt;/em&gt;/cgi-bin/backatcha.cgi) and go to that URL in your browser. (Take a guess what you should do if you don&amp;rsquo;t know what the URL of the program is. Hint: It involves the words &amp;ldquo;ask,&amp;rdquo; &amp;ldquo;your&amp;rdquo; and &amp;ldquo;ISP.&amp;rdquo;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If this works, you will see in your browser &amp;hellip; a blank page! Don&amp;rsquo;t worry, this is what is &lt;em&gt;supposed&lt;/em&gt; to happen. The &lt;code&gt;backatcha.cgi&lt;/code&gt; script throws back what you throw at it, and we haven&amp;rsquo;t thrown anything at it yet. We&amp;rsquo;ll give it something to show us in a moment.&lt;/p&gt;

&lt;p&gt;If it &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; work, you probably saw either an error message or the source code of the script. We&amp;rsquo;ll try to diagnose these problems in the next section.&lt;/p&gt;

&lt;h3 id=&#34;span-id-uhoh-uh-oh-span&#34;&gt;&lt;span id=&#34;uhoh&#34;&gt;Uh-Oh!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If you saw an error message, your Web server had a problem running the CGI program. This may be a problem with the program or the file permissions.&lt;/p&gt;

&lt;p&gt;First, are you &lt;em&gt;sure&lt;/em&gt; the program has the correct file permissions? Did you set the file permissions on your program to 755? If not, do it now. (Windows Web servers will have a different way of doing this.) Try it again; if you see a blank page now, you&amp;rsquo;re good.&lt;/p&gt;

&lt;p&gt;Second, are you &lt;em&gt;sure&lt;/em&gt; the program actually works? (Don&amp;rsquo;t worry, it happens to the best of us.) Change the &lt;code&gt;use CGI&lt;/code&gt; line in the program to read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use CGI &#39;:standard&#39;, &#39;-debug&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the program from the command line. You should see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(offline mode: enter name=value pairs on standard input)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This message indicates that you&amp;rsquo;re &lt;em&gt;testing&lt;/em&gt; the script. You can now press Ctrl-D to tell the script to continue running without telling it any form items.&lt;/p&gt;

&lt;p&gt;If Perl reports any errors in the script, you can fix them now.&lt;/p&gt;

&lt;p&gt;(The &lt;code&gt;-debug&lt;/code&gt; option is incredibly useful. Use it whenever you have problems with a CGI program, and ignore it at your peril.)&lt;/p&gt;

&lt;p&gt;The other common problem is that you&amp;rsquo;re seeing the source code of your program, not the result of running your program. There are two simple problems that can cause this.&lt;/p&gt;

&lt;p&gt;First, are you &lt;em&gt;sure&lt;/em&gt; you&amp;rsquo;re going through your Web server? If you use your browser&amp;rsquo;s &amp;ldquo;load local file&amp;rdquo; option (to look at something like &lt;code&gt;/etc/httpd/cgi-bin/backatcha.cgi&lt;/code&gt; instead of something like &lt;code&gt;http://localhost/cgi-bin/backatcha.cgi&lt;/code&gt;), you aren&amp;rsquo;t even touching the Web server! Your browser is doing what you &amp;ldquo;wanted&amp;rdquo; to do: loading the contents of a local file and displaying them.&lt;/p&gt;

&lt;p&gt;Second, are you &lt;em&gt;sure&lt;/em&gt; the Web server knows it&amp;rsquo;s a CGI program? Most Web server software will have a special way of designating a file as a CGI program, whether it&amp;rsquo;s a special &lt;code&gt;cgi-bin&lt;/code&gt; directory, the &lt;code&gt;.cgi&lt;/code&gt; or &lt;code&gt;.pl&lt;/code&gt; extension on a file, or something else. Unless you live up to these expectations, the Web server will think the program is a text file, and serve up your program&amp;rsquo;s source code in plain-text form. Ask your ISP for help.&lt;/p&gt;

&lt;p&gt;CGI programs are unruly beasts at the best of times; don&amp;rsquo;t worry if it takes a bit of work to make them run properly.&lt;/p&gt;

&lt;h3 id=&#34;making-the-form-talk-back&#34;&gt;Making the Form Talk Back&lt;/h3&gt;

&lt;p&gt;At this point, you should have a working copy of &lt;code&gt;backatcha.cgi&lt;/code&gt; spitting out blank pages from a Web server. Let&amp;rsquo;s make it actually tell us something. Take the following HTML code and put it in a file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FORM ACTION=&amp;quot;putyourURLhere&amp;quot; METHOD=GET&amp;gt;
    &amp;lt;P&amp;gt;What is your favorite color? &amp;lt;INPUT NAME=&amp;quot;favcolor&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
&amp;lt;INPUT TYPE=submit VALUE=&amp;quot;Send form&amp;quot;&amp;gt;
lt;/FORM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;putyourURLhere&lt;/code&gt; with the actual URL of your copy of &lt;code&gt;backatcha.cgi&lt;/code&gt;! If you want, you can use the &lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/backatcha.pl&#34;&gt;copy installed here&lt;/a&gt; at Perl.com.&lt;/p&gt;

&lt;p&gt;This is a simple form. It will show a text box where you can enter your favorite color and a &amp;ldquo;submit&amp;rdquo; button that sends your information to the server. Load this form in your browser and submit a favorite color. You should see this returned from the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;favcolor: green
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cgi-functions&#34;&gt;CGI functions&lt;/h3&gt;

&lt;p&gt;The CGI.pm module loads several special CGI functions for you. What are these functions?&lt;/p&gt;

&lt;p&gt;The first one, &lt;code&gt;header()&lt;/code&gt;, is used to output any necessary HTTP headers before the script can display HTML output. Try taking this line out; you&amp;rsquo;ll get an error from the Web server when you try to run it. This is &lt;em&gt;another&lt;/em&gt; common source of bugs!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;start_html()&lt;/code&gt; function is there for convenience. It returns a simple HTML header for you. You can pass parameters to it by using a hash, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $cgi-&amp;gt;start_html( -title =&amp;gt; &amp;quot;My document&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The &lt;code&gt;end_html()&lt;/code&gt; method is similar, but outputs the footers for your page.)&lt;/p&gt;

&lt;p&gt;Finally, the most important CGI function is &lt;code&gt;param()&lt;/code&gt;. Call it with the name of a form item, and a list of all the values of that form item will be returned. (If you ask for a scalar, you&amp;rsquo;ll only get the first value, no matter how many there are in the list.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$yourname = param(&amp;quot;firstname&amp;quot;);
print &amp;quot;&amp;lt;P&amp;gt;Hi, $yourname!&amp;lt;/P&amp;gt;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you call &lt;code&gt;param()&lt;/code&gt; without giving it the name of a form item, it will return a list of &lt;em&gt;all&lt;/em&gt; the form items that are available. This form of &lt;code&gt;param()&lt;/code&gt; is the core of our backatcha script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for $i (param()) {
    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: &amp;quot;, param($i), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, a single form item can have more than one value. You might encounter code like this on the Web site of a pizza place that takes orders over the Web:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;P&amp;gt;Pick your toppings!&amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=pepperoni&amp;gt; Pepperoni &amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=mushrooms&amp;gt; Mushrooms &amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=ham&amp;gt; Ham &amp;lt;BR&amp;gt;
    &amp;lt;/P&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Someone who wants all three toppings would submit a form where the form item &lt;code&gt;top&lt;/code&gt; has three values: &amp;ldquo;pepperoni,&amp;rdquo; &amp;ldquo;mushrooms&amp;rdquo; and &amp;ldquo;ham.&amp;rdquo; The server-side code might include this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;&amp;lt;P&amp;gt;You asked for the following pizza toppings: &amp;quot;;
    @top = param(&amp;quot;top&amp;quot;);
    for $i (@top) {
        print $i, &amp;quot;. &amp;quot;;
    }
    print &amp;quot;&amp;lt;/P&amp;gt;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, here&amp;rsquo;s something to watch out for. Take another look at the pizza-topping HTML code. Try pasting that little fragment into the backatcha form, just above the &lt;code&gt;&amp;lt;INPUT TYPE=submit...&amp;gt;&lt;/code&gt; tag. Enter a favorite color, and check all three toppings. You&amp;rsquo;ll see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    favcolor: burnt sienna
    top: pepperonimushroomsham
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why did this happens? When you call &lt;code&gt;param(&#39;name&#39;)&lt;/code&gt;, you get back a &lt;em&gt;list&lt;/em&gt; of all of the values for that form item. This could be considered a bug in the &lt;code&gt;backatcha.cgi&lt;/code&gt; script, but it&amp;rsquo;s easily fixed - use &lt;code&gt;join()&lt;/code&gt; to separate the item values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: &amp;quot;, join(&#39;, &#39;, param($i)), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or call C&amp;lt;param()&amp;gt; in a scalar context first to get only the first value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $j = param($i);
    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: $j
\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always keep in mind that form items can have more than one value!&lt;/p&gt;

&lt;h3 id=&#34;span-id-second-script-our-second-script-span&#34;&gt;&lt;span id=&#34;second_script&#34;&gt;Our Second Script&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So now we know how to build a CGI program, and we&amp;rsquo;ve seen a simple example. Let&amp;rsquo;s write something useful. In the last article, we wrote a pretty good HTTP log analyzer. Why not Web-enable it? This will allow you to look at your usage figures from anywhere you can get to a browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/httpreport.pl&#34;&gt;Download the source code for the HTTP log analyzer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s decide what we want to do with our analyzer. Instead of showing all of the reports we generate at once, we&amp;rsquo;ll show only those the user selects. Second, we&amp;rsquo;ll let the user choose whether each report shows the entire list of items, or the top 10, 20 or 50 sorted by access count.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use a form such as this for our user interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;FORM ACTION=&amp;quot;/cgi-bin/http-report.pl&amp;quot; METHOD=POST&amp;gt;
        &amp;lt;P&amp;gt;Select the reports you want to see:&amp;lt;/P&amp;gt;

 &amp;lt;P&amp;gt;&amp;lt;INPUT TYPE=checkbox NAME=report VALUE=url&amp;gt;URLs requested&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=status&amp;gt;Status codes&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=hour&amp;gt;Requests by hour&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=type&amp;gt;File types
 &amp;lt;/P&amp;gt;

 &amp;lt;P&amp;gt;&amp;lt;SELECT NAME=&amp;quot;number&amp;quot;&amp;gt;
     &amp;lt;OPTION VALUE=&amp;quot;ALL&amp;quot;&amp;gt;Show all
     &amp;lt;OPTION VALUE=&amp;quot;10&amp;quot;&amp;gt;Show top 10
     &amp;lt;OPTION VALUE=&amp;quot;20&amp;quot;&amp;gt;Show top 20
     &amp;lt;OPTION VALUE=&amp;quot;50&amp;quot;&amp;gt;Show top 50
 &amp;lt;/SELECT&amp;gt;&amp;lt;/P&amp;gt;

 &amp;lt;INPUT TYPE=submit VALUE=&amp;quot;Show report&amp;quot;&amp;gt;
    &amp;lt;/FORM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Remember that you may need to change the URL!)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re sending two different types of form item in this HTML page. One is a series of checkbox widgets, which set values for the form item &lt;code&gt;report&lt;/code&gt;. The other is a single drop-down list which will assign a single value to &lt;code&gt;number&lt;/code&gt;: either ALL, 10, 20 or 50.&lt;/p&gt;

&lt;p&gt;Take a look at the original HTTP log analyzer. We&amp;rsquo;ll start with two simple changes. First, the original program gets the filename of the usage log from a command-line argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      # We will use a command line argument to determine the log filename.
      $logfile = $ARGV[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We obviously can&amp;rsquo;t do that now, since the Web server won&amp;rsquo;t allow us to enter a command line for our CGI program! Instead, we&amp;rsquo;ll hard-code the value of &lt;code&gt;$logfile&lt;/code&gt;. I&amp;rsquo;ll use &amp;ldquo;/var/log/httpd/access_log&amp;rdquo; as a sample value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $logfile = &amp;quot;/var/log/httpd/access_log&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, we must make sure that we output all the necessary headers to our Web server before we print anything else:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      print header();
      print start_html( -title =&amp;gt; &amp;quot;HTTP Log report&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now look at the &lt;code&gt;report()&lt;/code&gt; sub from our original program. It has one problem, relative to our new goals: It outputs all the reports instead of only the ones we&amp;rsquo;ve selected. We&amp;rsquo;ll rewrite &lt;code&gt;report()&lt;/code&gt; so that it will cycle through all the values of the &lt;code&gt;report&lt;/code&gt; form item and show the appropriate report for each.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sub report {
    for $i (param(&#39;report&#39;)) {
 if ($i eq &#39;url&#39;) {
     report_section(&amp;quot;URL requests&amp;quot;, %url_requests);
 } elsif ($i eq &#39;status&#39;) {
     report_section(&amp;quot;Status code requests&amp;quot;, %status_requests);
 } elsif ($i eq &#39;hour&#39;) {
     report_section(&amp;quot;Requests by hour&amp;quot;, %hour_requests);
 } elsif ($i eq &#39;type&#39;) {
     report_section(&amp;quot;Requests by file type&amp;quot;, %type_requests);
 }
    }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we rewrite the &lt;code&gt;report_section()&lt;/code&gt; sub to output HTML instead of plain text. (We&amp;rsquo;ll discuss the new way we&amp;rsquo;re using &lt;code&gt;sort&lt;/code&gt; in a moment.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub report_section {
 my ($header, %type) = @_;
 my (@type_keys);

 # Are we sorting by the KEY, or by the NUMBER of accesses?
 if (param(&#39;number&#39;) ne &#39;ALL&#39;) {
     @type_keys = sort { $type{$b} &amp;lt;=&amp;gt; $type{$a}; } keys %type;

     # Chop the list if we have too many results
     if ($#type_keys &amp;gt; param(&#39;number&#39;) - 1) {
         $#type_keys = param(&#39;number&#39;) - 1;
     }
 } else {
     @type_keys = sort keys %type;
 }

 # Begin a HTML table
 print &amp;quot;&amp;lt;TABLE&amp;gt;\n&amp;quot;;

 # Print a table row containing a header for the table
 print &amp;quot;&amp;lt;TR&amp;gt;&amp;lt;TH COLSPAN=2&amp;gt;&amp;quot;, $header, &amp;quot;&amp;lt;/TH&amp;gt;&amp;lt;/TR&amp;gt;\n&amp;quot;;

 # Print a table row containing each item and its value
 for $i (@type_keys) {
     print &amp;quot;&amp;lt;TR&amp;gt;&amp;lt;TD&amp;gt;&amp;quot;, $i, &amp;quot;&amp;lt;/TD&amp;gt;&amp;lt;TD&amp;gt;&amp;quot;, $type{$i}, &amp;quot;&amp;lt;/TD&amp;gt;&amp;lt;/TR&amp;gt;\n&amp;quot;;
 }

 # Finish the table
 print &amp;quot;&amp;lt;/TABLE&amp;gt;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-sorting-sorting-span&#34;&gt;&lt;span id=&#34;sorting&#34;&gt;Sorting&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl allows you to sort lists with the &lt;code&gt;sort&lt;/code&gt; keyword. By default, the sort will happen alphanumerically: numbers before letters, uppercase before lowercase. This is sufficient 99 percent of the time. The other 1 percent of the time, you can write a custom sorting routine for Perl to use.&lt;/p&gt;

&lt;p&gt;This sorting routine is just like a small sub. In it, you compare two special variables, &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;, and return one of three values depending on how you want them to show up in the list. Returning -1 means &amp;ldquo;&lt;code&gt;$a&lt;/code&gt; should come before &lt;code&gt;$b&lt;/code&gt; in the sorted list,&amp;rdquo; 1 means &amp;ldquo;&lt;code&gt;$b&lt;/code&gt; should come before &lt;code&gt;$a&lt;/code&gt; in the sorted list&amp;rdquo; and 0 means &amp;ldquo;they&amp;rsquo;re equal, so I don&amp;rsquo;t care which comes first.&amp;rdquo; Perl will run this routine to compare each pair of items in your list and produce the sorted result.&lt;/p&gt;

&lt;p&gt;For example, if you have a hash called &lt;code&gt;%type&lt;/code&gt;, here&amp;rsquo;s how you might sort its keys in descending order of their &lt;em&gt;values&lt;/em&gt; in the hash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sort {
        if ($type{$b} &amp;gt; $type{$a}) { return 1; }
 if ($type{$b} &amp;lt; $type{$a}) { return -1; }
 return 0;
    } keys %type;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, numeric sorting happens so often, Perl gives you a convenient shorthand for it: the &amp;lt;=&amp;gt; operator. This operator will perform the above comparison between two values for you and return the appropriate value. That means we can rewrite that test as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sort { $type{$b} &amp;lt;=&amp;gt; $type{$a}; } keys %type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(And this, in fact, is what we use in our log analyzer.)&lt;/p&gt;

&lt;p&gt;You can also compare strings with &lt;code&gt;sort&lt;/code&gt;. The &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;gt&lt;/code&gt; operators are the string equivalents of &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;cmp&lt;/code&gt; will perform the same test as &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;. (Remember, string comparisons will sort numbers before letters and uppercase before lowercase.)&lt;/p&gt;

&lt;p&gt;For example, you have a list of names and phone numbers in the format &amp;ldquo;John Doe 555-1212.&amp;rdquo; You want to sort this list by the person&amp;rsquo;s last name, and sort by first name when the last names are the same. This is a job made for &lt;code&gt;cmp&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     @sorted = sort {
         ($c) = ($a =~ / (\w+)/);
  ($d) = ($b =~ / (\w+)/);
  if ($c eq $d) {   # Last names are the same, sort on first name
      ($c) = ($a =~ /^(\w+)/);
      ($d) = ($b =~ /^(\w+)/);
      return $c cmp $d;
  } else {
      return $c cmp $d;
  }
     } @phone_numbers;
     for $i (@sorted) { print $i, &amp;quot;\n&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-trust-trust-no-one-span&#34;&gt;&lt;span id=&#34;trust&#34;&gt;Trust No One&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Now that we know how CGI programs can do what you want, let&amp;rsquo;s make sure they won&amp;rsquo;t do what you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; want. This is harder than it looks, because you can&amp;rsquo;t trust anyone to do what you expect.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example: You want to make sure the HTTP log analyzer will never show more than 50 items per report, because it takes too long to send larger reports to the user. The easy thing to do would be to eliminate the &amp;ldquo;ALL&amp;rdquo; line from our HTML form, so that the only remaining options are 10, 20 and 50. It would be very easy - and wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/httpsecured.pl&#34;&gt;Download the source code for the HTTP analyzer with security enhancements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We saw that you can modify HTML forms when we pasted the pizza-topping sample code into our backatcha page. You can also use the URL to pass form items to a script - try going to &lt;code&gt;http://www.perl.com/2000/12/backatcha.cgi?itemsource=URL&amp;amp;typedby=you&lt;/code&gt; in your browser. Obviously, if someone can do this with the backatcha script, they can also do it with your log analyzer and stick any value for &lt;code&gt;number&lt;/code&gt; in that they want: &amp;ldquo;ALL&amp;rdquo; or &amp;ldquo;25000&amp;rdquo;, or &amp;ldquo;four score and seven years ago.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Your form doesn&amp;rsquo;t allow this, you say. Who cares? People will write custom HTML forms to exploit weaknesses in your programs, or will just pass bad form items to your script directly. You cannot trust anything users or their browsers tell you.&lt;/p&gt;

&lt;p&gt;You eliminate these problems by knowing what you expect from the user, and &lt;em&gt;disallowing&lt;/em&gt; everything else. Whatever you do not expressly permit is totally forbidden. Secure CGI programs consider everything guilty until it is &lt;em&gt;made&lt;/em&gt; innocent.&lt;/p&gt;

&lt;p&gt;For example, we want to limit the size of reports from our HTTP log analyzer. We decide that means the &lt;code&gt;number&lt;/code&gt; form item must have a value that is between 10 and 50. We&amp;rsquo;ll verify it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Make sure that the &amp;quot;number&amp;quot; form item has a reasonable value
    ($number) = (param(&#39;number&#39;) =~ /(\d+)/);
    if ($number &amp;lt; 10) {
        $number = 10;
    } elsif ($number &amp;gt; 50) {
        $number = 50;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we also have to change the &lt;code&gt;report_section()&lt;/code&gt; sub so it uses the &lt;code&gt;$number&lt;/code&gt; variable. Now, whether your user tries to tell your log analyzer that the value of &lt;code&gt;number&lt;/code&gt; is &amp;ldquo;10,&amp;rdquo; &amp;ldquo;200,&amp;rdquo; &amp;ldquo;432023,&amp;rdquo; &amp;ldquo;ALL&amp;rdquo; or &amp;ldquo;redrum,&amp;rdquo; your program will restrict it to a reasonable value.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to do anything with &lt;code&gt;report&lt;/code&gt;, because we only act when one of its values is something we expected. If the user tries to enter something other than our expressly permitted values (&amp;ldquo;url,&amp;rdquo; &amp;ldquo;status,&amp;rdquo; &amp;ldquo;hour&amp;rdquo; or &amp;ldquo;type&amp;rdquo;), we just ignore it.&lt;/p&gt;

&lt;p&gt;Use this sort of logic everywhere you know what the user &lt;em&gt;should&lt;/em&gt; enter. You might use &lt;code&gt;s/\D//g&lt;/code&gt; to remove non-numeric characters from items that should be numbers (and then test to make sure what&amp;rsquo;s left is within your range of allowable numbers!), or &lt;code&gt;/^\w+$/&lt;/code&gt; to make sure that the user entered a single word.&lt;/p&gt;

&lt;p&gt;All of this has two significant benefits. First, you simplify your error-handling code, because you make sure as early in your program as possible that you&amp;rsquo;re working with valid data. Second, you increase security by reducing the number of &amp;ldquo;impossible&amp;rdquo; values that might help an attacker compromise your system or mess with other users of your Web server.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t just take my word for it, though. The &lt;a href=&#34;http://www.w3.org/Security/Faq/&#34;&gt;CGI Security FAQ&lt;/a&gt; has more information about safe CGI programming in Perl than you ever thought could possibly exist, including a section listing some &lt;a href=&#34;http://www.w3.org/Security/Faq/wwwsf4.html#Q35&#34;&gt;security holes&lt;/a&gt; in real CGI programs.&lt;/p&gt;

&lt;h3 id=&#34;span-id-play-around-play-around-span&#34;&gt;&lt;span id=&#34;play_around&#34;&gt;Play Around!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You should now know enough about CGI programming to write a useful Web application. (Oh, and you learned a little bit more about sorting and comparison.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write the quintessential CGI program: a guestbook. Users enter their name, e-mail address and a short message, which is appended to an HTML file for all to see.&lt;/p&gt;

&lt;p&gt;Be careful! Never trust the user! A good beginning precaution is to &lt;em&gt;disallow all HTML&lt;/em&gt; by either removing &amp;lt; and &amp;gt; characters from all of the user&amp;rsquo;s information or replacing them with the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; character entities.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;substr()&lt;/code&gt;, too, to cut anything the user enters down to a reasonable size. Asking for a &amp;ldquo;short&amp;rdquo; message will do nothing to prevent the user dumping a 500k file into the message field!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program that plays tic-tac-toe against the user. Be sure that the computer AI is in a sub so it can be easily upgraded. (You&amp;rsquo;ll probably need to study HTML a bit to see how to output the tic-tac-toe board.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>

