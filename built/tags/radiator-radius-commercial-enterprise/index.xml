<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Radiator Radius Commercial Enterprise on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/radiator-radius-commercial-enterprise/</link>
    <description>Recent content in Radiator Radius Commercial Enterprise on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Oct 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/radiator-radius-commercial-enterprise/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Radiator</title>
      <link>http://localhost:1313/pub/2002/10/15/radiator.html/</link>
      <pubDate>Tue, 15 Oct 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/10/15/radiator.html/</guid>
      <description>&lt;p&gt;Are you fed up with those who think that commercial applications need to be written in an &amp;ldquo;enterprise&amp;rdquo; language such as Java or C++? While we&amp;rsquo;re big fans of open source at Perl.com, we&amp;rsquo;re bigger fans of Perl, and we&amp;rsquo;re frustrated when people claim there&amp;rsquo;s something that Perl can&amp;rsquo;t do; so we spoke to Mike McCauley at Open System Consultants.&lt;/p&gt;

&lt;p&gt;Open Systems produces &lt;a href=&#34;http://www.open.com.au/radiator/index.html&#34;&gt;Radiator&lt;/a&gt;, a commercial RADIUS server implementation, first released four years ago and with new versions and enhancements continually developed. It has about 5,000 paying installations worldwide. Mike explains: &amp;ldquo;It&amp;rsquo;s used to authenticate dialup and wireless access to an ISP or corporate network. In order to authenticate users, it can look up user details in a wide range of data sources, such as SQL, LDAP, flat files, Unix password files, OPIE, PAM, Windows NT SAM, Active Directory, third-party billing packages, and so on.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Mike was particularly impressed with Perl&amp;rsquo;s write-once-run-anywhere nature, which has completely obviated the need for porting or platform-specific alteration. As he says, &amp;ldquo;The finished product runs without change on almost every platform known to humanity. That means we can appeal to more potential customers, with less effort spent on porting and maintenance.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;But there were other reasons for choosing Perl as an implementation language: &amp;ldquo;The richness of Perl allows us to express complicated algorithms quickly and concisely, and know they will work wherever the customer wants to run the code; and the connect easily to lots of different data sources.&amp;rdquo; Perl&amp;rsquo;s reusability and the great library of code already available also played its part. &amp;ldquo;The modules from CPAN mean we can talk to servers like SQL, LDAP, NISPLUS, Active Directory, OpenSSL, and &lt;strong&gt;lots&lt;/strong&gt; of other things. We can concentrate on writing the product, rather than coding and maintaining interfaces.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We asked about the performance of going with Perl instead of, for example, C, but this seemed not to be the problem that many people might expect. &amp;ldquo;Most authentications rely on some external server or system, such as an LDAP or SQL server, and so the speed determining step is usually that extenal system. Also, the interfaces to those systems are generally compiled Perl modules written in C. And where there is no external server, we can use clever hashing mechanisms to make lookups faster than some C based Radius servers. That means that Radiator can be up there with a server written in C, and with much more features and flexibility.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Mike also explained that good Perl programming practice can keep performance high: &amp;ldquo;In order to get the best performance, you have to code so that you use as much of Perl&amp;rsquo;s internal lovingly hand-wrought C code as possible. That means using complex operators like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, hashes etc, to do the maximum of work with as few Perl operators as possible. You have to balance that against readability though, otherwise you can end up with unmaintainable code that looks like line noise. Radiator makes heavy use of Perl&amp;rsquo;s Object Oriented support, which costs in performance, but we think the benefits in maintainability and easy extensibility (for us and the customer) are worth it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;One common concern with businesses releasing Perl products is that they&amp;rsquo;re worried about piracy; if the source code is visible by anyone, isn&amp;rsquo;t it easy for people to run away with it? The evaluation version of Radiator is shipped with a small portion of the code encrypted, and only made available to bona fide equirers. However, the full product is shipped completely unencrypted. Mike flips over the concern and sees the advantages. &amp;ldquo;Most network operators really like the idea of a product with full source code: They can be sure that the product does what it claims, and they can change or enhance it if necessary. &amp;hellip; We like to offer full source code, but we also need to be paid for our hard work, and partial encryption of demos seems to be a good compromise that results in most of our demos turning into sales.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;What, then, about people making customizations or passing on copies to their friends? &amp;ldquo;Actually, we don&amp;rsquo;t mind if customers change their code to suit their own needs. But we don&amp;rsquo;t like it if they give the code to someone else, so that we get to support them without being paid. There is a little bit of that goes on, but ours is not really a mass-market consumer product, and I think that most people realise they get more benefit from an honest relationship with us. In the end, a license is not very expensive, especially since the support is so good.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Finally, we asked Mike to sum up his thoughts on commercial development with Perl. &amp;ldquo;Technically, I think it is unsurpassed for almost any application. In Perl, I can be five to 10 times more productive, line-for-line than in C or C++ (and I&amp;rsquo;m no slouch at them, either). For software vendors, that means a more maintainable product delivered to market faster. For customers it means a better product for less money. And interoperability and portability is fantastic. As you can tell, we really like it!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Commercially, a qualified yes, provided you have control over licensing and distribution issues, which might be hard in anything other than a niche market. You can&amp;rsquo;t keep writing software unless you get to pay the mortgage and feed the kids, too.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Mike McCauley is chief software developer at Open System Consultants in Melbourne, Australia. He has a bachelor of engineering from the University of Queensland, and has worked in the computer software industry for 20 years. When he is not writing software, he flies light planes and has fun with his family.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

