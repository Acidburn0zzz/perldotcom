<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weather on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/weather/</link>
    <description>Recent content in Weather on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Oct 2014 12:06:35 +0000</lastBuildDate>
    <atom:link href="/tags/weather/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - September 2014</title>
      <link>http://localhost:1313/article/117/2014/10/3/What-s-new-on-CPAN---September-2014/</link>
      <pubDate>Fri, 03 Oct 2014 12:06:35 +0000</pubDate>
      
      <guid>http://localhost:1313/article/117/2014/10/3/What-s-new-on-CPAN---September-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Untappd::API&#34;&gt;Untappd::API&lt;/a&gt; provides a Perl interface to the beer drinking social network&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ComXo::Call2&#34;&gt;ComXo::Call2&lt;/a&gt; looks interesting, appears to be an API to a switchboard telco service&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/cpan-outdated-coro&#34;&gt;cpan-outdated-coro&lt;/a&gt; is a faster version of the useful cpan-outdated app&lt;/li&gt;
&lt;li&gt;Easily get the directory of an installed Perl module with &lt;a href=&#34;https://metacpan.org/pod/pmdir&#34;&gt;pmdir&lt;/a&gt; e.g:
 &lt;code&gt;$ cd $( pmdir Moose )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::sslmaker&#34;&gt;App::sslmaker&lt;/a&gt; helps you create your own SSL certificates&lt;/li&gt;
&lt;li&gt;Get a weather report at the terminal using &lt;a href=&#34;https://metacpan.org/pod/App::wu&#34;&gt;App::wu&lt;/a&gt; (&lt;em&gt;disclosure - I am the module author&lt;/em&gt;). If you live in Japan you may be interested in the new module &lt;a href=&#34;https://metacpan.org/pod/WWW::Livedoor::Weather&#34;&gt;WWW::Livedoor::Weather&lt;/a&gt; instead&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::DNS::Native&#34;&gt;Net::DNS::Native&lt;/a&gt; is a shiny new non-blocking DNS resolver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Scalar::Watcher&#34;&gt;Scalar::Watcher&lt;/a&gt; is very interesting: allows you to monitor a variable for changes and invoke a function when they occur&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wow - parse card magnetic strip data with &lt;a href=&#34;https://metacpan.org/pod/Card::Magnetic&#34;&gt;Card::Magnetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Partial::Google&#34;&gt;Data::Partial::Google&lt;/a&gt; filters partial data structures &amp;ldquo;Google style&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Tie a hash or array to an INI file with &lt;a href=&#34;https://metacpan.org/pod/INI_File&#34;&gt;INI_File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Warmer&#34;&gt;MySQL::Warmer&lt;/a&gt; will warm up your MySQL server! (populates the cache I think)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Bitfield&#34;&gt;Data::Bitfield&lt;/a&gt; makes it easier to manage low level data bit encoding integers (bitfields).&lt;/li&gt;
&lt;li&gt;Quickly clean up string data with &lt;a href=&#34;https://metacpan.org/pod/Str::Filter&#34;&gt;Str::Filter&lt;/a&gt;. It provides a collection of useful functions for sprucing up strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Rex::JobControl&#34;&gt;Rex::JobControl&lt;/a&gt; is a web interface for Rex, the Perl based DevOps tool. Also check out their beautiful &lt;a href=&#34;http://rexify.org/&#34;&gt;website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Search for and load modules at runtime with &lt;a href=&#34;https://metacpan.org/pod/Plugin::Loader&#34;&gt;Plugin::Loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Extended::Tiny&#34;&gt;Path::Extended::Tiny&lt;/a&gt; wraps the wonderful Path::Tiny module with methods from Path::Extended&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;math-science-language&#34;&gt;Math, Science &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Shape::Vector&#34;&gt;Math::Shape::Vector&lt;/a&gt; is a 2d vector library, intended for games programming (&lt;em&gt;disclosure - I am the module author&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::IQ&#34;&gt;Text::IQ&lt;/a&gt; is a fabulous module for analysing text - it returns basic stats about the text as well as flesch, kincaid and fog scores.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;New Bus Pirate modules! Interact with &lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::nRF24L01P&#34;&gt;Chip::nRF24L01P&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::AVR_HVSP&#34;&gt;Chip::AVR_HVSP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Module::Runtime&amp;rsquo;s recent release broke some versions of Moose. Not to worry, check for conflicts with &lt;a href=&#34;https://metacpan.org/pod/Module::Runtime::Conflicts&#34;&gt;Module::Runtime::Conflicts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Object::Util&#34;&gt;Object::Util&lt;/a&gt; provides a collection of utility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Limper&#34;&gt;Limper&lt;/a&gt; is interesting - a dependency free, lightweight web framework&lt;/li&gt;
&lt;li&gt;New user agents! &lt;a href=&#34;https://metacpan.org/pod/LWP::Simple::REST&#34;&gt;LWP::Simple::REST&lt;/a&gt; exports RESTful request methods for LWP and &lt;a href=&#34;https://metacpan.org/pod/Net::HTTP::Client&#34;&gt;Net::HTTP::Client&lt;/a&gt; is a lightweight user agent in the vein of HTTP::Tiny&lt;/li&gt;
&lt;li&gt;Conveniently create and verify secure messages using &lt;a href=&#34;https://metacpan.org/pod/PBKDF2::Tiny&#34;&gt;PBKDF2::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find out your IP address with &lt;a href=&#34;https://metacpan.org/pod/WWW::IP&#34;&gt;WWW::IP&lt;/a&gt; (&lt;em&gt;disclaimer - I am the module author&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Client&#34;&gt;WebService::Client&lt;/a&gt; is a role that makes it easy to quickly churn out a web service client&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::NoOverride&#34;&gt;Test::NoOverride&lt;/a&gt; is very cool - it implements a test for overridden methods, with some sensible defaults&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get a weather report at the terminal with Perl</title>
      <link>http://localhost:1313/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl/</link>
      <pubDate>Thu, 11 Sep 2014 12:36:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl/</guid>
      <description>

&lt;p&gt;Getting a weather forecast can be a chore; you have to navigate to the right website, close the banner ad, type in your location, click the right link, and &lt;em&gt;maybe&lt;/em&gt; then you can see a forecast. I wanted a more convenient way and found one using &lt;a href=&#34;https://metacpan.org/pod/WWW::Wunderground::API&#34;&gt;WWW::Wunderground::API&lt;/a&gt;. As the name suggests, the module provides a Perl interface to the Wunderground.com API. In this article I&amp;rsquo;ll show you how to use it.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need an API key for Wunderground.com (sign up &lt;a href=&#34;http://www.wunderground.com/weather/api/&#34;&gt;here&lt;/a&gt; it&amp;rsquo;s free). You&amp;rsquo;ll also need to install WWW::Wunderground.::API. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=WWW-Wunderground-API+0.06&#34;&gt;results&lt;/a&gt; show that it runs on most platforms, including Windows. You can install the module at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan WWW::Wunderground::API&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The Code&lt;/h3&gt;

&lt;p&gt;Using WWW::Wunderground::API, I created a script that would pull an hourly forecast for my local city:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the script I use code&amp;gt;binmode to switch the standard output to UTF8 mode. This lets me print some cool degrees symbols later on. I then connect to the Wunderground API, passing my API key and location (location can be a city name or a zip code). Finally I print out the weather forecast using printf to format the output nicely. I saved the script as &lt;code&gt;weather&lt;/code&gt; and ran it at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ weather
Time      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℉&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℃&lt;/span&gt;   Rain %  Conditions
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Partly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  Chance of a Thunderstorm
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  Chance of a Thunderstorm
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  Partly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  Clear&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results show an hourly forecast with the temperature in Fahrenheit and Celsius, the probability of rain and an overall description. As I do most of my work from the terminal, this is much more convenient than using the browser and there are no ads!&lt;/p&gt;

&lt;h3 id=&#34;multiple-locations&#34;&gt;Multiple Locations&lt;/h3&gt;

&lt;p&gt;So the script is nice, but how can we make it better? Well, I&amp;rsquo;m rarely in the same place all the time, and I expect most people mover around too, so it would good to be more flexible and let the user type in the location, rather than using the same location every time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $home_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# capture location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter city or zip code ($home_location): &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;;
chomp $location;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $home_location,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve updated the code to store a default location called &lt;code&gt;$home_location&lt;/code&gt;. I then ask the user to enter a City or zip code, making sure to &lt;a href=&#34;https://perldoc.perl.org/functions/chomp.html&#34;&gt;chomp&lt;/a&gt; the result. Later in the API call, the code: &lt;code&gt;$location || $home_location&lt;/code&gt; will submit the home location unless the user has entered a location. Running the script now, I can get the weather for London easily:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ weather
Enter city &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; zip code (New York City, NY): London, UK
Time      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℉&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℃&lt;/span&gt;   Rain %  Conditions
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;caching&#34;&gt;Caching&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/WWW::Wunderground::API&#34;&gt;WWW::Wunderground::API&lt;/a&gt; documentation shows how to use &lt;a href=&#34;https://metacpan.org/pod/Cache::FileCache&#34;&gt;Cache::FileCache&lt;/a&gt; to cache the weather results locally. When you setup the cache, you can specify an expiry parameter - until the cache expires the WWW::Wunderground::API will use the cached results instead of the Wunderground API. This prevents unnecessary API calls and makes the script faster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cache::FileCache;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $home_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#capture location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter city or zip code ($home_location): &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;;
chomp $location;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $home_location,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    cache    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Cache::FileCache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
                    namespace          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wundercache&amp;#39;&lt;/span&gt;,
                    default_expires_in &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt; }),
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much has changed in the code. The line &lt;code&gt;use Cache::FileCache;&lt;/code&gt; imports the module and a &lt;code&gt;cache&lt;/code&gt; parameter has been added to the Wunderground API call. WWW::Wunderground::API is smart enough to not return cached results for different locations.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s probably enough to get started, however there is more that could be done with this script. I could make the script more portable by using environment variables instead of the hard coded values for my API key and home location. Exception handling could better - checking for an internet connection before running the script, handling failed API calls more gracefully (for unknown locations for example). Finally, why have the user type in a location at all? We could use get the user&amp;rsquo;s IP address and then geolocate them using the &lt;a href=&#34;https://metacpan.org/pod/Geo::IP&#34;&gt;Geo::IP&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;The Wunderground API provides a lot more than just a 24 hour forecast. Check out their API &lt;a href=&#34;http://www.wunderground.com/weather/api/d/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/gsfc/5598148465/in/photolist-9wFYv8-kYwXMt-bsoJ2F-epZCJW-51zsz5-4xqurW-dQW1WX-ntLbig-47NhYw-8ha98x-gKjXSn-iGqBL8-fkVu7f-3bs6Hv-9C5Gp9-dfRRoo-ab4NaA-5nNgKY-hkfRe6-hSmCX2-97fCju-8fqUzR-e6xj8j-943upK-CaRbr-5sSeXx-6yuU9E-4adC2H-9YWWVQ-dK9bTn-piUN9-8NP9b5-8hdo8u-8xGTYN-mG2TTk-bmH4rF-7A8s15-97GPeg-fxsEhK-a1cDq-nMWvny-7xTFh6-ow6uvp-i7yjhS-82v13J-6DmEYb-c6BXa-5eCgsS-bo1p2k-nytJYo/&#34;&gt;NASA Goddard Space Flight Center&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

