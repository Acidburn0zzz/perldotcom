<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 Internals Parrot on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-6-internals-parrot/</link>
    <description>Recent content in Perl 6 Internals Parrot on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Mar 2004 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-6-internals-parrot/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This week on Perl 6, week ending 2004-03-28</title>
      <link>http://localhost:1313/pub/2004/03/p6pdigest/20040328.html/</link>
      <pubDate>Sun, 28 Mar 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/03/p6pdigest/20040328.html/</guid>
      <description>

&lt;p&gt;&amp;hellip; and we&amp;rsquo;re back! Another interesting week in Perl 6. Your Summarizer even wrote some [parrot] code and it&amp;rsquo;s been simply ages since he did that. In accordance with ancient custom, we&amp;rsquo;ll start the summary with perl6-internals.&lt;/p&gt;

&lt;h4 id=&#34;span-id-building-with-miniparrot-building-with-miniparrot-span&#34;&gt;&lt;span id=&#34;Building_with_miniparrot&#34;&gt;Building with miniparrot&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Back in the early days Dan proposed, and it was generally agreed that the Parrot build process wouldn&amp;rsquo;t be Perl dependent, but instead there would be a few OS specific &amp;lsquo;bootstrap&amp;rsquo; scripts, enough to get &lt;em&gt;miniparrot&lt;/em&gt; up and running. Miniparrot would have just enough smarts to be able to complete the configuration and build the final full parrot.&lt;/p&gt;

&lt;p&gt;After last week&amp;rsquo;s discussion about reinventing metaconfig, I wondered if the miniparrot plan was still in place. It seems I&amp;rsquo;d missed the discussion of &lt;code&gt;stat&lt;/code&gt; that ended up talking about how miniparrot would be able to do its job. I find myself wondering what else is needed to get miniparrot to the point where it can start doing configuration work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc74cd596e93@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-continuations-continued-and-fun-with-stacks-continuations-continued-and-fun-with-stacks-span&#34;&gt;&lt;span id=&#34;Continuations_continued_(and_fun_with_stacks)&#34;&gt;Continuations continued (and fun with stacks)&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Warning: The following discussion of the Continuation discussions is irrevocably biased; I find it very hard to be objective about discussions I participate in, and I was rather loud mouthed in this one.&lt;/p&gt;

&lt;p&gt;The previous discussions of the uses and semantics of continuations carried over into this week. Piers Cawley argued that the current stack architecture seemed to be optimized for the wrong thing, with the special case RetContinuations being symptoms. He argued that current architecture (where a single stack frame can accommodate multiple pushes, with copy on write semantics being used to handle full continuations) should be replaced with a &amp;lsquo;naïve&amp;rsquo; architecture using linked lists of immutable, simple stack frames, one frame per push. Switching to this approach, he argued, would do away with a great deal of code complexity, and issues of high object creation overhead could be offset by using free lists and preallocation to reuse stack frames. Oh yes, and there&amp;rsquo;d be no difference between a RetContinuation and a full Continuation with this scheme.&lt;/p&gt;

&lt;p&gt;Leo Tötsch wasn&amp;rsquo;t convinced. Dan was though, and made the decision to switch to single item per frame, immutable, non COW stacks. Leo implemented it. His first cut was rather slow; later refinements added freelists and other handy stuff to start pulling the performance back up. I&amp;rsquo;m sure there&amp;rsquo;s more refinement to come though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403171746.i2HHkon26793@thu8.leo.home&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m2llluszax.fsf@obelisk.bofh.org.uk&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601024ebc84a9496605@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=406020C3.9040904@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=rt-3.0.8-27904-82629.6.64105174468546@perl.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-variadic-functions-variadic-functions-span&#34;&gt;&lt;span id=&#34;Variadic_functions&#34;&gt;Variadic functions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Ilya Martynov had some questions about how to handle variadic functions. Leo clarified some things and pointed Ilya at the &lt;code&gt;foldup&lt;/code&gt; op. Jens Rieks suggested aliasing the registers &lt;code&gt;I[1-4]&lt;/code&gt; to &lt;code&gt;argc[ISPN]&lt;/code&gt;, which Leo liked. I&amp;rsquo;m not sure he&amp;rsquo;s implemented it yet though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=87zna9z04w.fsf@moto.localhost&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-gcc-compiling-to-parrot-gcc-compiling-to-parrot-span&#34;&gt;&lt;span id=&#34;GCC_compiling_to_Parrot&#34;&gt;GCC compiling to Parrot&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In previous weeks Gerard Butler had posted wondering about getting GCC to target Parrot. The initial response was rather negative, pointing out that GCC and Parrot saw memory &lt;em&gt;very&lt;/em&gt; differently, to the extent that there would probably be a need have special PMCs for GCC managed memory, which would make communication between GCC implemented languages and Parrot implemented ones rather tricky.&lt;/p&gt;

&lt;p&gt;Undeterred, Gerald mapped out a way forward and asked for opinions. Dan thought the scheme looked reasonable, but fenced that with the caveat that he knows nothing about GCC&amp;rsquo;s internals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=FE6307104985D611A92A0002A5F3AB00B9D867@exch1.Sterling.COM&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-safe-execution-core-and-ops-classification-safe-execution-core-and-ops-classification-span&#34;&gt;&lt;span id=&#34;Safe_execution_core_and_ops_classification&#34;&gt;Safe execution core and ops classification&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo checked in some patches from Jens Rieks to allow classification of ops. He thought that this meant we were a good way along the road to providing a &amp;lsquo;Safe&amp;rsquo; run-core option, though there was still a lot to do. He outlined a road map and asked for comments (and implementations). Comments were forthcoming, and Dan eventually bundled his comments up into a single post with some design in it. For some reason this induced some industrial hand waving about Proof Carrying Code from Steve Fink (he accused himself of hand waving, not me).&lt;/p&gt;

&lt;p&gt;Jarkko Hietaniemi (Emacs&amp;rsquo; dynamic completion suggested &amp;lsquo;Jarkko Himself&amp;rsquo; for that one. Well, it made &lt;em&gt;me&lt;/em&gt; smile) offered the pathological&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    eval &#39;while(push@a,0){}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as an example of the kind of bad things that can happen if you allow &lt;code&gt;eval EXPR&lt;/code&gt; in your &amp;lsquo;safe&amp;rsquo; code, even with strict rules on what it&amp;rsquo;s allowed to compile (Dan pointed out that quotas would help in this particular case&amp;hellip;)&lt;/p&gt;

&lt;p&gt;If there&amp;rsquo;s one lesson to take from the discussion it&amp;rsquo;s this: Code Safety is Hard. Whether it&amp;rsquo;s AI Hard or not is left as an exercise for the interested reader.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=405FE432.1010607@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=59D9DAFBB46CD51184170002A513650E0A23EF01@rosnt76.ets.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010200bc8638b16f58@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Dan&amp;rsquo;s big(gish) post&lt;/p&gt;

&lt;h4 id=&#34;span-id-uno-universal-network-objects-interface-for-parrot-uno-universal-network-objects-interface-for-parrot-span&#34;&gt;&lt;span id=&#34;UNO_(Universal_Network_Objects)_interface_for_Parrot?&#34;&gt;UNO (Universal Network Objects) interface for Parrot?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce pointed everyone at OpenOffice&amp;rsquo;s Universal Network Objects and wondered if anyone had had a look to see what is needed to plug Parrot into them. And was promptly Warnocked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040324004749.GD26716@dansat.data-plan.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://udk.openoffice.org/&#34;&gt;http://udk.openoffice.org/&lt;/a&gt; &amp;ndash; More on UNO&lt;/p&gt;

&lt;h4 id=&#34;span-id-load-paths-load-paths-span&#34;&gt;&lt;span id=&#34;Load_paths&#34;&gt;Load paths&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In Perl, it&amp;rsquo;s possible to write &lt;code&gt;require Some::Module&lt;/code&gt;, and Perl will go off and hunt for the appropriate file in the various directories in its &lt;code&gt;@INC&lt;/code&gt;. You can do something similar in most languages.&lt;/p&gt;

&lt;p&gt;Right now, you can&amp;rsquo;t do it in Parrot though; Parrot&amp;rsquo;s &lt;code&gt;load_bytecode&lt;/code&gt; and other such ops take filesystem paths so, if things aren&amp;rsquo;t set up exactly as the programmer expects, Bad Things can happen.&lt;/p&gt;

&lt;p&gt;As Dan (and others on IRC and elsewhere I&amp;rsquo;m sure) points out, this is sub optimal. He posted an overview of the issue and a few possible ways forward and asked for comments. There were several. Mostly along the lines of &amp;lsquo;core support for full over the net URIs for bytecode loading would be unutterably Bad&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010208bc87749f2ab5@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-tcl-looking-for-a-few-good-people-tcl-looking-for-a-few-good-people-span&#34;&gt;&lt;span id=&#34;Tcl,_looking_for_a_few_good_people&#34;&gt;Tcl, looking for a few good people&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda&amp;rsquo;s Tcl implementation has apparently reached the point where he&amp;rsquo;d appreciate assistance. He said as much on the list. If you&amp;rsquo;re interested in helping getting a full Tcl implementation that targets Parrot up and running then drop him a line.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=B74E9D35-7DF9-11D8-984D-000A95909DD0@coleda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-ulterior-reference-counting-for-dod-ulterior-reference-counting-for-dod-span&#34;&gt;&lt;span id=&#34;Ulterior_Reference_Counting_for_DoD&#34;&gt;Ulterior Reference Counting for DoD&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Andre Pang pointed the list at a paper on yet another Garbage Collection strategy called &amp;lsquo;Ulterior Reference Counting&amp;rsquo; that looks potentially interesting. However, it turns out that it doesn&amp;rsquo;t quite work that well with Parrot since Parrot guarantees that objects don&amp;rsquo;t move around.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=3F38CC08-7E1F-11D8-AC03-000A95BAC4AE@algorithm.com.au&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-multi-method-dispatch-vtable-functions-in-bytecode-multi-method-dispatch-vtable-functions-in-bytecode-span&#34;&gt;&lt;span id=&#34;Multi_Method_Dispatch_vtable_functions_in_bytecode&#34;&gt;Multi Method Dispatch vtable functions in bytecode&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan announced that he&amp;rsquo;d started adding opcode support for multimethod dispatch. Leo had a bunch of questions with no answers so far.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010203bc88de42bcc6@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-so-that-s-where-jürgen-s-been-so-that-s-where-jürgen-s-been-span&#34;&gt;&lt;span id=&#34;So_that&#39;s_where_Jürgen&#39;s_been&#34;&gt;So that&amp;rsquo;s where Jürgen&amp;rsquo;s been&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;After a long absence, Jürgen Bömmels appeared on the list and explained that he&amp;rsquo;d got a new job, moved to a new town and had had no connection to the Internet. He&amp;rsquo;s currently working through a huge backlog of mail and trying to get familiar with the current state of Parrot. It sounds like it might be a while before he starts contributing patches to ParrotIO again. Still, welcome back Jürgen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m23c7vrh9p.fsf@helium.physik.uni-kl.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrotunit-parrotunit-span&#34;&gt;&lt;span id=&#34;ParrotUnit&#34;&gt;ParrotUnit&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley posted his initial version of ParrotUnit, a port of the xUnit OO testing framework. Warnock applies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m2vfksje9m.fsf@obelisk.bofh.org.uk&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-behaviour-of-pmcs-on-assignment-behaviour-of-pmcs-on-assignment-span&#34;&gt;&lt;span id=&#34;Behaviour_of_PMCs_on_assignment&#34;&gt;Behaviour of PMCs on assignment&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan noted that, right now, binary vtable functions take three arguments, the destination, the left hand side and the right hand side, which allows them to either take the type of the destination into account, or simply to replace it with a new value. The advantage of this approach is that vtable functions have the potential to be more efficient when, say, the left hand side is the same as the destination. The disadvantage is that you have to make a PMC to receive the results of the operation before you can actually do the operation, which can be a pain (and suboptimal). Dan offered 3 different options and asked for opinions.&lt;/p&gt;

&lt;p&gt;TOGoS argued that the 3 argument form was actually the Wrong Thing in general and that vtable methods should simply create a new PMC and replace the destination with it. He argued that this behaviour is what most HLLs expect, and having it would make the compiler&amp;rsquo;s life a great deal easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601021cbc8a43044906@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;They talked about Unicode a good deal, but (per my announcement a few weeks back) I won&amp;rsquo;t be covering those bits.&lt;/p&gt;

&lt;h4 id=&#34;span-id-outer-product-considered-useful-outer-product-considered-useful-span&#34;&gt;&lt;span id=&#34;Outer_product_considered_useful&#34;&gt;Outer product considered useful&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer proposed an &lt;code&gt;outer(*@ranges)&lt;/code&gt; function to allow for what he called &amp;lsquo;dynamically nested loops&amp;rsquo;. He even provided an implementation for it which used a coroutine. As Simon Cozens pointed out, the fact that something as powerful as Luke&amp;rsquo;s proposal can be implemented in (initially buggy) pure Perl 6 with no need for any additions to the language itself is very nice, but really more of a side issue for the time being.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040323000731.GA21533%luke@luqui.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-announcements-acknowledgements-apologies-announcements-acknowledgements-apologies-span&#34;&gt;&lt;span id=&#34;Announcements,_Acknowledgements,_Apologies&#34;&gt;Announcements, Acknowledgements, Apologies&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;No announcements (apart from &amp;ldquo;Look! ParrotUnit! It&amp;rsquo;s jolly good! You should use it and send me patches!&amp;rdquo;) this week. And if you think I&amp;rsquo;m apologizing&amp;hellip;&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at , or drop by my website, maybe I&amp;rsquo;ll &lt;em&gt;really&lt;/em&gt; add some content to it this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-03-21</title>
      <link>http://localhost:1313/pub/2004/03/p6pdigest/20040321.html/</link>
      <pubDate>Sun, 21 Mar 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/03/p6pdigest/20040321.html/</guid>
      <description>

&lt;p&gt;Spring is sprung, the Equinoctal gales seem to have blown themselves out, I&amp;rsquo;m a proud step grandfather and life is generally grand.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;So, what&amp;rsquo;s been going on in perl6-internals?&amp;rdquo; I hear you ask. Let&amp;rsquo;s find out shall we?&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-grabs-sigint-parrot-grabs-sigint-span&#34;&gt;&lt;span id=&#34;Parrot_grabs_SIGINT&#34;&gt;Parrot grabs SIGINT&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;It appears that embedded Parrot tries to do too much. In particular, it grabs signals that its embedder may not want it to deal with. Dan declared that at some point Parrot would have to treat signals as something the embedding environment controls (And the standalone Parrot interpreter becomes just another place where the Parrot core is embedded).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=609A6A46-7420-11D8-8D57-000A95A2734C@fotango.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-unprefixed-global-symbols-unprefixed-global-symbols-span&#34;&gt;&lt;span id=&#34;Unprefixed_global_symbols&#34;&gt;Unprefixed global symbols&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Unhygenic namespaces are bad, mm&amp;rsquo;kay?&lt;/p&gt;

&lt;p&gt;Mitchell N Charity posted the results of doing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ nm ./blib/lib/libparrot.a | egrep &#39; [TDRC] |\.o:&#39; | grep -v
    Parrot_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the results are rather embarrassing. Parrot exports a bunch of symbols that have no Parrot specific prefix, and which have the potential to clash with symbols that the embedder is using for something else. Arthur Bergman agreed that doing something about this would be a jolly good idea and proposed prefixing all externally visible macros, types and functions with &lt;code&gt;Parrot_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There followed some discussion of the prefices that are currently in use within Parrot (there are several); Arthur pointed out that many of them are still worryingly generic and proposed expanding most of the &amp;lsquo;P&amp;rsquo;s in them to a full &amp;lsquo;Parrot&amp;rsquo;. Jeff Clites suggested that it would be a good idea to get the linker to only expose external entry points in the first place, though there are issues of cross platform compatibility to deal with in order to implement that. Dan announced that, despite the potential pain, this would be the way forward.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403141711.i2EHBcN09607@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-faqs-faqs-span&#34;&gt;&lt;span id=&#34;FAQs?&#34;&gt;FAQs?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if anyone was tracking the mailing list and adding questions and (good) answers to the FAQ. Apparently, chromatic has taken this job upon himself, but he confessed that he hadn&amp;rsquo;t actually been doing recently. He&amp;rsquo;s on it though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040315122604.GA6170@dansat.data-plan.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-what-does-0-0-mean-to-you-what-does-0-0-mean-to-you-span&#34;&gt;&lt;span id=&#34;What_does_-0.0_mean_to_you?&#34;&gt;What does &lt;code&gt;-0.0&lt;/code&gt; mean to you?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mitchell N Charity pointed out that PerlNum didn&amp;rsquo;t appear to retaining the sign of zero. (Which, frankly, does my head in every time I think about it; minus zero? What&amp;rsquo;s that then?). Apparently retaining the sign is the Right Thing and, when Mitchell pointed it out, PerlNums were doing the intuitive thing (zero is zero is zero, and the sign&amp;rsquo;s irrelevant). It&amp;rsquo;s what the floating point standard mandates though, so things were changed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403151648.i2FGm5A04234@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-gc-issues-gc-issues-span&#34;&gt;&lt;span id=&#34;GC_issues&#34;&gt;GC issues&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks continues to stress the object stuff (he&amp;rsquo;s working on writing an EBNF parser). He posted a test to the list that led Leo Tötsch to find and fix 3 bugs in the Garbage Collector&amp;rsquo;s DOD phase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403151937.19883.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-will-s-questions-will-s-questions-span&#34;&gt;&lt;span id=&#34;Will&#39;s_questions&#34;&gt;Will&amp;rsquo;s questions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda, who&amp;rsquo;s working on implementing Tcl for Parrot had a few questions. My particular favourite one was &amp;ldquo;Unicode?&amp;rdquo;, which seems to echo a lot of people&amp;rsquo;s feelings on that particular issue.&lt;/p&gt;

&lt;p&gt;Leo answered his questions (the answer to the Unicode one being &amp;ldquo;Needs a lot of work still.&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;In the thread that followed, Gay, Jerry (Or should that be Jerry Gay? What&amp;rsquo;s a Summarizer to do eh?) wondered why you wrote &lt;code&gt;store_global &amp;quot;global&amp;quot;, Pn&lt;/code&gt;, but &lt;code&gt;find_global Pn, &amp;quot;global&amp;quot;&lt;/code&gt;, which he thought was inconsistent. My rule of thumb for this is that the target always comes first on the opcode argument list. Jens Rieks pointed out that opcode arguments are always ordered so that any &lt;code&gt;OUT&lt;/code&gt; arguments come first.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=915CEC7F-7707-11D8-A312-000A95909DD0@coleda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-new-tcl-release-new-tcl-release-span&#34;&gt;&lt;span id=&#34;New_Tcl_release&#34;&gt;New Tcl release&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda announced the latest version of his Tcl interpreter. Judging by the Changelog extract he posted, things are looking very good. You&amp;rsquo;ll find it in the latest Parrots from CVS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=2ED6F516-76F4-11D8-A312-000A95909DD0@coleda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-classes-and-metaclasses-classes-and-metaclasses-span&#34;&gt;&lt;span id=&#34;Classes_and_metaclasses&#34;&gt;Classes and metaclasses&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Larry, Dan and chromatic had a discussion about what&amp;rsquo;s responsible for dispatch and whether Roles are inherited or acquired by some other means. It got rather philosophical (I like philosophy). Dan got the last word.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040316035325.GA4008@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-numeric-weirdness-numeric-weirdness-span&#34;&gt;&lt;span id=&#34;Numeric_weirdness&#34;&gt;Numeric weirdness&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon Glover found a bug in Parrot&amp;rsquo;s string-&amp;gt;number handling. It turns out that the route from &lt;code&gt;-1.2&lt;/code&gt; to a number is different to that from &lt;code&gt;&amp;quot;-1.2&amp;quot;&lt;/code&gt; to a number. Which means that the two resulting numbers don&amp;rsquo;t have the same value. Which is bad.&lt;/p&gt;

&lt;p&gt;It turned out to be down to hysterical reasons from when IMCC just generated parrot assembly and then called parrot to do the actual execution; then parrot would use the same string conversion routines at compile and run time.&lt;/p&gt;

&lt;p&gt;Leo fixed it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=rt-3.0.8-27690-82131.12.435030891164@perl.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-configure-pl-and-the-history-of-the-world-configure-pl-and-the-history-of-the-world-span&#34;&gt;&lt;span id=&#34;Configure.pl_and_the_history_of_the_world&#34;&gt;Configure.pl and the history of the world&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan pointed out that, as the Ponie work goes on, integrating Parrot with Perl 5, we need to get the embedding interface fixed up so that it plays well with others.&lt;/p&gt;

&lt;p&gt;He was also concerned that we seemed to be reinventing perl&amp;rsquo;s &lt;em&gt;Configure.SH&lt;/em&gt; in a horribly piecemeal fashion and suggested that we should just dig all the stuff out in one swell foop. Larry pointed everyone at metaconfig and discussion ensued.&lt;/p&gt;

&lt;p&gt;Quite how metaconfig sits with the &lt;em&gt;miniparrot&lt;/em&gt; based configuration/build plan that Dan&amp;rsquo;s talked about was left as an exercise for the interested reader.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020bbc7d3b29374b@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-method-caching-method-caching-span&#34;&gt;&lt;span id=&#34;Method_caching&#34;&gt;Method caching&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Work continued on making objects more efficient. The object PMC had a good deal of fat/indirection removed, and work started on implementing a method cache. Dan reckoned that the two most useful avenues for exploration were method caching and thunked vtable lookups.&lt;/p&gt;

&lt;p&gt;Zellyn Hunter suggested people take a look at papers on Smalltalk&amp;rsquo;s dispatch system by Googling for [smalltalk cache].&lt;/p&gt;

&lt;p&gt;Mitchell N Charity suggested a couple of possible optimizations (and benchmarks to see if they&amp;rsquo;re worth trying).&lt;/p&gt;

&lt;p&gt;There was some discussion of the costs of creating return continuations. (My personal view is that the current continuation and stacks implementation isn&amp;rsquo;t the Right Thing, but I don&amp;rsquo;t have the C skills to implement what I perceive to be the Right Thing. Which sucks.)&lt;/p&gt;

&lt;p&gt;Leo reckons that, with a method cache and continuation recycling, he&amp;rsquo;s seeing a 300% improvement in speed on the object oriented Fibonacci benchmark.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010208bc7e332acc5c@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010206bc7e29eca1e5@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-icu-incorporation-icu-incorporation-span&#34;&gt;&lt;span id=&#34;ICU_incorporation&#34;&gt;ICU incorporation&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Clites gave everyone a heads up about the work he&amp;rsquo;s doing on a patch to incorporate the use of ICU (the Unicode library Parrot will be using) and some changes to our internal representation of strings. Apparently the changes give us a simpler and faster internal representation, which can&amp;rsquo;t be bad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=FB17458A-783C-11D8-8121-000393A6B9DA@mac.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-continuation-usage-continuation-usage-span&#34;&gt;&lt;span id=&#34;Continuation_usage&#34;&gt;Continuation usage&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks and Piers Cawley both had problems with continuations. Leo Tötsch tried explain what they were doing wrong. There seemed to be a fair amount of talking past each other going on (at least, that&amp;rsquo;s how it felt from my point of view) but I think communication has been established now. Hopefully this will lead to a better set of tests for continuation usage and a better understanding of what they&amp;rsquo;re for and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403181844.29274.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m2znaata3d.fsf@obelisk.bofh.org.uk&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-optimization-in-context-optimization-in-context-span&#34;&gt;&lt;span id=&#34;Optimization_in_context&#34;&gt;Optimization in context&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mitchell Charity argued that we should think carefully before doing too much more optimization of Parrot until we&amp;rsquo;ve got stuff working correctly. Leo agreed, up to a point, but pointed out that optimizing for speed is lot of fun. Brent Royal-Gordon thought that it was a balancing act, some things are painfully slow and need optimizing, at other times, things are painfully none existent and need to be implemented. Objects were both of those things for a while.&lt;/p&gt;

&lt;p&gt;Piers Cawley said that, for all that objects were slow (getting faster), he thought they were rather lovely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403211713.i2LHDDK12504@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-hash-subscriptor-hash-subscriptor-span&#34;&gt;&lt;span id=&#34;Hash_subscriptor&#34;&gt;Hash subscriptor&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;At the back end of the previous week, Larry introduced the idea of subscripting hashes with &lt;code&gt;%hash«baz»&lt;/code&gt; when you mean &lt;code&gt;%hash{&#39;baz&#39;}&lt;/code&gt;. This surprised John Williams (and others I&amp;rsquo;m sure, it certainly surprised me, but it&amp;rsquo;s one of those &amp;ldquo;What? Oh&amp;hellip; that makes a lot of sense&amp;rdquo; type surprises.) Larry explained his thinking on the issue. Apparently it arose because &lt;code&gt;:foo(&#39;bar&#39;)&lt;/code&gt; was too ugly to live, but too useful to die, so &lt;code&gt;:foo«bar»&lt;/code&gt; was invented, and once you have that, it is but a short step to &lt;code&gt;%foo«bar»&lt;/code&gt;. (If you&amp;rsquo;ve not read Exegesis 7, you probably don&amp;rsquo;t know that &lt;code&gt;:foo«bar»&lt;/code&gt; is equivalent to &lt;code&gt;foo =&amp;gt; &#39;bar&#39;&lt;/code&gt;, but you do now.) John wasn&amp;rsquo;t convinced though. It remains to be seen if he&amp;rsquo;s convinced Larry.&lt;/p&gt;

&lt;p&gt;Larry: unfortunately it&amp;rsquo;s an unavoidable part of my job description to decide how people should be surprised.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.33.0403151143160.10623-100000@sharkey.morinda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-mutating-methods-mutating-methods-span&#34;&gt;&lt;span id=&#34;Mutating_methods&#34;&gt;Mutating methods&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Oh lord&amp;hellip; I&amp;rsquo;m really not following this particular thread. The mutating methods thread branched out in different directions that made my head hurt. I *think* we&amp;rsquo;re still getting&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $aString.lc;  # None mutating, returns a new lower case string
    $aString.=lc; # Mutating, makes $aString lower case
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m going to bottle out of summarizing the rest of the thread. Hopefully subthread perpetrators will be kind to an ageing Summarizer and change subject lines to reflect the content of a given subthread. Ta.&lt;/p&gt;

&lt;h4 id=&#34;span-id-some-questions-about-operators-some-questions-about-operators-span&#34;&gt;&lt;span id=&#34;Some_questions_about_operators&#34;&gt;Some questions about operators&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Joe Gottman has been reading Synopsis 3 and had a bunch of questions. Much of the ensuing discussion covered the use of the &amp;lsquo;broken bar&amp;rsquo; glyph as an infix form of the &lt;code&gt;zip&lt;/code&gt; operator. Which I didn&amp;rsquo;t quite realise as I skimmed the thread during the week because courier doesn&amp;rsquo;t seem to distinguish between the broken bar and the standard bar. Larry later suggested using the yen (¥) symbol instead, which has the advantage of looking a little like a zipper. I really hope that firms up from suggestion to design call.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403200148.i2K1mJkG001378@ms-smtp-02-eri0.southeast.rr.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-announcements-acknowledgements-apologies-announcements-acknowledgements-apologies-span&#34;&gt;&lt;span id=&#34;Announcements,_Acknowledgements,_Apologies&#34;&gt;Announcements, Acknowledgements, Apologies&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Whee! I have an announcement! This summary is dedicated to my step grandson, Isaac Stamper, born 2004-03-17T13:13GMT at the RVI in Newcastle. There are (of course) photos online at &lt;a href=&#34;http://www.bofh.org.uk/photos/Isaac/&#34;&gt;http://www.bofh.org.uk/photos/Isaac/&lt;/a&gt;, but you don&amp;rsquo;t have to go and look at them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d also like to apologise to everyone on perl6-internals for my complete inability to post attachments to the list. I hope that those who are interested got to see my first cut at a Parrot implementation of xUnit in the end.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website, maybe I&amp;rsquo;ll add some content to it this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-03-14</title>
      <link>http://localhost:1313/pub/2004/03/p6pdigest/20040314.html/</link>
      <pubDate>Sun, 14 Mar 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/03/p6pdigest/20040314.html/</guid>
      <description>

&lt;p&gt;Another week, another summary. It&amp;rsquo;s been a pretty active week so, with a cunningly mixed metaphor, we&amp;rsquo;ll dive straight into the hive of activity that is perl6-internals.&lt;/p&gt;

&lt;h4 id=&#34;span-id-benchmarking-benchmarking-span&#34;&gt;&lt;span id=&#34;Benchmarking&#34;&gt;Benchmarking&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Discussion and development of Sebastien Riedel&amp;rsquo;s nifty Parrot comparative benchmarking script continued. Leo suggested a handy config file approach which would allow for adding benchmarks in other languages without having to change the script itself.&lt;/p&gt;

&lt;p&gt;The initial results don&amp;rsquo;t look good if you&amp;rsquo;re name&amp;rsquo;s Dan and you want to avoid getting a pie in the face at OSCON though, as Dan pointed out, there&amp;rsquo;s a few tricks still to be played in this area. Anyway, &lt;em&gt;benchmark.pl&lt;/em&gt; is now in the CVS tree if you want to play with it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403080924.i289OAe19538@thu8.leo.home&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-speeling-mistacks-speeling-mistacks-span&#34;&gt;&lt;span id=&#34;Speeling_mistacks&#34;&gt;Speeling mistacks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The ever helpful chromatic applied Bernhard Schmalhofer&amp;rsquo;s patch to fix up an endemic speling mostake in some tests. Apparently DESCRIPTION isn&amp;rsquo;t spelt &amp;ldquo;DECSRIPTION&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1078705129.15254.0.camel@localhost&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-dates-and-times-dates-and-times-span&#34;&gt;&lt;span id=&#34;Dates_and_Times&#34;&gt;Dates and Times&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of parrot&amp;rsquo;s handling of dates and times continued this week too. Joshua Hoblitt who works on DateTime.pm (a very handy base for doing date/time handling in Perl 5, you should check it out) said that the DateTime people really, really want is &amp;ldquo;an epoch that&amp;rsquo;s &lt;em&gt;absolutely&lt;/em&gt; fixed across all platforms.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There was also some discussion of where the opcode/library boundary should be placed, with some arguing that the likes of &lt;code&gt;strftime&lt;/code&gt; should be implemented as opcodes. Melvin Smith responded to this with what seems to me to be a very telling point: &amp;ldquo;If we cannot provide a decently performing VM that makes people want to write stuff in bytecode (or compiled to bytecode) we have failed anyway&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Toward the end of the week, Dan announced some decisions and questions. Larry had a few quibbles, but otherwise there have been no other comments. Personally, if I never hear the phrase &amp;ldquo;leap second&amp;rdquo; again, I&amp;rsquo;ll not be unhappy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=8765dh4voe.wl@badger.wordzoo.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc74cd596e93@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Dan&amp;rsquo;s decisions&lt;/p&gt;

&lt;h4 id=&#34;span-id-alternate-function-calling-scheme-alternate-function-calling-scheme-span&#34;&gt;&lt;span id=&#34;Alternate_function_calling_scheme&#34;&gt;Alternate function calling scheme&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan has come to the view that we need an alternative, light weight, calling convention for calling vtable opcode functions; the idea being that this should speed up objects a tad. He asked for suggestions.&lt;/p&gt;

&lt;p&gt;Leo Tötsch wasn&amp;rsquo;t convinced that we really need special calling conventions, arguing (with numbers) that it would be best to concentrate on speeding up object instantiation by optimizing object layout. Simon Glover agreed with him, noting that simply changing the Array that used to store class, classname and attributes gave him a speedup of around 15% on the object benchmarks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020cbc72593ac4bb@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-summary-correction-summary-correction-span&#34;&gt;&lt;span id=&#34;Summary_Correction&#34;&gt;Summary Correction&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Last week I said that we can&amp;rsquo;t yet do delegated method calls for vtable functions with objects. Leo pointed out that, actually, we can now. Leo also disclaimed any responsibility for helping Brent Royal-Gordon (né Dax?) fix up the support functions for Parrot::Config, though Brent later claimed that he was merely the person doing the typing&amp;hellip;&lt;/p&gt;

&lt;p&gt;Jerome Quelin noted that &lt;em&gt;parrotbug&lt;/em&gt; has already reached version 0.2.1 (I wonder what its version will be when Parrot 1.0.0 gets released).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403082309.i28N9ac17099@thu8.leo.home&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403091942.29818.jquelin@mongueurs.net&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-dead-object-detection-improved-dead-object-detection-improved-span&#34;&gt;&lt;span id=&#34;Dead_Object_Detection_improved&#34;&gt;Dead Object Detection improved&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Not content with his work on everything else this week, Leo has revisited the Garbage Collector and tracked down a couple of bugs including a really nasty sounding one that caused disappearing continuations. He even isolated the problem with a test.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=404D8D7E.4050306@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-rejigging-trace-output-rejigging-trace-output-span&#34;&gt;&lt;span id=&#34;Rejigging_trace_output&#34;&gt;Rejigging trace output&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo&amp;rsquo;s rearranged the output of &lt;code&gt;parrot -t&lt;/code&gt; slightly in an effort to make it more readable. Jens Rieks was impressed and pointed out a couple of issues, which Leo quickly fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=404DDAE7.8030403@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-namespaces-in-imcc-namespaces-in-imcc-span&#34;&gt;&lt;span id=&#34;Namespaces_in_IMCC&#34;&gt;Namespaces in IMCC&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan&amp;rsquo;s day job continues to be a handy driver of Parrot development. This time he needs to make use of namespaces and, whilst namespaces themselves aren&amp;rsquo;t completely nailed down yet, there&amp;rsquo;s enough there that the time has come to work out the syntax for working with them in IMCC. He proposed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .namespace [foo; bar; baz]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as a way of setting the current namespace to &lt;code&gt;foo::bar::baz&lt;/code&gt; (in Perl style, your language may vary). Leo was okay with that as far as it went, but pointed out that things were slightly more complicated than Dan&amp;rsquo;s proposal implied. He suggested that the time was right to sort out the duties of the PIR assembler towards variable names, name mangling, lexical scopes, namespaces, globals and all that good stuff. Dan punted slightly on this latter part, saying that, in general it shouldn&amp;rsquo;t be the assembler&amp;rsquo;s job to track them. The current namespace would simply be used as the namespace in which to place any subsequently defined functions. There was the sound of a hand slapping a forehead from Austria, and Leo went off and implemented it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bc73817cf36b@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-new-library-objecthacks-imc-new-library-objecthacks-imc-span&#34;&gt;&lt;span id=&#34;New_library,_objecthacks.imc&#34;&gt;New library, &lt;em&gt;objecthacks.imc&lt;/em&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In the process of redoing the Parrot Data::Dumper to use objects, Jens Rieks built a library of helper functions to make object usage easier, so he submitted it to the list as a standalone library. Leo checked it in, you can find it at &lt;code&gt;library/objecthacks.imc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403091934.50795.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-implementing-stat-implementing-stat-span&#34;&gt;&lt;span id=&#34;Implementing_stat?&#34;&gt;Implementing &lt;code&gt;stat&lt;/code&gt;?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo Tötsch proposed a &lt;code&gt;stat&lt;/code&gt; opcode for finding out about things in the filesystem. He outlined a proposed interface. Dan agreed that we&amp;rsquo;d need something, but that Leo&amp;rsquo;s proposal was far too unix-centric to work for a cross platform platform like Parrot. He suggested going back to first principles and working out what information would be needed (and possibly available). He also said that one of his guiding principles for Parrot was that he would &amp;ldquo;rather not re-implement and expose 35 years worth of &amp;lsquo;Whoops, that turned out to be a bad idea&amp;rsquo; crud.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Josh Wilmes took this opportunity to remind everyone of the proposed &lt;em&gt;miniparrot&lt;/em&gt; and pointed out that, if we want it to work again, there needs to be a smooth way to exclude opcodes or PMCs that won&amp;rsquo;t work in miniparrot&amp;rsquo;s environment. Dan agreed strongly, reminding everyone that miniparrot is intended to be the basis of Parrot&amp;rsquo;s eventual build system. (The process will go: Platform specific shell script -&amp;gt; miniparrot -&amp;gt; parrot).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=404EF075.8040506@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403101753.i2AHrGYe020044@galactic.hitchhiker.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Don&amp;rsquo;t forget the miniparrot!&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-and-method-calls-imcc-and-method-calls-span&#34;&gt;&lt;span id=&#34;IMCC_and_method_calls&#34;&gt;IMCC and method calls&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;d expanded IMCC&amp;rsquo;s PIR parser a bit, allowing you to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    obj.method(args)
    ret = obj.method(...)
    (retvals) = obj.method(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;method&lt;/code&gt; is a label.&lt;/p&gt;

&lt;p&gt;A couple of hours later Dan posted a design spec for how he wanted method calls to work in IMCC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    object.variable(params)
    object.&amp;quot;literal name&amp;quot;(params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Methods would be declared like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .pcc_sub foo prototyped, method
        .param pmc foo
        .param pmc bar
        ...
    .end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Declaring a method in this way would also create a local &lt;code&gt;self&lt;/code&gt; which points to the object PMC register. What do you know, Leo implemented it all. There is also a more &amp;lsquo;explicit&amp;rsquo; way of making method calls for those occasions when you need more control. Check the docs/examples for details.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=404F3777.9040005@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&amp;ndash; Leo implements at 3pm&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010206bc74fab20f4d@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Dan designs at 5pm&lt;/p&gt;

&lt;h4 id=&#34;span-id-data-dumper-test-version-data-dumper-test-version-span&#34;&gt;&lt;span id=&#34;Data::Dumper_test_version&#34;&gt;Data::Dumper test version&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The excellent Jens Rieks posted a test version of his object oriented version of &lt;code&gt;library/dumper.imc&lt;/code&gt; and asked for comments. (Mine was &amp;ldquo;Wow!&amp;rdquo; but I didn&amp;rsquo;t post it to the list &amp;lsquo;til now). Leo wondered if he should add it to the repository or wait for it to get rejigged to take account of all the improved object syntax changes that had gone into IMCC. Jens told him to hold fire until he&amp;rsquo;d converted everything to the new syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403101412.58065.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-months-that-do-the-right-thing-months-that-do-the-right-thing-span&#34;&gt;&lt;span id=&#34;Months_that_Do_The_Right_Thing&#34;&gt;Months that Do The Right Thing&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan&amp;rsquo;s rejigged the date decoding logic to return months in the range 1-12 instead of 0-11. And there was some rejoicing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc7637281889@%5B10.222.20.224%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-problems-calling-methods-on-self-problems-calling-methods-on-self-span&#34;&gt;&lt;span id=&#34;Problems_calling_methods_on_self&#34;&gt;Problems calling methods on &lt;code&gt;self&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks discovered that he couldn&amp;rsquo;t call &lt;code&gt;self.&amp;quot;method&amp;quot;(...)&lt;/code&gt;, or even compile it for that matter. It turned out to be a problem with the grammar. Steve Fink provided a grammar fix, Leo tracked down a problem with registers not getting preserved properly, and there followed some discussion about the ambiguity of &lt;code&gt;.&lt;/code&gt; being used for both method calls and string concatenation. Luke Palmer suggested (and Melvin Smith agreed) that it was probably better style to use the &lt;code&gt;concat&lt;/code&gt; op anyway.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403111634.23237.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-object-instantiation-initialization-object-instantiation-initialization-span&#34;&gt;&lt;span id=&#34;Object_instantiation/initialization&#34;&gt;Object instantiation/initialization&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan&amp;rsquo;s currently seesawing about how to customize object creation by passing arguments to the constructor function. At present, you create an object by calling the class&amp;rsquo;s &lt;code&gt;init&lt;/code&gt; method, which doesn&amp;rsquo;t take any arguments, and then call an object method with appropriate arguments to do any other setup that&amp;rsquo;s dependent on the arguments if you want to. Dan outlined three ways forward and asked for opinions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010200bc7566408dbf@%5B10.222.20.224%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-ponie-problems-ponie-problems-span&#34;&gt;&lt;span id=&#34;Ponie_problems&#34;&gt;Ponie problems&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted to say that Ponie was having problems when built using Parrot&amp;rsquo;s garbage collection. After some encouragement from Leo, he managed to write a short test case that showed the issue in a few lines of C. Leo proposed a solution, but Nicholas and Arthur Bergman (Ponie&amp;rsquo;s core team) weren&amp;rsquo;t happy with either option. This hadn&amp;rsquo;t been resolved by the end of the week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040311203553.GF12395@plum.flirble.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-why-does-parrot-have-so-many-opcodes-why-does-parrot-have-so-many-opcodes-span&#34;&gt;&lt;span id=&#34;Why_does_Parrot_have_so_many_opcodes?&#34;&gt;Why does Parrot have so many opcodes?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Matt Greenwood wondered why Parrot had so many opcodes, and what the criteria are for adding or deleting ops. Various rationales were offered. Dan&amp;rsquo;s explanation was probably the most comprehensive though. Apparently, Parrot has opcode explosion issues because there&amp;rsquo;s no runtime op variance and if you want to know what that means, read Dan&amp;rsquo;s post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=DB30501EDA9FE34CB686A124032C127E02956E01@mxgbl1.twosigma.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc77666a3dc0@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Dan explains it all&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-grabs-sigint-parrot-grabs-sigint-span&#34;&gt;&lt;span id=&#34;Parrot_grabs_SIGINT&#34;&gt;Parrot grabs SIGINT&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Arthur &amp;ldquo;Poniemaster&amp;rdquo; Bergman noticed that Parrot grabs SIGINT, which makes some of Ponie&amp;rsquo;s signal handling code break. He wondered if this was something that needed fixing, or a deliberate design decision. Dan says that, eventually and by design, Parrot will grab all the signals, though not necessarily in the embedded case (which is what Arthur is using of course.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=609A6A46-7420-11D8-8D57-000A95A2734C@fotango.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-ponie-gets-a-development-release-ponie-gets-a-development-release-span&#34;&gt;&lt;span id=&#34;Ponie_gets_a_development_release&#34;&gt;Ponie gets a development release&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Arthur Bergman has made the second development release of Ponie, the Perl5/Parrot hybrid. The initial response was positive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=EBE5CF35-7445-11D8-8D57-000A95A2734C@nanisky.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-per-class-attribute-offsets-per-class-attribute-offsets-span&#34;&gt;&lt;span id=&#34;Per-class_attribute_offsets&#34;&gt;Per-class attribute offsets&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Peter Haworth had a bunch of questions and worries about using numeric offsets to get at class attributes. Dan tried to reassure him, but Oli came up with a worrying corner case. Dan didn&amp;rsquo;t think it was that big an issue, but confessed that it&amp;rsquo;s still a worry.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=PGM.20040312181417.1806.4266@edison.ioppublishing.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-using-ruby-objects-with-parrot-using-ruby-objects-with-parrot-span&#34;&gt;&lt;span id=&#34;Using_Ruby_Objects_with_Parrot&#34;&gt;Using Ruby Objects with Parrot&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Poor old Dan; once you&amp;rsquo;ve got some bits of objects done, it just means everyone wants more from you. Mark Sparshatt wondered how to handle languages like Ruby, where a class is also an object, which seems to run counter to Parrot&amp;rsquo;s scheme using ParrotClass and ParrotObject PMCs where a ParrotClass isn&amp;rsquo;t a ParrotObject. He suggested three ways forward.&lt;/p&gt;

&lt;p&gt;Summarizing this stuff is Hard. One one level you can reduce the issue to a couple of sentences, but understanding those sentences involves rather a lot of underpinning knowledge that I&amp;rsquo;m not sure I have. I just know that life&amp;rsquo;s an awful lot easier if I can treat classes as objects.&lt;/p&gt;

&lt;p&gt;Dan tried to wrap his head &amp;lsquo;round things and posted a summary of his initial understanding of what a metaclass is. He wondered if we&amp;rsquo;d need to have a &amp;lsquo;call class method&amp;rsquo; operation. Paolo Molaro pointed out that most of this stuff only becomes a real issue when you have to deal with objects implemented in one language calling methods on objects implemented in a different one. Leo Tötsch explained Parrot&amp;rsquo;s current (somewhat confusing to these eyes) hierarchy where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A ParrotClass isa delegate PMC&lt;/li&gt;
&lt;li&gt;A ParrotObject isa ParrotClass&lt;/li&gt;
&lt;li&gt;A HLL class isa ParrotClass and a low-level PMC object&lt;/li&gt;
&lt;li&gt;A HLL object isa all of above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Piers Cawley thought that having ParrotObject inherit from ParrotClass rather than vice versa seemed somewhat perverse. He also argued that method dispatch should be decoupled from method lookup. I think he and Leo failed to communicate.&lt;/p&gt;

&lt;p&gt;Mitchell N Charity was good value on all this as well; definitely worth reading if you&amp;rsquo;re into the theory behind OO should work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4052382E.30108@yahoo.co.uk&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010211bc78efbdadc4@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403141936.i2EJaog10368@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Mitchell N Charity on Objects, Classes and MetaClasses&lt;/p&gt;

&lt;h4 id=&#34;span-id-configure-changes-configure-changes-span&#34;&gt;&lt;span id=&#34;Configure_changes&#34;&gt;Configure changes&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Brent announced that he&amp;rsquo;s been making some significant changes to Configure in the last week or so. He posted a big list. Leo liked what had been done so far, but thought the process needed more steps to probe for more stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4052638F.9020806@brentdax.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-pir-changes-pir-changes-span&#34;&gt;&lt;span id=&#34;PIR_changes&#34;&gt;PIR changes&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;s added some syntactic sugar to PIR; you can now write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $N0 = sin 0
    $I0 = can $P0, &amp;quot;puts&amp;quot;
    $I0 = isa $P0, &amp;quot;scalar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;etc, and they&amp;rsquo;ll be magically converted to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    PARROT_OP lhs[, args]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is rather handy (with some ugly cases: &lt;code&gt;P1 = invoke&lt;/code&gt; being the example Leo came up with).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=405428FD.60608@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-oo-version-of-data-dumper-oo-version-of-data-dumper-span&#34;&gt;&lt;span id=&#34;OO_version_of_Data::Dumper&#34;&gt;OO version of Data::Dumper&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;On Sunday, Jens Rieks released his OO version of Data::Dumper, along with a couple of helper libraries, including a rewritten &lt;em&gt;objecthacks.imc&lt;/em&gt;, now called &lt;em&gt;objects.imc&lt;/em&gt;. Leo committed it (and a followup bugfix) promptly and Parrot now has its first OO application/library. Yay Jens!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403141744.41872.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-magic-blocks-magic-blocks-span&#34;&gt;&lt;span id=&#34;Magic_blocks&#34;&gt;Magic blocks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember last week I implied that magic UPPERCASE blocks for things like &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt; etc were being replaced by properties on variables? Well, I was wrong. We keep magic blocks but we also get handy properties for attaching actions to variables.&lt;/p&gt;

&lt;p&gt;In fact, the handy properties were first discussed in April last year, as Larry pointed out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040309002351.GA10938@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-mutating-methods-mutating-methods-span&#34;&gt;&lt;span id=&#34;Mutating_methods&#34;&gt;Mutating methods&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered about the possibility of mutating and non mutating methods in Perl 6. Consider the Perl 5 functions &lt;code&gt;chomp&lt;/code&gt; and &lt;code&gt;lc&lt;/code&gt;. &lt;code&gt;chomp&lt;/code&gt; potentially modifies its argument, whereas &lt;code&gt;lc&lt;/code&gt; returns a new string. Juerd liked the idea of having mutating and non mutating versions of both &lt;code&gt;chomp&lt;/code&gt; and &lt;code&gt;lc&lt;/code&gt; (and other such string methods). He proposed using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $aString.lc; # Non-mutating
    $aString.=lc; # Mutating
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The general response to this was favourable.&lt;/p&gt;

&lt;p&gt;The thread sparked a discussion of Perl 6 Rules and hypothetical variables (which just makes me hope Damian gets Perl6::Rules written really soon).&lt;/p&gt;

&lt;p&gt;Larry posted a chunk of stuff from the forthcoming Apocalypse 12 that looks rather neat. Then he and Simon Cozens started talking Japanese and my head started spinning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040310163933.GB10971@c4.convolution.nl&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040312200110.GA2793@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Larry tells us more about A12&lt;/p&gt;

&lt;h4 id=&#34;span-id-operators-that-keep-going-and-going-operators-that-keep-going-and-going-span&#34;&gt;&lt;span id=&#34;Operators_that_keep_going_and_going...&#34;&gt;Operators that keep going and going&amp;hellip;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Carissa wondered if Perl 6 would have what she called &amp;lsquo;persistent&amp;rsquo; operators, so that you could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $a = 10;
    my $b = 5;

    my $c = $b + $a;

    print $c; # 15

    $a = 8;

    print $c; # 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several people pointed out that it&amp;rsquo;s already possible to do this sort of thing in Perl 5 so it&amp;rsquo;d be a big surprise if you couldn&amp;rsquo;t do the same thing in Perl 6. (See perldoc overload in the section &amp;ldquo;Really symbolic calculator&amp;rdquo; for details).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=KKEPICKEKBFIGENPCEJIIEKDCAAA.c_nikkel@shaw.ca&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve had it with discussions of whether Unicode&amp;rsquo;s a good idea or not, and from this summary onwards I&amp;rsquo;ll not be including any such discussions unless Larry does an implausible &lt;em&gt;volte face&lt;/em&gt;. That is all.&lt;/p&gt;

&lt;p&gt;Now I can go back to being anxious about my stepdaughter who&amp;rsquo;s been in labour for rather a long time.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website, maybe I&amp;rsquo;ll add some content to it this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-03-07</title>
      <link>http://localhost:1313/pub/2004/03/p6pdigest/20040307.html/</link>
      <pubDate>Sun, 07 Mar 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/03/p6pdigest/20040307.html/</guid>
      <description>

&lt;p&gt;Time marches on, and another summary gets written, sure as eggs are eggs and chromatic is a chap with whom I will never start a sentence. We start, as always, with perl6-internals.&lt;/p&gt;

&lt;h4 id=&#34;span-id-platform-games-platform-games-span&#34;&gt;&lt;span id=&#34;Platform_games&#34;&gt;Platform games&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Work continued this week on expanding the number of known (and preferably known good) platforms in the &lt;em&gt;PLATFORMS&lt;/em&gt; file.&lt;/p&gt;

&lt;h4 id=&#34;span-id-languages-tests-languages-tests-span&#34;&gt;&lt;span id=&#34;Languages_tests&#34;&gt;Languages tests&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan reckons it&amp;rsquo;s time to be a little more aggressive with tests for ancillary stuff, in particular the contents of the &lt;em&gt;languages&lt;/em&gt; subdirectory. He called for language maintainers (and any other interested parties) to at least get minimal tests written for all the languages in the languages directory, and to get those welded to the &lt;code&gt;languages-test&lt;/code&gt; makefile target.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bc68ee3f3f3c@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-and-objects-methods-imcc-and-objects-methods-span&#34;&gt;&lt;span id=&#34;IMCC_and_objects/methods&#34;&gt;IMCC and objects/methods&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce congratulated everyone on Parrot 0.1.0 before asking about where we stood with IMCC and objects/methods. Leo confirmed Tim&amp;rsquo;s supposition that there is no syntactic support for objects and methods in IMCC, at least in part because there&amp;rsquo;s been no discussion of how such syntax should look.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040301110726.GF20958@dansat.data-plan.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrotbug-reaches-0-0-1-parrotbug-reaches-0-0-1-span&#34;&gt;&lt;span id=&#34;Parrotbug_reaches_0.0.1&#34;&gt;Parrotbug reaches 0.0.1&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jerome Quelin responded to Dan&amp;rsquo;s otherwise ignored request for a parrot equivalent of &lt;em&gt;perlbug&lt;/em&gt; when he offered an implementation of &lt;em&gt;parrotbug&lt;/em&gt; for everyone&amp;rsquo;s perusal, but didn&amp;rsquo;t go so far to add it to the distribution. I don&amp;rsquo;t think it&amp;rsquo;s been checked into the repository yet, but it&amp;rsquo;ll probably go in &lt;em&gt;tools/dev/&lt;/em&gt; when it does.&lt;/p&gt;

&lt;p&gt;Later in the week, he actually got it working, sending mail to the appropriate mailing lists. With any luck the mailing lists themselves will be up and running by the time you read this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403012028.13070.jquelin@mongueurs.net&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-subclassing-bug-subclassing-bug-span&#34;&gt;&lt;span id=&#34;Subclassing_bug&#34;&gt;Subclassing bug&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks found what looked like a problem with subclassing, which turned out to be a problem with &lt;code&gt;clone&lt;/code&gt; not going deep enough. Simon Glover tracked it to its den and Dan Sugalski fixed it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403022220.20499.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-good-news-bad-news-good-news-bad-news-span&#34;&gt;&lt;span id=&#34;Good_news!_Bad_news!&#34;&gt;Good news! Bad news!&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Good news! Dan says the infrastructure is in place to do delegated method calls for vtable functions with objects. Bad news! It doesn&amp;rsquo;t actually work because it&amp;rsquo;s impossible to inherit from &lt;em&gt;delegate.pmc&lt;/em&gt; properly. Dan pleaded for someone to take a look at &lt;em&gt;pmc2c2.pl&lt;/em&gt; and or &lt;em&gt;lib/Parrot/Pmc2c.pm&lt;/em&gt; and fix things so that the generated code is heritable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bc6a51c938a5@%5B10.254.6.39%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-m4-updated-parrot-m4-updated-span&#34;&gt;&lt;span id=&#34;Parrot_m4_updated&#34;&gt;Parrot m4 updated&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer posted a patch to improve the Parrot implementation of the m4 macro language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=rt-3.0.8-27316-80413.12.8637727827157@perl.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-use-vim-use-vim-span&#34;&gt;&lt;span id=&#34;Use_vim?&#34;&gt;Use vim?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I don&amp;rsquo;t use vim, but it seems that Leo Tötsch does. He&amp;rsquo;s added some handy dandy vim syntax files for IMC code. If you&amp;rsquo;re a vim user you might like to check it out. Leo points out that the syntax tables might well be handy if you don&amp;rsquo;t know all 1384 opcode variants by heart.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=404450D6.6080306@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrotris-parrotris-span&#34;&gt;&lt;span id=&#34;Parrotris&#34;&gt;Parrotris&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Sadly, Jens Rieks&amp;rsquo; Parrot and SDL implementation of tetris didn&amp;rsquo;t quite make it under the wire for the 0.1.0 release. However, Leo has got round to trying it and is impressed, though he did spot a few bugs (it doesn&amp;rsquo;t spot that the game is over for instance). Jens is working on fixing those (and on adding new features), which he reckons will go a deal faster when IMCC has better syntactic support for OO techniques.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403020948.i229mof18163@thu8.leo.home&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-dates-and-times-dates-and-times-span&#34;&gt;&lt;span id=&#34;Dates_and_Times&#34;&gt;Dates and Times&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;To paraphrase Barbie: Dates and Times are Hard. Not that hardness has ever stopped Dashing Dan Sugalski before. This time he waded into the swamp that is Parrot&amp;rsquo;s handling of dates, times, intervals and all that other jazz. He started by soliciting opinions. He got quite a few.&lt;/p&gt;

&lt;p&gt;The discussion can probably be divided into two camps: KISS (Keep it Simple) people, and DTRT (Do The Right Thing) people. But KISS still has it&amp;rsquo;s complexities (which Epoch do we want? Should time be a floating point value?) and what, exactly, is the Right Thing? The catch is, time is a messily human thing, and computers are really bad at messy humanity.&lt;/p&gt;

&lt;p&gt;Larry said that Dan could do what he wants with Parrot, but he wants Perl 6&amp;rsquo;s standard interface to be a floating point seconds since 2000. He argues that &amp;ldquo;floating point will almost always have enough precision for the task at hand, and by the time it doesn&amp;rsquo;t, it will. :-)&amp;ldquo;. He also argued that normal users &amp;ldquo;should &lt;em&gt;never&lt;/em&gt; have to remember the units of the fractional seconds&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Zellyn Hunter pointed everyone at Dave Rolsky&amp;rsquo;s excellent article on the complexities of handling dates and times with a computer.&lt;/p&gt;

&lt;p&gt;Discussion is ongoing, but it seems that Larry and Dan are leaning towards the KISS approach.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010204bc6bb752bc7c@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.perl.com/pub/2003/03/13/datetime.html&#34;&gt;http://www.perl.com/pub/2003/03/13/datetime.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-initializers-finalizers-and-fallbacks-initializers-finalizers-and-fallbacks-span&#34;&gt;&lt;span id=&#34;Initializers,_finalizers_and_fallbacks&#34;&gt;Initializers, finalizers and fallbacks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Anyone who has been reading the internals list for any length of time, or who has chatted to Dan about Parrot on the #parrot irc channel will be only too aware that Dan isn&amp;rsquo;t the greatest fan of the OO silver bullet. So, getting the initial objects implementation out there was the sort of thing he probably hoped would mean he didn&amp;rsquo;t have to come back to objects for a while. Except, once you&amp;rsquo;ve got part of an object implementation, the need for the rest of it just seems to become more pressing.&lt;/p&gt;

&lt;p&gt;So, poor Dan&amp;rsquo;s been doing more OO stuff. This time he sketched out where he was going with initialization, finalization and fallback method location. The basic idea is that, instead of mandating particular method names for different tasks (which seems like the easy approach, but doesn&amp;rsquo;t work across languages), we mandate particular properties which tag various methods as being initializers/finalizers/fallbacks. He outlined his initial set of standard properties and asked for comments.&lt;/p&gt;

&lt;p&gt;Leo liked the basic idea, but suggested that, in the absence of any such properties on a class&amp;rsquo;s methods, Parrot should fall back to some methods on a delegate PMC.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc6bc09fea71@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-oo-benchmarks-oo-benchmarks-span&#34;&gt;&lt;span id=&#34;OO_Benchmarks&#34;&gt;OO Benchmarks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted the results of a couple of benchmarks. They weren&amp;rsquo;t very encouraging. It seems there was a memory leak. And some inefficiencies in object creation. And some more inefficiencies in object creation. By the end of the mini thread, things had got a good deal faster. Quite where it puts us against Perl 5 and Python wasn&amp;rsquo;t mentioned.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40473F09.8050505@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-dependencies-parrot-dependencies-span&#34;&gt;&lt;span id=&#34;Parrot_dependencies&#34;&gt;Parrot dependencies&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael Scott, who has been doing sterling work on Parrot&amp;rsquo;s documentation wanted to remove some non-modified, non-parrot Perl modules from the Parrot distribution and have people install them from CPAN. Dan disagreed quite strongly. The current rule of thumb is that Parrot is allowed to depend on finding a Perl 5.005_0x distribution and a C compiler. Any Perl modules it needs that can&amp;rsquo;t be found in that distribution should be provided as part of the Parrot distribution.&lt;/p&gt;

&lt;p&gt;Larry argued that we should separate the notion of the developer distribution from the user distribution. The developer codebase is allowed to have any number of external dependencies (&amp;ldquo;dependencies out the wazoo&amp;rdquo; was Larry&amp;rsquo;s chosen phrase), and the (for plural values of &amp;lsquo;the&amp;rsquo;) comes with all the bells and whistles a distributer sees fit to include. He argued that the developer codebase should be completely unusable by anyone but developers to prevent ISPs from installing that and then claiming to &amp;ldquo;support Perl&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=E11D5C7F-6DE9-11D8-869E-000A95C50226@mac.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-vtables-as-collectible-objects-vtables-as-collectible-objects-span&#34;&gt;&lt;span id=&#34;Vtables_as_collectible_objects&#34;&gt;Vtables as collectible objects&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan wondered whether we were going to need to treat vtables as garbage collectible objects, and if we did, what kind of hit that would entail. He and Leo discussed it, and Leo reinvented refcounting as being a possible way to go rather than full DOD type collection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc6cf5235fe9@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-continuing-dumper-improvement-continuing-dumper-improvement-span&#34;&gt;&lt;span id=&#34;Continuing_dumper_improvement&#34;&gt;Continuing dumper improvement&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks added ParrotObject support to his Parrot data dumper. Dan applied it. Go Jens.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200403041914.23770.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-freezing-strings-freezing-strings-span&#34;&gt;&lt;span id=&#34;Freezing_strings&#34;&gt;Freezing strings&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Brent Dax is working on writing a parrot implementation of Parrot::Config. His initial idea for implementation involves generating a PerlHash of configuration info and then freezing it to disk. However, when he tried it he had problems with freezing strings, so he asked for help. It turned out to be a simple matter of unimplemented functions, which he and Leo rapidly implemented. A patch with Brent&amp;rsquo;s implementation appeared shortly afterwards.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40492BAD.5070001@brentdax.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-perl-task-benchmarking-a-perl-task-benchmarking-span&#34;&gt;&lt;span id=&#34;A_Perl_task_-_Benchmarking&#34;&gt;A Perl task - Benchmarking&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo wondered if anyone could implement an equivalent of perlbench for parrot&amp;rsquo;s benchmarks to do speed comparisons of Parrot, Perl, Python etc implementations. Sebastien Riedel delivered the goods.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4049C44F.3000803@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-exegesis-7-exegesis-7-span&#34;&gt;&lt;span id=&#34;Exegesis_7&#34;&gt;Exegesis 7&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Everyone carried on discussing Damian&amp;rsquo;s Exegesis 7 on Perl6::Format, there was even a surprise appearance by Tom Christiansen, who demonstrated a novel, if computationally intractable, approach to generating fully justified text.&lt;/p&gt;

&lt;h4 id=&#34;span-id-multi-matching-multi-matching-span&#34;&gt;&lt;span id=&#34;Multi_matching&#34;&gt;Multi matching&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember last week, Larry had proposed using &lt;code&gt;&amp;amp;&lt;/code&gt; in Perl 6 rules as a way of matching multiple rules at the same point in the string. Damian liked it a lot and said he&amp;rsquo;d be delighted to add support for it to the semi mythical Perl6::Rules module. So, Larry said the word (&amp;ldquo;Execute!&amp;rdquo;, which wasn&amp;rsquo;t quite the word everyone expected) so Damian tugged his forelock and added it to his todo list. Questions like &amp;ldquo;What are the precedence rules for &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; in regular expressions then?&amp;rdquo; haven&amp;rsquo;t been asked yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4044228E.9000702@conway.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-compile-time-undefined-sub-detection-compile-time-undefined-sub-detection-span&#34;&gt;&lt;span id=&#34;Compile-time_undefined_sub_detection&#34;&gt;Compile-time undefined sub detection&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Sandever wondered if Perl 6 will be able to detect undefined subs at compile time. Larry thought it would be in theory, if you ask it to check in a &lt;code&gt;CHECK&lt;/code&gt; block, and you&amp;rsquo;re prepared to assume that no &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;INIT&lt;/code&gt; block will fill in the blank later, and there&amp;rsquo;s no &lt;code&gt;AUTOLOAD&lt;/code&gt; that might catch it. Sounds rather a like &amp;ldquo;Not in the general case, no&amp;rdquo; to me.&lt;/p&gt;

&lt;p&gt;Bringing &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; up prompted Rafael Garcia-Suarez to ask what the rules would be for them in Perl 6 because they&amp;rsquo;re pretty broken in Perl 5. (Sometimes you want &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; semantics to work well when you&amp;rsquo;re loading a module at runtime, and Perl 5 doesn&amp;rsquo;t do that). It looks like he&amp;rsquo;s going to get his heart&amp;rsquo;s desire on this (A big &amp;ldquo;Yay!&amp;rdquo; from the direction of Gateshead). Dan Sugalski popped over from perl6-internals to point out that Parrot would be using properties rather than specifically named blocks for this sort of stuff.&lt;/p&gt;

&lt;p&gt;Larry eventually made a ruling which uses properties in a rather cunning fashion. Check his message for the details.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1103_1078441478@nntp.perl.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040307023944.GA27527@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Larry on magic blocks&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Crumbs, another Monday night, another summary finished. I&amp;rsquo;ve got to be careful here, it might by habit forming.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-02-29</title>
      <link>http://localhost:1313/pub/2004/02/p6pdigest/20040229.html/</link>
      <pubDate>Sun, 29 Feb 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/02/p6pdigest/20040229.html/</guid>
      <description>

&lt;p&gt;Welcome to the leapday summary. We&amp;rsquo;ll crack straight on with perl6-internals&lt;/p&gt;

&lt;h4 id=&#34;span-id-running-up-to-release-time-running-up-to-release-time-span&#34;&gt;&lt;span id=&#34;Running_up_to_release_time&#34;&gt;Running up to release time&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;As Leapday had been chosen as the release date for Parrot 0.1.0, the week was mostly spent getting things ready for release. A case in point was the &lt;em&gt;PLATFORMS&lt;/em&gt; file which lists those platforms on which Parrot is known to compile and run, which (at the beginning of the week) was short several platforms and generally out of date. So everyone manned the pumps and sent in reports of success and failure. BTW, if you manage to get Parrot up and running (or even partially up and limping) on a platform that&amp;rsquo;s not listed in &lt;em&gt;PLATFORMS&lt;/em&gt; then perl6-internals@perl.org would be very pleased to hear from you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4039C81F.1090108@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-objects-and-time-objects-and-time-span&#34;&gt;&lt;span id=&#34;Objects_and_time&#34;&gt;Objects and time&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan announced that he&amp;rsquo;d trodden on one of the nasty bits of objects; the proper ordering of classes for initialization and destruction in the face of multiple inheritance. He announced that he was in the process of actively ignoring it for the time being and canvassed opinions about whether to delay the Leapday release in favour of fully specced/implemented objects or whether to make the 29th without objects, or some other choice. In the end we decided to still aim for the 29th, with objects in a 90% there state, but with big &amp;lsquo;HERE BE DRAGONS&amp;rsquo; warnings plastered on the tricky edge cases. A little later Dan announced what would be there for the release (Multiple inheritance, attributes, object instantiation and method calls) and what wouldn&amp;rsquo;t (monkeying with some things after subclassing/instantiation, method redispatch and fancy namespace lookups).&lt;/p&gt;

&lt;p&gt;As the week progressed, objects inched closer and closer to readiness, though at least one summarizer&amp;rsquo;s heart was in his mouth as the week ebbed away. Would Dan get everything he&amp;rsquo;d promised working before the deadline? Tune in later on to find out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc5fcbfaeb19@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc5fd8fef7f7@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-feature-freeze-feature-freeze-span&#34;&gt;&lt;span id=&#34;Feature_Freeze&#34;&gt;Feature Freeze&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;On Wednesday, Leo Tötsch announced a feature slush (patches to add OO features were still being accepted) in anticipation of a release. The patch rate increased as people got on with fixing up failing tests on various platforms, improving documentation, and improving OO functionality. Not all the object patches were from Dan; chromatic got in on the act with a couple of tweaks to &lt;em&gt;parrotobject.pmc&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=403C647E.5070407@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-native-pbc-issues-native-pbc-issues-span&#34;&gt;&lt;span id=&#34;Native_PBC_issues&#34;&gt;Native PBC issues&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;It turns out that, just at the moment, Parrot bytecode isn&amp;rsquo;t actually platform independent. This will, of course, get fixed, but it&amp;rsquo;s not Leo&amp;rsquo;s top priority at present. He asked people who are running Parrot on 64 bit and Big endian architectures to submit &lt;em&gt;native_pbc&lt;/em&gt; test files (if you&amp;rsquo;re on such an architecture, take a look at &lt;em&gt;t/native_pbc/*.t&lt;/em&gt; for instructions, and the Parrot community will thank you for it).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=403C82A7.5050806@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-object-questions-object-questions-span&#34;&gt;&lt;span id=&#34;Object_Questions&#34;&gt;Object Questions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon Glover did some sterling work exercising the Object documentation and implementation, posting several bug reports and questions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.GSO.4.43.0402251338310.19034-100000@egg.amnh.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.GSO.4.43.0402251651500.27206-100000@egg.amnh.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-ladies-and-gentleman-objects-ladies-and-gentleman-objects-span&#34;&gt;&lt;span id=&#34;Ladies_and_Gentleman:_Objects!&#34;&gt;Ladies and Gentleman: Objects!&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;On Wednesday, several full days before the release date, Dan announced that objects were done (well, everything that he promised would work did) and asked for people to start &amp;lsquo;abusing it heavily&amp;rsquo;. Which they promptly did. There was applause too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020cbc62e5fe9c0a@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-next-on-the-hit-list-next-on-the-hit-list-span&#34;&gt;&lt;span id=&#34;Next_on_the_hit_list&#34;&gt;Next on the hit list&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Having got objects up, Dan immediately posted a list of desiderata for the next release but one. Is there no stopping him?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010206bc63b462c8e4@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-today-we-have-naming-of-parts-today-we-have-naming-of-parts-span&#34;&gt;&lt;span id=&#34;Today_we_have_naming_of_parts&#34;&gt;Today we have naming of parts&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will the madness never stop?&lt;/p&gt;

&lt;p&gt;Mitchell Charity spoke for everyone when he posted an extract from PDD15:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    What .NET calls an attribute parrot calls a property
    What .NET calls a property parrot calls an attribute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everyone shared the pain, though Paolo Molaro pointed out that it&amp;rsquo;s not exactly accurate and the .NET name for a parrot attribute is &amp;lsquo;field&amp;rsquo; (which is yet another term with wide variety of meanings when you think about it). Not being the biggest OO fan in the world, Dan swears he&amp;rsquo;s just going to rename them Fred and Barney but not tell anyone which is which.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402262229.i1QMTrk13310@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-languages-status-updates-languages-status-updates-span&#34;&gt;&lt;span id=&#34;LANGUAGES.STATUS_updates&#34;&gt;LANGUAGES.STATUS updates&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mitchell also pointed out that &lt;em&gt;LANGUAGES.STATUS&lt;/em&gt; was out of date and several languages which were supposed to be okay failed to work on his system. He asked for feedback to get it updated correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402280612.i1S6CSF32360@vendian.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-inconsistent-parrot-imcc-behaviour-inconsistent-parrot-imcc-behaviour-span&#34;&gt;&lt;span id=&#34;Inconsistent_Parrot/IMCC_behaviour&#34;&gt;Inconsistent Parrot/IMCC behaviour&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Gregor Purdy found that Parrot was doing different things with the .pasm file generated from an .imc file by IMCC than it was when it ran the .imc file directly. Melvin Smith and Leo both agreed that it was a bug, but it&amp;rsquo;s very hard to fix with the current incarnation of IMCC. IMCC2 should (will) fix the issue. Leo provided a workaround to fix the generated .pasm though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1077956570.15543.4.camel@borg.focusresearch.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-kakapo-leaps-the-kakapo-leaps-span&#34;&gt;&lt;span id=&#34;The_Kakapo_leaps&#34;&gt;The Kakapo leaps&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Yay! Parrot 0.1.0 &amp;ldquo;Leaping Kakapo&amp;rdquo; got released at 2004022913:45:49 GMT. This is a big release, with Objects and multi-threading as well as a major documentation overhaul and a bunch of other good stuff. Anyone who suggests that I&amp;rsquo;m only really excited by this particular release because I came up with the code name.&lt;/p&gt;

&lt;p&gt;Pointing out that the Kakapo is a flightless, nearly extinct species of parrot is considered unsporting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4041FB1D.4030304@toetsch.at&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-perl-6-when-perl-6-when-span&#34;&gt;&lt;span id=&#34;Perl_6?_When?&#34;&gt;Perl 6? When?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman noted that Apocalypse 1 was published in 2001, and it made mention of Apocalypse 26. And we&amp;rsquo;ve seen all of six apocalypses. He wondered if there was anything that could be done to increase the apocalypse rate. As chromatic pointed out, no plan survives first contact with the enemy; it turns out that a lot of the theoretical apocalypses (one apocalypse per chapter of Programming Perl), aren&amp;rsquo;t actually necessary for specifying the language to the point where we can start implementing.&lt;/p&gt;

&lt;p&gt;Larry also answered Aaron&amp;rsquo;s concerns and noted that last year he had to take half a year off &amp;lsquo;to participate in various non-optional gastric revisions&amp;rsquo;. He quickly discussed the outstanding chapters and RFCs and pointed out that a large amount of the work had already been done. Which is nice.&lt;/p&gt;

&lt;p&gt;Larry also showed us his outline of Apocalypse 12 which is apparently about a week away from the first alpha for the sixcabal. It looks rather promising (and it&amp;rsquo;s rather easy to see why it&amp;rsquo;s taken so long).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1077816664.1292.130.camel@pps&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040226192647.GA11151@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Larry&amp;rsquo;s big plan&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040226194426.GB11151@wall.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Apocalypse 12 outline&lt;/p&gt;

&lt;h4 id=&#34;span-id-thinking-about-accessors-thinking-about-accessors-span&#34;&gt;&lt;span id=&#34;Thinking_about_accessors&#34;&gt;Thinking about accessors&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;John Williams wondered about how accessors will work with Perl 6 objects. In particular he wondered about cases like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $foo.bar_attr += $z;
    $foo.bar_attr++;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things got a little complicated, indeed Larry muttered that there would be a delay to A12 because John had asked him to explain something that he hadn&amp;rsquo;t figured out yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.33.0402271931010.24668-100000@sharkey.morinda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-an-interesting-matching-problem-an-interesting-matching-problem-span&#34;&gt;&lt;span id=&#34;An_interesting_matching_problem&#34;&gt;An interesting matching problem&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Austin Hastings came up with a neat little problem for matching. Consider an instrumented string class which carries information like &amp;lsquo;bold&amp;rsquo; and &amp;lsquo;italic&amp;rsquo; or even the language of a substring. How would you write a search to match all the letters &amp;lsquo;l&amp;rsquo; in french text. (Not a very realistic problem I know, but you&amp;rsquo;ll have to bear with me).&lt;/p&gt;

&lt;p&gt;Larry responded with a neat idea involving &lt;code&gt;&amp;amp;&lt;/code&gt;, so you would write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   /[l &amp;amp; &amp;lt;french&amp;gt;]/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where french is presumably a block rule that makes a method call on the appropriate character.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=OIEJIIJJCGOEMIJDBHAOAEIJCAAA.Austin_Hastings@Yahoo.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-exegesis-7-exegesis-7-span&#34;&gt;&lt;span id=&#34;Exegesis_7&#34;&gt;Exegesis 7&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Damian&amp;rsquo;s Exegesis 7, dealing with the replacement for Perl 5&amp;rsquo;s format, was published on Thursday. It&amp;rsquo;s jolly good. Really. And you can use it now if you grab Perl6::Form from CPAN. This threw up a pile of questions about ambiguities, edge cases and all the other stuff that p6l does so well. The version of the exegesis at perl.com has already been updated to take some of these issues into account.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.perl.com/pub/2004/02/27/exegesis7.html&#34;&gt;http://www.perl.com/pub/2004/02/27/exegesis7.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Whee! The Summary goes to the mailing lists before midnight on Monday. &amp;ldquo;Will I be able to keep up this dizzy pace?&amp;rdquo; I ask myself.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;x&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-02-22</title>
      <link>http://localhost:1313/pub/2004/02/p6pdigest/20040222.html/</link>
      <pubDate>Sun, 22 Feb 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/02/p6pdigest/20040222.html/</guid>
      <description>

&lt;h4 id=&#34;span-id-loading-bytecode-at-runtime-loading-bytecode-at-runtime-span&#34;&gt;&lt;span id=&#34;Loading_bytecode_at_runtime&#34;&gt;Loading bytecode at runtime&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Last week Dan had specced out the rules for runtime loading of bytecode. This week, Leo Tötsch started implementing it. There was a certain amount of quibbling about syntax, but that was quickly sorted out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402200842.i1K8g4F15344@thu8.leo.home&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-objects-objects-span&#34;&gt;&lt;span id=&#34;Objects&#34;&gt;Objects&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan continued his work on objects and on sorting out method resolution niggles. Getting ahead of myself slightly, he finished it this week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010208bc581095417f@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-obfuscated-parrot-obfuscated-parrot-span&#34;&gt;&lt;span id=&#34;Obfuscated_Parrot&#34;&gt;Obfuscated Parrot&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I reproduce this product of Leo Tötsch&amp;rsquo;s warped brane without comment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     bounds 1
     trace 0
     split P0, &#39;&#39;, &amp;quot;\nrekcaH torraP rehtona tsuJ&amp;quot;
     add I1, 3
     add I2, 4
     branch I2
     pack S23, 793, I1, I0
     branch I2
     add I2, 382, I1
     branch I2
     new S23, 911, I0, I0
     branch I1
     transcode S23, S0, -19
     end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, to compound things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    bounds 1
    trace 0
    newclass P0, &amp;quot;Just another Parrot Hacker\n&amp;quot;
    shift S0, P5
    does I0, P0, S0
    add I0, 4
    bsr I0
    pack S0, 381, I0, I0
    invoke
    ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look, OO badness&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40309141.1030003@toetsch.at&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402161324.i1GDOgu07546@thu8.leo.home&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-io-fixes-for-win32-io-fixes-for-win32-span&#34;&gt;&lt;span id=&#34;IO_fixes_for_Win32&#34;&gt;IO fixes for Win32&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I must confess I didn&amp;rsquo;t understand the details of the discussion, but Goplat, Vladimir Lipsky and Melvin Smith spent some time working on IO issues under Win32.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040216191018.52351.qmail@web20809.mail.yahoo.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-dumper-updated-parrot-dumper-updated-span&#34;&gt;&lt;span id=&#34;Parrot_Dumper_updated&#34;&gt;Parrot Dumper updated&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks continued his sterling work on a Parrot Data::Dumper equivalent, posting a new version that does bounds checking and PMC property dumping. A later refinement added support for self referential data structures and other edge cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402161908.40001.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-configscript3-configscript3-span&#34;&gt;&lt;span id=&#34;ConfigScript3&#34;&gt;ConfigScript3&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;TOGoS announced a new language targetting Parrot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040217011132.40119.qmail@web41411.mail.yahoo.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://togos.dhs.org/projects/configscript3/&#34;&gt;http://togos.dhs.org/projects/configscript3/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-symbol-naming-and-imcc2-symbol-naming-and-imcc2-span&#34;&gt;&lt;span id=&#34;Symbol_naming_and_IMCC2&#34;&gt;Symbol naming and IMCC2&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan ruled on the symbol naming issue discussion. Essentially, if your symbol includes a sigil, you&amp;rsquo;re not going to be able to use it directly. Learn to love symbol tables and &lt;code&gt;.alias&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010209bc58266e6075@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-todo-parrotbug-todo-parrotbug-span&#34;&gt;&lt;span id=&#34;TODO:_parrotbug&#34;&gt;TODO: &lt;code&gt;parrotbug&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan asked for someone to implement a &lt;code&gt;parrotbug&lt;/code&gt; script to handle building and possibly sending the bug reports into RT. The script should work in a similar way to perlbug, appending configuration information etc to any bug report.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020cbc5838c4acab@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-todo-forth-as-a-compiler-todo-forth-as-a-compiler-span&#34;&gt;&lt;span id=&#34;TODO:_Forth_as_a_compiler&#34;&gt;TODO: Forth as a compiler&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan asked for a volunteer to fix &lt;em&gt;forth.pasm&lt;/em&gt; so that it can be loaded in as a compiler module, allowing one to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    compile P5, ForthCompiler, &amp;quot;1 2 + .&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and have it print out 3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bc5a61a7ddc0@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-documentation-tasks-documentation-tasks-span&#34;&gt;&lt;span id=&#34;Documentation_tasks&#34;&gt;Documentation tasks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Taking time out to heap praise on the deserving Michael Scott, Dan outlined a few documentation jobs that need to be done (hopefully) before the next Parrot release.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010207bc5a93a41f3d@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-sdl-goodness-sdl-goodness-span&#34;&gt;&lt;span id=&#34;SDL_goodness&#34;&gt;SDL goodness&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The work on SDL support continued apace, with chromatic checking in several SDL related fixes and enhancements.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1077165919.24319.72.camel@localhost&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1077166499.24310.78.camel@localhost&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-day-at-the-austrian-perl-workshop-parrot-day-at-the-austrian-perl-workshop-span&#34;&gt;&lt;span id=&#34;Parrot_Day_at_the_Austrian_Perl_Workshop&#34;&gt;Parrot Day at the Austrian Perl Workshop&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Klausner announced that this year&amp;rsquo;s Austrian Perl Workshop would have a Parrot Day, with a tutorial from Leo Tötsch and hopefully some other good stuff from Parrot luminaries. Thomas also asked for people to submit talk ideas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040220015102.GL2974@zsi.at&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vienna.pm.org/en_workshop.html&#34;&gt;http://vienna.pm.org/en_workshop.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-sdl-parrot-tetris-sdl-parrot-tetris-span&#34;&gt;&lt;span id=&#34;SDL_+_Parrot_=_Tetris&#34;&gt;SDL + Parrot = Tetris&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks announced the alpha of an implementation of tetris in Parrot using SDL for the display. Yay Jens! Mmm&amp;hellip; a time sink&amp;hellip; just what the Parrot developers need.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402200407.43622.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-first-international-workshop-on-interpreted-languages-the-first-international-workshop-on-interpreted-languages-span&#34;&gt;&lt;span id=&#34;The_First_International_Workshop_on_Interpreted_Languages&#34;&gt;The First International Workshop on Interpreted Languages&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan pointed us all at the First International Workshop on Interpreted Languages&amp;rsquo; Call for Papers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010207bc5c09cf7874@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sebastian-bergmann.de/InterpretedLanguages2004/&#34;&gt;http://www.sebastian-bergmann.de/InterpretedLanguages2004/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-languages-meanwhile-in-perl6-languages-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-languages&#34;&gt;Meanwhile, in perl6-languages&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-traits-roles-traits-roles-span&#34;&gt;&lt;span id=&#34;Traits/Roles&#34;&gt;Traits/Roles&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I know I&amp;rsquo;ve had this feeling of déjà vu before, but I&amp;rsquo;ve spelt it right this time. Discussion of Roles continued this week. If I never read another discussion of the difference between &lt;code&gt;Dog::bark&lt;/code&gt; and &lt;code&gt;Tree::bark&lt;/code&gt; again, it&amp;rsquo;ll be too soon.&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-sort-problem-the-sort-problem-span&#34;&gt;&lt;span id=&#34;The_Sort_Problem&#34;&gt;The Sort Problem&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The other topic of discussion this week covered sorting. It looks as though Perl 6&amp;rsquo;s &lt;code&gt;sort&lt;/code&gt; function is going to be rather more powerful than the Perl 5 equivalent; hopefully this means Perl 6 will finally see the back of code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    map  { $_-&amp;gt;[0] }
    sort { $a-&amp;gt;[1] &amp;lt;=&amp;gt; $a-&amp;gt;[1] }
    map  { [$_, extract_key_from($_) } @array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damian&amp;rsquo;s post on the subject, referenced below, looks like the front runner. It&amp;rsquo;s worth reading if you&amp;rsquo;re interested in sort itself or if you&amp;rsquo;re interested in how Perl 6&amp;rsquo;s multi dispatch will work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=402FF9E1.90403@conway.org&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-allison-randal-is-the-new-project-manager-allison-randal-is-the-new-project-manager-span&#34;&gt;&lt;span id=&#34;Allison_Randal_is_the_new_Project_Manager&#34;&gt;Allison Randal is the new Project Manager&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Nat Torkington announced that he&amp;rsquo;s managed to pass the Perl 6 Project Manager hat on to Allison Randal&amp;rsquo;s increasingly be-hatted head. Congratulations and commiserations to Nat and Allison. I&amp;rsquo;ll leave it up to you to decide who gets which.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=94D27CCA-6319-11D8-811E-0003938ADEFE@oreilly.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Um&amp;hellip; I&amp;rsquo;m late. Sorry.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-02-15</title>
      <link>http://localhost:1313/pub/2004/02/p6pdigest/20040215.html/</link>
      <pubDate>Sun, 15 Feb 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/02/p6pdigest/20040215.html/</guid>
      <description>

&lt;p&gt;In his talk on Parrot at OSCON last year, Dan said that Parrot would have objects &amp;lsquo;by the end of the week&amp;rsquo;. It&amp;rsquo;s been a very long week, and it&amp;rsquo;s not finished yet.&lt;/p&gt;

&lt;p&gt;Right, venting over, time for the summary. I&amp;rsquo;ll start with perl6-internals, as always. Actually, we&amp;rsquo;re starting slightly before the usual start of the week because about half an hour after I sent last week&amp;rsquo;s summary off I realised I&amp;rsquo;d completely missed a couple of threads.&lt;/p&gt;

&lt;h4 id=&#34;span-id-some-minor-decisions-and-timetables-some-minor-decisions-and-timetables-span&#34;&gt;&lt;span id=&#34;Some_minor_decisions_and_timetables&#34;&gt;Some minor decisions and timetables&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan made a few design decisions and outlined a release timetable for the next release of Parrot (which was initially set to be Valentine&amp;rsquo;s Day, but the appeal of February 29th for a Leap Parrot release proved to be greater).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc459600096b@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-why-didn-t-i-mention-this-last-week-why-didn-t-i-mention-this-last-week-span&#34;&gt;&lt;span id=&#34;Why_didn&#39;t_I_mention_this_last_week?&#34;&gt;Why didn&amp;rsquo;t I mention this last week?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks earns a &amp;ldquo;Wow, cool!&amp;rdquo; from me with his parrot version of Data::Dumper. Way to go Jens. People were impressed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402051301.35111.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-supporting-simple-pmcs-as-keys-supporting-simple-pmcs-as-keys-span&#34;&gt;&lt;span id=&#34;Supporting_simple_PMCs_as_keys&#34;&gt;Supporting simple PMCs as keys&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Stéphane Payrard posted a patch to support using simple PMCs instead of full on key PMCs for simple lookups. He and Leo discussed it, but the patch hasn&amp;rsquo;t been accepted yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040209192126.GB17703@stefp.dyndns.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-keyed-access-to-unmanagedstruct-keyed-access-to-unmanagedstruct-span&#34;&gt;&lt;span id=&#34;Keyed_access_to_UnManagedStruct&#34;&gt;Keyed access to UnManagedStruct&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Everyone&amp;rsquo;s favourite differently capitalized O&amp;rsquo;Reilly employee, chromatic (Maybe the new running joke should be my struggles to avoid using his name at the start of a sentence so we don&amp;rsquo;t have a falling out cases), continued his discussion with Leo about keyed access to Unmanaged (and presumably managed) C structs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1076360871.2575.2.camel@localhost&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1076389270.15055.2.camel@localhost&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&amp;ndash; An example of chromatic&amp;rsquo;s problem&lt;/p&gt;

&lt;h4 id=&#34;span-id-backward-branch-fixed-backward-branch-fixed-span&#34;&gt;&lt;span id=&#34;Backward_branch,_fixed&#34;&gt;Backward branch, fixed&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember the problem with a backward branch that I said was Warnocked last week. It turned out that it was fixed before I posted the summary. They don&amp;rsquo;t call Leo Tötsch the Patchmonster for nothing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402101351.i1ADpGQ20266@thu8.leo.home&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-system-parrot-system-span&#34;&gt;&lt;span id=&#34;Parrot_system&#34;&gt;Parrot &lt;code&gt;system&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan apologized for his recent silence on list, but thought he&amp;rsquo;d be more active from now on. He also announced that he was in the process of adding in perl 5 style &lt;code&gt;system&lt;/code&gt; support&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc4ef0a3aa78@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-sort-parrot-sort-span&#34;&gt;&lt;span id=&#34;Parrot_sort&#34;&gt;Parrot sort&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks garnered more kudos with his implementation of a simple _sort function in IMC. Leo checked it in, and you&amp;rsquo;ll find it in &lt;em&gt;library/sort.imc&lt;/em&gt; in an up to date CVS distribution. Then, seemingly in his spare time, he fixed up some SDL related stuff for chromatic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402111311.04736.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-rfd-symbol-naming-and-imcc2-rfd-symbol-naming-and-imcc2-span&#34;&gt;&lt;span id=&#34;RFD:_Symbol_naming_and_IMCC2&#34;&gt;RFD: Symbol naming and IMCC2&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith posted a Request For Discussion about how IMCC2 will handle symbols and sigils. The issue seems to be that, for humans writing code, quoting symbols is a pain. Various options were suggested, but nothing appears to have been decided yet. (I quite like Leo&amp;rsquo;s suggestion involving declaring lexicals with a mangled name for use in parrot, but marking it as being associated with an &lt;code&gt;$unmangled_original_name&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20040211121042.09c2e500@pop.mindspring.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-jit-and-branches-under-the-sun-jit-and-branches-under-the-sun-span&#34;&gt;&lt;span id=&#34;JIT_and_branches_under_the_Sun&#34;&gt;JIT and branches under the Sun&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Stephane Peiry found with the JIT on Suns; it seems that a loop that should terminate carries on forever instead. He and Leo worked on tracking it down, but the bug was still there by the end of the week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040212210728.GA1436@pittypanda&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-rules-for-method-resolution-rules-for-method-resolution-span&#34;&gt;&lt;span id=&#34;Rules_for_method_resolution?&#34;&gt;Rules for method resolution?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Okay, so I may have kvetched about the continuing lack of Parrot objects earlier, but Dan&amp;rsquo;s definitely working on it. This time he&amp;rsquo;s thinking about method resolution. In particular he wondered when&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   findmethod P4, Pobject, &amp;quot;methodname&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should do the name resolution. In other words, should P4 contain the method that was current at the time of the &lt;code&gt;findmethod&lt;/code&gt; call, or a proxy PMC that waits until the method is invoked to find the appropriate method. The discussion seemed to come down in favour of doing both.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010204bc52aa01e263@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-object-spec-object-spec-span&#34;&gt;&lt;span id=&#34;Object_spec&#34;&gt;Object spec&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan noted that he&amp;rsquo;d checked in some major revisions to PDD15 (objects!) and suggested that people take a look. Simon Glover, Leo Tötsch and LF had questions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020bbc52f88649a7@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile_in_perl6-language&#34;&gt;Meanwhile in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-the-thread-that-ate-the-mailing-list-the-thread-that-ate-the-mailing-list-span&#34;&gt;&lt;span id=&#34;The_thread_that_ate_the_mailing_list&#34;&gt;The thread that ate the mailing list&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer doesn&amp;rsquo;t like the repetition inherent in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   @sorted = sort { $^a.foo(&#39;bar&#39;).compute &amp;lt;=&amp;gt; $^b.foo(&#39;bar&#39;).compute }
               @unsorted;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He wondered if there might be some way of rejigging &lt;code&gt;sort&lt;/code&gt; to eliminate the duplication and proposed a couple of spectacularly ugly possibilities. And then the world exploded. It seems that nobody (on perl6-language) actually likes the current signature of &lt;code&gt;sort&lt;/code&gt;, but nobody can quite agree on what it &lt;em&gt;should&lt;/em&gt; look like. You know things are getting hand when Dan proposes just using SQL&amp;rsquo;s &lt;code&gt;ORDER BY&lt;/code&gt; syntax (even though he was joking). Simon &amp;ldquo;Rubyometer&amp;rdquo; Cozens proposed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   @sorted = @unsorted.sort(op =&amp;gt; &amp;amp;infix:&amp;lt;=&amp;gt;, 
                            key =&amp;gt; { $^a.foo(&#39;bar&#39;).compute });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which, I have to confess, I rather like. Rod Adams demonstrated a truly painful looking sort function which this summary is too succinct to contain, see the link for details.&lt;/p&gt;

&lt;p&gt;Personally, I&amp;rsquo;m amazed that a single library function could generate so much discussion. And there&amp;rsquo;s more to come next week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040212031134.GA16797@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040213041440.28310.qmail@web40802.mail.yahoo.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=402EA18A.40604@rodadams.net&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&amp;ndash; Feel Rod&amp;rsquo;s pain.&lt;/p&gt;

&lt;h4 id=&#34;span-id-haven-t-i-had-this-feeling-of-déja-vù-before-haven-t-i-had-this-feeling-of-déja-vù-before-span&#34;&gt;&lt;span id=&#34;Haven&#39;t_I_had_this_feeling_of_déja_vù_before?&#34;&gt;Haven&amp;rsquo;t I had this feeling of déja vù before?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dmitry Dorofeev pointed everyone at Scharli et al&amp;rsquo;s paper on Smalltalk Traits and proposed that Perl 6 use something similar. Which is what Larry proposed a few weeks back, except he called Traits Roles and propose that they also have (or mandate) state (the original Smalltalk Traits are stateless). Aaron Sherman wondered if the Emperor was actually wearing clothes by saying that Roles didn&amp;rsquo;t seem to be substantially different from Java interfaces. I particularly liked chromatic&amp;rsquo;s answer that &amp;ldquo;interfaces completely suck while [Roles] don&amp;rsquo;t.&amp;rdquo; My other favourite quote of the thread was from (who else) Larry: &amp;ldquo;The Traits paper didn&amp;rsquo;t go into traits with state, though it did mention it as a future research topic. We&amp;rsquo;re just doing that future research for them.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040212131111.95331.qmail@onion.perl.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-acknowledgements-apologies-announcements-acknowledgements-apologies-span&#34;&gt;&lt;span id=&#34;Announcements,_Acknowledgements,_Apologies&#34;&gt;Announcements, Acknowledgements, Apologies&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Well, I&amp;rsquo;ve thought about it some more, and I&amp;rsquo;d like you all to welcome chromatic as the Perl 6 Summary&amp;rsquo;s official running joke. I don&amp;rsquo;t guarantee to mention him every week, but I do guarantee that I&amp;rsquo;ll always jump through hoops to avoid starting a sentence with his name when I do mention him.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-02-08</title>
      <link>http://localhost:1313/pub/2004/02/p6pdigest/20040208.html/</link>
      <pubDate>Sun, 08 Feb 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/02/p6pdigest/20040208.html/</guid>
      <description>

&lt;p&gt;Another Monday evening. Another day of displacement activity out of the way. There&amp;rsquo;s a huge lump of belly pork braising slowly in a mixture of stock, rice wine &amp;amp; soy sauce, and nothing on the telly. It must be time to write the Perl 6 summary. As usual, I&amp;rsquo;m going to deal with perl6-internals first.&lt;/p&gt;

&lt;h4 id=&#34;span-id-rt-cleanup-rt-cleanup-span&#34;&gt;&lt;span id=&#34;RT_Cleanup&#34;&gt;RT Cleanup&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The cleanup of the RT bugs database continued apace. Stephane Peiry posted a list of old RT entries and their authors and asked them to supply updates ore they&amp;rsquo;d be flagged as obsolete in the queue. In the ensuing discussion, Steve Fink pointed out something that I&amp;rsquo;d missed: as of this week, all the perl6 tests (including the regular expression tests) are passing. He pointed out that the suite is &lt;em&gt;far&lt;/em&gt; from comprehensive, but I still think this is pretty spiffy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1075590954.6331.17.camel@pittypanda&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-dod-mutation-and-generational-collectors-dod-mutation-and-generational-collectors-span&#34;&gt;&lt;span id=&#34;DOD,_mutation,_and_generational_collectors&#34;&gt;DOD, mutation, and generational collectors&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan had posted some thoughts on the way that many of the things that cause problems for threads also cause problems for generational garbage collectors and gave a list of &amp;lsquo;mutating activities&amp;rsquo; that might need to be trapped by both threads and GC. Gorgon Henriksen asked Dan for more elaboration on what he meant by generational GC because, as Gordon understood it, it came with a whole load of baggage that was inappropriate for Parrot. This week, Dan gave his answer and pointed out that various other improved GC schemes (incremental, concurrent) required the same level of support as a generational scheme so it made sense to provide such support now. Leo Tötsch had a few comments to make about the different possible schemes and discussion moved on to the nastiness of doing GC in a multithreaded environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010200bc3eb3ef7c96@%5B192.168.1.28%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt; &amp;ndash; Thread root&lt;/p&gt;

&lt;h4 id=&#34;span-id-sdl-bindings-sdl-bindings-span&#34;&gt;&lt;span id=&#34;SDL_Bindings&#34;&gt;SDL Bindings&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The SDL bindings that chromatic&amp;rsquo;s been working on continue to develop. (Bah! People who insist on weird capitalization of their names and thus force me into the passive voice are jolly annoying, even if personally very pleasant).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402021557.i12FvQl03090@thu8.leo.home&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-python-pmcs-python-pmcs-span&#34;&gt;&lt;span id=&#34;Python_PMCs?&#34;&gt;Python PMCs?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace wondered what Dan&amp;rsquo;s plan was for getting python objects working for the pie-thon. Michal has made a small start on wrapping PythonObjects as PMCs which seemed to work and was apparently easier than trying to recode them as PMCs. He pointed everyone at his current implementation. So far his post has been Warnocked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0402021830390.12849@hydrogen.sabren.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pirate.versionhost.com/pirate/python/pmc/piobject.pmc&#34;&gt;http://pirate.versionhost.com/pirate/python/pmc/piobject.pmc&lt;/a&gt; &amp;ndash; The wrapper implementation&lt;/p&gt;

&lt;h4 id=&#34;span-id-docs-and-releases-docs-and-releases-span&#34;&gt;&lt;span id=&#34;Docs_and_releases&#34;&gt;Docs and releases&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered whether Parrot&amp;rsquo;s documentation was in sync with current implementation reality, and when we&amp;rsquo;d see a clean way to make method calls. In a post dated the 3rd of February, Leo confessed that there is still a lot of outdated or unimplemented stuff in the assembly related docs and noted that Dan had said that the low-level object design would be done by the 30th of January.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040202215426.GW6628@dansat.data-plan.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-backward-branch-warnocked-backward-branch-warnocked-span&#34;&gt;&lt;span id=&#34;Backward_branch,_Warnocked&#34;&gt;Backward branch, Warnocked&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Pete Lomax drew everyone&amp;rsquo;s attention to a problem he&amp;rsquo;d found back at the beginning of December which Leo had said was a problem with a backward branch. He wondered when/if the problem might be fixed.&lt;/p&gt;

&lt;p&gt;Sadly the answer was &amp;ldquo;We&amp;rsquo;re not sure when it&amp;rsquo;ll be fixed, it&amp;rsquo;s really hard to fix the current version of IMCC, but it should be easier to sort out in IMCCv2. For now, don&amp;rsquo;t do that.&amp;rdquo; Meanwhile, Harry Jackson tried to track the bug down to the appropriate bit of IMCC; his experiments with code variants seem to imply that the problem is with IMCC not recognizing that &lt;code&gt;ret&lt;/code&gt; is a branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=69rt105khibjtb5iitapsjiev46ottrljp@4ax.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-alignment-issues-with-managedstruct-alignment-issues-with-managedstruct-span&#34;&gt;&lt;span id=&#34;Alignment_issues_with_*ManagedStruct&#34;&gt;Alignment issues with *ManagedStruct&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The redoubtable chromatic came across some issues with the alignment of members within a struct and wondered if there might be a better way of sorting out alignment issues than his current trick of explicitly padding things out (which he feels probably isn&amp;rsquo;t portable). Leo pointed out that there was already support for offsetting struct members when setting up a *Struct PMC by using the third initializer parameter.&lt;/p&gt;

&lt;p&gt;As discussion of the best way forward continued, it emerged that Jens Rieks is in the process of writing a simple C-parser in IMC which should be able to parse header files and create ManagedStructs automagically. Go Jens. Tim Bunce suggested that Jens take a look at ExtUtils::XSBuilder for hints. Meanwhile Uri was looking at Convert::Binary::C which is apparently far more robust.&lt;/p&gt;

&lt;p&gt;Leo ended up listing a set of requirements for a script to parse C headers and generate the appropriate PIR code to set up various *Struct PMCs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1075792412.21791.36.camel@localhost&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402051104.40882.parrot@jensbeimsurfen.de&#34;&gt;http://groups.google.com/groups&lt;/a&gt; &amp;ndash; Jens talks about his C parser&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200402061458.i16EwXI03277@thu8.leo.home&#34;&gt;http://groups.google.com/groups&lt;/a&gt; &amp;ndash; Leo&amp;rsquo;s requirements&lt;/p&gt;

&lt;h4 id=&#34;span-id-baby-baby-where-did-my-patch-go-baby-baby-where-did-my-patch-go-span&#34;&gt;&lt;span id=&#34;Baby,_baby,_where_did_my_patch_go?&#34;&gt;Baby, baby, where did my patch go?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Gordon Henriksen wondered what had happened to a patch that he&amp;rsquo;d submitted to bugs-parrot. Robert Spier wasn&amp;rsquo;t sure, but noted that the MyDoom virus was busy causing the perl.org servers a hard time (more than a gigabyte in 19 hours; Robert sounded a little fraught). As it happened, the patch had actually bounced from the list because it was huge. Everything got sorted out in the end though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=013601c3ec04$a719dc20$d454e8c7@domain.ma.iclub.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-documentation-tools-documentation-tools-span&#34;&gt;&lt;span id=&#34;Documentation_tools&#34;&gt;Documentation tools&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael Scott continued his sterling work on Parrot&amp;rsquo;s documentation by adding the Perl tools he used to generated the HTML docs to the tree at &lt;em&gt;tools/docs/write_docs.pl&lt;/em&gt;, he also announced that he&amp;rsquo;d finished the examples and the various &lt;em&gt;*.c&lt;/em&gt; file directories and will be looking at classes next. I wonder how long it&amp;rsquo;ll be before someone reimplements them in in PIR&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=DF04B5B2-577A-11D8-858E-000A95C50226@mac.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-approaching-pdd16-callbacks-approaching-pdd16-callbacks-span&#34;&gt;&lt;span id=&#34;Approaching_PDD16_callbacks&#34;&gt;Approaching PDD16 callbacks&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;s implemented a first hacky way to run PASM callbacks from C NCI functions; it&amp;rsquo;s not a full implementation, but it&amp;rsquo;s a start. As usual, he solicited comments. And so far he&amp;rsquo;s not had any.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4024E112.5030809@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-the-unicode-argument-again-the-unicode-argument-again-span&#34;&gt;&lt;span id=&#34;The_Unicode_argument_again&#34;&gt;The Unicode argument again&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Andy Wardley strongly advocated not making Unicode operators &lt;code&gt;«&lt;/code&gt;, &lt;code&gt;»&lt;/code&gt; etc part of the core language. Larry disagreed, but proposed that any Unicode declarations should also have an &lt;code&gt;is ASCII(&#39;!@#$&#39;)&lt;/code&gt; trait to specify the ASCII equivalent.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040202083526.GF31998@cat.ourshack.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-compiler-writing-tools-compiler-writing-tools-span&#34;&gt;&lt;span id=&#34;Compiler_writing_tools&#34;&gt;Compiler writing tools&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer has been writing &amp;lsquo;a lot of compiler&amp;rsquo; recently and posted some of his positive and negative experiences with YACC as possible pointers to the sort of things Perl 6&amp;rsquo;s grammars might need. In his response, Larry once again demonstrated the truth of the proposition that &amp;ldquo;Everyone writes a templating module at least once in their life&amp;rdquo; when he confessed that &amp;ldquo;the first production language I ever wrote was an inside-out language where control commands were embedded in text that was to be output by default.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040202090933.GA22343@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Oops, reading back over last week&amp;rsquo;s summary I realise that, when I meant to talk of going to see Eliza Carthy performing live, I actually wrote that we&amp;rsquo;d gone to see her perform life. Sorry about that.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;mailto:p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-02-01</title>
      <link>http://localhost:1313/pub/2004/02/p6pdigest/20040201.html/</link>
      <pubDate>Sun, 01 Feb 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/02/p6pdigest/20040201.html/</guid>
      <description>

&lt;p&gt;Welcome once again to Gateshead, where the skies are grey, the view is uninspiring, and the workmen across the road seem determined to fall off the ladder before they get the double glazing fitted.&lt;/p&gt;

&lt;p&gt;But enough of the gay Gateshead life, let&amp;rsquo;s hurry on to the doings of the denizens of the perl6-internals mailing list. Who knows, we might even visit the inmates of perl6-language later.&lt;/p&gt;

&lt;h4 id=&#34;span-id-threading-threading-span&#34;&gt;&lt;span id=&#34;Threading&#34;&gt;Threading&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;To nobody&amp;rsquo;s great surprise, we talked about threading. In particular, Gordon Henriksen&amp;rsquo;s concerns about the all around scariness of &lt;code&gt;morph&lt;/code&gt; (and not just in a threading context). I&amp;rsquo;m not sure I quite understand what&amp;rsquo;s being done, but progress is definitely being made.&lt;/p&gt;

&lt;p&gt;Late in the week Dan announced that there were obviously still issues to be worked out before we started in on implementation (modulo some &amp;lsquo;obvious&amp;rsquo; stuff). He also asked for &amp;lsquo;real worldish&amp;rsquo; tests for threading in order to get some real numbers for different possible approaches and to see if the problem is as bad as it was first thought.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc3e9930bcac@%5B192.168.1.28%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20040128122120.09f96948@pop.mindspring.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-embedding-vs-extending-interface-types-embedding-vs-extending-interface-types-span&#34;&gt;&lt;span id=&#34;Embedding_vs._extending_interface_types&#34;&gt;Embedding vs. extending interface types&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember last week&amp;rsquo;s kerfuffle about &lt;code&gt;Parrot_Interp&lt;/code&gt; vs &lt;code&gt;Parrot_INTERP&lt;/code&gt;? Dan&amp;rsquo;s resolved it be deciding that we&amp;rsquo;ll just call it &lt;code&gt;Parrot_Interp&lt;/code&gt; everywhere. Gordon Henriksen sent in the patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010208bc3e9e36ea11@%5B192.168.1.28%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-leo-explains-leo-explains-span&#34;&gt;&lt;span id=&#34;Leo_explains&#34;&gt;Leo explains&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda (and others) have been having problems with data that should be inviolate getting clobbered in strange ways. After some effort, Will got his offending code down to 22 lines. This let Leo Tötsch work out what was going on, and in the referenced post he explained all. Essentially, the Copy on Write logic for handling register (and other) stacks is broken. The workaround is not to use Continuations and Exception Handlers. Fixes are welcome. Please.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40177A46.6060308@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-testing-signal-handlers-testing-signal-handlers-span&#34;&gt;&lt;span id=&#34;Testing_Signal_Handlers&#34;&gt;Testing Signal Handlers&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo asked for help with sorting out the testing code for some signal handling tests that seemed to be confusing the harness quite badly. Uri Guttman came up with some suggested workarounds, as did Mike Schwern. Leo found a third way. (If you&amp;rsquo;ve ever tried to write test with &lt;code&gt;fork&lt;/code&gt; in it, it&amp;rsquo;s worth taking a look at both Uri and Schwern&amp;rsquo;s answers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=401639A9.8030107@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-costs-of-sharing-revisited-the-costs-of-sharing-revisited-span&#34;&gt;&lt;span id=&#34;The_costs_of_sharing_revisited&#34;&gt;The costs of sharing revisited&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Leo posted some scary numbers implying that using a shared PMC led to terrible slowdowns. This week he posted the latest numbers, and things are looking up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ time perl-58-th shared_ref.pl

   real 0m8.694s

   $ time parrot shared_ref.pasm

   real 0m0.375
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(and that&amp;rsquo;s an unoptimized Parrot). Elizabeth Mattijsen was moved to ask for a ponie.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40178375.8080103@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-cunning-stunts-with-with-unmanagedstruct-cunning-stunts-with-with-unmanagedstruct-span&#34;&gt;&lt;span id=&#34;Cunning_stunts_with_with_UnManagedStruct&#34;&gt;Cunning stunts with with UnManagedStruct&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Donning his devious head, Leo demonstrated the use of UnManagedStruct to allow for unlimited self-inspection and self-modification of Parrot state. Which isn&amp;rsquo;t really something we want to be possible. In the opinion of Luke Palmer and Jeff Clites, the costs of removing this capability aren&amp;rsquo;t worth paying. As Jeff Clites pointed out, you only use UnManagedStructs when you&amp;rsquo;re calling out to a native library, and once you introduce a native library all bets are already off.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=401683E8.8000505@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-michael-scott-hero-of-the-week-michael-scott-hero-of-the-week-span&#34;&gt;&lt;span id=&#34;Michael_Scott:_hero_of_the_week&#34;&gt;Michael Scott: hero of the week&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Over the past few weeks Michael Scott has gradually been making the parrot distribution a kinder, gentler place with his sterling efforts to tidy up and generally improve the existing documentation. This week he rationalized/added documentation for everything in &lt;em&gt;src/&lt;/em&gt; (with the exception of &lt;em&gt;malloc.c&lt;/em&gt; and &lt;em&gt;malloc-trace.c&lt;/em&gt;). He&amp;rsquo;s working on documenting &lt;em&gt;examples/&lt;/em&gt; now.&lt;/p&gt;

&lt;p&gt;The response to his announcement was overwhelmingly and understandably positive (The consensus is that Mike rocks). Now if we can just &lt;em&gt;keep&lt;/em&gt; everything in such good condition&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=DDED1473-5287-11D8-8781-000A95C50226@mac.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-dbdi-announced-parrot-dbdi-announced-span&#34;&gt;&lt;span id=&#34;Parrot_DBDI_announced&#34;&gt;Parrot DBDI announced&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tim &amp;ldquo;Perl DBI&amp;rdquo; Bunce announced the Parrot DBDI Project: A Database Driver Interface for Parrot. The goal is to have a common Parrot level interface to database drivers which can then be reused by different language specific database interfaces. For further details read the post; it&amp;rsquo;s jolly good. And bravo Tim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040127225639.GF38394@dansat.data-plan.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-internal-exception-handlers-internal-exception-handlers-span&#34;&gt;&lt;span id=&#34;Internal_exception_handlers&#34;&gt;Internal exception handlers&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a set of macros for doing exception handling in the parrot core using &lt;code&gt;TRY/CATCH/THROW&lt;/code&gt; etc. and asked for comments. So far he&amp;rsquo;s been Warnocked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4018D0CD.4080106@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-sdl-bindings-sdl-bindings-span&#34;&gt;&lt;span id=&#34;SDL_bindings&#34;&gt;SDL bindings&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;After Leo fixed the struct PMCs for him, chromatic has proceeded apace to implement SDL wrappers in Parrot. He&amp;rsquo;s reached the point where he has code that can create an SDL window and blit a blue rectangle onto it. Leo applied his patches. Check out &lt;em&gt;examples/pni/sdl_blue_rectangle.imc&lt;/em&gt; if you&amp;rsquo;re interested.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1075537672.12245.178.camel@localhost&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Discussions continued to test the encode setups of the participants&amp;rsquo; mail readers&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;span-id-semantics-of-vector-operations-semantics-of-vector-operations-span&#34;&gt;&lt;span id=&#34;Semantics_of_vector_operations&#34;&gt;Semantics of vector operations&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;A sub-thread of the discussion of the semantics of vector operations turned into a discussion of the meaning of &amp;lsquo;vector&amp;rsquo; which has different meanings depending on whether you&amp;rsquo;re a mathematician or Seymour Cray.&lt;/p&gt;

&lt;p&gt;Another sub-thread discussed the possible ASCII alternatives for &lt;code&gt;«&lt;/code&gt; and &lt;code&gt;»&lt;/code&gt;. I&amp;rsquo;m afraid I&amp;rsquo;m going to bottle out of attempting to summarize the various alternatives suggested, if only because I used up all my POD escape-fu last week. It looks like the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; alternatives might be about to bite the dust in favour of an as yet undecided, less ambiguous, new scheme. Larry hasn&amp;rsquo;t ruled on it yet though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=401720E1.2030009@conway.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d just like to announce that, if you haven&amp;rsquo;t seen Eliza Carthy perform life, you owe it to yourself to rectify that. We went to see her last night and it&amp;rsquo;s bucked me up enormously.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-01-25</title>
      <link>http://localhost:1313/pub/2004/01/p6pdigest/20040125.html/</link>
      <pubDate>Sun, 25 Jan 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/01/p6pdigest/20040125.html/</guid>
      <description>

&lt;p&gt;Welcome to the first summary from my new home in Gateshead. The same old wibble, with a different view from its window and fewer trips to London. Right, time to see what&amp;rsquo;s been going on in perl6-internals this week.&lt;/p&gt;

&lt;h4 id=&#34;span-id-global-labels-in-imcc-global-labels-in-imcc-span&#34;&gt;&lt;span id=&#34;Global_labels_in_IMCC&#34;&gt;Global labels in IMCC&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The cryptically named TOGoS wondered how to get the address of a label in a different IMCC compilation unit. According to Dan there&amp;rsquo;s no way to do that, and you didn&amp;rsquo;t want to do that anyway.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040119201611.71859.qmail@web41408.mail.yahoo.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-dan-s-threads-proposal-dan-s-threads-proposal-span&#34;&gt;&lt;span id=&#34;Dan&#39;s_threads_proposal&#34;&gt;Dan&amp;rsquo;s threads proposal&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;After a few weeks of everyone else&amp;rsquo;s proposals, Dan started to outline the design of Parrot&amp;rsquo;s threading capabilities. He started by defining his terms (a useful thing to do in a field where there seem to me multiple competing definitions of various terms) and guaranteeing that user code wouldn&amp;rsquo;t crash the interpreter (subject to the assumption that system level memory allocation was thread safe) before getting into the meat of his proposal. Which you&amp;rsquo;re probably best reading for yourself; it&amp;rsquo;s a long document but there&amp;rsquo;s very little flab and any attempt of mine to summarize it would probably end up being at least as long as and a good deal less lucid than the original.&lt;/p&gt;

&lt;p&gt;Of course, this sparked a ton of discussion, generally positive, as people asked for various clarifications and made suggestions. Gordon Henriksen pointed out a nasty race condition that means that the garbage collector can&amp;rsquo;t be made as thread safe as Dan had hoped.&lt;/p&gt;

&lt;p&gt;Summarizer Barbie says &amp;ldquo;Threads are hard!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;On Thursday, Dan posted a last call for comments and objections before he went on to the detailed design. This time there were some objections, but I don&amp;rsquo;t think any of &amp;lsquo;em are going to stop Dan.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020dbc31eb8d1b67@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010210bc35dbe3d5bf@%5B10.0.1.4%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-vtables-organization-vtables-organization-span&#34;&gt;&lt;span id=&#34;Vtables_organization&#34;&gt;Vtables organization&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Last week Dan had outlined an approach to organizing PMC vtables using a chaining approach; this week saw the discussion of that proposal with Benjamin K. Stuhl asking the hard questions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=400BDD81.1060909@cornell.edu&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-benchmark-suite-benchmark-suite-span&#34;&gt;&lt;span id=&#34;Benchmark_suite&#34;&gt;Benchmark suite&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles suggested that it might make sense to create a canonical suite of benchmarks to exercise Parrot well. His idea being that, if we have a standard suite of Parrot benchmarks, then potential performance affecting changes could be tested against that, rather than having custom benchmarks rolled each time. Luke Palmer pointed to &lt;em&gt;examples/benchmarks&lt;/em&gt; and noted that it&amp;rsquo;s hard to create benchmarks that test everything. However, he hoped that any good benchmark that gets posted to the list would get added to this suite, along with some documentation describing what is being tested.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=40144AE1.9050205@softhome.net&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-number-formatting-number-formatting-span&#34;&gt;&lt;span id=&#34;Number_formatting&#34;&gt;Number formatting&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan did some more designing, this time mandating that Parrot will, eventually adopt ICU&amp;rsquo;s formatting template for numeric templates but, to start with, we&amp;rsquo;ll be rolling our own. The new op will be &lt;code&gt;format Sx, [INP]y, [SP]z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010210bc31f337e755@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-base-string-transforms-base-string-transforms-span&#34;&gt;&lt;span id=&#34;Base_string_transforms&#34;&gt;Base string transforms&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan announced that he would be adding &lt;code&gt;upcase&lt;/code&gt;, &lt;code&gt;downcase&lt;/code&gt;, &lt;code&gt;titlecase&lt;/code&gt; and &lt;code&gt;to_chartype&lt;/code&gt; to the various chartype vtables. He also noted that he&amp;rsquo;d like to get some alternative chartypes and encodings into Parrot as soon as possible to make sure we can actually handle things without having to use Unicode all the time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010211bc31f77ae6da@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-calling-conventions-in-imcc-calling-conventions-in-imcc-span&#34;&gt;&lt;span id=&#34;Calling_conventions_in_IMCC&#34;&gt;Calling conventions in IMCC&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda had some problems with IMCC&amp;rsquo;s handling of the parrot calling conventions when he found that code that worked a couple of months ago had stopped working in the current Parrot (A month is a *very* long time in Parrot development though.) The problem took a fair bit of tracking down and I&amp;rsquo;m not entirely sure it&amp;rsquo;s entirely fixed yet; Will had reached the point where the code would compile, but it still wouldn&amp;rsquo;t actually run.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=B8548E4C-4AA8-11D8-95BB-000A95909DD0@coleda.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-steve-fink-s-obnoxious-test-case-steve-fink-s-obnoxious-test-case-span&#34;&gt;&lt;span id=&#34;Steve_Fink&#39;s_obnoxious_test_case&#34;&gt;Steve Fink&amp;rsquo;s obnoxious test case&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Steve Fink posted an obnoxious test case that generated memory corruption. The test case is obnoxious because it&amp;rsquo;s 56KB of IMCC source code, and Steve had been unable to reduce it. This didn&amp;rsquo;t discourage Leo Tötsch though, who set about tracking the bug to its lair. It&amp;rsquo;s not fixed yet, but with the Patchmonster on the case it can only be a matter of time.&lt;/p&gt;

&lt;p&gt;There were several other GC related issues that cropped up over the week; I wonder if they&amp;rsquo;re all aspects of a single lurking bug.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040120004855.GA28881@foxglove&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-returning-ints-imcc-returning-ints-span&#34;&gt;&lt;span id=&#34;IMCC_returning_ints&#34;&gt;IMCC returning ints&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Steve Fink also found a problem with IMCC failing to properly return integers from unprototyped routines and posted an appropriate patch to the test suite. It turns out that the problem is that IMCC doesn&amp;rsquo;t quite implement the full Parrot Calling Conventions, especially the return convention, but it&amp;rsquo;s getting there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040120015843.GC27636@foxglove&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-costs-of-sharing-the-costs-of-sharing-span&#34;&gt;&lt;span id=&#34;The_costs_of_sharing&#34;&gt;The costs of sharing&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo Töposted a test program and some results for timing the difference between using shared and unshared PMCs. The shared versions are (not surprisingly) slower than the unshared ones; the question is whether the difference between the two can be improved. Hopefully the benchmark will get checked into &lt;em&gt;examples/benchmarks&lt;/em&gt; as suggested by Luke earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=400D5BD3.1020409@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-an-array-of-array-types-an-array-of-array-types-span&#34;&gt;&lt;span id=&#34;An_array_of_array_types&#34;&gt;An array of array types&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan noted that we have &amp;ldquo;a pile of different array classes with fuzzy requirements and specified behaviours which sort of inherit from each other except when they don&amp;rsquo;t.&amp;rdquo; He suggested that the time had come to work out what we actually &lt;em&gt;want&lt;/em&gt; in the way of array classes, compare our requirements with what we have, and then to do something about making what was available match what was required. I&amp;rsquo;m not sure that the resulting discussion has finalized the set of array types needed, but it&amp;rsquo;s getting there. (Does anyone else think &amp;lsquo;FixedMixedArray&amp;rsquo; is awfully clumsy as names go?).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020ebc3350821beb@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-remember-to-nag-robert-spier-remember-to-nag-robert-spier-span&#34;&gt;&lt;span id=&#34;Remember_to_nag_Robert_Spier&#34;&gt;Remember to nag Robert Spier&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Robert Spier announced that repairing the web accessible TODO list was on his personal TODO list and asked to be nagged about it periodically.&lt;/p&gt;

&lt;p&gt;Robert, remember you need to fix the web accessible TODO list.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m3k73mw9fa.wl_rspier@pobox.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-churchill-s-parrot-still-swearing-churchill-s-parrot-still-swearing-span&#34;&gt;&lt;span id=&#34;Churchill&#39;s_parrot_still_swearing&#34;&gt;Churchill&amp;rsquo;s parrot still swearing&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Effortlessly Godwinning himself, Uri Guttman pointed to a press release which stated that Winston Churchill&amp;rsquo;s parrot, Charlie, is now 104 years old and can still be coaxed into squawking certain inflammatory remarks which had apparently made it rather unsuitable for keeping at its owner&amp;rsquo;s pet shop due to its habit of swearing at children.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=x7d69eey3y.fsf@mail.sysarch.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-updated-documentation-in-perl-scripts-updated-documentation-in-perl-scripts-span&#34;&gt;&lt;span id=&#34;Updated_documentation_in_Perl_scripts&#34;&gt;Updated documentation in Perl scripts&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael Scott continued his sterling work of updating and generally improving Parrot&amp;rsquo;s documentation. This week his attention fell upon: the Perl scripts found in &lt;em&gt;build_tools&lt;/em&gt;, &lt;em&gt;classes&lt;/em&gt; and &lt;em&gt;tools/dev&lt;/em&gt;. Top man that he is, he&amp;rsquo;s currently working on the documentation embedded in C code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=051BEB2F-4B99-11D8-86A0-000A95C50226@mac.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601021fbc36e6903a5c@%5B10.0.1.4%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-open-issue-review-open-issue-review-span&#34;&gt;&lt;span id=&#34;Open_issue_review&#34;&gt;Open issue review&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Robert Spier (don&amp;rsquo;t forget the web accessible todo list Robert) posted a list of the 177 currently outstanding Parrot issues in the RT system and asked for volunteers to go through them to help weed out those issues that were no longer current. So people did. Which is nice.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m3isj6w7c0.wl_rspier@pobox.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-how-to-subclass-dynamic-pmcs-how-to-subclass-dynamic-pmcs-span&#34;&gt;&lt;span id=&#34;How_to_subclass_dynamic_PMCs&#34;&gt;How to subclass dynamic PMCs&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace is trying to make a dynamically loaded PMC that subclasses another dynamically loaded PMC and he can&amp;rsquo;t work out how to do it. Leo Tötsch had the answer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0401211335500.19552@hydrogen.sabren.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-how-does-parrot-handle-high-level-language-eval-how-does-parrot-handle-high-level-language-eval-span&#34;&gt;&lt;span id=&#34;How_does_Parrot_handle_High_Level_Language_eval&#34;&gt;How does Parrot handle High Level Language eval&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Sandever wondered how Parrot would handle &lt;code&gt;eval&lt;/code&gt; opcodes for multiple different languages. Leo pointed him at the &lt;code&gt;compile&lt;/code&gt; op, which (while it isn&amp;rsquo;t fully implemented yet) will address this issue. Dan noted that it&amp;rsquo;s currently working for PIR and PASM code but that it should be able to work eventually with any compiler that generates standard bytecode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1103_1074823506@nntp.perl.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-signals-and-events-signals-and-events-span&#34;&gt;&lt;span id=&#34;Signals_and_events&#34;&gt;Signals and events&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo is working on turning OS level signals into Parrot level events, and he&amp;rsquo;s not having an easy time of it. He posted a summary of the issues and asked for comments. Discussion continues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4010EB5B.1040608@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-threading-again-threading-again-span&#34;&gt;&lt;span id=&#34;Threading_again&#34;&gt;Threading again&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Gordon Henriksen worries that Parrot&amp;rsquo;s current architecture is actively thread hostile. He also accepted that trying to change it now wasn&amp;rsquo;t really possible. So he outlined various ways in which the need for locking could be reduced, which should help speed things up. The big problem, as Gordon sees it, is that so many Parrot data structures are mutable, and mutable data structures require locks. And having PMCs that can morph from one type to another is&amp;hellip; well, Gordon claims that &lt;code&gt;morph&lt;/code&gt; must die, though he later modified this claim. He and Leo batted this back and forth for a while; I&amp;rsquo;m not sure either side is convinced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=8A1B28F4-4E28-11D8-85AB-000502994722@mac.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-embedding-vs-extending-interface-types-embedding-vs-extending-interface-types-span&#34;&gt;&lt;span id=&#34;Embedding_vs._extending_interface_types&#34;&gt;Embedding vs. extending interface types&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mattia Barbon noted that the embedding and extending interfaces were still using different names for &lt;code&gt;Parrot_Interp&lt;/code&gt; and &lt;code&gt;Parrot_INTERP&lt;/code&gt;. He wondered which was correct. It turns out that nobody&amp;rsquo;s quite sure, but the person who can make the decision &amp;ndash; Dan &amp;ndash; was en route to Copenhagen when this came up, so there&amp;rsquo;s no answer yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Mahogany-0.66.0-920-20040124-172842.00@rbnet.it&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile_in_perl6-language&#34;&gt;Meanwhile in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-semantics-of-vector-operations-semantics-of-vector-operations-span&#34;&gt;&lt;span id=&#34;Semantics_of_Vector_operations&#34;&gt;Semantics of Vector operations&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Determined to test everyone&amp;rsquo;s Unicode readiness, Luke Palmer kicked off a discussion of the semantics of &lt;code&gt;[1,2,3] »+« [4,5,6]&lt;/code&gt;. At first glance it looks like the result should be &lt;code&gt;[5,7,9]&lt;/code&gt;, but Luke argued that actually, the code was trying to add two lists, each containing a single scalar, that just happened to be listrefs. Larry pointed out that &amp;ldquo;Doing what you expect at first glance is also called &amp;lsquo;not violating the principle of least surprise&amp;rsquo;&amp;rdquo;, before going on to surprise us all with &amp;lsquo;lopsided&amp;rsquo; vector ops, which would allow the programmer to specify when a value was expected to be treated as a scalar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $a   »+« $b     # Treat $a and $b as lists
    $x    +« $y     # Treat $x as a scalar and $b as a list
          -« @bar   # Return a list of every element of @bar, negated
    @foo »+  @bar   # Add the length of @bar to every element of @foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then he scared me with &lt;code&gt;@foo »+= @foo&lt;/code&gt;. He noted that it might take some getting used to, but that it helped if you pronounce &lt;code&gt;»&lt;/code&gt; and &lt;code&gt;«&lt;/code&gt; as &amp;lsquo;each&amp;rsquo;. Austin Hastings didn&amp;rsquo;t like it (from a syntax highlighting point of view), but he appeared to be outvoted. Larry pointed out that &lt;code&gt;«»&lt;/code&gt; etc were the least of a syntax highlighters worries given that any &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt; or operator declaration had the potential to morph any subsequent syntax. Piers Cawley thought that truly accurate syntax highlighting would have to be done in an image based IDE implemented in Perl because such an editor would always know what rules were in scope for a given chunk of code. A. Pagaltzis thought that this would definitely increment the Smalltalkometer for Perl 6.&lt;/p&gt;

&lt;p&gt;As discussion and exploration of this idea continued it became apparent that people seem to like this particular weirding of the language, and it certainly allows the programmer to disambiguate things rather neatly. Luke even pointed out that this new approach allows for calling a method on a list of values: &lt;code&gt;@list ».method&lt;/code&gt;, and to call a list of methods on a value: &lt;code&gt;$value.« @methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the fun began. The issue is that &lt;code&gt;»&lt;/code&gt; and &lt;code&gt;«&lt;/code&gt; can also be written &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (but your POD processor hates you for it). This leads to ambiguities like &lt;code&gt;&amp;gt;&amp;gt;+&amp;lt;&amp;lt;=&amp;lt;&amp;lt;&lt;/code&gt; (which are even harder to type in a Pod escape) which can be parsed as &lt;code&gt;»+&amp;lt;&amp;lt;=«&lt;/code&gt; or &lt;code&gt;»+«=«&lt;/code&gt;. Larry wondered if the problem arose because of trying to make the &lt;code&gt;&amp;lt;lt&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; alternatives look too similar to the Unicode glyphs.&lt;/p&gt;

&lt;p&gt;You know, looking at that last paragraph I can see why people think Perl 6 is horribly scary. The thing is, you&amp;rsquo;re not expected to use constructions like that in real world programs all the time; but when you&amp;rsquo;re working out what a grammar should be you &lt;em&gt;have&lt;/em&gt; to think of all the nasty edge cases to see where things break.&lt;/p&gt;

&lt;p&gt;Anyway, such nastiness led to the possibility of introducing a &amp;lsquo;whitespace eating&amp;rsquo; macro which would allow for the introduction of disambiguating whitespace. The front runner for this macro is &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040120085433.GA23075@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-comma-operator-comma-operator-span&#34;&gt;&lt;span id=&#34;Comma_operator&#34;&gt;Comma operator&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember a few months ago when there was some discussion of replacing the C style comma with some other glyph? If that were done, one of the consequences would be that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   @foo = 1,2,3;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would fill &lt;code&gt;@foo&lt;/code&gt; with three elements instead of just the one as it does in Perl 5. Joe Gottman had a few questions about the implications of that, and wondered if Larry had actually ruled on it. Larry ruled that list construction would continue to require brackets (or, if you&amp;rsquo;re American, parentheses) and went on to discuss some further implications of that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=000b01c3dfc4$bab7d620$e58f8445@carolina.rr.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thankfully, this section&amp;rsquo;s normal service is resumed this week. The only catch is, I can&amp;rsquo;t think of anything to say.&lt;/p&gt;

&lt;p&gt;However, if you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website (New! Improved! listening on port 80! Still sadly lacking in desperately new content!)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-01-11</title>
      <link>http://localhost:1313/pub/2004/01/p6pdigest/20040111.html/</link>
      <pubDate>Sun, 11 Jan 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/01/p6pdigest/20040111.html/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s Monday. People have been talking about Perl 6, Parrot and the European Union Constitution. Let&amp;rsquo;s find out what they&amp;rsquo;ve been saying about Parrot first shall we?&lt;/p&gt;

&lt;h4 id=&#34;span-id-threads-threads-span&#34;&gt;&lt;span id=&#34;Threads&#34;&gt;Threads&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Threads were discussed some more. Dan&amp;rsquo;s deadline is coming up soon, hopefully soon after that discussion will move from Holy Skirmishes about architecture and on to meaningful discussions of a real implementation.&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip; that came out rather more dismissive than I intended.&lt;/p&gt;

&lt;h4 id=&#34;span-id-continuation-problems-continuation-problems-span&#34;&gt;&lt;span id=&#34;Continuation_problems&#34;&gt;Continuation problems&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer found a problem with Parrot&amp;rsquo;s continuations. A continuation is supposed to encapsulate the interpreter&amp;rsquo;s control state, in other words the position of the program counter and the state of the register stacks, and a pointer to the previous continuation. However, it turns out that a Parrot continuation just contains the program counter and a pointer to the previous continuation. There was some discussion of why this was so (Melvin Smith seemed to claim that it was both his fault and not his fault).&lt;/p&gt;

&lt;p&gt;Everyone agreed that this needed to be fixed pretty promptly and it wasn&amp;rsquo;t long before Luke posted a patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040106145324.GA12805@babylonia.flatirons.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040108031029.GA19161@babylonia.flatirons.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-problem-with-threads-a-problem-with-threads-span&#34;&gt;&lt;span id=&#34;A_problem_with_threads&#34;&gt;A problem with threads&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In a change from the discussions of thread philosophy, Jeff Clites posted about a problem he was having with Parrot&amp;rsquo;s current threads implementation which was causing problems when trying to join multiple threads. Between them, Jeff and Leo Tötsch tracked down a possible cause of the problem and Jeff offered up a patch which Leo applied.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=B8972372-3F66-11D8-A5EA-000393A6B9DA@mac.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-ppc-jit-gets-fixed-the-ppc-jit-gets-fixed-span&#34;&gt;&lt;span id=&#34;The_PPC_JIT_gets_fixed&#34;&gt;The PPC JIT gets fixed&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Clites also posted a patch which cleans up the last problems with the JIT on PPC. Leo applied it. Us Apple users cheered.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200401061713.i06HDgZ14086@thu8.leo.home&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-luke-palmer-gets-his-act-together-luke-palmer-gets-his-act-together-span&#34;&gt;&lt;span id=&#34;Luke_Palmer_gets_his_act_together&#34;&gt;Luke Palmer gets his act together&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer decided to get his act together (given the level of his contribution to the Perl 6 lists so far, I&amp;rsquo;m almost scared to find out what he&amp;rsquo;s going to be like now&amp;hellip;) and finish up his &amp;lsquo;Priority DOD&amp;rsquo; rethink of the Garbage Collector. I confess I&amp;rsquo;m not really qualified to discuss what&amp;rsquo;s different about it, beyond the claim of a 10,000% speed up when there were no &amp;lsquo;eager&amp;rsquo; PMCs about (things that need immediate cleanup on scope exit; the canonical example being a Perlish file handle) and only a 5% slowdown when there were.&lt;/p&gt;

&lt;p&gt;Luke and Leo discussed the patch a bit before Leo applied it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040105134753.GA2215@babylonia.flatirons.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040105192430.GA32476@babylonia.flatirons.org&#34;&gt;http://groups.google.com&lt;/a&gt; &amp;ndash; Luke explains the patch&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-speed-issues-imcc-speed-issues-span&#34;&gt;&lt;span id=&#34;IMCC_speed_issues&#34;&gt;IMCC speed issues&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted some timings he&amp;rsquo;d made of IMCC compiling some large subs, which were not the most wonderful timings I&amp;rsquo;ve ever seen. A 41 minute compile isn&amp;rsquo;t generally what one wishes to see. Melvin Smith had a few ideas about what was causing it, as did Leo (it seems that IMCC&amp;rsquo;s register allocation is very slow in the presence of spilling and Live analysis increases with the product of the number of lines and variables in a segment. Leo recommended redoing the sub to reduce the number of (and avoid long lived) PIR variables (ie. registers) by using lexicals or globals instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020fbc1f2406c38a@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-references-to-hash-elements-references-to-hash-elements-span&#34;&gt;&lt;span id=&#34;References_to_hash_elements&#34;&gt;References to hash elements&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Arthur &amp;ldquo;Ponie&amp;rdquo; Bergman had some questions about how references to hash elements would be done. Consider the following Perl code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my %hash;
   $foo = \$hash{key};

   $$foo = &amp;quot;bar&amp;quot;;

   print $hash{key}; # Prints &amp;quot;bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arthur wondered how this could be made to work with the current vtable setup, specifically in the presence of tying. Simon Cozens thought that there should be a special HashElement PMC which would handle fetching the actual value from the hash (or writing it back to the hash) as appropriate. Dan agreed with him, so it looks like this might be the way forward.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=E8338D24-4068-11D8-896A-000A95A2734C@nanisky.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-instantiation-instantiation-span&#34;&gt;&lt;span id=&#34;Instantiation?&#34;&gt;Instantiation?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace asked how to instantiate objects from Parrot. Luke Palmer supplied the answer, but pointed out that, at present, classes can only have integer attributes. It turns out that, for Michal&amp;rsquo;s purposes, he can probably get by with using properties instead, so that&amp;rsquo;s all right.&lt;/p&gt;

&lt;p&gt;Stéphane Payrard did the decent thing and implemented the other attribute types. He even wrote tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0401071857360.13262@hydrogen.sabren.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040110212248.GA12650@stefp.dyndns.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-creating-proper-interpreters-in-parrot-creating-proper-interpreters-in-parrot-span&#34;&gt;&lt;span id=&#34;Creating_&#39;proper&#39;_interpreters_in_Parrot&#34;&gt;Creating &amp;lsquo;proper&amp;rsquo; interpreters in Parrot&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon Cozens wondered what was left to do to allow parrot to be embedded in an interpreter and have PIR fed directly to it. Leo pointed him at his own YAL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=87u136fzs2.fsf@alibi.simon-cozens.org&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://toetsch.at/yal/&#34;&gt;http://toetsch.at/yal/&lt;/a&gt; &amp;ndash; Yet Another Language&lt;/p&gt;

&lt;h4 id=&#34;span-id-yield-op-yield-op-span&#34;&gt;&lt;span id=&#34;yield_op?&#34;&gt;&lt;code&gt;yield&lt;/code&gt; op?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace was uncomfortable with the workings of Parrot Coroutines and posted a sample of parrot code which demonstrated why. Leo promised to fix it once he&amp;rsquo;d applied Luke&amp;rsquo;s Continuations patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0401090305540.21408@hydrogen.sabren.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-congratulations-dan-congratulations-dan-span&#34;&gt;&lt;span id=&#34;Congratulations_Dan&#34;&gt;Congratulations Dan&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith offered his congratulations to Dan for the first commercial use of Parrot. I think I can safely say we all echo those congratulations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000288.html&#34;&gt;http://www.sidhe.org/~dan/blog/archives/000288.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile_in_perl6-language&#34;&gt;Meanwhile in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-roles-and-mix-ins-roles-and-mix-ins-span&#34;&gt;&lt;span id=&#34;Roles_and_Mix-ins&#34;&gt;Roles and Mix-ins&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of roles as mix-ins kicked off again after the Christmas break. The canonical &lt;code&gt;Dog::bark&lt;/code&gt; vs. &lt;code&gt;Tree::bark&lt;/code&gt; problem was discussed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20040105164608.GA69309@megazone.bigpanda.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-european-union-constitution-the-european-union-constitution-span&#34;&gt;&lt;span id=&#34;The_European_Union_Constitution&#34;&gt;The European Union Constitution&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;For reasons that still escape me various Americans paraded their ignorance about the putative constitution of a loose union of sovereign states.&lt;/p&gt;

&lt;h4 id=&#34;span-id-perl-6-story-cards-perl-6-story-cards-span&#34;&gt;&lt;span id=&#34;Perl_6_Story_Cards&#34;&gt;Perl 6 Story Cards&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In last week&amp;rsquo;s summary I mentioned the Perl 6 Stories Kwiki that Allison and chromatic set up some months ago and suggested that people wanting to write tests and stories for the new language take a look at it. It seems they did, and the Wiki&amp;rsquo;s seen a good deal of activity. Check it out if you&amp;rsquo;re interested in helping with the project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://p6stories.kwiki.org/&#34;&gt;http://p6stories.kwiki.org/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-modest-question-a-modest-question-span&#34;&gt;&lt;span id=&#34;A_modest_question&#34;&gt;A modest question&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Austin Hastings asked the design team why they were fascinated with Traits (which will be called Roles in Perl 6). He&amp;rsquo;d read the original paper and was unimpressed with the gains that were made by using them.&lt;/p&gt;

&lt;p&gt;The awkwardly cased chromatic opened the case for Roles by pointing out that Roles allow for finer grained naming of chunks of functionality and code reuse. I must say I agree; I&amp;rsquo;m always keen on opportunities to name something.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=ICELKKFHGNOHCNCCCBKFMEDNCJAA.Austin_Hastings@Yahoo.com&#34;&gt;http://groups.google.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcement-announcement-span&#34;&gt;&lt;span id=&#34;Announcement&#34;&gt;Announcement&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Iain &amp;ldquo;Spoon&amp;rdquo; Truskett was not a prolific contributor to the Perl 6 mailing lists. He was, however, an important contributor to these summaries every week; he was the maintainer of WWW::Shorten, the module that I use to shorten the URLs on the version of the summary that goes out to perl6-announce.&lt;/p&gt;

&lt;p&gt;He died from a sudden cardiac arrest on the 29th of December. He was 24. He will be missed. This summary is dedicated to his memory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://iain.truskett.id.au/&#34;&gt;http://iain.truskett.id.au/&lt;/a&gt; &amp;ndash; Iain&amp;rsquo;s website&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2004-01-04</title>
      <link>http://localhost:1313/pub/2004/01/p6pdigest/20040104.html/</link>
      <pubDate>Sun, 04 Jan 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/01/p6pdigest/20040104.html/</guid>
      <description>

&lt;p&gt;What a surprise, a scant week after the last Perl 6 Summary of 2003, it&amp;rsquo;s the first Perl 6 Summary of 2004. Will wonders never cease? Without further ado, we&amp;rsquo;ll start with perl6-internals as usual.&lt;/p&gt;

&lt;h2 id=&#34;span-id-garbage-collection-tasks-garbage-collection-tasks-span&#34;&gt;&lt;span id=&#34;Garbage_Collection_Tasks&#34;&gt;Garbage Collection Tasks&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Dan noted that a copying garbage collector doesn&amp;rsquo;t play that well with threads so he proposed a twofold task to fix things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The GC and memory allocation APIs need to be formalized and abstracted in order to allow for changing the GC mechanism when threads come into play.&lt;/li&gt;
&lt;li&gt;Someone needs to implement a more traditional, non-moving GC as an alternative to the copying collector.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;span-id-plugging-parrot-into-mozilla-plugging-parrot-into-mozilla-span&#34;&gt;&lt;span id=&#34;Plugging_Parrot_into_Mozilla&#34;&gt;Plugging Parrot into Mozilla&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Stephane Peiry posted a set of patches to allow a parrot plugin for Mozilla. Not satisfied with this (but pretty darned impressed all the same) Sam Vilain noted that it would be nice if someone wrote an ECMAscript front-end to Parrot. Patches welcome Sam.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bc16014403dd@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a06010201bc16014403dd@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-problems-with-make-test-problems-with-make-test-span&#34;&gt;&lt;span id=&#34;Problems_with_make_test&#34;&gt;Problems with &lt;code&gt;make test&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Harry Jackson couldn&amp;rsquo;t get his build of parrot to finish running &lt;code&gt;make test&lt;/code&gt;. After a certain amount of thrashing about by the team, Dan narrowed it down to issues with the mutant &amp;lsquo;2.96&amp;rsquo; version of GCC that some versions of Red Hat used for a while. This is currently the list&amp;rsquo;s best guess as to the root of the problem, but it&amp;rsquo;s not absolutely certain. If it does turn out to be the compiler, the config suite will have to be rejigged to detect and warn.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031229221255.12911.qmail@onion.perl.org&#34;&gt;http://groups.google.com/groups?selm=20031229221255.12911.qmail@onion.perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-threading-threads-threading-threads-span&#34;&gt;&lt;span id=&#34;Threading_threads&#34;&gt;Threading threads&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;They&amp;rsquo;re everywhere! And I despair of summarizing them. So I won&amp;rsquo;t. Here&amp;rsquo;s the root messages for anyone interested enough. Once things have died down and we know how threading is going to work in Parrot I&amp;rsquo;ll summarize that.&lt;/p&gt;

&lt;p&gt;Dan opened the floodgates and asked anyone who was serious about their particular Right Way To Do Threading to write things up as a proper proposal. He outlined the constraints that Parrot&amp;rsquo;s threading will be working under and encouraged everyone to speak now or forever hold their peace.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1BAB64E0-3AE5-11D8-9E96-000502994722@mac.com&#34;&gt;http://groups.google.com/groups?selm=1BAB64E0-3AE5-11D8-9E96-000502994722@mac.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bc176658b1c7@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?selm=a06010202bc176658b1c7@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010205bc17976efc33@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?selm=a06010205bc17976efc33@%5B172.24.18.98%5D&lt;/a&gt; &amp;ndash; Dan says put up or shut up&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=3FF2D35D.2090707@toetsch.at&#34;&gt;http://groups.google.com/groups?selm=3FF2D35D.2090707@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1106_1072984463@nntp.perl.org&#34;&gt;http://groups.google.com/groups?selm=1106_1072984463@nntp.perl.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=9227ACBD-3CB1-11D8-9E96-000502994722@mac.com&#34;&gt;http://groups.google.com/groups?selm=9227ACBD-3CB1-11D8-9E96-000502994722@mac.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010200bc1cfc809cde@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a06010200bc1cfc809cde@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a0601020abc1e255347d5@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a0601020abc1e255347d5@%5B10.0.1.2%5D&lt;/a&gt; &amp;ndash; Dan offers up common terminology&lt;/p&gt;

&lt;h2 id=&#34;span-id-don-t-use-imcc-macros-don-t-use-imcc-macros-span&#34;&gt;&lt;span id=&#34;Don&#39;t_use_IMCC_macros&#34;&gt;Don&amp;rsquo;t use IMCC macros&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Bernhard Schmalhofer found what looked like a bug in IMCC&amp;rsquo;s macro support. This prompted Melvin Smith to expedite the removal of IMCC macro support as threatened some weeks ago. However, it turned out that that wasn&amp;rsquo;t actually the seat of the bug. But if you like IMCC macros now is the time to make a &lt;em&gt;very&lt;/em&gt; good case to Melvin, I doubt you&amp;rsquo;ll convince him though; macros belong in a preprocessor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=1072802718.3ff1ab9e10ebc@maxplanck.biomax.de&#34;&gt;http://groups.google.com/groups?selm=1072802718.3ff1ab9e10ebc@maxplanck.biomax.de&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-wxwindows-support-wxwindows-support-span&#34;&gt;&lt;span id=&#34;wxWindows_support?&#34;&gt;wxWindows support?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;David Cuny wondered if Parrot&amp;rsquo;s objects were not at the point where it&amp;rsquo;s possible to interface wxWindows to Parrot. So far he&amp;rsquo;s been Warnocked.&lt;/p&gt;

&lt;p&gt;Just try implementing it David.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=200312310021.20878.dcuny@lanset.com&#34;&gt;http://groups.google.com/groups?selm=200312310021.20878.dcuny@lanset.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-win32-core-dumps-win32-core-dumps-span&#34;&gt;&lt;span id=&#34;Win32_Core_Dumps&#34;&gt;Win32 Core Dumps&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Dan&amp;rsquo;s a fan of core dumps (when appropriate) and wondered if there was a way of getting windows to either produce a core dump or attach a debugger to a crashed process. Vladimir Lipsky and Nigel Sandever gave good answers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010206bc1895ed462f@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a06010206bc1895ed462f@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-piemark-is-ready-the-piemark-is-ready-span&#34;&gt;&lt;span id=&#34;The_Piemark_is_ready&#34;&gt;The Piemark is ready&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Dan forwarded the announcement that the Pie-thon Parrot Benchmark (which I&amp;rsquo;ve unilaterally decided to call the Piemark) code is ready. Let&amp;rsquo;s make sure it&amp;rsquo;s Guido not Dan who gets Pie eyed in Portland this year.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010200bc18c1883507@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?selm=a06010200bc18c1883507@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;ftp://ftp.python.org/pub/python/parrotbench/parrotbench.tgz&#34;&gt;ftp://ftp.python.org/pub/python/parrotbench/parrotbench.tgz&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-object-system-object-system-span&#34;&gt;&lt;span id=&#34;Object_System?&#34;&gt;Object System?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Luke Palmer wondered what work was needed to finish up Parrot&amp;rsquo;s object system. Judging by Leo&amp;rsquo;s response there are name mangling issues that need deciding on, and we&amp;rsquo;re not quite sure who&amp;rsquo;s supposed to be making the decision. Dan?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031231210619.GA27582@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups?selm=20031231210619.GA27582@babylonia.flatirons.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-enhancements-for-the-debugger-enhancements-for-the-debugger-span&#34;&gt;&lt;span id=&#34;Enhancements_for_the_debugger&#34;&gt;Enhancements for the debugger&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Whilst wearing his employee implementing a large project targetting Parrot hat, Dan has been using IMCC&amp;rsquo;s debugging facilities. This led to a bunch of suggestions/decisions about how these could be improved.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010203bc1b7e26d061@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a06010203bc1b7e26d061@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-nci-callback-functions-nci-callback-functions-span&#34;&gt;&lt;span id=&#34;NCI_callback_functions&#34;&gt;NCI callback functions&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Leo isn&amp;rsquo;t enamoured of the current PDD16 design of callbacks in NCI, so he proposed a new design. Dan seemed to think that this proposal smacked of getting a little to sophisticated to early, arguing that the best thing to do was to flesh out what&amp;rsquo;s there (and get it working) before using it as a base on which to build. This means that, once his work deadline is out of the way, we should be expecting some better examples in PDD16. And we&amp;rsquo;ll be reminding Dan of this in a couple of weeks&amp;rsquo; time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=3FF86732.6090405@toetsch.at&#34;&gt;http://groups.google.com/groups?selm=3FF86732.6090405@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile_in_perl6-language&#34;&gt;Meanwhile in perl6-language&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;Nobody said anything. But that&amp;rsquo;s boring, so on Friday I sent an email out to various denizens of the Perl 6 mailing lists asking them for their thoughts on where Perl 6 stands today and where they think it&amp;rsquo;s going in the next 12 months. I&amp;rsquo;m pleased to say that, despite the ludicrously short notice, a decent number of people responded.&lt;/p&gt;

&lt;p&gt;Everyone was remarkably consistent about where they think Perl 6 will be in the next year, they all expect to see a &amp;lsquo;useful&amp;rsquo; alpha released and running on Parrot by the end of next year. Nat Torkington said that he didn&amp;rsquo;t expect &amp;ldquo;any more unexpected delays &amp;ndash; I believe the doctors have run out of things to remove from Larry.&amp;rdquo; and I think I am sure we all hope he&amp;rsquo;s right, especially about the second part.&lt;/p&gt;

&lt;p&gt;Leo Tötsch said that back when he answered the &amp;ldquo;Who&amp;rsquo;s Who in Perl 6&amp;rdquo; questionnaire back in 2002, he&amp;rsquo;d said he thought Perl 6 would be out on 16 September 2004. He asked to increment the year of that prediction by at least one. Austin Hastings reckoned that we&amp;rsquo;d have a usable early version of Perl 6 sometime in Q2 or Q3, and expects the object apocalypse some time in Q1. However, he expected that there&amp;rsquo;d be fairly substantial exegesis drift from the original apocalypse to the &amp;lsquo;real&amp;rsquo; design. Austin thinks that Perl 6&amp;rsquo;s main &amp;lsquo;cultural&amp;rsquo; impact will be grammars, arguing that in 10 years time &amp;lsquo;getting coders to stop parsing characters, getting them instead to think, code, and word in terms of &amp;ldquo;sentences&amp;rdquo; or &amp;ldquo;paragraphs&amp;rdquo; will be considered a turning point.&amp;rsquo; Don&amp;rsquo;t tell Austin this, but I remember Ward Cunningham saying something similar (but less emphatic) to me after Damian&amp;rsquo;s Perl6::Rules presentation at OSCON 2003.&lt;/p&gt;

&lt;p&gt;Allison Randal&amp;rsquo;s in the slightly less bullish camp, arguing that it should be possible to produce a reasonably solid Perl 6 alpha in about 3 apocalypses time. She reckoned that we may see Apocalypses 12, 17 and 9 finished this year, and maybe a working prototype Perl 6 compiler. Allison&amp;rsquo;s house mate, chromatic, reckoned that we were about 80% done now (I&amp;rsquo;m not sure if he was deliberately invoking the old saw that the first 80% takes 80% of the time, and the last 20% takes the other 80% of the time&amp;hellip;). He predicted that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dan will win his bet with Guido, and that the Python.Net people will be so embarrassed by the piemark that they won&amp;rsquo;t publish numbers.&lt;/li&gt;
&lt;li&gt;Perl 6 won&amp;rsquo;t quite be self-hosting, but it&amp;rsquo;ll be usable for small apps.&lt;/li&gt;
&lt;li&gt;NCI will continue to be much nicer than XS.&lt;/li&gt;
&lt;li&gt;Apocalypse 12 will convince everyone that Roles are what object orientation should have had from the beginning.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Asked for pithy comments, chromatic gave good pith, noting that if he &amp;lsquo;had a test case from everyone who asked &amp;ldquo;When&amp;rsquo;ll it be done&amp;rdquo; and code to pass a test case from everyone who said &amp;ldquo;I&amp;rsquo;d like to help, but I don&amp;rsquo;t know where to start&amp;rdquo;&amp;hellip;&amp;rsquo; then he&amp;rsquo;d happily check them into the repository. He also said that anyone who &amp;lsquo;wants to revive the Perl 6 Documentation project, start turning Apocalypses and Exegeses into story cards, and story cards into tests&amp;rsquo; would be his hero. And mine too. He didn&amp;rsquo;t mention &lt;a href=&#34;http://p6stories.kwiki.org/&#34;&gt;http://p6stories.kwiki.org/&lt;/a&gt; so I&amp;rsquo;ll do that instead.&lt;/p&gt;

&lt;p&gt;Adam Turoff sounded a note of caution; he worries that Perl 6 &amp;lsquo;is Larry&amp;rsquo;s Modula 2&amp;rsquo; but he doesn&amp;rsquo;t think that matters because the real boon is Parrot (and Ponie) which has the potential to open the existing work on CPAN up to any language that targets Parrot (potentially making good work in other languages available to us Perlers too). He didn&amp;rsquo;t think that Perl 6 will offer enough of an incentive for people to move to the new language from Perl 5. Indeed, he argued that the changes in syntax will put people off making the shift. We discussed this on AIM, personally I think Adam&amp;rsquo;s wrong, and that Perl 6 will have enough good new stuff in it that people will bite the bullet of the new syntax (and the changes are reasonably simple after all) in order to get access to Perl 6&amp;rsquo;s goodies. Adam certainly sees the change from Perl 5 to 6 as qualitatively different from the change from 4 to 5. He thinks people aren&amp;rsquo;t going to switch quickly (especially if Ponie fulfils their needs) and he points out that it&amp;rsquo;s going to be a few years before we&amp;rsquo;ve worked out the best practices for using all this new stuff.&lt;/p&gt;

&lt;p&gt;Sadly, I didn&amp;rsquo;t get any feedback from Larry before my deadline (if I do get something, rest assured it&amp;rsquo;ll get space in next week&amp;rsquo;s summary). I did get a lot from everyone&amp;rsquo;s favourite evil genius though. Damian is alive, well and living in Australia. It seems that his recent silence on p6l may have something to do with his hopes &amp;lsquo;to see Exegesis 7 published (along with a full Perl 5 implementation of the new formatting module) by late January.&amp;rsquo; In other Conway related news, he&amp;rsquo;s attending linux.conf.au and will be attempting to describe the top 100 features of Perl 6 in 30 minutes. After that, he&amp;rsquo;s &amp;lsquo;set aside February through April to complete Perl6::Rules and a large test suite for Perl 6 regular expressions, under a small grant generously provided by The Perl Foundation&amp;rsquo;. Which can only be good news.&lt;/p&gt;

&lt;p&gt;Me? I think Perl 6&amp;rsquo;s design &amp;lsquo;in the large&amp;rsquo; will be pretty much done once Apocalypse 12 and its corresponding Exegesis are finished. Of course, the devil is in the details, but I don&amp;rsquo;t doubt that the hoped for existence of a working Perl6::Rules by the end of April is going to provide us with a great deal of the leverage we need to get a working Perl 6 alpha ready for OSCON with something rather more solid ready by the end of the year. Parrot continues to amaze and delight with its progress; Dan tells me that he&amp;rsquo;s about ready to roll out a large parrot based application for his employers, so it&amp;rsquo;s approaching the point where people&amp;rsquo;s salaries will depend on Parrot. I confess I wouldn&amp;rsquo;t be surprised if, by the end of the year, we haven&amp;rsquo;t seen the full implementation of at least one of the big non-Perl scripting languages on top of Parrot.&lt;/p&gt;

&lt;h1 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements.&#34;&gt;Acknowledgements, Apologies, Announcements.&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;Many thanks to those of you who took the time to answer my mail about Perl 6 in the coming year. Apologies to anyone who I may have offended by failing to ask them. If you&amp;rsquo;ve got strong opinions about where you think Perl 6 is going, let me know; I&amp;rsquo;ll either make space for them next week make some space for discussion on my website.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, show your appreciation by contributing to the Perl Foundation to help support the ongoing development of Perl. Money and time are both good. Also, I&amp;rsquo;m always pleased to get feedback at and traffic at my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk:8080/&#34;&gt;http://www.bofh.org.uk:8080/&lt;/a&gt; &amp;ndash; My website, Just a Summary&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2003-12-07</title>
      <link>http://localhost:1313/pub/2003/12/p6pdigest/20031207.html/</link>
      <pubDate>Sun, 07 Dec 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/12/p6pdigest/20031207.html/</guid>
      <description>

&lt;p&gt;Another week, another late summary. Luckily it&amp;rsquo;s been a quiet week so I should get this written faster than usual. As is traditional, we start with perl6-internals&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-build-system-tinkering-parrot-build-system-tinkering-span&#34;&gt;&lt;span id=&#34;Parrot_build_system_tinkering&#34;&gt;Parrot build system tinkering&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty and other discussed extending the Parrot build system to allow for building parrot itself outside the main source directory (useful when Parrot&amp;rsquo;s mounted read only via NFS for example. It&amp;rsquo;s not (quite) possible to do this just yet because of a couple of generated files in the IMCC tree. Leo suggested only generating those when &lt;code&gt;Configure.pl --maintainer&lt;/code&gt; is run, on the grounds that a maintainer shouldn&amp;rsquo;t be building from a read only source. Dan asked for a volunteer to fix things up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.SOL.4.53.0312010940540.18708@maxwell.phys.lafayette.edu&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-object-stuff-object-stuff-span&#34;&gt;&lt;span id=&#34;Object_stuff&#34;&gt;Object stuff&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I (and others I presume) got ready to do the &amp;ldquo;Happy! Happy! Joy! Joy!&amp;rdquo; dance of delight; this was the week that Parrot finally got objects. Or, as Dan described them, &amp;lsquo;objects-ish&amp;rsquo;. Parrot now has single inheritance objects. They&amp;rsquo;re not the final word on the matter, but it&amp;rsquo;s definitely better than a poke in the eye with a sharp stick.&lt;/p&gt;

&lt;p&gt;Dan went on to discuss what needs to be done with them before we&amp;rsquo;re ready for Parrot 0.1 (Objects are one of the criteria for making a point release).&lt;/p&gt;

&lt;p&gt;Dan then went rather quiet, apparently because he got mugged by flu, or something like it, and spent the rest of the week wishing he were dead.&lt;/p&gt;

&lt;p&gt;Meanwhile, Leo lived up to his Patchmonster nickname by checking in a bunch of object related stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bbf0fd3af8cc@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt; &amp;ndash; Rumblings&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010216bbf259ac617f@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt; &amp;ndash; Announcement&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010217bbf261e24e2a@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt; &amp;ndash; The way forward&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bbf81f06483c@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/&lt;/a&gt; &amp;ndash; Dan gets mugged by flu&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=3FD0AEE4.3000500@toetsch.at&#34;&gt;http://groups.google.com/&lt;/a&gt; &amp;ndash; Leo&amp;rsquo;s patches&lt;/p&gt;

&lt;h4 id=&#34;span-id-raising-exceptions-raising-exceptions-span&#34;&gt;&lt;span id=&#34;Raising_exceptions&#34;&gt;Raising exceptions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer wondered about &amp;lsquo;proper exception raising&amp;rsquo; and wondered what the state of play was, and if there were any good examples. Leo Tötsch pointed him at &lt;em&gt;t/pmc/exception.t&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0312011749290.13872@okcomputer.antiflux.org&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-compilation-units-and-the-boundaries-of-imcc-compilation-units-and-the-boundaries-of-imcc-span&#34;&gt;&lt;span id=&#34;Compilation_units_and_the_boundaries_of_IMCC&#34;&gt;Compilation units and the boundaries of IMCC&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Pete Lomax had wondered about package/file local variables in IMCC. At the moment IMCC variables can&amp;rsquo;t be file or package scoped, but Melvin Smith is working on it. As he said this, he asked for suggestions for other potential IMCC features. Cory Spencer wanted to be able to write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if _some_test() goto LABEL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but that was vetoed by Dan (and Melvin) as being rather too high level for an intermediate language that&amp;rsquo;s meant to be a compiler target.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=OF0DEFCC58.E6152282-ON87256DF0.000EABD7-85256DF0.000F20CF@us.ibm.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-string-manipulation-string-manipulation-span&#34;&gt;&lt;span id=&#34;String_manipulation&#34;&gt;String manipulation&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith put forward a convincing argument that IMCC shouldn&amp;rsquo;t concern itself with doing string interpolation as the expected behaviour is too &amp;lsquo;high level language&amp;rsquo; dependent, but that Parrot should have a &lt;code&gt;printf&lt;/code&gt;/&lt;code&gt;sprintf&lt;/code&gt; equivalent, implemented in C for speed. Dan seemed to agree and reckoned it should be addressed as soon as objects were out of the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031201221202.0486c298@pop.mindspring.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-pending-changes-imcc-pending-changes-span&#34;&gt;&lt;span id=&#34;IMCC_pending_changes&#34;&gt;IMCC pending changes&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith posted a list of pending IMCC changes, most of which were concerned with tightening up IMCC behaviour (making it both stricter nd more forgiving&amp;hellip;). Discussion ensued.&lt;/p&gt;

&lt;p&gt;A few days later, Melvin committed some of his changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031127001200.03ab8e18@pop.mindspring.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031205013711.02105c98@pop.mindspring.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-pmc-compiler-2nd-edition-pmc-compiler-2nd-edition-span&#34;&gt;&lt;span id=&#34;PMC_Compiler_2nd_edition&#34;&gt;PMC Compiler 2nd edition&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo applied a &amp;lsquo;really long pending patch&amp;rsquo; which should simplify upcoming vtable changes. Melvin wondered if the time had come to replace the existing &lt;em&gt;ops2c&lt;/em&gt; and &lt;em&gt;pmc2c&lt;/em&gt; with the newer versions. Leo thought that &lt;em&gt;pmc2c2&lt;/em&gt; was definitely stable enough, but wasn&amp;rsquo;t too sure about &lt;em&gt;ops2c2&lt;/em&gt;. Jonathan Worthington pointed out a Win32 bug that was quickly fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=3FCDB6A3.4010901@toetsch.at&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-get-pmc-keyed-in-perlstring-get-pmc-keyed-in-perlstring-span&#34;&gt;&lt;span id=&#34;get_pmc_keyed()_in_PerlString&#34;&gt;&lt;code&gt;get_pmc_keyed()&lt;/code&gt; in PerlString&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Sterling Hughes noted that, in PHP it&amp;rsquo;s valid to index a string as if it were an array. He wondered it would be possible to implement &lt;code&gt;get_pmc_keyed()&lt;/code&gt; on the PerlString vtable to allow for similar tricks with the standard string PMC. I&amp;rsquo;m confused as to what the decision was. I think Leo agreed that it was a good idea, but that it should probably be implemented in a new PMC for the time being&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031202200415.GA6856@bumblebury.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-symbolic-vs-named-variable-register-allocation-symbolic-vs-named-variable-register-allocation-span&#34;&gt;&lt;span id=&#34;Symbolic_vs._Named_variable_register_allocation&#34;&gt;Symbolic vs. Named variable register allocation&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Pete Lomax stumbled over a bug in IMCC&amp;rsquo;s register allocation. Melvin thinks the problem is that much of IMCC&amp;rsquo;s flow analysis code doesn&amp;rsquo;t yet know about the Parrot Calling Conventions and went to have a look to see if there was a quick fix available.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=6mmrsvc93sqcctme5od66k30isn4j4ek4p@4ax.com&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-testing-for-null-testing-for-null-span&#34;&gt;&lt;span id=&#34;Testing_for_null&#34;&gt;Testing for null&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jürgen Bömmels is working on having the Parrot IO system&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; return a PMCNULL on failure instead of an invalid IO-Object (sounds like a good idea to me). The catch is, there doesn&amp;rsquo;t seem to be any way for the bytecode to detect that this has happened. There was some debate about whether what Jürgen was doing was the right thing, or if we shouldn&amp;rsquo;t introduce a new null.pmc, or some other possibility. The consensus in the end seemed to be that using PMCNULL was probably the way to go, but an appropriate test operator hadn&amp;rsquo;t been finally decided upon (but &lt;code&gt;if_null&lt;/code&gt; and &lt;code&gt;unless_null&lt;/code&gt; are the front runners).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m2y8tu0xjg.fsf@helium.physik.uni-kl.de&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-determining-pmc-memory-addresses-determining-pmc-memory-addresses-span&#34;&gt;&lt;span id=&#34;Determining_PMC_memory_addresses&#34;&gt;Determining PMC memory addresses&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;After last week&amp;rsquo;s kerfuffle about the different types of equality Cory Spencer still needed a test for testing if two PMCs had the same address so he posted a patch to add an &lt;code&gt;eq_addr&lt;/code&gt; opcode. Melvin Smith still wasn&amp;rsquo;t sure that the name was quite right though and asked for a description of why Cory needed it (he needs it for implementing a Lisp interpreter).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0312030915240.15127@okcomputer.antiflux.org&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-fixing-the-makefile-dependencies-fixing-the-makefile-dependencies-span&#34;&gt;&lt;span id=&#34;Fixing_the_Makefile_dependencies&#34;&gt;Fixing the Makefile dependencies&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Harry the Surnameless has gone through the makefiles in search of the broken dependencies that meant that parallel makes didn&amp;rsquo;t work and posted a patch. However, he worries that the patch may well introduce other problems.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031206200450.11483.qmail@onion.perl.org&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile_in_perl6-language&#34;&gt;Meanwhile in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The only game in town was the ongoing discussion of Properties, which morphed into a discussion of Larry&amp;rsquo;s tantalizing role based OO formulation. People are generally impressed and excited by what Larry has so far revealed and, in the continuing absence of Apocalypse 12 are speculating like mad. It&amp;rsquo;s fascinating, but it&amp;rsquo;s also next to impossible to summarize beyond saying &amp;ldquo;People talked excitedly about OO&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Oh yes, if you&amp;rsquo;ve not been following, &lt;code&gt;^op&lt;/code&gt; (ie, the vector operators) has become &lt;code&gt;&amp;gt;&amp;gt;op&amp;lt;&amp;lt;&lt;/code&gt; which is, if nothing else, a right swine to write in a POD C&amp;lt;&amp;gt; escape.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=9C375DDD9B669243A2D78FCD607E894003E4FD25@bremo-jg&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=9C375DDD9B669243A2D78FCD607E894003E4FD37@bremo-jg&#34;&gt;http://groups.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Nope, still no link shortening.&lt;/p&gt;

&lt;p&gt;Um&amp;hellip; many apologies to Leon Brocard. Last week I stated that he&amp;rsquo;d become the new Pumpking for Perl 5.004 and would not be appearing as a running joke in these summaries until he relinquished the pumpkin. However, what I should have said is that he has become the new Pumpking for Perl 5.005_04 and will not be appearing as a running joke in these summaries until he relinquishes said pumpkin.&lt;/p&gt;

&lt;p&gt;Any suggestions that last week&amp;rsquo;s mistake was deliberate so I could continue the joke for one more week are utterly without foundation.&lt;/p&gt;

&lt;p&gt;It was just an &amp;lsquo;amusing&amp;rsquo; consequence of my stupidity, obviously.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the Perl 6 effort. I also welcome feedback at or at my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk:8080/&#34;&gt;http://www.bofh.org.uk:8080/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6, week ending 2003-11-30</title>
      <link>http://localhost:1313/pub/2003/11/p6pdigest/20031130.html/</link>
      <pubDate>Sun, 30 Nov 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/11/p6pdigest/20031130.html/</guid>
      <description>

&lt;p&gt;Welcome back to the weekly Perl 6 Summary, which I&amp;rsquo;m hoping to keep on a weekly cycle for the foreseeable future.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s been a relatively low volume week this week, I&amp;rsquo;m assuming that Thanksgiving had something to do with it (I hope those of you who celebrate it had a jolly good extended weekend), and for the first time in ages perl6-language saw almost as much traffic as perl6-internals. We&amp;rsquo;re still going to start with perl6-internals though.&lt;/p&gt;

&lt;h4 id=&#34;span-id-some-pir-how-do-i-questions-some-pir-how-do-i-questions-span&#34;&gt;&lt;span id=&#34;Some_PIR_&#34;How_do_I?&#34;_questions&#34;&gt;Some PIR &amp;ldquo;How do I?&amp;rdquo; questions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Last week Dan put up a list of questions about IMCC, intending it as a bit of grit. This week Melvin Smith added a couple of layers of nacre by checking in an initial IMCC FAQ (you&amp;rsquo;ll find it at &lt;em&gt;imcc/docs/imcfaq.pod&lt;/em&gt; in your parrot directory if you&amp;rsquo;re following with CVS). After an initial flurry of work on adding to the FAQ, the discussion seems to have drifted off into discussions of bike shed pigmentation. Yes, the FAQ may need to be split eventually, but splitting an FAQ into sub documents is trivial compared to actually answering the questions. Ahem. Editorial ends.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031123011917.03503858@pop.mindspring.com&#34;&gt;http://groups.google.com/groups?selm=5.1.1.6.2.20031123011917.03503858@pop.mindspring.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.parrotcode.org/faq/imcc&#34;&gt;http://www.parrotcode.org/faq/imcc&lt;/a&gt; &amp;ndash; The FAQ&lt;/p&gt;

&lt;h4 id=&#34;span-id-pio-eof-pio-eof-span&#34;&gt;&lt;span id=&#34;PIO_eof&#34;&gt;PIO_eof&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky had a few questions about how the Parrot IO subsystem (PIO) handles error conditions. This sparked a discussion of whether the various PIO functions should make some assertions up front about their arguments. Consensus said &amp;ldquo;yes&amp;rdquo;, they help with debugging, and the performance &amp;lsquo;hit&amp;rsquo; is minuscule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=006c01c3b267$7e683500$6b9d943e@87w5ovc8gmxcahy&#34;&gt;http://groups.google.com/groups?selm=006c01c3b267$7e683500$6b9d943e@87w5ovc8gmxcahy&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-freezing-and-thawing-freezing-and-thawing-span&#34;&gt;&lt;span id=&#34;Freezing_and_Thawing&#34;&gt;Freezing and Thawing&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of the details of object serialization continued this week. Judging by the amount of clarification traffic that&amp;rsquo;s been going on in this thread (and others), I find myself wondering if the time has come for some generous benefactor to sponsor the principals to get together in a conference room with copious whiteboard acreage. Sponsors welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311240851430.31299@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311240851430.31299@sprite.sidhe.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-segfault-warning-boxes-segfault-warning-boxes-span&#34;&gt;&lt;span id=&#34;Segfault_warning_boxes&#34;&gt;Segfault warning boxes&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Consider a system of test machines, all of them happily running in unattended mode, constantly checking out the latest version of parrot, compiling everything, running the tests and reporting the results to some central webserver that displays a status report for all to see. It&amp;rsquo;s not just a good idea, it&amp;rsquo;s the Parrot tinderbox.&lt;/p&gt;

&lt;p&gt;Now, consider an operating system that takes it upon itself to throw up a modal dialog box when a program segfaults.&lt;/p&gt;

&lt;p&gt;The two don&amp;rsquo;t sit well together do they? Which is why Dan has committed a patch to disable the &amp;ldquo;Your program has crashed, want to send a report to Microsoft?&amp;rdquo; box that pops up on Win32 when Parrot segfaults. Still, at least it can be disabled.&lt;/p&gt;

&lt;p&gt;Dan asked for opinions on whether the (non tinderbox) default should be to put up a dialog box or not. And it appears that, if you disable the dialog box, there&amp;rsquo;s no other notification (apart from the failed test, obviously) that there was a segfault. I am sure I&amp;rsquo;m not alone in boggling at this, but it looks like the default will be to display the dialog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311251153350.19018@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311251153350.19018@sprite.sidhe.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-perl-6-updated-perl-6-updated-span&#34;&gt;&lt;span id=&#34;Perl_6_updated&#34;&gt;Perl 6 updated&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal sent in a patch to update the Perl 6 compiler to use the right operators (&lt;code&gt;^+&lt;/code&gt; becomes &lt;code&gt;&amp;gt;&amp;gt;+&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;~~&lt;/code&gt; (meant xor) becomes &lt;code&gt;^^&lt;/code&gt;, making way for &lt;code&gt;=~&lt;/code&gt; to become &lt;code&gt;~~&lt;/code&gt;). She&amp;rsquo;s still working on other tweaks to get the semantics of what&amp;rsquo;s already been implemented right, and claims to be sufficiently annoyed by the failing regex tests that she might have to go and make them work to remove the annoyance. Which would be good. (I&amp;rsquo;m afraid that the tantalizing code I mentioned last week has actually been there for ages, as I feared it had). That capital fellow, chromatic applied the patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=rt-24559-67828.1.16647251862517@rt.perl.org&#34;&gt;http://groups.google.com/groups?selm=rt-24559-67828.1.16647251862517@rt.perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-string-formatting-and-transformation-string-formatting-and-transformation-span&#34;&gt;&lt;span id=&#34;String_formatting_and_transformation&#34;&gt;String formatting and transformation&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan got around to specifying some details about string formatting and transformation. Essentially there will be various case changing transformations and a couple of different formatting approaches, one &lt;code&gt;sprintf&lt;/code&gt; like and another more like traditional COBOL style formatting. Dan&amp;rsquo;s not sure yet whether these formatters will get ops or simply be implemented in the standard library.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010202bbebfb35bca6@%5B10.0.1.3%5D&#34;&gt;http://groups.google.com/groups?selm=a06010202bbebfb35bca6@%5B10.0.1.3%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-autoload-anyone-autoload-anyone-span&#34;&gt;&lt;span id=&#34;AUTOLOAD_anyone?&#34;&gt;AUTOLOAD anyone?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Someone calling itself ibotty wondered if there would be a default PMC method that gets automagically called whenever a method call isn&amp;rsquo;t found. To which the answer is &amp;ldquo;Yes, when it&amp;rsquo;s done&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031127235646.20556.qmail@onion.perl.org&#34;&gt;http://groups.google.com/groups?selm=20031127235646.20556.qmail@onion.perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-determining-pmc-memory-addresses-determining-pmc-memory-addresses-span&#34;&gt;&lt;span id=&#34;Determining_PMC_memory_addresses&#34;&gt;Determining PMC memory addresses&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer wanted to know if there was a PASM way of finding whether two PMCs share the same memory address. &amp;ldquo;Not yet&amp;rdquo;, said Leo Tötsch, &amp;ldquo;but there are entries in the vtable to do it&amp;rdquo;. This sparked a discussion of the meaning of &amp;lsquo;equal&amp;rsquo;. It was suggested that Parrot use Lisp&amp;rsquo;s triple equality test operators (one tests if two things are the same thing, the second if two things have the same value, and the third tests that they have the same structure). Jos Visser argued (convincingly I thought) that having three operators with the same semantics might be a Good Thing, but using Lisp&amp;rsquo;s names (&lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;eql&lt;/code&gt; and &lt;code&gt;equal&lt;/code&gt;) for them would definitely be a Bad Thing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311272124130.31738@okcomputer.antiflux.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311272124130.31738@okcomputer.antiflux.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-on-perl6-language-meanwhile-on-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_on_perl6-language&#34;&gt;Meanwhile, on perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-core-language-philosophy-core-language-philosophy-span&#34;&gt;&lt;span id=&#34;&#39;Core&#39;_language_philosophy&#34;&gt;&amp;lsquo;Core&amp;rsquo; language philosophy&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Branching off from a thread about using &lt;code&gt;catch&lt;/code&gt; as a statement modifier &lt;em&gt;á la&lt;/em&gt; &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt; etc., Michael Lazzaro waxed philosophical about the distinction between core and library. He wondered if putting syntactic sugar into CP6AN and then having almost everyone install it anyway wasn&amp;rsquo;t a false economy. He went on to defend the idea of the &lt;code&gt;catch&lt;/code&gt; modifier.&lt;/p&gt;

&lt;p&gt;Larry didn&amp;rsquo;t agree. He suggested that a better way would be to look at some kind of pragma which would make &lt;code&gt;err&lt;/code&gt; (the low priority form of &lt;code&gt;//&lt;/code&gt;, aka &amp;lsquo;defined or&amp;rsquo;) put an implicit &lt;code&gt;try&lt;/code&gt; around its left hand argument. Michael still wasn&amp;rsquo;t keen, but he wants to use &lt;code&gt;undef&lt;/code&gt; to stand for a SQLesque NULL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=479C7C28-2048-11D8-A666-000A277AA894@cognitivity.com&#34;&gt;http://groups.google.com/groups?selm=479C7C28-2048-11D8-A666-000A277AA894@cognitivity.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-c-comma-the-c-comma-span&#34;&gt;&lt;span id=&#34;The_C_Comma&#34;&gt;The C Comma&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer doesn&amp;rsquo;t like the C Comma &amp;ndash; the one that lets you write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    while $n++, $foo &amp;gt; $bar {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He does like the semantics though, so he proposed renaming the C comma and calling it &lt;code&gt;then&lt;/code&gt;. People liked the idea of changing the name because, if nothing else, it would mean one could write &lt;code&gt;@foo = 1,2,3;&lt;/code&gt; and get a list with three elements rather than a one element list containing the number 3. However, they weren&amp;rsquo;t necessarily keen on &lt;code&gt;then&lt;/code&gt; as the new name. Damian wondered if we shouldn&amp;rsquo;t just insist on&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   while do { $n++; $foo &amp;gt; $bar } {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then people started coming up various synonyms for &amp;lsquo;and&amp;rsquo; in Latin like &lt;em&gt;ac&lt;/em&gt;, &lt;em&gt;cum&lt;/em&gt; et cetera. Larry hasn&amp;rsquo;t ruled on any of the options yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031125000038.GA30028@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups?selm=20031125000038.GA30028@babylonia.flatirons.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-properties-properties-span&#34;&gt;&lt;span id=&#34;Properties&#34;&gt;Properties&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer once again demonstrated his mastery of the telling question by asking a series of questions about runtime properties. Larry&amp;rsquo;s answers, both to the immediate question and in the thread that followed make for fascinating reading and leave us all waiting with bated breath for Apocalypse 12 on Objects.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m afraid I&amp;rsquo;m going to punt on attempting to summarize the thread though; Larry&amp;rsquo;s always hard to summarize when he&amp;rsquo;s introducing anything new. You really should (at least) read his initial sketch though &amp;ndash; role based object orientation looks (to this reader at least) like a brilliant idea.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031127070230.GA8488@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups?selm=20031127070230.GA8488@babylonia.flatirons.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031127212123.GA24862@wall.org&#34;&gt;http://groups.google.com/groups?selm=20031127212123.GA24862@wall.org&lt;/a&gt; &amp;ndash; Larry outlines his current thinking&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve still not got &amp;lsquo;round to getting the link shortening in place I&amp;rsquo;m afraid. For some reason the appropriate modules don&amp;rsquo;t seem to want to install on my G5. Maybe next week.&lt;/p&gt;

&lt;p&gt;Leon Brocard has taken on the role of Pumpking for Perl 5.004 and will not be appearing in these summaries for the duration of his reign out of respect. After all, being a pumpking requires a kind of dignity that would be incompatible with being a running joke.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing time and/or money to the Perl Foundation to help support the Perl 6 effort. You might also like to send me feedback at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;p6summarizer@bofh.org.uk&lt;/a&gt;, or drop by my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk:8080/&#34;&gt;http://www.bofh.org.uk:8080/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This fortnight on Perl 6, week ending 2003-11-23</title>
      <link>http://localhost:1313/pub/2003/11/p6pdigest/20031123.html/</link>
      <pubDate>Sun, 23 Nov 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/11/p6pdigest/20031123.html/</guid>
      <description>

&lt;p&gt;Right, hopefully things are back to normal(ish) after the disk crashes that rather spoilt the last summary. I&amp;rsquo;ve managed to fill in my mail archive too so this summary will cover the events of the last fortnight (that&amp;rsquo;s two weeks for those whose version of English lacks this vital unit of time).&lt;/p&gt;

&lt;p&gt;We start, as usual, with all the action in perl6-internals.&lt;/p&gt;

&lt;h4 id=&#34;span-id-unifying-call-and-return-unifying-call-and-return-span&#34;&gt;&lt;span id=&#34;Unifying_call_and_return&#34;&gt;Unifying call and return&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s been a long time coming, but Dan returned from LL3 suitably refreshed by his dealings with academics (&amp;ldquo;You can [&amp;hellip;] consider a a sub PMC as a frozen semi-stateless continuation&amp;rdquo;) and set about unifying Parrot&amp;rsquo;s call and return conventions. The strange thing is that everyone&amp;rsquo;s been wanting this for months now, but that didn&amp;rsquo;t mean there wasn&amp;rsquo;t discussion.&lt;/p&gt;

&lt;p&gt;Meanwhile Melvin Smith set about making this discussion moot (from the point of view of someone targeting Parrot) by hiding the details behind IMCC directives (which already happens admittedly, but Melvin&amp;rsquo;s in the process of renaming the &lt;code&gt;.pcc_*&lt;/code&gt; directives to get rid of the &lt;code&gt;.pcc_&lt;/code&gt; and (eventually) allowing for pluggable calling conventions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311100905190.15737@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311100905190.15737@sprite.sidhe.org&lt;/a&gt; &amp;ndash; Dan&amp;rsquo;s heads up&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311121141090.28619@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311121141090.28619@sprite.sidhe.org&lt;/a&gt; &amp;ndash; Changes, draft 1&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=a06010201bbdd728d2b16@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?selm=a06010201bbdd728d2b16@%5B10.0.1.2%5D&lt;/a&gt; &amp;ndash; Dan puts his foot down&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031115234124.020a7f60@pop.mindspring.com&#34;&gt;http://groups.google.com/groups?selm=5.1.1.6.2.20031115234124.020a7f60@pop.mindspring.com&lt;/a&gt; &amp;ndash; Melvin Makes it Moot&lt;/p&gt;

&lt;h4 id=&#34;span-id-reviewing-a-book-about-vms-reviewing-a-book-about-vms-span&#34;&gt;&lt;span id=&#34;Reviewing_a_book_about_VMs&#34;&gt;Reviewing a book about VMs&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Stéphane Payrard bought a copy of &amp;ldquo;Virtual Machine Design and Implementation in C++&amp;rdquo; and reviewed it for perl6-internals. He didn&amp;rsquo;t like it. Which is putting it mildly.&lt;/p&gt;

&lt;p&gt;This led to the inevitable questions about finding good books on VM design. Stéphane quoted Leon Brocard&amp;rsquo;s preemption of this question from London.pm: &amp;ldquo;No, there&amp;rsquo;s surprisingly little out there on virtual machine design and development&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031113173044.GB5924@stefp.dyndns.org&#34;&gt;http://groups.google.com/groups?selm=20031113173044.GB5924@stefp.dyndns.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-gets-high-level-sub-call-syntax-imcc-gets-high-level-sub-call-syntax-span&#34;&gt;&lt;span id=&#34;IMCC_gets_high_level_sub_call_syntax&#34;&gt;IMCC gets high level sub call syntax&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith continues to make PIR less like Assembly language and more like pseudo code. You can now write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   _foo()
   var = _foo()
   var = _foo(a, b)
   (var1, var2) = _foo(a, b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and IMCC will do the Right Thing. Go Melvin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031116195005.03c2c488@pop.mindspring.com&#34;&gt;http://groups.google.com/groups?selm=5.1.1.6.2.20031116195005.03c2c488@pop.mindspring.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-imcc-problems-with-library-loading-imcc-problems-with-library-loading-span&#34;&gt;&lt;span id=&#34;IMCC_problems_with_library_loading&#34;&gt;IMCC problems with library loading&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Clites pointed out some issues with IMCC&amp;rsquo;s behaviour when loading external libraries and wondered about definitive docs on the macro syntax (I think the current definitive docs may well be the source code). Leo Tötsch seemed to accept that there were issues with the current state of IMCC in this context, but implied that fixing it wasn&amp;rsquo;t an immediate priority.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=C5EC6699-18A1-11D8-92BE-000393A6B9DA@mac.com&#34;&gt;http://groups.google.com/groups?selm=C5EC6699-18A1-11D8-92BE-000393A6B9DA@mac.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-new-list-proposal-a-new-list-proposal-span&#34;&gt;&lt;span id=&#34;A_new_list_proposal&#34;&gt;A new list proposal&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Melvin Smith proposed creating a parrot-compilers mailing list as a general purpose list for any and all language development targeting Parrot. He even went so far as to volunteer to maintain and distribute the FAQ.&lt;/p&gt;

&lt;p&gt;The immediate response was positive, but Leo and others didn&amp;rsquo;t really think the volume of traffic currently warranted it (which, I think, was part of Melvin&amp;rsquo;s point, Parrot is reaching the point where it can just be &lt;em&gt;used&lt;/em&gt; without necessarily needing to worry over much about its internals. I think Melvin is concerned that the technical level (and implicit Perlcentricity) of the current internals list is putting potential compiler developers off participating).&lt;/p&gt;

&lt;p&gt;So, if you&amp;rsquo;re reading this because you&amp;rsquo;re interested in using Parrot as a target platform, but you don&amp;rsquo;t subscribe to the internals list but would subscribe to a parrot-compilers list, could you let me, Melvin, or the list know? I&amp;rsquo;ve already committed to including any such list in my summaries (at least until traffic reaches the point where someone decides to do a dedicated summary). Let us know if you think it&amp;rsquo;s a terrible idea too of course.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031117135818.021515f8@pop.mindspring.com&#34;&gt;http://groups.google.com/groups?selm=5.1.1.6.2.20031117135818.021515f8@pop.mindspring.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-documentation-review-parrot-documentation-review-span&#34;&gt;&lt;span id=&#34;Parrot_Documentation_Review&#34;&gt;Parrot Documentation Review&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael Scott posted a review of Parrot documentation with pointers of where to find existing docs and a discussion of where people &lt;em&gt;should&lt;/em&gt; be looking. Somewhat bizarrely, he failed to give the URL of the Parrot Wiki, his favoured source of documentation (favoured for the very good reason that it&amp;rsquo;s excellent). However, you&amp;rsquo;ll find the URL below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=47906C10-1959-11D8-AC7B-0050E479991D@mac.com&#34;&gt;http://groups.google.com/groups?selm=47906C10-1959-11D8-AC7B-0050E479991D@mac.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vendian.org/parrot/wiki/&#34;&gt;http://www.vendian.org/parrot/wiki/&lt;/a&gt; &amp;ndash; The very lovely and worthwhile parrot Wiki&lt;/p&gt;

&lt;h4 id=&#34;span-id-freeze-is-in-freeze-is-in-span&#34;&gt;&lt;span id=&#34;Freeze_is_in&#34;&gt;Freeze is in&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan announced that he&amp;rsquo;s checked in Leo&amp;rsquo;s preliminary patch implementing freeze/thaw, commenting that it&amp;rsquo;s likely to change dramatically internally and that the vtable/low-level API wasn&amp;rsquo;t final, but that the op-level interface would be stable. Jeff Clites was initially concerned that the patch used things he was expecting to be able to use for his (in progress) ordered destruction patch. However, after some discussion, he and Leo seem to be confident that the two things can be unified.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311191201490.7503@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311191201490.7503@sprite.sidhe.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-warning-patrol-warning-patrol-span&#34;&gt;&lt;span id=&#34;Warning_Patrol&#34;&gt;Warning Patrol&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jürgen Bömmels has been doing a little warning patrol of parrot and finds that only a very few fixes to IMCC are required to get a warning-free compile and posted a patch with them in. Leo applied it immediately, reasoning that, whilst IMCC&amp;rsquo;s under heavy development, there&amp;rsquo;s no excuse for throwing compile warnings, and every time the perpetrators have to integrate such patches they&amp;rsquo;ll become more likely to try not to generate the warnings in the first place.&lt;/p&gt;

&lt;p&gt;Inspired by this, Jonathan Worthington posted a similar patch to eliminate warnings when building for win32, which Leo also applied.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=m24qwzgj0y.fsf@helium.physik.uni-kl.de&#34;&gt;http://groups.google.com/groups?selm=m24qwzgj0y.fsf@helium.physik.uni-kl.de&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-finished-stable-parts-of-parrot-finished-stable-parts-of-parrot-span&#34;&gt;&lt;span id=&#34;Finished/stable_parts_of_Parrot?&#34;&gt;Finished/stable parts of Parrot?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Robin Redeker wondered which bits of Parrot and IMCC could be considered stable enough to use in implementing a language. Leo opined that existing syntax will not change much, most of the expected changes relate to things like adding support for calling conventions and simplifications like replacing &lt;code&gt;.pcc_sub&lt;/code&gt; with &lt;code&gt;.sub&lt;/code&gt;. Melvin Smith pitched in with rather more detail about what was expected to change and the kind of changes that could be expected in the future. Reading this it&amp;rsquo;s apparent that we&amp;rsquo;ve reached the point where almost any conceivable extension to IMCC will be backward compatible with earlier versions. Famous last words I know, but it is looking that way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031120192528.GA6967@x-paste.de&#34;&gt;http://groups.google.com/groups?selm=20031120192528.GA6967@x-paste.de&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-do-steve-fink-s-debugging-for-him-do-steve-fink-s-debugging-for-him-span&#34;&gt;&lt;span id=&#34;Do_Steve_Fink&#39;s_debugging_for_him&#34;&gt;Do Steve Fink&amp;rsquo;s debugging for him&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Steve Fink had a problem with some generated code throwing a segfault when it was run and, having hit the debugging wall himself, posted the code to the list and asked help. Leo tracked down the bug in Parrot and fixed it. However, that&amp;rsquo;s not why this made the summary, what&amp;rsquo;s interesting is the sample of code that the problem code was generated from. Here it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  rule thing() {
      &amp;lt;[a-z]&amp;gt;+
  }

  rule parens() {
      { print &amp;quot;entering parens\n&amp;quot;; }
      \( [ &amp;lt;thing&amp;gt; | &amp;lt;parens&amp;gt; | \s ]* \)
      { print &amp;quot;leaving parens\n&amp;quot;; }
  }

  sub main() {
      my $t = &amp;quot;()()(((blah blah () blah))(blah))&amp;quot;;
      my $t2 = $t _ &amp;quot;)&amp;quot;;
      print &amp;quot;ok 8\n&amp;quot; if $t2 !~ /^ &amp;lt;parens&amp;gt; $/;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks tantalizing doesn&amp;rsquo;t it? Someone&amp;rsquo;s now going to tell me that the code in question has been there forever, but I&amp;rsquo;m still tantalized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031121071225.GI26642@foxglove&#34;&gt;http://groups.google.com/groups?selm=20031121071225.GI26642@foxglove&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-another-minor-tasks-for-the-interested-another-minor-tasks-for-the-interested-span&#34;&gt;&lt;span id=&#34;Another_minor_tasks_for_the_interested&#34;&gt;Another minor tasks for the interested&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan discovered that a &lt;code&gt;make -j 4&lt;/code&gt; dies quickly and horribly, which seems to imply that there&amp;rsquo;s a dependency or two missing from the nest of twisty makefiles that make up the Parrot build system. He asked for volunteers to fix things. There&amp;rsquo;s been some work done on this, but no definitive fix so far.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311211058540.29189@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311211058540.29189@sprite.sidhe.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-some-pir-how-do-i-questions-some-pir-how-do-i-questions-span&#34;&gt;&lt;span id=&#34;Some_PIR_&#34;How_do_I?&#34;_questions&#34;&gt;Some PIR &amp;ldquo;How do I?&amp;rdquo; questions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan threw a list of questions about IMCC out to the list as things that would really benefit from being documented. Sterling Hughes added a question or two, and Melvin Smith volunteered to get the answers written up real soon now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311211515220.29189@sprite.sidhe.org&#34;&gt;http://groups.google.com/groups?selm=Pine.LNX.4.58.0311211515220.29189@sprite.sidhe.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-bytecode-portability-and-word-int-sizes-bytecode-portability-and-word-int-sizes-span&#34;&gt;&lt;span id=&#34;Bytecode_portability_and_word/int_sizes&#34;&gt;Bytecode portability and word/int sizes&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Now that Parrot has the beginnings of freeze/thaw support, Melvin Smith restarted discussion of ensuring that Parrot&amp;rsquo;s bytecode format is portable. He pointed at several issues that need resolving. Discussion continues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=5.1.1.6.2.20031122120034.02236230@pop.mindspring.com&#34;&gt;http://groups.google.com/groups?selm=5.1.1.6.2.20031122120034.02236230@pop.mindspring.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-fun-with-multi-fun-with-multi-span&#34;&gt;&lt;span id=&#34;Fun_with_&#39;multi&#39;&#34;&gt;Fun with &amp;lsquo;multi&amp;rsquo;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of multi dispatch rolled on into the current summary period. Luke Palmer pointed out that &lt;code&gt;multi&lt;/code&gt; is no longer a declarator but a modifier, allowing for fine-grained control of the &amp;lsquo;scope&amp;rsquo; of a method/function/whatever. Larry pointed out that &amp;lsquo;multi&amp;rsquo; is orthogonal to scope, saying simply &amp;ldquo;I&amp;rsquo;m putting multiple names into a spot that would ordinarily demand a unique name.&amp;rdquo; and went on to explain precisely what that implied.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031110094753.GA14948@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups?selm=20031110094753.GA14948@babylonia.flatirons.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031119025313.GA10300@wall.org&#34;&gt;http://groups.google.com/groups?selm=20031119025313.GA10300@wall.org&lt;/a&gt; &amp;ndash; Larry Clarifies&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-perl-6-design-process-the-perl-6-design-process-span&#34;&gt;&lt;span id=&#34;The_Perl_6_design_process&#34;&gt;The Perl 6 design process&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams worried that all of the design of Perl 6 seems to come from Larry and Damian, with the language list being relegated to asking questions about how stuff works in more detail and in sniffing out tricky bits. Taken in combination with the real world&amp;rsquo;s nasty habit of saddling Larry and Damian with health and financial problems, well, Rod worries, and wonders if there&amp;rsquo;s anything that can be done to improve matters.&lt;/p&gt;

&lt;p&gt;The redoubtable chromatic (who prefers it if I always render his name in all lower case, even at the beginning of sentences, hence his becoming redoubtable) gave the Standard Answer to such questions, pointing out that the reason things are going through Larry is because, well, Larry&amp;rsquo;s bloody good at it. However, he did suggest that we&amp;rsquo;re now at the point where we can probably start turning existing design docs into story cards and programmer tests for Perl 6, which should make implementation a good deal easier, and pointed to the Perl XP Training Wiki as a good place to look into how such tools are used to develop code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=4.2.0.58.20031114234841.00aa39e0@rodadams.net&#34;&gt;http://groups.google.com/groups?selm=4.2.0.58.20031114234841.00aa39e0@rodadams.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xptrain.perl-cw.com/&#34;&gt;http://xptrain.perl-cw.com/&lt;/a&gt; &amp;ndash; The Perl XP Training Wiki&lt;/p&gt;

&lt;h4 id=&#34;span-id-control-flow-variables-control-flow-variables-span&#34;&gt;&lt;span id=&#34;Control_flow_variables&#34;&gt;Control flow variables&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer doesn&amp;rsquo;t like the repetition and ugliness inherent in code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $is_ok = 1;
  for 0..6 -&amp;gt; $t
    { if abs(@new[$t] = @new[$t+1]) &amp;gt; 3 { $is_ok = 0; last } }

  if $is_ok { push @moves: [$i, $j] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and wondered if there was a Perl6ish way of eliminating &lt;code&gt;$is_ok&lt;/code&gt;. He suggested something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for 0..6 -&amp;gt; $t
    { if abs(@new[$t] - @new [$t+1]) &amp;gt; 3 { last }}
  FINISH 
    { push @moves: [$i, $j] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simon Cozens made a plea to eschew adding syntax to the language when it would be better to find a general mechanism. He wondered if a better approach may be to have &lt;code&gt;for&lt;/code&gt; return a status, by analogy with Perl 6&amp;rsquo;s &lt;code&gt;if&lt;/code&gt;, which would allow one to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for 0..6 -&amp;gt; $t { 
    last if abs(@new[$t] - @new[$t+1] &amp;gt; 3; 
  } or push @moves: [$i, $j];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which wasn&amp;rsquo;t really well liked (I&amp;rsquo;m practicing my understatement here, okay?) However, Simon&amp;rsquo;s point about distinguishing between Perl 6 the language and stuff that belongs in CP6AN (CPAN for Perl 6) was well made and taken.&lt;/p&gt;

&lt;p&gt;The thread&amp;rsquo;s almost unsummarizable, it went off in so many different directions, and elicited some good stuff from Larry about the thinking behind Perl 6, along with a horde of solutions to Luke&amp;rsquo;s problem. Some of &amp;lsquo;em even work in Perl 5, at the expense of some seriously ugly looking code. Piers Cawley wrapped one solution, based on a guard clause approach, up in a higher order function, but fumbled the ball on working out the macro syntax, which pulled the discussion in another direction. Meanwhile other subthreads led to discussions of generators, coroutines, Mathematica&amp;rsquo;s &lt;code&gt;Sow[]&lt;/code&gt; and &lt;code&gt;Reap[]&lt;/code&gt; and legitimate uses of &lt;code&gt;goto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And Larry emphasised that nested modifiers are still quite illegal in Standard Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031118142052.GA5735@babylonia.flatirons.org&#34;&gt;http://groups.google.com/groups?selm=20031118142052.GA5735@babylonia.flatirons.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031119181906.GD10300@wall.org&#34;&gt;http://groups.google.com/groups?selm=20031119181906.GD10300@wall.org&lt;/a&gt; &amp;ndash; Larry on language design&lt;/p&gt;

&lt;h4 id=&#34;span-id-s-in-string-context-should-return-the-string-s-in-string-context-should-return-the-string-span&#34;&gt;&lt;span id=&#34;s///_in_string_context_should_return_the_string&#34;&gt;&lt;code&gt;s///&lt;/code&gt; in string context should return the string&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;In another of those deceptively &amp;lsquo;pregnant&amp;rsquo; posts, Stéphane Payrard proposed that &lt;code&gt;s///&lt;/code&gt; in string context should return the string after substitution. Austin Hastings proposed something scary, which led to Larry contemplating making&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $x.s/foo/bar/.s/moo/goo/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;work somehow. (Which is actually less scary than Austin&amp;rsquo;s original proposal). I think he rejected the idea for the time being though.&lt;/p&gt;

&lt;p&gt;Piers Cawley suggested that it should return the substituted string, with an appropriate boolean property set depending on whether any substitutions were made. But then there issues of how you strip such properties off if you want to use the standard boolean interpretations of a string. Luke Palmer suggested the rather lovely &lt;code&gt;but nothing&lt;/code&gt; meta property.&lt;/p&gt;

&lt;p&gt;I have the feeling that what&amp;rsquo;s actually going to happen is that we&amp;rsquo;ll end up with a supplementary, non destructive form of &lt;code&gt;s///&lt;/code&gt; which doesn&amp;rsquo;t alter the original string, but returns a new string with the substitutions made.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?selm=20031118171859.GH3887@stefp.dyndns.org&#34;&gt;http://groups.google.com/groups?selm=20031118171859.GH3887@stefp.dyndns.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-apologies-announcements-acknowledgements-apologies-announcements-span&#34;&gt;&lt;span id=&#34;Acknowledgements,_Apologies,_Announcements&#34;&gt;Acknowledgements, Apologies, Announcements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Sorry, we&amp;rsquo;re a tad late again, sorry too to those of you reading this on the mailing lists, I&amp;rsquo;ve not got &amp;lsquo;round to reimplementing the software to shorten the article URLs.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable you might like to show your appreciation by contributing money or time to the Perl Foundation and the Perl 6 effort. , or you could give me feedback directly at &lt;a href=&#34;mailto:p6summarizer@bofh.org.uk&#34;&gt;p6summarizer@bofh.org.uk&lt;/a&gt;, or stop by at my website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk:8080/&#34;&gt;http://www.bofh.org.uk:8080/&lt;/a&gt; &amp;ndash; My website, &amp;ldquo;Just a Summary&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

