<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pge on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pge/</link>
    <description>Recent content in Pge on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/pge/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week in Perl 6, Through August 14, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</link>
      <pubDate>Thu, 18 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</guid>
      <description>

&lt;p&gt;As you will note from the date in the title, it&amp;rsquo;s been a short week. We&amp;rsquo;re switching back to a midnight Sunday/Monday rollover in order to make life easier for the Perl.com types. So, if I can avoid being distracted too much by the second Ashes test, I&amp;rsquo;ll try to get the summary finished before Monday is out, which should please chromatic.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Another low-volume week in &lt;em&gt;perl6-compiler&lt;/em&gt;; probably because, with the high speed of Pugs development, most of the discussion happens on IRC.&lt;/p&gt;

&lt;h4 id=&#34;container-model-pictures-and-questions-http-groups-google-com-groups-threadm-20050806162158-gb2263-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050806162158.GB2263@aut.dyndns.org&#34;&gt;Container Model, Pictures, and Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus fielded some questions about, and updated the pictures of, the container model.&lt;/p&gt;

&lt;h4 id=&#34;why-pxperl-http-groups-google-com-groups-threadm-20050808125840-22956-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050808125840.22956.qmail@lists.develooper.com&#34;&gt;Why PXPerl?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert (No Surname) asked what were the benefits of PXPerl over the ActiveState distribution. In short, PXPerl comes with Parrot and Pugs, which ActiveState doesn&amp;rsquo;t. If you set your path appropriately, you can continue to use the ActiveState Perl and just rely on PXPerl for Parrot and Pugs.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-lexical-declarations-http-groups-google-com-groups-threadm-20050809193348-ga27323-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050809193348.GA27323@wall.org&#34;&gt;Hoisting Lexical Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry answered some of Autrijus&amp;rsquo;s questions about Perl 6&amp;rsquo;s lexical scoping rules. Apparently what Pugs currently does is close enough to sane to be going on with.&lt;/p&gt;

&lt;h4 id=&#34;warnock-in-pugsland-http-groups-google-com-groups-threadm-20050811040041-gb56898-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050811040041.GB56898@aut.dyndns.org&#34;&gt;Warnock in Pugsland&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, in Pugsland, a Warnocked patch usually means that the person who posted the patch simply received a committer bit and didn&amp;rsquo;t mention the fact on the list.&lt;/p&gt;

&lt;h4 id=&#34;metamodel-notes-http-pugscode-org-images-metamodel-png&#34;&gt;&lt;a href=&#34;http://pugscode.org/images/metamodel.png&#34;&gt;Metamodel Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray posted some &lt;a href=&#34;http://groups.google.com/groups?threadm=20050811193918.GB12852@vs2.capwiz.com&#34;&gt;notes&lt;/a&gt; and &lt;a href=&#34;http://groups.google.com/groups?threadm=20050812170838.GA820@aut.dyndns.org&#34;&gt;ASCII art&lt;/a&gt; about the metamodel. Autrijus added pointers to further pictures.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;updated-intro-pod-http-groups-google-com-groups-threadm-01bf01c59ba4-384dc5d0-0200a8c0-server&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=01bf01c59ba4$384dc5d0$0200a8c0@SERVER&#34;&gt;Updated &lt;em&gt;intro.pod&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington posted a rewrite of Parrot&amp;rsquo;s &lt;em&gt;intro.pod&lt;/em&gt; document, now with a discussion of PIR. Huzzah!&lt;/p&gt;

&lt;h4 id=&#34;test-builder-and-friends-on-parrot-http-groups-google-com-groups-threadm-1123570251-22403-70-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123570251.22403.70.camel@localhost&#34;&gt;Test::Builder and Friends on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Following prompting from Geoff Young and Jeff Horwitz, chromatic has implemented Test::Builder and Test::Builder::Tester in pure Parrot. For his next trick, he intends to port Test::More and Parrot::Test.&lt;/p&gt;

&lt;p&gt;Tests are good, m&amp;rsquo;kay?&lt;/p&gt;

&lt;h4 id=&#34;how-to-add-a-new-opcode-http-groups-google-com-groups-threadm-1123573276-8867-6-camel-lgerd-hrz-uni-siegen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123573276.8867.6.camel@lgerd.hrz.uni-siegen.de&#34;&gt;How to Add a New Opcode?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra asked how to add an opcode to Parrot. Klaas-Jan Stol and Leo gave the answers.&lt;/p&gt;

&lt;h4 id=&#34;cleaning-up-the-call-opcodes-http-groups-google-com-groups-threadm-42fa0ffb-6090605-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FA0FFB.6090605@toetsch.at&#34;&gt;Cleaning Up the Call Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo reposted about cleaning up the various function-calling opcodes to take account of the fact that the calling conventions have changed. He asked for opinions and actually received a couple, which is handy, since he ended up Warnocked last time.&lt;/p&gt;

&lt;h4 id=&#34;parrot-i-http-groups-google-com-groups-threadm-d113603e0508101127396ed8c7-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=d113603e0508101127396ed8c7@mail.gmail.com&#34;&gt;&lt;code&gt;parrot -I&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger wondered if there was some way of telling Parrot to add directories to its load path. Leo seemed to think it was not that good an idea, and proposed using a relative path in a &lt;code&gt;.include&lt;/code&gt; directive.&lt;/p&gt;

&lt;h4 id=&#34;dominance-frontiers-http-groups-google-com-groups-threadm-45ec99fc050810182530001652-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050810182530001652@mail.gmail.com&#34;&gt;Dominance Frontiers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls continued his work on dominance frontiers to improve Parrot&amp;rsquo;s optimizer.&lt;/p&gt;

&lt;h4 id=&#34;pge-globber-empty-strings-http-groups-google-com-groups-threadm-rt-3-0-11-36882-119083-2-43242787217334-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36882-119083.2.43242787217334@perl.org&#34;&gt;PGE Globber, Empty Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda reported on trying to match empty strings with PGE&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt; implementation. It turned out to be a problem with &lt;code&gt;Data::Escape&lt;/code&gt;. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;deprecated-opcodes-http-groups-google-com-groups-threadm-42fdf124-2090502-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FDF124.2090502@toetsch.at&#34;&gt;Deprecated Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a list of opcodes that are due for the chop (or alteration) soon. If you&amp;rsquo;re doing anything with Parrot, it&amp;rsquo;s probably a good idea to take a look at this list. One of those who did was chromatic, who asked if Leo could give some examples of translating code so as not to use the old forms.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. Eight balls to go with one wicket needed. I think I&amp;rsquo;ll pause for a while.&lt;/p&gt;

&lt;p&gt;Damn. Australia have saved the game.&lt;/p&gt;

&lt;h4 id=&#34;translating-or-at-least-parsing-java-interface-definitions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4554&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4554&#34;&gt;Translating (Or at Least Parsing) Java Interface Definitions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if anyone had done any work on parsing Java interface declarations and (ideally) translating them to roughly equivalent Perl 6. Apparently, Gaal Yahas has done something along these lines (with Parse::RecDescent for Perl 5), but doesn&amp;rsquo;t own the code. He outlined the approach he took.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-meta-object-protocols-and-object-meta-isa-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4558&#34;&gt;Perl 6 Meta Object Protocols and &lt;code&gt;$object.meta.isa(?)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little is busy documenting the Perl 6 metamodel that he&amp;rsquo;s implemented in Perl 5 and that Autrijus is busy porting to Haskell. He posted an overview to the list and asked for comment. There then followed lots of discussion. I think I understood some of it.&lt;/p&gt;

&lt;h4 id=&#34;object-meta-isa-redux-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4574&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4574&#34;&gt;&lt;code&gt;$object.meta.isa(?)&lt;/code&gt; Redux&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan split the discussion of &lt;code&gt;$object.meta.isa(?)&lt;/code&gt; off from the earlier metamodel thread into a thread of its own and asked for comments once more. Larry commented that &amp;ldquo;the Apocalypses are primarily intended to be entertaining rather than factual.&amp;rdquo; Also in this thread, Luke let slip that there&amp;rsquo;s now a &lt;code&gt;Set&lt;/code&gt; role in Perl 6, which has the enormous advantage of letting us specify argument types in a sensible way without having to overload the junctions.&lt;/p&gt;

&lt;h4 id=&#34;obj-meta-add-method-foo-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4576&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4576&#34;&gt;&lt;code&gt;$obj.meta.add_method(&#39;foo&#39; =&amp;gt; ???)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan continued discussing the metamodel with a thread about the &lt;code&gt;add_method&lt;/code&gt; method. Autrijus was the only person with comments.&lt;/p&gt;

&lt;h4 id=&#34;proposed-new-traits-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4588&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4588&#34;&gt;Proposed New Traits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus said that he&amp;rsquo;d started to write the inferencer and had immediately run into the problem that every type can potentially contain &lt;code&gt;undef&lt;/code&gt;. He proposed adding an &lt;code&gt;is defined&lt;/code&gt; trait, which would cause a variable to immediately throw an exception if anyone attempted to assign it an undefined value. He also proposed a &lt;code&gt;typed&lt;/code&gt; trait, but I was a little less clear on why this would be a good idea. I have to confess that I didn&amp;rsquo;t understand what Larry&amp;rsquo;s reply was driving at, but that&amp;rsquo;s okay, because Autrijus did seem to understand it.&lt;/p&gt;

&lt;h4 id=&#34;my-pi-is-constant-3-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4600&#34;&gt;&lt;code&gt;my $pi is constant = 3&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if an example of the &lt;code&gt;is constant&lt;/code&gt; trait shown in Synopsis 6 was a special form or a typo. At least, I think that&amp;rsquo;s what he was asking; I may be wearing my stupid head today, though. Larry thought it was neither. I think. It seems there&amp;rsquo;s more to constancy than meets the eye. (Just ask any married couple.)&lt;/p&gt;

&lt;h4 id=&#34;typed-type-variables-my-foo-x-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4625&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4625&#34;&gt;Typed Type Variables (&lt;code&gt;my Foo ::x&lt;/code&gt;)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stuart Cook asked about the meaning of type annotations on type variables. Autrijus answered and Thomas Sandlaß agreed with him.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-www-mail-archive-com-perl6-language-perl-org-msg21349-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language@perl.org/msg21349.html&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark commented on an earlier discussion of using IO in &lt;code&gt;BEGIN&lt;/code&gt; blocks, pointing out that this was just a specific case of the more general problem of attempting to serialize things to bytecodes that were simply unserializable. I reckon the trick of it will be to do such things in &lt;code&gt;INIT&lt;/code&gt; or possibly &lt;code&gt;CHECK&lt;/code&gt; blocks (I can never remember which way round those two go).&lt;/p&gt;

&lt;h4 id=&#34;generic-classes-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4658&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4658&#34;&gt;Generic Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked about generic classes, but nobody answered before the end of the summary week. Expect Matt to address this one in the next summary.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m sorry to have to say this, but I don&amp;rsquo;t think I have to apologize for anything this week. WorldCon was fun.&lt;/p&gt;

&lt;h4 id=&#34;everything-else&#34;&gt;Everything Else&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.geeksunite.net/&#34;&gt;Help Chip!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, through August 2, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</link>
      <pubDate>Mon, 08 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</guid>
      <description>

&lt;p&gt;In case you were wondering, Darwin ports didn&amp;rsquo;t work its magic and I still don&amp;rsquo;t have a working Haskell compiler. Thank Juerd for feather, even if I did have to turn my laptop upside down to read the MOTD. Rot-180: oN hes +snf&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;There were 12 messages in the compiler list this week. Either everyone has decamped to IRC or OSCON, or the compiler&amp;rsquo;s getting mature enough that most of the interesting discussion about it happens in &lt;em&gt;perl6-language&lt;/em&gt; as Autrijus and others seek clarification.&lt;/p&gt;

&lt;h4 id=&#34;some-thoughts-on-pil-complete-type-inferencing-http-groups-google-com-groups-threadm-20050728205921-ga61292-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050728205921.GA61292@aut.dyndns.org&#34;&gt;Some Thoughts on PIL/Complete Type Inferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus has been doing some thinking on the next version of PIL (The Pugs Intermediate Language), which will be a little less tightly coupled with PIR/Parrot. He outlined his thinking (which he seems to have directed towards being able to do useful things and optimizations with Type information) in this thread.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-containers-http-groups-google-com-groups-threadm-20050730224910-gb5372-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050730224910.GB5372@aut.dyndns.org&#34;&gt;Definition of Containers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that he&amp;rsquo;d checked in the first part of the new PIL run core. In case you were wondering, containers are the things that Perl variables have as values. They&amp;rsquo;re where things like &lt;code&gt;tie&lt;/code&gt; magic happens.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-variable-declarations-http-groups-google-com-groups-threadm-20050731180628-gc15882-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050731180628.GC15882@aut.dyndns.org&#34;&gt;Hoisting Variable Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Hands up! How does the scoping of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $x = $x + my $x if $x;
   #1   #2      #3    #4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;work in Perl 6?&lt;/p&gt;

&lt;p&gt;In Perl 5, all those &lt;code&gt;$x&lt;/code&gt;s refer to the same thing. In Perl 6, #1 and #2 refer to &lt;code&gt;$OUTER::x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This behavior (lexical scopes really are lexical) makes a compiler writer&amp;rsquo;s head hurt. Autrijus outlined a plan for making it work.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;dominance-frontier-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d69e4b22417d1c7-4ed1469ec095319d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d69e4b22417d1c7/4ed1469ec095319d&#34;&gt;Dominance Frontier&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls had posted a patch adding &amp;ldquo;dominance frontiers&amp;rdquo; to IMCC. (I&amp;rsquo;m afraid I don&amp;rsquo;t know what a dominance frontier is, but it sounds like it might be fun.) This week, he wondered if someone could apply it any time soon, because he had another patch that depended on it.&lt;/p&gt;

&lt;p&gt;It turned out that the patch broke a test or two, and Will Coleda, Andy Dougherty, Patrick, and Leo set about helping to track it down. It looks like they have found the issues, and work continues to fix them.&lt;/p&gt;

&lt;h4 id=&#34;make-languages-should-continue-after-building-a-language-failed-http-groups-google-com-groups-threadm-rt-3-0-11-36647-118350-14-1074362091832-perl-org&#34;&gt;&lt;code&gt;make languages&lt;/code&gt; Should Continue After Building a Language &lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36647-118350.14.1074362091832@perl.org&#34;&gt;Failed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever looked through the Parrot Makefiles and wondered what the deal is with &lt;code&gt;.dummy&lt;/code&gt;? If so, this thread explains everything.&lt;/p&gt;

&lt;h4 id=&#34;pmc-syntax-http-groups-google-com-groups-threadm-42e7e7ec-1040907-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E7E7EC.1040907@home.nl&#34;&gt;PMC Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked if there&amp;rsquo;s any documentation on the complete syntax for &lt;em&gt;.pmc&lt;/em&gt; files when writing PMCs. Apparently there isn&amp;rsquo;t, apart from the source of &lt;em&gt;pmc2c.pl&lt;/em&gt;, but Will Coleda and Leo helped Klaas-Jan out.&lt;/p&gt;

&lt;h4 id=&#34;embedding-partcl-http-groups-google-com-groups-threadm-42e838dc-9080804-web-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E838DC.9080804@web.de&#34;&gt;Embedding ParTcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thilo Planz had some problems embedding ParTcl into a PIR application. It mostly worked, but he had a few questions. Will Coleda helped out again.&lt;/p&gt;

&lt;h4 id=&#34;compiling-dynamic-pmcs-http-groups-google-com-groups-threadm-42e8a3a2-5010100-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E8A3A2.5010100@home.nl&#34;&gt;Compiling Dynamic PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan had more questions about compiling PMCs&amp;ndash;dynamic ones, this time. It appears that the docs he was following didn&amp;rsquo;t quite reflect reality. Leo solved the problem and Klaas-Jan sent in a doc patch. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;parrot-cannot-start-up-if-stderr-or-stdout-is-closed-http-groups-google-com-groups-threadm-rt-3-0-11-36677-118403-17-3306028943918-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36677-118403.17.3306028943918@perl.org&#34;&gt;Parrot Cannot Start up if &lt;code&gt;STDERR&lt;/code&gt; or &lt;code&gt;STDOUT&lt;/code&gt; is Closed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael Schwern pointed out that Parrot won&amp;rsquo;t start if you close either &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt;, eschewing the standard joke response (&amp;ldquo;Doctor, it hurts when I do this.&amp;rdquo; &amp;ldquo;Well don&amp;rsquo;t do that, then.&amp;rdquo;) Jerry Gay wrote a test and Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;accessing-hash-with-strings-keys-http-groups-google-com-groups-threadm-42e9eaf7-1050509-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E9EAF7.1050509@home.nl&#34;&gt;Accessing Hash with Strings/Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apparently, Klaas-Jan is working on writing a Lua compiler to target Parrot. He&amp;rsquo;s obviously working on it a good deal at the moment. :)&lt;/p&gt;

&lt;p&gt;He wanted to know how he could extend the standard Hash PMC to return &lt;code&gt;None&lt;/code&gt; if there is no key found. As is traditional in these cases, Leo helped him out. It turns out that part of the problem is that &lt;em&gt;pmc2c.pl&lt;/em&gt; isn&amp;rsquo;t that strict in its syntax checking. If anyone reading this has the tuits &amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;does-it-cost-anything-to-use-a-big-pmc-everywhere-http-groups-google-com-groups-threadm-20050729165847-70341-qmail-web51110-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050729165847.70341.qmail@web51110.mail.yahoo.com&#34;&gt;Does It Cost Anything to Use a Big PMC Everywhere?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a move guaranteed to gladden at least Dan Sugalski&amp;rsquo;s heart, Amir Karger popped up to say that he&amp;rsquo;s working getting the Z-machine interpreter working. He wondered if there was any way of dedicating a register to a particular constant in order to avoid copying a global every time he called a sub. Leo helped out.&lt;/p&gt;

&lt;h4 id=&#34;super-http-groups-google-com-groups-threadm-42ecde37-2010308-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ECDE37.2010308@toetsch.at&#34;&gt;Super!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;d added a new &lt;code&gt;Super&lt;/code&gt; PMC which will make it easier to call superclass methods.&lt;/p&gt;

&lt;h4 id=&#34;lua-project-http-groups-google-com-groups-threadm-42ef7e8f-9010304-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42EF7E8F.9010304@home.nl&#34;&gt;Lua Project&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan unveiled his project to get the &lt;a href=&#34;http://members.home.nl/joeijoei/parrot&#34;&gt;Lua compiler targeting Parrot&lt;/a&gt;. It&amp;rsquo;s apparently &amp;ldquo;far from complete,&amp;rdquo; but hey, it&amp;rsquo;s good to welcome yet another language to the Parrot cage.&lt;/p&gt;

&lt;h4 id=&#34;announcing-mod-parrot-0-3-http-groups-google-com-groups-threadm-pine-lnx-4-44-0508021908110-3368-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0508021908110.3368-100000@booger.sixgeeks.org&#34;&gt;Announcing &lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced the release of &lt;a href=&#34;http://www.smashing.org/mod_parrot&#34;&gt;&lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;, complete with support for all Apache hooks, autogeneration of &lt;code&gt;request_rec&lt;/code&gt; methods, and a &lt;code&gt;mod_pugs&lt;/code&gt; proof of concept. Crumbs. And there&amp;rsquo;s more. Check out the announcement, download the code, and start making Apache do weird things. Go on, you know you want to.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-use-and-abuse-of-liskov-http-www-mail-archive-com-perl6-language-40perl-org-msg20981-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20981.html&#34;&gt;The Use and Abuse of Liskov&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Damian and Luke&amp;rsquo;s discussion of the right way to do MMD looks to be finally winding down. It seems Luke&amp;rsquo;s convinced Damian of the righteousness of his cause. (Or at least, if he&amp;rsquo;s wrong, he&amp;rsquo;s wrong in a subtler way than Damian realized.) I don&amp;rsquo;t think there&amp;rsquo;s been a final decision as yet, but we&amp;rsquo;re definitely moving forward.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-parameters-and-auto-flattening-http-www-mail-archive-com-perl6-language-40perl-org-msg21085-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21085.html&#34;&gt;Slurpy Parameters and Auto-Flattening&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt asked for some clarification of the behavior of slurpy parameters. It&amp;rsquo;s not often I hope that Luke is wrong, but I really hope the answer he gave Ingo isn&amp;rsquo;t the true state of things.&lt;/p&gt;

&lt;h4 id=&#34;exposing-the-garbage-collector-http-www-mail-archive-com-perl6-language-40perl-org-msg21067-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21067.html&#34;&gt;Exposing the Garbage Collector&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bah! I propose a simple, slow, yet powerful feature that is useful to implement a whole bunch of other possible APIs for getting at stuff, and people go and suggest making any one of various heavier APIs the One True API. It&amp;rsquo;s enough to make a person despair.&lt;/p&gt;

&lt;p&gt;Ah, apologies, I&amp;rsquo;m letting personal concerns get in the way of the summary, but what the hell, I&amp;rsquo;m leaving it.&lt;/p&gt;

&lt;h4 id=&#34;messing-with-the-type-hierarchy-http-www-mail-archive-com-perl6-language-40perl-org-msg21092-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21092.html&#34;&gt;Messing with the Type Hierarchy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke had a few things to say about what happens when you monkey with the type hierarchy, so he said them. The usual suspects joined in, most of them addressing the particular instance that Luke had chosen to illustrate his point, rather than discussing the broader point, but hey, this is &lt;em&gt;perl6-language&lt;/em&gt;. That&amp;rsquo;s what happens.&lt;/p&gt;

&lt;p&gt;Luke&amp;rsquo;s broader question was, &amp;ldquo;Should it be possible to write a class that isn&amp;rsquo;t a leaf in the existing hierarchy?&amp;rdquo; The example that everyone addressed was the idea of writing a &lt;code&gt;Complex&lt;/code&gt; class that wedged in between &lt;code&gt;Real&lt;/code&gt; and &lt;code&gt;Num&lt;/code&gt; in the hierarchy (which, as several people pointed out, isn&amp;rsquo;t necessarily the right way to think about it anyway, hence the discussion).&lt;/p&gt;

&lt;p&gt;My gut feeling was that the answer to the general question should be &amp;ldquo;Yes, but be very, very careful, and don&amp;rsquo;t be surprise if it bites you later.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;elimination-of-item-pair-and-any-junction-http-www-mail-archive-com-perl6-language-40perl-org-msg21094-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21094.html&#34;&gt;Elimination of &lt;code&gt;Item|Pair&lt;/code&gt; and &lt;code&gt;Any|Junction&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The discussion of appropriate default prototypes and the like continued. Autrijus proposed a way of rejigging the type hierarchy to make default argument types a little clearer. I found things getting a little weird, to be honest&amp;ndash;there&amp;rsquo;s even talk of eliminating &lt;code&gt;Object&lt;/code&gt; as a type name, which seems a little strange.&lt;/p&gt;

&lt;h4 id=&#34;execution-platform-object-gestalt-http-www-mail-archive-com-perl6-language-40perl-org-msg21098-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21098.html&#34;&gt;Execution Platform Object? Gestalt?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Randal proposed that, as the number of possible platforms that Perl 6 can run on proliferates, it&amp;rsquo;d be really handy if there were some useful global that held knowledge about the platform and its capabilities. He proposed &lt;code&gt;$*OS&lt;/code&gt; as a decent place to put it. Larry thought we probably would have something like that, but thought that there might end up being two globals: &lt;code&gt;$*OS&lt;/code&gt; and &lt;code&gt;$*VM&lt;/code&gt;. The usual &amp;ldquo;Why don&amp;rsquo;t we call it&amp;rdquo; thread sprang up, but it seems that the most important upshot is that this particular bike shed will definitely be painted.&lt;/p&gt;

&lt;h4 id=&#34;the-meaning-of-returns-http-www-mail-archive-com-perl6-language-40perl-org-msg21114-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21114.html&#34;&gt;The Meaning of &lt;code&gt;returns&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The continuing invasion by the rampaging hordes from &lt;em&gt;p6c&lt;/em&gt; continued apace. This time, Autrijus had a discussion on the implications of &lt;code&gt;returns&lt;/code&gt; and its implications for type inferencing.&lt;/p&gt;

&lt;h4 id=&#34;lazy-list-syntax-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;Lazy List Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Flavio S. Glock wondered how to go about creating a lazy list from an object. Apparently the magic he was missing was &lt;code&gt;prefix:=&lt;/code&gt;, which is syntactic sugar for calling the &lt;code&gt;.next&lt;/code&gt; method on anything that supports iteration, which is nice.&lt;/p&gt;

&lt;h4 id=&#34;an-idea-for-doing-pack-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;An Idea for Doing &lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa had an idea about a possible &lt;code&gt;pack&lt;/code&gt; API; he outlined it on the list. Yuval Kogman seemed to like it, but there&amp;rsquo;s been nothing from anyone else on the list.&lt;/p&gt;

&lt;h4 id=&#34;inferring-foo-of-int-does-foo-of-any-http-www-mail-archive-com-perl6-language-40perl-org-msg21124-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21124.html&#34;&gt;Inferring &lt;code&gt;(Foo of Int).does(Foo of Any)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus again, this time thinking about the kind of type inferences that Perl aggregate types allow. Once I had my head in the right space, it made a great deal of sense, even if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array of Item).does(Array of Int); # false
Array of Int).does(Array of Item); # also false!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;made my head hurt the first time I read it.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collector-api-http-www-mail-archive-com-perl6-language-40perl-org-msg21081-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21081.html&#34;&gt;Garbage Collector API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Various people proposed additions to the proposed Garbage Collector API.&lt;/p&gt;

&lt;h4 id=&#34;value-confess-http-www-mail-archive-com-perl6-language-40perl-org-msg21140-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21140.html&#34;&gt;&lt;code&gt;$value.confess()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent Royal-Gordon had a cunning idea for debugging: having Perl 6 capture the call stack at its point of creation and stashing that in a property called &lt;code&gt;confess&lt;/code&gt;, which he could examine in a debugging context to find out where a value came from. As he pointed out, this would be expensive, but useful. He&amp;rsquo;s currently Warnocked, but I get the feeling it should be possible to write an extension to do what he wants without adding anything extra to Perl 6 itself. It might be a little tricky if he wants the call stack to change on mutation, though.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-is-rw-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21148-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21148.html&#34;&gt;Slurpy &lt;code&gt;is rw&lt;/code&gt; Arrays&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Having received clarification of the behavior of normal slurpy arrays, Ingo Blechschmidt asked for clarification of the behavior of Slurp &lt;code&gt;is rw&lt;/code&gt; arrays. Adriano Ferreira and Thomas Sandlaß seemed to talk sense in reply.&lt;/p&gt;

&lt;h4 id=&#34;curious-use-of-assuming-in-s06-http-www-mail-archive-com-perl6-language-40perl-org-msg21154-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21154.html&#34;&gt;Curious Use of &lt;code&gt;.assuming&lt;/code&gt; in S06&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;textfrom := &amp;amp;substr.assuming(:str($text) :len(Inf))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;found in Synopsis 6 was a mistake, or if the syntax should be like that. It turns out that the syntax is supposed to be like that. Apparently being able to do without the commas was one of the reasons for making colon pair syntax look like that.&lt;/p&gt;

&lt;h4 id=&#34;laziness-and-io-http-www-mail-archive-com-perl6-language-40perl-org-msg21158-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21158.html&#34;&gt;Laziness and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a currently Warnocked post, David Formosa outlined a potential problem with lazy IO.&lt;/p&gt;

&lt;h4 id=&#34;sub-foo-x-returns-ref-x-http-www-mail-archive-com-perl6-language-40perl-org-msg21159-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21159.html&#34;&gt;&lt;code&gt;sub foo ($x) returns ref($x)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In his continuing discussion of the Perl 6 type system and the inferences that you can draw about it, Autrijus posted a discussion of how to declare that a function that returns a value with the same type as its argument. He suggested that the best way forward would be to declare something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub identity ($x) returns ref($x) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and asked for better suggestions. Thomas Sandlaß had suggestions.&lt;/p&gt;

&lt;h4 id=&#34;say-s-return-value-http-www-mail-archive-com-perl6-language-40perl-org-msg21160-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21160.html&#34;&gt;&lt;code&gt;&amp;amp;say&lt;/code&gt;&amp;rsquo;s Return Value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas thought that &lt;code&gt;&amp;amp;print&lt;/code&gt; and &lt;code&gt;&amp;amp;say&lt;/code&gt; should &lt;code&gt;fail&lt;/code&gt; on errors and return the printed string on success (but true). Larry thought not. It looks like they&amp;rsquo;ll end up returning a Boolean or throwing an exception.&lt;/p&gt;

&lt;h4 id=&#34;arrayref-ref-http-www-mail-archive-com-perl6-language-40perl-org-msg21161-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21161.html&#34;&gt;&lt;code&gt;$arrayref.ref&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo continues his ongoing task of getting clarification of the semantics of a whole host of things. This time he wanted to know about the behavior of references. Larry clarified.&lt;/p&gt;

&lt;h4 id=&#34;binding-scalars-to-aggregates-http-www-mail-archive-com-perl6-language-40perl-org-msg21162-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21162.html&#34;&gt;Binding Scalars to Aggregates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Next up in Ingo&amp;rsquo;s clarification project was binding scalars to aggregates. (Or did he mean binding aggregates to scalars?) Again, Larry came through with answers. It turns out that there&amp;rsquo;s more to this than meets the eye at first glance. Autrijus&amp;rsquo;s post on containers over in &lt;em&gt;perl6-compiler&lt;/em&gt; addresses some of these issues, as well.&lt;/p&gt;

&lt;h4 id=&#34;binding-hashes-to-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21163-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21163.html&#34;&gt;Binding Hashes to Arrays?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo asks, &amp;ldquo;Is it legal to bind a hash to an array, or vice versa?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Larry answers, &amp;ldquo;Not at the moment.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;module-init-hooks-and-pragmas-http-www-mail-archive-com-perl6-language-40perl-org-msg21175-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21175.html&#34;&gt;Module Init Hooks and Pragmas&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered what function in a module to call when you &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;eliminating-and-http-www-mail-archive-com-perl6-language-40perl-org-msg21178-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21178.html&#34;&gt;Eliminating &lt;code&gt;&amp;amp;{}&lt;/code&gt; and &lt;code&gt;*{}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if we really need the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;stringification-of-pairs-http-www-mail-archive-com-perl6-language-40perl-org-msg21179-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21179.html&#34;&gt;Stringification of Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;For some reason, Ingo&amp;rsquo;s shortest question (&amp;ldquo;How do pairs stringify?&amp;rdquo;) attracted the largest response. Well, at first blush it looks like it did. What actually happened was that Warnock claimed it, but the &lt;code&gt;References:&lt;/code&gt; header in Andrew Shitov&amp;rsquo;s posed discussed below was a little broken.&lt;/p&gt;

&lt;h4 id=&#34;zip-with-http-www-mail-archive-com-perl6-language-40perl-org-msg21182-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21182.html&#34;&gt;&lt;code&gt;zip&lt;/code&gt; with ()&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some strange behavior of &lt;code&gt;zip&lt;/code&gt; caught out Andrew Shitov. Ingo explained the problem. There was quite a bit of discussion of the various subtleties exposed.&lt;/p&gt;

&lt;p&gt;Sometimes I pity the poor swine who&amp;rsquo;s going to have to write &lt;em&gt;Programming Perl 6&lt;/em&gt;. It&amp;rsquo;s going to make the current camel look like a slim volume, if we&amp;rsquo;re not careful.&lt;/p&gt;

&lt;h4 id=&#34;mutating-map-and-grep-http-www-mail-archive-com-perl6-language-40perl-org-msg21185-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21185.html&#34;&gt;Mutating &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if it was true that Perl 6&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc., wouldn&amp;rsquo;t allow mutating values in their source array. He wondered if it would be possible to use a pragma to get the old, Perl-5-ish, behavior back. Thomas Sandlaß wondered if simply explicitly declaring the given block&amp;rsquo;s argument as &lt;code&gt;rw&lt;/code&gt; wouldn&amp;rsquo;t do the job. There is no word from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;acknowledgements-adverts-apologies-alliteration-and-conference-envy&#34;&gt;Acknowledgements, Adverts, Apologies, Alliteration, and Conference Envy&lt;/h4&gt;

&lt;p&gt;Damn. Couldn&amp;rsquo;t think of a word beginning with &amp;ldquo;a&amp;rdquo; that means &amp;ldquo;conference.&amp;rdquo; [&lt;em&gt;Editor&amp;rsquo;s note: attendance?&lt;/em&gt;] To all you lucky people in Portland at OSCON, I wish I was there and am a seething mass of envy. Well, not that seething: I&amp;rsquo;m consoling myself by going to the WorldCon in Glasgow, instead.&lt;/p&gt;

&lt;h4 id=&#34;help-chip&#34;&gt;Help Chip&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;geeksunite.org&lt;/a&gt;: tell all your friends; this cannot stand.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;, now running on a new engine. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 13-19, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</link>
      <pubDate>Thu, 21 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</guid>
      <description>

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by the words &amp;ldquo;displacement&amp;rdquo; and &amp;ldquo;activity.&amp;rdquo; So far today, I&amp;rsquo;ve caught up with everything unread in NetNewsWire, my Flickr groups, every other mailing list I&amp;rsquo;m subscribed to, and completed about five Sudoku. Now I&amp;rsquo;m dragging out this introduction and I don&amp;rsquo;t know why; I enjoy writing these things.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This was another quiet week on the list. However, you only have to watch the SVN commit log and the other stuff on &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;PlanetSix&lt;/a&gt; to know that things are still proceeding apace. Last time I looked, it seemed that Stevan Little was working on bootstrapping the Perl 5 implementation of the Perl 6 MetaModel to implement it in terms of itself.&lt;/p&gt;

&lt;p&gt;Rather mind-bogglingly, Pugs is now targeting JavaScript as well.&lt;/p&gt;

&lt;p&gt;The current Pugs release is 6.2.8.&lt;/p&gt;

&lt;h4 id=&#34;creating-threads-in-begin-http-groups-google-com-groups-threadm-20050714153213-gb73297-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050714153213.GB73297@plum.flirble.org&#34;&gt;Creating Threads in &lt;code&gt;BEGIN&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted what he described as a &amp;ldquo;note to collective self&amp;rdquo; wondering about how Perl 6 will cope with people creating threads inside of &lt;code&gt;BEGIN&lt;/code&gt; blocks. According to Luke, &amp;ldquo;it won&amp;rsquo;t.&amp;rdquo; Larry thought that it might be okay to create threads at &lt;code&gt;CHECK&lt;/code&gt; time, so long as any spawned threads didn&amp;rsquo;t do any real work later than &lt;code&gt;CHECK&lt;/code&gt; time.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-modules-http-groups-google-com-groups-threadm-002a01c58944-c9231c30-0200a8c0-madaboutipv6&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=002a01c58944$c9231c30$0200a8c0@madaboutipv6&#34;&gt;Perl 6 Modules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gav&amp;hellip; (I presume the ellipsis is important to someone) wondered what he needed to do to write Perl 6 modules. Nathan Gray pointed him at the &lt;a href=&#34;http://svn.openfoundry.org/pugs/docs/other/porting_howto&#34;&gt;porting how-to&lt;/a&gt; in the Pugs distribution.&lt;/p&gt;

&lt;h4 id=&#34;is-namespace-qualification-really-required-http-groups-google-com-groups-threadm-200507151916-j6fjgm18017026-webmail-sunflower-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200507151916.j6FJGm18017026@webmail.sunflower.com&#34;&gt;Is Namespace Qualification Really Required?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Phil Crow came across some weirdness with namespace resolution. It seems that you have to qualify function names explicitly in signatures. Autrijus agreed that it was a bug and asked for Phil to write a TODO test. Discussion ensued&amp;ndash;I think the fix is in SVN now.&lt;/p&gt;

&lt;h4 id=&#34;parsing-perl-6-grammars-http-groups-google-com-groups-threadm-20050719180105-ga30311-vs2-capwiz-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050719180105.GA30311@vs2.capwiz.com&#34;&gt;Parsing Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered about the state of Jeff &amp;ldquo;Japhy&amp;rdquo; Pinyan&amp;rsquo;s effort to implement a Perl 6 rules parser. Japhy said that it&amp;rsquo;s been on hold for a while, but that he&amp;rsquo;d started to work on it again, basing it on his earlier &lt;a href=&#34;https://metacpan.org/pod/Regexp::Parser&#34;&gt;Regexp::Parser&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;pmc-changes-http-groups-google-com-groups-threadm-20050713142025-gr73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713142025.GR73056@plum.flirble.org&#34;&gt;PMC Changes?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if the PMC layout is likely to remain stable, or if there might be changes in relation to the generational garbage collector. In particular, he wanted to know if the API would remain stable. Leo thought that there might be changes in the layout, but the API shouldn&amp;rsquo;t change.&lt;/p&gt;

&lt;h4 id=&#34;partcl-accelerator-http-groups-google-com-groups-threadm-643ed742-47aa-4d16-8a8a-bb956f020e90-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=643ED742-47AA-4D16-8A8A-BB956F020E90@coleda.com&#34;&gt;ParTcl Accelerator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda showed some timings for ParTcl, the Parrot implementation of Tcl, and made a few suggestions about how to get things going faster. Patrick and Leo mused on the issues involved.&lt;/p&gt;

&lt;h4 id=&#34;partitioning-pmcs-http-groups-google-com-groups-threadm-20050713140849-gp73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713140849.GP73056@plum.flirble.org&#34;&gt;Partitioning PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had some questions about making PMCs and Ponie play well together, with particular reference to using &lt;code&gt;SvFLAGS()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;embedding-extending-interface-http-groups-google-com-groups-threadm-20050713144138-gt73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144138.GT73056@plum.flirble.org&#34;&gt;Embedding/Extending Interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if Chromatic was still waiting for confirmation that his automated embedding tools were the Right Thing. Apparently, Chromatic is waiting for confirmation, but offered to send his existing patch, if only to force the discussion.&lt;/p&gt;

&lt;h4 id=&#34;ponie-questions-http-groups-google-com-groups-threadm-20050713144716-gu73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144716.GU73056@plum.flirble.org&#34;&gt;Ponie Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had a bunch of questions about various subsystems, mostly in relation to Ponie. Leo came good with answers.&lt;/p&gt;

&lt;h4 id=&#34;parrot-project-management-http-groups-google-com-groups-threadm-cff4c4c41b42a1f39d7d4fe68f914841-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=cff4c4c41b42a1f39d7d4fe68f914841@perl.org&#34;&gt;Parrot Project Management&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure if Will Coleda&amp;rsquo;s suffering culture shock about the way Parrot project management happens, or if we&amp;rsquo;re really not doing it right. The first rule of Parrot/Perl 6 development is that if you really want something, then the only way to guarantee that it gets done is to do it yourself. It&amp;rsquo;s certainly worked for me over the years.&lt;/p&gt;

&lt;h4 id=&#34;tcl-gc-issues-solved-http-groups-google-com-groups-threadm-198c87380507140823527d4165-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c87380507140823527d4165@mail.gmail.com&#34;&gt;Tcl GC Issues&amp;ndash;Solved&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse announced that as of r8617 in SVN, the longstanding GC bug that ParTcl occasionally tickled has been fixed. There was no rejoicing on the list, but at least one summarizer was really pleased to hear it.&lt;/p&gt;

&lt;h4 id=&#34;gmc-for-dummies-http-groups-google-com-groups-threadm-42d853a9-8060902-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42D853A9.8060902@gmail.com&#34;&gt;GMC for Dummies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Summer of Code intern Alexandre Buisse, who is working on a new GC system for Parrot, pointed us all at &lt;a href=&#34;http://perso.ens-lyon.fr/alexandre.buisse/divers/gmc_for_dummies.pod&#34;&gt;an introduction to the Generational Mark and Compact scheme&lt;/a&gt; that he&amp;rsquo;s working to implement. He and Leo had a discussion about implications, assumptions, and other stuff.&lt;/p&gt;

&lt;p&gt;Bob Rogers asked some tricky questions relating to circular structures and timely destruction. Discussion of this continues.&lt;/p&gt;

&lt;h4 id=&#34;register-allocation-fun&#34;&gt;Register Allocation Fun&lt;/h4&gt;

&lt;p&gt;There was a flurry of patches from Curtis Rawls, who appears to be working on refactoring and (one hopes) fixing the IMCC register allocator. Way to go, Curtis.&lt;/p&gt;

&lt;h4 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h4&gt;

&lt;h4 id=&#34;mml-dispatch-http-www-mail-archive-com-perl6-language-40perl-org-msg20826-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20826.html&#34;&gt;MML Dispatch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The ongoing discussion of the right way to dispatch multimethods is still, um, going on. Damian and Luke appear to have a fundamental disagreement about what the Right Thing is. &amp;ldquo;Manhattan!&amp;rdquo; &amp;ldquo;Pure!&amp;rdquo; &amp;ldquo;Manhattan!&amp;rdquo;&amp;ndash;it&amp;rsquo;s not quite that bad, but they seem to have entrenched positions. Elsewhere in the thread, Larry mused on which was more general, classes or roles. Thomas Sandlaß wondered how they stood in relation to types.&lt;/p&gt;

&lt;p&gt;Your summarizer wondered how he was ever going to explain all this and punted.&lt;/p&gt;

&lt;h4 id=&#34;method-calls-on-self-http-www-mail-archive-com-perl6-language-40perl-org-msg20769-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20769.html&#34;&gt;Method Calls on &lt;code&gt;$self&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;My eyes, they burn! At this rate, I&amp;rsquo;m simply going to use &lt;code&gt;$?SELF&lt;/code&gt; in all my Perl 6 classes. Larry&amp;rsquo;s latest suggestion seems to please even fewer people than &lt;code&gt;./method&lt;/code&gt;, which is really saying something. As someone who&amp;rsquo;s not a fan of &lt;code&gt;./&lt;/code&gt;, I found myself slightly surprised to agree with Autrijus, who reckons you get used to it really quickly.&lt;/p&gt;

&lt;h4 id=&#34;the-perl-6-library-system-http-www-mail-archive-com-perl6-language-40perl-org-msg20944-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20944.html&#34;&gt;The Perl 6 Library System&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In response to a question from Autrijus about coderefs in &lt;code&gt;@INC&lt;/code&gt;, or whatever Perl 6 is going to call it, Larry mused on the possible eventual design of Perl 6&amp;rsquo;s library system. It seemed to me that he was dropping a rather heavy hint to any interested readers who might like to come up with a first cut of Perl 6&amp;rsquo;s library system.&lt;/p&gt;

&lt;p&gt;Later, he did some thinking aloud about treating strings as arrays, or vice versa.&lt;/p&gt;

&lt;h4 id=&#34;method-resolution-order-http-www-mail-archive-com-perl6-language-40perl-org-msg20913-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20913.html&#34;&gt;Method Resolution Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan &amp;ldquo;MetaModel&amp;rdquo; Little cheered Larry&amp;rsquo;s statement that methods, subs, submethods, and &amp;ldquo;anything in between&amp;rdquo; all live in the same namespace. If you want to give two code-like things the same name, then you must explicitly declare them as multi.&lt;/p&gt;

&lt;p&gt;Stevan went on to ask a bunch of questions about the semantics of method resolution, so as to get the Perl 6 MetaModel working right. Discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;type-class-haskell-does-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20958-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20958.html&#34;&gt;&lt;code&gt;Type::Class::Haskell&lt;/code&gt; Does Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I haven&amp;rsquo;t the faintest idea what Yuval Kogman is talking about. Dammit, I need to learn Haskell now. Luckily, Autrijus, Luke, David Formosa, and Damian did seem to understand it. There was ASCII art and everything. Sadly, there&amp;rsquo;s no Unicode art, but it&amp;rsquo;s only a matter of time.&lt;/p&gt;

&lt;h4 id=&#34;optimization-pipeline-http-www-mail-archive-com-perl6-language-40perl-org-msg20959-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20959.html&#34;&gt;Optimization Pipeline&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted an outline of the optimization pipeline idea that he&amp;rsquo;d brought up in a Hackathon. If confess that it looks rather like something discussed a few months (years?) ago that Chip shot down rather convincingly. (I remember this because I took pretty much the same position as Yuval, and I really didn&amp;rsquo;t want to be convinced.)&lt;/p&gt;

&lt;h4 id=&#34;stm-semantics-the-transactional-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20971-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20971.html&#34;&gt;STM Semantics, the Transactional Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman discussed some issues with Software Transactional Memory (STM). A short discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;more-method-resolution-order-questions-http-www-mail-archive-com-perl6-language-40perl-org-msg20976-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20976.html&#34;&gt;More Method Resolution Order Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Returning from reading up on method resolution orders and class precedence lists, Stevan Little had a pile of questions and suggestions about Perl 6&amp;rsquo;s method resolution semantics. He pushed for using &amp;ldquo;C3&amp;rdquo; as Perl&amp;rsquo;s algorithm of choice and is implementing it in Perl6::MetaModel until and unless @Larry decides differently. He&amp;rsquo;s off to a flying start in that the One True Larry thinks it&amp;rsquo;s a good idea.&lt;/p&gt;

&lt;h4 id=&#34;accessor-only-virtual-attributes-http-www-mail-archive-com-perl6-language-40perl-org-msg20983-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20983.html&#34;&gt;Accessor-Only Virtual Attributes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered what would happen if he made an &amp;ldquo;accessor&amp;rdquo; for an attribute that didn&amp;rsquo;t really exist. He wanted to be able to disguise accessor methods as attributes within class and subclass scope (at least, I think that&amp;rsquo;s what he wants). Larry seemed to think he was barking up the wrong tree&amp;ndash;class attributes are only likely to be accessible using the &lt;code&gt;$.whatever&lt;/code&gt; form within their declaring class and not any subclasses. Larry&amp;rsquo;s &amp;ldquo;got some driving to do&amp;rdquo; so expect some more thoughts about this in the next summary.&lt;/p&gt;

&lt;h4 id=&#34;strange-interaction-between-pairs-and-named-binding-http-www-mail-archive-com-perl6-language-40perl-org-msg20985-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20985.html&#34;&gt;Strange Interaction Between Pairs and Named Binding&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, although&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt; Pair $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;works,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt;      $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;doesn&amp;rsquo;t, which is somewhat counter-intuitive. The problem is, the second cas treats the pair as a named argument specifier. After discussion, Autrijus suggested that the best thing might be to specify that the &lt;code&gt;Bare&lt;/code&gt; code object (which includes pointy and non-pointy blocks) have &lt;code&gt;Any&lt;/code&gt; as a default parameter type&amp;ndash;essentially turning off the special behavior of pairs when calling named blocks. I&amp;rsquo;m all for this myself, but Larry has yet to speak.&lt;/p&gt;

&lt;h4 id=&#34;how-do-subroutines-check-types-http-www-mail-archive-com-perl6-language-40perl-org-msg20997-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20997.html&#34;&gt;How Do Subroutines Check Types?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some questions about specifying types in subroutine definitions. Specifically, he wanted to be able to specify that a sub only take instances of a class &lt;code&gt;Foo&lt;/code&gt; and its subclasses but not the class &lt;code&gt;Foo&lt;/code&gt; (or its subclasses) itself. Thomas Sandlaß thought that what Ingo wanted is the default behavior and you actually have to do some work to get it to behave any other way.&lt;/p&gt;

&lt;h4 id=&#34;referring-to-package-variables-in-the-default-namespace-http-www-mail-archive-com-perl6-language-40perl-org-msg21001-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21001.html&#34;&gt;Referring to Package Variables in the Default Namespace&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matthew Hodgson asked for some clarification of how the default package namespace works. Apparently, Pugs and Synopsis 10 are slightly at odds. Larry had some answers. Matthew probably has some more questions.&lt;/p&gt;

&lt;h3 id=&#34;crikey-that-went-quickly&#34;&gt;Crikey! That Went Quickly&lt;/h3&gt;

&lt;p&gt;Or, for the traditionalists among you:&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies and Alliteration&lt;/h3&gt;

&lt;h4 id=&#34;hunting-the-perfect-archive&#34;&gt;Hunting the Perfect Archive&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m still on the lookout for a replacement for Google groups for my message links. I need an archive that&amp;rsquo;s up to date with the lists, and has URLs that are easy to derive from &lt;code&gt;Message-ID&lt;/code&gt;s. Bonus points for good thread handling.&lt;/p&gt;

&lt;h4 id=&#34;help-chip-http-geeksunite-org&#34;&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;Help Chip&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tell all your friends, this cannot stand.&lt;/p&gt;

&lt;h4 id=&#34;the-usual-coda&#34;&gt;The Usual Coda&lt;/h4&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 29-July 5, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</link>
      <pubDate>Thu, 07 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</guid>
      <description>

&lt;p&gt;My, doesn&amp;rsquo;t time fly? Another fortnight gone and another summary to write. It&amp;rsquo;s a hard life, I tell you!&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;where-s-everyone-gone&#34;&gt;Where&amp;rsquo;s Everyone Gone?&lt;/h4&gt;

&lt;p&gt;It seems that most of the Perl 6 compiler development discussions occur at Hackathons and on IRC, with summaries appearing in developers&amp;rsquo; weblogs. What&amp;rsquo;s a summarizer to do? For now, I&amp;rsquo;ll point you at &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;Planet Perl 6&lt;/a&gt;, which aggregates a bunch of relevant blogs.&lt;/p&gt;

&lt;h4 id=&#34;pge-now-supports-grammars-built-in-rules-http-groups-google-com-groups-threadm-b7a12d0375515a6b4381efe3d71ef61e-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=b7a12d0375515a6b4381efe3d71ef61e@perl.org&#34;&gt;PGE Now Supports Grammars, Built-In Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal raved about the &amp;ldquo;totally awesome&amp;rdquo; PGE grammar support. I doubt she&amp;rsquo;s alone in her enthusiasm.&lt;/p&gt;

&lt;h4 id=&#34;multiple-implementations-are-good-m-kay-http-groups-google-com-groups-threadm-20050702165140-gh5089-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702165140.GH5089@pmichaud.com&#34;&gt;Multiple Implementations Are Good, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick discussed the idea of a &amp;ldquo;final&amp;rdquo; Perl 6 compiler, pointing out that it isn&amp;rsquo;t clear that there needs to be a &amp;ldquo;final&amp;rdquo; compiler. As long as multiple implementations are compatible.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;new-calling-conventions-http-groups-google-com-groups-threadm-42c16b5a-7040101-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C16B5A.7040101@home.nl&#34;&gt;New Calling Conventions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked a bunch of questions about the new calling conventions and Leo answered them.&lt;/p&gt;

&lt;h4 id=&#34;parrot-segfaults-http-groups-google-com-groups-threadm-200506291354-19610-parrot-jensbeimsurfen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200506291354.19610.parrot@jensbeimsurfen.de&#34;&gt;Parrot Segfaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;What&amp;rsquo;s a tester to do? You find a bug that makes Parrot dump core, so you write a test to document the bug and make sure it gets fixed. But the test leaves core files lying about. It goes without saying that Parrot should never dump core without the active assistance of an NCI call or some other unsafe call blowing up in its face.&lt;/p&gt;

&lt;p&gt;This makes it a little embarrassing that PIR code generated by Pugs can cause a Parrot segfault, though the cause appears be mixed up calling convention style in the generated call.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1120142239.14968.20.camel@wombat%0A.dlib.indiana.edu&#34;&gt;Brian Wheeler&amp;rsquo;s segfaulting Pugs script&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;python-pmcs-http-groups-google-com-groups-threadm-42c395fe-7010701-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C395FE.7010701@toetsch.at&#34;&gt;Python PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that the various &lt;em&gt;dynclasses/py*.pmc&lt;/em&gt; Parrot support PMCs don&amp;rsquo;t yet support all the semantics that Python needs. He outlined some outstanding issues and announced that, as calling conventions and context handling were changing, he&amp;rsquo;d be turning off compiling &lt;em&gt;py*.pmc&lt;/em&gt; for the time being.&lt;/p&gt;

&lt;h4 id=&#34;pge-bug-http-groups-google-com-groups-threadm-42c40534-1000102-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C40534.1000102@toetsch.at&#34;&gt;PGE Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It appears that the upcoming changes in Parrot&amp;rsquo;s context handling tweak a bug in PGE. The discussion moved onto a discussion of PGE&amp;rsquo;s implementation strategy; Nicholas Clark was keen to make sure it didn&amp;rsquo;t repeat some of the Perl 5&amp;rsquo;s regex engine&amp;rsquo;s infelicities. While this discussion continued, Leo spent half a day with &lt;code&gt;gdb&lt;/code&gt; and tracked down the problem, which turned out to be that a register wasn&amp;rsquo;t getting initialized in the right place.&lt;/p&gt;

&lt;h4 id=&#34;left-recursive-grammars-are-bad-m-kay-http-groups-google-com-groups-threadm-rt-3-0-11-36437-116436-17-8864180085717-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36437-116436.17.8864180085717@perl.org&#34;&gt;Left-Recursive Grammars Are Bad, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While experimenting with PGE grammars, Will Coleda managed to write a left-recursive grammar that blew Parrot&amp;rsquo;s call stack with impressive ease. Luke apologized for things blowing up so spectacularly, but pointed out that PGE didn&amp;rsquo;t support left-recursive grammars and showed a rewritten grammar that didn&amp;rsquo;t have the same problem (but which doesn&amp;rsquo;t appear to match the same expressions).&lt;/p&gt;

&lt;h4 id=&#34;coroutines-http-groups-google-com-groups-threadm-ebb4ed649916ee6a195be937c1921d48-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ebb4ed649916ee6a195be937c1921d48@toetsch.at&#34;&gt;Coroutines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed to &lt;a href=&#34;ftp://ftp.inf.puc-rio.br/pub/docs/techreports/04_15_moura.pdf&#34;&gt;a summary of coroutines&lt;/a&gt; (PDF), and noted that we still hadn&amp;rsquo;t defined the syntax of Parrot coroutines, especially with respect to argument passing. He discussed it with Matt Fowles and solicited a set of tests that expressed the semantics they came up with.&lt;/p&gt;

&lt;h4 id=&#34;partcl-perl-6-grammars-http-groups-google-com-groups-threadm-d1e396f5-6ae6-43d3-b0a0-08cc710dba6c-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=D1E396F5-6AE6-43D3-B0A0-08CC710DBA6C@coleda.com&#34;&gt;ParTcl, Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda announced that, thanks to Matt Diephouse&amp;rsquo;s work, ParTcl (Tcl on Parrot) is now able to run part of Tcl&amp;rsquo;s cvs-latest test suite. The tests aren&amp;rsquo;t fully native yet, being currently driven through a Perl test harness and only passing ten percent of the tests, but hopefully the situation will improve and ParTcl will end up able to run the tests completely natively (while passing far more of them). Congratulations on the work so far, though.&lt;/p&gt;

&lt;h4 id=&#34;python-and-parrot-http-groups-google-com-groups-threadm-42c51ccb-7010008-tewk-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C51CCB.7010008@tewk.com&#34;&gt;Python and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew popped up to say that he too is working on a Python compiler targeting Parrot and wondered how to handle things like Python&amp;rsquo;s &lt;code&gt;self&lt;/code&gt; parameter. Michal Wallace and Leo chipped in with suggestions.&lt;/p&gt;

&lt;h4 id=&#34;another-month-another-release-http-groups-google-com-groups-threadm-42c7c447-8000302-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C7C447.8000302@toetsch.at&#34;&gt;Another Month, Another Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Has it really been a month? Seems so. Parrot walked through the traditional feature freeze and code freeze before being released on Sunday. The latest release is &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;, referencing the website that discusses Chip&amp;rsquo;s problems with his former employer. You should definitely visit the Geeksunite site&amp;ndash;Chip needs our help.&lt;/p&gt;

&lt;h4 id=&#34;lower-in-default-find-name-scope-http-groups-google-com-groups-threadm-20050702012449-ga25256-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702012449.GA25256@pmichaud.com&#34;&gt;&lt;code&gt;lower&lt;/code&gt; in Default &lt;code&gt;find_name&lt;/code&gt; Scope&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick posted a code fragment whose output surprised him&amp;ndash;it turned out that looking up &lt;code&gt;lower&lt;/code&gt; as a name in the default scope returns an NCI object. Leo explained why this was so, prompting Patrick to suggest that it would be useful if, somewhere in the Parrot documentation, there were some descriptions of Parrot&amp;rsquo;s built-in namespace. Leo encourage others to comment on namespace issues, and hoped for some decisions as well.&lt;/p&gt;

&lt;h4 id=&#34;copyrights-http-groups-google-com-groups-threadm-fecf197f-def8-4e4f-8fe9-ee0b2036516e-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=FECF197F-DEF8-4E4F-8FE9-EE0B2036516E@coleda.com&#34;&gt;Copyrights&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re like me, discussion of copyrights and licenses is the sort of thing that either really winds you up or induces serious drowsiness, depending on your mood as you read the thread. It&amp;rsquo;s one of those &amp;ldquo;too important not to think about, but too tedious to think about any more than is absolutely necessary&amp;rdquo; topics. That said, Will Coleda said that he had thought that all of Parrot&amp;rsquo;s code should to have its copyright assigned to the Perl Foundation. However, on inspection, he noticed a multiplicity of copyright notices in the actual code, including one file in the repository with a Microsoft copyright.&lt;/p&gt;

&lt;h4 id=&#34;pge-code-blocks-http-groups-google-com-groups-threadm-198c873805070414191b878a4d-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873805070414191b878a4d@mail.gmail.com&#34;&gt;PGE: Code Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wondered about the plan for integrating code blocks into PGE. He thought it&amp;rsquo;d be nice to be able to specify a compiler to use along with the code block (or, for the time being, just to be able to use PIR code). Patrick said that there is a plan (or several) for handling this, but getting blocks to work well needs coordination between PGE and the compiler language. In essence, when PGE encounters a code block, it needs to hand off to the target language&amp;rsquo;s compiler to parse to the end of the code block, and get back from the compiler the length of the block thus parsed.&lt;/p&gt;

&lt;h4 id=&#34;possible-bug-calculating-denominators-http-groups-google-com-groups-threadm-45ec99fc05070423504732f4fd-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc05070423504732f4fd@mail.gmail.com&#34;&gt;Possible Bug Calculating Denominators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls posted a fragment of code that seems to break Inc&amp;rsquo;s &lt;code&gt;computed_denominators&lt;/code&gt; algorithm. Leo wasn&amp;rsquo;t surprised that there were probably bugs in that part of IMCC, which was contributed by Angel Faus, who no longer seems to be participating in Parrot development. Which means it&amp;rsquo;s not been maintained for a while for lack of tuits. Anyone with an appropriate supply of tuits is welcome (nay, encouraged) to take it on.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;type-variables-vs-type-literals-http-www-nntp-perl-org-group-perl-perl6-language-22041&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22041&#34;&gt;Type Variables Vs. Type Literals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus had a question about the difference between&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (::T $x, ::T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (T $x, T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Larry answered about four times, mulling over various options. It&amp;rsquo;s times like that remind me why it&amp;rsquo;s worth following the list in detail rather than reading the summaries&amp;ndash;it&amp;rsquo;s good to see Larry thinking aloud, considering all sorts of (seemingly) wacky options and getting feedback.&lt;/p&gt;

&lt;h4 id=&#34;mr-clean-vs-perl-6-http-www-nntp-perl-org-group-perl-perl6-language-22042&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22042&#34;&gt;Mr. Clean Vs. Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman had some comments about fascism, strong (but I think he meant static) typing, cleaning products, Perl 6, and type inferencing. Stephane Payrard hoped that &amp;ldquo;Perl6 could become the playground of type theory searchers.&amp;rdquo; (To which I can only respond with a highly personal &amp;ldquo;Ick!&amp;rdquo;)&lt;/p&gt;

&lt;h4 id=&#34;documentation-trait-docstring-equivalent-http-www-nntp-perl-org-group-perl-perl6-language-22044&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22044&#34;&gt;Documentation Trait/Docstring Equivalent&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The Platypus (AKA David Formosa) wondered if documentation traits on subs would be useful. The first to hope that it would be was Chromatic, commenting that it&amp;rsquo;s a shame for Perl 6 to throw away potentially useful data recklessly. Larry commented that he always cringes when he hears &amp;ldquo;the documentation&amp;rdquo; as if it&amp;rsquo;s the only thing. Again, Larry&amp;rsquo;s thinking aloud on this subject is well worth your time.&lt;/p&gt;

&lt;h4 id=&#34;smd-is-for-weenies-http-www-nntp-perl-org-group-perl-perl6-language-22045&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22045&#34;&gt;SMD Is for Weenies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;So says Yuval Kogman, and who are we to doubt him? Yuval wanted to make multimethods the default type. Sam Vilain disagreed, pointing up the usefulness of warnings like &amp;ldquo;method foo redefined at &amp;hellip;.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;dbi-v2-the-plan-and-how-you-can-help-http-www-nntp-perl-org-group-perl-perl6-language-22054&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22054&#34;&gt;DBI v2: The Plan and How You Can Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce outlined his current thinking on how DBI v2 will work (DBI v2&amp;rsquo;s going to be Perl-6-only) and a local roadmap for the first things that need doing. He then opened the floor for detailed proposals for what a Perl 6 DBI API should look like. (I wonder if DBI v2&amp;rsquo;s going to be an important enough tool that it&amp;rsquo;ll want an RFC type process.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m glossing over &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22058&#34;&gt;the ensuing discussion&lt;/a&gt;&amp;ndash;it&amp;rsquo;s at the stage where, if you&amp;rsquo;re interested, you&amp;rsquo;re better off joining in directly.&lt;/p&gt;

&lt;h4 id=&#34;should-assuming-always-be-non-mutating-http-www-nntp-perl-org-group-perl-perl6-language-22060&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22060&#34;&gt;Should &lt;code&gt;.assuming&lt;/code&gt; Always Be Non-Mutating?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some suggestions about the behavior of the currying method &lt;code&gt;.assuming&lt;/code&gt;, arguing that it should always return a new thing and not alter the state of the underlying object. Larry agreed.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-www-nntp-perl-org-group-perl-perl6-language-22061&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22061&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Coo. The pointy block thread returns. The question is, where to?&lt;/p&gt;

&lt;h4 id=&#34;time-local-http-www-nntp-perl-org-group-perl-perl6-language-22076&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22076&#34;&gt;Time::Local&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas announced that he&amp;rsquo;d added &lt;code&gt;localtime&lt;/code&gt; to Pugs in order to address Dave Rolsky&amp;rsquo;s needs when porting the very lovely and worthwhile DateTime family of modules. He noted that Perl 6&amp;rsquo;s final time-related interfaces were rather underspecified and had a bunch of questions. The one thing that&amp;rsquo;s absolutely certain is that the default Perl time API will use subsecond resolution by default.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that, every time you start to discuss how computers handle &amp;ldquo;human&amp;rdquo; things such as time, dates, or writing systems, people often seem to have very strong and deeply held ideas of the Right Way of doing things, and those Right Ways are almost all different. Larry&amp;rsquo;s job is probably going to be to work out the Least Wrong Way. (If you&amp;rsquo;ve not heard &lt;a href=&#34;http://perlcast.com/audio/Perlcast_015.mp3&#34;&gt;Dave Rolsky&amp;rsquo;s talks about the underlying reasons for writing DateTime&lt;/a&gt; (MP3) and the headaches it gave him, then I suggest you seek it out.)&lt;/p&gt;

&lt;h4 id=&#34;autogenerated-attribute-accessor-names-http-www-nntp-perl-org-group-perl-perl6-language-22097&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22097&#34;&gt;Autogenerated Attribute Accessor Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;MetaModel maker Stevan Little wondered what to do when attribute names clashed, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo { has @.bar; has $.bar; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No answers yet.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;Summarizing a week is definitely way easier than summarizing a fortnight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m apologizing in advance for the fact that, for those of you who read this via the mailing list, some of the links probably don&amp;rsquo;t work yet. The thing is, the thread links are generated directly from the &lt;code&gt;message-id&lt;/code&gt;s because that&amp;rsquo;s the information I have access to and, so far as I know, Google Groups is the only archive that has a RESTful search interface that lets me use &lt;code&gt;message-id&lt;/code&gt;s as my key. If you know of an archive site that does this, but is more timely in its archiving of &lt;em&gt;perl6-language&lt;/em&gt; in particular, then please let me know and I&amp;rsquo;ll start using that instead. Ideally, it should allow me to directly address a message complete with its thread context.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, you really should pay a visit to &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;. For the life of me, I can&amp;rsquo;t see what I would have done differently in Chip&amp;rsquo;s situation, and I&amp;rsquo;m staggered by what&amp;rsquo;s happened to him.&lt;/p&gt;

&lt;p&gt;Right, back to our standard coda:&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 8-21, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</link>
      <pubDate>Thu, 23 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</guid>
      <description>

&lt;p&gt;Surprise! It&amp;rsquo;s me again. You may be wondering what happened to last week&amp;rsquo;s summary (I know I was) and where Matt had gone. Well, I&amp;rsquo;m not entirely sure where exactly he is now, but last week was moving week for him.&lt;/p&gt;

&lt;p&gt;Those of you reading this on the mailing lists may also be wondering why this summary is so late. Um &amp;hellip; three words: &lt;em&gt;World of Warcraft&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As a summarizer, when you see the &amp;ldquo;last fortnight&amp;rdquo; view of a mailing list containing 21 messages, several thoughts spring, unbidden, to your mind: &amp;ldquo;Is my mail broken again?&amp;rdquo; &amp;ldquo;Has everyone given up?&amp;rdquo; &amp;ldquo;Phew, this group won&amp;rsquo;t take long to do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It turns out that the answer to both of those questions is &amp;ldquo;No.&amp;rdquo; What actually happened was that most of the stuff that normally happens in mail happened at the Austrian Perl Workshop and Leo Tötsch&amp;rsquo;s house, with a side order of IRC conversation and a bunch of spinoff threads in &lt;em&gt;p6l&lt;/em&gt; and &lt;em&gt;p6i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the last fortnight, &lt;a href=&#34;http://use.perl.org/~autrijus/journal/&#34;&gt;Pugs reached the point where it has a (mostly) working Parrot back end, and&lt;/a&gt; BÁRTHAZI Andras wondered if we shouldn&amp;rsquo;t &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622861&#34;&gt;start a &lt;em&gt;perl6-general&lt;/em&gt; mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;140 messages in this one. &lt;em&gt;p6c&lt;/em&gt; lulled me into a false sense of security. Again, you may notice a bewilderingly fast rate of change this summary. It turns out that they weren&amp;rsquo;t just working on Pugs at Leo&amp;rsquo;s house. Perl 6 Hackathons give great productivity.&lt;/p&gt;

&lt;h4 id=&#34;this-is-not-your-father-s-parrot&#34;&gt;This Is Not Your Father&amp;rsquo;s Parrot&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s been some serious work going on under the Parrot hood in the last two weeks. Leo and Chip have drastically reworked the calling conventions, which now use four new opcodes: &lt;code&gt;set_args&lt;/code&gt;, &lt;code&gt;set_returns&lt;/code&gt;, &lt;code&gt;get_params&lt;/code&gt;, and &lt;code&gt;get_results&lt;/code&gt;. At the time of writing, IMCC doesn&amp;rsquo;t give you full syntactic help with them, but they&amp;rsquo;re easy enough to use explicitly for the time being and the help is getting there. Check out the &lt;a href=&#34;http://svn.perl.org/parrot/trunk/docs/pdds/pdd03_calling_conventions.pod&#34;&gt;Parrot Calling Conventions PDD&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Also getting rejigged is the continuation/register frame architecture. Taking advantage of the fact that this is a &lt;em&gt;virtual&lt;/em&gt; machine, we now have an unlimited number of registers per register frame. Combine this with the new calling conventions, in which arguments are passed outside of the register frame, and all of a sudden a full continuation becomes a simple pointer to the register frame and everything gets saved as if by magic, which opens up a whole bunch of possibilities, which has interesting implications for the register allocator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://use.perl.org/~chip/journal/&#34;&gt;Chip&amp;rsquo;s design notes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;new-generational-gc-scheme-http-groups-google-com-groups-threadm-41b037ed050608072845298c13-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41b037ed050608072845298c13@mail.gmail.com&#34;&gt;New Generational GC Scheme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alexandre Buisse posted his outline for a Google Summer of Code project to implement a shiny new Generational Garbage Collection scheme. Discussion of tunability and threading issues followed.&lt;/p&gt;

&lt;h4 id=&#34;ordered-hashes-more-thoughts-http-groups-google-com-groups-threadm-493a37523a8d17448240da1ddde924b4044d9040-msgboscld2win-dmn1-fmr-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=493A37523A8D17448240DA1DDDE924B4044D9040@MSGBOSCLD2WIN.DMN1.FMR.COM&#34;&gt;Ordered Hashes: More Thoughts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Tolkin helpfully provided a summary of his thoughts about ordered hashes: &amp;ldquo;An ordered hash that does not support deletes could cause a user-visible bug. At a minimum, it should support the special case of delete that is supported by the Perl &lt;code&gt;each()&lt;/code&gt; operator.&amp;rdquo; Dan pointed out that reusing the ordered hash code for anything other than the lexical pad it was specifically implemented for was just looking for trouble.&lt;/p&gt;

&lt;h4 id=&#34;the-thread-that-i-really-hoped-matt-would-be-summarizing-http-groups-google-com-groups-threadm-20050612111515-ga19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612111515.GA19372@tytlal.topaz.cx&#34;&gt;The Thread That I Really Hoped Matt Would Be Summarizing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;AKA &amp;ldquo;Attack of the 50-foot register allocator vs. the undead continuation monster.&amp;rdquo; Piers Cawley and Chip had something of a disagreement about interactions between continuations and the register allocator. After discussion on IRC, it became apparent that they were talking past each other. The new &amp;ldquo;the register frame is the continuation&amp;rdquo; means that yes, the register allocator definitely can&amp;rsquo;t rely on being able to reuse registers that persist over function calls, but that&amp;rsquo;s all right because you can always grab more registers.&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-20050612113805-gc19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612113805.GC19372@tytlal.topaz.cx&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember the missing multimethod functions I mentioned last time? At the time, Chip hadn&amp;rsquo;t ruled on whether taking them out was the Right Thing or not. He has since ruled that it was.&lt;/p&gt;

&lt;p&gt;This is probably not quite the right place to suggest this, but what the heck. Maybe in future when planning user visible changes of this sort, they should spend at least one release period deprecated and throwing warnings when used.&lt;/p&gt;

&lt;h4 id=&#34;pge-namespaced-rules-http-groups-google-com-groups-threadm-42aa039b-8030000-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA039B.8030000@coleda.com&#34;&gt;PGE, Namespaced Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda worried that PGE subrules appear to be globally scoped. It turns out that Patrick worries, too, but is currently in the process of thrashing out how to scope them. He outlined his current thinking.&lt;/p&gt;

&lt;h4 id=&#34;pmcs-and-objects-question-http-groups-google-com-groups-threadm-42aa13d4-1010201-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA13D4.1010201@home.nl&#34;&gt;PMCs and Objects Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol wondered about the possibilities of overriding PMC behavior with Parrot classes. He outlined possibilities and wondered if he was correct. Chip thought that it should be possible to implement (for instance) Perl&amp;rsquo;s datatypes in pure PIR, if only for debugging and fun. I&amp;rsquo;m still not entirely sure if it&amp;rsquo;s possible to make a &lt;code&gt;ParrotClass&lt;/code&gt; that inherits from a PMC, though.&lt;/p&gt;

&lt;h4 id=&#34;software-transactional-memory-http-groups-google-com-groups-threadm-rt-3-0-11-36250-115576-12-1956142453591-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36250-115576.12.1956142453591@perl.org&#34;&gt;Software Transactional Memory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It seems the design team have drunk deeply of the Software Transaction Memory (STM) Kool Aid. STM is, to quote Chip, a &amp;ldquo;wicked cool&amp;rdquo; way of doing threading. Expect a more-fleshed-out design document eventually.&lt;/p&gt;

&lt;h4 id=&#34;parrot-bc-http-groups-google-com-groups-threadm-1579101353-20050611234913-rblasch-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1579101353.20050611234913@rblasch.org&#34;&gt;Parrot &lt;code&gt;bc&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;According to the configuration scripts, Parrot looks for the GNU version of &lt;code&gt;bc&lt;/code&gt; solely for checking that Parrot &lt;code&gt;bc&lt;/code&gt; is working. This is all very well, but there is no Parrot implementation of &lt;code&gt;bc&lt;/code&gt; in the SVN repository. Apparently, there&amp;rsquo;s a broken version of it sitting on Bernhard Schmalhofer&amp;rsquo;s local hard disk.&lt;/p&gt;

&lt;p&gt;None of which addressed the issue of why, even with a &amp;ldquo;working&amp;rdquo; version, the tests need to access GNU &lt;code&gt;bc&lt;/code&gt;. Surely it&amp;rsquo;s possible to write tests statically. The only time you&amp;rsquo;d need an authoritative version would be when you were adding tests. Oops, editorializing again.&lt;/p&gt;

&lt;h4 id=&#34;substituting-for-pge-http-groups-google-com-groups-threadm-42abb476-3030109-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ABB476.3030109@coleda.com&#34;&gt;Substituting for PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if it was possible to do substitutions with PGE yet. &amp;ldquo;Yes, sort of,&amp;rdquo; Patrick replied. You can substitute the first occurrence by grabbing the match data and using &lt;code&gt;substr&lt;/code&gt;. Everything else is for another day.&lt;/p&gt;

&lt;h4 id=&#34;unexpected-behavior-calling-method-http-groups-google-com-groups-threadm-42ac11c4-9000501-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AC11C4.9000501@home.nl&#34;&gt;Unexpected Behavior Calling Method&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol had some problems implementing delegated addition. Apparently it&amp;rsquo;s because the signatures of the &lt;code&gt;__add&lt;/code&gt; methods caught him out. Also, it&amp;rsquo;s a really bad idea to delegate to a method called &lt;code&gt;__add&lt;/code&gt;, because Parrot expects some very particular behavior from it. Think about calling it &lt;code&gt;add&lt;/code&gt; instead.&lt;/p&gt;

&lt;h4 id=&#34;parrot-goals-and-priorities-http-groups-google-com-groups-threadm-20050612103228-gi4954-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612103228.GI4954@tytlal.topaz.cx&#34;&gt;Parrot Goals and Priorities&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip&amp;rsquo;s put the slides of his Austrian Perl Workshop talk on &lt;a href=&#34;http://feather.perl6.nl/~chip/Chip_APW.pdf&#34;&gt;the Parrot project and its priorities&lt;/a&gt; up on feather. Check them out; they&amp;rsquo;re good.&lt;/p&gt;

&lt;h4 id=&#34;new-todos-http-rt-perl-org-rt3-search-listing-html-bookmark-frt-3b-404-7c-258-7c-242-7c10-242-7c11-241-7c7-241-7c9-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20resolved-246-7cstatus-242-7c-21-3d-248-7cresolved-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20rejected-246-7cstatus-242-7c-21-3d-248-7crejected-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2414-7cqueue-20-3d-20parrot-245-7cqueue-241-7c-3d-246-7cparrot-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2417-7csubject-20like-20todo-247-7csubject-244-7clike-244-7ctodo-242-7c12-241-7c0-241-7c0-ticketssortby-created-ticketssortorder-desc-rowsperpage-50&#34;&gt;&lt;a href=&#34;http://rt.perl.org/rt3/Search/Listing.html?Bookmark=FrT%3B%404%7C%258%7C%242%7C10%242%7C11%241%7C7%241%7C9%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20resolved%246%7CStatus%242%7C%21%3D%248%7Cresolved%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20rejected%246%7CStatus%242%7C%21%3D%248%7Crejected%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2414%7CQueue%20%3D%20parrot%245%7CQueue%241%7C%3D%246%7Cparrot%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2417%7CSubject%20LIKE%20TODO%247%7CSubject%244%7CLIKE%244%7CTODO%242%7C12%241%7C0%241%7C0&amp;amp;TicketsSortBy=Created&amp;amp;TicketsSortOrder=DESC&amp;amp;RowsPerPage=50&#34;&gt;New TODOs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda&amp;rsquo;s been busy injecting a bunch of handy TODO items in the Parrot RT system. Check &amp;lsquo;em out, you might be able to do some of them.&lt;/p&gt;

&lt;h4 id=&#34;new-list-for-pirate-http-groups-google-com-groups-threadm-pine-lnx-4-62-0506122306160-11002-hydrogen-sabren-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.62.0506122306160.11002@hydrogen.sabren.com&#34;&gt;New List for Pirate&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace announced the creation of &lt;a href=&#34;http://cornerhost.com/mailman/listinfo/pirate&#34;&gt;a new list for work on Pirate&lt;/a&gt;, a Python compiler for Parrot. If Python on Parrot is your bag, I suggest you sign up.&lt;/p&gt;

&lt;h4 id=&#34;adding-methods-to-existing-classes-http-groups-google-com-groups-threadm-20050615203833-gc7329-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050615203833.GC7329@pmichaud.com&#34;&gt;Adding Methods to Existing Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick wondered how to add methods to existing classes. It turns out that the trick is to use &lt;code&gt;find_type&lt;/code&gt; instead of &lt;code&gt;findclass&lt;/code&gt;. According to Leo, &lt;code&gt;findclass&lt;/code&gt; is deprecated.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. 1242 GMT+1 on Thursday as I write this, and there are, oh, 246 messages in &lt;em&gt;perl6-language&lt;/em&gt;. This could get sketchy.&lt;/p&gt;

&lt;h4 id=&#34;reduce-metaoperator-on-an-empty-list&#34;&gt;Reduce Metaoperator on an Empty List&lt;/h4&gt;

&lt;p&gt;Wow! The &amp;ldquo;Reduce metaoperator on an empty list&amp;rdquo; discussion is still going.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-type-blocks-http-aspn-activestate-com-aspn-mail-message-perl6-language-2617767&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2617767&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Type Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Much to my personal chagrin, it looks like &lt;code&gt;return()&lt;/code&gt; inside a of pointy block will use an escape continuation and will probably be picky about making sure that you can only invoke the pointy block from somewhere dynamically &amp;ldquo;below&amp;rdquo; the block in which it was created. This means no cunning tricks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub call_with_current_continuation(Code $code) {
  $code({ return $^cc })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is probably a good thing.&lt;/p&gt;

&lt;h4 id=&#34;caller-and-want-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619348&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619348&#34;&gt;&lt;code&gt;caller&lt;/code&gt; and &lt;code&gt;want&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas asked for clarification about the behavior of the &lt;code&gt;caller&lt;/code&gt; builtin. Larry provided it.&lt;/p&gt;

&lt;h4 id=&#34;musing-on-registerable-event-handlers-for-some-specific-events-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619327&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619327&#34;&gt;Musing on Registerable Event Handlers for Some Specific Events&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy hoped that Perl 6 would have some sort of minimal set of hooks for handling events. (Personally, I&amp;rsquo;d like a maximal set of hooks for anything that changes the runtime structure of Perl, but I&amp;rsquo;m greedy like that.) Larry said that there would be such a thing, but that it wasn&amp;rsquo;t designed yet. He appeared to volunteer Adam as an initial designer. Discussion ensued, but there&amp;rsquo;s no concrete design yet. Slightly tangentially, Dan discussed his &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000414.html&#34;&gt;thoughts about a Parrot notifications manager&lt;/a&gt; on his blog, which might be useful to some.&lt;/p&gt;

&lt;h4 id=&#34;speed-bump-placement-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621258&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621258&#34;&gt;Speed Bump Placement&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a thread discussing adding an &lt;code&gt;eval STRING&lt;/code&gt;-type behavior to the right-hand side of a substitution, Larry said that &amp;ldquo;Deciding where (and where not) to put the speed bumps is a pretty good description of my job. It&amp;rsquo;s impossible to have a language without bumps, so I reserve the right to put the necessary bumps where I think they&amp;rsquo;ll do the most good and/or least harm.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I thought that was worth reading by more than just the list subscribers.&lt;/p&gt;

&lt;h4 id=&#34;mmd-vs-anonymous-parameter-types-referencing-early-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622814&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622814&#34;&gt;MMD Vs. Anonymous Parameter Types Referencing Early Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip threw up his hands and despaired of ever efficiently implementing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  multi sub is_equal(Integer $a, Integer where { $_ == $a } $b: ) { 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is cute, but Chip claims you need Jedi mind powers if you want to make it work.&lt;/p&gt;

&lt;p&gt;Then Thomas Sandlaß popped up to say that actually, there was already a language called Cecil that allowed you to do precisely that sort of thing (called Predicate Dispatch) and there were several efficient implementation strategies. After a nudge from Chip, he even provided a link. Larry thought it eminently doable, too, and sketched out a strategy.&lt;/p&gt;

&lt;p&gt;That strategy (which applies almost everywhere in Perl, when you think about) boils down to &amp;ldquo;If you can&amp;rsquo;t do it at compile time, do it at runtime (and pretend you did it at runtime).&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;state-of-the-design-documents-http-aspn-activestate-com-aspn-mail-message-perl6-language-2620863&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2620863&#34;&gt;State of the Design Documents&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb worries about the state of the synopses. He argued (quite persuasively) that the thing to do would be to put the synopses into public change control with global read access, but with write access limited to @Larry. The community could then provide new documentation in the form of patches, which @Larry would approve, reject, or modify as appropriate, which all hangs on whether @Larry has sufficient tuits.&lt;/p&gt;

&lt;p&gt;Patrick pointed out that this already exists and that he had volunteered as gatekeeper and patch dispatcher, but that there were very few patches so far. But now you all know about it, right?&lt;/p&gt;

&lt;p&gt;Some discussion followed about how to flesh out things, but the important thing is the &lt;a href=&#34;http://svn.perl.org/perl6/doc/trunk&#34;&gt;Perl 6 design document repository&lt;/a&gt; URL.&lt;/p&gt;

&lt;h4 id=&#34;how-much-do-we-close-over-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621742&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621742&#34;&gt;How Much Do We Close Over?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley wants to be able to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo { my $x = 1; return sub { eval $^codestring } }
say foo().(&#39;$x&#39;); # 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 5, this gives warnings about an undeclared variable. Chip maintained that this is actually the Right Thing. Piers understood that it may not be the right thing in all cases, but he wanted to be able to make it work when needed, if necessarily, with predeclaration. There was some discussion, but nothing from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622126&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622126&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt noted that that &lt;code&gt;BEGIN {...}&lt;/code&gt; can be a little scary when you want to compile to bytecode. Consider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = BEGIN { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is okay, until you have a version of Perl that compiles that to bytecode. The response ran along the lines of &amp;ldquo;Don&amp;rsquo;t do that, then!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Personally I&amp;rsquo;d write that as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = INIT { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that my recollection that &lt;code&gt;INIT&lt;/code&gt; blocks happen after the code is compiled but before it starts to run&amp;ndash;or do I mean a &lt;code&gt;CHECK&lt;/code&gt; block?&lt;/p&gt;

&lt;h4 id=&#34;anonymous-macros-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622133&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622133&#34;&gt;Anonymous Macros&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo also wondered if anonymous macros (at compile time) were allowed. Larry had no problem with macros being first-class objects during the compile. He also went on to wonder if they should be multidispatch, too.&lt;/p&gt;

&lt;h4 id=&#34;perl-defined-object-array-hash-classes-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622337&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622337&#34;&gt;Perl Defined &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt; Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While toying with Pugs, Eric Hodges managed to overwrite the internal definition of the &lt;code&gt;Object&lt;/code&gt; class, which obviously caused him pain. Larry reckons we&amp;rsquo;ll have constructs like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Object is augmented { ... };
class Object is replaced { ... };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(names up for grabs). My personal preference is for making &lt;code&gt;augmented&lt;/code&gt; the default behavior, but I&amp;rsquo;ll live if I can have a pragma that makes it that way.&lt;/p&gt;

&lt;h4 id=&#34;hash1-hash2&#34;&gt;&lt;code&gt;%hash1 »...« %hash2&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa wondered about the behavior of hyperops when applied to a pair of hashes. He wanted things arranged so that if you had a hash with keys in common, then the hypering process would keep them together. Luke agreed that it would be useful (so do I, for that matter) and then everyone started talking about inner and outer joins and my database comprehension head swapped out for the moment.&lt;/p&gt;

&lt;h4 id=&#34;binding-slices&#34;&gt;Binding Slices&lt;/h4&gt;

&lt;p&gt;With a small correction for syntactical niceness, Piers wondered if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @y := @foo[0...][1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would bind &lt;code&gt;@y&lt;/code&gt; to a column of the two-dimensional matrix represented by &lt;code&gt;@foo[][]&lt;/code&gt;, so that writing to &lt;code&gt;@y&lt;/code&gt; would affect &lt;code&gt;@foo&lt;/code&gt; and vice versa. @Larry hasn&amp;rsquo;t said anything yet.&lt;/p&gt;

&lt;h4 id=&#34;alias-the-rubymeter-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622775&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622775&#34;&gt;&lt;code&gt;alias&lt;/code&gt; the RubyMeter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI Andras wondered if Perl 6 would have something like Ruby&amp;rsquo;s rather lovely &lt;code&gt;alias&lt;/code&gt;. Larry thought you should be able to write a macro to do the job, but wasn&amp;rsquo;t entirely sure how exactly it would be done. Further discussion centered on whether the feature was a good idea and whether it had the right name. One school of thought thinks it already exists as &lt;code&gt;:=&lt;/code&gt;, but I&amp;rsquo;m not quite so sure.&lt;/p&gt;

&lt;h4 id=&#34;caller-block-vs-any-hope-of-efficiency-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622877&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622877&#34;&gt;&lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; Vs. Any Hope of Efficiency&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip hopes that using &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; as a general-purpose block promoter will be disallowed unless the calling block has already marked itself as callable. Larry thought that this would be okay, noting that he saw &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; being mostly used for introspective purposes.&lt;/p&gt;

&lt;h4 id=&#34;creating-a-web-templating-engine-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622993&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622993&#34;&gt;Creating a Web Templating Engine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wow! Perl 6 isn&amp;rsquo;t even finished, and already Andras is talking about writing a web templating engine for it. He outlined his plan and wondered how to go about implementing it. He and Ingo discussed it.&lt;/p&gt;

&lt;h4 id=&#34;hyper-concat-http-aspn-activestate-com-aspn-mail-message-perl6-language-2630895&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2630895&#34;&gt;Hyper Concat&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Klausner has been playing with &lt;code&gt;»~«&lt;/code&gt; and uncovered some weirdness. Said weirdness lead to a discussion of &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2658196&#34;&gt;the default strings/patterns in &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sub-my-zip-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710261&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710261&#34;&gt;&lt;code&gt;sub my_zip (...?) {}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus worried that the current Pugs implementation of &lt;code&gt;zip&lt;/code&gt; was signatureless, which, among other things, makes it uncompilable to Parrot. He wondered what its function signature should be. Larry came up with the (admittedly slightly weird) goods.&lt;/p&gt;

&lt;h4 id=&#34;ignoring-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710606&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710606&#34;&gt;Ignoring Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered if he&amp;rsquo;d be able to write a class method as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(Class undef:) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when his class methods made no references to the class object itself. Damian thought that the syntax should actually be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(FooClass ::class) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that subs and methods should complain about unused non-optional non-invocant parameters. There&amp;rsquo;s more; see the sub for details.&lt;/p&gt;

&lt;h4 id=&#34;scalar-dereferencing-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710912&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710912&#34;&gt;Scalar Dereferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered about the semantics of a scalar reference in the face of stringification and numification. He provided an example of Pugs&amp;rsquo; current behavior that may or may not be correct. Larry described broken behavior before thinking again and describing the really correct behavior, along with a summary of his raccoon problems.&lt;/p&gt;

&lt;h4 id=&#34;taking-given-as-read-http-aspn-activestate-com-aspn-mail-message-perl6-language-2711310&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2711310&#34;&gt;Taking &lt;code&gt;given&lt;/code&gt; as Read&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wondered how to write a function that would look like a &lt;code&gt;given&lt;/code&gt; block to any &lt;code&gt;when&lt;/code&gt;s inside of it. It turns out that you can&amp;rsquo;t, yet. Damian thought that the right way to do it would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub factorial (Int $n is topic) {
  return 1 when 0;
  $n * factorial($n - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading this again, I find myself wondering if the &lt;code&gt;return&lt;/code&gt; is really necessary.&lt;/p&gt;

&lt;h4 id=&#34;method&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;People don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;. Other people don&amp;rsquo;t like &lt;code&gt;.method&lt;/code&gt; in methods. I think we have what we have on the &amp;ldquo;least worst option&amp;rdquo; principle&amp;ndash;but I would say that I don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;autoload-and-http-aspn-activestate-com-aspn-mail-message-perl6-language-2713984&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2713984&#34;&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; and &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered about the prototype of &lt;code&gt;AUTOLOAD&lt;/code&gt;. In the discussion that ensued, some people felt that whatever happened, &lt;code&gt;AUTOLOAD&lt;/code&gt; should return a code ref that &lt;em&gt;perl&lt;/em&gt; would call.&lt;/p&gt;

&lt;h3 id=&#34;th-th-the-that-s-all-folks&#34;&gt;Th-Th-The-That&amp;rsquo;s All, Folks!&lt;/h3&gt;

&lt;p&gt;I remember now why I gave up writing summaries in the first place. First, I started missing weeks, which meant that there was so much to write up in the fortnightly summaries, and then discussions grew interesting, which meant writing them took so much longer because there were hard things to understand first.&lt;/p&gt;

&lt;p&gt;Still, once in a while is refreshing, but I really should stop putting things off until the last minute.&lt;/p&gt;

&lt;p&gt;Ahem.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 1-7, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</link>
      <pubDate>Thu, 09 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</guid>
      <description>

&lt;p&gt;Crumbs. I&amp;rsquo;ve remembered to write the summary this week. Now if I can just remember to bill O&amp;rsquo;Reilly for, err, 2003&amp;rsquo;s summaries. Heck, it&amp;rsquo;s not like waiting for the dollar to get stronger has paid off.&lt;/p&gt;

&lt;p&gt;Ah well, no use crying over spilled milk. On with the show. Maybe, just maybe, &lt;code&gt;darwinports&lt;/code&gt; will work its magic and I&amp;rsquo;ll have a working Haskell compiler by the time I&amp;rsquo;ve finished writing.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;undef-issues-http-groups-google-com-groups-threadm-20050601002444-gb32060-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601002444.GB32060@wall.org&#34;&gt;&lt;code&gt;undef&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;d probably forgotten this, but Larry pointed out that in Perl 6 there will no longer be a function &lt;code&gt;undef()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;. Instead there&amp;rsquo;ll be a function &lt;code&gt;undefine()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;, but he thinks that we should usually &lt;code&gt;fail()&lt;/code&gt; to construct our undefined values.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;keys-http-groups-google-com-groups-threadm-20050601021042-22209-qmail-web32914-mail-mud-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601021042.22209.qmail@web32914.mail.mud.yahoo.com&#34;&gt;Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure I understood what TOGoS was driving at with a suggestion about keys and properties. Luckily Leo, Dan, and Chip all seemed to. The discussion continued through the week.&lt;/p&gt;

&lt;h4 id=&#34;loop-improvements-http-groups-google-com-groups-threadm-45ec99fc050531202812aa4da9-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050531202812aa4da9@mail.gmail.com&#34;&gt;Loop Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh no! It&amp;rsquo;s the register allocator problems again. One of these days, I swear I&amp;rsquo;m going to swot up on this stuff properly, work out whether it&amp;rsquo;s really the case that full continuations break any conceivable register allocator, and summarize all of the issues for everyone in a nice white paper/summary.&lt;/p&gt;

&lt;h4 id=&#34;hp-ux-build-notes-http-groups-google-com-groups-threadm-20050601114223-30367-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601114223.30367.qmail@lists.develooper.com&#34;&gt;HP-UX Build Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross posted some of his issues with getting Parrot up on an HP-UX machine. After a good deal of discussion and tool-chain fettling, he made things build and posted a patch to fix the knowledge, which was promptly applied (r8280, for those of you with the &lt;code&gt;svn&lt;/code&gt; chops to know how to take advantage of that).&lt;/p&gt;

&lt;h4 id=&#34;mod-pugs-status-http-groups-google-com-groups-threadm-pine-lnx-4-44-0506011358160-20203-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0506011358160.20203-100000@booger.sixgeeks.org&#34;&gt;&lt;code&gt;mod_pugs&lt;/code&gt; Status&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced that &lt;code&gt;mod_parrot&lt;/code&gt; now comes bundled with &lt;code&gt;mod_pugs&lt;/code&gt;, which means that you can now write Apache extensions in Perl 6. I don&amp;rsquo;t know about you, but my mind is still boggling.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-1-http-groups-google-com-groups-threadm-42a18449-3060709-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A18449.3060709@toetsch.at&#34;&gt;Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Parrot spent most of the week in a feature freeze for the release of Parrot 0.2.1 &amp;ldquo;APW,&amp;rdquo; which went ahead as planned on the 4th of June.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-solaris-http-groups-google-com-groups-threadm-8c73533bea34422-bd4-27eb1-mblk-r28-sysops-aol-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=8C73533BEA34422-BD4-27EB1@mblk-r28.sysops.aol.com&#34;&gt;Parrot on Solaris&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Peter Sinnott reported problems with Parrot on Solaris. It turns out that different implementations of &lt;code&gt;atan&lt;/code&gt; behave slightly differently, which isn&amp;rsquo;t good. I believe the problem remains unresolved.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-the-mac-os-http-groups-google-com-groups-threadm-ffcb1edd23308e83c738cd420c94e7c1-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ffcb1edd23308e83c738cd420c94e7c1@gmail.com&#34;&gt;Parrot on the Mac OS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Juran&amp;rsquo;s questions about getting Parrot running on Mac OS Classic went Warnocked.&lt;/p&gt;

&lt;h4 id=&#34;parrot-tests-get-todo-http-groups-google-com-groups-threadm-1117736102-12568-25-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1117736102.12568.25.camel@localhost&#34;&gt;Parrot Tests Get TODO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Continuing the drive for consistent testing structures everywhere in Perl land, Chromatic applied a patch to &lt;code&gt;Parrot::Test&lt;/code&gt; that makes TODO tests work in a way that &lt;code&gt;Test::Builder&lt;/code&gt; understands. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-a06210200bec56c538a32-5b192-168-0-8-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06210200bec56c538a32@%5B192.168.0.8%5D&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan was somewhat bemused to find that the MMD functions&amp;rsquo; defaults had disappeared when he did a sync with &lt;code&gt;subversion&lt;/code&gt;. He wondered whether this was deliberate. Turns out that it was. I&amp;rsquo;m not sure whether Chip&amp;rsquo;s ruled that it was right, though.&lt;/p&gt;

&lt;h4 id=&#34;google-s-summer-of-code-2005-http-groups-google-com-groups-threadm-bbfd0f3e0506030500752b4585-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=bbfd0f3e0506030500752b4585@mail.gmail.com&#34;&gt;Google&amp;rsquo;s Summer of Code 2005&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember earlier when I talked about IMCC&amp;rsquo;s register allocation? Well, Dheeraj Khumar Arora is looking at working on improving IMCC&amp;rsquo;s optimizations as part of Google&amp;rsquo;s Summer of Code 2005. The usual thread ensued.&lt;/p&gt;

&lt;h4 id=&#34;building-nci-dynclasses-on-hp-ux-http-groups-google-com-groups-threadm-20050603120906-10247-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050603120906.10247.qmail@lists.develooper.com&#34;&gt;Building &lt;em&gt;nci/dynclasses&lt;/em&gt; on HP-UX&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Not content with getting Parrot to build on HP-UX, Nick Glencross next set his sights on making &lt;em&gt;nci/dynclasses&lt;/em&gt; work on HP-UX. It sounds like there&amp;rsquo;ll be a patch forthcoming some time next week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050605160218.31074.qmail@lists.develooper.com&#34;&gt;Nick Paints the Big HP-UX Picture&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;announcing-amber-for-parrot-0-2-1-http-groups-google-com-groups-threadm-1118002708-9863-14-camel-eden&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1118002708.9863.14.camel@eden&#34;&gt;Announcing Amber for Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne announced another new language that targets Parrot: &lt;a href=&#34;http://xamber.org/&#34;&gt;Amber&lt;/a&gt;. It borrows a good deal of syntax and semantics from Eiffel, with a large sprinkling of Ruby for good measure.&lt;/p&gt;

&lt;h4 id=&#34;a-note-wrt-exception-handlers-http-groups-google-com-groups-threadm-42a3f803-6040406-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A3F803.6040406@toetsch.at&#34;&gt;A note WRT exception handlers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a quick discussion of the correct use of exception handlers in Parrot. Essentially, the rule is that your exception handler should jump back to the point just after the exception handler block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    push_eh except_N
    # Code that might fail
    clear_eh
resume_N:
    ...
except_N:
    ...
    goto resume_N
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, eh?&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-reduce-metaoperator-thread&#34;&gt;The Reduce Metaoperator Thread&lt;/h4&gt;

&lt;p&gt;Remember when I discussed this thread two weeks ago? It&amp;rsquo;s still going strong.&lt;/p&gt;

&lt;p&gt;Larry ended up stating that there will be an optional property, &lt;code&gt;identval&lt;/code&gt;, on operators which will be set by default on all operators with obvious identity values. Or it might be called &lt;code&gt;initvalue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3684&#34;&gt;Larry Makes Up His Mind&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;construction-clarification-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3551&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3551&#34;&gt;Construction Clarification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wondered about how object constructors will work. It turned out that the code he&amp;rsquo;d carefully written by hand pretty much described the default behavior. Damian and Larry provided details. Hopefully, some keen p6porter has already incorporated any new information into the appropriate Synopses.&lt;/p&gt;

&lt;h4 id=&#34;a-comprehensive-list-of-perl-6-rule-tokens-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3577&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3577&#34;&gt;A Comprehensive List of Perl 6 Rule Tokens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick responded to his own post last week to clarify some things about the capturing behavior of various rule types. He, Japhy, and Thomas Sandlaß thrashed out the gory details.&lt;/p&gt;

&lt;h4 id=&#34;default-invocant-of-methods-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3578&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3578&#34;&gt;Default Invocant of Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry addressed Ingo Blechschmidt&amp;rsquo;s questions about class methods.&lt;/p&gt;

&lt;p&gt;Class is a role? My head hurts.&lt;/p&gt;

&lt;h4 id=&#34;returns-and-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3579&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3579&#34;&gt;&lt;code&gt;returns&lt;/code&gt; and Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered how to specify the signature of a context-sensitive function. The consensus seems to be to use a junction, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo() returns Str|Int {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;declarations-of-constants-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3556&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3556&#34;&gt;Declarations of Constants&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy had wondered how much compile-time optimization of constants would happen. Damian thought not as much as Adam thought, but suggested that he could use macros to get more optimization if he needed it.&lt;/p&gt;

&lt;h4 id=&#34;time-functions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3558&#34;&gt;Time Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The good thing about &lt;code&gt;localtime&lt;/code&gt; et al. is that everyone knows them. The bad thing about them is that they&amp;rsquo;re at such a low level that you either end up reinventing wheels, getting it wrong, or boggling at the size of the library you need to install to get access to good time manipulation. I wonder what Perl 6 will end up with.&lt;/p&gt;

&lt;h4 id=&#34;empty-hash-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3600&#34;&gt;Empty Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke wondered if &lt;code&gt;{}&lt;/code&gt; should be an empty hash rather than empty code, and why &lt;code&gt;{ %hash }&lt;/code&gt; no longer makes a shallow copy of the hash, but code that returns &lt;code&gt;%hash&lt;/code&gt;. There was some discussion, but no answers came from anyone else on the design team.&lt;/p&gt;

&lt;h4 id=&#34;chars-in-a-list-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3631&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3631&#34;&gt;&lt;code&gt;chars&lt;/code&gt; in a List Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb revisited a long-Warnocked subject. He wants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@chars = &#39;hello&#39;.chars; # &amp;lt;h e l l o&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, in a list context, &lt;code&gt;chars&lt;/code&gt; should return a list of the characters in the string. Stuart Cook thought it was a good idea.&lt;/p&gt;

&lt;h4 id=&#34;transparent-opaque-references-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3517&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3517&#34;&gt;Transparent/Opaque References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Um &amp;hellip; I&amp;rsquo;m not sure what Thomas Sandlaß and Juerd were talking about. I&amp;rsquo;ll tell you what, let&amp;rsquo;s swap places: you read the thread and write me a summary of it.&lt;/p&gt;

&lt;h4 id=&#34;idea-for-making-and-optional-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3645&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3645&#34;&gt;Idea for Making &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, and &lt;code&gt;$&lt;/code&gt; Optional&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas wondered if it would be possible to make variable sigils optional. The short answer is yes, with a pragma, and probably left for CP6AN.&lt;/p&gt;

&lt;h4 id=&#34;using-rules-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3647&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3647&#34;&gt;Using Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about using rules in a web templating system he was working on. Aankhen supplied an answer.&lt;/p&gt;

&lt;p&gt;(Look, it&amp;rsquo;s two messages. Any summary I wrote that told you more than the above sentence would be about as long as the original messages.)&lt;/p&gt;

&lt;h4 id=&#34;multi-subroutine-names-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3657&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3657&#34;&gt;(Multi)Subroutine Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dakkar wondered how he could get at the long name of a multi sub. Rod Adams thought it&amp;rsquo;d be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo&amp;lt;Array, Int&amp;gt;
&amp;amp;foo&amp;lt;Hash, Int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but also thought it might been changed. Thomas Sandlaß agreed that it had changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo:(Array, Int)
&amp;amp;foo:(Hash, Int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy.&lt;/p&gt;

&lt;h4 id=&#34;flattening-arguments-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3665&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3665&#34;&gt;Flattening Arguments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about the behavior of flattening arguments in Pugs when compared to that described in &lt;em&gt;Perl 6 and Parrot Essentials&lt;/em&gt;. Answer: The book&amp;rsquo;s right, they&amp;rsquo;re just not implemented in Pugs. Yet.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3685&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3685&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh boy. Ingo Blechschmidt opened a can of worms when he asked about &lt;code&gt;return&lt;/code&gt; within pointy subs. However, because the worms were slow in starting, you&amp;rsquo;ll have to wait for Matt&amp;rsquo;s summary next week when he explains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub callcc (Code $code) { $code(-&amp;gt; $r {return $r}) }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;meanwhile-in-another-place&#34;&gt;Meanwhile, in Another Place&lt;/h3&gt;

&lt;p&gt;Once upon a long time ago, Jon Orwant threw coffee cups and swore and Perl 6 was born. Later that afternoon, Dan Sugalski started doodling design sketches for what was to become Parrot. Parrot&amp;rsquo;s first &lt;em&gt;README&lt;/em&gt; in CVS dates from August 11th, 2001, and the first archived mailing list post is from August 1st, 2000, but that&amp;rsquo;s a reply.&lt;/p&gt;

&lt;p&gt;As well as being Parrot&amp;rsquo;s original developer, Dan is also Parrot&amp;rsquo;s first commercial user.&lt;/p&gt;

&lt;p&gt;Last week, he announced in his blog that, having already given up his designer&amp;rsquo;s hat earlier this year, &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000400.html&#34;&gt;he&amp;rsquo;s stopped doing any Parrot development&lt;/a&gt;. The plan is that he&amp;rsquo;ll be publishing a few design documents and historical explanations of various bits of Parrot design on his blog, but otherwise, that&amp;rsquo;s all he wrote.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the first, and I&amp;rsquo;m sure I won&amp;rsquo;t be the last to say this. Dan, thank you very much for all the work you&amp;rsquo;ve put into Parrot over the years. Good luck with whatever you do next.&lt;/p&gt;

&lt;h3 id=&#34;the-end-for-now&#34;&gt;The End &amp;hellip; for Now&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

