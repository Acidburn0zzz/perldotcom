<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardware on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/hardware/</link>
    <description>Recent content in Hardware on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Mar 2015 10:04:29 +0000</lastBuildDate>
    <atom:link href="/tags/hardware/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accelerating Perl</title>
      <link>http://localhost:1313/article/159/2015/3/16/Accelerating-Perl/</link>
      <pubDate>Mon, 16 Mar 2015 10:04:29 +0000</pubDate>
      
      <guid>http://localhost:1313/article/159/2015/3/16/Accelerating-Perl/</guid>
      <description>&lt;p&gt;Accelerometers have exploded in popularity since the introduction of the Nintendo Wii&amp;rsquo;s motion controls. They&amp;rsquo;re also common in cars and smartphones. Until recently, Perl has not been in places where interfacing directly with accelerometers made sense. With the Raspberry Pi and other SoC (System on a Chip) devices, it&amp;rsquo;s now time to fix this oversight.&lt;/p&gt;

&lt;p&gt;There are many accelerometers on the market, which are broadly divided into four interface types: analog, SPI, I2C, and serial. Analog is very simple to read with any device that has an Analog-to-digital converter, but is also subject to electrical noise. SPI and I2C are the most common types.&lt;/p&gt;

&lt;p&gt;An accelerometer can be combined with a gyroscope to produce more accurate readings than either one alone. This is what the Wii Motion Plus did for Nintendo. There are algorithms to combine their data, which can be tricky to write by hand. Fortunately, there are devices called an &amp;ldquo;Inertial Measurement Unit&amp;rdquo; (IMU) which combine the data for you and present an interface similar to a straight accelerometer. Unfortunately, these tend to be quite a bit more expensive.&lt;/p&gt;

&lt;p&gt;As you may recall from High School Physics, the Earth is pulling us all down at an acceleration of about 9.81 m/s&lt;sup&gt;2&lt;/sup&gt;. An accelerometer sitting on a flat table will measure this acceleration straight down towards the Earth&amp;rsquo;s center (more accurately, its center of gravity). Keep this in mind when taking readings.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s common for accelerometers to have several configurable ranges of measurement. If you set the device to read +/- 2g (that is, 2 * 9.81 m/s&lt;sup&gt;2&lt;/sup&gt;), and it gives data back in a 16-bit integer, then it will give readings over that entire 16-bit range. If you set it for +/- 10g, then it will still give readings over the entire 16-bit range. This means that higher settings will lose precision.&lt;/p&gt;

&lt;p&gt;Be sure, then, to set the measurement range to just a little more than what you expect. A sportscar on a track would have a hard time doing 2g&amp;rsquo;s in any direction. Most rollercoasters max at around 4g&amp;rsquo;s, maybe 6. Fighter jets can exceed 10g&amp;rsquo;s, which is about the limit of human ability for any sustainable period. Also note that instantaneous acceleration can be extremely high for any of these cases; a sportscar hitting a brick wall will easily exceed 10g&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Every chip defines its own interface protocol. This means a new interface driver needs to be written for each chip, and unfortunately, there aren&amp;rsquo;t a lot of CPAN modules out there for individual devices. One that does exist is &lt;a href=&#34;https://metacpan.org/pod/Device::LSM303DLHC&#34;&gt;Device::LSM303DLHC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The LSM303DLHC chip in question also contains a magnetometer, and is available on a breakout board from Adafruit Industries.&lt;/p&gt;

&lt;p&gt;Device::LSM303DLHC uses the Linux scheme of accessing I2C devices under &lt;code&gt;/dev/i2c-*&lt;/code&gt;. On the Raspberry Pi, the I2C pins on the GPIO header are available at &lt;code&gt;/dev/i2c-1&lt;/code&gt;. Device::LSM303DLHC divides the two functions of this chip into two objects. You start by initializing the main object with the I2C path, fetching the accelerometer object, and enabling it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Device::LSM303DLHC&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
    I2CBusDevicePath &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/i2c-1&amp;#39;&lt;/span&gt;,
});
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $accel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dev&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Accelerometer;
$accel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enable;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$accel&lt;/code&gt; object gives us convenience methods for returning the acceleration vector in different units. With &lt;code&gt;getAccelerationVectorInG()&lt;/code&gt;, we get the g rating, while &lt;code&gt;getAccelerationVecotrInMSS()&lt;/code&gt; gives us m/s&lt;sup&gt;2&lt;/sup&gt;, among a few others. I like to use the g rating:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $acc_angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $accel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getAccelerationVectorInG;
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accel: $$acc_angle{x}, $$acc_angle{y}, $$acc_angle{z}&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will repeatedly dump the acceleration vector to STDOUT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Accel: -0.0234375, -0.0078125, -0.9453125
Accel: -0.0234375, -0.0078125, -0.9453125
Accel: -0.015625, -0.01171875, -0.9453125
Accel: -0.015625, -0.01171875, -0.9453125
Accel: -0.015625, -0.00390625, -0.9453125
Accel: -0.015625, -0.00390625, -0.9453125
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the flat side of an LSM303 chip on the table, you should see the Z output be approximately 1g, or maybe -1g if you turn it upside down. The other outputs should be about zero. Pick it up and turn it around, and you should see the Z output head towards zero, with the X and Y outputs adding up the 1g vector towards the center of the Earth (plus or minus some shakiness from your hand).&lt;/p&gt;

&lt;p&gt;Accelerometers are one of those things that once you start using them, you find a million fun things to do with them. So go forth and have fun!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPS and Perl</title>
      <link>http://localhost:1313/article/158/2015/3/10/GPS-and-Perl/</link>
      <pubDate>Tue, 10 Mar 2015 12:43:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/158/2015/3/10/GPS-and-Perl/</guid>
      <description>&lt;p&gt;Since the beginning of the human race, people have needed to know where they are. If you&amp;rsquo;re dragging a dead antelope back to the rest of the tribe, knowing where you are and where you&amp;rsquo;re going is very important. At some point, one of them must have said &amp;ldquo;I sure hope my ancestors put a bunch of satellites into orbit to make this easier&amp;rdquo;. That person probably should have focused on inventing the wheel, forging metal, and combining chocolate with peanut butter, but let&amp;rsquo;s face it: some of humanity&amp;rsquo;s best inventions came from people who tend to get ahead of themselves from time to time. Which means that today, we have just such a satellite system in orbit to help you get around.&lt;/p&gt;

&lt;p&gt;The Global Positioning System (GPS) was originally invented by the American Department of Defense to guide missiles onto targets. It was later opened to civilian use, and the nature of satellites means that you can pick up their signal from around the world. Not wanting to be tied to a system ultimately controlled by the US military, the European Union has been launching the Galileo system, and Russia has launched GLONASS. These systems are likewise available worldwide, and some receivers can pick up multiple types. Good thing, because sometimes GPS alone doesn&amp;rsquo;t give you the fix you need.&lt;/p&gt;

&lt;p&gt;GPS requires you to have a good signal from at least 4 satellites to pinpoint your location. GPS breakout boards often have a small antenna built into their PCB traces, but this won&amp;rsquo;t pick up much signal, especially indoors. The &lt;a href=&#34;https://www.adafruit.com/products/746&#34;&gt;Adafruit Ultimate GPS Breakout&lt;/a&gt; from Adafruit Industries has a trace antenna to get you started. It also has a u.FL plug on board, which can plug into most external antennas out there with a u.FL to SMA adapter.&lt;/p&gt;

&lt;p&gt;Most GPS modules attach using a simple serial connection. On older PCs, you could access them with the &lt;a href=&#34;https://en.wikipedia.org/wiki/RS-232&#34;&gt;RS232 port&lt;/a&gt;, but few modern computers come with them. A USB FTDI cable &lt;a href=&#34;http://www.ftdichip.com/Products/Cables/USBRS232.htm&#34;&gt;adapter&lt;/a&gt; can fix this.&lt;/p&gt;

&lt;p&gt;On the Raspberry Pi, there are a few pins on the GPIO header that can be used with serial devices. It&amp;rsquo;s accessible via &lt;code&gt;/dev/ttyAMA0&lt;/code&gt;. There&amp;rsquo;s a slight hiccup with this: the Pi uses this serial device for console output. This is handy if you wanted to run the Pi headless with no network, but it will get in the way of interfacing with our GPS device.&lt;/p&gt;

&lt;p&gt;To fix this, there are two files to edit. The first is &lt;code&gt;/etc/inittab&lt;/code&gt;, which contains an entry to attach &lt;code&gt;getty&lt;/code&gt; to the device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comment this out by putting a &lt;code&gt;#&lt;/code&gt; at the start of the line.&lt;/p&gt;

&lt;p&gt;The second file is &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;, which contains arguments that are passed to the Linux kernel at boot. This causes kernel boot messages to be passed to the device. It will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete any parameters that reference &lt;code&gt;ttyAMA0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that our Raspberry Pi is ready, connect up the GPS device. Note that you have to cross the receive and transmit lines. The GPS Tx line goes to the Pi&amp;rsquo;s Rx line, and vice versa.&lt;/p&gt;

&lt;p&gt;Once connected, you should be able to run &lt;code&gt;screen&lt;/code&gt; against the terminal (yes, you can use &lt;code&gt;screen&lt;/code&gt; against serial terminals):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen /dev/ttyAMA0 9600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should spit data at you that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GPGGA,235119.315,,,,,0,00,,,M,,M,,*72
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPGSV,1,1,03,10,,,21,16,,,30,07,,,26*7F
$GPRMC,235119.315,V,,,,,0.00,0.00,060315,,,N*46
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.091,,,,,0,00,,,M,,M,,*77
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.091,V,,,,,0.00,0.00,060315,,,N*43
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.310,,,,,0,00,,,M,,M,,*7D
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.310,V,,,,,0.00,0.00,060315,,,N*49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data here is part of a standard under the &lt;a href=&#34;http://www.nmea.org/&#34;&gt;National Marine Electronics Association&lt;/a&gt; (NMEA). Most GPS receivers give data in this format. Notice all the commas? That indicates that the receiver doesn&amp;rsquo;t have a good fix yet, probably because I took them indoors. The receiver will always try to send data, even if it&amp;rsquo;s crummy data.&lt;/p&gt;

&lt;p&gt;This being Perl, there is already a CPAN module that knows how to parse that data: &lt;a href=&#34;https://metacpan.org/pod/GPS::NMEA&#34;&gt;GPS::NMEA&lt;/a&gt;. Here it is in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; GPS::NMEA;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GPS::NMEA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
    Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/ttyAMA0&amp;#39;&lt;/span&gt;,
    Baud &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9600&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($ns,$lat,$ew,$lon) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gps&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_position;
    &lt;span style=&#34;color:#75715e&#34;&gt;# decimal portion is arcminutes, so convert to degrees&lt;/span&gt;
    $lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int($lat) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($lat &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int($lat)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.66666667&lt;/span&gt;;
    $lon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int($lon) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($lon &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int($lon)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.66666667&lt;/span&gt;;

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;($ns,$lat,$ew,$lon)&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will continuously print out the location data coming from the GPS receiver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(N,43.052243,W,89.217520)
(N,43.052240,W,89.217519)
(N,43.052237,W,89.217518)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t know how people got around before GPS. Rather poorly, in all likelihood. I&amp;rsquo;m glad that Perl can help do it today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Arcminutes to degrees conversion added. Thanks to Jonathan Coop for pointing this out. 2015-04-04&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Perl Review of the ODROID-C1</title>
      <link>http://localhost:1313/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</link>
      <pubDate>Wed, 11 Feb 2015 13:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</guid>
      <description>&lt;p&gt;The success of the Raspberry Pi has opened up a whole new market of System on a Chip devices, where a single chip integrates most of the basic functions of a computer. Many of these systems run some kind of Linux distribution. Naturally, Perl comes along for the ride.&lt;/p&gt;

&lt;p&gt;The last year saw the emergence of several competitors to the Raspberry Pi, though few have managed to hit the same formula - just enough RAM, just enough CPU, Ethernet, USB, and cheap. Some have been faster or have more RAM, but miss that $35 price point of the Model B+. One that has done it is the &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php&#34;&gt;ODROID-C1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a Cortex-A5 processor running at 1.5GHz, and 1GB of RAM, it&amp;rsquo;s ahead of the Raspberry Pi version 1, and may still keep ahead of the recently released Pi version 2. In addition to booting off a MicroSD card, it can instead take an eMMC module, which promises to be much faster.&lt;/p&gt;

&lt;p&gt;SD card quality can vary, even when buying Class 6 or Class 10 cards, which can affect your program&amp;rsquo;s performance if it does a lot of I/O. I bought an 8GB SD card from the ODROID store preloaded with Xubuntu. From a subjective standpoint, I found it quite peppy compared to the random SD cards I usually use with my Raspberry Pi&amp;rsquo;s. If you need something extra, the eMMC are about twice the cost for the same size, but may be a worthwhile option.&lt;/p&gt;

&lt;p&gt;Since installing CPAN modules (especially ones that don&amp;rsquo;t have official OS packages) involves a lot of downloading, unpacking, reading, and copying, the process can be harsh on cheap SD cards. Even worse (in my experience) is the PCDuino v3&amp;rsquo;s built-in flash, which is glacially slow. Too bad, because it otherwise could have been an interesting alternative to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent entire evenings waiting for layers of CPAN dependencies to install on a Raspberry Pi&amp;rsquo;s SD card. Using &lt;a href=&#34;https://vonbienenstock.de/hiveberry/&#34;&gt;Hiveberry&amp;rsquo;s images&lt;/a&gt; can certainly help here. Of course, most people will be starting from the official OS images, and may hesitate to use a third-party; understandably so.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick-and-dirty benchmark of installing &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; from a fresh deployment on an SD card bought directly from the ODROID store:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ time sudo cpanm Device::WebIO
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
real    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;m0&lt;span style=&#34;color:#ae81ff&#34;&gt;.980&lt;/span&gt;s
user    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;m46&lt;span style=&#34;color:#ae81ff&#34;&gt;.290&lt;/span&gt;s
sys     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m18&lt;span style=&#34;color:#ae81ff&#34;&gt;.780&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer&lt;/a&gt; immediately after that (which has quite the dependency list):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ time sudo cpanm Dancer
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
real    &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;m40&lt;span style=&#34;color:#ae81ff&#34;&gt;.347&lt;/span&gt;s
user    &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;m53&lt;span style=&#34;color:#ae81ff&#34;&gt;.190&lt;/span&gt;s
sys     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m32&lt;span style=&#34;color:#ae81ff&#34;&gt;.360&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to what I&amp;rsquo;ve seen on random SD cards, this is nice and quick!&lt;/p&gt;

&lt;p&gt;Power comes from a 5V/2A adapter with a 2.5mm plug, which deviates from the micro USB plugs that have become common with SoC devices. I consider this a good thing; people would often use old cellphone chargers with inadequate amp ratings and tons of noise in the signal. It might boot the board up fine, but things would go wrong at random, and they&amp;rsquo;d get frustrated and give up. In retrospect, micro USB on these boards might have been a bad idea. Encouraging a specific, vetted power source with a less ubiquitous kind of plug is something I hope other boards will copy, provided that it doesn&amp;rsquo;t lead to gouging on proprietary plugs.&lt;/p&gt;

&lt;p&gt;You will also want to be sure to have an adapter for the HDMI Micro Type-D port. This is even smaller than the HDMI Mini found on some similar boards, such as the BeagleBone Black.&lt;/p&gt;

&lt;p&gt;Booting the board up, using a random monitor laying around the hackerspace, it showed only a blank screen, flickering with the occasional noisy image. The reason is that the boot.ini file on the first partition of the SD card has a hardcoded resolution for the HDMI output. This partition is a simple FAT32 format, so you can mount it on just about any computer and edit the file to choose the right resolution.&lt;/p&gt;

&lt;p&gt;The preinstalled perl is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v

This is perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, version &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, subversion &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.18.2&lt;/span&gt;) built &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnueabihf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;thread&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;int
(with &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; registered patches, see perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;V &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more detail)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is more up to date than the 5.14 that comes on Raspbian images. Note the enabling of threads and 64-bit integers on this build, which is also the case on Raspbian. No doubt this is because perls built for a default system installation need to be compatible with every Perl script in existence (or as much as possible, anyway). Most Linux-based Perl applications don&amp;rsquo;t use threads, and can usually get away with native 32-bit integers. Threads, in particular, give a noticeable slowdown to every execution, even in apps that don&amp;rsquo;t use them. If you need to get a little extra speed out of your app, go for a custom Perl compile without these features.&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;m liking this little board. Once past the screen resolution issues, setup is a breeze. It&amp;rsquo;s nice and fast, with a reasonably up to date Perl. On the downside, the community is smaller, and so you&amp;rsquo;ll often be on your own to figure things out. Recommended for any trailblazers in the Perl community.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Hackerspace Webcam</title>
      <link>http://localhost:1313/article/140/2014/12/15/A-Hackerspace-Webcam/</link>
      <pubDate>Mon, 15 Dec 2014 13:58:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/140/2014/12/15/A-Hackerspace-Webcam/</guid>
      <description>&lt;p&gt;Nearly every hackerspace has some kind of live camera on their website, and every one of them solves it in their own way. If you want to visit the shop, it&amp;rsquo;s nice to know if someone else is hanging around. At &lt;a href=&#34;http://thebodgery.org&#34;&gt;The Bodgery&lt;/a&gt;, it was decided to base one on a Raspberry Pi that would upload a picture every 30 seconds whenever an open switch is set. When a member opens the space, the switch activates one of the Pi&amp;rsquo;s &amp;ldquo;General Purpose Input/Output&amp;rdquo; (GPIO) pins, which causes the Pi to start taking pictures. When shut off, a default picture is thrown up, declaring us closed.&lt;/p&gt;

&lt;p&gt;The first task was to make a box. The Bodgery has a 50W laser cutter, so I started with a design created with &lt;a href=&#34;http://www.makercase.com/&#34;&gt;MakerCase&lt;/a&gt;. After measuring the Pi and putting in the dimensions, MakerCase created a box with &amp;ldquo;finger joints&amp;rdquo; (tabs that fit the edges together). Using &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt; and some more measuring, a hole was made in the front panel for the Pi&amp;rsquo;s camera. Unfortunately, I didn&amp;rsquo;t take into account the length of the Pi&amp;rsquo;s SD card on one side and the WiFi adaptor on the other, so my original design was a little short. No matter-the backend of the case could be left open for this project.&lt;/p&gt;

&lt;p&gt;On the web server side, an account was created that had write access to a specific file. An ssh key was created and added to this account&amp;rsquo;s &lt;code&gt;~/.ssh/authroized_keys&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO::RaspberryPi&#34;&gt;Device::WebIO::RaspberryPi&lt;/a&gt;, you can query the status of GPIO pins, and also get a filehandle for reading the picture from the camera. The camera is implemented using &amp;ldquo;&lt;a href=&#34;https://github.com/thaytan/gst-rpicamsrc&#34;&gt;rpicamsrc&lt;/a&gt;&amp;rdquo;, a plugin for &lt;a href=&#34;http://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; that accesses the Raspberry Pi&amp;rsquo;s camera module directly - which is great, because my previous attempts at getting the data using GStreamer&amp;rsquo;s &lt;code&gt;v4lsrc&lt;/code&gt; or other methods usually ended in frustration.&lt;/p&gt;

&lt;p&gt;The basic boilerplate sets up pin 17 as input, and then sets the image width, height, and JPEG quality (between 0 and 100, higher is better quality, but larger file size).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rpi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Device::WebIO::RaspberryPi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;set_as_input( &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_width( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_height( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_quality( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to have something that polls the input pin on a regular basis (once a second will do). There are many ways to do this, and I choose an &lt;a href=&#34;https://metacpan.org/pod/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt; timer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $condvar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AnyEvent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;condvar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input_timer; $input_timer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AnyEvent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;timer(
    after    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    interval &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    cb       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        $INPUT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;input_pin( &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; );
        $input_timer;
    },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets an global var &lt;code&gt;$INPUT&lt;/code&gt;. That gets picked up by another timer, which takes the picture and uploads when &lt;code&gt;$INPUT&lt;/code&gt; is set. In a more sophisticated program, I&amp;rsquo;d probably have this activate another timer directly for sending a picture. For such a simple program though, I&amp;rsquo;m not too worried about it.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;img_stream()&lt;/code&gt; will return a filehandle for reading the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_stream( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method takes a channel number for the camera (if you have one camera, you have one channel) and a desired MIME type. The &lt;code&gt;img_allowed_content_types()&lt;/code&gt; method will return a list of supported MIME types. On Device::WebIO::RaspberryPi, only &lt;code&gt;image/jpeg&lt;/code&gt; is currently supported.&lt;/p&gt;

&lt;p&gt;Once you have the filehandle, use &lt;code&gt;scp&lt;/code&gt; to upload it. A simple but crude method is to create a temporary file (with &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;) and then call &lt;code&gt;scp&lt;/code&gt; as an external program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Temp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tempdir&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tmp_fh, $tmp_filename) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tempfile();

&lt;span style=&#34;color:#75715e&#34;&gt;# Write to a temporary file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( read( $fh, $buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; ) ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $tmp_fh $buffer;
}
close $tmp_fh;
close $fh;

&lt;span style=&#34;color:#75715e&#34;&gt;# Upload to server using scp&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @scp_command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scp&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;, PRIVATE_KEY_FILE,
    $tmp_filename,
    SERVER_USERNAME &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; SERVER_HOST &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; SERVER_UPLOAD_PATH,
);
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Executing: @scp_command&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; DEBUG;
(system( @scp_command ) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not exec &amp;#39;@scp_command&amp;#39;: $!\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Delete temp file&lt;/span&gt;
unlink $tmp_filename;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SCP&#34;&gt;Net::SCP&lt;/a&gt; is another way of going about this, although that just wraps the external command like is done above.&lt;/p&gt;

&lt;p&gt;As an exercise to the reader, create a &lt;code&gt;tmpfs&lt;/code&gt; (RAM disk) on your Raspberry Pi and have the temp file written there. 10MB should be enough. &lt;code&gt;File::Temp::tempfile()&lt;/code&gt; can be passed a &lt;code&gt;DIR&lt;/code&gt; parameter to write a file there. This avoids writing to the SD card, which is both slow and tends to wear it out prematurely.&lt;/p&gt;

&lt;p&gt;The complete code is on &lt;a href=&#34;https://github.com/frezik/bodgery_cam&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

