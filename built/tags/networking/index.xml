<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/networking/</link>
    <description>Recent content in Networking on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jan 2018 08:00:24 +0000</lastBuildDate>
    <atom:link href="/tags/networking/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Free Wildcard TLS with Net::ACME2 and Let’s Encrypt</title>
      <link>http://localhost:1313/article/free-wildcard-tls-with-net-acme2-and-let-s-encrypt/</link>
      <pubDate>Tue, 23 Jan 2018 08:00:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/free-wildcard-tls-with-net-acme2-and-let-s-encrypt/</guid>
      <description>&lt;p&gt;Much of the credit for the recent improvement in TLS deployment across
the Internet must go to &lt;a href=&#34;http://letsencrypt.org&#34;&gt;Let’s Encrypt&lt;/a&gt; (LE),
who provide free TLS certificates via an open-access RESTful API. That
API has a large number of clients in many languages, including Perl.
(The list includes the &lt;a href=&#34;http://cpanel.com&#34;&gt;cPanel&lt;/a&gt;-derived
&lt;a href=&#34;https://metacpan.org/pod/Net::ACME&#34;&gt;Net::ACME&lt;/a&gt;
as well as &lt;a href=&#34;https://metacpan.org/pod/Crypt::LE&#34;&gt;Crypt::LE&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Protocol::ACME&#34;&gt;Protocol::ACME&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/WWW::LetsEncrypt&#34;&gt;WWW::LetsEncrypt&lt;/a&gt;, and
&lt;a href=&#34;https://metacpan.org/pod/Mojo::ACME&#34;&gt;Mojo::ACME&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;LE has worked with the &lt;a href=&#34;http://ietf.org&#34;&gt;IETF&lt;/a&gt; to standardize their
“ACME” (Automated Certificate Management Environment) protocol as an
Internet standard. The forthcoming standard breaks compatibility with the
previous version of the protocol, which necessitates updates to the client
logic.&lt;/p&gt;

&lt;p&gt;As an incentive for clients to adopt the new protocol, though, LE will
offer free wildcard TLS via their new API.&lt;/p&gt;

&lt;p&gt;I thought I would take the opportunity to rework Net::ACME for support of
the new protocol and quickly decided that a new distribution would suit
the need best. Besides the significant protocol changes that have taken
place, I wanted to make some “deeper” changes like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I wanted to incorporate &lt;a href=&#34;https://metacpan.org/pod/X::Tiny&#34;&gt;X::Tiny&lt;/a&gt;
to reduce some logic duplication and gain the benefits of that library.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The new protocol suggests some changes to the class structure that
would have been unwieldy to incorporate in the prior version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so, &lt;a href=&#34;https://metacpan.org/pod/Net::ACME2&#34;&gt;Net::ACME2&lt;/a&gt; is now available.
This is a generic client library for any standard ACME implementation,
though the only known public ACME implementation right now is
Let’s Encrypt’s. Their API only provides testing certificates for now,
but once there’s a production endpoint I will update Net::ACME2 to use it.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Net::ACME2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;… supports both RSA and ECDSA&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… runs anywhere that Perl runs—no XS required except for core
modules. (cf. &lt;a href=&#34;https://metacpan.org/pod/Crypt::Perl&#34;&gt;Crypt::Perl&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… reports detailed errors via typed exceptions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… has minimal dependencies (no Moose, &amp;amp;c.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve created some example &lt;a href=&#34;https://github.com/FGasper/p5-Net-ACME2/tree/master/examples&#34;&gt;scripts&lt;/a&gt; to get you started. After you&amp;rsquo;ve installed the module, clone the &lt;a href=&#34;https://github.com/FGasper/p5-Net-ACME2&#34;&gt;repo&lt;/a&gt;, change into the root project directory and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./examples/http-01.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./examples/dns-01.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These walk you through the following steps (with Let’s Encrypt):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Read the terms of service and, if you accept them, proceed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an RSA or ECC private key. Net::ACME2 will extract the public
key from it and send it to the ACME server as your account identifier.
(The example scripts create a new key for each invocation, but for a
production deployment you should reuse a key.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a certificate order by telling Net::ACME2 which domains the
certificate will include. The ACME server will respond with options for
“challenges”—i.e., how to prove that you control those domains. Currently
there are two available methods: HTTP and DNS. (NOTE: Wildcard domains
require the DNS method.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up the verification. For HTTP that means making a specific
URL on the domain respond with specific content; for DNS it means creating
a TXT record with a specific name and content. (The example scripts use
the same challenge method for all domains, but your application can be
more flexible.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Indicate to the ACME server which challenge you’re accepting for each
domain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finalize the certificate order. This will tell you if any challenges
failed or are still pending.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If all domains’ challenges succeeded, you’ll get a URL whose content
will be the newly-issued certificate.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Net::ACME2 is, like the ACME standard itself, still subject to
change, but it’ll get the job done for now. Give it a try!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Perl modules with C library dependencies</title>
      <link>http://localhost:1313/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</link>
      <pubDate>Mon, 15 Apr 2013 18:37:26 +0000</pubDate>
      
      <guid>http://localhost:1313/article/19/2013/4/15/Installing-Perl-modules-with-C-library-dependencies/</guid>
      <description>

&lt;p&gt;Some Perl modules have specific C library dependencies that need to be met or else they won&amp;rsquo;t install. These issues can be tricky to solve as CPAN is not able to automatically install or report on non-Perl dependencies and Google isn&amp;rsquo;t good at returning useful results for these types of issues (&lt;a href=&#34;https://metacpan.org/pod/Net::SSLeay&#34;&gt;Net::SSLeay&lt;/a&gt; is a common example of a tricky module to install). Usually you will only find out about missing dependencies when trying to install the module, as the install will fail. What you need to do at this point is &lt;strong&gt;identify&lt;/strong&gt; and &lt;strong&gt;install&lt;/strong&gt; the missing C libraries.&lt;/p&gt;

&lt;h3 id=&#34;identifying-c-library-dependencies&#34;&gt;Identifying C Library dependencies&lt;/h3&gt;

&lt;p&gt;Here are some places to check for dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install error message&lt;/strong&gt; - scan the command line output from the failed install: often Perl developers will write specific error messages that indicate the missing C library.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module documentation&lt;/strong&gt; - check the main POD page for the module on &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; it may indicate which C libraries are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribution files&lt;/strong&gt; - check the README and INSTALL files that come with the distribution for the module you are trying to install. If available they will be in the root directory of the tarball. You can browse these files online at &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; by searching for the module, then clicking the &amp;lsquo;browse&amp;rsquo; link on the module&amp;rsquo;s main page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search your package manager&lt;/strong&gt; - look at the technologies and keywords associated with the module. For example &lt;a href=&#34;https://metacpan.org/pod/Net::SSLeay&#34;&gt;Net::SSLeay&lt;/a&gt; probably has something to do with SSL, so search for Perl-related SSL packages (example below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installing-c-library-dependencies&#34;&gt;Installing C library dependencies&lt;/h3&gt;

&lt;p&gt;Once you have identified the missing C libraries, you need to install them. If you are on Linux, this can be done using a package manager and searching for and installing the package containing the C library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# yum package manager&lt;/span&gt;
$ sudo yum search ssl
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
sudo yum install openssl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64 perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Net&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;SSLeay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64 perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Crypt&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;SSLeay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are not on Linux, try downloading the library directly from the C library&amp;rsquo;s homepage - these are easy to find via Google and usually have specific Windows / OSX distributions.&lt;/p&gt;

&lt;p&gt;Once you have installed the requisite libraries, try installing the Perl module again with CPAN.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

