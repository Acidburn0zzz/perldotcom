<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 4 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-4/</link>
    <description>Recent content in Perl 4 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 1996 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-4/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Seven Deadly Sins of Perl</title>
      <link>http://localhost:1313/doc/FMTEYEWTK/versus/perl.html/</link>
      <pubDate>Mon, 01 Jan 1996 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/doc/FMTEYEWTK/versus/perl.html/</guid>
      <description>

&lt;p&gt;Back in the Perl4 days I made a list of the greatest &amp;lsquo;gotchas&amp;rsquo; in Perl. Almost all of those have been subsequently fixed in current incarnations of Perl, some to my deep and abiding amazement. In that same spirit, here&amp;rsquo;s of my current list of what&amp;rsquo;s&amp;ndash;um&amp;hellip; let&amp;rsquo;s be charitable and just say &amp;lsquo;suboptimal&amp;rsquo; in Perl from a reasonably serious programming languages design point of view. I believe these are real gotchas, and not always obvious. A few of these are fixable through programming rigor; a few of them are rumored to be fixed in Larry&amp;rsquo;s own copy of 5.002 :-); but a few are simply inherent design decisions that quite possibly cannot be solved without breaking what the language is, much as csh&amp;rsquo;s design flaws cannot be solved.&lt;/p&gt;

&lt;p&gt;Of course, for many many kinds of apps, there&amp;rsquo;s also so very much more that&amp;rsquo;s &lt;em&gt;right&lt;/em&gt; with Perl to make it not only a reasonable but often even the best choice from what&amp;rsquo;s in the field today. I&amp;rsquo;m just trying to provide perspective here; think of it as eventual updates for the &lt;a href=&#34;https://perldoc.perl.org/perltrap.html&#34;&gt;perltrap&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-implicit-behaviours-and-hidden-context-dependencies&#34;&gt;1. Implicit Behaviours and Hidden Context Dependencies&lt;/h3&gt;

&lt;p&gt;Functions overload only on return type rather than parameter type, which is always implicit and while inferrible by the language. This is often a shocking and terrible surprise to the programmer who doesn&amp;rsquo;t have their fingers in Perl code all day every day. Type conversions (of non-reference types) are silent and deadly, especially between aggregates and scalars. They are hard for many to predict. The presence of subobvious default behaviours of various functions, and the inability to turn this off is too surprising, and more than somewhat dangerous.&lt;/p&gt;

&lt;h3 id=&#34;2-to-paren-to-paren&#34;&gt;2. To Paren || !To Paren?&lt;/h3&gt;

&lt;p&gt;That adding or not adding parens should have the strong potential for semantic changes instead of merely grouping is hard to fathom. Sometimes you&amp;rsquo;re damned if you do, damned if you don&amp;rsquo;t. By allowing but not requiring parens in almost all situations, people are confused by whether they should put them in, and deeply disturbed when doing or not can radically alter their program&amp;rsquo;s behaviour. This is especially annoying in trying to figure out how to get regexps to return what they match.&lt;/p&gt;

&lt;h3 id=&#34;3-global-variables&#34;&gt;3. Global Variables&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s no mandatory enforcement of declaration or detection of fully global variables, this can cause very difficult to detect program errors. Implicit use &lt;code&gt;$\_&lt;/code&gt; is one of the classics, causing functions way up the stack to mysterious fail. There&amp;rsquo;s no &lt;code&gt;use strict globals&lt;/code&gt; or some such to force declaration even of exportable module-level globals. There&amp;rsquo;s no way to have lexically-scoped pre-defined file-handles or built-in variables (like &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;$?&lt;/code&gt;, etc), and the dynamically-scoped versions are confusing to programmers of traditional languages.&lt;/p&gt;

&lt;h3 id=&#34;4-references-vs-non-references&#34;&gt;4. References vs Non-References&lt;/h3&gt;

&lt;p&gt;Although introducing references in v5 was a critical step, by keeping backwards compatibility with older v4 code, the legacy code and basic system still uses too many types and ensuing confusions. That means people are still confused about &lt;code&gt;$&lt;/code&gt; vs. &lt;code&gt;@&lt;/code&gt; vs. &lt;code&gt;%&lt;/code&gt;. In particular, they expect things that work on arrays or hashes to transparently work on references to the same, or vice versa. This shows up when folks try to work out complex data structures.&lt;/p&gt;

&lt;h3 id=&#34;5-no-prototypes&#34;&gt;5. No Prototypes&lt;/h3&gt;

&lt;p&gt;Not having prototypes (function signatures) makes it impossible to create one&amp;rsquo;s own functions that exactly duplicate builtins, as well as making static analysis of errors difficult. Even if you introduce prototypes for normal functions, how does this extend to user-defined object classes and methods? How do you prototype return values?&lt;/p&gt;

&lt;h3 id=&#34;6-no-compiler-support-for-i-o-or-regexp-objects&#34;&gt;6. No Compiler Support for I/O or Regexp Objects&lt;/h3&gt;

&lt;p&gt;The I/O system&amp;rsquo;s use of barewords is unclean and unpleasant, as there isn&amp;rsquo;t really good compiler-aware support for i/o handles. The &lt;code&gt;open()&lt;/code&gt; interface and friends must be entirely redone, preferably into an o-o paradigm, but without breaking old code. The regexp system is likewise archaic: since there&amp;rsquo;s no real compiler support for compiled regexps, you either get very poor performance or else opaque hacks to work around it.&lt;/p&gt;

&lt;h3 id=&#34;7-haphazard-exception-model&#34;&gt;7. Haphazard Exception Model&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s no standard model or guidelines for exception handling in libraries, modules, or classes, which means you don&amp;rsquo;t know what to trap and what not to trap. Does a library throw an exception or does it just return false? Even if it does, there is no standard nomenclature for exceptions, so it&amp;rsquo;s hard to know how, for example, to catch all numeric exceptions, all i/o exceptions, etc. People mistakenly use &lt;code&gt;eval $str&lt;/code&gt; for both code-generation and exception handling, thus not only delaying errors until run-time but also standing a good chance of losing them.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

