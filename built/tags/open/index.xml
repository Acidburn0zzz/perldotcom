<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/open/</link>
    <description>Recent content in Open on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Oct 2016 08:37:00 +0000</lastBuildDate>
    <atom:link href="/tags/open/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to empty a file with Perl</title>
      <link>http://localhost:1313/article/how-to-empty-a-file-with-perl/</link>
      <pubDate>Wed, 26 Oct 2016 08:37:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-empty-a-file-with-perl/</guid>
      <description>

&lt;p&gt;Have you ever had the experience of doing something a certain way for a long time, and then you discover a better way? This happened to me last week, when I was working on some code that needed to empty a file. Emptying a file is a common operation - maybe you have a session log file to write to, or want to limit disk space use, or whatever. Here&amp;rsquo;s how I usually do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# empty the file&lt;/span&gt;
{ open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $session_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path/to/sessionfile&amp;#39;&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This opens a write filehandle on the file, effectively setting its length to zero. I put the call to &lt;a href=&#34;https://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt; between curly braces in order to minimize the scope of the filehandle, &lt;code&gt;$session_file&lt;/code&gt;. After that statement, the block closes, and &lt;code&gt;$session_file&lt;/code&gt; variable goes out of scope, automatically closing the filehandle. As the block looks a little strange, I include an explanatory comment.&lt;/p&gt;

&lt;p&gt;The other day though, I came across the &lt;a href=&#34;https://perldoc.perl.org/functions/truncate.html&#34;&gt;truncate&lt;/a&gt; function. This does exactly what you&amp;rsquo;d think it does: truncates files. It takes two arguments: the file path (or filehandle), and the length. So if you need to truncate a file, you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;truncate &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path/to/sessionfile&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn&amp;rsquo;t use a lexical variable, so no scoping is required. It&amp;rsquo;s unambiguous so no comment is needed either. I like it, it&amp;rsquo;s a better way.&lt;/p&gt;

&lt;p&gt;N.B. on Windows &lt;code&gt;truncate&lt;/code&gt; requires the file to not be open elsewhere on the system, and if called with a filehandle it must be in append mode.&lt;/p&gt;

&lt;h3 id=&#34;looking-up-perl-functions&#34;&gt;Looking up Perl functions&lt;/h3&gt;

&lt;p&gt;Do you know Perl has around 220 built in functions? You can read about them all in &lt;a href=&#34;https://perldoc.perl.org/perlfunc.html&#34;&gt;perlfunc&lt;/a&gt;, or at the terminal with &lt;code&gt;perldoc perlfunc&lt;/code&gt;. Read more about the &lt;a href=&#34;https://perldoc.perl.org/functions/truncate.html&#34;&gt;truncate&lt;/a&gt; function at the terminal with &lt;code&gt;perldoc -f truncate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vim users&lt;/strong&gt; if you&amp;rsquo;re editing Perl code and want to lookup a function, place the cursor on the function word and type &lt;code&gt;Shift-k&lt;/code&gt; to lookup the function in perldoc (works for Python, Ruby, C etc too).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parse Excel with ease using Perl</title>
      <link>http://localhost:1313/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</link>
      <pubDate>Tue, 05 Aug 2014 13:41:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</guid>
      <description>

&lt;p&gt;In the business world, it seems like Excel spreadsheets are everywhere. Recently I had to parse several hundred spreadsheets under a tight deadline for a client. To make matters worse, the spreadsheets were in a mix of Excel 2003 (xls) and 2007 (xlsx) formats. Fortunately I know Perl, and using the Spreadsheet::Read module, it was easy. This article will show you how to use Spreadsheet::Read to parse Excel spreadsheets.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::Read&#34;&gt;Spreadsheet::Read&lt;/a&gt; and a couple of interface modules. &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::ParseExcel&#34;&gt;Spreadsheet::ParseExcel&lt;/a&gt; is an interface for Excel 2003 spreadsheets and &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::XLSX&#34;&gt;Spreadsheet::XLSX&lt;/a&gt; is for reading the modern Excel format. You can install all three modules from the terminal using cpan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Spreadsheet::ParseExcel Spreadsheet::XLSX Spreadsheet::Read&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-spreadsheet-read&#34;&gt;Using Spreadsheet::Read&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s parse the spreadsheet shown in the cover image, which contains an income statement. Spreadsheet::Read provides a simple, unified interface for reading spreadsheets. It exports the &lt;code&gt;ReadData&lt;/code&gt; function which requires a filepath to the spreadsheet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Spreadsheet::Read;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $workbook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReadData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;income_statement.xlsx&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;$workbook&lt;/code&gt; contains the data structure representing the spreadsheet. We can inspect this structure by printing it with &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; [
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] {
        error     undef,
        parser    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spreadsheet::XLSX&amp;#34;&lt;/span&gt;,
        sheet     {
            Sheet1   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        },
        sheets    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        type      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xlsx&amp;#34;&lt;/span&gt;,
        version   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.13&lt;/span&gt;
    },
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
        attr     &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
        B1       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Income Statement 2014&amp;#34;&lt;/span&gt;,
        B2       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Revenue&amp;#34;&lt;/span&gt;,
        B3       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cost of goods sold&amp;#34;&lt;/span&gt;,
        B4       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gross profit&amp;#34;&lt;/span&gt;,
        B5       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Financing costs&amp;#34;&lt;/span&gt;,
        B6       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tax&amp;#34;&lt;/span&gt;,
        B7       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Net profit&amp;#34;&lt;/span&gt;,
        cell     [
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] [
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Income Statement 2014&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Revenue&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cost of goods sold&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gross profit&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Financing costs&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tax&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Net profit&amp;#34;&lt;/span&gt;
            ],
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;47500&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;7150&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;10087.5&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;30262.5&lt;/span&gt;
            ]
        ],
        C2       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 50,000.00 &amp;#34;&lt;/span&gt;,
        C3       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 2,500.00 &amp;#34;&lt;/span&gt;,
        C4       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 47,500.00 &amp;#34;&lt;/span&gt;,
        C5       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 7,150.00 &amp;#34;&lt;/span&gt;,
        C6       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 10,087.50 &amp;#34;&lt;/span&gt;,
        C7       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 30,262.50 &amp;#34;&lt;/span&gt;,
        label    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sheet1&amp;#34;&lt;/span&gt;,
        maxcol   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
        maxrow   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows that &lt;code&gt;$workbook&lt;/code&gt; is an arrayref, whose first element describes the file, and subsequent elements represent the individual worksheets. The &lt;code&gt;label&lt;/code&gt; key pair contains the worksheet name, access it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{label}; &lt;span style=&#34;color:#75715e&#34;&gt;#Sheet1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cells can be referenced using Excel&amp;rsquo;s grid notation (&amp;ldquo;A3&amp;rdquo;) or via standard Perl array access. The different between these is formatting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{C2}; &lt;span style=&#34;color:#75715e&#34;&gt;#$ 50,000.00&lt;/span&gt;

$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{cell}[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;#50000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if you need to perform additional processing on the data you&amp;rsquo;re extracting (such as saving to a database), you probably want to use the &lt;code&gt;{cell}&lt;/code&gt; notation, to obtain clean data. With Spreadsheet::Read array indexes begin at 1, so cell &amp;ldquo;C2&amp;rdquo; is [3][2].&lt;/p&gt;

&lt;p&gt;Perhaps you want to loop through two columns at once and print them? No problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$workbook-&amp;gt;[1]{cell}[2][$_]: $workbook-&amp;gt;[1]{cell}[3][$_]\n&amp;#34;&lt;/span&gt;; 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some data points which Spreadsheet::Read does not provide: you cannot access the underlying formula of a cell and the styling data is also not available.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Spreadsheet::Read isn&amp;rsquo;t just great for command line apps, it has many uses. Unlike the Microsoft .Net interop library, Perl&amp;rsquo;s Excel interfaces are not single threaded and do not require Excel to be installed to work. Instead Spreadsheet::Read directly parses the Excel file. That makes it possible to process large computing tasks in parallel. Another possible use case is for a spreadsheet upload interface on a web application; Spreadsheet::Read also supports the Libre / Open Office formats as well as CSV text files.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read an entire file into a string</title>
      <link>http://localhost:1313/article/21/2013/4/21/Read-an-entire-file-into-a-string/</link>
      <pubDate>Sun, 21 Apr 2013 20:54:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/21/2013/4/21/Read-an-entire-file-into-a-string/</guid>
      <description>

&lt;p&gt;There are several ways in Perl to read an entire file into a string, (a procedure also known as &amp;ldquo;slurping&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;If you have access to CPAN, you can use the &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Slurp;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text_document.txt&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;File::Slurp&amp;rsquo;s &lt;code&gt;read_file&lt;/code&gt; function to reads the entire contents of a file with the file name and returns it as a string. It&amp;rsquo;s simple and usually does what it&amp;rsquo;s expected to do. However use of &lt;code&gt;File::Slurp&lt;/code&gt; is discouraged as it has some encoding layer problems that may cause issues. &lt;a href=&#34;https://metacpan.org/pod/File::Slurper&#34;&gt;File::Slurper&lt;/a&gt; aims to be a safer alternative that, regrettably is still described as experimental:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Slurper;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text_document.txt&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;File::Slurper&amp;rsquo;s &lt;code&gt;read_text&lt;/code&gt; function accepts an optional encoding argument, and can automatically decode &lt;code&gt;crlf&lt;/code&gt; line endings if you request it (for Windows files).&lt;/p&gt;

&lt;h3 id=&#34;slurping-files-without-modules&#34;&gt;Slurping files without modules&lt;/h3&gt;

&lt;p&gt;Slurping files is not complicated though and requires just a few lines of Perl. First I open a filehandle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text_document.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t open file $!&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can read the file contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { local $/; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within the &lt;code&gt;do&lt;/code&gt; block it localizes Perl&amp;rsquo;s record separator variable &lt;code&gt;$/&lt;/code&gt; to &lt;code&gt;undef&lt;/code&gt;, so that the diamond &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator will read all the lines of the file at once (usually &lt;code&gt;$/&lt;/code&gt; is set to newline).&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve opened a filehandle to the file you want to slurp, instead of a &lt;code&gt;do&lt;/code&gt; block, you can also use &lt;code&gt;read&lt;/code&gt; to slurp a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;read $fh, &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file_content, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s $fh;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;read&lt;/code&gt; requires a filehandle, a target variable to read content into and a length argument. To get the length of the file, we use the &lt;code&gt;-s&lt;/code&gt; function on the filehandle, which returns the file size in bytes. For large files, this approach is faster than the &lt;code&gt;do&lt;/code&gt; block method.&lt;/p&gt;

&lt;h3 id=&#34;perlio-layers&#34;&gt;PerlIO Layers&lt;/h3&gt;

&lt;p&gt;When slurping a file, you may want to add a PerlIO layer &lt;a href=&#34;https://perldoc.perl.org/PerlIO.html&#34;&gt;instruction&lt;/a&gt; to the open argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:unix&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text_document.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Couldn&amp;#39;t open $filename: $!&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this code the first line looks the same except &lt;code&gt;:unix&lt;/code&gt; has been appended to the file open direction. You can read more about the PerlIO layers &lt;a href=&#34;https://perldoc.perl.org/PerlIO.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;yet-another-way&#34;&gt;Yet another way&lt;/h3&gt;

&lt;p&gt;In the comments section of a blog &lt;a href=&#34;http://blogs.perl.org/users/leon_timmermans/2013/05/why-you-dont-need-fileslurp.html&#34;&gt;post&lt;/a&gt;, Damien Krotkine showed that it&amp;rsquo;s also possible to slurp a file in &amp;ldquo;one line&amp;rdquo; of Perl, or at least without using &lt;code&gt;open&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{local(@ARGV,$/)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$filename;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cool, huh? This works by localizing &lt;code&gt;@ARGV&lt;/code&gt; and saving &lt;code&gt;$filename&lt;/code&gt; as the first element of &lt;code&gt;@ARGV&lt;/code&gt;. The empty diamond operator &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; automatically opens a filehandle to the first element of &lt;code&gt;@ARGV&lt;/code&gt;, which is the filename. If you need to set a PerlIO layer, the filehandle name is &lt;code&gt;ARGV&lt;/code&gt; so you can use binmode to set the layer (&lt;em&gt;before&lt;/em&gt; the file is read!):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;binmode ARGV, $layer;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; changed to give more examples, File::Slurp warning and include File::Slurper. 2015-06-26&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

