<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ponie on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/ponie/</link>
    <description>Recent content in Ponie on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jan 2006 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/ponie/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What Is Perl 6</title>
      <link>http://localhost:1313/pub/2006/01/12/what_is_perl_6.html/</link>
      <pubDate>Thu, 12 Jan 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/01/12/what_is_perl_6.html/</guid>
      <description>

&lt;p&gt;Perl 6 is the long-awaited redesign and reimplementation of the popular and venerable Perl programming language. It&amp;rsquo;s not out yet&amp;ndash;nor is there an official release date&amp;ndash;but the design and implementations make continual progress.&lt;/p&gt;

&lt;h3 id=&#34;why-perl-6&#34;&gt;Why Perl 6&lt;/h3&gt;

&lt;p&gt;Innumerable programmers, hackers, system administrators, hobbyists, and dabblers write Perl 5 quite successfully. The language doesn&amp;rsquo;t have the marketing budget of large consulting companies, hardware manufacturers, or tool vendors pushing it, yet people still use it to get their jobs done.&lt;/p&gt;

&lt;p&gt;Why argue with that success? Why redesign a language that&amp;rsquo;s working for so many people and in so many domains? Sure, Perl 5 has some warts, but it does a lot of things very well.&lt;/p&gt;

&lt;h4 id=&#34;what-s-right-with-perl-5&#34;&gt;What&amp;rsquo;s Right with Perl 5&lt;/h4&gt;

&lt;p&gt;As Adam Turoff explained once, &lt;a href=&#34;http://use.perl.org/~ziggy/journal/26131&#34;&gt;Perl has two subtle advantages: &lt;em&gt;manipulexity&lt;/em&gt; and &lt;em&gt;whipuptitude&lt;/em&gt;&lt;/a&gt;. It&amp;rsquo;s very important to be able to solve the problem at hand simply and easily without languages and tools and syntax getting in your way. That&amp;rsquo;s whipuptitude. Manipulexity is the ability to use simple tools and build a sufficiently complex solution to a complex problem.&lt;/p&gt;

&lt;p&gt;Not everyone who starts learning Perl for whipuptitude needs manipulexity right away, if ever, but having a tool that supports both is amazingly useful. That&amp;rsquo;s where Perl&amp;rsquo;s always aimed&amp;ndash;making the easy things easy and the hard things possible, even if you don&amp;rsquo;t traditionally think of yourself as a programmer.&lt;/p&gt;

&lt;p&gt;Many of Perl 5&amp;rsquo;s other benefits fall out from this philosophy. For example, though the popular conception is that Perl 5 is mostly a procedural language, there are plenty of functional programming features available&amp;ndash;iterators, higher-order functions, lexical closures, filters, and more. The (admittedly minimal) object system also has a surprising amount of flexibility. Several CPAN modules provide various types of encapsulation, access control, and dispatch. There are even refinements of the object system itself, exploring such techniques as prototype-based refinement, mixins, and traits.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to do it, but many of those ways are freely available and freely usable from the CPAN. The premier repository system of Perl libraries and components contains thousands of modules, from simple packagings of common idioms to huge interfaces to graphical packages, databases, and web servers. With few exceptions, the community of CPAN contributors have solved nearly any common problem you can think of (and many uncommon ones, too).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s difficult to say whether Perl excels as a glue language because of the CPAN or that CPAN has succeeded because Perl excels as a glue language, but being able to munge data between two other programs, processes, libraries, or machines is highly useful. Perl&amp;rsquo;s text processing powers have few peers. Sure, you &lt;em&gt;can&lt;/em&gt; build the single perfect command-line consisting of several small CLI utilities, but it&amp;rsquo;s rare to do it more cleanly or concisely than with Perl.&lt;/p&gt;

&lt;h4 id=&#34;what-s-wrong-with-perl-5&#34;&gt;What&amp;rsquo;s Wrong with Perl 5&lt;/h4&gt;

&lt;p&gt;Perl 5 isn&amp;rsquo;t perfect, though, and some of its flaws are more apparent the closer Perl 6 comes to completion.&lt;/p&gt;

&lt;p&gt;Perhaps the biggest imperfection of Perl 5 is its internals. Though much of the design is clever, there are also places of obsolescence and interdependence, as well as optimizations that no one remembers, but no one can delete without affecting too many other parts of the system. Refactoring an eleven-plus-year-old software project that runs on seventy-odd platforms and has to retain backwards compatibility with itself on many levels is daunting, and there are few people qualified to do it. It&amp;rsquo;s also exceedingly difficult to recruit new people for such a task.&lt;/p&gt;

&lt;p&gt;Backwards compatibility in general hampers Perl 5 in other ways. Even though stability of interface and behavior is good in many ways, baking in an almost-right idea makes it difficult to sell people on the absolutely right idea later, especially if it takes years to discover what the true solution really is. For example, the long-deprecated and long-denigrated pseudohash feature was, partly, a way to improve object orientation. However, the Perl 6 approach (using opaque objects) solves the same problem without introducing the complexity and performance problems that pseudohashes did.&lt;/p&gt;

&lt;p&gt;As another example, it&amp;rsquo;s much too late to remove formats from Perl 5 without breaking backwards compatibility from Perl 1. However, using formats requires the use of global variables (or scary trickery), with all of the associated maintainability and encapsulation problems.&lt;/p&gt;

&lt;p&gt;This points to one of the most subtle flaws of Perl 5: its single implementation is its specification. Certainly there is a growing test suite that explores Perl&amp;rsquo;s behavior in known situations, but too many of these tests exist to ensure that no one accidentally breaks an obscure feature of a particular implementation that no one really thought about but someone somewhere relies on in an important piece of code. You &lt;em&gt;could&lt;/em&gt; recreate Perl from its tests&amp;ndash;after a fashion.&lt;/p&gt;

&lt;p&gt;Perl 6 will likely also use its test suite as its primary specification, but as Larry Wall puts it, &amp;ldquo;We&amp;rsquo;re just trying to start with the right tests this time.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Even if the Perl 5 codebase &lt;em&gt;did&lt;/em&gt; follow a specification, its design is inelegant in many places. It&amp;rsquo;s also very difficult to expand. Many good ideas that would make code easier to write and maintain are too impractical to support. It&amp;rsquo;s a good prototype, but it&amp;rsquo;s not code that you would want to keep if you had the option to do something different.&lt;/p&gt;

&lt;p&gt;From the language level, there are a few inconsistencies, as well. For example, why should sigils change depending on how you access internal data? (The canonical answer is &amp;ldquo;To specify context of the access,&amp;rdquo; but there are other ways to mark the same.) When is a block a block, and when is it a hash reference? Why does &lt;code&gt;SUPER&lt;/code&gt; method redispatch not respect the currently dispatched class of the invocant, but only the compiled class? How can you tell the indirect object notation&amp;rsquo;s method name barewords from bareword class or function names?&lt;/p&gt;

&lt;p&gt;It can be difficult to decide whether the problem with a certain feature is in the design or the implementation. Consider the desire to replace a built-in data structure with a user-defined object. Perl 5 requires you to use &lt;code&gt;tie&lt;/code&gt; and &lt;code&gt;overload&lt;/code&gt; to do so. To make this work, the internals check special flags on &lt;em&gt;every&lt;/em&gt; data structure in &lt;em&gt;every&lt;/em&gt; opcode to see if the current item has any magical behavior. This is ugly, slow, inflexible, and difficult to understand.&lt;/p&gt;

&lt;p&gt;The Perl 6 solution is to allow multi-method dispatch, which not only removes conceptual complexity (at least, MMD is easier to explain than &lt;code&gt;tie&lt;/code&gt;) but also provides the possibility of a cleaner implementation.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s flexibility sometimes makes life difficult. In particular, there being multiple more-or-less equivalent ways to create objects gives people plenty of opportunities to do clever things they need to do, but it also means that people tend to choose the easiest (or sometimes cleverest) way to do something, not necessarily the best way to do something. It&amp;rsquo;s not Perlish to allow only one way to perform a task, but there&amp;rsquo;s no reason not to provide one really good and easy way to do something while providing the proper hooks and safety outlets to customize the solution cleanly.&lt;/p&gt;

&lt;p&gt;Also, there are plenty of language optimizations that turned out to be wrong in the long term. Many of them were conventions&amp;ndash;from pre-existing &lt;code&gt;awk&lt;/code&gt;, shell, Unix, and regular expression cultures&amp;ndash;that gave early Perl a familiarity and aided its initial growth. Yet now that Perl stands on its own, they can seem counter-productive.&lt;/p&gt;

&lt;p&gt;Redesigning Perl means asking a lot of questions. Why is the method call operator two characters (one shifted), not a single dot? Why are strictures disabled by default in programs, not one-liners? Why does dereferencing a reference take so many characters? (Perl 5 overloaded curly braces in six different ways. If you can list four, you&amp;rsquo;re doing well.) Why is evaluating a non-scalar container in scalar context so much less useful than it could be?&lt;/p&gt;

&lt;p&gt;Once you accept that backwards compatibility is standing in the way of progress and resolve to change things for the better, you have a lot of opportunities to fix design and implementation decisions that turn out to have been bad&amp;ndash;or at least, not completely correct.&lt;/p&gt;

&lt;h3 id=&#34;advantages-of-perl-6&#34;&gt;Advantages of Perl 6&lt;/h3&gt;

&lt;p&gt;In exchange for breaking backwards compatibility, at least at the language level, Perl 6 offers plenty of high-powered language concepts that Perl 5 didn&amp;rsquo;t support, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi-bin/wiki?MultiMethods&#34;&gt;Multimethods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi-bin/wiki?CoRoutine&#34;&gt;Coroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Continuation&#34;&gt;Continuations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Useful threading&lt;/li&gt;
&lt;li&gt;Junctions&lt;/li&gt;
&lt;li&gt;Roles&lt;/li&gt;
&lt;li&gt;Hyperoperators&lt;/li&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;An overridable and reusable grammar&lt;/li&gt;
&lt;li&gt;Garbage collection&lt;/li&gt;
&lt;li&gt;Improved &lt;a href=&#34;http://c2.com/cgi-bin/wiki?ForeignFunctionInterface&#34;&gt;foreign function interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Module aliasing and versioning&lt;/li&gt;
&lt;li&gt;Improved introspection&lt;/li&gt;
&lt;li&gt;Extensible and overridable primitives&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;better-internals&#34;&gt;Better Internals&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;Parrot project&lt;/a&gt;, led by designer Chip Salzenberg and pumpking Leo Toetsch, is producing the new virtual machine for the official Perl 6 release.&lt;/p&gt;

&lt;p&gt;Parrot is a new design and implementation not specifically tied to Perl 6. Its goal is to run almost any dynamic language efficiently. Because many of the designers have plenty of experience with the Perl 5 internals, Parrot tries to avoid the common mistakes and drawbacks there. One of the first and most important design decisions is extracting the logic of overridden container behavior from opcodes into the containers themselves. That is, where you might have a tied hash in Perl 5, all of the opcodes that deal with hashes have to check that the hash received is tied. In Parrot, each hash has a specific interface and all of the opcodes expect the PMC that they receive to implement that interface. (This is the standard &amp;ldquo;Replace conditional with polymorphism&amp;rdquo; refactoring.)&lt;/p&gt;

&lt;h4 id=&#34;better-object-orientation&#34;&gt;Better Object Orientation&lt;/h4&gt;

&lt;p&gt;The de facto OO technique in Perl 5 is blessing a hash and accessing the hash&amp;rsquo;s members directly as attributes. This is quick and easy, but it has encapsulation, substitutability, and namespace clashing problems. Those problems all have solutions: witness several competing CPAN modules that solve them.&lt;/p&gt;

&lt;p&gt;Perl 6 instead provides opaque objects by default, with language support for creating classes and instances and declaring class and instance attributes. It also provides multiple ways to customize class and object behavior, from instantiation to destruction. Where 95 percent of objects can happily use the defaults, the 5 percent customized classes will still work with the rest of the world.&lt;/p&gt;

&lt;p&gt;Another compelling feature is language support for roles&amp;ndash;this is a different way of describing and encapsulating specific behavior for objects apart from inheritance or mixins. In brief, a role encapsulates behavior that multiple classes can perform, so that a function or method signature can expect an object that does a role, rather than an object that inherits from a particular abstract base class. This has powerful effects on polymorphism and genericity. Having role support in the language and the core library will make large object-oriented systems easier to write and to maintain.&lt;/p&gt;

&lt;h4 id=&#34;improved-consistency&#34;&gt;Improved Consistency&lt;/h4&gt;

&lt;p&gt;Sigils, the funny little markers at the start of variables, are invariant.&lt;/p&gt;

&lt;p&gt;Return codes make sense, especially in exceptional cases.&lt;/p&gt;

&lt;p&gt;Similar things look similar. Different things look different. Weird things look weird.&lt;/p&gt;

&lt;p&gt;All blocks are closures; all closures are first-class data structures on which you can set or query properties, for example.&lt;/p&gt;

&lt;h4 id=&#34;rules-and-grammars&#34;&gt;Rules and Grammars&lt;/h4&gt;

&lt;p&gt;One of Perl 5&amp;rsquo;s most useful features is integrated regular expression support&amp;ndash;except they&amp;rsquo;re not all that regular anymore. Nearly every problem Perl 5 has in the whole (inconsistency, wrong shortcuts, difficult reusability, inflexible and impenetrable internals) shows up in the syntax and implementation of regular expressions.&lt;/p&gt;

&lt;p&gt;Perl 6 simplifies regular expressions while adding more power, producing rules. You can reuse and combine rules to produce a grammar. If you apply a grammar to text (or, perhaps, any type of input including a recursive data structure), you receive a match tree.&lt;/p&gt;

&lt;p&gt;That sounds quite a bit like what a parser and lexer do&amp;ndash;so there&amp;rsquo;s little surprise that Perl 6 has its own locally overridable grammar that allows you to make your own syntax changes and redefine the language when you really need to. Perl 5 supported a similar feature (source filters), but it was fragile, hard to use, and even harder to re-use in serious programs.&lt;/p&gt;

&lt;p&gt;By making a clean break from regular expressions, the designers had the opportunity to re-examine the regex syntax. The new syntax is more consistent, so it&amp;rsquo;s easier to type and to remember the syntaxes of common operations. There&amp;rsquo;s also more consistency, so that similar features look similar.&lt;/p&gt;

&lt;p&gt;Perl 6 has a Perl 5 compatibility layer, if you prefer quick and dirty and familiar&amp;ndash;but give the new syntax a try, especially for projects where quick and dirty regular expressions were intractable (more than usual, anyway).&lt;/p&gt;

&lt;h3 id=&#34;where-is-it-already&#34;&gt;Where is it Already?&lt;/h3&gt;

&lt;p&gt;Larry announced the Perl 6 project at OSCON in 2000. Why is it taking so long? There are several reasons.&lt;/p&gt;

&lt;p&gt;First, Perl 5 isn&amp;rsquo;t going anywhere. If anything, the rate of patches and changes to the code has increased. Cleanups from Ponie and the &lt;a href=&#34;http://qa.perl.org/phalanx/&#34;&gt;Phalanx project&lt;/a&gt; continue to improve the design and implementation, and new features from Perl 6 are making their way into Perl 5.&lt;/p&gt;

&lt;p&gt;Second, the opportunity to do the right thing without fear of breaking backwards compatibility opened up a lot of possibilities for impressive new features. Reinventing regular expressions as rules and grammars, for example, would have been difficult while retaining the flavor and syntax of &lt;code&gt;awk&lt;/code&gt; and Henry Spencer&amp;rsquo;s original implementations. The new power and consistency makes rules well worth the reinvention.&lt;/p&gt;

&lt;p&gt;Third, the project is still a volunteer project. Though other languages and platforms have major corporate support, only a handful of Perl 6 hackers receive any form of funding to work on the project&amp;ndash;and none of them on a full-time basis.&lt;/p&gt;

&lt;p&gt;If you want to write actual, working Perl 6 code, it&amp;rsquo;s possible. Pugs has been able to run quite a bit of the language since last summer. It will soon connect directly to Parrot again. When that happens, watch out!&lt;/p&gt;

&lt;h3 id=&#34;learning-more&#34;&gt;Learning More&lt;/h3&gt;

&lt;p&gt;This article is merely an overview of some of the reasons for and features of Perl 6. There are plenty of details available online in writings of the designers, the mailing lists, and the source code repositories.&lt;/p&gt;

&lt;h4 id=&#34;design-documents&#34;&gt;Design Documents&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 home page&lt;/a&gt; holds links to most of the design documents for the language. In particular, Larry&amp;rsquo;s &lt;a href=&#34;http://dev.perl.org/perl6/doc/apocalypse.html&#34;&gt;Perl 6 Apocalypses&lt;/a&gt; explore a subject area in depth, identifying the problem and outlining his thinking about what the solution might be. Damian Conway&amp;rsquo;s &lt;a href=&#34;http://dev.perl.org/perl6/doc/exegesis.html&#34;&gt;Perl 6 Exegeses&lt;/a&gt; expand upon the idea, showing concrete examples written in actual Perl 6 code.&lt;/p&gt;

&lt;p&gt;In the past several months, the design team has started to update the &lt;a href=&#34;http://dev.perl.org/perl6/doc/synopsis.html&#34;&gt;Perl 6 Synopses&lt;/a&gt; instead. Perl 6 pumpking Patrick Michaud keeps these fresh with the current design. The Apocalypses and Exegeses remain online as interesting historical documents that take too long to write and revise as changes occur.&lt;/p&gt;

&lt;h4 id=&#34;implementations&#34;&gt;Implementations&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;Parrot&lt;/a&gt; has monthly releases. The Parrot distribution includes the Parrot Grammar Engine (PGE), which is Patrick&amp;rsquo;s implementation of rules and grammars, as well as several languages that target Parrot. The most complete implementation is for Tcl, though the Punie project (Perl 1 on Parrot) shows the entire suite of compiler tools.&lt;/p&gt;

&lt;p&gt;Audrey (nee Autrijus) Tang&amp;rsquo;s &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;Pugs&lt;/a&gt; is an unofficial Perl 6 implementation, optimized for fun. As of the time of the writing, it supported much of Perl 6, including junctions, multimethods, and objects. It targets multiple back-ends, including Haskell, JavaScript, Perl 5, and Parrot, and moves very quickly. Pugs is a great project in which to participate&amp;ndash;it&amp;rsquo;s very easy to get a committer bit and start writing tests and fixing bugs. It&amp;rsquo;s currently the main prototype and reference implementation. Time will tell what its role is in the final release.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.poniecode.org/&#34;&gt;Ponie&lt;/a&gt; is a port of Perl 5 to Parrot. It&amp;rsquo;s a huge refactoring project with little glory but a lot of potential usefulness. C hackers are more than welcome.&lt;/p&gt;

&lt;h4 id=&#34;discussion&#34;&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Most development discussion takes place on several &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;Perl 6 mailing lists&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;discusses Perl 6, the language and features.&lt;/li&gt;
&lt;li&gt;discusses the design and implementation of Parrot and various languages targeting Parrot.&lt;/li&gt;
&lt;li&gt;discusses PGE, Pugs, and the interaction of various components of the compiler tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;#perl6&lt;/code&gt; IRC channel on &lt;a href=&#34;http://irc.freenode.net/&#34;&gt;irc.freenode.net&lt;/a&gt; talks about Pugs and Perl 6, while &lt;code&gt;#parrot&lt;/code&gt; on &lt;a href=&#34;http://irc.perl.org/&#34;&gt;irc.perl.org&lt;/a&gt; concentrates on Parrot. There is almost always someone around in &lt;code&gt;#perl6&lt;/code&gt; to answer questions about Pugs or Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://planetsix.perl.org/&#34;&gt;Planet Perl Six&lt;/a&gt; aggregates weblogs from several designers and developers of various related projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Phalanx Project</title>
      <link>http://localhost:1313/pub/2005/01/13/phalanx.html/</link>
      <pubDate>Thu, 20 Jan 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/01/13/phalanx.html/</guid>
      <description>

&lt;p&gt;Imagine a city protected by a small army of soldiers. The city&amp;rsquo;s future growth requires a larger force; so a few determined lieutenants go to nearby towns and enlist aid from their police departments. These forces will come to the aid of the larger city when the time comes.&lt;/p&gt;

&lt;p&gt;This is the Phalanx project, but the city is Perl, our soldiers are automated tests, and the nearby towns are the modules of CPAN.&lt;/p&gt;

&lt;p&gt;Flashback to &lt;a href=&#34;http://conferences.oreillynet.com/os2003/&#34;&gt;OSCON 2003&lt;/a&gt;. Larry Wall had just given his &lt;a href=&#34;http://localhost:1313/pub/2003/07/16/soto2003.html&#34;&gt;7th annual State of the Onion&lt;/a&gt; where he&amp;rsquo;d announced the &lt;a href=&#34;http://www.poniecode.org/&#34;&gt;Ponie&lt;/a&gt; project. Ponie is to be Perl 5.10, but running on the new Parrot virtual machine that forms the basis of Perl 6, instead of C.&lt;/p&gt;

&lt;p&gt;I was talking with Leon Brocard about the massive amount of testing that would be necessary to test a new implementation of Perl. Everything we know, and all our assumptions, would change. How would we know that 2+2=4 all the time? How would we know that object inheritance works? Will XS modules work the way they should? We would need a huge test suite, more than Perl has now, to make sure Ponie really is still Perl 5. The CPAN would make a great source of real-world testing.&lt;/p&gt;

&lt;p&gt;Most CPAN modules of any popularity come with a test suite, so it would be easy to add more tests to the distributions. This would help those who worked on Ponie to make sure they had more and more tests to test against, and would help the module author by having more tests written for his code.&lt;/p&gt;

&lt;h2 id=&#34;which-modules&#34;&gt;Which Modules?&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t imagine that we&amp;rsquo;d run Ponie against all of the CPAN, and wanted to follow the Pareto principle and go after the top 10%. However, with CPAN at about 4,000 modules when Phalanx started (now 6,000), it would have been too large an effort to work on 400 modules. Instead, I picked a nice round 100, or 2.5% of the distributions available.&lt;/p&gt;

&lt;p&gt;What makes a &amp;ldquo;top 100 module&amp;rdquo;? Ideally, I&amp;rsquo;d like to know which modules had the most real-life use, but that&amp;rsquo;s impossible. I decided a relative comparison of the number of downloads of modules would be a close enough approximation. (The astute reader is probably already thinking of problems with this approach, but rest assured that I&amp;rsquo;ve thought of them as well.)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://qa.perl.org/phalanx/100/&#34;&gt;Phalanx Top 100 Modules&lt;/a&gt; are those most downloaded in 45 days from the main CPAN mirror, with some adjustments. I excluded search engine bots and anything that was apparently mirroring CPAN. I also made the executive decision that any given IP address that downloaded more then 450 modules in 45 days was a bot.&lt;/p&gt;

&lt;h2 id=&#34;why-the-name-phalanx&#34;&gt;Why the Name &amp;ldquo;Phalanx&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;In ancient Greece, the phalanx was a military formation where hundreds of soldiers formed a shield wall. Each man stood shoulder to shoulder with the men next to him, their shields overlapping. As it is with the shields of the men in the phalanx, it is with the numerous and overlapping tests of the Phalanx project.&lt;/p&gt;

&lt;p&gt;For any set of code, the more automated tests you have, the more protection you have. If you can write a test for something, you probably should. Consider these simple tests of a &lt;code&gt;Project&lt;/code&gt; object&amp;rsquo;s constructor and an accessor, tested with Perl&amp;rsquo;s testing framework:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $project = Project-&amp;gt;new( name =&amp;gt; &amp;quot;Phalanx&amp;quot; );
isa_ok( $project, &amp;quot;Project&amp;quot; );
is( $project-&amp;gt;name, &amp;quot;Phalanx&amp;quot;, &amp;quot;Name set correctly&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some might say, &amp;ldquo;It&amp;rsquo;s only an accessor, why should we test it?&amp;rdquo; It&amp;rsquo;s worth testing because when it doesn&amp;rsquo;t work in production, you won&amp;rsquo;t see the error at the point of the accessor. Instead, some piece of code that uses the &lt;code&gt;Project::name&lt;/code&gt; accessor will fail, and you&amp;rsquo;ll spend hours tracing the failure back to the accessor.&lt;/p&gt;

&lt;p&gt;This sort of approach &amp;ndash; strength in numbers, each test building on others &amp;ndash; was the basis of the phalanx. So, too, will it be with Perl&amp;rsquo;s tests.&lt;/p&gt;

&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;

&lt;p&gt;The primary goal of Phalanx is to increase the quality of a given module&amp;rsquo;s test suite, mostly by increasing the amount of the module&amp;rsquo;s code that the tests cover. However, there are secondary goals because we&amp;rsquo;re working with the code anyway.&lt;/p&gt;

&lt;p&gt;The first sub-goal is to find hidden bugs. As we add tests to modules, we hope to uncover broken functionality. Indeed, the team working on HTML::TreeBuilder uncovered a bug in the module&amp;rsquo;s code while they added tests.&lt;/p&gt;

&lt;p&gt;In addition to adding to the testing, team members should verify the code&amp;rsquo;s documentation and fill in any missing areas. Comparing code to inline documentation may uncover hidden features that only someone reading the code would know about. These should be documented and tested.&lt;/p&gt;

&lt;p&gt;The principle here is this: Code, tests, and documentation must all agree with each other. If the code does one thing, the documentation describes it accurately, but the tests check for a different behavior, then there&amp;rsquo;s a bug. It might even be the two that agree with each other that are wrong. It&amp;rsquo;s possible even to find that all three might disagree with each other. Old code can be like that sometimes.&lt;/p&gt;

&lt;p&gt;Two other sub-goals are about humans. Phalanx provides an easy way for people to wet their feet in the open source process. The very nature of Phalanx is collaborative, where each team working on a module submits patches to the module for review and approval. The module&amp;rsquo;s author still maintains control, but works with the team to decide what direction testing should take.&lt;/p&gt;

&lt;p&gt;Second, Phalanx provides a playground for people with an interest in automated testing who don&amp;rsquo;t know how or where to start. Like &lt;a href=&#34;http://wgz.org/chromatic/&#34;&gt;chromatic&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;http://www.google.com/search?q=perl+test+kata+site%3Aperl.com&#34;&gt;Perl testing kata&lt;/a&gt;, adding tests to existing code actually exercises each team member&amp;rsquo;s skills.&lt;/p&gt;

&lt;h2 id=&#34;getting-people-to-sign-up&#34;&gt;Getting People to Sign Up&lt;/h2&gt;

&lt;p&gt;Once I&amp;rsquo;d created the Phalanx 100 and the guiding principles, and put up &lt;a href=&#34;http://qa.perl.org/phalanx/&#34;&gt;the Phalanx website&lt;/a&gt;, I had to find some hoplites. (Hoplites are the Greek soldiers that made up the ancient phalanxes.) I announced the project and a dozen eager hoplites volunteered. Each hoplite wrote to the author about his intent, to make sure the author was onboard with the idea. No sense in making changes and preparing patches for an author who will reject them. The author may also have input and suggestions, such as areas in the code that need more attention than others. Once the preparation was complete, the hoplite was to add tests and verify documentation.&lt;/p&gt;

&lt;p&gt;This process turned out to be a dismal failure.&lt;/p&gt;

&lt;p&gt;Twelve different hoplites adopted 12 distributions and produced exactly zero code in the first year. I don&amp;rsquo;t mind pointing fingers, because I was one of the 12. It seems that on projects like this, working solo means motivation is hard to maintain. Each of the hoplites I talked to explained that he started with the best of intentions, but had trouble finding the time to follow through, and the motivation fell by the wayside.&lt;/p&gt;

&lt;p&gt;This year, I tried a different approach, enlisting the support of Perl Mongers groups, starting with my home group, Chicago.pm. I then took to the conference circuit, giving lightning talks at YAPC::NA and OSCON asking for interested parties to join up with the team. Since then, SouthFlorida.pm, London.pm, and Perl Seminar New York have all joined up. We still coordinate with the module author, and also report progress centrally at our new &lt;a href=&#34;http://phalanx.kwiki.org/&#34;&gt;Phalanx wiki&lt;/a&gt;, but now I hope that with a group, it will be easier to keep motivation high.&lt;/p&gt;

&lt;h2 id=&#34;phalanx-tools&#34;&gt;Phalanx Tools&lt;/h2&gt;

&lt;p&gt;Over time, as we&amp;rsquo;ve built up an infrastructure for Phalanx, three tools have proven themselves to be crucial to collaboration.&lt;/p&gt;

&lt;p&gt;First were the triplets of email, web, and wiki, which allow information to be swapped on progress. The &lt;a href=&#34;http://lists.perl.org/showlist.cgi?name=perl-qa&#34;&gt;perl-qa mailing list&lt;/a&gt; hosted at lists.perl.org is home to many Perl folks interested in testing. The &lt;a href=&#34;http://qa.perl.org/phalanx/&#34;&gt;Phalanx webpage&lt;/a&gt; lets me post information for all hoplites to see. The &lt;a href=&#34;http://phalanx.kwiki.org/&#34;&gt;Phalanx wiki&lt;/a&gt; allows hoplites and groups to post project progress.&lt;/p&gt;

&lt;p&gt;Second, centralized version control is crucial since we have multiple collaborators on an individual module,. Fortunately, Robert and Ask of perl.org are graciously hosting a &lt;a href=&#34;http://svn.perl.org/phalanx/&#34;&gt;Subversion repository for the Phalanx teams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Third, Paul Johnson&amp;rsquo;s excellent &lt;code&gt;Devel::Cover&lt;/code&gt; package has been invaluable in identifying shortcomings of test suites. &lt;code&gt;Devel::Cover&lt;/code&gt; analyzes the running of the tests, and then identifies which lines of code the suite has exercised or &amp;ldquo;covered.&amp;rdquo; If a line of code isn&amp;rsquo;t covered by a test, it provides the hoplites a great place to start, by writing a test case to exercise the uncovered code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Devel::Cover&lt;/code&gt; presents metrics on percentages of coverage, but Phalanx doesn&amp;rsquo;t try necessarily to increase coverage to 100%. We&amp;rsquo;ve found that there&amp;rsquo;s a level of diminishing returns when exercising extreme corner cases, especially cases based on platform-specific dependencies. What we&amp;rsquo;ve found is that the real value is finding the big areas of neglect and patching those up. Sometimes you can even find big wins, like when I found unused and un-removed code in &lt;code&gt;WWW::Mechanize&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-you-can-join&#34;&gt;How You Can Join&lt;/h2&gt;

&lt;p&gt;If automated testing interests you, or you&amp;rsquo;re looking for a way to add to the CPAN, we&amp;rsquo;d love to have you join.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Join the &lt;a href=&#34;http://lists.perl.org/showlist.cgi?name=perl-qa&#34;&gt;perl-qa&lt;/a&gt; list.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The perl-qa list is the official mailing list of the Phalanx project. Sign up and introduce yourself.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Find a module that interests you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Find a module that could benefit from your attention. Many hoplites pick modules that they use in day-to-day life. There&amp;rsquo;s also no requirement that the module you work on is from the Phalanx 100.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Find kindred souls.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Phalanx seems to go better when hoplites team up to work together.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can (and should) join our ranks and add to our numbers, as we help take Perl that much closer to Perl 6.&lt;/p&gt;

&lt;h2 id=&#34;other-links&#34;&gt;Other Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qa.perl.org/phalanx/&#34;&gt;Phalanx homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.petdance.com/perl/join-phalanx-lt.pdf&#34;&gt;Transcript of &amp;ldquo;Join the Phalanx Project&amp;rdquo; lighting talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phalanx.kwiki.org/&#34;&gt;Phalanx Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>State of the Onion 2003</title>
      <link>http://localhost:1313/pub/2003/07/16/soto2003.html/</link>
      <pubDate>Wed, 16 Jul 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/07/16/soto2003.html/</guid>
      <description>&lt;p&gt;This is the 7th annual State of the Perl Onion speech, wherein I tell you how Perl is doing. Perl is doing fine, thank you. Now that that&amp;rsquo;s out of the way, I&amp;rsquo;d like to spend the rest of the time telling jokes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide1.jpg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In fact, the conference organizers have noticed that I spend most of the time telling jokes. So each year they give me a little less time, so I have to chop out more of the serious subject matter so as to leave time for the jokes.&lt;/p&gt;

&lt;p&gt;Extrapolating several years into the future, they&amp;rsquo;ll eventually chop my time down to ten seconds. I&amp;rsquo;ll have just enough time to say: &amp;ldquo;I&amp;rsquo;m really, really excited about what is happening with Perl this year. And I&amp;rsquo;d like to announce that, after lengthy negotiations, Guido and I have finally decided&amp;hellip; &amp;lt;gong&amp;gt; [&amp;ldquo;Time&amp;rsquo;s up. Next speaker please&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;Well, you didn&amp;rsquo;t really want to know that anyway&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since this is a State of the Union speech, or State of the Onion, in the particular case of Perl, I&amp;rsquo;m supposed to tell you what Perl&amp;rsquo;s current state is. But I already told you that the current state of Perl is just fine. Or at least as fine as it ever was. Maybe a little better.&lt;/p&gt;

&lt;p&gt;But what you really want to know about is the future state of Perl. That&amp;rsquo;s nice. I don&amp;rsquo;t know much about the future of Perl. Nobody does. That&amp;rsquo;s part of the design of Perl 6. Since we&amp;rsquo;re designing it to be a mutable language, it will probably mutate. If I did know the future of Perl, and if I told you, you&amp;rsquo;d probably run away screaming.&lt;/p&gt;

&lt;p&gt;As I was meditating on this subject, thinking about how I don&amp;rsquo;t know the future of Perl, and how you probably don&amp;rsquo;t &lt;em&gt;want&lt;/em&gt; to know it anyway, I was reminded of a saying that I first saw posted in the 1960&amp;rsquo;s. You may feel like this on some days.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We the unwilling,
led by the unknowing,
are doing the impossible
for the ungrateful.
We have done so much for so long with so little
We are now qualified to do anything with nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide2.jpg&#34; alt=&#34;blue collar&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I think of it as the Blue-Collar Worker&amp;rsquo;s Creed.&lt;/p&gt;

&lt;p&gt;This has been attributed to various people, none of whom are Ben Franklin, Abraham Lincoln, or Mark Twain. My favorite attribution is to Mother Teresa. She may well have quoted it, but I don&amp;rsquo;t think she coined it, because I don&amp;rsquo;t think Mother Teresa thought of herself as &amp;ldquo;unwilling&amp;rdquo;. After all, Mother Teresa got a Nobel prize for being one of the most willing people on the face of the earth.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also been attributed to the Marines in Vietnam, and it certainly fits a little better. But since I grew up in a Navy town, I&amp;rsquo;d like to think it was invented by a civilian shipyard worker working for the Navy. In any event, I first saw it posted in a work area at Puget Sound Naval Shipyard back in the 1960&amp;rsquo;s. Now, you may well wondering what I was doing in a Naval Shipyard in the 1960&amp;rsquo;s. That&amp;rsquo;s a secret.&lt;/p&gt;

&lt;p&gt;Anyway, you may also be wondering why I brought it up at all. Well, last year I used the table of contents from an issue of Scientific American as my outline. This year I&amp;rsquo;d like to use this as my outline.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to, but I won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;But if I did, here&amp;rsquo;s what I&amp;rsquo;d say.&lt;/p&gt;

&lt;p&gt;From the postmodern point of view, this is a text that needs to be deconstructed. It was obviously written by someone in a position of power pretending not to be. And by making light of the plight of blue collar workers, and allowing the oppressed workers to post this copy-machine meme in the workplace, this white-collar wolf in blue-collar sheep&amp;rsquo;s clothing has managed to persuade the oppressed workers that being powerless is something to be proud of.&lt;/p&gt;

&lt;p&gt;Now, some of you young folks are too steeped in postmodernism to know anything about postmodernism, so let&amp;rsquo;s review. Postmodernism in its most vicious form started out with the notion that there exist various cultural constructs, or texts, or memes, that allow some human beings to oppress other human beings. Of course, in Soviet Russia it&amp;rsquo;s the other way around. Which is why they managed to deconstruct themselves, I guess.&lt;/p&gt;

&lt;p&gt;Anyway, deconstructionism is all about throwing out the bad cultural memes, where &amp;ldquo;bad&amp;rdquo; is defined as anything an oppressed person doesn&amp;rsquo;t like. Which is fine as far as it goes, but the spanner in the works is that you can only be an oppressed person if the deconstructionists say you are. Dead white males need not apply. Fortunately, I&amp;rsquo;m not dead yet. Though I&amp;rsquo;m trying. As some of you know, several weeks ago I was in the hospital with a bleeding ulcer. I guess I&amp;rsquo;m a little like Soviet Russia. I oppress myself, so I deconstruct myself.&lt;/p&gt;

&lt;p&gt;Oh, by the way, I got better. In case you hadn&amp;rsquo;t noticed.&lt;/p&gt;

&lt;p&gt;Though I&amp;rsquo;m not allowed to drink anything brown anymore. Sigh. That&amp;rsquo;s why this speech is so boring — I wrote it under the non-influence.&lt;/p&gt;

&lt;p&gt;But back to postmodernism. Postmodern critics have invented a notation for using a word and denying its customary meaning at the same time, since most customary meanings are oppressive to someone or other, and if not, they ought to be. Or something like that.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m going to borrow that notation for my own oppressive purposes, and strike out a few of these words that don&amp;rsquo;t mean exactly what I want them to mean. I hope that doesn&amp;rsquo;t make me a postmodern critic. Or maybe it does. As Humpty Dumpty said, the question is who&amp;rsquo;s to be master, that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start by striking out &amp;ldquo;unwilling&amp;rdquo;, because there are quite a few willing people around here. Or at least willful.&lt;/p&gt;

&lt;p&gt;And let&amp;rsquo;s strike out &amp;ldquo;unknowing&amp;rdquo; too, because you wouldn&amp;rsquo;t be sitting here listening to us leaders here tonight if you thought we didn&amp;rsquo;t know anything. On the other hand, maybe you just came for the jokes&amp;hellip;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s strike out the &amp;ldquo;impossible&amp;rdquo;. Actually, I hesitate to strike that one out, because what we&amp;rsquo;re trying to do with Perl is to be all things to all people, and in the long run that is completely impossible, technically, socially, and theologically speaking.&lt;/p&gt;

&lt;p&gt;But that doesn&amp;rsquo;t stop us from trying. And who knows, maybe more of it is possible than we imagine.&lt;/p&gt;

&lt;p&gt;We definitely have to strike out ungrateful, because we know many people are grateful. Nevertheless, a number of people find it impossible to be grateful, and we should be working to please them as well. Love your enemies, and all that. Another impossible task. Or&amp;hellip; perhaps the same one.&lt;/p&gt;

&lt;p&gt;I like to please people who did not expect to be pleased. One day when I was a lot younger than I am now, I performed a piece on my violin. A lady came up to me afterward and said, &amp;ldquo;You know, I don&amp;rsquo;t like the violin. But I liked that.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I treasure that sort of compliment, just as I treasure the email messages that say, &amp;ldquo;I had given up on computer programming because it wasn&amp;rsquo;t any fun, and then I discovered Perl.&amp;rdquo; That&amp;rsquo;s what I mean when I say we should work to please the people who don&amp;rsquo;t expect to be grateful.&lt;/p&gt;

&lt;p&gt;Anyway, back to our Creed here. I can&amp;rsquo;t see anything wrong with the last two lines. In fact, they&amp;rsquo;re directly applicable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have done so much for so long with so little&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are now qualified to anything with nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 6. I suppose I need to strike that out too, since it doesn&amp;rsquo;t really exist yet, except in our heads.&lt;/p&gt;

&lt;p&gt;Well, maybe that&amp;rsquo;s not such a bad outline after all. Let&amp;rsquo;s talk a little more about those things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide10.jpg&#34; alt=&#34;the unwilling&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling&lt;/p&gt;

&lt;p&gt;Here in the open source community, we&amp;rsquo;re willing to help out, but that&amp;rsquo;s because we&amp;rsquo;re &lt;em&gt;not&lt;/em&gt; willing to put up with the status quo. And that&amp;rsquo;s generally due to our inflated sense of Laziness, Impatience, and Hubris. But then a really funny thing happens. A number of us will get together and agree about something that needs doing because of our Laziness, Impatience, and Hubris, and then we&amp;rsquo;ll start working on that project with a great deal of industriousness, patience, and humility, which seem to be the very opposite qualities to those that motivated us in the first place.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried to figure out a rationale for that, but I&amp;rsquo;ve pretty much come to the conclusion that it&amp;rsquo;s not rational or reasonable. It&amp;rsquo;s just who we are. Here&amp;rsquo;s a favorite quotation of mine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The reasonable man adapts himself to the world; the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that all of us agree that this is true. We just can&amp;rsquo;t always agree on what to be unreasonable about. Of course, this was written by George Bernard Shaw, who had his own ideas of the most reasonable ways to be unreasonable. This is, after all, the guy who wrote Pygmalion, upon which the musical My Fair Lady was based, with dear old &amp;lsquo;Enry &amp;lsquo;Iggins and Eliza Dolit&amp;rsquo;le going at each other&amp;rsquo;s throats. And over linguistics of all things. Fancy that.&lt;/p&gt;

&lt;p&gt;The only problem with this quote is that it&amp;rsquo;s false. A lot of progress comes from unreasonable women.&lt;/p&gt;

&lt;p&gt;Well, okay, maybe Shaw meant &amp;ldquo;he or she&amp;rdquo; when he only said &amp;ldquo;he&amp;rdquo;. Still, if we&amp;rsquo;re going to please unreasonable people in the twenty-first century, maybe we need to rewrite it like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide11.jpg&#34; alt=&#34;strike out man and him&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On the other hand, some people are impossible to please. We should probably just strike out &amp;ldquo;George Bernard Shaw&amp;rdquo; since he&amp;rsquo;s a dead white male.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide13.jpg&#34; alt=&#34;unknowing&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s me all over. Which is what the bug said after he hit the windshield.&lt;/p&gt;

&lt;p&gt;Or as the bug&amp;rsquo;s friend said, &amp;ldquo;Bet you don&amp;rsquo;t have the guts to do that again.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Whether I have the guts to do Perl again is another question. My guts are still in sad shape at the moment, according to the doctor&amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, back to &amp;ldquo;me the unknowing&amp;rdquo;. I admit that there&amp;rsquo;s an awful lot that I don&amp;rsquo;t know. I&amp;rsquo;d love to tell you how much I don&amp;rsquo;t know, but I don&amp;rsquo;t know that either.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ll have to talk about what I know instead. If you are so inclined, you may infer that I am totally oblivious to anything I don&amp;rsquo;t talk about today.&lt;/p&gt;

&lt;p&gt;One thing I do know about is the universal architectural diagram. It looks like this.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t have to be chartreuse. How about pink, to match the fireworks up in the corner. I put the fireworks up in the corner there in case you missed the fireworks on the 4th of July.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide14.jpg&#34; alt=&#34;pink&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, this is the universal architectural diagram because you can represent almost any architecture with it, if you try hard enough. Here&amp;rsquo;s a common enough one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide15.jpg&#34; alt=&#34;CPU&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Here we have a bus that&amp;rsquo;s common across the other three components of our computer, the memory, the CPU, and the I/O system. Within the computer we have other entities such as strings, which you can view either as a whole or as a sequence of characters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide16.jpg&#34; alt=&#34;string&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
An integer is just like a string, only it&amp;rsquo;s a sequence of bits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide17.jpg&#34; alt=&#34;integer&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We can go from very small ideas like integers to very large ideas like government:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide18.jpg&#34; alt=&#34;government&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or even alternate forms of government.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide19.jpg&#34; alt=&#34;Borg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The diagram is even more versatile because you can rotate it on its side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide20.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide21.jpg&#34; alt=&#34;right&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, for some reason, this particular orientation seems to engender the most patriotism. It might just be accidental, but if you color it like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide22.jpg&#34; alt=&#34;flag&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
people start thinking about saluting it. Kinda goes with the fireworks, I guess.&lt;/p&gt;

&lt;p&gt;A little more dangerous is this diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide23.jpg&#34; alt=&#34;object&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s amazing how many people will salute that one. And people will even go to war for this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide24.jpg&#34; alt=&#34;class&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But you know, the whole notion of objects like this is that there are ways in which you treat them as a single thing, and ways in which you treat them as multiple things. Every structured object is wrapped up in its own identity. That&amp;rsquo;s really what this little diagram is getting at.&lt;/p&gt;

&lt;p&gt;Well, let&amp;rsquo;s keep rotating it and see what we get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide26.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide27.jpg&#34; alt=&#34;God&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Okay, if you happen to be a Christian of the trinitarian persuasion like me, then you believe that God is a structured object that is simultaneously singular and plural depending on how you look at it. Of course, nobody ever fights about that sort of thing, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide28.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide29.jpg&#34; alt=&#34;left&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s kind of unusual to see the diagram in this orientation, probably due to linguistic considerations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide30.jpg&#34; alt=&#34;one out of many&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But whether you say &amp;ldquo;one out of many&amp;rdquo; or &amp;ldquo;e pluribus unum&amp;rdquo;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide31.jpg&#34; alt=&#34;pluribus&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
it means much the same thing. In a language that reads left to right, perhaps it&amp;rsquo;s more naturally suited to processes that lose information, such as certain kinds of logic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide32.jpg&#34; alt=&#34;or&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Again, we can go from the very small to the very large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide33.jpg&#34; alt=&#34;black hole&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
If you feed three random planets to a black hole, you also lose information. Or at least you hide it very well, depending on your theory of how black holes work.&lt;/p&gt;

&lt;p&gt;If you feed one of these diagrams to a black hole, it turns into a piece of spaghetti.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s not, and say we did.&lt;/p&gt;

&lt;p&gt;Oddly enough, what I&amp;rsquo;d really like to talk about today is Perl. If we look at our goal for the Parrot project, it looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide37.jpg&#34; alt=&#34;Borg Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Oops, wrong slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide38.jpg&#34; alt=&#34;Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That is, Parrot is designed to be a single engine upon which we can run both Perl 5 and Perl 6. And&amp;hellip; stuff. Admittedly, this is a rather Perl-centric view of reality, to the extent you can call this reality.&lt;/p&gt;

&lt;p&gt;Well, okay, I&amp;rsquo;ll cheat and show you the other stuff we&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide39.jpg&#34; alt=&#34;detail&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We&amp;rsquo;d also like to support, for example, PHP, Ruby, Python, BASIC, Scheme, COBOL, Java, Befunge, TECO, Rebol, REXX, and&amp;hellip; I can&amp;rsquo;t quite make out that one on the bottom there. And if I could, I wouldn&amp;rsquo;t say it anyway, because there are children present, and I wouldn&amp;rsquo;t want to fuck up their brains.&lt;/p&gt;

&lt;p&gt;Okay, I admit this is not quite reality yet. I just put in all those languages because I&amp;rsquo;m a white male who is trying to oppress you before I&amp;rsquo;m quite dead. So I&amp;rsquo;d better strike out a few things that aren&amp;rsquo;t really there yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide40.jpg&#34; alt=&#34;strikes&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Could I interest you in a really fast BASIC interpreter?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide41.jpg&#34; alt=&#34;Parrot + BASIC&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Well, it&amp;rsquo;s time to move on to our next point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide42.jpg&#34; alt=&#34;impossible&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing, are doing the impossible.&lt;/p&gt;

&lt;p&gt;Is what we&amp;rsquo;re doing really impossible? It&amp;rsquo;s possible. But we won&amp;rsquo;t know till we try. More precisely, till we finish trying. Sometimes things seem impossible to us, but maybe that&amp;rsquo;s just because we&amp;rsquo;re all slackers.&lt;/p&gt;

&lt;p&gt;And because we oversimplify.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take another look at the pink tennis court. I mean, the universal architectural diagram. It really isn&amp;rsquo;t quite as universal as I&amp;rsquo;ve made it out to be. First, let&amp;rsquo;s get rid of the pink.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Maybe I should give equal time to blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide44.jpg&#34; alt=&#34;blue&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Nah.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, as I was saying, this isn&amp;rsquo;t universal enough. Here&amp;rsquo;s the real universal diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide46.jpg&#34; alt=&#34;line widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
This is what&amp;rsquo;s known as an impossible object. I like it. I&amp;rsquo;m impossible object oriented. This particular impossible object is often called a widget. But you knew that already.&lt;/p&gt;

&lt;p&gt;What you might not have known is that, up till now, it&amp;rsquo;s been thought impossible to color such an object accurately. But as you can see,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide47.jpg&#34; alt=&#34;colorized&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
that is false. There are still some perceptual difficulties with it, but I&amp;rsquo;m sure &lt;em&gt;that&lt;/em&gt; problem is just a relic of our reptile brain. Or was it our bird brain. I forget. In any event, if you have trouble perceiving this object correctly, just use the universal clarification tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide48.jpg&#34; alt=&#34;cloud&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I&amp;rsquo;ll assume you can supply your own cloud from now on.&lt;/p&gt;

&lt;p&gt;Should be easy here in Portland&amp;hellip; I&amp;rsquo;m allowed to make jokes about Portland because I grew up in the Pacific Northwet.&lt;/p&gt;

&lt;p&gt;As you can see, this more accurate universal architectural diagram can actually be rotated in 3-d with properly simulated lighting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide49.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide50.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide51.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide52.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s extensible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide53.jpg&#34; alt=&#34;6comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide54.jpg&#34; alt=&#34;12comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Comb structures are important in a programming language. That&amp;rsquo;s why we&amp;rsquo;re adding a switch statement to Perl 6.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a more accurate representation of Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide55.jpg&#34; alt=&#34;parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s also more sophisticated linguistically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide56.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Not only can it represent singular and plural concepts, but also the old Indo-European notion of dual objects.&lt;/p&gt;

&lt;p&gt;We still have vestiges of that in English.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide57.jpg&#34; alt=&#34;oxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
One ox, many oxes, two oxen yoked together pulling your plow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide58.jpg&#34; alt=&#34;regexen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or one regex, many regexes, but two regexen working together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide59.jpg&#34; alt=&#34;Vaxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
You always wanted to know the proper name for a two-headed Vax?&lt;/p&gt;

&lt;p&gt;Everything is possible. You should be grateful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide60.jpg&#34; alt=&#34;ungrateful&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On to the ungrateful undead.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of carping lately about how slow Perl 6 development is going. Some of it comes from well intentioned folks, but some of it comes from our poison pen pals who live in the troll house. Still, I think a lot of the criticism shows a lack of understanding of the basic laws of development. These laws can be illustrated with this diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide61.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Basically, perfect development is impossible. Development can be fast, good, and cheap. Pick two.&lt;/p&gt;

&lt;p&gt;Actually, that&amp;rsquo;s unrealistic.&lt;/p&gt;

&lt;p&gt;Pick one.&lt;/p&gt;

&lt;p&gt;Which one would you pick? You want fast? You want cheap? No, I think you want this one.&lt;/p&gt;

&lt;p&gt;Good.&lt;/p&gt;

&lt;p&gt;Good design is neither fast nor cheap. Every time we crank out a new chunk of the design of Perl 6 or of Parrot, it&amp;rsquo;s a bit like writing a master&amp;rsquo;s thesis. It&amp;rsquo;s a lot of reading, and a lot of writing, and a lot of thinking, and a lot of email, and a lot of phone conferences. It&amp;rsquo;s really complicated and multidimensional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide62.jpg&#34; alt=&#34;escher&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
There&amp;rsquo;s a lot going on behind the scenes that you don&amp;rsquo;t hear about every day. Many people have sacrificed to give us time to work on these things. People have donated their own time and money to it. O&amp;rsquo;Reilly and Associates have donated phone conferences and other infrastructure. The Perl 6 design team in particular has borne a direct financial cost but also a tremendous opportunity cost in pursuing this at the expense of career and income. I&amp;rsquo;m not looking for sympathy, but I want you to know that I almost certainly could have landed a full-time job 20 months ago if I&amp;rsquo;d been willing to forget about Perl 6. I&amp;rsquo;m extremely grateful for the grants the Perl Foundation has been able to give toward the Perl 6 effort. But I just want you to know that it&amp;rsquo;s costing us more than that.&lt;/p&gt;

&lt;p&gt;But Perl 6 is all about freedom, and that&amp;rsquo;s why we&amp;rsquo;re willing to pledge our lives, our fortunes, and our sacred honor.&lt;/p&gt;

&lt;p&gt;Times are tough, and I&amp;rsquo;m not begging for more sacrifice from you good folks. I just want to give a little perspective, and fair warning that at some point soon I&amp;rsquo;m going to have to get a real job with real health insurance because I can&amp;rsquo;t live off my mortgage much longer. It&amp;rsquo;s bad for my ulcer, and it&amp;rsquo;s bad for my family.&lt;/p&gt;

&lt;p&gt;Fortunately, the basic design of Perl 6 is largely done, appearances to the contrary notwithstanding. Damian and I will be talking about that in the Perl 6 session later in the week.&lt;/p&gt;

&lt;p&gt;Well, enough ranting. I don&amp;rsquo;t want to sound ungrateful myself, because I&amp;rsquo;m not. In any event, the last three years have been extremely exciting, and I think the coming years will be just as interesting.&lt;/p&gt;

&lt;p&gt;In particular, I have a great announcement to make at the end of my talk about what&amp;rsquo;s going to be happening next. But let me explain a bit first what&amp;rsquo;s happened, again using our poor, abused widget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide63.jpg&#34; alt=&#34;implementations&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In this case, time is flowing in the upward direction.&lt;/p&gt;

&lt;p&gt;Originally we just had one implementation of Perl, and the general perception as we started developing Perl 6 was that we were going to have two implementations of Perl.&lt;/p&gt;

&lt;p&gt;But in actual fact, we&amp;rsquo;re going to have at least three implementations of Perl.&lt;/p&gt;

&lt;p&gt;First, the good old Perl 5 that&amp;rsquo;s based on C, And on the right, the Perl 6 that&amp;rsquo;s based on Parrot. But there in the middle is a Perl5 that is also based on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide64.jpg&#34; alt=&#34;ellipses&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Note that the left two are the same language, while the right two share the same platform.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s that Perl 5 doing there in the middle? If you&amp;rsquo;ve been following Perl 6 development, you&amp;rsquo;ll know that from the very beginning we&amp;rsquo;ve said that there has to be a migration strategy, and that that strategy has two parts. First, we have to be able to translate Perl 5 to Perl 6. If that were all of it, we wouldn&amp;rsquo;t need the middle Perl there. But not only do people need to be able to translate from Perl 5 to Perl 6, it is absolutely crucial that they be allowed to do it piecemeal. You can&amp;rsquo;t translate a complicated set of modules all at once and expect them to work. Instead, we want people to be able to run some of their modules in Perl 5, and others in Perl 6, all under the same interpreter.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one good reason to have a Perl 5 compiler for Parrot. Another good reason is that we expect Perl 5 to run faster on Parrot, by and large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide65.jpg&#34; alt=&#34;hands&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Yet another reason is that we have a little bootstrapping issue with the Perl 6 grammar. The Perl 6 grammar is defined in Perl 6 regexes. But those regexes are parsed with the Perl 6 grammar. Catch 22. The solution to this involves two things. First, a magical module of Damian&amp;rsquo;s that translates Perl 6 regexes back into Perl 5 regexes. Second, a Perl 5 regex interpreter to run those regexes. Now, it&amp;rsquo;d be possible to do it with old Perl 5, but it&amp;rsquo;ll be cleaner to run it with the new Perl 5 running on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide66.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, it&amp;rsquo;s awfully cumbersome to keep saying &amp;ldquo;Perl 5 over Parrot&amp;rdquo; and such, so we need to do some namespace cleanup here. We can drop the &amp;ldquo;over Parrot&amp;rdquo; for Perl 6, because that&amp;rsquo;s redundant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide67.jpg&#34; alt=&#34;drop parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Likewise, people always think of the original when we say &amp;ldquo;Perl 5&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide68.jpg&#34; alt=&#34;drop C&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That means we need a code name for this thing in the middle. We&amp;rsquo;ve decided to call it &amp;ldquo;Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide69.jpg&#34; alt=&#34;Ponie&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We have lots of reasons to call it that. To be sure, none of them are &lt;em&gt;good&lt;/em&gt; reasons, but I&amp;rsquo;m told it will make the London.pm&amp;rsquo;ers deliriously happy if I say, &amp;ldquo;I want a Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And I do want a Ponie. &amp;ldquo;I want the Ponie, I want the whole Ponie. I want it now.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide71.jpg&#34; alt=&#34;versions&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The plan is to for Ponie version 5.10 to be a drop-in replacement for Perl 5.10. Eventually there will be a Ponie 5.12, and if Ponie is good enough, there may not be an old-fashioned 5.12. We&amp;rsquo;ll just stop with 5.10.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;re gonna start on Ponie right now. Since I&amp;rsquo;ve been carping about lack of resources, you might wonder how we&amp;rsquo;re gonna do this.&lt;/p&gt;

&lt;p&gt;Well, as it happens, a nice company called Fotango has a lot of Perl 5 code they want to run on Parrot, and they are clued enough to have authorized one of their employees, our very own Arthur Bergman, to spend company time porting Perl 5 to Parrot.&lt;/p&gt;

&lt;p&gt;Is that cool or what? I&amp;rsquo;m out of time, so read the press release. But I&amp;rsquo;m really excited by our vision for the future, and if you&amp;rsquo;re not excited, maybe you need to have your vision checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide72.jpg&#34; alt=&#34;vision&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Thanks for listening, and I hope that from now on you&amp;rsquo;ll all be completely unreasonable.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

