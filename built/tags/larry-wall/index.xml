<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Larry Wall on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/larry-wall/</link>
    <description>Recent content in Larry Wall on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 09:07:55 +0000</lastBuildDate>
    <atom:link href="/tags/larry-wall/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Listen to Larry Wall&#39;s State of the Onion 2000 on YouTube</title>
      <link>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</link>
      <pubDate>Fri, 10 Jul 2020 09:07:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/TODDR&#34;&gt;Todd Rinaldo&lt;/a&gt; has uploaded Larry&amp;rsquo;s State of the Onion talk from YAPC &lt;del&gt;19100&lt;/del&gt; 2000 to &lt;a href=&#34;https://www.youtube.com/watch?v=a1SEt_-QMDo&#34;&gt;YouTube&lt;/a&gt;. Previously it was available in separate mp3 files, but this is much more accessible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a typical Larry talk filled with quirky, humorous observations about life and programming, and notably he announces the Perl 6 project.&lt;/p&gt;

&lt;p&gt;Unfortunately the audio is low quality (hey it was 20 years ago at a low-budget conference); you can read a transcript of the talk &lt;a href=&#34;http://localhost:1313/pub/2000/10/23/soto2000.html/&#34;&gt;here&lt;/a&gt; (with mp3 download links at the bottom). We also have collection of attendees&amp;rsquo; &lt;a href=&#34;http://localhost:1313/pub/2000/07/yapc19101.html/&#34;&gt;reports&lt;/a&gt; from the conference.&lt;/p&gt;

&lt;p&gt;If you enjoy Larry&amp;rsquo;s talks, you might like some of his other &lt;a href=&#34;http://localhost:1313/authors/larry-wall/&#34;&gt;transcribed talks / articles&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Larry Wall interviewed in San Francisco</title>
      <link>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</link>
      <pubDate>Mon, 16 Oct 2017 09:26:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</guid>
      <description>&lt;p&gt;Larry was interviewed in San Francisco at Erlang &amp;amp; Elixir Factory SF Bay Area 2017 conference. As you&amp;rsquo;d expect from Larry, the talk covered many interesting topics including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl 6&lt;/li&gt;
&lt;li&gt;Paul Graham&amp;rsquo;s 100 year language&lt;/li&gt;
&lt;li&gt;How culture influences thinking and programming&lt;/li&gt;
&lt;li&gt;History of hardware and how computers are like people&lt;/li&gt;
&lt;li&gt;Larry&amp;rsquo;s early programming languages and influences&lt;/li&gt;
&lt;li&gt;Programming paradigms and language design&lt;/li&gt;
&lt;li&gt;Types and their benefits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first 22 minutes are Larry showcasing Perl 6&amp;rsquo;s major features. If you&amp;rsquo;re familiar with those already, you might want to skip ahead. My favorite anecdote was about the Unix community and Perl:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Henry Spencer called early Perl &amp;ldquo;awk with skin cancer&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Larry Wall&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The video, slides and audio of the interview are available on InfoQ&amp;rsquo;s &lt;a href=&#34;https://www.infoq.com/presentations/language-design-perl&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Via&lt;/em&gt;: O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;https://www.oreilly.com/feed/four-short-links&#34;&gt;Four short links&lt;/a&gt; and &lt;a href=&#34;https://developers.slashdot.org/story/17/10/07/0259243/new-video-peeks-inside-the-head-of-perl-creator-larry-wall&#34;&gt;Slashdot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming is Hard, Let&#39;s Go Scripting...</title>
      <link>http://localhost:1313/pub/2007/12/06/soto-11.html/</link>
      <pubDate>Thu, 06 Dec 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/12/06/soto-11.html/</guid>
      <description>

&lt;p&gt;I think, to most people, scripting is a lot like obscenity. I can&amp;rsquo;t define it, but I&amp;rsquo;ll know it when I see it. Here are some common memes floating around:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Simple language
    &amp;quot;Everything is a string&amp;quot;
    Rapid prototyping
    Glue language
    Process control
    Compact/concise
    Worse-is-better
    Domain specific
    &amp;quot;Batteries included&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;I don&amp;rsquo;t see any real center here, at least in terms of technology. If I had to pick one metaphor, it&amp;rsquo;d be easy onramps. And a slow lane. Maybe even with some optional fast lanes.&lt;/p&gt;

&lt;h3 id=&#34;easy-onramps&#34;&gt;Easy Onramps&lt;/h3&gt;

&lt;p&gt;But basically, scripting is not a technical term. When we call something a scripting language, we&amp;rsquo;re primarily making a linguistic and cultural judgment, not a technical judgment.&lt;/p&gt;

&lt;p&gt;I see scripting as one of the humanities. It&amp;rsquo;s our linguistic roots showing through. So speaking of roots&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;the-past&#34;&gt;The Past&lt;/h3&gt;

&lt;p&gt;Suppose you went back to Ada Lovelace and asked her the difference between a script and a program. She&amp;rsquo;d probably look at you funny, then say something like: Well, a script is what you give the actors, but a program is what you give the audience. That Ada was one sharp lady&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since her time, we seem to have gotten a bit more confused about what we mean when we say scripting. It confuses even me, and I&amp;rsquo;m supposed to be one of the experts.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m afraid all I can do is give you my own worm&amp;rsquo;s eye view of the past, the present, and the future. Let me warn you that I am not without a few prejudices here and there.&lt;/p&gt;

&lt;h3 id=&#34;basic&#34;&gt;BASIC&lt;/h3&gt;

&lt;p&gt;Now, however it was initially intended, I think BASIC turned out to be one of the first major scripting languages, especially the extended version that DEC put onto its minicomputers called BASIC/PLUS, which happily included recursive functions with arguments. I started out as a BASIC programmer. Some people would say that I&amp;rsquo;m permanently damaged. Some people are undoubtedly right.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m not going to apologize for that. All language designers have their occasional idiosyncracies. I&amp;rsquo;m just better at it than most. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;rsts-basic-plus&#34;&gt;RSTS BASIC/PLUS&lt;/h3&gt;

&lt;p&gt;Anyway, when I was a RSTS programmer on a PDP-11, I certainly treated BASIC as a scripting language, at least in terms of rapid prototyping and process control. I&amp;rsquo;m sure it warped my brain forever. Perl&amp;rsquo;s statement modifiers are straight out of BASIC/PLUS. It even had some cute sigils on the ends of its variables to distinguish string and integer from floating point.&lt;/p&gt;

&lt;p&gt;But you could do extreme programming. In fact, I had a college buddy I did pair programming with. We took a compiler writing class together and studied all that fancy stuff from the dragon book. Then of course the professor announced we would be implementing our own language, called PL/0. After thinking about it a while, we announced that we were going to do our project in BASIC. The professor looked at us like were insane. Nobody else in the class was using BASIC. And you know what? Nobody else in the class finished their compiler either. We not only finished but added I/O extensions, and called it PL 0.5. That&amp;rsquo;s rapid prototyping.&lt;/p&gt;

&lt;h3 id=&#34;unix&#34;&gt;Unix?&lt;/h3&gt;

&lt;p&gt;I remember one day our computer center got a letter from Bell Labs telling us that we could get a tape of Unix V6 for cheap, only $100 because they were coming out shortly with V7. We all looked at each other and said, Why would we ever want to use this thing called Unix? We have RSTS.&lt;/p&gt;

&lt;h3 id=&#34;jam-no-not-that-one&#34;&gt;JAM (no not that one)&lt;/h3&gt;

&lt;p&gt;My first scripting language was written in BASIC. For my job in the computer center I wrote a language that I called JAM, short for Jury-rigged All-purpose Meta-language. Story of my life&amp;hellip;&lt;/p&gt;

&lt;p&gt;JAM was an inside-out text-processing language much like PHP, except that HTML hadn&amp;rsquo;t been invented yet. We mostly used it as a fancy macro processor for BASIC. Unlike PHP, it did not have 3,000 functions in one namespace. We wouldn&amp;rsquo;t have had the memory, for one thing.&lt;/p&gt;

&lt;h3 id=&#34;lisp&#34;&gt;LISP&lt;/h3&gt;

&lt;p&gt;For good or ill, when I went off to grad school, I studied linguistics, so the only computer language I used there was LISP. It was my own personal McCarthy era.&lt;/p&gt;

&lt;p&gt;Is LISP a candidate for a scripting language? While you can certainly write things rapidly in it, I cannot in good conscience call LISP a scripting language. By policy, LISP has never really catered to mere mortals.&lt;/p&gt;

&lt;p&gt;And, of course, mere mortals have never really forgiven LISP for not catering to them.&lt;/p&gt;

&lt;h3 id=&#34;pascal-ada&#34;&gt;Pascal, Ada&lt;/h3&gt;

&lt;p&gt;Once I got into industry, I wrote a compiler in Pascal for a discrete event simulator, and slavered over the forthcoming Ada specs. As a linguist, I don&amp;rsquo;t think of Ada as a big language. Now, English and Japanese, those are big languages. Ada is just a medium-sized language.&lt;/p&gt;

&lt;h3 id=&#34;unix-shell&#34;&gt;Unix, shell&lt;/h3&gt;

&lt;p&gt;After several years I finally became acquainted with Unix and its various scripting languages. OK, to be more precise, BSD, and csh.&lt;/p&gt;

&lt;h3 id=&#34;bsd-csh&#34;&gt;BSD, csh&lt;/h3&gt;

&lt;p&gt;Yeah, yeah, I know. More brain damage&amp;hellip;&lt;/p&gt;

&lt;p&gt;I also learned a little C.&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s because a little C is all there is. I&amp;rsquo;m still learning those libraries though.&lt;/p&gt;

&lt;h3 id=&#34;shell-awk-sed-find-expr&#34;&gt;shell + awk + sed + find + expr&amp;hellip;&lt;/h3&gt;

&lt;p&gt;But the frustrations of Unix shell programming led directly to the creation of Perl, which I don&amp;rsquo;t really have time to tell. But essentially, I found that shell scripting was intrinsically limited by the fact that most of its verbs are not under its control and hence largely inconsistent with each other. And the nouns are impoverished, restricted to strings and files, with who-knows-what typology.&lt;/p&gt;

&lt;h3 id=&#34;c-xor-shell&#34;&gt;C xor shell&lt;/h3&gt;

&lt;p&gt;More destructive was the mindset that it was a one-dimensional universe: you either programmed in C or you programmed in shell, because they&amp;rsquo;re obviously at opposite ends of the One True Continuum. Perl came about when I realized that scripting did not always have to viewed as the opposite of programming, but that a single language could be pretty good for both. That opened up a huge ecological niche. Many of you have seen my old clamshell diagram, with the two dimensions of manipulexity and whipuptitude.&lt;/p&gt;

&lt;h3 id=&#34;tcl&#34;&gt;Tcl&lt;/h3&gt;

&lt;p&gt;After Perl came Tcl, which in a sense is a purer scripting language than Perl. Perl just pretends that everything is a string when it&amp;rsquo;s convenient, but Tcl really believes that as a controlling metaphor. The string metaphor tends to have bad performance ramifications, but that&amp;rsquo;s not why Tcl languished, I think. There were two reasons for that.&lt;/p&gt;

&lt;p&gt;First, Tcl stayed in the Unix mindset that controlling tools was the opposite of creating tools, so they didn&amp;rsquo;t optimize much. The fast parts can always be written in C, after all.&lt;/p&gt;

&lt;p&gt;The second reason was the lack of a decent extension mechanism, so you ended up with separate executables for expect, incr-tcl, etc.&lt;/p&gt;

&lt;p&gt;I must say, though, that I&amp;rsquo;ve always admired Tcl&amp;rsquo;s delegational model of semantics. But it fell into the same trap as LISP by expecting everyone to use the One True Syntax. Speaking of the One True Syntax:&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;After Tcl came Python, which in Guido&amp;rsquo;s mind was inspired positively by ABC, but in the Python community&amp;rsquo;s mind was inspired negatively by Perl. I&amp;rsquo;m not terribly qualified to talk about Python however. I don&amp;rsquo;t really know much about Python. I only stole its object system for Perl 5. I have since repented.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m much more qualified to talk about Ruby&amp;ndash;that&amp;rsquo;s because a great deal of Ruby&amp;rsquo;s syntax is borrowed from Perl, layered over Smalltalk semantics. I&amp;rsquo;ve always viewed Ruby as a much closer competitor for Perls ecological niche, not just because of the borrowed ideas, but because both Perl and Ruby take their functional programming support rather more seriously that Python does. On the other hand, I think Ruby kind of screwed up on its declaration syntax, among other things.&lt;/p&gt;

&lt;h3 id=&#34;sh&#34;&gt;*sh&lt;/h3&gt;

&lt;p&gt;Meanwhile, the Bourne shell was extended into the Korn shell and bash. I didn&amp;rsquo;t have much to do with those either. Thankfully. I will say that the continued evolution of the shell shows just how crufty a language can get when you just keep adding on ad hoc syntactic features.&lt;/p&gt;

&lt;h3 id=&#34;php&#34;&gt;PHP&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve also seen the rise of PHP, which takes the worse-is-better approach to dazzling new depths, as it were. By and large PHP seems to be making the same progression of mistakes as early Perl did, only slower. The one thing it does better is packaging. And when I say packaging, I don&amp;rsquo;t mean namespaces.&lt;/p&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;Then there&amp;rsquo;s JavaScript, a nice clean design. It has some issues, but in the long run JavaScript might actually turn out to be a decent platform for running Perl 6 on. Pugs already has part of a backend for JavaScript, though sadly that has suffered some bitrot in the last year. I think when the new JavaScript engines come out we&amp;rsquo;ll probably see renewed interest in a JavaScript backend.&lt;/p&gt;

&lt;h3 id=&#34;monad-powershell&#34;&gt;Monad/PowerShell&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve looked a bit at Microsoft&amp;rsquo;s Monad, and I&amp;rsquo;m pleased to note that it has object pipes like Perl 6. I just hope they don&amp;rsquo;t patent it.&lt;/p&gt;

&lt;h3 id=&#34;lua-applescript&#34;&gt;Lua, AppleScript&lt;/h3&gt;

&lt;p&gt;There are other scripting languages in wide use. Sadly, I must confess I never looked closely at Lua or AppleScript, probably because I&amp;rsquo;m not a game designer with a Mac.&lt;/p&gt;

&lt;p&gt;Actually, I suspect it runs deeper than that, which brings us up to the present time.&lt;/p&gt;

&lt;h3 id=&#34;the-present&#34;&gt;The Present&lt;/h3&gt;

&lt;p&gt;When I look at the present situation, what I see is the various scripting communities behaving a lot like neighboring tribes in the jungle, sometimes trading, sometimes warring, but by and large just keeping out of each other&amp;rsquo;s way in complacent isolation.&lt;/p&gt;

&lt;p&gt;I tend to take an anthropological view of these things. Many of you here are Perl programmers, but some of you come from other programming tribes. And depending on your tribal history, you might think of a string as a pointer to a byte array if you&amp;rsquo;re a C programmer, or as a list if you&amp;rsquo;re a functional programmer, or as an object if you&amp;rsquo;re a Java programmer. I view a string as a Text, with a capital T.&lt;/p&gt;

&lt;h3 id=&#34;text&#34;&gt;Text&lt;/h3&gt;

&lt;p&gt;I read that word from a postmodern perspective. Of course, the term Postmodern is itself context-sensitive. Some folks think Postmodernism means little more than the Empowerment of the Vulgar. Some folks think the same about Perl.&lt;/p&gt;

&lt;p&gt;But I take Postmodernism to mean that a Text, whether spoken or written, is an act of communication requiring intelligence on both ends, and sometimes in the middle too. I don&amp;rsquo;t want to talk to a stupid computer language. I want my computer language to understand the strings I type.&lt;/p&gt;

&lt;p&gt;Perl is a postmodern language, and a lot of conservative folks feel like Postmodernism is a rather liberal notion. So it&amp;rsquo;s rather ironic that my views on Postmodernism were primarily informed by studying linguistics and translation as taught by missionaries, specifically, the Wycliffe Bible Translators. One of the things they hammered home is that there&amp;rsquo;s really no such thing as a primitive human language. By which they mean essentially that all human languages are Turing complete.&lt;/p&gt;

&lt;p&gt;When you go out to so-called primitive tribes and analyze their languages, you find that structurally they&amp;rsquo;re just about as complex as any other human language. Basically, you can say pretty much anything in any human language, if you work at it long enough. Human languages are Turing complete, as it were.&lt;/p&gt;

&lt;p&gt;Human languages therefore differ not so much in what you &lt;em&gt;can&lt;/em&gt; say but in what you &lt;em&gt;must&lt;/em&gt; say. In English, you are forced to differentiate singular from plural. In Japanese, you don&amp;rsquo;t have to distinguish singular from plural, but you do have to pick a specific level of politeness, taking into account not only your degree of respect for the person you&amp;rsquo;re talking to, but also your degree of respect for the person or thing you&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;So languages differ in what you&amp;rsquo;re forced to say. Obviously, if your language forces you to say something, you can&amp;rsquo;t be concise in that particular dimension using your language. Which brings us back to scripting.&lt;/p&gt;

&lt;p&gt;How many ways are there for different scripting languages to be concise?&lt;/p&gt;

&lt;p&gt;How many recipes for borscht are there in Russia?&lt;/p&gt;

&lt;p&gt;Language designers have many degrees of freedom. I&amp;rsquo;d like to point out just a few of them.&lt;/p&gt;

&lt;h3 id=&#34;early-binding-late-binding&#34;&gt;early binding / late binding&lt;/h3&gt;

&lt;p&gt;Binding in this context is about exactly when you decide which routine you&amp;rsquo;re going to call for a given routine name. In the early days of computing, most binding was done fairly early for efficiency reasons, either at compile time, or at the latest, at link time. You still tend to see this approach in statically typed languages. With languages like Smalltalk, however, we began to see a different trend, and these days most scripting languages are trending towards later binding. That&amp;rsquo;s because scripting languages are trying to be dwimmy (Do What I Mean), and the dwimmiest decision is usually a late decision because you then have more available semantic and even pragmatic context to work with. Otherwise you have to predict the future, which is hard.&lt;/p&gt;

&lt;p&gt;So scripting languages naturally tend to move toward an object-oriented point of view, where the binding doesn&amp;rsquo;t happen &amp;lsquo;til method dispatch time. You can still see the scars of conflict in languages like C++ and Java though. C++ makes the default method type non-virtual, so you have to say virtual explicitly to get late binding. Java has the notion of final classes, which force calls to the class to be bound at compile time, essentially. I think both of those approaches are big mistakes. Perl 6 will make different mistakes. In Perl 6 all methods are virtual by default, and only the application as a whole can tell the optimizer to finalize classes, presumably only after you know how all the classes are going to be used by all the other modules in the program.&lt;/p&gt;

&lt;h3 id=&#34;single-dispatch-multiple-dispatch&#34;&gt;single dispatch / multiple dispatch&lt;/h3&gt;

&lt;p&gt;In a sense, multiple dispatch is a way to delay binding even longer. You not only have to delay binding &amp;lsquo;til you know the type of the object, but you also have to know the types of all rest of the arguments before you can pick a routine to call. Python and Ruby always do single dispatch, while Dylan does multiple dispatch. Here is one dimension in which Perl 6 &lt;em&gt;forces&lt;/em&gt; the caller to be explicit for clarity. I think it&amp;rsquo;s an important distinction for the programmer to bear in mind, because single dispatch and multiple dispatch are philosophically very different ideas, based on different metaphors.&lt;/p&gt;

&lt;p&gt;With single-dispatch languages, you are basically sending a message to an object, and the object decides what to do with that message. With multiple dispatch languages, however, there is no privileged object. All the objects involved in the call have equal weight. So one way to look at multiple dispatch is that the objects are completely passive. But if the objects aren&amp;rsquo;t deciding how to bind, who is?&lt;/p&gt;

&lt;p&gt;Well, it&amp;rsquo;s sort of a democratic thing. All the routines of a given name get together and hold a political conference. (Well, not really, but this is how the metaphor works.) Each of the routines is a delegate to the convention. All the potential candidates put their names in the hat. Then all the routines vote on who the best candidate is, and the next best, and the next best after that. And eventually the routines themselves decide what the best routine to call is.&lt;/p&gt;

&lt;p&gt;So basically, multiple dispatch is like democracy. It&amp;rsquo;s the worst way to do late binding, except for all the others.&lt;/p&gt;

&lt;p&gt;But I really do think that&amp;rsquo;s true, and likely to become truer as time goes on. I&amp;rsquo;m spending a lot of time on this multiple dispatch issue because I think programming in the large is mutating away from the command-and-control model implicit in single dispatch. I think the field of computation as a whole is moving more toward the kinds of decisions that are better made by swarms of insects or schools of fish, where no single individual is in control, but the swarm as a whole has emergent behaviors that are somehow much smarter than any of the individual components.&lt;/p&gt;

&lt;h3 id=&#34;eager-evaluation-lazy-evaluation&#34;&gt;eager evaluation / lazy evaluation&lt;/h3&gt;

&lt;p&gt;Most languages evaluate eagerly, including Perl 5. Some languages evaluate all expressions as lazily as possible. Haskell is a good example of that. It doesn&amp;rsquo;t compute anything until it is forced to. This has the advantage that you can do lots of cool things with infinite lists without running out of memory. Well, at least until someone asks the program to calculate the whole list. Then you&amp;rsquo;re pretty much hosed in any language, unless you have a real Turing machine.&lt;/p&gt;

&lt;p&gt;So anyway, in Perl 6 we&amp;rsquo;re experimenting with a mixture of eager and lazy. Interestingly, the distinction maps very nicely onto Perl 5&amp;rsquo;s concept of scalar context vs. list context. So in Perl 6, scalar context is eager and list context is lazy. By default, of course. You can always force a scalar to be lazy or a list to be eager if you like. But you can say things like &lt;code&gt;for 1..Inf&lt;/code&gt; as long as your loop exits some other way a little bit before you run into infinity.&lt;/p&gt;

&lt;h3 id=&#34;eager-typology-lazy-typology&#34;&gt;eager typology / lazy typology&lt;/h3&gt;

&lt;p&gt;Usually known as static vs. dynamic, but again there are various positions for the adjustment knob. I rather like the gradual typing approach for a number of reasons. Efficiency is one reason. People usually think of strong typing as a reason, but the main reason to put types into Perl 6 turns out not to be strong typing, but rather multiple dispatch. Remember our political convention metaphor? When the various candidates put their names in the hat, what distinguishes them? Well, each candidate has a political platform. The planks in those political platforms are the types of arguments they want to respond to. We all know politicians are only good at responding to the types of arguments they want to have&amp;hellip;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another way in which Perl 6 is slightly more lazy than Perl 5. We still have the notion of contexts, but exactly when the contexts are decided has changed. In Perl 5, the compiler usually knows at compile time which arguments will be in scalar context, and which arguments will be in list context. But Perl 6 delays that decision until method binding time, which is conceptually at run time, not at compile time. This might seem like an odd thing to you, but it actually fixes a great number of things that are suboptimal in the design of Perl 5. Prototypes, for instance. And the need for explicit references. And other annoying little things like that, many of which end up as frequently asked questions.&lt;/p&gt;

&lt;h3 id=&#34;limited-structures-rich-structures&#34;&gt;limited structures / rich structures&lt;/h3&gt;

&lt;p&gt;Awk, Lua, and PHP all limit their composite structures to associative arrays. That has both pluses and minuses, but the fact that awk did it that way is one of the reasons that Perl does it differently, and differentiates ordered arrays from unordered hashes. I just think about them differently, and I think a lot of other people do too.&lt;/p&gt;

&lt;h3 id=&#34;symbolic-wordy&#34;&gt;symbolic / wordy&lt;/h3&gt;

&lt;p&gt;Arguably APL is also a kind of scripting language, largely symbolic. At the other extreme we have languages that eschew punctuation in favor of words, such as AppleScript and COBOL, and to a lesser extent all the Algolish languages that use words to indicate blocks where the C-derived languages use curlies. I prefer a balanced approach here, where symbols and identifiers are each doing what theyre best at. I like it when most of the actual words are those chosen by the programmer to represent the problem at hand. I don&amp;rsquo;t like to see words used for mere syntax. Such syntactic functors merely obscure the real words. That&amp;rsquo;s one thing I learned when I switched from Pascal to C. Braces for blocks. It&amp;rsquo;s just right visually.&lt;/p&gt;

&lt;p&gt;Actually, there are languages that do it even worse than COBOL. I remember one Pascal variant that required your keywords to be capitalized so that they would stand out. No, no, no, no, no! You don&amp;rsquo;t want your functors to stand out. It&amp;rsquo;s shouting the wrong words: IF! foo THEN! bar ELSE! baz END! END! END! END!&lt;/p&gt;

&lt;p&gt;Anyway, in Perl 6 we&amp;rsquo;re raising the standard for where we use punctuation, and where we don&amp;rsquo;t. We&amp;rsquo;re getting rid of some of our punctuation that isn&amp;rsquo;t really pulling its weight, such as parentheses around conditional expressions, and most of the punctuational variables. And we&amp;rsquo;re making all the remaining punctuation work harder. Each symbol has to justify its existence according to Huffman coding.&lt;/p&gt;

&lt;p&gt;Oddly, there&amp;rsquo;s one spot where we&amp;rsquo;re introducing new punctuation. After your sigil you can add a twigil, or secondary sigil. Just as a sigil tells you the basic structure of an object, a twigil tells you that a particular variable has a weird scope. This is basically an idea stolen from Ruby, which uses sigils to indicate weird scoping. But by hiding our twigils after our sigils, we get the best of both worlds, plus an extensible twigil system for weird scopes we haven&amp;rsquo;t thought of yet.&lt;/p&gt;

&lt;p&gt;We think about extensibility a lot. We think about languages we don&amp;rsquo;t know how to think about yet. But leaving spaces in the grammar for new languages is kind of like reserving some of our land for national parks and national forests. Or like an archaeologist not digging up half the archaeological site because we know our descendants will have even better analytical tools than we have.&lt;/p&gt;

&lt;p&gt;Really designing a language for the future involves a great deal of humility. As with science, you have to assume that, over the long term, a great deal of what you think is true will turn out not to be quite the case. On the other hand, if you don&amp;rsquo;t make your best guess now, you&amp;rsquo;re not really doing science either. In retrospect, we know APL had too many strange symbols. But we wouldn&amp;rsquo;t be as sure about that if APL hadn&amp;rsquo;t tried it first.&lt;/p&gt;

&lt;h3 id=&#34;compile-time-run-time&#34;&gt;compile time / run time&lt;/h3&gt;

&lt;p&gt;Many dynamic languages can eval code at run time. Perl also takes it the other direction and runs a lot of code at compile time. This can get messy with operational definitions. You don&amp;rsquo;t want to be doing much file I/O in your &lt;code&gt;BEGIN&lt;/code&gt; blocks, for instance. But that leads us to another distinction:&lt;/p&gt;

&lt;h3 id=&#34;declarational-operational&#34;&gt;declarational / operational&lt;/h3&gt;

&lt;p&gt;Most scripting languages are way over there on the operational side. I thought Perl 5 had an oversimplified object system till I saw Lua. In Lua, an object is just a hash, and there&amp;rsquo;s a bit of syntactic sugar to call a hash element if it happens to contain code. Thats all there is. They don&amp;rsquo;t even have classes. Anything resembling inheritance has to be handled by explicit delegation. That&amp;rsquo;s a choice the designers of Lua made to keep the language very small and embeddable. For them, maybe it&amp;rsquo;s the right choice.&lt;/p&gt;

&lt;p&gt;Perl 5 has always been a bit more declarational than either Python or Ruby. I&amp;rsquo;ve always felt strongly that implicit scoping was just asking for trouble, and that scoped variable declarations should be very easy to recognize visually. Thats why we have &lt;code&gt;my&lt;/code&gt;. It&amp;rsquo;s short because I knew we&amp;rsquo;d use it frequently. Huffman coding. Keep common things short, but not too short. In this case, 0 is too short.&lt;/p&gt;

&lt;p&gt;Perl 6 has more different kinds of scopes, so we&amp;rsquo;ll have more declarators like &lt;code&gt;my&lt;/code&gt; and &lt;code&gt;our&lt;/code&gt;. But appearances can be deceiving. While the language looks more declarative on the surface, we make most of the declarations operationally hookable underneath to retain flexibility. When you declare the type of a variable, for instance, you&amp;rsquo;re really just doing a kind of tie, in Perl 5 terms. The main difference is that you&amp;rsquo;re tying the implementation to the variable at compile time rather than run time, which makes things more efficient, or at least potentially optimizable.&lt;/p&gt;

&lt;h3 id=&#34;immutable-classes-mutable-classes&#34;&gt;immutable classes / mutable classes&lt;/h3&gt;

&lt;p&gt;Classes in Java are closed, which is one of the reasons Java can run pretty fast. In contrast, Ruby&amp;rsquo;s classes are open, which means you can add new things to them at any time. Keeping that option open is perhaps one of the reasons Ruby runs so slow. But that flexibility is also why Ruby has Rails.&lt;/p&gt;

&lt;p&gt;Perl 6 will have an interesting mix of immutable generics and mutable classes here, and interesting policies on who is allowed to close classes when. Classes are never allowed to close or finalize themselves, for instance. Sorry, for some reason I keep talking about Perl 6. It could have something to do with the fact that we&amp;rsquo;ve had to think about all of these dimensions in designing Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;class-based-prototype-based&#34;&gt;class-based / prototype-based&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s another dimension that can open up to allow both approaches. Some of you may be familiar with classless languages like Self or JavaScript. Instead of classes, objects just clone from their ancestors or delegate to other objects. For many kinds of modeling, it&amp;rsquo;s actually closer to the way the real world works. Real organisms just copy their DNA when they reproduce. They don&amp;rsquo;t have some DNA of their own, and an &lt;code&gt;@ISA&lt;/code&gt; array telling you which parent objects contain the rest of their DNA.&lt;/p&gt;

&lt;p&gt;The meta-object protocol for Perl 6 defaults to class-based, but is flexible enough to set up prototype-based objects as well. Some of you have played around with &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; in Perl 5. Moose is essentially a prototype of Perl 6&amp;rsquo;s object model. On a semantic level, anyway. The syntax is a little different. Hopefully a little more natural in Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;passive-data-global-consistency-active-data-local-consistency&#34;&gt;passive data, global consistency / active data, local consistency&lt;/h3&gt;

&lt;p&gt;Your view of data and control will vary with how functional or object-oriented your brain is. People just think differently. Some people think mathematically, in terms of provable universal truths. Functional programmers don&amp;rsquo;t much care if they strew implicit computation state throughout the stack and heap, as long as everything &lt;em&gt;looks&lt;/em&gt; pure and free from side-effects.&lt;/p&gt;

&lt;p&gt;Other people think socially, in terms of cooperating entities that each have their own free will. And it&amp;rsquo;s pretty important to them that the state of the computation be stored with each individual object, not off in some heap of continuations somewhere.&lt;/p&gt;

&lt;p&gt;Of course, some of us can&amp;rsquo;t make up our minds whether we&amp;rsquo;d rather emulate the logical Sherlock Holmes or sociable Dr. Watson. Fortunately, scripting is not incompatible with either of these approaches, because both approaches can be made more approachable to normal folk.&lt;/p&gt;

&lt;h3 id=&#34;info-hiding-scoping-attachment&#34;&gt;info hiding / scoping / attachment&lt;/h3&gt;

&lt;p&gt;And finally, if you&amp;rsquo;re designing a computer language, there are a couple bazillion ways to encapsulate data. You have to decide which ones are important. What&amp;rsquo;s the best way to let the programmer achieve separation of concerns?&lt;/p&gt;

&lt;h3 id=&#34;object-class-aspect-closure-module-template-trait&#34;&gt;object / class / aspect / closure / module / template / trait&lt;/h3&gt;

&lt;p&gt;You can use any of these various traditional encapsulation mechanisms.&lt;/p&gt;

&lt;h3 id=&#34;transaction-reaction-dynamic-scope&#34;&gt;transaction / reaction / dynamic scope&lt;/h3&gt;

&lt;p&gt;Or you can isolate information to various time-based domains.&lt;/p&gt;

&lt;h3 id=&#34;process-thread-device-environment&#34;&gt;process / thread / device / environment&lt;/h3&gt;

&lt;p&gt;You can attach info to various OS concepts.&lt;/p&gt;

&lt;h3 id=&#34;screen-window-panel-menu-icon&#34;&gt;screen / window / panel / menu / icon&lt;/h3&gt;

&lt;p&gt;You can hide info various places in your GUI. Yeah, yeah, I know, everything is an object. But some objects are more equal than others.&lt;/p&gt;

&lt;h3 id=&#34;syntactic-scope-semantic-scope-pragmatic-scope&#34;&gt;syntactic scope / semantic scope / pragmatic scope&lt;/h3&gt;

&lt;p&gt;Information can attach to various abstractions of your program, including, bizarrely, lexical scopes. Though if you think about it hard enough, you realize lexical scopes are also a funny kind of dynamic scope, or recursion wouldn&amp;rsquo;t work right. A &lt;code&gt;state&lt;/code&gt; variable is actually more purely lexical than a &lt;code&gt;my&lt;/code&gt; variable, because it&amp;rsquo;s shared by all calls to that lexical scope. But even state variables get cloned with closures. Only global variables can be truly lexical, as long as you refer to them only in a given lexical scope. Go figure.&lt;/p&gt;

&lt;p&gt;So really, most of our scopes are semantic scopes that happen to be attached to a particular syntactic scope.&lt;/p&gt;

&lt;p&gt;You may be wondering what I mean by a &lt;em&gt;pragmatic&lt;/em&gt; scope. That&amp;rsquo;s the scope of what the user of the program is storing in their brain, or in some surrogate for their brain, such as a game cartridge. In a sense, most of the web pages out there on the Internet are part of the pragmatic scope. As is most of the data in databases. The hallmark of the pragmatic scope is that you really don&amp;rsquo;t know the lifetime of the container. It&amp;rsquo;s just out there somewhere, and will eventually be collected by that Great Garbage Collector that collects all information that anyone forgets to remember. The Google cache can only last so long. Eventually we will forget the meaning of every URL. But we must not forget the &lt;em&gt;principle&lt;/em&gt; of the URL. That leads us to our next degree of freedom.&lt;/p&gt;

&lt;h3 id=&#34;use-lingua-perligata&#34;&gt;use Lingua::Perligata;&lt;/h3&gt;

&lt;p&gt;If you allow a language to mutate its own grammar within a lexical scope, how do you keep track of that cleanly? Perl 5 discovered one really bad way to do it, namely source filters, but even so we ended up with Perl dialects such as Perligata and Klingon. What would it be like if we actually did it right?&lt;/p&gt;

&lt;p&gt;Doing it right involves treating the evolution of the language as a pragmatic scope, or as a set of pragmatic scopes. You have to be able to name your dialect, kind of like a URL, so there needs to be a universal root language, and ways of warping that universal root language into whatever dialect you like. This is actually near the heart of the vision for Perl 6. We don&amp;rsquo;t see Perl 6 as a single language, but as the root for a family of related languages. As a family, there are shared cultural values that can be passed back and forth among sibling languages as well as to the descendants.&lt;/p&gt;

&lt;p&gt;I hope you&amp;rsquo;re all scared stiff by all these degrees of freedom. I&amp;rsquo;m sure there are other dimensions that are even scarier.&lt;/p&gt;

&lt;p&gt;But&amp;hellip; I think its a manageable problem. I think its possible to still think of Perl 6 as a scripting language, with easy onramps.&lt;/p&gt;

&lt;p&gt;And the reason I think its manageable is because, for each of these dimensions, it&amp;rsquo;s not just a binary decision, but a knob that can be positioned at design time, compile time, or even run time. For a given dimension X, different scripting languages make different choices, set the knob at different locations.&lt;/p&gt;

&lt;h3 id=&#34;you-can-t-even-think-about-x&#34;&gt;You can&amp;rsquo;t even think about X!&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s only one way to do X!
There&amp;rsquo;s more than one way to do X!
There are too many ways to do X!&lt;/p&gt;

&lt;p&gt;You may recognize some slogans in here.&lt;/p&gt;

&lt;h3 id=&#34;curling-up&#34;&gt;Curling Up&lt;/h3&gt;

&lt;p&gt;So I&amp;rsquo;m not suggesting that all scripting languages have to take all these dimensions into account, even if Perl 6 tries to. The scripting paradigm is not any one of these dimensions. According to various theories the universe may be laid out in ten or twenty dimensions, but generally we get by with only about three and a half of those dimensions. The rest are said to be curled up. Maybe we live in a scripting universe.&lt;/p&gt;

&lt;p&gt;Most of the scripting languages we call Perl 6 will have most of these dimensions curled up most of the time. But unlike the real universe, where it takes huge machines to uncurl these dimensions, we&amp;rsquo;ll make the dimensions uncurl just by keeping our declarations straight. Well, we&amp;rsquo;ll try. And where that fails, we&amp;rsquo;ll rely on the culture to keep things straight.&lt;/p&gt;

&lt;p&gt;For example, that&amp;rsquo;s exactly what happened already with Perl 5. We have the declarations, &lt;code&gt;use strict; use warnings;&lt;/code&gt;. But it&amp;rsquo;s the culture that decided to enforce the use of them. So much so that we&amp;rsquo;ve decided that they should be the default for most of Perl 6. It was one of those decisions by the hive. In this case the swarm turned out to be smarter than the language designer. And that&amp;rsquo;s as it should be.&lt;/p&gt;

&lt;h3 id=&#34;the-future&#34;&gt;The Future&lt;/h3&gt;

&lt;p&gt;Well, so what&amp;rsquo;s the future of scripting?&lt;/p&gt;

&lt;p&gt;In my completely unbiased opinion, that would be Perl 6. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Seriously though, it&amp;rsquo;s always safe to predict that the ecological landscape will end up with many small languages and a few dominant ones. Some languages like AppleScript have particular ecological niches and are unlikely to grow out of them. Other languages get used outside their original niche. There will always be the generalists, like crows and mockingbirds, and the specialists, like penguins and dodos. (Well, maybe not always the dodos&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Among the generalists, the conventional wisdom is that the worse-is-better approach is more adaptive. Personally, I get a little tired of the argument: My worse-is-better is better than your worse-is-better because I&amp;rsquo;m better at being worser! Is it really true that the worse-is-better approach always wins? With Perl 6 we&amp;rsquo;re trying to sneak one better-is-better cycle in there and hope to come out ahead before reverting to the tried and true worse-is-better approach. Whether that works, only time will tell.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The State of the Onion</title>
      <link>http://localhost:1313/pub/2004/08/18/onion.html/</link>
      <pubDate>Thu, 19 Aug 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/08/18/onion.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: All comments in square brackets are X screensavers that I ran for my slides. If you want to play along at home, start up xscreensaver-demo and click on the screensaver named. By the way, for any screensaver that wants random images (such as VidWhacker), I used a directory full of strange camel pictures (some of which I processed to make even stranger, just for those of you who think the phrase &amp;ldquo;strange camel&amp;rdquo; is redundant).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;VidWhacker (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Good evening. Welcome to my eighth State of the Onion speech. I only have two more speeches to go after this, and I&amp;rsquo;ll be up to 10. You see, 10 is kind of a magical number for speeches. According to Sturgeon&amp;rsquo;s Law, 9 out of 10 speeches are crap. After we get to number 10, we&amp;rsquo;ll know which one of mine &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; &amp;hellip; Probably number 9 or number 10 &amp;hellip;&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m giving you fair warning that this is probably going to be a lousy speech. Those of you who attended Damian Conway&amp;rsquo;s Presentation Aikido seminar yesterday will be sure of it. You&amp;rsquo;ll probably get more out of this speech than anyone else — mostly as a kind of negative example. You can just get out Damian&amp;rsquo;s notes and start ticking off all the rules I&amp;rsquo;ve violated.&lt;/p&gt;

&lt;p&gt;Now the particular reason this speech is going to be lousy is that I made up all my slides before I knew what I was going to talk about.&lt;/p&gt;

&lt;p&gt;Well, OK, that&amp;rsquo;s not quite right. I didn&amp;rsquo;t make up my slides. I was lazy. That&amp;rsquo;s a virtue, right? And I was Impatient. Plus I had the hubris to think that it didn&amp;rsquo;t really matter what my slides say — I can probably wrap a speech around them anyway. Especially since there&amp;rsquo;s only a 10% chance that it has to be a good speech.&lt;/p&gt;

&lt;p&gt;So anyway, here&amp;rsquo;s my first real slide. It&amp;rsquo;s a picture of how Damian thinks.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Maze&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;As most of you know, Damian is very clear-headed and determined. He gets where he&amp;rsquo;s going. It doesn&amp;rsquo;t matter what the problem is, he&amp;rsquo;ll find a way to solve it eventually. He may have to backtrack occasionally, but he&amp;rsquo;s very goal-oriented, and knows how to backtrack gracefully. It&amp;rsquo;s very good that we have Damian on the Perl 6 design team, because we need someone who thinks like that.&lt;/p&gt;

&lt;p&gt;Here, on the other hand, is a picture of how well I think on Damian&amp;rsquo;s level.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;AntSpotlight (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Yes, this is the famous Ant Spotlight screensaver. And yes, that is where I got all my slides from. And no, I didn&amp;rsquo;t have a goal in mind when I picked them. Do you see any goals in this picture? Do you see any efficient search strategies? Do you see anything resembling speed here?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s how well I think on Damian&amp;rsquo;s level. On a different level, I think like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cloudlife, fast&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;On this level, my mind is in a continual ferment. Things bubble up to the surface unbidden, and evolve in unexpected directions. Everything gets compared with everything else because the entire stew pot is bubbling like crazy. Well, maybe it&amp;rsquo;s not &lt;em&gt;like&lt;/em&gt; crazy. Maybe it &lt;em&gt;is&lt;/em&gt; crazy.&lt;/p&gt;

&lt;p&gt;One of the things that bubbled up recently was that the subject of this talk had to be screensavers. I didn&amp;rsquo;t know why. Maybe I still don&amp;rsquo;t know why. But be that as it may, that&amp;rsquo;s what this talk is about. Screensavers, and why I have to talk about them today, and why I have to talk about why I have to talk about them today. It&amp;rsquo;s a kind of recursive problem, you see.&lt;/p&gt;

&lt;p&gt;Incidentally, this screensaver is a variant of Conway&amp;rsquo;s Game of Life. No, not our Conway, the other Conway. Unless our Conway is the other Conway. Whatever, we&amp;rsquo;ll keep our Conway. After all, he&amp;rsquo;s TheDamian.&lt;/p&gt;

&lt;p&gt;Anyway, the game of Life is sort of the prototypical example of a cellular automaton. A number of screensavers are based on cellular automata. I have great empathy for all of them, because that&amp;rsquo;s how I think&amp;hellip; I think&amp;hellip;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Critical&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;On the other hand, my mind is like a screensaver that no one can ever look at, except maybe me, and God. People can&amp;rsquo;t see the ferment in my mind. What they see externally has to be filtered through my verbal apparatus, which is actually quite limited. I often think that my verbal processor is a slow interpreter. My wife&amp;rsquo;s verbal processor is a fast compiler. Actually, those of you who know Gloria will realize that she probably does her verbal processing down in the microcode. Or maybe it&amp;rsquo;s just hardwired. She can read out loud faster than I can read silently. Or maybe it&amp;rsquo;s just that she can talk faster than I can think. Or more likely, it&amp;rsquo;s just that I think slower than she talks.&lt;/p&gt;

&lt;p&gt;Anyway, where was I? Oh, yeah. This is how other people view my thinking. I spend a certain amount of time bouncing all over the cognitive map, then I&amp;rsquo;ll perseverate in a particular area for a while, and then I&amp;rsquo;ll take a flying mental leap to something that seems to the observer to be totally unrelated. They aren&amp;rsquo;t unrelated, but they &lt;em&gt;are&lt;/em&gt; long-range links. You know — all that six degrees of separation stuff. You need the long links as well as the short ones to make your graph work that way. There, my mentioning that is another example of just that sort of mental leap. This screensaver tends to look like a random walk generated by a person with attention deficit disorder. I don&amp;rsquo;t have ADHD. I tend to perseverate and not get distracted when I &lt;em&gt;should&lt;/em&gt; get distracted. If anything, I have Asperger&amp;rsquo;s syndrome, or some kind of mild autism. My good friend Tom Christiansen, who does have ADHD, once said jokingly that I have &amp;ldquo;task-switching deficit&amp;rdquo; disorder. He&amp;rsquo;s probably right on that. Certainly I seem to be stuck on this Perl thing. I&amp;rsquo;ve been stuck there for more than 15 years now. People think I make these long mental leaps all the time, but they&amp;rsquo;re all in the scope of this one picture. In my mind, everything relates to Perl, one way or another. You&amp;rsquo;ll notice this screensaver never jumps off the screen.&lt;/p&gt;

&lt;p&gt;Another way to view this screensaver is that the long jumps are indicative of the ability to stay on task a long time. In that view, if you have attention deficit disorder, your thinking looks more like this, because you&amp;rsquo;re changing directions faster than you want to.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Wander&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;People with ADHD have many endearing qualities, spontaneity not the least of them. But it &lt;em&gt;is&lt;/em&gt; a disability, and the ADHD approach only gets you so far. More to the point, it tends to get you back where you were. Here we see a screensaver based on a random walk. It&amp;rsquo;s actually rather stultifying if you watch it long enough. It&amp;rsquo;s been shown mathematically that a random walk will eventually return to the place it started if you wait long enough.&lt;/p&gt;

&lt;p&gt;Now, just because I say a random walk is stultifying to watch, please don&amp;rsquo;t take that to mean that ADHD people are stultifying to watch. Quite the opposite, in fact. I&amp;rsquo;m just using these screensavers as talking points, as metaphors of life, but some of my metaphors limp. As we get older we realize that everyone has disabilities. That seems to be true of metaphors as well. They all limp. Except for the ones that are dead. Anyway, please don&amp;rsquo;t anyone take offense at my free associations. Even if they&amp;rsquo;re true.&lt;/p&gt;

&lt;p&gt;You know how people are sometimes rude on Usenet or on a mailing list. Sometimes they&amp;rsquo;ll write something that can only be taken as a deadly insult, and then they have the unmitigated gall to put a smiley face on it, as if that makes it all right. It doesn&amp;rsquo;t, you know. Nevertheless, if I insult you with a deadly insult in this talk, please put one of those little smileys after it. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Anyway, where was I. Oh, yes, random walks. And the fact that they&amp;rsquo;re kind of stultifying to watch.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Rorschach&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You could throw in a little symmetry for interest. In fact, there&amp;rsquo;s already a special screensaver for that, which you can use if you want to find out if you&amp;rsquo;ve cracked&amp;hellip;&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip;&lt;/p&gt;

&lt;p&gt;Personally, Rorschach blots always look like butterflies to me. Or pelvis bones, I admit it.&lt;/p&gt;

&lt;p&gt;Or Mecha warriors. And such. You could almost swear the designers of Japanese anime must use this program to come up with new ideas for various kinds of monsters. But it&amp;rsquo;s still a random-walk program when you look at it. It&amp;rsquo;s value to psychoanalysis comes from the bilateral symmetry, which psychoanalysts think will remind us of sex, for some reason. Probably has something to do with the fact that people are bilaterally symmetrical.&lt;/p&gt;

&lt;p&gt;Pychoanalysts tend to have abstract hang-ups about sex (at least the Freudian ones do), but since we&amp;rsquo;re not psychoanalysts here, why stop at bilateral symmetry? Why stop at random walks? Why not psychoanalyze ourselves with other kinds of free associations?&lt;/p&gt;

&lt;p&gt;Which is precisely what I&amp;rsquo;m doing here. Another way of looking at this talk is that I&amp;rsquo;m psychoanalyzing myself in front of you, using all these screensavers as Rorschach blots to free associate with. Another way to look at it is that screensavers are sort of a poor man&amp;rsquo;s LSD, without the bad trips.&lt;/p&gt;

&lt;p&gt;By the way, I don&amp;rsquo;t think there are any Freudian psychologists in the audience, but if you happen to be a Freudian psychologist, and were insulted by my earlier remarks &amp;hellip; well &amp;hellip; just deal with it &amp;hellip; repress it, or something &amp;hellip;.&lt;/p&gt;

&lt;p&gt;In honor of Freudian psychology, I should in all fairness point out that I am myself the subject a classical case of repressed memory. I don&amp;rsquo;t remember anything from my fifth grade. It wasn&amp;rsquo;t anything sexual (I don&amp;rsquo;t think!), but I am told that it was one of these experimental open classrooms where you have to decide yourself what you&amp;rsquo;re going to learn. That works well for these kinds of people:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Maze&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;One of the aspects of my Asperger personality is that I don&amp;rsquo;t initiate things like that. I have impaired executive function, in modern terminology. I almost never initiate telephone calls. I almost never initiate anything, in fact. Funny, considering Perl, but nevertheless true.&lt;/p&gt;

&lt;p&gt;The most telling example of that is when Deja first put up all the old Usenet news articles for browsing. My good friend Randal Schwartz went in and discovered that of the hundreds of articles I&amp;rsquo;d posted over the years, only one article was not a follow-up to some else&amp;rsquo;s article. I don&amp;rsquo;t initiate. I have no initiative. I guess that makes me lazy. Oh, well.&lt;/p&gt;

&lt;p&gt;Anyway, I don&amp;rsquo;t remember fifth grade at all. I did terribly that year, and completely blocked it out of my memory. I remember fourth grade and sixth grade just fine though. But then, I did well those years. It all fits. Case closed.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;DangerBall&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;But now I have this other psychological mystery I&amp;rsquo;m trying to solve. Maybe it&amp;rsquo;s just some kind of compulsion, but I &lt;em&gt;know&lt;/em&gt; deep down that I have to talk about screensavers for this speech. But why? Why, why, why, why, why? It&amp;rsquo;s irrational and illogical.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s what the rest of this talk is about. It all ties in with what happened to me last year, and it also all ties in with Perl.&lt;/p&gt;

&lt;p&gt;So about what happened to me last year: I had a mutation. That&amp;rsquo;s nothing new — people have mutations all the time. So do screensavers. Many screensavers, such as this one, are based simply on showing you a mutating object, moving around the screen. That&amp;rsquo;s pretty natural for screensavers. After all, the original purpose of screensavers was to save your screen, and that meant not putting the same picture up in the same place for an extended period of time. Of course, a blank screen would serve for that just as well. But, ya know, a blank screen just isn&amp;rsquo;t very interesting. So we get these various mutator objects instead.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cubenetic&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one does interweaving cubes.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Engine&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cute mutator. The little engine that could, if you will&amp;hellip;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;FlipFlop&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one does flip flops. Being good at flip-flops is a prerequisite for designing computer languages. At least, I find that I have to do frequent flip-flops in the design of Perl 6. I probably shouldn&amp;rsquo;t over-generalize that to other language designers, who by and large are smarter than I am.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Gears&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of Perl 5. It&amp;rsquo;s cool.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Gears (planetary)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of Perl 6. It&amp;rsquo;s just the same as Perl 5, only cooler.&lt;/p&gt;

&lt;p&gt;Planetary gears are very scalable — you can get a large increase or decrease in revolutions out of them. For that reason, planetary gears are often used in the engines of high-performance turboprop aircraft. Definitely industrial-strength stuff.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bouboule, 3d&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one&amp;rsquo;s kind of ugly, but then it&amp;rsquo;s supposed to be viewed in 3D using those red/blue glasses. For some reason it reminds me of my stomach when I&amp;rsquo;m not feeling so good.&lt;/p&gt;

&lt;p&gt;Which reminds me to get back to the subject. Mutations. I had one, in my stomach. It&amp;rsquo;s a pretty well understood mutation, as these things go. It&amp;rsquo;s the sort of mutation that produces a stomach tumor.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Mirrorblob, color&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;As I stood in this exact spot a year ago, I told you that I&amp;rsquo;d been in the hospital for four days with a bleeding ulcer. What I did not know at that time was that the ulcer was on a tumor the size of my fist toward the lower end of my stomach. I did not know that I would have the lower half of my stomach removed two weeks after OSCON. I did not know that I would have complications, and complications on my complications, recursively. I did not know that I&amp;rsquo;d be spending a total of two months in the hospital.&lt;/p&gt;

&lt;p&gt;I was pretty ignorant back then.&lt;/p&gt;

&lt;p&gt;You see, when you have bleeding ulcers on your vacation in Kauai, the doctor there tells you that he saw the ulcers, but he doesn&amp;rsquo;t tell you that he saw them on a tumor. What he does tell you is to see a gastroenterologist the moment you get home. After all, he doesn&amp;rsquo;t want to ruin the rest of your vacation. Never mind that you&amp;rsquo;ve spent it in the hospital.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;SpeedMine&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;So after last year&amp;rsquo;s OSCON I go in for another gastric endoscopy. That&amp;rsquo;s where they slide a tube down your throat to look at what&amp;rsquo;s down there. This is rather unpleasant, so they use what&amp;rsquo;s called conscious sedation. They spray numbing gunk in the back of your throat, and put you partway under. You can kind of remember it afterwards, but not the bad bits.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Spotlight (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Then the doctor looks around, much like our ant spotlight we had earlier. He can&amp;rsquo;t see too much at a time, but he spots the tumor, and takes pictures of it. He can&amp;rsquo;t tell how big it is, because endoscopes are monocular, and you can&amp;rsquo;t really tell how close you are to what you&amp;rsquo;re looking at.&lt;/p&gt;

&lt;p&gt;A lot of screensavers are based on the spotlight metaphor. Here&amp;rsquo;s another:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bumps (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;And another.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Zoom, lenses (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;In this case, the size of the spotlight is the whole screen, like one of those useless digital zooms on your digital cameras. But it&amp;rsquo;s still just viewing one portion of the picture, whether that&amp;rsquo;s part of a camel, or part of an elephant. Or part of your stomach. My stomach, in this case.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Goop&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;At this point my gastroenterologist refers me to a surgeon. Since we don&amp;rsquo;t know how big the tumor is, I have to drink a bunch of coconut-flavored white gludge and go in for a CT scan. I don&amp;rsquo;t like coconut. I don&amp;rsquo;t like white gludge. But I do it anyway. It makes some of your body less transparent than other parts. Some screensavers are about transparency. Others are about opacity.&lt;/p&gt;

&lt;p&gt;Like the distinction between fermions and bosons, objects in screensavers have to decide whether to bounce off each other or allow overlap. And if they overlap, whether one of them hides the other or not. In this case, we see through the overlap. Many screensavers just pile things on top of each other, like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cynosure&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I find these screensavers disturbing, because they remind me that with the passage of time, everything old gets covered over by new things. It&amp;rsquo;s a metaphor of past, present, and future.&lt;/p&gt;

&lt;p&gt;After my CT scan, the surgeon calls my wife even before I get home, and asks if I could go into surgery the very next day to have the tumor removed. She says yes. So I do. Sometimes the future is closer than you think.&lt;/p&gt;

&lt;p&gt;General anesthesia is not like sleeping. My dreams usually kind of look like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pipes&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;But general anesthesia looks like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Blank&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You have no present, just a past, and (hopefully) a future. You don&amp;rsquo;t dream — it&amp;rsquo;s just a big blank until you come out from under.&lt;/p&gt;

&lt;p&gt;Then they put you on morphine, so you won&amp;rsquo;t hurt. Instead, you itch. Did you know morphine makes you itch? Boy, does it ever. And you have really weird dreams. Dreams kind of like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bubbles, fastest, no hide&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Or this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Lament&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I had really weird dreams on morphine. Didn&amp;rsquo;t like those screensavers. But a wonderful poem came to me — it started out &amp;ldquo;In Xanadu did Kubla Khan a stately pleasure dome decree.&amp;rdquo; But I can&amp;rsquo;t remember the rest of it.&lt;/p&gt;

&lt;p&gt;Just kidding. But the place I did visit in my dreams was Xanadu, and it wasn&amp;rsquo;t a very nice place to be. I prefer normal dreams.&lt;/p&gt;

&lt;p&gt;When I was awake, I thought I was choking to death because of the tube down my nose to my stomach. I wasn&amp;rsquo;t, but I thought I was. It wasn&amp;rsquo;t until I cajoled a nurse into looking down my throat with a flashlight that I was mollified. That nurse became my favorite nurse, in a Florence Nightingale sort of way. I had several other favorite nurses too, for various reasons.&lt;/p&gt;

&lt;p&gt;But then I had complications. As some of you know, twenty years ago I went blind in my right eye due to a case of shingles in my cornea. Shingles is just a recurrence of chicken pox virus.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s a screensaver called &amp;ldquo;NerveRot&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;NerveRot&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I love this screensaver, in a perverse sort of way. It&amp;rsquo;s so&amp;hellip;so&amp;hellip;in your face. It&amp;rsquo;s unnatural in so many ways. It looks like a fractal, but its fractal dimensionality isn&amp;rsquo;t constant.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t love real nerverot. And shingles is a form of nerve rot, one of those things that kicks you when you&amp;rsquo;re down. And I was down. I got a shingles infection on both sides of my head, which was unusual. It took me several days to figure it out. Fortunately, they have drugs to suppress it. But instead of getting out of the hospital in five days, it took ten. The good news was that my pathology analysis results came back saying that the excised tumor looked relatively benign in all respects except for its large size.&lt;/p&gt;

&lt;p&gt;The bad news was that I was home for only twenty-four hours, and had to go back to emergency. I had never been more nauseous in my life, and to compound that, I found that even if I wanted to, I couldn&amp;rsquo;t upchuck due to spasms in my esophagus. If you&amp;rsquo;ve ever had a tube down your nose, you&amp;rsquo;ll know that you never want to have one again, but I was so miserable that I asked for one. It was a great improvement.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Compass&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This screensaver was written to be nauseating, and I think it succeeds admirably in that. In fact, it really bugs me that I don&amp;rsquo;t know why it has two needles pointing in different directions. I had far too many needles going in various directions when I was in the hospital. I hope that other needle there isn&amp;rsquo;t the altimeter.&lt;/p&gt;

&lt;p&gt;Anyway, this reminds us that an open source project needs a leader who has a good sense of direction, who doesn&amp;rsquo;t change his mind continually about things like, say, how double-quoted strings ought to process interpolations, or which bits of the parser should work top down, and which bottom up. If you can find such a leader for Perl 6, that would definitely be an improvement over me. At least in some respects. Of course, I have the advantage of rules one and two. Rule 1: Larry is always right. Rule 2: Larry will still be right even after he changes his mind. Now I&amp;rsquo;m thinking there should also be a Rule 3, just in case. Rule 3 would say that Larry does not need to continue to be right after he&amp;rsquo;s dead.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;BSOD &amp;quot;Blue Screen of Death&amp;quot;&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I was sure I was dying. I went back into the hospital, and stayed there for weeks. The bad news was that my surgery site had scarred up, and I couldn&amp;rsquo;t eat or drink anything. I got all my nutrients and fluids through an IV line.&lt;/p&gt;

&lt;p&gt;The good news was that if I waited long enough, it might open up again of its own accord.&lt;/p&gt;

&lt;p&gt;That bad news was that after several weeks, it didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;The good news was that they had ways of putting tubes in to bypass the obstruction. So I had more procedures.&lt;/p&gt;

&lt;p&gt;The bad news was the procedures didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;The good news was that they had a way to revise the first surgery.&lt;/p&gt;

&lt;p&gt;The bad news was that fixing the first surgery meant going through surgery all over again six weeks after my first surgery. Meanwhile, I spent a lot of time idling.&lt;/p&gt;

&lt;p&gt;I think I started developing an empathy for screensavers about that time. The poor things just have to sit there and twiddle their thumbs. I was simultaneously bored and unable to concentrate. My friends sent me books that I couldn&amp;rsquo;t read. The only thing I could concentrate on long enough was crossword puzzles. With a crossword puzzle, you can quit after a clue or two, and still make overall progress, even if your brain is crashing every few minutes. As mine was at that point.&lt;/p&gt;

&lt;p&gt;This particular screensaver fools me more often than I care to admit. The problem is that the more computers you&amp;rsquo;ve used, the more different kinds of crashes you&amp;rsquo;ve seen. And mentally, you classify them all in the &amp;ldquo;Oh, shit!&amp;rdquo; category, which is a category the brain is very efficient at processing.&lt;/p&gt;

&lt;p&gt;On the other hand, the part of your brain that says, &amp;ldquo;Hey, that&amp;rsquo;s the crash screen for a different operating system, dufus!&amp;rdquo; — that part operates at a much slower pace. This is actually a profound psychological truth. Back in the heyday of Prolog, everyone was bragging about how many LIPs they were able to process. That&amp;rsquo;s logical inferences per second. But your brain applies many different LIPs ratings depending on how urgent the problem seems to be. The brain is chock full of shortcuts, and orthogonality be screwed. Optimizers cheat, and sometimes they get caught cheating. With this screensaver, you can catch your own brain&amp;rsquo;s optimizer cheating.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pedal&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I got to go home for a week before my second surgery. I could even walk around my neighborhood with a portable IV pack on my back. I remember admiring some of the flowers in the neighborhood. They were a welcome sight after the hospital. But, you know, it&amp;rsquo;s really scary getting all your food and water through a tube. Especially the water. I got to be home for my birthday, but I couldn&amp;rsquo;t eat anything. Well, OK, I cheated. I ate one Popsicle, and watched it drain back out of my stomach tube. At least it tasted good.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Blank&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;My second surgery was a success. Eventually. I had to go through the same morphine rigmarole again. At least this time they put in a stomach drain tube so I didn&amp;rsquo;t have to put up with a nose tube. But I had complications again, this time with some internal bleeding. I lost enough blood that they were seriously considering giving me a transfusion. But I squeaked through, and eventually came home. This time I had a feeding tube, which was in some ways an improvement over an IV, and in other ways not. In particular, I was now housebound, because the stomach feeding pump was not as portable as the IV pump. I had to make do with fake foliage on my computer screen.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Forest&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This screensaver makes use of an ancient technique. If you&amp;rsquo;re working in an opaque medium such as oil paint, draw the background first. Then paint the foreground over that. This may seem like cheating, but we use rules of thumb like this all the time. Every time you do lexical scoping, you&amp;rsquo;re treating the outer lexical scope like a background, and the inner lexical scope like a foreground. That&amp;rsquo;s why it&amp;rsquo;s so natural to talk about an inner variable hiding an outer variable of the same name.&lt;/p&gt;

&lt;p&gt;Can you begin to see why I have a special mental relationship with these screensavers? Maybe I&amp;rsquo;m a little bit crazy, but I can&amp;rsquo;t decide if it&amp;rsquo;s psychotic or neurotic. You know the difference, don&amp;rsquo;t you? A psychotic thinks that 2 + 2 = 5. A neurotic knows that 2 + 2 = 4, but it makes him nervous.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just a simple, everyday obsession.&lt;/p&gt;

&lt;p&gt;Eventually, I learned to eat again, and got off my feeding tube. I&amp;rsquo;ll never take eating for granted again. I&amp;rsquo;ll never take tubes for granted again either. Now that I&amp;rsquo;m out of the hospital, here&amp;rsquo;s what my dreams look like:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pipes&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Only they mean something different now.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Endgame&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I recovered pretty rapidly, physically speaking. But it took months to really get back into gear mentally. Not until this spring did I feel like I was competent to write Apocalypse 12, the one about object-oriented Perl. All in all, I&amp;rsquo;d estimate that my little medical escapade set the Perl 6 design back six months or so. But Apocalypse 12 was the last big hurdle. With that, the design of Perl 6 can be said to be largely complete.&lt;/p&gt;

&lt;p&gt;We are now in the endgame, which is the name of this screensaver. Now that the Parrot engine is in such fine shape, it&amp;rsquo;s time to concentrate on writing a fine Perl 6 compiler to target it.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Anemone&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Open source projects start out small and grow over time. They send out tendrils in directions you don&amp;rsquo;t expect. Perl started as a text-processing language. Look, now it&amp;rsquo;s a system-administration language. And look over there, now it&amp;rsquo;s a web-programming language, too. Oh, wait, now it&amp;rsquo;s for genomics research.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll note sometimes the tendrils withdraw, like a squid&amp;rsquo;s tentacles. That&amp;rsquo;s just the natural process of deciding which things belong in the core. In squid terms, what to eat. Perl has eaten a number of things in the last 15 years. Some of them caused indigestion, but hey, that&amp;rsquo;s life.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice it&amp;rsquo;s cyclical. All successful open-source projects go through periods of expansion followed by periods of redesign and reintegration. It&amp;rsquo;s a natural cycle. You just have to try and not starve while you&amp;rsquo;re molting. Perl has been molting for a few years now. Or maybe it&amp;rsquo;s been more of a metamorphosis in a cocoon. Anyway, Perl 6 is going to start emerging this year. It&amp;rsquo;s going to be exciting.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Atlantis&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You might say we&amp;rsquo;re going to have a whale of a time.&lt;/p&gt;

&lt;p&gt;The latest National Geographic has an article about squid who change their colors. Often they have reasons for changing, but sometimes I think they just change for the heck of it. A couple of years ago I was snorkeling in the Bahamas, and got to watch a school of cuttlefish swimming along. They weren&amp;rsquo;t hiding or courting or anything like that, but as they swam along they would all change color to brown, then yellow, then red, then green. It&amp;rsquo;s like, &amp;ldquo;Hey guys, wouldn&amp;rsquo;t it be cool if we all ran the same screensaver at the same time?&amp;rdquo; Sort of a cultural identity thing, I suppose.&lt;/p&gt;

&lt;p&gt;The interesting thing was that while I was watching, they forked. You know, like BSD. One group of cuttlefish went off one way, and the other group went off another. Maybe they had a personality conflict. Maybe they had a fight over licensing. I dunno. But the cool thing was that the moment they forked, they desynchronized their screensavers. This group wanted to stay green, while the other group wanted to go on and try out some purple. Who knows what goes on in the mind of a cuttlefish — it&amp;rsquo;s possible that they split specifically over the color issue. Wouldn&amp;rsquo;t be the first open-source project to split over the color of the bike shed.&lt;/p&gt;

&lt;p&gt;I predict that within 10 years, we&amp;rsquo;ll have clothing that runs screensavers, and what&amp;rsquo;s more, we&amp;rsquo;ll have gangs of people running around with synchronized displays to show that they &amp;ldquo;belong.&amp;rdquo; Schools will then outlaw gang screensavers, and impose uniform screensavers on their students. Someone will hack into your clothes processor just to get you into trouble with the teachers. Norton and McAfee will sell software to make sure your clothes keep saying what you want them to say, and not what someone else wants them to say. Or show&amp;hellip;&lt;/p&gt;

&lt;p&gt;Or maybe by then your shirt will be able to authenticate all the IPv6 addresses it communicates with. The hard part is going the other way — how are you going to authenticate your shirt to someone else? Are you going to bother to set up an unspoofable identity for every shirt in your closet?&lt;/p&gt;

&lt;p&gt;Of course, if your shirt is programmable, you really only need one of them. Or maybe you need two, for when the other one is in the wash. I suppose geeks can get away with owning a single programmable shirt. For some definition of &amp;ldquo;get away with.&amp;rdquo; Maybe it&amp;rsquo;s more like &amp;ldquo;get away &lt;em&gt;from&lt;/em&gt;,&amp;rdquo; as in &amp;ldquo;get away from me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Molecule (sucrose)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Anyway, that&amp;rsquo;s another talk. In fact, it&amp;rsquo;s a talk I already gave five years ago. Some of you will recognize this screensaver. It wasn&amp;rsquo;t a screensaver yet when I gave my third State of the Onion talk, but now it is. That&amp;rsquo;s progress. Cool. But watch out for those pheromones. And if you&amp;rsquo;re on a low-carb diet, don&amp;rsquo;t even think about looking at this picture of sugar.&lt;/p&gt;

&lt;p&gt;Well, enough about chemistry. I already talked about that once. If I start repeating myself, you&amp;rsquo;ll think I&amp;rsquo;m getting old. (I &lt;em&gt;am&lt;/em&gt; getting old, but I don&amp;rsquo;t want you to think it.) Anyway, you want to hear something fresh. Fresher than a geek&amp;rsquo;s T-shirt, anyway.&lt;/p&gt;

&lt;p&gt;In any event, the real geeks will probably just have the screen tattooed on their chest. Or their stomachs. Teletubbies &amp;ldquo;R&amp;rdquo; us.&lt;/p&gt;

&lt;p&gt;Anyway, back to freshness.&lt;/p&gt;

&lt;p&gt;Now, there&amp;rsquo;s two ways one can go about keeping a fresh outlook on life. One way that works, or at least works for some people, is to suddenly change course in midstream. Call it the worms approach.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Shadebobs&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;The problem with worms is that they don&amp;rsquo;t learn much from history. The only history they remember is where they just were, which is where they don&amp;rsquo;t want to be now. I&amp;rsquo;ve known some people like that.&lt;/p&gt;

&lt;p&gt;The other approach to keeping fresh it to not be quite so, um, random. In other words, learn a little more from history. You can do that either by depth or by breadth. In any case you&amp;rsquo;re keeping more history state around than just a single position.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Demon, slow&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Software projects have history, and state. Here you see various software projects feeding on the disorder around them. I&amp;rsquo;d like to think some of them are open-source projects, but doubtless some of the more aggressive ones are closed source.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Demon, fast&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Over the long term, this is also a view of how dominant species tend to wipe out their smaller competitors. This is also, unfortunately, a picture of where the business world is heading these days. At the rate we&amp;rsquo;re going, we&amp;rsquo;ll end up with just a few large corporate players because right now we have the best government big business can buy. You can see just a few little holdouts that survive in tiny ecological niches only because they&amp;rsquo;re parasitic on the large beasts.&lt;/p&gt;

&lt;p&gt;Notice also that nearly all the original information has been destroyed in the name of progress. Archeologists will have to study the leftover crumbs, as they always have. Necessarily, they will over-generalize, just as historians always over-generalize. That&amp;rsquo;s all you can do when too much has been forgotten. Of course, I&amp;rsquo;m over-generalizing about history here. But screensavers that forget things make me sad.&lt;/p&gt;

&lt;p&gt;Speaking of history, I recently got to see Tom Stoppard&amp;rsquo;s play, &lt;em&gt;Arcadia&lt;/em&gt;. I should say, I got to see it &lt;em&gt;again&lt;/em&gt;. Every time around, I get something a little different from it. It&amp;rsquo;s an iterated algorithm.&lt;/p&gt;

&lt;p&gt;For another example, take Perl. Paul Graham has opined (Hi, Paul) that there are a lot of spectacularly original ideas in Perl, but I&amp;rsquo;d like to correct that impression. There are indeed a few original ideas in Perl, but most of the ideas were stolen. Perl has learned a spectacular number of things from history. Paul was right about one thing, though — some of the things Perl learned from history were spectacularly &lt;em&gt;wrong&lt;/em&gt;. That&amp;rsquo;s not to say that some of my original ideas weren&amp;rsquo;t also spectacularly wrong. But hey, that&amp;rsquo;s what iterated algorithms are for. &amp;ldquo;Release early, release often&amp;rdquo; is the old phrase. The new catchphrase seems to be &amp;ldquo;Learning in Public.&amp;rdquo; Same sort of thing.&lt;/p&gt;

&lt;p&gt;[At this point I skipped to the final section for lack of time, but you can see the rest of my padding material here.]&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Triangle&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This makes some pretty good-looking mountains. It cheats, of course, compared to how Mother Nature does it. This sort of algorithm doesn&amp;rsquo;t simulate plate tectonics or erosion, so you&amp;rsquo;re not going to get good mountain ranges or river valleys out of it. But our computers are still far too slow to do adequate simulation of all of physics, so we live in an era where &amp;ldquo;as good as we can do&amp;rdquo; has to be &amp;ldquo;good enough.&amp;rdquo; The brute-force approach would often take too long, so our algorithms tend to cheat all over the place. In the case of a fractal landscape like this, that can actually be a psychological advantage, insofar as the artificial landscape comes out with a slightly alien feel, which people seem to like, in moderation.&lt;/p&gt;

&lt;p&gt;The problem with exploring oversimplifications, however, is that they&amp;rsquo;re not actually as interesting as real life over the long haul. At least, not individually. Maybe there are enough oversimplifications to explore that they emulate the richness of reality merely by being sufficiently different from each other. Certainly all the books ever written don&amp;rsquo;t add up to the complexity of the universe, since obviously they&amp;rsquo;re a part of it. And yet through the power of imagination, an individual book can give us the impression of worlds beyond our own.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure how this relates to Perl, except to say that Perl has always been about being &amp;ldquo;good enough&amp;rdquo; rather than &amp;ldquo;perfect.&amp;rdquo; Good enough is often a lot more interesting than perfect. It&amp;rsquo;s almost as if the imperfections that keep &amp;ldquo;good enough&amp;rdquo; from being &amp;ldquo;perfect&amp;rdquo; are the very features that make things interesting, because there are a lot more ways for things to go wrong than for them to go right. Even if it&amp;rsquo;s just a little wrong. A lot of these screensavers are a little bit wrong. But they&amp;rsquo;re interestingly wrong.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Circuit&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t gonna show this one, but last Wednesday I was suddenly in the state that it looked like I wasn&amp;rsquo;t going to be able to show any of these screensavers. Namely, my laptop completely crapped out. It was too late to send it in for repair and have any hope of getting it back again in time. I didn&amp;rsquo;t have the money to buy a new laptop, nor the time to install Fedora Core 2 on one if I had bought one. I couldn&amp;rsquo;t guarantee that I could find a laptop to borrow that would have Fedora Core 2 on it, at least, not in time to make sure I got these screensavers all lined up in a row. Fortunately, I was pretty sure I knew what was wrong with my laptop, since the power light had been flickering when I wiggled the cord.&lt;/p&gt;

&lt;p&gt;So on Thursday I spent all day dismantling my laptop to get at the motherboard. I don&amp;rsquo;t know why they make it so you have to remove everything else before you can remove the motherboard, but that&amp;rsquo;s basically what you have to do. Then I went down to Fry&amp;rsquo;s and bought the teeny-tiniest little soldering iron they sell. I went back home, and I got that motherboard out and I soldered it with the complete expectation that I was probably ruining the motherboard completely. I put it back together again, and only had two extra screws when I was done. I still don&amp;rsquo;t know what they belong to. But it doesn&amp;rsquo;t matter. &amp;lsquo;Cause I booted that sucker up, and it worked. And that&amp;rsquo;s the laptop I&amp;rsquo;m showing you these screensavers on. How many of you have ever tried to solder your motherboard? OK, keep your hands up if the motherboard still worked afterwards. You guys know how I feel right now.&lt;/p&gt;

&lt;p&gt;Of course, the joke&amp;rsquo;s kind of on me. It broke again just before I left, and I had to resolder it again last night&amp;hellip; I have a great deal of empathy for my computer, having to undergo two surgeries like that&amp;hellip;&lt;/p&gt;

&lt;p&gt;Many screensavers are based on bouncing balls.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pong&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Pong, a classic. The first version didn&amp;rsquo;t even use a computer.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;BouncingCow&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m waiting for the version that does a bouncing camel.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Boxed&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Multiple bouncing balls in a box are a metaphor for community. Notice how the escaping balls explode. This is what happens to people who move from Perl to Ruby.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Attraction, balls&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Attraction and repulsion. Some people find Perl attractive at a distance and repulsive up-close. Others have just the opposite reaction.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Eruption&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;With small enough balls, you start getting into particle simulations, which are good for flame-like effects. But if you look closely here, you can actually see the little balls bouncing when they hit the ground.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Euler2d&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Communities are defined by their centers, and often have a fractal quality about them. The people circulating further in are more involved than the people farther out. The insiders say things like, &amp;ldquo;We need to make Perl 6 the best language for most common tasks.&amp;rdquo; The people further out do not feel absolutely bound to one community or another. They say things like, &amp;ldquo;Use whatever language is appropriate for the task at hand.&amp;rdquo; The outer people are more likely to drift from one community to another. That&amp;rsquo;s OK. In fact, it&amp;rsquo;s healthy.&lt;/p&gt;

&lt;p&gt;When it gets unhealthy is when you start drawing boundaries between communities, and you start being exclusive. Or worse, mandatorily inclusive. Then you start building things like the Berlin wall to keep people inside your community. In anthropological terms, that&amp;rsquo;s tribalism. A tribal Perl programmer might say, &amp;ldquo;If you leave the Perl tribe to go and join the Python tribe, we will hunt you down, cook you, and eat you.&amp;rdquo; Or if you join the Ruby tribe, you will explode. By and large, I am not in favor of tribalism.&lt;/p&gt;

&lt;p&gt;Except for my tribe, of course.&lt;/p&gt;

&lt;p&gt;[Here&amp;rsquo;s the ending I skipped to.]&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;VidWhacker (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I could go on and on. There are over 200 screensavers that come with X windows these days. We haven&amp;rsquo;t begun to talk about some of the fancier ones that you can download that do useful work, like searching for extraterrestrial intelligence, or finding new cancer drugs. But the ones I&amp;rsquo;ve talked about today are the once I notice in my kitchen when I walk past my Linux box. I notice them, and I think about them, and I think about what they mean. So I hope you&amp;rsquo;re starting to get an appreciation for them.&lt;/p&gt;

&lt;p&gt;But I don&amp;rsquo;t think I&amp;rsquo;ve really adequately conveyed yet why I wanted to show you these screensavers. Last night, when I tried to explain all this to my family, I suddenly found myself getting rather teary-eyed about it all. It&amp;rsquo;s not so much the fact that the individual screensavers are so interesting. It&amp;rsquo;s really about how they relate to each other, and to the world.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of talk lately about 100-year languages and the like, and while it&amp;rsquo;s fun to speculate on the nature of such long-term enterprises, the history of futurology warns us that the only sure prediction is that all predictions are sure to be inaccurate. The things that are relatively predictable are not fashionable. They&amp;rsquo;re small, but universal. Like screensavers. I predict we&amp;rsquo;ll have screensavers in a 100 years, even if we don&amp;rsquo;t have screens any more, and all our brains take their inputs via neural implants. And those future screensavers will relate to each other just the same way as our screensavers, even if they are different screensavers.&lt;/p&gt;

&lt;p&gt;Think about this little program called &lt;code&gt;xscreensaver-demo&lt;/code&gt; that I&amp;rsquo;ve been using to show you these screensavers. Within this program, all screensavers are considered equal. It&amp;rsquo;s like in a hospital where all the nurses on your floor are considered to be more or less interchangeable. And indeed, they purposefully mix things around so you get different nurses each day. But when they do that, you discover that, in fact, all the nurses are different. All the doctors are different. And they&amp;rsquo;re all wonderful in their own way. Likewise, every screensaver is different, and you can relate to them in different ways.&lt;/p&gt;

&lt;p&gt;They are so equal, yet so unequal at the same time. And last night I realized that this was what was important about Perl, and about the Perl community. Not a fancy grammar, or fast engine, or clever optimizer. Those things are all nice, but the heart of Perl the language is all those modules that fit into Perl like interchangeable screensavers, and yet are all so different from each other. And the people who write those modules, and grammars, and engines — they&amp;rsquo;re all equal in the eyes of the Perl community, and yet all so different.&lt;/p&gt;

&lt;p&gt;So it was really only last night that I figured out why I had to talk about screensavers tonight. And that reason is you. You&amp;rsquo;re my little flock of screensavers. You&amp;rsquo;re my nurses and my doctors and my patients. You&amp;rsquo;ve performed multiple surgeries on my soul, and let me perform surgeries on your souls. We&amp;rsquo;re a hospital of people helping each other, performing random acts of beauty for each other, even when no one is watching but God.&lt;/p&gt;

&lt;p&gt;These days I may be missing the bottom of my stomach, but I still have the bottom of my heart. So I would like to thank you from the bottom of my heart for being precisely who you are.&lt;/p&gt;

&lt;p&gt;Thank you. Thank you. Thank you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State of the Onion 2003</title>
      <link>http://localhost:1313/pub/2003/07/16/soto2003.html/</link>
      <pubDate>Wed, 16 Jul 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/07/16/soto2003.html/</guid>
      <description>&lt;p&gt;This is the 7th annual State of the Perl Onion speech, wherein I tell you how Perl is doing. Perl is doing fine, thank you. Now that that&amp;rsquo;s out of the way, I&amp;rsquo;d like to spend the rest of the time telling jokes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide1.jpg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In fact, the conference organizers have noticed that I spend most of the time telling jokes. So each year they give me a little less time, so I have to chop out more of the serious subject matter so as to leave time for the jokes.&lt;/p&gt;

&lt;p&gt;Extrapolating several years into the future, they&amp;rsquo;ll eventually chop my time down to ten seconds. I&amp;rsquo;ll have just enough time to say: &amp;ldquo;I&amp;rsquo;m really, really excited about what is happening with Perl this year. And I&amp;rsquo;d like to announce that, after lengthy negotiations, Guido and I have finally decided&amp;hellip; &amp;lt;gong&amp;gt; [&amp;ldquo;Time&amp;rsquo;s up. Next speaker please&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;Well, you didn&amp;rsquo;t really want to know that anyway&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since this is a State of the Union speech, or State of the Onion, in the particular case of Perl, I&amp;rsquo;m supposed to tell you what Perl&amp;rsquo;s current state is. But I already told you that the current state of Perl is just fine. Or at least as fine as it ever was. Maybe a little better.&lt;/p&gt;

&lt;p&gt;But what you really want to know about is the future state of Perl. That&amp;rsquo;s nice. I don&amp;rsquo;t know much about the future of Perl. Nobody does. That&amp;rsquo;s part of the design of Perl 6. Since we&amp;rsquo;re designing it to be a mutable language, it will probably mutate. If I did know the future of Perl, and if I told you, you&amp;rsquo;d probably run away screaming.&lt;/p&gt;

&lt;p&gt;As I was meditating on this subject, thinking about how I don&amp;rsquo;t know the future of Perl, and how you probably don&amp;rsquo;t &lt;em&gt;want&lt;/em&gt; to know it anyway, I was reminded of a saying that I first saw posted in the 1960&amp;rsquo;s. You may feel like this on some days.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We the unwilling,
led by the unknowing,
are doing the impossible
for the ungrateful.
We have done so much for so long with so little
We are now qualified to do anything with nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide2.jpg&#34; alt=&#34;blue collar&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I think of it as the Blue-Collar Worker&amp;rsquo;s Creed.&lt;/p&gt;

&lt;p&gt;This has been attributed to various people, none of whom are Ben Franklin, Abraham Lincoln, or Mark Twain. My favorite attribution is to Mother Teresa. She may well have quoted it, but I don&amp;rsquo;t think she coined it, because I don&amp;rsquo;t think Mother Teresa thought of herself as &amp;ldquo;unwilling&amp;rdquo;. After all, Mother Teresa got a Nobel prize for being one of the most willing people on the face of the earth.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also been attributed to the Marines in Vietnam, and it certainly fits a little better. But since I grew up in a Navy town, I&amp;rsquo;d like to think it was invented by a civilian shipyard worker working for the Navy. In any event, I first saw it posted in a work area at Puget Sound Naval Shipyard back in the 1960&amp;rsquo;s. Now, you may well wondering what I was doing in a Naval Shipyard in the 1960&amp;rsquo;s. That&amp;rsquo;s a secret.&lt;/p&gt;

&lt;p&gt;Anyway, you may also be wondering why I brought it up at all. Well, last year I used the table of contents from an issue of Scientific American as my outline. This year I&amp;rsquo;d like to use this as my outline.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to, but I won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;But if I did, here&amp;rsquo;s what I&amp;rsquo;d say.&lt;/p&gt;

&lt;p&gt;From the postmodern point of view, this is a text that needs to be deconstructed. It was obviously written by someone in a position of power pretending not to be. And by making light of the plight of blue collar workers, and allowing the oppressed workers to post this copy-machine meme in the workplace, this white-collar wolf in blue-collar sheep&amp;rsquo;s clothing has managed to persuade the oppressed workers that being powerless is something to be proud of.&lt;/p&gt;

&lt;p&gt;Now, some of you young folks are too steeped in postmodernism to know anything about postmodernism, so let&amp;rsquo;s review. Postmodernism in its most vicious form started out with the notion that there exist various cultural constructs, or texts, or memes, that allow some human beings to oppress other human beings. Of course, in Soviet Russia it&amp;rsquo;s the other way around. Which is why they managed to deconstruct themselves, I guess.&lt;/p&gt;

&lt;p&gt;Anyway, deconstructionism is all about throwing out the bad cultural memes, where &amp;ldquo;bad&amp;rdquo; is defined as anything an oppressed person doesn&amp;rsquo;t like. Which is fine as far as it goes, but the spanner in the works is that you can only be an oppressed person if the deconstructionists say you are. Dead white males need not apply. Fortunately, I&amp;rsquo;m not dead yet. Though I&amp;rsquo;m trying. As some of you know, several weeks ago I was in the hospital with a bleeding ulcer. I guess I&amp;rsquo;m a little like Soviet Russia. I oppress myself, so I deconstruct myself.&lt;/p&gt;

&lt;p&gt;Oh, by the way, I got better. In case you hadn&amp;rsquo;t noticed.&lt;/p&gt;

&lt;p&gt;Though I&amp;rsquo;m not allowed to drink anything brown anymore. Sigh. That&amp;rsquo;s why this speech is so boring — I wrote it under the non-influence.&lt;/p&gt;

&lt;p&gt;But back to postmodernism. Postmodern critics have invented a notation for using a word and denying its customary meaning at the same time, since most customary meanings are oppressive to someone or other, and if not, they ought to be. Or something like that.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m going to borrow that notation for my own oppressive purposes, and strike out a few of these words that don&amp;rsquo;t mean exactly what I want them to mean. I hope that doesn&amp;rsquo;t make me a postmodern critic. Or maybe it does. As Humpty Dumpty said, the question is who&amp;rsquo;s to be master, that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start by striking out &amp;ldquo;unwilling&amp;rdquo;, because there are quite a few willing people around here. Or at least willful.&lt;/p&gt;

&lt;p&gt;And let&amp;rsquo;s strike out &amp;ldquo;unknowing&amp;rdquo; too, because you wouldn&amp;rsquo;t be sitting here listening to us leaders here tonight if you thought we didn&amp;rsquo;t know anything. On the other hand, maybe you just came for the jokes&amp;hellip;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s strike out the &amp;ldquo;impossible&amp;rdquo;. Actually, I hesitate to strike that one out, because what we&amp;rsquo;re trying to do with Perl is to be all things to all people, and in the long run that is completely impossible, technically, socially, and theologically speaking.&lt;/p&gt;

&lt;p&gt;But that doesn&amp;rsquo;t stop us from trying. And who knows, maybe more of it is possible than we imagine.&lt;/p&gt;

&lt;p&gt;We definitely have to strike out ungrateful, because we know many people are grateful. Nevertheless, a number of people find it impossible to be grateful, and we should be working to please them as well. Love your enemies, and all that. Another impossible task. Or&amp;hellip; perhaps the same one.&lt;/p&gt;

&lt;p&gt;I like to please people who did not expect to be pleased. One day when I was a lot younger than I am now, I performed a piece on my violin. A lady came up to me afterward and said, &amp;ldquo;You know, I don&amp;rsquo;t like the violin. But I liked that.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I treasure that sort of compliment, just as I treasure the email messages that say, &amp;ldquo;I had given up on computer programming because it wasn&amp;rsquo;t any fun, and then I discovered Perl.&amp;rdquo; That&amp;rsquo;s what I mean when I say we should work to please the people who don&amp;rsquo;t expect to be grateful.&lt;/p&gt;

&lt;p&gt;Anyway, back to our Creed here. I can&amp;rsquo;t see anything wrong with the last two lines. In fact, they&amp;rsquo;re directly applicable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have done so much for so long with so little&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are now qualified to anything with nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 6. I suppose I need to strike that out too, since it doesn&amp;rsquo;t really exist yet, except in our heads.&lt;/p&gt;

&lt;p&gt;Well, maybe that&amp;rsquo;s not such a bad outline after all. Let&amp;rsquo;s talk a little more about those things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide10.jpg&#34; alt=&#34;the unwilling&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling&lt;/p&gt;

&lt;p&gt;Here in the open source community, we&amp;rsquo;re willing to help out, but that&amp;rsquo;s because we&amp;rsquo;re &lt;em&gt;not&lt;/em&gt; willing to put up with the status quo. And that&amp;rsquo;s generally due to our inflated sense of Laziness, Impatience, and Hubris. But then a really funny thing happens. A number of us will get together and agree about something that needs doing because of our Laziness, Impatience, and Hubris, and then we&amp;rsquo;ll start working on that project with a great deal of industriousness, patience, and humility, which seem to be the very opposite qualities to those that motivated us in the first place.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried to figure out a rationale for that, but I&amp;rsquo;ve pretty much come to the conclusion that it&amp;rsquo;s not rational or reasonable. It&amp;rsquo;s just who we are. Here&amp;rsquo;s a favorite quotation of mine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The reasonable man adapts himself to the world; the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that all of us agree that this is true. We just can&amp;rsquo;t always agree on what to be unreasonable about. Of course, this was written by George Bernard Shaw, who had his own ideas of the most reasonable ways to be unreasonable. This is, after all, the guy who wrote Pygmalion, upon which the musical My Fair Lady was based, with dear old &amp;lsquo;Enry &amp;lsquo;Iggins and Eliza Dolit&amp;rsquo;le going at each other&amp;rsquo;s throats. And over linguistics of all things. Fancy that.&lt;/p&gt;

&lt;p&gt;The only problem with this quote is that it&amp;rsquo;s false. A lot of progress comes from unreasonable women.&lt;/p&gt;

&lt;p&gt;Well, okay, maybe Shaw meant &amp;ldquo;he or she&amp;rdquo; when he only said &amp;ldquo;he&amp;rdquo;. Still, if we&amp;rsquo;re going to please unreasonable people in the twenty-first century, maybe we need to rewrite it like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide11.jpg&#34; alt=&#34;strike out man and him&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On the other hand, some people are impossible to please. We should probably just strike out &amp;ldquo;George Bernard Shaw&amp;rdquo; since he&amp;rsquo;s a dead white male.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide13.jpg&#34; alt=&#34;unknowing&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s me all over. Which is what the bug said after he hit the windshield.&lt;/p&gt;

&lt;p&gt;Or as the bug&amp;rsquo;s friend said, &amp;ldquo;Bet you don&amp;rsquo;t have the guts to do that again.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Whether I have the guts to do Perl again is another question. My guts are still in sad shape at the moment, according to the doctor&amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, back to &amp;ldquo;me the unknowing&amp;rdquo;. I admit that there&amp;rsquo;s an awful lot that I don&amp;rsquo;t know. I&amp;rsquo;d love to tell you how much I don&amp;rsquo;t know, but I don&amp;rsquo;t know that either.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ll have to talk about what I know instead. If you are so inclined, you may infer that I am totally oblivious to anything I don&amp;rsquo;t talk about today.&lt;/p&gt;

&lt;p&gt;One thing I do know about is the universal architectural diagram. It looks like this.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t have to be chartreuse. How about pink, to match the fireworks up in the corner. I put the fireworks up in the corner there in case you missed the fireworks on the 4th of July.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide14.jpg&#34; alt=&#34;pink&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, this is the universal architectural diagram because you can represent almost any architecture with it, if you try hard enough. Here&amp;rsquo;s a common enough one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide15.jpg&#34; alt=&#34;CPU&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Here we have a bus that&amp;rsquo;s common across the other three components of our computer, the memory, the CPU, and the I/O system. Within the computer we have other entities such as strings, which you can view either as a whole or as a sequence of characters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide16.jpg&#34; alt=&#34;string&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
An integer is just like a string, only it&amp;rsquo;s a sequence of bits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide17.jpg&#34; alt=&#34;integer&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We can go from very small ideas like integers to very large ideas like government:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide18.jpg&#34; alt=&#34;government&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or even alternate forms of government.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide19.jpg&#34; alt=&#34;Borg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The diagram is even more versatile because you can rotate it on its side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide20.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide21.jpg&#34; alt=&#34;right&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, for some reason, this particular orientation seems to engender the most patriotism. It might just be accidental, but if you color it like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide22.jpg&#34; alt=&#34;flag&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
people start thinking about saluting it. Kinda goes with the fireworks, I guess.&lt;/p&gt;

&lt;p&gt;A little more dangerous is this diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide23.jpg&#34; alt=&#34;object&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s amazing how many people will salute that one. And people will even go to war for this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide24.jpg&#34; alt=&#34;class&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But you know, the whole notion of objects like this is that there are ways in which you treat them as a single thing, and ways in which you treat them as multiple things. Every structured object is wrapped up in its own identity. That&amp;rsquo;s really what this little diagram is getting at.&lt;/p&gt;

&lt;p&gt;Well, let&amp;rsquo;s keep rotating it and see what we get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide26.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide27.jpg&#34; alt=&#34;God&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Okay, if you happen to be a Christian of the trinitarian persuasion like me, then you believe that God is a structured object that is simultaneously singular and plural depending on how you look at it. Of course, nobody ever fights about that sort of thing, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide28.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide29.jpg&#34; alt=&#34;left&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s kind of unusual to see the diagram in this orientation, probably due to linguistic considerations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide30.jpg&#34; alt=&#34;one out of many&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But whether you say &amp;ldquo;one out of many&amp;rdquo; or &amp;ldquo;e pluribus unum&amp;rdquo;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide31.jpg&#34; alt=&#34;pluribus&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
it means much the same thing. In a language that reads left to right, perhaps it&amp;rsquo;s more naturally suited to processes that lose information, such as certain kinds of logic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide32.jpg&#34; alt=&#34;or&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Again, we can go from the very small to the very large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide33.jpg&#34; alt=&#34;black hole&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
If you feed three random planets to a black hole, you also lose information. Or at least you hide it very well, depending on your theory of how black holes work.&lt;/p&gt;

&lt;p&gt;If you feed one of these diagrams to a black hole, it turns into a piece of spaghetti.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s not, and say we did.&lt;/p&gt;

&lt;p&gt;Oddly enough, what I&amp;rsquo;d really like to talk about today is Perl. If we look at our goal for the Parrot project, it looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide37.jpg&#34; alt=&#34;Borg Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Oops, wrong slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide38.jpg&#34; alt=&#34;Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That is, Parrot is designed to be a single engine upon which we can run both Perl 5 and Perl 6. And&amp;hellip; stuff. Admittedly, this is a rather Perl-centric view of reality, to the extent you can call this reality.&lt;/p&gt;

&lt;p&gt;Well, okay, I&amp;rsquo;ll cheat and show you the other stuff we&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide39.jpg&#34; alt=&#34;detail&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We&amp;rsquo;d also like to support, for example, PHP, Ruby, Python, BASIC, Scheme, COBOL, Java, Befunge, TECO, Rebol, REXX, and&amp;hellip; I can&amp;rsquo;t quite make out that one on the bottom there. And if I could, I wouldn&amp;rsquo;t say it anyway, because there are children present, and I wouldn&amp;rsquo;t want to fuck up their brains.&lt;/p&gt;

&lt;p&gt;Okay, I admit this is not quite reality yet. I just put in all those languages because I&amp;rsquo;m a white male who is trying to oppress you before I&amp;rsquo;m quite dead. So I&amp;rsquo;d better strike out a few things that aren&amp;rsquo;t really there yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide40.jpg&#34; alt=&#34;strikes&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Could I interest you in a really fast BASIC interpreter?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide41.jpg&#34; alt=&#34;Parrot + BASIC&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Well, it&amp;rsquo;s time to move on to our next point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide42.jpg&#34; alt=&#34;impossible&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing, are doing the impossible.&lt;/p&gt;

&lt;p&gt;Is what we&amp;rsquo;re doing really impossible? It&amp;rsquo;s possible. But we won&amp;rsquo;t know till we try. More precisely, till we finish trying. Sometimes things seem impossible to us, but maybe that&amp;rsquo;s just because we&amp;rsquo;re all slackers.&lt;/p&gt;

&lt;p&gt;And because we oversimplify.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take another look at the pink tennis court. I mean, the universal architectural diagram. It really isn&amp;rsquo;t quite as universal as I&amp;rsquo;ve made it out to be. First, let&amp;rsquo;s get rid of the pink.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Maybe I should give equal time to blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide44.jpg&#34; alt=&#34;blue&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Nah.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, as I was saying, this isn&amp;rsquo;t universal enough. Here&amp;rsquo;s the real universal diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide46.jpg&#34; alt=&#34;line widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
This is what&amp;rsquo;s known as an impossible object. I like it. I&amp;rsquo;m impossible object oriented. This particular impossible object is often called a widget. But you knew that already.&lt;/p&gt;

&lt;p&gt;What you might not have known is that, up till now, it&amp;rsquo;s been thought impossible to color such an object accurately. But as you can see,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide47.jpg&#34; alt=&#34;colorized&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
that is false. There are still some perceptual difficulties with it, but I&amp;rsquo;m sure &lt;em&gt;that&lt;/em&gt; problem is just a relic of our reptile brain. Or was it our bird brain. I forget. In any event, if you have trouble perceiving this object correctly, just use the universal clarification tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide48.jpg&#34; alt=&#34;cloud&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I&amp;rsquo;ll assume you can supply your own cloud from now on.&lt;/p&gt;

&lt;p&gt;Should be easy here in Portland&amp;hellip; I&amp;rsquo;m allowed to make jokes about Portland because I grew up in the Pacific Northwet.&lt;/p&gt;

&lt;p&gt;As you can see, this more accurate universal architectural diagram can actually be rotated in 3-d with properly simulated lighting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide49.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide50.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide51.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide52.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s extensible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide53.jpg&#34; alt=&#34;6comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide54.jpg&#34; alt=&#34;12comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Comb structures are important in a programming language. That&amp;rsquo;s why we&amp;rsquo;re adding a switch statement to Perl 6.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a more accurate representation of Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide55.jpg&#34; alt=&#34;parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s also more sophisticated linguistically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide56.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Not only can it represent singular and plural concepts, but also the old Indo-European notion of dual objects.&lt;/p&gt;

&lt;p&gt;We still have vestiges of that in English.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide57.jpg&#34; alt=&#34;oxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
One ox, many oxes, two oxen yoked together pulling your plow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide58.jpg&#34; alt=&#34;regexen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or one regex, many regexes, but two regexen working together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide59.jpg&#34; alt=&#34;Vaxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
You always wanted to know the proper name for a two-headed Vax?&lt;/p&gt;

&lt;p&gt;Everything is possible. You should be grateful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide60.jpg&#34; alt=&#34;ungrateful&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On to the ungrateful undead.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of carping lately about how slow Perl 6 development is going. Some of it comes from well intentioned folks, but some of it comes from our poison pen pals who live in the troll house. Still, I think a lot of the criticism shows a lack of understanding of the basic laws of development. These laws can be illustrated with this diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide61.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Basically, perfect development is impossible. Development can be fast, good, and cheap. Pick two.&lt;/p&gt;

&lt;p&gt;Actually, that&amp;rsquo;s unrealistic.&lt;/p&gt;

&lt;p&gt;Pick one.&lt;/p&gt;

&lt;p&gt;Which one would you pick? You want fast? You want cheap? No, I think you want this one.&lt;/p&gt;

&lt;p&gt;Good.&lt;/p&gt;

&lt;p&gt;Good design is neither fast nor cheap. Every time we crank out a new chunk of the design of Perl 6 or of Parrot, it&amp;rsquo;s a bit like writing a master&amp;rsquo;s thesis. It&amp;rsquo;s a lot of reading, and a lot of writing, and a lot of thinking, and a lot of email, and a lot of phone conferences. It&amp;rsquo;s really complicated and multidimensional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide62.jpg&#34; alt=&#34;escher&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
There&amp;rsquo;s a lot going on behind the scenes that you don&amp;rsquo;t hear about every day. Many people have sacrificed to give us time to work on these things. People have donated their own time and money to it. O&amp;rsquo;Reilly and Associates have donated phone conferences and other infrastructure. The Perl 6 design team in particular has borne a direct financial cost but also a tremendous opportunity cost in pursuing this at the expense of career and income. I&amp;rsquo;m not looking for sympathy, but I want you to know that I almost certainly could have landed a full-time job 20 months ago if I&amp;rsquo;d been willing to forget about Perl 6. I&amp;rsquo;m extremely grateful for the grants the Perl Foundation has been able to give toward the Perl 6 effort. But I just want you to know that it&amp;rsquo;s costing us more than that.&lt;/p&gt;

&lt;p&gt;But Perl 6 is all about freedom, and that&amp;rsquo;s why we&amp;rsquo;re willing to pledge our lives, our fortunes, and our sacred honor.&lt;/p&gt;

&lt;p&gt;Times are tough, and I&amp;rsquo;m not begging for more sacrifice from you good folks. I just want to give a little perspective, and fair warning that at some point soon I&amp;rsquo;m going to have to get a real job with real health insurance because I can&amp;rsquo;t live off my mortgage much longer. It&amp;rsquo;s bad for my ulcer, and it&amp;rsquo;s bad for my family.&lt;/p&gt;

&lt;p&gt;Fortunately, the basic design of Perl 6 is largely done, appearances to the contrary notwithstanding. Damian and I will be talking about that in the Perl 6 session later in the week.&lt;/p&gt;

&lt;p&gt;Well, enough ranting. I don&amp;rsquo;t want to sound ungrateful myself, because I&amp;rsquo;m not. In any event, the last three years have been extremely exciting, and I think the coming years will be just as interesting.&lt;/p&gt;

&lt;p&gt;In particular, I have a great announcement to make at the end of my talk about what&amp;rsquo;s going to be happening next. But let me explain a bit first what&amp;rsquo;s happened, again using our poor, abused widget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide63.jpg&#34; alt=&#34;implementations&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In this case, time is flowing in the upward direction.&lt;/p&gt;

&lt;p&gt;Originally we just had one implementation of Perl, and the general perception as we started developing Perl 6 was that we were going to have two implementations of Perl.&lt;/p&gt;

&lt;p&gt;But in actual fact, we&amp;rsquo;re going to have at least three implementations of Perl.&lt;/p&gt;

&lt;p&gt;First, the good old Perl 5 that&amp;rsquo;s based on C, And on the right, the Perl 6 that&amp;rsquo;s based on Parrot. But there in the middle is a Perl5 that is also based on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide64.jpg&#34; alt=&#34;ellipses&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Note that the left two are the same language, while the right two share the same platform.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s that Perl 5 doing there in the middle? If you&amp;rsquo;ve been following Perl 6 development, you&amp;rsquo;ll know that from the very beginning we&amp;rsquo;ve said that there has to be a migration strategy, and that that strategy has two parts. First, we have to be able to translate Perl 5 to Perl 6. If that were all of it, we wouldn&amp;rsquo;t need the middle Perl there. But not only do people need to be able to translate from Perl 5 to Perl 6, it is absolutely crucial that they be allowed to do it piecemeal. You can&amp;rsquo;t translate a complicated set of modules all at once and expect them to work. Instead, we want people to be able to run some of their modules in Perl 5, and others in Perl 6, all under the same interpreter.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one good reason to have a Perl 5 compiler for Parrot. Another good reason is that we expect Perl 5 to run faster on Parrot, by and large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide65.jpg&#34; alt=&#34;hands&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Yet another reason is that we have a little bootstrapping issue with the Perl 6 grammar. The Perl 6 grammar is defined in Perl 6 regexes. But those regexes are parsed with the Perl 6 grammar. Catch 22. The solution to this involves two things. First, a magical module of Damian&amp;rsquo;s that translates Perl 6 regexes back into Perl 5 regexes. Second, a Perl 5 regex interpreter to run those regexes. Now, it&amp;rsquo;d be possible to do it with old Perl 5, but it&amp;rsquo;ll be cleaner to run it with the new Perl 5 running on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide66.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, it&amp;rsquo;s awfully cumbersome to keep saying &amp;ldquo;Perl 5 over Parrot&amp;rdquo; and such, so we need to do some namespace cleanup here. We can drop the &amp;ldquo;over Parrot&amp;rdquo; for Perl 6, because that&amp;rsquo;s redundant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide67.jpg&#34; alt=&#34;drop parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Likewise, people always think of the original when we say &amp;ldquo;Perl 5&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide68.jpg&#34; alt=&#34;drop C&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That means we need a code name for this thing in the middle. We&amp;rsquo;ve decided to call it &amp;ldquo;Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide69.jpg&#34; alt=&#34;Ponie&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We have lots of reasons to call it that. To be sure, none of them are &lt;em&gt;good&lt;/em&gt; reasons, but I&amp;rsquo;m told it will make the London.pm&amp;rsquo;ers deliriously happy if I say, &amp;ldquo;I want a Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And I do want a Ponie. &amp;ldquo;I want the Ponie, I want the whole Ponie. I want it now.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide71.jpg&#34; alt=&#34;versions&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The plan is to for Ponie version 5.10 to be a drop-in replacement for Perl 5.10. Eventually there will be a Ponie 5.12, and if Ponie is good enough, there may not be an old-fashioned 5.12. We&amp;rsquo;ll just stop with 5.10.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;re gonna start on Ponie right now. Since I&amp;rsquo;ve been carping about lack of resources, you might wonder how we&amp;rsquo;re gonna do this.&lt;/p&gt;

&lt;p&gt;Well, as it happens, a nice company called Fotango has a lot of Perl 5 code they want to run on Parrot, and they are clued enough to have authorized one of their employees, our very own Arthur Bergman, to spend company time porting Perl 5 to Parrot.&lt;/p&gt;

&lt;p&gt;Is that cool or what? I&amp;rsquo;m out of time, so read the press release. But I&amp;rsquo;m really excited by our vision for the future, and if you&amp;rsquo;re not excited, maybe you need to have your vision checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide72.jpg&#34; alt=&#34;vision&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Thanks for listening, and I hope that from now on you&amp;rsquo;ll all be completely unreasonable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl 6 : Not Just For Damians</title>
      <link>http://localhost:1313/pub/2001/10/23/damians.html/</link>
      <pubDate>Tue, 23 Oct 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/10/23/damians.html/</guid>
      <description>

&lt;p&gt;London.pm technical meetings are always inspiring events with top notch speakers. At our most recent gathering Richard Clamp and Mark Fowler gave us &amp;ldquo;Wax::On, Wax::Off &amp;ndash; how to become a Perl sensei&amp;rdquo;; Paul Mison showed us how to make an infobot read the BBC news; Richard Clamp and Michael Stevens explained &amp;ldquo;Pod::Coverage&amp;rdquo;, their contribution to Kwalitee assurance; and, for the first time ever, Leon Brocard didn&amp;rsquo;t talk about Graphing Perl.&lt;/p&gt;

&lt;p&gt;However, the highlight of the evening was Simon Cozens&amp;rsquo;s first public demonstration of Parrot, the new virtual computer that will one day run Perl 6.&lt;/p&gt;

&lt;p&gt;After he&amp;rsquo;d finished the talk we expected, he pulled a crumpled piece of paper from a secret pocket. This, he whispered, was an early draft of Apocalypse 3 which he&amp;rsquo;d smuggled out at great personal risk from under the very noses of the Design Team. An expectant hush fell as he proceeded to reveal the highlights.&lt;/p&gt;

&lt;p&gt;The reception his heroic effort received was&amp;hellip; low key. Everyone was pleased to get an early peek at what Larry was thinking, but there were widespread mutterings about &amp;ldquo;all this needless complexity&amp;rdquo; and &amp;ldquo;mere syntactic sugar&amp;rdquo;. Almost everyone grumbled about the use of &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; for dereferencing. Almost everyone groused about using &amp;lsquo;&lt;code&gt;_&lt;/code&gt;&amp;rsquo; for concatenation. And the reassurance that &amp;ldquo;It&amp;rsquo;s only syntax&amp;rdquo; didn&amp;rsquo;t seem to appease the doubters.&lt;/p&gt;

&lt;p&gt;And then we all went for beer and/or Chinese food.&lt;/p&gt;

&lt;p&gt;Fast forward to last weekend. The Apocalypse was &lt;a href=&#34;http://localhost:1313/pub/2001/10/02/apocalypse3.html&#34;&gt;up on the website&lt;/a&gt; and Damian had just published his Exegesis when Simon Wistow (London.pm&amp;rsquo;s official scapegoat) warned the mailing list that he had:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; an impending sense of doom about Perl 6. The latest Apocalypse/Exegesis fill me with fear rather than wonder. I&amp;rsquo;ve got a horrible feeling that Perl 6 is trying to do too much at once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This provoked a firestorm of agreement. The general consensus was that the latest Apocalypse was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;reinventing wheels which we already have in abundance. And those new wheels have syntax that is only going to confuse those who are already experienced perl5 users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems that what we have here is a failure to communicate.&lt;/p&gt;

&lt;p&gt;Yes, Damian&amp;rsquo;s efforts have been superb in providing examples of code based on the Apocalypses, and I don&amp;rsquo;t think anyone denies the sterling work that Dan and his team are doing with Parrot. But people do seem to be worried about Perl 6 being a rewrite for the Damians of this world, not for the ordinary Joe.&lt;/p&gt;

&lt;p&gt;Well, I&amp;rsquo;m here to tell you that this ordinary Piers doesn&amp;rsquo;t have a problem with Perl 6. In fact I&amp;rsquo;m excited and inspired by most of the work that&amp;rsquo;s been done so far, and I hope to convince you too.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6-doesn-t-look-like-perl-perl-6-doesn-t-look-like-perl-span&#34;&gt;&lt;span id=&#34;perl6 doesn&#39;t look like perl&#34;&gt;&amp;ldquo;Perl 6 doesn&amp;rsquo;t look like Perl&amp;rdquo;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Well, up to a point. The thing that you have to remember when reading the sample code that Damian provides in his Exegeses is that he is deliberately exercising all the new features in a condensed example. The most recent code sample is initially scary because there&amp;rsquo;s so &lt;em&gt;much&lt;/em&gt; stuff in Apocalypse 3. Admittedly, &lt;code&gt;$self.method()&lt;/code&gt; looks weird now, but then, &lt;code&gt;$self-&amp;gt;method()&lt;/code&gt; looked weird when Perl 5 was introduced. And, on rereading Damian&amp;rsquo;s example with an eye to what &lt;em&gt;hasn&amp;rsquo;t&lt;/em&gt; changed, the whole thing still looks like Perl.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-just-gives-us-syntax-for-stuff-we-can-already-do-perl-6-just-gives-us-syntax-for-stuff-we-can-already-do-span&#34;&gt;&lt;span id=&#34;perl 6 just gives us syntax for stuff we can already do&#34;&gt;&amp;ldquo;Perl 6 just gives us syntax for stuff we can already do&amp;rdquo;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s a mighty big &amp;lsquo;just&amp;rsquo; there, partner. Consider the currying syntax. Before this came along, currying was possible, but required an unreasonable amount of manual work to implement. Just consider the following, &amp;lsquo;simple&amp;rsquo; example:&lt;/p&gt;

&lt;p&gt;In perl 6 we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $^_ + $^_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In perl 5, if you didn&amp;rsquo;t worry about currying you&amp;rsquo;d write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub { $_[0] + $_[1] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; worry about currying, you&amp;rsquo;ll have to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    do { 
        my $self;
        $self = sub {
            my ($arg1, $arg2) = @_;
            return $arg1 + $arg2             if @_==2;
            return sub { $self-&amp;gt;($arg1,@_) } if @_==1;
            return $self;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I don&amp;rsquo;t want to &lt;em&gt;think&lt;/em&gt; about the hoops I&amp;rsquo;d have to jump through in the case of a curried function with three arguments, or if I wanted named arguments. Now, you could very well argue that you don&amp;rsquo;t use anonymous functions much anyway, so you&amp;rsquo;re certainly not going to be doing tricks with currying, and you may be right. But then, of course, if you don&amp;rsquo;t want to use them &lt;em&gt;you don&amp;rsquo;t have to&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;However, I&amp;rsquo;m betting that before long it will be just another spanner in your toolbox along with all the other gadgets and goodies that Larry&amp;rsquo;s shown us so far. Tools that you use without a second thought.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever done any academic computer science, you might have come across Functional Programming, in which case an awful lot of what&amp;rsquo;s new in Perl 6 so far will be looking surprisingly familiar. The thing is, until now, Functional Programming has been seen as only of concern to academics and the kind of weirdoes who are daft enough to write Emacs extensions and, dammit, Perl doesn&amp;rsquo;t need it. There is even &lt;a href=&#34;http://dev.perl.org/rfc/28.html&#34;&gt;an RFC&lt;/a&gt; to this effect.&lt;/p&gt;

&lt;p&gt;I remember saying almost exactly the same thing about another language feature of &amp;lsquo;purely academic interest&amp;rsquo; that got introduced with perl 5; the closure.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know about you, but closures are old friends now; another tool that gets pulled out and used where appropriate, with hardly a second thought.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-doesn-t-give-us-anything-that-perl-5-doesn-t-perl-6-doesn-t-give-us-anything-that-perl-5-doesn-t-span&#34;&gt;&lt;span id=&#34;perl 6 doesn&#39;t give us anything that perl 5 doesn&#39;t.&#34;&gt;&amp;ldquo;Perl 6 doesn&amp;rsquo;t give us anything that Perl 5 doesn&amp;rsquo;t.&amp;rdquo;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Yeah, and Perl 5 doesn&amp;rsquo;t give us anything that a Universal Turing Machine, Intercal, or Python don&amp;rsquo;t. We use it because it &amp;lsquo;fits our brains&amp;rsquo;. The Perl 6 redesign is all about improving that fit.&lt;/p&gt;

&lt;h3 id=&#34;span-id-apocalypse-3-is-mostly-mere-syntactic-sugar-span-apocalypse-3-pub-2001-10-02-apocalypse3-html-is-mostly-mere-syntactic-sugar&#34;&gt;&lt;span id=&#34;apocalypse 3 is mostly mere syntactic sugar&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/10/02/apocalypse3.html&#34;&gt;Apocalypse 3&lt;/a&gt; is mostly mere syntactic sugar&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;You say that like it&amp;rsquo;s a &lt;em&gt;bad&lt;/em&gt; thing. Perl&amp;rsquo;s creed has always been to make the easy things easy and the hard things possible. In many ways, Perl 6 is going further than that: making hard things easy. And Apocalypse 3 continues this trend.&lt;/p&gt;

&lt;p&gt;Well chosen syntactic sugar is good voodoo. It&amp;rsquo;s Laziness with a capital L, and Laziness, as we all know, is a virtue.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at what we get in Apocalypse 3.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-the-hyper-operator-2e-the-hyper-operator-span&#34;&gt;&lt;span id=&#34;item_The_hyper_operator%2E&#34;&gt;The hyper operator.&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Well, this is just a &lt;code&gt;foreach&lt;/code&gt; loop isn&amp;rsquo;t it? Yes, but as Damian subsequently pointed out, would you rather write and maintain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @relative;
    my $end = @max &amp;gt; @min ? @max &amp;gt; @mean ? $#max : $#mean
                          : @min &amp;gt; @mean ? $#min : $#mean;
    foreach my $i ( 0 .. $end ) {
        $relative[$i] = $mean[$i]) / ($max[$i] - $min[$i]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @relative = @mean ^/ (@max ^- @min);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the second case, the intent of the code is clear. In the first it&amp;rsquo;s obfuscated by the loop structure and set up code.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-chainable-file-test-ops-chainable-file-test-ops-span&#34;&gt;&lt;span id=&#34;item_Chainable_file_test_ops&#34;&gt;Chainable file test ops&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Why hasn&amp;rsquo;t it &lt;em&gt;always&lt;/em&gt; worked like this? Ah yes, because the internals of perl 5 wouldn&amp;rsquo;t allow for it. This is an example of the far reaching effects of some of the earlier Apocalypses giving us cool stuff.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do the comparison again.&lt;/p&gt;

&lt;p&gt;Perl 5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @writable_files = grep {-f $_ &amp;amp;&amp;amp; -r _ &amp;amp;&amp;amp; -w _ &amp;amp;&amp;amp; -x _} @files;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @writable_files = grep { -r -w -x -f $_ } @files;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shorter and clearer. Huzzah.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-binary-27-3b-27-binary-span&#34;&gt;&lt;span id=&#34;item_Binary_%27%3B%27&#34;&gt;Binary &amp;lsquo;;&amp;rsquo;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This one&amp;rsquo;s a bit odd. We&amp;rsquo;ve not yet seen half of what&amp;rsquo;s going to be done with it, but I have the feeling that the multidimensional array mongers are going to have a field day.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-3d-3e-is-a-pair-builder-gt-is-a-pair-builder-span&#34;&gt;&lt;span id=&#34;item_%3D%3E_is_a_pair_builder&#34;&gt;=&amp;gt; is a pair builder&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mmmm&amp;hellip; pairs. Lisp flashbacks! Well, yes. But if hashes are to become &amp;lsquo;bags&amp;rsquo; of pairs, then it seems that hash keys won&amp;rsquo;t be restricted to being simple strings. Which is brilliant. On more than several occasions I&amp;rsquo;ve found myself wanting to do something along the lines of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $hash{$object}++;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then later do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @results = map  { $_.some_method }
               grep { $hash{$_} &amp;gt; 1 }
                   keys %hash;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try doing that in Perl 5.&lt;/p&gt;

&lt;p&gt;The use of pairs for named arguments to subroutines looks neat too, and should avoid the tedious hash setup that goes at the top of any subroutine that&amp;rsquo;s going to accept named parameters in Perl 5.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-lazy-lists-lazy-lists-span&#34;&gt;&lt;span id=&#34;item_Lazy_lists&#34;&gt;Lazy lists&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Lazy lists are cool, though I note that Damian couldn&amp;rsquo;t squeeze a compelling example of their usage in Exegesis 3. For some applications they are a better mousetrap, and if you don&amp;rsquo;t actually need them they&amp;rsquo;re not going to get in your way. I&amp;rsquo;m not sure if Larry has confirmed it yet, but I do like the idea of being able to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my($first,$second,$third) = grep is_prime($_), 2 .. Inf;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and have things stop when the first three primes have been found.&lt;/p&gt;

&lt;p&gt;And having&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my($has_matches) = grep /.../ @big_long_list;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stop at the first match would be even better.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-logical-operators-propagating-context-logical-operators-propagating-context-span&#34;&gt;&lt;span id=&#34;item_Logical_operators_propagating_context&#34;&gt;Logical operators propagating context&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Where&amp;rsquo;s the downside? This can only be a good thing. Multiway comparison &lt;code&gt;0 &amp;lt; $var &amp;lt;= 10&lt;/code&gt; is another example of unalloyed goodness.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-backtracking-operators-backtracking-operators-span&#34;&gt;&lt;span id=&#34;item_Backtracking_operators&#34;&gt;Backtracking operators&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not entirely sure I understand this yet. But it looks like it has the potential to be a remarkably powerful way of programming (just like regular expressions are, which do &lt;em&gt;loads&lt;/em&gt; of backtracking). I have the feeling that parser writers are going to love this, and equation solvers, and&amp;hellip;&lt;/p&gt;

&lt;p&gt;But again, if you don&amp;rsquo;t need the functionality, don&amp;rsquo;t use it. It&amp;rsquo;ll stay out of your way.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-all-operators-get-27proper-27-function-names-2e-all-operators-get-proper-function-names-span&#34;&gt;&lt;span id=&#34;item_All_operators_get_%27proper%27_function_names%2E&#34;&gt;All operators get &amp;lsquo;proper&amp;rsquo; function names.&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This one almost had me punching the air. It&amp;rsquo;s brilliant. Especially if, like me, you&amp;rsquo;re the kind of person who goes slinging function references around. (One of the things that I really like about Ruby is its heady mix of functional style higher order functions and hard core object orientation. It looks like Perl&amp;rsquo;s getting this too.)&lt;/p&gt;

&lt;p&gt;Again, time to make with the examples. Consider the following perl code from an Assertion package (this is in Perl 6, it&amp;rsquo;s too hard to write clearly in Perl 5).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;amp;assert_with_comparator := {
        unless ($^comparator.($^a, $^b)) {
            throw Exception::FailedComparison :
                comparator =&amp;gt; $^comparator,
                result     =&amp;gt; $^a,
                target     =&amp;gt; $^b
        }
    }

    &amp;amp;assert_string_equals := assert_with_comparator(&amp;amp;operator:eq);
    &amp;amp;assert_num_equals    := assert_with_comparator(&amp;amp;operator:==);
    &amp;amp;assert_greater_than  := assert_with_comparator(&amp;amp;operator:&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s full strength Perl 6 that is, complete with currying, operators as functions, &lt;a href=&#34;#item_%3A%3D&#34;&gt;&lt;code&gt;:=&lt;/code&gt;&lt;/a&gt; binding, &lt;code&gt;:&lt;/code&gt; used to disambiguate indirect object syntax, the whole nine yards. And it is still obviously a Perl program. The intent of the code is clear, even without comments, and it took very little time to write. Of course, I am assuming an Exception class, but we&amp;rsquo;ve already got that in Perl 5; take a look at the lovely &lt;code&gt;Error.pm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to rewrite &lt;code&gt;assert_with_comparator&lt;/code&gt;, but just look at the Perl 5 version of the last line of that example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    *Assert::assert_greater_than =
        $assert_with_comparator-&amp;gt;(sub { $_[0] &amp;gt; $_[1] });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t try and tell me that the intent is clearer in Perl 5 than in Perl 6, because I&amp;rsquo;ll be forced to laugh at you.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-binary-and-unary-27-2e-27-binary-and-unary-span&#34;&gt;&lt;span id=&#34;item_binary_and_unary_%27%2E%27&#34;&gt;binary and unary &amp;lsquo;.&amp;rsquo;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I confess that I&amp;rsquo;m still not sure I see where binary &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; is a win over &amp;lsquo;&lt;code&gt;-&amp;gt;&lt;/code&gt;&amp;rsquo;, especially given that Larry has mandated that most of the time you won&amp;rsquo;t even need it.&lt;/p&gt;

&lt;p&gt;Unary &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; is looking really cool. If I read the Apocalypse right, this means that, instead of writing object methods like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub method {
        my $self = shift;
        ...
        $self-&amp;gt;{attribute} = $self-&amp;gt;other_method(...);
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub method {
        ...
        $.attribute = .other_method(...);
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is, once more clean, clear and perl like. This is the kind of notation I want Right Now. And, frankly, it&amp;rsquo;d just look silly if you replaced those &amp;lsquo;.&amp;rsquo;s with &amp;lsquo;&lt;code&gt;-&amp;gt;&lt;/code&gt;&amp;rsquo; (and should one parse &lt;code&gt;$-&amp;gt;attribute&lt;/code&gt; as an instance variable accessor, or as &lt;code&gt;$- &amp;gt; attribute&lt;/code&gt;). Okay, I&amp;rsquo;m convinced. Replace &amp;lsquo;&lt;code&gt;-&amp;gt;&lt;/code&gt;&amp;rsquo; with &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; already.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-explicit-stringification-and-numification-operator-explicit-stringification-and-numification-operators-span&#34;&gt;&lt;span id=&#34;item_Explicit_stringification_and_numification_operator&#34;&gt;Explicit stringification and numification operators&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Again, these have got to be good magic, especially with the &lt;code&gt;NaN&lt;/code&gt; stuff (though that&amp;rsquo;s been the cause of some serious debate on perl6-language and may not be the eventual name). In at least one of the modules I&amp;rsquo;m involved in writing and maintaining, this would have been &lt;em&gt;so&lt;/em&gt; useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # geq: Generic equals
    sub operator:geq is prec(\&amp;amp;operator:eq($$)) ($expected, $got)
    {
        # Use numericness of $expected to determine which test to use
        if ( +$expected eq &#39;NaN&#39;) { return $expected eq $got }
        else                      { return $expected == $got }
    }

    sub assert_equals ($expected, $got; $comment)
    {
        $comment //= &amp;quot;Expected $expected, got $got&amp;quot;;
        $expected geq $got or die $comment;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hey! That looks just like Perl! (Except that, to do the same thing in Perl 5, you have to jump through some splendidly non-obvious hoops. Trust me, I&amp;rsquo;ve done that.)&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-3a-3d-span&#34;&gt;&lt;span id=&#34;item_%3A%3D&#34;&gt;:=&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This one had me scratching my head as I read the Apocalypse. On reading the Exegesis, things become a good deal clearer. &lt;a href=&#34;#item_%3A%3D&#34;&gt;&lt;code&gt;:=&lt;/code&gt;&lt;/a&gt; looks like it&amp;rsquo;s going to be an easy way to export symbols from a module, now that typeglobs have gone away:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Foo;
    sub import ($class, @args) {
        # This is an example, ignore the args
        &amp;amp;{&amp;quot;${class}::foo&amp;quot;} := &amp;amp;Foo::foo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this isn&amp;rsquo;t the only place where &lt;a href=&#34;#item_%3A%3D&#34;&gt;&lt;code&gt;:=&lt;/code&gt;&lt;/a&gt; will be used. Thankfully we&amp;rsquo;ll be able to use it almost everywhere without having to remember all the caveats that used to surround assigning to typeglobs. Here&amp;rsquo;s another example in Perl 6 of something that would be impossible in Perl 5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $Sunnydale{ScoobyGang}{Willow}{Traits} = [qw/cute geeky/];

    # Oooh Seasons 4 and 5 happened and I want
    # to use a trait object now

    $traits := $Sunnydale{ScoobyGang}{Willow}{Traits};
    $traits = new TraitCollection: qw/sexy witch lesbian geek/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special there you say. Well, yes, but let&amp;rsquo;s take a look at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print $Sunnydale{ScoobyGang}{Willow}{Traits}
    # sexy witch lesbian geek
    # Or however a TraitCollection stringifies.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can &lt;em&gt;almost&lt;/em&gt; do this in Perl 5, but only if you continue to use an array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    local *traits = $Sunnydale{ScoobyGang}{Willow}{Traits};
    @traits = qw/sexy witch lesbian geek/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to switch to using a &lt;code&gt;TraitCollection&lt;/code&gt;, you&amp;rsquo;ll have to go back and use the full specifier.&lt;/p&gt;

&lt;p&gt;I think this is another of those bits of syntax that I&amp;rsquo;d like now, please.&lt;/p&gt;

&lt;h4 id=&#34;span-id-item-binary-3a-binary-span&#34;&gt;&lt;span id=&#34;item_Binary_%3A&#34;&gt;Binary :&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This is going to make life so much easier for the parser if nothing else. Right now, indirect object syntax can be very useful. However, if you&amp;rsquo;ve ever tried to use it in anger, well, you&amp;rsquo;ve ended up using it in anger because there are some subtle gotchas that will catch you out. Binary : lets us disambiguate many of these cases and helps to reclaim indirect object syntax as a useful way of working.&lt;/p&gt;

&lt;p&gt;And so on&amp;hellip; What&amp;rsquo;s not to like? The sugar is sweet, the consistency is just right, and the old annoyances are going away.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-inspires-fear-perl-6-inspires-fear-span&#34;&gt;&lt;span id=&#34;perl 6 inspires fear.&#34;&gt;&amp;ldquo;Perl 6 inspires fear.&amp;rdquo;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Well, maybe. But it also just flat out inspires. If you don&amp;rsquo;t believe me, take a look at the response to Perl 6 on CPAN. Damian&amp;rsquo;s &lt;code&gt;Attribute::Handlers&lt;/code&gt; successfully attempts to graft some of Perl 6&amp;rsquo;s ease of manipulation of attributes back into Perl 5, and does a remarkably good job of it. Just look at all the really cool new modules that have sprung up around it. And that&amp;rsquo;s just a small part of what we&amp;rsquo;re going to get with Perl 6.&lt;/p&gt;

&lt;p&gt;There are many new modules that exist only to &amp;lsquo;mutate&amp;rsquo; perl5 behaviour &amp;ndash; &lt;code&gt;NEXT&lt;/code&gt;, &lt;code&gt;Hook::LexWrap&lt;/code&gt;, &lt;code&gt;Aspect&lt;/code&gt;, &lt;code&gt;Switch&lt;/code&gt;, &lt;code&gt;Coro&lt;/code&gt; etc. I would argue that many of these have arisen in response to discussions about making Perl 6 a far more mutable language than Perl 5. And, if nothing else, these modules have gone some way to demonstrating that even now, Perl is more flexible than we ever realised.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-is-taking-too-long-perl-6-is-taking-too-long-span&#34;&gt;&lt;span id=&#34;perl 6 is taking too long&#34;&gt;Perl 6 is taking too long&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m not quoting anyone else here; that&amp;rsquo;s me complaining. I want it all and I want it now! But I also want a well thought out and coherent design. The choice between doing it Right and doing it Now is not a choice. Doing it Right is imperative.&lt;/p&gt;

&lt;p&gt;The changes that Larry is making to the language will have far reaching and probably unforeseen consequences. But that&amp;rsquo;s no reason for shying away from them. I&amp;rsquo;ve been programming in Perl for long enough to remember the transition from Perl 4 to Perl 5, and I remember delaying my own move to perl 5 for an embarrassingly long time. I didn&amp;rsquo;t understand the new stuff in 5 and I hadn&amp;rsquo;t a clue why anyone would want it, so I put off the move.&lt;/p&gt;

&lt;p&gt;Eventually, I held my nose and jumped in. References were so cool. The new, &amp;lsquo;real&amp;rsquo;, data structures meant an end to contortions like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $hash{key} = join &amp;quot;\0&amp;quot;, @list;

    # and later...

    @list = split /\0/, $hash{key};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a remarkably short space of time almost everything that had confused and scared me became almost second nature. Stuff that had been a complete pain in Perl 4 was a breeze Perl 5 (who remembers Oraperl now?) It seemed that all you had to remember was to change &lt;code&gt;&amp;quot;pdcawley@bofh.org.uk&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;pdcawley\@bofh.org.uk&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same thing is going to happen with Perl 6. Even if it doesn&amp;rsquo;t, all those perl 5 binaries aren&amp;rsquo;t going to disappear from the face of the earth.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m most looking forward to are the gains we&amp;rsquo;re going to see from Perl becoming easier to parse. Over in the Smalltalk world they have this almost magical thing called the &amp;lsquo;Refactoring Browser&amp;rsquo; which is a very smart tool for messing with your source code. Imagine being able highlight a section of your code, then telling the browser to &amp;lsquo;extract method&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;The browser then goes away, works out what parameters the new method will need, creates a brand new method which does the same thing as the selected code and replaces the selected section with a method call.&lt;/p&gt;

&lt;p&gt;This is Deep Magic. Right now it&amp;rsquo;s an almost impossible trick to pull off in Perl, because the only thing that knows how to parse Perl is perl. It is my fond hope that, once we get Perl 6, it&amp;rsquo;s going to be possible to implement a Perl refactoring browser, and my work with ugly old code bases will become far, far easier.&lt;/p&gt;

&lt;p&gt;But even if that particular magic wand never appears, Perl 6 is still going to give us new and powerful ways to do things, some of which we&amp;rsquo;d never even have tried to do before. Internally it&amp;rsquo;s going to be fast and clean, and we&amp;rsquo;re going to get real Garbage Collection at last. If Parrot fulfils its early promise, we may well see Perl users taking advantages of extensions written in Ruby, or Python, or Smalltalk. World peace will ensue! The lion will lay down with the lamb, and the camel shall abide with the serpent! Cats and dogs living together! Ahem.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s been a long strange trip from perl 1.0 to where we are today. Decisions have been taken that made sense at the time, which today see us lost in a twisty little maze of backward compatibility (or should that be a little twisty maze&amp;hellip;). Anyone who looks at the source code for Perl 5 will tell you it&amp;rsquo;s scary, overly complex, and a complete nightmare to maintain. And that&amp;rsquo;s if they understand it.&lt;/p&gt;

&lt;p&gt;Perl 6 is our chance to learn from Perl 5, but Perl 6 is also going to be Perl remade. If everything goes to plan (and I see no reason why it won&amp;rsquo;t) we will arrive at Perl 6 with the crud jettisoned and the good stuff improved. We&amp;rsquo;ll be driven by a gleaming, modern engine unfettered by the limitations of the old one. We&amp;rsquo;ll have a shiny new syntax that builds on the best traditions of the old to give us something that is both brand new and comfortingly familiar.&lt;/p&gt;

&lt;p&gt;And there, in the Captain&amp;rsquo;s chair, you&amp;rsquo;ll still find Larry, smiling his quiet smile, comfortable in the knowledge that, even if he doesn&amp;rsquo;t know exactly where we&amp;rsquo;re going, it&amp;rsquo;ll be a lot of fun finding out. Over there, at the science officer&amp;rsquo;s station, Damian is doing strange things with source filters, haikus and Quantum. A calm voice comes up from engineering; it&amp;rsquo;s Dan, telling us that the new engines &lt;em&gt;can&lt;/em&gt; take it. And at the helm Nat Torkington gently steers Perl 6 on her continuing mission towards new code and new implementations.&lt;/p&gt;

&lt;p&gt;And Ensign Cawley? Well&amp;hellip; there&amp;rsquo;s a strange alien device called a refactoring browser. I&amp;rsquo;m going to be replicating one for Perl.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State of the Onion 2000</title>
      <link>http://localhost:1313/pub/2000/10/23/soto2000.html/</link>
      <pubDate>Tue, 24 Oct 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/10/23/soto2000.html/</guid>
      <description>

&lt;p&gt;Today, I&amp;rsquo;ll need all of the support I can get. I&amp;rsquo;m running an experiment today in sleep deprivation. Actually, I&amp;rsquo;ve been running the experiment in sleep deprivation for the past six months or so. If what I say today comes out like puddle mush, well, you can just assume that I used up all my pitiful supply of good writing for that little book some of you have been carrying around.&lt;/p&gt;

&lt;p&gt;I decided to talk about music this year because I talked about chemistry last year. The two are naturally associated in my brain for some reason. Of course, all music can be viewed as better living through chemistry - brain chemistry that is. Here, have some neurotransmitters. [Plays music] Feel happier? This talk will mostly be auditory, but for you people who are visually oriented I have a sop. I have some new tokens that we&amp;rsquo;ll be adding to Perl. Actually, these are some of the Unicode characters that are in the process of being approved up in the surigate area, but, you know, UPSA can handle that. No, I can&amp;rsquo;t wait until I can overload some of these as operators. I&amp;rsquo;m not entirely sure what &amp;ldquo;dollar A trill dollar B&amp;rdquo; would mean, but it will do something to your neurotransmitters.&lt;/p&gt;

&lt;p&gt;But neurotransmitters aside, chemistry and music are also associated in my mind because, although I eventually graduated in computers and linguistics for my first two years in college, I was pursuing a double major in chemistry and music. Kind of the story of my life that I&amp;rsquo;ve always been interested in too many things. Jack of all trades and master of maybe one, I don&amp;rsquo;t know. Anyway, I&amp;rsquo;ve uttered that phrase chemistry and music so often that it&amp;rsquo;s almost a Pavlovian response. &amp;ldquo;Hey Larry, you talked about chemistry last year. What are you going to talk about this year?&amp;rdquo; [Sound of bell] Slobber, slobber, slobber. I&amp;rsquo;ll talk about music.&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t until three days ago, though, that I actually sat down and asked my left brain, &amp;ldquo;Why do you want to talk about music this year?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Dah, I don&amp;rsquo;t know. Ask my right brain.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I am your right brain, stupid.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think part of the answer is that I worry about how Perl culture is going to grow up. If any of you have kids, you know that kids are complex and they get more complex as they get older. Fortunately, there&amp;rsquo;s only so much complexity that any one kid can hold and either they eventually go insane or, if you&amp;rsquo;re really lucky, they go sane. Even so, understanding any individual completely is impossible. The Perl culture is composed of many people and so the complexity of Perl culture can grow without bounds. No one person can understand Perl culture completely. If the complexity of Perl culture is going to continue to grow beyond the ability of any one person to fathom, even me, how can we continue to think constructively about it? I believe that we must learn to apply constructive analogies from other systems that are too complicated to understand completely. On the one hand, we can pull ideas from those scientists that have had to deal with overwhelming complexity, such as chemistry, biology, neurophysiology and so on. On the other hand, the more humanistic pursuits have always been overwhelmed by complexity, whether you&amp;rsquo;re talking about sociology or political science. You can study literature all your life and not even read everything you&amp;rsquo;re supposed to read, let alone what you want to read.&lt;/p&gt;

&lt;p&gt;Music is the same way. Many of us know thousands of songs or musical pieces, but nobody can know them all. Even if you could somehow combine all the songs that are currently playing somewhere in the world, it would just come out as pink noise. Terribly musical. And that&amp;rsquo;s exactly how your brain feels if you&amp;rsquo;ve read too many Perl mailing lists all at once. Only God can hear all the songs that are being played simultaneously and only God can read all the simultaneous mailing lists, newsgroups and Web sites of the world. Pretty soon, only God will be able to understand the CPAN. As humans, we have to simplify. In fact, we must oversimplify. We all specialize. We can focus in one style of music or on a particular piece of music or on a particular instrument. We can focus on rhythm or harmony or melody. We can focus on any of the ways that music affects our moods, whether tied directly to words or subtly as background music in a movie or background music in an elevator. We can focus on any of who, what, where, why, when or how. On a good day, we can focus on several things. But, we can never focus on all of them. So for the rest of this talk, I&amp;rsquo;d like to oversimplify Perl culture by looking at it through the lens of music culture.&lt;/p&gt;

&lt;p&gt;Now the problem with music culture is, of course, that although it makes a nice analogy, it&amp;rsquo;s also too complicated to talk about or even think about. So I brought along a few props. You can think of them as extension modules. Extension modules come in all shapes and sizes. Of course, you can program without extension modules. Those of you who have evolved far enough to have opposable thumbs have a built-in percussion instrument. [Snapping fingers] OK, that&amp;rsquo;s a snap, of course. With a little work, you can develop a crackle and a pop as well. To do the crackle, you first learn to snap twice with each hand and then you combine them in sequence. OK, that&amp;rsquo;s your crackle. To do a pop, you just make a little resonant cavity with your hand and you go [popping sounds], something like that. And then you get, you know, [sounds of snapping and popping combined], things like that.&lt;/p&gt;

&lt;p&gt;Long, long ago at a campfire far away, somebody discovered that pigs have spare ribs. At least they&amp;rsquo;re spare after all the meat is gone. Well, at least the pig doesn&amp;rsquo;t need them anymore. Now, if you work these just right, you can get a kind of a triple rhythm. You know, they say it&amp;rsquo;s all in the wrist. [Sounds of triple rhythm] Well, I&amp;rsquo;m going to have to bone up on that. [Drum &amp;amp; cymbal] Here&amp;rsquo;s a more intuitive interface. These are called claves. At least these would be called claves if they were from Spain, but they&amp;rsquo;re not. They&amp;rsquo;re from Papua-New Guinea, so I have no idea what they&amp;rsquo;re called there. I&amp;rsquo;ve asked various people from Papua-New Guinea what they&amp;rsquo;re called and they have no idea either. They&amp;rsquo;re probably called about 750 different things, since that&amp;rsquo;s about how many languages there are in New Guinea. Every time you go over a hill the next tribe speaks an entirely different language. It&amp;rsquo;s like being in your typical computer science department where every professor wants you to learn their favorite computer language which is different from the other 750 favorite computer languages of all the other professors. I suppose you could think of these as opposable sticks, though, in the history of our species, sticks have usually been opposed to crania.&lt;/p&gt;

&lt;p&gt;Eventually our ancestors got tired of grilled spare ribs so they figured out how to boil pigs. Not long after that, they discovered soup. And not long after that, they invented the spoon. Technology was developing really fast back then. Anyway, shortly after they invented the spoon, they invented two spoons because that way they didn&amp;rsquo;t have to share. [Sounds of two spoons] Now, this module is actually rather awkward to use, kind of like a Perl 4 module. That&amp;rsquo;s the same sort of, well, you know, I&amp;rsquo;ve got a better thing. Here&amp;rsquo;s the Perl 5 version of the same module. [Sounds] OK, I am going to move this over. We have the technology. [Laughter] We don&amp;rsquo;t need the technology. [Laughter] OK. Now we&amp;rsquo;re missing the technology. OK.&lt;/p&gt;

&lt;p&gt;OK, back to our regularly scheduled program. This is the same sort of noise you get when two people butt heads against each other in Perl 5 quarters, you know, bonk, bonk. That&amp;rsquo;s what oppositional behavior sounds like. The entire field of percussion is based on oppositional behavior - two objects trying to occupy the same space at the same time. So this is definitely an object-oriented module. You notice the relationship between the two spoons has been encapsulated so that the user no longer has to specify it explicitly. Actually, this is the second version of this module. Unfortunately, one of my kids broke the encapsulation on the first version. But, in fact, all percussion instruments are object oriented. After all, they indicate the rhythm, right? And rhythm is object oriented. You look like you don&amp;rsquo;t believe me. Rhythm really is object oriented. Surely you&amp;rsquo;ve all heard of the rhythm method. [Laughter. Drums and cymbal.] Furthermore, you&amp;rsquo;ll note that people who use the rhythm method are frequently members of the Lamaze class. [Laughter. Drums and cymbal.] Personally, I&amp;rsquo;ve been through three Lamaze classes, so has my wife. Now, many of you know that we have four kids. For our fourth kid they told us not to come back, since it was obvious we already knew all there was to know about heavy breathing. Actually, the Lamaze techniques are an interesting application of rhythm for the purpose of distracting the participants with pantings of various sorts. &amp;ldquo;OK, honey, now do sixes, twos, threes, sevens, and fives, not necessarily in that order.&amp;rdquo; &amp;ldquo;Nurse, take my husband, please.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In the abstract, rhythm is about even programming, kind of like a Geiger counter. Here&amp;rsquo;s our current background radiation. [Sounds.] Here&amp;rsquo;s if you sit too close to the TV in your hotel room. [Sounds.] Those of you who know Morse code probably know what that said. I don&amp;rsquo;t. If you don&amp;rsquo;t care to sit too close to your TV, just move to Boulder or stay here and wait for the Diablo Canyon reactor to melt down. Random events aren&amp;rsquo;t really all that interesting, however. It&amp;rsquo;s get more interesting when you program which events happen when. [Sounds] You can do all sorts of, don&amp;rsquo;t do that - [Sounds.] Enough of that. Other than little games like that, there&amp;rsquo;s really only one sound that spoons can make. The conga drums, by contract, provide a richer interface. You can think of the interface as parameterized in several different dimensions, most of which are infinitely variable, but for all its richness, it&amp;rsquo;s still an event-driven module. Perl also has an event module and it&amp;rsquo;s maybe a little more portable than these, but it could use a little more work on that. But you can do some various interesting event loops on these things. [Conga drums] Now as a linguist trained in Tagnue, I tend to think of these things in terms of fields, waves and particles. Harmony is a field while melody is a wave. I think of rhythm as particles where the events are the points at which things happen. Actually, it&amp;rsquo;s the events themselves that are particles, but rhythm is a higher level of abstraction, sort of connecting the dots in our head. So event questions start with &amp;ldquo;when?&amp;rdquo; while rhythm questions tend to start with &amp;ldquo;how often?&amp;rdquo; like, &amp;ldquo;How often should we have a Perl conference?&amp;rdquo; [Rhythm] &amp;ldquo;How often should we have a Perl Whirl cruise?&amp;rdquo; [Faster Rhythm - Laughter] Actually, it&amp;rsquo;s like this. [Rhythm] It&amp;rsquo;s a three against two rhythm, a sort of hemiola. You know, the Perl Conference is once a year, while the Perl cruise is scheduled to be once every 18 months, which gives you three beats in one hand to two beats in the other.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s three beats against four. [Rhythm] Here&amp;rsquo;s three against five. [Rhythm.] If you want to figure these out for yourself, it&amp;rsquo;s really just a bit of math. Multiply the two numbers to find out how many subdivisions you need. With three against four, you need 12 subdivisions and with three against five, 15, and you just chart it out.&lt;/p&gt;

&lt;p&gt;Now, in reality the rhythm of Perl culture is more of a fractile with many smaller interactions for all of the larger ones. You know, here&amp;rsquo;s the Perl conference. [Rhythm] All sorts of stuff going on in the interest of these. But, speaking of fractiles, I noticed an interesting thing about the rhythm of releases. As the size of the Perl core and libraries gets bigger, it takes longer to rev a major release, so it naturally gets slower. Perl 1, Perl 2, Perl 3, Perl 4, Perl 5. [Sound of beat on drum gets slower] Then we start getting subreleases and then they get slower. Then we get sub-sub versions, and they get slower and slower. Eventually the subversions are taking as long as the original Perl 1 - Perl 2 thing, but that&amp;rsquo;s because they are actually accomplishing just as much. Anyway, I just thought that was interesting. In compensation - up until now, we&amp;rsquo;ve seen instruments that specialize in rhythm, which is a particle effect. In contrast, there are other instruments that specialize in harmony and melody. Here is an auto harp. You know, it&amp;rsquo;s always on the wrong side. [Harp sounds] Well, you push buttons and you get harmony. It&amp;rsquo;s almost a pure harmony instrument with a little bit of rhythm on the strum a little.&lt;/p&gt;

&lt;p&gt;But harmony is an abstraction, a construct we manufacture in our own minds. Unlike rhythm, harmony is spread out in the pitch dimension and behaves as a field. By that, I mean it seems to fill space in a way that neither rhythm nor melody does. You can play rhythms and melodies simultaneously and they tend to keep their individual identities. But if you tried playing two chords simultaneously, you either get a different chord from either of them or you just get mush. Interestingly, you can&amp;rsquo;t actually add two chords together on an auto harp because an auto harp builds harmonies by subtraction not by addition. You know, it&amp;rsquo;s like trying to mix paints when you ought to be mixing light, and the more you try to mix the less you end up with. So we [Harp sound] subtract the most to get what we want and we subtract - we get fewer and fewer notes. Eventually we get no notes and that&amp;rsquo;s not the way to make harmony. To actually mix harmony you need an additive device like a keyboard. [Sound of electronic keyboard] Something else again entirely.&lt;/p&gt;

&lt;p&gt;We talk a lot about harmony in Perl culture and actually we yell at each other a lot about harmony and Perl culture, but it&amp;rsquo;s very harmonious yelling. Remember that harmony tends to monopolize your mental space, but that&amp;rsquo;s kind of an illusion. It&amp;rsquo;s easy when you hear two people arguing in a public forum to think that the entire whole forum is bogus, but if you look carefully there&amp;rsquo;s usually still a background of nonfighting going on as well. Normally people fight all the time. It just seems that way when we try to fit too many notes into the same mental space. You don&amp;rsquo;t actually have to harmonize every note everywhere all at once. We have different locations. Different chords can happen in different places. Different pieces have different standards for dissonance and that&amp;rsquo;s fine. Maybe a Perl friend&amp;rsquo;s mailing list would be like Mozart and comp.lang.perl.misc is like Schoenburg mixed with John Cage with Metallica thrown in for good measure. Well, five quarters is slightly more civilized. It&amp;rsquo;s a bit like late Mahler where part of the time the music is atonal and tortured and the rest of the time the music is tonal but still tortured. Actually, I like Mahler an awful lot. He&amp;rsquo;s my favorite composer and this is no coincidence. Mahler once said he always tried to put the whole world into each of his symphonies. Know also that my favorite author is Tolkin, who also put an entire world into his work, so perhaps this is kind of natural that I try to hook up the entire world to Perl one way or another. Of course, you can&amp;rsquo;t have the whole world in one spot without accepting a certain amount of dissonance.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s another form of abstraction which we call melody. In some ways, it&amp;rsquo;s the most mysterious because, in fact, it really is object oriented and in a deep way. A melody is a sequence of notes that we perceive to have been played or performed by a single object, which we often call a voice even if it isn&amp;rsquo;t one. Object permanence is something we learn at a young age. That&amp;rsquo;s why we play peek-a-boo: to figure out that mommy didn&amp;rsquo;t actually disappear when she went behind the towel. Similarly, you can take temporally separate notes and creatively imagine that they came from the same instrument. How many of you have ever played the computer game The Seventh Guest? You may recognize this melody, which is permanently burned into my personal E-prom. And then you solve that particular puzzle. I hope I didn&amp;rsquo;t give anything away. That game intentionally makes it really hard to follow the melody since it treats the notes as discreet, but some instruments make it really easy to follow a melody by making the transitions continuous.&lt;/p&gt;

&lt;p&gt;Life is always interesting, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;OK. Wonder how you play one of these things. Actually, you need a double inflection point, a double inflection here, or a double curve and you find the inflection point in the middle, maybe. We&amp;rsquo;ll try for &amp;ldquo;Mary Had a Little Lamb.&amp;rdquo; [Plays something - laughter] Wow, learn something new everyday. Now, I don&amp;rsquo;t know who first came up with the idea of playing a saw. It&amp;rsquo;s not what you would call obvious. On the other hand, some things are so obvious that if one person didn&amp;rsquo;t invent it, the next person would. For example, whistling. [Whistles &amp;ldquo;We Wish You a Merry Christmas&amp;rdquo;] Another rather obvious invention I think is the bottle whistle. [Whistles in bottle] Perrier works really great for this. As W. C. Fields once said, &amp;ldquo;I&amp;rsquo;d rather have a bottle in front of me than a frontal lobotomy.&amp;rdquo; Actually, a bottle in front of you doesn&amp;rsquo;t have a lot to recommend it either. In particular, the melodies you can play with this module are rather monotonic, not to mention monotonous. Here&amp;rsquo;s &amp;ldquo;The William Tell Overture&amp;rdquo; on the bottle. [Plays bottle] Other wind instruments can at least vary the pitch parameter, but most wind instruments are by nature melodic in that they can only produce one single note at a time. There are exceptions, of course. Take the bagpipes, please. I don&amp;rsquo;t think the bagpipes are an obvious interface either. I don&amp;rsquo;t know whether playing your hands would be considered obvious or not. I don&amp;rsquo;t know why but you have to wet your whistle to do this. It doesn&amp;rsquo;t make sense to me. [Whistles hands] I discovered that one by accident myself. One day I was leaning on a table with my hands folded and I just happened to blow in my hands suddenly to warm or something. [Tries blowing] Can&amp;rsquo;t do it anymore, can I? [Tries blowing] Well, this is actually the hard way - with your fingers interlaced.&lt;/p&gt;

&lt;p&gt;Now, but this actually illustrates a very important musical technique. One that many of us have had to learn repeatedly. Oddly, this technique is called unlearning. It&amp;rsquo;s like back-tracking in real life. Sometimes you have make negative progress in order to go forward in the long run. For instance, when I started taking private lessons on the violin, I had to unlearn a year&amp;rsquo;s worth of bad habits I&amp;rsquo;d picked up in school. Now in the case of playing of my hands, I had to learn to hold my hands a different way if I wanted to have greater pitch range. So once I&amp;rsquo;d relearned how to play my hands, I could get almost an octave. That leaves out &amp;ldquo;The Star Spangled Banner,&amp;rdquo; but there&amp;rsquo;s lots of melodies that will fit into an octave. [Plays hands] I almost have that octave. Let me tune it up here a little bit. [Plays hands] Which is, of course, &amp;ldquo;How Much Is That Camel in the Window?&amp;rdquo; Of course, you can do much the same thing with an extension mechanism that&amp;rsquo;s official. Anybody want to play the box? [Plays something] Easy does it, Larry. [Plays something] One and three. Thank you. This is my wife&amp;rsquo;s. [Plays.] OK. Obviously, that&amp;rsquo;s my main instrument. And certainly one of the most obvious wind instruments is your voice, at least we certainly produce a lot of wind with our voice, but - no, I&amp;rsquo;m not going to sing anything operatic for you and, although I&amp;rsquo;m preaching to the choir, I&amp;rsquo;m not going to make you sing either. That should play something on my computer. We have ways to make you talk. [Computer sings &amp;ldquo;Allelulia&amp;rdquo;] Hey, a percussion instrument. Yeah, I know. I&amp;rsquo;m a sound engineer at my church, I&amp;rsquo;m allowed to do that.&lt;/p&gt;

&lt;p&gt;Anyway, but you&amp;rsquo;ll recall that melody is an abstraction of object permanence. As I mentioned earlier, these instruments call such an object a voice whether it&amp;rsquo;s a really a human voice or any of the other instruments, but the really interesting thing to me is the relationship of melody to harmony and it has to do with what we call voice leading. Here&amp;rsquo;s a guitar. You can play the guitar in many styles, but the most notable feature of the guitar is how much it&amp;rsquo;s used for harmony rather than melody regardless of the style. I don&amp;rsquo;t want the pick yet. [Plays guitar] You know, that&amp;rsquo;s a little more Spanish. Here&amp;rsquo;s something else. [Plays guitar] Something like that. [Applause] Of course, if you&amp;rsquo;re a classical guitarist, you&amp;rsquo;d do a lot of melody, too, but the very basis of harmony is all the little melodies going on in the middle of the chords and you can actually hear the little waves in there if you listen. You can hear a chord change. [Plays] But you hear things like this happening in the middle and things like that - little voices - and so the harmony is actually, in a reductionist fashion, it&amp;rsquo;s just a bunch of little harmonies, but holistically, melodies. But, holistically, you don&amp;rsquo;t perceive it that way. It&amp;rsquo;s perceived as a field, you know, so when you hear chords, you don&amp;rsquo;t actually hear the individual notes here, you somehow intuit the whole - whatever it is.&lt;/p&gt;

&lt;p&gt;You ever notice that music is sometimes hard to talk about? I never have any trouble talking about Perl. Anyway, the bottom note of a chord is kind of in a privileged position. It behaves more like a melody of its own, but it&amp;rsquo;s a funny kind of melody in that it&amp;rsquo;s perceived to drive the rhythm and the harmony. If you take the bottom four strings of a guitar and drop them an octave, you get one of these. [Shows something] Yeah. Got to get the slouch right here. Ready? [Plays something] Now, some of you will think that that&amp;rsquo;s &amp;ldquo;Mission Impossible,&amp;rdquo; but that&amp;rsquo;s actually &amp;ldquo;Man from Uncle,&amp;rdquo; which was my favorite show when I was young. Here&amp;rsquo;s &amp;ldquo;Mission Impossible.&amp;rdquo; [Plays] Recognize that? Bass guitar is really fun even if you&amp;rsquo;re not good at it. Sometimes I think I&amp;rsquo;m the bass guitarist of Perl culture. I play the strange melody and then a whole bunch of other people start playing these strange rhythms and harmonies around me, but now I&amp;rsquo;m going to go back to hitting things again. This is what is known as a hammer dulcimer. It actually belongs to my wife, whom I like because she lets me borrow her things. The one thing about this that is harder on other instruments, especially wind instruments, is it&amp;rsquo;s actually multithreaded. It&amp;rsquo;s the beginnings of multithreading. It has two separate threads of control, so - [Plays] What shall I play? OK. [Plays] Nope. [Plays &amp;ldquo;Oh Suzanna&amp;rdquo;] OK. [Applause] &amp;ldquo;It rained all night the day I left, the weather was dry. Got so hot I froze to death, Suzanna, don&amp;rsquo;t you cry.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Musicians delight in contradictions, but so do language designers. You have to be able to see both sides of every question when you design a language. It helps to have multiple-personality disorder. It also helps to have a multithreaded interface like the piano. [Plays &amp;ldquo;Oh Suzanna&amp;rdquo; on piano] You know, a piano is just a fancier interface for a dulcimer in a way. It still has hammers - a real piano does - that go out and strike the strings in another form of oppositional behavior, but it&amp;rsquo;s a percussion instrument, in other words, but it happens to have a pitch parameter as well. It also has a more developed multithreading model. It supports up to 10 threads in two groups of five. Advanced implementations can handle 20 threads, but that requires two CPUs. You know, I&amp;rsquo;m afraid the piano module must still be considered experimental.&lt;/p&gt;

&lt;p&gt;Still, the interface is somewhat user friendly. [Plays &amp;ldquo;Chopsticks&amp;rdquo; on piano] Etc. I don&amp;rsquo;t actually have time to talk about counterpoint, except to say that this simple tune illustrates two contrapuntle principles we see in the Perl community: contrary motion and parallel motion. Contrary motion is when you have two programmers, or that is melodies, going in opposite directions. [Plays] Parallel motion is when the programmers agree on how to get where they&amp;rsquo;re going. [Plays &amp;ldquo;Chopsticks&amp;rdquo;] Actually, I joked about it being experimental, but the piano interface is actually one of the most standard interfaces we have. Unfortunately, organs are not so standard. Once you get away from the keyboard itself, how you set one particular stop really depends on the kind of organ you have. In pipe organs, you might pull out one of the stops puller-outerers. On a Hammond organ, you might just adjust the draw bar. On this organ, I push D-35. [Plays organ] You got to love Bach. The next time someone says Perl is baroque, thank them for the compliment. [Plays organ]&lt;/p&gt;

&lt;p&gt;They say it&amp;rsquo;s easy to get a composer out of bed in the morning. All you have to do is go over to the piano - or the organ in this case - and play an unresolved chord and then they have to get out of bed and resolve the chord. [Laughter] It&amp;rsquo;s hard. I can&amp;rsquo;t stand it. [Plays] Now, I promised I&amp;rsquo;d bring my violin and, as you can see, I didn&amp;rsquo;t break my arm in Aikido, so I guess I&amp;rsquo;ll have to play it some. The violin is one of those traditional standard instruments. As I say, nobody ever got fired for buying a symphony orchestra. But, if you did get fired, your orchestra can play for you. [Plays violin] That&amp;rsquo;s very sad. There&amp;rsquo;s lots of happy music, too.&lt;/p&gt;

&lt;p&gt;But, a violin is actually two different instruments and I actually brought it here to illustrate polymorphism. People ask what&amp;rsquo;s the difference between a violin and a fiddle. There&amp;rsquo;s no difference really, it only depends on which class you call the method from. Here&amp;rsquo;s the fiddle interface. You just choke up on the bow a little bit here and a - [Plays fiddle] [Applause] Funny how people who claim to be tone deaf can nonetheless recognize various styles of music when they hear them. Our pattern-matching capabilities are usually much better than we admit. In fact, Perl&amp;rsquo;s design banks on that. That last little bit of music actually can stand on its own. [Plays] That&amp;rsquo;s usually known as &amp;ldquo;Shave and a Haircut, Two Bits,&amp;rdquo; so music also has its one-liners.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another piece known as &amp;ldquo;The Mouse Trap Concerto.&amp;rdquo; [Plays one note] [Laughter and applause] Actually, I&amp;rsquo;ve played a lot of serious music on my violin. It was my privilege to spend six years in the Seattle Youth Symphony under the direction of Wilhelm Sokle. There wasn&amp;rsquo;t anything that we couldn&amp;rsquo;t play, but we just had to work at it a little longer than a professional orchestra would, which reminds me of Perl development sometimes. One thing I learned while playing in various orchestras is the importance of faking it. You have to be able to fake playing an instrument before you can really play it and I&amp;rsquo;m faking most of these instruments. My whole first year in the youth symphony I was petrified that I might get called upon during rehearsal to play a part that I wasn&amp;rsquo;t ready to play. Fortunately, I was never called upon. My second year I made a startling discovery. I just learned the music thoroughly and then I didn&amp;rsquo;t have to worry about whether anybody called on me to play it.&lt;/p&gt;

&lt;p&gt;How does this play out in Perl culture? Well, we have to be willing to let people fake it for a while. If Perl is getting their job done, then that&amp;rsquo;s fine, but we also have to find ways of encouraging people to upgrade their abilities when they&amp;rsquo;re ready for that step, and we don&amp;rsquo;t do that by beating them over the head. We do it by showing the positive benefits of learning Perl for real. You know, I probably could have actually been a professional violinist. Had I been only interested in music, I might have been, but then I wouldn&amp;rsquo;t be up here waving around a violin at you. But I&amp;rsquo;d also like to use this violin to illustrate reusability. [Plays portion of &amp;ldquo;William Tell Overture&amp;rdquo; on violin] Or something like that. Well, I don&amp;rsquo;t think William Tell would have minded the Lone Ranger using his music, but when I was growing up there were still cigarette commercials on TV and sometimes you heard, &amp;ldquo;Have a Lark, have a Lark, have a Lark, today.&amp;rdquo; Later on it was &amp;ldquo;Have a pizza, have a pizza, have a pizza roll.&amp;rdquo; I&amp;rsquo;m sure William Tell would just love to shoot a pizza roll off of someone&amp;rsquo;s head.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;rsquo;d like to finally introduce officially my synthesizer here, Korg 5S, meet Perl hackers. Perl hackers meet Korg 5S. I&amp;rsquo;ve been pretending it&amp;rsquo;s a piano and an organ and any number of other things, but it&amp;rsquo;s really just a bunch of switches and oscillators and such. Like Perl, it can be viewed as a tool that got out of hand. Like Perl, it can be viewed as just another tool in the toolbox as well. I joke that the piano interface was experimental, but this interface really is experimental. The keyboard interface is pretty standard, it&amp;rsquo;s an awful lot of fun to use this thing in its current state, kind of like Perl. It does a pretty good job of emulating some other tools in the toolbox. For instance - [Plays on keyboard] - easier here than there, unless you&amp;rsquo;re my wife. She does this easier here too. Now I&amp;rsquo;m going to get in trouble. The thing that is really cool about this keyboard is that it can play various different styles of music, Tim Tody and all that. My favorite button is the one that locks in the different styles into the same tempo so that you can go from one style to another and see how the same tune sounds in different cultural contexts. For example, how would &amp;ldquo;Pachabel&amp;rsquo;s Canon&amp;rdquo; come out if it were played by Mick and Keith or by John, Paul, George, and Ringo, or by Elvis? Well, we can find out. [Plays] [Applause] Well, one could go on all day with that.&lt;/p&gt;

&lt;p&gt;One of the things we love about Perl is that it supports many different styles of programming. That&amp;rsquo;s something we never want to lose with Perl. There&amp;rsquo;s also just the intrinsic joy in making music that has nothing to do with whether we&amp;rsquo;re using the music for some other purpose. Likewise, there&amp;rsquo;s an intrinsic joy in programming in Perl that has nothing to do with the purpose we&amp;rsquo;re putting it to. That is also something we never want to lose. In fact, there are many features we want to conserve in Perl, but music is continually re-inventing itself and so is Perl culture. Most music is evolutionary, not revolutionary. People don&amp;rsquo;t usually riot over new music - Stravinsky&amp;rsquo;s &amp;ldquo;Rite of Spring&amp;rdquo; being the exception that proves the rule, but people don&amp;rsquo;t usually riot over new Perl modules either. But occasionally there does come a time when we have to think like revolutionaries. Someone has to throw the tea into the Boston Harbor. Someone has to decide that it was time to write the document starting out, &amp;ldquo;When in the course of human events it becomes necessary&amp;rdquo; etc., etc., but before that someone had to decide to alter the course of human events.&lt;/p&gt;

&lt;p&gt;Yesterday, a bunch of us radicals decided that it was time to alter the course of human events. Some of you may have heard rumors of this. So, today, I&amp;rsquo;d like to announce to the world that the effort to write Perl 6 has begun in earnest. [Applause] And I&amp;rsquo;d like to use the synthesizer to make an important point. If you manufacture something like this, you eventually come to a point where you say, &amp;ldquo;This is a really neat gismo, but we can do something better. Do we continue to make small improvements in the current design or do we redesign the interface to let us do what we would really do down the road? And, if we do a redesign, can we keep everything people like about the old design while getting rid of all the things people don&amp;rsquo;t like about the thing they have right now?&amp;rdquo; Well, that&amp;rsquo;s kind of the state Perl is in right now. We really, really like what we have. We like it a lot, but we can think of lots of ways we can do it better and the things we&amp;rsquo;d like to do better come in several categories.&lt;/p&gt;

&lt;p&gt;First, the language itself could use some revision. I&amp;rsquo;m allowed to admit that. There are many historical warts on Perl that wouldn&amp;rsquo;t have been there if I&amp;rsquo;d known what I was doing, but, hey, I was faking it back then. You didn&amp;rsquo;t know that, did you? I&amp;rsquo;m more of a competent language designer than I was 13 years ago and I have a lot more help these days, plus it&amp;rsquo;s time to steal all the good ideas we can from those other languages that developed in the last decade. One of the things I realized yesterday was that we&amp;rsquo;re actually in a much better position than when I designed Perl 5. Nowadays, we have code back-ins, such as B::B Parse, that can spit out the Perl code corresponding to the compiled syntax tree. If you think about that, it means that it would be relatively easy to make it spit out a closely related language, such as Perl 6.&lt;/p&gt;

&lt;p&gt;Perl has always been designed to evolve but now we actually have the capability to be evolving a little faster. This means that for the first time in history we have the opportunity to make some incompatible fixes to Perl while preserving a migration path for the current code. I really couldn&amp;rsquo;t do that when I designed Perl 5. We had to make almost everything upward compatible, or backward compatible, whichever one it is. But now it&amp;rsquo;s the first chance to make that sort of changes and, since it is the first chance, it probably is also the last chance, so I think we should. Of course, we are not interested in breaking things just to break things, but I&amp;rsquo;m sure you can think of things you might have done differently. Myself, I really wish I&amp;rsquo;d made the system call return &amp;ldquo;true&amp;rdquo; on success rather than &amp;ldquo;false.&amp;rdquo; I wish I&amp;rsquo;d made local time return the actual year and not the year minus 1900. I&amp;rsquo;d really love to throw out select file handle and there&amp;rsquo;s general consensus that type gloves may have outlived their usefulness, and a number of simple but potentially powerful features have already been put on the table for consideration. That&amp;rsquo;s not to say we&amp;rsquo;re going to do all of them. My overriding goal for the redesign of Perl&amp;rsquo;s language is that easy things should stay easy, hard things should get easier, and impossible things should get hard, as it were.&lt;/p&gt;

&lt;p&gt;Another place we&amp;rsquo;d like to do better is in the implementation of the language as opposed to the language itself. I think I did a pretty good job with the design of Perl 5 and making it extensible at the language level, but the internal APIs necessary to write extension modules could really use to be cleaned up. Some of you may have noticed that. We could scrap Excess for something better, and, of course, we want the chord to be smaller and faster, always. I&amp;rsquo;d like to run Perl on my Palm, but perhaps more importantly we could design the extension system so that installing a new version of Perl doesn&amp;rsquo;t break all your existing extension modules. We have many other ideas for improving the implementation as well and these will come filtering out, but neither language changes nor implementation changes will happen unless we also reinvent how we do things.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;ve already started a redesign of Perl culture, trying to keep the good aspects and leaving behind the nonproductive aspects. We intend to abandon the Perl 5 porter&amp;rsquo;s model of development, which demonstrably leads to a lot of talk but little action. Instead we&amp;rsquo;ll break down the design of Perl 6 and the maintenance of Perl 5 into manageable tasks given to meaningful working groups with meaningful charters and meaningful goals. We have collectively resolved to make these working groups work, and where they do not work to work at making them work until they do work. We will continue to refine all aspects of our development model until every itch is scratched as efficiently as possible.&lt;/p&gt;

&lt;p&gt;We are really jazzed about this. It is our belief that if Perl culture is designed right, Perl will be able to evolve into the language we need 20 years from now. It&amp;rsquo;s also our belief that only a radical rethinking of both the Perl language and its implementation can energize the community in the long run. In the long run means 10 and 20 years down the road. Finally, it is our belief that Perl 5 will be better supported than it would be if we merely tried to guard what we already have. The best defense is a good offense. Now, this is not going to happen quickly. We expect to have alpha code a year from now, or some definition of alpha. We might even ship it, but we expect it to be well-designed alpha code.&lt;/p&gt;

&lt;p&gt;In the meantime, we are not abandoning Perl 5 anytime soon. We all like Perl 5 a lot. We all use it a lot. Many commercial interests will guarantee that Perl 5 continues to be well-maintained and stabilized for quite a few years to come, and we fully expect, given the history of Perl 4, that five years from now a lot of people will still be using Perl 5. We do expect the rate of new development in Perl 5 to taper off, of course, and that can be viewed as a feature, but no, open-source software specifically rejects the get-big-quick philosophy of the typical Web startup. Such rapid growth tends to fragment the culture and, in the long run, leads to ruin. Instead, we intend to proceed at the fastest speed at which we can efficiently propagate our cultural values to newcomers in our culture, but no faster. This is the healthy way forward and the only way to compete in a competitive space.&lt;/p&gt;

&lt;p&gt;We have to be better, not just get there faster. Part of being better is making sure the stragglers don&amp;rsquo;t get left behind. We are determined to do the right thing by everyone. To this we pledge our lives, our fortunes, and our sacred honor, as it were, what there is of it. Many more details of our plans will be coming out in the next few days and weeks, and we&amp;rsquo;ll tell you who has taken responsibility for what. We&amp;rsquo;ll set out a road map or chart if you&amp;rsquo;re into music of where we&amp;rsquo;d like to be when. Look at www.perl.org for more as time goes on. Things should be showing up there today even. But right now I would like to call each of you to play your part, whatever that part is. You, yourselves, are individual melodies. Your being here today may be an event that changes the course of your tune. Certainly your being here with everyone else who is here today makes a kind of harmony, a lost chord that will never be played exactly the same again. Together we perform a contrapuntal jazz improvisation that can only be recorded imperfectly. Music has always been an ephemeral art, and even with CDs and DVDs people still go to live concerts. So remember, you were here when a new thing was born.&lt;/p&gt;

&lt;p&gt;Every Perl conference is a cool event because Perl people are the best people in the world. In this age of mailing lists and Web pages, it&amp;rsquo;s really nice to get personally acquainted with all the folks that you&amp;rsquo;ve met on the Net. But this conference is not just about getting together with your buds. It&amp;rsquo;s also about finding new friends, forming new bands, creating cool new sounds, maybe landing a recording contract on the CPAN. Sometimes it&amp;rsquo;s about more than that. Today it&amp;rsquo;s about more than than. We&amp;rsquo;re really serious about reinventing everything that needs reinventing. The way I look at it, Perl 5 was a composition largely by a single composer - me. It&amp;rsquo;s a fine classical composition, but in essence it&amp;rsquo;s one person&amp;rsquo;s view of how to make music. If you work with Perl 5 you have to follow the score pretty closely. Perl 6 is going to be designed by the community. We&amp;rsquo;re going to be doing some jamming. I&amp;rsquo;ll still be exercising some artistic control over the language itself, but instead of playing off a score, I&amp;rsquo;m going to be playing off charts now and you&amp;rsquo;re going to be seeing a lot of people improvising melodies of their own and interweaving them creatively in ways that will make Perl 6 much better than Perl 5, just as Perl 5 was much better than Perl 4, and if you know anything about me, you know I take the promised land quite seriously. We&amp;rsquo;re all going to march in there someday. [Plays music.] I&amp;rsquo;m jazzed. [Applause.]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Narrator:&lt;/strong&gt; John has very kindly offered to let Larry do a Q&amp;amp;A for the next 15 minutes on the grounds that there is not enough time to cover the full details of how to rebuild civilization after the Apocalypse. Larry would you be willing to do a Q&amp;amp;A?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; If you&amp;rsquo;ll help, I&amp;rsquo;d like to introduce our interim program manager for Perl 6. [Applause.] Now that we&amp;rsquo;ve got that out of the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Is Perl 6 going to be in C++? Maybe. Chip has a lot of experience with thinking about Perl and C++ and we intend to use the lessons he&amp;rsquo;s learned one way or another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; When do you expect the Perl 6 plan to appear and when can we start work on it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Well, it will come out in stages. We are, in cultural terms, we are starting working on it already, and over the next month or so you are going to see the chart, the road map, come out and my own personal goal - for some reason, they wanted me to take the position of language designer - of course, I&amp;rsquo;ll have a lot of help on that, but my goal for that part of it - I&amp;rsquo;m giving a talk at Linux World Expo in Atlanta in October and they wanted me to do a keynote there and I didn&amp;rsquo;t know what I was going to talk about. Well, now I do, and I&amp;rsquo;ll talk about the new Perl and where it&amp;rsquo;s going as a language. The language design is now going to be separate from the implementation design and we&amp;rsquo;ve got a number of other positions that we&amp;rsquo;ve named names for and you&amp;rsquo;ll see those if you look at the press release, but the schedule is not nailed down yet, but we&amp;rsquo;ll try to act a bit like pointy-haired bosses and do some of that scheduling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Will Perl 6 have specs and then you could implement something that looks like this, or will it be kind of like now, where the system won&amp;rsquo;t work?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Yeah. I don&amp;rsquo;t know how strict a spec it will be from the language design point of view. I&amp;rsquo;m not really big on that sort of spec and there is some value to using the reference implementation approach and what we currently have is a reference implementation will no second implementation, well, unless you count the JVM work, but, obviously there are benefits to having things justified well enough that you could implement another one even if you didn&amp;rsquo;t want to, so we&amp;rsquo;ll definitely be working in that direction and - do you have something? And there was something else I was going to say - what we particularly want to stress in terms of - is not perhaps so much the spec as developing our current regression test. Well, we call them regression tests, but they&amp;rsquo;re almost more acceptance tests, but, we developed our acceptance into real regression tests then you&amp;rsquo;d further develop the real regression tests into a validation test of what the language actually means and actually go out and explore all the nooks and crannies and say, &amp;ldquo;This is Perl, this is not Perl,&amp;rdquo; and then we actually have a machine-readable spec. And to me that&amp;rsquo;s actually a lot more important than what the verbiage on the human readable thing says.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;: I think that one of the problems with the P5P model is the infrastructure of mailing lists tends to push people into a &amp;ldquo;I say this,&amp;rdquo; &amp;ldquo;but I say that,&amp;rdquo; &amp;ldquo;but I say this,&amp;rdquo; &amp;ldquo;but I say that.&amp;rdquo; Kind of heads banging against each other and not really resolving anything. There&amp;rsquo;s various kinds of work. Horscht Ritter did his Ivis project and there&amp;rsquo;s Wicki&amp;rsquo;s and things like that that are used to try and resolve things and give people a place to put their argument as best possible and then they can move on to something else, so you might want to look into some of that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Yes, we&amp;rsquo;re already planning to do some of that. Each working group will have somebody in charge who makes the final decisions. We will have mailing lists which are at least two tiered in that they will have official inner ringers but anybody can listen in and contribute indirectly if they want to contribute to the actual working group - the people who are actually on the working group. We want to have an official RFC sort of kind of mechanism for not just this sort of off-the-top-of-your-head &amp;ldquo;Oh, wouldn&amp;rsquo;t it be nice if this,&amp;rdquo; &amp;ldquo;Wouldn&amp;rsquo;t it be nice if that.&amp;rdquo; If you have a real proposal for a feature, make an official proposal in an official place with all the things that make it an official proposal, and, you know - I guess that&amp;rsquo;s it about that one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Thank you for taking on this endeavor. Can you hint at any language changes that you&amp;rsquo;re considering?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; I hinted at some of them. Everything is negotiable, but everything will not be traded away. On a philosophical level, I have the profound feeling that if I like something, other people will like it and if I don&amp;rsquo;t like something, other people probably don&amp;rsquo;t like it so much, and so I really trust my instincts on where things will be going. I&amp;rsquo;ll be getting a lot of feedback on that, too. We&amp;rsquo;ve been getting a lot of feedback for the past 10 years on things that people think are kind of grouty. For instance, there&amp;rsquo;s really no reason why formats should be in the core anymore. They should be a, you know, come in as a module. There are things that could be done perhaps to clean up ambiguities and indirect object impacts. Basically what we are saying at this point is if we are going to bite the bullet and require translation of Perl 5 to Perl 6, that really means that we can consider anything that still allows us to translate most scripts. Now we do not expect to be able to translate a 100 percent, but if we can translate with 95-percent accuracy 95 percent of the scripts, and 100-percent accuracy 80 percent of the scripts, then that&amp;rsquo;s getting into the ballpark, but on the other hand, sometimes you have to break a few somethings or other to make an omelette. Other specific features, can you remember any of the ones we named?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; One of the problems with language translators is you lose all the comments and formatting and things like that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Not the Ox to Perl translators. I wrote that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audience member:&lt;/strong&gt; Well, can you make sure that will be the way it works in the Perl 5 to Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; It may, it may lose some of the formatting information, but there&amp;rsquo;s ways to annotate a syntax tree with additional information. And if we have to get a little incestuous with the compiler and turn off certain optimizations to get a more pristine syntax tree to translate that &amp;ndash; lots of things like that can be done. This is subject that &amp;ndash; I enjoy doing things like that, so I don&amp;rsquo;t think you need to worry about that not getting done reasonably adequately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; I somewhat disagree with your bracketing and indentation style, but respect your right to observe your particular religion. With the automatic language translation that you&amp;rsquo;re having, will I have, within reason, the ability to observe my religion? How long have you been thinking about doing this? How long have you been stewing on it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Since yesterday.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audience member:&lt;/strong&gt; Are you contemplating any changes to Pod?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Everything is negotiable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audience member:&lt;/strong&gt; You said you wish to steal from some languages. Which languages in particular over the last decade?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; COBOL. Identification Division. I always wanted an identification divisioner. No, really, I don&amp;rsquo;t want an identification division. The problem with identification division is it really puts a crimp in Perl&amp;rsquo;s poetry, or in COBOL poetry. How many poems can you start off identification division? One. What&amp;rsquo;s your favorite language, besides Perl? You know, lots of languages do more of a byte code thing. Some of these things, a lot of these things are not borrowing from a specific language. There&amp;rsquo;s multiple languages that use the byte code thing. There&amp;rsquo;s various languages with a cleaner object interface to their IL and such. There&amp;rsquo;s lots of languages that, I don&amp;rsquo;t know, do various things, but we - when something like - when you see all the new languages coming out and they all have a garbage collector and that helps them fit together into browsers and things like that better, you start thinking, maybe we ought to think about that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Larry, more and more people, of course, are using Perl today to write larger and larger software. Is there anything in Perl 6 that you can think of off hand that might make that easier? Large software tend to have - tend to appreciate things like stronger type checking, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry:&lt;/strong&gt; Yes, certainly. We already got the hooks in there to start putting some things in there optionally, and you could have used strict-type checking if you wanted to or you could use Stricter or something. You can use bondage and discipline - whatever you want to call the module. Also, as part of the redesign - here&amp;rsquo;s a biggie - we intend to get rid of quite a few of those strange global variables or the strange one. We will certainly get rid of dollar sharp.&lt;/p&gt;

&lt;h3 id=&#34;audio&#34;&gt;Audio&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/a1SEt_-QMDo&#34;&gt;On Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_10_23_soto2000/part1.mp3&#34;&gt;MP3 - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;media/_pub_2000_10_23_soto2000/part2.mp3&#34;&gt;MP3 - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;media/_pub_2000_10_23_soto2000/part3.mp3&#34;&gt;MP3 - Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;media/_pub_2000_10_23_soto2000/part4.mp3&#34;&gt;MP3 - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3rd State of the Onion</title>
      <link>http://localhost:1313/pub/1999/08/onion/talk1.html/</link>
      <pubDate>Mon, 30 Aug 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/08/onion/talk1.html/</guid>
      <description>&lt;p&gt;This talk was delivered by &lt;a href=&#34;http://www.wall.org/~larry&#34;&gt;Larry Wall&lt;/a&gt; on August 23, 1999 at the &lt;a href=&#34;http://conference.oreilly.com&#34;&gt;Perl Conference 3.0&lt;/a&gt; in Monterey, CA.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: most of the pictures this year were images of molecules that I animated using a program called &lt;a href=&#34;http://www.umass.edu/microbio/rasmol/&#34;&gt;RasMol&lt;/a&gt;, along with a &lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/pmol&#34;&gt;Perl script&lt;/a&gt; to drive it and make the molecules rotate. You probably don&amp;rsquo;t have RasMol on your computer, and if you do, you probably don&amp;rsquo;t have my script. So in the following I&amp;rsquo;ve substituted static images, but these link to the corresponding PDB files, which can be fed to RasMol (or my script, pmol) if you want to play with the images yourself. You can find many more PDB files on the net if you&amp;rsquo;re interested.)&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Two years ago, in my &lt;a href=&#34;http://localhost:1313/pub/1997/wall/keynote.html&#34;&gt;first&lt;/a&gt; State of the Onion speech, I used sounds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I play ``&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/absorbed.au&#34;&gt;You will be absorbed&lt;/a&gt;.&amp;rdquo;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, in my &lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html&#34;&gt;second&lt;/a&gt; State of the Onion speech, I used pictures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hap.gif&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hap2.gif&#34; alt=&#34;Happy face&#34; width=&#34;315&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those of you who heard or read that speech will recall that I threatened to use smellovision this year. So guess what.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I hold up an onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an onion. Allow me to cut it here in front of you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I cut the onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They laughed, they cried&amp;hellip;&lt;/p&gt;

&lt;p&gt;And just this last week, they &lt;a href=&#34;http://dailynews.yahoo.com/h/ap/19990816/pl/senate_fumes_1.html&#34;&gt;evacuated&lt;/a&gt; a federal building in Washington, D.C. because people were getting sick from some mysterious toxic fumes. Guess what sort of toxic fumes they turned out to be?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I wave the onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The active ingredient in onion, the one that makes you cry, is thought to be something called 1-propenyl sulfenic acid. In chemistry shorthand, that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CH3-CH=CH-SOH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be wondering what this has to do with programming. Other than the fact that reading other people&amp;rsquo;s code sometimes makes you want to cry.&lt;/p&gt;

&lt;p&gt;The point I would like to make today is that I think the Perl community has ``good chemistry&amp;rdquo;. We often talk about groups of people having ``good chemistry&amp;rdquo;. Especially when the group consists of two people who suddenly like each other very much.&lt;/p&gt;

&lt;p&gt;Unfortunately, what the phrase ``good chemistry&amp;rdquo; usually means is that we don&amp;rsquo;t understand what&amp;rsquo;s making the chemistry good. Chemistry is a mystery to most of us. It&amp;rsquo;s like saying ``It&amp;rsquo;s all Greek to me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one little problem with that saying. I can read Greek. I learned some classical Greek at &lt;a href=&#34;http://www.spu.edu&#34;&gt;Seattle Pacific University&lt;/a&gt; as part of my declared major, Natural and Artificial Languages. That was just an excuse to mix up linguistics and computer science. You probably know that already.&lt;/p&gt;

&lt;p&gt;What you may not know is that I started off college with a double major in Chemistry and Music. If I can&amp;rsquo;t say, ``It&amp;rsquo;s all Greek to me,&amp;rdquo; neither can I say, ``We have good chemistry.&amp;rdquo; At least, I can&amp;rsquo;t say it without wondering what it means. I have some ideas about what good chemistry is, and that&amp;rsquo;s what I&amp;rsquo;m going to talk about today.&lt;/p&gt;

&lt;p&gt;So to start, here&amp;rsquo;s one of our favorite molecules.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/caffeine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/caffeine.gif&#34; alt=&#34;Caffeine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is caffeine. Good chemistry in this case means keeping you awake through my talk.&lt;/p&gt;

&lt;p&gt;Actually, you should find this talk interesting if you&amp;rsquo;ve ever had anything to do with chemistry. And if you are lifeform that is not based on chemistry, I apologize in advance. Well hey, this&amp;rsquo;ll talk will probably get slashdotted, and who knows how many AI projects are reading slashdot these days?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also tempted to apologize for the fact that this talk is organized organically. But I won&amp;rsquo;t. It&amp;rsquo;s funny, but the way the English language is going, ``organized organically&amp;rdquo; is becoming an oxymoron. You wouldn&amp;rsquo;t think so, since the two words are based on the same root. But our world today has two opposing views on the goodness of hierarchy, and each of these words has fallen down on opposite sides of the fence. Modern life is organized, while postmodern life is merely organic.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m not here to talk about postmodernism. I &lt;a href=&#34;http://www.wall.org/~larry/pm.html&#34;&gt;tried&lt;/a&gt; to do that last spring, and afterwards I was thoroughly deconstructed by the deconstructionists for attempting to deconstruct deconstructionism. At least, that&amp;rsquo;s the construction I put on their construction of it. I was talking about postmodern culture, and they thought I was talking about postmodern literature. Not at all the same thing!&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m enough of a postmodern that if you tell me my talk is &lt;em&gt;organized&lt;/em&gt;, I&amp;rsquo;ll be insulted, but if you tell me my talk is &lt;em&gt;organic&lt;/em&gt;, I&amp;rsquo;ll be complimented.&lt;/p&gt;

&lt;p&gt;If you tell me my talk is &lt;em&gt;orgasmic&lt;/em&gt;, I won&amp;rsquo;t believe you.&lt;/p&gt;

&lt;p&gt;At least, not until I light this candle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I wave around an oversized votive candle.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I ordered this candle a couple of days ago over the Web from a company called &lt;a href=&#34;http://www.erox.com&#34;&gt;Realm Fragrances&lt;/a&gt;. They hold the patent on fragrances containing human pheromones. This candle purports to contain human pheromones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I light the candle.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Come on baby, light my fire&amp;hellip;&lt;/p&gt;

&lt;p&gt;If you didn&amp;rsquo;t think Perl was sexy before, you will now.&lt;/p&gt;

&lt;p&gt;(Whether you want to or not.)&lt;/p&gt;

&lt;p&gt;Better programming through chemistry&amp;hellip;&lt;/p&gt;

&lt;p&gt;Actually, I just read another &lt;a href=&#34;http://www.discover.com/sep_99/breakfollies.html&#34;&gt;news item&lt;/a&gt; a couple of weeks ago that said that some study had just shown that the recently discovered vomeronasal receptors in the human nose are, in fact, vestigial, and don&amp;rsquo;t have neurons to them in adults. Ah, well. Studies are a dime a dozen. If you try hard enough, you can even find studies that prove cigarette smoking is bad for you.&lt;/p&gt;

&lt;p&gt;Speaking of studies, a bright fellow by the name of &lt;a href=&#34;http://opensource.activestate.com/authors/tedshieh/index.html&#34;&gt;Ted Shieh&lt;/a&gt; has been &lt;a href=&#34;http://opensource.activestate.com/authors/tedshieh/software.html&#34;&gt;studying&lt;/a&gt; the demand for programmers of various kinds. He&amp;rsquo;s been analyzing the web site &lt;a href=&#34;http://www.dice.com&#34;&gt;www.dice.com&lt;/a&gt;, where corporate America advertises openings for high-tech jobs, about 132,000 as of today. This is what is known to pollsters as a large statistical sample.&lt;/p&gt;

&lt;p&gt;Of course, to a chemist it would be a very small statistical sample. Chemists aren&amp;rsquo;t impressed until you start using exponential notation. You know, Avocado&amp;rsquo;s number, and all that.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;rsquo;s a chart that Ted came up with. It charts the number of job listings on dice.com that mention any of the top programming languages. The chart shows growth over the last six months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/gch.gif&#34; alt=&#34;job listings on dice.com&#34; width=&#34;918&#34; height=&#34;621&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl is the yellow line.&lt;/p&gt;

&lt;p&gt;Allow me to point out this spot in April when Perl passed up COBOL.&lt;/p&gt;

&lt;p&gt;Of course, passing up COBOL is no big deal these days, since demand for COBOL seems to be trailing off, for some strange reason.&lt;/p&gt;

&lt;p&gt;Perhaps more to the point, notice this spot in July when Perl passed up Visual Basic.&lt;/p&gt;

&lt;p&gt;Finally, notice this spot way down in the corner, where Python finally got off the baseline. A little.&lt;/p&gt;

&lt;p&gt;In the race to the millennium, it looks like C++ will win, Java will place, and Perl will show. Some of you no doubt will wish we could erase those top two lines, but I don&amp;rsquo;t think you should be unduly concerned. Note that both C++ and Java are systems programming languages. They&amp;rsquo;re the two sports cars out in front of the race. Meanwhile, Perl is the fastest SUV, coming up in front of all the other SUVs. It&amp;rsquo;s the best in its class.&lt;/p&gt;

&lt;p&gt;Of course, we all know Perl is in a class of its own.&lt;/p&gt;

&lt;p&gt;Our real competitor according to this chart is JavaScript. They&amp;rsquo;re coming along strong in fourth place. That&amp;rsquo;s not terribly surprising, considering that JavaScript has taken over a lot of the role in the browser that everyone originally thought Java was going to fill by itself.&lt;/p&gt;

&lt;p&gt;This chart actually lies a little, since it&amp;rsquo;s not scaled by the number of jobs listed on dice.com. And that number has been doubling once every year or so. So all these lines are a little too optimistic.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another chart from Ted that corrects for that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pct.gif&#34; alt=&#34;correction on jobs listed on dice.com&#34; width=&#34;931&#34; height=&#34;601&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this chart, all the languages add up to 100%, so we can see what the relative demand has been over the last six months.&lt;/p&gt;

&lt;p&gt;See the pinkish band at the top. Imminent death of COBOL predicted.&lt;/p&gt;

&lt;p&gt;Look at these bottom two bands. Of course, we don&amp;rsquo;t want to be fooled by the fact that they&amp;rsquo;re next to each other, but I do think that Java is growing primarily at the expense of C++. And maybe COBOL.&lt;/p&gt;

&lt;p&gt;Meanwhile, both Perl and JavaScript are chewing into Visual Basic, and maybe COBOL. Nobody else on the screen is doing any chewing. The thin blue band at the top is Smalltalk. If you look really closely at the black line above that, it gets a little thicker in spots. That&amp;rsquo;s Python.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another way in which these charts might be lying. They don&amp;rsquo;t tell us how many jobs there actually are out there.&lt;/p&gt;

&lt;p&gt;Perhaps there&amp;rsquo;s no demand for Python programmers simply because Python programmers are really easy to find without using dice.com.&lt;/p&gt;

&lt;p&gt;Some of you look dubious.&lt;/p&gt;

&lt;p&gt;On the other hand, maybe the demand for Java programmers is driven entirely by hype, and there are in reality no Java programmers out there.&lt;/p&gt;

&lt;p&gt;Well hey, maybe that&amp;rsquo;s why they cancelled JavaOS last week.&lt;/p&gt;

&lt;p&gt;I really do have a hard time believing that COBOL is dying. Maybe the demand is going down for COBOL programmers because there are billions of COBOL programmers beating down the doors of businesses looking for jobs. Maybe the demand was artificially high because of Y2K fixups. I dunno. Maybe someone did a study that proves COBOL is bad for your health.&lt;/p&gt;

&lt;p&gt;Well, enough disclaimers. As long as the demand for Perl keeps going up, we&amp;rsquo;re doing something right. You can call it buzz or you can call it brownian motion, but let&amp;rsquo;s keep doing the good chemistry.&lt;/p&gt;

&lt;p&gt;So, all right, what &lt;em&gt;is&lt;/em&gt; good chemistry. First of all, good chemistry is a little bit messy. Good chemistry is not the same as perfect chemistry. If you want perfect chemistry, here&amp;rsquo;s an example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/diamond.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/diamond.gif&#34; alt=&#34;Diamond&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a bit of diamond crystal. Diamonds may be a girl&amp;rsquo;s best friend (next to pheromone candles), but they&amp;rsquo;re actually rather boring. Crystals are pretty, but they just kind of sit there, not doing much of anything.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/prl.gif&#34; alt=&#34;Pearls&#34; width=&#34;325&#34; height=&#34;281&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pearls are much more interesting. They&amp;rsquo;re produced by living oysters, after all. They consist of alternating layers of calcium carbonate crystals and an organic binder known as conchiolin. (I suppose it must have something to do with conches.) These alternating layers are what make the pearl irridescent. Calcium carbonate is, of course, a compound of calcium, carbon, and oxygen. Conchiolin is a mixture of various proteins and polysaccharides, rather like your fingernails.&lt;/p&gt;

&lt;p&gt;In other words, pearls are complicated, and a little bit messy.&lt;/p&gt;

&lt;p&gt;I think good chemistry is complicated, and a little bit messy. I suppose one of the reasons I think that is because, when I was young, I had a chemistry set.&lt;/p&gt;

&lt;p&gt;Back in those days, men were men, boys were boys, and chemistry sets were Chemistry Sets. Chemistry sets had real test tubes, and a real alcohol burner, and real chemicals. Dangerous chemicals. The bottles had warnings like, ``Eat thou not of this. If thou eatest of this, thou shalt surely die.&amp;rdquo; Or something like that.&lt;/p&gt;

&lt;p&gt;Sure, you could do all the fun experiments turning things red or blue or clear again, but you could also do the things that really matter to a junior high boy. You could make things that stink. You could make things that explode.&lt;/p&gt;

&lt;p&gt;Of course, they didn&amp;rsquo;t give you everything you needed for that in the chemistry set. You were expected to go down to the drug store and buy your own potassium nitrate, otherwise known as saltpeter. Saltpeter is cool stuff, for a junior high boy.&lt;/p&gt;

&lt;p&gt;One day I mixed some saltpeter with sulfur and sugar. You&amp;rsquo;re all familiar with sugar at the macroscopic level. Here&amp;rsquo;s a picture of a sucrose molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/sucrose.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/sucrose.gif&#34; alt=&#34;Sucrose&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nowadays it seems sort of a shame to use such a pretty, not to mention tasty, molecule merely for fuel, but that&amp;rsquo;s what I did. I discovered a couple of things. First, I discovered that this mixture makes an excellent stink bomb. As you can see here, the sugar molecule has lots of hydrogens. When you burn the mixture, apparently the sugar donates hydrogen and the sulfur donates, well, sulfur, producing hydrogen sulfide in copious quantities.&lt;/p&gt;

&lt;p&gt;I also discovered that I should not light off stink bombs in the basement. Besides smelling like rotten eggs, hydrogen sulfide is rather poisonous in large quantities. Guess who had just manufactured large quantities of it. In the basement. Fortunately, no one else was home at the time, and I had the house aired out by the time anyone came home. But I didn&amp;rsquo;t know that, so all morning, the door to the basement had a sign that said, ``If thou goest down here, thou shalt surely die.&amp;rdquo; Or something like that.&lt;/p&gt;

&lt;p&gt;Maybe someday I&amp;rsquo;ll talk about the rockets. Rocket science is messy too.&lt;/p&gt;

&lt;p&gt;By the way, I&amp;rsquo;m showing you this molecule courtesy of a program called ``RasMol&amp;rdquo;. No, it&amp;rsquo;s not written in Perl. It&amp;rsquo;s written in C. Sorry.&lt;/p&gt;

&lt;p&gt;Believe it or not, there really are a few good programs out there written in C. You know, &lt;em&gt;rn&lt;/em&gt;&amp;hellip; &lt;em&gt;patch&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Maybe &lt;em&gt;perl&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;But in my defense, allow me to point out that I&amp;rsquo;m running the animation by piping commands to RasMol from a Perl script. And that&amp;rsquo;s as it should be. We don&amp;rsquo;t have to do everything with Perl. We just have to be in control.&lt;/p&gt;

&lt;p&gt;Actually, I&amp;rsquo;m not a control freak. I think I&amp;rsquo;m more of a chaos freak.&lt;/p&gt;

&lt;p&gt;Well, okay, I&amp;rsquo;m really a controlled chaos freak. Here&amp;rsquo;s some &lt;a href=&#34;http://dir.yahoo.com/Entertainment/Comics_and_Animation/Characters/Wallace_and_Gromit&#34;&gt;Wallace and Gromit&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I play ``&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/WG_control.au&#34;&gt;Everything seems to be under control!&lt;/a&gt;&amp;ldquo;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seriously, Perl doesn&amp;rsquo;t have to be in control. It just likes to be in the middle. Kind of like those carbon atoms there in sucrose. Or here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cynac.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cynac.gif&#34; alt=&#34;polycyanoacrylate&#34; width=&#34;568&#34; height=&#34;264&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a strand of polycyanoacrylate, more commonly known as superglue. In the middle of things is where a glue language belongs. The world will always have interstices, and we&amp;rsquo;ll always be needing to put glue into them upon occasion. We&amp;rsquo;re in the business of developing better glue molecules. So don&amp;rsquo;t fret yourselves about whether Perl is doing better or worse than some other language in the job market. We&amp;rsquo;re not in that kind of a race.&lt;/p&gt;

&lt;p&gt;We do not define Perl as an improved version of some other language. Nor do we have to define Perl as the next universal language. We&amp;rsquo;re not trying to make Perl a better language than C++, or Python, or Java, or JavaScript. We&amp;rsquo;re trying to make Perl a better language than Perl. That&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So, what do you want in a glue language?&lt;/p&gt;

&lt;p&gt;Well, you have to have the basics, of course. The BASIC programming language was called BASIC for a reason, after all. This superglue molecule shows us a nice bit of linear programming along the backbone. It&amp;rsquo;s a bit obscured by all the cyanide groups. I find it a bit odd that surgeons use superglue because it&amp;rsquo;s non-toxic. Hydrogen cyanide is what they use in the gas chamber in California. Go figure.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simpler example of linear programming, without all the cyanide on the side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/decane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/decane.gif&#34; alt=&#34;decane&#34; width=&#34;560&#34; height=&#34;295&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is decane, a simple linear hydrocarbon. We don&amp;rsquo;t use it for glue. I am undoubtedly burning some decane in my candle here, since parafin is largely made up of long linear alkanes. If we chop this molecule in half, we get a shorter script. Er, program. Er, molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/pentane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pentane.gif&#34; alt=&#34;pentane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a simple molecule of pentane. We don&amp;rsquo;t use it for glue, either. Mostly we burn it up, because pentane is a basic ingredient of gasoline. But certainly not the only ingredient. You&amp;rsquo;d never want to burn 100% pentane in your car. 100% pentane is the very definition of 0 octane gas. To get 100 octane gas, we have to add a branching capability to our language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/hexamethylethane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hexamethylethane.gif&#34; alt=&#34;hexamethylethane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This molecule defines the standard for 100 octane gas. Not suprisingly, it&amp;rsquo;s called octane, or at least one variety thereof. It&amp;rsquo;s official name is 2,2,3,3-tetramethyl butane, which is a really stupid name, because the methyl groups added onto the side of the butane are exactly equivalent to the methyl groups at the ends of the butane. I think it should be called 1,1,1,2,2,2-hexamethyl ethane. But that&amp;rsquo;s not how chemical names officially work. You have to pick the longest carbon chain you can, four in this case, even if thereby you deny the basic symmetry of the molecule. It&amp;rsquo;s kind of like the standard definition of regular expressions, where you always have to match the longest string. Of course, lots of people call it hexamethyl ethane anyway, since real people really do believe there&amp;rsquo;s more than one way to do it. People use minimal regular expressions now too, thanks to Perl. I&amp;rsquo;m not sure what the octane rating of Perl is. Perl doesn&amp;rsquo;t make your engine knock, but it&amp;rsquo;s not very expensive either.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool molecule, if you&amp;rsquo;re into explosions. Or branching structures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/nitroglycerin.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/nitroglycerin.gif&#34; alt=&#34;nitroglycerin&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems like whenever you run into a cool explosive, you tend to find nitrogen involved, whether you&amp;rsquo;re talking about potassium nitrate, or nitrogen triiodide, or in this case glyceryl trinitrate. More commonly known as nitroglycerin. Also more commonly &lt;em&gt;used&lt;/em&gt; as a heart medication than as an explosive. Still, to a junior high boy, it&amp;rsquo;s dynamite.&lt;/p&gt;

&lt;p&gt;Of course, not only do we need branching structures in our programming language, but we need various looping constructs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/tnt.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/tnt.gif&#34; alt=&#34;tnt&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s TNT, trinitrotoluene, frequently confused with dynamite. But it takes a detonator to get TNT to explode. You can take pure TNT and hit it with a hammer, and nothing will happen. Don&amp;rsquo;t try this with dynamite. It will ruin your day, if not your hammer.&lt;/p&gt;

&lt;p&gt;TNT is based on toluene, which is a benzene ring with one methyl group. People used to think of benzene and other aromatic molecules as having double bonds that alternated rapidly with single bonds. But it turns out that all the extra electrons are usually out in a cloud on either side of the ring, which hangs a great big negative charge out there, which is why many potent biological molecules use them. Loops are a powerful part of Perl too. That&amp;rsquo;s why there are so many different kinds of loops in Perl.&lt;/p&gt;

&lt;p&gt;And there&amp;rsquo;s more than one way to do it in chemistry as well. Interestingly, you can substitute nitrogens for carbons and get aromatic loops as well. You can always tell the aromatic loops from the non-aromatic loops because the aromatics don&amp;rsquo;t seem to have enough hydrogens attached to the carbons or nitrogens. Perl has other ways of telling loops apart. Here&amp;rsquo;s a molecule that will drive you loopy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/histamine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/histamine.gif&#34; alt=&#34;histamine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is histamine. Many of you are intimately familiar with histamines, because as loops, they program you to sneeze repeatedly. Some of you may be producing histamines because of the fragrances in this candle. Some of you may have gone so far as to program your body with an antihistamine such as &lt;a href=&#34;http://www.healing-aid.com&#34;&gt;Benadryl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/benadryl.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/benadryl.gif&#34; alt=&#34;benadryl&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously, Benadryl is the more powerful program because it has two loops instead of one.&lt;/p&gt;

&lt;p&gt;Alternately, you can view it as the reuse of modules. Though it looks more like cut and paste to me. For real reusability, of course, you need to study catalysts, and their proteinaceous cousins, enzymes. Most enzymes are just chock full of loops, branches, objects, interfaces, and what have you. Many reusable enzymes can be downloaded from the CDAN. That&amp;rsquo;s the Comprehensive DNA Archive Network, replicated in the nucleus of each of your cells.&lt;/p&gt;

&lt;p&gt;Just a few more loops. I like loops a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cyclonite.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cyclonite.gif&#34; alt=&#34;cyclonite&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another dual-use explosive, cyclonite. It doubles as a rat poison. Rat eats it, KABOOM! In this case you can see that the ring is not aromatic, so all the carbons connect to four things and the nitrogens to three things.&lt;/p&gt;

&lt;p&gt;One thing we haven&amp;rsquo;t figured out how to do in Perl is three-dimensional loops. Hey, Sarathy, let&amp;rsquo;s put this on the Todo list:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cubane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cubane.gif&#34; alt=&#34;cubane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is cubane. Not aromatic. See all the hydrogens.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/dodecahedrane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/dodecahedrane.gif&#34; alt=&#34;dodecahedrane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is dodecahedrane. Also not aromatic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/buckyball.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/buckyball.gif&#34; alt=&#34;buckyball&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And of course, buckminsterfullerene, which is aromatic, for some definition of the term. Note that there are no hydrogens at all. Buckyballs are a recently discovered form of pure carbon, like graphite and diamond. Making organic molecules without hydrogen is kind of like writing Perl without dollar signs. Which oddly enough you will be able to do easily, now that we&amp;rsquo;re getting lvalue subroutines, another recent discovery.&lt;/p&gt;

&lt;p&gt;I have a gazillion other molecules I could show you, but I&amp;rsquo;d like to go back and explain a little more personal history. After all, the theme of all these keynote speeches has been that you can&amp;rsquo;t really understand Perl without understanding Larry. There is an unfortunate corollary, however. Since it&amp;rsquo;s not possible to understand Larry, it&amp;rsquo;s not possible to understand Perl either.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s okay, because Perl is a bit like those early chemistry sets. You didn&amp;rsquo;t really have to understand what you were doing in order to do interesting things. You might blow yourself up, but more likely, you&amp;rsquo;d have a great deal of fun.&lt;/p&gt;

&lt;p&gt;I remember a lot more about my chemistry set than I do of high school chemistry. In fact, about the only thing I learned in high school chemistry was Avocado&amp;rsquo;s, er, Avogadros number, 6.02 times 10 to the something big. But between my chemistry set and Avogadro&amp;rsquo;s number, I managed to persuade myself to major in Chemistry in college.&lt;/p&gt;

&lt;p&gt;Among other things.&lt;/p&gt;

&lt;p&gt;My first year at college, I took inorganic chemistry. Inorganic chemistry is mostly about weighing things. I spent an awful lot of time trying to get the scales to read what they were supposed to read. The error bars on my graphs were always rather too large.&lt;/p&gt;

&lt;p&gt;I remember wandering into the lab next door, and being shocked to find a jar of potassium cyanide sitting in the cupboard. I suppose that&amp;rsquo;s when it first occurred to me that we really do expect people not to be idiots. For example, we really do expect people not to call &lt;code&gt;system(&amp;quot;rm -rf *&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also learned something about ambiguity that year. I was leafing through a chemistry book when I saw an entry that said, ``periodic acid&amp;rdquo;. ``Huh,&amp;rdquo; I said. I should really have figured it out sooner, since I knew about perchloric acid. Periodic acid is &lt;em&gt;not&lt;/em&gt; acid that&amp;rsquo;s periodically acidic, but rather it&amp;rsquo;s per-iodic acid, based on iodine, just as perchloric acid is based on chlorine.&lt;/p&gt;

&lt;p&gt;Even if periodic acid isn&amp;rsquo;t, the periodic table is. We studied the periodic table of the elements a lot in inorganic chemistry. There&amp;rsquo;s a reason it&amp;rsquo;s called periodic, and it also has to do with the fact that iodine is like chlorine, and fluorine, and bromine. Sort of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pt2.gif&#34; alt=&#34;periodic table&#34; width=&#34;801&#34; height=&#34;575&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You know, if this were a computer language, people would say it has too many ways to do the same thing. It has too many features that work too similarly, and at the same time it&amp;rsquo;s missing key features of higher abstraction that would really help an &lt;a href=&#34;http://www.mit.edu&#34;&gt;MIT&lt;/a&gt; grad student. Elements do multiple inheritance of properties, which is evil. Strong typing is not enforced. Nothing should be made of carbon, because organic programming gives you too many ways to get into trouble. There are too many metals, too many gasses, and not enough semiconductors like silicon. There ought to be more elements like carbon. Everything should be made of carbon atoms. Silicon is only good for sand, it should be removed. If this were really object-oriented, electrons and quarks would have the same interface as atoms and molecules. There&amp;rsquo;s not enough encapsulation of electrons in the metals. There&amp;rsquo;s too much encapsulation in the lanthanides and the noble gasses. And why the heck do we need so many different noble gasses anyway? They don&amp;rsquo;t do anything! Throw &amp;lsquo;em into that big hole at the top of the chart. And don&amp;rsquo;t get me started on isotopes!&lt;/p&gt;

&lt;p&gt;The periodic table is a mess. It should be redesigned.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what I learned in inorganic chemistry. My second year I took organic chemistry. That&amp;rsquo;s the same year I started working as a computer programmer. Before that I was working as a projectionist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I look at the projection screen in the auditorium.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You know, I&amp;rsquo;m still a projectionist. You can never entirely stop being what you once were. That&amp;rsquo;s why it&amp;rsquo;s important to be the right person today, and not put it off till tomorrow.&lt;/p&gt;

&lt;p&gt;Organic chemistry is way cool, but there&amp;rsquo;s a problem. You can always tell who is taking organic chemistry on campus. That whole second year, whenever I wandered into the computer center, I was told I smelled like a goat. (In retrospect, I would rather have smelled like a camel.) Anyway, the odor of everything from ether to isoamyl acetate was oozing out of my pores, and it took several weeks for it to wear off after the school year was out. At least, so I&amp;rsquo;m told. I couldn&amp;rsquo;t smell much of anything for the rest of the summer.&lt;/p&gt;

&lt;p&gt;But I enjoyed organic chemistry. We did both synthesis and analysis, but I think I enjoyed the synthesis more. Not too surprising, given who I am. I&amp;rsquo;ve never stopped being a synthesist.&lt;/p&gt;

&lt;p&gt;Actually, I think chemistry strikes a good balance between synthesis and analysis, between holism and reductionism. As a synthesist, I tend to be scared of reductionism. You know, behavior can be reduced to biology, biology can be reduced to biochemistry, and biochemistry can be reduced to chemistry. Chemistry, in turn, can be reduced to physics. And physics, of course, can be reduced to theology.&lt;/p&gt;

&lt;p&gt;Well, hey, that follows logically from the fact that physics can be reduced to math.&lt;/p&gt;

&lt;p&gt;Ask most any mathemetician about God, and he&amp;rsquo;ll say something like, ``We can&amp;rsquo;t prove that God exists. However, we can prove that if God does exist, he&amp;rsquo;s pretty good at math. In fact, we can prove that even if God doesn&amp;rsquo;t exist, he&amp;rsquo;s still pretty good at math.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Personally, I think God is pretty good at both analysis and synthesis. I like the periodic table the way it is, thank you.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an ester I synthesized, called isoamyl acetate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/banana.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/banana.gif&#34; alt=&#34;banana&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know this better as the smell of banana.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I eat a banana.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You might think bananas are relatively harmless, but after the quarter was over, I took my precious isoamyl acetate to my dorm room. During an all-dorm water fight, I had the bright idea of turning another floor of the dorm into banana heaven, so I got out my stash of banana perfume. One of my floormates grabbed it from me, went down to the other floor and threw it in someone&amp;rsquo;s face, who proceeded to almost asphyxiate. Fortunately, he didn&amp;rsquo;t, so no one ever asked where the banana perfume came from, and I had a close escape from the law of unintended consequences. But one of the consequences was that chemistry lost a bit of its glamour for me that day. Eventually I realized I didn&amp;rsquo;t want to be a chemist. By my third year in college, I had changed my major to Premed, but I didn&amp;rsquo;t really want to be a doctor either. It was just an excuse to take all the science courses I wanted.&lt;/p&gt;

&lt;p&gt;But another consequence was that I realized that, whenever you synthesize something, people will find a way misuse it. People misuse Perl too&amp;ndash;if you can call spammers people. Perl is the language of choice for network abuse. That doesn&amp;rsquo;t mean Perl isn&amp;rsquo;t a net win for the world. In the long run, I suspect more lives will be saved by nitroglycerin than will be destroyed by it. But &lt;a href=&#34;http://www.nobel.se/alfred/index.html&#34;&gt;Alfred Nobel&lt;/a&gt;&amp;rsquo;s brother was one of the people destroyed by it. I&amp;rsquo;d rather not be destroyed by Perl.&lt;/p&gt;

&lt;p&gt;Chemistry is a serious subject. Sometimes it&amp;rsquo;s a matter of life and death. Here&amp;rsquo;s vitamin C.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vit-c.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vit-c.gif&#34; alt=&#34;Vitamin C&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that&amp;rsquo;s what you call mission critical programming. Here&amp;rsquo;s vitamin B-12.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vitamin-b12.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vitamin-b12.gif&#34; alt=&#34;Vitamin B-12&#34; width=&#34;512&#34; height=&#34;544&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vitamin B-12 is the proof that cobalt is necessary in your diet. Cobalt is the pinkish atom in the middle attached to five nitrogens and a cyanide group. In this context, cyanide gives life rather than taking it away. Context is everything in chemistry, just as it is in Perl.&lt;/p&gt;

&lt;p&gt;Even when chemistry is not life and death to people, it&amp;rsquo;s life and death to bacteria and insects. Here&amp;rsquo;s malathion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/malathion.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/malathion.gif&#34; alt=&#34;malathion&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One year when my wife was pregnant with one of our kids, we were camped here near &lt;a href=&#34;http://www.monterey.com&#34;&gt;Monterey&lt;/a&gt;, and we got sprayed with malathion.&lt;/p&gt;

&lt;p&gt;That kid turned out strange. But then, all my kids turned out strange.&lt;/p&gt;

&lt;p&gt;Strange and wonderful. Kind of like Perl.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/nicotine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/nicotine.gif&#34; alt=&#34;nicotine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a naturally occuring insecticide. An organic pesticide, if you will. It occurs naturally in the leaves of the species &lt;em&gt;Nicotiana Tabacum&lt;/em&gt;. Obviously, since nicotine is a natural insecticide, it can&amp;rsquo;t be bad for you, can it?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/ddt.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/ddt.gif&#34; alt=&#34;ddt&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This molecule with the &lt;a href=&#34;http://einstein.drexel.edu/pages/students/kohr/pages/Who_is_Mr.Yuck.html&#34;&gt;Mr. Yuk&lt;/a&gt; chlorines is DDT, still used in many parts of the world, but not here. We thought it was death for insects, but it was also death for birds. The law of unintended consequences again. But where DDT is still used, millions of people are alive who would have been dead of malaria.&lt;/p&gt;

&lt;p&gt;To an organic chemist, pesticides are organic.&lt;/p&gt;

&lt;p&gt;To an organic farmer, pesticides are &lt;em&gt;not&lt;/em&gt; organic.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s okay, you can make Perl mean opposite things too. I &lt;em&gt;expect&lt;/em&gt; people to make Perl mean opposite things, both good and bad. That doesn&amp;rsquo;t take anything away from the central meaning of Perl. To explain the central meaning of Perl, let&amp;rsquo;s look at the central meaning of the word ``organic&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you go back to ancient Greek, the noun &lt;em&gt;organon&lt;/em&gt; already meant what we often mean by ``organ&amp;rdquo; today; that is, a functional subsystem of your body. But &lt;em&gt;organon&lt;/em&gt; could also mean an implement, or a tool, such as a surgical instrument. The related adjective &lt;em&gt;organikos&lt;/em&gt; meant ``serving as a tool, or engine.&amp;rdquo; There you have it. If Perl is a tool or engine, then you&amp;rsquo;re doing organic programming by definition.&lt;/p&gt;

&lt;p&gt;Interestingly, not only could the Greek word mean a surgical instrument, it could also mean a musical instrument. So music is also organic. Perl and music have a lot in common. Maybe next year I should talk about music. After all, I majored in Music too.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re really lucky, I&amp;rsquo;ll forget to bring my violin.&lt;/p&gt;

&lt;p&gt;Somewhere between music and chemistry there&amp;rsquo;s got to be a joke about organ grinders, but I&amp;rsquo;ll be a monkey&amp;rsquo;s uncle if I can see it.&lt;/p&gt;

&lt;p&gt;Anyway, now you know that the ancient Greeks thought their tools were organs, or their organs were tools.&lt;/p&gt;

&lt;p&gt;Hmm, maybe I&amp;rsquo;d better not expand on that.&lt;/p&gt;

&lt;p&gt;Actually, as a linguist, I don&amp;rsquo;t believe in etymological meanings. The meanings of words depend on many contexts, but all of the real contexts are in the present language, and true etymology is only in the past. On the other hand, part of the current context is what you &lt;em&gt;think&lt;/em&gt; the etymology of a word is. That&amp;rsquo;s why people like me keep trotting out etymological arguments, even though they&amp;rsquo;re relatively meaningless, not to mention wrong half the time.&lt;/p&gt;

&lt;p&gt;So, what &lt;em&gt;do&lt;/em&gt; I mean when I say I program organically? The central meaning of ``organic&amp;rdquo; these days derives from the organs of the body. It means doing business naturally, the way that your body does business, complicated and messy, with lots of interconnections and ramifications and stuff we don&amp;rsquo;t entirely understand yet. But that&amp;rsquo;s the way nature does business.&lt;/p&gt;

&lt;p&gt;On the basis of that, the organic farmers can tell you that it&amp;rsquo;s unnatural to use pesticides, because we don&amp;rsquo;t want it to be part of us, while organic chemists can tell you that it&amp;rsquo;s natural to use carbon-based chemistry, because what we&amp;rsquo;re made of. They&amp;rsquo;re both right, in their way.&lt;/p&gt;

&lt;p&gt;Likewise, Perl is designed to let you program naturally. Whatever &lt;em&gt;you&lt;/em&gt; think natural means.&lt;/p&gt;

&lt;p&gt;Perl culture must also be organic. That means that each bond in the molecule of Perl culture must work the way it&amp;rsquo;s supposed to. There is no central atom to the Perl molecule. Maybe I&amp;rsquo;m a heavy cobalt atom hidden off somewhere in the middle, but the whole molecule is what works. The molecule has what is called &lt;a href=&#34;http://www.sciam.com/1998/0198issue/0198ingber.html&#34;&gt;tensegrity&lt;/a&gt;: the proper balance of pushes and pulls to maintain its integrity. In terms of our culture, it means that sometimes we attract each other, and sometimes we repel each other, but more importantly, it means that we&amp;rsquo;re there for each other there to attract or repel as necessary. Look for balance in your attractions and repulsions. Look for equilibrium.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s good for the Perl molecule is good for the Open Source molecule. Last year I gave you a picture of the Open Source world taken from physics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/roche.gif&#34; alt=&#34;Rocheworld&#34; width=&#34;399&#34; height=&#34;187&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;a href=&#34;http://www.baen.com/catalog/rlforwar.htm&#34;&gt;Rocheworld&lt;/a&gt;, where two gravitationally bound bodies approach each other. It&amp;rsquo;s a curious coincidence that the word &lt;em&gt;rapp-roche-ment&lt;/em&gt; has a ``roche&amp;rdquo; in the middle. The picture was intended to indicate the approach of the open source world to the commercial world. I wondered at the time whether things would become unstable if the two worlds got even closer together. That&amp;rsquo;s what would happen in a real Rocheworld. But gravitation turns out to be an incomplete model for what&amp;rsquo;s really going to happen. Gravity is never repulsive, and can only be balanced by centrifugal force, but the combination of electromagnetism and the strong force make atomic bonds that can push as well as pull. So I think that the open source folks and the commercial folks will find the right balance. Here&amp;rsquo;s a sample molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/ethyne.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/ethyne.gif&#34; alt=&#34;ethyne&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the molecule known to most of you as acetylene.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;re to make this correspond to last year&amp;rsquo;s picture, then this hydrogen atom on the left is named Richard, and the one on the right is named Bill. (Hmm, they seem to be circling each other. How appropriate.) [Well, they were circling in my talk, anyway.] This carbon atom on the left is all the open source folks that are trying to cooperate constructively with commercial folks, and this other carbon atom is all the commercial folks trying to cooperate with open source folks. The bond in the middle is simultaneously the strongest bond and the weakest bond. It&amp;rsquo;s the strongest bond, because it&amp;rsquo;s a triple bond. It&amp;rsquo;s also the weakest bond, because it&amp;rsquo;s a very energetic bond, and could be broken by outside forces.&lt;/p&gt;

&lt;p&gt;But not by inside forces.&lt;/p&gt;

&lt;p&gt;Let me be specific. Some folks in this room are extremely leary of Bill. Others are extremely leary of Richard. These people tend to be leary not only of the opposite hydrogen, but also the opposite carbon. They are supplying the repulsive forces, because they fear the opposite extreme.&lt;/p&gt;

&lt;p&gt;At the same time, there are lots of good people who are actively supplying the attractive forces. Nobody has enough power to crush the two carbons together. Nobody has enough power to tear them apart. They&amp;rsquo;re in a metastable state. They have tensegrity. It&amp;rsquo;s my hope that the open source movement achieves this kind of tensegrity.&lt;/p&gt;

&lt;p&gt;That being said, acetylene &lt;em&gt;is&lt;/em&gt; flammable. If it is abused too much, it can explode. I only ever had one unanticipated explosion when I was doing chemistry in my basement, and that was when I was generating acetylene. I was an idiot, and was generating it in a small glass jar. Don&amp;rsquo;t try this at home. Fortunately, it was a very small glass jar, and I was already wearing glasses at the time. I was shaken but unhurt. I don&amp;rsquo;t play with acetylene much any more, because it is rather touchy stuff. So maybe, if you&amp;rsquo;re thinking about starting a war between the open source folks and the commercial folks, you should think again. First of all, you&amp;rsquo;ll be fighting against a lot of good folks, and you&amp;rsquo;ll probably lose. Second of all, you might win, and the world will be split up into separate atoms. Maybe that&amp;rsquo;s what the hydrogens on the end want, but the carbons in the middle would really like to stick together and make something useful.&lt;/p&gt;

&lt;p&gt;If we try hard enough, maybe we can make open source into something stable in the middle. Here&amp;rsquo;s the funniest molecule I saw in my research.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/bcfimethane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/bcfimethane.gif&#34; alt=&#34;bromochlorofluoroiodomethane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called bromochlorofluoroiodomethane. I have no idea what it&amp;rsquo;s good for (or more likely, bad for), just as I have no idea where open source culture is going. But I think of open source as the single carbon in the middle, holding steady the separate interests of these four different atoms, bromine, chlorine, fluorine, and iodine, which to my mind represent the domains .gov, .edu, .org, and .com. If we work things right, maybe we can balance things tetrahedrally so that, for instance, the .govs and .edus keep the .coms and .orgs from destroying each other, and vice versa every whichaway.&lt;/p&gt;

&lt;p&gt;I guess I really am an optimist. A paranoid optimist, true, but an optimist nonetheless.&lt;/p&gt;

&lt;p&gt;Of course, this picture is also an oversimplification. The true picture is much more organic. Whatever that means.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vit-e.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vit-e.gif&#34; alt=&#34;Vitamin&amp;quot; e&amp;quot;E&amp;quot;&#34; width=&#34;512&#34; height=&#34;283&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I leave you with some vitamin E. Like many of the most useful molecules in biology, it is self contradictory. It has a strongly polar end, and a strongly nonpolar end. It has a funny shape. It smells a little odd. It looks like it was designed by a committee. It&amp;rsquo;s sort of a molecular camel, if you will.&lt;/p&gt;

&lt;p&gt;Nevertheless, it&amp;rsquo;s a useful beast. Just as each of those atoms is necessary to the proper functioning of the molecule as a whole, the molecule as a whole is necessary to the functioning of each of you sitting here today. Each of you in turn can be a vitamin that helps keeps the Perl community healthy.&lt;/p&gt;

&lt;p&gt;And our collective hope is that the Perl community is one of the vitamins that will keep the world healthy.&lt;/p&gt;

&lt;p&gt;The key to equilibrium is to balance out all your reactions.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t overreact. Don&amp;rsquo;t underreact.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t overact. Don&amp;rsquo;t underact.&lt;/p&gt;

&lt;p&gt;But do act. And act passionately, with balance.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t going to talk about rockets. But I want the Perl community to behave like a rocket engine. What&amp;rsquo;s the point of rocket science? It&amp;rsquo;s to see how big of an explosion you can have without blowing your rocket chamber apart. I want to have the maximum amount of passion in the Perl community without blowing the community apart. So have a little tolerance for other people&amp;rsquo;s passions, even if they don&amp;rsquo;t match your own. Let&amp;rsquo;s balance our passions.&lt;/p&gt;

&lt;p&gt;``Churn, baby, churn,&amp;rdquo; as &lt;a href=&#34;http://www.garage.com&#34;&gt;Guy Kawasaki&lt;/a&gt; told us earlier today. It&amp;rsquo;s the only way we&amp;rsquo;ll jump to the next curve. It&amp;rsquo;s how we&amp;rsquo;ll let a thousand flowers bloom.&lt;/p&gt;

&lt;p&gt;I feel like I&amp;rsquo;m still playing with my chemistry set here, and I still don&amp;rsquo;t know what I&amp;rsquo;m doing entirely. Doubtless there will be more cool stinks and explosions this year, just as we&amp;rsquo;ve had our fair share of stinks and explosions in the last year. But face it, we&amp;rsquo;ve made many more good smells than bad ones. And the explosions haven&amp;rsquo;t done much besides ruffle a few feathers.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s keep doing organic chemistry this year. It&amp;rsquo;s good chemistry, even if we do smell like a camel occasionally.&lt;/p&gt;

&lt;p&gt;Thanks for letting me douse you with weird chemicals today.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

