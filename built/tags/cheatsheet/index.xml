<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cheatsheet on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/cheatsheet/</link>
    <description>Recent content in Cheatsheet on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Aug 2015 02:10:48 +0000</lastBuildDate>
    <atom:link href="/tags/cheatsheet/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Check your DuckDuckGo cheatsheets with Perl</title>
      <link>http://localhost:1313/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</link>
      <pubDate>Fri, 28 Aug 2015 02:10:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</guid>
      <description>

&lt;p&gt;With DuckDuckGo&amp;rsquo;s global &lt;a href=&#34;https://duck.co/blog&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; just around the corner, I&amp;rsquo;ve pulled together a &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check&#34;&gt;script&lt;/a&gt; for checking &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;cheatsheets&lt;/a&gt;. The script checks the cheatsheet is valid JSON and has the required entries and values.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To run the script, download it from &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check/blob/master/cheatsheet_check&#34;&gt;Github&lt;/a&gt;. It requires the &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; Perl modules which you can install with &lt;code&gt;cpan&lt;/code&gt; at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan JSON HTTP::Tiny&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to give execute permissions to the script too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;744&lt;/span&gt; cheatsheet_check&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Once you have a cheatsheet in JSON that you want to check, just pass the filepath to &lt;code&gt;cheatsheet_check&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;cheatsheet_check &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cheatsheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example output for the &lt;code&gt;perldoc&lt;/code&gt; cheatsheet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Subtest: file
    ok 1 - file exists
    ok 2 - filename is appropriate
    ok 3 - file content can be read
    ok 4 - content is valid JSON
    1..4
ok 1 - file
    # Subtest: headers
    ok 1 - has id
    ok 2 - has name
    ok 3 - has description
    1..3
ok 2 - headers
    # Subtest: metadata
    ok 1 - has metadata
    ok 2 - has metadata sourceName
    ok 3 - has metadata sourceUrl
    ok 4 - sourceUrl is not undef
    ok 5 - fetch sourceUrl
    1..5
ok 3 - metadata
    # Subtest: sections
    ok 1 - has section_order
    ok 2 - section_order is an array of section names
    ok 3 - has sections
    ok 4 - sections is a hash of section key/pairs
    ok 5 - &#39;Usage&#39; exists in sections
    ok 6 - &#39;Module Options&#39; exists in sections
    ok 7 - &#39;Search Options&#39; exists in sections
    ok 8 - &#39;Common Options&#39; exists in sections
    ok 9 - &#39;Search Options&#39; exists in section_order
    ok 10 - &#39;Search Options&#39; is an array
    ok 11 - &#39;Search Options&#39; entry: 0 has a key
    ok 12 - &#39;Search Options&#39; entry: 0 has a val
    ok 13 - &#39;Search Options&#39; entry: 1 has a key
    ok 14 - &#39;Search Options&#39; entry: 1 has a val
    ok 15 - &#39;Search Options&#39; entry: 2 has a key
    ok 16 - &#39;Search Options&#39; entry: 2 has a val
    ok 17 - &#39;Common Options&#39; exists in section_order
    ok 18 - &#39;Common Options&#39; is an array
    ok 19 - &#39;Common Options&#39; entry: 0 has a key
    ok 20 - &#39;Common Options&#39; entry: 0 has a val
    ok 21 - &#39;Common Options&#39; entry: 1 has a key
    ok 22 - &#39;Common Options&#39; entry: 1 has a val
    ok 23 - &#39;Common Options&#39; entry: 2 has a key
    ok 24 - &#39;Common Options&#39; entry: 2 has a val
    ok 25 - &#39;Common Options&#39; entry: 3 has a key
    ok 26 - &#39;Common Options&#39; entry: 3 has a val
    ok 27 - &#39;Common Options&#39; entry: 4 has a key
    ok 28 - &#39;Common Options&#39; entry: 4 has a val
    ok 29 - &#39;Module Options&#39; exists in section_order
    ok 30 - &#39;Module Options&#39; is an array
    ok 31 - &#39;Module Options&#39; entry: 0 has a key
    ok 32 - &#39;Module Options&#39; entry: 0 has a val
    ok 33 - &#39;Module Options&#39; entry: 1 has a key
    ok 34 - &#39;Module Options&#39; entry: 1 has a val
    ok 35 - &#39;Module Options&#39; entry: 2 has a key
    ok 36 - &#39;Module Options&#39; entry: 2 has a val
    ok 37 - &#39;Module Options&#39; entry: 3 has a key
    ok 38 - &#39;Module Options&#39; entry: 3 has a val
    ok 39 - &#39;Usage&#39; exists in section_order
    ok 40 - &#39;Usage&#39; is an array
    ok 41 - &#39;Usage&#39; entry: 0 has a key
    ok 42 - &#39;Usage&#39; entry: 0 has a val
    ok 43 - &#39;Usage&#39; entry: 1 has a key
    ok 44 - &#39;Usage&#39; entry: 1 has a val
    1..44
ok 4 - sections
1..4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run over 20 different tests against the cheatsheet. The script checks that the JSON is valid, that the required headers are present (e.g. id, name and description). It checks that the metadata is valid and points to a live URL. Finally it checks that the sections are valid and correctly mapped.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Remember, even if the cheatsheet passes all the tests, you still need to check it looks right in the browser. &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; can help with that. This Saturday I&amp;rsquo;ll be hanging out at the NYC Quack &amp;amp; Hack at &lt;a href=&#34;http://www.meetup.com/Quack-Hack-New-York-City/events/224567174/&#34;&gt;Orbital&lt;/a&gt;. I look forward to seeing everyone there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; added HTTP::Tiny dependency. 2015-08-28&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing DuckDuckGo instant answers is easy</title>
      <link>http://localhost:1313/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</link>
      <pubDate>Mon, 20 Apr 2015 12:33:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Editor note:&lt;/strong&gt; some of the information in this article is out of date, see our new DuckDuckGo &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;article&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I attended NYC &lt;a href=&#34;http://duckduckgo.ticketleap.com/quackhacknyc/&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt;, and learned how to write DuckDuckGo instant answers. Instant answers are really cool: they are micro apps that trigger when a user searches for specific terms. For example if you search for &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;help tmux&lt;/a&gt;, you&amp;rsquo;ll see a tmux cheatsheet displayed. This is a awesome - you can commit code that will go live on DuckDuckGo.com and the good news is that you don&amp;rsquo;t have to wait until the next Quack &amp;amp; Hack to learn how to write one yourself; DuckDuckGo provide great tools that make it easy.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-development-environment&#34;&gt;Setting up the development environment&lt;/h3&gt;

&lt;p&gt;DuckDuckGo support several different types of instant answers, but today I&amp;rsquo;m going to focus on creating a cheatsheet, which is displayed by the search engine whenever a user searches for a matching set of keywords.&lt;/p&gt;

&lt;p&gt;To get going you&amp;rsquo;ll need Perl 5.18 or higher and have installed &lt;a href=&#34;https://metacpan.org/pod/App::duckpan&#34;&gt;App::DuckPAN&lt;/a&gt;, which you can do with &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanminus&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::DuckPAN
&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
$ cpanm App::DuckPAN&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll also need a local copy of DuckDuckGo&amp;rsquo;s goodies instant answers repo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt;, which you can clone with Git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/duckduckgo/&lt;/span&gt;zeroclickinfo&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;goodies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With both App::DuckPAN and the goodies repo installed, change into the zeroclickinfo-goodies repo, and launch the duckpan server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd zeroclickinfo&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;goodies
$ duckpan server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you run &lt;code&gt;duckpan server&lt;/code&gt;, there will probably be a lot of output, but you should see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Checking asset cache...
Starting up webserver...
You can stop the webserver with Ctrl-C
HTTP::Server::PSGI: Accepting connections at http://0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you open your browser and navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt;, you&amp;rsquo;ll be greeted with the DuckDuckGo search page (try &lt;code&gt;http://0:5000&lt;/code&gt; if localhost doesn&amp;rsquo;t work). Search for &amp;ldquo;help tmux&amp;rdquo; and you should see the same instant answer cheatsheet appear as on the live &lt;a href=&#34;https://duckduckgo.com/?q=help+tmux&amp;amp;ia=answer&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-instant-answer&#34;&gt;Creating the instant answer&lt;/h3&gt;

&lt;p&gt;So now you&amp;rsquo;ve got the development environment setup, you&amp;rsquo;re ready to create an instant answer. I&amp;rsquo;m going to create an instant answer for &lt;code&gt;perldoc&lt;/code&gt; (taken from my perldoc &lt;a href=&#34;#&#34;&gt;article&lt;/a&gt;). I can get a headstart on this by creating the skeleton instant answer code with &lt;code&gt;duckpan new&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ duckpan &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PerldocCheatSheet&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates the basic files required for the instant answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Created file: lib/DDG/Goodie/PerldocCheatSheet.pm
Created file: t/PerldocCheatSheet.t
Successfully created Goodie: PerldocCheatSheet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the logic for the instant answer is in &lt;code&gt;PerldocCheatSheet.pm&lt;/code&gt;, and &lt;code&gt;duckpan&lt;/code&gt; has already created a good skeleton:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; DDG::Goodie::PerldocCheatSheet;
&lt;span style=&#34;color:#75715e&#34;&gt;# ABSTRACT: Write an abstract here&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Start at https://duck.co/duckduckhack/goodie_overview if you are new&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# to instant answer development&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DDG::Goodie;

zci answer_type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheeet&amp;#34;&lt;/span&gt;;
zci is_cached   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Metadata.  See https://duck.co/duckduckhack/metadata for help in filling out this section.&lt;/span&gt;
name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PerldocCheatSheeet&amp;#34;&lt;/span&gt;;
description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Succinct explanation of what this instant answer does&amp;#34;&lt;/span&gt;;
primary_example_queries &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first example query&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second example query&amp;#34;&lt;/span&gt;;
secondary_example_queries &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;optional -- demonstrate any additional triggers&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment and complete: https://duck.co/duckduckhack/metadata#category&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# category &amp;#34;&amp;#34;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Uncomment and complete: https://duck.co/duckduckhack/metadata#topics&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# topics &amp;#34;&amp;#34;;&lt;/span&gt;
code_url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;#34;&lt;/span&gt;;
attribution github &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GitHubAccount&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Friendly Name&amp;#34;&lt;/span&gt;],
            twitter &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitterhandle&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Triggers&lt;/span&gt;
triggers any &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;triggerWord&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trigger phrase&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Handle statement&lt;/span&gt;
handle remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {

    &lt;span style=&#34;color:#75715e&#34;&gt;# optional - regex guard&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# return unless qr/^\w+/;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $_; &lt;span style=&#34;color:#75715e&#34;&gt;# Guard against &amp;#34;no answer&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $_;
};

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll fill in the answers for the abstract, &lt;a href=&#34;https://duck.co/duckduckhack/metadata&#34;&gt;metadata&lt;/a&gt; and &lt;a href=&#34;https://duck.co/duckduckhack/goodie_triggers&#34;&gt;triggers&lt;/a&gt;, and the &lt;code&gt;handle&lt;/code&gt; subroutine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; DDG::Goodie::PerldocCheatSheet;
&lt;span style=&#34;color:#75715e&#34;&gt;# ABSTRACT: A cheat sheet for perldoc, the Perl documentation program&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DDG::Goodie;

zci answer_type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet&amp;#34;&lt;/span&gt;;
zci is_cached   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Metadata&lt;/span&gt;
name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PerldocCheatSheet&amp;#34;&lt;/span&gt;;
source &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&amp;#34;&lt;/span&gt;;
description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A cheat sheet for perldoc, the Perl documentation program&amp;#34;&lt;/span&gt;;
primary_example_queries &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help perldoc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc cheatsheet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc commands&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc ref&amp;#34;&lt;/span&gt;;
category &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;programming&amp;#34;&lt;/span&gt;;
topics &lt;span style=&#34;color:#e6db74&#34;&gt;qw/computing geek programming sysadmin/&lt;/span&gt;;
code_url
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/PerldocCheatSheet.pm&amp;#34;&lt;/span&gt;;
attribution github  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dnmfarrell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt;],
            twitter &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perltricks&amp;#34;&lt;/span&gt;,
            web     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://perltricks.com&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Triggers&lt;/span&gt;
triggers startend &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc help&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help perldoc&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc cheat sheet&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc cheatsheet&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc commands&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc ref&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Handle statement&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HTML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; share(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet.html&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;slurp(iomode &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(UTF-8)&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $TEXT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; share(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;slurp(iomode &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(UTF-8)&amp;#39;&lt;/span&gt;);

handle remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        heading &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Perldoc Cheat Sheet&amp;#39;&lt;/span&gt;,
        html    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $HTML,
        answer  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $TEXT,
};

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The handle subroutine will return a plain text and an HTML version of the cheat sheet to the user. The &lt;code&gt;share&lt;/code&gt; function loads static files from the &lt;code&gt;share/goodie/&lt;/code&gt; directory. These files should be created in the &lt;code&gt;share/goodie/perldoc_cheat_sheet/&lt;/code&gt; directory, and it is &lt;strong&gt;essential&lt;/strong&gt; that the filenames are lowercased versions of the instant answer name, separated by underscores. So &amp;ldquo;PerldocCheatSheet&amp;rdquo; becomes &amp;ldquo;perldoc_cheat_sheet&amp;rdquo;. You can view the files on &lt;a href=&#34;https://github.com/dnmfarrell/zeroclickinfo-goodies/tree/perldoc/share/goodie/perldoc_cheat_sheet&#34;&gt;GitHub&lt;/a&gt;. Note that the CSS file is not referenced directly by any code: it is automagically loaded by DuckDuckGo (this is why the directory and filename must be correct). I copied the CSS from the tmux &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/tree/master/share/goodie/tmux_cheat_sheet&#34;&gt;example&lt;/a&gt;, it provides two columns of text that will display side-by-side or wrap to a single column if the screen width is too narrow.&lt;/p&gt;

&lt;h3 id=&#34;testing-the-instant-answer&#34;&gt;Testing the instant answer&lt;/h3&gt;

&lt;p&gt;The quickest way to test that the instant answer is working, is with the &lt;code&gt;duckpan query&lt;/code&gt; command. I can run it in the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ duckpan query&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This launches an interactive command line program. I can enter one of the triggers for my perldoc instant answer, and see if the server responds as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Query: perldoc ref
  You entered: perldoc ref
---
DDG::ZeroClickInfo  {
    Parents       WWW::DuckDuckGo::ZeroClickInfo
    public methods (4) : DOES, has_structured_answer, new, structured_answer
    private methods (0)
    internals: {
        answer        &amp;quot;perldoc [option]

Module Options
--------------
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking good! (I&amp;rsquo;ve cut the output as it&amp;rsquo;s verbose). The next thing I can try is a browser test using &lt;code&gt;duckpan server&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ duckpan server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I point my browser at &lt;code&gt;http://localhost:5000&lt;/code&gt;, and enter a trigger query for the instant answer. That works as well. Finally, I need to complete a unit test script for the instant answer. I&amp;rsquo;ve already got a skeleton test script which was created by &lt;code&gt;duckpan new&lt;/code&gt; at the start:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DDG::Test::Goodie;

zci answer_type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet&amp;#34;&lt;/span&gt;;
zci is_cached   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

ddg_goodie_test(
    [&lt;span style=&#34;color:#e6db74&#34;&gt;qw( DDG::Goodie::PerldocCheatSheeet )&lt;/span&gt;],
    &lt;span style=&#34;color:#75715e&#34;&gt;# At a minimum, be sure to include tests for all:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# - primary_example_queries&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# - secondary_example_queries&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example query&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;query&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#75715e&#34;&gt;# Try to include some examples of queries on which it might&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# appear that your answer will trigger, but does not.&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bad example query&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
);

done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll update the test file, and add some comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DDG::Test::Goodie;

zci answer_type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet&amp;#34;&lt;/span&gt;;
zci is_cached   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# all responses for this goodie are the same&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @test_zci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
  &lt;span style=&#34;color:#75715e&#34;&gt;# regex for the plain text response&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^perldoc \[option\].*Module Options.*Search Options.*Common Options.*Help.*$/&lt;/span&gt;s,
  &lt;span style=&#34;color:#75715e&#34;&gt;# check the heading&lt;/span&gt;
  heading &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Perldoc Cheat Sheet&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;# check the html pattern&lt;/span&gt;
  html    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr#$#&lt;/span&gt;s,
);  

ddg_goodie_test(
    &lt;span style=&#34;color:#75715e&#34;&gt;# name of goodie to test&lt;/span&gt;
    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DDG::Goodie::PerldocCheatSheet&amp;#39;&lt;/span&gt;],

    &lt;span style=&#34;color:#75715e&#34;&gt;# At a minimum, be sure to include tests for all:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# - primary_example_queries&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# - secondary_example_queries&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help perldoc&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help perldoc&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc&amp;#34;&lt;/span&gt;             &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc help&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help perldoc&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc cheat sheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc cheatsheet&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc commands&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; test_zci(@test_zci),

    &lt;span style=&#34;color:#75715e&#34;&gt;# Try to include some examples of queries on which it might&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# appear that your answer will trigger, but does not.&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl doc help&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl documentaton&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl faq&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl help&amp;#39;&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
);

done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of this is easy to follow; but there are a few gotchas; &lt;code&gt;@test_zci&lt;/code&gt; is a variable that stores the expected output from a successful trigger of the instant answer. It&amp;rsquo;s a bit of a hack: its passed to the &lt;code&gt;test_zci()&lt;/code&gt; function which expects a scalar which matches the plain text response, followed by 2 key/pairs, one for the heading and one for the HTML response (see the &lt;a href=&#34;https://duck.co/duckduckhack/test_files&#34;&gt;docs&lt;/a&gt; for more detail). I can run this script at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;PerldocCheatSheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;t/PerldocCheatSheet.t .. ok    
All tests successful.
Files=1, Tests=12,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.17 cusr  0.01 csys =  0.20 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the tests pass, so I&amp;rsquo;m ready to issue a pull request to the DuckDuckGo community!&lt;/p&gt;

&lt;h3 id=&#34;where-to-go-for-help&#34;&gt;Where to go for help&lt;/h3&gt;

&lt;p&gt;Whilst the DuckDuckGo tools are great, there is also good &lt;a href=&#34;http://duckduckhack.com/&#34;&gt;documentation&lt;/a&gt; available and a friendly community supporting development when you need it. I spent some time on the Gitter &lt;a href=&#34;https://gitter.im/duckduckgo/zeroclickinfo-goodies?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;chatroom&lt;/a&gt; for the instant answers repo, and the people there were friendly and responsive (and more importantly, they have commit bits :).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

