<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Facebook on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/facebook/</link>
    <description>Recent content in Facebook on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2017 08:29:48 +0000</lastBuildDate>
    <atom:link href="/tags/facebook/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</link>
      <pubDate>Mon, 13 Mar 2017 08:29:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebook Messenger Send API using &lt;a href=&#34;https://metacpan.org/pod/Facebook::Messenger::Client&#34;&gt;Facebook::Messenger::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Taskwarrior::Kusarigama&#34;&gt;Taskwarrior::Kusarigama&lt;/a&gt; provides a plugin system for the Taskwarrior task manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Fitbit&#34;&gt;WebService::Fitbit&lt;/a&gt; can get, post and delete Fitbit API data&lt;/li&gt;
&lt;li&gt;Get a perly interface to the &lt;a href=&#34;https://www.theforeman.org/introduction.html&#34;&gt;Foreman&lt;/a&gt; API using &lt;a href=&#34;https://metacpan.org/pod/WWW::Foreman::API&#34;&gt;WWW::Foreman::API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a CPANTS Kwalitee Report using &lt;a href=&#34;https://metacpan.org/pod/CPANTS::Kwalitee::Report&#34;&gt;CPANTS::Kwalitee::Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read large directories over NFS with &lt;a href=&#34;https://metacpan.org/pod/Linux::NFS::BigDir&#34;&gt;Linux::NFS::BigDir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coordinates::Converter::LV03&#34;&gt;Geo::Coordinates::Converter::LV03&lt;/a&gt; converts Swiss LV03 coordinates to WSG84 and vice versa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hadoop::Inline::ClassLoader&#34;&gt;Hadoop::Inline::ClassLoader&lt;/a&gt; loads Hadoop Java classes via Inline::Java&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::Tiny&#34;&gt;PDF::Tiny&lt;/a&gt; is a lightweight PDF parser&lt;/li&gt;
&lt;li&gt;Convert JSON via an IO layer with &lt;a href=&#34;https://metacpan.org/pod/PerlIO::via::json&#34;&gt;PerlIO::via::json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a raw quote operator for Perl with &lt;a href=&#34;https://metacpan.org/pod/Syntax::Keyword::RawQuote&#34;&gt;Syntax::Keyword::RawQuote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Autoload::AUTOCAN&#34;&gt;Autoload::AUTOCAN&lt;/a&gt; provides some sugar for autoloading methods&lt;/li&gt;
&lt;li&gt;Treat environment variables as arrays with &lt;a href=&#34;https://metacpan.org/pod/Env::ShellWords&#34;&gt;Env::ShellWords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repo::Commits&#34;&gt;Git::Repo::Commits&lt;/a&gt; gets all commits in a repository&lt;/li&gt;
&lt;li&gt;Part of the new MOP framework, &lt;a href=&#34;https://metacpan.org/pod/Method::Traits&#34;&gt;Method::Traits&lt;/a&gt; adds coderefs to methods via subroutine attributes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Piper&#34;&gt;Piper&lt;/a&gt; is a flexible, iterable pipeline engine with automatic batching with a great name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::tored&#34;&gt;Proc::tored&lt;/a&gt; manages a process using a pid file. Check out &lt;a href=&#34;https://metacpan.org/pod/Proc::tored::Pool&#34;&gt;Proc::tored::Pool&lt;/a&gt; for an example implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::Dash::Button&#34;&gt;Amazon::Dash::Button&lt;/a&gt; let&amp;rsquo;s you use your Amazon dash button for &lt;em&gt;anything&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get a perly interface to the Revolt USB Dongle PX-1674-675 using &lt;a href=&#34;https://metacpan.org/pod/Device::USB::PX1674&#34;&gt;Device::USB::PX1674&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/author/STEVEB&#34;&gt;Steve Bertrand&lt;/a&gt; released more RaspberryPi goodies:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::BMP180&#34;&gt;RPi::BMP180&lt;/a&gt; - interface to the BMP180 barometric pressure sensor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::DAC::MCP4922&#34;&gt;RPi::DAC::MCP4922&lt;/a&gt; - interface to the MCP49x2 series digital to analog converters (DAC) over the SPI bus&lt;/li&gt;
&lt;li&gt;See his recent blog &lt;a href=&#34;http://blogs.perl.org/users/steve_bertrand/2017/03/raspberry-pi-becoming-more-prevalent.html&#34;&gt;post&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compare visually similar strings with &lt;a href=&#34;https://metacpan.org/pod/String::Similex&#34;&gt;String::Similex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ucam::Term&#34;&gt;Ucam::Term&lt;/a&gt; returns information about the start and end dates of terms at the University of Cambridge&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::Tolkien::Shire::Data&#34;&gt;Date::Tolkien::Shire::Data&lt;/a&gt; provides functionality for Shire calendars.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Phylo::Forest::DBTree&#34;&gt;Bio::Phylo::Forest::DBTree&lt;/a&gt; provides a Bio::Phylo-like API for large phylogenies&lt;/li&gt;
&lt;li&gt;Partition a number into addition sequences with &lt;a href=&#34;https://metacpan.org/pod/Math::Partition::Rand&#34;&gt;Math::Partition::Rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get Kruskall-Wallis statistics and test using &lt;a href=&#34;https://metacpan.org/pod/Statistics::ANOVA::KW&#34;&gt;Statistics::ANOVA::KW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::EditFile&#34;&gt;Dancer2::Plugin::EditFile&lt;/a&gt; - easily edit a text file from a Dancer2 app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Mailer&#34;&gt;Email::Mailer&lt;/a&gt; aims to be a &amp;ldquo;multi-purpose emailer for HTML, auto-text, attachments, and templates&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2016/</link>
      <pubDate>Wed, 07 Sep 2016 02:46:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Medium&#34;&gt;API::Medium&lt;/a&gt; is a Perl interface for Medium&amp;rsquo;s RESTful API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Critique&#34;&gt;App::Critique&lt;/a&gt; is a Perl Critic based app for progressively critiquing code. Looks interesting&lt;/li&gt;
&lt;li&gt;Get ISBN data via the xISBN service with &lt;a href=&#34;https://metacpan.org/pod/Business::xISBN&#34;&gt;Business::xISBN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::opan&#34;&gt;App::opan&lt;/a&gt; is a private CPAN server for managing Perl modules, similar to Pinto&lt;/li&gt;
&lt;li&gt;Get a perly interface to the mailboxlayer.com API (email verification service) with &lt;a href=&#34;https://metacpan.org/pod/Net::Mailboxlayer&#34;&gt;Net::Mailboxlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Mailgun&#34;&gt;WebService::Mailgun&lt;/a&gt; lets you send and receive email via mailgun, an email service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Statsite::Client&#34;&gt;Net::Statsite::Client&lt;/a&gt; provides an OO interface to Statsite, the open source, C implementation of statsd&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Global::MutexLock&#34;&gt;Global::MutexLock&lt;/a&gt; is an XS-based module that implements system mutexes via System V IPC Ids. Might be Linux only &amp;hellip;&lt;/li&gt;
&lt;li&gt;Escape strings for the shell on Linux, UNIX or MSWin32 using &lt;a href=&#34;https://metacpan.org/pod/ShellQuote::Any&#34;&gt;ShellQuote::Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XAS::Logmon&#34;&gt;XAS::Logmon&lt;/a&gt; can manage and monitor log files&lt;/li&gt;
&lt;li&gt;Manage a Buildbot instance via the v2 API using &lt;a href=&#34;https://metacpan.org/pod/REST::Buildbot&#34;&gt;REST::Buildbot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract recent CPAN Testers results with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::TailLog&#34;&gt;CPAN::Testers::TailLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse Band-in-a-Box (music software) data files with &lt;a href=&#34;https://metacpan.org/pod/Data::BiaB&#34;&gt;Data::BiaB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert iRealBook/iRealPro data using &lt;a href=&#34;https://metacpan.org/pod/Data::iRealPro&#34;&gt;Data::iRealPro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Imager::Trim&#34;&gt;Imager::Trim&lt;/a&gt; provides automatic cropping for images using Imager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Monorail&#34;&gt;Monorail&lt;/a&gt; is a database migration tool, inspired by django migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Grep::Query&#34;&gt;Grep::Query&lt;/a&gt; is an advanced expression evaluator with its own DSL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::WinRM&#34;&gt;Net::WinRM&lt;/a&gt; access WMI classes using WinRM (documentation can be found in &lt;a href=&#34;https://metacpan.org/source/KARASIK/Net-WinRM-1.00/winrm&#34;&gt;winrm&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Get parallel processing using pipe(2) with &lt;a href=&#34;https://metacpan.org/pod/Parallel::Pipes&#34;&gt;Parallel::Pipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Paws::Kinesis::MemoryCaller&#34;&gt;Paws::Kinesis::MemoryCaller&lt;/a&gt; provides a local in-memory implementation of AWS Kinesis; the stream processing service. Useful for testing?&lt;/li&gt;
&lt;li&gt;Get subroutine success/failure information with &lt;a href=&#34;https://metacpan.org/pod/Process::Results&#34;&gt;Process::Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::Form&#34;&gt;Term::Form&lt;/a&gt; processes STDIN input, similar to readline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Perl interface to Raspberry Pi&amp;rsquo;s board/GPIO pin functionality with &lt;a href=&#34;https://metacpan.org/pod/RPi::WiringPi&#34;&gt;RPi::WiringPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot::Wumpus::Server&#34;&gt;UAV::Pilot::Wumpus::Server&lt;/a&gt; is a server for contrlling drones via &lt;a href=&#34;https://metacpan.org/release/TMURRAY/UAV-Pilot-Wumpus-0.586092716855095&#34;&gt;UAV::Pilot::Wumpus&lt;/a&gt; (I&amp;rsquo;ve used a direct link as the module doesn&amp;rsquo;t seem to be indexed on MetaCPAN).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make a confusion matrix with &lt;a href=&#34;https://metacpan.org/pod/AI::ConfusionMatrix&#34;&gt;AI::ConfusionMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Digest::FarmHash&#34;&gt;Digest::FarmHash&lt;/a&gt; is an interface for Google&amp;rsquo;s FarmHash library (collection of hashing routines)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::Template::Pure&#34;&gt;Catalyst::View::Template::Pure&lt;/a&gt; is a Catalyst View Adaptor for Template::Pure, the new HTML templating system&lt;/li&gt;
&lt;li&gt;Conveniently generate Facebook Instant Article markup with &lt;a href=&#34;https://metacpan.org/pod/Facebook::InstantArticle&#34;&gt;Facebook::InstantArticle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Multiplex&#34;&gt;Mojolicious::Plugin::Multiplex&lt;/a&gt; A websocket multiplexing layer for Mojolicious applications&lt;/li&gt;
&lt;li&gt;Dynamically modify the Plack environment request variable using &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::ReviseEnv&#34;&gt;Plack::Middleware::ReviseEnv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing on Walls with Facebook::Graph</title>
      <link>http://localhost:1313/pub/2011/04/writing-on-walls-with-facebookgraph.html/</link>
      <pubDate>Mon, 04 Apr 2011 18:03:13 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/04/writing-on-walls-with-facebookgraph.html/</guid>
      <description>&lt;p&gt;In my first article about &lt;a href=&#34;https://metacpan.org/pod/Facebook::Graph&#34;&gt;Facebook::Graph&lt;/a&gt;, I showed you how to &lt;a href=&#34;http://localhost:1313/pub/2011/03/facebook-authentication-with-perl-and-facebookgraph.html&#34;&gt;use Facebook as an authentication mechanism for your site&lt;/a&gt;. This time let me show you how to build on that authentication to post something to a user&amp;rsquo;s Facebook wall.&lt;/p&gt;

&lt;p&gt;First things first. The application needs additional permissions from the user. The previous app requested only basic rights to view the most basic of information about the user. Any app that wants to post to auser&amp;rsquo;s wall needs to ask the user for permission to post to their wall. Replace the existing login method with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/facebook/login&#39; =&amp;gt; sub {
    my $fb = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );
    redirect $fb
        -&amp;gt;authorize
        -&amp;gt;extend_permissions( qw(publish_stream) )
        -&amp;gt;uri_as_string;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference between this version and the original is the &lt;code&gt;extend_permissions&lt;/code&gt; line which asks for &lt;code&gt;publish_stream&lt;/code&gt; access. Facebook maintains &lt;a href=&#34;http://developers.facebook.com/docs/authentication/permissions/&#34;&gt;a table of Facebook application permissions&lt;/a&gt; and their implications.&lt;/p&gt;

&lt;p&gt;When a user grants this additional permission, the application can post almost anything to the user&amp;rsquo;s wall. For example, if you have a shop of some kind, you could post something to a user&amp;rsquo;s wall after a purchase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fb = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );
$fb-&amp;gt;add_post
  -&amp;gt;set_message(&#39;I just bought Widget X from The Cool Shop for only $4.99.&#39;)
  -&amp;gt;publish;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or more descriptive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$fb-&amp;gt;add_post
  -&amp;gt;set_message(&#39;I just bought Widget X from The Cool Shop for only $4.99.&#39;)
  -&amp;gt;set_picture_uri(&#39;http://images.coolshop.com/widgetx.jpg&#39;),
  -&amp;gt;link_uri(&#39;http://www.coolshop.com/products/widget-x&#39;),
  -&amp;gt;link_caption(&#39;Widget X&#39;)
  -&amp;gt;publish;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you publish links, do yourself a favor by making sure the page you are linking uses &lt;a href=&#34;http://ogp.me/&#34;&gt;Open Graph Protocol&lt;/a&gt; meta tags. Facebook can refer to these tags, and will therefore link that metadata into your post, which means if anybody posts your link &lt;em&gt;&lt;a href=&#34;http://www.coolshop.com/products/widget-x&#34;&gt;http://www.coolshop.com/products/widget-x&lt;/a&gt;&lt;/em&gt; into a Facebook post, it will automatically pull in images, description, and other things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Make sure whatever you post abides by &lt;a href=&#34;http://developers.facebook.com/policy/&#34;&gt;Facebook&amp;rsquo;s Platform Polices&lt;/a&gt;. If you don&amp;rsquo;t, Facebook can and will ban your application.&lt;/p&gt;

&lt;p&gt;This works well for posting something to Facebook when a logged-in user performs an action in your application, but but what if you want to post something &lt;em&gt;not&lt;/em&gt; as the result of a direct user action? Maybe your site isn&amp;rsquo;t a shop. Maybe it&amp;rsquo;s a reminders site that posts stuff like &amp;ldquo;Happy Birthday Maggie!&amp;rdquo; or a random quote of the day. To post on behalf of the user even when they aren&amp;rsquo;t logged in to your site, you must request offline access. This requires another update to the login page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/facebook/login&#39; =&amp;gt; sub {
    my $fb = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );
    redirect $fb
        -&amp;gt;authorize
        -&amp;gt;extend_permissions( qw(offline_access publish_stream) )
        -&amp;gt;uri_as_string;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the &lt;code&gt;offline_access&lt;/code&gt; permission in addition to &lt;code&gt;publish_stream&lt;/code&gt; this time. Another necessary change is to store the resulting access token in something more robust than a Dancer session this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/facebook/postback/&#39; =&amp;gt; sub {
    my $params = request-&amp;gt;params;
    my $fb     = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );

    $fb-&amp;gt;request_access_token($params-&amp;gt;{code});
    session access_token =&amp;gt; $fb-&amp;gt;access_token;

    my $user = $fb-&amp;gt;fetch(&#39;me&#39;);

    database-&amp;gt;quick_insert( &#39;facebook&#39;, {
        uid          =&amp;gt; $user-&amp;gt;{uid},=20
        name         =&amp;gt; $user-&amp;gt;{name},=20
        access_token =&amp;gt; $fb-&amp;gt;access_token,
       }
    );
    redirect &#39;/&#39;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to storing the &lt;code&gt;access_token&lt;/code&gt; in a Dancer session, the code also stores it in a database table for future reference (using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Database&#34;&gt;Dancer::Plugin::Database&lt;/a&gt;, which is a wrapper around &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt;). This sort of thing can be good for other reasons too. For example, Facebook recommends caching data that you fetch from it for faster response times. If you want to display the user&amp;rsquo;s name on every page, it&amp;rsquo;s much faster to pull it out of the local database based upon the access token you have in your Dancer session than it is to request it from Facebook again.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;code&gt;Facebook::Graph&lt;/code&gt; makes it quite easy to post to Facebook on behalf of your users. Stay tuned for Part III, where I&amp;rsquo;ll show you how to publish calendar events and RSVP to them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facebook Authentication with Perl and Facebook::Graph</title>
      <link>http://localhost:1313/pub/2011/03/facebook-authentication-with-perl-and-facebookgraph.html/</link>
      <pubDate>Tue, 15 Mar 2011 10:17:51 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/03/facebook-authentication-with-perl-and-facebookgraph.html/</guid>
      <description>&lt;p&gt;Basic integration of software and web sites with Facebook, Twitter, and other social networking systems has become a litmus test for business these days. Depending on the software or site you might need to fetch some data, make a post, create events, upload photos, or use one or more of the social networking sites as a single sign-on system. This series will show you how to do exactly those things on Facebook using &lt;a href=&#34;https://metacpan.org/pod/Facebook::Graph&#34;&gt;Facebook::Graph&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This first article starts small by using Facebook as an authentication mechanism. There are certainly simpler things to do, but this is one of the more popular things people want to be able to do. Before you can do anything, you need to have a Facebook account. Then &lt;a href=&#34;http://apps.facebook.com/developer&#34;&gt;register your new application&lt;/a&gt; (Figure 1).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_03_facebook-authentication-with-perl-and-facebookgraph/register_app.png&#34; alt=&#34;registering a Facebook application&#34; width=&#34;696&#34; height=&#34;209&#34; /&gt;
&lt;em&gt;Figure 1. Registering a Facebook application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then fill out the &amp;ldquo;Web Site&amp;rdquo; section of your new app (Figure 2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2011_03_facebook-authentication-with-perl-and-facebookgraph/register_website.png&#34; alt=&#34;registering your application&amp;#39;s web site&#34; width=&#34;740&#34; height=&#34;224&#34; /&gt;
&lt;em&gt;Figure 2. Registering your application&amp;rsquo;s web site.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Registering an application with Facebook gives you a unique identifier for your application as well as a secret key. This allows your app to communicate with Facebook and use its API. Without it, you can&amp;rsquo;t do much (besides screen scraping and hoping).&lt;/p&gt;

&lt;p&gt;Now you&amp;rsquo;re ready to start creating your app. I&amp;rsquo;ve used the &lt;a href=&#34;http://perldancer.org/&#34;&gt;Dancer web app framework&lt;/a&gt;, but feel free to use your favorite. Start with a basic Dancer module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package MyFacebook;

use strict;
use Dancer &#39;:syntax&#39;;
use Facebook::Graph;

get &#39;/&#39; =&amp;gt; sub {
  template &#39;home.tt&#39;
};

true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s sufficient to give the app a home page. The next step is to force people to log in if they haven&amp;rsquo;t already:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before sub {
    if (request-&amp;gt;path_info !~ m{^/facebook}) {
        if (session-&amp;gt;{access_token} eq &#39;&#39;) {
            request-&amp;gt;path_info(&#39;/facebook/login&#39;)
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This little bit of Dancer magic says that if the path is not &lt;code&gt;/facebook&lt;/code&gt; and the user has no access_token attached to their session, then redirect them to our login page. Speaking of our login page, create that now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/facebook/login&#39; =&amp;gt; sub {
    my $fb = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );
    redirect $fb-&amp;gt;authorize-&amp;gt;uri_as_string;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a page that will redirect the user to Facebook, and ask them if it&amp;rsquo;s ok for the app to use their basic Facebook information. That code passes &lt;code&gt;Facebook::Graph&lt;/code&gt; some configuration information, so remember to add a section to Dancer&amp;rsquo;s &lt;em&gt;config.yml&lt;/em&gt; to keep track of that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;facebook:
    postback: &amp;quot;http://www.madmongers.org/facebook/postback/&amp;quot;
    app_id: &amp;quot;XXXXXXXXXXXXXXXX&amp;quot;
    secret: &amp;quot;XXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, you get the app_id and the secret from Facebook&amp;rsquo;s developer application after you create the app. The postback tells Facebook where to post back to after the user has granted the app authorization. Note that Facebook requires a slash (/) on the end of the URL for the postback. With Facebook ready to post to a URL, it&amp;rsquo;s time to create it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/facebook/postback/&#39; =&amp;gt; sub {
    my $authorization_code = params-&amp;gt;{code};
    my $fb                 = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );

    $fb-&amp;gt;request_access_token($authorization_code);
    session access_token =&amp;gt; $fb-&amp;gt;access_token;
    redirect &#39;/&#39;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: I know it&amp;rsquo;s called a postback, but for whatever reason Facebook does the &lt;code&gt;POST&lt;/code&gt; as a &lt;code&gt;GET&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Facebook&amp;rsquo;s postback passes an authorization code—a sort of temporary password. Use that code to ask Facebook for an access token (like a session id). An access token allows you to request information from Facebook &lt;em&gt;on behalf of the user&lt;/em&gt;, so all of those steps are, essentially, your app logging in to Facebook. However, unless you store that access token to use again in the future, the next request to Facebook will log you out. Therefore, the example shoves the access token into a Dancer session to store it for future use before redirecting the user back to the front page of the site.&lt;/p&gt;

&lt;p&gt;NOTE: The access token we have will only last for two hours. After that, you have to request it again.&lt;/p&gt;

&lt;p&gt;Now you can update the front page to include a little bit of information from Facebook. Replace the existing front page with this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &#39;/&#39; =&amp;gt; sub {
    my $fb = Facebook::Graph-&amp;gt;new( config-&amp;gt;{facebook} );

    $fb-&amp;gt;access_token(session-&amp;gt;{access_token});

    my $response = $fb-&amp;gt;query-&amp;gt;find(&#39;me&#39;)-&amp;gt;request;
    my $user     = $response-&amp;gt;as_hashref;
    template &#39;home.tt&#39;, { name =&amp;gt; $user-&amp;gt;{name} }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code fetches the access token back out of the session and uses it to find out some information about the current user. It passes the name of that user into the home template as a template parameter so that the home page can display the user&amp;rsquo;s name. (How do you know what to request and what responses you get? See the &lt;a href=&#34;http://developers.facebook.com/docs/reference/api/&#34;&gt;Facebook Graph API documentation&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;While there is a bit of a trick to using Facebook as an authentication system, it&amp;rsquo;s not terribly difficult. Stay tuned for Part II where I&amp;rsquo;ll show you how to post something to a user&amp;rsquo;s wall.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

