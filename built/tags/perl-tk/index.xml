<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Tk on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-tk/</link>
    <description>Recent content in Perl Tk on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jan 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-tk/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating Custom Widgets</title>
      <link>http://localhost:1313/pub/2002/01/09/perltk.html/</link>
      <pubDate>Wed, 09 Jan 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/01/09/perltk.html/</guid>
      <description>&lt;p&gt;In this Perl/Tk article, I&amp;rsquo;ll discuss balloon help, photos and widget subclassing. Help balloons can be attached to widgets, menu items, and, as we&amp;rsquo;ll see here, individual canvas items. Subclassing a Perl/Tk widget is also known as creating a derived (mega) widget. For this article, I&amp;rsquo;ll presume basic knowledge of mega widgets. If the subject is new to you, or if there are points you don&amp;rsquo;t understand, then please read &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;Mastering Perl/Tk&lt;/a&gt;, Chapter 14, &lt;em&gt;Creating Custom Widgets in Pure Perl/Tk&lt;/em&gt;, for complete details. Photos are described in Chapter 17, &lt;em&gt;Images and Animations&lt;/em&gt;, and balloon help is discussed in Chapter 23, &lt;em&gt;Plethora of pTk Potpourri&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We are going to develop a color picker, a window that allows us to select a color that we might use to configure an application. This widget differs from most other color pickers you&amp;rsquo;ve seen because our palette is a box of crayons.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tk::CrayolaCrayonColorPicker&lt;/code&gt; is a &lt;code&gt;Tk::DialogBox&lt;/code&gt;-derived widget that allows a user to select a color from a photo of a box of 64 Crayola crayons. Nominally, one positions the cursor over the desired crayon and clicks &lt;code&gt;button-1&lt;/code&gt;, whereupon the RGB values of the pixel under the cursor are returned. However, in reality, one can click anywhere over the photo.&lt;/p&gt;

&lt;p&gt;Balloon help is provided, so that if the cursor lingers over a crayon, then a ballon pops up, displaying the crayon&amp;rsquo;s actual color - for instance, &amp;ldquo;robin&amp;rsquo;s egg blue.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;Tk::CrayolaCrayonColorPicker&lt;/code&gt; is a subclass of &lt;code&gt;Tk::DialogBox&lt;/code&gt;, the widget can have one or more buttons, with the default being a single &lt;code&gt;Cancel&lt;/code&gt; button. This functionality is provided automatically by the superclass, &lt;code&gt;Tk::DialogBox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our widget also overrides the &lt;code&gt;Tk::DialogBox::Show()&lt;/code&gt; method with one of its own. We do this because, by definition, dialogs are modal, which means they perform a grab. Unfortunately, balloon help does not work with a grab in effect, so &lt;code&gt;Tk::CrayolaCrayonColorPicker::Show()&lt;/code&gt; deiconifies the color picker window itself, waits for a color selection or a click on the &lt;code&gt;Cancel&lt;/code&gt; button, and then hides the window.&lt;/p&gt;

&lt;p&gt;The return value from our &lt;code&gt;Show()&lt;/code&gt; method is either a reference to an array of three integers, the red, green and blue pixel triplet, or a string indicating which dialog button was clicked.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example, which creates the window seen in Figure 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Tk::CrayolaCrayonColorPicker;
    my $cccp = $mw-&amp;gt;CrayolaCrayonColorPicker(-title =&amp;gt; &#39;Crayon Picker&#39;);
    my $color = $cccp-&amp;gt;Show;

    if ( ref($color) =~ /ARRAY/ ) {
        my ($r, $g, $b) = @$color;
        print &amp;quot;r/g/b=$r/$g/$b!\n&amp;quot;;
    } else {
        print &amp;quot;no color selected, response=$color!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2002_01_09_perltk/fig1.jpg&#34; alt=&#34;Figure 1. -- Box of Crayons&#34; width=&#34;450&#34; height=&#34;375&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notice the use of the &lt;code&gt;-title&lt;/code&gt; option. Since &lt;code&gt;Tk::CrayolaCrayonColorPicker&lt;/code&gt; is derived from &lt;code&gt;Tk::DialogBox&lt;/code&gt;, it supports all the option/value pairs defined by its superclass, of which &lt;code&gt;-title&lt;/code&gt; is one.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at the definition of class &lt;code&gt;Tk::CrayolaCrayonColorPicker&lt;/code&gt;. I like to place the module&amp;rsquo;s version number as the first line of the file, making it easy for MakeMaker (and humans) to find it. (MakeMaker usage is also explained in Mastering Perl/Tk, Chapter 14, &lt;em&gt;Creating Custom Widgets in Pure Perl/Tk&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;Next is the package definition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tk::widgets&lt;/code&gt; is a fast way to use a list of widgets. It expands to &amp;ldquo;&lt;code&gt;use Tk::Widget1; use     Tk::Widget2;&lt;/code&gt;&amp;rdquo;, and so on.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;&lt;code&gt;use base&lt;/code&gt;&amp;rdquo; statement is important. It tells us two things: First, that we are defining a derived widget (i.e. subclassing an existing widget), and, second, the precise widget being subclassed. Including &lt;code&gt;Tk::Derived&lt;/code&gt; in a widget&amp;rsquo;s &lt;code&gt;@ISA&lt;/code&gt; array is the telltale marker of a derived widget. Without &lt;code&gt;Tk::Derived&lt;/code&gt;, the assumption is that we are creating a composite widget.&lt;/p&gt;

&lt;p&gt;We then pre-declare a subroutine and enable a strict programming style.&lt;/p&gt;

&lt;p&gt;The final statement in the module prologue actually defines the widget contructor name by modifying our symbol table, and performs other heavy magic, allowing us to use the new widget in the same manner as any other Perl/Tk widget.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$Tk::CrayolaCrayonColorPicker::VERSION = &#39;1.0&#39;;

package Tk::CrayolaCrayonColorPicker;

use Tk::widgets qw/Balloon/;
use base        qw/Tk::Derived Tk::DialogBox/;
use subs        qw/pick_color/;

use strict;

Construct Tk::Widget &#39;CrayolaCrayonColorPicker&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;CrayolaCrayonColorPicker&lt;/code&gt; widget is simply a canvas with a photo of a box of Crayola crayons covering it. Since photos are objects that persist until they are destroyed, all widget instances can share the same photo. So we can create the photo from an image file once, and store its reference in a class global variable. For sizing the canvas, we keep the photo&amp;rsquo;s width and height in class variables, too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;our (
     $crayons,                  # Photo of a bunch of crayons
     $cray_w,                   # Photo width
     $cray_h,                   # Photo height
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As part of class initialization, Perl/Tk makes a call to the &lt;code&gt;ClassInit()&lt;/code&gt; method. This method serves to perform tasks for the class as a whole. Here we create the photo object and define its dimensions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub ClassInit {

    my ($class, $mw) = @_;

    $crayons = $mw-&amp;gt;Photo(-file =&amp;gt; &#39;crayons.gif&#39;, -format =&amp;gt; &#39;gif&#39;);
    ($cray_w, $cray_h) = ($crayons-&amp;gt;width, $crayons-&amp;gt;height);

    $class-&amp;gt;SUPER::ClassInit($mw);

} # end ClassInit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The heart of a widget module is &lt;code&gt;Populate()&lt;/code&gt;, where we create new widget instances. A &lt;code&gt;CrayolaCrayonColorPicker&lt;/code&gt; widget consists of a canvas with a photo of a box of Crayola crayons (taken with my handy digital camera). Clicking anywhere on the photo invokes a callback that fetches the RGB components of the pixel under the click.&lt;/p&gt;

&lt;p&gt;Additionally, transparent, trapezoidal, canvas polygons are superimposed over the tips of each crayon, and each of these items has a ballon help message associated with it. The message indicates the crayon&amp;rsquo;s color.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub Populate {

    my ($self, $args) = @_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we are a &lt;code&gt;Tk::DialogBox&lt;/code&gt; widget at heart, set up a default Cancel button to ensure our superclass&amp;rsquo; &lt;code&gt;Populate()&lt;/code&gt; has a chance to process the option list, then withdraw the window until it&amp;rsquo;s shown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $args-&amp;gt;{&#39;-buttons&#39;} = [&#39;Cancel&#39;] unless defined $args-&amp;gt;{&#39;-buttons&#39;};
    $self-&amp;gt;SUPER::Populate($args);

    $self-&amp;gt;withdraw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the canvas with its photo, and store the canvas reference and the image id as instance variables. We&amp;rsquo;ll need access to both later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $self-&amp;gt;{can} = $self-&amp;gt;Canvas(
        -width  =&amp;gt; $cray_w,
        -height =&amp;gt; $cray_h,
    )-&amp;gt;pack;
    $self-&amp;gt;{iid} = $self-&amp;gt;{can}-&amp;gt;createImage(0, 0,
        -anchor =&amp;gt; &#39;nw&#39;,
        -image  =&amp;gt; $crayons,
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Define the canvas callback that fetches and returns an RGB triplet. The &lt;code&gt;CanvasBind()&lt;/code&gt; method operates on the entire canvas, unlike the canvas&amp;rsquo; &lt;code&gt;bind()&lt;/code&gt; method that operates on an individual canvas tag or id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $self-&amp;gt;{can}-&amp;gt;CanvasBind(&#39;&amp;lt;buttonrelease-1&amp;gt;&#39; =&amp;gt; [\&amp;amp;pick_color, $self]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create the tiny transparent trapezoids that cover the tip of the 64 crayons, and define the balloon help. When specifying balloon help for one or more canvas items, the balloon widget expects its &lt;code&gt;-msg&lt;/code&gt; option to be a reference to a hash, where the hash keys are canvas tags or ids, and the hash values are the balloon help text.&lt;/p&gt;

&lt;p&gt;So, we first create an instance variable that references an empty anonymous hash, then invoke the private method &lt;code&gt;make_balloon_items()&lt;/code&gt; to do the dirty work. The method creates the canvas polygon items and populates the hash pointed to by &lt;code&gt;$self-&amp;gt;{col}&lt;/code&gt;. Then, we create the balloon widget, and attach the canvas and help messages. The ballon text appears next to the cursor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $self-&amp;gt;{col} = {};         # anonymous hash indexes colors by id
    $self-&amp;gt;make_balloon_items;

    $self-&amp;gt;{bal} = $self-&amp;gt;Balloon;
    $self-&amp;gt;{bal}-&amp;gt;attach($self-&amp;gt;{can},
        -balloonposition =&amp;gt; &#39;mouse&#39;, 
        -msg             =&amp;gt; $self-&amp;gt;{col},
    );

} # end Populate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the class private method &lt;code&gt;make_balloon_items()&lt;/code&gt;, which simply makes 64 calls to &lt;code&gt;make_poly()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The 64-crayon Crayola box in divided into 4 sections of 16 crayons each. Each section contains two rows of eight crayons. These subroutine calls create each section, starting with the section&amp;rsquo;s background row, followed by the section&amp;rsquo;s foreground row.&lt;/p&gt;

&lt;p&gt;We create the polygons items from back to front so that the canvas stacking order is back to front. This ensures that the balloon help of foreground polygons items takes precedence over background items.&lt;/p&gt;

&lt;p&gt;For obvious brevity, most of the &lt;code&gt;make_poly()&lt;/code&gt; calls have been removed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub make_balloon_items {

    my ($self) = @_;

    # 16 northwest crayons.

    $self-&amp;gt;make_poly(132,   8, &#39;red&#39;);

    # 16 northeast crayons.

    $self-&amp;gt;make_poly(306,  61, &#39;gray&#39;);

    # 16 southwest crayons.

    $self-&amp;gt;make_poly(107,  97, &#39;brick red&#39;);

    # 16 southeast crayons.

    $self-&amp;gt;make_poly(270, 157, &#39;tumbleweed&#39;);

} # end make_balloon_items
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the coordinates of the point of a crayon, the class private method &lt;code&gt;make_poly()&lt;/code&gt; creates a transparent polygon over the tip so we can attach a balloon message to it. The message is the crayon&amp;rsquo;s color, and is stored in the hash pointed to by &lt;code&gt;$self-&amp;gt;{col}&lt;/code&gt;, indexed by polygon canvas id.&lt;/p&gt;

&lt;p&gt;The transparent stipple is important, as it allows balloon events to be seen. The fill color is irrelevant; we just need something to fill the polygon items so events are registered.&lt;/p&gt;

&lt;p&gt;If we remove the stipple, then the polygon items covering the crayon tips become visible, as shown in Figure 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub make_poly {

        my ($self, $x, $y, $color) = @_;

        my $id = $self-&amp;gt;{can}-&amp;gt;createPolygon(
            $x-3, $y, $x+3, $y, $x+11, $y+38, $x-11, $y+38, $x-3, $y,
            -fill    =&amp;gt; &#39;yellow&#39;,
            -stipple =&amp;gt; &#39;transparent&#39;,
        );

        $self-&amp;gt;{col}-&amp;gt;{$id} = $color;

    } # end make_poly
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2002_01_09_perltk/fig2.jpg&#34; alt=&#34;Figure 2. -- Crayons with Yellow Tips&#34; width=&#34;450&#34; height=&#34;374&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Figure 2.&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Subroutine &lt;code&gt;pick_color()&lt;/code&gt; is our last class private method. It demonstrates a rather dubious object oriented programming technique - meddling with the internals of its superclass! But we do this out of necessity, as a workaround for the &amp;ldquo;balloons do not work with a grab&amp;rdquo; bug.&lt;/p&gt;

&lt;p&gt;We want to override &lt;code&gt;Tk::DialogBox::Show&lt;/code&gt;, so we need to know what its &lt;code&gt;waitVariable()&lt;/code&gt; is waiting for. It&amp;rsquo;s this variable that the dialog buttons set when we click on them, and it turns out to be &lt;code&gt;$self-&amp;gt;{&#39;selected_button&#39;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We make &lt;code&gt;pick_color()&lt;/code&gt; set the same variable when returning a pixel&amp;rsquo;s RGB values, thus unblocking the &lt;code&gt;waitVariable()&lt;/code&gt; and returning the RGB data to the user.&lt;/p&gt;

&lt;p&gt;In case you&amp;rsquo;re interested, early-on in the coding I determined the coordinates of each crayon&amp;rsquo;s point by printing $x and $y in this callback.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub pick_color {

        my ($canvas, $self) = @_;
        my ($x, $y) = ($Tk::event-&amp;gt;x, $Tk::event-&amp;gt;y);
        my $i = $canvas-&amp;gt;itemcget($self-&amp;gt;{iid}, -image);
        $self-&amp;gt;{&#39;selected_button&#39;} = $i-&amp;gt;get($x, $y);

    } # end pick_color
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is our only class public method, &lt;code&gt;Show()&lt;/code&gt;. We can&amp;rsquo;t use the standard DialogBox &lt;code&gt;Show()&lt;/code&gt; method because the grab interferes with balloon help. So we roll our own, forgoing the modal approach. Control passes from &lt;code&gt;waitVariable()&lt;/code&gt; in one of two ways: 1) a color is selected (see &lt;code&gt;pick_color()&lt;/code&gt; above), or, 2), the &lt;code&gt;Cancel&lt;/code&gt; button is activated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub Show {

        my ($self) = @_;
        $self-&amp;gt;Popup;
        $self-&amp;gt;waitVariable(\$self-&amp;gt;{&#39;selected_button&#39;});
        $self-&amp;gt;withdraw;
        return $self-&amp;gt;{&#39;selected_button&#39;};

    } # end Show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. Until next time &amp;hellip; &lt;code&gt;use Tk;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You can download the &lt;a href=&#34;http://localhost:1313/media/_pub_2002_01_09_perltk/CrayolaCrayonColorPicker.pm&#34;&gt;class module&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/media/_pub_2002_01_09_perltk/crayons.gif&#34;&gt;associated .GIF file&lt;/a&gt; and a &lt;a href=&#34;http://localhost:1313/media/_pub_2002_01_09_perltk/crayons.txt&#34;&gt;test program&lt;/a&gt; that uses the new class.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates recently released (January 2002) &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;Mastering Perl/Tk&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/chapter/ch15.html&#34;&gt;Sample Chapter 15, Anatomy of the MainLoop&lt;/a&gt;, is available free online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also look at the &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/toc.html&#34;&gt;Table of Contents&lt;/a&gt;, the &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/inx.html&#34;&gt;Index&lt;/a&gt;, and the &lt;a href=&#34;http://oreilly.com/catalog/mastperltk/desc.html&#34;&gt;Full Description&lt;/a&gt; of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Drag-and-Drop Primer for Perl/Tk</title>
      <link>http://localhost:1313/pub/2001/12/11/perltk.html/</link>
      <pubDate>Tue, 11 Dec 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/12/11/perltk.html/</guid>
      <description>

&lt;p&gt;As it happens, no matter how much I write about Perl/Tk, there&amp;rsquo;s always something left unsaid. A case in point is the topic of drag and drop, which didn&amp;rsquo;t make it into our book, &lt;em&gt;Mastering Perl/Tk&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This article describes the Perl/Tk drag-and-drop mechanism, often referred to as DND. We&amp;rsquo;ll illustrate DND operations local to a single application, where we drag items from one Canvas to another.&lt;/p&gt;

&lt;p&gt;There are two basic types of DND operations, local (intra-application) and remote (inter-application). Local drops are fully supported, but there is no standard for remote drops. For this reason, this article describes only local DND operations. Note: Perl/Tk supports Sun, XDND, KDE, and Win32 remote DND protocols.&lt;/p&gt;

&lt;p&gt;To write DND code you should be comfortable with these concepts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The drag source is the widget that we drag. In the case of a Canvas widget, we can arrange for an individual item to be the drag source.&lt;/li&gt;
&lt;li&gt;The drop destination is the widget upon which we drop the source widget.&lt;/li&gt;
&lt;li&gt;The DND token is a &lt;code&gt;Label&lt;/code&gt; widget that tracks the cursor as it moves from the drag source to the drop destination. We can configure the DND token with a text string or an image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2001_12_11_perltk/drag.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This figure shows what we will end up with&amp;ndash;one Canvas populated by various types of objects, which we can drag around the application and drop onto another Canvas. Let&amp;rsquo;s now look at the code.&lt;/p&gt;

&lt;p&gt;Here we have a rather typical Perl/Tk prologue. &lt;code&gt;Tk::DragDrop&lt;/code&gt; is required if coding a program with a drag source, while &lt;code&gt;Tk::DropSite&lt;/code&gt; is required for programs declaring a drop destination.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Tk;
    use strict;
    use Tk::DragDrop;
    use Tk::DropSite;
    use subs qw/make_bindings move_bbox move_image/;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;global-variables&#34;&gt;Global variables&lt;/h3&gt;

&lt;p&gt;A drag begins with a &lt;code&gt;&amp;lt;ButtonPress-1&amp;gt;&lt;/code&gt; event, where we record the ID of the specified Canvas item in the variable &lt;code&gt;$drag_id&lt;/code&gt;. &lt;code&gt;$mw&lt;/code&gt; is, of course, a reference to the program&amp;rsquo;s MainWindow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    our (
         $drag_id,              # Canvas item id of drag source
         $mw,                   # Perl/Tk MainWindow reference
    );

$mw = MainWindow-&amp;gt;new(-background =&amp;gt; &#39;green&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Define the drag source&amp;ndash;a Canvas full of items. Here we declare that a &lt;code&gt;&amp;lt;B1-Motion&amp;gt;&lt;/code&gt; event over the source Canvas signals the start of a local drag operation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$drag_source&lt;/code&gt; is a &lt;code&gt;Tk::DragDrop&lt;/code&gt; object, sometimes called a DND token. It&amp;rsquo;s really a disguised &lt;code&gt;Label&lt;/code&gt; widget, which we can configure in the standard fashion. For our purposes, we set the &lt;code&gt;-text&lt;/code&gt; option to describe the &lt;code&gt;Canvas&lt;/code&gt; item we are dragging, rather than the default text of the source widget&amp;rsquo;s class name. But you can assign an image to the DND token if desired.&lt;/p&gt;

&lt;p&gt;When performing a DND operation, notice that the DND token has a flat relief over the source, and a sunken relief over the destination.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $c_src = $mw-&amp;gt;Canvas(qw/-background yellow/)-&amp;gt;pack;

    my $drag_source = $c_src-&amp;gt;DragDrop(
        -event     =&amp;gt; &#39;&amp;lt;B1-Motion&amp;gt;&#39;,
        -sitetypes =&amp;gt; [qw/Local/],
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every &lt;code&gt;Canvas&lt;/code&gt; source item has a &lt;code&gt;&amp;lt;ButtonPress-1&amp;gt;&lt;/code&gt; binding associated with it. The callback bound to this event serves to record the item&amp;rsquo;s ID in the global variable &lt;code&gt;$drag_id&lt;/code&gt;, and to configure the drag &lt;code&gt;Label&lt;/code&gt;&amp;rsquo;s &lt;code&gt;-text&lt;/code&gt;/ option with the item&amp;rsquo;s ID and type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $press = sub {
        my ($c_src, $c_src_id, $drag_source) = @_;
        $drag_id = $c_src_id;
        my $type = $c_src-&amp;gt;type($drag_id);
        $drag_source-&amp;gt;configure(-text =&amp;gt; $c_src_id . &amp;quot; = $type&amp;quot;);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, let&amp;rsquo;s populate the source Canvas with items of various types. For this demonstration, we limit the choices to ovals, rectangles, and all the GIF files in the current directory. As noted earlier, every item gets a &lt;code&gt;&amp;lt;ButtonPress-1&amp;gt;&lt;/code&gt; binding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my ($x, $y) = (30, 30);
    foreach (&amp;lt;*.gif&amp;gt;) {

        my $id = $c_src-&amp;gt;createImage($x, $y,
            -image =&amp;gt; $mw-&amp;gt;Photo(-file =&amp;gt; $_));
        $x += 80;
        $c_src-&amp;gt;bind($id, &#39;&amp;lt;ButtonPress-1&amp;gt;&#39; =&amp;gt; [$press, $id, $drag_source]);

    } # forend

    $x = 30;
    $y = 80;

    foreach (qw/oval rectangle/) {

        my $method = &#39;create&#39; . ucfirst $_;
        my $id = $c_src-&amp;gt;$method($x, $y, $x + 40, $y + 40, -fill =&amp;gt; &#39;orange&#39;);
        $x += 80;
        $c_src-&amp;gt;bind($id, &#39;&amp;lt;ButtonPress-1&amp;gt;&#39; =&amp;gt; [$press, $id, $drag_source]);

    } # forend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Define the drop-site destination&amp;ndash;another &lt;code&gt;Canvas&lt;/code&gt;. As a source &lt;code&gt;Canvas&lt;/code&gt; item is dropped here, create an identical item in the destination at the drop coordinates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $c_dest = $mw-&amp;gt;Canvas(qw/-background cyan/)-&amp;gt;pack;
    $c_dest-&amp;gt;DropSite(
        -droptypes   =&amp;gt; [qw/Local/],
        -dropcommand =&amp;gt; [\&amp;amp;move_items, $c_src, $c_dest],
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the obligatory Quit Button, and enter the main event loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $quit = $mw-&amp;gt;Button(-text =&amp;gt; &#39;Quit&#39;, -command =&amp;gt; [$mw =&amp;gt; &#39;destroy&#39;]);
    $quit-&amp;gt;pack;

    MainLoop;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These subroutines are invoked when a &lt;code&gt;Canvas&lt;/code&gt; source item is dropped on the destination &lt;code&gt;Canvas&lt;/code&gt;. Callback &amp;ldquo;&lt;code&gt;move_items&lt;/code&gt;&amp;rdquo; is invoked first, with these arguments:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;$c_src  = source Canvas widget reference
$c_dest = destination Canvas widget reference
$sel    = selection type, here &amp;quot;XdndSelection&amp;quot;
$dest_x = Canvas drop site X coordinate
$dest_y = Canvas drop site Y coordinate
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first two arguments we supplied on the &lt;code&gt;-dropcommand&lt;/code&gt; option. The remaining arguments are implicitly supplied by Perl/Tk.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;code&gt;move_items&lt;/code&gt;&amp;rdquo; simply branches according to the item&amp;rsquo;s type, throwing an error for &lt;code&gt;Canvas&lt;/code&gt; items we are not prepared to handle. Each type handler receives the preceding arguments plus the item&amp;rsquo;s type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub move_items {

        $_ = $_[0]-&amp;gt;type($drag_id);
        return unless defined $_;

      CASE: {

        /image/      and do {move_image $_, @_; last CASE};
        /oval/       and do {move_bbox  $_, @_; last CASE};
        /rectangle/  and do {move_bbox  $_, @_; last CASE};
        warn &amp;quot;Unknown Canvas item type &#39;$_&#39;.&amp;quot;;

      }# casend

    } # end move_items
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subroutine &amp;ldquo;&lt;code&gt;move_bbox&lt;/code&gt;&amp;rdquo; handles all &lt;code&gt;Canvas&lt;/code&gt; item types described by a bounding box. (For this demonstration, we only propagate the &lt;code&gt;-fill&lt;/code&gt; attribute from the &lt;code&gt;Canvas&lt;/code&gt; source item to the new item.) It uses the subroutine &amp;ldquo;&lt;code&gt;make_bindings&lt;/code&gt;&amp;rdquo; given below to establish local bindings on the newly created destination item, so it can be dragged about the destination Canvas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub move_bbox {

        my ($item_type, $c_src, $c_dest, $sel, $dest_x, $dest_y) = @_;

        my $fill = $c_src-&amp;gt;itemcget($drag_id, -fill);
        my $method = &#39;create&#39; . ucfirst $item_type;
        my $id = $c_dest-&amp;gt;$method($dest_x, $dest_y,
            $dest_x + 40, $dest_y + 40, -fill =&amp;gt; $fill,
        );

        make_bindings $c_dest, $id;

    } # end move_bbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subroutine &amp;ldquo;&lt;code&gt;move_image&lt;/code&gt;&amp;rdquo; handles a &lt;code&gt;Canvas&lt;/code&gt; image item type. It uses the &amp;ldquo;&lt;code&gt;make_bindings&lt;/code&gt;&amp;rdquo; subroutine just described.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub move_image {

        my ($item_type, $c_src, $c_dest, $sel, $dest_x, $dest_y) = @_;

        my $image = $c_src-&amp;gt;itemcget($drag_id, -image);
        my $id = $c_dest-&amp;gt;createImage($dest_x, $dest_y, -image =&amp;gt; $image);

        make_bindings $c_dest, $id;

    } # end move_image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;&lt;code&gt;make_bindings&lt;/code&gt;&amp;rdquo; itself adds drag behavior to our newly dropped &lt;code&gt;Canvas&lt;/code&gt; items, but without using the DND mechanism. The basic idea is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On a &lt;code&gt;&amp;lt;ButtonPress-1&amp;gt;&lt;/code&gt; event, record the &lt;code&gt;Canvas&lt;/code&gt; item&amp;rsquo;s (x,y) coordinates in instance variables of the form &lt;code&gt;&amp;quot;x&amp;quot; . $id&lt;/code&gt; and &lt;code&gt;&amp;quot;y&amp;quot; . $id&lt;/code&gt;, where &lt;code&gt;$id&lt;/code&gt; is the item&amp;rsquo;s &lt;code&gt;Canvas&lt;/code&gt; ID. This ensures that each item&amp;rsquo;s position is uniquely maintained.&lt;/li&gt;
&lt;li&gt;On a &lt;code&gt;&amp;lt;ButtonRelease-1&amp;gt;&lt;/code&gt; event, compute an (x,y) delta from the item&amp;rsquo;s original position (stored in instance variables) and the new position, and use the &lt;code&gt;Canvas&lt;/code&gt; &amp;ldquo;&lt;code&gt;move&lt;/code&gt;&amp;rdquo; method to relocate it.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --&gt;

&lt;pre&gt;&lt;code&gt;    sub make_bindings {

        my ($c_dest, $id) = @_;

        $c_dest-&amp;gt;bind($id, &#39;&amp;lt;ButtonPress-1&amp;gt;&#39; =&amp;gt; [sub {
        my ($c, $id) = @_;
        ($c_dest-&amp;gt;{&#39;x&#39; . $id}, $c_dest-&amp;gt;{&#39;y&#39; . $id}) =
            ($Tk::event-&amp;gt;x, $Tk::event-&amp;gt;y);
        }, $id]);

        $c_dest-&amp;gt;bind($id, &#39;$lt;ButtonRelease-1&amp;gt;&#39; =&amp;gt; [sub {
        my ($c, $id) = @_;
        my($x, $y) = ($Tk::event-&amp;gt;x, $Tk::event-&amp;gt;y);
        $c-&amp;gt;move($id, $x - $c_dest-&amp;gt;{&#39;x&#39; . $id}, $y - $c_dest-&amp;gt;{&#39;y&#39; . $id});
        }, $id]);

    } # end make_bindings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The entire source code to this program is available &lt;a href=&#34;http://localhost:1313/media/_pub_2001_12_11_perltk/drag.pl&#34;&gt;here&lt;/a&gt;, and for more information about Perl/Tk programming, check out &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;Mastering Perl/Tk&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates will soon release (January 2002) &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;Mastering Perl/Tk&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can also look at the &lt;a href=&#34;http://oreilly.com/catalog/mastperltk/desc.html&#34;&gt;Full Description&lt;/a&gt; of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, &lt;a href=&#34;http://www.oreilly.com/catalog/mastperltk/&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perl/Tk Tutorial</title>
      <link>http://localhost:1313/pub/1999/10/perltk/index.html/</link>
      <pubDate>Fri, 15 Oct 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/10/perltk/index.html/</guid>
      <description>&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld001.htm&#34;&gt;Essential Perl/Tk Programming&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld002.htm&#34;&gt;A Graphic Authorizing Example&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld003.htm&#34;&gt;TK Overview&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld004.htm&#34;&gt;A Pay Calculator Example&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld005.htm&#34;&gt;Creating A Window&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld006.htm&#34;&gt;Adding A Menubar&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld007.htm&#34;&gt;Adding Choices To A Menubar&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld008.htm&#34;&gt;More Menubar Choices&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld009.htm&#34;&gt;Adding Frames To A Window&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld010.htm&#34;&gt;Adding Labels To A Frame&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld011.htm&#34;&gt;Labels For Display Purposes&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld012.htm&#34;&gt;More Display Labels&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld013.htm&#34;&gt;One More Set&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld014.htm&#34;&gt;Adding A Widget Separator&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld015.htm&#34;&gt;Add Descriptive Labels&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld016.htm&#34;&gt;Adding Text Entry Boxes&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld017.htm&#34;&gt;Adding Functional Buttons&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld018.htm&#34;&gt;Adding A Checkbox&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld019.htm&#34;&gt;Initial Window Placement&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld020.htm&#34;&gt;Radiobutton Example&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld021.htm&#34;&gt;Creating A Window&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld022.htm&#34;&gt;Adding Frames To A Window&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld023.htm&#34;&gt;Adding A Status Display Area&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld024.htm&#34;&gt;Adding Radiobuttons&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld025.htm&#34;&gt;Adding An EXIT Button&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld026.htm&#34;&gt;Radiobutton Graphic Examples&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld027.htm&#34;&gt;Increment &amp;amp; Decrement: A Date Example&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld028.htm&#34;&gt;Adding A Window And Frame&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld029.htm&#34;&gt;Adding Buttons And Text Label&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld030.htm&#34;&gt;Displaying Current Date&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld031.htm&#34;&gt;Date Changing Graphic Examples&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This presentation was created for a meeting of AZSage (see &lt;a href=&#34;http://www.azsage.org&#34;&gt;http://www.azsage.org&lt;/a&gt;). &amp;ldquo;I had been attending monthly AZSage meetings for over a year,&amp;rdquo; said Brett Berry, &amp;ldquo;and finally I had something worth presenting. The presentation was aimed at the Perl/Tk novice, and there was a whole lot of ad-lib comedy to keep the mood light, and the people awake!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;On Perl.com, we are presenting this as part of what we hope will be an ongoing series of articles, titled &amp;ldquo;Source Illustrated.&amp;rdquo; The presentation by Lee and Brett is a wonderfully concise example of showing annotated code and its result. There&amp;rsquo;s no running narrative; just a code-walkthrough that is a very interesting way to learn how these examples work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_10_perltk_index/sld001.htm&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_10_perltk_index/illustration.gif&#34; alt=&#34;click to load illustration&#34; width=&#34;100&#34; height=&#34;50&#34; /&gt;&lt;/a&gt;
&lt;em&gt;Lee Minniear and Brett Berry are in business together, offering the world Business Card CDs and such. Visit them at &lt;a href=&#34;http://www.SculptedCD.com&#34;&gt;SculptedCD.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

