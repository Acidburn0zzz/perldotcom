<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl6 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl6/</link>
    <description>Recent content in Perl6 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 08:45:00 +0000</lastBuildDate>
    <atom:link href="/tags/perl6/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Observing Coronavirus Pandemic with Raku</title>
      <link>http://localhost:1313/article/observing-coronavirus-with-raku/</link>
      <pubDate>Thu, 02 Apr 2020 08:45:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/observing-coronavirus-with-raku/</guid>
      <description>

&lt;p&gt;Every few years a new unknown virus pops up and starts spreading around the globe. This year, the situation with COVID-19 is different not only because of the nature of the virus but also because of the Internet. Whilst we have instant access to new information (which is often alarmist in tone) we also have the ability to access data for ourselves.&lt;/p&gt;

&lt;p&gt;Johns Hopkins University Center for Systems Science and Engineering synthesizes COVID-19 data from different sources, and displays it on their &lt;a href=&#34;https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6&#34;&gt;online dashboard&lt;/a&gt;. They also publish daily updates in CSV files on &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to ingest their CSV data and display it using different visualizations to reduce panic and provide a way to quickly see real numbers and trends. The result is the website &lt;a href=&#34;https://covid.observer&#34;&gt;covid.observer&lt;/a&gt;. The source files are available in the GitHub &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For years Perl has been known for BioPerl. Let’s see what Raku can bring to society as its great at manipulating text data. The heart of the site is a Raku program and a few modules that parse data and create static HTML pages.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/observing-coronavirus-with-raku/covid-observer.png&#34; alt=&#34;covid-observer&#34; /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to show you a few of the most useful features that Raku offers to developers.&lt;/p&gt;

&lt;h2 id=&#34;the-main-function&#34;&gt;The &lt;code&gt;MAIN&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;The program works in three modes: parsing population data, getting updates from the COVID raw data, and generating HTML files. Raku gives us a very handy way to process command line arguments by defining different variants of the &lt;code&gt;MAIN&lt;/code&gt; function. Each variant is mapped to different command line parameters, and Raku automatically dispatches to the matched variant, which helps me to run the program in the desired mode.&lt;/p&gt;

&lt;p&gt;Here are the variants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;population&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;generate&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don’t need to parse the command-line options ourselves, nor use any modules such as &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to do it for us. Moreover, Raku emits &amp;ldquo;usage&amp;rdquo; help text if the program is run with incorrect or missing arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./covid.raku
Usage:
  ./covid.raku population
  ./covid.raku fetch
  ./covid.raku generate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Salve J. Nilsen &lt;a href=&#34;https://github.com/ash/covid.observer/pull/5&#34;&gt;proposed to add&lt;/a&gt; another &lt;code&gt;MAIN&lt;/code&gt; function that prints the SQL commands for initializing the database. This example shows how how to define Boolean flags for command line options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;setup&amp;#39;, Bool :$force=False, Bool :$verbose=False) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;code&gt;:&lt;/code&gt; before the parameter name. We’ll see it again later.&lt;/p&gt;

&lt;p&gt;An additional POD comment can be added before each version of the function to print a better usage description, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#| Fetch the latest data and rebuild the database&lt;/span&gt;
multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the program prints a more helpful usage message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Usage:
  ./covid.raku population -- Parse population CSV files
  ./covid.raku fetch -- Fetch the latest data and rebuild the database
  ./covid.raku generate -- Generate the website&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reduction-operators&#34;&gt;Reduction operators&lt;/h2&gt;

&lt;p&gt;Reduction operators are really useful. Let me remind you what a reduction operator is. It&amp;rsquo;s actually a meta-operator: an infix operator surrounded by square brackets.&lt;/p&gt;

&lt;p&gt;In the program the reduction operator is widely used for computing totals across the data sets (e.g. for the World, or across Chinese provinces). Let us examine a few cases of increasing complexity:&lt;/p&gt;

&lt;p&gt;First there’s a simple hash, and we need to add up its values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the classic use case for the reduction operator. What I &lt;a href=&#34;https://andrewshitov.com/2020/03/16/a-couple-of-syntax-sweets-in-raku/&#34;&gt;noticed&lt;/a&gt; during the work is that the &lt;code&gt;[-]&lt;/code&gt; construct helps when you need to reduce some value by a few other values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
    failed    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    recovered &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;confirmed recovered failed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$active active cases&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a hash slice in the form of &lt;code&gt;%h&amp;lt;a b c&amp;gt;&lt;/code&gt; also helps to make the code more compact. Compare this with the straightforward approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;failed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;recovered&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;filtering-data&#34;&gt;Filtering data&lt;/h2&gt;

&lt;p&gt;For our second case, the hash values are not scalars but hashes themselves. The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; hyperoperator can be used to extract deeply located data. Let me demonstrate this on a simplified data fragment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# millions&lt;/span&gt;
    },
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1434&lt;/span&gt;
    },
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,
    };

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An alternative and cleaner way is using the &lt;code&gt;map&lt;/code&gt; method to access the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total2; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to exclude a country from the results, you can &lt;code&gt;grep&lt;/code&gt; the keys in-place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excl2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excl2; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that calling the hash&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt; method is much handier than trying to loop over the keys and filter them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data{%data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hyper-operators&#34;&gt;Hyper operators&lt;/h2&gt;

&lt;p&gt;In the previous section I showed how to apply the same action to each element of a list using &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Now let us take a look at a real example of how I used the hyper operator &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; to compute the deltas of number series:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @confirmed[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/span&gt; @confirmed;
say @delta; &lt;span style=&#34;color:#75715e&#34;&gt;# [10 20 30 80]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The array contains a series of values for the given period of time. The task is to compute how many new cases happen in each day. Instead of using a loop, it is possible to simply ‘subtract‘ an array from itself but shifted by one element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator takes two data series: the slice &lt;code&gt;@confirmed[1..*]&lt;/code&gt; of the original data without the first element, and the original &lt;code&gt;@confirmed&lt;/code&gt; array. For a given binary operator (&lt;code&gt;-&lt;/code&gt; in this example), you can construct four hyper operators: &lt;code&gt;&amp;gt;&amp;gt;-&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;lt;&amp;lt;&lt;/code&gt;. The chosen form allows us to ignore the extra item at the end of &lt;code&gt;@confirmed&lt;/code&gt; when it is applied against &lt;code&gt;@confirmed[1..*]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;junctions&#34;&gt;Junctions&lt;/h2&gt;

&lt;p&gt;Let me demonstrate a way of using the junction operator &lt;code&gt;|&lt;/code&gt; which I discovered recently. It chooses the ending for the given ordinal number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $day {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ending &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; given $day {
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;st&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nd&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;}
        default      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;th&amp;#39;&lt;/span&gt;}
    }

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$day$ending&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; blocks catch the corresponding numbers that need special endings. Junctions such as &lt;code&gt;1|21|31&lt;/code&gt; are more elegant than a regular expression or a chain of comparisons.&lt;/p&gt;

&lt;h2 id=&#34;optional-and-named-parameters&#34;&gt;Optional and named parameters&lt;/h2&gt;

&lt;p&gt;Parameter processing is simple in Raku. This function accepts two positional hash parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can easily add optional named parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals, :$cc?, :$cont?, :$exclude?) {
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A colon before the name makes the parameter named, and the question mark makes it optional. I am using this to modify the behavior of the same statistical function for aggregating data over the whole World, the continents, or to exclude a single country or a region:&lt;/p&gt;

&lt;p&gt;Generating data for the whole World:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a single country:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cc);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a continent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cont &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cont);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;World data excluding China:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting data for China without its most affected province:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, cc &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN/HB&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;a-built-in-template-engine&#34;&gt;A built-in template engine&lt;/h2&gt;

&lt;p&gt;The project generates more than 200 HTML files, so templating is an important part of it. Fortunately Raku has a great out-of-the-box templating mechanism, which is much more powerful than simple variable interpolation.&lt;/p&gt;

&lt;p&gt;A minimal example is substituting variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;countries-list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        $html
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, notice that Raku lets you keep the indentation of a multi-line string by simply indenting its closing symbol. No extra spaces at the beginning of the lines will appear in the result.&lt;/p&gt;

&lt;p&gt;A more exciting thing is that you can embed Raku code blocks into strings, and those blocks can contain any logic you need to make a right decision somewhere in the middle of the template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Coronavirus in {$country&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;affected&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Affected 1 of every &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;
                    fmtnum((&lt;span style=&#34;color:#ae81ff&#34;&gt;1_000_000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $population &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
                        $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round())
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nobody affected&amp;#39;&lt;/span&gt;
            }
        }
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the string builds itself depending on data. For each generated country, the string ’chooses‘ which phrase to embed and how to format the number. The &lt;code&gt;if&lt;/code&gt; block is a relatively big chunk of Raku code that generates a string, which is used in place of the whole block in curly braces. Thus, inside this embedded code block you can freely manipulate data from the outside code.&lt;/p&gt;

&lt;h2 id=&#34;afterword&#34;&gt;Afterword&lt;/h2&gt;

&lt;p&gt;I must say that it is quite exciting to use Raku for a real project. As you can see from the examples, many of its ‘strange‘ features demonstrate how useful they are in different circumstances. Examine the code in the &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;GitHub repository&lt;/a&gt; and follow the updates about the site &lt;a href=&#34;https://andrewshitov.com/category/covid-19/&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Plan for Pugs</title>
      <link>http://localhost:1313/pub/2005/03/03/pugs_interview.html/</link>
      <pubDate>Thu, 03 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/03/pugs_interview.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.autrijus.org/&#34;&gt;Autrijus Tang&lt;/a&gt; is a talented Perl hacker, a &lt;a href=&#34;https://metacpan.org/author/AUTRIJUS&#34;&gt;dedicated CPAN contributor&lt;/a&gt;, and a truly smart man. His announcement of &lt;a href=&#34;http://use.perl.org/~autrijus/journal/22965&#34;&gt;starting an implementation of Perl 6 in Haskell&lt;/a&gt; on February 1, 2005 might have seemed like a joke from almost anyone else. A month later, his little experiment runs more code and has attracted a community larger than anyone could have predicted. Perl.com recently caught up with Autrijus on #Perl6 to discuss his new project: &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;Pugs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ve followed your journal from the beginning, but it didn&amp;rsquo;t start from the start. Where did you come up with this crazy idea?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Ok. The story is that I hacked &lt;a href=&#34;http://svk.elixus.org/&#34;&gt;SVK&lt;/a&gt; for many months with &lt;a href=&#34;https://metacpan.org/author/CLKAO&#34;&gt;clkao&lt;/a&gt;. SVK worked, except it is not very flexible. There is a VCS named &lt;a href=&#34;http://abridgegame.org/darcs/&#34;&gt;darcs&lt;/a&gt;, which is much more flexible, but is specced using quantum physics language and written in a scary language called &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;. So, I spent one month doing nothing but learning Haskell, so I could understand darcs. Which worked well; I convinced a crazy client (who paid me to develop &lt;a href=&#34;https://metacpan.org/pod/Parse::AFP&#34;&gt;Parse::AFP&lt;/a&gt;) that Perl 5 is doomed because it has no COW (which, surprisingly, it now has), and to fund me to develop an alternate library using Haskell.&lt;/p&gt;

&lt;p&gt;(I mean &amp;ldquo;Perl 5 is doomed for that task&amp;rdquo;, not &amp;ldquo;Perl 5 is doomed in general&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Copy-on-Write?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; So that&amp;rsquo;s a &amp;ldquo;sort-of has&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. As in, &lt;a href=&#34;https://metacpan.org/author/ABERGMAN&#34;&gt;sky&lt;/a&gt; suddenly worked on it and claims it mostly works. Haven&amp;rsquo;t checked the code, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s been in the works for years. Or &amp;ldquo;doesn&amp;rsquo;t works&amp;rdquo; perhaps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; But I digress. Using Haskell to develop &lt;em&gt;OpenAFP.hs&lt;/em&gt; led to programs that eat constant 2MB memory, scale linearly, and are generally 2OOM faster than my Perl library.&lt;/p&gt;

&lt;p&gt;Oh, and the code size is &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Okay, so you picked up Haskell to look at darcs to borrow ideas from for svk, then you convinced a client to pay you to write in Haskell and you started to like it. What type of program was this? It sounds like it had a bit of parsing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; AFP is IBM&amp;rsquo;s PDF-like format, born 7 years before PDF. It&amp;rsquo;s unlike PDF in that it&amp;rsquo;s all binary, very bitpacked, and is generally intolerant of errors. There was no free library that parses or munges AFP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Darcs really impressed you then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The algorithm did. The day-to-day slowness and fragility for anything beyond mid-sized projects did not. But darcs is improving. But yeah, I was impressed by the conciseness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is that the implementation of darcs you consider slow or the use of Haskell?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The implementation. It basically caches no info and recalculates all unnecessary information. Can&amp;rsquo;t be fast that way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Hm, it seems like memoization is something you can add to a functional program for free, almost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, and there are people working on that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; But not you, which is good for us Perl people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Not me. Sorry.&lt;/p&gt;

&lt;p&gt;Anyway. So, I ordered a bunch of books online including &lt;a href=&#34;http://www.cis.upenn.edu/~bcpierce/tapl/index.html&#34;&gt;TaPL&lt;/a&gt; and &lt;a href=&#34;http://www.cis.upenn.edu/~bcpierce/attapl/index.html&#34;&gt;ATTaPL&lt;/a&gt; so I could learn more about mysterious things like Category Theory and Type Inference and Curry-Howard Correspondence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How far did you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I think I have a pretty solid idea of the basics now, thanks to my math-minded brother Bestian, but TaPL is a very information-rich book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Me, I&amp;rsquo;m happy just to recognize Haskell Curry&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I read the first two chapters at a relaxed pace. By the end of second chapter it starts to implement languages for real and usually by that time, the profs using TaPL as textbook will tell the students to pick a toy language to implement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I haven&amp;rsquo;t seen you pop up much in Perl 6 land though. You seemed amazingly productive in the Perl 5 world. Where&amp;rsquo;d Perl 6 come in?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; As an exercise. I started using Perl 6 as the exercise. I think that answers the first question.&lt;/p&gt;

&lt;p&gt;Oh. p6 land.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; More of a playground than a full land, but we have a big pit full of colorful plastic balls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, I was not in p6l, p6i or p6c. However, the weekly summary really helped. Well, because I keep hitting the limit of p5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It seems like an odd fit, putting a language with a good static type system to use with a language with a loose, mostly-optional type system though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Most of more useful modules under my name, (including the ones Ingy and I inherited from Damian) were forced to be done in klugy ways because the p5 runtime is a mess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; You should see Attributes::Scary. Total sympathy here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; &lt;a href=&#34;https://metacpan.org/pod/Template::Extract&#34;&gt;Template::Extract&lt;/a&gt; uses &lt;code&gt;(?{})&lt;/code&gt; as a nondet engine; &lt;a href=&#34;https://metacpan.org/pod/PAR&#34;&gt;PAR&lt;/a&gt; comes with its own &lt;em&gt;perlmain.c&lt;/em&gt;; let me not mention source filtering. All these techniques are unmaintainable unless with large dosage of caffeine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Yeah, I fixed some of the startup warnings in &lt;a href=&#34;https://metacpan.org/pod/B::Generate&#34;&gt;B::Generate&lt;/a&gt; a couple of weeks ago&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Cool. Yeah, B::Generate is abstracted klugery and may pave a way for Pugs to produce Perl 5 code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Parrot has the chance to make some of these things a lot nicer. I&amp;rsquo;m looking forward to that. Yet you took off down another road.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Actually, I think Pugs and Parrot will meet in the middle. Where Pugs AST meets Parrot AST and the compiler is written in Perl 6 that can then be run on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I thought Pugs would get rewritten in C for Parrot?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; No, in Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Can &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; retarget a different AST then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It can, but that&amp;rsquo;s not the easier plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s easy for me. I don&amp;rsquo;t plan to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The easier plan is simply for Pugs to have a &lt;em&gt;Compile.hs&lt;/em&gt; that emits Parrot AST. Which, I&amp;rsquo;m happy to discover yesterday, is painless to write. (&lt;a href=&#34;https://metacpan.org/author/INGY&#34;&gt;Ingy&lt;/a&gt; and I did a KwidAST-&amp;gt;HtmlAST compiler in an hour, together with parser and AST.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Kwid and HTML, the markup languages?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah.&lt;/p&gt;

&lt;p&gt;Ok. So back to p6. P5&amp;rsquo;s limit is apparent and not easily fixable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It sounds like you wanted something more, and soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Parrot is fine except every time I build it, it fails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Try running Linux PPC sometime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Freebsd may not be a good platform for Parrot, I gathered. Or my CVS luck is really bad. But I&amp;rsquo;m talking about several months ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; 4.x or 5.x?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; 5.x.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Ahh, perhaps it was &lt;a href=&#34;http://www.icu-project.org/&#34;&gt;ICU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Two out of three times is. I think.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I guess it&amp;rsquo;s too late to interest you in a Ponie then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I was very interested in &lt;a href=&#34;http://www.poniecode.org/&#34;&gt;Ponie&lt;/a&gt;. I volunteered to Sky about doing svn and src org and stuff, but svn was not kind for Ponie.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;obra:&lt;/strong&gt;Well, that was before svn 1.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Right. Now it all works just fine, except &lt;em&gt;libsvn_wc&lt;/em&gt;, but we have svk now, and I learned that Sky has been addicted to svk.&lt;/p&gt;

&lt;p&gt;But anyway. And the beginning stage of Ponie is XS hackery which is by far not my forte. I&amp;rsquo;ve read &lt;a href=&#34;https://www.manning.com/jenness/&#34;&gt;Lathos&amp;rsquo; book&lt;/a&gt;, so I can do XS hackery when forced to but not on a volunteer basis. Oh no.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; That&amp;rsquo;s a special kind of pain. It&amp;rsquo;s like doing magic tricks, blindfolded, when you have to say, &amp;ldquo;Watch me push and pop a rabbit out of this stack. By the way, don&amp;rsquo;t make a reference to him yet&amp;hellip;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; So, on February 1, when I had too much caffeine and couldn&amp;rsquo;t sleep, I didn&amp;rsquo;t imagine that Pugs would be anything near a complete implementation of Perl 6. I was just interested in modeling junctions but things quickly went out of control. And some other nifty things like subroutine signatures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; There&amp;rsquo;s a fuzzy connection in the back of my head about Haskell&amp;rsquo;s inferencing and pattern matching being somewhat similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Sure. Haskell has very robust inferencing, pattern matching, and sexy types. Which I&amp;rsquo;m trying to inflict on &lt;a href=&#34;https://www.luqui.org/&#34;&gt;luqui&lt;/a&gt; to improve Perl 6&amp;rsquo;s design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; As long as they do the right thing with regard to roles, go ahead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; They do. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; This was an academic exercise though?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. It stayed as an academic exercise I think for two days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; &amp;ldquo;Hey, this Perl 6 idea is interesting. I wonder how it works in practice? I bet I could do it in Haskell!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. Using it as nothing more than a toy language to experiment with, iitially targeting a reduced set of Perl 6 that is purely functional. But by day three, I found that doing this is much easier than I thought.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Did you say &amp;ldquo;highly reduced&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. Term is &amp;ldquo;featherweight&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; What makes it easier?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; &lt;a href=&#34;http://www.cs.uu.nl/daan/parsec.html&#34;&gt;Parsec&lt;/a&gt; and &lt;a href=&#34;http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html#g:3&#34;&gt;ContT&lt;/a&gt;. Parsec is like Perl 6 rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Parsec&amp;rsquo;s the most popular Haskell parsing library, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Well, Parsec and &lt;a href=&#34;https://www.haskell.org/happy/&#34;&gt;Happy&lt;/a&gt;. Happy is more traditional; you write in a yacc-like grammar thing and it generates a parser in Haskell for you. Parsec is pure Haskell. You just write Haskell code that defines a parser. The term is &amp;ldquo;parser combinator&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Haskell is its own mini-language there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It&amp;rsquo;s a popular approach, yes. When you see &amp;ldquo;blah combinator library&amp;rdquo;, think &amp;ldquo;blah mini-language&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I looked at the parser. It&amp;rsquo;s surprisingly short.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And yet quite complete. Very maintainable, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Now I&amp;rsquo;ve also read the Perl 5 parser, in the sense that I picked out language constructs that I recognized by name. Is it a combination parser/lexer, or how does that work? That&amp;rsquo;s the tricky bit of Perl 5, in that lexing depends on the tokens seen and lots of context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. It does lexing and parsing in one pass, with infinite lookahead and backtracking. Each lexeme can define a new parser that works on the next lexeme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Does that limit what it can do? Is that why it&amp;rsquo;s purely functional Perl 6 so far?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The purely functional Perl 6 plan stops at day 3. We are now fully IO. Started with &lt;code&gt;say()&lt;/code&gt;, and mutable variables, and &lt;code&gt;return()&lt;/code&gt;, and &lt;code&gt;&amp;amp;?CALLER_CONTINUATION&lt;/code&gt;. So there&amp;rsquo;s nothing functional about the Perl 6 that Pugs targets now :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Does Haskell support continuations and all of those funky things?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yes. And you can pick and match the funky things you want for a scope of your code. &amp;ldquo;In this lexical scope I want continuations&amp;rdquo;; dynamic scope, really. &amp;ldquo;In that scope I want a logger.&amp;rdquo; &amp;ldquo;In that scope I want a pad.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Performance penalty?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Each comes with its own penalty, but is generally small. GHC, again, compiles to very fast C code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Can you instrument scopes at runtime too?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Sure. &lt;code&gt;&amp;amp;?CALLER::SUB&lt;/code&gt; works. And &lt;code&gt;$OUTER::var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Are you compiling it to native code now? I remember that being a suggestion a few days ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Pugs itself is compiled to native code; it is still evaluating Perl 6 AST, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s like Perl 5 in that sense then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yes, it&amp;rsquo;s exactly like Perl 5. Have you read &lt;a href=&#34;http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html&#34;&gt;PA01&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Cool. So yeah, it&amp;rsquo;s like Perl 5 now. The difference is B::* is trivial to write in Pugs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Except maintainable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And yeah, there&amp;rsquo;s the maintainable bit. Pugs is &amp;lt;4k lines of code. I think porting Pugs to Perl 6 will take about the same number of lines, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; You already have one module, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. And it&amp;rsquo;s your favorite module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ve started a few attempts to write &lt;a href=&#34;https://metacpan.org/pod/Test::Builder&#34;&gt;Test::Builder&lt;/a&gt; in Parrot, but I&amp;rsquo;m missing a few pieces. How far along are classes and objects in Pugs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; They don&amp;rsquo;t exist. 6.2.x will do that, though. But the short term task is to get all the todo_() cleaned. which will give us an interpreter that really agrees with all synopses. At least in the places we have implementation of, that is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I see in the dailies that you are producing boatloads of runnable Perl 6 tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup, thanks to #Perl6. I seldom write tests now :) The helpful committers do that for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How do you know your code works then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I just look at newest todo_ and start working on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Oh, they write tests for those before you implement them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. It&amp;rsquo;s all test-first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Okay, I&amp;rsquo;ll let you continue then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Ha. So yeah, the cooperation has been wonderful. Camelfolks write tests and libraries, and lambdafolks makes those tests pass. If a camelfolk wants a particular test to pass sooner, then that person can learn from lambdafolk :). Things are easy to fix, and because of the coverage there&amp;rsquo;s little chance of breaking things. If lambdafolks want to implement new things that may or may not agree with synopses or p5 norm, then they learn from camelfolks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Have you started giving Haskell tutorials? I know Larry and Patrick have started to pick up some of it. I&amp;rsquo;m pretty sure Luke and Damian have already explored it (or something from the same family tree).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I think I&amp;rsquo;ve read a paper from Damian that says he taught Haskell in monash. It&amp;rsquo;s before the monadic revolution though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; If not Haskell, certainly something from the ML family.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Right. So, I&amp;rsquo;ve been pointing people to &lt;a href=&#34;https://www.isi.edu/~hdaume/htut/&#34;&gt;YAHT&lt;/a&gt; and #Haskell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It sounds like you&amp;rsquo;re attracting people from both sides of the fence then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It indeed is. I get svn/svk patches and darcs patches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is there a lot of overlapping interest? Where does it come from?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Well, ever since the monadic revolution of &amp;lsquo;98 Haskell people have started to do real world apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Now that they can do IO, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. It&amp;rsquo;s been only 7 years ago. And recently Haskell world has its native version control system; a Perl-review like magazine, cpan/makemaker-like infrastructure, etc. So it&amp;rsquo;s growing fast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; There&amp;rsquo;s still a lot of attraction there for real world applications, of which Pugs is one?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Pugs is a practical project in that working on it has a chance of solving real problems, and is very fun to boot. And although p5 got no respect, in general p6 is very slick. So the mental barrier is lower for lambdafolks to join, I think.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; The lambdafolks like what they see in Perl 6?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. I quoted Abigail on #Haskell a while ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I saw something earlier about access to libraries and such. Do you have a plan for the XS-alternative?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, Ingy is working on it &lt;em&gt;ext/Kwid/&lt;/em&gt; eventually inline Haskell code. And with luck, inline other kinds of code as well through Haskelldirect (the Haskell equiv of Inline).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is this within Pugs or Perl 6 atop Pugs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It&amp;rsquo;s within Pugs. The Parrot side had not been well-discussed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Yeah, the Parrot AST needs more documentation.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re devoting a lot of time to it. Obra mentioned that you&amp;rsquo;ve cleared most of your paying projects out of the way for the time being. What&amp;rsquo;s the eventual end?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And whither then? I cannot say :). As you mentioned, I&amp;rsquo;ve diverted most of my paying projects away so I should have at least 6 months for Pugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How about in the next month?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; This month should see robust semantics for basic operations, the beginning of classes and objects, and many real modules hooks to Haskell-side libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ll do T::B then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Oh and Pugs hands out committer bit liberally so if you want to do T::B, I&amp;rsquo;ll make you a committer :). You can start now actually. Just write imaginary Perl 6 code, and we&amp;rsquo;ll figure out how to make it run. Most of the &lt;em&gt;examples/*&lt;/em&gt; started that way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Ah, I&amp;rsquo;ll take a look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Oh. Right. I was quoting Abigail.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Programming in Perl 5 is like exploring a large medieval castle, surrounded by a dark, mysterious forest, with something new and unexpected around each corner. There are dragons to be conquered, maidens to be rescued, and holy grails to be quested for. Lots of fun.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Perl 6 looks like a Louis-XVI castle and garden to me. Straight, symmetric, and bright. There are wigs to be powdered, minuets to be danced, all quite boring.&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I, for one, am happy for Perl to move from the dark age to the age of enlightenment. I think many camelfolks and lambdafolks share the same sentiment :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic is the author of &lt;a href=&#34;http://onyxneon.com/books/modern_perl/&#34;&gt;Modern Perl&lt;/a&gt;. In his spare time, he has been working on &lt;a href=&#34;https://trendshare.org/how-to-invest/&#34;&gt;helping novices understand stocks and investing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

