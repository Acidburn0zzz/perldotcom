<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parameter Passing on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/parameter-passing/</link>
    <description>Recent content in Parameter Passing on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Mar 2007 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/parameter-passing/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Beauty of Perl 6 Parameter Passing</title>
      <link>http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html/</link>
      <pubDate>Thu, 01 Mar 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html/</guid>
      <description>

&lt;p&gt;Perl 6 is not finished, but you can already play with it. I hope this article will encourage you to try it. Begin by installing &lt;a href=&#34;https://metacpan.org/pod/Pugs&#34;&gt;Pugs&lt;/a&gt;, a Perl 6 compiler implemented in Haskell. Note that you will also need Haskell (see directions in the Pugs &lt;em&gt;INSTALL&lt;/em&gt; file for how to get it).&lt;/p&gt;

&lt;p&gt;Of course, Pugs is not finished. It couldn&amp;rsquo;t be. The Perl 6 design is still in progress. However, Pugs still has many key features that are going to turn our favorite language into something even greater.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-script&#34;&gt;A Simple Script&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m about to take a big risk. I&amp;rsquo;m going to show you a script that performs Newton&amp;rsquo;s method. Please don&amp;rsquo;t give up before you get started.&lt;/p&gt;

&lt;p&gt;Sir Isaac Newton was a noted computer scientist and sometime astronomer, physicist, and mathematician, as the communications of the ACM once described him. He and others developed a fairly simple way of finding square roots. It goes like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs
    use v6;

    my Num  $target = 9;
    my Num  $guess  = $target;

    while (abs( $guess**2 - $target ) &amp;gt; 0.005) {
        $guess += ( $target - $guess**2 ) / ( 2 * $guess );

        say $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version always finds the square root of 9, which conveniently is 3. This aids testing because I don&amp;rsquo;t have to remember a more interesting square root, for example, the square root of 2. When I run this, the output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    5
    3.4
    3.0235294117647058823529411764705882352941
    3.0000915541313801785305561913481345845731
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last number is the square root of 9 accurate to three decimal places.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s going on.&lt;/p&gt;

&lt;p&gt;Once Pugs is installed, you can use it in a shebang line (on Unix or Cygwin, at least). Otherwise, invoke the script through &lt;code&gt;pugs&lt;/code&gt; as you would for &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pugs newton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To let Perl 6 know that I want Perl 6 and not Perl 5, I type &lt;code&gt;use v6;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Perl 6, the basic primitive types are still scalar, array, and hash. There are also more types of scalars. In this case, I&amp;rsquo;m using the floating-point type Num for both the target (the number whose square root I want) and the guess (which I hope will improve until it is the square root of the target). I can use this syntax in Perl 5. In Perl 6 it will be the norm (or so I hope). I&amp;rsquo;ve used &lt;code&gt;my&lt;/code&gt; to limit the scope of the variables just as in Perl 5.&lt;/p&gt;

&lt;p&gt;Newton&amp;rsquo;s method always needs a guess. Without explaining, I&amp;rsquo;ll say that for square roots the guess makes little difference. To make it easy, I guessed the number itself. Obviously, that&amp;rsquo;s not a good guess, but it works eventually.&lt;/p&gt;

&lt;p&gt;The while loop goes until the square of the guess is close to the target. How close is up to me. I chose .005 to give about three places of accuracy.&lt;/p&gt;

&lt;p&gt;Inside the loop, the code improves the guess at each step using Newton&amp;rsquo;s formula. I won&amp;rsquo;t explain it at all. (I&amp;rsquo;ve resisted the strong temptation from my math-teacher days to explain a lot more. Be glad I resisted. But if you are curious, consult a calculus textbook. Or better yet, send me email. I&amp;rsquo;d love to say more!) I&amp;rsquo;ll present a more general form of the method soon, which may jog the memories of the calculus lovers in the audience, or not.&lt;/p&gt;

&lt;p&gt;Finally, at the end of each iteration, I used &lt;code&gt;say&lt;/code&gt; to print the answer. This beats writing: &lt;code&gt;print &amp;quot;$guess\n&amp;quot;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Except for using &lt;code&gt;say&lt;/code&gt; and declaring the type of the numbers to be &lt;code&gt;Num&lt;/code&gt;, there&amp;rsquo;s not much to separate the above script from one I might have written in Perl 5. That&amp;rsquo;s okay. It&amp;rsquo;s about to get more Perl 6ish.&lt;/p&gt;

&lt;h3 id=&#34;an-exporting-module&#34;&gt;An Exporting Module&lt;/h3&gt;

&lt;p&gt;While it&amp;rsquo;s fine to have a script that finds square roots, it would be better to generalize this in a couple of ways. One good change is to make it a module so that others can share it. Another is to turn loose the power of Newton and look for other kinds of roots, like cube roots and other even more exotic ones.&lt;/p&gt;

&lt;p&gt;First, I&amp;rsquo;ll turn the script above into a module that exports a &lt;code&gt;newton&lt;/code&gt; sub. Then, I&amp;rsquo;ll tackle generalizing the method.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m finished, I want to be able to use the module like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs

    use Newton;

    my $answer = newton(4);

    say $answer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;say&lt;/code&gt; is so helpful, I could combine the last two statements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        say &amp;quot;{ newton(4) }&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s right, strings will run code if you put it in braces.&lt;/p&gt;

&lt;p&gt;The module, &lt;em&gt;Newton.pm&lt;/em&gt;, looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;
    use v6;

    sub newton(Num $target) is export {
        my Num  $guess  = $target;

        while (abs( $guess**2 - $target ) &amp;gt; 0.005) {
            $guess += ( $target - $guess**2 ) / ( 2 * $guess );
        }

        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here begins the familiar package declaration borrowed from Perl 5. (In Perl 6 itself, &lt;code&gt;package&lt;/code&gt; identifies Perl 5 source code. The &lt;a href=&#34;https://metacpan.org/pod/v6&#34;&gt;v6&lt;/a&gt; module lets you run some Perl 6 code in Perl 5 programs.) Immediately following is &lt;code&gt;use v6;&lt;/code&gt;, just as in the original script.&lt;/p&gt;

&lt;p&gt;Declaring subs in Perl 6 doesn&amp;rsquo;t have to be any different than in Perl 5, but it should be. This one says it takes a numeric variable called &lt;code&gt;target&lt;/code&gt;. Such genuine prototypes allow for Perl 6 to report compilation errors when you call a sub with the wrong arguments. That single step will move Perl 6 onto the list of possible languages for a lot of large-scale application development shops.&lt;/p&gt;

&lt;p&gt;At the end of the declaration, just before the opening brace for the body, I included &lt;code&gt;is export&lt;/code&gt;. This puts &lt;code&gt;newton&lt;/code&gt; into the namespace of whoever uses the module (at least, if they use the module in the normal way; they could explicitly decline to take imports). There is no need to explicitly use &lt;code&gt;Exporter&lt;/code&gt; and set up &lt;code&gt;@EXPORT&lt;/code&gt; or its friends.&lt;/p&gt;

&lt;p&gt;The rest of the code is the same, except that it returns the answer and no longer proclaims its guess at each iteration.&lt;/p&gt;

&lt;h3 id=&#34;assigning-defaults&#34;&gt;Assigning Defaults&lt;/h3&gt;

&lt;p&gt;Adding genuine, compiler-enforced parameters to sub declarations is a giant leap forward for Perl. For many people, that particular looseness in Perl 5 keeps it out of any discussions about what language to use for a project. I experienced this unfortunate reality firsthand in my last job. There&amp;rsquo;s a lot more to declarations in Perl 6, though.&lt;/p&gt;

&lt;p&gt;Suppose I want to give the caller control over the accuracy of the method, yet I want to provide a sensible default if that caller doesn&amp;rsquo;t want to think of a good one. I might write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;
    use v6;

    sub newton(
        Num  $target,
        Num  :$epsilon = 0.005,  # note the colon
        Bool :$verbose = 0,
    ) is export {
        my Num  $guess  = $target;

        while (abs( $guess**2 - $target ) &amp;gt; $epsilon ) {
            $guess += ( $target - $guess**2 ) / ( 2 * $guess );
                    say $guess if $verbose;
        }

        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I&amp;rsquo;ve introduced two new optional parameters: &lt;code&gt;$verbose&lt;/code&gt;, for whether to print at each step (the default is to keep quiet) and &lt;code&gt;$epsilon&lt;/code&gt;, the Greek letter we math types often use for tolerances.&lt;/p&gt;

&lt;p&gt;While the caller might use this exactly as before, she now has options. She might say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $answer = newton(165, verbose =&amp;gt; 1, epsilon =&amp;gt; .00005);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives extra accuracy and prints the values at each iteration (which prints the value of the last iteration twice: once in the loop and again in the driving script). Note that the named parameters may appear in any order.&lt;/p&gt;

&lt;h3 id=&#34;making-assumptions&#34;&gt;Making Assumptions&lt;/h3&gt;

&lt;p&gt;Finally, Newton&amp;rsquo;s method can find roots for more things than just squares. To make this general requires a bit more work and some extra math (which I&amp;rsquo;ll again brush under the rug).&lt;/p&gt;

&lt;p&gt;It is easy enough to supply the function for which you want roots. For example, the squaring function could be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub f(Num $x) { $x**2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the update line of the loop, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $guess += ( $target - f($guess) ) / ( 2 * $guess );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changing &lt;code&gt;f&lt;/code&gt; would change the roots you seek.&lt;/p&gt;

&lt;p&gt;The problem is on the far side of the division symbol. &lt;code&gt;2 * $guess&lt;/code&gt; depends on the function (it&amp;rsquo;s the first derivative, for those who care). I could require the caller to provide this, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub fprime(Num $x) { 2 * $x }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the update would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $guess += ( $target - f($guess) ) / fprime($guess);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two problems with this approach. First, you need a way for the caller to pass those functions into the sub. That&amp;rsquo;s actually pretty easy; just add parameters of type Code to the list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub newton(
        Num  $target,
        Code $f,
        Code $fprime,
        Num  :$epsilon = 0.005,
        Bool :$verbose = 0,
    ) is export {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second problem is that the caller may not know how to calculate &lt;code&gt;$fprime&lt;/code&gt;. Perhaps I should make calculus a prerequisite for using the module, but that just might scare away a few potential users. I want to provide a default, but the default depends on what the function is. If I knew what &lt;code&gt;$f&lt;/code&gt; was, I could estimate &lt;code&gt;$fprime&lt;/code&gt; for users.&lt;/p&gt;

&lt;p&gt;Perl 6 provides precisely this ability. Here&amp;rsquo;s the final module, a bit at a time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;

    use v6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s nothing new.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub approxfprime(Code $f, Num $x) {
        my Num $delta = 0.1;
        return ($f($x + $delta) - $f($x - $delta))/(2 * $delta);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those who care (surely at least one person does), this is a second-order centered difference. For those who don&amp;rsquo;t, its an approximation suitable for use in the &lt;code&gt;newton&lt;/code&gt; sub. It takes a function and a number and returns an estimate of the value needed for division.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub newton(
        Num  $target,
        Code $f,
        Code :$fprime         = &amp;amp;approxfprime.assuming( f =&amp;gt; $f ),
        Num  :$epsilon        = 0.0005,
        Bool :$verbose        = 0,
    ) returns Num is export {
        my Num $guess  = $target / 2;

        while (abs($f($guess) - $target) &amp;gt; $epsilon) {

            $guess += ($target - $f($guess)) / $fprime($guess);

            say $guess if $verbose;
        }
        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A script using this program could be as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs

    use Newton;

    sub f(Num $x) { return $x**3 }

    say &amp;quot;{ newton(8, \&amp;amp;f, verbose =&amp;gt; 1, epsilon =&amp;gt; .00005) }&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the caller must supply the function &lt;code&gt;f&lt;/code&gt;. The one in the example is for cube roots.&lt;/p&gt;

&lt;p&gt;If the caller provides the derivative as &lt;code&gt;fprime&lt;/code&gt;, I use it. Otherwise, as in the example, I use &lt;code&gt;approxfprime&lt;/code&gt;. Whereas a caller-supplied &lt;code&gt;fprime&lt;/code&gt; would take one number and return another, &lt;code&gt;approxfprime&lt;/code&gt; needs a number and a function. The function needed is the one the caller passed to &lt;code&gt;newton&lt;/code&gt;. How do you pass it on? Currying—that is, supplying one or more of the parameters of a function once, then using the simplified version after that.&lt;/p&gt;

&lt;p&gt;In Perl 6, you can obtain a reference to a sub by placing the sub sigil &lt;code&gt;&amp;amp;&lt;/code&gt; in front of the function&amp;rsquo;s name (providing it is in scope). To curry, add &lt;code&gt;.assuming&lt;/code&gt; to the end of that and supply values for one or more arguments in parentheses. All of this is harder to talk about than to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Code :$fprime         = &amp;amp;approxfprime.assuming( f =&amp;gt; $f ),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code means that the caller might supply a value. If this is the case, use it. Otherwise, use &lt;code&gt;approxfprime&lt;/code&gt; with the caller&amp;rsquo;s function in place of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Perl 6 calling conventions are extremely well designed. Not only do they allow compile-time parameter checking, they also allow named parameters with or without complex defaults, even including curried default functions. This is going to be very powerful. In fact, with Pugs, it already is.&lt;/p&gt;

&lt;p&gt;There is a slightly more detailed version of the example from this article in the &lt;em&gt;examples/algorithms/&lt;/em&gt; directory of the Pugs distribution. It&amp;rsquo;s called &lt;em&gt;Newton.pm&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;As much as it pains me to say it, if you need heavy duty numerics, don&amp;rsquo;t code in pure Perl. Rather, use FORTRAN, C, or Perl with PDL. And be careful. Numerics is full of unexpected gotchas, which lead to poor performance or outright incorrect results. Unfortunately, Newton&amp;rsquo;s method, in the general case, is notoriously risky. When in doubt about numerics, do as I do and consult a professional in the field.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

