<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unicode on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/unicode/</link>
    <description>Recent content in Unicode on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 20:11:44 +0000</lastBuildDate>
    <atom:link href="/tags/unicode/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JSON, Unicode, and Perl … Oh My!</title>
      <link>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</link>
      <pubDate>Wed, 29 Jan 2020 20:11:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</guid>
      <description>

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might think this a reasonable enough round-trip, just using two
different JSON libraries, &lt;a href=&#34;https://metacpan.org/pod/Mojo::JSON&#34;&gt;Mojo::JSON&lt;/a&gt;
and &lt;a href=&#34;https://metacpan.org/pod/Cpanel::JSON::XS&#34;&gt;Cpanel::JSON::XS&lt;/a&gt;.
In fact, though, when you run
this you’ll see that $decode in the above is &lt;code&gt;&amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;&lt;/code&gt;,
not just the &lt;code&gt;&amp;quot;\xc3\xa9&amp;quot;&lt;/code&gt; that we started with.&lt;/p&gt;

&lt;p&gt;Now invert the encoder/decoder modules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now $decode is just &lt;code&gt;&amp;quot;\x{e9}&amp;quot;&lt;/code&gt;. What’s going on here?&lt;/p&gt;

&lt;h2 id=&#34;what-s-in-a-string&#34;&gt;What’s in a string?&lt;/h2&gt;

&lt;p&gt;To appreciate the above, we first have to grapple with what Perl strings
&lt;em&gt;are&lt;/em&gt;, fundamentally. Unlike C strings, Perl strings aren’t mere arrays
of bytes … but unlike, say, Python 3 strings, Perl strings aren’t arrays of
Unicode characters, either. Perl strings, rather, are arrays of “code
points” in an undefined character set.&lt;/p&gt;

&lt;p&gt;In particular, unlike Python, JavaScript, and many other popular high-level
programming languages, Perl strings do not differentiate between “binary”
and “text”. For example, if Perl reads
bytes 0xff, 0xfe, 0xfd, and 0xfc off of a binary filehandle, the string
that Perl creates from those 4 bytes is understood to contain not 4 &lt;em&gt;bytes&lt;/em&gt;,
but 4 &lt;em&gt;code points&lt;/em&gt;, without reference to any particular character set,
stored in an abstract, internal-use encoding.
(The Perl interpreter may, in fact, use 4 bytes to store the string, but that
would be an implementation detail, of no concern to interpreted Perl code.)&lt;/p&gt;

&lt;p&gt;This point must be stressed: Perl _does not care_—and does not &lt;em&gt;want&lt;/em&gt; to
care—whether a given string’s code points represent bytes or characters.
(More will be said on this later.)&lt;/p&gt;

&lt;h2 id=&#34;back-to-json&#34;&gt;Back to JSON&lt;/h2&gt;

&lt;p&gt;In our examples above we compared round-tripping using different libraries
for the encode and decode. Let’s dig further by comparing just the
encoded JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mojo_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cp_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $mojo_json, $cp_json );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;;
$VAR2 = &amp;quot;[\&amp;quot;\x{c3}\x{a9}\&amp;quot;]&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;
outputs one string using octal escapes
and the other using hex. This reflects another Perl interpreter
implementation detail which, for now, is of no concern.)&lt;/p&gt;

&lt;p&gt;Our input string contains two code points, 0xc3 and 0xa9. Recall that
there is no specific character set associated with those code points; they’re
just numbers. JSON, though, is purely Unicode—and the
latest standard mandates UTF-8 encoding specifically. So we need to translate
our “no-character-set” code points to UTF-8 in order to encode to JSON. But
how to do this?&lt;/p&gt;

&lt;p&gt;We can’t, strictly speaking. It would be like trying
to convert 5 “currency units” to U.S. dollars: we need to know the actual
source currency (Bitcoin? Euros?) to get an answer. Likewise, in Perl, to
express our stored “code points” in UTF-8 we need to know what &lt;em&gt;characters&lt;/em&gt;
those code points represent. For example, your Perl string might store code
point 142 … but which character is that? Perl doesn’t know, and Perl doesn’t
care. Without a defined character set, a code point is just a number.&lt;/p&gt;

&lt;p&gt;To work around this problem, our JSON libraries make reasonable—though
not necessarily correct—assumptions about what the string’s code points
represent.&lt;/p&gt;

&lt;p&gt;Mojo::JSON assumes that our 2 original code points are Unicode. That means
Mojo::JSON thinks we gave it the characters U+00C3 (Ã) and
U+00A9 (©). The reason for the “expansion” from 2 code points to 4 in the
encoded JSON is that
Mojo::JSON encodes our code points as UTF-8: U+00C3 becomes Perl
code points 0303 (0xc3) and 0203 (0x83), and U+00A9 becomes 0302 (0xc2) and
0251 (0xa9).&lt;/p&gt;

&lt;p&gt;Cpanel::JSON::XS makes a different assumption that suits a different
interpretation: This encoder assumes that our 2 original code points
represent whatever bytes of the characters that should go into the eventual
JSON. Unlike with Mojo::JSON, there is no assumption about a desired encoding,
which allows the caller full control over the encoding.&lt;/p&gt;

&lt;p&gt;(This flexibility allows the encoder’s caller to choose, e.g., UTF-16 rather
than UTF-8 for the encoded JSON. That made more sense prior to the latest
JSON specification, which mandates UTF-8 outside closed systems.)&lt;/p&gt;

&lt;p&gt;The same difference in behavior applies to our two decoder functions. They,
too, face an “unsolvable” problem, the reverse of that for encoding. And
their solutions mirror the encoders’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{e9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recall that Mojo::JSON’s encoder interprets its input as Unicode and that
its output code points represent bytes of UTF-8.
Above you’ll see that its decoder does the inverse: it interprets its
input as bytes of UTF-8 and outputs code points understood to be Unicode.
This means the number of code points output will be smaller than the number
input if the input contains any code points above 127 (0x7f), which UTF-8
represents as multiple bytes.&lt;/p&gt;

&lt;p&gt;As for Cpanel::JSON::XS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;decode()&lt;/code&gt; method, like &lt;code&gt;encode()&lt;/code&gt;, assumes that the caller will
handle encoding manually and so simply copies code points.&lt;/p&gt;

&lt;h2 id=&#34;aside-assumptions-of-utf-8&#34;&gt;Aside: Assumptions of UTF-8&lt;/h2&gt;

&lt;p&gt;Mojo::JSON’s behavior of encoding to UTF-8 has precedent: Perl itself!&lt;/p&gt;

&lt;p&gt;You may have run into something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; perl -e&#39;print &amp;quot;\x{100}&amp;quot;&#39;
Wide character in print at -e line 1.
Ā
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For code points 0-255 Perl just outputs the code point as an octet, but
when asked to output a code point that exceeds 255, obviously that doesn’t
work. In this case, Perl assumes you want UTF-8 but throws the “wide
character” warning to tip you off to the fact that you missed something—in
this case, you neglected to encode code point 256 to bytes.&lt;/p&gt;

&lt;h2 id=&#34;abusing-the-system&#34;&gt;Abusing the System&lt;/h2&gt;

&lt;p&gt;Cpanel::JSON::XS’s &lt;code&gt;encode()&lt;/code&gt; allows for a nonstandard use of JSON:
literal binary data. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl -MCpanel::JSON::XS -e&#39;print Cpanel::JSON::XS-&amp;gt;new()-&amp;gt;encode([&amp;quot;\xff&amp;quot;])&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… will output 5 bytes: &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt;, 0xff, &lt;code&gt;&amp;quot;&lt;/code&gt;, and &lt;code&gt;]&lt;/code&gt;. This is invalid JSON
because no Unicode encoding (let alone UTF-8) ever encodes a character to
a single 0xff byte. Only special decoders that understand this “literal
binary” JSON variant will parse this as intended. That reliance on a custom
mode of operation undercuts JSON’s usefulness as a widely-supported
standard—which may seem fine at first but
can easily bite if your application grows in scope.&lt;/p&gt;

&lt;p&gt;Applications that need to serialize strings with arbitrary octets (i.e.,
binary) should apply a secondary encoding (e.g., Base64) to strings prior
to JSON encoding. Or, better yet, prefer a binary-friendly encoding like
&lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-that-flag-behind-the-curtain&#34;&gt;About That Flag Behind the Curtain …&lt;/h2&gt;

&lt;p&gt;If you run the output from our two encoder methods through
&lt;a href=&#34;https://metacpan.org/pod/Devel::Peek&#34;&gt;Devel::Peek&lt;/a&gt;, you’ll
see something like this for Mojo::JSON’s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fdc27802f30) at 0x7fdc27e59c58
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x7fdc28826350 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and this for Cpanel::JSON::XS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fc0cd004d30) at 0x7fc0cd016228
  REFCNT = 1
  FLAGS = (POK,pPOK,UTF8)
  PV = 0x7fc0cce2ef60 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0 [UTF8 &amp;quot;[&amp;quot;\x{c3}\x{a9}&amp;quot;]&amp;quot;]
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;UTF8&lt;/code&gt; flag in the latter. This tells us that Perl’s
internal storage of the string’s code points uses UTF-8 encoding. This
difference is why, as we saw earlier, Data::Dumper encodes Mojo::JSON’s output
using
octal escapes but Cpanel::JSON::XS’s using hex: Data::Dumper recognizes the
UTF8 flag and renders its output based on it.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://perldoc.perl.org/perlunifaq.html#What-is-%22the-UTF8-flag%22%3f&#34;&gt;perldoc perlunifaq&lt;/a&gt; makes clear, though, the UTF8 flag is &lt;strong&gt;not&lt;/strong&gt; meant for
consumption by Perl code. Perl applications should regard strings as
simple sequences of code points, without regard for how the
Perl interpreter may store those strings in memory.&lt;/p&gt;

&lt;p&gt;That being said,
in limited contexts it &lt;em&gt;may&lt;/em&gt; work to imitate the distinction between string
types in languages like Python and JavaScript by regarding
UTF8-flagged strings as “character strings” and non-UTF8-flagged strings as
“byte strings”—indeed, &lt;a href=&#34;https://metacpan.org/pod/Sereal::Encoder&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;serializers&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;on&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;CPAN&lt;/a&gt;, including two of my own,
do exactly this. This isn’t
a supported model, though, for using Perl strings, and any code that
depends on it may behave differently in different Perl versions. Caveat
emptor!&lt;/p&gt;

&lt;h2 id=&#34;making-peace&#34;&gt;Making Peace&lt;/h2&gt;

&lt;p&gt;JSON and Perl are odd bedfellows. Perl’s lack of distinct number and string
types, for example, can yield JSON that uses the wrong type for one
value or the other. Perl’s lack of native booleans produces a similar effect.&lt;/p&gt;

&lt;p&gt;The encoding problems discussed above, though, are especially nefarious
because accommodating them requires a good understanding of all of the above.
Most developers can accommodate something like &lt;code&gt;{&amp;quot;age&amp;quot;: &amp;quot;9&amp;quot;}&lt;/code&gt; easily enough
because typecasting from &lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; (string) to &lt;code&gt;9&lt;/code&gt; (number) is commonplace. But
how many would see &lt;code&gt;&amp;quot;Ã©&amp;quot;&lt;/code&gt; and think, “ah! I simply have to treat those
characters’ code points as bytes then decode those bytes as UTF-8!” Some
would, to be sure—perhaps even many—but likely fewer than can easily coerce
&lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Binary-friendly encodings like &lt;a href=&#34;http://cbor.io&#34;&gt;CBOR&lt;/a&gt;
mitigate against this problem because whatever decodes the Perl-sourced
data can more easily recognize the need to decode from binary. Anyone
who doesn’t know about bytes and encodings will quickly learn! Fundamentally,
though, even CBOR doesn’t really fit Perl’s “pure code points” string model
very well because CBOR distinguishes strongly between binary and text strings,
which Perl does not.&lt;/p&gt;

&lt;p&gt;At the end of the day, Perl’s data model, for all of the conveniences that it
affords us, makes communication with many other languages a challenge. The
best we can do is to anticipate these problems and deal with them as they arise.&lt;/p&gt;

&lt;h2 id=&#34;epilogue-json-alternatives&#34;&gt;Epilogue: JSON Alternatives&lt;/h2&gt;

&lt;p&gt;JSON’s inability to store arbitrary octet strings is, in my experience,
its biggest liability,
but there are other reasons why I often prefer to avoid JSON:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Its inability to store comments and proscription against trailing commas
make it an awkward choice for human-maintained data structures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its &lt;code&gt;\uXXXX&lt;/code&gt; escapes support only characters within Unicode’s
&lt;abbr title=&#34;Basic Multilingual Plane&#34;&gt;BMP&lt;/abbr&gt;; to store emoji or other
non-BMP characters you either have to encode to UTF-8 directly or indicate
a UTF-16 surrogate pair (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-16#U+010000_to_U+10FFFF&#34;&gt;What does that mean?&lt;/a&gt;) in &lt;code&gt;\uXXXX&lt;/code&gt; escapes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It’s inefficient compared with binary formats.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; is a nice serialization format
for human-maintained data structures. It’s line-delimited and—of course!—allows
comments, and any Unicode code point can be expressed in simple hexadecimal.
TOML is fairly new, and its specification is still in flux; nevertheless,
it already undergirds a number of high-profile
software projects like Rust’s &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;
package manager and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;—which powers this site! CPAN
&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;hosts&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;several&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML&#34;&gt;implementations&lt;/a&gt; of this serialization.&lt;/p&gt;

&lt;p&gt;The aforementioned &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; improves upon JSON’s efficiency and
also allows for storage of binary strings. Whereas JSON encoders must
stringify numbers and escape all strings, CBOR stores numbers “literally”
and prefixes strings with their length, which obviates the need to escape those
strings. These dramatically simplify both encoding and decoding. As with
TOML and YAML, CPAN hosts &lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;CBOR&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;implementations&lt;/a&gt;.
(Full disclosure: Two of these are of my own authorship.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Sereal/Sereal&#34;&gt;Sereal&lt;/a&gt; is another great JSON substitute
that confers most of CBOR’s benefits and can even serialize more
“Perl-specific” items like regular expressions. This makes it ideal
for Perl-to-Perl IPC. The reference implementation is CPAN’s
&lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt; distribution.
Sereal isn’t as well-supported as CBOR outside Perl,
though, so if you need to communicate with non-Perl code, Sereal may
not work as well for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; is another format that humans can maintain easily.
Unlike TOML, YAML supports binary strings; in fact, it’s flexible enough
to replace Data::Dumper in many cases. CPAN includes
a &lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;number&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::PP&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::Old&#34;&gt;libraries&lt;/a&gt; that implement YAML.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a UTF-8 encoder in Perl</title>
      <link>http://localhost:1313/article/building-a-utf-8-encoder-in-perl/</link>
      <pubDate>Tue, 02 Aug 2016 08:47:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/building-a-utf-8-encoder-in-perl/</guid>
      <description>

&lt;p&gt;This week I wrote a UTF-8 encoder/decoder. Perl already comes with UTF-8 encoding features built-in, so this wasn&amp;rsquo;t necessary, but sometimes it&amp;rsquo;s nice to understand how things work. The UTF-8 scheme is defined in &lt;a href=&#34;https://tools.ietf.org/html/rfc3629&#34;&gt;RFC 3629&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-does-a-utf-8-encoder-do&#34;&gt;What does a UTF-8 encoder do?&lt;/h3&gt;

&lt;p&gt;UTF-8 is a scheme for encoding &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode&#34;&gt;Unicode&lt;/a&gt; sequences of codepoints as bytes/octets. A codepoint is just a number, that identifies the Unicode entry (such as 0x24 which is a dollar sign).&lt;/p&gt;

&lt;p&gt;Unicode defines codepoints in the range 0x0000..0x10FFFF, so the encoder must take a codepoint and convert it to bytes according to the UTF-8 scheme, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Char. number range  |     UTF-8 bytes/octets sequence
   (hexadecimal)    |              (binary)
--------------------+------------------------------------
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has some interesting properties. First of all, codepoints in the range 0x00..0x7F (0-127) will have the same bytes as with ASCII encoding, which is convenient. Second it&amp;rsquo;s a &lt;em&gt;variable width&lt;/em&gt; encoding, which means that a single codepoint can be 1-4 bytes long.&lt;/p&gt;

&lt;p&gt;Decoding is simply the process in reverse: converting a sequence of bytes back into a codepoint.&lt;/p&gt;

&lt;h3 id=&#34;encoding-utf-8&#34;&gt;Encoding UTF-8&lt;/h3&gt;

&lt;p&gt;To encode UTF-8, I need to convert a codepoint (which is just a number), into a sequence of bytes. As there are four different byte sequences defined in the UTF-8 table, there are four scenarios to handle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;codepoint_to_bytes&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;, $codepoint;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x800&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CC&amp;#39;&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b11000000&lt;/span&gt;,
           $codepoint       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCC&amp;#39;&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b11100000&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;,
           $codepoint       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b11110000&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;,
           $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;,
           $codepoint       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b10000000&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first is the easiest: if the codepoint is between 0x00 and 0x7F, no transformation is required, so I just &lt;a href=&#34;https://perldoc.perl.org/functions/pack.html&#34;&gt;pack&lt;/a&gt; the codepoint as-is. The byte value of a character is the same as the codepoint (e.g. &lt;code&gt;&#39;U&#39; == 56 == 0x38 == 00111000&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For the second scenario I have to populate the bitmask &lt;code&gt;110xxxxx 10xxxxxx&lt;/code&gt; with the codepoint, which means I need to return two bytes. This is how I do it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the first byte, bitshift the codepoint 6 places to the right (as the second byte will get those 6 bits).&lt;/li&gt;
&lt;li&gt;Use bitwise OR to set the two most significant bits to one (&lt;code&gt;xxxxxxxx | 11000000 == 11xxxxxx&lt;/code&gt;). I&amp;rsquo;m using Perl&amp;rsquo;s inline binary notation (&lt;code&gt;0b...&lt;/code&gt;) which makes it easy to compare the binary numbers with the bitmask.&lt;/li&gt;
&lt;li&gt;For the second byte use bitwise AND to set the two most significant bits to zero (&lt;code&gt;xxxxxxxx &amp;amp; 00111111 == 00xxxxxx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Use bitwise OR to set the most significant bit to 1 (&lt;code&gt;xxxxxxxx | 10000000 == 1xxxxxxx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://perldoc.perl.org/functions/pack.html&#34;&gt;pack&lt;/a&gt; to combine the bytes into a scalar and return it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process for three byte and four byte encoding follows the same approach, with the rules updated according to the UTF-8 scheme.&lt;/p&gt;

&lt;p&gt;If I wanted to get UTF-8 encoded bytes for the &lt;a href=&#34;http://www.fileformat.info/info/unicode/char/1f4fa/fontsupport.htm&#34;&gt;Television&lt;/a&gt; codepoint (U+1F4FA) I could use the code like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; codepoint_to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F4FA&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;decoding-utf-8&#34;&gt;Decoding UTF-8&lt;/h3&gt;

&lt;p&gt;To decode UTF-8 bytes, we need to reverse the encoding process to get back to the original Unicode codepoint number. The decoder must check how many bytes it received, extract the appropriate bits and add them together.&lt;/p&gt;

&lt;p&gt;Perl tries &amp;ldquo;to make the easy things easy, and the hard things possible&amp;rdquo; as the saying goes, but sometimes it makes easy things harder than they are in simpler languages like C. Binary data is one such area: Perl needs to be told to turn off its character features before you can safely work with the data.&lt;/p&gt;

&lt;p&gt;There are two ways to do that. The old, discouraged way is to use the &lt;a href=&#34;https://metacpan.org/pod/bytes&#34;&gt;bytes pragma&lt;/a&gt;. The newer way is to use the &lt;a href=&#34;https://metacpan.org/pod/Encode#SYNOPSIS&#34;&gt;Encode&lt;/a&gt; module to encode the scalar as bytes and remove its UTF-8 flag. After that, Perl&amp;rsquo;s functions will treat the scalar as a sequence of bytes instead of characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Encode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encode&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes_to_codepoint&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;# treat the scalar as bytes/octets&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;, shift);

  &lt;span style=&#34;color:#75715e&#34;&gt;# length returns number of bytes&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $len      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length $input;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; x $len;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack $template, $input;

  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the subroutine &lt;code&gt;bytes_to_codepoint&lt;/code&gt; I use &lt;code&gt;encode()&lt;/code&gt; to populate &lt;code&gt;$input&lt;/code&gt; with the bytes passed to it. Next I use the &lt;code&gt;length&lt;/code&gt; function to return the number of bytes in &lt;code&gt;$input&lt;/code&gt; - this is different from its usual behavior which returns the number of characters; this is the effect of using &lt;code&gt;encode()&lt;/code&gt; to convert the scalar to bytes. Finally I use &lt;a href=&#34;https://perldoc.perl.org/functions/unpack.html&#34;&gt;unpack&lt;/a&gt; to extract the bytes from &lt;code&gt;$input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I know the number of bytes passed to &lt;code&gt;bytes_to_codepoint&lt;/code&gt;, it&amp;rsquo;s just a matter of reversing the binary operations from the encoding process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00011111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
          ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00001111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
         (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
         ( $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00000111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
         (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
         (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
          ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is just one byte, I return it as-is because the codepoint number is the same as the byte value. As with encoding, it gets interesting with two bytes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove the bitmask from the first byte with bitwise AND. Remember bitwise AND returns any bits as zero which are zero in the right operand (&lt;code&gt;xxxxxxxx &amp;amp; 00011111 == 000xxxxx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Bit shift the resulting number 6 places to the left to get the original value. So &lt;code&gt;00000010&lt;/code&gt; would become &lt;code&gt;10000000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove the bitmask from the second byte with bitwise AND (&lt;code&gt;xxxxxxxx &amp;amp; 00111111 == 00xxxxxx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add the numbers together.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same logic applies to three byte and four byte sequences, I just update the bitwise operations to match the UTF-8 scheme. The final code looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Encode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encode&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes_to_codepoint&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;# treat the scalar as bytes/octets&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;, shift);

  &lt;span style=&#34;color:#75715e&#34;&gt;# length returns number of bytes&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $len      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length $input;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; x $len;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack $template, $input;

  &lt;span style=&#34;color:#75715e&#34;&gt;# reverse encoding&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00011111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($len &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00001111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
           (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
           ( $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00000111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
           (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
           (($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b00111111&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s say I wanted to get the codepoint for the &lt;a href=&#34;http://www.fileformat.info/info/unicode/char/1f5fc/index.htm&#34;&gt;Tokyo Tower&lt;/a&gt; I can call the code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $codepoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_codepoint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;🗼&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;This is a naive implementation - it doesn&amp;rsquo;t handle UTF-16 reserved characters (U+D800..U+DFFF), noncharacters and only encodes/decodes one codepoint at a time.&lt;/li&gt;
&lt;li&gt;Take a look at &lt;a href=&#34;https://metacpan.org/pod/Unicode::UTF8&#34;&gt;Unicode::UTF8&lt;/a&gt; if you need a fast UTF-8 encoder and don&amp;rsquo;t want to use Perl&amp;rsquo;s builtin tools.&lt;/li&gt;
&lt;li&gt;UTF-8 is by far the most popular Unicode encoding. It was created by Ken Thompson and Rob Pike in &lt;a href=&#34;http://doc.cat-v.org/bell_labs/utf-8_history&#34;&gt;just a few days&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Building your own UTF-8 encoder? Check out Markus Kuhn&amp;rsquo;s &lt;a href=&#34;https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt&#34;&gt;decoder test file&lt;/a&gt; which contains several difficult or edge case tests for UTF-8 decoding. Markus also wrote a comprehensive &lt;a href=&#34;https://www.cl.cam.ac.uk/~mgk25/unicode.html&#34;&gt;UTF-8 and Unicode FAQ for Unix/Linux&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN August 2014</title>
      <link>http://localhost:1313/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</link>
      <pubDate>Tue, 02 Sep 2014 12:36:04 +0000</pubDate>
      
      <guid>http://localhost:1313/article/113/2014/9/2/What-s-new-on-CPAN-August-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Appium&#34;&gt;Appium&lt;/a&gt; provides the Perl bindings for the open source mobile testing framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Stripe::Simple&#34;&gt;Net::Stripe::Simple&lt;/a&gt; is a lightweight interface to Stripe&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::MorphIO&#34;&gt;WebService::MorphIO&lt;/a&gt; is an API for morph.io &amp;ldquo;the heroku for web scrapers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;New music APIs: &lt;a href=&#34;https://metacpan.org/pod/WebService::Bandcamp&#34;&gt;WebService::Bandcamp&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::MusixMatch&#34;&gt;WebService::MusixMatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for book deals? &lt;a href=&#34;https://metacpan.org/pod/App::BarnesNoble::WishListMinder&#34;&gt;App::BarnesNoble::WishListMinder&lt;/a&gt; monitors a wishlist of books for price changes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::CPANRepo&#34;&gt;App::CPANRepo&lt;/a&gt; is handy utility that returns the source URL of a given module name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::mirai&#34;&gt;App::mirai&lt;/a&gt; is an impressive-looking debugger for future programming&lt;/li&gt;
&lt;li&gt;The Unix &lt;code&gt;which&lt;/code&gt; program returns only one matching binary. Enter &lt;a href=&#34;https://metacpan.org/pod/App::multiwhich&#34;&gt;App::multiwhich&lt;/a&gt; which helpfully returns all matching binaries for a given search (edit: the author has &lt;a href=&#34;http://blog.nu42.com/2014/08/filewhich-comes-with-its-own-multiwhich.html&#34;&gt;blogged&lt;/a&gt; recommending &lt;a href=&#34;https://metacpan.org/pod/File::Which&#34;&gt;File::Which&lt;/a&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;async-concurrency&#34;&gt;Async &amp;amp; Concurrency&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Event::Distributor&#34;&gt;Event::Distributor&lt;/a&gt; implements an in-process (synchronous) pub / sub model - it&amp;rsquo;s early days but looks interesting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Future&#34;&gt;AnyEvent::Future&lt;/a&gt; provides a future object for concurrent programming with the popular AnyEvent module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bloom::Scalable&#34;&gt;Bloom::Scalable&lt;/a&gt; is a scalable bloom filter implementation - a probabilistic dataset that saves space&lt;/li&gt;
&lt;li&gt;Search complex Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/Data::Seek&#34;&gt;Data::Seek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working with non UTC datetimes? &lt;a href=&#34;https://metacpan.org/pod/DateTimeX::Period&#34;&gt;DateTimeX::Period&lt;/a&gt; provides a safe cross-timezone implementation of DateTime methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Variable::Disposition&#34;&gt;Variable::Disposition&lt;/a&gt; helps you forcibly dispose of variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-system-administration&#34;&gt;Config &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IOD&#34;&gt;IOD&lt;/a&gt; (&amp;ldquo;INI On Drugs&amp;rdquo;) is a new configuration file format inspired by INI&lt;/li&gt;
&lt;li&gt;Alternatively you prefer to use Perl hashrefs as config files with &lt;a href=&#34;https://metacpan.org/pod/Config::FromHash&#34;&gt;Config::FromHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For a bare-bones fork interface, have a look at &lt;a href=&#34;https://metacpan.org/pod/IPC::Open2::Simple&#34;&gt;IPC::Open2::Simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Happy CPAN day! &lt;a href=&#34;https://metacpan.org/pod/Acme::Cake&#34;&gt;Acme::Cake&lt;/a&gt; returns a jpeg of a CPAN cake&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::FrogJump&#34;&gt;Games::FrogJump&lt;/a&gt; is a cool ASCII terminal game. A bit primitive but it shows what&amp;rsquo;s possible&lt;/li&gt;
&lt;li&gt;On the other hand, &lt;a href=&#34;https://metacpan.org/pod/Games::Hangman&#34;&gt;Games::Hangman&lt;/a&gt;is incredibly addictive and feature complete&lt;/li&gt;
&lt;li&gt;If you need a list of English proverbs and phrases check out &lt;a href=&#34;https://metacpan.org/pod/Games::Word::Phraselist::Proverb::TWW&#34;&gt;Games::Word::Phraselist::Proverb::TWW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Big developments on the hardware front: &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; provides a standardized interface for hardware devices including Arduino, PCDuino and Raspberry Pi&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate&#34;&gt;Device::BusPirate&lt;/a&gt; provides an interface for the Bus Pirate hardware electronics debugging device&lt;/li&gt;
&lt;li&gt;How cool is this: &lt;a href=&#34;https://metacpan.org/pod/Device::Gembird&#34;&gt;Device::Gembird&lt;/a&gt; let&amp;rsquo;s you control the voltage on a Gembird surge protection device with Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Security&#34;&gt;Unicode::Security&lt;/a&gt; provides interesting features including a function to determine if two Unicode strings are visually confusable&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Block&#34;&gt;Unicode::Block&lt;/a&gt; enables you to take a character and iterate through the entire block of Unicode characters to which it belongs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;object-oriented&#34;&gt;Object Oriented&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gloom&#34;&gt;Gloom&lt;/a&gt; is a dependency-free new OO library released a couple of months back&lt;/li&gt;
&lt;li&gt;Anonymous objects are an intriguing idea: &lt;a href=&#34;https://metacpan.org/pod/Object::Anon&#34;&gt;Object::Anon&lt;/a&gt; is an embryonic implementation, the author is looking for feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-exceptions&#34;&gt;Testing &amp;amp; Exceptions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently get the test coverage results of a CPAN distribution with &lt;a href=&#34;https://metacpan.org/pod/CPAN::Cover::Results&#34;&gt;CPAN::Cover::Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure your Pod coverage testing with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable&#34;&gt;Test::Pod::Coverage::Configurable&lt;/a&gt; a new Dist::Zilla plugin&lt;/li&gt;
&lt;li&gt;Throw structured exception objects with the cleverly-named &lt;a href=&#34;https://metacpan.org/pod/Throw::Back&#34;&gt;Throw::Back&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Update: reference to App::multiwhich updated following correspondence from the author. 2014-09-05&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s Wrong with sort and How to Fix It</title>
      <link>http://localhost:1313/pub/2011/08/whats-wrong-with-sort-and-how-to-fix-it.html/</link>
      <pubDate>Wed, 31 Aug 2011 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/08/whats-wrong-with-sort-and-how-to-fix-it.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;By now, you may have read &lt;a href=&#34;http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129&#34;&gt;Considerations on Using Unicode Properly in Modern Perl Applications&lt;/a&gt;. Still think doing things correctly is easy? Tom Christiansen demonstrates that even sorting can be trickier than you think.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The following is an excerpt from the draft manuscript of &lt;em&gt;Programming Perl&lt;/em&gt;, 4ᵗʰ edition&lt;/p&gt;

&lt;p&gt;Calling &lt;code&gt;sort&lt;/code&gt; without a comparison function is quite often the wrong thing to do, even on plain text. That&amp;rsquo;s because if you use a bare sort, you can get really strange results. It&amp;rsquo;s not just Perl either: almost all programming languages work this way, even the shell command. You might be surprised to find that with this sort of nonsense sort, ‹B› comes before ‹a› not after it, ‹é› comes before ‹ｄ›, and ‹ﬀ› comes after ‹zz›. There&amp;rsquo;s no end to such silliness, either; see the default sort tables at the end of this article to see what I mean.&lt;/p&gt;

&lt;p&gt;There are situations when a bare &lt;code&gt;sort&lt;/code&gt; is appropriate, but fewer than you think. One scenario is when every string you&amp;rsquo;re sorting contains nothing but the 26 lowercase (or uppercase, but not both) Latin letters from ‹a-z›, without any whitespace or punctuation.&lt;/p&gt;

&lt;p&gt;Another occasion when a simple, unadorned &lt;code&gt;sort&lt;/code&gt; is appropriate is when you have no other goal but to iterate in an order that is merely repeatable, even if that order should happen to be completely arbitrary. In other words, yes, it&amp;rsquo;s garbage, but it&amp;rsquo;s the same garbage this time as it was last time. That&amp;rsquo;s because the default &lt;code&gt;sort&lt;/code&gt; resorts to an unmediated &lt;code&gt;cmp&lt;/code&gt; operator, which has the &amp;ldquo;predictable garbage&amp;rdquo; characteristics I just mentioned.&lt;/p&gt;

&lt;p&gt;The last situation is much less frequent than the first two. It requires that the things you&amp;rsquo;re sorting be special‐purpose, dedicated binary keys whose bit sequences have with excruciating care been arranged to sort in some prescribed fashion. This is also the strategy for any reasonable use of the &lt;code&gt;cmp&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&#34;so-what-s-wrong-with-sort-anyway&#34;&gt;&lt;strong&gt;So what&amp;rsquo;s wrong with &lt;code&gt;sort&lt;/code&gt; anyway?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I know, I know. I can hear everyone saying, &amp;ldquo;But it&amp;rsquo;s called &lt;code&gt;sort&lt;/code&gt;, so how could that ever be wrong?&amp;rdquo; Sure it&amp;rsquo;s called &lt;code&gt;sort&lt;/code&gt;, but you still have to know how to use it to get useful results out. &lt;strong&gt;&lt;em&gt;Probably the most surprising thing about &lt;code&gt;sort&lt;/code&gt; is that it does not by default do an alphabetic, an alphanumeric, or a numeric sort.&lt;/em&gt;&lt;/strong&gt; What it actually does is something else altogether, and that something else is of surprisingly limited usefulness.&lt;/p&gt;

&lt;p&gt;Imagine you have an array of records. It does you virtually no good to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@sorted_recs = sort @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because Perl&amp;rsquo;s &lt;code&gt;cmp&lt;/code&gt; operator does only a bit comparison not an alphabetic one, it does nearly as little good to write your record sort this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@srecs = sort {
    $b-&amp;gt;{AGE}      &amp;lt;=&amp;gt;  $b-&amp;gt;{AGE}
                   ||
    $a-&amp;gt;{SURNAME}  cmp  $b-&amp;gt;{SURNAME}
} @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that that &lt;code&gt;cmp&lt;/code&gt; for the record&amp;rsquo;s &lt;code&gt;SURNAME&lt;/code&gt; field is &lt;em&gt;not&lt;/em&gt; an alphabetic comparison. It&amp;rsquo;s merely a code point comparison. That means it works like C&amp;rsquo;s &lt;code&gt;strcmp&lt;/code&gt; function or Java&amp;rsquo;s &lt;code&gt;String.compareTo&lt;/code&gt; method. Although commonly referred to as a &amp;ldquo;lexicographic&amp;rdquo; comparison, this is a gross misnomer: it&amp;rsquo;s about as far away from the way &lt;em&gt;real&lt;/em&gt; lexicographers sort dictionary entries as you can get without flipping a coin.&lt;/p&gt;

&lt;p&gt;Fortunately, you don&amp;rsquo;t have to come up with your own algorithm for dictionary sorting, because Perl provides a standard class to do this for you: &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt;. Don&amp;rsquo;t let the name throw you, because while it was first invented for Unicode, it works great on regular ASCII text, too, and does a better job at making lexicographers happy than a plain old &lt;code&gt;sort&lt;/code&gt; ever manages.&lt;/p&gt;

&lt;p&gt;If you have code that purports to sort text that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@sorted_lines = sort @lines;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then all you have to get a dictionary sort is write instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate;
@sorted_lines = Unicode::Collate::-&amp;gt;new-&amp;gt;sort(@lines);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For structured records, like those with ages and surnames in them, you have to be a bit fancier. One way to fix it would be to use the class&amp;rsquo;s own &lt;code&gt;cmp&lt;/code&gt; operator instead of the built‐in one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate;
my $collator = Unicode::Collate::-&amp;gt;new();
@srecs = sort {
    $b-&amp;gt;{AGE}  &amp;lt;=&amp;gt;  $b-&amp;gt;{AGE}
          ||
    $collator-&amp;gt;cmp( $a-&amp;gt;{SURNAME}, $b-&amp;gt;{SURNAME} )
} @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, that makes a fairly expensive method call for every possible comparison. Because Perl&amp;rsquo;s adaptive merge sort algorithm usually runs in &lt;em&gt;O(n&lt;/em&gt; · log &lt;em&gt;n)&lt;/em&gt; time given &lt;em&gt;n&lt;/em&gt; items, and because each comparison requires two different computed keys, that can be a lot of duplicate effort. Our sorting class therefore provide a convenient &lt;code&gt;getSortKey&lt;/code&gt; method that calculates a special binary key which you can cache and later pass to the normal &lt;code&gt;cmp&lt;/code&gt; operator on your own. This trick lets you use &lt;code&gt;cmp&lt;/code&gt; yet get a truly alphabetic sort out of it for a change.&lt;/p&gt;

&lt;p&gt;Here is a simple but sufficient example of how to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate;
my $collator = Unicode::Collate::-&amp;gt;new();

# first calculate the magic sort key for each text field, and cache it
for my $rec (@recs) {
    $rec-&amp;gt;{SURNAME_key} = $collator-&amp;gt;getSortKey( $rec-&amp;gt;{SURNAME} );
} 

# now sort the records as before, but for the surname field,
# use the cached sort key instead
@srecs = sort {
    $b-&amp;gt;{AGE}          &amp;lt;=&amp;gt;  $b-&amp;gt;{AGE}
                      ||
    $a-&amp;gt;{SURNAME_key}  cmp  $b-&amp;gt;{SURNAME_key}
} @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s what I meant about very carefully preparing a mediated sort key that contains the precomputed binary key.&lt;/p&gt;

&lt;h3 id=&#34;english-card-catalogue-sorts&#34;&gt;&lt;strong&gt;English Card Catalogue Sorts&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The simple code just demonstrated assumes you want to sort names the same way you do regular text. That isn&amp;rsquo;t a good assumption, however. Many countries, languages, institutions, and sometimes even librarians have their own notions about how a card catalogue or a phonebook ought to be sorted.&lt;/p&gt;

&lt;p&gt;For example, in the English language, surnames with Scottish patronymics starting with ‹Mc› or ‹Mac›, like &lt;em&gt;MacKinley&lt;/em&gt; and &lt;em&gt;McKinley&lt;/em&gt;, not only count as completely identical synonyms for sorting purposes, they go before any other surname that begins with ‹M›, and so precede surnames like &lt;em&gt;Mables&lt;/em&gt; or &lt;em&gt;Machado&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Yes, really.&lt;/p&gt;

&lt;p&gt;That means that the following names are sorted correctly &amp;ndash; for English:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Lewis, C.S.
McKinley, Bill
MacKinley, Ron
Mables, Martha
Machado, José
Macon, Bacon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it&amp;rsquo;s true. Check out your local large English‐language bookseller or library &amp;ndash; presuming you can find one. If you do, best make sure to blow the dust off first.&lt;/p&gt;

&lt;h3 id=&#34;sorting-spanish-names&#34;&gt;&lt;strong&gt;Sorting Spanish Names&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a good thing those names follow English rules for sorting names. If this were Spanish, we would have to deal with double‐barrelled surnames, where the patronym sorts before the matronym, which in turn sorts before any given names. That means that if Señor Machado&amp;rsquo;s full name were, like the poet&amp;rsquo;s, &lt;em&gt;Antonio Cipriano José María y Francisco de Santa Ana Machado y Ruiz&lt;/em&gt;, then you would have to sort him with the other &lt;em&gt;Machados&lt;/em&gt; but then consider &lt;em&gt;Ruiz&lt;/em&gt; before &lt;em&gt;Antonio&lt;/em&gt; if there were any other &lt;em&gt;Machados&lt;/em&gt;. Similarly, the poet &lt;em&gt;Federico del Sagrado Corazón de Jesús García Lorca&lt;/em&gt; sorts before the writer &lt;em&gt;Gabriel José de la Concordia García Márquez&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, if your records are not full multifield hashes but only simple text that don&amp;rsquo;t happen to be surnames, your task is a lot simpler, since now all you have to is get the &lt;code&gt;cmp&lt;/code&gt; operator to behave sensibly. That you can do easily enough this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate;
@sorted_text = Unicode::Collate::-&amp;gt;new-&amp;gt;sort(@text);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sorting-text-not-binary&#34;&gt;&lt;strong&gt;Sorting Text, Not Binary&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Imagine you had this list of German‐language authors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@germans = qw{
    Böll
    Born
    Böhme
    Bodmer
    Brandis
    Böttcher
    Borchert
    Bobrowski
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you just sorted them with an unmediated &lt;code&gt;sort&lt;/code&gt;operator, you would get this utter nonsense:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bobrowski
Bodmer
Borchert
Born
Brandis
Brant
Böhme
Böll
Böttcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or maybe this equally nonsensical answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bobrowski
Bodmer
Borchert
Born
Böll
Brandis
Brant
Böhme
Böttcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or even this still completely nonsensical answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bobrowski
Bodmer
Borchert
Born
Böhme
Böll
Brandis
Brant
Böttcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crucial point to all that is that &lt;em&gt;it&amp;rsquo;s text not binary&lt;/em&gt;, so not only can you never judge what its bit patterns hold just by eyeballing it, more importantly, it has special rules to make it sort alphabetically (some might say sanely), an ordering no naïve code‐point sort will never come even close to getting right, especially on Unicode.&lt;/p&gt;

&lt;p&gt;The correct ordering is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bobrowski
Bodmer
Böhme
Böll
Borchert
Born
Böttcher
Brandis
Brant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is precisely what&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate;
@sorted_germans = Unicode::Collate::-&amp;gt;new-&amp;gt;sort(@german_names);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gives you: a correctly sorted list of those Germans&amp;rsquo; names.&lt;/p&gt;

&lt;h3 id=&#34;sorting-german-names&#34;&gt;&lt;strong&gt;Sorting German Names&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Hold on, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correct in what language?&lt;/strong&gt; In English, yes, the order given is now correct. But considering that these authors wrote in the German language, it is quite conceivable that you should be following the rules for ordering German names &lt;strong&gt;in German&lt;/strong&gt;, not in English. That produces this ordering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bobrowski
Bodmer
Böhme
Böll
Böttcher
Borchert
Born
Brandis
Brant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How come &lt;em&gt;Böttcher&lt;/em&gt; now came before &lt;em&gt;Borchert&lt;/em&gt;? Because &lt;em&gt;Böttcher&lt;/em&gt; is supposed to be the same as &lt;em&gt;Boettcher&lt;/em&gt;. In a German phonebook or other German list of German names, things like ‹ö› and ‹oe› are considered synonyms, which is not at all how it works in English. To get the German phonebook sort, you merely have to modify your constructor this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Unicode::Collate::Locale;
@sorted_germans = Unicode::Collate::Locale::
                      -&amp;gt;new(locale =&amp;gt; &amp;quot;de_phonebook&amp;quot;)
                      -&amp;gt;sort(@german_names);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t this fun?&lt;/p&gt;

&lt;p&gt;Be glad you&amp;rsquo;re not sorting names. Sorting names is hard.&lt;/p&gt;

&lt;h3 id=&#34;default-sort-tables&#34;&gt;&lt;strong&gt;Default Sort Tables&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Here are most of the Latin letters, ordered using the default &lt;code&gt;sort&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j 
k l m n o p q r s t u v w x y z ª º À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ 
Ò Ó Ô Õ Ö Ø Ù Ú Û Ü Ý Þ ß à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö 
ø ù ú û ü ý þ ÿ Ā ā Ă ă Ą ą Ć ć Ĉ ĉ Ċ ċ Č č Ď ď Đ đ Ē ē Ĕ ĕ Ė ė Ę ę Ě ě 
Ĝ ĝ Ğ ğ Ġ ġ Ģ ģ Ĥ ĥ Ħ ħ Ĩ ĩ Ī ī Ĭ ĭ Į į İ ı Ĳ ĳ Ĵ ĵ Ķ ķ ĸ Ĺ ĺ Ļ ļ Ľ ľ Ŀ 
ŀ Ł ł Ń ń Ņ ņ Ň ň Ŋ ŋ Ō ō Ŏ ŏ Ő ő Œ œ Ŕ ŕ Ŗ ŗ Ř ř Ś ś Ŝ ŝ Ş ş Š š Ţ ţ Ť 
ť Ŧ ŧ Ũ ũ Ū ū Ŭ ŭ Ů ů Ű ű Ų ų Ŵ ŵ Ŷ ŷ Ÿ Ź ź Ż ż Ž ž ſ ƀ Ɓ Ƃ ƃ Ƈ ƈ Ɖ Ɗ Ƌ 
ƌ ƍ Ǝ Ə Ɛ Ƒ ƒ Ɠ Ɣ ƕ Ɩ Ɨ Ƙ ƙ ƚ ƛ Ɯ Ɲ ƞ Ƥ ƥ Ʀ ƫ Ƭ ƭ Ʈ Ư ư Ʊ Ʋ Ƴ ƴ Ƶ ƶ Ʒ Ƹ 
ƹ ƺ ƾ ƿ Ǆ ǅ ǆ Ǉ ǈ ǉ Ǌ ǋ ǌ Ǎ ǎ Ǐ ǐ Ǒ ǒ Ǔ ǔ Ǖ ǖ Ǘ ǘ Ǚ ǚ Ǜ ǜ ǝ Ǟ ǟ Ǡ ǡ Ǣ ǣ 
Ǥ ǥ Ǧ ǧ Ǩ ǩ Ǫ ǫ Ǭ ǭ Ǯ ǯ ǰ Ǳ ǲ ǳ Ǵ ǵ Ƿ Ǹ ǹ Ǻ ǻ Ǽ ǽ Ǿ ǿ Ȁ ȁ Ȃ ȃ Ȅ ȅ Ȇ ȇ Ȉ 
ȉ Ȋ ȋ Ȍ ȍ Ȏ ȏ Ȑ ȑ Ȓ ȓ Ȕ ȕ Ȗ ȗ Ș ș Ț ț Ȝ ȝ Ȟ ȟ Ƞ ȡ Ȥ ȥ Ȧ ȧ Ȩ ȩ Ȫ ȫ Ȭ ȭ Ȯ 
ȯ Ȱ ȱ Ȳ ȳ ȴ ȵ ȶ ȷ Ⱥ Ȼ ȼ Ƚ Ⱦ ɐ ɑ ɒ ɓ ɕ ɖ ɗ ɘ ə ɚ ɛ ɜ ɝ ɞ ɟ ɠ ɡ ɢ ɣ ɤ ɥ ɦ 
ɧ ɨ ɩ ɪ ɫ ɬ ɭ ɮ ɯ ɰ ɱ ɲ ɳ ɴ ɶ ɹ ɺ ɻ ɼ ɽ ɾ ɿ ʀ ʁ ʂ ʃ ʄ ʅ ʆ ʇ ʈ ʉ ʊ ʋ ʌ ʍ 
ʎ ʏ ʐ ʑ ʒ ʓ ʙ ʚ ʛ ʜ ʝ ʞ ʟ ʠ ʣ ʤ ʥ ʦ ʧ ʨ ʩ ʪ ʫ ˡ ˢ ˣ ᴀ ᴁ ᴂ ᴃ ᴄ ᴅ ᴆ ᴇ ᴈ ᴉ 
ᴊ ᴋ ᴌ ᴍ ᴎ ᴏ ᴑ ᴓ ᴔ ᴘ ᴙ ᴚ ᴛ ᴜ ᴝ ᴞ ᴟ ᴠ ᴡ ᴢ ᴣ ᴬ ᴭ ᴮ ᴯ ᴰ ᴱ ᴲ ᴳ ᴴ ᴵ ᴶ ᴷ ᴸ ᴹ ᴺ 
ᴻ ᴼ ᴾ ᴿ ᵀ ᵁ ᵂ ᵃ ᵄ ᵅ ᵆ ᵇ ᵈ ᵉ ᵊ ᵋ ᵌ ᵍ ᵎ ᵏ ᵐ ᵑ ᵒ ᵖ ᵗ ᵘ ᵙ ᵚ ᵛ ᵢ ᵣ ᵤ ᵥ ᵫ ᵬ ᵭ 
ᵮ ᵯ ᵰ ᵱ ᵲ ᵳ ᵴ ᵵ ᵶ Ḁ ḁ Ḃ ḃ Ḅ ḅ Ḇ ḇ Ḉ ḉ Ḋ ḋ Ḍ ḍ Ḏ ḏ Ḑ ḑ Ḓ ḓ Ḕ ḕ Ḗ ḗ Ḙ ḙ Ḛ 
ḛ Ḝ ḝ Ḟ ḟ Ḡ ḡ Ḣ ḣ Ḥ ḥ Ḧ ḧ Ḩ ḩ Ḫ ḫ Ḭ ḭ Ḯ ḯ Ḱ ḱ Ḳ ḳ Ḵ ḵ Ḷ ḷ Ḹ ḹ Ḻ ḻ Ḽ ḽ Ḿ 
ḿ Ṁ ṁ Ṃ ṃ Ṅ ṅ Ṇ ṇ Ṉ ṉ Ṋ ṋ Ṍ ṍ Ṏ ṏ Ṑ ṑ Ṓ ṓ Ṕ ṕ Ṗ ṗ Ṙ ṙ Ṛ ṛ Ṝ ṝ Ṟ ṟ Ṡ ṡ Ṣ 
ṣ Ṥ ṥ Ṧ ṧ Ṩ ṩ Ṫ ṫ Ṭ ṭ Ṯ ṯ Ṱ ṱ Ṳ ṳ Ṵ ṵ Ṷ ṷ Ṹ ṹ Ṻ ṻ Ṽ ṽ Ṿ ṿ Ẁ ẁ Ẃ ẃ Ẅ ẅ Ẇ 
ẇ Ẉ ẉ Ẋ ẋ Ẍ ẍ Ẏ ẏ Ẑ ẑ Ẓ ẓ Ẕ ẕ ẖ ẗ ẘ ẙ ẚ ẛ ẞ ẟ Ạ ạ Ả ả Ấ ấ Ầ ầ Ẩ ẩ Ẫ ẫ Ậ 
ậ Ắ ắ Ằ ằ Ẳ ẳ Ẵ ẵ Ặ ặ Ẹ ẹ Ẻ ẻ Ẽ ẽ Ế ế Ề ề Ể ể Ễ ễ Ệ ệ Ỉ ỉ Ị ị Ọ ọ Ỏ ỏ Ố 
ố Ồ ồ Ổ ổ Ỗ ỗ Ộ ộ Ớ ớ Ờ ờ Ở ở Ỡ ỡ Ợ ợ Ụ ụ Ủ ủ Ứ ứ Ừ ừ Ử ử Ữ ữ Ự ự Ỳ ỳ Ỵ 
ỵ Ỷ ỷ Ỹ ỹ K Å Ⅎ ⅎ Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ Ⅼ Ⅽ Ⅾ Ⅿ ⅰ ⅱ ⅲ ⅳ ⅴ 
ⅵ ⅶ ⅷ ⅸ ⅹ ⅺ ⅻ ⅼ ⅽ ⅾ ⅿ ﬀ ﬁ ﬂ ﬃ ﬄ ﬅ ﬆ Ａ Ｂ Ｃ Ｄ Ｅ Ｆ Ｇ Ｈ Ｉ
Ｊ Ｋ Ｌ Ｍ Ｎ Ｏ Ｐ Ｑ Ｒ Ｓ Ｔ Ｕ Ｖ Ｗ Ｘ Ｙ Ｚ ａ ｂ ｃ ｄ ｅ ｆ ｇ ｈ ｉ
ｊ ｋ ｌ ｍ ｎ ｏ ｐ ｑ ｒ ｓ ｔ ｕ ｖ ｗ ｘ ｙ ｚ
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, those letters are scattered all over the place. Sure, it&amp;rsquo;s not completely random, but it&amp;rsquo;s not useful either, because it is full of arbitrary placement that makes no alphabetical sense. That&amp;rsquo;s because it is not an alphabetic sort at all. However, with the special kind of sort I&amp;rsquo;ve just shown you above, the ones that call the &lt;code&gt;sort&lt;/code&gt; method from the &lt;code&gt;Unicode::Collate&lt;/code&gt; class, you do get an alphabetic sort. Using that method, the Latin letters I just showed you now come out in alphabetical order, which is like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;a ａ A Ａ ª ᵃ ᴬ á Á à À ă Ă ắ Ắ ằ Ằ ẵ Ẵ ẳ Ẳ â Â ấ Ấ ầ Ầ ẫ Ẫ ẩ Ẩ ǎ Ǎ å Å 
Å ǻ Ǻ ä Ä ǟ Ǟ ã Ã ȧ Ȧ ǡ Ǡ ą Ą ā Ā ả Ả ȁ Ȁ ȃ Ȃ ạ Ạ ặ Ặ ậ Ậ ḁ Ḁ æ Æ ᴭ ǽ Ǽ 
ǣ Ǣ ẚ ᴀ Ⱥ ᴁ ᴂ ᵆ ɐ ᵄ ɑ ᵅ ɒ b ｂ B Ｂ ᵇ ᴮ ḃ Ḃ ḅ Ḅ ḇ Ḇ ʙ ƀ ᴯ ᴃ ᵬ ɓ Ɓ ƃ Ƃ c 
ｃ ⅽ C Ｃ Ⅽ ć Ć ĉ Ĉ č Č ċ Ċ ç Ç ḉ Ḉ ᴄ ȼ Ȼ ƈ Ƈ ɕ d ｄ ⅾ D Ｄ Ⅾ ᵈ ᴰ ď Ď ḋ 
Ḋ ḑ Ḑ ḍ Ḍ ḓ Ḓ ḏ Ḏ đ Đ ð Ð ǳ ʣ ǲ Ǳ ǆ ǅ Ǆ ʥ ʤ ᴅ ᴆ ᵭ ɖ Ɖ ɗ Ɗ ƌ Ƌ ȡ ẟ e ｅ E 
Ｅ ᵉ ᴱ é É è È ĕ Ĕ ê Ê ế Ế ề Ề ễ Ễ ể Ể ě Ě ë Ë ẽ Ẽ ė Ė ȩ Ȩ ḝ Ḝ ę Ę ē Ē ḗ 
Ḗ ḕ Ḕ ẻ Ẻ ȅ Ȅ ȇ Ȇ ẹ Ẹ ệ Ệ ḙ Ḙ ḛ Ḛ ᴇ ǝ Ǝ ᴲ ə Ə ᵊ ɛ Ɛ ᵋ ɘ ɚ ɜ ᴈ ᵌ ɝ ɞ ʚ ɤ 
f ｆ F Ｆ ḟ Ḟ ﬀ ﬃ ﬄ ﬁ ﬂ ʩ ᵮ ƒ Ƒ ⅎ Ⅎ g ｇ G Ｇ ᵍ ᴳ ǵ Ǵ ğ Ğ ĝ Ĝ ǧ Ǧ ġ Ġ ģ 
Ģ ḡ Ḡ ɡ ɢ ǥ Ǥ ɠ Ɠ ʛ ɣ Ɣ h ｈ H Ｈ ᴴ ĥ Ĥ ȟ Ȟ ḧ Ḧ ḣ Ḣ ḩ Ḩ ḥ Ḥ ḫ Ḫ ẖ ħ Ħ ʜ 
ƕ ɦ ɧ i ｉ ⅰ I Ｉ Ⅰ ᵢ ᴵ í Í ì Ì ĭ Ĭ î Î ǐ Ǐ ï Ï ḯ Ḯ ĩ Ĩ İ į Į ī Ī ỉ Ỉ ȉ 
Ȉ ȋ Ȋ ị Ị ḭ Ḭ ⅱ Ⅱ ⅲ Ⅲ ĳ Ĳ ⅳ Ⅳ ⅸ Ⅸ ı ɪ ᴉ ᵎ ɨ Ɨ ɩ Ɩ j ｊ J Ｊ ᴶ ĵ Ĵ ǰ ȷ ᴊ 
ʝ ɟ ʄ k ｋ K K Ｋ ᵏ ᴷ ḱ Ḱ ǩ Ǩ ķ Ķ ḳ Ḳ ḵ Ḵ ᴋ ƙ Ƙ ʞ l ｌ ⅼ L Ｌ Ⅼ ˡ ᴸ ĺ Ĺ 
ľ Ľ ļ Ļ ḷ Ḷ ḹ Ḹ ḽ Ḽ ḻ Ḻ ł Ł ŀ Ŀ ǉ ǈ Ǉ ʪ ʫ ʟ ᴌ ƚ Ƚ ɫ ɬ ɭ ȴ ɮ ƛ ʎ m ｍ ⅿ M 
Ｍ Ⅿ ᵐ ᴹ ḿ Ḿ ṁ Ṁ ṃ Ṃ ᴍ ᵯ ɱ n ｎ N Ｎ ᴺ ń Ń ǹ Ǹ ň Ň ñ Ñ ṅ Ṅ ņ Ņ ṇ Ṇ ṋ Ṋ ṉ 
Ṉ ǌ ǋ Ǌ ɴ ᴻ ᴎ ᵰ ɲ Ɲ ƞ Ƞ ɳ ȵ ŋ Ŋ ᵑ o ｏ O Ｏ º ᵒ ᴼ ó Ó ò Ò ŏ Ŏ ô Ô ố Ố ồ 
Ồ ỗ Ỗ ổ Ổ ǒ Ǒ ö Ö ȫ Ȫ ő Ő õ Õ ṍ Ṍ ṏ Ṏ ȭ Ȭ ȯ Ȯ ȱ Ȱ ø Ø ǿ Ǿ ǫ Ǫ ǭ Ǭ ō Ō ṓ 
Ṓ ṑ Ṑ ỏ Ỏ ȍ Ȍ ȏ Ȏ ớ Ớ ờ Ờ ỡ Ỡ ở Ở ợ Ợ ọ Ọ ộ Ộ œ Œ ᴏ ᴑ ɶ ᴔ ᴓ p ｐ P Ｐ ᵖ 
ᴾ ṕ Ṕ ṗ Ṗ ᴘ ᵱ ƥ Ƥ q ｑ Q Ｑ ʠ ĸ r ｒ R Ｒ ᵣ ᴿ ŕ Ŕ ř Ř ṙ Ṙ ŗ Ŗ ȑ Ȑ ȓ Ȓ ṛ 
Ṛ ṝ Ṝ ṟ Ṟ ʀ Ʀ ᴙ ᵲ ɹ ᴚ ɺ ɻ ɼ ɽ ɾ ᵳ ɿ ʁ s ｓ S Ｓ ˢ ś Ś ṥ Ṥ ŝ Ŝ š Š ṧ Ṧ ṡ 
Ṡ ş Ş ṣ Ṣ ṩ Ṩ ș Ș ſ ẛ ß ẞ ﬆ ﬅ ᵴ ʂ ʃ ʅ ʆ t ｔ T Ｔ ᵗ ᵀ ť Ť ẗ ṫ Ṫ ţ Ţ ṭ Ṭ 
ț Ț ṱ Ṱ ṯ Ṯ ʨ ƾ ʦ ʧ ᴛ ŧ Ŧ Ⱦ ᵵ ƫ ƭ Ƭ ʈ Ʈ ȶ ʇ u ｕ U Ｕ ᵘ ᵤ ᵁ ú Ú ù Ù ŭ Ŭ 
û Û ǔ Ǔ ů Ů ü Ü ǘ Ǘ ǜ Ǜ ǚ Ǚ ǖ Ǖ ű Ű ũ Ũ ṹ Ṹ ų Ų ū Ū ṻ Ṻ ủ Ủ ȕ Ȕ ȗ Ȗ ư Ư 
ứ Ứ ừ Ừ ữ Ữ ử Ử ự Ự ụ Ụ ṳ Ṳ ṷ Ṷ ṵ Ṵ ᴜ ᴝ ᵙ ᴞ ᵫ ʉ ɥ ɯ Ɯ ᵚ ᴟ ɰ ʊ Ʊ v ｖ ⅴ V 
Ｖ Ⅴ ᵛ ᵥ ṽ Ṽ ṿ Ṿ ⅵ Ⅵ ⅶ Ⅶ ⅷ Ⅷ ᴠ ʋ Ʋ ʌ w ｗ W Ｗ ᵂ ẃ Ẃ ẁ Ẁ ŵ Ŵ ẘ ẅ Ẅ ẇ Ẇ ẉ 
Ẉ ᴡ ʍ x ｘ ⅹ X Ｘ Ⅹ ˣ ẍ Ẍ ẋ Ẋ ⅺ Ⅺ ⅻ Ⅻ y ｙ Y Ｙ ý Ý ỳ Ỳ ŷ Ŷ ẙ ÿ Ÿ ỹ Ỹ ẏ 
Ẏ ȳ Ȳ ỷ Ỷ ỵ Ỵ ʏ ƴ Ƴ z ｚ Z Ｚ ź Ź ẑ Ẑ ž Ž ż Ż ẓ Ẓ ẕ Ẕ ƍ ᴢ ƶ Ƶ ᵶ ȥ Ȥ ʐ ʑ 
ʒ Ʒ ǯ Ǯ ᴣ ƹ Ƹ ƺ ʓ ȝ Ȝ þ Þ ƿ Ƿ
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isn&amp;rsquo;t that much nicer?&lt;/p&gt;

&lt;h3 id=&#34;romani-ite-domum&#34;&gt;&lt;strong&gt;Romani Ite Domum&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In case you&amp;rsquo;re wondering what that last row of distinctly un‐Roman Latin letters might possibly be, they&amp;rsquo;re called respectively &lt;a href=&#34;http://en.wikipedia.org/wiki/Ezh_(letter)&#34;&gt;&lt;em&gt;ezh&lt;/em&gt;&lt;/a&gt; ʒ, &lt;a href=&#34;http://en.wikipedia.org/wiki/Yogh&#34;&gt;&lt;em&gt;yogh&lt;/em&gt;&lt;/a&gt; ȝ, &lt;a href=&#34;http://en.wikipedia.org/wiki/Thorn_(letter)&#34;&gt;&lt;em&gt;thorn&lt;/em&gt;&lt;/a&gt; þ, and &lt;a href=&#34;http://en.wikipedia.org/wiki/Wynn&#34;&gt;&lt;em&gt;wynn&lt;/em&gt;&lt;/a&gt; ƿ. They had to go somewhere, so they ended up getting stuck after ‹z›&lt;/p&gt;

&lt;p&gt;Some are still used in certain non‐English (but still Latin) alphabets today, such as Icelandic, and even though you probably won&amp;rsquo;t bump into them in contemporary English texts, you might see some if you&amp;rsquo;re reading the original texts of famous medieval English poems like &lt;em&gt;Beowulf&lt;/em&gt;, &lt;em&gt;Sir Gawain and the Green Knight&lt;/em&gt;, or &lt;em&gt;Brut&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The last of those, &lt;em&gt;Brut&lt;/em&gt;, was written by a fellow named &lt;em&gt;Laȝamon&lt;/em&gt;, a name whose third letter is a yogh. Famous though he was, I wouldn&amp;rsquo;t suggest changing your name to ‹Laȝamon› in his honor, as I doubt the phone company would be amused.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s New in 5.6.0.</title>
      <link>http://localhost:1313/pub/2000/04/whatsnew.html/</link>
      <pubDate>Tue, 18 Apr 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/04/whatsnew.html/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;
  • &lt;a href=&#34;#Unicode_Perl_goes_internationa&#34;&gt;Unicode - Perl goes&lt;/a&gt;
    &lt;a href=&#34;#Unicode_Perl_goes_internationa&#34;&gt;international!&lt;/a&gt;
  • &lt;a href=&#34;#Better_Building&#34;&gt;Better Building&lt;/a&gt;
  • &lt;a href=&#34;#Improved_Compiler&#34;&gt;Improved Compiler&lt;/a&gt;
  • &lt;a href=&#34;#Version_Tuples&#34;&gt;Version Tuples&lt;/a&gt;
  • &lt;a href=&#34;#Lexical_Warnings&#34;&gt;Lexical Warnings&lt;/a&gt;
  • &lt;a href=&#34;#Lvaluable_Subroutines&#34;&gt;Lvaluable Subroutines&lt;/a&gt;
  • &lt;a href=&#34;#Weak_References&#34;&gt;Weak References&lt;/a&gt;
  • &lt;a href=&#34;#POSIX_Character_Classes&#34;&gt;POSIX Character&lt;/a&gt;
    &lt;a href=&#34;#POSIX_Character_Classes&#34;&gt;Classes&lt;/a&gt;
  • &lt;a href=&#34;#Miscellaneous_Bits&#34;&gt;Miscellaneous Bits&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;`Darn it, who spiked my coffee with water?!&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, it&amp;rsquo;s been two years in the making. Everyone&amp;rsquo;s favourite Swiss Army Chainsaw is coming up to thirteen years old now, and would be about to show the world a brand new face for the new millennium if that didn&amp;rsquo;t start next year instead of this one. If, like me, you remember the day that the combined might of Malcolm and Sarathy produced the last major release of Perl, you might be wondering what&amp;rsquo;s happened since then. Allow me, then, to present to you the wonderful world of 5.6.0!&lt;/p&gt;

&lt;h3 id=&#34;span-id-unicode-perl-goes-internationa-unicode-perl-goes-international-span&#34;&gt;&lt;span id=&#34;Unicode_Perl_goes_internationa&#34;&gt;Unicode - Perl goes international!&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;`It&amp;rsquo;s kind of weird to read a standards document that has all these instance of &amp;ldquo;Oh, by the way, Perl does it this way instead.&amp;rdquo;&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The largest change in Perl 5.6 has to be the introduction of UTF-8 Unicode support. By default, Perl now thinks in terms of Unicode characters instead of simple bytes; a character can, as the CJK people already know extremely well, span several bytes. All the relevant built-in functions (&lt;code&gt;length&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, and so on) now work on a character-by-character basis instead of byte-by-byte, and strings are represented internally in Unicode.&lt;/p&gt;

&lt;p&gt;Two new pragmata, &lt;em&gt;byte&lt;/em&gt; and &lt;em&gt;utf8&lt;/em&gt;, have been written to control the Unicode settings; &lt;code&gt;use byte&lt;/code&gt; will go back to the old default of reading a byte at a time, whereas &lt;code&gt;use utf8&lt;/code&gt; turns on support for UTF8 characters in the source code of a program itself. The &lt;em&gt;utf8&lt;/em&gt; pragma also loads in the character tables, but this is done automatically by Perl on demand.&lt;/p&gt;

&lt;p&gt;What does it actually mean, then? So things are encoded in Unicode internally, what does this enable me as a programmer to do? Well, if we turn on utf8, we can specify string literals in Unicode using the &lt;code&gt;\x{}&lt;/code&gt; notation; just put your character codes in hexadecimal inside the brackets.&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $glis =
 &amp;quot;\x{395}\x{3CD}\x{3B1}\x{3B3}\x{3B3}\x{3B5}\x{3BB}\x{3CA}\x{3B1}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also reference Unicode characters by their name: the &lt;em&gt;charnames&lt;/em&gt; pragma loads in the list of names, allowing you to then say something like &lt;code&gt;&amp;quot;\N{WHITE SMILING FACE}&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, if you&amp;rsquo;ve got a Unicode editor, you can now, just like Java, use any Unicode for all your identifiers. This currently needs &lt;code&gt;use utf8&lt;/code&gt; to enable Unicode in your source, but is expected to become standard very soon; the &lt;em&gt;utf8&lt;/em&gt; pragma is attempting to make itself redundant.&lt;/p&gt;

&lt;p&gt;Unicode support for regular expressions is now in, and supports matching characters based on Unicode properties - you can now match any upper-case character in any language with &lt;code&gt;\p{IsUpper}&lt;/code&gt;. Characters, rather than bytes, are matched by &lt;code&gt;\w&lt;/code&gt;, which is a superb thing for the Japanese and other multiple-byte worlds. Best of all, the new match &lt;code&gt;\X&lt;/code&gt; will snatch any character plus all the attributes (markings, breathings, and so on) that apply to it.&lt;/p&gt;

&lt;p&gt;Translation is fully supported: whether you mean translation from Unicode to ordinary 8-bit and back, or upper/lower case translation. For the former, the &lt;code&gt;tr///&lt;/code&gt; operator can be given the UC and CU modifiers to translate from Unicode to 8-bit characters (`chars&amp;rsquo;) and back. As for casifying, &lt;code&gt;uc&lt;/code&gt;, &lt;code&gt;lc&lt;/code&gt; and friends Do The Right Thing for all upper and lower case characters specified in the Unicode translation tables.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is currently no way to tell Perl that incoming data from an external file is Unicode; while you can write Unicode data out to a file, you cannot read Unicode data back in again. While you can work around this with &lt;code&gt;tr///CU&lt;/code&gt;, it&amp;rsquo;s obviously a serious shortcoming, which we hope will be addressed soon.&lt;/p&gt;

&lt;p&gt;In short, it should be a lot easier for us who have to deal regularly with multiple-byte alphabets to do so, to manipulate and process data. A new documentation page, &lt;em&gt;perlunicode&lt;/em&gt;, fully documents all the new support.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-better-building-better-building-span&#34;&gt;&lt;span id=&#34;Better_Building&#34;&gt;Better Building&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;`I&amp;rsquo;d be slow to label Configure as &amp;ldquo;bilge&amp;rdquo;. that&amp;rsquo;s unnecessarily insulting to all the maintainers of Configure (and metaconfig). Configure is lovingly crafted, highly knowledgable bilge.&amp;rsquo; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As usual, Perl now supports more computers than ever before, with the addition of six new supported platforms; notably, the GNU/Hurd is now supported, as is the Psion 5.&lt;/p&gt;

&lt;p&gt;Configure finally allows you to look in directories used in old versions of Perl to search for modules; the split between core modules, architecture-specific modules and locally added modules is now more clear-cut. This makes it a lot cleaner and easier to upgrade your Perl distribution, without having to worry about the modules you&amp;rsquo;ve installed for older versions.&lt;/p&gt;

&lt;p&gt;Perl can now also take advantage of those architectures which use 64 bit integers (quads) if you use the &lt;code&gt;-Duse64bits&lt;/code&gt; flag to Configure, and so you can now do your integer arithmetic with values up to 9,223,372,036,854,775,808 instead of a measly 2,147,483,648.&lt;/p&gt;

&lt;p&gt;Similarly, Perl can now process files larger than 2 gigabytes on computers that support them. Just add &lt;code&gt;-Duselargefiles&lt;/code&gt; to your Configure, and off you go.&lt;/p&gt;

&lt;p&gt;Finally, floating point support is enhanced on those computers which support the `long double&amp;rsquo; variable type, and we&amp;rsquo;re also starting to see the beginnings of cross-compiling options appear in Configure.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-threading-threading-span&#34;&gt;&lt;span id=&#34;Threading&#34;&gt;Threading&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;`Here be dragons&amp;rsquo;&lt;/em&gt; - thread.h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perl&amp;rsquo;s threading has been drastically reworked. It&amp;rsquo;s still experimental, and there&amp;rsquo;s still every expectation that the current implementation may be thrown out and started again, but Perl now supports two different types of threads.&lt;/p&gt;

&lt;p&gt;Firstly, we&amp;rsquo;ve got the threads that existed in Perl 5.005 - your program can thread, and each thread can have its own variables and stashes, controlled with the &lt;em&gt;Thread&lt;/em&gt; module as before, and these threads have become slightly more stable - but we also now have interpreter-based threads.&lt;/p&gt;

&lt;p&gt;In this model, the entire Perl interpreter gets cloned and runs in a separate thread. At the moment, however, there&amp;rsquo;s no way to create a new thread from Perl space, so it&amp;rsquo;s not what you want if you&amp;rsquo;re trying to play with threaded programs, but what it does mean is that platforms such as Windows that don&amp;rsquo;t support the &lt;code&gt;fork()&lt;/code&gt; system call can have an emulated fork by cloning the entire perl interpreter; each `pseudo-process&amp;rsquo; then emulates the properties on an independent process. It&amp;rsquo;s a huge hack, but it works.&lt;/p&gt;

&lt;p&gt;As well as enhanced threading support, we now have support for `multiplicity&amp;rsquo;. What this means is that not only can you have two interpreters in separate threads that have a common ancestry, you can have completely separate and independent interpreters inside the same process. Again, there is no interface to this from Perl space; if you want to use threads in your program, you&amp;rsquo;ll need to turn on the old 5.005 threads; they&amp;rsquo;re still an experimental feature, so &lt;em&gt;caveat programmor&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-improved-compiler-improved-compiler-span&#34;&gt;&lt;span id=&#34;Improved_Compiler&#34;&gt;Improved Compiler&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;`Perl has a long tradition of working around compilers&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Full kudos is due to Vishal Bhatia and Nick Ing-Simmons for their work on the Perl compiler; it&amp;rsquo;s come on in leaps and bounds since the last release. While it&amp;rsquo;s still not ready for prime time, the Perl-to-C compiler now passes a fair amount of the standard Perl test suite, and can even be used to compile (some) Tk programs. The `optimised C&amp;rsquo; compiler is also slightly more stable, but some problems have been reported.&lt;/p&gt;

&lt;p&gt;The usual provisos apply: your program may not be any faster or smaller than an uncompiled version. (Quick tests show that a simple program - &lt;em&gt;op/recurse.t&lt;/em&gt; in the test suite - is a few milliseconds faster when compiled; it&amp;rsquo;s also a quarter of a megabyte on this computer and took 70 seconds to compile.) Compiling a program still means embedding the Perl interpreter inside it - we&amp;rsquo;re not even dreaming of producing native assembler or C code translations of a Perl program yet.&lt;/p&gt;

&lt;p&gt;The new &lt;em&gt;perlcompile&lt;/em&gt; documentation explains what&amp;rsquo;s going on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-version-tuples-version-tuples-span&#34;&gt;&lt;span id=&#34;Version_Tuples&#34;&gt;Version Tuples&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;`That is a known bug in 5.00550. Either an upgrade or a downgrade will fix it.&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perl&amp;rsquo;s version numbers have always been a little bizarre; this version marks a move away from the &lt;code&gt;x.yyy_zz&lt;/code&gt; format towards the more standard major-minor-patchlevel format. Even-numbered minor versions, such as 5.6.0, will be the stable versions, with the odd-numbered minor versions making up the development stream; now 5.6.0 is released, work will begin on 5.7.0 - this follows the format of many other open source projects.&lt;/p&gt;

&lt;p&gt;Together with this, a new method of specifying strings has been created - a literal such as &lt;code&gt;v5.6.0&lt;/code&gt;, for example, will be interpreted as a Unicode string made up of three characters: character 5, character 6 and character 0. This allows one to compare version numbers using the string comparison operators, and provides a more readable way of writing long Unicode literals; the string above can also be specified as&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $glis = v917.973.945.947.947.949.955.970.947;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;sprintf&lt;/code&gt; have now had the &lt;code&gt;v&lt;/code&gt; flag added to their format specifications, which allows you to go the other way: to turn a string into a series of numbers separated by periods - it&amp;rsquo;s effectively &lt;code&gt;join &amp;quot;.&amp;quot;, map {ord} split //, $_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  print  &amp;quot;Perl version: $^V\n&amp;quot;;    # This gives you a messy string!
  printf &amp;quot;Perl version: %vd\n&amp;quot;, $^V;  # Perl version 5.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is ideal for any number of things which are specified in such a format, such as IP addresses:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     use Socket;
     printf &amp;quot;%vd&amp;quot;, (gethostbyname(&amp;quot;www.perl.com&amp;quot;))[4];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new syntax takes a bit of getting used to, it has to be said; most people won&amp;rsquo;t be using it, but it&amp;rsquo;s a neat trick if you can get your head around it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-lexical-warnings-lexical-warnings-span&#34;&gt;&lt;span id=&#34;Lexical_Warnings&#34;&gt;Lexical Warnings&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lsquo;Death is not good. I reject death. I will stay away from trucks today.&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The way Perl generates warnings has also been completely revised: as a replacement for the &lt;code&gt;-w&lt;/code&gt; flag and the &lt;code&gt;$^W&lt;/code&gt; special variable, the &lt;code&gt;warnings&lt;/code&gt; pragma gives you more flexibility about what warnings you receive and when.&lt;/p&gt;

&lt;p&gt;In terms of &lt;strong&gt;what&lt;/strong&gt;, you can now specify warnings by category: there are a bunch of standard categories, such as &amp;lsquo;syntax&amp;rsquo;, &amp;lsquo;io&amp;rsquo;, &amp;lsquo;void&amp;rsquo;, and modules will be able to define their own categories. You can also choose to escalate any categories of warning into a fatal error.&lt;/p&gt;

&lt;p&gt;As for &lt;strong&gt;when&lt;/strong&gt;, the pragma is lexically scoped, so you can switch it on and off as you wish:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     use warnings;

     $a = @a[1];      # This generates a warning.

     {
          no warnings;
          $a = @a[1];  # This does not.
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;em&gt;perllexwarn&lt;/em&gt; for how to use this from programs and modules.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-lvaluable-subroutines-lvaluable-subroutines-span&#34;&gt;&lt;span id=&#34;Lvaluable_Subroutines&#34;&gt;Lvaluable Subroutines&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;I surely do hope that&amp;rsquo;s a syntax error.&amp;rsquo; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the department of bizarre syntax, subroutines can now be legal lvalues; that means they can be assigned to. Of course, this only works if they return something assignable, and if they&amp;rsquo;re marked as an lvalue subroutine. For example, normally, you&amp;rsquo;d have something like this:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     my $a = 10;
     my $b = 20;

     sub mysub {
          if ($_[0] &amp;gt; 0) { return $a } else { return $b }
     }

     print mysub( 2); # Returns 10
     print mysub(-1); # Returns 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you can now do is this:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     sub mysub : lvalue {
          if ($_[0] &amp;gt; 0) { return $a } else { return $b }
     }

     mysub(2)  = 15; # Set $a to 15
     mysub(-1) =  9; # Set $b to 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, the function returns not a value, but the variable itself.&lt;/p&gt;

&lt;p&gt;This is still an experimental feature, and may go away in the future; it&amp;rsquo;s also not possible to return array or hash variables yet.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-weak-references-weak-references-span&#34;&gt;&lt;span id=&#34;Weak_References&#34;&gt;Weak References&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lsquo;I might be able to shoehorn a reference count in on top of the numeric value by disallowing multiple references on scalars with a numeric value, but it wouldn&amp;rsquo;t be as clean. I do occasionally worry about that.&amp;rsquo;&lt;/em&gt; &amp;ndash;lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perl keeps track of when values are in use and when they can be taken out of commission by counting the number of references that remain to them. The problem with this was that if you had a variable that was a reference to itself, like this:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $a = \$a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the memory would never be freed even if nothing else referred to it, since it had a valid existing reference.&lt;/p&gt;

&lt;p&gt;What you can now do is weaken a reference; this means that while it is still a valid reference, it does not add to the reference count. In the example above, you could weaken &lt;code&gt;$a&lt;/code&gt; and it would be freed once it went out of scope. This also means you can keep a spare copy of a variable or an object but not interfere with its lifespan.&lt;/p&gt;

&lt;p&gt;To take advantage of this, you need to install the &lt;em&gt;WeakRef&lt;/em&gt; package from CPAN, and read the further documentation there.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-posix-character-classes-posix-character-classes-span&#34;&gt;&lt;span id=&#34;POSIX_Character_Classes&#34;&gt;POSIX Character Classes&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lsquo;How do Crays and Alphas handle the POSIX problem?&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Portable Operating Systems Extension (POSIX) standards documents define a set of named character classes: the class &lt;code&gt;[:upper:]&lt;/code&gt;, for example, matches an upper-case character. Of course, Perl supports a wide range of character classes and can now support matching Unicode properties too, but it seemed odd that the POSIX standard had not been implemented, especially since it&amp;rsquo;s familiar to C programmers and used in standard utilities such as &lt;code&gt;tr&lt;/code&gt;. So we implemented it.&lt;/p&gt;

&lt;p&gt;These classes, &lt;code&gt;[:upper:]&lt;/code&gt;, &lt;code&gt;[:lower:]&lt;/code&gt;, &lt;code&gt;[:digit:]&lt;/code&gt; and a bunch of others, actually sit inside ordinary Perl character classes; as RD Laing said, `now put the brackets in brackets&amp;rsquo; - to match a whitespace character, use &lt;code&gt;[[:space:]]&lt;/code&gt;. This is equivalent to the Unicode &lt;code&gt;\p{IsSpace}&lt;/code&gt; and the ordinary Perl &lt;code&gt;\s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This being Perl, we allow things that POSIX can&amp;rsquo;t do, and you can negate a POSIX character class with a &lt;code&gt;^&lt;/code&gt; before the name. A non-space character can be matched either with &lt;code&gt;[[:^space:]]&lt;/code&gt;, &lt;code&gt;\P{IsSpace}&lt;/code&gt; or &lt;code&gt;\S&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-miscellaneous-bits-miscellaneous-bits-span&#34;&gt;&lt;span id=&#34;Miscellaneous_Bits&#34;&gt;Miscellaneous Bits&lt;/span&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lsquo;Perl will never turn into APL, despite our best efforts.&amp;rsquo;&lt;/em&gt; - lwall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aside from the changes I&amp;rsquo;ve just mentioned, there are a myriad of little things that have been added, improved, and corrected. New documentation has been written, and older documentation revised; code has been tweaked, extended, rearranged, and rethought; some small pieces of syntax have been added or changed; experimental features have been tried, judged and sentenced.&lt;/p&gt;

&lt;p&gt;While we can&amp;rsquo;t go into all of the less major modifications in the new version, I&amp;rsquo;ll just pick out some points which may be useful. For the whole story, you can see the &lt;em&gt;perldelta&lt;/em&gt; documentation - for even more of the whole story, read the &lt;em&gt;Changes&lt;/em&gt; file in the Perl distribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Binary&#34;&gt;Binary Numbers&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
As well as being able to specify numbers in decimal (&lt;code&gt;1234&lt;/code&gt;), octal (&lt;code&gt;02322&lt;/code&gt;) and hexadecimal, (&lt;code&gt;0x4D2&lt;/code&gt;) we now have the &lt;code&gt;0b&lt;/code&gt; prefix for binary numbers - &lt;code&gt;0b10011010010&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While there isn&amp;rsquo;t a &lt;code&gt;bin()&lt;/code&gt; function to match &lt;code&gt;hex()&lt;/code&gt; and &lt;code&gt;oct()&lt;/code&gt;, you can actually make one from the &lt;code&gt;oct()&lt;/code&gt; function; &lt;code&gt;oct(&amp;quot;0b1001&amp;quot;)&lt;/code&gt; returns &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_our&#34;&gt;our Variables&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Whereas &lt;code&gt;my&lt;/code&gt; declares lexical variables, &lt;a href=&#34;#item_our&#34;&gt;our&lt;/a&gt; declares global variables - it&amp;rsquo;s a cleaner and hopefully more intuitive replacement for &lt;code&gt;use vars&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_File&#34;&gt;File Globbing&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
The glob operator (&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; and &lt;code&gt;glob&lt;/code&gt;) used to be processed by spawning a shell; that was problematic for operating systems that didn&amp;rsquo;t have a standard shell, and anyway had the overhead of creating a new process. It&amp;rsquo;s now implemented by calling the standard &lt;a href=&#34;https://metacpan.org/pod/File::Glob&#34;&gt;File::Glob&lt;/a&gt; module on demand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Bug&#34;&gt;Bug Fixes&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Most of the bugs, surprises and unpleasantries from 5.005 have been cleared up; recently there&amp;rsquo;s been quite a blitz on the security of the utilities that come with Perl, safer handling of temporary files, and tons of work on debugger, but most of the work of the past year has been clearing up the issues that you&amp;rsquo;ve reported to perl5-porters in the interim. Keep them coming - it&amp;rsquo;s only by reporting them that they get fixed.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;     Q: How many programmers does it take to change a Sarathy?
     A: None needed, Sarathys never burn out.&#39; - lwall
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;d like to close by commending the great labour of hundreds of porters in the past year who&amp;rsquo;ve worked to bring Perl 5.6 to you, fearlessly led by the tireless Gurusamy Sarathy, and overseen by the guiding hand of Larry Wall, and by hoping that this new version will maximise the ease, power, and above all, enjoyment of your programming.&lt;/p&gt;

&lt;p&gt;May you do Good Magic with Perl&amp;hellip; 5.6!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

