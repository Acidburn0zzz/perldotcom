<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yaml on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/yaml/</link>
    <description>Recent content in Yaml on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jul 2019 00:31:19 +0000</lastBuildDate>
    <atom:link href="/tags/yaml/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - June 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---june-2019/</link>
      <pubDate>Fri, 26 Jul 2019 00:31:19 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---june-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install all modules under a certain CPAN namespace using &lt;a href=&#34;https://metacpan.org/pod/App::cpanm::namespace&#34;&gt;App::cpanm::namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenTracing&#34;&gt;OpenTracing&lt;/a&gt; - application process monitoring as defined by opentracing.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/VoIPms&#34;&gt;VoIPms&lt;/a&gt; is an API wrapper for VoIP.ms&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::WordsAPI&#34;&gt;WebService::WordsAPI&lt;/a&gt; provides a Perly interface for retrieving data about words&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use ChromaPrint with Perl using &lt;a href=&#34;https://metacpan.org/pod/Audio::Chromaprint&#34;&gt;Audio::Chromaprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::Uncompress::Untar&#34;&gt;IO::Uncompress::Untar&lt;/a&gt; is a Pure-perl module for reading tar, tgz, .tar.bz2 etc files/buffers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::PacketFilter&#34;&gt;Linux::PacketFilter&lt;/a&gt; provides a simple interface to Linux packet filtering&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/YAML::Safe&#34;&gt;YAML::Safe&lt;/a&gt; is a refactored version of YAML::XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dig into the guts of a live Perl program with &lt;a href=&#34;https://metacpan.org/pod/Endoscope&#34;&gt;Endoscope&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;Process a list with callbacks with &lt;a href=&#34;https://metacpan.org/pod/Mojo::AsyncList&#34;&gt;Mojo::AsyncList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get subroutine meta information with &lt;a href=&#34;https://metacpan.org/pod/Sub::Meta&#34;&gt;Sub::Meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Pod::LinkCheck::Lite&#34;&gt;Test::Pod::LinkCheck::Lite&lt;/a&gt; tests non-URL POD links&lt;/li&gt;
&lt;li&gt;Aggregate tests with &lt;a href=&#34;https://metacpan.org/pod/Test2::Aggregate&#34;&gt;Test2::Aggregate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Try::Harder&#34;&gt;Try::Harder&lt;/a&gt; is a pure-Perl, source-filter attempt to get the functionality of Syntax::Keyword::Try compatible with older Perl versions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Web::Solid::Test::Basic&#34;&gt;Web::Solid::Test::Basic&lt;/a&gt; provides reusable tests via RDF&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::AVR::UPDI&#34;&gt;Device::AVR::UPDI&lt;/a&gt; interacts with an AVR microcontroller over UPDI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::EEPROM::AT24C32&#34;&gt;RPi::EEPROM::AT24C32&lt;/a&gt; reads and writes to the AT24C32 based EEPROM ICs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::OLED::SSD1306::128_64&#34;&gt;RPi::OLED::SSD1306::128_64&lt;/a&gt; is an interface to the SSD1306-esque 128x64 OLED displays&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::SysInfo&#34;&gt;RPi::SysInfo&lt;/a&gt; retrieves hardware system information from a Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::LevelMap&#34;&gt;Game::LevelMap&lt;/a&gt; is a module for representing game level maps&lt;/li&gt;
&lt;li&gt;Play the Platforms of Peril game: &lt;a href=&#34;https://metacpan.org/pod/Game::PlatformsOfPeril&#34;&gt;Game::PlatformsOfPeril&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Z3::FFI&#34;&gt;Z3::FFI&lt;/a&gt; provides an FFI to the Z3 solver/prover&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mozilla::IntermediateCerts&#34;&gt;Mozilla::IntermediateCerts&lt;/a&gt; can download and parse Mozilla intermediate certificates&lt;/li&gt;
&lt;li&gt;Serve GraphQL from Plack / PSGI with &lt;a href=&#34;https://metacpan.org/pod/Plack::App::GraphQL&#34;&gt;Plack::App::GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Search::QS&#34;&gt;Search::QS&lt;/a&gt; parses a query string DSL into a search query&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::Pure&#34;&gt;URI::Pure&lt;/a&gt; adds support to URI for Internationalized Domain Names (IDN) and Internationalized Resource Identifiers (IRI)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Load YAML Config Files</title>
      <link>http://localhost:1313/article/29/2013/9/17/How-to-Load-YAML-Config-Files/</link>
      <pubDate>Tue, 17 Sep 2013 03:18:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/29/2013/9/17/How-to-Load-YAML-Config-Files/</guid>
      <description>

&lt;p&gt;Config files are used by programmers to store local variables as it&amp;rsquo;s usually better to update a config file than to edit source code. &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#Introduction&#34;&gt;YAML&lt;/a&gt; is a popular data serialization language that&amp;rsquo;s easy to read and can serialize the common Perl variables (scalars, arrays and hashes). This article describes how to read a YAML config file in Perl and access the config file&amp;rsquo;s variables.&lt;/p&gt;

&lt;h3 id=&#34;the-config-file&#34;&gt;The config file&lt;/h3&gt;

&lt;p&gt;YAML defines different types of &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#id2759963&#34;&gt;data collections&lt;/a&gt; that can be used to serialize (represent or store) Perl variables. Let&amp;rsquo;s define a YAML config file to store some local email data. The config.yaml file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
emailName: David
emailAddresses: 
    - sillymoos@cpan.org
    - perltricks.com@gmail.com
credentials:
    username: sillymoose
    password: itsasecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s walkthrough config.yaml: the config file starts with three hyphens (&amp;ldquo;&amp;mdash;&amp;rdquo;) to signify the start of the document, &amp;ldquo;emailName&amp;rdquo;: is a scalar mapping with the value &amp;ldquo;David&amp;rdquo;, &amp;ldquo;emailAddresses&amp;rdquo; is a sequence of email addresses and &amp;ldquo;credentials&amp;rdquo; is a mapping of scalar mappings for the email username and password.&lt;/p&gt;

&lt;h3 id=&#34;load-the-config-file&#34;&gt;Load the config file&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;YAML::XS&lt;/a&gt; module provides a &lt;code&gt;LoadFile&lt;/code&gt; subroutine that can be used to read any YAML file into a scalar variable. This script loads the &amp;ldquo;config.yaml&amp;rdquo; config file and prints it using &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; YAML::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LoadFile&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LoadFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($config);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run this script we get the following results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$VAR1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emailName&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itsasecret&amp;#39;&lt;/span&gt;,
                           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sillymoose&amp;#39;&lt;/span&gt;
                         },
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emailAddresses&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
                              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sillymoos@cpan.org&amp;#39;&lt;/span&gt;,
                              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perltricks.com@gmail.com&amp;#39;&lt;/span&gt;
                            ]
        };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These results show that config.yaml has been read into &lt;code&gt;$config&lt;/code&gt; as a hash reference with three keys: &amp;ldquo;emailName&amp;rdquo;, &amp;ldquo;credentials&amp;rdquo; and &amp;ldquo;emailAddresses&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;accessing-the-config-data&#34;&gt;Accessing the config data&lt;/h3&gt;

&lt;p&gt;So far the script reads the contents of config.yaml into &lt;code&gt;$config&lt;/code&gt;. To access the config data we need to dereference the data from &lt;code&gt;$config&lt;/code&gt;. The following script shows examples of accessing the config scalar, array and hash data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; YAML::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LoadFile&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LoadFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# access the scalar emailName&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $emailName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{emailName};

&lt;span style=&#34;color:#75715e&#34;&gt;# access the array emailAddresses directly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $firstEmailAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{emailAddresses}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $secondEmailAddress&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{emailAddresses}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];

&lt;span style=&#34;color:#75715e&#34;&gt;# loop through and print emailAddresses&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{emailAddresses}}) { say }

&lt;span style=&#34;color:#75715e&#34;&gt;# access the credentials hash key values directly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{credentials}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{credentials}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password};

&lt;span style=&#34;color:#75715e&#34;&gt;# loop through and print credentials&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (keys %{$config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{credentials}}) {
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_: $config-&amp;gt;{credentials}-&amp;gt;{$_}&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;more-yaml&#34;&gt;More YAML&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;YAML::XS&lt;/a&gt; uses the libyaml C library and provides strong performance and adherence to the YAML specification. However if you have difficulty installing YAML::XS, there are pure Perl alternatives available: &lt;a href=&#34;https://metacpan.org/pod/YAML&#34;&gt;YAML&lt;/a&gt; is not actively maintained and has several bugs but excellent documentation and generally works, &lt;a href=&#34;https://metacpan.org/pod/YAML::Tiny&#34;&gt;YAML::Tiny&lt;/a&gt; is a newer module that implements a useful subset of the YAML specification.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

