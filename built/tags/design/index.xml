<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/design/</link>
    <description>Recent content in Design on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Aug 2010 10:30:56 -0800</lastBuildDate>
    <atom:link href="/tags/design/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rethinking Everything: Perl and the Web in 201x</title>
      <link>http://localhost:1313/pub/2010/08/rethinking-perl-web.html/</link>
      <pubDate>Fri, 20 Aug 2010 10:30:56 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/rethinking-perl-web.html/</guid>
      <description>

&lt;p&gt;In 1999 and 2000 I worked on the Everything Engine, a website management system written in Perl 5 which runs sites like &lt;a href=&#34;http://everything2.org/&#34;&gt;Everything 2&lt;/a&gt; and &lt;a href=&#34;http://perlmonks.org/&#34;&gt;PerlMonks&lt;/a&gt;. The system has its flaws&amp;ndash;many of them due to our inexperience building and maintaining large systems with the Perl of the time.&lt;/p&gt;

&lt;p&gt;We could build it much better today, with modern libraries and techniques in Perl. In truth, building such a system today would solve a lot of uses for MVC applications.&lt;/p&gt;

&lt;h3 id=&#34;how-everything-works&#34;&gt;&lt;strong&gt;How Everything Works&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The fundamental concept of Everything is that everything is a node. A node is an individual entity containing attributes, including a unique identifier and one or more addressing mechanisms expressible through a URI. Each node also has a nodetype (itself a node) which contains information about the node&amp;rsquo;s characteristics, such as the attributes it contains, the types of operations it supports, and any mechanisms to view node information.&lt;/p&gt;

&lt;p&gt;In other words, a node is an object, a nodetype is a class, and there&amp;rsquo;s a metaobject protocol governing the relationships of nodes and nodetypes.&lt;/p&gt;

&lt;p&gt;The Everything Engine provides a sort of routing system which might remind you of routes in one of the new heavy-model MVC systems. In one sense, Everything provided its own implementation of MVC, where URIs and URI components helped the controller find the appropriate model (node) and model operation (nodemethod), which eventually caused the rendering of a series of templates, or the view.&lt;/p&gt;

&lt;p&gt;The system provides node inheritance for attributes and behaviors such as creating, reading, updating, and deleting nodes. Because every node inherited from node, every node has at least general behavior through any interface into the system. If you create a new nodetype, you can do useful things with nodes of that type without having to write any specific views or mess with routing or the like. You have the option of making prettier or more featureful or better or at least different views, but the default inherited views and behaviors are sufficient for the basic CRUD operations.&lt;/p&gt;

&lt;h3 id=&#34;what-everything-didn-t-and-did-well&#34;&gt;&lt;strong&gt;What Everything Didn&amp;rsquo;t and Did Well&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Not everything went right. Remember, this system came about in 1998 and 1999, just as mod_perl was the shiny new technology in the world of Perl web development. Object-relational mapping was still difficult (if even understood much), CGI.pm was still the king, and Template Toolkit hadn&amp;rsquo;t taken over as the obvious first place to look for your templating needs.&lt;/p&gt;

&lt;p&gt;Our hand-written ORM has its flaws, as dealing with node inheritance and lookup of node types and (yes) serializing code to the database to &lt;code&gt;eval&lt;/code&gt; into a running instance of the system at initialization time. The XML serialization scheme for bundling core nodes and custom nodes was even worse, not only due to our use of the DOM.&lt;/p&gt;

&lt;p&gt;Without a well-understood mechanism and framework and example of doing MVC well in Perl 5, Everything&amp;rsquo;s custom interpretation of MVC was odd. Where MVC helps separate application responsibilities into loosely-coupled layers, passing around a CGI object to models and templates violates that encapsulation. (The less said about the custom method dispatch strategy the better.)&lt;/p&gt;

&lt;p&gt;Most of the problems with the system are obvious in retrospect, over a decade later (especially with a decade of experience creating new systems, maintaining existing systems, and stealing ideas from other projects which have made different mistakes).&lt;/p&gt;

&lt;p&gt;Even with all of those mistakes, the system worked reasonably well in many cases. Adding new features was easy (even if deploying them is less so). Creating new behaviors by reusing existing primitives makes building simple systems easy. The usability provided by inherited defaults made it easy to iterate and experiment and refine new behaviors.&lt;/p&gt;

&lt;p&gt;We also eventually produced a system to bind UI widgets&amp;ndash;HTML, in our case&amp;ndash;to node attributes. That made displaying and editing mechanisms much, much easier.&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t start a new site with Everything as it exists today, but I&amp;rsquo;ve wanted a modern version of it for a long, long time. Modern Perl has almost all of the pieces needed to rebuild it.&lt;/p&gt;

&lt;h3 id=&#34;doing-everything-better&#34;&gt;&lt;strong&gt;Doing Everything Better&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://moose.perl.org/&#34;&gt;Moose&lt;/a&gt; object system provides an obvious way to define nodes. A node is merely a Moose object, and a nodetype is its class. This provides a well-understood and robust mechanism for dealing with attributes and methods and roles and the like, and the metaobject protocol provided by &lt;a href=&#34;https://metacpan.org/pod/Class::MOP&#34;&gt;Class::MOP&lt;/a&gt; allows introspective capabilities which will become obviously important soon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt; support is obviously the current best way to deploy a web application in Perl 5, as it allows reusable middleware and offers many deployment strategies.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; is the first ORM to consider in Perl 5 right now. I&amp;rsquo;m partial to &lt;a href=&#34;https://metacpan.org/pod/KiokuDB&#34;&gt;KiokuDB&lt;/a&gt; for applications where I need persistent objects but don&amp;rsquo;t need to provide a relational interface to interact with the data. The ability to use either one as a serialization backend is important.&lt;/p&gt;

&lt;p&gt;Any of the modern frameworks or libraries or toolkits for providing the controller part of the MVC application will do. In particular, all this layer of the application needs to do is to map requests to nodes, manage concerns of user authentication and logging, invoke the fat model objects to perform their business actions, then dispatch to the view to render the appropriate information in the user interface. I like the simplicity of Dancer, but anything compatible with Plack will work for web applications.&lt;/p&gt;

&lt;h3 id=&#34;a-new-architecture-for-perl-apps&#34;&gt;&lt;strong&gt;A New Architecture for Perl Apps&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s my vision.&lt;/p&gt;

&lt;p&gt;I run a publishing company. I want to manage a web site with information about existing and upcoming books.&lt;/p&gt;

&lt;p&gt;I start by defining some models: a Book has a title, an ISBN, a price, one or more Authors, a short blurb, a full description, and publication date, and a cover image. An Author has a name, a biography, and an image.&lt;/p&gt;

&lt;p&gt;For each attribute of each model, I choose two types: the type for the object attribute itself (an ISBN is a ten- or thirteen-digit number, an author is an Author object, et cetera) as well as the type for the UI (Authors display as a list of authors and they require a multiple selection UI widget to display). That author selection widget is interesting because it can be a parametric role: a role which knows how to display multiple *something*s, where that &lt;em&gt;something&lt;/em&gt; is a parameter in this case constrained only to Authors.&lt;/p&gt;

&lt;p&gt;Obviously I need some mechanism to define new UI and attribute types, but assume that the system comes with a rich set of types (password, phone number, long input, short input, et cetera) from which I can build more.&lt;/p&gt;

&lt;p&gt;My serialization layer already knows how to serialize these models. That&amp;rsquo;s part of the magic of using KiokuDB, and there are mechanisms available for DBIx::Class to perform the same mapping.&lt;/p&gt;

&lt;p&gt;Given these models, the controller layer can create default URI mapping routes for basic CRUD operations. The HTTP verbs &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; map nicely. As well, the first URI component beneath the application itself can map to the type of model required, such that &lt;em&gt;&lt;a href=&#34;http://example.com/awesomebooksaboutperl/authors/chromatic&#34;&gt;http://example.com/awesomebooksaboutperl/authors/chromatic&lt;/a&gt;&lt;/em&gt; obviously returns my author page. Without a unique identifier, &lt;em&gt;&lt;a href=&#34;http://example.com/awesomebooksaboutperl/authors/&#34;&gt;http://example.com/awesomebooksaboutperl/authors/&lt;/a&gt;&lt;/em&gt; could list all authors.&lt;/p&gt;

&lt;p&gt;With the UI information associated with models, I don&amp;rsquo;t even have to write any templates to get a bare-bones UI. The system can use Moose&amp;rsquo;s introspection mechanism to read all of the object attributes then bind them to HTML widgets for the appropriate display type (reading, creating, and updating). This is particularly easy with a system like Moose where another parametric role can customize the appropriate elements to render based on access controls. That is, users can update their own passwords and administrators can update anyone&amp;rsquo;s passwords, but users cannot even see the password entry fields for other users. The model object decorated with this UI role can decline to make inappropriate information available to the template rendering system at all.&lt;/p&gt;

&lt;p&gt;Even better, the UI decoration role can provide different destination output types as well, such as JSON or XML or even serialized objects themselves suitable for transportation between similar systems.&lt;/p&gt;

&lt;p&gt;I care most about HTML for this web application, but it&amp;rsquo;s nice to have a JSON or Atom view of my data, especially because I can define another route (or perhaps you get this by adding an attribute to your models) which generates syndication information automatically; if I add a new book, it&amp;rsquo;s part of the &lt;em&gt;&lt;a href=&#34;http://example.com/awesomeperlbooks/comingsoon.xml&#34;&gt;http://example.com/awesomeperlbooks/comingsoon.xml&lt;/a&gt;&lt;/em&gt; Atom feed. Internally, the controller might map that URI to &lt;em&gt;&lt;a href=&#34;http://example.com/awesomeperlbooks/books/?view=atom;sort_by=desc;limit=10&#34;&gt;http://example.com/awesomeperlbooks/books/?view=atom;sort_by=desc;limit=10&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Whatever the other output options, I want my HTML to make generous use of CSS selectors, such that I have the option of customizing the result purely in CSS, where possible. (I don&amp;rsquo;t mind writing custom HTML, but the less of that I have to do the better.) This is because it&amp;rsquo;s possible to build a big page out of several models rendered together: each model should be able to render as a fragment, which makes Ajax applications easier to write.&lt;/p&gt;

&lt;p&gt;Perhaps the real benefit of this system is that it can host itself, in that it&amp;rsquo;s very easy to write an administrative console which allows people to define their own models and types and widgets using the system as its own interface. I&amp;rsquo;m still likely to write my own models by hand in Vim, but I don&amp;rsquo;t mind customizing an HTML template fragment in a web browser window on a development server, at least if I can deploy the entire system as if I&amp;rsquo;d written it by hand to files in the filesystem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve discussed this system with a few people and various projects exist to make much of it work. Consider modeling, serialization, and deployment solved thanks to Moose, DBIx::Class and KiokuDB, and Plack. What&amp;rsquo;s left is some middleware, some conventions for routing and mapping, and a little bit of magic UI widget binding and default templates. I wish we&amp;rsquo;d had this great technology a decade ago, but now with modern Perl we may be able to create a postmodern fat-model MVC web framework that makes the easy things trivial, the hard things easy, and the annoying things wonderful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking Lessons From Traffic Lights</title>
      <link>http://localhost:1313/pub/2001/05/22/trafficlights.html/</link>
      <pubDate>Tue, 22 May 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/05/22/trafficlights.html/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://conferences.oreilly.com/oscon/&#34;&gt;O&amp;#39;Reilly Open Source Convention&lt;/a&gt;
&lt;em&gt;Michael Schwern will be speaking at the &lt;a href=&#34;http://conferences.oreilly.com/oscon/&#34;&gt;O&amp;rsquo;Reilly Open Source Convention&lt;/a&gt; in San Diego, CA, July 23-27, 2001.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Excuse me, I&amp;rsquo;m going to ramble a bit about traffic lights as they relate to language design to see whether something interesting falls out.&lt;/p&gt;

&lt;p&gt;I was riding my bike to work today and started thinking about the trouble we were having with string concatenation in Perl 6 &lt;a href=&#34;#1&#34;&gt;[1]&lt;/a&gt; and how the basic problem is that we&amp;rsquo;ve run out of ASCII characters. I briefly thought about Unicode, but it&amp;rsquo;s not nearly well-supported.&lt;/p&gt;

&lt;p&gt;Then I stopped at a traffic light (the police in Belfast get annoyed by bikes blowing through lights, even at 2a.m. on an otherwise empty road. And they drive unmarked cars). Traffic lights convey their signals through color. I briefly thought it would be neat to convey Perl grammar via color, but that can&amp;rsquo;t be done for similar reasons to Unicode.&lt;/p&gt;

&lt;h3 id=&#34;color-coding-vs-position&#34;&gt;Color Coding vs. Position&lt;/h3&gt;

&lt;p&gt;The interesting thing about traffic lights is that the color is just for clarification. The real communication is through position. Stop on top, caution in middle, go at the bottom (some communities do this a bit differently, but it&amp;rsquo;s all locally consistent). This is important, because a large section of the population is color blind, but even if you saw a traffic light in black-and-white you could still make out the signals by their position.&lt;/p&gt;

&lt;p&gt;If you ask anyone on the street what &amp;ldquo;stop&amp;rdquo; and &amp;ldquo;go&amp;rdquo; are on a traffic light, they&amp;rsquo;ll probably say &amp;lsquo;red&amp;rsquo; and &amp;lsquo;green&amp;rsquo; without even thinking. But if you asked them to draw a traffic light they&amp;rsquo;d be sure to put the red on top and green on bottom. It&amp;rsquo;s interesting that although we respond strongly to color cues, we subconsciously remember the positional cues. It&amp;rsquo;s especially interesting given that we&amp;rsquo;re never actually taught &amp;ldquo;go is on the bottom&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a thin analogy to syntax highlighting of code, where the color is just there to highlight and position conveys the actual meaning.&lt;/p&gt;

&lt;p&gt;This idea of having redundant syntax that exists to merely make something easier to remember is perhaps one we can explore.&lt;/p&gt;

&lt;h3 id=&#34;sequence&#34;&gt;Sequence&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;hr /&gt;
O&amp;#39;Reilly Open Source Convention Featured Speaker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://conferences.oreillynet.com/cs/os2001/view/e_spkr/324&#34;&gt;Michael Schwern&lt;/a&gt; will be presenting four sessions at the &lt;a href=&#34;http://conferences.oreilly.com/oscon/&#34;&gt;O&#39;Reilly Open Source Convention&lt;/a&gt; in San Diego, CA, July 23-27, 2001. Rub elbows with Open Source leaders while relaxing on the beautiful Sheraton San Diego Hotel and Marina waterfront. For more information, visit our &lt;a href=&#34;http://conferences.oreilly.com/oscon/&#34;&gt;conference home page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, color and position aren&amp;rsquo;t the only tools a traffic light has. Order is another. Stop, Go, Caution, Stop, Go, Caution &amp;hellip; that&amp;rsquo;s the way it goes. Again, most people know this subconsciously even if they&amp;rsquo;ve never been taught it or ever thought about it. It&amp;rsquo;s a pattern that&amp;rsquo;s picked up on and expected. Go follows Stop. Caution precedes Stop. If a light were to suddenly jump from Go to Stop, drivers would be momentarily confused and indecisive.&lt;/p&gt;

&lt;p&gt;The lesson there is simple: be consistent.&lt;/p&gt;

&lt;p&gt;So while order doesn&amp;rsquo;t convey any extra information, its consistency can be important. I experienced this when I came to Belfast. The lights here go: Stop, Caution, Get Ready, Go where &amp;ldquo;Get Ready&amp;rdquo; is conveyed by a combination of red and yellow. Very useful (especially if you drive a stick or have toe-clips on your bike and need a moment to get ready) but a bit confusing the first few times.&lt;/p&gt;

&lt;p&gt;This directly contradicts the above lesson, eschew consistency if it&amp;rsquo;s going to add a useful feature. People may be taken back the first few times, but the utility will shine through in the long run. This could be considered a learning curve.&lt;/p&gt;

&lt;h3 id=&#34;combinations&#34;&gt;Combinations&lt;/h3&gt;

&lt;p&gt;Which brings us to another tool: combinations. Although rarely done, you can squeeze more meaning out a set of lights by combining them. Just like a three-bit number. The red-yellow combination is the only one I can think of, and probably rightly so. While there&amp;rsquo;s still three more combinations available, they would rapidly get confusing if used.&lt;/p&gt;

&lt;p&gt;Perhaps the lesson is: Just because you can wedge more meaning in doesn&amp;rsquo;t mean you should.&lt;/p&gt;

&lt;p&gt;The final method of communication is flashing. Flashing red is like a stop sign. Flashing yellow, proceed with caution. I don&amp;rsquo;t think flashing green is ever used or what it could mean &lt;a href=&#34;#2&#34;&gt;[2]&lt;/a&gt;. Most flashing lights are there to draw attention. Emergency vehicles, gaudy advertisements, navigation lights. Flashing signals are deliberately jarring. They&amp;rsquo;re also rarely used in combination with the normal signals. This is very important. The normal confusion associated with a break in the pattern isn&amp;rsquo;t there since the normal pattern is totally absent. The meaning of the flashing signals is close to their normal solid meaning, which allows most drivers to know what they mean without thinking about it.&lt;/p&gt;

&lt;p&gt;Flashing signals are also rather rare. They&amp;rsquo;re used at times when there&amp;rsquo;s few cars on the road (late at night) or on roads that carry little traffic.&lt;/p&gt;

&lt;p&gt;The lesson there, if you&amp;rsquo;re going to be inconsistent, is make sure you don&amp;rsquo;t do it in a way that will mix with the normal pattern of things. Think about how the inconsistent feature will be used and make sure it will be used in spots that are distanced from normal use. Also, the potential uses of the inconsistent feature should be relatively rare.&lt;/p&gt;

&lt;p&gt;As an aside, when I was young and on vacation with my family, we visited my uncle in the middle of the Mohave Desert. He worked at a borax mine (yep, mining for soap). Aside from the 40-foot-high dump trucks, the thing I remember most is the speed-limit signs. Has to be 15 years ago and I still remember this. The speed limit was &amp;ldquo;12 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; MPH.&amp;rdquo; Why? Not because you&amp;rsquo;ll get pulled over if you go 13 MPH, but so you&amp;rsquo;ll take notice. Consistency can ease understanding, but it can also encourage complacency.&lt;/p&gt;

&lt;p&gt;Back to flashing. Although it will vary from light to light, a single light will only use one frequency. They could use more. In fact, an almost infinite amount of information could be conveyed by various frequencies of flashing. This technique is in active use today by most Navies of the world as a method of secure, short-range ship-to-ship communication. Powerful signal lamps with shutters are used to flash Morse code between ships. More commonly, FM (Frequency Modulation) radio is essentially just a big flashing traffic light.&lt;/p&gt;

&lt;p&gt;Traffic lights chose to use only one frequency. Why? Simplicity. There is flashing and there is not flashing. That&amp;rsquo;s it. Easy to remember, but more importantly, easy (and quick) to recognize. Very important when a car is approaching at 65 mph.&lt;/p&gt;

&lt;p&gt;There comes a point when you&amp;rsquo;re cutting the syntax too fine. When the distinctions between one meaning and another take too much careful examination to distinguish. A good example being the string concat proposals that wanted to use certain whitespace combinations to distinguish, or special uses of quotes. Perl 6 must be careful of this sort of thing as we strive to shove more and more information into just 95 lights (the set of printable ASCII characters). There&amp;rsquo;s a reason the Navy employs highly trained men on those signal lamps.&lt;/p&gt;

&lt;h3 id=&#34;sound-as-syntax-or-grammar&#34;&gt;Sound as Syntax or Grammar&lt;/h3&gt;

&lt;p&gt;Finally, there&amp;rsquo;s sound. I lived in Pittsburgh for a while near a school for blind children and a clinic for the blind. The major intersections for a few blocks around all had the normal walk-don&amp;rsquo;t-walk pedestrian signals, but these are a bit different. Rather than the usual Walk with the green, Don&amp;rsquo;t Walk with the red, it would be Don&amp;rsquo;t Walk in all directions. When Walk came on, all lights would go red and pedestrians could cross in any direction.&lt;/p&gt;

&lt;p&gt;This was accompanied by a distinct, very loud &amp;ldquo;koo-koo&amp;rdquo; sound to let the blind know it was time to cross. Also, there was a speaker at each corner to give them something to walk toward.&lt;/p&gt;

&lt;p&gt;Sound as syntax. It would be interesting to use sound as grammar, especially since we already have a grammar to represent sound (i.e. sheet music). However, I don&amp;rsquo;t know about you, but I&amp;rsquo;m not about to start dragging around a Moog with me to code Perl &amp;hellip; though playing chords to represent code would be neat. Imagine the twisted noises coding a particularly nasty regex might produce.&lt;/p&gt;

&lt;p&gt;Rambling along this thread, it has been reported that London.pm recently attempted to encode DeCSS as an interpretive dance. Perhaps DeCSS will surpass the Tarentella as the &amp;ldquo;Forbidden Dance&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There are also some attempts at translating Perl code to music. I think someone hooked Perl code run through the DNA module into something that generates music from genetic code. But I digress.&lt;/p&gt;

&lt;h3 id=&#34;the-function-of-traffic-lights&#34;&gt;The Function of Traffic Lights&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s think about what traffic lights are used for. Well, they&amp;rsquo;re there to control the flow of traffic. Theoretically, you&amp;rsquo;d want to use them to maximize use of the available roads and get the most cars to their destinations as quickly and efficiently as possible. You&amp;rsquo;d do things like time the lights down a stretch of road so someone going the speed limit never hit a red light. You&amp;rsquo;d want to keep the lights green as long as possible on the major roads at intersections. You&amp;rsquo;ll want sensors to detect when no car is waiting for a red so it can keep the other side green longer. By doing this you&amp;rsquo;ll get everyone coordinated and moving about quickly.&lt;/p&gt;

&lt;p&gt;But then traffic lights can be used for the exact opposite. They can be used to deliberately slow and minimize traffic, say around a school or in a shopping district with lots of pedestrians. Lights will be deliberately set to prevent drivers from going continuously down a road, making them stop often and keeping their awareness up (but perhaps their frustration and gasoline consumption as well). All sides of an intersection can be stopped at once to allow pedestrians to pass safely. Flashing yellows can be employed to warn of a school zone. Lights can be placed at dangerous intersections (or ones where children are known to be about) even though drivers should be able to self-regulate.&lt;/p&gt;

&lt;p&gt;So the same device and features can be combined and used in different ways to produce contradictory effects. Perl 6 must have this nature, as is clearly evident from the wildly differing and contradictory RFCs presented, often in direct opposition to each other. We should design Perl features to be like traffic lights. The same feature can be used for different and contradictory effects. This will ease the pressure to squeeze more and more grammar out of our limited syntax possibilities.&lt;/p&gt;

&lt;p&gt;Oddly enough, varying the number of traffic lights can effect efficiency. By over-regulating you can choke off traffic. Constant fiddling with the setups and timings, trying to control each and every intersection to maximize throughput leads to grid lock, zero throughput. The exact opposite of what was intended.&lt;/p&gt;

&lt;p&gt;We are in danger of doing just that. By wanting to correct, streamline and optimize each bump and snag in Perl we may cross some imaginary line and have syntactical grid lock where the language design descends into a morass of continual minor adjustment. By backing off we can often find a much more sweeping solution than just putting up lights on each corner. A perfect example is Larry&amp;rsquo;s &amp;ldquo;module&amp;rdquo; solution to the Perl 6 vs. Perl 5 interpretation (although it still needs a few extra lights here and there to make it really work).&lt;/p&gt;

&lt;h3 id=&#34;life-without-traffic-lights&#34;&gt;Life without Traffic Lights&lt;/h3&gt;

&lt;p&gt;There is an alternative to all this. I&amp;rsquo;ve been working in Ireland for the past three months, and like most Americans I have met that peculiar English invention, the roundabout. &lt;a href=&#34;#3&#34;&gt;[3]&lt;/a&gt; Three, four, five, even six-way intersections are handled seamlessly by this apparently anarchistic piece of the transportation landscape. All without any traffic lights.&lt;/p&gt;

&lt;p&gt;First few times, I fearfully creeped across, pushing my bike along as a pedestrian, too frightened to try and enter the unending flow of traffic. After a while, and asking around a bit, the underlying rule became obvious: yield to traffic in the circle. With this revelation I was able to zip through confidently. I rather like them now and appreciate how they keep the traffic flowing even for the most complicated intersections. The apparent complexity of the details (lots of cars zipping about, merging and leaving from many points) all stems from a single rule.&lt;/p&gt;

&lt;p&gt;Contrast this with the typical American four-way intersection. Roads placed at right angles, traffic lights poised in each direction. Cars jerk forward hesitantly and the system rapidly breaks down under heavy traffic. Initially easier to learn, anyone can understand a traffic light, but the devilish complexity of right-of-way and subtleties of making a proper left turn betray that what seems at first simple, might actually be clunky in the long run. And that which seems complex and frightening will yield its underlying simplicity with time and experience.&lt;/p&gt;

&lt;p&gt;So the lesson there, aside from &amp;ldquo;roundabouts are neat&amp;rdquo; is about learning curves and the wisdom of focusing design on &amp;ldquo;beginners.&amp;rdquo; While effort must be made to flatten the learning curve, don&amp;rsquo;t short-change the ultimate goal just to make it easier initially. After all, we are only beginners for so long. &lt;a href=&#34;#4&#34;&gt;[4]&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;foot-notes&#34;&gt;Foot Notes&lt;/h3&gt;

&lt;p&gt;&lt;span id=&#34;1&#34;&gt;[1]&lt;/span&gt; It has been decided that &lt;code&gt;.&lt;/code&gt; will be used instead of &lt;code&gt;-&amp;gt;&lt;/code&gt; for method calls in Perl 6. This leaves the problem of how to concatenate strings. Everyone and their dog seemed to have a proposal on the perl6-language mailing list, all of them a bit contrived as we&amp;rsquo;ve run out of characters.&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;2&#34;&gt;[2]&lt;/span&gt; It has been reported by two sources that there is a flashing green light outside of Boston that meant &amp;ldquo;this light will rarely go red.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;3&#34;&gt;[3]&lt;/span&gt; Some may call them &amp;ldquo;traffic circles.&amp;rdquo; Most Americans know them best from &amp;ldquo;National Lampoon&amp;rsquo;s European Vacation&amp;rdquo; (&amp;ldquo;Look kids! Big Ben, Parliament!&amp;rdquo;) They&amp;rsquo;re used in a couple places in the U.S.: Oregon, Florida, New England. &amp;ldquo;&lt;a href=&#34;http://www.engr.orst.edu/~taekrtha/round.html%0A&#34;&gt;Modern Roundabouts&lt;/a&gt;&amp;rdquo; gives a nice explanation and visualization from an American point-of-view (i.e. the right side of the road).&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;4&#34;&gt;[4]&lt;/span&gt; Of course, this can get a little out of hand: &amp;ldquo;&lt;a href=&#34;http://www.swindonweb.com/life/lifemagi0.htm%0A&#34;&gt;Swindon&amp;rsquo;s Magic Roundabout&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

