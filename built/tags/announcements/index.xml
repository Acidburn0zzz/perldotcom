<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Announcements on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/announcements/</link>
    <description>Recent content in Announcements on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jul 2010 06:00:01 -0800</lastBuildDate>
    <atom:link href="/tags/announcements/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Welcome Rakudo Star</title>
      <link>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</link>
      <pubDate>Thu, 29 Jul 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.perl6.org/&#34;&gt;Perl 6&lt;/a&gt; has evolved over a long time. As originally conceived, it was to be a modest cleanup of Perl 5 semantics and implementation. By shrugging off a few of the less desirable features and misfeatures, Perl the language could evolve in new ways.&lt;/p&gt;

&lt;p&gt;As it turns out, a language is more than a bundle of features. It&amp;rsquo;s a set of design principles which govern interlocking syntax and semantics and idioms. The greater the internal consistency of that philosophy, the greater the coherence of the language and its community and its ecosystem.&lt;/p&gt;

&lt;p&gt;Given the chance to reinvent Perl one more time (the first reinvention was Perl 4 to Perl 5), could the community produce a language which could evolve to meet the needs of programmers for at least the next twenty years? Could we do so without all of the pain and tension between the need to retain backwards compatibility and the desire to improve based on real world experiences?&lt;/p&gt;

&lt;p&gt;That task was larger than any of us could have predicted, but the results (Perl&amp;rsquo;s testing culture! Roles! Moose! Grammars!) demonstrate their utility even now, even in the Perl 5 world. Both languages feed off of the other. Both languages help us to research and define and refine what Perl is and what Perl can be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.07&#34;&gt;Rakudo Star&lt;/a&gt; is a milestone in that process. We&amp;rsquo;re proud of what we&amp;rsquo;ve accomplished, and we&amp;rsquo;ve reached a point where we want to share it with the wider world.&lt;/p&gt;

&lt;p&gt;People will complain. They don&amp;rsquo;t like twigils. (They don&amp;rsquo;t like sigils!) All they ever wanted was a better object system. They hate operators or Unicode operators. They don&amp;rsquo;t want to learn how multiple dispatch works. They miss the CPAN. They prefer homoiconicity of syntax. They feel betrayed that after ten years, Rakudo Star is the first of several distribution releases and not the final, it&amp;rsquo;s completely finished that&amp;rsquo;s it, install it to run your space station, release&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; as if designing a language intended to evolve and change and adapt over the next several decades were a simple, three-month task to produce a perfect, static, never-needs-updating specification. (Implementation is merely a matter of hiring enough typists, you see.)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s neither what Perl 6 is nor how it works. What matters now is that you—yes, you—can download and install and play with Perl 6 right now. It&amp;rsquo;s not complete, whatever that means. It&amp;rsquo;s not finished, because twenty years from now we&amp;rsquo;ll still release new versions to meet needs that we can&amp;rsquo;t possibly predict right now.&lt;/p&gt;

&lt;p&gt;What we &lt;em&gt;can&lt;/em&gt; do is figure out what &lt;em&gt;you&lt;/em&gt; need. What works for you? What doesn&amp;rsquo;t? Are there bugs to fix? Are there particular optimizations you&amp;rsquo;d like to see? (Our next big task is optimization.) Now begins the work of polishing. What can we do to make Perl 6 even more amazing for you for the next release of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo&lt;/a&gt; and the next and the next and the next?&lt;/p&gt;

&lt;p&gt;Set aside your assumptions. Try Perl 6 yourself with Rakudo Star. Perl in every form is the work of a community willing to make amazing things happen. That task continues—help us make Perl more powerful, more flexible, more useful, and more fun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

