<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakudo on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/rakudo/</link>
    <description>Recent content in Rakudo on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2015 19:08:59 +0000</lastBuildDate>
    <atom:link href="/tags/rakudo/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to get Perl 6 now</title>
      <link>http://localhost:1313/article/207/2015/12/31/How-to-get-Perl-6-now/</link>
      <pubDate>Thu, 31 Dec 2015 19:08:59 +0000</pubDate>
      
      <guid>http://localhost:1313/article/207/2015/12/31/How-to-get-Perl-6-now/</guid>
      <description>

&lt;p&gt;Great news, Perl 6 was &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/25/christmas-is-here/&#34;&gt;released&lt;/a&gt; on Christmas Day; finally us geeks got something we wanted for Christmas. Send the books back Grandma! (unless you got &lt;a href=&#34;http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review&#34;&gt;Modern Perl&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;installation-on-linux-osx&#34;&gt;Installation on Linux, OSX&lt;/h3&gt;

&lt;p&gt;On Linux and Mac the easiest way to get Perl 6 is with &lt;a href=&#34;https://github.com/tadzik/rakudobrew&#34;&gt;rakudobrew&lt;/a&gt;. You&amp;rsquo;ll need the typical software development tools like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;. On OSX Apple&amp;rsquo;s &lt;a href=&#34;https://developer.apple.com/opensource/&#34;&gt;Command Line Tools app&lt;/a&gt; provides most of these and is easy to install. On Linux they&amp;rsquo;re available via the package manager. Once you have the prerequisite tools installed, you can install rakudobrew via the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/tadzik/&lt;/span&gt;rakudobrew &lt;span style=&#34;color:#f92672&#34;&gt;~/.&lt;/span&gt;rakudobrew
$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.rakudobrew/&lt;/span&gt;bin:$PATH
$ rakudobrew build moar
$ rakudobrew build panda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install &lt;code&gt;perl6&lt;/code&gt; and &lt;code&gt;panda&lt;/code&gt; the Perl 6 package manager.&lt;/p&gt;

&lt;h3 id=&#34;installation-on-windows&#34;&gt;Installation on Windows&lt;/h3&gt;

&lt;p&gt;On Windows it&amp;rsquo;s a different story. I was unable to get rakudobrew to work on Windows, which is a shame as it&amp;rsquo;s such a convenient tool. If you&amp;rsquo;re feeling adventurous, you can &lt;a href=&#34;http://perltricks.com/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013&#34;&gt;build your own Perl 6 with Visual Studio&lt;/a&gt;. Sinan Unur has &lt;a href=&#34;https://www.nu42.com/2015/12/perl6-rakudo-released.html&#34;&gt;blogged&lt;/a&gt; about building panda with the same toolset.&lt;/p&gt;

&lt;p&gt;Alternatively you can use the latest &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;Rakudo Star distribution&lt;/a&gt; which comes with a convenient &lt;code&gt;.msi&lt;/code&gt; installer. Unfortunately the most recent Rakudo Star distribution is from September, so you won&amp;rsquo;t benefit from the last 3 months of updates to Perl 6 (a new version should be available soon). If you&amp;rsquo;ve installed Rakudo Star, you&amp;rsquo;ll need to add the Perl 6 binaries to your path. You can do that using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; SETX PATH &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%PATH%;C:\rakudo\bin&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now start a new &lt;code&gt;cmd.exe&lt;/code&gt; terminal, and you&amp;rsquo;ll be use Perl 6. Rakudo Star ships with Panda too, so you&amp;rsquo;ll be able to start installing Perl 6 modules right away.&lt;/p&gt;

&lt;h3 id=&#34;useful-perl-6-resources&#34;&gt;Useful Perl 6 resources&lt;/h3&gt;

&lt;p&gt;So you&amp;rsquo;ve got Perl 6 installed, now what? To keep up to date with Perl 6 developments, I read the &lt;a href=&#34;https://p6weekly.wordpress.com/&#34;&gt;Perl 6 Weekly&lt;/a&gt; blog. The &lt;a href=&#34;http://perlweekly.com/&#34;&gt;Perl Weekly&lt;/a&gt; newsletter also includes Perl 6 articles, so be sure to subscribe if you haven&amp;rsquo;t already. The official website &lt;a href=&#34;http://perl6.org/&#34;&gt;Perl6.org&lt;/a&gt; is a good reference for all things Perl 6 related. Wendy has posted a &lt;a href=&#34;https://wendyga.wordpress.com/2015/12/25/why-would-you-want-to-use-perl-6-some-answers/&#34;&gt;useful list&lt;/a&gt; of Perl 6 features.&lt;/p&gt;

&lt;p&gt;Here at PerlTricks.com, we&amp;rsquo;ve got several Perl 6 articles that may be of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;How to create a Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6&#34;&gt;Parsing Perl 5 Pod with Perl 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/136/2014/11/20/Get-started-with-Perl-6-one-liners&#34;&gt;Get started with Perl 6 One Liners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse&#34;&gt;How to run Perl 6 tests with prove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim&#34;&gt;Activate Perl 6 syntax highlighting in Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - Visual Studio article now includes instructions for VS2015. Added link to nu42.com. 2016-01-04&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Script-fu: how to raise 641 request tracker tickets</title>
      <link>http://localhost:1313/article/174/2015/5/12/Script-fu--how-to-raise-641-request-tracker-tickets/</link>
      <pubDate>Tue, 12 May 2015 12:54:26 +0000</pubDate>
      
      <guid>http://localhost:1313/article/174/2015/5/12/Script-fu--how-to-raise-641-request-tracker-tickets/</guid>
      <description>

&lt;p&gt;I spent most of the NYC Perl Hackathon (thanks Bloomberg!) hacking on Perl 6 stuff. Led by Will &amp;ldquo;Coke&amp;rdquo; Coleda, one of the tasks for the group was to find skip/todo directives that were missing Request Tracker (RT) ticket numbers in the Perl 6 test suite.&lt;/p&gt;

&lt;p&gt;A typical skip/todo directive looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#?rakudo todo &amp;#34;doesn&amp;#39;t work yet due to copying of arrays&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells Rakudo to skip the following block of tests. For each skip/todo directive, a new RT ticket had to be raised and the ticket number added to the skip directive line in the test file, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#?rakudo todo &amp;#34;doesn&amp;#39;t work yet due to copying of arrays RT #99999&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes it easier for the Rakudo team to identify the remaining bugs or missing features in Rakudo.&lt;/p&gt;

&lt;p&gt;I cloned the Perl 6 test suite, roast and after working through the workflow for reporting a single ticket, I wondered how many other skip/todo directives were missing RT tickets. To find out, I used a little &lt;code&gt;grep&lt;/code&gt; magic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ grep &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rlP &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#?rakudo.+?(?:skip|todo)(?:(?!RT).{2})+$&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; wc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells grep to recursively search for files in the current directory, and for each file, print the filename if the Perl-style regex matches the text in the file. The regex matches Rakudo skip/todo directives that didn&amp;rsquo;t already have an RT reference. The output of grep is then passed to &lt;code&gt;wc&lt;/code&gt; in order to count the number of files. Turns out there were 236 files affected, and this method didn&amp;rsquo;t even count the number of occurrences &lt;em&gt;within&lt;/em&gt; a file. Even if it took 5 minutes per file to raise the ticket on RT, update the file, commit the change and issue a pull request, that&amp;rsquo;s still 20 hours of work. It gets more complicated when you have to apportion that work between several people. At this point my spidey sense was tingling &amp;hellip; can you say &amp;ldquo;automation&amp;rdquo;?&lt;/p&gt;

&lt;h3 id=&#34;using-a-machine-to-raise-rt-tickets-like-a-machine&#34;&gt;Using a machine to raise RT tickets &amp;ldquo;like a machine&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;I wrote a quick script to find all the skip/todo directives again, only this time I would capture the filename, line number and description:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

scan_directory(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scan_directory&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($dir) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  opendir(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$dir&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (readdir $dh)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $newpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$dir/$_&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $newpath &lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^\.\/&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l $newpath;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d $newpath &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $newpath &lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\.$/&lt;/span&gt;)
    {
      scan_directory($newpath);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f $newpath)
    {
      open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $newpath &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to open $newpath $!\n&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$file&amp;gt;&lt;/span&gt;)
      {
        chomp;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;/^#\?rakudo.+?(?:skip|todo)((?:(?!RT).)+)$/&lt;/span&gt;)
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Roast rakudo skip/todo test:%s line:%s reason:%s&amp;#34;&lt;/span&gt;,
            $newpath, $line_num, $1;

         $subject &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/&amp;#34;//g&lt;/span&gt;;

          &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`rt create -t ticket set subject=&amp;#34;$subject&amp;#34; queue=perl6 priority=0`&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($response &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/([0-9]+)/&lt;/span&gt;)
          {
            printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s RT#:%s\n&amp;#34;&lt;/span&gt;, $subject, $1;
          }
          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
          {
            die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to capture ticket # for $subject response: $response&amp;#34;&lt;/span&gt;;
          }
        }
        $line_num&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
      close $file;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script is fairly simple: it&amp;rsquo;s a recursive directory scanner that scans files for Rakudo skip/todo blocks. The script uses the following line of code with backticks to execute the &lt;code&gt;rt&lt;/code&gt; command line program, raise a ticket in the Perl 6 queue and captures the response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`rt create -t ticket set subject=&amp;#34;$subject&amp;#34; queue=perl6 priority=0`&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script then extracts the RT ticket number from the &lt;code&gt;$response&lt;/code&gt;, and prints out a line containing the filename, line number, description and the RT ticket number. I saved this output in a separate file&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-quick-note-on-configuring-rt-cli&#34;&gt;A quick note on configuring RT CLI&lt;/h3&gt;

&lt;p&gt;Configuring and using the RT command line client is simple, but finding out how to do it can be a hard - most of the sources I looked at were out of date, and the &lt;a href=&#34;https://metacpan.org/search?q=RT&amp;amp;size=20&#34;&gt;RT CPAN namespace&lt;/a&gt; has so many burned-out carcasses that Mad Max would be comfortable there. To use the command line client, first install RT::Client::CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan RT::Client::CLI&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then login to the RT Perl &lt;a href=&#34;http://rt.perl.org/&#34;&gt;website&lt;/a&gt; and go to user &lt;a href=&#34;https://rt.perl.org/User/Prefs.html&#34;&gt;preferences&lt;/a&gt; and set a CLI password. Finally, create the file &lt;code&gt;.rtrc&lt;/code&gt; in your home directory. This file should contain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server https://rt.perl.org/
user rt_username
passwd rt_cli_password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;code&gt;rt_username&lt;/code&gt; with whatever name shows as the top of the RT screen under &amp;ldquo;logged in as&amp;rdquo;. For me it&amp;rsquo;s my email address. Also replace &lt;code&gt;rt_cli_password&lt;/code&gt; with the CLI password you just set. Alternatively instead of a config file, you can use the following environment variables: RTSERVER, RTUSER and RTPASSWD.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it, RT is now configured! Try out some &lt;a href=&#34;http://requesttracker.wikia.com/wiki/CLI&#34;&gt;commands&lt;/a&gt;. &lt;a href=&#34;https://www.safaribooksonline.com/library/view/rt-essentials/0596006683/ch04.html&#34;&gt;Chapter 4&lt;/a&gt; from the RT Essentials book was also useful.&lt;/p&gt;

&lt;h3 id=&#34;updating-roast&#34;&gt;Updating roast&lt;/h3&gt;

&lt;p&gt;Now that I had the RT ticket numbers I needed to go back and add them to the skip/todo directives in the unit test files in roast. I scripted that too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tickets, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./tickets&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$tickets&amp;gt;&lt;/span&gt;)
{
  chomp $line;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($filename, $line_num, $reason, $ticket_num) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/:(.+?) .+?:(.+?) .+?:(.+?) .+?:(.+?)$/&lt;/span&gt;)
  {
    open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $filename &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to open $filename $!\n&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @lines;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$file&amp;gt;&lt;/span&gt;)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $line_num)
      {
        chomp $line;
        $line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/(&amp;#39;|&amp;#34;)\s*$/ RT #$ticket_num$1\n/&lt;/span&gt;;
      }
      push @lines, $line;
      $counter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    close $file;

    open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, $filename &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to open $filename $!\n&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@lines)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $output_file $_;
    }
    close $output_file;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to match $line!\n&amp;#34;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This took a couple of attempts to get right. At first I thought I would try using &lt;code&gt;open&lt;/code&gt; with an awesome read/write filehandle using &lt;code&gt;+&amp;lt;&lt;/code&gt; but that turned out to be more trouble than it was worth. The other challenge was inserting the RT ticket number within the quoted string on the line, rather than outside of it. So this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#?rakudo todo &amp;#34;doesn&amp;#39;t work yet due to copying of arrays&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Would become this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#?rakudo todo &amp;#34;doesn&amp;#39;t work yet due to copying of arrays RT #124652&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The challenge here is that different descriptions use different delimiters to capture the description, either single or double quotes. In the script, this line handles that problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/(&amp;#39;|&amp;#34;)\s*$/ RT #$ticket_num$1\n/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s a substitution regex that captures the last quoting delimiter on the line, and replaces that with the RT ticket number plus the captured delimiter (&lt;code&gt;$1&lt;/code&gt;). It worked!&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;In the end I raised 641 tickets across 236 test files in roast, for about 2 hours of work. And most of that was spent trying to configure the RT command line client. One thing to keep in mind with raising hundreds of tickets is email notification. Luckily for me Robert Spier intercepted the mailsend (thanks Robert!), but it would be great if there was a way to avoid creating hundreds of notifications when raising tickets. If there&amp;rsquo;s a way, I&amp;rsquo;d love to know how.&lt;/p&gt;

&lt;p&gt;Thanks to Will &amp;ldquo;Coke&amp;rdquo; Coleda, Tobias Leich (FROGGS) and Christian Bartolomäus (usev6) for reviewing the pull request and doing the work of merging it. If you&amp;rsquo;re interested in supporting Perl 6, the Rakudo team have a &lt;a href=&#34;http://rakudo.org/how-to-help/&#34;&gt;page&lt;/a&gt; explaining way to contribute. I&amp;rsquo;d also recommend looking at the Perl 6 community &lt;a href=&#34;http://perl6.org/community/&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re based in New York or in the North-East of America, I&amp;rsquo;ll be at the &lt;a href=&#34;http://mini-conf.com&#34;&gt;Miniconf&lt;/a&gt; hackathon on June 6th, leading a team to convert Perl 5 modules to Perl 6. Hope to see everyone there!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get started with Perl 6 one liners</title>
      <link>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</link>
      <pubDate>Thu, 20 Nov 2014 14:04:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</guid>
      <description>

&lt;p&gt;One thing that sets Perl apart from other languages is the ability to write small programs in a single line of code, known as a &amp;ldquo;one liner&amp;rdquo;. It&amp;rsquo;s often faster to type a program directly into the terminal than to write a throwaway script. And one liners are powerful too; they&amp;rsquo;re complete Perl programs that can load external libraries but also integrate into the terminal. You can pipe data in or out of a one liner.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Perl 6 supports one liners. And in the same way Perl 6 cleaned up Perl 5&amp;rsquo;s warts elsewhere, the one liner syntax is also better. It&amp;rsquo;s cleaner with fewer special variables and options to memorize. This article aims to get you up-and-running with Perl 6 one liners.&lt;/p&gt;

&lt;h3 id=&#34;the-basics&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;To get started with one liners, all you really need to understand is the &lt;code&gt;-e&lt;/code&gt; option. This tells Perl to execute what follows as a program. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl6 -e &#39;say &amp;quot;Hello, World!&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s step through this code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;perl6&lt;/code&gt; invokes the Perl 6 program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; tells Perl 6 to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;say &amp;quot;Hello, World!&amp;quot;&#39;&lt;/code&gt; is the program. Every program must be surrounded in single quotes (except on Windows, see (&lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners#converting-for-windows&#34;&gt;converting for Windows&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run a one-liner, just type it into the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say &amp;#34;Hello, World!&amp;#34;&amp;#39;&lt;/span&gt;
Hello, World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;file-processing&#34;&gt;File processing&lt;/h3&gt;

&lt;p&gt;If you want to load a file, just add the path to the file after the program code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program prints every line in &lt;code&gt;/path/to/file.txt&lt;/code&gt;. You may know that &lt;code&gt;$_&lt;/code&gt; is the default variable, which in this case is the current line being looped through. &lt;code&gt;lines&lt;/code&gt; is a list that is automatically created for you whenever you pass a filepath to a one-liner. Now let&amp;rsquo;s re-write that one liner, step-by-step. These one liners are all equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { $_.say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { .say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for (lines)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for lines&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like &lt;code&gt;$_&lt;/code&gt; is the default variable, methods called on the default variable can omit the variable name. They become default methods. So &lt;code&gt;$_.say&lt;/code&gt; becomes &lt;code&gt;.say&lt;/code&gt;. This brevity pays off with one liners - it&amp;rsquo;s less typing!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; option changes the behavior of the program: it executes the code once for every line of the file. To uppercase and print every line of &lt;code&gt;/path/to/file.txt&lt;/code&gt; you can type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.uc.say&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option is just like &lt;code&gt;-n&lt;/code&gt; except that it will automatically print &lt;code&gt;$_&lt;/code&gt;. This means that another way we could uppercase a file would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$_ = $_.uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or by applying a shortcut, this does the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.=uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options are really useful and often spare the programmer from extra typing.&lt;/p&gt;

&lt;h3 id=&#34;load-modules&#34;&gt;Load modules&lt;/h3&gt;

&lt;p&gt;The final thing you should know is how to load a module. This is really powerful as you can extend Perl 6&amp;rsquo;s capabilities by importing external libraries. The &lt;code&gt;-M&lt;/code&gt; switch stands for load module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code &lt;code&gt;-M URI::Encode&lt;/code&gt; loads the URI::Encode module, which exports the &lt;code&gt;encode_uri&lt;/code&gt; subroutine. It prints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;%2F10%20ways%20to%20crush%20it%20with%20Perl%206&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if you have a module that is not installed in a standard location? In this case using &lt;code&gt;-M&lt;/code&gt; alone won&amp;rsquo;t work, as Perl won&amp;rsquo;t find the module. For these scenarios, just pass use the &lt;code&gt;-I&lt;/code&gt; switch to include the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I lib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;www.example.com/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Perl 6 will search for URI::Encode in &lt;code&gt;lib&lt;/code&gt; as well as the standard install locations.&lt;/p&gt;

&lt;p&gt;Finally, if you want a summary of all of these options, just use the &lt;code&gt;-h&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    With &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; arguments, enters a REPL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; With a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[programfile]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-e&amp;#34;&lt;/span&gt; option, compiles the given program &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; by default also executes the compiled code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
 
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c                   check syntax only (runs &lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHECK&lt;/span&gt; blocks)
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc                extract documentation &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; it as text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e program           one line of program
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help           display this help text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n                   run program once &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each line of input
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p                   same as &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n, but also &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $_ at the end of lines
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I path              adds the path to the module search path
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M module            loads the module prior to running the program
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[stage]     specify compilation stage to emit
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;optimize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[level]   &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; the given level of optimization (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[flags]  enable trace flags, see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parrot --help-debug&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[mode]    specify string encoding mode
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[name]  specify name of output file
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version        display version information
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;stagestats         display time spent in the compilation stages
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exception       display a low level backtrace on errors
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; profile information to standard error
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[module]       Use Pod::To::[module] to render inline documentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
     
    Note that only boolean single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter options may be bundled&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    Output from &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile can be visualized by kcachegrind&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    To modify the include path, you can set the PERL6LIB environment variable:

    PERL6LIB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt; perl6 example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

    For more information, see the perl6(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) man page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article was adapted from my open source &lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners&#34;&gt;book&lt;/a&gt;, which has lots of example Perl 6 one liners, many of which were contributed by the Perl 6 community. If you&amp;rsquo;re interested in learning more Perl 6, I&amp;rsquo;d recommend visiting the official &lt;a href=&#34;http://perl6.org/&#34;&gt;website&lt;/a&gt;, which has links to the IRC channel and official documentation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Perl 6 with Visual Studio 2013</title>
      <link>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</link>
      <pubDate>Tue, 18 Nov 2014 13:34:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</guid>
      <description>

&lt;p&gt;I think the last time I tried playing around with anything related to Perl 6 was at least two years ago. Recently, &lt;a href=&#34;https://fosdem.org/2015/schedule/event/get_ready_to_party/&#34;&gt;an understated entry&lt;/a&gt; in Fosdem &amp;lsquo;15 schedule caught the Perl community&amp;rsquo;s attention:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The last pieces are finally falling into place. After years of design and implementation, 2015 will be the year that Perl 6 officially launches for production use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since then, Microsoft made &lt;a href=&#34;http://blog.nu42.com/2014/11/64-bit-perl-5201-with-visual-studio.html&#34;&gt;Visual Studio 2013 freely available&lt;/a&gt; for individuals and small teams. Up to this point, I had been using the compiler that comes with Windows SDK 7.1 with decent results, but, of course, couldn&amp;rsquo;t resist the temptation to build Perl 5.20.1 with the new compiler.&lt;/p&gt;

&lt;p&gt;This was followed by an encouraging question from &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2m3t6s/%CE%BD42_64bit_perl_5201_with_visual_studio_2013/cm1iqnb&#34;&gt;David Farrell&lt;/a&gt;: &amp;ldquo;Have you thought about compiling Rakudo?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I hadn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;I had been anticipating too many headaches from not using *nix tools, but I decided to give it a shot. Perl 6 really couldn&amp;rsquo;t be ready enough that I could just get the source and build it, could it?&lt;/p&gt;

&lt;p&gt;I started with Rakudo Star - a Perl 6 distribution that bundles some useful modules and a package manager. I downloaded &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;rakudo-star-2014.09.tar.gz&lt;/a&gt;, extracted it and ran the configure script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;C:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Src&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configures Perl 6 to use &lt;a href=&#34;http://moarvm.com/&#34;&gt;MoarVM&lt;/a&gt;, one of several virtual machines that Perl 6 can be built for. From that point on, it was just a matter of following a few prompts and soon I had a &lt;code&gt;perl6&lt;/code&gt; that was churning through the specification tests.&lt;/p&gt;

&lt;p&gt;Those did take a while. In the end there were about a dozen test failures which represent a tiny fraction of the total number of tests.&lt;/p&gt;

&lt;h3 id=&#34;compiling-rakudo-from-source&#34;&gt;Compiling Rakudo from source&lt;/h3&gt;

&lt;p&gt;Using the two months old Rakudo Star distribution left me wanting more. So I headed over to &lt;a href=&#34;https://github.com/rakudo/rakudo/&#34;&gt;Rakudo&amp;rsquo;s GitHub repository&lt;/a&gt; and proceeded to checkout and build the default branch.&lt;/p&gt;

&lt;p&gt;If you want to build Rakudo from source you will need &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; for this to work. There are several options available, including &lt;a href=&#34;https://windows.github.com/&#34;&gt;GitHub Windows&lt;/a&gt; and &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;. I prefer to use &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; versions of *nixy utilities by adding Cygwin&amp;rsquo;s executable locations &lt;em&gt;last&lt;/em&gt; in my &lt;code&gt;%PATH%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a version of Git installed, these are the steps to follow:&lt;/p&gt;

&lt;p&gt;Open a &amp;ldquo;VS2013 x64 Native Tools Command Prompt&amp;rdquo;. You can find the shortcuts under &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\Shortcuts&lt;/code&gt; (with Visual Studio 2015, the shortcut is under: &lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Visual Studio 2015\Visual Studio Tools\Windows Desktop Command Prompts&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Run the following commands to get the Rakudo source and build it for MoarVM:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/rakudo/&lt;/span&gt;rakudo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cd rakudo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nqp &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;backends&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;C:&lt;span style=&#34;color:#e6db74&#34;&gt;/opt/&lt;/span&gt;Perl6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N.B. Make sure this is a native Windows &lt;code&gt;perl&lt;/code&gt;, not a Cygwin version in case you have those on the path. If you want to be absolutely certain, specify the full path. E.g., in my case, &lt;code&gt;C:\opt\perl-5.20.1\bin\perl Configure.pl ...&lt;/code&gt;. You may also have to adjust the &lt;code&gt;--prefix&lt;/code&gt; path to suit your system.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;Configure.pl&lt;/code&gt; will pull in the rest of the components necessary to build Rakudo. The rest is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake test
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake spectest
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run spectest only if you are really patient or curious. When those tests were done, I had seven spectest failures. I didn&amp;rsquo;t care much about those at this point. My purpose was to have a &lt;code&gt;perl6&lt;/code&gt; working well enough to let me try, (for the first time ever!), some Perl 6 examples.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;Perl6\bin&lt;/code&gt; path to your user path. If everything worked as smoothly as it did for me, try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v
This is perl6 version &lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gf8f6feb built on MoarVM version
&lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g05b25a6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just for fun:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Hello World!&amp;#39;.say&amp;#34;&lt;/span&gt;
Hello World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;installing-perl-6-modules&#34;&gt;Installing Perl 6 Modules&lt;/h3&gt;

&lt;p&gt;What is Perl without the ability to exploit other people&amp;rsquo;s hard work for your gain?&lt;/p&gt;

&lt;p&gt;Perl 6, just like Perl 5, has a module system. You can find contributed modules at &lt;a href=&#34;http://modules.perl6.org/&#34;&gt;modules.perl6.org&lt;/a&gt;, and install them using &lt;a href=&#34;https://github.com/tadzik/panda/&#34;&gt;panda&lt;/a&gt;. Unfortunately bootstrapping panda didn&amp;rsquo;t work for me due to &lt;a href=&#34;https://github.com/tadzik/File-Find/blob/master/t/01-file-find.t&#34;&gt;test failures with File::Find&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am not sure if these indicate problems with the underlying library, or problems with the way tests are written. I suspect the latter, but that will have to wait. In the mean time, I will &lt;a href=&#34;http://perl6.org/documentation/&#34;&gt;explore the basic language&lt;/a&gt; to get a better feel for Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - added VS2015 instructions. 2016-01-04&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Carl Mäsak</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</link>
      <pubDate>Tue, 31 Aug 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</guid>
      <description>&lt;p&gt;Carl Mäsak is a developer of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt; and arguably the most dedicated bug wrangler. He&amp;rsquo;s contributed to more bug reports than anyone else. If you find that Rakudo does not do as you expect, you&amp;rsquo;ll likely talk to him on #perl6 for help triaging and categorizing your bug.&lt;/p&gt;

&lt;p&gt;In his own words, here&amp;rsquo;s how he&amp;rsquo;s helped make Perl 6 real.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent my teens learning programming by writing hundreds of small graphical games in BASIC. A combination of university studies and employment has given me a more solid foundation in programming, but I&amp;rsquo;m still catching up on the theory in many places.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helping bring it from the world of ideas into the world of implementations. As part of that, helping build up all the things around the implementations: libraries, tooling, documentation, culture. Making Perl 6 practically usable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got pulled in during the early Pugs days in 2005, but only staying on the outskirts of the community. I saw with regret how the Pugs development slowed and stopped during 2007, and with growing excitement how the Rakudo development got going in 2008. My real entrance as a contributor was that summer, when I secretly co-wrote &lt;a href=&#34;http://november-wiki.org/&#34;&gt;a wiki engine on top of Rakudo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A wiki engine (November), a 3-d connection game (&lt;a href=&#34;http://github.com/masak/druid/&#34;&gt;Druid&lt;/a&gt;), a Perl 6 project installer (&lt;a href=&#34;http://github.com/masak/proto/&#34;&gt;proto&lt;/a&gt;), a set of web development modules (&lt;a href=&#34;http://github.com/masak/web/&#34;&gt;Web.pm&lt;/a&gt;), a grammar engine (&lt;a href=&#34;http://github.com/masak/gge/&#34;&gt;GGE&lt;/a&gt;), and a dozen smaller modules and projects.&lt;/p&gt;

&lt;p&gt;I also occasionally contribute commits to Rakudo, to the Perl 6 specification, and I regularly blog about the progress and culture of Perl 6. My biggest single contribution is probably submitting hundreds of Rakudo bugs that I or others have found in the course of using Rakudo Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just remember being awed by the visionary tone and promise of the Apocalypses as they were rolled out. I no longer have any memory of like one particular feature more than the others. Since I program more in Perl 6 than in any other language nowadays, I tend to take them for granted. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the new regex/grammar features will be so attractive that other languages won&amp;rsquo;t be able to keep their grubby hands off them. Of course, they also won&amp;rsquo;t get the pervasiveness of regexes and grammars just by tacking them onto an existing language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primarily the extremely low amounts of vandalism, considering that hundreds of people have write access to the documents which specify the language itself. Accidental damage is also often quickly corrected, and more subtle errors get discovered and corrected in a wiki-like manner in the long term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also gained a new respect for what a &amp;ldquo;holistic&amp;rdquo; process the design of a language such as Perl 6 can be sometimes. Whether some feature turns out to be a good idea is determined by dozens of minute interactions in the spec, not all of them &amp;ldquo;local&amp;rdquo;, and some of them outright emergent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hard way. :-) By trying to express every new thought I have and seeing what fails: Perl 6, Rakudo, or my thought. I&amp;rsquo;m still learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come to &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt;. Familiarize yourself with &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;. Get a pet project. Experiment. Have fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not qualified to fully answer that. The one piece of the puzzle I do have is that some pieces of software out there are stale and dead, whereas others are limber, extensible and moving. It&amp;rsquo;s important to design for the eventuality that the user of the language knows best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A number of small, sometimes contradictory criteria. It gets the job done. It&amp;rsquo;s down-to-earth rather than abstraction-laden. It&amp;rsquo;s practical rather than orthogonal. It&amp;rsquo;s often consistent in strange and unexpected ways. It favours you rather than the compiler implementor. It goes an extra mile to be user friendly rather than cryptic. It doesn&amp;rsquo;t oversimplify. It encapsulates some linguistic notion. It scales with your needs. It&amp;rsquo;s as much about language culture as it is about language implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sub/method signatures, the type system, grammars, extending the language, the metamodel&amp;hellip; all of these make things that were possible but tricky or ugly before downright easy or beautiful. Perl 5 can do a whole lot of the above things using modules, but with Perl 6 you get them out-of-the-box, and fully integrated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most await before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to more speed and stability in the existing implementations, mostly in Rakudo. I think excellent database and web support will create great changes in the way Perl 6 is used and presented.&lt;/p&gt;

&lt;p&gt;As for actual features, I&amp;rsquo;m excited that &lt;a href=&#34;http://perlcabal.org/syn/S09.html&#34;&gt;Synopsis 9&lt;/a&gt; might be mostly implemented this year—it contains a lot of exciting syntactic sugar.&lt;/p&gt;

&lt;p&gt;Also very much looking forward to playing with macros—I&amp;rsquo;ve been waiting five years for them now! :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m delighted that what drives Rakudo development and makes it efficient is the fact that the group of people organized around it are able to communicate their needs and abilities, able to delegate as well as do large chunks of work in isolation as called for by the situation. I&amp;rsquo;m thinking of Patrick when I say that, but I see those traits in others as well.&lt;/p&gt;

&lt;p&gt;It also doesn&amp;rsquo;t hurt that those of us involved in development form an increasingly knit-together group of people who enjoy each other&amp;rsquo;s company, not only on IRC but away from the keyboard as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the time before it gets the obvious the-more-the-better features— stability and speed—what Rakudo needs most is people who are brave enough to deploy it in new and interesting situations. It is still the case that when we try new things with Rakudo, we discover new bugs and corner cases, and as a result the whole development process benefits. So we need people who want to break new ground.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you mean the name, there&amp;rsquo;s no consensus yet. Suggestions welcome. All we agree on is that Rakudo Nova might not fly, Rakudo Neutron Star sounds a bit heavy, and Rakudo Black Hole would kinda suck.&lt;/p&gt;

&lt;p&gt;As for what features come next after Rakudo Star, I think an important part of the development after the Rakudo Star release will be to get feedback from people who use it, in order to know better what to focus on next. I know the core devs have some ideas, but there&amp;rsquo;s also room for course corrections. Whether the next distribution release will be after half a year, a full year, or some other timespan, depends a lot on that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A future version of Perl 6 the specification? The mind boggles. I think I don&amp;rsquo;t have any further demands on the specification than what we already have in there. I&amp;rsquo;m fully occupied trying to think up ways to abuse the features from the current spec as they come online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to agree that the #perl6 channel on freenode is a generally friendly place. It&amp;rsquo;s at least partly the result of conscious effort. On the &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;perl6-* emailing lists&lt;/a&gt; you will at times see the most informative and friendly RTFM emails you&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s still an open question for me is how these community features will scale, as the ratio of newbies to regulars skyrockets, as the frequently asked questions become more frequent, and as Perl 6 enters an &amp;ldquo;Eternal September&amp;rdquo; phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tend to get involved in the discussion about them. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear in retrospect that we should have started both Rakudo and Pugs in 2001, not years later. Of course, we had neither the knowledge we do today, nor the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being curious about Perl 6, by writing their first little script, by finding a module (new or extant) to work on, by reporting bugs or proposing enchancements in Rakudo or the various projects, by bringing interesting discussions to the channel, by interacting with the community, and by being nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most misconceptions seem to me to be merely the result of a deplorable lack of correct information, mixed with blindly cargo-culted mockery.&lt;/p&gt;

&lt;p&gt;Some people seem to think that working on a language design for ten years, adapting it both to new ideas and to the feedback from implementations, in itself qualifies as a failure of some sort. I see a language growing both more real and more realistic every day.&lt;/p&gt;

&lt;p&gt;Some people haven&amp;rsquo;t been reached by the news that we actually have runnable implementations of Perl 6, and have had so for the past five years. Those people usually become very happy to hear that we do.&lt;/p&gt;

&lt;p&gt;Others consider the Perl 6 effort as &amp;ldquo;merely an academic effort&amp;rdquo;, whose purpose will in the end only be to inform Perl 5 in certain ways, and whose ivory-tower denizens will never truly reconnect with reality. This is the only misconception that I, having written dozens of Perl 6 modules which actually run, and having as my focus making Perl 6 more practically usable, can sometimes feel saddened by.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nearly all of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carl and other Perl 6 developers are hard at work on both the Perl 6 specification as well as the Rakudo Perl 6 implementation. &lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.08&#34;&gt;Rakudo Star 2010.08 is now available&lt;/a&gt;, with better performance, fewer bugs, and more features.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome Rakudo Star</title>
      <link>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</link>
      <pubDate>Thu, 29 Jul 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.perl6.org/&#34;&gt;Perl 6&lt;/a&gt; has evolved over a long time. As originally conceived, it was to be a modest cleanup of Perl 5 semantics and implementation. By shrugging off a few of the less desirable features and misfeatures, Perl the language could evolve in new ways.&lt;/p&gt;

&lt;p&gt;As it turns out, a language is more than a bundle of features. It&amp;rsquo;s a set of design principles which govern interlocking syntax and semantics and idioms. The greater the internal consistency of that philosophy, the greater the coherence of the language and its community and its ecosystem.&lt;/p&gt;

&lt;p&gt;Given the chance to reinvent Perl one more time (the first reinvention was Perl 4 to Perl 5), could the community produce a language which could evolve to meet the needs of programmers for at least the next twenty years? Could we do so without all of the pain and tension between the need to retain backwards compatibility and the desire to improve based on real world experiences?&lt;/p&gt;

&lt;p&gt;That task was larger than any of us could have predicted, but the results (Perl&amp;rsquo;s testing culture! Roles! Moose! Grammars!) demonstrate their utility even now, even in the Perl 5 world. Both languages feed off of the other. Both languages help us to research and define and refine what Perl is and what Perl can be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.07&#34;&gt;Rakudo Star&lt;/a&gt; is a milestone in that process. We&amp;rsquo;re proud of what we&amp;rsquo;ve accomplished, and we&amp;rsquo;ve reached a point where we want to share it with the wider world.&lt;/p&gt;

&lt;p&gt;People will complain. They don&amp;rsquo;t like twigils. (They don&amp;rsquo;t like sigils!) All they ever wanted was a better object system. They hate operators or Unicode operators. They don&amp;rsquo;t want to learn how multiple dispatch works. They miss the CPAN. They prefer homoiconicity of syntax. They feel betrayed that after ten years, Rakudo Star is the first of several distribution releases and not the final, it&amp;rsquo;s completely finished that&amp;rsquo;s it, install it to run your space station, release&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; as if designing a language intended to evolve and change and adapt over the next several decades were a simple, three-month task to produce a perfect, static, never-needs-updating specification. (Implementation is merely a matter of hiring enough typists, you see.)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s neither what Perl 6 is nor how it works. What matters now is that you—yes, you—can download and install and play with Perl 6 right now. It&amp;rsquo;s not complete, whatever that means. It&amp;rsquo;s not finished, because twenty years from now we&amp;rsquo;ll still release new versions to meet needs that we can&amp;rsquo;t possibly predict right now.&lt;/p&gt;

&lt;p&gt;What we &lt;em&gt;can&lt;/em&gt; do is figure out what &lt;em&gt;you&lt;/em&gt; need. What works for you? What doesn&amp;rsquo;t? Are there bugs to fix? Are there particular optimizations you&amp;rsquo;d like to see? (Our next big task is optimization.) Now begins the work of polishing. What can we do to make Perl 6 even more amazing for you for the next release of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo&lt;/a&gt; and the next and the next and the next?&lt;/p&gt;

&lt;p&gt;Set aside your assumptions. Try Perl 6 yourself with Rakudo Star. Perl in every form is the work of a community willing to make amazing things happen. That task continues—help us make Perl more powerful, more flexible, more useful, and more fun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

