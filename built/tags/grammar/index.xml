<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grammar on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/grammar/</link>
    <description>Recent content in Grammar on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2015 13:14:23 +0000</lastBuildDate>
    <atom:link href="/tags/grammar/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parsing Perl 5 pod with Perl 6</title>
      <link>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</link>
      <pubDate>Thu, 30 Apr 2015 13:14:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just finished developing a Perl 5 pod &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5&#34;&gt;parser&lt;/a&gt; written in Perl 6. Developing the grammar was surprisingly easy, which is a testament to Perl 6 as I&amp;rsquo;m no genius coder. With help from the folks at #perl6, I did learn some interesting things along the way, and wanted to share them. Plus, code!&lt;/p&gt;

&lt;p&gt;By the way, if you haven&amp;rsquo;t read my &lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;introduction&lt;/a&gt; to Perl 6 grammars, check it out first, and the rest of this article should make more sense.&lt;/p&gt;

&lt;h3 id=&#34;developing-the-grammar&#34;&gt;Developing the grammar&lt;/h3&gt;

&lt;p&gt;In Perl 6 a grammar is a special type of class for parsing text. The idea is to declare a series of regexes using the &lt;code&gt;token&lt;/code&gt; method, which are then used to parse input. For &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/Grammar.pm&#34;&gt;Pod::Perl5::Grammar&lt;/a&gt; I literally worked my way through &lt;a href=&#34;https://perldoc.perl.org/perlpod.html&#34;&gt;perlpod&lt;/a&gt;, the Perl 5 pod specification, writing tokens as I went.&lt;/p&gt;

&lt;p&gt;There were a few challenges. First, consider how would you define a regex for lists? In pod, lists can contain lists, so can a definition include itself? The answer is yes, a recursive definition is fine, as long as it doesn&amp;rsquo;t match a zero length string, which leads to an infinite loop. Here&amp;rsquo;s the definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token over_back { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over&amp;gt;&lt;/span&gt;
                    [
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_item&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;verbatim_paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_for&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;begin_end&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;encoding&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over_back&amp;gt;&lt;/span&gt;
                    ]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;back&amp;gt;&lt;/span&gt;
                  }

token over      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;over [&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[0..9]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ]? &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }
token _item     { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;item &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
                    [
                        [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;  ]
                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;? ]
                    ]
                  }
token back      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;back &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The token &lt;code&gt;over_back&lt;/code&gt; describes an entire list from start to finish. It basically says that a list must begin with an &lt;code&gt;=over&lt;/code&gt; and end with &lt;code&gt;=back&lt;/code&gt;, and can have a whole bunch of things in between, including another &lt;code&gt;over_back&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For simplicity&amp;rsquo;s sake, I tried to name the tokens the same as how they&amp;rsquo;re written in pod. In some cases this wasn&amp;rsquo;t possible, for instance &lt;code&gt;item&lt;/code&gt; causes a namespace clash with another method that the Grammar class inherits. So watch out for those cases, you&amp;rsquo;ll get weird errors (this is a &lt;a href=&#34;https://rt.perl.org/rt3//Public/Bug/Display.html?id=77350&#34;&gt;bug&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is one pattern I really love and used over and over in the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;before &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is useful when you have a pattern to capture, but if there&amp;rsquo;s no matching pattern ignore everything else. In this case, &lt;code&gt;pod_section&lt;/code&gt; is a token that defines a section of pod, but pod is often written inline with Perl code, which the grammar should ignore. So the second half of the definition uses a negative lookahead &lt;code&gt;?!before&lt;/code&gt; to check the next character is not a &lt;code&gt;pod_section&lt;/code&gt;, and uses a period &lt;code&gt;.&lt;/code&gt; to match everything else (including newlines). Both conditions are grouped in square brackets with an asterisk placed &lt;strong&gt;outside&lt;/strong&gt; the group in order to check one character at a time.&lt;/p&gt;

&lt;p&gt;The grammar can be used to parse standalone and inline pod. It will extract every pod section it finds into match object (basically a Perl data structure), ready for processing. It&amp;rsquo;s easy to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parsefile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/some.pod&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action classes&lt;/h3&gt;

&lt;p&gt;So far so cool, but we can do more. Action classes are regular Perl 6 classes that can be given to the grammar at parse time. They provide behavior (actions) for token matching events. Just name the methods in the action class the same as the token they should be executed on. I wrote a pod-to-HTML action &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/ToHTML.pm&#34;&gt;class&lt;/a&gt;. Here is the method for converting &lt;code&gt;=head1&lt;/code&gt; to HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time the grammar matches a head1 token, this method executes. It&amp;rsquo;s passed the regex capture variable &lt;code&gt;$/&lt;/code&gt;, which contains the head1 regex capture, from which it extracts the text string.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool fact: action classes are even easier to write than grammars. It would be trivial to write a pod to markdown converter using Pod::Perl5::Grammar, unless someone beats me to it (hint, hint). That said, I did encounter a few challenges along the way.&lt;/p&gt;

&lt;p&gt;Essentially for HTML conversion, each action class method can just extract the text from it&amp;rsquo;s matching token, reformat it as required, and print it out. This approach worked great until I encountered nested tokens like formatting codes, which sit within a paragraph of text. You don&amp;rsquo;t want to go from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i&amp;gt;this is in italics&amp;lt;/i&amp;gt;
&amp;lt;b&amp;gt;this is in bold&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can happen because the italics and bold token regexes match first. So to get around this issue, I used a buffer to store the HTML from the transformed sub-tokens, and then when a paragraph token is matched, it substitutes its own text with the contents of the buffer. The action class code for this looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method paragraph ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $original_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $pair &lt;span style=&#34;color:#75715e&#34;&gt;# reverse as we&amp;#39;re working outside in&lt;/span&gt;
  {
    $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $para_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subst($pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key, {$pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value});
  }
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;{$para_text}&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;);
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;);
  }

method italic ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;i&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/i&amp;gt;&amp;#34;&lt;/span&gt;);
}

method bold ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for with action classes is regex handling. &lt;strong&gt;Every&lt;/strong&gt; action class example I&amp;rsquo;ve seen uses &lt;code&gt;$/&lt;/code&gt; in the method signature. This is a mistake, as guess what this does:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# silly example&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Cannot assign to a readonly variable or a value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mushroom cloud-style boom. When &lt;code&gt;$/&lt;/code&gt; is passed to &lt;code&gt;head1&lt;/code&gt; it is read only. Executing &lt;strong&gt;any&lt;/strong&gt; regex in the same lexical scope will attempt to overwrite &lt;code&gt;$/&lt;/code&gt;. This bit me a few times and with help from #perl6, I ended up using this pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding &lt;code&gt;is copy&lt;/code&gt; to the signature creates a copy instead of a reference for &lt;code&gt;$/&lt;/code&gt;. I then copy the match variable into &lt;code&gt;$match&lt;/code&gt;, so that the following regex can clobber &lt;code&gt;$/&lt;/code&gt;. I *think* a better solution is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($match)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it&amp;rsquo;s that simple, just don&amp;rsquo;t name the signature parameter &lt;code&gt;$/&lt;/code&gt; and all the headaches disappear. I haven&amp;rsquo;t tested this extensively&amp;hellip;&lt;/p&gt;

&lt;p&gt;To use an action class, just pass it to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::ToHTML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::ToHTML&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :$actions);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example I used a named positional argument &lt;code&gt;:$actions&lt;/code&gt;. This &lt;strong&gt;must&lt;/strong&gt; be called actions to work. In the second example I named the argument like this: &lt;code&gt;:actions($actions)&lt;/code&gt;, in which case the action class object can be called whatever you want.&lt;/p&gt;

&lt;h3 id=&#34;improving-pod&#34;&gt;Improving pod&lt;/h3&gt;

&lt;p&gt;PerlTricks.com articles are written in HTML. Special snowflake style HTML with class names and &lt;code&gt;span&lt;/code&gt; tags. This is a pain for writers to use and a pain to edit. I&amp;rsquo;d love to use pod as the source - it would be easier for writers to use and faster for me to edit. That said, I&amp;rsquo;d like to extend pod with some useful features for blogging. For instance, you may be familiar with formatting codes like &lt;code&gt;B&amp;lt;...&amp;gt;&lt;/code&gt; for bold and the like. Well, what about &lt;code&gt;@&amp;lt; ... &amp;gt;&lt;/code&gt; for a Twitter references, or &lt;code&gt;M&amp;lt; ... &amp;gt;&lt;/code&gt; for &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt; links?&lt;/p&gt;

&lt;p&gt;As Perl 6 grammars are classes, they can be inherited and overridden. So I can add my Twitter and Metacpan formatting codes to the grammar like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll also need to override the &lt;code&gt;format_codes&lt;/code&gt; token to include the new tokens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token format_codes  {
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;italic&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;bold&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;escape&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;singleline&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;index&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;zeroeffect&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;twitter|&amp;lt;metacpan&amp;gt;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s that easy. The new grammar will parse all pod, plus my two new formatting codes. Of course the action class Pod::Perl5::Pod can be extended and overridden too, and would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Pod::Perl5::ToHTML::PerlTricks is Pod::Perl5::ToHTML
{
  method twitter ($match)
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;,
      $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;a href=&amp;#34;&lt;/span&gt;http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;twitter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&amp;gt;{$match&amp;lt;name&amp;gt;.Str}&amp;lt;/&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  method metacpan ($match)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    self.add_to_buffer(&amp;#39;paragraph&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      $match.Str =&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{$match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wait-there-s-more&#34;&gt;Wait, there&amp;rsquo;s more&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a cleaner way to manage groups of tokens, it&amp;rsquo;s called &lt;a href=&#34;http://design.perl6.org/S06.html#Routine_modifiers&#34;&gt;multi-dispatch&lt;/a&gt;. Instead of defining &lt;code&gt;format_codes&lt;/code&gt; as a list of alternative tokens it can match against, we declare a prototype method, and declare each formatting method as a &lt;code&gt;multi&lt;/code&gt; of the prototype. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;proto token format_codes  { &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; }
multi token format_codes:italic { I&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:bold   { B&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:code   { C&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when this grammar is inherited, there is no need to override &lt;code&gt;format_codes&lt;/code&gt;. Instead I can declare the new tokens as multis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token format_codes:twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token format_codes:metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using multi-dispatch also has the modest benefit of simplifying the data extraction path when working with a match object. For instance, these code extracts the link section from the 3rd paragraph of a pod block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# regular version&lt;/span&gt;
is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# multi dispatch equivalent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example, the format token name &lt;code&gt;link&lt;/code&gt; is required. But with multi-dispatch, we can remove that, as shown in the second example.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s what I learned; overall writing a pod parser in Perl 6 was straightforward. If you&amp;rsquo;re programming in Perl 6 and have questions, I&amp;rsquo;d highly recommend the &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt; irc channel on freenode, the people there were friendly and responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;Multi-dispatch example added. Thanks to Jonathan Scott Duff for providing the multi-dispatch explanation and code. 2015-05-01&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a grammar in Perl 6</title>
      <link>http://localhost:1313/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6/</link>
      <pubDate>Tue, 13 Jan 2015 15:45:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6/</guid>
      <description>

&lt;p&gt;In programming, a grammar is a set of rules for parsing text. They&amp;rsquo;re incredibly useful, for instance you can use a grammar to check if a text string conforms to a specific standard or not. Perl 6 has native support for grammars - they&amp;rsquo;re so easy to write that once you start using them, you&amp;rsquo;ll find yourself using them everywhere.&lt;/p&gt;

&lt;p&gt;Recently I&amp;rsquo;ve been working on Module::Minter, a simple app to create a base skeleton structure for a new Perl 6 module. I needed a way to check that the proposed module name would conform to Perl 6&amp;rsquo;s naming conventions.&lt;/p&gt;

&lt;p&gt;Module names can be described as identifiers separated by 2 colons, &lt;a href=&#34;https://github.com/labster/perl6-File-Compare/&#34;&gt;File::Compare&lt;/a&gt; for example*. An identifier must begin with an alpha character (a-z) or an underscore, followed by zero or more alphanumeric characters. So far so good, but it&amp;rsquo;s not that simple; some module names only have a single identifier and no colons like &lt;a href=&#34;https://github.com/tadzik/Bailador/&#34;&gt;Bailador&lt;/a&gt; whilst other modules are more of a mouthful like &lt;a href=&#34;https://github.com/tony-o/perl6-http-server-async-plugins-router-simple/&#34;&gt;HTTP::Server::Async::Plugins::Router::Simple&lt;/a&gt;. This sounds like a job for a grammar!&lt;/p&gt;

&lt;h3 id=&#34;defining-the-grammar&#34;&gt;Defining the grammar&lt;/h3&gt;

&lt;p&gt;Perl 6 Grammars are built from regexes. I need two regexes: one for matching identifiers and one for matching the double colon separators. For the identifier regex, I&amp;rsquo;ll use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# begins with letter or underscore&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# zero or more alpanumeric&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember we&amp;rsquo;re using Perl 6 regexes, so things might look a little different if you&amp;rsquo;re used to Perl 5 style regexes. A character class is defined by &lt;code&gt;&amp;lt;[ ... ]&amp;gt;&lt;/code&gt; and ranges are defined using the range operator &lt;code&gt;..&lt;/code&gt; instead of a hyphen. This regex matches any leading letter or underscore followed by zero or more alphanumeric characters. Matching two colons is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grammars are defined using the &lt;code&gt;grammar&lt;/code&gt; keyword, followed by the name of the grammar. I&amp;rsquo;m going to call this grammar &lt;code&gt;Legal::Module::Name&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can add the regexes as tokens to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  token identifier
  {
    &lt;span style=&#34;color:#75715e&#34;&gt;# leading alpha or _ only&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;
  } 
  token separator
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every Grammar needs a token called &lt;code&gt;TOP&lt;/code&gt;, which is the starting point for the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  token TOP
  { &lt;span style=&#34;color:#75715e&#34;&gt;# identifier followed by zero or more separator identifier pairs&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;identifier&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;separator&amp;gt;&amp;lt;identifier&amp;gt;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt; $
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
  token identifier
  {
    &lt;span style=&#34;color:#75715e&#34;&gt;# leading alpha or _ only&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;
  } 
  token separator
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;TOP&lt;/code&gt; token defines a valid module name as one that begins with an identifier token, followed by zero or more separator and identifier token pairs. This is nice to write and maintain - let&amp;rsquo;s say I wanted to change the rules for separators to include hyphens (&amp;lsquo;-&amp;rsquo;), I could just update the separator token regex and the effect would bubble up to the &lt;code&gt;TOP&lt;/code&gt; token definition.&lt;/p&gt;

&lt;h3 id=&#34;using-the-grammar&#34;&gt;Using the grammar&lt;/h3&gt;

&lt;p&gt;Now I&amp;rsquo;ve got the grammar, it&amp;rsquo;s time to put it into action. The &lt;code&gt;parse&lt;/code&gt; method runs the grammar on a string and if successful, returns a match object. This code parses the &lt;code&gt;$proposed_module_name&lt;/code&gt; string, and either prints out the match object or an error message if the propose module name is invalid.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $proposed_module_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Super::New::Module&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Legal::Module::Name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($proposed_module_name);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match_obj
{
    say $match_obj;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid module name!&amp;#39;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code prints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Super::New::Module&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Super&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 separator &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;New&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 separator &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Module&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;extracting-content-from-the-match-object&#34;&gt;Extracting content from the match object&lt;/h3&gt;

&lt;p&gt;Rather than dumping the contents of the match object to the command line, we can extract matched tokens from the match object. This uses the same quoting syntax often used elsewhere in Perl 6 (e.g. named regexes and hash keys):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# Super&lt;/span&gt;
say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# New&lt;/span&gt;
say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# Module&lt;/span&gt;

say $match_obj; &lt;span style=&#34;color:#75715e&#34;&gt;# all 3 captures&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action Classes&lt;/h3&gt;

&lt;p&gt;So far the grammar can detect if a proposed module name is legal or not, and produces a match object from which it&amp;rsquo;s easy to extract the components of the module name. Perl 6 also let&amp;rsquo;s you add an action class which defines extra behaviour for matched tokens. I&amp;rsquo;d like to add a warning when a module name has too many identifiers, in other words, it&amp;rsquo;s a legal module name, but the user might want to shorten it. First I define the action class itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class Module::Name::Actions
{
  method TOP($/)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;identifier&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    {
      warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Module name has a lot of identifiers, consider simplifying the name&amp;#39;&lt;/span&gt;;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see this is an ordinary Perl 6 class definition. I&amp;rsquo;ve added one method called &lt;code&gt;TOP&lt;/code&gt; which matches the first token in the grammar. I use the named regex syntax to count all identifier matches, and if there are more than 5, fire a warning. This won&amp;rsquo;t stop the code from running, but it might cause the user to reconsider their choice of module name.&lt;/p&gt;

&lt;p&gt;I then initialize the action class and pass it as an argument in to &lt;code&gt;parse&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Module::Name::Actions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Legal&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Module&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($proposed_module_name, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The grammar will call the matching action class method every time the token is encountered during parsing. In this case that&amp;rsquo;s once per parse, but we could add an additional length length on identifier tokens for example. Check out the &lt;a href=&#34;https://github.com/sillymoose/Module-Minter/blob/master/lib/Module/Minter.pm6&#34;&gt;Module::Minter&lt;/a&gt; source to see how to incorporate a grammar into a module.&lt;/p&gt;

&lt;h3 id=&#34;grammars-in-perl-5&#34;&gt;Grammars in Perl 5&lt;/h3&gt;

&lt;p&gt;You can also write grammars in Perl 5. For a solution similar to the Perl 6 implementation, have a look at &lt;a href=&#34;https://metacpan.org/pod/Regexp::Grammars&#34;&gt;Regexp::Grammars&lt;/a&gt; or Ingy Döt Net&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Pegex&#34;&gt;Pegex&lt;/a&gt; distribution. For a different approach, check out chapter 1 of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt; by brian d foy, which contains an example JSON grammar.&lt;/p&gt;

&lt;p&gt;* This isn&amp;rsquo;t strictly correct - the entire name (colons included) is the identifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;added link to Regexp::Grammars. 2015-01-13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

