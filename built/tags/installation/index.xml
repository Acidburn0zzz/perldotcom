<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Installation on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/installation/</link>
    <description>Recent content in Installation on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2010 14:22:06 -0800</lastBuildDate>
    <atom:link href="/tags/installation/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Testing Perl 5.12.0 RC 1 with App::perlbrew</title>
      <link>http://localhost:1313/pub/2010/03/testing-perl-5120-rc-1-with-appperlbrew.html/</link>
      <pubDate>Tue, 30 Mar 2010 14:22:06 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/03/testing-perl-5120-rc-1-with-appperlbrew.html/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m working on a project with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe and Adrian Howard. We use Perl 5.10.1, but because we control which version of Perl 5 we use, there&amp;rsquo;s no reason not to test with Perl 5.12.0 &amp;ndash; and if we find bugs, we can report them and get them fixed in the proper place.&lt;/p&gt;

&lt;p&gt;This application has its own quirks for setup and installation. I managed to clean up some of the worst offenses as my first work on the project; it installs and passes tests on my server with Perl 5.10.1, so it should install cleanly if all of its dependencies work with Perl 5.12.&lt;/p&gt;

&lt;p&gt;My first approach was to manage my own parallel installation of Perl 5 with &lt;a href=&#34;https://metacpan.org/pod/local::lib&#34;&gt;local::lib&lt;/a&gt; and a custom installation of Perl 5.12, but the manual intervention required to make all of that work was enough of a hassle that I took a tip from &lt;a href=&#34;http://chris.prather.org/&#34;&gt;Chris Prather&lt;/a&gt; and installed &lt;a href=&#34;https://metacpan.org/pod/App::perlbrew&#34;&gt;App::perlbrew&lt;/a&gt; to manage my various installations (system Perl 5.10.0 built with threading, custom Perl 5.10.1 without threads, and now Perl 5.12.0 RC1).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ cpan App::perlbrew
    $ perlbrew init
    $ echo &#39;source /home/chromatic/perl5/perlbrew/etc/bashrc&#39; &amp;gt;&amp;gt; ~/.bashrc
    $ source /home/chromatic/perl5/perlbrew/etc/bashrc
    $ perlbrew install perl-5.12.0-RC1 -as p512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-as p512&lt;/code&gt; option was optional; it lets me use &lt;code&gt;p512&lt;/code&gt; as a short name to refer to that particular installation when switching between versions.&lt;/p&gt;

&lt;p&gt;After a while with no obvious output (which is fine), the end result is the ability to switch between parallel Perl 5 installations without them stomping on each other. They&amp;rsquo;re all installed locally in my own home directory, so I can use CPAN or &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; to install modules without worrying about root access or messing up the system for anyone else.&lt;/p&gt;

&lt;p&gt;I had already installed &lt;a href=&#34;https://metacpan.org/pod/local::lib&#34;&gt;local::lib&lt;/a&gt;, but I&amp;rsquo;m not sure it&amp;rsquo;s necessary in this case.&lt;/p&gt;

&lt;p&gt;With the changes to my &lt;em&gt;.bashrc&lt;/em&gt;, now &lt;code&gt;perl&lt;/code&gt; is a symlink. Switching my version with &lt;code&gt;perlbrew&lt;/code&gt; swaps a symlink, so every time I invoke &lt;code&gt;perl&lt;/code&gt; directly, it uses the intended version. Shebang lines remain unaffected, so anything which invokes a program directly will use a hard-coded version of Perl. Unfortunately, this includes &lt;code&gt;cpanm&lt;/code&gt;, so I took to using an alias which does &lt;code&gt;perl `which cpanm`&lt;/code&gt; as a temporary workaround. Miyagawa suggested &lt;em&gt;not&lt;/em&gt; using CPAN to install cpanminus. Instead, he recommends:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L http://cpanmin.us | perl - App::cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you&amp;rsquo;ll have to do this for every new version of Perl you install with perlbrew.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the nice part of perlbrew. I can also install Perl 5.10.1 through it (replacing my custom installation) and switch between the two with a simple command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perlbrew switch p5101
    $ perlbrew switch perl-5.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see what you have installed with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ perlbrew installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those of you curious as to the results of my experiments with 5.12.0, &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt; doesn&amp;rsquo;t work correctly yet, but that&amp;rsquo;s not a requirement for this project. &lt;a href=&#34;https://metacpan.org/pod/Devel::BeginLift&#34;&gt;Devel::BeginLift&lt;/a&gt; needs a patch to build. Fortunately, that&amp;rsquo;s available in the RT queue. A manual build and test worked just fine. Other than that, a little bit of babysitting on the installation satisfied all of the dependencies.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;d had to manage the installation (and module paths and&amp;hellip;) of all of this software, I&amp;rsquo;d have spent a lot more time on the fiddly details of installing dependencies and not the interesting part. &lt;code&gt;App::perlbrew&lt;/code&gt; allowed me to concentrate on what really matters: does my software work?&lt;/p&gt;

&lt;p&gt;Perl 5.12.0 will come out soon. Use &lt;code&gt;App::perlbrew&lt;/code&gt; to test code you care about with it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

