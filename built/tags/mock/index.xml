<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mock on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/mock/</link>
    <description>Recent content in Mock on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 06:57:21 +0000</lastBuildDate>
    <atom:link href="/tags/mock/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mock APIs for free using JSON Schemas</title>
      <link>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</link>
      <pubDate>Wed, 20 Sep 2017 06:57:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is a module which takes a &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON schema&lt;/a&gt;, and generates a data structure compliant with the schema. Here&amp;rsquo;s a quick script to generate a data structure based on a schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gen-json - create json from a schema filepath&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { local($/);&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; }; &lt;span style=&#34;color:#75715e&#34;&gt;# slurp the filepath in @ARGV&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema_str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $schema);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($data);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, I need to pass the filepath to a JSON schema, in this case &lt;code&gt;user.json&lt;/code&gt; describes a web app user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gen-json user.json
$VAR1 = {
      &#39;email_address&#39; =&amp;gt; &#39;HfeiJzddxVTg@AspFqfgUKivV.com&#39;,
      &#39;birthdate&#39; =&amp;gt; &#39;2014-01-14T00:59:43.000Z&#39;,
      &#39;active&#39; =&amp;gt; bless( do{\(my $o = 0)}, &#39;JSON::PP::Boolean&#39; ),
      &#39;cell_phone_number&#39; =&amp;gt; &#39;043 185 8956&#39;,
      &#39;roles&#39; =&amp;gt; [
                   &#39;manager&#39;,
                   &#39;trainer&#39;,
                   &#39;admin&#39;
                 ],
      &#39;display_name&#39; =&amp;gt; &#39;Pswgfkjzdc&#39;,
      &#39;password&#39; =&amp;gt; &#39;QI0RQDR9A7W2EtuNHaQKvBFQp67oO0Ld&#39;,
      &#39;login&#39; =&amp;gt; &#39;7oRSCeREi9sWm&#39;,
      &#39;full_name&#39; =&amp;gt; &#39;Oiqmqdr Frfxrzkzfjn&#39;,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script creates a new &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; object called &lt;code&gt;$generator&lt;/code&gt;, slurps the JSON schema into &lt;code&gt;$schema&lt;/code&gt;, and generates the data structure assigning it to &lt;code&gt;$data&lt;/code&gt;. Then &lt;code&gt;$data&lt;/code&gt; is pretty-printed to STDOUT via &lt;code&gt;Data::Dumper&lt;/code&gt;. Notice how the data printed to the terminal is compliant but &lt;em&gt;not&lt;/em&gt; realistic.&lt;/p&gt;

&lt;h3 id=&#34;mocking-apis&#34;&gt;Mocking APIs&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s popular to describe API endpoints with JSON schemas for &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;. Swagger will generate documentation using the schemas, and even provides a request/response testing tool. We can make the JSON schemas even more useful by using them to mock API endpoints. Imagine you&amp;rsquo;ve defined an API but haven&amp;rsquo;t built it yet: you can create the API endpoint and return data mocked with &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; so that frontend development can begin without waiting for the backend to be ready.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;ve got the following Swagger doc (a JSON schema) which defines a single API route &lt;code&gt;/user&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
  &amp;quot;schemes&amp;quot;: [
    &amp;quot;https&amp;quot;
  ],
  &amp;quot;produces&amp;quot;: [
    &amp;quot;application/json&amp;quot;
  ],
  &amp;quot;paths&amp;quot;: {
    &amp;quot;/user&amp;quot;: {
      &amp;quot;get&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;returns a user for a given id&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
            &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        ],
        &amp;quot;responses&amp;quot;: {
          &amp;quot;200&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;Objects matching the search term&amp;quot;,
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
              &amp;quot;properties&amp;quot;: {
                &amp;quot;login&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{5,32}&amp;quot;
                },
                &amp;quot;full_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10} [A-Z][a-z]{3,20}&amp;quot;
                },
                &amp;quot;display_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10}&amp;quot;
                },
                &amp;quot;birthdate&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
                },
                &amp;quot;email_address&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
                },
                &amp;quot;cell_phone_number&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;\\d{3} \\d{3} \\d{4}&amp;quot;
                },
                &amp;quot;password&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{8,32}&amp;quot;
                },
                &amp;quot;roles&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                  &amp;quot;minItems&amp;quot;: 1,
                  &amp;quot;maxItems&amp;quot;: 4,
                  &amp;quot;uniqueItems&amp;quot;: true,
                  &amp;quot;items&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                    &amp;quot;enum&amp;quot;: [ &amp;quot;admin&amp;quot;, &amp;quot;manager&amp;quot;, &amp;quot;trainer&amp;quot;, &amp;quot;member&amp;quot; ]
                  }
                },
                &amp;quot;active&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Lite&#34;&gt;Mojolicious::Lite app&lt;/a&gt; to serve the mocked route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decode_json&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swaggerdoc.json&amp;#39;&lt;/span&gt;; local($/);&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $swaggerdoc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decode_json($json);

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $route_def &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $swaggerdoc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{paths}{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;}{get}{responses}{&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;}{schema};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $route_def);
  $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(json &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $response);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This app slurps and decodes the swagger doc on startup, saving the result to &lt;code&gt;$swaggerdoc&lt;/code&gt; and declares a &lt;code&gt;/user&lt;/code&gt; route which extracts the API definition from the &lt;code&gt;$swaggerdoc&lt;/code&gt;, and uses &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; to generate a response, and renders it. Let&amp;rsquo;s test the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hypnotoad user-app.pl
[Wed Sep 20 14:19:49 2017] [info] Listening at &amp;quot;http://*:8080&amp;quot;
Server available at http://127.0.0.1:8080

$ curl localhost:8080/user
{&amp;quot;active&amp;quot;:false,&amp;quot;birthdate&amp;quot;:&amp;quot;2009-08-30T17:47:32.000Z&amp;quot;,&amp;quot;cell_phone_number&amp;quot;:&amp;quot;254 403 0133&amp;quot;,&amp;quot;display_name&amp;quot;:&amp;quot;Nyzhoyp&amp;quot;,&amp;quot;email_address&amp;quot;:&amp;quot;gEyRQXRPrlzL@CvuRitFtArXv.com&amp;quot;,&amp;quot;full_name&amp;quot;:&amp;quot;Wmpgrd Bnaazxguekqtuezlu&amp;quot;,&amp;quot;login&amp;quot;:&amp;quot;oAxgIvYQfbRmWHq4WifclhQxAI&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;99wciSr8V&amp;quot;,&amp;quot;roles&amp;quot;:[&amp;quot;member&amp;quot;,&amp;quot;trainer&amp;quot;,&amp;quot;manager&amp;quot;]}

$ hypnotoad -s user-app.pl
Stopping Hypnotoad server 2177 gracefully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I launch the app into the background with &lt;code&gt;hypnotoad&lt;/code&gt;. Next I use &lt;code&gt;curl&lt;/code&gt; to test the endpoint, and it correctly returns the user JSON. Finally I stop the app via &lt;code&gt;hypnotoad&lt;/code&gt; again. Looking good!&lt;/p&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve run into a couple of limitations when using &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;. One I already mentioned: it generates compliant but not realistic data. This can cause an issue if you have interdependencies in your object properties, like &lt;code&gt;first_name&lt;/code&gt; should be a substring of &lt;code&gt;full_name&lt;/code&gt;. Or when generating dates, sometimes a random datetime is not precise enough: for realistic dates of birth you might want someone born between 10 and 80 years ago. This issue can be mitigated somewhat by clever use of regex definitions in the JSON schema, or by using the &lt;code&gt;example_key&lt;/code&gt; feature of &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another issue is caused by limitations in JSON schema itself: you might not be able to generate the data in the format your API returns, for example there is no date &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3&#34;&gt;format&lt;/a&gt;, only datetimes.&lt;/p&gt;

&lt;p&gt;But these are minor limitations, and I remain convinced that &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is great way to augment the value of JSON schemas, by rapidly generating test data and/or mocking APIs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to test Perl roles without creating test classes</title>
      <link>http://localhost:1313/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</link>
      <pubDate>Thu, 16 Oct 2014 13:16:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been working on a &lt;a href=&#34;https://github.com/sillymoose/March&#34;&gt;game engine&lt;/a&gt; which uses a composition pattern for its actors. I&amp;rsquo;m using &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; to create the roles. Role::Tiny is really convenient as it lets you use roles with native OO Perl, without committing to a whole object system like Moose. A typical role looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; March::Attribute::Id;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.020&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;signatures&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;experimental&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; ($self)
{
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{id};
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this role does is return the id attribute of the consuming class (yes I&amp;rsquo;m using &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;signatures&lt;/a&gt; throughout). I wanted to write unit tests for this role, but I didn&amp;rsquo;t want to a create test class to test the role. So how do you construct an object from a package that has no constructor? The answer is by using &lt;code&gt;bless&lt;/code&gt; in your test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless { id &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; }, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Id&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Id&amp;#39;&lt;/span&gt; }

is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id()&amp;#39;&lt;/span&gt;;

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code creates an object called &lt;code&gt;$self&lt;/code&gt; by blessing a hashref with the package name of the role that I want to test. It adds a key value pair for the id attribute, and then tests that the role&amp;rsquo;s id method returns the correct id value. I can execute the tests using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;vl t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Id&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t 
t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Id&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; 
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Attribute::Id;
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; id()
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
ok
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is another role I want to test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; March::Attribute::Direction;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.020&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;signatures&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;experimental&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Game;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Msg;

requires &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;direction&lt;/span&gt; ($self, $new_direction = 0)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($new_direction &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $new_direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isa(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Math::Shape::Vector&amp;#39;&lt;/span&gt;))
    {
        $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{direction} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $new_direction;

        &lt;span style=&#34;color:#75715e&#34;&gt;# publish direction to game queue&lt;/span&gt;
        March::Game&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;publish(
            March::Msg&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(__PACKAGE__, $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id, $new_direction)
        );
    }
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{direction};
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This role gets and sets the direction vector for the consuming class. The challenge with testing this role is that it requires the consuming class to implement an &lt;code&gt;id&lt;/code&gt; method. Role::Tiny&amp;rsquo;s &lt;code&gt;requires&lt;/code&gt; function is a great way to ensure that the consuming class meets the requirements of the role. But how do we test it without creating a real class with an &lt;code&gt;id&lt;/code&gt; sub? What I do is declare the required sub in the test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Math::Shape::Vector;

&lt;span style=&#34;color:#75715e&#34;&gt;# create an object&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless { direction &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Math::Shape::Vector&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) 
                  }, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Direction&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# add required sub&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;March&lt;/span&gt;::Attribute::Direction::id { &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; };

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Direction&amp;#39;&lt;/span&gt; }

is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{x}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction x is 1&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{y}, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction y is 2&amp;#39;&lt;/span&gt;;
ok $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction( Math::Shape::Vector&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) ),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Update direction to new vector&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{x}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction x is still 1&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{y}, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction y is now 0&amp;#39;&lt;/span&gt;;

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The magic line is &lt;code&gt;sub March::Attribute::Direction::id { 107 };&lt;/code&gt; which adds the sub to the role I&amp;rsquo;m testing (it just returns the value 107). Now I can test the &lt;code&gt;direction&lt;/code&gt; method, again using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lv t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t 
t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; 
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Attribute::Direction;
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Update direction to &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; vector
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
ok
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.08&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.10&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;it-s-not-all-gravy&#34;&gt;It&amp;rsquo;s not all gravy&lt;/h3&gt;

&lt;p&gt;One drawback I&amp;rsquo;ve encountered with this approach can be seen with the following role and test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Data::Inspector;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inspect_data&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $data);
    Data::Dumper&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Dump([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Inspecting:&amp;#39;&lt;/span&gt;, $data]);
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This role has a method called &lt;code&gt;inspect_data&lt;/code&gt; which simply returns a dump of any data reference pass to it. This is the test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless {}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data::Inspector&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data::Inspector&amp;#39;&lt;/span&gt; } 

ok $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;inspect_data({ test &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt; });

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before I bless the role in the test file and then proceed to test the &lt;code&gt;inspect_data&lt;/code&gt; method. This test file runs and all the tests pass. Can you spot this issue here? Notice that the Data::Inspector role uses &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&amp;rsquo;s&lt;/a&gt; &lt;code&gt;Dump&lt;/code&gt; method, but it doesn&amp;rsquo;t load the Data::Dumper module, the test file does! This is a problem as when the Data::Inspector role is used elsewhere in real code, it will crash and burn when it doesn&amp;rsquo;t find Data::Dumper loaded in memory.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With this project I intend to create a lot of simple roles, so this approach provides a lightweight way for me to test roles within the test file without creating test classes for every role.&lt;/p&gt;

&lt;p&gt;I really like &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt;. It&amp;rsquo;s flexible: you can create minimalist trait-like behavior or go further and create mixins (roles which modify state). It has nice features like auto-enabling strict and warnings, method modifiers and good &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;documentation&lt;/a&gt;. &lt;a href=&#34;https://metacpan.org/pod/Role::Basic&#34;&gt;Role::Basic&lt;/a&gt; is another lightweight roles module that supports traits only (by &lt;a href=&#34;https://metacpan.org/pod/Role::Basic#DESIGN-GOALS-AND-LIMITATIONS&#34;&gt;design&lt;/a&gt;). I wonder if I&amp;rsquo;ll come to regret using a mixin approach as I get further into development of the game engine.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

