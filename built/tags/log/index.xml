<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/log/</link>
    <description>Recent content in Log on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Apr 2016 09:12:09 +0000</lastBuildDate>
    <atom:link href="/tags/log/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - March 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2016/</link>
      <pubDate>Wed, 06 Apr 2016 09:12:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Everything old was new again in March. Apart from smatterings of cool new toys, CPAN got several new loggers, plugin loaders, templates, and configuration management tools.&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Pushover&#34;&gt;Net::Pushover&lt;/a&gt; provides a Perly interface to Pushover, the message delivery service&lt;/li&gt;
&lt;li&gt;Get a client for the TeamCity, the CI service with &lt;a href=&#34;https://metacpan.org/pod/WebService::TeamCity&#34;&gt;WebService::TeamCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Robinhood&#34;&gt;Finance::Robinhood&lt;/a&gt; allows you to trade stocks and ETFs with RobinHood, the free brokerage startup&lt;/li&gt;
&lt;li&gt;Use the Let&amp;rsquo;s Encrypt certificate service with &lt;a href=&#34;https://metacpan.org/pod/WWW::LetsEncrypt&#34;&gt;WWW::LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PubNub&#34;&gt;WWW::PubNub&lt;/a&gt; provides an interface to PubNub, the streaming network service&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Footprintless&#34;&gt;Footprintless&lt;/a&gt; is a configuration management program with minimal installations&lt;/li&gt;
&lt;li&gt;Log to date/time-stamped files with &lt;a href=&#34;https://metacpan.org/pod/Log::File::Rolling&#34;&gt;Log::File::Rolling&lt;/a&gt;, a fork of Log::Dispatch::File::Rolling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Logging::Simple&#34;&gt;Logging::Simple&lt;/a&gt; aims to be a minimalist but useful logging system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Task::Viral&#34;&gt;Task::Viral&lt;/a&gt; is a Perl configuration and installation system, like Pinto, CPAN::Mini et al.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AtteanX::Endpoint&#34;&gt;AtteanX::Endpoint&lt;/a&gt; is a SPARQL 1.1 endpoint for &lt;a href=&#34;https://metacpan.org/pod/Attean&#34;&gt;Attean&lt;/a&gt;, the semantic web framework&lt;/li&gt;
&lt;li&gt;Print nice calendars at the terminal using &lt;a href=&#34;https://metacpan.org/pod/Calendar::Gregorian&#34;&gt;Calendar::Gregorian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Tubes&#34;&gt;Data::Tubes&lt;/a&gt; is a cute data transformation module; needs iterators!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Typist&#34;&gt;JSON::Typist&lt;/a&gt; aims to &amp;ldquo;replace mushy strings and numbers&amp;rdquo; with proper typed classes. Useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Template::Pure&#34;&gt;Template::Pure&lt;/a&gt; is a port of &lt;a href=&#34;http://beebole.com/pure/&#34;&gt;pure.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract a stack trace from an exception object with &lt;a href=&#34;https://metacpan.org/pod/Devel::StackTrace::Extract&#34;&gt;Devel::StackTrace::Extract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::SmokeTests&#34;&gt;Dist::Zilla::Plugin::SmokeTests&lt;/a&gt; makes it easy to run smoke tests run automated environments only&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MCE::Shared&#34;&gt;MCE::Shared&lt;/a&gt; is an extension for sharing threads and processes, also &lt;a href=&#34;https://metacpan.org/pod/MCE&#34;&gt;MCE&lt;/a&gt; is great&lt;/li&gt;
&lt;li&gt;Load plugins from files or modules with &lt;a href=&#34;https://metacpan.org/pod/Plugin::Simple&#34;&gt;Plugin::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Doctest&#34;&gt;Test::Doctest&lt;/a&gt; can extract and evaluate tests from pod fragments - curious&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::IRPulses&#34;&gt;Linux::IRPulses&lt;/a&gt; Parse infra-red pulse data - also see Timm&amp;rsquo;s recent &lt;a href=&#34;http://localhost:1313/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/&#34;&gt;article&lt;/a&gt; on the subject&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Guess language from text using a word list with &lt;a href=&#34;https://metacpan.org/pod/Text::Guess::Language&#34;&gt;Text::Guess::Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check if text is UTF8 compatible with &lt;a href=&#34;https://metacpan.org/pod/Unicode::CheckUTF8::PP&#34;&gt;Unicode::CheckUTF8::PP&lt;/a&gt; a pure Perl module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ecl&#34;&gt;ecl&lt;/a&gt; executes Embedded Common Lisp code within Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/EMDIS::ECS&#34;&gt;EMDIS::ECS&lt;/a&gt; provides useful subroutines for the European Marrow Donor Information System standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a simple local search engine for your Dancer app with &lt;a href=&#34;https://metacpan.org/pod/Dancer::SearchApp&#34;&gt;Dancer::SearchApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::ACME&#34;&gt;Mojo::ACME&lt;/a&gt; use the Let&amp;rsquo;s Encrypt ACME API with your Mojo app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Pod&#34;&gt;Plack::Middleware::Pod&lt;/a&gt; can render POD files as HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to redirect and restore STDOUT</title>
      <link>http://localhost:1313/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</link>
      <pubDate>Sun, 27 Oct 2013 17:48:34 +0000</pubDate>
      
      <guid>http://localhost:1313/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT/</guid>
      <description>

&lt;p&gt;STDOUT is the Perl filehandle for printing standard output. Unless a filehandle is specified, all standard printed output in Perl will go to the terminal. Because STDOUT is just a global variable, it can be redirected and restored. Want to implement logging on a program without changing every print statement in the source code? Want to capture the standard output of a perl CRON job? Read on.&lt;/p&gt;

&lt;h3 id=&#34;terminal-redirects&#34;&gt;Terminal redirects&lt;/h3&gt;

&lt;p&gt;Before you launch your favourite text editor and start hacking Perl code, you may just need to redirect the program output in the terminal. On UNIX-based systems you can write to a file using &amp;ldquo;&amp;gt;&amp;rdquo; and append to a file using &amp;ldquo;&amp;gt;&amp;gt;&amp;rdquo;. Both write and append will create the file if it doesn&amp;rsquo;t exist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows a similar effect can be achieved using PowerShell using a pipe operator (&amp;ldquo;|&amp;rdquo;) and &amp;ldquo;set-content&amp;rdquo; to write, or &amp;ldquo;add-content&amp;rdquo; to append (the pipe will not redirect STDERR).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;content &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;content &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;perl-solutions&#34;&gt;Perl solutions&lt;/h3&gt;

&lt;p&gt;If a terminal redirect is not specific enough for your needs, you can use one of the following Perl solutions. All of the following solutions use &lt;a href=&#34;https://metacpan.org/pod/autodie&#34;&gt;autodie&lt;/a&gt; which removes the need for the classic &amp;ldquo;|| or die $!&amp;rdquo; syntax to be appended to every open statement in the code.&lt;/p&gt;

&lt;h3 id=&#34;redirect-stdout-using-select&#34;&gt;Redirect STDOUT using select&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s built-in function &lt;a href=&#34;https://perldoc.perl.org/functions/select.html&#34;&gt;select&lt;/a&gt; changes the standard output filehandle to the filehandle provided as an argument. This makes it easy to globally redirect and restore standard output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw/say/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; autodie;

&lt;span style=&#34;color:#75715e&#34;&gt;# open filehandle log.txt&lt;/span&gt;
open (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $LOG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# select new filehandle&lt;/span&gt;
select $LOG;

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should be logged.&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# restore STDOUT&lt;/span&gt;
select STDOUT;

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should show in the terminal&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;redirect-stdout-using-local&#34;&gt;Redirect STDOUT using local&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/local.html&#34;&gt;local&lt;/a&gt; built-in function is another option for redirecting STDOUT. The local function creates a lexically-scoped copy of any variable passed to it. By enclosing local in a do block, the code below limits the STDOUT redirect to the block scope and STDOUT is automatically restored after the closing block brace (&amp;ldquo;}&amp;rdquo;). By definition this is not a global solution for redirecting STDOUT.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw/say/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; autodie;

&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    local &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;STDOUT;

    &lt;span style=&#34;color:#75715e&#34;&gt;# redirect STDOUT to log.txt&lt;/span&gt;
    open (STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;);

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should be logged.&amp;#39;&lt;/span&gt;;
};
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should show in the terminal&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;redirect-stdout-using-a-filehandle&#34;&gt;Redirect STDOUT using a filehandle&lt;/h3&gt;

&lt;p&gt;A third way to redirect and restore STDOUT is to copy the STDOUT filehandle before replacing it. This copy can then be restored when required. As with select, this will have a global affect on the Perl program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw/say/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; autodie;

&lt;span style=&#34;color:#75715e&#34;&gt;# copy STDOUT to another filehandle&lt;/span&gt;
open (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $STDOLD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;amp;&amp;#39;&lt;/span&gt;, STDOUT);

&lt;span style=&#34;color:#75715e&#34;&gt;# redirect STDOUT to log.txt&lt;/span&gt;
open (STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;);

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should be logged.&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# restore STDOUT&lt;/span&gt;
open (STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;amp;&amp;#39;&lt;/span&gt;, $STDOLD);

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should show in the terminal&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

