<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/app/</link>
    <description>Recent content in App on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Oct 2015 12:40:21 +0000</lastBuildDate>
    <atom:link href="/tags/app/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Professional scripts are a snap with Getopt::Long</title>
      <link>http://localhost:1313/article/195/2015/10/21/Professional-scripts-are-a-snap-with-Getopt--Long/</link>
      <pubDate>Wed, 21 Oct 2015 12:40:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/195/2015/10/21/Professional-scripts-are-a-snap-with-Getopt--Long/</guid>
      <description>

&lt;p&gt;Scripts are practically Perl&amp;rsquo;s raison d&amp;rsquo;être, and so naturally it has some great scripting tools. &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; is a module for parsing command line arguments (similar to Python&amp;rsquo;s &lt;a href=&#34;https://docs.python.org/dev/library/argparse.html&#34;&gt;argparse&lt;/a&gt;). Using &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, you can quickly define a standard Unix-like interface for your program. With just a few lines of code you can parse, type-check and assign the parameters passed to your program. Sounds good? Read on to find out how.&lt;/p&gt;

&lt;h3 id=&#34;building-a-basic-app&#34;&gt;Building a basic app&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s imagine I wanted to create a program for creating software licenses, like &lt;a href=&#34;https://metacpan.org/pod/App::Software::License&#34;&gt;App::Software::License&lt;/a&gt;. The user will run the program and it will print the software license text, with the license text customized for the user. To do this, the program will need to process a few arguments from the user—a perfect use case for &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;! Let&amp;rsquo;s start with the license holder&amp;rsquo;s name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I start by importing &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, it&amp;rsquo;s part of the core Perl distribution, so if you have Perl installed, you should already have it. The &lt;code&gt;GetOptions&lt;/code&gt; function from &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; is where the magic happens. It takes a hash of parameter names and variable references which define the program&amp;rsquo;s API. The string &lt;code&gt;holder=s&lt;/code&gt; tells &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to accept an argument like &lt;code&gt;--holder&lt;/code&gt; and assign it to &lt;code&gt;$holder_name&lt;/code&gt;. If we receive any arguments that are not defined in &lt;code&gt;GetOptions&lt;/code&gt;, the code dies and prints out an exception message (terminating the exception message with a newline stops Perl from printing the line reference of the exception). The final line just prints out the value. I&amp;rsquo;ll save the script as &lt;code&gt;license&lt;/code&gt; and test it out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ chmod a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;x license
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;holder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt;
David Farrell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, you&amp;rsquo;ll need to type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl license &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;holder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; also recognizes the short form of arguments, so this works too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt;
David Farrell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;type-checking&#34;&gt;Type checking&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; provides basic type checking for strings, integers and floating point numbers. I&amp;rsquo;ve already added a string argument for the license holder&amp;rsquo;s name, so I&amp;rsquo;ll add an integer option for the license year:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name $year\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the program again, it will now accept a &lt;code&gt;--year&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;y &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
David Farrell &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how I was able to pass &lt;code&gt;-y 2014&lt;/code&gt; and &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; knew to assign it to &lt;code&gt;$year&lt;/code&gt;. &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; will also do basic type checking, so if a non-integer value is passed, it will print and warning and the script will die.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;year abcd
Value &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcd&amp;#34;&lt;/span&gt; invalid &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; option year (number expected)
Invalid options passed to &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;getopt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m going to add an option for the license type, so the user can specify which license text they want such as the GPL, MIT or BSD licenses (there are many more).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $type,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name $year $type\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;boolean-options&#34;&gt;Boolean options&lt;/h3&gt;

&lt;p&gt;Finally I want to add a boolean option for whether to print out the full license text or not. To use boolean options with &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, it&amp;rsquo;s the same as with other options except that you don&amp;rsquo;t specify the type after the option name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $type,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fulltext&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fulltext,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name $year $type $fulltext\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fulltext option does not take a value and will be initialized as 1 if present, or &lt;code&gt;undef&lt;/code&gt; if not:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;David Farrell&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t FreeBSD &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fulltext
David Farrell &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt; FreeBSD &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;default-values&#34;&gt;Default values&lt;/h3&gt;

&lt;p&gt;Some options I can give default values to. For example if the user doesn&amp;rsquo;t pass the year they want the license for, I&amp;rsquo;ll assume they want the current year.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; year_now()),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic 2.0&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fulltext&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fulltext,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;year_now&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $localtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $localtime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;year;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name $year $type $fulltext\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve added the &lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt; module, which is a &lt;a href=&#34;http://perltricks.com/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece&#34;&gt;useful&lt;/a&gt; module for datetime handling, and a subroutine &lt;code&gt;year_now&lt;/code&gt; which returns the current year. Meanwhile I&amp;rsquo;ve updated &lt;code&gt;GetOptions&lt;/code&gt; to assign the current year to the &lt;code&gt;$year&lt;/code&gt; variable. This will be overridden if the user passes the year argument. I&amp;rsquo;ve also given the license type the default value of &amp;ldquo;artistic 2.0&amp;rdquo; as that is the same license as Perl 5 (and the license used by many modules).&lt;/p&gt;

&lt;h3 id=&#34;mandatory-parameters&#34;&gt;Mandatory parameters&lt;/h3&gt;

&lt;p&gt;So far so good, but what about mandatory parameters? This script will not work unless the user passes the license holder information. For mandatory parameters I have to check for their presence myself, &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; can&amp;rsquo;t help me here. Luckily it&amp;rsquo;s a simple check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; year_now()),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic 2.0&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fulltext&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fulltext,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid options passed to $0\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# check we got a license holder&lt;/span&gt;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$0 requires the license holder argument (--holder)\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $holder_name;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;year_now&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $localtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $localtime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;year;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$holder_name $year $type $fulltext\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case you&amp;rsquo;re wondering, the variable &lt;code&gt;$0&lt;/code&gt; is a special variable that is the program&amp;rsquo;s name. It&amp;rsquo;s a handy shortcut for exception messages and cheating at writing &lt;a href=&#34;https://en.wikipedia.org/wiki/Quine_%28computing%29&#34;&gt;quines&lt;/a&gt; (like this: &lt;code&gt;open+0;print&amp;lt;0&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;help-text&#34;&gt;Help text&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re almost done, but &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; has more tricks up its sleeve. I&amp;rsquo;ll add some basic documentation to this script, in &lt;a href=&#34;https://perldoc.perl.org/perlpod.html&#34;&gt;Pod&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HelpMessage&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;holder=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $holder_name,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year=i&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; year_now()),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic 2.0&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fulltext&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fulltext,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { HelpMessage(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) },
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; HelpMessage(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# die unless we got the mandatory argument&lt;/span&gt;
HelpMessage(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $holder_name;

print_license ($holder_name, $year, $type, $fulltext);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;year_now&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $localtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $localtime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;year;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# tbc&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_license&lt;/span&gt; { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }

&lt;span style=&#34;color:#75715e&#34;&gt;=head1 NAME
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;license - get license texts at the command line!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=head1 SYNOPSIS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --holder,-h     Holder name (required)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --year,-y       License year (defaults to current year)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --type,-t       License type (defaults to Artistic 2.0)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --fulltext,-f   Print the full license text
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --help,-h       Print this help
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=head1 VERSION
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;0.01
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=cut&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation is pretty minimal, just the program name, synopsis of its arguments and a version number. I&amp;rsquo;ve replaced the print statement with a stub function &lt;code&gt;print_license&lt;/code&gt;, which is where the main program would be implemented. I&amp;rsquo;ve replaced the &lt;code&gt;die&lt;/code&gt; calls with the &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; function &lt;code&gt;HelpMessage&lt;/code&gt;. This will print a usage help text and exit the program when called. Let&amp;rsquo;s try it out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;license &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k
Unknown option: k
Usage:
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;holder, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h    Holder name (required)
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;year, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y      License year (defaults to current year)
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;type, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t      License type (defaults to Artistic &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;fulltext, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f  Print the full license text
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h      Print this help&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not bad! &lt;code&gt;HelpMessage&lt;/code&gt; takes an exit value to return to the OS. If the user passes the argument &lt;code&gt;--help&lt;/code&gt; the program should print the usage and exit without error (value zero). However if they don&amp;rsquo;t pass any arguments at all or if they pass any invalid arguments, the same usage text will be printed but the program will exit with 1, indicating that something went wrong.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Dancer2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-application&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MANIFEST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SKIP
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;views
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;_index_route&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;MyApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;environments
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;production&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;public
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;favicon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ico
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fcgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;jquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;js
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets start the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dancer2 v0&lt;span style=&#34;color:#ae81ff&#34;&gt;.143000&lt;/span&gt; server &lt;span style=&#34;color:#ae81ff&#34;&gt;435&lt;/span&gt; listening on http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-static-site&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;page&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;requisites&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cat urls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; xargs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;P16 wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create professional slideshows in seconds with App::revealup</title>
      <link>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</link>
      <pubDate>Fri, 06 Jun 2014 12:59:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is a command line app that creates slide shows from markdown documents. We listed it in this this month&amp;rsquo;s &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, but the app is so much fun I thought it was worth a separate feature.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to grab App::revealup from CPAN. The latest version (0.03) should run on most platforms including Windows. At the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::revealup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-a-presentation&#34;&gt;Create a presentation&lt;/h3&gt;

&lt;p&gt;App::revealup transforms markdown documents into slide shows, so let&amp;rsquo;s start by creating a basic presentation file, called presentation.md:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, markdown is easy to read. The code above is a single slide presentation. The only two interesting things going on here is the use of backticks (&amp;rdquo;`App::revealup`&amp;rdquo;) to create inline code and the hyperlink &amp;ldquo;&lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To view this slide in presentation mode, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open your browser and navigate to &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a second slide to showcase how different headers appear. In App::revealup the horizontal slide separator is three hyphens in a row (&amp;ldquo;&amp;mdash;&amp;rdquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::reveal dynamically reads the source presentation file, so you can leave the process running and just save the changes to the source presentation file. Reloading the browser at &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; should show the updated presentation. Press → to move to the second slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can add vertical slides too. These are delimited by three underscores (&amp;rdquo;___&amp;rdquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unordered
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lists are
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; made with plus, minus &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; asterisk
___

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Ordered
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lists are
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; made with numbers &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a period&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refreshing the browser, we get two additional slides. Press ↓ to move down one slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of trawling through every slide, I&amp;rsquo;ve completed the rest of the presentation and put it on &lt;a href=&#34;https://gist.github.com/dnmfarrell/1b118c5813a7a10ea7e2&#34;&gt;GitHub&lt;/a&gt;. The presentation content is an overview of the markdown syntax. Try running it with App::revealup!&lt;/p&gt;

&lt;p&gt;One nice feature is if you ever want to zoom out, just press the escape key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide_zoom.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-app-revealup-works&#34;&gt;How App::revealup works&lt;/h3&gt;

&lt;p&gt;App::revealup is the glue between the &lt;a href=&#34;http://lab.hakim.se/reveal-js/#/&#34;&gt;reveal.js&lt;/a&gt; library and the source markdown file. It launches a PSGI web server, and compiles a basic HTML document which loads reveal.js and any required libraries or css. You can override the default css theme by passing an extra command line option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme solarized&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::revealup installs all of the basic reveal.js &lt;a href=&#34;https://github.com/hakimel/reveal.js/tree/master/css/theme&#34;&gt;themes&lt;/a&gt; or you can provide your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/custom.css&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;App::revealup is great example of Perl as a glue language - pulling together useful libraries to create something greater than the sum of its parts. If you&amp;rsquo;d like to learn more about the markdown syntax, check out this &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheetsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;text=Create+professional+slideshows+in+seconds+with+App%3A%3Arevealup&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: command changed to match v0.10 (see &lt;a href=&#34;https://metacpan.org/changes/distribution/App-revealup&#34;&gt;changelog&lt;/a&gt;) 2014-08-24.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Become a better programmer with exercism.io</title>
      <link>http://localhost:1313/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</link>
      <pubDate>Mon, 19 May 2014 01:15:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/90/2014/5/19/Become-a-better-programmer-with-exercism-io/</guid>
      <description>

&lt;p&gt;&lt;em&gt;For the past week I&amp;rsquo;ve been trying out &lt;a href=&#34;http://exercism.io/&#34;&gt;exercism.io&lt;/a&gt; the programming exercises app. I heard about it back in December when Gabor &lt;a href=&#34;http://blogs.perl.org/users/gabor_szabo/2013/12/perl-exercism.html&#34;&gt;blogged&lt;/a&gt; about it, but didn&amp;rsquo;t try it until now. I wish I hadn&amp;rsquo;t waited so long, as exercism is a lot of fun.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-exercism-works&#34;&gt;How exercism works&lt;/h3&gt;

&lt;p&gt;exercism comes with a command line app that downloads programming exercises and submits your coded answers to the exercism website. Every programming exercise comes with a readme and a test file. To complete the exercise you need to write a Perl module that passes all of the tests.&lt;/p&gt;

&lt;p&gt;When you are done and have submitted your Perl module via the command line app, you and other programmers can &amp;ldquo;nitpick&amp;rdquo; your code and comment on it. Once you feel you have gotten enough comments, you can finalize your submission and view other programmer&amp;rsquo;s solutions for the same exercise. The kicker is that you only receive one programming exercise at a time, and cannot access another exercise until you complete the current one.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s TIMTOWTDI nature means that there are several correct solutions for the exercises and you can often learn something from viewing other programmers&amp;rsquo; solutions. For example in one exercise I used a regular expression only to find that the simpler &lt;a href=&#34;https://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators&#34;&gt;transliteration&lt;/a&gt; operator worked just as well. The exercise difficulty varies from easy to hard, but the real challenge is finding a clean, generalized solution for the spec.&lt;/p&gt;

&lt;h3 id=&#34;try-it-out&#34;&gt;Try it out&lt;/h3&gt;

&lt;p&gt;Grab the &lt;a href=&#34;https://github.com/exercism/cli/releases/latest&#34;&gt;latest binary&lt;/a&gt; for your platform and extract it. Fire up the command line and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ exercism demo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will fetch the first exercise (&amp;ldquo;Bob&amp;rdquo; at the time of writing). You can find the test file and readme at &amp;ldquo;perl5/bob/&amp;rdquo;. Opening the readme you&amp;rsquo;ll see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Bob&lt;/span&gt;

Bob is a lackadaisical teenager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In conversation, his responses are very limited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Bob answers &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sure.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask him a question&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

He answers &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Woah, chill out!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you yell at him&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

He says &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fine. Be that way!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you address him without actually saying anything&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

He answers &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Whatever.&amp;#39;&lt;/span&gt; to anything &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;## Instructions&lt;/span&gt;

Run the test file, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; fix each of the errors in turn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When you get the first test to pass, go to the first pending &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; skipped test, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; make that pass as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When all of the tests are passing, feel free to submit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Remember that passing code is just the first step&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The goal is to work towards a solution that is as readable &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; expressive as you can make it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Please make your solution as general as possible&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Good code doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t just pass the test suite, it works with any input that fits the specification.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Have fun!
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;## Source
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Inspired by the &amp;#39;&lt;/span&gt;Deaf Grandma&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; exercise in Chris Pine&amp;#39;&lt;/span&gt;s Learn to Program tutorial&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; [view source](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;pine&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fm&lt;span style=&#34;color:#e6db74&#34;&gt;/LearnToProgram/&lt;/span&gt;?Chapter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the test file change into the exercise directory and use prove:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd perl5&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bob
$ prove bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That will get this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; Bailout called&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  Further testing stopped:  You need to create a module called Bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm with a function called hey() that gets one parameter: The text Bob hears&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#   Failed test &amp;#39;missing Bob.pm&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   at bob.t line 37.&lt;/span&gt;
FAILED&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;Further testing stopped: You need to create a module called Bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm with a function called hey() that gets one parameter: The text Bob hears&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s create a basic Bob.pm module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Bob;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hey&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a shell of the solution. Our &amp;ldquo;hey&amp;rdquo; subroutine returns the first input it receives. Re-running prove, we get this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   Failed test &amp;#39;stating something: Tom-ay-to, tom-aaaah-to.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   at bob.t line 52.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#          got: &amp;#39;Tom-ay-to, tom-aaaah-to.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     expected: &amp;#39;Whatever.&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Looks like you failed 19 tests of 22.&lt;/span&gt;
bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; Dubious, test returned &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; (wstat &lt;span style=&#34;color:#ae81ff&#34;&gt;4864&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1300&lt;/span&gt;)
Failed &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; subtests

Test Summary Report
&lt;span style=&#34;color:#f92672&#34;&gt;-------------------&lt;/span&gt;
bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t (Wstat: &lt;span style=&#34;color:#ae81ff&#34;&gt;4864&lt;/span&gt; Tests: &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; Failed: &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;)
  Failed tests:  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
  Non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;zero exit status: &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.06&lt;/span&gt; CPU)
Result: FAIL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that Bailout is no longer being called, so our basic module passed the first few tests, but failed 19 of 22. I&amp;rsquo;ve abbreviated the output to show only the first failing test. The output tells us everything we need to know: our &amp;ldquo;hey&amp;rdquo; subroutine did not return the content required by the spec. I&amp;rsquo;ll leave the exercise here - if you&amp;rsquo;re feeling suitably inspired see if you can complete it.&lt;/p&gt;

&lt;h3 id=&#34;help-represent-perl&#34;&gt;Help represent Perl&lt;/h3&gt;

&lt;p&gt;One of the exercism&amp;rsquo;s strengths is it has the same programming exercises in different programming languages, so you can develop your polyglot skills. Looking at the &lt;a href=&#34;https://github.com/exercism&#34;&gt;source&lt;/a&gt;, it appears that JavaScript, Python, Ruby and Haskell are leading the pack with about 55 exercises available each. Perl is well-represented with 36 exercises and the other languages have about 20 or fewer.&lt;/p&gt;

&lt;p&gt;This week I ported a couple of the missing exercises to the Perl &lt;a href=&#34;https://github.com/exercism/xperl5&#34;&gt;repo&lt;/a&gt;. To port a missing exercise you have to provide the test file and module solution. This is easier than it sounds as you can just translate the exercise code from another language into Perl. Across all the languages there are about 80 different exercises. I&amp;rsquo;ve created a &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt; which lists the missing exercises.&lt;/p&gt;

&lt;p&gt;It only take about 30 minutes to port one exercise: if 2% of the readers of this article port one exercise each today, Perl will immediately have more exercises than any other language. There is also an empty Perl 6 &lt;a href=&#34;https://github.com/exercism/xperl6&#34;&gt;repo&lt;/a&gt;; porting the Perl 5 exercises to Perl 6 could make for a juicy hackathon target.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Playing with exercism has been loads of fun and I&amp;rsquo;ve learned a few Perl tricks (hah!) along the way. The source is MIT licensed and the committers are friendly. It would be great to see more Perlers participating or porting an exercise or too. Feel free to clone or or stencil the &lt;a href=&#34;https://questhub.io/realm/perl/quest/53795a10bbd0be180400014f&#34;&gt;quest&lt;/a&gt;. Let&amp;rsquo;s show people what our language can do!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;text=Become+a+better+programmer+with+exercism.io&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F90%2F2014%2F5%2F18%2FBecome-a-better-programmer-with-exercism-io&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The easy way to build stand-alone Perl apps</title>
      <link>http://localhost:1313/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</link>
      <pubDate>Sun, 05 Jan 2014 23:21:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</guid>
      <description>

&lt;p&gt;The Perl toolchain has such a large install base it&amp;rsquo;s tempting to just upload your app to PAUSE and let users install it via CPAN. &lt;a href=&#34;https://metacpan.org/search?q=App%3A%3A&#34;&gt;Many authors&lt;/a&gt; have taken this approach and it makes sense in most cases to reuse the power of the CPAN in providing a common install, dependency management and update mechanism. Sometimes however you want to distribute a dependency-free Perl app in a single executable file, and for these cases you&amp;rsquo;ll want to look at &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a Unix-based system (Linux, OSX, BSD) and to install &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;. It runs on every version of Perl from 5.8.8 upwards, so just fire up the terminal and enter the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan App::FatPacker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;coding-your-app&#34;&gt;Coding your app&lt;/h3&gt;

&lt;p&gt;You can convert any typical Perl script into a standalone app, as long as it doesn&amp;rsquo;t have XS dependencies (see &amp;ldquo;Alternatives to App::Fatpacker&amp;rdquo; below for more info on how to create apps with XS dependencies). One suggestion would be to use the following shebang line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shebang line will call the &amp;ldquo;env&amp;rdquo; program passing &amp;ldquo;perl&amp;rdquo; as a parameter. This deals with the issue of the Perl binary beng installed in different locations on platforms as it will use the Perl binary in the user&amp;rsquo;s $PATH. This is documented in &lt;a href=&#34;https://perldoc.perl.org/perlrun.html&#34;&gt;perlrun&lt;/a&gt;. It is also compatible with Perlbrew.&lt;/p&gt;

&lt;h3 id=&#34;producing-the-single-file-app&#34;&gt;Producing the single file app&lt;/h3&gt;

&lt;p&gt;This couldn&amp;rsquo;t be simpler: once you have your Perl script ready to go, open the terminal and enter the following, replacing the paths with your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;fatpack pack &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#e6db74&#34;&gt;/script &amp;gt; /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will pack all of the dependencies used by your script into a single executable app.&lt;/p&gt;

&lt;h3 id=&#34;running-the-app&#34;&gt;Running the app&lt;/h3&gt;

&lt;p&gt;Now that your app is in a single file, distributing and running it is a piece of cake. Simply copy the file to any directory in your $PATH. In order to be able to run your new app, you&amp;rsquo;ll need to set it&amp;rsquo;s permission to be executable. You can do this with chmod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the app should run simply by entering the app filename in the terminal.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h3&gt;

&lt;p&gt;Let say we have the following script, BillCalc.pl which calculates how much each person should pay at dinner using the fictitious &amp;ldquo;Math::Bill&amp;rdquo; library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Math::Bill;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Carp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;croak&amp;#39;&lt;/span&gt;;

croak &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: missing arguments. Requires a bill total and number of people at dinner. e.g:\n   BillCalc 100.40 3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @ARGV &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math::Bill&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Each person should pay: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $bill&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;apportion &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; each&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can pack BillCalc.pl into a single file app using App::Fatpacker:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;fatpack pack BillCalc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; BillCalc
BillCalc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::Fatpacker prints out a confirmation message (&amp;ldquo;BillCalc.pl syntax OK&amp;rdquo;) and we should now have a new file, called &amp;ldquo;BillCalc&amp;rdquo; in our current directory. This file will contain all of the contents of &amp;ldquo;Math::Bill&amp;rdquo; and any other dependencies in BillCalc.pl.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move this to a directory in my $PATH, /home/sillymoose/local/bin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;mv BillCalc &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the file permissions to be executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;BillCalc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can run the BillCalc app at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;BillCalc &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
Each person should pay: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; each&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For an example of a real-world Perl app created with App::FatPacker, check out our article on &lt;a href=&#34;http://perltricks.com/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every&#34;&gt;every&lt;/a&gt;, the cron scheduling app.&lt;/p&gt;

&lt;h3 id=&#34;alternatives-to-app-fatpacker&#34;&gt;Alternatives to App::FatPacker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/pp&#34;&gt;PP&lt;/a&gt; is another Perl tool that can create stand-alone Perl apps. It also supports XS module dependencies (unlike App::FatPacker).&lt;/p&gt;

&lt;p&gt;Of course you can also distribute an application via CPAN, where you have the flexibility of including the dependent modules in your application&amp;rsquo;s inc directory, or include the modules as dependencies in the makefile, and let CPAN install them for you - this is also more disk space efficient. Perl applications on CPAN place the app in the application&amp;rsquo;s bin directory and use &amp;ldquo;EXE_FILES&amp;rdquo; directive in the makefile to install the app to the Perl bin directory. If you&amp;rsquo;re interested in this approach, check out the &lt;a href=&#34;https://metacpan.org/pod/Module::Starter&#34;&gt;Module::Starter source&lt;/a&gt; as a good example to copy from.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

