<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Join on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/join/</link>
    <description>Recent content in Join on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Oct 2014 12:42:52 +0000</lastBuildDate>
    <atom:link href="/tags/join/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl&#39;s versatile split function</title>
      <link>http://localhost:1313/article/121/2014/10/24/Perl-s-versatile-split-function/</link>
      <pubDate>Fri, 24 Oct 2014 12:42:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/121/2014/10/24/Perl-s-versatile-split-function/</guid>
      <description>

&lt;p&gt;I love Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/split.html&#34;&gt;split&lt;/a&gt; function. Far more powerful than its feeble cousin &lt;a href=&#34;https://perldoc.perl.org/functions/join.html&#34;&gt;join&lt;/a&gt;, split has some wonderful features that should make it a regular feature of any Perl programmer&amp;rsquo;s toolbox. Let&amp;rsquo;s look at some examples.&lt;/p&gt;

&lt;h3 id=&#34;split-a-sentence-into-words&#34;&gt;Split a sentence into words&lt;/h3&gt;

&lt;p&gt;To split a sentence into words, you might think about using a whitespace regex pattern like &lt;code&gt;/\s+/&lt;/code&gt; which splits on contiguous whitespace. Split will ignore trailing whitespace, but what if the input string has &lt;em&gt;leading&lt;/em&gt; whitespace? A better option is to use a single space string: &lt;code&gt;&#39; &#39;&lt;/code&gt;. This is a special case where Perl emulates awk and will split on all contiguous whitespace, trimming any leading or trailing whitespace as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, $sentence;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or loop through each word and do something:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.010&lt;/span&gt;;
say &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (split &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; 12 Angry Men &amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;# 12&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Angry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Men&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The single-space pattern is also the default pattern for &lt;code&gt;split&lt;/code&gt;, which by default operates on &lt;code&gt;$_&lt;/code&gt;. This can lead to some seriously minimalist code. For example if I needed to split every name in a list of full names and do something with them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@full_names)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (split)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And who says Perl looks like line noise?&lt;/p&gt;

&lt;h3 id=&#34;create-a-char-array&#34;&gt;Create a char array&lt;/h3&gt;

&lt;p&gt;To split a word into separate letters, just pass an empty regex &lt;code&gt;//&lt;/code&gt; to split:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @letters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;, $word;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;parse-a-url-or-filepath&#34;&gt;Parse a URL or filepath&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s tempting to reach for a regex when parsing strings, but for URLs or filepaths &lt;code&gt;split&lt;/code&gt; usually works better. For example if you wanted to get the parent directory from a filepath:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @directories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/user/documents/business_plan.ods&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parent_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $directories[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I split the filepath on slash and use the negative index &lt;code&gt;-2&lt;/code&gt; to get the parent directory. The challenge with filepaths is that they can have n depth, but the parent directory of a file will always be the last but one element of a filepath, so &lt;code&gt;split&lt;/code&gt; works well.&lt;/p&gt;

&lt;h3 id=&#34;extract-only-the-first-few-columns-from-a-separated-file&#34;&gt;Extract only the first few columns from a separated file&lt;/h3&gt;

&lt;p&gt;How many times have you parsed a comma separated file, but didn&amp;rsquo;t want all of the columns in the file? Let&amp;rsquo;s say you wanted the first 3 columns from a file, you might do it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$read_file&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/,/&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $name    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $email   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $account &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is all well and good, but &lt;code&gt;split&lt;/code&gt; can return a limited number of results if you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$read_file&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($name, $email, $account) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/,/&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or to revisit an earlier example, splitting on whitespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@full_names)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($firstname, $lastname) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These are just a few examples of Perl&amp;rsquo;s versatile &lt;code&gt;split&lt;/code&gt; function. Check out the official documentation &lt;a href=&#34;https://perldoc.perl.org/functions/split.html&#34;&gt;online&lt;/a&gt; or via the terminal with &lt;code&gt;$ perldoc -f split&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

