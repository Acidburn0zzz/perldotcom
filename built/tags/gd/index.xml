<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gd on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/gd/</link>
    <description>Recent content in Gd on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Jan 2019 15:41:39 +0000</lastBuildDate>
    <atom:link href="/tags/gd/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Find Relationships Quickly in Data With Chart::Plot</title>
      <link>http://localhost:1313/article/find-relationships-quickly-in-data-with-chart-plot/</link>
      <pubDate>Mon, 21 Jan 2019 15:41:39 +0000</pubDate>
      
      <guid>http://localhost:1313/article/find-relationships-quickly-in-data-with-chart-plot/</guid>
      <description>

&lt;p&gt;Last week I was analyzing server log data at work, and my boss asked me to plot it on a scatter chart. &amp;ldquo;No problem!&amp;rdquo; I thought, firing up Google Sheets. But Sheets slowed to a crawl when I uploaded 250,000 records to plot. Using CPAN I found something better: &lt;a href=&#34;https://metacpan.org/pod/Chart::Plot&#34;&gt;Chart::Plot&lt;/a&gt;. It has a simple interface and is really fast. Here&amp;rsquo;s how you use it.&lt;/p&gt;

&lt;h2 id=&#34;a-scatter-plot-script&#34;&gt;A scatter plot script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Chart::Plot;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mlb, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-so-hr.csv&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @series;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$mlb&amp;gt;&lt;/span&gt;) {
  chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($x, $y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  push @series, $x, $y;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Chart::Plot&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt;);
$img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setData(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@series, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Points Noline Blue&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error;

$img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setGraphOptions (
  vertGraphOffset &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
  horGraphOffset  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
  vertAxisLabel   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HR&amp;#39;&lt;/span&gt;,
  horAxisLabel    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SO&amp;#39;&lt;/span&gt;,
  title           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017 MLB Strikeouts and Home Runs&amp;#39;&lt;/span&gt;,
);

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;:raw&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-mlb-so-hr.png&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $fh $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;draw();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To demo Chart::Plot, I&amp;rsquo;ve extracted MLB 2017 pitching data from the &lt;a href=&#34;http://www.seanlahman.com/baseball-archive/statistics/&#34;&gt;Lahman database&lt;/a&gt; for strikeouts and home runs given up to see if there&amp;rsquo;s a relationship between them.&lt;/p&gt;

&lt;p&gt;My script opens the csv (which is tab separated) and parses it, pushing the columns into &lt;code&gt;@series&lt;/code&gt;. It creates a new 800x640 pixel Chart::Plot object and calls the &lt;a href=&#34;https://metacpan.org/pod/Chart::Plot#Acquire-a-dataset:-setData()&#34;&gt;setData&lt;/a&gt; method, passing it an arrayref to &lt;code&gt;@series&lt;/code&gt;, and a style string describing the shape and color to plot the series with. Here is the output file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/find-relationships-quickly-in-data-with-chart-plot/2017-mlb-so-hr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A cursory look at this data would suggest there &lt;em&gt;is&lt;/em&gt; a correlation between strikeouts and home runs, maybe hard-throwing pitchers throw more strikes, but the additional velocity gives up more home runs?&lt;/p&gt;

&lt;h2 id=&#34;multiple-series&#34;&gt;Multiple series&lt;/h2&gt;

&lt;p&gt;To display multiple series on the chart, simply call &lt;code&gt;setData&lt;/code&gt; for each additional series to add. I&amp;rsquo;ve updated the MLB data to include which league the pitcher was throwing in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Chart::Plot;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mlb, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-so-hr-lg.csv&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (@nl, @al);
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$mlb&amp;gt;&lt;/span&gt;) {
  chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($x, $y, $league) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($league &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NL&amp;#39;&lt;/span&gt;) {
    push @nl, $x, $y;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    push @al, $x, $y;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Chart::Plot&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt;);
$img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setData(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@nl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Points Noline Blue&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error;
$img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setData(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@al, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Points Noline Red&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error;

$img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;setGraphOptions (
  vertGraphOffset &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
  horGraphOffset  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
  vertAxisLabel   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HR&amp;#39;&lt;/span&gt;,
  horAxisLabel    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SO&amp;#39;&lt;/span&gt;,
  title           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017 MLB Strikeouts and Home Runs&amp;#39;&lt;/span&gt;,
);

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;:raw&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-mlb-so-hr-lg.png&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $fh $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;draw();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I separate the input data into two series, one for the National League and one for the American League. I then call &lt;code&gt;setData&lt;/code&gt; for each series, using blue and red styles. Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/find-relationships-quickly-in-data-with-chart-plot/2017-mlb-so-hr-lg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;non-transparent-charts&#34;&gt;Non-transparent charts&lt;/h2&gt;

&lt;p&gt;By default, Chart::Plot produces charts with a transparent background. If you wanted to add a white background you could use &lt;code&gt;convert&lt;/code&gt; at the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -flatten 2017-mlb-so-hr.png 2017-mlb-so-hr-whitebg.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Chart::Plot gives you access to the underlying GD graphics object, so why not manipulate it directly in the script?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $img&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getGDobject();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $white &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gd&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;colorAllocate(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;);
$gd&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;filledRectangle(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;798&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;638&lt;/span&gt;,$white);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet creates a new white color by calling &lt;code&gt;colorAllocate&lt;/code&gt; with the RGB values for white, which creates the color and returns its &lt;a href=&#34;https://en.wikipedia.org/wiki/Indexed_color&#34;&gt;index&lt;/a&gt;. Then it draws a white rectangle starting at the top-left pixel (plus 1 to avoid overwriting the border) and ending at the bottom-right pixel (minus 1).&lt;/p&gt;

&lt;h2 id=&#34;strikeouts-and-home-runs-revisited&#34;&gt;Strikeouts and home runs revisited&lt;/h2&gt;

&lt;p&gt;If I divide each pitcher&amp;rsquo;s strikeouts and home runs by the number of innings they pitched in 2017, the data tells a different story:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/find-relationships-quickly-in-data-with-chart-plot/2017-mlb-so-hr-ip.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Strikeouts and home runs given up increase as pitchers throw for more innings, but the relationship between them has all but disappeared&amp;hellip; there goes my sabermetrics career.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Chart::Plot is great for generating scatter or line charts when you have a lot of data. Its simple interface and sane defaults make charting easy.&lt;/p&gt;

&lt;p&gt;However, as its style strings only contain four colors, you can only plot 4 different data series on a single chart. The chart text styling is hardcoded to a rather spartan style. And whilst it does give you access to the underlying GD object, it can be quite cumbersome to draw on the image pixel-by-pixel. Pie and bar charts are not supported, so you&amp;rsquo;ll need to use a different module for those. It isn&amp;rsquo;t a general-purpose charting library, it&amp;rsquo;s a specialized instrument. Everyone&amp;rsquo;s toolbox should have room for a few of those.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

