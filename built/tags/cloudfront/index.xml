<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudfront on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/cloudfront/</link>
    <description>Recent content in Cloudfront on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Apr 2017 08:12:14 +0000</lastBuildDate>
    <atom:link href="/tags/cloudfront/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AWS Cloudfront cache invalidation with Paws</title>
      <link>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</link>
      <pubDate>Mon, 03 Apr 2017 08:12:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/&#34;&gt;Deploy a static website with Paws&lt;/a&gt;, I developed a simple script to upload files to AWS S3, using &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;. In this article I&amp;rsquo;ll describe a script to invalidate CloudFront caches: this can be used to force CloudFront to re-cache files which have changed on S3.&lt;/p&gt;

&lt;h3 id=&#34;aws-cloudfront&#34;&gt;AWS CloudFront&lt;/h3&gt;

&lt;p&gt;CloudFront is Amazon&amp;rsquo;s Content Delivery Network service. It&amp;rsquo;s used to cache local versions of files so that they can be delivered to requests faster; for example if you used S3 to host your website in Amazon&amp;rsquo;s US East region, files on the website might load faster for East Coast customers than those on the West Coast. With a CDN like CloudFront however, copies of the website files can be saved all over the World, so that visitor&amp;rsquo;s browsers fetch the website files from closer geographic locations, improving the website speed.&lt;/p&gt;

&lt;p&gt;When cached website files are updated on S3, they need to be invalidated from the CloudFront cache. This forces CloudFront to fetch fresh copies of invalidated files.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;Using CloudFront with Paws is pretty easy. For cache invalidation all you really need is a CloudFront distribution id, and a list of files to be invalidated. This is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gettimeofday&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;distribution-id=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DISTRIBUTION_ID,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys=s&amp;#39;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @KEYS,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--distribution-id and --region are required&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $DISTRIBUTION_ID &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION;

&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no objects to invalidate!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @KEYS;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalidating cached keys: %s\n&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;, @KEYS;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();

$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, I use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to process the command line options. The script requires a CloudFront distribution id and an AWS region string. The &lt;code&gt;--keys&lt;/code&gt; switch is optional as the script also reads keys from &lt;code&gt;STDIN&lt;/code&gt;. This snippet is curious:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It sets the &lt;code&gt;STDIN&lt;/code&gt; filehandle to non-blocking mode. That way, if STDIN is empty when the script tries to read from it, it won&amp;rsquo;t block. On the next line, &lt;code&gt;map&lt;/code&gt; is used to prepend a slash to every key. This is required by CloudFront.&lt;/p&gt;

&lt;p&gt;The script then creates a Paws CloudFront object, and the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; &lt;code&gt;gettimeofday&lt;/code&gt; function is used to calculate a cheap unique id (it returns the current epoch seconds and microseconds).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the script calls the &lt;code&gt;CreateInvalidation&lt;/code&gt; method to send the data to AWS CloudFront:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;combining-tools&#34;&gt;Combining tools&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;s3-upload&lt;/code&gt; script prints the keys it updated on STDOUT, and &lt;code&gt;cf-invalid&lt;/code&gt; can read keys from STDIN. This makes for convenient chaining:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload --files static --bucket example.com --region us-east-1 \
| ./cf-invalid --distribution-id e9d4922bd9120 --region us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And because the scripts use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, the option names can be shortened:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload -f static -b example.com -r us-east-1 | ./cf-invalid -d e9d4922bd9120 -r us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, keys (filenames) can be specified as arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./cf-invalid -d e9d4922bd9120 -r us-east-1 -k index.html -k about.html -k contact.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both scripts are available on &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2015</title>
      <link>http://localhost:1313/article/192/2015/9/3/What-s-new-on-CPAN---August-2015/</link>
      <pubDate>Thu, 03 Sep 2015 13:19:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/192/2015/9/3/What-s-new-on-CPAN---August-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::HSXKPasswd&#34;&gt;Crypt::HSXKPasswd&lt;/a&gt; is a new module for generating secure, memorable passwords inspired by &lt;a href=&#34;https://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt;. The module is highly configurable, supporting different word dictionaries, generation and padding rules.&lt;/p&gt;

&lt;p&gt;Module author Bart Busschots has provided rich documentation which includes the theory behind secure passwords and the methods supported by Crypt::HSXKPasswd. Start using securer passwords today!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::CloudFront::Thin&#34;&gt;Amazon::CloudFront::Thin&lt;/a&gt; aims to be a lightweight, request-level Amazon CloudFront&lt;/li&gt;
&lt;li&gt;A non-blocking API for Amazon&amp;rsquo;s SQS: &lt;a href=&#34;https://metacpan.org/pod/Amazon::SQS::Simple::AnyEvent&#34;&gt;Amazon::SQS::Simple::AnyEvent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Gre&#34;&gt;App::Gre&lt;/a&gt; is a grep clone with better file filtering&lt;/li&gt;
&lt;li&gt;Use the latest version of Google&amp;rsquo;s reCAPTCHA API with &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA::V2&#34;&gt;Captcha::reCAPTCHA::V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Menlo&#34;&gt;Menlo&lt;/a&gt; is an early release of the next version of &lt;code&gt;cpanm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::WebmasterTools&#34;&gt;Net::Google::WebmasterTools&lt;/a&gt; is a Perly interface to the Google WebmasterTools Reporting API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Emitter&#34;&gt;Log::Emitter&lt;/a&gt; is a simple logger based on Mojo::Log&lt;/li&gt;
&lt;li&gt;A Perl mail authentication milter: &lt;a href=&#34;https://metacpan.org/pod/Mail::Milter::Authentication&#34;&gt;Mail::Milter::Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::NSCAng::Client&#34;&gt;Net::NSCAng::Client&lt;/a&gt; can submit host and service monitoring Nagios data&lt;/li&gt;
&lt;li&gt;Find out your public IP address with &lt;a href=&#34;https://metacpan.org/pod/OpenDNS::MyIP&#34;&gt;OpenDNS::MyIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Svsh&#34;&gt;Svsh&lt;/a&gt; is a process supervision shell for daemontools, perp, s6 and runit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Apache::Hadoop::Config&#34;&gt;Apache::Hadoop::Config&lt;/a&gt; is a Perl extension for Hadoop node configuration&lt;/li&gt;
&lt;li&gt;Get flexible parameter binding and record fetching with &lt;a href=&#34;https://metacpan.org/pod/DBIx::FlexibleBinding&#34;&gt;DBIx::FlexibleBinding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate EPUB documents from Pod using &lt;a href=&#34;https://metacpan.org/pod/EBook::EPUB::Lite&#34;&gt;EBook::EPUB::Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Validate data against a JSON schema with &lt;a href=&#34;https://metacpan.org/pod/JSON::Validator&#34;&gt;JSON::Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SMTP::Verify&#34;&gt;Net::SMTP::Verify&lt;/a&gt; validates SMTP recipient addresses&lt;/li&gt;
&lt;li&gt;Truncate your large strings using &lt;a href=&#34;https://metacpan.org/pod/String::Snip&#34;&gt;String::Snip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Swagger2::Markdown&#34;&gt;Swagger2::Markdown&lt;/a&gt; can convert a Swagger2 spec to various markdown formats&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XMLRPC::Fast&#34;&gt;XMLRPC::Fast&lt;/a&gt; is a high performance XML-RPC encoder/decoder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Backbone::Events&#34;&gt;Backbone::Events&lt;/a&gt; is a port of the Backbone.js event API&lt;/li&gt;
&lt;li&gt;Detect the caller level of compiling code with &lt;a href=&#34;https://metacpan.org/pod/Devel::CompileLevel&#34;&gt;Devel::CompileLevel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::TypeTiny&#34;&gt;MooX::TypeTiny&lt;/a&gt; provides optimized type checks for Moo with Type::Tiny&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PPIx::Refactor&#34;&gt;PPIx::Refactor&lt;/a&gt; creates hooks for refactoring Perl, based on PPI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Role::EventEmitter&#34;&gt;Role::EventEmitter&lt;/a&gt; Event emitter role for Moo(se) classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::Filter&#34;&gt;Test::Deep::Filter&lt;/a&gt; filter matched elements before doing deep data comparisons&lt;/li&gt;
&lt;li&gt;Specify the time for unit tests &lt;a href=&#34;https://metacpan.org/pod/Test::Time::At&#34;&gt;Test::Time::At&lt;/a&gt; - looks great for testing tricky date times&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Tk::FormUI&#34;&gt;Tk::FormUI&lt;/a&gt; is a Moo-based object oriented interface for creating Tk forms&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AppleII::LibA2&#34;&gt;AppleII::LibA2&lt;/a&gt; is an Apple II emulator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PiFace&#34;&gt;Device::PiFace&lt;/a&gt; provides a Perly interface to manage PiFace boards&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::ProXR&#34;&gt;Device::ProXR&lt;/a&gt; is a Moo-based object oriented interface for creating controllers using the National Control Devices ProXR command set&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Hyphenate French words with &lt;a href=&#34;https://metacpan.org/pod/Lingua::FR::Hyphen&#34;&gt;Lingua::FR::Hyphen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::NO::Syllable&#34;&gt;Lingua::NO::Syllable&lt;/a&gt; can count the number of syllables in Norwegian words&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Locale::India&#34;&gt;Locale::India&lt;/a&gt; can be used for state and union territory identification in India&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Randf&#34;&gt;App::Randf&lt;/a&gt; is a random filter for STDIN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::this&#34;&gt;Acme::this&lt;/a&gt; prints the Zen of Perl&lt;/li&gt;
&lt;li&gt;Looking for secure, memorable password generator inspired &lt;a href=&#34;https://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt;? You might like &lt;a href=&#34;https://metacpan.org/pod/Crypt::HSXKPasswd&#34;&gt;Crypt::HSXKPasswd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get PHP&amp;rsquo;s &lt;code&gt;parse_str&lt;/code&gt; function using &lt;a href=&#34;https://metacpan.org/pod/PHP::ParseStr&#34;&gt;PHP::ParseStr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Disable &lt;code&gt;state&lt;/code&gt; keyword for testing with &lt;a href=&#34;https://metacpan.org/pod/Test::NoState&#34;&gt;Test::NoState&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::ECDH_ES&#34;&gt;Crypt::ECDH_ES&lt;/a&gt; aims to be a fast and small hybrid crypto system&lt;/li&gt;
&lt;li&gt;Get dependency resolution with &lt;a href=&#34;https://metacpan.org/pod/Dependency::Resolver&#34;&gt;Dependency::Resolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Groups&#34;&gt;Math::Groups&lt;/a&gt; finds &amp;ldquo;automorphisms of groups and isomorphisms between groups&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Get some useful Math functions with &lt;a href=&#34;https://metacpan.org/pod/Math::Utils&#34;&gt;Math::Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLA&#34;&gt;PDLA&lt;/a&gt; the Perl Data Language - seems familiar &amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Hilbert::XS&#34;&gt;Path::Hilbert::XS&lt;/a&gt; is a fast implementation of a Hilbert Path algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::TraitFor::Request::QueryFromJSONY&#34;&gt;Catalyst::TraitFor::Request::QueryFromJSONY&lt;/a&gt; supports JSONY query parameters&lt;/li&gt;
&lt;li&gt;Get even faster HTTP headers using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Headers::Fast::XS&#34;&gt;HTTP::Headers::Fast::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build swat tests from Mojo routes with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::swat&#34;&gt;Mojolicious::Command::swat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

