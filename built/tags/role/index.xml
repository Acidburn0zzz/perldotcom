<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Role on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/role/</link>
    <description>Recent content in Role on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2013 04:48:50 +0000</lastBuildDate>
    <atom:link href="/tags/role/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use roles in object oriented Perl with Role::Tiny</title>
      <link>http://localhost:1313/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role--Tiny/</link>
      <pubDate>Mon, 11 Nov 2013 04:48:50 +0000</pubDate>
      
      <guid>http://localhost:1313/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role--Tiny/</guid>
      <description>

&lt;p&gt;Roles are a label for a set of methods that a class provides. Similar to traits in Smalltalk or an interface in Java, adding a Perl role to a class is like adding a guarantee that the class will implement that role&amp;rsquo;s API. Roles are an alternative to inheritance; instead of extending a class hierarchy through subclassing, a programmer composes a class using roles for what the class does. This article describes how by using the &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; module you can imbue native Perl object oriented code with roles.&lt;/p&gt;

&lt;h3 id=&#34;install-role-tiny&#34;&gt;Install Role::Tiny&lt;/h3&gt;

&lt;p&gt;In order to use the code examples in this article you&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt;. You can install it via CPAN from the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan Role::Tiny&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;creating-a-role&#34;&gt;Creating a role&lt;/h3&gt;

&lt;p&gt;A role is a declared in a module file (*.pm). Let&amp;rsquo;s create a role called &amp;ldquo;Shape&amp;rdquo;, which we would expect all Shape classes to implement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Shape;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;

requires &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getArea&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code starts with the usual package declaration. By importing &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; with the use statement, we can automatically treat this module as a role by using its package name. The &amp;ldquo;requires&amp;rdquo; function adds a requirement that any class using this role must implement a &amp;lsquo;getArea&amp;rsquo; method.&lt;/p&gt;

&lt;h3 id=&#34;using-a-role&#34;&gt;Using a role&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s develop a Point class that will implement the Shape role. A point is a simple 2d shape located using an x and y value for Cartesian coordinates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Point;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny::With;

with &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shape&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($class, $x, $y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bless {  
                  x &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $x,
                  y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $y,
                 }, $class;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before the file begins with a package declaration. To be able to add roles to a class, we use &amp;ldquo;Role::Tiny::With&amp;rdquo;. This imports the &amp;ldquo;with&amp;rdquo; function which is use to import roles. We&amp;rsquo;ve also declared a constructor method that takes an x and y coordinate as parameters to store the point&amp;rsquo;s location. At this stage we have not added the &amp;ldquo;getArea&amp;rdquo; method required by the Shape role - so what would happen if we tried to create a Point object? We can test this at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MPoint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;we &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my $p = Point-&amp;gt;new(5,5)&amp;#39;&lt;/span&gt;
Can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t apply Shape to Point &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; missing getArea at &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/si&lt;/span&gt;te_perl&lt;span style=&#34;color:#e6db74&#34;&gt;/5.16.3/&lt;/span&gt;Role&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Tiny&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;306&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Compilation failed in &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; failed&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;compilation aborted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown above, Perl will raise an exception if a class uses a role but doesn&amp;rsquo;t implement its required methods. Let&amp;rsquo;s add a &amp;ldquo;getArea&amp;rdquo; method to the Point class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Point;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny::With;

with &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shape&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($class, $x, $y) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bless {
                  x &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $x,
                  y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $y,
                 }, $class;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getArea&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;getArea&amp;rdquo; sub returns the area of the point object (1). For other shapes such as a rectangle, &amp;ldquo;getArea&amp;rdquo; would have to calculate the area before returning it. Now that the Point class has the &amp;ldquo;getArea&amp;rdquo; method, we can create Point objects without Perl raising an exception.&lt;/p&gt;

&lt;h3 id=&#34;roles-can-define-methods&#34;&gt;Roles can define methods&lt;/h3&gt;

&lt;p&gt;A can be more than just a list of required methods - roles can define methods which the consuming class can use, just like a subclass inherits methods from its parent class. To see this in action let&amp;rsquo;s add get and set color methods to the Shape role.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Shape;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;

requires &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getArea&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getColor&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} ? $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setColor&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $color) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $color;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can get and set the color of any Point object. We can test this at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MPoint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;we &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my $p = Point-&amp;gt;new(5,5); $p-&amp;gt;setColor(&amp;#34;blue&amp;#34;); print $p-&amp;gt;getColor&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;how-to-check-if-an-object-does-a-role&#34;&gt;How to check if an object does a role&lt;/h3&gt;

&lt;p&gt;When a class uses a role, it also gets a boolean &amp;ldquo;does&amp;rdquo; method. This can be used to check if the class implements a specific role. For example we can quickly check for the presence of our &amp;ldquo;Shape&amp;rdquo; role in our Point class at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MPoint &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;we &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my $p = Point-&amp;gt;new(5,5); print $p-&amp;gt;does(&amp;#34;Shape&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Roles are a useful alternative to inheritance - they focus on what a class does rather than what it is. Using &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; is a nimble way to add roles to the existing Perl object oriented syntax without using an entire object system such as Moose.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

