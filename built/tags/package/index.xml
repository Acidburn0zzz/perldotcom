<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/package/</link>
    <description>Recent content in Package on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Dec 2016 08:40:57 +0000</lastBuildDate>
    <atom:link href="/tags/package/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl module names are filepaths - and that&#39;s all</title>
      <link>http://localhost:1313/article/perl-module-names-are-filepaths---and-that-s-all/</link>
      <pubDate>Wed, 14 Dec 2016 08:40:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-module-names-are-filepaths---and-that-s-all/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s common in Perl parlance to treat the words &amp;ldquo;module&amp;rdquo; and &amp;ldquo;package&amp;rdquo; as synonyms, and in practice they almost refer to the same thing. A module name is shorthand for a filepath, but a package name refers to a namespace within the Perl symbol table. It&amp;rsquo;s easy to forget this because module names and packages are written in the same colon-separated notation, and conventionally we give packages the same name as the module filepath. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Test::More; &lt;span style=&#34;color:#75715e&#34;&gt;# load Test/More.pm&lt;/span&gt;

Test::More::ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# call the ok function in the Test::More namespace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, &lt;code&gt;Test::More&lt;/code&gt; appears twice, but it really refers to two separate things; the first is a filepath, the second is a symbol namespace. They do not have to have the same name. Unfortunately &lt;a href=&#34;https://perldoc.perl.org/perlmod.html&#34;&gt;perlmod&lt;/a&gt; perpetuates this myth:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A module is just a set of related functions in a library file, i.e., a
Perl package with the same name as the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll make a quick module called &amp;ldquo;ACME::Foo::Bar&amp;rdquo;, &lt;code&gt;lib/ACME/Foo/Bar.pm&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Whatever2;

&lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; $VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;=head1 NAME
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ACME::Foo::Bar - proof that module names and packages are not the same
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=cut&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;me&lt;/span&gt; { __PACKAGE__ }

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the package name &lt;code&gt;Whatever2&lt;/code&gt; is completely different to the module name &lt;code&gt;ACME::Foo::Bar&lt;/code&gt;. At the terminal I can test it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -Ilib -MACME::Foo::Bar -E &#39;say Whatever2::me&#39;
Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl happily loads the ACME::Foo::Bar module and the &lt;code&gt;Whatever2&lt;/code&gt; namespace (I originally used &lt;code&gt;Whatever&lt;/code&gt; as the package name, but there is another package on CPAN with that name).&lt;/p&gt;

&lt;h3 id=&#34;as-a-distribution&#34;&gt;As a distribution&lt;/h3&gt;

&lt;p&gt;By adding a makefile, I can make this an installable distribution, &lt;code&gt;Makefile.PL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.008000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::MakeMaker;
WriteMakefile(
  NAME           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACME::Foo::Bar&amp;#39;&lt;/span&gt;,
  VERSION_FROM   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/ACME/Foo/Bar.pm&amp;#39;&lt;/span&gt;,
  ABSTRACT_FROM  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/ACME/Foo/Bar.pm&amp;#39;&lt;/span&gt;,
  AUTHOR         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David Farrell&amp;#39;&lt;/span&gt;,
  LICENSE        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl5&amp;#39;&lt;/span&gt;,
  MIN_PERL_VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5.008000&amp;#34;&lt;/span&gt;,
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hell, I can add some tests while we&amp;rsquo;re at it, &lt;code&gt;t/whatever.t&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACME::Foo::Bar&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import module&amp;#39;&lt;/span&gt; }

is Whatever2::me, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Whatever2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;me() returns package name&amp;#39;&lt;/span&gt;;

done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Installation is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl Makefile.PL
Generating a Unix-style Makefile
Writing Makefile for ACME::Foo::Bar
Writing MYMETA.yml and MYMETA.json
$ make
cp README.pod blib/lib/ACME/Foo/README.pod
cp lib/ACME/Foo/Bar.pm blib/lib/ACME/Foo/Bar.pm
Manifying 2 pod documents
$ make test
PERL_DL_NONLAZY=1 &amp;quot;/home/dfarrell/.plenv/versions/5.22.0/bin/perl5.22.0&amp;quot; &amp;quot;-MExtUtils::Command::MM&amp;quot; &amp;quot;-MTest::Harness&amp;quot; &amp;quot;-e&amp;quot; &amp;quot;undef *Test::Harness::Switches; test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&amp;quot; t/*.t
t/whatever.t .. ok
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.01 cusr  0.00 csys =  0.02 CPU)
Result: PASS
$ make install
Manifying 2 pod documents
Installing /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/site_perl/5.22.0/ACME/Foo/Bar.pm
Installing /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/site_perl/5.22.0/ACME/Foo/README.pod
Installing /home/dfarrell/.plenv/versions/5.22.0/man/man3/ACME::Foo::README.3
Installing /home/dfarrell/.plenv/versions/5.22.0/man/man3/ACME::Foo::Bar.3
Appending installation info to /home/dfarrell/.plenv/versions/5.22.0/lib/perl5/5.22.0/x86_64-linux/perllocal.pod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can test the installed version at the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MACME::Foo::Bar -E &#39;say Whatever2::me&#39;
Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tada! Works like a charm.&lt;/p&gt;

&lt;h3 id=&#34;toolchain-issues&#34;&gt;Toolchain issues&lt;/h3&gt;

&lt;p&gt;So now I have a distribution with a module containing a different package name, how well does it work with the CPAN toolchain? I&amp;rsquo;ve uploaded the distribution to CPAN, and you can view it on &lt;a href=&#34;https://metacpan.org/release/DFARRELL/ACME-Foo-Bar-0.02&#34;&gt;metacpan&lt;/a&gt;, and its CPAN Testers &lt;a href=&#34;http://www.cpantesters.org/distro/A/ACME-Foo-Bar.html?oncpan=1&amp;amp;distmat=1&amp;amp;version=0.02&amp;amp;grade=2&#34;&gt;results&lt;/a&gt; are looking good.&lt;/p&gt;

&lt;p&gt;There is one big issue though: the PAUSE indexer. PAUSE is the server which maintains CPAN data and its packages &lt;a href=&#34;https://cpan.metacpan.org/modules/02packages.details.txt&#34;&gt;list&lt;/a&gt; is an index mapping package names to distributions. The indexer requires that a distribution has a module with a matching package name in it. This makes sense as it discourages users from uploading conflicting package names into different distributions.&lt;/p&gt;

&lt;p&gt;CPAN clients lookup the package name in the packages list to know which distribution to install, so if my &lt;code&gt;Whatever2&lt;/code&gt; package isn&amp;rsquo;t in the list, I can&amp;rsquo;t install &lt;code&gt;ACME::Foo::Bar&lt;/code&gt; that way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan Whatever2
CPAN: Storable loaded ok (v2.53)
Reading &#39;/home/dfarrell/.local/share/.cpan/Metadata&#39;
  Database was generated on Thu, 15 Dec 2016 13:53:43 GMT
Warning: Cannot install Whatever2, don&#39;t know what it is.
Try the command

    i /Whatever2/

to find objects with matching identifiers.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But referencing it by its distribution name works fine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpan DFARRELL/ACME-Foo-Bar-0.02.tar.gz
--&amp;gt; Working on DFARRELL/ACME-Foo-Bar-0.02.tar.gz
Fetching http://www.cpan.org/authors/id/D/DF/DFARRELL/ACME-Foo-Bar-0.02.tar.gz ... OK
Configuring ACME-Foo-Bar-0.02 ... OK
Building and testing ACME-Foo-Bar-0.02 ... OK
Successfully installed ACME-Foo-Bar-0.02
1 distribution installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One exception to this is &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt;, which falls back on a file search of the metacpan API if it doesn&amp;rsquo;t find the package in &lt;a href=&#34;http://cpanmetadb.plackperl.org/&#34;&gt;CPAN meta DB&lt;/a&gt;. So this works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Whatever2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Neil Bowers has written an excellent &lt;a href=&#34;http://neilb.org/2015/09/05/cpan-glossary.html#cuckoo-package&#34;&gt;glossary&lt;/a&gt; of CPAN terms. Packages with a namespace different to their module name are known as &amp;lsquo;cuckoo&amp;rsquo; packages.&lt;/p&gt;

&lt;p&gt;As conventions go, using the same package and module name is useful and recommended. Especially if the code is going to be shared via CPAN or otherwise. But it&amp;rsquo;s good to know that they&amp;rsquo;re not the same thing.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;strong&gt;Updates&lt;/strong&gt;:&lt;em&gt;Changed example to use &amp;ldquo;require&amp;rdquo; instead of &amp;ldquo;use&amp;rdquo;, as &amp;ldquo;use&amp;rdquo; calls &amp;ldquo;import()&amp;rdquo; on the namespace. Changed the package name to &amp;ldquo;Whatever2&amp;rdquo; to avoid a CPAN conflict. Thanks to Perlancar, Aristotle and Grinnz for the feedback on /r/perl. 2016-12-15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rescue legacy code with modulinos</title>
      <link>http://localhost:1313/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</link>
      <pubDate>Thu, 07 Aug 2014 12:22:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/107/2014/8/7/Rescue-legacy-code-with-modulinos/</guid>
      <description>

&lt;p&gt;As businesses grow, they move into situations they didn&amp;rsquo;t anticipate and often have problems other businesses would love to have. Under rapid growth their codebase struggles to keep up. I&amp;rsquo;ve seen more bad code making money than I&amp;rsquo;ve seen good code making money, and it&amp;rsquo;s an exciting situation to fix. Modulinos have been a nice trick for me to move standalone programs toward a testable and manageable CPAN-like distribution.&lt;/p&gt;

&lt;p&gt;Modulinos isn&amp;rsquo;t an idea that I invented, but it&amp;rsquo;s something I popularized. I first got the idea from a talk by &lt;a href=&#34;http://blog.plover.com&#34;&gt;Mark Jason Dominus&lt;/a&gt; and the &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/lib/diagnostics.pm&#34;&gt;diagnostics&lt;/a&gt; module, written by Tom Christiansen way back in 1995. In this article I&amp;rsquo;ll talk a little about the trick, but more about why and how I&amp;rsquo;ve used it.&lt;/p&gt;

&lt;p&gt;The trick involves using &lt;a href=&#34;https://perldoc.perl.org/functions/caller.html&#34;&gt;caller&lt;/a&gt; to decide how a Perl file should act depending on how it&amp;rsquo;s loaded. When run from the command line, it acts like a program, but when loaded as a module, it doesn&amp;rsquo;t run anything while still making its subroutines and packages available. In the second edition of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt;, I expanded this a bit to check for the presence of a test harness so it could run methods that start with &lt;code&gt;test_&lt;/code&gt;, a Python feature I&amp;rsquo;ve liked.&lt;/p&gt;

&lt;p&gt;You can see the basic structure in &lt;a href=&#34;https://metacpan.org/pod/Modulino::Test&#34;&gt;Modulino::Test&lt;/a&gt;, part of the &lt;a href=&#34;https://metacpan.org/release/Modulino-Demo&#34;&gt;Modulino::Demo&lt;/a&gt; distribution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Modulino::Test;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; $VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.10_01&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_running_under_tester&lt;/span&gt; { &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; $ENV{CPANTEST} }

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_running_as_app&lt;/span&gt; { &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; defined scalar caller(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) }

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_loaded_as_module&lt;/span&gt; { defined scalar caller(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( _running_under_tester()   ) { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;( _loaded_as_module()       ) { undef  }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;( _running_as_app()            ) { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;run&amp;#39;&lt;/span&gt;  }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                { undef }
    };

__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;$method(@ARGV) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; defined $method;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;  { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I originally wrote about modulinos in &lt;a href=&#34;http://www.perlmonks.org/index.pl?node_id=396759&#34;&gt;How a script becomes a module&lt;/a&gt; on Perlmonks, and that&amp;rsquo;s where I first used the term. I might have even invented in while creating that post. I expanded it a little bit for &lt;a href=&#34;http://www.drdobbs.com/scripts-as-modules/184416165&#34;&gt;Scripts as Modules&lt;/a&gt; for &lt;em&gt;The Perl Journal&lt;/em&gt; (now swallowed as &lt;em&gt;Dr. Dobbs Journal&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;At the time, I was doing quite a bit of work to translate legacy codebases into something more manageable. Instead of rewriting everything, I created paths to better behavior with immediate results. Part of this path is testing the existing codebase so I could recreate it, bugs and rough edges included, in the next part. Moving standalone scripts to libraries or modules is a big part of that; I have to maintain the program behavior, but I want to unit test its innards.&lt;/p&gt;

&lt;p&gt;I have quite a bit of fun organizing a messy and (previously) unmanaged codebase. A little work makes a big difference and gives quick gains. From there it&amp;rsquo;s an easy path toward adding tests. It&amp;rsquo;s part of my motivation for &lt;a href=&#34;https://metacpan.org/pod/App::scriptdist&#34;&gt;scriptdist&lt;/a&gt;, which I wrote about in &lt;a href=&#34;http://www.drdobbs.com/web-development/automating-distributions-with-scriptdist/184416112&#34;&gt;Automating Distributions with scriptdist&lt;/a&gt;. Given a stand-alone program, I used that tool to build a distribution around it and include the test files. The program file stays the same, but once wrapped in the distribution goodness, I can start the transformation. Even if this code will never make it to CPAN, I can still use all the CPAN tools by making it look like a CPAN distribution.&lt;/p&gt;

&lt;h3 id=&#34;converting-a-script-to-a-modulino&#34;&gt;Converting a script to a modulino&lt;/h3&gt;

&lt;p&gt;Suppose I start with a script. Here&amp;rsquo;s a short one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even this simple program has problems (we never have trouble finding faults with programs; it&amp;rsquo;s almost bloodsport in some parts!). I can&amp;rsquo;t change where the output goes and it&amp;rsquo;s hard-coded to use English.&lt;/p&gt;

&lt;p&gt;My first step is to make this a program that behaves the same but has a different structure. Larry designed Perl to do away with the &lt;code&gt;main&lt;/code&gt; subroutine required by many other languages, but I bring it back:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;run();

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!\n&amp;#34;&lt;/span&gt;;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;__PACKAGE__&lt;/code&gt; token is a compiler directive that refers to the current package. It calls the &lt;code&gt;run&lt;/code&gt; subroutine, which operates the same as it introduces a new scope. Some black magic and weird idioms might break, but, for the most part, this should (a dangerous word!) run the same. At this point, I&amp;rsquo;m probably also introducing this legacy codebase to source control, so a small change with no new behavior makes for a good first patch to a new branch.&lt;/p&gt;

&lt;p&gt;This program is now mostly a module and it has the distribution structure that allows me to test it. I can start to create acceptance tests (end-to-end, or some other label even) since I haven&amp;rsquo;t had a way to reach into the code itself. These form the basis of the regression tests I can use to check the new code against the original code.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m satisfied that the new code works, I can make more changes. This is where the modulino idea comes in. I want to test the code without automatically executing the code in &lt;code&gt;run&lt;/code&gt;. I can use the &lt;code&gt;caller&lt;/code&gt; trick; I don&amp;rsquo;t execute the code if there&amp;rsquo;s a higher level in the call stack (a program would be at the top):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;run() &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; caller;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!\n&amp;#34;&lt;/span&gt;;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s another small change in the actual code, but a significant change in behavior. I can get to the code in a test program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;

subtest &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;load program&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    require_ok( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scripts/program.pl&amp;#39;&lt;/span&gt; );
    };

subtest &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test innards&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    ok( defined &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;run, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Run subroutine is defined&amp;#39;&lt;/span&gt; );
    };

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there the path forward is more clear. I can add a package statement to the program and start to refactor the &lt;code&gt;run&lt;/code&gt;, using the test best practices I know. Soon the development morphs into module maintenance and its history as a standalone program doesn&amp;rsquo;t matter anymore. As I go through the process, I&amp;rsquo;ve also set the eventual maintainers on the right path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/deia/321829326/in/photolist-ursDu-71wk9y-nYpsHQ-e3P2i9-e1TW4-32LHXt-e4bYT8-e4bYNV-e4hB2m-e4hB5Y-69pxDc-7YWXJX-cwAfvs-e1TUY-4zkBG7-dcyLpA-aj8HAk-ajbu5L-ajbuh7-94j7Df-94jsgo-d9QS9u-dcyJAE-dcyHcT-bavZfB-2nPfVE-52nPvi-RBuWd-4tpcsD-55P2hs-4WaC4T-7w6TC-9FUUPM-94jwv1-8ohTWP-94g9Ep-6ijaiB-94jpgQ-94jcQd-94gcw8-94jveU-94jy93-94g6v8-94j9nu-94jmud-dh1bAe-dcyJoM-dcyJNK-duC43R-dcyK6z&#34;&gt;Andréia Bohner&lt;/a&gt;, the image has been digitally altered.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl distributions, modules, packages explained</title>
      <link>http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</link>
      <pubDate>Fri, 13 Jun 2014 12:26:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It can be confusing for new Perl programmers to understand the terminology used to describe Perl distributions and their accompanying files. This article explains the core concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-module-distribution&#34;&gt;Package, Module, Distribution&lt;/h3&gt;

&lt;p&gt;A Perl package is just a section of code defined in a .pm file, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Data::Connector;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The start of the package begins with the &amp;ldquo;package&amp;rdquo; declaration. A package is a lot like a class, except that it can denote a collection of subroutines and variables, and not necessarily be instantiated as an object. Usually a .pm file will have one package declaration per file, but you can have multiple packages in a .pm file, similar to Java and C# where you can have multiple classes in a single file.&lt;/p&gt;

&lt;p&gt;A module is a .pm file (&amp;ldquo;pm&amp;rdquo; means Perl Module). When you import a module with &amp;ldquo;require&amp;rdquo; or &amp;ldquo;use&amp;rdquo;, you are literally referencing the file name and not the package(s) contained in the file. For example to import the &amp;ldquo;Data::Connector&amp;rdquo; package defined above, we could save it in a file called &amp;ldquo;Whatever.pm&amp;rdquo; and later reference it in a script like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Whatever;

&lt;span style=&#34;color:#75715e&#34;&gt;# call connect subroutine declared in Data::Connector package&lt;/span&gt;
Data::Connector::connect();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All .pm files must end with a &amp;ldquo;true&amp;rdquo; value per Perl&amp;rsquo;s requirements, so most authors either place &amp;ldquo;1;&amp;rdquo; or &amp;ldquo;__PACKAGE__;&amp;rdquo; as the last line of the .pm file. In Perl a true value is any value that is not: null, zero or a zero-length string.&lt;/p&gt;

&lt;p&gt;A distribution is a collection of files that usually includes a Perl module and several other files. There is no strict standard as to which files must be included in a distribution, however for the distribution to be indexed on CPAN and install-able by the CPAN command line client, the distribution needs to include some core files. Distributions have versions - so a Perl module on CPAN will have one distribution for every version of the module. These are the main files and directories you&amp;rsquo;ll encounter in distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README - a brief description of how to install the distribution, sometimes includes a license and examples of how to use the module(s).&lt;/li&gt;
&lt;li&gt;LICENSE - the license for the code - a non-commercial license like the GPL, artistic, BSD etc are common.&lt;/li&gt;
&lt;li&gt;META.yml/ META.json - files that contain the metadata describing the distribution: the author, license, version, pre-requisite modules for use etc. They are auto-generated as part of the distribution build process and can be ignored.&lt;/li&gt;
&lt;li&gt;Makefile.PL and or Build.PL - these are Perl files that are used to install the module(s) in the distribution. Worth looking at when you&amp;rsquo;re having installation issues.&lt;/li&gt;
&lt;li&gt;MANIFEST - a list of the files included in the distribution.&lt;/li&gt;
&lt;li&gt;lib - a directory containing Perl modules - usually the core code of the distribution.&lt;/li&gt;
&lt;li&gt;t - the test files directory. These are run when the module is installed. If you have failing tests on installation, it can be helpful to review the test files in the t/ directory to find out the specifics of the test.&lt;/li&gt;
&lt;li&gt;bin - if the distribution contains an app, (Perl script) it will be in here. Often the app uses modules contained in the lib directory.&lt;/li&gt;
&lt;li&gt;Changes - a list of changes from distribution version to version.&lt;/li&gt;
&lt;li&gt;xt - the extended test files directory, usually used for author tests that you don&amp;rsquo;t need to run.&lt;/li&gt;
&lt;li&gt;eg - a directory of example Perl scripts, using the module(s) contained in the distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the typical directories and files found in a Perl distribution but as there is no fixed standard, distribution authors are free to include and exclude the files they wish. For a good example, check out the files provided by David Golden in a distribution of the the popular &lt;a href=&#34;https://metacpan.org/source/DAGOLDEN/HTTP-Tiny-0.043&#34;&gt;HTTP::Tiny&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you get to grips with Perl packages, modules and distributions it&amp;rsquo;s far easier to start hacking on Perl modules that don&amp;rsquo;t work the way you want them to. For example, in the case of a module that won&amp;rsquo;t install, you can download the distribution from CPAN (at the command line &amp;ldquo;cpan -g Module::Name&amp;rdquo;), untar it, and patch the failing tests, or examine the source code in the lib directory and resolve a bug or two. Before long you&amp;rsquo;ll be releasing your own distributions to CPAN!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;text=Perl+distributions%2C+modules%2C+packages+explained&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

