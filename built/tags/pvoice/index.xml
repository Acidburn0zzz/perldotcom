<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pvoice on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pvoice/</link>
    <description>Recent content in Pvoice on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jul 2004 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/pvoice/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accessible Software</title>
      <link>http://localhost:1313/pub/2004/07/14/accessibility.html/</link>
      <pubDate>Thu, 15 Jul 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/07/14/accessibility.html/</guid>
      <description>

&lt;p&gt;Last year Perl.com published an &lt;a href=&#34;http://localhost:1313/pub/2003/08/28/pvoice.html&#34;&gt;article about pVoice&lt;/a&gt;. You learned what pVoice is, why it was built, and where it was supposed to go. Maybe you wanted to do something for disabled people yourself, by writing something like a mail client, a simple game like memory, or an instant-messaging client, but you didn&amp;rsquo;t implement it because you felt it was too much work. In that case there&amp;rsquo;s news for you.&lt;/p&gt;

&lt;p&gt;Part of pVoice was a set of modules that was actually the engine for the user interface. A few months ago I pulled those modules from the pVoice project and made them into a CPAN distribution. This distribution is called AAC::Pvoice. And no, they have nothing to do with Apple&amp;rsquo;s digital audio format. They&amp;rsquo;re all about Augmentative and Alternative Communication. Although, I like to think that the &amp;ldquo;C&amp;rdquo; stands for &amp;ldquo;Computing,&amp;rdquo; which makes it into a better description of what those modules are for.&lt;/p&gt;

&lt;p&gt;You can use the AAC::Pvoice modules to create GUI applications for people who have difficulty using conventional input devices like a mouse or a keyboard. Instead, those people can use your applications using only one or two keystrokes, mouse buttons, or switches on a wheelchair. You can also enhance the use of a conventional mouse or touch screen by highlighting objects on the screen as the mouse cursor hovers over them. AAC::Pvoice does not only handle the input for you, but it also provides an accessible graphical user interface.&lt;/p&gt;

&lt;p&gt;Think of the possibilities: there are so many modules on CPAN that in conjunction with AAC::Pvoice can result in simple, accessible applications. For example, a module like Games::Battleship allows you to create a battleship game, AAC::Pvoice allows you to create the GUI and takes care of the input for you, so with very little effort you can create a game accessible for people who can&amp;rsquo;t play regular games that need full control over a mouse and/or keyboard.&lt;/p&gt;

&lt;p&gt;This article will explain how to use the AAC::Pvoice modules step by step. It&amp;rsquo;s up to you what kind of functionality will go into the application you build.&lt;/p&gt;

&lt;p&gt;The API of the AAC::Pvoice modules is still subject to changes, but you can trust me when I tell you that the behavior of existing methods won&amp;rsquo;t change too much, because I don&amp;rsquo;t like to go over my own code over and over again to adjust it to a new version of an API.&lt;/p&gt;

&lt;h3 id=&#34;the-concept&#34;&gt;The Concept&lt;/h3&gt;

&lt;p&gt;The graphical user interface of AAC::Pvoice is based upon wxPerl classes, so it won&amp;rsquo;t hurt if you already know a bit about wxPerl. But since the modules handle most of the GUI for you, as you can see below, it&amp;rsquo;s much simpler to write AAC::Pvoice applications than using plain wxPerl.&lt;/p&gt;

&lt;p&gt;Basically an AAC::Pvoice-based application consists of three entities: a Panel, a Row and a Button. A panel is a subclass of a Wx::Panel, on which one or more rows, or in fact any other Wx::Window subclass, can be placed. A row is also a subclass of a Wx::Panel, but a row can contain multiple Wx::BitmapButton objects. Those Wx::BitmapButtons however are created from a data structure you feed to the row&amp;rsquo;s constructor. These buttons don&amp;rsquo;t respond to mouse clicks on them like you&amp;rsquo;re used to, but will be invoked when the user generates a &amp;lsquo;Select&amp;rsquo; event, unless of course you use a normal mouse to control the GUI. The &amp;lsquo;Select&amp;rsquo; event will be discussed later.&lt;/p&gt;

&lt;p&gt;There is a special class called AAC::Pvoice::Input. You normally won&amp;rsquo;t call any of this class&amp;rsquo; methods directly. Instead, it&amp;rsquo;s called from the AAC::Pvoice::Panel. The Input class checks for &amp;lsquo;normal&amp;rsquo; mouse, mouse buttons, keyboard or parallel port input (depending on the selected device) and calls whatever the Panel defined it to do when a &amp;lsquo;Next&amp;rsquo; or &amp;lsquo;Select&amp;rsquo; event occurs. If only one switch is used, that switch will only generate a &amp;lsquo;Select&amp;rsquo; event, and a &amp;lsquo;Next&amp;rsquo; event will automatically happen every n milliseconds, depending on your settings. To understand what those events are, you need to understand how the so called &amp;lsquo;row/column scanning&amp;rsquo; mechanism works. Since we&amp;rsquo;ve got multiple rows of buttons, and we have only two switches to indicate what we want to do, we can&amp;rsquo;t move the mouse cursor over the screen. Instead, we&amp;rsquo;ll use one switch to indicate &amp;lsquo;go to next row&amp;rsquo; and one to indicate &amp;lsquo;select this row&amp;rsquo;. When we&amp;rsquo;ve selected a row, again we need the same two switches to indicate &amp;lsquo;go to next button in this row&amp;rsquo; and &amp;lsquo;select this button&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;As you will see in the demo application below, you don&amp;rsquo;t have to worry about row/column scanning when you&amp;rsquo;re creating your application. The AAC::Pvoice::Panel takes care of that. You only have to define what your script will do when a certain button is invoked.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-demo&#34;&gt;Creating a Demo&lt;/h3&gt;

&lt;p&gt;To demonstrate how you can use AAC::Pvoice to create your own pVoice-like applications, I&amp;rsquo;ll show you how to build a simple demo application. This application will use the Microsoft Agent (using the Win32::MSAgent module) to move the Merlin character over the screen and let it pronounce a phrase. It&amp;rsquo;s a very simple, silly example, but then again, it&amp;rsquo;s only to demonstrate how the AAC::Pvoice modules work. You&amp;rsquo;ll see how easy it is.&lt;/p&gt;

&lt;p&gt;First of all, because an AAC::Pvoice based application is actually a wxPerl-based application, we have to start with a standard wxPerl framework, where we define the application and the frame, and start a main loop. This can be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use strict;
use warnings;

# Create a wxApp object and start the mainloop
my $obj = pMerlin-&amp;gt;new();
$obj-&amp;gt;MainLoop;

#----------------------------------------------------------------------
# the pMerlin package implements the Wx::App subclass
package pMerlin;
use Wx;
use base &#39;Wx::App&#39;;

sub OnInit
{
    my $self = shift;
    # Set an AppName and VendorName
    $self-&amp;gt;SetAppName(&#39;Fun With Merlin&#39;);
    $self-&amp;gt;SetVendorName(&amp;quot;pVoice Applications - Jouke Visser&amp;quot;);

    # Create a frame and show it
    my $frame = pMerlinFrame-&amp;gt;new( undef, -1, &#39;pMerlin&#39;);
    $frame-&amp;gt;Show(1);
}

#----------------------------------------------------------------------
# the pMerlinFrame package implements the Wx::Frame subclass
package pMerlinFrame;
use Wx qw(:everything);
use AAC::Pvoice;
use base &#39;Wx::Frame&#39;;

sub new
{
    my $class = shift;
    # Call the superclass&#39; constructor
    my $self = $class-&amp;gt;SUPER::new(@_);

    # Set the white background colour
    $self-&amp;gt;SetBackgroundColour(wxWHITE);

    return $self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, nothing special. I only used a few calls that aren&amp;rsquo;t really necessary for a default wxPerl script: I&amp;rsquo;m setting the AppName, VendorName, and I&amp;rsquo;m telling the frame to have a white background. The reason for setting the AppName and VendorName will be explained later.&lt;/p&gt;

&lt;h3 id=&#34;using-aac-pvoice&#34;&gt;Using AAC::Pvoice&lt;/h3&gt;

&lt;p&gt;Like I said, so far everything looks normal, if you&amp;rsquo;re used to wxPerl programming. But in fact this is where the actual work begins. We now need to add some code to the new() subroutine of pMerlinFrame. The first thing we need to do now is to maximize the pMerlinFrame we just defined and get the dimensions of that maximized state. We need to do this to pass the correct width and height of the frame to the AAC::Pvoice::Panel we want to create. We can define a margin around the AAC::Pvoice::Panel, which looks nicer, but it&amp;rsquo;s not necessary. In this example I&amp;rsquo;m using a margin of 50 pixels on each side of the panel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Get the dimensions of the maximized window
$self-&amp;gt;Show(1);
$self-&amp;gt;Maximize(1);
my ($width, $height) = ($self-&amp;gt;GetClientSize-&amp;gt;GetWidth,
                        $self-&amp;gt;GetClientSize-&amp;gt;GetHeight);
$self-&amp;gt;Show(0);

# define the margin
my $margin = 50;

# define the itemspacing
my $itemspacing = 4;

# And create a pVoice panel
$self-&amp;gt;{panel} = AAC::Pvoice::Panel-&amp;gt;new(
                         $self,              # parent
                         -1,                 # id
                         [$margin, $margin], # position
                         [$width-2*$margin, $height-2*$margin],
                                             # size
                         wxNO_3D,            # style
                         1,                  # hide textrow
                         $itemspacing,       # spacing between items
                         3);                 # selectionborderwidth
# The grey background for the panel
my $panelbackground = Wx::Colour-&amp;gt;new(220,220,220);
$self-&amp;gt;{panel}-&amp;gt;BackgroundColour($panelbackground);

# A title at the top of the panel
$self-&amp;gt;{panel}-&amp;gt;AddTitle(&amp;quot;Fun with Merlin&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I&amp;rsquo;ve also defined a background colour for the panel and a title on top of it. Let&amp;rsquo;s take a closer look at the parameters of the AAC::Pvoice::Panel constructor. The first parameters look exactly like those used for Wx::Panel. The AAC::Pvoice::Panel, however, needs three new parameters. The first indicates if we should hide the (default) text row (a Wx::TextCtrl) at the bottom of the panel. For an application like pVoice, where you create phrases, this text row is of course needed. For our demo we don&amp;rsquo;t need a text row. Furthermore, we need to define the spacing between items on the panel. Effectively this is the spacing between the rows, since those will be placed directly upon this panel. Finally we need to define the width of the border around a selected row or item. It&amp;rsquo;s a good idea to make this value lower than the item spacing, otherwise the border will not be fully visible.&lt;/p&gt;

&lt;p&gt;The next step is to create the bitmaps we want to display. For this purpose we can use AAC::Pvoice::Bitmap. This class provides an easy way to create a bitmap of a certain size, put a caption underneath it, and has some other useful features. Before we create the bitmaps, we calculate the maximum X and Y size they can use by dividing the useable X and Y size of the panel by the number of buttons per row and the number of rows respectively. I&amp;rsquo;ll also subtract twice the item spacing used in the application because otherwise the buttons will be a little bit too large.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The maximum dimensions of a button
my $maxX = int(($self-&amp;gt;{panel}-&amp;gt;xsize)/4)-2*$itemspacing;
my $maxY = int(($self-&amp;gt;{panel}-&amp;gt;ysize)/3)-2*$itemspacing; 

# Define the bitmaps. 
# The parameters are the filename, maxX and maxY size and the caption
my $leftbutton     = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/left.png&#39;,
                                              $maxX, $maxY, &#39;left&#39;);
my $rightbutton    = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/right.png&#39;,
                                              $maxX, $maxY, &#39;right&#39;);
my $upbutton       = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/up.png&#39;,
                                              $maxX, $maxY, &#39;up&#39;);
my $downbutton     = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/down.png&#39;,
                                              $maxX, $maxY, &#39;down&#39;);
my $questionbutton = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/question.png&#39;,
                                              $maxX, $maxY, &#39;question&#39;);
my $rowselbutton   = AAC::Pvoice::Bitmap-&amp;gt;new(&#39;img/rowsel.png&#39;,
                                              $maxX, $maxY, &#39;rowsel&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got those bitmaps, we can create the AAC::Pvoice::Rows that will use those bitmaps, and know what coderefs to invoke when the user selects one of the buttons. We don&amp;rsquo;t need to create individual Wx::BitmapButtons. The AAC::Pvoice::Row takes care of that, and attaches the correct actions to the BitmapButtons in such a way that they can be invoked using any of the available input methods.&lt;/p&gt;

&lt;p&gt;Before define the rows, we create a listref for every button, containing the button ID, the bitmap and the callback. These listrefs we put in another list of lists. That LoL defines the whole panel, and every list inside it defines the layout of each every row. Let&amp;rsquo;s see how we achieve this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Define the buttons on the pVoice rows
#               the id,      the bitmap,     the callback
my $left     = [Wx::NewId(), $leftbutton,    sub {$self-&amp;gt;MoveLeft}];
my $right    = [Wx::NewId(), $rightbutton,   sub {$self-&amp;gt;MoveRight}];
my $up       = [Wx::NewId(), $upbutton,      sub {$self-&amp;gt;MoveUp}];
my $down     = [Wx::NewId(), $downbutton,    sub {$self-&amp;gt;MoveDown}];
my $question = [Wx::NewId(), $questionbutton,sub {$self-&amp;gt;Speak}];
my $rowsel   = [Wx::NewId(), $rowselbutton,
                sub {$self-&amp;gt;{panel}-&amp;gt;ToRowSelection}];

# The definition of the screenlayout
my $content = [ [ $rowsel,    undef,    $up,       undef  ],
                [ $rowsel,    $left,    $question, $right ],
                [ $rowsel,    undef,    $down,     undef  ] ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the callbacks actually invoke some methods of pMerlinFrame that I haven&amp;rsquo;t discussed yet. That&amp;rsquo;s because they have nothing to do with the AAC::Pvoice modules themselves. I&amp;rsquo;m trying to keep this demo as simple as possible. At the bottom of this article you&amp;rsquo;ll find a link to a zip file that contains the complete source and images used in this demo.&lt;/p&gt;

&lt;p&gt;The final step in creating the panel is creating the rows based upon our data structure, and then add those rows to the panel. After that there is a magic method called &amp;lsquo;Finalize&amp;rsquo; we need to call on the panel, and the panel is done. First the code, then an explanation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Add the buttons to the rows and the rows to the panel
foreach my $row (@$content)
{
  $self-&amp;gt;{panel}-&amp;gt;Append(AAC::Pvoice::Row-&amp;gt;new(
                                 $self-&amp;gt;{panel},     # parent
                                 scalar(@$row),      # max
                                 $row,               # items
                                 wxDefaultPosition,  # pos
                                 wxDefaultSize,      # size
                                 $maxX,              # X-size
                                 $maxY,              # Y-size
                                 $itemspacing,       # spacing
                                 $panelbackground)); # background
}
# Finish the panel
$self-&amp;gt;{panel}-&amp;gt;Finalize();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The constructor of a row has a few unusual parameters. The first parameter is the parent, like almost every wxPerl class needs to know the parent window. The second parameter however, is the maximum number of items in a row. The row will add empty Wx::BitmapButtons to the end of a row if the third parameter (the items we want to put on the row) contains less items than the defined maximum. This ensures an even sized row. In our case we have rows with 4 items each, including some undefined items, so passing scalar($@row) is enough here.&lt;/p&gt;

&lt;p&gt;The $row parameter contains the list of items we want to have in our row. We also have to pass the $maxX, $maxY and $itemspacing to this row, since it has to use the correct spacing between the buttons, and the empty buttons it needs to create (for the undef values in the row) need to have the correct size. The final parameter, $panelbackground, is the background color for this row, which we define to be the same as the panel background to let it look like there&amp;rsquo;s no difference between the rows and the panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_07_14_accessibility/pmerlin.jpg&#34; width=&#34;450&#34; height=&#34;393&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The final thing we have to do is to define how the user can use the application. Are we going to use keystrokes, mouse buttons, the Adremo wheelchair, or normal mouse input? We can define this by setting the registry-key Device to respectively keys, icon, adremo, or mouse. This needs to be set before the AAC::Pvoice::Panel is created. I usually set this in the OnInit method of my Wx::App subclass like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Set the device we use to &#39;icon&#39; (left and right mouse buttons)
# other possibilities are &#39;keys&#39; (keystrokes, where the space 
#                           and enter key are the default keys)
#                         &#39;adremo&#39; (electrical wheelchair) and
#                         &#39;mouse&#39; (normal mouse, touch screen, etc.)
my $config = Wx::ConfigBase::Get;
my $Device = $config-&amp;gt;Read(&#39;Device&#39;, &#39;icon&#39;);
$config-&amp;gt;Write(&#39;Device&#39;,   $Device);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we do this after we define the AppName and the VendorName, the key will appear under HKEY_CURRENT_USER\Software\&amp;lt;VendorName&amp;gt;\&amp;lt;AppName&amp;gt;\Device. There are more possible keys to define, like Buttons (either 1 or 2, defining the number of switches). You can find more information on this in the documentation of AAC::Pvoice::Input.&lt;/p&gt;

&lt;p&gt;This is all there is to it. We now have a simple demo of an application that almost everyone is able to use. The screenshot you see on this page is the result of these simple pieces of code. As you could see, the API is extremely simple, so you can concentrate on the actual functionality you want to put in your application.&lt;/p&gt;

&lt;h3 id=&#34;platform-issues&#34;&gt;Platform Issues&lt;/h3&gt;

&lt;p&gt;The AAC::Pvoice modules can be installed on Windows as well as on Linux. However, it doesn&amp;rsquo;t look too well on Linux. If someone is interested in making the modules work correctly on Linux: patches are welcome! I would also like to see someone trying to port everything to OS X. wxPerl runs on a lot of different platforms, but in the AAC::Pvoice modules I&amp;rsquo;ve used some Win32-specific options that may have some workarounds for other platforms. I just haven&amp;rsquo;t had the opportunity to make it work on those.&lt;/p&gt;

&lt;p&gt;Hopefully this short article inspires you to build something for people who can&amp;rsquo;t quite accomplish everything you can. After all, this is what programming should really be about &amp;ndash; making useful applications for people who can&amp;rsquo;t build it themselves.&lt;/p&gt;

&lt;p&gt;You can download the &lt;a href=&#34;http://localhost:1313/media/_pub_2004_07_14_accessibility/pmerlin.zip&#34;&gt;zipfile containing the complete script and images here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Perl to Enable the Disabled</title>
      <link>http://localhost:1313/pub/2003/08/28/pvoice.html/</link>
      <pubDate>Sat, 23 Aug 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/08/28/pvoice.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;We use Perl for all kinds of things. Web development, data munging, system administration, even bioinformatics; most of us have used Perl for one of these situations. A few people use Perl for building end-user applications with graphical user interfaces (GUIs). And as far as I know, only two people in this world use Perl to make life easier for the disabled: &lt;a href=&#34;http://localhost:1313/pub/2001/08/27/bjornstad.html&#34;&gt;Jon Bjornstad&lt;/a&gt; and I. Some people think the way we use Perl is something special, but my story will show you that I just did what any other father, capable of writing software, would do for his child.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-past&#34;&gt;The Past&lt;/h3&gt;

&lt;p&gt;In 1995 my eldest daughter, Krista, was born. She came way too early, after a pregnancy of only 27.5 weeks. That premature birth resulted in numerous complications during the first three months of her life. Luckily she survived, but getting pneumonia three times when you can&amp;rsquo;t even breath on your own causes serious asphyxiation, which in turn resulted in severe brain damage. A few months after she left the hospital it became clear that the brain damage had caused a spastic quadriplegia.&lt;/p&gt;

&lt;p&gt;As Krista grew older, it became more and more clear what she could, and couldn&amp;rsquo;t do. Being a spastic means you can&amp;rsquo;t move the muscles in your body the way you want them to. Some people can&amp;rsquo;t walk, but can do everything else. In Krista&amp;rsquo;s case, she can&amp;rsquo;t walk, she can&amp;rsquo;t sit, she can&amp;rsquo;t use her hands to grab anything, even keeping her head up is difficult. Speaking is using the muscles in your mouth and throat, so you can imagine that speaking is almost out of the question for her.&lt;/p&gt;

&lt;p&gt;By the end of the year 2000, Krista went to a special school in Rotterdam. But going to school without being able to speak or without being able to write down what you want to say is hard, not only for the teacher, but also for the student. We had to find a way to let Krista communicate.&lt;/p&gt;

&lt;p&gt;Together with Krista&amp;rsquo;s speech pathologist and orthopedist we started looking for devices she could use to communicate with the outside world. These devices should enable her to choose between symbols, so a word or a sentence could be pronounced. A number of devices were tested, but all of them either required some action with her hands or feet that she wasn&amp;rsquo;t able to perform, or gave her too little choices of words.&lt;/p&gt;

&lt;p&gt;Then we looked into available communications software, so she could use an adapted input device (in her case a headrest with built-in switches) to control an application. Indeed there was software available that could have been used, but the best match was a program that automatically scanned through symbols on her screen and when the desired symbol was highlighted, she had to move her head to select it. Timing was the issue here. If moving your head to the left or right is really hard to do anyway, it&amp;rsquo;s hardly possible to take that action at the desired moment.&lt;/p&gt;

&lt;h3 id=&#34;pvoice&#34;&gt;pVoice&lt;/h3&gt;

&lt;p&gt;We had to do something. There was no suitable device or software application available. I thought it through and suggested I could try to write a simple application myself. It would be based on the idea of the best match we had found (the automatic scanning software), but this software would have no automatic scanning. Instead, moving to the right with your head would mean &amp;ldquo;Go to the next item,&amp;rdquo; and moving to the left would mean &amp;ldquo;Select the highlighted item.&amp;rdquo; That would mean that she would need a lot of time to get to the desired word, but it&amp;rsquo;s better to be slow than not able to select the right words at all.&lt;/p&gt;

&lt;p&gt;The symbols would have to be put in categories, so there would be some logic in the vocabulary she&amp;rsquo;d have on her PC. She started out with categories like &amp;ldquo;Family,&amp;rdquo; containing photos of some members of the family, &amp;ldquo;School,&amp;rdquo; containing several activities at school, and &amp;ldquo;Care,&amp;rdquo; which contained things like &amp;ldquo;going to the bathroom,&amp;rdquo; &amp;ldquo;taking a shower,&amp;rdquo; and other phrases like that.&lt;/p&gt;

&lt;p&gt;By the end of January 2001 I started programming. In Perl. Maybe Perl isn&amp;rsquo;t the most logical choice for writing GUI applications for disabled people, but Perl is my language of choice. And it turned out to be very suitable for this job! Using Tk I quickly set up a nice looking interface. Win32::Sound (and on Linux the Play command) enabled me to &amp;ldquo;pronounce&amp;rdquo; the prerecorded words. Within two weeks time I had a first version of pVoice, as I called this application (and since everyone asks me what the &amp;lsquo;p&amp;rsquo; stands for: &amp;lsquo;p&amp;rsquo; is for Perl). Krista started trying the application and was delighted. Finally she had a way to say what was on her mind!&lt;/p&gt;

&lt;p&gt;Of course in the very beginning she didn&amp;rsquo;t have much of a vocabulary. The primary idea was to let her learn how to use it. But every week or two we added more symbols or photos and extended her vocabulary.&lt;/p&gt;

&lt;p&gt;By the end of April 2001 I posted the code of this first pVoice version on &lt;a href=&#34;http://www.perlmonks.org/index.pl?node_id=75757&#34;&gt;PerlMonks&lt;/a&gt; and set up a web page for people to download it if they could use it. The response was overwhelming. Everyone loved the idea and suggestions to improve the code or to add features came rolling in. Krista&amp;rsquo;s therapists were also enthusiastic and asked for new features too.&lt;/p&gt;

&lt;p&gt;Unfortunately the original pVoice was nothing more than a quick hack to get things going. It was not designed to add all the features people were asking for. So I decided I had to rewrite the whole thing.&lt;/p&gt;

&lt;p&gt;This time it had to be a well-designed application. I wanted to use wxPerl for the GUI instead of the (in my eyes) ugly Motif look of Tk, I wanted to use a speech synthesizer instead of prerecorded .wav files, and most importantly, I wanted to make it easier to use. The original application was not easy to install and modifying the vocabulary was based on the idea you knew your way around in the operating system of your choice: you had to put files in the right directories yourself and modify text files by hand. For programmers this is an easy task, but for end users this turns out to be quite difficult.&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_08_28_pvoice/ptypescreenshot1.gif&#34; alt=&#34;pType Screenshot&#34; width=&#34;308&#34; height=&#34;231&#34; /&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It took me until the summer of 2002 before I started working on the next pVoice release. For almost a year I hadn&amp;rsquo;t worked on it at all because of some things that happened in my personal life. Since Krista was learning to read and write and had no way of expressing what she could write herself, I decided not to start with rewriting pVoice immediately, but with building pType.&lt;/p&gt;

&lt;p&gt;pType would allow her to select single letters on her screen to form words in a text entry field at the bottom of her screen and &amp;ndash; if desired &amp;ndash; to pronounce that for her. pType was my tryout for what pVoice 2.0 would come to be: it used wxPerl, Microsoft Agent for speech synthesis, and was more user-friendly. In October 2002, pType was ready and I could finally start working on pVoice 2.0. While copying and pasting lots of the code I wrote for pType, I set up pVoice to be as modular as possible. I also tried to make the design extensible, so I would be able to add features in the future &amp;ndash; even features I hadn&amp;rsquo;t already thought of.&lt;/p&gt;

&lt;p&gt;In March this year it finally was time to release pVoice 2.0. It was easy to install: it was compiled into a standalone executable using PerlApp and by using InnoSetup I created a nice looking installer for it. The application looked more attractive because I used wxPerl, which gives your application the look-and-feel of the operating system it runs on. It was user friendly because the user didn&amp;rsquo;t have to modify any files to use the application: all modifications and additions to the vocabulary could be done within the application using easy-to-understand dialog windows. I was quite satisfied with the result, although I already knew I had some features to add in future releases.&lt;/p&gt;

&lt;h3 id=&#34;the-present&#34;&gt;The Present&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_08_28_pvoice/pvoice-anigif.gif&#34; alt=&#34;pVoice animation&#34; width=&#34;300&#34; height=&#34;218&#34; /&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At this moment, rewriting the online help file is the last step before I can release pVoice 2.1. That version will have support for all Microsoft SAPI 4 compatible speech engines, better internationalization support, the possibility to have an unlimited depth of categories within categories (until pVoice 2.0 you had only one level of categories with words and sentences), the possibility to define the number of rows and columns with images yourself, and numerous small improvements. Almost all of these improvements and feature additions are suggested by people who tried pVoice 2.0 themselves. And that&amp;rsquo;s great news, because it means that people who need this kind of software are discovering Open Source alternatives for the extremely expensive commercial applications.&lt;/p&gt;

&lt;p&gt;Many people have asked me how many users pVoice has. That&amp;rsquo;s a question I can&amp;rsquo;t answer. How do you measure the use of Open Source software? Since Jan. 1, 2003, approximately 400 people have downloaded pVoice. On the other hand, the mailing lists have some 50 subscribers. How many people are actually using pVoice then? I couldn&amp;rsquo;t say.&lt;/p&gt;

&lt;h3 id=&#34;the-future&#34;&gt;The Future&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m hoping to achieve an increase in the number of users in the next 12 months. The Perl Foundation (TPF) has offered me one of its grants, to be used for promotion of pVoice. With the money I&amp;rsquo;ll be travelling to OSCON next year and hope to speak there about pVoice. While I&amp;rsquo;m in Portland I&amp;rsquo;ll try to get other speaking engagements in the area to try to convince people that they don&amp;rsquo;t always need to spend so much money on commercial software for disabled people, but that there are alternatives like SueCenter and pVoice. Shortly after I heard about the TPF grant, I also heard that I&amp;rsquo;ll be receiving a large donation from someone (who wishes to remain anonymous), that I can also use for promotion of pVoice or for other purposes like costs I might have to add features to pVoice.&lt;/p&gt;

&lt;p&gt;Still, a lot can be improved on pVoice itself. I want to make it more useful for people with other disabilities than my daughter&amp;rsquo;s, I would like to have more translations of the program (currently I have Dutch and English, and helpful people offered to translate it into German, Spanish, French, and Swedish already), I want to support more Text To Speech technologies than Microsoft&amp;rsquo;s Speech API (like Festival), and I would like to find the time to make the pVoice platform independent again, because currently it only runs on Windows. I hope to write other pVoice- like programs like pHouse, which will be based upon efforts of the &lt;a href=&#34;http://www.misterhouse.com&#34;&gt;MisterHouse&lt;/a&gt; project, to be able to control appliances in and around the house, but the main thing I need for that is time. And with a full-time job, time is limited.&lt;/p&gt;

&lt;p&gt;Maybe, after reading all of this, you&amp;rsquo;ll think, &amp;ldquo;How can I help?&amp;rdquo;. Well, there are several things you could do. First of all, if you know anyone who works with disabled people, tell them about pVoice. Apart from SueCenter, pVoice is the only Open Source project I know of in this area. Lots of people who need this kind of software can&amp;rsquo;t get their insurance to pay for the software and would have to pay a lot of money. With pVoice they have a free alternative.&lt;/p&gt;

&lt;p&gt;Of course, you could also help with the development. Since pVoice is not tied to any specific natural language, you could help by translating pVoice into your native tongue. Since the time I can spend on pVoice is limited, it would be nice to have more developers on pVoice in general. More information on pVoice is available from the &lt;a href=&#34;http://www.pvoice.org&#34;&gt;web site&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

