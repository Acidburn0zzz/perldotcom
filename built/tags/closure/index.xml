<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Closure on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/closure/</link>
    <description>Recent content in Closure on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 May 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/closure/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Achieving Closure</title>
      <link>http://localhost:1313/pub/2002/05/29/closure.html/</link>
      <pubDate>Wed, 29 May 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/05/29/closure.html/</guid>
      <description>&lt;p&gt;Maybe you&amp;rsquo;ve heard about closures; they&amp;rsquo;re one of those aspects of Perl &amp;ndash; like object-oriented programming &amp;ndash; that everyone raves about and you can&amp;rsquo;t really see the big deal until you play around with them and then they just click. In this article, we&amp;rsquo;re going to play around with some closures, in the hope that they&amp;rsquo;ll just click for you.&lt;/p&gt;

&lt;p&gt;The nice thing about playing around with closures is that you often don&amp;rsquo;t realize you&amp;rsquo;re doing it. Don&amp;rsquo;t believe me? OK, here&amp;rsquo;s an ordinary piece of Perl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $print_hello = sub { print &amp;quot;Hello, world!&amp;quot;; }

    $print_hello-&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create a subroutine reference in &lt;code&gt;$print_hello&lt;/code&gt;, and then we dereference it, calling the subroutine. I suppose we could put that into a subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub make_hello_printer {
        return sub { print &amp;quot;Hello, world!&amp;quot;; }
    }

    my $print_hello = make_hello_printer();
    $print_hello-&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still nothing magical going on here. And it shouldn&amp;rsquo;t be any surprise to you that we can move the &amp;ldquo;message&amp;rdquo; to a separate variable, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub make_hello_printer {
        my $message = &amp;quot;Hello, world!&amp;quot;;
        return sub { print $message; }
    }

    my $print_hello = make_hello_printer();
    $print_hello-&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you&amp;rsquo;d expect, that prints out the &lt;code&gt;Hello, world!&lt;/code&gt; message. Nothing special going on here, is there? Well, actually, there is. This is a closure. Did you notice?&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s special is that the subroutine reference we created refers to a lexical variable called &lt;code&gt;$message&lt;/code&gt;. The lexical is defined in &lt;code&gt;make_hello_printer&lt;/code&gt;, so by rights, it shouldn&amp;rsquo;t be visible outside of &lt;code&gt;make_hello_printer&lt;/code&gt;, right? We call &lt;code&gt;make_hello_printer&lt;/code&gt;, &lt;code&gt;$message&lt;/code&gt; gets created, we return the subroutine reference, and then &lt;code&gt;$message&lt;/code&gt; goes away, out of scope.&lt;/p&gt;

&lt;p&gt;Except it doesn&amp;rsquo;t. When we call our subroutine reference, outside of &lt;code&gt;make_hello_printer&lt;/code&gt;, it can still see and receive the correct value of &lt;code&gt;$message&lt;/code&gt;. The subroutine reference forms a &lt;em&gt;closure&lt;/em&gt;, ``enclosing&amp;rdquo; the lexical variables it refers to.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the canonical example of closures, that you&amp;rsquo;ll find in practically every Perl book:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub make_counter {
        my $start = shift;
        return sub { $start++ }
    }

    my $from_ten = make_counter(10);
    my $from_three = make_counter(3);

    print $from_ten-&amp;gt;();       # 10
    print $from_ten-&amp;gt;();       # 11
    print $from_three-&amp;gt;();     # 3
    print $from_ten-&amp;gt;();       # 12
    print $from_three-&amp;gt;();     # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve created two &amp;ldquo;counter&amp;rdquo; subroutines, which have completely independent values. This happens because each time we call &lt;code&gt;make_counter&lt;/code&gt;, Perl creates a new lexical for &lt;code&gt;$start&lt;/code&gt;, which gets wrapped up in the closure we return. So &lt;code&gt;$from_ten&lt;/code&gt; encloses one &lt;code&gt;$start&lt;/code&gt; which is initialized to 10, and &lt;code&gt;$from_three&lt;/code&gt; encloses a &lt;strong&gt;totally different&lt;/strong&gt; &lt;code&gt;$start&lt;/code&gt;, which starts at 3.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s because of this property that Barrie Slaymaker calls closures &amp;ldquo;inside-out objects:&amp;rdquo; objects are data that have some subroutines attached to them, and closures are subroutines that have some data attached to them.&lt;/p&gt;

&lt;p&gt;Now, I said that&amp;rsquo;s used in practically every Perl book, because authors try and put off discussing closures until there&amp;rsquo;s little time left and they run out of imagination. (Well, at least that&amp;rsquo;s my excuse &amp;hellip;) However, it&amp;rsquo;s not an entirely practical example, to say the least. So let&amp;rsquo;s try and find a better one.&lt;/p&gt;

&lt;p&gt;This example is a bit more complex, but it demonstrates more clearly one extremely useful feature of closures: They can be used to bridge the gap between event-driven programs, which use callbacks extensively, and ordinary procedural code. I recently had to convert a bunch of XML files into an SQL database. Each file constituted a training course, so I wanted to build a data structure that contained the filename plus some of the details I&amp;rsquo;d parsed from the XML. Here&amp;rsquo;s what I ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use XML::Twig;
    my %courses;
    for (&amp;lt;??.xml&amp;gt;) {
        my $name = $_; $name =~ s/.xml//;
        my $t= XML::Twig-&amp;gt;new( 
            TwigHandlers =&amp;gt; {
                need =&amp;gt; sub { 
                    push @{$courses{$name}{prereqs}}, $_-&amp;gt;{&#39;att&#39;}-&amp;gt;{course};
                },
                # ...
            }
        );
        $t-&amp;gt;parsefile($_);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;rsquo;s going on here? &lt;code&gt;XML::Twig&lt;/code&gt; is a handy module that can be used to create an XML parser &amp;ndash; these parsers will call &amp;ldquo;TwigHandlers&amp;rdquo; when they meet various tags. We go through all the two-letter XML files in the current directory, and create a parser to parse the file. When we see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;need course=&amp;quot;AA&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;our &lt;code&gt;need&lt;/code&gt; handler is called to store the fact that the current course has a prerequisite of the course coded &amp;ldquo;AA.&amp;rdquo; (&lt;code&gt;$_-&amp;gt;{&#39;att&#39;}-&amp;gt;{...}&lt;/code&gt; is &lt;code&gt;XML::Twig&lt;/code&gt;-speak for &amp;ldquo;retrieve the value of the attribute called &amp;hellip;&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;And that &lt;code&gt;need&lt;/code&gt; handler is a closure &amp;ndash; it wraps up the name of the current file we&amp;rsquo;re parsing, &lt;code&gt;$name&lt;/code&gt;, so that it can be referred to whenever &lt;code&gt;XML::Twig&lt;/code&gt; decides to use it.&lt;/p&gt;

&lt;p&gt;There are many other things you can do with closures &amp;ndash; Tom Christiansen once recommended using them for &amp;ldquo;data hiding&amp;rdquo; in object-oriented code, since they rely on lexical variables that nothing outside of the closure can see. In fact, some of the most &lt;a href=&#34;http://perl.plover.com/lambda/tpj.html&#34;&gt;esoteric and advanced&lt;/a&gt; applications of Perl make heavy use of closures.&lt;/p&gt;

&lt;p&gt;But as we&amp;rsquo;ve seen, some of the most useful uses of closures can happen without you noticing them at all &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

