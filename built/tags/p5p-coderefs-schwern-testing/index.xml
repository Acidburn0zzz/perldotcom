<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P5p Coderefs Schwern Testing on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/p5p-coderefs-schwern-testing/</link>
    <description>Recent content in P5p Coderefs Schwern Testing on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Sep 2001 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/p5p-coderefs-schwern-testing/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week on p5p 2001/09/03</title>
      <link>http://localhost:1313/pub/2001/08/p5pdigest/20010903.html/</link>
      <pubDate>Mon, 03 Sep 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p5pdigest/20010903.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week on P5P&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#Testing_testing&#34;&gt;Testing, testing&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Coderef_in_INC&#34;&gt;Coderef-in-@INC&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Default_random_seed&#34;&gt;Default random seed&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#local_chdir&#34;&gt;local chdir()&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#FileSpec&#34;&gt;File::Spec&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Smoking&#34;&gt;Smoking!&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Please send corrections and additions to perl-thisweek-YYYYMM@simon-cozens.org where YYYYMM is the current year and month. Changes and additions to the perl5-porters biographies are particularly welcome.&lt;/p&gt;

&lt;h3 id=&#34;span-id-testing-testing-testing-testing-span&#34;&gt;&lt;span id=&#34;Testing_testing&#34;&gt;Testing, testing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The focus this week has very definitely been on testing, with the great Michael Schwern providing all sorts of QA advice, tests and patches. He patched: &lt;code&gt;t/op/rand.t&lt;/code&gt;, &lt;code&gt;t/op/time.t&lt;/code&gt;, &lt;code&gt;t/op/srand.t&lt;/code&gt;, &lt;code&gt;t/op/local.t&lt;/code&gt;, &lt;code&gt;t/op/concat.t&lt;/code&gt;, &lt;code&gt;t/op/misc.t&lt;/code&gt;, &lt;code&gt;t/run/segfault.t&lt;/code&gt;, &lt;code&gt;pod/perlhack.pod&lt;/code&gt;, &lt;code&gt;t/op/pack.t&lt;/code&gt;, &lt;code&gt;lib/Cwd.pm&lt;/code&gt;, &lt;code&gt;lib/File/Find.pm&lt;/code&gt;, and &lt;code&gt;lib/File/Find/taint.t&lt;/code&gt;, in an earnest attempt to deprive himself of $500.&lt;/p&gt;

&lt;p&gt;He also wrote a &lt;a href=&#34;http://www.pobox.com/~schwern/src/CPAN-Smoke-0.02.tar.gz&#34;&gt;CPAN.pm testing module&lt;/a&gt;, and passed on tests from Andrew Wilson (thanks, Andrew!) for &lt;code&gt;CGI::Switch&lt;/code&gt;, &lt;code&gt;CGI::Apache&lt;/code&gt; and &lt;code&gt;CGI::Cookie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Uhm. Wow.&lt;/p&gt;

&lt;p&gt;Jonathan Stowe wrote a test suite for &lt;code&gt;Shell.pm&lt;/code&gt; (Yes, honest) and Rafael Garcia-Suarez, who seems to have taken responsibility for the coderef-in- &lt;code&gt;@INC&lt;/code&gt; feature, wrote some tests for that. Rafael also wins the prize for the funniest JAPH I&amp;rsquo;ve seen in a long time, but I&amp;rsquo;m going to make you hunt through the archives to find that. :)&lt;/p&gt;

&lt;h3 id=&#34;span-id-coderef-in-inc-coderef-in-inc-span&#34;&gt;&lt;span id=&#34;Coderef_in_INC&#34;&gt;Coderef-in-@INC&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Rafael also sought to make the information in &lt;code&gt;%INC&lt;/code&gt; useful for modules loaded via the coderef-in- &lt;code&gt;@INC&lt;/code&gt;. Now, for instance, you could see entries in &lt;code&gt;%INC&lt;/code&gt; such as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     /loader/0x81095c8/Foo.pm - CODE(0x81095c8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The address in the &amp;ldquo;loader&amp;rdquo; section matches the address of the coderef.&lt;/p&gt;

&lt;p&gt;Artur complained that the tests would only work on PerlIO, and could be rewritten to be more general; Rafael knew about this and tried to find a cleaner solution.&lt;/p&gt;

&lt;p&gt;Gisle, on the other hand, was more concerned about the nature of what was going in &lt;code&gt;%INC&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is still missing is to make sure &lt;code&gt;pp_require()&lt;/code&gt; invokes the hook again when an absolute filename starting with things like &lt;code&gt;&amp;quot;/loader/0x81095c8/&amp;quot;&lt;/code&gt; is used. Currently this bypass the &lt;code&gt;@INC&lt;/code&gt; search which is quite likely to make the require fail.&lt;/p&gt;

&lt;p&gt;If you for instance try to serve up the Tk modules via a hook like this you will discover that it has a special AUTOLOAD function that construct absolute file names based on the &lt;code&gt;%INC&lt;/code&gt; value. It will then load its .al files like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    require &#39;/loader/0x81095c8/auto/Tk/Frame/scrollbars.al&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rafael said that &lt;code&gt;AutoLoader&lt;/code&gt; falls back to a relative path if it has problems, and also discussed the possibility of having &lt;code&gt;DynaLoader&lt;/code&gt; serve up binaries via a &lt;code&gt;@INC&lt;/code&gt; hook. (Blugh.)&lt;/p&gt;

&lt;p&gt;Nick Clark, who&amp;rsquo;s one of the evil minds behind this whole thing, wanted something less plausible than &lt;code&gt;/loader/whatever&lt;/code&gt; which could conceivably be a path if someone&amp;rsquo;s really out to get us, and so Rafael counter-proposed &lt;code&gt;&amp;amp;(0x...)&lt;/code&gt;. Nick also expressed suitable disgust at the getting-binaries-from-a-coderef idea.&lt;/p&gt;

&lt;h3 id=&#34;span-id-default-random-seed-default-random-seed-span&#34;&gt;&lt;span id=&#34;Default_random_seed&#34;&gt;Default random seed&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Schwern (Yes, him again) noticed that in certain circumstances, calling &lt;code&gt;srand&lt;/code&gt; twice with no argument can produce the same set of random numbers. He asked for more pseudo-random data that we can use to perturb the seed of &lt;code&gt;srand&lt;/code&gt; on machines that don&amp;rsquo;t have &lt;code&gt;/dev/urandom&lt;/code&gt;. Merijn suggested &lt;code&gt;times&lt;/code&gt;, but Jarkko said that the usual granularity for that was only a jiffy, which might not be enough. Jarkko and Mike Guy both pointed out that running &lt;code&gt;srand&lt;/code&gt; twice was generally speaking a Don&amp;rsquo;t Do That, Then error. Mike Guy&amp;rsquo;s comments on &lt;code&gt;srand&lt;/code&gt; bear repeating:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You shouldn&amp;rsquo;t ever use srand() (i.e. without argument) more than once in a script. The internal state of the RNG should contain more entropy than can be provided by any seed, so calling srand() again actually *loses* randomness. And you shouldn&amp;rsquo;t use srand() at all unless you need backward compatibility with *very* old Perls.&lt;/p&gt;

&lt;p&gt;Of course, srand($x) with an explicit argument is a quite different kettle of fish. But you should only be doing that if you know what you are doing &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jarkko pointed out that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    srand(31337);
    @first_run  = mk_rand;

    srand(1138);
    @second_run = mk_rand;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;might fail if we have really, really, really bad luck. But with 100 numbers in each array, it would have to be cosmically significantly bad luck. And Mike Guy pointed out that if we do get the same sequence back, then our &lt;code&gt;rand&lt;/code&gt; isn&amp;rsquo;t sufficiently random and this could be considered a bug.&lt;/p&gt;

&lt;h3 id=&#34;span-id-local-chdir-local-chdir-span&#34;&gt;&lt;span id=&#34;local_chdir&#34;&gt;local chdir()&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Schwern (Yes, him again) expressed his deep-seated longing for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    local chdir($foo);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which changed directory back once the scope is over. Kurt Starsinic said that we wouldn&amp;rsquo;t always be able to go back, and so you might as well &lt;code&gt;fork&lt;/code&gt; if that&amp;rsquo;s what you want. (Amazingly, Artur didn&amp;rsquo;t suggest using threads.) Jeremy Zawodny got really excited by the idea, and suggested being able to &lt;code&gt;local&lt;/code&gt; an entire block of code and have the effects rolled back at the end of the scope. Yeah, right. However, he did suggest writing a little &lt;code&gt;pushdir/popdir&lt;/code&gt; module, which was a little more sensible than hacking core for fun and profit. Schwern wrote something using Abigail&amp;rsquo;s &lt;code&gt;DESTROY&lt;/code&gt; trick, and Abigail showed a nicer variant by using a tied scalar which changed directory when you assigned to it.&lt;/p&gt;

&lt;p&gt;Abhijit Menon-Sen got in a particularly silly mood and actually implemented &lt;code&gt;local chdir($foo)&lt;/code&gt; (with a bit of help from you&amp;rsquo;re truly, who&amp;rsquo;s always in a particularly silly mood) which caused Schwern to ask for more, more, more&amp;hellip; &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;umask&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt; and so on were now on the table. Sarathy expressed some dismay at the waste of precious &lt;code&gt;op_private&lt;/code&gt; bits, as well as the &amp;ldquo;semantic complexity&amp;rdquo; of the idea itself. Abhijit himself summed up the opinions of several of us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not convinced that we should allow localizing actions (as opposed to values), and adding destructors piecemeal for random ops would make me very uncomfortable.&lt;/p&gt;

&lt;p&gt;That said, I wouldn&amp;rsquo;t object to a module which &amp;ndash; with suitable hooks in the core &amp;ndash; allowed arbitrary leave_scope() actions to be registered. I might even write it sometime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;d be worth seeing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-filespec-file-spec-span&#34;&gt;&lt;span id=&#34;FileSpec&#34;&gt;File::Spec&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Schwern - oh no, it was Chris Nandor - had a problem with &lt;code&gt;File::Spec&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Mac OS, you can tell it to be relative by making the first argument a leading empty string. So &lt;code&gt;catfile(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)&lt;/code&gt; is absolute, while &lt;code&gt;catfile(&amp;quot;&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)&lt;/code&gt; is relative. In Unix/Windows, it is exactly the opposite: the default is relative, but adding a leading empty string makes it absolute!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Chris rightly pointed out, &amp;ldquo;Yikes!&amp;rdquo; If &lt;code&gt;File::Spec&lt;/code&gt; is supposed to make things more portable, we have a problem. Chris suggested making relative paths the default and breaking MacPerl in the interests of sanity. Barrie Slaymaker, who owns &lt;code&gt;File::Spec&lt;/code&gt; said that he&amp;rsquo;d be willing to accept patches if he thought the MacPerl community could cope with the breakage. Peter Prymmer said that the required change on VMS probably wouldn&amp;rsquo;t break that much and he was more interested in making the API cross-platform. Tim Jenness asked whether or not &lt;code&gt;catdir&lt;/code&gt; ought to support volumes, such as on DOS or VMS. Phillip Newton reminded us that there is a difference between &lt;code&gt;A:b\c&lt;/code&gt; and &lt;code&gt;A:\b\c&lt;/code&gt;, and that he expected &lt;code&gt;catdir(&#39;a:&#39;, &#39;b&#39;, &#39;c&#39;)&lt;/code&gt; to do the former rather than the latter. Yup, each drive has its own idea of the current working directory.&lt;/p&gt;

&lt;p&gt;Anyway, it looks like the consensus was that Chris&amp;rsquo;s suggestion will be adopted once Barrie gets Mac and VMS patches, &lt;code&gt;File::Spec&lt;/code&gt; will be truly portable again, and all the world will rejoice.&lt;/p&gt;

&lt;h3 id=&#34;span-id-smoking-smoking-span&#34;&gt;&lt;span id=&#34;Smoking&#34;&gt;Smoking!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The daily build project is great! Quite a few interesting bug reports have come out of the fact that we have Perl being tested almost continuously now on different platforms and architectures with all manner of different build options. I started smoke testing my desktop this week and confirmed some bugs that other people were seeing on AIX and FreeBSD, probably saving Merijn from a lot of unpleasant AIX and pains. If you want to get involved and donate some of your processing power, subscribe to the &lt;a href=&#34;mailto:daily-build-subscribe@cpan.org&#34;&gt;daily-build&lt;/a&gt; mailing list.&lt;/p&gt;

&lt;p&gt;Paul Marquess found a potential &lt;code&gt;DB_File&lt;/code&gt; bug with the help of Merijn&amp;rsquo;s smoke results, and Artur got to track down a bizarre segfault in the &lt;code&gt;File::Taint&lt;/code&gt; tests. Will Coleda broke Cygwin, but Gerrit Hasse thinks that was his own fault. Nick Clark found a bug in &lt;code&gt;MANIFEST&lt;/code&gt; of all places, but this was explained as being a bad time to resync.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Ed Peschko asked why we don&amp;rsquo;t have &lt;code&gt;$SIG{__EXIT__}&lt;/code&gt; and was told by various people to use an &lt;code&gt;END&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Paul Johnson produced the useful but perhaps dangerous &lt;code&gt;coretest&lt;/code&gt; make target, which only runs a subset of the testing suite, allowing you to dash off your latest patch without completely testing you haven&amp;rsquo;t broken anything subtle. (I know, because I did it last week.)&lt;/p&gt;

&lt;p&gt;Nicholas Clark silently went on making more and more of Perl able to preserve &lt;code&gt;IV&lt;/code&gt;s where possible. Nobody cared. He also found lots and lots of interesting bugs.&lt;/p&gt;

&lt;p&gt;Artur, pumpkinging madly, found a lovely bug in HP-UX which we can probably blame on gcc: &lt;code&gt;inet_ntoa&lt;/code&gt; always returns 0.0.0.0. This is obviously not useful. He also found a bug in the tests of &lt;code&gt;Time::Hires&lt;/code&gt; where every so often the test fails due to rounding error between the ordinary integer version of &lt;code&gt;time&lt;/code&gt; and the floating-point hi-res version.&lt;/p&gt;

&lt;p&gt;Yusuf Goolamabbas asked whether something (lack of support for large files) was a Perl problem or a RedHat packaging problem. Two people took the opportunity to pass the buck. Amusingly, Chip Turner from RedHat turned up to pass it back:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I believe Large files are supported only with 2.4 kernels and certain glibcs. Which basically means for proper large file support, you will need Red Hat 7.1. Even then, some utilities don&amp;rsquo;t work, Perl being one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ouch.&lt;/p&gt;

&lt;p&gt;Daniel Lewart picked up a few miscellaneous bugs in &lt;code&gt;Time::Local&lt;/code&gt;, and Rafael fixed up the example of an array shuffle in &lt;code&gt;perlfaq4&lt;/code&gt; to be less confusing to the learner. (It used the same variable name for an array and an array reference!)&lt;/p&gt;

&lt;p&gt;Jarkko is now back, and rapidly catching up on his P5P backlog, so it&amp;rsquo;s time for me to go and generate some more for him, and until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:simon.co.uk&#34;&gt;Simon Cozens&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

