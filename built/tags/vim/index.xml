<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/vim/</link>
    <description>Recent content in Vim on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2019 18:26:42 +0000</lastBuildDate>
    <atom:link href="/tags/vim/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How do I Open This?</title>
      <link>http://localhost:1313/article/how-do-i-open-this-/</link>
      <pubDate>Mon, 03 Jun 2019 18:26:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-do-i-open-this-/</guid>
      <description>

&lt;p&gt;When I&amp;rsquo;m working on code, I have to open a lot of files.  I work primarily at the command line, inside a vim editor.  On any given day I may need to translate some or all of the following into file paths that vim can understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack traces&lt;/li&gt;
&lt;li&gt;Perl module names&lt;/li&gt;
&lt;li&gt;Perl module names suffixed with subroutine names&lt;/li&gt;
&lt;li&gt;git-grep results&lt;/li&gt;
&lt;li&gt;GitHub URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figuring this stuff out isn&amp;rsquo;t generally that hard, but it can make your day just a little longer than it needs to be, so I wrote &lt;a href=&#34;https://metacpan.org/pod/ot&#34;&gt;ot&lt;/a&gt;: a command line utility provided by &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using vim in examples, but ot also supports nvim, emacs,nano and pico, defaulting to whatever you have set in &lt;code&gt;$ENV{EDITOR}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;following-along&#34;&gt;Following Along&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be working out of a repository at &lt;a href=&#34;https://github.com/oalders/git-helpers&#34;&gt;https://github.com/oalders/git-helpers&lt;/a&gt;.  If you&amp;rsquo;d like to follow along:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oalders/git-helpers.git
$ cd git-helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-a-perl-module-name&#34;&gt;Using a Perl Module Name&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now in the root of the &lt;strong&gt;git-helpers&lt;/strong&gt; Git repository.  Let&amp;rsquo;s say we want to open the Git::Helpers module.  Translating a Perl module name into a file path isn&amp;rsquo;t all that hard.  Given something like Git::Helpers, I know that I&amp;rsquo;m likely (but not always) looking for a file called &lt;code&gt;Git/Helpers.pm&lt;/code&gt;.  This could be in lib, t/lib or some custom directory.  If I know exactly where to find this file, I can invoke vim directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if I&amp;rsquo;m not sure, or if I&amp;rsquo;m just lazy, this will get me to the same place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because, by default, ot will search your lib and t/lib directories for local files. You can override this via the &lt;code&gt;$ENV{OPEN_THIS_LIBS}&lt;/code&gt; variable. It accepts a comma-separated list of libs.&lt;/p&gt;

&lt;p&gt;If the file can&amp;rsquo;t be found in one of the standard lib locations, ot will try to find an installed file on the system.  So, if we&amp;rsquo;re not in the root of the git-helpers repository, but we&amp;rsquo;ve previously installed Git::Helpers from CPAN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;might open open the following file: &lt;code&gt;~/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Git/Helpers.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-perl-module-at-a-subroutine-declaration&#34;&gt;Opening a Perl Module at a Subroutine Declaration&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take this a step further.  What if we want to open a file for a module but we also want to go straight to the correct subroutine declaration?  Something like &lt;code&gt;Git::Helpers::is_inside_work_tree()&lt;/code&gt;.  We could probably craft a fancy one-liner to do this, but today we are lazy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.  This will Do The Right Thing.  (Note that in this case we had to quote the args to ot.  Your shell will likely require this as well.)&lt;/p&gt;

&lt;p&gt;We can do exactly the same thing for an installed module.  Try this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test::More::subtest()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case it opens &lt;code&gt;/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Test/More.pm&lt;/code&gt; at line 807, which is &lt;code&gt;sub subtest {&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-using-a-line-number&#34;&gt;Opening a File Using a Line Number&lt;/h2&gt;

&lt;h4 id=&#34;stack-traces&#34;&gt;Stack Traces&lt;/h4&gt;

&lt;p&gt;I see a lot of stack traces on any given day.  A relevant chunk of a stack trace might look like: &lt;code&gt;Died at lib/Git/Helpers.pm line 50.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Doing this by hand I might copy the file path and enter the following at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;rsquo;m feeling fancy, I might translate the line number into something that vim understands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim +50 lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, I can just copy the file location and line number and feed it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do the right thing and open &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; in vim at line 50.&lt;/p&gt;

&lt;h4 id=&#34;git-grep&#34;&gt;git-grep&lt;/h4&gt;

&lt;p&gt;The results of some searches, like &lt;code&gt;git grep&lt;/code&gt;, can contain line numbers as well as file names.  To configure this behaviour in git use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global grep.lineNumber true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t want to configure this directly in git you can also search via &lt;code&gt;git grep --line-number foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got line numbers in our git grep output, we can use its output to give hints to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub _build_latest_release&amp;#39;&lt;/span&gt; .
lib/Git/Helpers/CPAN.pm:70:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having run the above search, we can copy paste the results to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers/CPAN.pm:70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 70.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-at-an-arbitrary-line-and-column&#34;&gt;Opening a File at an Arbitrary Line and Column&lt;/h2&gt;

&lt;p&gt;As we saw above, ot can open files at the correct line number.  Let&amp;rsquo;s get even lazier and have ot open our files at the correct line &lt;strong&gt;and&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;If you use  the &lt;code&gt;--vimgrep&lt;/code&gt; option with &lt;code&gt;ripgrep&lt;/code&gt; then you will see column numbers as well as line numbers with your search results.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rg --vimgrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt; .
./lib/Git/Helpers/CPAN.pm:20:17:    builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt;,
./lib/Git/Helpers/CPAN.pm:70:5:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 20 and column 17, simply copy/paste the rg output and pass it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot ./lib/Git/Helpers/CPAN.pm:20:17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-github-links-locally&#34;&gt;Opening Github Links Locally&lt;/h2&gt;

&lt;p&gt;Passing a full GitHub URL &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/a&gt;, to &lt;code&gt;ot&lt;/code&gt; will allow you to open the file locally, if it can be found in your relative file path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; at line 50.&lt;/p&gt;

&lt;p&gt;Passing a truncated URL path is also valid, if the path parts exist locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-a-locally-checked-out-file-at-github&#34;&gt;Opening a Locally Checked Out File at GitHub&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; flag will allow you to open your local files on GitHub.&lt;/p&gt;

&lt;p&gt;Any of the following commands can launch a browser with a GitHub URL (hopefully) containing the file you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers
$ ot -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;
$ ot -b Git::Helpers:75
$ ot -b Git::Helpers line &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, from the top level of the git-helpers repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers:75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-in-your-env-path&#34;&gt;Opening a File in Your &lt;code&gt;$ENV{PATH}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ot can also be used as a shortcut to inspect files which can be found inside your &lt;code&gt;$ENV{PATH}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot perldoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;~/.plenv/versions/5.26.1/bin/perldoc&lt;/code&gt; on my machine.  You can think of this as shorthand for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ which perldoc | xargs -o vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to add support for more editors or other formats of data, please &lt;a href=&#34;https://github.com/oalders/open-this/issues&#34;&gt;get in touch with me&lt;/a&gt; and we&amp;rsquo;ll see what we can do.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See Also&lt;/h2&gt;

&lt;p&gt;For other solutions to the problem of finding and opening files, I highly recommend &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/PathPicker&#34;&gt;fpp&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the right dictionary with Perl and Vim</title>
      <link>http://localhost:1313/article/using-the-right-dictionary-with-perl-and-vim/</link>
      <pubDate>Thu, 30 May 2019 08:45:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/using-the-right-dictionary-with-perl-and-vim/</guid>
      <description>

&lt;p&gt;I recently read James Summers&amp;rsquo; excellent article, &lt;a href=&#34;http://jsomers.net/blog/dictionary&#34;&gt;You&amp;rsquo;re probably using the wrong dictionary&lt;/a&gt; and was inspired to start using Webster&amp;rsquo;s 1913 edition myself. Using the instructions in the article, I was able to integrate searching the dictionary into my browser, but I spend most of my time working in the terminal, and wanted a command line solution.&lt;/p&gt;

&lt;p&gt;I got a text version of the dictionary from &lt;a href=&#34;https://archive.org/details/webstersunabridg29765gut&#34;&gt;archive.org&lt;/a&gt;, and set about writing a Perl script to search it.&lt;/p&gt;

&lt;h2 id=&#34;a-naive-search&#34;&gt;A naive search&lt;/h2&gt;

&lt;p&gt;Every entry in the 1913 text edition begins with the capitalized term at the beginning of a line followed by a newline, and the details about the entry. Webster&amp;rsquo;s definition for &amp;ldquo;llama&amp;rdquo; is typical:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LLAMA
Lla&amp;quot;ma, n. Etym: [Peruv.] (Zoöl.)

Defn: A South American ruminant (Auchenia llama), allied to the
camels, but much smaller and without a hump. It is supposed to be a
domesticated variety of the guanaco. It was formerly much used as a
beast of burden in the Andes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case it tells us that &amp;ldquo;llama&amp;rdquo; is a noun, originating from Peru. The abbreviation &amp;ldquo;Zoöl.&amp;rdquo; means it&amp;rsquo;s a Zoölogical term. Wiktionary has a handy &lt;a href=&#34;https://en.wiktionary.org/wiki/Wiktionary:Abbreviations_in_Webster&#34;&gt;list&lt;/a&gt; of Webster&amp;rsquo;s abbreviations.&lt;/p&gt;

&lt;p&gt;A single term can contain uppercase letters, numbers, spaces, dashes and single quotes. When there are alternative spellings for the same term, each spelling appears on the same line separated by a semicolon and space, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WOLVERENE; WOLVERINE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find matching entries in the dictionary, I want to search for matching terms, print their content and stop printing when I get to the next term:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uc join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, @ARGV;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $entry_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^[A-Z][A-Z0-9&amp;#39; ;-]*$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^$search_term/&lt;/span&gt;;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$search_term/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $next_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readline $dict;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($next_line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt;) {
     seek $dict, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;length($next_line), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
     &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
   }
   $output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $next_line;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $output;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script reads a search term from its command line args, converting it to uppercase. It then opens the dictionary which is encoded in &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_8859-1&#34;&gt;Latin 1&lt;/a&gt;, and scans for lines matching the pattern: &lt;code&gt;qr/^[A-Z][A-Z0-9&#39; ;-]*$/&lt;/code&gt;, which tries to only match lines marking the beginning of an entry (&amp;ldquo;WOLVERENE; WOLVERINE&amp;rdquo;). It then uses &lt;code&gt;readline&lt;/code&gt; to slurp the dictionary definition, until it finds the next entry, at which point it sets the filehandle pointer back one line, and prints the text it matched.&lt;/p&gt;

&lt;p&gt;One of the nice properties of Latin 1 is every character is a single byte, which means I don&amp;rsquo;t need to worry about &lt;a href=&#34;https://perldoc.perl.org/functions/seek.html&#34;&gt;seek&lt;/a&gt; breaking on a character because &lt;a href=&#34;https://perldoc.perl.org/functions/length.html&#34;&gt;length&lt;/a&gt; was counting in characters, but &lt;code&gt;seek&lt;/code&gt; uses bytes.&lt;/p&gt;

&lt;p&gt;Run run the script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./webster-search.pl tower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my laptop it takes about a second to run, which isn&amp;rsquo;t bad considering the dictionary is 27mb.&lt;/p&gt;

&lt;h2 id=&#34;a-faster-search&#34;&gt;A faster search&lt;/h2&gt;

&lt;p&gt;One obvious improvement is to have the script exit once it finds an entry which is alphabetically higher than the search term. The entry after &amp;ldquo;LLAMA&amp;rdquo; is &amp;ldquo;LLANDEILO GROUP&amp;rdquo;, which I can compare using &lt;a href=&#34;https://perldoc.perl.org/functions/cmp.html&#34;&gt;cmp&lt;/a&gt;. If the search term sorts earlier than the comparison term, &lt;code&gt;cmp&lt;/code&gt; will return 1, if they match 0, otherwise it will return -1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LLAMA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LLANDEILO GROUP&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# -1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An interesting property of Webster&amp;rsquo;s 1913 dictionary as a data source is that it never changes, so I can take advantage of that by building a static index for each letter&amp;rsquo;s starting point. Each letter&amp;rsquo;s section begins with the capitalized letter alone on a line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @alphabet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^$alphabet[0]$/&lt;/span&gt;;
  printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s =&amp;gt; %d\n&amp;#34;&lt;/span&gt;, shift @alphabet, tell $dict;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @alphabet;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this script encounters a new letter&amp;rsquo;s section, it calls &lt;a href=&#34;https://perldoc.perl.org/functions/tell.html&#34;&gt;tell&lt;/a&gt; on the filehandle to determine the byte location, and then prints the details to stdout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./build-index.pl
A =&amp;gt; 601
B =&amp;gt; 1796502
C =&amp;gt; 3293436
D =&amp;gt; 6039049
E =&amp;gt; 7681559
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curiously this index data stopped at &amp;ldquo;S&amp;rdquo; the first time I ran it. That&amp;rsquo;s because the copies of Webster&amp;rsquo;s 1913 dictionary on archive.org are missing the &amp;ldquo;T&amp;rdquo; entry! I found the entry &lt;a href=&#34;http://www.webster-dictionary.org/definition/T&#34;&gt;online&lt;/a&gt; and added it to my copy.&lt;/p&gt;

&lt;p&gt;By incorporating this index data into my script, I&amp;rsquo;ll jump to the section of the first letter of the search term, and start searching from there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uc join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, @ARGV;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $entry_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^[A-Z][A-Z0-9&amp;#39; ;-]*$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^$search_term/&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
  A &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;601&lt;/span&gt;,
  B &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1796502&lt;/span&gt;,
  C &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3293436&lt;/span&gt;,
  D &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6039049&lt;/span&gt;,
  E &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7681559&lt;/span&gt;,
  F &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8833301&lt;/span&gt;,
  G &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10034091&lt;/span&gt;,
  H &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10926753&lt;/span&gt;,
  I &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11930292&lt;/span&gt;,
  J &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13148994&lt;/span&gt;,
  K &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13380269&lt;/span&gt;,
  L &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13586035&lt;/span&gt;,
  M &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14532408&lt;/span&gt;,
  N &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15916448&lt;/span&gt;,
  O &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16385339&lt;/span&gt;,
  P &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17042770&lt;/span&gt;,
  Q &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19439223&lt;/span&gt;,
  R &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19610041&lt;/span&gt;,
  S &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21015876&lt;/span&gt;,
  T &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24379537&lt;/span&gt;,
  U &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25941093&lt;/span&gt;,
  V &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26405366&lt;/span&gt;,
  W &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26925697&lt;/span&gt;,
  X &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27748359&lt;/span&gt;,
  Y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27774096&lt;/span&gt;,
  Z &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27866401&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $index{ substr $search_term, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
seek $dict, $start, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $found_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undef;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; $entry_pattern;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($_ &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; $search_term) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $next_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readline $dict;
     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($next_line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt;) {
       seek $dict, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;length($next_line), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
     }
     $output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $next_line;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $output;
    $found_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $found_match &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($search_term &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; $_) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Searching for &amp;ldquo;tower&amp;rdquo; this script finishes in 70ms, which is a 14x improvement over the initial script. Not bad for 2 simple optimizations. I could spend time tuning this further with a more specific index, or an optimized regex, but this is fast enough for now.&lt;/p&gt;

&lt;h2 id=&#34;searching-from-vim&#34;&gt;Searching from Vim&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s fairly straightforward to integrate the Perl script into Vim with vimscript plugin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; webster-search.vim&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;parent_dir&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;sfile&amp;gt;:p:h&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;perl_script&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-search.pl&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; =  &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;parent_dir&lt;/span&gt; . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; . &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;perl_script&lt;/span&gt; . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; . &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; &amp;#34;let output = system(&amp;#39;&amp;#34; . l:command . &amp;#34;&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vnew&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;setlocal&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nobuflisted&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buftype&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;nofile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bufhidden&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;wipe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noswapfile&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setline&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt; &amp;#34;\n&amp;#34;))&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line obtains the parent directory of the plugin file, to avoid hard coding a path to the Perl script. Next it adds a function called &amp;ldquo;WebsterSearch&amp;rdquo; which calls the Perl script with a search term, printing the output into a new vertical window. The last line calls the &lt;code&gt;command&lt;/code&gt; function to register the user defined function, and avoid having to dispatch to it using &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use the plugin, I map a shortcut in my .vimrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;cWORD&amp;gt;&amp;#39;&lt;/span&gt;))&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever my cursor is over a word I want to lookup in the dictionary, I press &amp;ldquo;\d&amp;rdquo; and I get Webster&amp;rsquo;s entry right there in my terminal! One downside of &lt;code&gt;cWORD&lt;/code&gt; is it will only match the first word under the cursor, but some dictionary entries contain spaces (&amp;ldquo;ad hominem&amp;rdquo;). For those rarer cases, I can highlight the words in visual mode, and then execute a dictionary search:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(@*)&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This maps the same shortcut when Vim is in visual mode; &lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; clears the range automatically entered by Vim, then it calls the function passing the register variable &lt;code&gt;@*&lt;/code&gt; (the last highlighted text) as the search term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve uploaded this code to &lt;a href=&#34;https://github.com/dnmfarrell/WebsterSearch&#34;&gt;GitHub&lt;/a&gt;, along with Vim install instructions.&lt;/p&gt;

&lt;p&gt;An alternative to searching the raw dictionary text is to use &lt;a href=&#34;http://gcide.gnu.org.ua/&#34;&gt;GCIDE&lt;/a&gt; (h/t &lt;a href=&#34;https://blog.afoolishmanifesto.com/&#34;&gt;frew&lt;/a&gt;) which is based on Webster&amp;rsquo;s 1913 dictionary, and has machine-readable markup for easier parsing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to empty a file with Perl</title>
      <link>http://localhost:1313/article/how-to-empty-a-file-with-perl/</link>
      <pubDate>Wed, 26 Oct 2016 08:37:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-empty-a-file-with-perl/</guid>
      <description>

&lt;p&gt;Have you ever had the experience of doing something a certain way for a long time, and then you discover a better way? This happened to me last week, when I was working on some code that needed to empty a file. Emptying a file is a common operation - maybe you have a session log file to write to, or want to limit disk space use, or whatever. Here&amp;rsquo;s how I usually do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# empty the file&lt;/span&gt;
{ open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $session_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path/to/sessionfile&amp;#39;&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This opens a write filehandle on the file, effectively setting its length to zero. I put the call to &lt;a href=&#34;https://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt; between curly braces in order to minimize the scope of the filehandle, &lt;code&gt;$session_file&lt;/code&gt;. After that statement, the block closes, and &lt;code&gt;$session_file&lt;/code&gt; variable goes out of scope, automatically closing the filehandle. As the block looks a little strange, I include an explanatory comment.&lt;/p&gt;

&lt;p&gt;The other day though, I came across the &lt;a href=&#34;https://perldoc.perl.org/functions/truncate.html&#34;&gt;truncate&lt;/a&gt; function. This does exactly what you&amp;rsquo;d think it does: truncates files. It takes two arguments: the file path (or filehandle), and the length. So if you need to truncate a file, you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;truncate &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path/to/sessionfile&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This doesn&amp;rsquo;t use a lexical variable, so no scoping is required. It&amp;rsquo;s unambiguous so no comment is needed either. I like it, it&amp;rsquo;s a better way.&lt;/p&gt;

&lt;p&gt;N.B. on Windows &lt;code&gt;truncate&lt;/code&gt; requires the file to not be open elsewhere on the system, and if called with a filehandle it must be in append mode.&lt;/p&gt;

&lt;h3 id=&#34;looking-up-perl-functions&#34;&gt;Looking up Perl functions&lt;/h3&gt;

&lt;p&gt;Do you know Perl has around 220 built in functions? You can read about them all in &lt;a href=&#34;https://perldoc.perl.org/perlfunc.html&#34;&gt;perlfunc&lt;/a&gt;, or at the terminal with &lt;code&gt;perldoc perlfunc&lt;/code&gt;. Read more about the &lt;a href=&#34;https://perldoc.perl.org/functions/truncate.html&#34;&gt;truncate&lt;/a&gt; function at the terminal with &lt;code&gt;perldoc -f truncate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vim users&lt;/strong&gt; if you&amp;rsquo;re editing Perl code and want to lookup a function, place the cursor on the function word and type &lt;code&gt;Shift-k&lt;/code&gt; to lookup the function in perldoc (works for Python, Ruby, C etc too).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Activating Perl 6 syntax highlighting in Vim</title>
      <link>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</link>
      <pubDate>Tue, 22 Sep 2015 22:16:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</guid>
      <description>

&lt;p&gt;Modern versions of the Vim text editor ship with Perl 6 syntax highlighting, but automatically activating it is tricky because Perl 6 files can have ambiguous file extensions. It can get tiresome to correct the file type every time you open a Perl 6 file, so I&amp;rsquo;m going to show you a few tricks that I use to make Vim detect Perl 6 files automatically.&lt;/p&gt;

&lt;h3 id=&#34;showing-and-setting-the-filetype-in-vim&#34;&gt;Showing and setting the filetype in Vim&lt;/h3&gt;

&lt;p&gt;First of all I want to make sure that syntax highlighting is turned on by default, so I add this option to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To edit your &lt;code&gt;.vimrc&lt;/code&gt; just start Vim and enter this command &lt;code&gt;:e $MYVIMRC&lt;/code&gt;. Save your changes with &lt;code&gt;:w&lt;/code&gt;, and then reload your &lt;code&gt;.vimrc&lt;/code&gt; with &lt;code&gt;:so %&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that I have syntax highlighting turned on, I need to know how set Vim&amp;rsquo;s file type to Perl 6 when I&amp;rsquo;m working with Perl 6 files. I can see the current file type by typing this command &lt;code&gt;:set filetype?&lt;/code&gt;. To set the file type to Perl 6, I use this command &lt;code&gt;:set filetype=perl6&lt;/code&gt;. The &lt;code&gt;filetype&lt;/code&gt; keyword can be shortened to &lt;code&gt;ft&lt;/code&gt;. In which case the last command becomes &lt;code&gt;:set ft=perl6&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;detecting-perl-6-files&#34;&gt;Detecting Perl 6 files&lt;/h3&gt;

&lt;p&gt;Now the challenge becomes correctly detecting when I&amp;rsquo;m working with Perl 6 files in Vim. Perl 6 scripts shouldn&amp;rsquo;t be a problem: Vim (not Vi) automatically parses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_line&#34;&gt;shebang&lt;/a&gt; line to determine the file type. However this fails when the script has an extension like &lt;code&gt;.pl&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;use-the-pm6-file-extension&#34;&gt;Use the .pm6 file extension&lt;/h4&gt;

&lt;p&gt;Vim will automatically use Perl 6 syntax highlighting if the file extension is &lt;code&gt;.pm6&lt;/code&gt;. So when working with Perl 6 module files, it&amp;rsquo;s better to use this extension. This doesn&amp;rsquo;t help when I&amp;rsquo;m working on other people&amp;rsquo;s Perl 6 projects however. It also doesn&amp;rsquo;t help for test files, which do not have an equivalent Perl 6 file extension (&lt;code&gt;.t6&lt;/code&gt; test files are ignored when installing Perl 6 modules).&lt;/p&gt;

&lt;h4 id=&#34;use-a-modeline&#34;&gt;Use a modeline&lt;/h4&gt;

&lt;p&gt;A modeline is a line of code in the text of the file which Vim reads and executes. So to activate Perl 6 syntax highlighting I just need to add this modeline to every Perl 6 file I work with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim: filetype=perl6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look at the &lt;a href=&#34;https://github.com/Mouq/json5/blob/master/lib/JSON5/Tiny.pm6#L54&#34;&gt;source code&lt;/a&gt; of JSON5::Tiny for a real-World example. To Perl 6 this code looks just like an ordinary comment, but Vim will use it to turn on Perl 6 syntax highlighting. The modeline can appear anywhere in the code, but it&amp;rsquo;s better to place it at the start or end of the file.&lt;/p&gt;

&lt;p&gt;Older versions of Vim (pre 7.3) and when Vim is run under root privileges, disable modelines as a security risk. Don&amp;rsquo;t run Vim as root! But if you have an older Vim, you can turn on modelines with &lt;code&gt;:set modeline&lt;/code&gt;. As with &lt;code&gt;filetype&lt;/code&gt;, modeline can be abbreviated to &lt;code&gt;ml&lt;/code&gt;, so &lt;code&gt;set ml&lt;/code&gt; works too. To activate modelines automatically, add this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The downside of using modelines? First there is aforementioned security risk for older Vims. Also it feels impure to add editor directives to the code I&amp;rsquo;m working with, as not everyone uses Vim. These seem like minor issues though.&lt;/p&gt;

&lt;h4 id=&#34;use-a-local-vimrc&#34;&gt;Use a local vimrc&lt;/h4&gt;

&lt;p&gt;Often different Open Source projects will have different coding conventions that I need to follow, so it can be helpful to use a local vimrc file to store these project-specific settings. This works for syntax highlighting too. In order to use local vimrc files, I add the following code to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will check the current working directory for &lt;code&gt;.vimrc.local&lt;/code&gt; file, and automatically execute it if it finds it. &lt;strong&gt;Warning&lt;/strong&gt; this is a security risk - Vim will execute ANY instruction in a local vimrc, so I am very careful when working with projects that are not my own. Next I create a &lt;code&gt;.vimrc.local&lt;/code&gt; file in the root project directory and add this auto command to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au Bufnewfile,bufRead *.pm,*.t,*.pl set filetype=perl6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I open or create any file with a Perl extension, Vim will set the syntax highlighting to Perl 6. I like this technique because it&amp;rsquo;s not intrusive: it doesn&amp;rsquo;t require any changes to the Perl 6 files themselves, so it works well on shared projects (I never check-in my local vimrc to the Git repo).&lt;/p&gt;

&lt;h4 id=&#34;use-code-detection&#34;&gt;Use code detection&lt;/h4&gt;

&lt;p&gt;I can also have Vim try to detect Perl 6 code automatically. Two directives which would indicate we&amp;rsquo;re working with Perl 6 instead of Perl 5 code: the shebang line and the &lt;code&gt;use v6;&lt;/code&gt; directive. To check for these, I&amp;rsquo;ll add a function to my .vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function uses &lt;code&gt;getline()&lt;/code&gt; to check the first line of the file to see if it looks like a Perl 6 shebang. This should work well for &lt;code&gt;.pl&lt;/code&gt; scripts, but Perl 6 module files will not have a shebang, so the next part of the script checks the first 5 lines of the file for the &lt;code&gt;use v6;&lt;/code&gt; directive. The last line of code is an auto command which will call the function anytime we open file with a Perl file extension.&lt;/p&gt;

&lt;p&gt;The main drawback of this technique is that not all Perl 6 code uses the &lt;code&gt;use v6;&lt;/code&gt; directive, and so when working with module files, the code detection can fail. However the code detection could be improved to use more rules for detecting Perl 6 code such as class declarations. The &lt;a href=&#34;https://github.com/vim-perl/vim-perl&#34;&gt;vim-perl&lt;/a&gt; plugin has more sophisticated Perl 6 code detection &lt;a href=&#34;https://github.com/vim-perl/vim-perl/blob/master/ftdetect/perl11.vim&#34;&gt;rules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;complete-vimrc&#34;&gt;Complete .vimrc&lt;/h3&gt;

&lt;p&gt;This &lt;code&gt;.vimrc&lt;/code&gt; contains all the code shown above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on

&amp;quot;Recognize modeline # vim: filetype=perl6
set ml

&amp;quot;check for a local vimrc
if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif

&amp;quot;check for Perl 6 code
function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s it, four useful-but-imperfect techniques for detecting file types in Vim. I tend to use a combination of all four. This would be a nice problem not to have. I&amp;rsquo;d like the Perl 6 community to agree and encourage unambiguous file extensions like &lt;code&gt;.pm6&lt;/code&gt;, &lt;code&gt;.t6&lt;/code&gt; and &lt;code&gt;.pl6&lt;/code&gt;. Larry Wall called this &amp;ldquo;free advertising&amp;rdquo;. It&amp;rsquo;s also a simple way to make Perl 6 programmers more productive. Not every text editor is as customizable as Vim.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boost your Perl productivity with auto-compile checking</title>
      <link>http://localhost:1313/article/133/2014/11/10/Boost-your-Perl-productivity-with-auto-compile-checking/</link>
      <pubDate>Mon, 10 Nov 2014 14:01:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/133/2014/11/10/Boost-your-Perl-productivity-with-auto-compile-checking/</guid>
      <description>

&lt;p&gt;The Perl command line option &lt;code&gt;-c&lt;/code&gt; causes Perl to check the syntax of the program, but not execute it (apart from code in BEGIN, CHECK and UNITCHECK blocks - watch out for those). For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is useful but it&amp;rsquo;s kind of clunky to type it every time you want to check the syntax of a program or file.&lt;/p&gt;

&lt;h3 id=&#34;continuous-syntax-checking&#34;&gt;Continuous syntax checking&lt;/h3&gt;

&lt;p&gt;One of my favourite &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Manual::Tutorial::02_CatalystBasics#The-Simplest-Way&#34;&gt;features&lt;/a&gt; when developing Catalyst web apps is using the test server to automatically check the syntax of the web app as I develop it. This saves me time as I know immediately if the web app compiles or not and don&amp;rsquo;t waste time opening up a browser only to get an error. if you&amp;rsquo;re working on a Unix-based operating system you can achieve a similar effect for any Perl program (not just web apps). The &lt;code&gt;watch&lt;/code&gt; program can automatically run the check command. Just start a new terminal, and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ watch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl -c lib/Devel/DidYouMean.pm&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Giving this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Every &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;s perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm           Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;

lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case I&amp;rsquo;m watching the file &lt;code&gt;lib/Devel/DidYouMean.pm&lt;/code&gt; but you can provide any path to a Perl file that you want to check for syntax errors. By default &lt;code&gt;watch&lt;/code&gt; will run the command every 2 seconds. So if I save a bad update to the file, the watching terminal window will show the error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Every &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;s: perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm           Sat Nov  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;

syntax error at lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, near &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;} keys&amp;#34;&lt;/span&gt;

lib&lt;span style=&#34;color:#e6db74&#34;&gt;/Devel/&lt;/span&gt;DidYouMean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm had compilation errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This enables me to catch the error before running the program, saving time.&lt;/p&gt;

&lt;h3 id=&#34;checking-syntax-in-a-text-editor&#34;&gt;Checking syntax in a text-editor&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;watch&lt;/code&gt; is useful, but I find it can be annoying to have to check a separate terminal window to know if my program compiles or not. Another way to do this is to run the command from within your text-editor. I&amp;rsquo;ll show how you how to do this in vim, but it should be possible to do this in any text-editor that has save events which you can hook in to (e.g. examples for &lt;a href=&#34;http://www.klaascuvelier.be/2013/06/sublime-command-on-save/&#34;&gt;Sublime Text&lt;/a&gt; and &lt;a href=&#34;http://flycheck.readthedocs.org/en/latest/&#34;&gt;Emacs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Add the following line to your .vimrc file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;autocmd BufWritePost &lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;pm,&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;t,&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;pl echom system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl -Ilib -c &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; expand(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%:p&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this command does is every time a file ending in .pm, .t, or.pl is saved, vim will run the check syntax command on the file, echoing the results to the current window. Reload your .vimrc with this vim command: &lt;code&gt;:so $MYVIMRC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you don&amp;rsquo;t have to bother setting up a separate terminal window and watching the file; vim will notify you immediately if any Perl file is saved with compilation errors. Much more convenient!&lt;/p&gt;

&lt;h3 id=&#34;alternative-methods-in-vim&#34;&gt;Alternative Methods in Vim&lt;/h3&gt;

&lt;p&gt;Several readers got in touch to recommend the Syntastic &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;plugin&lt;/a&gt; for Vim (&lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;manual&lt;/a&gt;). One nice thing about Syntastic is you can chain compile checks: first run &lt;code&gt;perl -c&lt;/code&gt;, if it passes, then run &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and so on. Syntastic also integrates syntax checkers for many other languages, so if Vim is your editor of choice, you might want to check it out.&lt;/p&gt;

&lt;p&gt;A simpler alternative to Syntastic is to use Vim&amp;rsquo;s built-in compiler support. With a Perl file in the current buffer, type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;:compiler perl
:make
:cope&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will run Perl&amp;rsquo;s syntax checks checks on the current buffer. Vim reads the output into an error list, which the &lt;code&gt;:cope&lt;/code&gt; command displays. You can jump to the line referenced by a specific error by pressing the enter key (&lt;a href=&#34;http://vimdoc.sourceforge.net/htmldoc/quickfix.html#quickfix-window&#34;&gt;manual&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates:&lt;/strong&gt; &lt;em&gt;BEGIN, CHECK, UNITCHECK blocks caution added. Emacs link and addition Vim methods added. 2014-11-10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vim autocmd example updated to handle filepaths containing spaces. Thanks to Henry An for the suggestion. 2015-01-22&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/runneralan/10092757714/in/photolist--88qSeT-88u7R1-dqTSLE-atoyrp-bD3QaN-93yNyq-8QYfKX-diG9h4-bD3NV9-88u847-gnS2f3-55QWyu-dqTHcF-9AJTkV-88qSdr-7h39AP-7nPgCT-88qSfv-5MyRfE-bRXxYv-bD3PXU-88u7pC-imjBX2-8xz38b-32eo27-a8YVvZ-8WJgFA-93ySDG-57KLMs-oYUnQ1-88qRL4-fturhH-88qRMx-cUx3nS-4GMFL2-88qSrv-5RhqjZ-ftuqAr-ehAoHf-ftJLsq-88u7fU-5R22Pk-5CNDM-bv2wve-9vnwcd-6dyA62-ejP2nf-329MpH-88u7ds&#34;&gt;Alan Kotok&lt;/a&gt; image has been digitally altered&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

