<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extutils Makemaker on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/extutils-makemaker/</link>
    <description>Recent content in Extutils Makemaker on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Aug 2018 20:20:00 +0000</lastBuildDate>
    <atom:link href="/tags/extutils-makemaker/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to become a CPAN contributor - part 2</title>
      <link>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</link>
      <pubDate>Wed, 01 Aug 2018 20:20:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</guid>
      <description>

&lt;p&gt;In the previous &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;article&lt;/a&gt; I described some typical issues that are good for first time CPAN contributors to tackle. In this article, I will go through the nitty-gritty of fixing issues, and some gotchas to watch out for. If you&amp;rsquo;re not familiar with the differences between a Perl distribution, module and package, check out this &lt;a href=&#34;http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;missing-license-meta-name&#34;&gt;Missing license meta name&lt;/h3&gt;

&lt;p&gt;This is where the build script is missing a license name. It should be an easy fix - just add the license name to the build script. However there is a catch and I have been bitten by it before: the license meta name depends on the build script type. For example, if the distribution document says the license is &amp;ldquo;Artistic 2&amp;rdquo; in Makefile.PL the meta name would be &amp;ldquo;artistic_2&amp;rdquo; whereas in a dist.ini it would be &amp;ldquo;Artistic_2_0&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;E.g. the Makefile.PL from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube&#34;&gt;Map::Tube&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
ABSTRACT_FROM &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/Map/Tube.pm&amp;#39;&lt;/span&gt;,
LICENSE       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic_2&amp;#39;&lt;/span&gt;,
EXE_FILES     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script/map-data-converter&amp;#39;&lt;/span&gt; ],
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to the dist.ini from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube-Delhi&#34;&gt;Map::Tube::Delhi&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
author  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;mohammad.anwar@yahoo.com&amp;gt;&lt;/span&gt;
license &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Artistic_2_0
copyright_holder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are adding a software license to a distribution, &lt;a href=&#34;https://metacpan.org/pod/Software::License&#34;&gt;Software::License&lt;/a&gt; is a good resource which has many different types of Open Source licenses.&lt;/p&gt;

&lt;p&gt;One thing to check for is whether the distribution repository has a META.yml file or not. If it does, adding the license meta name to the build script may cause the build process to warn: &amp;ldquo;Invalid LICENSE value &amp;hellip;&amp;rdquo;. This happens because the META.yml already contains a license value of &amp;ldquo;unknown&amp;rdquo;, which conflicts with the build script. The solution here is to delete the META.yml file and build the distribution, adding the newly-generated META.yml back into the repository.&lt;/p&gt;

&lt;p&gt;You might be thinking, why would you keep META.yml in the project repository as it can be easily generated? I agree it&amp;rsquo;s probably a mistake, but keep in mind your intent is to add the license meta and nothing else. The author might have a good reason for keeping the META.yml file around. One approach would be to discuss with the author if it is good idea to drop it completely.&lt;/p&gt;

&lt;h3 id=&#34;missing-strict-warnings-pragma&#34;&gt;Missing strict/warnings pragma&lt;/h3&gt;

&lt;p&gt;This is the easiest of all: one or more modules in the distribution are missing the [strict]](https://metacpan.org/pod/strict) or &lt;a href=&#34;https://metacpan.org/pod/warnings&#34;&gt;warnings&lt;/a&gt; pragmas. Just add the line &lt;code&gt;use strict;&lt;/code&gt; (or &lt;code&gt;use warnings;&lt;/code&gt;) at the top of the modules missing them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; package_name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is it that simple? Yes and no. If the module uses Moose or Moo then &lt;code&gt;use strict;&lt;/code&gt; is enabled automatically, so the additional import is redundant. The module &lt;a href=&#34;https://metacpan.org/pod/Test::Strict&#34;&gt;Test::Strict&lt;/a&gt; has the &lt;code&gt;strict_ok&lt;/code&gt; test function to detect whether a module has enabled strict mode or not (full disclosure, I am the distribution maintainer).&lt;/p&gt;

&lt;p&gt;With the warnings pragma, there can be other considerations too. I was giving talk at the German Perl Workshop 2018, during the talk I spoke about one of my pull requests being rejected by the author for adding warnings pragma. At the time I didn&amp;rsquo;t have the courage to question the author, so I apologized and moved on. Surprisingly, the very same author was sitting in the front row attending my talk! And he was none other than [Reini Urban](). At the end of the talk, he explained to me why he rejected the pull request: in some cases, adding the warnings pragma can reduce how fast Perl executes.&lt;/p&gt;

&lt;p&gt;So the moral of the story is, be careful when adding use warnings; line. To be honest with you, I avoid dealing with missing warnings issues unless I know the author personally.&lt;/p&gt;

&lt;h3 id=&#34;missing-meta-json&#34;&gt;Missing META.json&lt;/h3&gt;

&lt;p&gt;Sometimes, you will find a distribution missing the META.json file. Recently, I have noticed many CPAN module authors have adopted &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; as the distribution builder. I am a big fan of this tool, however if the author is moving from a traditional distribution builder like &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt; then they often forget to generate this file.&lt;/p&gt;

&lt;p&gt;There is an easy solution to this problem: just add &lt;code&gt;[MetaJSON]&lt;/code&gt; to the dist.ini file, and Dist::Zilla will generate it during the build process.&lt;/p&gt;

&lt;h3 id=&#34;missing-a-minimum-perl-version&#34;&gt;Missing a minimum Perl version&lt;/h3&gt;

&lt;p&gt;This is where the build script does not declare the minimum version of Perl it requires. I am now going to show you how to add this information depending on what distribution builder is used by the module author.&lt;/p&gt;

&lt;p&gt;In case of ExtUtils::MakeMaker, it is as simple as adding the key &lt;code&gt;MIN_PERL_VERSION&lt;/code&gt; as shown below to the Makefile.PL script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::MakeMaker;

WriteMakefile(
  MIN_PERL_VERSION   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas if distribution builder is Module::Build then you can do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Module::Build;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Module::Builder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  requires &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it is using Dist::Zilla then you can either explicitly set the minimum Perl version in the dist.ini as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[Prereqs]
perl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can use the plugin &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::MinimumPerlFast&#34;&gt;MinimumPerlFast&lt;/a&gt; which will detect the minimum Perl version needed by the distribution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[MinimumPerlFast]
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need any help getting started as a CPAN contributor, feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2017/</link>
      <pubDate>Mon, 08 Jan 2018 09:12:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. A full list of December&amp;rsquo;s new distributions can be found &lt;a href=&#34;https://perlancar.wordpress.com/2018/01/01/list-of-new-cpan-distributions-dec-2017/&#34;&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a simple time tracking app with &lt;a href=&#34;https://metacpan.org/pod/App::Jiffy&#34;&gt;App::Jiffy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::sdif&#34;&gt;App::sdif&lt;/a&gt; provides a variety of diff tools&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Quote::IEX&#34;&gt;Finance::Quote::IEX&lt;/a&gt; retrieves stock quotes using the IEX API&lt;/li&gt;
&lt;li&gt;Get financial market calendar data like holidays, late opens and early closes with &lt;a href=&#34;https://metacpan.org/pod/Finance::Calendar&#34;&gt;Finance::Calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitLab::API::v4&#34;&gt;GitLab::API::v4&lt;/a&gt; is a complete GitLab API v4 client!&lt;/li&gt;
&lt;li&gt;Use ipinfo.io geolocation services via &lt;a href=&#34;https://metacpan.org/pod/Geo::IPinfo&#34;&gt;Geo::IPinfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trade cryptocurrency securities using the &lt;a href=&#34;https://metacpan.org/pod/Poloniex::API&#34;&gt;Poloniex::API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/StreamFinder&#34;&gt;StreamFinder&lt;/a&gt; discover raw, streamable URLs from radio-station websites&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pre-process Apache configuration files using &lt;a href=&#34;https://metacpan.org/pod/Apache::Config::Preproc&#34;&gt;Apache::Config::Preproc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Determine when ExtUtils::MakeMaker attributes are available with &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker::Attributes&#34;&gt;ExtUtils::MakeMaker::Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::HomeDir::Tiny&#34;&gt;File::HomeDir::Tiny&lt;/a&gt; provides a minimalist, portable way to find your way $HOME&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get fast, C-based base91 encoding/decoding using &lt;a href=&#34;https://metacpan.org/pod/Convert::Base91&#34;&gt;Convert::Base91&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Random::Flexible&#34;&gt;Data::Random::Flexible&lt;/a&gt; can generate different types of random values&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::JPEG::Size&#34;&gt;Image::JPEG::Size&lt;/a&gt; finds the size of JPEG images via libjpeg. See also https://metacpan.org/pod/Imager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SVG::Timeline::Compact&#34;&gt;SVG::Timeline::Compact&lt;/a&gt; produces SVG timeline charts like https://metacpan.org/pod/SVG::Timeline with additional capabilities&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Struct::Diff::MergePatch&#34;&gt;Struct::Diff::MergePatch&lt;/a&gt; can merge Perl data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a Universal 2 Factor Auth test client with &lt;a href=&#34;https://metacpan.org/pod/Authen::U2F::Tester&#34;&gt;Authen::U2F::Tester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asynchronous job queue for IO::Async using &lt;a href=&#34;https://metacpan.org/pod/Job::Async&#34;&gt;Job::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code blocks which don&amp;rsquo;t exist unless you ask for them with &lt;a href=&#34;https://metacpan.org/pod/Keyword::DEVELOPMENT&#34;&gt;Keyword::DEVELOPMENT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Async::ZMQ&#34;&gt;Net::Async::ZMQ&lt;/a&gt; provides IO::Async support for ZeroMQ&lt;/li&gt;
&lt;li&gt;Convert PPI nodes into literal values using &lt;a href=&#34;https://metacpan.org/pod/PPIx::Literal&#34;&gt;PPIx::Literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test CPAN modules against Perl dev releases with &lt;a href=&#34;https://metacpan.org/pod/Test::Against::Dev&#34;&gt;Test::Against::Dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Modbus::ASCII&#34;&gt;Device::Modbus::ASCII&lt;/a&gt; provides Modbus ASCII communications for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ham::Device::FT817COMM&#34;&gt;Ham::Device::FT817COMM&lt;/a&gt; can control the Yaesu FT817 Ham Radio&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::EN::Segment&#34;&gt;Lingua::EN::Segment&lt;/a&gt; can split concatenated English-language words. Useful for domain names, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::FastParsers&#34;&gt;Bio::FastParsers&lt;/a&gt; can parse sequence comparison output files (BLAST, HMMER)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Bacovia&#34;&gt;Math::Bacovia&lt;/a&gt; is a symbolic math library with support for alternative representations&lt;/li&gt;
&lt;li&gt;Calculate lubricant characteristics using &lt;a href=&#34;https://metacpan.org/pod/Tribology::Lubricant&#34;&gt;Tribology::Lubricant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::Thread&#34;&gt;Mojo::IOLoop::Thread&lt;/a&gt; is a threaded replacement for Mojo::IOLoop::subprocess for Win32&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::LazyImage&#34;&gt;Mojolicious::Plugin::LazyImage&lt;/a&gt; can lazy load images via JavaScript&lt;/li&gt;
&lt;li&gt;Get your IP address using checkip.amazonaws.com with &lt;a href=&#34;https://metacpan.org/pod/WWW::Amazon::checkip&#34;&gt;WWW::Amazon::checkip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with XS</title>
      <link>http://localhost:1313/article/getting-started-with-xs/</link>
      <pubDate>Wed, 03 May 2017 20:47:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/getting-started-with-xs/</guid>
      <description>

&lt;p&gt;eXtendable Subroutines (XS) are subroutines written in C that are callable from
Perl code. There are two common reasons you&amp;rsquo;d want to use XS: there is a C
library you&amp;rsquo;d like to use with Perl, or you want to make a subroutine faster
by processing it in C instead of Perl.&lt;/p&gt;

&lt;p&gt;This tutorial will walk you through all the components needed to get up and
running with a basic XS example. There will be a lot of new terms and concepts:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to write XS, you have to learn it. Learning XS is very difficult&lt;/p&gt;

&lt;p&gt;Steven W. McDougall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try not to get discouraged if things don&amp;rsquo;t click right away: I promise you that
learning XS can be hugely rewarding: you&amp;rsquo;ll develop the power to write lightning
fast code; get a better understanding of how Perl internals work, and be able to
integrate any C library you choose and use it from Perl.&lt;/p&gt;

&lt;h3 id=&#34;components&#34;&gt;Components&lt;/h3&gt;

&lt;p&gt;There are a few basic components needed to write an xsub. The first is a Perl
module that will provide the namespace for any XS functions. This is all that&amp;rsquo;s
needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package XS::Tutorial::One;
require XSLoader;

XSLoader::load();
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file should be saved as &lt;code&gt;lib/XS/Tutorial/One.pm&lt;/code&gt;. &lt;code&gt;XSLoader::load&lt;/code&gt; by
default searches for XS code that matches the package name it is called from*.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a main distribution module too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package XS::Tutorial;
BEGIN { our $VERSION = 0.01 }
1;

=encoding utf8

=head1 NAME

XS::Tutorial - documentation with examples for learning Perl XS

=cut
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That file should be saved as &lt;code&gt;lib/XS/Tutorial.pm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we need is a .xs file which defines the xsubs to be loaded by
&lt;code&gt;XS::Tutorial::One&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define PERL_NO_GET_CONTEXT // we&#39;ll define thread context if necessary (faster)
#include &amp;quot;EXTERN.h&amp;quot;         // globals/constant import locations
#include &amp;quot;perl.h&amp;quot;           // Perl symbols, structures and constants definition
#include &amp;quot;XSUB.h&amp;quot;           // xsubpp functions and macros
#include &amp;lt;stdlib.h&amp;gt;         // rand()

// additional c code goes here

MODULE = XS::Tutorial::One  PACKAGE = XS::Tutorial::One
PROTOTYPES: ENABLE

 # XS code goes here

 # XS comments begin with &amp;quot; #&amp;quot; to avoid them being interpreted as pre-processor
 # directives

unsigned int
rand()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file should be saved as &lt;code&gt;lib/XS/Tutorial/One.xs&lt;/code&gt;. The top half of the file
is pure C code. The line beginning &lt;code&gt;MODULE = XS::Tutorial::One&lt;/code&gt; indicates the
start of the XS code. This section will be parsed and compiled into C code by
&lt;code&gt;xsubpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MODULE&lt;/code&gt; and &lt;code&gt;PACKAGE&lt;/code&gt; directives define the Perl module and package which
will load any xsubs we define. The line &lt;code&gt;PROTOTYPES: ENABLE&lt;/code&gt; tells &lt;code&gt;xsubpp&lt;/code&gt;
to define subroutine prototypes for any xsubs we create. This is usually what
you want: prototypes can help Perl catch compile time errors.&lt;/p&gt;

&lt;p&gt;The last two lines of the file are an xsub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unsigned int
rand()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line defines the return type. The second line does two things: it
indicates the name of the C function to be called &lt;em&gt;and&lt;/em&gt; it defines the
signature of the xsub.&lt;/p&gt;

&lt;p&gt;In this case we&amp;rsquo;re calling &lt;code&gt;rand&lt;/code&gt; and accepting no parameters. This isn&amp;rsquo;t
Perl&amp;rsquo;s built-in rand function, &lt;em&gt;this&lt;/em&gt; rand comes from stdlib.h.&lt;/p&gt;

&lt;p&gt;The final thing we need is a &lt;code&gt;Makefile.PL&lt;/code&gt; script - as XS code is compiled, we
need a tool to build it before we can use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use 5.008005;
use ExtUtils::MakeMaker 7.12; # for XSMULTI option

WriteMakefile(
  NAME           =&amp;gt; &#39;XS::Tutorial&#39;,
  VERSION_FROM   =&amp;gt; &#39;lib/XS/Tutorial.pm&#39;,
  PREREQ_PM      =&amp;gt; { &#39;ExtUtils::MakeMaker&#39; =&amp;gt; &#39;7.12&#39; },
  ABSTRACT_FROM  =&amp;gt; &#39;lib/XS/Tutorial.pm&#39;,
  AUTHOR         =&amp;gt; &#39;David Farrell&#39;,
  CCFLAGS        =&amp;gt; &#39;-Wall -std=c99&#39;,
  OPTIMIZE       =&amp;gt; &#39;-O3&#39;,
  LICENSE        =&amp;gt; &#39;freebsd&#39;,
  XSMULTI        =&amp;gt; 1,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ExtUtils::MakeMaker &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;docs&lt;/a&gt; explain these options.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s talk about &lt;code&gt;XSMULTI&lt;/code&gt;. This is a relatively new feature which allows
you to have separate .xs files for modules. By default EUMM assumes the xs
file matches the distribution name. In this case that would mean having a single
Tutorial.xs file, with multiple xs &lt;code&gt;MODULE&lt;/code&gt; and &lt;code&gt;PACKAGE&lt;/code&gt; declarations in it.
By using &lt;code&gt;XSMULTI&lt;/code&gt;, we can have multiple XS files, one for each module in the
distribution instead.&lt;/p&gt;

&lt;p&gt;*Actually it searches for compiled C code but the effect is the same.&lt;/p&gt;

&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;

&lt;p&gt;Now we should have four files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lib/XS/Tutorial.pm
lib/XS/Tutorial/One.pm
lib/XS/Tutorial/One.xs
Makefile.PL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following commands will build the distribution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl Makefile.PL
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-minor-essay-to-understand-xsubpp-generated-c&#34;&gt;A minor essay to understand xsubpp generated C&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; creates a bunch of files, but take a look at &lt;code&gt;lib/XS/Tutorial/One.c&lt;/code&gt;.
This is the output of &lt;code&gt;xsubpp&lt;/code&gt;. If you look closely enough, you can find the
lines of C code from &lt;code&gt;lib/XS/Tutorial/One.xs&lt;/code&gt; in there. But checkout what
happened to our &lt;code&gt;rand&lt;/code&gt; xsub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XS_EUPXS(XS_XS__Tutorial__One_rand); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_XS__Tutorial__One_rand)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  &amp;quot;&amp;quot;);
    {
  unsigned int        RETVAL;
  dXSTARG;

  RETVAL = rand();
  XSprePUSH; PUSHu((UV)RETVAL);
    }
    XSRETURN(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;xsubpp&lt;/code&gt; has replaced our XS code with some rather ugly C macros! These macros
are part of the Perl interpreter&amp;rsquo;s C API. Many are documented in &lt;a href=&#34;https://perldoc.perl.org/perlapi.html&#34;&gt;perlapi&lt;/a&gt;
and they are usually defined in &lt;code&gt;XSUB.h&lt;/code&gt; or &lt;code&gt;perl.h&lt;/code&gt; in the Perl source code.&lt;/p&gt;

&lt;p&gt;So what are these macros doing? At a high level, &lt;code&gt;dVAR&lt;/code&gt; and &lt;code&gt;dXSARGS&lt;/code&gt; setup
the global pointer stack and some local variables. &lt;code&gt;items&lt;/code&gt; is a count of the
arguments supplied to the xsub. As &lt;code&gt;rand&lt;/code&gt; is a void function, if this isn&amp;rsquo;t
zero, it croaks. &lt;code&gt;croak_xs_usage&lt;/code&gt; takes a coderef and an args string. In this
context &lt;code&gt;cv&lt;/code&gt; is the xsub, and there are no args so the string is empty.&lt;/p&gt;

&lt;p&gt;Next the code declares &lt;code&gt;RETVAL&lt;/code&gt;, the return value of the xsub. &lt;code&gt;dXTARG&lt;/code&gt;
initializes the &lt;code&gt;TARG&lt;/code&gt; pointer. Next &lt;code&gt;rand()&lt;/code&gt; is called its return value
assigned to &lt;code&gt;RETVAL&lt;/code&gt;. &lt;code&gt;XSprePUSH&lt;/code&gt; moves the stack pointer back one,
and &lt;code&gt;PUSHu&lt;/code&gt; copies &lt;code&gt;RETVAL&lt;/code&gt; into &lt;code&gt;TARG&lt;/code&gt; and pushes it onto the global stack
pointer. &lt;code&gt;XSRETURN&lt;/code&gt; returns from the xsub, indicating how many arguments it
added to the stack, which in this case, is one.&lt;/p&gt;

&lt;p&gt;Writing XS, you usually don&amp;rsquo;t need to study the generated C code, but it&amp;rsquo;s
helpful to have an awareness of the process.&lt;/p&gt;

&lt;h3 id=&#34;installing&#34;&gt;Installing&lt;/h3&gt;

&lt;p&gt;Now the code is compiled, install it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re using system Perl, you may need to use &lt;code&gt;sudo&lt;/code&gt; to install. Now we can
test the module using a one liner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MXS::Tutorial::One -E &#39;say XS::Tutorial::One::rand()&#39;
1804289383
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works! Did you try running it twice though?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MXS::Tutorial::One -E &#39;say XS::Tutorial::One::rand()&#39;
1804289383
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get the same pseudorandom sequence each time&amp;hellip; We need to call &lt;code&gt;srand&lt;/code&gt; to
seed the sequence. That function is already provided by &lt;code&gt;stdlib.h&lt;/code&gt;, so all we
need to do is append the following text to &lt;code&gt;lib/XS/Tutorial/One.xs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void
srand(seed)
  unsigned int seed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This xsub is different to the first one: its return type is &lt;code&gt;void&lt;/code&gt; which
means it returns nothing. It also includes a parameter called &lt;code&gt;seed&lt;/code&gt; in its
signature, and the last line defines it as an unsigned int.&lt;/p&gt;

&lt;p&gt;Rebuild and install the distribution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can seed the pseudorandom sequence by calling &lt;code&gt;srand&lt;/code&gt; before &lt;code&gt;rand&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MXS::Tutorial::One -E &#39;XS::Tutorial::One::srand(777);\
say XS::Tutorial::One::rand()&#39;
947371799
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We used a lucky (777) seed number, and &lt;code&gt;rand&lt;/code&gt; emitted a different number, yay!&lt;/p&gt;

&lt;h3 id=&#34;did-we-beat-perl&#34;&gt;Did we beat Perl?&lt;/h3&gt;

&lt;p&gt;As you know by now, xsubs are often faster than pure Perl code. We&amp;rsquo;ve built two
xsubs for &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;srand&lt;/code&gt;, which are also available as built-in functions
in Perl. Do you think the xsubs are faster? Here&amp;rsquo;s a benchmark from my machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;              Rate xs_rand bi_rand
xs_rand 15691577/s      --    -64%
bi_rand 43095739/s    175%      --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no! Despite our &lt;code&gt;rand&lt;/code&gt; xsub directly calling the C &lt;code&gt;stdlib&lt;/code&gt; function, it&amp;rsquo;s
miles slower than Perl&amp;rsquo;s built-in &lt;code&gt;rand&lt;/code&gt;. This isn&amp;rsquo;t because xsubs are slow,
rather that Perl&amp;rsquo;s built-in functions are really fast. There is an overhead
associated with calling xsubs which built-in functions do not pay.&lt;/p&gt;

&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;

&lt;p&gt;Instead of running one liners to check our code works, we can write unit tests.
Here&amp;rsquo;s a basic script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
use Test::More;

BEGIN { use_ok &#39;XS::Tutorial::One&#39; }

ok my $rand = XS::Tutorial::One::rand(), &#39;rand()&#39;;
like $rand, qr/^\d+$/, &#39;rand() returns a number&#39;;

ok !defined XS::Tutorial::One::srand(5), &#39;srand()&#39;;
ok $rand ne XS::Tutorial::One::rand(), &#39;after srand, rand returns different number&#39;;
done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this file as &lt;code&gt;t/one.t&lt;/code&gt;. Assuming you built and installed the distribution
already, you can just do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl t/one.t
ok 1 - use XS::Tutorial::One;
ok 2 - rand()
ok 3 - rand() returns a number
ok 4 - srand()
ok 5 - after srand, rand returns different number
1..5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when building the distribution in the future, you should do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl Makefile.PL &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will rebuild and test the distribution. Because XS code is compiled,
writing tests and using that one liner, you can quickly cycle through coding
and testing.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to add Test::More to the &lt;code&gt;PREREQ_PM&lt;/code&gt; entry in &lt;code&gt;Makefile.PL&lt;/code&gt;. When
you don&amp;rsquo;t have a specific minimum version, you can just use 0:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREREQ_PM =&amp;gt; { &#39;Test::More&#39; =&amp;gt; 0, &#39;ExtUtils::MakeMaker&#39; =&amp;gt; &#39;7.12&#39; },
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;Building distributions generates a lot of temporary files. ExtUtils::MakeMaker
provides a realclean routine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make realclean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will delete all the build files and reset the working directory to normal.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This article and code are on CPAN as &lt;a href=&#34;https://metacpan.org/pod/XS::Tutorial::One&#34;&gt;XS::Tutorial::One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XS Mechanics by Steven W. McDougall is my second favorite :) XS &lt;a href=&#34;http://world.std.com/~swmcd/steven/perl/pm/xs/intro/&#34;&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlxs.html&#34;&gt;perlxs&lt;/a&gt; defines the keywords recognized by &lt;a href=&#34;https://perldoc.perl.org/xsubpp.html&#34;&gt;xsubpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlapi.html&#34;&gt;perlapi&lt;/a&gt; : C macros used to interact with Perl data structures (and the interpreter)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/&#34;&gt;stdlib.h&lt;/a&gt; man page defines the C standard library functions and types&lt;/li&gt;
&lt;li&gt;For writing Makefile.PL files: ExtUtils::MakeMaker &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;docs&lt;/a&gt; are invaluable&lt;/li&gt;
&lt;li&gt;Perl&amp;rsquo;s built-in &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; and &lt;a href=&#34;https://perldoc.perl.org/functions/srand.html&#34;&gt;srand&lt;/a&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

