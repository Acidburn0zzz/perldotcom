<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pull Request on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pull-request/</link>
    <description>Recent content in Pull Request on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Feb 2018 23:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/pull-request/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setup your computer for CPAN-PRC</title>
      <link>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</link>
      <pubDate>Wed, 21 Feb 2018 23:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</guid>
      <description>

&lt;p&gt;Earlier I wrote about &lt;a href=&#34;http://localhost:1313/article/why-should-you-join-cpan-prc/&#34;&gt;why should you join CPAN Pull Request Challenge&lt;/a&gt;. Now I will explain how to get your computer ready to work on your assignment. You can grab a Docker image and start hacking right away, or you can install everything you need on your computer.&lt;/p&gt;

&lt;h3 id=&#34;option-1-the-docker-way&#34;&gt;Option 1: The Docker Way&lt;/h3&gt;

&lt;p&gt;By using a Docker image that has everything you need, you can start working in minutes.&lt;/p&gt;

&lt;h4 id=&#34;1-install-docker&#34;&gt;1: Install Docker&lt;/h4&gt;

&lt;p&gt;On Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, see the instructions for &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;2-fork-clone-the-repo&#34;&gt;2: Fork &amp;amp; clone the repo&lt;/h4&gt;

&lt;p&gt;Now you need to fork and clone the Github repository you were assigned for the PRC. For example, I created this &lt;a href=&#34;https://github.com/kyzn/App-p&#34;&gt;fork&lt;/a&gt;, and can clone it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/App-p ~/Desktop/App-p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-run-docker&#34;&gt;3: Run Docker&lt;/h4&gt;

&lt;p&gt;I have prepared a docker &lt;a href=&#34;https://github.com/kyzn/perlbrew-prc-dockerimage&#34;&gt;image&lt;/a&gt; which comes with a stable version of Perl, &lt;a href=&#34;https://metacpan.org/pod/App::perlbrew&#34;&gt;perlbrew&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt;, all pre-installed.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I would run docker on the repo I cloned in step 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -v ~/Desktop/App-p:/App-p -it kyzn/perlbrew-prc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/Desktop/App-p&lt;/code&gt; is the local path to the repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/App-p&lt;/code&gt; is the path of the directory inside the Docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will launch an Ubuntu image as root user, mounting the repository to &lt;code&gt;/App-p&lt;/code&gt;. Git is installed, but you need to use your local (non-Docker) terminal to pull/push. The text editors nano, vim, and emacs are installed in the image as well. You can also use your local text editor.&lt;/p&gt;

&lt;h4 id=&#34;building-a-docker-image&#34;&gt;Building a Docker Image&lt;/h4&gt;

&lt;p&gt;Alternatively, you can build the docker image by hand. Note that this will take some time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/perlbrew-prc-dockerimage
$ cd perlbrew-prc-dockerimage
$ docker build -t kyzn/perlbrew-prc:my_build .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use the same &lt;code&gt;docker run&lt;/code&gt; command with your own &lt;code&gt;my_build&lt;/code&gt; tag.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;option-2-the-local-way&#34;&gt;Option 2: The Local Way&lt;/h3&gt;

&lt;p&gt;You can install the same tools to your computer; I&amp;rsquo;ve prepared instructions for macOS and Ubuntu. This usually takes about one to two hours.&lt;/p&gt;

&lt;h4 id=&#34;notes-for-macos-users&#34;&gt;Notes for macOS users&lt;/h4&gt;

&lt;p&gt;Perl, during its installation, will ask for permission for incoming network connections. Denying that request doesn&amp;rsquo;t break anything for CPAN-PRC purposes.&lt;/p&gt;

&lt;p&gt;Installing modules via &lt;code&gt;cpanm&lt;/code&gt; might give you a permission error. In the terminal, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R $USER:staff ~/.cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command changes the owner of the cpanm folder, which usually fixes the issue.&lt;/p&gt;

&lt;p&gt;You need to install homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-install-perlbrew&#34;&gt;1: Install Perlbrew&lt;/h4&gt;

&lt;p&gt;Most systems come with a certain version of Perl installed. Yet it is often recommended not to tamper system Perl, as applications depend on its state. That&amp;rsquo;s why we want to install a separate Perl for development purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://install.perlbrew.pl | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s done, it will ask you to add &lt;code&gt;source ~/perl5/perlbrew/etc/bashrc&lt;/code&gt; to your &lt;code&gt;~/.bashrc&lt;/code&gt;. You should do as instructed right away.&lt;/p&gt;

&lt;h4 id=&#34;2-install-perl&#34;&gt;2: Install Perl&lt;/h4&gt;

&lt;p&gt;Now that we have Perlbrew in place, we can go ahead and install a Perl on our own, keeping system Perl alone. I am going to suggest installing latest stable-version. You may run &lt;code&gt;perlbrew available&lt;/code&gt; to see most common versions. Note that this will take a while.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install -j 4 stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two ways to use a Perl version with Perlbrew: &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt;. &lt;code&gt;use&lt;/code&gt; is temporary, it goes away once you close the terminal. That&amp;rsquo;s why I recommend &lt;code&gt;switch&lt;/code&gt;, which will make it permanent. Change the version to the one you just installed. You can run &lt;code&gt;perlbrew list&lt;/code&gt; to see installed versions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew switch $(perlbrew list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure switch worked, check your Perl version in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-install-cpanm&#34;&gt;3: Install cpanm&lt;/h4&gt;

&lt;p&gt;This is a &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;script&lt;/a&gt; that will help you install CPAN modules. There already is a client installed, called &lt;code&gt;cpan&lt;/code&gt;. But, &lt;code&gt;cpan&lt;/code&gt; requires configuration and is more verbose and slower than &lt;code&gt;cpanm&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install-cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be sure you&amp;rsquo;re using the perlbrew installed cpanm, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which cpanm | grep perlbrew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the terminal displays any matching output, it worked.&lt;/p&gt;

&lt;h4 id=&#34;4-install-dzil&#34;&gt;4: Install dzil&lt;/h4&gt;

&lt;p&gt;Many CPAN authors use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt; to build and release their modules. The chances of your PRC assignment having a dist.ini file (dzil configuration) are high.&lt;/p&gt;

&lt;p&gt;First you need to install a non-Perl dependency, openssl. On macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install Dist::Zilla with cpanm. Note that this will take a while, as it has a lot of dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Dist::Zilla
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-install-reply-optional&#34;&gt;5: Install reply (optional)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;reply&lt;/code&gt; is a nice interactive shell that lets you play around.&lt;/p&gt;

&lt;p&gt;Ubuntu users will need to install these missing dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libncurses5-dev libreadline-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install &lt;code&gt;reply&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Term::ReadLine::Gnu Reply
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Now you are ready to work on your assignment! Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why should you join CPAN-PRC?</title>
      <link>http://localhost:1313/article/why-should-you-join-cpan-prc/</link>
      <pubDate>Thu, 25 Jan 2018 09:23:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/why-should-you-join-cpan-prc/</guid>
      <description>

&lt;p&gt;The CPAN Pull Request Challenge (PRC) aims to improve the quality of code on &lt;a href=&#34;https://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt;, the online archive of Perl modules, by having participants submit pull requests to CPAN module authors.&lt;/p&gt;

&lt;p&gt;Every month participants are assigned a new module to improve, and submit &lt;a href=&#34;https://help.github.com/articles/about-pull-requests/&#34;&gt;pull requests&lt;/a&gt; to the module repo on GitHub. Participants are not competing with each other, rather the &amp;ldquo;challenge&amp;rdquo; is to keep up with your monthly assignments.&lt;/p&gt;

&lt;h3 id=&#34;how-to-sign-up&#34;&gt;How to sign up&lt;/h3&gt;

&lt;p&gt;You can join as an individual or as a team. A team could be your company, you and a few friends, or your local Perl Mongers group.&lt;/p&gt;

&lt;p&gt;Simply email Neil Bowers (&amp;ldquo;neil at bowers dot com&amp;rdquo;) your GitHub username and PAUSE ID if you have one, or if joining as a group, your GitHub organization name. Tell him you want to join the challenge, and you are in!&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Once per month, you will receive an email noting your assigned distribution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-assignment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can fix a failing test, fix an issue, correct a typo, any kind of improvement. If you&amp;rsquo;re not sure where to start, there are services on top of CPAN that can help identify issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpantesters.org/&#34;&gt;CPAN Testers&lt;/a&gt; is a Continuous Integration service that often identifies issues with failing tests and/or platform specific bugs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rt.cpan.org/&#34;&gt;Request Tracker&lt;/a&gt; is the default bug tracker for CPAN modules (issues may also be listed on GitHub)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpancover.com&#34;&gt;CPAN Cover&lt;/a&gt; reports on code coverage for tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpants.cpanauthors.org/&#34;&gt;CPANTS&lt;/a&gt; is a &amp;ldquo;kwalitee&amp;rdquo; assessment tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good place to start is &lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan&lt;/a&gt;, a CPAN search engine which links to all of the above services. Scan through the module documentation and related information, to try and find things that need fixing or enhancing.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified the changes you&amp;rsquo;d like to make, fork the module on GitHub, commit your changes and open a pull request with the new changes. Then reply to your assignment email saying &amp;ldquo;It&amp;rsquo;s done!&amp;rdquo;, and link to your pull requests on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Although it&amp;rsquo;s better to do your assignments every month, you may not be willing to commit to it, and that is fine! If something comes up, you can skip a month. If you need more time for a module, you can stick to your assignment for longer. There&amp;rsquo;s a solution as long as you want to keep participating.&lt;/p&gt;

&lt;h3 id=&#34;why-join&#34;&gt;Why join?&lt;/h3&gt;

&lt;p&gt;One reason is that this year might be your &lt;a href=&#34;http://neilb.org/2018/01/01/cpan-prc-2018.html&#34;&gt;last chance!&lt;/a&gt; It may &lt;a href=&#34;http://neilb.org/2018/01/06/what-after-prc.html&#34;&gt;evolve&lt;/a&gt;, but this will most likely be the &lt;strong&gt;last year&lt;/strong&gt; you can get a CPAN module assignment.&lt;/p&gt;

&lt;p&gt;I joined this challenge &lt;a href=&#34;https://kyzn.org/2015-01-17-cpan-pr-challenge-012015.html&#34;&gt;in 2015&lt;/a&gt; when I was still at college. It motivated me to read other people&amp;rsquo;s code, even though I had a hard time understanding it. It also taught me a lot about the Open Source ecosystem. I did 4 assignments in 2015, another 4 in 2016, and doubled to 8 in 2017. I am also part of &lt;a href=&#34;https://github.com/ziprecruiter&#34;&gt;Team-ZipRecruiter&lt;/a&gt;, which has been participating since April 2017. It really is fun!&lt;/p&gt;

&lt;p&gt;If you are looking for more reasons, here are few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a great way to study &amp;ldquo;production ready&amp;rdquo; code and communicate with fellow programmers&lt;/li&gt;
&lt;li&gt;You can contribute to open source code, support Perl and build your resume&lt;/li&gt;
&lt;li&gt;Assignments introduce you to code on CPAN that you otherwise might have missed&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re part of a group it could be a fun team-building event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds interesting? Then send an email to Neil (&amp;ldquo;neil at bowers dot com&amp;rdquo;) with your GitHub username!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-merged.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest is here</title>
      <link>http://localhost:1313/article/hacktoberfest-is-here/</link>
      <pubDate>Sun, 02 Oct 2016 10:51:01 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-is-here/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; is here, and you can be part of the effort to make Perl the most popular language in the month long festival of patches and pull requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/&#34;&gt;GitHub&lt;/a&gt; have teamed up to encourage new users to participate in open source. Make four pull requests to any GitHub project and they&amp;rsquo;ll give you a limited-edition Hacktoberfest t-shirt. It might not sound like much, but consider what you get besides the shirt: you&amp;rsquo;re in the commit logs of four projects and your profile has some history. That&amp;rsquo;s the first step in building your open source résumé.&lt;/p&gt;

&lt;p&gt;The sponsors suggest that projects that want to participate label their issues with &amp;ldquo;Hacktoberfest&amp;rdquo;. That&amp;rsquo;s not strictly necessary, but you can &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;search&lt;/a&gt; for issues that projects think are suitable for new users. I think all of my projects are suitable (I may be optimistic), so I wanted a way to label all of my issues across all of my projects.&lt;/p&gt;

&lt;p&gt;I found out about this as I was building some other GitHub tools. I looked at &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Pithub&#34;&gt;Pithub&lt;/a&gt;, and Marchex&amp;rsquo;s &lt;a href=&#34;https://github.com/marchex/github-api-tools&#34;&gt;github-api-tools&lt;/a&gt; but I wanted to iterate through long lists of paged results and process each item as I received them. The &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub Developer API&lt;/a&gt; is quite nice and even if you are re-inventing the wheel you&amp;rsquo;re learning about wheels, making this a fun night of work.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/examples/hacktoberfest.pl&#34;&gt;hacktoberfest.pl&lt;/a&gt; in my &lt;a href=&#34;https://github.com/briandfoy/ghojo&#34;&gt;ghojo&lt;/a&gt; repo. It will log in, list all of my repos (there are a couple hundred), create the &amp;ldquo;Hacktoberfest&amp;rdquo; label in each, and then apply the label to each open issue.&lt;/p&gt;

&lt;p&gt;The ghojo project is still very much in its infancy (which means there&amp;rsquo;s all sorts of pull request opportunities). But I allow quite a bit of flexibility by accepting a callback for things I expect to return many items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  };

$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each time I find a repo—and you don&amp;rsquo;t have to know how I do that—I run that callback. It&amp;rsquo;s a little bit like &lt;a href=&#34;https://metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt;&amp;rsquo;s use of the &lt;code&gt;wanted&lt;/code&gt; coderef. You don&amp;rsquo;t see the very nice API paging going on either; &lt;code&gt;repos&lt;/code&gt; keeps fetching more results as long as there are more results.&lt;/p&gt;

&lt;p&gt;That callback deals with a repo, but each repo has a list of issues. I want to process this list of issues as I run into them. So what I need is a callback to process a repo with a nested callback for the issues:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.24&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $label_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hacktoberfest&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $user, $repo ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;m{/}&lt;/span&gt;, $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{full_name};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_repo_object( $owner, $repo );

  &lt;span style=&#34;color:#75715e&#34;&gt;# get the labels for that repo&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{ &lt;span style=&#34;color:#e6db74&#34;&gt;qw(name color)&lt;/span&gt; } } $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;labels&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*;&lt;/span&gt;

  unless( exists $labels{$label_name} ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create_label( $label_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff5500&amp;#39;&lt;/span&gt; );
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\tCreated $label_name label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $rc;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
    $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_labels_to_issue( $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{number}, $label_name );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $item;
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $issues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;issues( $callback );

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $repo;
  };


$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Curiously, within a couple of hours of uploading the program, I received my first Hacktoberfest &lt;a href=&#34;https://github.com/briandfoy/ghojo/pull/14&#34;&gt;pull request&lt;/a&gt;. &lt;a href=&#34;https://github.com/haydenty&#34;&gt;haydenty&lt;/a&gt; added the &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file to my ghojo repo. It&amp;rsquo;s something I&amp;rsquo;ve been meaning to add to all of my repos. Now I&amp;rsquo;m considering adding an issue to each repo to note that and label each one &amp;ldquo;Hacktoberfest&amp;rdquo;. Or someone who wants to get started with something simple can create the issues for me, or send the pull requests right off.&lt;/p&gt;

&lt;p&gt;If you have lots of repos, label your issues to help push Perl up in &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;the rankings&lt;/a&gt;. By the time we reach the end of the month, I&amp;rsquo;ll have a program to reverse the labeling.&lt;/p&gt;

&lt;p&gt;Some of this I&amp;rsquo;m doing for fun, and some of this I&amp;rsquo;m doing because some organizations want better GitHub tools. Somehow how October is when all of that is coming together. If you&amp;rsquo;d like me to work on this sort of stuff for you, &lt;a href=&#34;mailto:brian.d.foy@gmail.com&#34;&gt;let me know&lt;/a&gt;! But submit those pull requests first so you get that t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

