<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Email on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/email/</link>
    <description>Recent content in Email on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Sep 2015 11:46:46 +0000</lastBuildDate>
    <atom:link href="/tags/email/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to send verification emails using Mojolicious</title>
      <link>http://localhost:1313/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</link>
      <pubDate>Fri, 18 Sep 2015 11:46:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</guid>
      <description>

&lt;p&gt;Everyone has signed up for a website which confirms your email address by sending you a verification email. This is a simple process: if you can respond to this email, you must have access to the email address. Yet for its simplicity, writing such a system might not seem as easy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example. I&amp;rsquo;m going to use &lt;a href=&#34;http://mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt; since it is the web framework that I prefer (and contribute to) but also since its ecosystem is suited to this task. If you&amp;rsquo;d like to follow along as I go, check out the finished &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;user-storage&#34;&gt;User Storage&lt;/h3&gt;

&lt;p&gt;The example application is going to need a persistent mechanism to store user information. A tool I reach for in examples and prototyping is &lt;a href=&#34;https://metacpan.org/pod/DBM::Deep&#34;&gt;DBM::Deep&lt;/a&gt;. It is a file-backed system for storing Perl data structures. To use it, simply create an instance (or &lt;code&gt;tie&lt;/code&gt; one) and use it as a hash reference (array references are possible too); any changes will be saved automagically!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DBM::Deep&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filename.db&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll store this object in a helper, named &lt;code&gt;users&lt;/code&gt;. In Mojolicious, a helper is a subroutine that can be called as a method on a controller instance or the app itself, or called as a function in a template. They are often used for linkages between application and business or model logic, though here it is providing database access. When the time comes to need access to user data, say from a controller instance &lt;code&gt;$c&lt;/code&gt;, it is as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And likewise to create a user, simply assign to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  email     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $email,
  password  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt($password),
  confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More fields would be stored in a more complete app but this is all that is needed for this example.&lt;/p&gt;

&lt;h3 id=&#34;password-encryption&#34;&gt;Password encryption&lt;/h3&gt;

&lt;p&gt;I use an encryption called &lt;code&gt;bcrypt&lt;/code&gt; to store the password. &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Bcrypt&#34;&gt;Mojolicious::Plugin::Bcrypt&lt;/a&gt; is a handy plugin to use Bcrypt encryption with Mojolicious; you load it by simply writing &lt;code&gt;plugin &#39;Bcrypt&#39;;&lt;/code&gt;. This plugin provides two helpers, &lt;code&gt;bcrypt&lt;/code&gt; for encryption and &lt;code&gt;bcrypt_validate&lt;/code&gt; for checking that another value is valid.&lt;/p&gt;

&lt;p&gt;Bcrypt is one of many hashing algorithms with properties that are useful for security. There is no &lt;code&gt;decrypt&lt;/code&gt; function, since this is a one-way algorithm. When validating the password, the best you can know is that if some future input hashes to the same result then it must have been the original password. Storing passwords in this way is good because if a hacker gets database access, they don&amp;rsquo;t get the passwords, just the hashes; they can&amp;rsquo;t be leaked because you simply don&amp;rsquo;t have them.&lt;/p&gt;

&lt;h3 id=&#34;sending-an-email&#34;&gt;Sending an email&lt;/h3&gt;

&lt;p&gt;CPAN is replete with modules which can send email. For this example I employ &lt;a href=&#34;https://metacpan.org/pod/Email::Sender&#34;&gt;Email::Sender&lt;/a&gt;, which is the current recommended module (for &lt;a href=&#34;http://shadow.cat/blog/matt-s-trout/mstpan-15/&#34;&gt;example&lt;/a&gt;). Written by our reigning Perl Pumpking Ricardo Signes, this module makes it very easy to send email.&lt;/p&gt;

&lt;p&gt;The app declares a helper to send an email, cleverly called &lt;code&gt;send_email&lt;/code&gt; which takes a target email address, a subject, and a body.&lt;/p&gt;

&lt;p&gt;A nice feature of Email::Sender is that you can specify &lt;a href=&#34;https://metacpan.org/pod/Email::Sender::Manual::QuickStart#specifying-transport-in-the-environment&#34;&gt;transport via the environment&lt;/a&gt;. For prototyping purposes, by setting an environment variable, the email is &amp;ldquo;sent&amp;rdquo; to the terminal. Meanwhile, the Mojolicious &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Command/eval&#34;&gt;eval&lt;/a&gt; command is a handy way to perform one-line scripts with your app. If I combine these features together, I can see what the resulting email would look like with a one liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EMAIL_SENDER_TRANSPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Print &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app-&amp;gt;send_email(q[me@spam.org], &amp;#34;Care for some SPAM?&amp;#34;, &amp;#34;Well how about it?&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;the-email-body&#34;&gt;The email body&lt;/h3&gt;

&lt;p&gt;Now that the app can send an email, what should it send? Remember that I would like to send an email with a hyperlink that the user can click to confirm their registration. The hyperlink URL needs to be able to identify the transaction, but since it is being sent in clear text it is important to know that the contents haven&amp;rsquo;t been tampered with. A &lt;a href=&#34;http://jwt.io/&#34;&gt;JSON Web Token&lt;/a&gt;, or JWT, lets you store a data structure as a url-safe string and sign it so that you can be sure that it isn&amp;rsquo;t altered.&lt;/p&gt;

&lt;p&gt;Since the user won&amp;rsquo;t be logged in, I need some other way to know which username to confirm! In this example the JWT payload is only going to contain the username, sent on a round trip to the client&amp;rsquo;s email.&lt;/p&gt;

&lt;p&gt;If instead the app were sending a password reset token I would also want to include a timeout on the JWT to prevent replay attacks. For a simple confirmation though that is probably not necessary.&lt;/p&gt;

&lt;p&gt;I create a helper which initializes an instance of &lt;a href=&#34;https://metacpan.org/pod/Mojo::JWT&#34;&gt;Mojo::JWT&lt;/a&gt; and uses the application&amp;rsquo;s primary &lt;a href=&#34;https://metacpan.org/pod/Mojolicious#secrets&#34;&gt;secret&lt;/a&gt; as its secret. The JWT can also use some other secret, but this is convenient. Note that the example app uses the default set of secrets, but yours should change it to something only you know.&lt;/p&gt;

&lt;p&gt;To create the confirmation URL, the app first sets the claims and encodes to a JWT encoded string containing the data structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;claims({username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username})&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then it generates a URL to the &amp;ldquo;confirm&amp;rdquo; route, makes it absolute, and appends the query/value pair to the end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_abs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;query(jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $jwt);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Later when the URL is clicked, the app can retrieve the username from the JWT encoded query parameter like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if the JWT (contained in the query parameter) doesn&amp;rsquo;t pass validation on decoding, an exception is thrown; this way you know that if the code succeeds the JWT hasn&amp;rsquo;t been tampered with.&lt;/p&gt;

&lt;p&gt;From there it is a simple matter to mark the user&amp;rsquo;s account as confirmed.&lt;/p&gt;

&lt;h3 id=&#34;the-job-queue&#34;&gt;The job queue&lt;/h3&gt;

&lt;p&gt;Many tasks that happen as a result of a web request can be quite slow. Sending email is often a slow process and I don&amp;rsquo;t want to slow down the server in order to add email functionality. Mojolicious employs a non-blocking ioloop internally for performance and one thing you never want to do is block the loop for long periods of time.&lt;/p&gt;

&lt;p&gt;A job queue is a system by which you can push the actual work of doing slow work onto another process. Typically a job queue functions by inserting a record into a database indicating which task is to be done and parameters to be passed to it. The job worker then knows how to perform that task and watches the database until a job needs doing.&lt;/p&gt;

&lt;p&gt;Mojolicious has a job queue spinoff project, named &lt;a href=&#34;https://metacpan.org/pod/Minion&#34;&gt;Minion&lt;/a&gt;. It is the perfect tool for sending email from a job worker to keep the site responsive. Minion ships with a Postgres backend but for this example I will be using the SQLite backend from CPAN. &lt;em&gt;(N.B an earlier version of this article used a file backend that has since been removed).&lt;/em&gt; The task is declared as a subroutine reference to &lt;code&gt;add_task&lt;/code&gt; and later jobs can be created by &lt;code&gt;enqueue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The app declares a task, called &lt;code&gt;email_task&lt;/code&gt; which is a wrapper for the &lt;code&gt;send_email&lt;/code&gt; helper. It also declare a helper named &lt;code&gt;email&lt;/code&gt;, a nicely Huffmanized name, which enqueues the job (and takes the same arguments). (I&amp;rsquo;ve called the task &lt;code&gt;email_task&lt;/code&gt; to make it clear where that name is used; it could as easily simply have been called &lt;code&gt;email&lt;/code&gt;, but I didn&amp;rsquo;t want the name to be confused with the helper).&lt;/p&gt;

&lt;p&gt;This helper then is all that is needed to send an email via a job worker, well that and a worker. While prototyping, it is handy to start a worker in another terminal by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EMAIL_SENDER_TRANSPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Print &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion worker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again by setting the transport to &lt;code&gt;Print&lt;/code&gt;, the result will be output in the terminal. The progress of the job can then be tracked via the &lt;code&gt;minion&lt;/code&gt; command as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;myapp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion job
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;myapp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion job &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;id&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;The rest of the web application is a fairly standard Mojolicious app. One thing that I employ is a helper that redirects to the landing (index) page and optionally accepts a message to be displayed after redirect. This message is called a &amp;ldquo;flash&amp;rdquo; message and is stored in the session cookie, valid only on the next request. Using this helper I can easily start the sign-in/sign-up cycle again and tell the user what happened, good or bad. Because setters in Mojolicious are chainable, the helper is simply:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;helper to_index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;flash(message &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect_to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;) };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the template, if the flash message is defined from the previous request, it is used otherwise a default is presented&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; flash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign in or sign up!&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then if the username is already taken, for example, I can stop processing immediately by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username is taken&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you know how the pieces work, check out the final &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;, or have a look below. Happy Perling!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DBM::Deep;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JWT;

plugin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bcrypt&amp;#39;&lt;/span&gt;;
plugin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Minion&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {SQLite &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minion.db&amp;#39;&lt;/span&gt;};

helper users &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { state $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DBM::Deep&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;users.db&amp;#39;&lt;/span&gt;) };

helper send_email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($c, $address, $subject, $body) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Email::Simple;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Email::Sender::Simple;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Email::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create(
    header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
      To      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $address,
      From    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;me@nobody.com&amp;#39;&lt;/span&gt;,
      Subject &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $subject,
    ],
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $body,
  );
  Email::Sender::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send($email);
};

helper jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { Mojo::JWT&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(secret &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secrets&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die) };

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;minion&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_task(email_task &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send_email(@_) });

helper email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;minion&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enqueue(email_task &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [@_]) };

helper to_index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;flash(message &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect_to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;) };

any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logged_in&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
} &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;;

any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(expires &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index };

post &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sign_in&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username not found&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username has not been confirmed&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{confirmed};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password not correct&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt_validate($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password});

  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index;
};

post &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sign_up&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username is taken&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password cannot be blank&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Email cannot be blank&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;);

  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    email     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $email,
    password  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt($password),
    confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  };
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;claims({username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username})&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_abs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;query(jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $jwt);
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;email($email, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Confirm registration&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please visit $url to confirm&amp;#34;&lt;/span&gt;);
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registration complete, please confirm via email&amp;#39;&lt;/span&gt;);
};

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/confirm&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username}{confirmed} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registration confirmed, please log in&amp;#39;&lt;/span&gt;);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;

__DATA__

@@ index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ep

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello Guest&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; flash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign in or sign up!&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; form_for sign_in &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; begin
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Username&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; text_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;

  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; password_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;

  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; email_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;, placeholder &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign up only&amp;#39;&lt;/span&gt;

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; submit_button &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign In&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; submit_button &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign Up&amp;#39;&lt;/span&gt;, formaction &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign_up&amp;#39;&lt;/span&gt;)
% end

@@ logged_in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ep

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome back &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; session &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;!&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; link_to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Log out&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s New on CPAN - March 2015</title>
      <link>http://localhost:1313/article/168/2015/4/7/What-s-New-on-CPAN---March-2015/</link>
      <pubDate>Tue, 07 Apr 2015 05:48:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/168/2015/4/7/What-s-New-on-CPAN---March-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Spring is upon us, and has brought us not only warmer weather, but a bumper cache of new Perl modules. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Rapi::Fs&#34;&gt;Rapi::Fs&lt;/a&gt; by Henry Van Styn is a ExtJS file browser for PSGI-compatible web applications. It&amp;rsquo;s built on top of &lt;a href=&#34;http://www.rapidapp.info/&#34;&gt;RapidApp&lt;/a&gt;, the Catalyst-based, development application.&lt;/p&gt;

&lt;p&gt;The Rapi::FS distribution does many things well: it performs a useful purpose, it&amp;rsquo;s convenient to install and use, has excellent documentation including its own stylish webpage with a slick &lt;a href=&#34;http://rapi.io/fs/&#34;&gt;demo&lt;/a&gt;. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::GitWorkspaceScanner&#34;&gt;App::GitWorkspaceScanner&lt;/a&gt; looks useful, it detects and reports on Git repositories with local changes.&lt;/li&gt;
&lt;li&gt;Looking for a command line JSON converter? Check out &lt;a href=&#34;https://metacpan.org/pod/App::JSON::to&#34;&gt;json-to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PureProxy&#34;&gt;App::PureProxy&lt;/a&gt; is a simple proxy server written in Perl&lt;/li&gt;
&lt;li&gt;Retrieve US Census Bureau geo data using &lt;a href=&#34;https://metacpan.org/pod/Geo::USCensus::Geocoding&#34;&gt;Geo::USCensus::Geocoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::VirtPerl&#34;&gt;App::VirtPerl&lt;/a&gt; lets you use multiple versions of Perl modules with a single Perl install&lt;/li&gt;
&lt;li&gt;Execute shell commands triggered by watched files with &lt;a href=&#34;https://metacpan.org/pod/App::watchdo&#34;&gt;App::watchdo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Interact with Liquid Web&amp;rsquo;s API using &lt;a href=&#34;https://metacpan.org/pod/LiquidWeb::Storm::CLI&#34;&gt;LiquidWeb::Storm::CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::OpenStack::Swift&#34;&gt;Net::OpenStack::Swift&lt;/a&gt; provides Perl Bindings for the OpenStack Object Storage API, (aka Swift)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Presto&#34;&gt;Net::Presto&lt;/a&gt; provides an API for Presto, the distributed SQL query engine&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Speechmatics&#34;&gt;WebService::Speechmatics&lt;/a&gt; implements an API for Speechmatics, an audio-to-text translator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Read multiline INI files with &lt;a href=&#34;https://metacpan.org/pod/Config::INI::Reader::Multiline&#34;&gt;Config::INI::Reader::Multiline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Hotfolder&#34;&gt;File::Hotfolder&lt;/a&gt; monitors a directory for file changes and executes a sub&lt;/li&gt;
&lt;li&gt;Useful for release docs, &lt;a href=&#34;https://metacpan.org/pod/Git::Mailmap&#34;&gt;Git::Mailmap&lt;/a&gt; is a Perl implementation of Git mailmap and can read/write mailmap files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HADaemon::Control&#34;&gt;HADaemon::Control&lt;/a&gt; makes it easy to create high availability, fault tolerant daemons.&lt;/li&gt;
&lt;li&gt;Monitor Apache Tomcat instances with &lt;a href=&#34;https://metacpan.org/pod/Net::Tomcat&#34;&gt;Net::Tomcat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::LTSV::Instance&#34;&gt;Log::LTSV::Instance&lt;/a&gt; is an &lt;a href=&#34;http://ltsv.org/&#34;&gt;LTSV&lt;/a&gt; logger&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Report&#34;&gt;DBIx::Class::Report&lt;/a&gt; looks interesting - it returns DBIx::Class resultsets from raw SQL strings&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bit::Fast&#34;&gt;Bit::Fast&lt;/a&gt; aims to provide superfast bit manipulation routines&lt;/li&gt;
&lt;li&gt;Like a production line, &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Factory&#34;&gt;DBIx::Class::Factory&lt;/a&gt; can efficiently create data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::RetryConnect&#34;&gt;DBIx::RetryConnect&lt;/a&gt; will auto-retry to connect to a database upon failure, with a growing delay between each re-connection attempt.&lt;/li&gt;
&lt;li&gt;Convert ICal files into RDF graphs with &lt;a href=&#34;https://metacpan.org/pod/Data::ICal::RDF&#34;&gt;Data::ICal::RDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Imager::Barcode128&#34;&gt;Imager::Barcode128&lt;/a&gt; creates GS1 compliant barcodes!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Storage&#34;&gt;Hash::Storage&lt;/a&gt; is a persistent hash storage framework, which already has a DBI implementation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Prefixed&#34;&gt;List::Prefixed&lt;/a&gt; implements a compressed list of string prefixes, looks useful&lt;/li&gt;
&lt;li&gt;Merge sereal files with &lt;a href=&#34;https://metacpan.org/pod/Sereal::Merger&#34;&gt;Sereal::Merger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate Perl version badges for your docs with &lt;a href=&#34;https://metacpan.org/pod/Badge::Depot::Plugin::Perl&#34;&gt;Badge::Depot::Plugin::Perl&lt;/a&gt;. Yay!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::GoFaster&#34;&gt;Devel::GoFaster&lt;/a&gt; makes Perl go faster&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Code::TidyAll::Plugin::PgFormatter&#34;&gt;Code::TidyAll::Plugin::PgFormatter&lt;/a&gt; will tidy Postgres SQL code&lt;/li&gt;
&lt;li&gt;Create a &amp;ldquo;human readable, computer executable&amp;rdquo; resumé with &lt;a href=&#34;https://metacpan.org/pod/Acme::Resume&#34;&gt;Acme::Resume&lt;/a&gt;, which generates a Perl package for each resumé&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Lives&#34;&gt;Test::Lives&lt;/a&gt; checks that code doesn&amp;rsquo;t throw an exception&lt;/li&gt;
&lt;li&gt;Operate a virtual terminal with &lt;a href=&#34;https://metacpan.org/pod/Term::VTerm&#34;&gt;Term::VTerm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Attach::Stuff&#34;&gt;Attach::Stuff&lt;/a&gt; makes it easier to design board component architectures&lt;/li&gt;
&lt;li&gt;Send telnet-enabling packets to Netgear routers using &lt;a href=&#34;https://metacpan.org/pod/Net::Telnet::Netgear&#34;&gt;Net::Telnet::Netgear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Ed25519&#34;&gt;Crypt::Ed25519&lt;/a&gt; implements the Ed25519 public key signing/verification system&lt;/li&gt;
&lt;li&gt;Use the Tiny Implementation Algorithm with &lt;a href=&#34;https://metacpan.org/pod/Crypt::TEA_PP&#34;&gt;Crypt::TEA_PP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Calc::Parser&#34;&gt;Math::Calc::Parser&lt;/a&gt; can parse and evaluate mathematical expressions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::InterpolationCompiler&#34;&gt;Math::InterpolationCompiler&lt;/a&gt; compiles mathematical interpolations into coderefs, for fast querying&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RestrictionDigest&#34;&gt;RestrictionDigest&lt;/a&gt; is: &amp;ldquo;a simulation tool for reducing the genome with one DNA endonuclease or a pair DNA endonucleases&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add Google Plus authentication to your Catalyst app with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication::Credential::GooglePlus&#34;&gt;Catalyst::Plugin::Authentication::Credential::GooglePlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send thousands of emails with &lt;a href=&#34;https://metacpan.org/pod/Email::MIME::Kit::Bulk&#34;&gt;Email::MIME::Kit::Bulk&lt;/a&gt; - a parallel-processing bulk emailer!&lt;/li&gt;
&lt;li&gt;Easy inspect Chrome&amp;rsquo;s HTTP Strict Transport Security preload list with &lt;a href=&#34;https://metacpan.org/pod/HSTS::Preloaded&#34;&gt;HSTS::Preloaded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MIME::Lite::Generator is a memory efficient implementation of MIME::Lite, for generating emails&lt;/li&gt;
&lt;li&gt;Use futures with Mojolicious using &lt;a href=&#34;https://metacpan.org/pod/MojoX::IOLoop::Future&#34;&gt;MojoX::IOLoop::Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Util::Load&#34;&gt;Plack::Util::Load&lt;/a&gt; loads PSGI-compatible web applications from a file, URL or class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Evolution of Perl Email Handling</title>
      <link>http://localhost:1313/pub/2004/06/10/email.html/</link>
      <pubDate>Thu, 10 Jun 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/06/10/email.html/</guid>
      <description>

&lt;p&gt;I spend the vast majority of my time at a computer working with email, whether it&amp;rsquo;s working through the ones I send and receive each day, or working on my interest in analyzing, indexing, organizing, and mining email content. Naturally, Perl helps out with this.&lt;/p&gt;

&lt;p&gt;There are many modules on the CPAN for slicing and dicing email, and we&amp;rsquo;re going to take a whistlestop tour of the major ones. We&amp;rsquo;ll also concentrate on an effort started by myself, Richard Clamp, Simon Wistow, and others, called the Perl Email Project, to produce simple, efficient and accurate mail handling modules.&lt;/p&gt;

&lt;h3 id=&#34;span-id-message-handling-message-handling-span&#34;&gt;&lt;span id=&#34;Message_handling&#34;&gt;Message Handling&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll begin with those modules that represent an individual message, giving you access to the headers and body, and usually allowing you to modify these.&lt;/p&gt;

&lt;p&gt;The granddaddy of these modules is &lt;a href=&#34;https://metacpan.org/pod/Mail::Internet&#34;&gt;&lt;code&gt;Mail::Internet&lt;/code&gt;&lt;/a&gt;, originally created by Graham Barr and now maintained by Mark Overmeer. This module offers a constructor that takes either an array of lines or a filehandle, reads a message, and returns a &lt;code&gt;Mail::Internet&lt;/code&gt; object representing the message. Throughout these examples, we&amp;rsquo;ll use the variable &lt;code&gt;$rfc2822&lt;/code&gt; to represent a mail message as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $obj = Mail::Internet-&amp;gt;new( [ split /\n/, $rfc2822 ] );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Mail::Internet&lt;/code&gt; splits a message into a header object in the &lt;a href=&#34;https://metacpan.org/pod/Mail::Header&#34;&gt;&lt;code&gt;Mail::Header&lt;/code&gt;&lt;/a&gt; class, plus a body. You can get and set individual headers through this object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $subject = $obj-&amp;gt;head-&amp;gt;get(&amp;quot;Subject&amp;quot;);
    $obj-&amp;gt;head-&amp;gt;replace(&amp;quot;Subject&amp;quot;, &amp;quot;New subject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading and editing the body is done through the &lt;code&gt;body&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $old_body = $obj-&amp;gt;body;
    $obj-&amp;gt;body(&amp;quot;Wasn&#39;t worth reading anyway.&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve not said anything about MIME yet. &lt;code&gt;Mail::Internet&lt;/code&gt; is reasonably handy for simple tasks, but it doesn&amp;rsquo;t handle MIME at all. Thankfully, &lt;a href=&#34;https://metacpan.org/pod/MIME::Entity&#34;&gt;&lt;code&gt;MIME::Entity&lt;/code&gt;&lt;/a&gt; is a MIME-aware subclass of &lt;code&gt;Mail::Internet&lt;/code&gt;; it allows you to read individual parts of a MIME message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $num_parts = $obj-&amp;gt;parts;
    for (0..$num_parts) {
        my $part = $obj-&amp;gt;parts($_);
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;Mail::Internet&lt;/code&gt; and &lt;code&gt;MIME::Entity&lt;/code&gt; don&amp;rsquo;t cut it for you, you can try Mark Overmeer&amp;rsquo;s own &lt;a href=&#34;https://metacpan.org/pod/Mail::Message&#34;&gt;&lt;code&gt;Mail::Message&lt;/code&gt;&lt;/a&gt;, part of the impressive &lt;a href=&#34;https://metacpan.org/pod/Mail::Box&#34;&gt;&lt;code&gt;Mail::Box&lt;/code&gt;&lt;/a&gt; suite. &lt;code&gt;Mail::Message&lt;/code&gt; is extremely featureful and comprehensive, but that is not always meant as a compliment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Mail::Message&lt;/code&gt; objects are usually constructed by &lt;code&gt;Mail::Box&lt;/code&gt; as part of reading in an email folder, but can also be generated from an email using the &lt;code&gt;read&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj = Mail::Message-&amp;gt;read($rfc2822);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like &lt;code&gt;Mail::Internet&lt;/code&gt;, messages are split into headers and bodies; unlike &lt;code&gt;Mail::Internet&lt;/code&gt;, the body of a &lt;code&gt;Mail::Message&lt;/code&gt; object is also an object. We read headers like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj-&amp;gt;head-&amp;gt;get(&amp;quot;Subject&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, for &lt;code&gt;Subject&lt;/code&gt; and other common headers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj-&amp;gt;subject;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t find a way to set headers directly, and ended up doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj-&amp;gt;head-&amp;gt;delete($header);
    $obj-&amp;gt;head-&amp;gt;add($header, $_) for @data;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading the body as a string is only marginally more difficult:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj-&amp;gt;decoded-&amp;gt;string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While setting the body is an absolute nightmare&amp;ndash;we have to create a new &lt;code&gt;Mail::Message::Body&lt;/code&gt; object and replace our current one with it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $obj-&amp;gt;body(Mail::Message::Body-&amp;gt;new(data =&amp;gt; [split /\n/, $body]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Mail::Message&lt;/code&gt; may be slow, but it&amp;rsquo;s certainly hard to use. It&amp;rsquo;s also rather complex; the operations we&amp;rsquo;ve looked at so far involved the use of 16 classes (&lt;code&gt;Mail::Address&lt;/code&gt;, &lt;code&gt;Mail::Box::Parser&lt;/code&gt;, &lt;code&gt;Mail::Box::Parser::Perl&lt;/code&gt;, &lt;code&gt;Mail::Message&lt;/code&gt;, &lt;code&gt;Mail::Message::Body&lt;/code&gt;, &lt;code&gt;Mail::Message::Body::File&lt;/code&gt;, &lt;code&gt;Mail::Message::Body::Lines&lt;/code&gt;, &lt;code&gt;Mail::Message::Body::Multipart&lt;/code&gt;, &lt;code&gt;Mail::Message::Body::Nested&lt;/code&gt;, &lt;code&gt;Mail::Message::Construct&lt;/code&gt;, &lt;code&gt;Mail::Message::Field&lt;/code&gt;, &lt;code&gt;Mail::Message::Field::Fast&lt;/code&gt;, &lt;code&gt;Mail::Message::Head&lt;/code&gt;, &lt;code&gt;Mail::Message::Head::Complete&lt;/code&gt;, &lt;code&gt;Mail::Message::Part&lt;/code&gt;, and &lt;code&gt;Mail::Reporter&lt;/code&gt;) and 4400 lines of code. It does have a lot of features, though.&lt;/p&gt;

&lt;p&gt;Foolishly, I thought that email parsing shouldn&amp;rsquo;t be so complex, and so I sat down to write the simplest possible functional mail handling library. The result is &lt;a href=&#34;https://metacpan.org/pod/Email::Simple&#34;&gt;&lt;code&gt;Email::Simple&lt;/code&gt;&lt;/a&gt;, and its interface looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $obj = Email::Simple-&amp;gt;new($rfc2822);
    my $subject = $obj-&amp;gt;header(&amp;quot;Subject&amp;quot;);
    $obj-&amp;gt;header_set(&amp;quot;Subject&amp;quot;, &amp;quot;A new subject&amp;quot;);
    my $old_body = $obj-&amp;gt;body;
    $obj-&amp;gt;body_set(&amp;quot;A new body\n&amp;quot;);
    print $obj-&amp;gt;as_string;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t do a lot, but it does it simply and efficiently. If you need MIME handling, there&amp;rsquo;s a subclass called &lt;a href=&#34;https://metacpan.org/pod/Email::MIME&#34;&gt;&lt;code&gt;Email::MIME&lt;/code&gt;&lt;/a&gt;, which adds the &lt;code&gt;parts&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Realistically, the choice of which mail handling library to use ought to be up to you, the end user, but this isn&amp;rsquo;t always true. Auxilliary modules, which mess about with email at a higher level, can ask for the mail to be presented in a particular representation. For instance, until recently, the wonderful &lt;code&gt;Mail::ListDetector&lt;/code&gt; module, which we&amp;rsquo;ll examine later, required mails passed in to it to be &lt;code&gt;Mail::Internet&lt;/code&gt; objects, since this gave it a known API to work with the objects. I don&amp;rsquo;t want to work with &lt;code&gt;Mail::Internet&lt;/code&gt; objects, but I want to use &lt;code&gt;Mail::ListDetector&lt;/code&gt;&amp;rsquo;s functionality. What can I do?&lt;/p&gt;

&lt;p&gt;In order to enable the user to have the choice again, I wrote an abstraction layer across all of the above modules, called &lt;a href=&#34;https://metacpan.org/pod/Email::Abstract&#34;&gt;&lt;code&gt;Email::Abstract&lt;/code&gt;&lt;/a&gt;. Given any of the above objects, we can say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     my $subject = Email::Abstract-&amp;gt;get_header($obj, &amp;quot;Subject&amp;quot;);
     Email::Abstract-&amp;gt;set_header($obj, &amp;quot;Subject&amp;quot;, &amp;quot;My new subject&amp;quot;);
     my $body = Email::Abstract-&amp;gt;get_body($obj);
     Email::Abstract-&amp;gt;set_body($message, &amp;quot;Hello\nTest message\n&amp;quot;);
     $rfc2822 = Email::Abstract-&amp;gt;as_string($obj);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Email::Abstract&lt;/code&gt; knows how to perform these operations on the major types of mail representation objects. It also abstracts out the process of constructing a message, and allows you to change the interface of a message using the &lt;code&gt;cast&lt;/code&gt; class method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $obj = Email::Abstract-&amp;gt;cast($rfc2822, &amp;quot;Mail::Internet&amp;quot;);
    my $mm = Email::Abstract-&amp;gt;cast($obj, &amp;quot;Mail::Message&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows module authors to write their mail handling libraries in an interface-agnostic way, and I&amp;rsquo;m grateful to Michael Stevens for taking up &lt;code&gt;Email::Abstract&lt;/code&gt; in &lt;code&gt;Mail::ListDetector&lt;/code&gt; so quickly. Now I can pass in &lt;code&gt;Email::Simple&lt;/code&gt; objects to &lt;code&gt;Mail::ListDetector&lt;/code&gt; and it will work fine.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Email::Abstract&lt;/code&gt; also gives us the opportunity to create some benchmarks for all of the above modules. Here was the benchmarking code I used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Email::Abstract;
    my $message = do { local $/; &amp;lt;DATA&amp;gt;; };
    my @classes =
        qw(Email::MIME Email::Simple MIME::Entity Mail::Internet Mail::Message);

    eval &amp;quot;require $_&amp;quot; or die $@ for @classes;

    use Benchmark;
    my %h;
    for my $class (@classes) {
        $h{$class} = sub {
            my $obj = Email::Abstract-&amp;gt;cast($message, $class);
            Email::Abstract-&amp;gt;get_header($obj, &amp;quot;Subject&amp;quot;);
            Email::Abstract-&amp;gt;get_body($obj);
            Email::Abstract-&amp;gt;set_header($obj, &amp;quot;Subject&amp;quot;, &amp;quot;New Subject&amp;quot;);
            Email::Abstract-&amp;gt;set_body($obj, &amp;quot;A completely new body&amp;quot;);
            Email::Abstract-&amp;gt;as_string($obj);
        }
    }
    timethese(1000, \%h);

    __DATA__
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I put a short email in the &lt;code&gt;DATA&lt;/code&gt; section and ran the same simple operations a thousand times: construct a message, read a header, read the body, set the header, set the body, and return the message as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Benchmark: timing 1000 iterations of Email::MIME, Email::Simple, 
    MIME::Entity, Mail::Internet, Mail::Message...
    Email::MIME: 10 wallclock secs ( 7.97 usr +  0.24 sys =  8.21 CPU) 
        @ 121.80/s (n=1000)
    Email::Simple:  9 wallclock secs ( 7.49 usr +  0.05 sys =  7.54 CPU) 
        @ 132.63/s (n=1000)
    MIME::Entity: 33 wallclock secs (23.76 usr +  0.35 sys = 24.11 CPU) 
        @ 41.48/s (n=1000)
    Mail::Internet: 24 wallclock secs (17.34 usr +  0.30 sys = 17.64 CPU) 
        @ 56.69/s (n=1000)
    Mail::Message: 20 wallclock secs (17.12 usr +  0.27 sys = 17.39 CPU) 
        @ 57.50/s (n=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Perl Email Project was a success: &lt;code&gt;Email::MIME&lt;/code&gt; and &lt;code&gt;Email::Simple&lt;/code&gt; were twice as fast as their nearest competitors. However, it should be stressed that they&amp;rsquo;re both very low level; if you&amp;rsquo;re doing anything more complex than the operations we&amp;rsquo;ve seen, you might consider one of the older &lt;code&gt;Mail::&lt;/code&gt; modules.&lt;/p&gt;

&lt;h3 id=&#34;span-id-mailbox-handling-mailbox-handling-span&#34;&gt;&lt;span id=&#34;Mailbox_handling&#34;&gt;Mailbox Handling&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So much for individual messages; let&amp;rsquo;s move on to handling groups of messages, or folders. We&amp;rsquo;ve mentioned &lt;code&gt;Mail::Box&lt;/code&gt; already, and this is truly the king of folder handling, supporting local and remote folders, editing folders, and all sorts of other things besides. To use it, we first need a &lt;code&gt;Mail::Box::Manager&lt;/code&gt;, which is a factory object for creating &lt;code&gt;Mail::Box&lt;/code&gt;es.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Mail::Box::Manager
    my $mgr = Mail::Box::Manager-&amp;gt;new;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to open the folder using the manager:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $folder = $mgr-&amp;gt;open(folder =&amp;gt; $folder_file);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can get at the individual messages as &lt;code&gt;Mail::Message&lt;/code&gt; objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for ($folder-&amp;gt;messages) {
        print $_-&amp;gt;subject,&amp;quot;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With its more minimalist approach, my favorite mail box manager until recently was &lt;code&gt;Mail::Util&lt;/code&gt;&amp;rsquo;s &lt;code&gt;read_mbox&lt;/code&gt; function, which takes the name of a Unix &lt;code&gt;mbox&lt;/code&gt; file, and returns a list of array references; each reference is the array of lines of a message, suitable for feeding to &lt;code&gt;Mail::Internet-&amp;gt;new&lt;/code&gt; or similar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for (read_mbox($folder_file)) {
        my $obj = Mail::Internet-&amp;gt;new($_);
        print $_-&amp;gt;head-&amp;gt;get(&amp;quot;Subject&amp;quot;),&amp;quot;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two are both really handy, but there seemed to be room for something in between the simplicity of &lt;code&gt;Mail::Util&lt;/code&gt; and the functionality of &lt;code&gt;Mail::Box&lt;/code&gt;, and so the Email Project struck again with &lt;a href=&#34;https://metacpan.org/pod/Email::Folder&#34;&gt;&lt;code&gt;Email::Folder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Email::LocalDelivery&#34;&gt;&lt;code&gt;Email::LocalDelivery&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Email::Folder&lt;/code&gt; handles mbox and maildir folders, with more types planned, and has a reasonably simple interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $folder = Email::Folder-&amp;gt;new($folder_file);
    for ($folder-&amp;gt;messages) {
        print $_-&amp;gt;header(&amp;quot;Subject&amp;quot;),&amp;quot;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default it returns &lt;code&gt;Email::Simple&lt;/code&gt; objects for the messages, but this can be changed by subclassing. For instance, if we want raw RFC2822 strings, we can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Email::Folder::Raw; use base &#39;Email::Folder&#39;;
    sub bless_message { my ($self, $rfc2822) = @_; return $rfc2822; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perhaps in the future, we will change &lt;code&gt;bless_message&lt;/code&gt; to use &lt;code&gt;Email::Abstract-&amp;gt;cast&lt;/code&gt; to make the representation of messages easier to select without necessarily having to subclass.&lt;/p&gt;

&lt;p&gt;The other side of folder handling is writing to a folder, or &amp;ldquo;local delivery&amp;rdquo;. &lt;a href=&#34;https://metacpan.org/pod/Email::LocalDelivery&#34;&gt;&lt;code&gt;Email::LocalDelivery&lt;/code&gt;&lt;/a&gt; was written to assist &lt;code&gt;Email::Filter&lt;/code&gt;, of which more later. The problem is harder than it sounds, as it has to deal with locking, escaping mail bodies, and specific problems due to mailbox and maildir formats. &lt;code&gt;LocalDelivery&lt;/code&gt; hides all of these things beneath a simple interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Email::LocalDelivery-&amp;gt;deliver($rfc2822, @mailboxes);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both &lt;code&gt;Email::LocalDelivery&lt;/code&gt; and &lt;code&gt;Email::Folder&lt;/code&gt; use the &lt;a href=&#34;https://metacpan.org/pod/Email::FolderType&#34;&gt;&lt;code&gt;Email::FolderType&lt;/code&gt;&lt;/a&gt; helper module to determine the type of a folder based on its filename.&lt;/p&gt;

&lt;h3 id=&#34;span-id-address-handling-address-handling-span&#34;&gt;&lt;span id=&#34;Address_handling&#34;&gt;Address Handling&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To come down to a lower level of abstraction again, there are a number of modules for handling email addresses. The old favorite is &lt;a href=&#34;https://metacpan.org/pod/Mail::Address&#34;&gt;&lt;code&gt;Mail::Address&lt;/code&gt;&lt;/a&gt;. A mail address appearing in the fields of an email can be made up of several elements: the actual address, a phrase or name, and a comment. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Example user &amp;lt;example@example.com&amp;gt; (Not a real user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Mail::Address&lt;/code&gt; parses these addresses, separating out the phrase and comments, allowing you to get at the individual components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for (Mail::Address-&amp;gt;parse($from_line)) {
        print $_-&amp;gt;name, &amp;quot;\t&amp;quot;, $_-&amp;gt;address, &amp;quot;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, like many of the mail modules, it tries really hard to be helpful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my ($addr) = Mail::Address-&amp;gt;parse(&#39;&amp;quot;eBay, Inc.&amp;quot; &amp;lt;support@ebay.com&amp;gt;&#39;);
    print $addr-&amp;gt;name # Inc. eBay
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which, while better than the &amp;ldquo;Inc Ebay&amp;rdquo; that previous versions would produce, isn&amp;rsquo;t really acceptable. Casey West joined our merry band of renegades and produced &lt;a href=&#34;https://metacpan.org/pod/Email::Address&#34;&gt;&lt;code&gt;Email::Address&lt;/code&gt;&lt;/a&gt;. It has exactly the same interface as &lt;code&gt;Mail::Address&lt;/code&gt;, but it works, and is about twice to three times as fast.&lt;/p&gt;

&lt;p&gt;One thing we often want to do when handling mail addresses is to make sure that they&amp;rsquo;re valid. If, for instance, a user is registering for content at a web site, we need to check that the address they&amp;rsquo;ve given is capable of receiving mail. &lt;a href=&#34;https://metacpan.org/pod/Email::Valid&#34;&gt;&lt;code&gt;Email::Valid&lt;/code&gt;&lt;/a&gt;, the original inhabitant of the &lt;code&gt;Email::&lt;/code&gt; namespace before our bunch of disaffected squatters moved in, does just this. In its most simple use, we can say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (not Email::Valid-&amp;gt;address(&#39;test@example.com&#39;)) {
        die &amp;quot;Not a valid address&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can turn on additional checks, such as ensuring there&amp;rsquo;s a valid MX record for the domain, correcting common AOL and Compuserve addressing mistakes, on so on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (not Email::Valid-&amp;gt;address(-address =&amp;gt; &#39;test@example.com&#39;,
                                  -mxcheck =&amp;gt; 1)) {
        die &amp;quot;Not a valid address&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-mail-munging-mail-munging-span&#34;&gt;&lt;span id=&#34;Mail_munging&#34;&gt;Mail Munging&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Once we have our emails, what are we going to do with them? A lot of what I&amp;rsquo;ve been looking at has been textual analysis of email, and there are three modules that particularly help with this.&lt;/p&gt;

&lt;p&gt;This first is &lt;code&gt;Text::Quoted&lt;/code&gt;; it takes the body text of an email message, or any other text really, and tries to figure out which parts of the message are quotations from other messages. It then separates these out into a nested data structure. For instance, if we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $message = &amp;lt;&amp;lt;EOF
    &amp;gt; foo
    &amp;gt; # Bar
    &amp;gt; baz

    quux
    EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then running &lt;code&gt;extract($message)&lt;/code&gt; will return a data structure like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [
      [
        { text =&amp;gt; &#39;foo&#39;, quoter =&amp;gt; &#39;&amp;gt;&#39;, raw =&amp;gt; &#39;&amp;gt; foo&#39; },
        [ 
            { text =&amp;gt; &#39;Bar&#39;, quoter =&amp;gt; &#39;&amp;gt; #&#39;, raw =&amp;gt; &#39;&amp;gt; # Bar&#39; } 
        ],
        { text =&amp;gt; &#39;baz&#39;, quoter =&amp;gt; &#39;&amp;gt;&#39;, raw =&amp;gt; &#39;&amp;gt; baz&#39; }
      ],

      { empty =&amp;gt; 1 },
      { text =&amp;gt; &#39;quux&#39;, quoter =&amp;gt; &#39;&#39;, raw =&amp;gt; &#39;quux&#39; }
    ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is extremely useful for highlighting different levels of quoting in different colors when displaying a message. A similar concept is &lt;a href=&#34;https://metacpan.org/pod/Text::Original&#34;&gt;&lt;code&gt;Text::Original&lt;/code&gt;&lt;/a&gt;, which looks for the start of original, non-quoted content in an email. It knows about many kinds of attribution lines, so with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $message = &amp;lt;&amp;lt;EOF
    You wrote:
    &amp;gt; Why are there so many different mail modules?

    There&#39;s more than one way to do it! Different modules have different
    focuses, and operate at different levels; some lower, some higher.
    EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;first_sentence($message)&lt;/code&gt; would be &lt;code&gt;There&#39;s more than one way to do it!&lt;/code&gt;. The Mariachi mailing list archiver uses this technique to give a &amp;ldquo;prompt&amp;rdquo; for each message in a thread.&lt;/p&gt;

&lt;p&gt;And speaking of threads, the &lt;a href=&#34;https://metacpan.org/pod/Mail::Thread&#34;&gt;&lt;code&gt;Mail::Thread&lt;/code&gt;&lt;/a&gt; module is a Perl implementation of Jamie Zawinski&amp;rsquo;s mail threading algorithm, as used by Mozilla as well as many other mail clients since then. It&amp;rsquo;s also used by Mariachi, and has recently been updated to use &lt;code&gt;Email::Abstract&lt;/code&gt; to handle any kind of mail object you want to throw at it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $threader = Mail::Thread-&amp;gt;new(@mails);
    $threader-&amp;gt;thread; # Compute threads
    for ($threader-&amp;gt;rootset) { # Original mails in a thread
        dump_thread($_);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-mail-filtering-mail-filtering-span&#34;&gt;&lt;span id=&#34;Mail_filtering&#34;&gt;Mail Filtering&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The classic Perl mail filtering tool is &lt;a href=&#34;https://metacpan.org/pod/Mail::Audit&#34;&gt;&lt;code&gt;Mail::Audit&lt;/code&gt;&lt;/a&gt;, and I&amp;rsquo;ve written articles here about using Mail::Audit on its own (&lt;a href=&#34;http://www.perl.com/pub/2001/07/17/mailfiltering.html&#34;&gt;http://www.perl.com/pub/2001/07/17/mailfiltering.html&lt;/a&gt;) and using it in conjunction with &lt;a href=&#34;https://metacpan.org/pod/Mail::SpamAssassin&#34;&gt;&lt;code&gt;Mail::SpamAssassin&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;http://www.perl.com/pub/2002/03/06/spam.html&#34;&gt;http://www.perl.com/pub/2002/03/06/spam.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve mentioned &lt;a href=&#34;https://metacpan.org/pod/Mail::ListDetector&#34;&gt;&lt;code&gt;Mail::ListDetector&lt;/code&gt;&lt;/a&gt; a couple of times already, and I use this with &lt;code&gt;Mail::Audit&lt;/code&gt; to do most of the filtering automatically for me. The &lt;code&gt;Mail::Audit::List&lt;/code&gt; plugin uses &lt;code&gt;ListDetector&lt;/code&gt; to look for mailing list headers in a message; these are things like &lt;code&gt;List-Id&lt;/code&gt;, &lt;code&gt;X-Mailman-Version&lt;/code&gt;, and the like, which identify a mail as having come through a mailing list. This means I can filter out all mailing list posts to their own folders, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $list = Mail::ListDetector-&amp;gt;new($obj);
    if ($list) {
        my $name = $list-&amp;gt;listname;
        $item-&amp;gt;accept(&amp;quot;mail/$name.-$date&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, &lt;code&gt;Mail::Audit&lt;/code&gt; itself is getting a little long in the tooth, and so new installations are encouraged to use the Email Project&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Email::Filter&#34;&gt;&lt;code&gt;Email::Filter&lt;/code&gt;&lt;/a&gt; instead; it has the same interface for the most part, although not all of the same features, and it uses the new-fangled &lt;code&gt;Email::Simple&lt;/code&gt; mail representation for speed and cleanliness.&lt;/p&gt;

&lt;h3 id=&#34;span-id-mail-mining-mail-mining-span&#34;&gt;&lt;span id=&#34;Mail_mining&#34;&gt;Mail Mining&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Finally, the most high-level thing I do with email is develop frameworks to automatically categorize, organize, and index mail into a database, and attempt to analyze it for interesting nuggets of information.&lt;/p&gt;

&lt;p&gt;My first module to do this with was &lt;a href=&#34;https://metacpan.org/pod/Mail::Miner&#34;&gt;&lt;code&gt;Mail::Miner&lt;/code&gt;&lt;/a&gt;, which consists of three major parts. The first part takes an email, removes any attachments, and stores the lot in a database. The second looks over the email and runs a set of &amp;ldquo;Recogniser&amp;rdquo; modules on it; these find addresses, phone numbers, keywords and phrases, and so on, and store them in a separate database table. The third part is a command-line tool to query the database for mail and information.&lt;/p&gt;

&lt;p&gt;For instance, if I need to find Tim O&amp;rsquo;Reilly&amp;rsquo;s postal address, I ask the query tool, &lt;code&gt;mm&lt;/code&gt;, to find addresses in emails from him:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mm --from &amp;quot;Tim O&amp;quot; --address              
 Address found in message 1835 from &amp;quot;Tim O&#39;Reilly&amp;quot; &amp;lt;tim@oreilly.com&amp;gt;:
 Tim O&#39;Reilly @ O&#39;Reilly &amp;amp; Associates, Inc.
 1005 Gravenstein Highway North, Sebastopol, CA 95472
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To retrieve the whole email, I&amp;rsquo;d say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % mm --id 1835
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if it originally contained an attachment, we&amp;rsquo;d see something like this as part of the email:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [ text/xml attachment something.xml detached - use
   mm --detach 208
   to recover ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I paste that middle line &lt;code&gt;mm --detach 208&lt;/code&gt; into a shell, and hey presto, &lt;em&gt;something.xml&lt;/em&gt; is written to disk.&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;Mail::Miner&lt;/code&gt; is all very well, but having the three ideas in one tight package&amp;ndash;filing mail, mining mail, and interfacing to the database&amp;ndash;makes it difficult to develop and extend any one of them. And of course, it uses the old-school &lt;code&gt;Mail::&lt;/code&gt; modules.&lt;/p&gt;

&lt;p&gt;This brings us to our final module on the mail modules tour, and the most recently released: &lt;a href=&#34;https://metacpan.org/pod/Email::Store&#34;&gt;&lt;code&gt;Email::Store&lt;/code&gt;&lt;/a&gt;. This is a framework, based on &lt;a href=&#34;https://metacpan.org/pod/Class::DBI&#34;&gt;&lt;code&gt;Class::DBI&lt;/code&gt;&lt;/a&gt;, for storing email in a database and indexing it in various ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   use Email::Store &#39;dbi:SQLite:mail.db&#39;;
   Email::Store-&amp;gt;setup;
   Email::Store::Mail-&amp;gt;store($rfc2822);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then later&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my ($name) = Email::Store::Name-&amp;gt;search( name =&amp;gt; &amp;quot;Simon Cozens&amp;quot; )
   @mails_from_simon = $name-&amp;gt;addressings( role =&amp;gt; &amp;quot;From&amp;quot; )-&amp;gt;mails;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be used to build a mailing list archive tool such as Mariachi, or a data mining setup like &lt;code&gt;Mail::Miner&lt;/code&gt;. It&amp;rsquo;s still very much in development, and makes use of a new idea in module extensibility.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be bringing more information when we&amp;rsquo;ve written the first mail archiving and searching tool using &lt;code&gt;Email::Store&lt;/code&gt;, which I&amp;rsquo;m going to be doing as a new interface to the Perl mailing lists at &lt;code&gt;perl.org&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;Conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve looked at the major modules for mail handling on CPAN, and there are many more. I am obviously biased towards those which I wrote, and particularly the Perl Email Project modules in the &lt;code&gt;Email::*&lt;/code&gt; namespace. These modules are specifically designed to be simple, efficient, and correct, but may not always be a good substitute for the more thorough &lt;code&gt;Mail::*&lt;/code&gt; modules, particularly &lt;code&gt;Mail::Box&lt;/code&gt;. However, I hope you&amp;rsquo;re now a little more aware of the diversity of mail handling tools out there, and know where to look next time you need to manipulate email with Perl.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

