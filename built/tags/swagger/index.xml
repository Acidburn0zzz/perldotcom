<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swagger on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/swagger/</link>
    <description>Recent content in Swagger on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2017 00:53:52 +0000</lastBuildDate>
    <atom:link href="/tags/swagger/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - September 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---september-2017/</link>
      <pubDate>Fri, 06 Oct 2017 00:53:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---september-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convenient send Bitcoin from a &lt;a href=&#34;http://www.noodlepi.com/about.html&#34;&gt;NoodlePi&lt;/a&gt; using &lt;a href=&#34;https://metacpan.org/pod/App::NoodlePay&#34;&gt;App::NoodlePay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::SSH::SwitchShell&#34;&gt;App::SSH::SwitchShell&lt;/a&gt; let&amp;rsquo;s you use your preferred shell and own home directory for shared SSH accounts&lt;/li&gt;
&lt;li&gt;Fetch the air date of your favorite TV show&amp;rsquo;s next episode using &lt;a href=&#34;https://metacpan.org/pod/WebService::NextEpisode&#34;&gt;WebService::NextEpisode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Vichan&#34;&gt;WebService::Vichan&lt;/a&gt; is an API client for 4chan and vichan-based imageboards&lt;/li&gt;
&lt;li&gt;A perl PagerDuty client with &lt;a href=&#34;https://metacpan.org/pod/PagerDuty::Agent&#34;&gt;PagerDuty::Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sendmail::AbuseIPDB&#34;&gt;Sendmail::AbuseIPDB&lt;/a&gt; API access for IP address abuse database&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Slack::Notify&#34;&gt;Slack::Notify&lt;/a&gt; can Trigger Slack incoming webhooks&lt;/li&gt;
&lt;li&gt;Splunk HTTP Event Collector (HEC) Client with &lt;a href=&#34;https://metacpan.org/pod/Splunk::HEC&#34;&gt;Splunk::HEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Map Perl releases to location of the tarballs via MetaCPAN API using &lt;a href=&#34;https://metacpan.org/pod/CPAN::Perl::Releases::MetaCPAN&#34;&gt;CPAN::Perl::Releases::MetaCPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::PowerShell::IPC&#34;&gt;Win32::PowerShell::IPC&lt;/a&gt; can interactively manipulate a captive PowerShell process&lt;/li&gt;
&lt;li&gt;Enumerate printers in Windows using &lt;a href=&#34;https://metacpan.org/pod/Win32::EnumPrinters&#34;&gt;Win32::EnumPrinters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Document::OOXML&#34;&gt;Document::OOXML&lt;/a&gt; manipulates of Office Open XML files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::OSM::Render&#34;&gt;Geo::OSM::Render&lt;/a&gt; is a collection of modules to render OpenStreetMap data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Control&#34;&gt;Text::Control&lt;/a&gt; transforms control characters and makes them easy to spot&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Data::Dumper::Extensions&#34;&gt;Acme::Data::Dumper::Extensions&lt;/a&gt; - experimental enhancements Data::Dumper, fun!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Const::Fast::Exporter&#34;&gt;Const::Fast::Exporter&lt;/a&gt; can export Const::Fast immutable variables&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Importer::Zim&#34;&gt;Importer::Zim&lt;/a&gt; can import functions Ã  la Invader Zim. Similar to Import::Box&lt;/li&gt;
&lt;li&gt;Convert lists to hashes extremely fast with &lt;a href=&#34;https://metacpan.org/pod/List::ToHash&#34;&gt;List::ToHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow Moo attributes to be &amp;ldquo;thunked&amp;rdquo; using &lt;a href=&#34;https://metacpan.org/pod/MooX::Thunking&#34;&gt;MooX::Thunking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::AccessorsOnly&#34;&gt;MooseX::AccessorsOnly&lt;/a&gt; can react when users root around inside your objects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/goto::file&#34;&gt;goto::file&lt;/a&gt; Stop parsing the current file and move on to a different one. Woah!&lt;/li&gt;
&lt;li&gt;Build trampolining functions with async/await syntax using &lt;a href=&#34;https://metacpan.org/pod/Async::Trampoline&#34;&gt;Async::Trampoline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lab::VXI11&#34;&gt;Lab::VXI11&lt;/a&gt; Perl interface to VXI-11 test &amp;amp; measurement backend&lt;/li&gt;
&lt;li&gt;Use Pimoroni&amp;rsquo;s Awesome &lt;a href=&#34;https://shop.pimoroni.com/products/unicorn-hat-hd&#34;&gt;Unicorn HAT HD&lt;/a&gt; with &lt;a href=&#34;https://metacpan.org/pod/RPi::UnicornHatHD&#34;&gt;RPi::UnicornHatHD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Emoji::NationalFlag&#34;&gt;Emoji::NationalFlag&lt;/a&gt; convert from country code to national flag emoji&lt;/li&gt;
&lt;li&gt;Extract Strings To PO Files with &lt;a href=&#34;https://metacpan.org/pod/Locale::XGettext&#34;&gt;Locale::XGettext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Cisco&#34;&gt;Crypt::Cisco&lt;/a&gt; provides commands for Cisco Type 7 Passwords&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MEME::Alphabet&#34;&gt;MEME::Alphabet&lt;/a&gt; provides nucleobase alphabet capabilities for Perl code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::OpenAPIRoutes&#34;&gt;Dancer2::Plugin::OpenAPIRoutes&lt;/a&gt; creates routes automatically from a Swagger config file. Cool!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::ReadWriteProcess&#34;&gt;Mojo::IOLoop::ReadWriteProcess&lt;/a&gt; executes external programs or internal code blocks as separate process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Loop&#34;&gt;Mojolicious::Plugin::Loop&lt;/a&gt; provides convenience functions for looping in Mojo templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mock APIs for free using JSON Schemas</title>
      <link>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</link>
      <pubDate>Wed, 20 Sep 2017 06:57:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is a module which takes a &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON schema&lt;/a&gt;, and generates a data structure compliant with the schema. Here&amp;rsquo;s a quick script to generate a data structure based on a schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gen-json - create json from a schema filepath&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { local($/);&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; }; &lt;span style=&#34;color:#75715e&#34;&gt;# slurp the filepath in @ARGV&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema_str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $schema);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($data);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, I need to pass the filepath to a JSON schema, in this case &lt;code&gt;user.json&lt;/code&gt; describes a web app user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gen-json user.json
$VAR1 = {
      &#39;email_address&#39; =&amp;gt; &#39;HfeiJzddxVTg@AspFqfgUKivV.com&#39;,
      &#39;birthdate&#39; =&amp;gt; &#39;2014-01-14T00:59:43.000Z&#39;,
      &#39;active&#39; =&amp;gt; bless( do{\(my $o = 0)}, &#39;JSON::PP::Boolean&#39; ),
      &#39;cell_phone_number&#39; =&amp;gt; &#39;043 185 8956&#39;,
      &#39;roles&#39; =&amp;gt; [
                   &#39;manager&#39;,
                   &#39;trainer&#39;,
                   &#39;admin&#39;
                 ],
      &#39;display_name&#39; =&amp;gt; &#39;Pswgfkjzdc&#39;,
      &#39;password&#39; =&amp;gt; &#39;QI0RQDR9A7W2EtuNHaQKvBFQp67oO0Ld&#39;,
      &#39;login&#39; =&amp;gt; &#39;7oRSCeREi9sWm&#39;,
      &#39;full_name&#39; =&amp;gt; &#39;Oiqmqdr Frfxrzkzfjn&#39;,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script creates a new &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; object called &lt;code&gt;$generator&lt;/code&gt;, slurps the JSON schema into &lt;code&gt;$schema&lt;/code&gt;, and generates the data structure assigning it to &lt;code&gt;$data&lt;/code&gt;. Then &lt;code&gt;$data&lt;/code&gt; is pretty-printed to STDOUT via &lt;code&gt;Data::Dumper&lt;/code&gt;. Notice how the data printed to the terminal is compliant but &lt;em&gt;not&lt;/em&gt; realistic.&lt;/p&gt;

&lt;h3 id=&#34;mocking-apis&#34;&gt;Mocking APIs&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s popular to describe API endpoints with JSON schemas for &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;. Swagger will generate documentation using the schemas, and even provides a request/response testing tool. We can make the JSON schemas even more useful by using them to mock API endpoints. Imagine you&amp;rsquo;ve defined an API but haven&amp;rsquo;t built it yet: you can create the API endpoint and return data mocked with &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; so that frontend development can begin without waiting for the backend to be ready.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;ve got the following Swagger doc (a JSON schema) which defines a single API route &lt;code&gt;/user&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
  &amp;quot;schemes&amp;quot;: [
    &amp;quot;https&amp;quot;
  ],
  &amp;quot;produces&amp;quot;: [
    &amp;quot;application/json&amp;quot;
  ],
  &amp;quot;paths&amp;quot;: {
    &amp;quot;/user&amp;quot;: {
      &amp;quot;get&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;returns a user for a given id&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
            &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        ],
        &amp;quot;responses&amp;quot;: {
          &amp;quot;200&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;Objects matching the search term&amp;quot;,
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
              &amp;quot;properties&amp;quot;: {
                &amp;quot;login&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{5,32}&amp;quot;
                },
                &amp;quot;full_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10} [A-Z][a-z]{3,20}&amp;quot;
                },
                &amp;quot;display_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10}&amp;quot;
                },
                &amp;quot;birthdate&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
                },
                &amp;quot;email_address&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
                },
                &amp;quot;cell_phone_number&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;\\d{3} \\d{3} \\d{4}&amp;quot;
                },
                &amp;quot;password&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{8,32}&amp;quot;
                },
                &amp;quot;roles&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                  &amp;quot;minItems&amp;quot;: 1,
                  &amp;quot;maxItems&amp;quot;: 4,
                  &amp;quot;uniqueItems&amp;quot;: true,
                  &amp;quot;items&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                    &amp;quot;enum&amp;quot;: [ &amp;quot;admin&amp;quot;, &amp;quot;manager&amp;quot;, &amp;quot;trainer&amp;quot;, &amp;quot;member&amp;quot; ]
                  }
                },
                &amp;quot;active&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Lite&#34;&gt;Mojolicious::Lite app&lt;/a&gt; to serve the mocked route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decode_json&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swaggerdoc.json&amp;#39;&lt;/span&gt;; local($/);&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $swaggerdoc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decode_json($json);

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $route_def &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $swaggerdoc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{paths}{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;}{get}{responses}{&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;}{schema};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $route_def);
  $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(json &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $response);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This app slurps and decodes the swagger doc on startup, saving the result to &lt;code&gt;$swaggerdoc&lt;/code&gt; and declares a &lt;code&gt;/user&lt;/code&gt; route which extracts the API definition from the &lt;code&gt;$swaggerdoc&lt;/code&gt;, and uses &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; to generate a response, and renders it. Let&amp;rsquo;s test the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hypnotoad user-app.pl
[Wed Sep 20 14:19:49 2017] [info] Listening at &amp;quot;http://*:8080&amp;quot;
Server available at http://127.0.0.1:8080

$ curl localhost:8080/user
{&amp;quot;active&amp;quot;:false,&amp;quot;birthdate&amp;quot;:&amp;quot;2009-08-30T17:47:32.000Z&amp;quot;,&amp;quot;cell_phone_number&amp;quot;:&amp;quot;254 403 0133&amp;quot;,&amp;quot;display_name&amp;quot;:&amp;quot;Nyzhoyp&amp;quot;,&amp;quot;email_address&amp;quot;:&amp;quot;gEyRQXRPrlzL@CvuRitFtArXv.com&amp;quot;,&amp;quot;full_name&amp;quot;:&amp;quot;Wmpgrd Bnaazxguekqtuezlu&amp;quot;,&amp;quot;login&amp;quot;:&amp;quot;oAxgIvYQfbRmWHq4WifclhQxAI&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;99wciSr8V&amp;quot;,&amp;quot;roles&amp;quot;:[&amp;quot;member&amp;quot;,&amp;quot;trainer&amp;quot;,&amp;quot;manager&amp;quot;]}

$ hypnotoad -s user-app.pl
Stopping Hypnotoad server 2177 gracefully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I launch the app into the background with &lt;code&gt;hypnotoad&lt;/code&gt;. Next I use &lt;code&gt;curl&lt;/code&gt; to test the endpoint, and it correctly returns the user JSON. Finally I stop the app via &lt;code&gt;hypnotoad&lt;/code&gt; again. Looking good!&lt;/p&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve run into a couple of limitations when using &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;. One I already mentioned: it generates compliant but not realistic data. This can cause an issue if you have interdependencies in your object properties, like &lt;code&gt;first_name&lt;/code&gt; should be a substring of &lt;code&gt;full_name&lt;/code&gt;. Or when generating dates, sometimes a random datetime is not precise enough: for realistic dates of birth you might want someone born between 10 and 80 years ago. This issue can be mitigated somewhat by clever use of regex definitions in the JSON schema, or by using the &lt;code&gt;example_key&lt;/code&gt; feature of &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another issue is caused by limitations in JSON schema itself: you might not be able to generate the data in the format your API returns, for example there is no date &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3&#34;&gt;format&lt;/a&gt;, only datetimes.&lt;/p&gt;

&lt;p&gt;But these are minor limitations, and I remain convinced that &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is great way to augment the value of JSON schemas, by rapidly generating test data and/or mocking APIs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - November 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</link>
      <pubDate>Thu, 08 Dec 2016 08:45:26 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Google services via their API with &lt;a href=&#34;https://metacpan.org/pod/API::Google&#34;&gt;API::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::ACME&#34;&gt;Net::ACME&lt;/a&gt; provides client methods for the ACME protocol used by Let&amp;rsquo;s Encrypt&lt;/li&gt;
&lt;li&gt;Two new modules for interacting with Azure services: &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::EventHubs&#34;&gt;Net::Azure::EventHubs&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::NotificationHubs&#34;&gt;Net::Azure::NotificationHubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse Lumberjack protocol frames with &lt;a href=&#34;https://metacpan.org/pod/Net::Lumberjack&#34;&gt;Net::Lumberjack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Mattermost&#34;&gt;AnyEvent::Mattermost&lt;/a&gt; is a non-blocking module for using the Mattermost API&lt;/li&gt;
&lt;li&gt;Get a non-blocking STOMP client using &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Stomper&#34;&gt;AnyEvent::Stomper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Freesound&#34;&gt;WebService::Freesound&lt;/a&gt; is a wrapper for the Freesound OAuth2 API&lt;/li&gt;
&lt;li&gt;Get library data using the Lobid API with &lt;a href=&#34;https://metacpan.org/pod/WebService::Lobid::Organisation&#34;&gt;WebService::Lobid::Organisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Kayako::RestAPI&#34;&gt;Kayako::RestAPI&lt;/a&gt; provides a Perly interface to the Kayako API (customer service platform)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::SwaggerUI&#34;&gt;Alien::SwaggerUI&lt;/a&gt; installs Swagger to render OpenAPI-spec documentation&lt;/li&gt;
&lt;li&gt;Get a REST API for CPAN Testers data using &lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::API&#34;&gt;CPAN::Testers::API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux users: read and write &lt;code&gt;/proc/$pid/maps&lt;/code&gt; files with &lt;a href=&#34;https://metacpan.org/pod/Linux::Proc::Maps&#34;&gt;Linux::Proc::Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::Memory&#34;&gt;Proc::Memory&lt;/a&gt; let&amp;rsquo;s you peek/poke other processes&amp;rsquo; address spaces&lt;/li&gt;
&lt;li&gt;Check the version numbers of Perl modules installed on remote servers using &lt;a href=&#34;https://metacpan.org/pod/Server::Module::Comparison&#34;&gt;Server::Module::Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Search emails in your inbox with &lt;a href=&#34;https://metacpan.org/pod/Email::Folder::Search&#34;&gt;Email::Folder::Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graphics::GVG&#34;&gt;Graphics::GVG&lt;/a&gt; is a lexer/parser for Game Vector Graphics&lt;/li&gt;
&lt;li&gt;Edit animated JPEG files with &lt;a href=&#34;https://metacpan.org/pod/Image::Animated::JPEG&#34;&gt;Image::Animated::JPEG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Repair&#34;&gt;JSON::Repair&lt;/a&gt; recognizes illegal JSON and can repair it to strict compliance&lt;/li&gt;
&lt;li&gt;Easily generate XLSX spreadsheets from data with &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::GenerateXLSX&#34;&gt;Spreadsheet::GenerateXLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Environ&#34;&gt;App::Environ&lt;/a&gt; easily build applications using service the locator pattern&lt;/li&gt;
&lt;li&gt;Get peer-to-peer messaging using &lt;a href=&#34;https://metacpan.org/pod/BeamX::Peer::Emitter&#34;&gt;BeamX::Peer::Emitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::ChatBots&#34;&gt;Bot::ChatBots&lt;/a&gt; is a base system for ChatBots&lt;/li&gt;
&lt;li&gt;Render management speak in IRC with &lt;a href=&#34;https://metacpan.org/pod/Bot::IRC::X::ManagementSpeak&#34;&gt;Bot::IRC::X::ManagementSpeak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sanity-check the calling context using &lt;a href=&#34;https://metacpan.org/pod/Call::Context&#34;&gt;Call::Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Kingpin&#34;&gt;Getopt::Kingpin&lt;/a&gt; is golang kingpin-style command line options parser&lt;/li&gt;
&lt;li&gt;Generate lists lazily with &lt;a href=&#34;https://metacpan.org/pod/List::Lazy&#34;&gt;List::Lazy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert rt.cpan.org tickets to GitHub issues using &lt;a href=&#34;https://metacpan.org/pod/RTx::ToGitHub&#34;&gt;RTx::ToGitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::MCP4725&#34;&gt;Device::Chip::MCP4725&lt;/a&gt; is a chip driver for MCP4725&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Damianware! Code Perl in Latin using &lt;a href=&#34;https://metacpan.org/pod/Lingua::Romana::Perligata&#34;&gt;Lingua::Romana::Perligata&lt;/a&gt; (not strictly a new distribution, just a new version)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::CLI&#34;&gt;API::CLI&lt;/a&gt; is a framework for creating RESTful command line clients&lt;/li&gt;
&lt;li&gt;Run PerlScript/ASP on Catalyst with &lt;a href=&#34;https://metacpan.org/pod/CatalystX::ASP&#34;&gt;CatalystX::ASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::HoboProcess&#34;&gt;Mojo::IOLoop::HoboProcess&lt;/a&gt; spawns subprocesses with MCE::Hobo&lt;/li&gt;
&lt;li&gt;Automatically rotate your Mojo app secrets using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AutoSecrets&#34;&gt;Mojolicious::Plugin::AutoSecrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2015</title>
      <link>http://localhost:1313/article/192/2015/9/3/What-s-new-on-CPAN---August-2015/</link>
      <pubDate>Thu, 03 Sep 2015 13:19:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/192/2015/9/3/What-s-new-on-CPAN---August-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::HSXKPasswd&#34;&gt;Crypt::HSXKPasswd&lt;/a&gt; is a new module for generating secure, memorable passwords inspired by &lt;a href=&#34;https://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt;. The module is highly configurable, supporting different word dictionaries, generation and padding rules.&lt;/p&gt;

&lt;p&gt;Module author Bart Busschots has provided rich documentation which includes the theory behind secure passwords and the methods supported by Crypt::HSXKPasswd. Start using securer passwords today!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::CloudFront::Thin&#34;&gt;Amazon::CloudFront::Thin&lt;/a&gt; aims to be a lightweight, request-level Amazon CloudFront&lt;/li&gt;
&lt;li&gt;A non-blocking API for Amazon&amp;rsquo;s SQS: &lt;a href=&#34;https://metacpan.org/pod/Amazon::SQS::Simple::AnyEvent&#34;&gt;Amazon::SQS::Simple::AnyEvent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Gre&#34;&gt;App::Gre&lt;/a&gt; is a grep clone with better file filtering&lt;/li&gt;
&lt;li&gt;Use the latest version of Google&amp;rsquo;s reCAPTCHA API with &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA::V2&#34;&gt;Captcha::reCAPTCHA::V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Menlo&#34;&gt;Menlo&lt;/a&gt; is an early release of the next version of &lt;code&gt;cpanm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::WebmasterTools&#34;&gt;Net::Google::WebmasterTools&lt;/a&gt; is a Perly interface to the Google WebmasterTools Reporting API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Emitter&#34;&gt;Log::Emitter&lt;/a&gt; is a simple logger based on Mojo::Log&lt;/li&gt;
&lt;li&gt;A Perl mail authentication milter: &lt;a href=&#34;https://metacpan.org/pod/Mail::Milter::Authentication&#34;&gt;Mail::Milter::Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::NSCAng::Client&#34;&gt;Net::NSCAng::Client&lt;/a&gt; can submit host and service monitoring Nagios data&lt;/li&gt;
&lt;li&gt;Find out your public IP address with &lt;a href=&#34;https://metacpan.org/pod/OpenDNS::MyIP&#34;&gt;OpenDNS::MyIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Svsh&#34;&gt;Svsh&lt;/a&gt; is a process supervision shell for daemontools, perp, s6 and runit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Apache::Hadoop::Config&#34;&gt;Apache::Hadoop::Config&lt;/a&gt; is a Perl extension for Hadoop node configuration&lt;/li&gt;
&lt;li&gt;Get flexible parameter binding and record fetching with &lt;a href=&#34;https://metacpan.org/pod/DBIx::FlexibleBinding&#34;&gt;DBIx::FlexibleBinding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate EPUB documents from Pod using &lt;a href=&#34;https://metacpan.org/pod/EBook::EPUB::Lite&#34;&gt;EBook::EPUB::Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Validate data against a JSON schema with &lt;a href=&#34;https://metacpan.org/pod/JSON::Validator&#34;&gt;JSON::Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SMTP::Verify&#34;&gt;Net::SMTP::Verify&lt;/a&gt; validates SMTP recipient addresses&lt;/li&gt;
&lt;li&gt;Truncate your large strings using &lt;a href=&#34;https://metacpan.org/pod/String::Snip&#34;&gt;String::Snip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Swagger2::Markdown&#34;&gt;Swagger2::Markdown&lt;/a&gt; can convert a Swagger2 spec to various markdown formats&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XMLRPC::Fast&#34;&gt;XMLRPC::Fast&lt;/a&gt; is a high performance XML-RPC encoder/decoder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Backbone::Events&#34;&gt;Backbone::Events&lt;/a&gt; is a port of the Backbone.js event API&lt;/li&gt;
&lt;li&gt;Detect the caller level of compiling code with &lt;a href=&#34;https://metacpan.org/pod/Devel::CompileLevel&#34;&gt;Devel::CompileLevel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::TypeTiny&#34;&gt;MooX::TypeTiny&lt;/a&gt; provides optimized type checks for Moo with Type::Tiny&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PPIx::Refactor&#34;&gt;PPIx::Refactor&lt;/a&gt; creates hooks for refactoring Perl, based on PPI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Role::EventEmitter&#34;&gt;Role::EventEmitter&lt;/a&gt; Event emitter role for Moo(se) classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::Filter&#34;&gt;Test::Deep::Filter&lt;/a&gt; filter matched elements before doing deep data comparisons&lt;/li&gt;
&lt;li&gt;Specify the time for unit tests &lt;a href=&#34;https://metacpan.org/pod/Test::Time::At&#34;&gt;Test::Time::At&lt;/a&gt; - looks great for testing tricky date times&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Tk::FormUI&#34;&gt;Tk::FormUI&lt;/a&gt; is a Moo-based object oriented interface for creating Tk forms&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AppleII::LibA2&#34;&gt;AppleII::LibA2&lt;/a&gt; is an Apple II emulator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PiFace&#34;&gt;Device::PiFace&lt;/a&gt; provides a Perly interface to manage PiFace boards&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::ProXR&#34;&gt;Device::ProXR&lt;/a&gt; is a Moo-based object oriented interface for creating controllers using the National Control Devices ProXR command set&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Hyphenate French words with &lt;a href=&#34;https://metacpan.org/pod/Lingua::FR::Hyphen&#34;&gt;Lingua::FR::Hyphen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::NO::Syllable&#34;&gt;Lingua::NO::Syllable&lt;/a&gt; can count the number of syllables in Norwegian words&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Locale::India&#34;&gt;Locale::India&lt;/a&gt; can be used for state and union territory identification in India&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Randf&#34;&gt;App::Randf&lt;/a&gt; is a random filter for STDIN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::this&#34;&gt;Acme::this&lt;/a&gt; prints the Zen of Perl&lt;/li&gt;
&lt;li&gt;Looking for secure, memorable password generator inspired &lt;a href=&#34;https://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt;? You might like &lt;a href=&#34;https://metacpan.org/pod/Crypt::HSXKPasswd&#34;&gt;Crypt::HSXKPasswd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get PHP&amp;rsquo;s &lt;code&gt;parse_str&lt;/code&gt; function using &lt;a href=&#34;https://metacpan.org/pod/PHP::ParseStr&#34;&gt;PHP::ParseStr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Disable &lt;code&gt;state&lt;/code&gt; keyword for testing with &lt;a href=&#34;https://metacpan.org/pod/Test::NoState&#34;&gt;Test::NoState&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::ECDH_ES&#34;&gt;Crypt::ECDH_ES&lt;/a&gt; aims to be a fast and small hybrid crypto system&lt;/li&gt;
&lt;li&gt;Get dependency resolution with &lt;a href=&#34;https://metacpan.org/pod/Dependency::Resolver&#34;&gt;Dependency::Resolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Groups&#34;&gt;Math::Groups&lt;/a&gt; finds &amp;ldquo;automorphisms of groups and isomorphisms between groups&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Get some useful Math functions with &lt;a href=&#34;https://metacpan.org/pod/Math::Utils&#34;&gt;Math::Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLA&#34;&gt;PDLA&lt;/a&gt; the Perl Data Language - seems familiar &amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Hilbert::XS&#34;&gt;Path::Hilbert::XS&lt;/a&gt; is a fast implementation of a Hilbert Path algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::TraitFor::Request::QueryFromJSONY&#34;&gt;Catalyst::TraitFor::Request::QueryFromJSONY&lt;/a&gt; supports JSONY query parameters&lt;/li&gt;
&lt;li&gt;Get even faster HTTP headers using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Headers::Fast::XS&#34;&gt;HTTP::Headers::Fast::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build swat tests from Mojo routes with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::swat&#34;&gt;Mojolicious::Command::swat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

