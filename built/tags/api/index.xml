<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/api/</link>
    <description>Recent content in Api on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Sep 2014 12:36:33 +0000</lastBuildDate>
    <atom:link href="/tags/api/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Get a weather report at the terminal with Perl</title>
      <link>http://localhost:1313/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl/</link>
      <pubDate>Thu, 11 Sep 2014 12:36:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl/</guid>
      <description>

&lt;p&gt;Getting a weather forecast can be a chore; you have to navigate to the right website, close the banner ad, type in your location, click the right link, and &lt;em&gt;maybe&lt;/em&gt; then you can see a forecast. I wanted a more convenient way and found one using &lt;a href=&#34;https://metacpan.org/pod/WWW::Wunderground::API&#34;&gt;WWW::Wunderground::API&lt;/a&gt;. As the name suggests, the module provides a Perl interface to the Wunderground.com API. In this article I&amp;rsquo;ll show you how to use it.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need an API key for Wunderground.com (sign up &lt;a href=&#34;http://www.wunderground.com/weather/api/&#34;&gt;here&lt;/a&gt; it&amp;rsquo;s free). You&amp;rsquo;ll also need to install WWW::Wunderground.::API. The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=WWW-Wunderground-API+0.06&#34;&gt;results&lt;/a&gt; show that it runs on most platforms, including Windows. You can install the module at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan WWW::Wunderground::API&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The Code&lt;/h3&gt;

&lt;p&gt;Using WWW::Wunderground::API, I created a script that would pull an hourly forecast for my local city:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the script I use code&amp;gt;binmode to switch the standard output to UTF8 mode. This lets me print some cool degrees symbols later on. I then connect to the Wunderground API, passing my API key and location (location can be a city name or a zip code). Finally I print out the weather forecast using printf to format the output nicely. I saved the script as &lt;code&gt;weather&lt;/code&gt; and ran it at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ weather
Time      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℉&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℃&lt;/span&gt;   Rain %  Conditions
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Partly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  Mostly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  Overcast
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;  Chance of a Thunderstorm
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  Chance of a Thunderstorm
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  Chance of a Thunderstorm
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; PM  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  Partly Cloudy
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Partly Cloudy
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  Clear&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results show an hourly forecast with the temperature in Fahrenheit and Celsius, the probability of rain and an overall description. As I do most of my work from the terminal, this is much more convenient than using the browser and there are no ads!&lt;/p&gt;

&lt;h3 id=&#34;multiple-locations&#34;&gt;Multiple Locations&lt;/h3&gt;

&lt;p&gt;So the script is nice, but how can we make it better? Well, I&amp;rsquo;m rarely in the same place all the time, and I expect most people mover around too, so it would good to be more flexible and let the user type in the location, rather than using the same location every time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $home_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# capture location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter city or zip code ($home_location): &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;;
chomp $location;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $home_location,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve updated the code to store a default location called &lt;code&gt;$home_location&lt;/code&gt;. I then ask the user to enter a City or zip code, making sure to &lt;a href=&#34;https://perldoc.perl.org/functions/chomp.html&#34;&gt;chomp&lt;/a&gt; the result. Later in the API call, the code: &lt;code&gt;$location || $home_location&lt;/code&gt; will submit the home location unless the user has entered a location. Running the script now, I can get the weather for London easily:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ weather
Enter city &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; zip code (New York City, NY): London, UK
Time      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℉&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;℃&lt;/span&gt;   Rain %  Conditions
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  Clear
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; AM  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  Clear
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;caching&#34;&gt;Caching&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/WWW::Wunderground::API&#34;&gt;WWW::Wunderground::API&lt;/a&gt; documentation shows how to use &lt;a href=&#34;https://metacpan.org/pod/Cache::FileCache&#34;&gt;Cache::FileCache&lt;/a&gt; to cache the weather results locally. When you setup the cache, you can specify an expiry parameter - until the cache expires the WWW::Wunderground::API will use the cached results instead of the Wunderground API. This prevents unnecessary API calls and makes the script faster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Wunderground::API;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cache::FileCache;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $home_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York City, NY&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#capture location&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter city or zip code ($home_location): &amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;;
chomp $location;

binmode STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:utf8&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# for degrees symbol&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WWW::Wunderground::API(
    location &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $location &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $home_location,
    api_key  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789012345&amp;#39;&lt;/span&gt;,
    auto_api &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    cache    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Cache::FileCache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
                    namespace          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wundercache&amp;#39;&lt;/span&gt;,
                    default_expires_in &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt; }),
);

&lt;span style=&#34;color:#75715e&#34;&gt;# print header&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s%-4s%-4s%-8s%-20s\n&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2109}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x{2103}&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rain %&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conditions&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# print hourly&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{ $w&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hourly })
{
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s%4i%4i%8i  %-30s\n&amp;#34;&lt;/span&gt;,
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{FCTTIME}{civil},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{english},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{temp}{metric},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{pop},
           $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{condition};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not much has changed in the code. The line &lt;code&gt;use Cache::FileCache;&lt;/code&gt; imports the module and a &lt;code&gt;cache&lt;/code&gt; parameter has been added to the Wunderground API call. WWW::Wunderground::API is smart enough to not return cached results for different locations.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s probably enough to get started, however there is more that could be done with this script. I could make the script more portable by using environment variables instead of the hard coded values for my API key and home location. Exception handling could better - checking for an internet connection before running the script, handling failed API calls more gracefully (for unknown locations for example). Finally, why have the user type in a location at all? We could use get the user&amp;rsquo;s IP address and then geolocate them using the &lt;a href=&#34;https://metacpan.org/pod/Geo::IP&#34;&gt;Geo::IP&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;The Wunderground API provides a lot more than just a 24 hour forecast. Check out their API &lt;a href=&#34;http://www.wunderground.com/weather/api/d/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/gsfc/5598148465/in/photolist-9wFYv8-kYwXMt-bsoJ2F-epZCJW-51zsz5-4xqurW-dQW1WX-ntLbig-47NhYw-8ha98x-gKjXSn-iGqBL8-fkVu7f-3bs6Hv-9C5Gp9-dfRRoo-ab4NaA-5nNgKY-hkfRe6-hSmCX2-97fCju-8fqUzR-e6xj8j-943upK-CaRbr-5sSeXx-6yuU9E-4adC2H-9YWWVQ-dK9bTn-piUN9-8NP9b5-8hdo8u-8xGTYN-mG2TTk-bmH4rF-7A8s15-97GPeg-fxsEhK-a1cDq-nMWvny-7xTFh6-ow6uvp-i7yjhS-82v13J-6DmEYb-c6BXa-5eCgsS-bo1p2k-nytJYo/&#34;&gt;NASA Goddard Space Flight Center&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing GitHub with the search API</title>
      <link>http://localhost:1313/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</link>
      <pubDate>Fri, 05 Sep 2014 12:11:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</guid>
      <description>

&lt;p&gt;The Net::GitHub module provides a perly interface to GitHub&amp;rsquo;s feature-rich API. You can do everything with it, from creating new repos to managing issues and initiating pull requests. Today I&amp;rsquo;m going to focus on search.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Grab yourself a copy of &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; (make sure it&amp;rsquo;s version 0.68 or higher). The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Net-GitHub+0.68&#34;&gt;results&lt;/a&gt; show that it builds on all major platforms, including Windows. You can install it via from CPAN at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Net::GitHub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;first-steps&#34;&gt;First steps&lt;/h3&gt;

&lt;p&gt;First we need to create a search object. You can search GitHub anonymously up to 5 times per minute or if you authenticate, 20 times per minute. The module &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;documentation&lt;/a&gt; shows examples of how to authenticate, so we&amp;rsquo;ll proceed here unauthenticated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#75715e&#34;&gt;# unauthenticated&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above creates a &lt;code&gt;$search&lt;/code&gt; object, and initiates a repo search for docker. The &lt;code&gt;%data&lt;/code&gt; hash contains the search results. Let&amp;rsquo;s have a look at them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;incomplete_results&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; bless( &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JSON::XS::Boolean&amp;#39;&lt;/span&gt; ),
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;total_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12830&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ {
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open_issues_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;771&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.github.com/repos/docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_downloads&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; bless( &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JSON::XS::Boolean&amp;#39;&lt;/span&gt; ),
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tags_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.github.com/repos/docker/docker/tags&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forks_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2794&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_issues&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $VAR1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;}[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_downloads&amp;#39;&lt;/span&gt;},
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clone_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/docker/docker.git&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;private&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $VAR1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;incomplete_results&amp;#39;&lt;/span&gt;},
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watchers_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pushed_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-09-05T00:32:46Z&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Docker - the open-source application container engine&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;updated_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-09-04T21:59:25Z&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stargazers_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;135198&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watchers&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;created_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2013-01-18T18:10:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;open_issues&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; 771,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;language&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt;Go&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;git_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt;git:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/docker/&lt;/span&gt;docker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;full_name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;homepage&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.docker.com&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forks&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2794&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;89.950935&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
                   },
            ]
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve truncated the results for the sake of brevity, to show the top level key values and one simplified repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;incomplete_results&lt;/code&gt; is a key value pair that returns a boolean true if the are more search results than those returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total_count&lt;/code&gt; shows the total number of repos returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; is the interesting one - it&amp;rsquo;s an arrayref of repo hashes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-more-results&#34;&gt;Getting more results&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update the code to pull more results. GitHub permits up to 100 results per API call and a 1,000 results per search.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;,
                                      per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;has_next_page) {
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 5 queries max per minute&lt;/span&gt;
    push @data, @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above executes the same search as before, except now I&amp;rsquo;m passing the &lt;code&gt;per_page&lt;/code&gt; parameter to get 100 results per call. I also extract the &lt;code&gt;items&lt;/code&gt; arrayref directly into the &lt;code&gt;@data&lt;/code&gt; array. The while loop will continue to call the search API until no further results are returned or we hit the 1,000 result limit.&lt;/p&gt;

&lt;h3 id=&#34;analyzing-the-data&#34;&gt;Analyzing the data&lt;/h3&gt;

&lt;p&gt;So now we have a full set of results in , what can we do with it? One analysis that could be interesting is a count by programming language. Every repo hash contains a &lt;code&gt;language&lt;/code&gt; key value pair, so we can extract and count it. Lets see which language most docker-related repos are written in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker+created:&amp;gt;2014-09-01&amp;#39;&lt;/span&gt;,
                                      per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;has_next_page) {
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 5 queries max per minute&lt;/span&gt;
    push @data, @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %languages;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo (@data) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{language} ? $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{language} : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;;
    $languages{ $language }&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (sort { $languages{$b} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $languages{$a} } keys %languages) {
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%10s: %5i\n&amp;#34;&lt;/span&gt;, $_, $languages{$_};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through this code. First of all, I changed the search argument to limit results to repos created since September 2014 using the &lt;code&gt;created&lt;/code&gt; qualifier. This was to ensure we didn&amp;rsquo;t hit the 1,000 result search limit. The GitHub search API supports a whole range of useful &lt;a href=&#34;https://developer.github.com/v3/search/#parameters&#34;&gt;search qualifiers&lt;/a&gt; (although it&amp;rsquo;s not documented, &lt;code&gt;created&lt;/code&gt; will take a full timestamp like &lt;code&gt;2014-09-01T00:00:00Z&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next I declared the &lt;code&gt;%languages&lt;/code&gt; hash and iterated through the results, extracting each repo&amp;rsquo;s language. Where language was &lt;code&gt;undef&lt;/code&gt;, I labelled the repo &amp;ldquo;Other&amp;rdquo;. Finally I sorted the results and printed them using &lt;a href=&#34;https://perldoc.perl.org/functions/printf.html&#34;&gt;printf&lt;/a&gt;to get a nicely formatted output. Here are the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;     Shell:   &lt;span style=&#34;color:#ae81ff&#34;&gt;238&lt;/span&gt;
     Other:    &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;
    Python:    &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
      Ruby:    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
JavaScript:     &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
        Go:     &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
      Perl:     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
       PHP:     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
   Clojure:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      Java:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps as is to be expected, the results show shell programs dominating the Docker space in September.&lt;/p&gt;

&lt;h3 id=&#34;further-info&#34;&gt;Further Info&lt;/h3&gt;

&lt;p&gt;GitHub&amp;rsquo;s search API supports more than just repo search. You can search issues, code and users as well. Check out the official GitHub search API &lt;a href=&#34;https://developer.github.com/v3/search/&#34;&gt;documentation&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; provides an interface for far more than just search though. It&amp;rsquo;s a full-featured API - you can literally manage your GitHub account via Perl code with Net::GitHub. The developer Fayland Lam has provided loads of documentation, and I found him helpful responsive to enquiries. Thanks Fayland!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for more than just search, you may also want to look at Ingy döt Net&amp;rsquo;s awesome &lt;a href=&#34;https://github.com/ingydotnet/git-hub&#34;&gt;git-hub&lt;/a&gt;, which provides the full power of GitHub at the command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6 (17 - 30 June 2001)</title>
      <link>http://localhost:1313/pub/2001/07/p6pdigest/20010703.html/</link>
      <pubDate>Tue, 03 Jul 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/07/p6pdigest/20010703.html/</guid>
      <description>

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Perl_Doesnt_Suck&#34;&gt;Perl Doesn&#39;t Suck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Multiple_Classifications&#34;&gt;Multiple Classifications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Once_Inherited_Twice_Shy&#34;&gt;Once Inherited, Twice Shy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#ClassObject&#34;&gt;Class::Object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#The_Internal_String_API&#34;&gt;The Internal String API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Miscellany&#34;&gt;Miscellany&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.
Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The lists have been very light recently. During the last two weeks of June, three of the mailing lists received a mere 142 messages across 20 different threads. 40 different authors contributed. Only 5 threads generated much traffic. Eventually, I&amp;rsquo;ll come up with a better way of reporting these meaningless metrics.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-doesnt-suck-perl-doesn-t-suck-span&#34;&gt;&lt;span id=&#34;Perl_Doesnt_Suck&#34;&gt;Perl Doesn&amp;rsquo;t Suck&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Adam Turoff &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00939.html&#34;&gt;provided&lt;/a&gt; a detailed summary of some recent battles against &lt;a href=&#34;http://java.sun.com/&#34;&gt;The Big Bean&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, at the end of the day, I have no fewer than five JVMs installed, all completely different implementations of two Java standards. As a Perl programmer, I find this abhorrent. Installing any version of Perl release in the last 7 years is no different from installing any other release: download, extract, ./configure -des, make, make test, make install. Done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Elaine Ashton, however, &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00943.html&#34;&gt;disagreed&lt;/a&gt;, to a point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t believe I was saying that. My point was that you had a bad experience installing Java on FreeBSD and have declared that it sucks to install it. Unsurprisingly, I have never had a problem installing or supporting Java on Solaris but there are plenty of things to grumble about Perl sometimes, especially if you deploy multiple versions and configurations across multiple platforms and multiple versions of those platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00945.html&#34;&gt;pointed out&lt;/a&gt; that Solaris is &amp;ldquo;Sun&amp;rsquo;s Blessed Platform&amp;rdquo;, and it shouldn&amp;rsquo;t be surprising that Java should install easily there. The discussion then touched a bit on distributions, licensing, support roles, and, yes, even George Carlin.&lt;/p&gt;

&lt;h3 id=&#34;span-id-once-inherited-twice-shy-once-inherited-twice-shy-span&#34;&gt;&lt;span id=&#34;Once_Inherited_Twice_Shy&#34;&gt;Once Inherited, Twice Shy&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-multiple-classifications-multiple-classifications-span&#34;&gt;&lt;span id=&#34;Multiple_Classifications&#34;&gt;Multiple Classifications&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;David Whipp &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07621.html&#34;&gt;asked&lt;/a&gt; if &lt;code&gt;bless&lt;/code&gt; could take, and &lt;code&gt;ref&lt;/code&gt; return, a list, allowing for a cleaner multiple-inheritance model for objects in Perl. Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07624.html&#34;&gt;simplified&lt;/a&gt; the request to object-based vice class-based inheritance, and then &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07631.html&#34;&gt;provided&lt;/a&gt; some potential trade-offs.&lt;/p&gt;

&lt;p&gt;Damian, of course, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07625.html&#34;&gt;submitted&lt;/a&gt; code to fake it in Perl 5. He did muse about an &lt;code&gt;ISA&lt;/code&gt; property, though, which would act like &lt;code&gt;@ISA&lt;/code&gt;, but at the object level.&lt;/p&gt;

&lt;h4 id=&#34;span-id-classobject-class-object-span&#34;&gt;&lt;span id=&#34;ClassObject&#34;&gt;Class::Object&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael &amp;ldquo;Class::Object&amp;rdquo; Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07663.html&#34;&gt;asked&lt;/a&gt; why all this (Class::Object) had to be (Class::Object) in the core (Class::Object). Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07665.html&#34;&gt;opined&lt;/a&gt;:
&amp;gt; Doing it properly in a module is significantly more of a pain than doing it in the core. Faking it with a module means a fair amount of (reasonably slow) perl code, doing it in the core requires a few extra lines of C code in the method dispatch opcode function.&lt;/p&gt;

&lt;p&gt;To which, of course, Michael Class::Objected:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve already done it, it was easy. Adding in an object-based inheritance system should be just as easy, I just need an interface. $obj-&amp;gt;parents(@other_objs) is a little clunky.&lt;/p&gt;

&lt;p&gt;&amp;hellip;Look at Class::Object! Its really, really thin. Benchmark it, its no slower than regular objects. &lt;a href=&#34;http://www.pobox.com/~schwern/src/Class-Object-0.01.tar.gz&#34;&gt;http://www.pobox.com/~schwern/src/Class-Object-0.01.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[The Golden Troll Award goes to Dan Brien for &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07679.html&#34;&gt;this gem&lt;/a&gt;.]&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-internal-string-api-the-internal-string-api-span&#34;&gt;&lt;span id=&#34;The_Internal_String_API&#34;&gt;The Internal String API&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03221.html&#34;&gt;initiated&lt;/a&gt; discussion on the internal API for strings:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since we&amp;rsquo;re going to try and take a shot at being encoding-neutral in the core, we&amp;rsquo;re going to need some form of string API so the core can actually manipulate string data. I&amp;rsquo;m thinking we&amp;rsquo;ll need to be able to at least do this with string:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convert from and to UTF-32&lt;/li&gt;
&lt;li&gt;lengths in bytes, characters, and possibly glyphs&lt;/li&gt;
&lt;li&gt;character size (with the variable length ones reporting in negative numbers)&lt;/li&gt;
&lt;li&gt;get and set the locale (This might not be the spot for this)&lt;/li&gt;
&lt;li&gt;normalize (a noop for non-Unicode data)&lt;/li&gt;
&lt;li&gt;Get the encoding name&lt;/li&gt;
&lt;li&gt;Do a substr operation by character and glyph&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;David Nicol &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03233.html&#34;&gt;suggested&lt;/a&gt; implementing strings as a tree, vice a contiguous memory block. After some pondering, this seemed to &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03236.html&#34;&gt;grow on&lt;/a&gt; Dan, and he is awaiting a yea-or-nay from Larry. Copy-On-Write for Strings will also be &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03242.html&#34;&gt;implemented&lt;/a&gt;, although there was no mention of a potential key signature.&lt;/p&gt;

&lt;h3 id=&#34;span-id-miscellany-miscellany-span&#34;&gt;&lt;span id=&#34;Miscellany&#34;&gt;Miscellany&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07602.html&#34;&gt;released&lt;/a&gt; an updated version of his Perl 6 emulator.&lt;/p&gt;

&lt;p&gt;Marcel Grunauer &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07667.html&#34;&gt;announced&lt;/a&gt; a Proof-of-Concepts page for Perl 6, which contains info and links to Perl 5 modules that may provide a glimpse of things to come.&lt;/p&gt;

&lt;p&gt;There were more &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03247.html&#34;&gt;complaints&lt;/a&gt; about operator choices. (Specifically, &lt;code&gt;~&lt;/code&gt; for string concatenation, and &lt;code&gt;.&lt;/code&gt; (the dot) for dereference (vice &lt;code&gt;-&amp;gt;&lt;/code&gt;).)&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s but three weeks till &lt;a href=&#34;http://conferences.oreilly.com/perl&#34;&gt;TPC 5.0 kicks off in San Diego&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

