<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Conference on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-conference/</link>
    <description>Recent content in Perl Conference on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Feb 2019 18:16:43 +0000</lastBuildDate>
    <atom:link href="/tags/perl-conference/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Perl Conference in Pittsburgh - Call For Presentations</title>
      <link>http://localhost:1313/article/the-perl-conference-in-pittsburgh-cfp/</link>
      <pubDate>Thu, 14 Feb 2019 18:16:43 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-conference-in-pittsburgh-cfp/</guid>
      <description>&lt;p&gt;Sure, there&amp;rsquo;s more than one way to do it, but yours is the best, right? Seize this opportunity to prove it by submitting a talk for The Perl Conference in Pittsburgh! Submit your presentation ideas by March 1. If it&amp;rsquo;s accepted you&amp;rsquo;ll attend the conference as a guest speaker for free and get a free room upgrade just for submitting your proposal!&lt;/p&gt;

&lt;p&gt;We are looking for all level of speakers, first-timers are welcome! The audience will range in levels of expertise and so all level of talks are welcome - your advanced talk is sure to be a hit, just like any &amp;ldquo;Getting started with&amp;rdquo; presentations geared toward beginners. We know the Perl community can benefit from what you have to say! Find out more and submit your idea &lt;a href=&#34;http://bit.ly/tpcipcfp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not sure you want to give a presentation? We understand. Consider at least attending a few of them. The main conference is Jun 17-19 with master class tutorial sessions surrounding it on Jun 16, 20, and 21. Register to attend The Perl Conference in Pittsburgh &lt;a href=&#34;https://perlconference.us/tpc-2019-pit/registration/&#34;&gt;today&lt;/a&gt;, and you&amp;rsquo;ll receive the early bird discount!
&lt;br /&gt;
&lt;br /&gt;
&lt;em&gt;Cover image &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Pittsburgh_Skyline_at_night_(3021295447).jpg&#34;&gt;Wikimedia&lt;/a&gt; licensed under Creative Commons&lt;/em&gt;
&lt;br /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inside YAPC::NA 2005</title>
      <link>http://localhost:1313/pub/2005/05/12/rdice.html/</link>
      <pubDate>Thu, 12 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/05/12/rdice.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.perlfoundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt; organizes and holds several community-based Perl conferences each year. This year&amp;rsquo;s North American conference, &lt;a href=&#34;http://yapc.org/America/&#34;&gt;YAPC::NA 2005&lt;/a&gt; is in Toronto, Canada, June 27-29. chromatic recently interviewed Richard Dice, organizer of the conference this year, to discuss his plans and experiences.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can you tell our readers a little bit about yourself?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Richard Dice:&lt;/strong&gt; Richard&amp;rsquo;s just this guy, see?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m 32, born in Montreal and grew up in the sleepy southern Ontario city of London, Ontario. I did my undergrad degree in astronomy and applied mathematics at the University of Western Ontario. I moved to The Big Smoke (Toronto) in 1996 and have lived here (with brief stints in Montreal again and in Waterloo, ON) since then. I finished my MBA at the University of Toronto about a year ago, and I have recently started a job as a senior IT consultant at a company in Toronto called Information Balance. I&amp;rsquo;ve been married for not quite 2 years now, and we&amp;rsquo;re soon to be moving into our first house. (The day after YAPC! Ugh!)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been a Unix-head since 1992 and a Linux guy since 1994, which is around the same time that I started programming in Perl, coming to it from C. (The first Perl program I ever wrote took 45 minutes. To do the same in C would have taken me three days. I never looked back.)&lt;/p&gt;

&lt;p&gt;I have a love of good beer and scotch (and know &lt;em&gt;everywhere&lt;/em&gt; in Toronto to get both), overestimate my ability to speak French, have an ever-growing personal library that my wife laments, and I go to all the good raves in the city. (I get in to most of the after-parties, too.)&lt;/p&gt;

&lt;p&gt;Also, I&amp;rsquo;m a cat person.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How did you decide that not only did you want&lt;/em&gt; someone &lt;em&gt;to host a YAPC in Toronto, but that you were the one to write the proposal and organize things?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; I blame Damian.&lt;/p&gt;

&lt;p&gt;Damian Conway is a professor of computer science at Monash University in Melbourne, Australia, a Perl programmer par excellence, and an amazing public speaker. In the latter half of 2000, Yet Another Society (also known as The Perl Foundation) raised money to &amp;ldquo;buy&amp;rdquo; Damian for the year 2001, releasing him from his professorial duties at Monash and tasking him in part to tour the world speaking about Perl. (The Perl 6 announcement had just recently been made at the time and it was thought that he would make an excellent &amp;ldquo;champion&amp;rdquo; of the cause.)&lt;/p&gt;

&lt;p&gt;In early 2001, I was in the process of moving from Montreal to Toronto when I noticed that there was a small gap in Damian&amp;rsquo;s tour schedule in June. I had seen him the year before at YAPC 19100 in Pittsburgh and thought he was simply amazing. I wanted to support his mission to evangelize Perl. So I wrote him an email, introduced myself, and asked him to come to Toronto to present a few free public talks on Perl. I didn&amp;rsquo;t want for him to say no, so in order to help make the decision easier I told him I&amp;rsquo;d make it all expenses paid. He quickly replied to say yes. Then, I wrote the Toronto Perl Monger (TPM) mailing list (which had never heard of me before this) and asked for help with fundraising to bring Damian to Toronto. It took some doing on my part, but in the end Damian&amp;rsquo;s trip was completely covered and I didn&amp;rsquo;t have to back-stop it. Not only was the trip a success financially, but everyone really seemed to enjoy the experience. This was my introduction to the Toronto Perl Mongers, to Damian, and to the wide world of Perl community organization.&lt;/p&gt;

&lt;p&gt;Just before he left Toronto, Damian suggested that I consider organizing the same for him during his North American summer tour in 2002. How could I say no? Only this time, with a year to plan things, I could turn it from a small event into Damian-pooloza. Spread out over a week in June 2002 he presented three talks, each with around 250 people in attendance. The budget was also an order of magnitude greater than what I raised the year before. That was when some people locally (and Damian) started suggesting to me that I organize a YAPC in Toronto. I cringed, because I had known the suggestion was going to be raised eventually, and because I knew how much work it would be. But I also knew that, again, there was no way I could say no.&lt;/p&gt;

&lt;p&gt;In the summer of 2003 I organized TPM to put together a bid for YAPC::NA 2004, which lost to the Buffalo bid (as judged by The Perl Foundation). And I&amp;rsquo;m glad that it did! The Buffalo team did a great job, and it just spurred us on to try even harder for our 2005 bid, which we won.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You offered to fund Damian&amp;rsquo;s trip to Toronto without having things lined up first?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; That&amp;rsquo;s correct. People are often surprised when I mention this aspect of things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is that confidence or something else?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Some of it is confidence, but only part of it would be confidence in myself. (Though certainly I&amp;rsquo;ve been accused of this more than once.) The other part is confidence in the Perl community, its generosity and its ability to recognize when something good (e.g. a Damian Conway series of talks) is about to happen.&lt;/p&gt;

&lt;p&gt;When I first hatched the scheme to bring Damian to Toronto in my head, I realized that it had all the makings for an organizational race condition. That is, if I went to Damian telling him that we would like him to come to Toronto conditional on funding being found, then he&amp;rsquo;d say &amp;ldquo;Great! Get back to me when you&amp;rsquo;ve got the funding and I&amp;rsquo;ll make my plans.&amp;rdquo; And then I&amp;rsquo;d turn to the Toronto Perl community to ask for funding to bring Damian to Toronto, and the reply I&amp;rsquo;d get would be &amp;ldquo;I&amp;rsquo;d love to donate! Tell me when Damian is confirmed and I&amp;rsquo;ll contribute something.&amp;rdquo; That&amp;rsquo;s the kind of situation that just eats planning time away until it&amp;rsquo;s all gone. To break this vicious cycle before it even started I decided to guarantee the funds myself. It worked. There were risks, but the potential rewards were too great not to make the effort.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I remember Damian lobbying for the Toronto bid for 2004. Obviously your approach worked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; I assure you that no kick-back schemes were involved. :-)&lt;/p&gt;

&lt;p&gt;I think that whatever support Damian showed for Toronto would have come from his experience in seeing us &amp;ldquo;pull out all the stops&amp;rdquo; when we invited him to Toronto in the past. I guess he had confidence in us to do the same, but for hundreds of people this time and not just him.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&amp;rsquo;s the process of putting together the budget like? I&amp;rsquo;m not looking for specific details and secrets, just some idea of what goes into organizing a conference.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; The budget is everything. The Perl Foundation isn&amp;rsquo;t some huge organization with bottomless pits of money&amp;ndash;YAPC has to stand on its own, financially at least. I never allowed myself to plan a budget where I wasn&amp;rsquo;t 99.9% sure that no losses would occur. On the other hand, I didn&amp;rsquo;t want to have a conference that was so skimpy on goodies that people would be talking to each other years from now saying things like, &amp;ldquo;Remember YAPC in Toronto? That just sucked!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This made for a rather iterative process. The conference budget was designed &amp;ldquo;modularly&amp;rdquo;, so as I identified more funding I could add on to the conference. The original budgetary pass at the conference did look pretty sucky. It wouldn&amp;rsquo;t lose any money, but it would only barely make the YAPC grade, too. So then the effort shifted over to finding corporate sponsorships. This was a lot of hard work, but it has been entirely worthwhile. We have had a lot of excellent people and companies support the conference well beyond the call of duty. (Please visit the sponsors page on the YAPC::NA web site to see what I mean and who I&amp;rsquo;m talking about.)&lt;/p&gt;

&lt;p&gt;The other main point regarding the budgetary process is that I didn&amp;rsquo;t do it alone. Eric Bower, one of the Toronto Mongers, stepped forward to create the budgetary spreadsheet models that he and I consulted (and still consult) regularly. The latest iteration of this process has so many smarts built in to it that I wonder sometimes if I could just step away from planning the conference from here on in and let the spreadsheet take care of things by itself. :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the past couple of years, I&amp;rsquo;ve heard that there&amp;rsquo;s more collaboration between YAPC organizers than before. (Jeff Bisbee talked about this quite a bit after the YAPC::2003 in Florida.) Is there a community of burned-out ex-organizers that still work together?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; The first rule of YAPC ex-organizer club is you do not talk about YAPC ex-organizer club.&lt;/p&gt;

&lt;p&gt;Seeing as how I just broke the first rule, I may as well spill the beans entirely.&lt;/p&gt;

&lt;p&gt;The majority of the contact I have with the ex-organizers is with Kevin Meltzer (YAPC:NA 2003 in Boca Raton, FL, alongside Jeff Bisbee) and Jim Brandt (YAPC::NA 2004 in Buffalo). Jeff and Kevin glommed themselves onto The Perl Foundation to act as the core of the Conferences Committee, and Jim is just a generally accessible nice guy who can&amp;rsquo;t hide from me, as I&amp;rsquo;ve got him on AIM. I&amp;rsquo;ve had a few emails with Sarah Burcham (YAPC::NA 2002 in St. Louis) and Rich Lafferty (YAPC::NA 2001 in Montreal) but nothing major.&lt;/p&gt;

&lt;p&gt;In addition to the YAPC organizers of previous years, I have been in a great deal of contact with Allison Randal, president of The Perl Foundation, and Kurt DeMaagd, treasurer and general &amp;ldquo;boy Friday&amp;rdquo; of The Perl Foundation. He&amp;rsquo;s the unsung hero in all of this as far as I can tell.&lt;/p&gt;

&lt;p&gt;Truth be told, even if the previous YAPC organizers were incredibly tight and available to me, I&amp;rsquo;m not sure what I would be able to do with the &amp;ldquo;wisdom of the past&amp;rdquo; they could offer. They might be able to give me a sense of what needs to be accomplished and by what T-minus-YAPC date, and maybe they could give me some leads in terms of corporate sponsorship, but these things really aren&amp;rsquo;t the bottleneck. The early bottleneck for the conference this year has been money and making a budget for the conference that works. Doing that took so much time that things we would have liked to do sooner had to wait too long for my liking. (For example, opening up attendee registration.) The current bottleneck is finding people who can look after task implementation details on the ground here in Toronto. For that, I work with my local TPM members.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How does organizing a conference compare to organizing a software project?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; That&amp;rsquo;s a really interesting question. I hadn&amp;rsquo;t considered this before, but I can posit a few possibilities.&lt;/p&gt;

&lt;p&gt;First, I want to make a distinction between types of software projects: commercial and open source. I think these two types have quite different organizational characteristics. Organizing a YAPC is more like organizing an open source software project, but it has elements of commercial organization, too.&lt;/p&gt;

&lt;p&gt;The open source software aspect of YAPC organizing is that everyone involved is a volunteer. I can only get people to move in the needed direction by setting an example, moral suasion, persuasion, and by being the obvious best person to make decisions and lead the group. That said, I can&amp;rsquo;t make anybody do anything they don&amp;rsquo;t want to. Even if I was ostensibly &amp;ldquo;successful&amp;rdquo; in talking someone into something they were reluctant to do, the end result is that they wouldn&amp;rsquo;t put in enough time and wouldn&amp;rsquo;t do a good enough job. I have to be very sensitive to finding the right people to do the right things.&lt;/p&gt;

&lt;p&gt;Fortunately, it&amp;rsquo;s not like I&amp;rsquo;m trying to make an organization that sells widgets. I&amp;rsquo;m running a YAPC, which is an intrinsically interesting and exciting thing. There are lots of people in TPM who want to help out and are willing to put in entirely unreasonable amounts of time and effort to make it a great conference. What I have to do is provide a structure in which they can be effective, and in which they can feel like they&amp;rsquo;re being effective. I&amp;rsquo;m very grateful to all the people in TPM who have helped out so much so far, and I know that this help will continue (and accelerate, even!) going from here all the way to the conference, which should be &lt;em&gt;most excellent&lt;/em&gt; as a result of all this energy and planning. (The speakers must be commended, too; they&amp;rsquo;re all volunteers who help out YAPC as well, even if they do it in a different way.)&lt;/p&gt;

&lt;p&gt;The commercial software project aspect of things is that YAPC has a deadline, and it has a budget, and people are charged money to attend (not a lot, but still it makes for a different dynamic). There is no &amp;ldquo;release early, release often&amp;rdquo; aspect of YAPC. There is no &amp;ldquo;we&amp;rsquo;ll only release it when it&amp;rsquo;s ready&amp;rdquo; aspect. These constraints drive the process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;rsquo;ve heard rumors that you have some new events planned. What&amp;rsquo;s this about a scavenger hunt? How about the hackathon beforehand?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; You are well-connected to the rumor mill, I see.&lt;/p&gt;

&lt;p&gt;The scavenger hunt actually originated with Kevin Meltzer. He and I were chatting on AIM one day and he suggested it to me, seemingly out of the blue. I guess what happened was he got interested in seeing what there was to do in Toronto for personal touristing reasons (people often come a few days early or stay a few days late to YAPCs in order just to see the sights). What he found was that there was just plain too much to do in Toronto, and he got excited about experiencing the city as a whole. This is actually something that the TPM group wanted to accomplish in hosting a YAPC. Toronto is one of the great urban environments of North America (on the scale of San Francisco or Chicago) and YAPC is being held right in the heart of downtown. We&amp;rsquo;re happy and proud for an opportunity to share the city with all the people who are coming in from afar to visit, especially people who haven&amp;rsquo;t been before.&lt;/p&gt;

&lt;p&gt;So Kevin made the suggestion, and I thought it was a great idea. At the next TPM meeting I mentioned it to the whole group and everyone seemed really pleased with it. Basically, we&amp;rsquo;ll divide up the conference attendees into groups of 10 and send people out into the city with their digicams to track down and photograph local landmarks and places of geek-interest. This will happen on the night of Monday 27 June. The winners will be announced&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; on Tuesday night, which will be the night of the social centerpiece of YAPC. For those who don&amp;rsquo;t know their geography (or don&amp;rsquo;t happen to have a map handy), Toronto is situated on the north shore of Lake Ontario. Lake Ontario is one of the Great Lakes, which means it&amp;rsquo;s big. Really big. More of an inland sea than a lake. Tuesday night, we&amp;rsquo;re taking a cruise. We&amp;rsquo;ve booked a major cruise ship to hold the entire conference, and for 4 hours it will navigate Toronto Harbor, the channels through the Toronto Islands, and the near coast of Lake Ontario. I&amp;rsquo;ve done this kind of cruise once before; it makes for a great combination of natural and urban beauty. (The Toronto skyline is one of the most impressive in the world, and it looks &lt;em&gt;great&lt;/em&gt; from the lake as day turns to night.) We&amp;rsquo;re also going to be having our banquet dinner on the cruise boat, and our fundraising auction. (There will be some special items to be had during the auction as well. They are sure to raise eyebrows.)&lt;/p&gt;

&lt;p&gt;There will be happenings before the conference officially begins, too. Uri Guttman (of Boston.pm) is the official YAPC &amp;lsquo;socialist czar&amp;rsquo;, and he&amp;rsquo;s arranging for a group restaurant dinner for anyone who arrives to the conference on Sunday (which should be almost everyone from out of town) and he&amp;rsquo;s also trying to book a movie theatre in the downtown area for our exclusive use to see something, we&amp;rsquo;re not quite sure what yet. (What are the big sci-fi films to be released towards the end of June?) We&amp;rsquo;re still looking for sponsorship for this.&lt;/p&gt;

&lt;p&gt;Though neither social nor officially part of the conference, the &amp;lsquo;lambdacamels&amp;rsquo; will descend upon Toronto, too. This is the group led by Autrijus Tang, founder of the Pugs project. Pugs is an effort to implement Perl 6 in Haskell as a kind of proof-of-concept for the real Perl 6 (which will run on Parrot), as well as to give Larry a working Perl 6 example through which he can focus on the details in the Perl 6 language design. About a dozen Pugs hackers will show up in Toronto nearly a week before the conference happens, and then be whisked away to a wilderness hideaway where they will do nothing but hack on Pugs for several days before the conference starts. (We have a lot of wilderness in Canada, even near Toronto, and one of the Toronto Mongers has a large cottage where he&amp;rsquo;ll house the whole gang.)&lt;/p&gt;

&lt;p&gt;From time to time we will throw them scraps of food. If we are pleased with the results, we&amp;rsquo;ll drive them back to civilization in time for the conference.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How did you go about wrangling sponsors?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; I&amp;rsquo;d say it was a three-edged sword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yours, mine, and the truth?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; You do not understand, but you will.&lt;/p&gt;

&lt;p&gt;All 3 edges have something to do with simply being networked into various IT communities. The least of the 3 was me needing sponsors and flipping through my Rolodex. (Well, Palm Pilot, but same idea.) The first&amp;ndash;and crucial&amp;ndash;sponsor came as a result of my being active in CLUE, the Canadian Linux Users Exchange. It is an organization that attempts to act as a clearing-house for Linux community activities around Canada. The head of that organization, Matt Rice, is a big Perl programmer and advocate as well. And he is also closely connected with the people at LPI, the Linux Professional Institute.&lt;/p&gt;

&lt;p&gt;So one day Matt and I were talking, and I told him how I was mustering TPM to make a YAPC bid. This was in July 2004, making it the 2nd bid that TPM would make for YAPC, as we lost the 2003 bid to Buffalo. Buffalo did a great job, and I was happy to have lost to them after I went to YAPC::NA 2004 there and saw the quality of their event. One of the really big things that they had going for them was that the CompSci department at SUNY Buffalo donated the entire venue to them, gratis. They just had a new building built on campus and they were eager for an opportunity to showcase it. This, plus a desire on the part of the chairman of the CS department there to &amp;lsquo;give back&amp;rsquo; to the open source community in general (and the Perl community in specific) led to the donation of their new building as a venue. It&amp;rsquo;s a really nice building. We were very fortunate to have had it for the conference.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did this happen before TPF accepted the proposal or after?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; It was part of the 2004 bid that Buffalo.pm submitted to TPF in August 2003. As a member of the Perl community, I was really happy with the donation from the CS department there and how it made for a great YAPC. As a losing bidder for YAPC::NA 2004, though, I felt differently. (Like I said, I&amp;rsquo;m glad that they did [win]. You can&amp;rsquo;t look that kind of gift horse in the mouth.)&lt;/p&gt;

&lt;p&gt;I felt like I had a trump card played against me. We put a lot into our 2004 bid, and yet there was no argument I could make that would have changed the outcome, or &lt;em&gt;should have changed the outcome&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So I felt vulnerable when it came to creating a bid in the summer of 2004 for 2005. Like, no matter how hard I worked, someone else could produce the same magical trump and we would be shut out. So I made finding that same trump card myself to put into the Toronto bid my first order of business. I explained it this way to Matt, and he brought it to some people at LPI, and they realized the value of supporting a great open source community like the Perl community, and they essentially committed to a sponsorship large enough that our venue requirements would be covered.&lt;/p&gt;

&lt;p&gt;So LPI became the foundation sponsor of YAPC::NA 2005 in Toronto. I honestly can&amp;rsquo;t imagine how I would have made the conference work without them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How much of the previous bid did you re-use?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Much of it. We cleaned it up a bit, and added &amp;ldquo;options&amp;rdquo; to it. In the previous year I identified one potential venue to put into the bid. For the 2005 bid, I kept that one but added another, in case TPF found one or the other preferable. But the main addition to the bid was the LPI sponsorship. To compare the work effort of the two bids, I&amp;rsquo;d say that the bid we put together in the summer of 2003 took about a dozen of us about 2.5 weeks to put together, in our off-hours, using a Kwiki. (That was when I first appreciated just how useful wikis can be in collaborative documentation development tasks!)&lt;/p&gt;

&lt;p&gt;The bid in 2004, I assembled myself in about 2 days. (Not including the effort of finding the LPI sponsorship or in &amp;lsquo;scouting out&amp;rsquo; the venue possibilities.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Having potential venues and a real sponsor must have helped.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; I don&amp;rsquo;t know if the 2005 bid benefited from having two venue possibilities as opposed to one, but it certainly benefited from having the foundational sponsorship of LPI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How about the rest of the sponsors?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; So I&amp;rsquo;ve covered two edges of the sword. The third edge is by random chance. Although it must be said that chance favors the prepared mind.&lt;/p&gt;

&lt;p&gt;In September 2004 there was a PHP conference happening in Toronto, and I kept up a degree of correspondence with the producer of that conference, Marco Tabini. (This was as part of the work I was doing for CLUE, which was making myself aware of open source events happening in Canada.) The day that conference was to wrap up, I eked some time out of work and went over to the conference venue to congratulate Marco on his conference. So we finally met in person there, and he invited me to stay and join him for lunch. I did&amp;hellip; and promptly got separated from him and the rest of his core group in the buffet line.&lt;/p&gt;

&lt;p&gt;So after I got my food, I went to whatever other random table appeared to have a free seat and I got into conversation with the rest of the table. At one point during conversation at the table one of the guys there asked us all what we thought of DB2 (the IBM database product). About a year earlier I had worked with it in a Perl project and I had had a hell of a time, so I heaped a bit of good-natured scorn upon it, mostly having to do with how difficult it was to integrate with Perl. After a few minutes of ranting I asked him why he asked. The reason was because he was the Product Manager for DB2 and Open Source Software at IBM. (&lt;code&gt;$name = &#39;Dan Scott&#39;&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Moral: ask before ranting, unless you&amp;rsquo;re the kind of person who asks and then doesn&amp;rsquo;t rant.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Fortunately, Dan is one of those people who takes criticism constructively! :-) He was really happy to hear that I had an opinion on Perl and DB2, and he wanted to get together with me to get down my thoughts in a more organized fashion, so that he could direct some resources within IBM toward addressing those concerns. So we made an appointment to do that. And then I mentioned to him that there was this YAPC thing that had just recently been awarded to Toronto, and maybe IBM would like to help out with that too. Actually, this may have been a few days before the official announcement that Toronto.pm had been awarded YAPC, but Kevin Meltzer and I had talked informally about it before that.&lt;/p&gt;

&lt;p&gt;So anyhow, Dan was receptive to the idea, and he put me in touch with the right people at IBM for this kind of thing. It took a few months to move its way through the process there, but with the help of some great sympathetic people at IBM they came through with a tremendous sponsorship, which is how we are able to have the cruise/banquet I told you about earlier. To summarize: direct networking, Rolodex, and random. (The latter two being manifestations of indirect networking, I suppose).&lt;/p&gt;

&lt;p&gt;This covers my sponsorship efforts. Since then I have deputized a few people at TPM to try to find some more. That is in process but they&amp;rsquo;ve had some promising responses so far.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is the goal of a YAPC to be self-sufficient or to make a bit of money?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; The goal is to be self-sufficient. As I understand it, there is no official TPF position that YAPC should create a surplus that can go back to TPF to help it fund its other goals.&lt;/p&gt;

&lt;p&gt;That said, the previous few YAPCs have had surpluses, though not huge ones. I really don&amp;rsquo;t know if YAPC::NA 2005 in Toronto will or won&amp;rsquo;t this year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thus every new sponsor you find can fund some other neat thing, like a movie trip or the cruise?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Yes, that&amp;rsquo;s exactly correct. As I mentioned earlier, we&amp;rsquo;re still hoping to find a sponsor for the movie night that Uri is organizing. Sometimes sponsorship money won&amp;rsquo;t be used for &amp;ldquo;fun&amp;rdquo; or &amp;ldquo;conference enhancing&amp;rdquo; items. For instance, I really don&amp;rsquo;t know whether or not I can provide my conference volunteers with free admission to the conference. I need to find maybe $2000 in order just to cover their variable food costs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A conference without volunteers definitely counts as &amp;ldquo;not fun&amp;rdquo; in my book.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Oh, we&amp;rsquo;ll have volunteers. It&amp;rsquo;s just that, as things stand right now, they&amp;rsquo;ll pay their conference fee just like everyone else. I&amp;rsquo;ve paid my conference fee. Many others on the volunteer side of things have already, too. It&amp;rsquo;s like that bit in &amp;ldquo;Starship Troopers&amp;rdquo;: In Raczak&amp;rsquo;s Roughnecks, everyone jumps, everyone fights!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What were you looking for when you and your team put together the schedule this year?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; We kind of didn&amp;rsquo;t know what we were looking for, at first. The call-for-papers (CFP) went active on January 24, I think. Up until maybe three days before the close of CFP (April 18), we had paper submissions totaling maybe only 75% of what was needed to fill the conference, even if we stretched some of the talks out. When the CFP ended, we were up to maybe 250% of what was needed to fill the conference. Yes, there were a LOT of last minute submissions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I can&amp;rsquo;t manage to feel any surprise!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; No, I don&amp;rsquo;t blame you.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s a huge difference between being an impassionate outside observer, and being the poor schmuck who won&amp;rsquo;t know whether or not their life has meaning until the CFP totals are in in another couple of days. I was pretty tense leading up to that.&lt;/p&gt;

&lt;p&gt;It was pretty obvious to us that there would be certain &amp;ldquo;tracks&amp;rdquo; that would form in the conference: Perl 6 and testing were the two big ones. The process of putting together the schedule went something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick out the very few &amp;ldquo;absolute-must-have&amp;rdquo; talks from the stack.&lt;/li&gt;
&lt;li&gt;Find a time for them in the utterly empty schedule.&lt;/li&gt;
&lt;li&gt;Now, figure out the talks which thematically support those talks.&lt;/li&gt;
&lt;li&gt;If there are too many for those themes, then figure out if any of those overlap, and pick one of the overlapping.&lt;/li&gt;
&lt;li&gt;And now cut the list down by another talk or two, somehow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now we have our anchors, and our tracks. That left us with only so much schedule left to fill, and way too many talks to do it with. So we (the program selection committee) went into a kind of frenzied scrum for about two hours with back-and-forth advocating of personal favorites. When the dust cleared, we had our schedule.&lt;/p&gt;

&lt;p&gt;I should say that all of this happened on Saturday, April 23, when six of us got together and spent the whole day working through the schedule.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you notice other trends&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Other trends&amp;hellip; hmm&amp;hellip; well, we have a database track, more or less, which is heavily influenced by Class::DBI. Apart from that, I don&amp;rsquo;t know if there is anything we can call a trend, but I can point out a few other features of the schedule.&lt;/p&gt;

&lt;p&gt;The opening 1.5 hours of the first day is a plenary session&amp;ndash;a bit of time for Toronto.pm to welcome everyone who came (and we&amp;rsquo;ve got people coming from all over the world!), followed by Larry giving a keynote, followed by Allison giving her &amp;ldquo;state of the carrot&amp;rdquo; update on the world of Perl over the past year. The afternoon of day three will be much as it has been the past few years; the Lightning Talks, followed by a closing keynote, followed by a Town Hall meeting.&lt;/p&gt;

&lt;p&gt;One interesting thing that happened with the schedule that I was expecting is that, in day two, we are actually going to bump up the number of parallel tracks from three to four, which I think is a first for a YAPC::NA. This is to accommodate a &amp;ldquo;donated tutorial&amp;rdquo; from Stonehenge that &lt;code&gt;brian d foy&lt;/code&gt;, Stonehenge trainer and originator of the Perl Monger movement, will present. We haven&amp;rsquo;t yet identified the room at the conference venue that we will book for him, so we&amp;rsquo;ve been calling it the &amp;ldquo;&lt;code&gt;brian d foy&lt;/code&gt;er&amp;rdquo;. We&amp;rsquo;re all just way too pleased with ourselves for that. Even once we have figured out a room, no doubt that name will stick.&lt;/p&gt;

&lt;p&gt;We thought it was important to put this tutorial into the schedule so that newcomers to Perl would have something meaningful at the conference to cater to their needs. This was raised at the Town Hall meeting in Buffalo at the end of YAPC::NA 2004 and so we&amp;rsquo;re trying to take those comments to heart. It has meant finding more money to book the extra room, but we all thought it was important enough to make the stretch to do this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you expect a lot of newcomers? I didn&amp;rsquo;t really catch the breakdown between experienced programmers and neophytes at the last couple of YAPCs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; I wish I was in a better position to answer that. Almost by definition it&amp;rsquo;s hard to predict, as these people don&amp;rsquo;t circulate in the same communication channels that I do. I talked with &lt;code&gt;brian d foy&lt;/code&gt; about what his expectations were in terms of the number of people who would attend his introductory Perl tutorial at YAPC, and he said that when he has given similar talks at similar conferences he&amp;rsquo;s always had a good turn out.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s as close I can get to knowing, I&amp;rsquo;m afraid. As for previous YAPCs, well, what I recall from Buffalo was that the newcomers were certainly vocal in the Town Hall meeting. That&amp;rsquo;s a good thing! I absolutely hate the idea that the Perl community could degenerate into an echo chamber. New perspectives are necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How is registration going?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Just a second&amp;hellip;I&amp;rsquo;ll have a look&amp;hellip;.&lt;/p&gt;

&lt;p&gt;Wow! This was the first time I looked today&amp;ndash;seven new since yesterday. Which is huge. It could be the biggest single day jump yet. The total is 106. Which is &lt;em&gt;considerably&lt;/em&gt; ahead of any previous YAPC::NAs I have any data for this number of days before the conference starts. (T-minus-YAPC, as it were.)&lt;/p&gt;

&lt;p&gt;My data set goes back to YAPC::NA 2002 in St. Louis. 1999 - 2001, I don&amp;rsquo;t know. Maybe the information is out there somewhere within TPF, but I haven&amp;rsquo;t figured out where yet. Right now, my projection for registrants + speakers + volunteers is between 300 and 400.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you have access to a lot of that through previous organizers?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Only going back to 2002. I think that&amp;rsquo;s when TPF instituted a new back-end data system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How many speakers and volunteers do you estimate will be there?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Speakers, I don&amp;rsquo;t have to estimate&amp;ndash;the number is 45. (Not including Lightning Talks.) Volunteers&amp;ndash;maybe 20? 25? We&amp;rsquo;re in low teens now, and there&amp;rsquo;s a lot of buzz within the larger TPM group so I expect a lot of people will offer their time for the actual conference duration.&lt;/p&gt;

&lt;p&gt;Regarding the range, my actual projections are for 340 right now. 300 is being conservative, assuming we lose quite a lot of momentum. My gut tells me that we&amp;rsquo;re actually going to gain a fair bit more. 400 would be a blow-out success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How many can the venue hold?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; The venue can hold 420 before I start getting the facility manager to start lining chairs up against the walls. More importantly, the cruise boat can hold 500. :-) While this is all going by gut, I think we&amp;rsquo;ll be around the 400 total mark. Maybe I&amp;rsquo;m being influenced by the seven registrants today. Earlier this weekend there was a day when there wasn&amp;rsquo;t a single registrant. That doesn&amp;rsquo;t happen often. Maybe had you asked me on that day I wouldn&amp;rsquo;t have been so optimistic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How about the hotel and the dorms?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt;Ahh&amp;hellip;.there&amp;rsquo;s the rub.&lt;/p&gt;

&lt;p&gt;Right now, I have 250 rooms reserved in the same hotel facility that is hosting the conference. I have 100 rooms reserved in a university dorm about 1km away from the conference, for students or other people who are particularly cost-conscious. I also have 50 rooms reserved in a hotel that is part of the same university that has the dorm rooms, so that&amp;rsquo;s also about 1km away from the conference facility. So, we have plenty for the whole conference.&lt;/p&gt;

&lt;p&gt;But&amp;hellip;&lt;/p&gt;

&lt;p&gt;The group reservation for the 250 rooms at the hotel facility expires on May 12. At that point, any unbooked rooms go back on the open market. They&amp;rsquo;re still bookable with the conference code, but they just aren&amp;rsquo;t reserved for us. So they&amp;rsquo;ll probably be sold to the public with a half-life of 4 days.&lt;/p&gt;

&lt;p&gt;Toronto is notoriously under-served by hotels, and compounding this is that AA is having its 75th anniversary conference in Toronto on June 30th and July 1. That conference is bringing 79,000 people into the city. The &amp;lsquo;thin tail&amp;rsquo; of AA conference attendees who want to come to Toronto a bit early to do some touristing before their conference starts will put a great deal of strain on the hotel availability in the city.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We call that the long snout. Or the short snout, I forget.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; Right! That&amp;rsquo;s a better term. I was wondering what to call it.&lt;/p&gt;

&lt;p&gt;Looking at things from the opposite direction, YAPC attendees who decide at the last minute that they want to spend a few extra days in Toronto after the conference ends will be S.O.L. trying to find a hotel. So I&amp;rsquo;m concerned about all this.&lt;/p&gt;

&lt;p&gt;Looking at the registration figures from the previous few years of YAPCs, about 40% of attendees register in the last 2.5 weeks. So for YAPC this year, that would mean 40% registering June 6 and after. There will still be a few rooms left in the dorms and the hotel attached to the university that contains the dorms (our booking arrangements are slightly different with them), but still, there will be a distinct shortage of hotel rooms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anything else to say in closing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RD:&lt;/strong&gt; YAPC is the Perl conference by Perl programmers, for Perl programmers (and people who think they might like to be Perl programmers). Everyone in the Toronto.pm organizing team is doing it because we all feel so fortunate for all the support we have received from our fellow Perl Mongers around the world, and we feel privileged to return the generosity as best we can through the conference.&lt;/p&gt;

&lt;p&gt;We hope you can join us in Toronto for the conference, and we&amp;rsquo;re hoping to make it a memorable one for everyone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Program Repair Shop and Red Flags</title>
      <link>http://localhost:1313/pub/2000/04/raceinfo.html/</link>
      <pubDate>Tue, 02 May 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/04/raceinfo.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#What_s_wrong_with_this_picture_&#34;&gt;What&amp;rsquo;s wrong with this picture?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Reading_the_Input&#34;&gt;Reading the Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Computing_Average_and_Total_Time&#34;&gt;Computing Average and Total Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Sort_Order&#34;&gt;Sort Order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Printing_the_Report&#34;&gt;Printing the Report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Red_Flags&#34;&gt;Red Flags&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Get_Rid_of_Array_Size_Variables&#34;&gt;Get Rid of Array Size Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Use_Compound_Data_Structures_Ins&#34;&gt;Use Compound Data Structures Instead of Variable Families&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Use_C_foreach_to_Loop_Over_Arra&#34;&gt;Use &lt;code&gt;foreach&lt;/code&gt; to Loop Over Arrays&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Someone recently asked me to take a look at his report-generating program because he wasn&amp;rsquo;t able to get the final report sorted the way he wanted.&lt;/p&gt;

&lt;p&gt;The program turned out to require only a minor change to get the report in order, but it also turned out to be a trove of common mistakes&amp;ndash;which is wonderful, because I can use one program to show how to identify and fix all the common mistakes at once!&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll show the program, and then I&amp;rsquo;ll show how to make it better. Here&amp;rsquo;s the original. (Note: Lines of code may be broken for display purposes.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1  #!/usr/bin/perl
     2  use Getopt::Std;
     3  getopt(&#39;dV&#39;);
     4  $xferlog=&amp;quot;./xferlog&amp;quot;;
     5  $\ = &amp;quot;\n&amp;quot;;
     6  $i=0;
     7  open XFERLOG, $xferlog or die &amp;quot;Cant&#39;t find file $xferlog&amp;quot;;
     8
     9  foreach $line (&amp;lt;XFERLOG&amp;gt;) {
    10        chomp($line);
    11        if (( $line =~ /$opt_d/i) &amp;amp;&amp;amp; ( $line !~ /_ o r/))
    12           {
    13           ($Fld1,$Fld2,$Fld3,$Fld4,$Fld5,$Fld6,$Fld7,$Fld8,
               $Fld9,$Fld10,$Fld11,$Fld12,$Fld13,$Fld14,$Fld15) = split(&#39; &#39;,$line);

    14            $uplist[$i] = join &#39; &#39;,$Fld6, $Fld8, $Fld9, $Fld14, $Fld15;
    15            $time[$i]=$Fld6; $size[$i]=$Fld8; $file[$i]=$Fld9;
               $user[$i]=$Fld14; $group[$i]=$Fld15;

    16            $username= join &#39;@&#39;, $user[$i], $group[$i];
    17            push @{$table{$username}}, $uplist[$i];
    18            $i++;
    19      }
    20  }
    21  close XFERLOG;
    22
    23  undef %saw;
    24  # @newuser = grep(!$saw{$_}++, @user);
    25  $j=0;
    26  foreach  $username ( sort keys %table )
    27          {
    28          my @mylist = @{$table{$username}};
    29          $m=0;
    30          $totalsize=0;
    31          $totaltime=0;
    32          $gtotal=0;
    33          $x=0;
    34          $x=@mylist;
    35          for ($m = 0 ; $m &amp;lt; ($x); $m++)
    36          {
    37                  ( $seconds, $size, $file, $user, $group) = split(&#39; &#39;, $mylist[$m]);
    38                  $totaltime = ($totaltime + $seconds);
    39                  $totalsize = ($totalsize + $size);
    40          }
    41          if ($totaltime==0) { $totaltime=1; }
    42          if ($totalsize==0) { $totalsize=1; }
    43          $avgtr = (($totalsize/$totaltime)/1024);
    44          $gtotal=($totalsize+$gtotal);
    45          $finale[$j]= join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
    46  #       print $finale[$j];
    47          $j++;
    48  }
    49  @realfinal =  sort @finale;
    50  #print @finale;
    51  $p=0;
    52  $w=0;
    53  $w=@realfinal;
    54  #print $w;
    55  for ($p=($w-1) ; $p&amp;gt;=0; $p--)
    56  {
    57          ($Size, $User, $Files, $Time, $AvgSpeed)= split &amp;quot; &amp;quot;, $realfinal[$p];
    58          $position= ($w-$p);
    59          $percent=(($Size/($gtotal/(1024*1024)))*100);
    60          printf (&amp;quot;$position. $User $Files files &amp;quot;);
    61          printf(&amp;quot;%.2fMB&amp;quot;, $Size) ;
    62          printf &amp;quot; $Time(s) &amp;quot;;
    63          printf (&amp;quot;%.2f% &amp;quot;, $percent);
    64          printf(&amp;quot;%.2fK/s&amp;quot;, $AvgSpeed);
    65          print &amp;quot; &amp;quot;;
    66  }
    67
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s start at the top, with the argument and file handling.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1  #!/usr/bin/perl
     2  use Getopt::Std;
     3  getopt(&#39;dV&#39;);
     4  $xferlog=&amp;quot;./xferlog&amp;quot;;
     5  $\ = &amp;quot;\n&amp;quot;;
     6  $i=0;
     7  open XFERLOG, $xferlog or die &amp;quot;Cant&#39;t find file $xferlog&amp;quot;;
     8
     9  foreach $line (&amp;lt;XFERLOG&amp;gt;) {
        ...
    20  }
    21  close XFERLOG;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name of the input file is hardwired on line 4. Getting the filename from the command line is more flexible. We can leave the old filename in place as a default, retaining compatibility with the original version. I&amp;rsquo;ve also added error handling to the &lt;code&gt;getopt&lt;/code&gt; argument parsing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       getopt(&#39;dV&#39;) or die &amp;quot;Usage: $0 [-d] [-V] [filename]\n&amp;quot;;
        @ARGV = (&#39;./xferlog&#39;) unless @ARGV;
        while (&amp;lt;&amp;gt;) {
          ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getopt&lt;/code&gt; removes the options from &lt;code&gt;@ARGV&lt;/code&gt;, leaving only the filenames, if any. If there weren&amp;rsquo;t any, we put the default filename, &lt;code&gt;/.xferlog&lt;/code&gt;, into &lt;code&gt;@ARGV&lt;/code&gt; as if the user had supplied it themselves. Since the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator reads from the files named in &lt;code&gt;@ARGV&lt;/code&gt;, it will read from &lt;code&gt;./xferlog&lt;/code&gt; if no file was specified on the command line. Using &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; handles &lt;code&gt;open&lt;/code&gt; errors for us automatically, and we can omit the &lt;code&gt;close&lt;/code&gt; call because it&amp;rsquo;s already taken care of for us.
Line 5 is superfluous, because &lt;code&gt;$\&lt;/code&gt; already defaults to &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;. Line 6 is superfluous, since &lt;code&gt;$i&lt;/code&gt; would be implicitly initialized to 0, but it won&amp;rsquo;t matter because we&amp;rsquo;re going to get rid of &lt;code&gt;$i&lt;/code&gt; anyway.&lt;/p&gt;

&lt;p&gt;I replaced the &lt;code&gt;foreach&lt;/code&gt; loop with a &lt;code&gt;while&lt;/code&gt; loop. The &lt;code&gt;foreach&lt;/code&gt; loaded the entire file into memory at once, then iterated over the list of lines. &lt;code&gt;while&lt;/code&gt; reads one line at a time into &lt;code&gt;$_&lt;/code&gt;, discarding each line after it has been examined. If the input file is large, this will save a huge amount of memory. If available memory is small, the original program might have run very slowly because of thrashing problems; the new program is unlikely to have the same trouble, and might run many times faster as a result.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;     9  foreach $line (&amp;lt;XFERLOG&amp;gt;) {
    10        chomp($line);
    11        if (( $line =~ /$opt_d/i) &amp;amp;&amp;amp; ( $line !~ /_ o r/))
    12           {
    13           ($Fld1,$Fld2,$Fld3,$Fld4,$Fld5,$Fld6,$Fld7,$Fld8,
               $Fld9,$Fld10,$Fld11,$Fld12,$Fld13,$Fld14,$Fld15) = split(&#39; &#39;,$line);

    14            $uplist[$i] = join &#39; &#39;,$Fld6, $Fld8, $Fld9, $Fld14, $Fld15;
    15            $time[$i]=$Fld6; $size[$i]=$Fld8; $file[$i]=$Fld9;
               $user[$i]=$Fld14; $group[$i]=$Fld15;

    16            $username= join &#39;@&#39;, $user[$i], $group[$i];
    17            push @{$table{$username}}, $uplist[$i];
    18            $i++;
    19      }
    20  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s my replacement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (&amp;lt;&amp;gt;) {
          chomp;
          if (/$opt_d/oi &amp;amp;&amp;amp;  ! /_ o r/) {
            my @Fld = split;
            my $uplist = {time =&amp;gt; $Fld[5],      size =&amp;gt; $Fld[7],
                          file =&amp;gt; $Fld[8],      user =&amp;gt; $Fld[13],
                          group =&amp;gt; $Fld[14],
                         };
            my $username = &amp;quot;$Fld[13]\@$Fld[14]&amp;quot;;
            push @{$table{$username}}, $uplist;
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the current line is in &lt;code&gt;$_&lt;/code&gt; now instead of &lt;code&gt;$line&lt;/code&gt;, we can use the argumentless versions of &lt;code&gt;chomp&lt;/code&gt; and &lt;code&gt;split&lt;/code&gt; and the unbound version of the pattern match operators, which apply to &lt;code&gt;$_&lt;/code&gt; by default. I added the &lt;code&gt;/o&lt;/code&gt; option on the first pattern match to tell Perl that &lt;code&gt;$opt_d&lt;/code&gt; will not change over the lifetime of the program.&lt;/p&gt;

&lt;p&gt;Any time you have a series of variables named &lt;code&gt;$Fld1&lt;/code&gt;, &lt;code&gt;$Fld2&lt;/code&gt;, etc., it means you made a mistake, because they should have been in an array. I&amp;rsquo;ve replaced the &lt;code&gt;$Fld1&lt;/code&gt;, &lt;code&gt;$Fld2&lt;/code&gt;, &amp;hellip; family with a single array, &lt;code&gt;@Fld&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$uplist&lt;/code&gt; was a problem before. It&amp;rsquo;s a large string continaing several fields. Later on, the program would have had to split this string to get at the various fields; this is a waste of time because we have the fields already split up right here and there&amp;rsquo;s no point in joining them just to split them up again later. Instead of turning the relevant fields into a string, I&amp;rsquo;ve put them into an anonymous hash, indexed by key, so that the filename is in $uplist-&amp;gt;{file} instead of the third section of a whitespace separated string.&lt;/p&gt;

&lt;p&gt;This way of doing things is not only faster, it&amp;rsquo;s more robust. If the input file format changes so that a filename might contain space characters, we only need to change the initial &lt;code&gt;split&lt;/code&gt; that parses the input data itself. The original version of the program would have needed to have the &lt;code&gt;join&lt;/code&gt; changed also, as well as the later &lt;code&gt;split&lt;/code&gt; the re-separated the data. Storing the fields in a hash eliminates this problem entirely.&lt;/p&gt;

&lt;p&gt;I also eliminated the superfluous &lt;code&gt;@time&lt;/code&gt;, &lt;code&gt;@size&lt;/code&gt;, &lt;code&gt;@user&lt;/code&gt;, &lt;code&gt;@group&lt;/code&gt;, and &lt;code&gt;@uplist&lt;/code&gt; arrays. They were never used. Packaging all the relevant data into a single hash obviates any possible use of these arrays anyway. Because all the arrays have gone away, we no longer need the index variable &lt;code&gt;$i&lt;/code&gt;. Such a variable, which exists only to allow data to be added to the end of an array, is rarely needed in Perl. It is almost always preferable to use &lt;code&gt;push&lt;/code&gt;. The &lt;code&gt;push&lt;/code&gt; line itself is essentially the same.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This next section is way too long:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    23  undef %saw;
    24  # @newuser = grep(!$saw{$_}++, @user);
    25  $j=0;
    26  foreach  $username ( sort keys %table )
    27          {
    28          my @mylist = @{$table{$username}};
    29          $m=0;
    30          $totalsize=0;
    31          $totaltime=0;
    32          $gtotal=0;
    33          $x=0;
    34          $x=@mylist;
    35          for ($m = 0 ; $m &amp;lt; ($x); $m++)
    36          {
    37                  ( $seconds, $size, $file, $user, $group) = split(&#39; &#39;, $mylist[$m]);
    38                  $totaltime = ($totaltime + $seconds);
    39                  $totalsize = ($totalsize + $size);
    40          }
    41          if ($totaltime==0) { $totaltime=1; }
    42          if ($totalsize==0) { $totalsize=1; }
    43          $avgtr = (($totalsize/$totaltime)/1024);
    44          $gtotal=($totalsize+$gtotal);
    45          $finale[$j]= join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
    46  #       print $finale[$j];
    47          $j++;
    48  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;26 lines is too much for one block. A 26-line block should be rewritten if possible, and if not, its guts should be scooped out and made into a subroutine.&lt;/p&gt;

&lt;p&gt;We can reduce this to about fifteen lines, so I won&amp;rsquo;t use a subroutine here. A lot of that reduction is simply elimination of unnecessary code. We can scrap lines 23 and 24, which are never used. Line 25 is an unnecessary initialization of &lt;code&gt;$j&lt;/code&gt; whose only purpose is to track the length of the &lt;code&gt;@finale&lt;/code&gt; array; we can eliminate &lt;code&gt;$j&lt;/code&gt; entirely by changing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    45          $finale[$j]= join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
    46  #       print $finale[$j];
    47          $j++;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to say this instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        push @finale, join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
        # print $finale[-1];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s work on that inner loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    35          for ($m = 0 ; $m &amp;lt; ($x); $m++)
    36          {
    37                  ( $seconds, $size, $file, $user, $group) = split(&#39; &#39;, $mylist[$m]);
    38                  $totaltime = ($totaltime + $seconds);
    39                  $totalsize = ($totalsize + $size);
    40          }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any time you have a C-like &lt;code&gt;for&lt;/code&gt; loop that loops over the indices of an array, you&amp;rsquo;re probably making a mistake. Perl has a &lt;code&gt;foreach&lt;/code&gt; construction that iterates over an array in a much simpler way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for $item (@{$table{$username}}) {
          $totaltime += $item-&amp;gt;{time};
          $totalsize += $item-&amp;gt;{size};
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we reap the benefit of the anonymous hash introduced above. To get the time and size we need only extract the hash values &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;. In the original code, we had to do another &lt;code&gt;split&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This allows us to eliminate the superfluous variables &lt;code&gt;$m&lt;/code&gt;, &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;@mylist&lt;/code&gt;, so we can remove lines 28, 29, 33, and 34. We&amp;rsquo;ve also used the &lt;code&gt;+=&lt;/code&gt; operator here to save extra mentions of the variable names on the right-hand side of the &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The modified code now looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        foreach  $username ( sort keys %table ) {
          $totalsize=0;
          $totaltime=0;
          $gtotal=0;
          for $item (@{$table{$username}}) {
            $totaltime += $item-&amp;gt;{time};
            $totalsize += $item-&amp;gt;{size};
          }
          if ($totaltime==0) { $totaltime=1; }
          if ($totalsize==0) { $totalsize=1; }
          $avgtr = (($totalsize/$totaltime)/1024);
          $gtotal=($totalsize+$gtotal);

          push @finale, join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
          #     print $finale[-1];
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is already only half as large. But we can make it smaller and cleaner yet. &lt;code&gt;$totalsize&lt;/code&gt; and &lt;code&gt;$totaltime&lt;/code&gt; are related, so they should go on the same line. &lt;code&gt;$gtotal&lt;/code&gt; is incorrectly set to 0 here. It is a grand total size of all the files downloaded, and any initialization of it should be &lt;em&gt;outside&lt;/em&gt; the loop. The check for &lt;code&gt;$totaltime==0&lt;/code&gt; is to prevent a divide-by-zero error in the computation of &lt;code&gt;$avgtr&lt;/code&gt;, but no such computation is performed for &lt;code&gt;$totalsize&lt;/code&gt;, so the corresponding check is wasted and should be eliminated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my  $gtotal=0;

        foreach  $username ( sort keys %table ) {
          my ($totalsize, $totaltime) = (0, 0);
          for $item (@{$table{$username}}) {
            $totaltime += $item-&amp;gt;{time};
            $totalsize += $item-&amp;gt;{size};
          }
          if ($totaltime==0) { $totaltime=1; }
          $avgtr = ($totalsize/$totaltime)/1024;
          $gtotal += $totalsize;
          push @finale, join &#39; &#39;, ($totalsize/(1024*1024)), $username, ($x), $totaltime, $avgtr;
          #     print $finale[-1];
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the computation of &lt;code&gt;$avgtr&lt;/code&gt;, we can do better. The previous line has a special case for when &lt;code&gt;$totaltime&lt;/code&gt; is zero and the average is undefined. In this case, &lt;code&gt;$avgtr&lt;/code&gt; is set to an arbitrary and bizarre value; if we sort by &lt;code&gt;$avgtr&lt;/code&gt; later, these arbitrary values will appear scattered throughout the rest of the data. It&amp;rsquo;s better to handle this exceptional condition explicitly, by replacing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          if ($totaltime==0) { $totaltime=1; }
          $avgtr = ($totalsize/$totaltime)/1024;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          if ($totaltime==0) { $avgtr = &#39;---&#39; }
          else { $avgtr = ($totalsize/$totaltime)/1024 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the &lt;code&gt;join&lt;/code&gt; here is committing the same error as the one we eliminated before. There&amp;rsquo;s no point in &lt;code&gt;join&lt;/code&gt;ing when we&amp;rsquo;re just going to have to &lt;code&gt;split&lt;/code&gt; it again later anyway; the data are separate now so we might as well keep them separate. The solution is similar; instead of joining the five data items into a string, we parcel them into an anonymous hash so that we can extract them by name when we need to. The final version of the loop looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        foreach  $username ( sort keys %table ) {
          my ($totalsize, $totaltime) = (0, 0);
          for $item (@{$table{$username}}) {
            $totaltime += $item-&amp;gt;{time};
            $totalsize += $item-&amp;gt;{size};
          }

          if ($totaltime==0) { $avgtr = &#39;---&#39; }
          else { $avgtr = ($totalsize/$totaltime)/1024 }
          $gtotal += $totalsize;

          push @finale, {size =&amp;gt; $totalsize/(1024*1024),
                         username =&amp;gt; $username,
                         num_items =&amp;gt; scalar @{$table{$username}},
                         totaltime =&amp;gt; $totaltime,
                         avgtr =&amp;gt; $avgtr,
                        };
          #     print $finale[-1];
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-sort-order-sort-order-span&#34;&gt;&lt;span id=&#34;Sort_Order&#34;&gt;Sort Order&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Line 49 is the one that I was originally asked to change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    49  @realfinal =  sort @finale;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that &lt;code&gt;@finale&lt;/code&gt; contains structured records, the change is straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        @realfinal = sort {$a-&amp;gt;{size} &amp;lt;=&amp;gt; $b-&amp;gt;{size}} @finale;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to sort the final report by username instead, it&amp;rsquo;s equally straightforward: &lt;code&gt;@realfinal = sort {$a-&amp;gt;{username} cmp $b-&amp;gt;{username}} @finale;&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-printing-the-report-printing-the-report-span&#34;&gt;&lt;span id=&#34;Printing_the_Report&#34;&gt;Printing the Report&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;re into the home stretch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    51  $p=0;
    52  $w=0;
    53  $w=@realfinal;
    54  #print $w;
    55  for ($p=($w-1) ; $p&amp;gt;=0; $p--)
    56  {
    57          ($Size, $User, $Files, $Time, $AvgSpeed)= split &amp;quot; &amp;quot;, $realfinal[$p];
    58          $position= ($w-$p);
    59          $percent=(($Size/($gtotal/(1024*1024)))*100);
    60          printf (&amp;quot;$position. $User $Files files &amp;quot;);
    61          printf(&amp;quot;%.2fMB&amp;quot;, $Size) ;
    62          printf &amp;quot; $Time(s) &amp;quot;;
    63          printf (&amp;quot;%.2f% &amp;quot;, $percent);
    64          printf(&amp;quot;%.2fK/s&amp;quot;, $AvgSpeed);
    65          print &amp;quot; &amp;quot;;
    66  }
    67
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have another C-style &lt;code&gt;for&lt;/code&gt; loop that should be replaced by a simple &lt;code&gt;foreach&lt;/code&gt; loop; this allows us to eliminate &lt;code&gt;$p&lt;/code&gt; and &lt;code&gt;$w&lt;/code&gt;. We can loop over the reversed list if we want, or simply adjust the &lt;code&gt;sort&lt;/code&gt; line above so that the items are sorted into the right (reversed) order to begin with, which is probably better.&lt;/p&gt;

&lt;p&gt;The percentage here is the only place in the program that we use &lt;code&gt;$gtotal&lt;/code&gt;, which needs to be converted to megabytes to match the &lt;code&gt;size&lt;/code&gt; fields in &lt;code&gt;@realfinal&lt;/code&gt;. We may as well do this conversion up front. Making these changes, and eliminating the &lt;code&gt;split&lt;/code&gt; because the &lt;code&gt;@realfinal&lt;/code&gt; data is structured, yields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $gtotal /= (1024*1024);  # In megabytes
        #print @finale;
        my $position = 1;
        for $user (@realfinal) {
                printf (&amp;quot;$position. $user-&amp;gt;{username} $user-&amp;gt;{num_items} files &amp;quot;);
                printf(&amp;quot;%.2fMB&amp;quot;, $user-&amp;gt;{size}) ;
                printf &amp;quot; $user-&amp;gt;{totaltime}(s) &amp;quot;;
                printf (&amp;quot;%.2f% &amp;quot;, ($user-&amp;gt;{size}/$gtotal)*100); # percentage
                printf(&amp;quot;%.2fK/s&amp;quot;, $user-&amp;gt;{avgtr});
                print &amp;quot;\n&amp;quot;;
                ++$position;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s probably a little cleaner to merge the many &lt;code&gt;printf&lt;/code&gt;s into a single print; another upside of this is that it&amp;rsquo;s easier to see what the format of the output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $gtotal /= (1024*1024);  # In megabytes
        #print @finale;
        my $position = 1;
        for $user (@realfinal) {
          printf (&amp;quot;%d. %s %s files %.2fMB %.2f%% %.2fK/s\n&amp;quot; ,
            $position, $user-&amp;gt;{username}, $user-&amp;gt;{num_items}
            $user-&amp;gt;{size}, ($user-&amp;gt;{size}/$gtotal)*100, $user-&amp;gt;{avgtr}
          );
          ++$position;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s enough. The new program is 33 lines long, not counting comments, blank lines, and lines that have only a close brace. The original program was 51 lines, so we&amp;rsquo;ve reduced the length of the program by more than one-third. The original program had 41 scalar variables, 8 arrays, and 2 hashes, for a total of 51 named variables. The new program has 11 scalars, 3 arrays, and 1 hash, for a total of 14; we have eliminated more than two-thirds of the variables. 15 of these were the silly &lt;code&gt;$Fld3&lt;/code&gt; variables, and another 22 weren&amp;rsquo;t.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-red-flags-red-flags-span&#34;&gt;&lt;span id=&#34;Red_Flags&#34;&gt;Red Flags&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;A red flag is a warning sign that something is wrong. When you see a red flag, you should immediately consider whether you have an opportunity to make the code cleaner. I liked this program because it raised many red flags:&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-get-rid-of-array-size-variables-get-rid-of-array-size-variables-span&#34;&gt;&lt;span id=&#34;Get_Rid_of_Array_Size_Variables&#34;&gt;Get Rid of Array Size Variables&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;A variable whose only purpose is to track the number of items in an array is a red flag; it should usually be eliminated. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (...) {
          $array[$n] = SOMETHING;
          ++$n;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (...) {
          push @array, SOMETHING;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;eliminating &lt;code&gt;$n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that although the &lt;code&gt;$position&lt;/code&gt; variable in the final version of the program looks like it might be an index variable, it actually serves a more important purpose than that: It appears in the final output as a ranking.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-use-compound-data-structures-ins-use-compound-data-structures-instead-of-variable-families-span&#34;&gt;&lt;span id=&#34;Use_Compound_Data_Structures_Ins&#34;&gt;Use Compound Data Structures Instead of Variable Families&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;A series of variables named &lt;code&gt;$f1&lt;/code&gt;, &lt;code&gt;$f2&lt;/code&gt;, etc., should always be replaced with an array. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ($Fld1,$Fld2,$Fld3,$Fld4,$Fld5,$Fld6) = split(&#39; &#39;,$line);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @Fld = split(&#39; &#39;,$line);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A similar statement can be made about hashes. If you have &lt;code&gt;$user_name&lt;/code&gt;, &lt;code&gt;$user_weight&lt;/code&gt;, and &lt;code&gt;$user_login_date&lt;/code&gt;, consider using one structure called &lt;code&gt;%user&lt;/code&gt; with keys &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, and &lt;code&gt;login_date&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-use-c-foreach-to-loop-over-arra-use-foreach-to-loop-over-arrays-span&#34;&gt;&lt;span id=&#34;Use_C_foreach_to_Loop_Over_Arra&#34;&gt;Use &lt;code&gt;foreach&lt;/code&gt; to Loop Over Arrays&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;C-style &lt;code&gt;for&lt;/code&gt; loops should be avoided. In particular,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for ($i=0; $i &amp;lt; @array; $i++) {
          SOMETHING($array[$i]);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        foreach $item (@array) {
          SOMETHING($item);
        }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>White Camel Awards to be Presented at O&#39;Reilly&#39;s Perl Conference 3.0</title>
      <link>http://localhost:1313/pub/1999/06/whitecamel.html/</link>
      <pubDate>Mon, 28 Jun 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/06/whitecamel.html/</guid>
      <description>&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Coming soon --&lt;/strong&gt; our nomination form for the first White Camel Awards. Let us know who you think has made outstanding contributions to Perl Advocacy, Perl User Groups, and the Perl Community.&lt;br /&gt;
The White Camel awards will be presented at &lt;a href=&#34;http://conferences.oreilly.com/perl3/&#34;&gt;Perl Conference 3.0&lt;/a&gt; on August 24, 1999, during the Town Meeting.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;SEBASTOPOL, CA&amp;ndash;The rare white camel, prized by desert-dwellers, is the inspiration for a new award recognizing the Perl community&amp;rsquo;s &amp;ldquo;unsung heroes&amp;rdquo;&amp;ndash;those who have devoted extraordinary creativity, energy, and time to the non-technical work that supports Perl&amp;rsquo;s active and loyal user community. The White Camel awards will be presented to individuals who have made outstanding contributions to Perl Advocacy, Perl User Groups, and the Perl Community at O&amp;rsquo;Reilly&amp;rsquo;s Perl Conference 3.0 on August 24, 1999. The camel has come to symbolize Perl since it first appeared on the cover of O&amp;rsquo;Reilly &amp;amp; Associates&amp;rsquo; classic &amp;ldquo;Programming Perl&amp;rdquo; in 1991.&lt;/p&gt;

&lt;p&gt;Perl Mongers (&lt;a href=&#34;http://www.pm.org&#34;&gt;http://www.pm.org&lt;/a&gt;), a not-for-profit organization whose mission is to establish Perl user groups, conceived of and will administer the White Camel awards. Perl users will be able to nominate people for the awards at &lt;a href=&#34;https://web.archive.org/web/19990825110945/http://www.perl.com:80/pace/pub/whitecamel/newindex.html&#34;&gt;http://www.perl.com/whitecamel&lt;/a&gt; after July 8. The awards are sponsored by Perl Mongers, O&amp;rsquo;Reilly &amp;amp; Associates, and sourceXchange (&lt;a href=&#34;http://www.sourceXchange.com&#34;&gt;http://www.sourceXchange.com&lt;/a&gt;), a web-based marketplace for Open Source development.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Perl&amp;rsquo;s user community has had a huge role in its adoption and ongoing development,&amp;rdquo; said Madeline Schnapp, O&amp;rsquo;Reilly&amp;rsquo;s Perl Product Manager. &amp;ldquo;With a marketing budget of zero, the community has championed a technology that has greater market share than its well-funded proprietary competitors. We&amp;rsquo;re delighted that the Perl Mongers initiated the White Camel awards, and we&amp;rsquo;re proud to sponsor them.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;CONTACT: Sara Winge, O&amp;rsquo;Reilly &amp;amp; Associates, &lt;sup&gt;707&lt;/sup&gt;&amp;frasl;&lt;sub&gt;829&lt;/sub&gt;-0515x285, &lt;a href=&#34;mailto:sara@oreilly.com&#34;&gt;sara@oreilly.com&lt;/a&gt;, &lt;a href=&#34;http://www.oreilly.com&#34;&gt;http://www.oreilly.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

