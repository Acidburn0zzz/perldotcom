<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hash on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/hash/</link>
    <description>Recent content in Hash on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2014 18:03:49 +0000</lastBuildDate>
    <atom:link href="/tags/hash/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl references: create, dereference and debug with confidence</title>
      <link>http://localhost:1313/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</link>
      <pubDate>Thu, 27 Mar 2014 18:03:49 +0000</pubDate>
      
      <guid>http://localhost:1313/article/80/2014/3/27/Perl-references--create--dereference-and-debug-with-confidence/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Learning Perl&amp;rsquo;s references is a rite-of-passage for Perl programmers. Until you &amp;ldquo;get&amp;rdquo; references, large parts of the language will remain alien to you. References have their own special syntax and rules, which can make them seem strange and hard to understand. The good news is that the core features of references are easy to learn and use. This article describes the main ways to use references and some handy tools to get you out of trouble if you run into it. So even if you&amp;rsquo;re not completely comfortable with references, you&amp;rsquo;ll be able to write code that works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-are-references&#34;&gt;What are references?&lt;/h3&gt;

&lt;p&gt;A reference is a scalar variable whose value is a pointer to another Perl variable. If you were to print out a reference, you would see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;SCALAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x509ea0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The value looks like a memory address, bu it&amp;rsquo;s actually an internal key for Perl, which points to another variable. A reference can refer to any of Perl&amp;rsquo;s variable types: scalars, arrays, hashes, filehandles, subroutines and globs. References are useful because they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save memory - why create two copies of the same variable when you only need one?&lt;/li&gt;
&lt;li&gt;enable subroutines to return values that are not in a scalar or list format. (the reference is a scalar pointer to values that can be in any kind of format).&lt;/li&gt;
&lt;li&gt;can encapsulate complex data structures comprising of nested arrays, hashes, scalars and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessing the value that a reference points to is called &amp;ldquo;dereferencing&amp;rdquo;. When you dereference a reference, instead of returning the value of it&amp;rsquo;s pointer, Perl will fetch the actual variable that the reference is pointing to. The need to dereference a reference variable in order to use it&amp;rsquo;s underlying value is the main disadvantage of references; direct variable access will always be faster.&lt;/p&gt;

&lt;h3 id=&#34;declaring-and-accessing-references&#34;&gt;Declaring and accessing references&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to focus on array and hash references as those are the most commonly encountered reference types. Working them is easy. For arrays, use square brackets instead of parentheses to declare, and the arrow operator (&amp;ldquo;-&amp;gt;&amp;rdquo;) to dereference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $array_ref   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pear&amp;#39;&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $array[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];       &lt;span style=&#34;color:#75715e&#34;&gt;#banana&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $array_ref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;#banana&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For hashes, use curly braces instead of parentheses to declare, and the same arrow operator to dereference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %hash        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (one &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, two &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, three &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hash_ref    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {one &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, two &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, three &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $hash{three};       &lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $hash_ref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{three}; &lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the coolest things about references is the ability to create complex data structures to hold any kind of data you need. Let&amp;rsquo;s look at a more realistic data structure for a fictional customer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $customer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { name   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mr Smith&amp;#39;&lt;/span&gt;,
                 dob    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01/18/1987&amp;#39;&lt;/span&gt;,
                 phones &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { home   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;212-608-5787&amp;#39;&lt;/span&gt;,
                             work   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;347-558-0352&amp;#39;&lt;/span&gt;},
                 last_3_purchase_values &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;78.92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98.36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131.00&lt;/span&gt; ],
                 addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ {   street &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;37 Allright Ave&amp;#39;&lt;/span&gt;,
                                    zip    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11025&amp;#39;&lt;/span&gt;,
                                    city   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                                    state  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;,
                                },
                                {   street &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;23 Broadway&amp;#39;&lt;/span&gt;,
                                    zip    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10125&amp;#39;&lt;/span&gt;,
                                    city   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                                    state  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;,
                                },
                               ],
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$customer is a hash ref with 5 keys. Two of the keys (&amp;ldquo;name&amp;rdquo; and &amp;ldquo;dob&amp;rdquo;) have the usual scalar values. The other key values though are nested references: &amp;ldquo;phones&amp;rdquo; is a nested hashref, and &amp;ldquo;last_3_purchase_values&amp;rdquo; and &amp;ldquo;addresses&amp;rdquo; are arrayrefs. So how would you access any of the values in $customer data structure? Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}; &lt;span style=&#34;color:#75715e&#34;&gt;# Mr Smith&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{phones}{home}; &lt;span style=&#34;color:#75715e&#34;&gt;# 212-608-5787&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{last_3_purchase_values}[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;# 78.92&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{addresses}[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{street}; &lt;span style=&#34;color:#75715e&#34;&gt;# 23 Broadway&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To dereference a value in $customer, we start by using the arrow operator. From there, we add the required key or index to access the next level of data. The main challenge when working with references is to understand the datatype you are dereferencing: if it is an array, you&amp;rsquo;ll need to use the array accessor syntax &amp;ldquo;[#]&amp;ldquo;, whereas if it&amp;rsquo;s a hash, you need to pass the key in curly braces &amp;ldquo;{key_value}&amp;ldquo;.&lt;/p&gt;

&lt;h3 id=&#34;working-with-arrayrefs&#34;&gt;Working with arrayrefs&lt;/h3&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll need to loop through an arrayref. The syntax for this is the same as an ordinary array, except that you need to dereference the entire array, rather than a single element of it. This is done by enclosing the arrayref in with a dereferencing array block: &amp;ldquo;@{ $array_ref }&amp;ldquo;. Let look at some examples using $customer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#iterate through a nested array&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $purchase_value (@{ $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{last_3_purchase_values} }) {
    say $purchase_value;
}

&lt;span style=&#34;color:#75715e&#34;&gt;#iterate through a nested array and dereference and print the street&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $address (@{ $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{addresses} }) {
    say $address&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{street};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Arrays support other operations like push and shift. In these cases you will need a dereferencing array block too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;push @{$customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{addresses}}, { street &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;157 Van Cordant Street&amp;#39;&lt;/span&gt;,
                                  zip    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10008&amp;#39;&lt;/span&gt;,
                                  city   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                          state  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;,
                                 };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have pushed a new address on to the &amp;ldquo;addresses&amp;rdquo; arrayref. We used a dereferencing array block to dereference &amp;ldquo;addresses&amp;rdquo; so that we could perform a push on it.&lt;/p&gt;

&lt;h3 id=&#34;working-with-hashrefs&#34;&gt;Working with hashrefs&lt;/h3&gt;

&lt;p&gt;Dereferencing blocks can be used for hash operations too. Probably the most common operation is looping through the keys of the hash, using the &amp;ldquo;keys&amp;rdquo; function. In this case, you&amp;rsquo;ll need to use a dereferencing hash block &amp;ldquo;%{ $hash_ref }&amp;ldquo;. Let&amp;rsquo;s look at an example using $customer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# iterate through a nested hash&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key (keys %{ $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{phones} }) {
    say $customer&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{phones}{$key};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;troubleshooting-references&#34;&gt;Troubleshooting References&lt;/h3&gt;

&lt;p&gt;References can be harder to debug than normal variables as you need to dereference the reference in order to see what variable it is pointing to. Imagine you wanted to print out the contents of $customer. This doesn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $customer; &lt;span style=&#34;color:#75715e&#34;&gt;# HASH(0x2683b30)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately you can use Data::Dumper&amp;rsquo;s &amp;ldquo;Dumper&amp;rdquo; function to dereference and pretty-print a reference for you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($customer);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Would print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$VAR1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last_3_purchase_values&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
                                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;78.92&amp;#39;&lt;/span&gt;,
                                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;98.36&amp;#39;&lt;/span&gt;,
                                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;131&amp;#39;&lt;/span&gt;
                                      ],
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dob&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01/18/1987&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
                           {
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zip&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11025&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;street&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;37 Allright Ave&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;
                           },
                           {
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zip&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10125&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;street&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;23 Broadway&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;
                           },
                           {
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zip&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10008&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;street&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;157 Van Cordant Street&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NY&amp;#39;&lt;/span&gt;
                           }
                         ],
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mr Smith&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phones&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;work&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;347-558-0352&amp;#39;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;home&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;212-608-5787&amp;#39;&lt;/span&gt;
                      }
        };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another useful tool is the Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/ref.html&#34;&gt;ref&lt;/a&gt; function. Just pass the reference variable into ref, and it will return which variable type the reference points to.&lt;/p&gt;

&lt;h3 id=&#34;creating-references-from-variables&#34;&gt;Creating references from variables&lt;/h3&gt;

&lt;p&gt;To create a reference to an existing variable, use the backslash operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $array_ref   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@array;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hash_ref    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%hash;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The backslash operator often comes into play when working within a subroutine. For instance consider these three subs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# example 1 - processor &amp;amp; memory inefficient&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_array&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $element (@array) {
        calculate($element);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @array;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# example 2 - processor inefficient&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_array&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $element (@$array) {
        calculate($element);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $array;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# example 3 - best option&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_array&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $element (@array) {
        calculate($element);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@array;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these subs are trying to do the same thing - declare an array, loop through it and then return it. Example 1 will return a list of the the array&amp;rsquo;s elements. This is inefficient as the list comprises of scalar copies of the original array&amp;rsquo;s elements, which means: Perl makes the copies, returns them and then throws away the original array when it goes out of scope.&lt;/p&gt;

&lt;p&gt;Example 2&amp;rsquo;s main drawback is that by starting with a reference, Perl has to dereference the array in order to loop though it, which is a waste of processing. Example 3 has none of these disadvantages, as it begins with an array, loops through it and then returns a reference to the array. This is a popular Perl programming pattern.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If references were a mystery to you before, hopefully this article helps to kickstart you into using them with confidence. Are you thirsty for more references? There&amp;rsquo;s a lot more to them than described here. Check out Perl&amp;rsquo;s official documentation, perldoc which has a &lt;a href=&#34;https://perldoc.perl.org/perlreftut.html&#34;&gt;tutorial&lt;/a&gt; and more &lt;a href=&#34;https://perldoc.perl.org/perlref.html&#34;&gt;detailed guide&lt;/a&gt;. &lt;a href=&#34;http://www.amazon.com/gp/product/1449393098/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449393098&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;Intermediate Perl&lt;/a&gt; is fantastic book that has over 100 pages on references (affiliate link).&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;text=Perl+references%3A+create%2C+dereference+and+debug+with+confidence&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F80%2F2014%2F3%2F27%2FPerl-references-create-dereference-and-debug-with-confidence&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl hash basics: create, update, loop, delete and sort</title>
      <link>http://localhost:1313/article/27/2013/6/16/Perl-hash-basics--create--update--loop--delete-and-sort/</link>
      <pubDate>Sun, 16 Jun 2013 21:32:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/27/2013/6/16/Perl-hash-basics--create--update--loop--delete-and-sort/</guid>
      <description>

&lt;p&gt;Hashes are one of Perl&amp;rsquo;s core data types. This article describes the main functions and syntax rules for for working with hashes in Perl.&lt;/p&gt;

&lt;h3 id=&#34;declaration-and-initialization&#34;&gt;Declaration and initialization&lt;/h3&gt;

&lt;p&gt;A hash is an unsorted collection of key value pairs. Within a hash a key is a unique string that references a particular value. A hash can be modified once initialized. Because a hash is unsorted, if it&amp;rsquo;s contents are required in a particular order then they must be sorted on output. Perl uses the &amp;lsquo;%&amp;rsquo; symbol as the variable sigil for hashes. This command will &lt;strong&gt;declare an empty hash&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %hash;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to the syntax for arrays, hashes can also be declared using a list of comma separated values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %weekly_temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;monday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuesday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wednesday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;thursday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;friday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above, Perl takes the first entry in the list as a key (&amp;lsquo;monday&amp;rsquo;), and the second entry as that key&amp;rsquo;s value (65). The third entry in the list (&amp;lsquo;tuesday&amp;rsquo;) would then be declared as a key, and the fourth entry (68) as its value and so on.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&amp;lsquo;fat comma&amp;rsquo;&lt;/strong&gt; operator looks like an arrow (&amp;lsquo;=&amp;gt;&amp;rsquo;) and allows the declaration of key value pairs instead of using a comma. This makes for cleaner and more readable code. Additionally there is no need to quote strings for keys when using the fat comma. Using the fat comma, the same declaration of %weekly_temperature would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %weekly_temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    monday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, 
    tuesday   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
    wednesday &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, 
    thursday  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, 
    friday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;access-a-value&#34;&gt;Access a value&lt;/h3&gt;

&lt;p&gt;To access the value of a key value pair, Perl requires the key encased in curly brackets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %weekly_temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    monday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, 
    tuesday   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
    wednesday &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, 
    thursday  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, 
    friday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $monday_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $weekly_temperature{monday};
&lt;span style=&#34;color:#75715e&#34;&gt;#65&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that strings do not need to be quoted when placed between the curly brackets for hash keys and that the scalar sigil (&amp;lsquo;$&amp;rsquo;) is used when accessing a single scalar value instead of (&amp;lsquo;%&amp;rsquo;).&lt;/p&gt;

&lt;h3 id=&#34;take-a-slice-of-a-hash&#34;&gt;Take a slice of a hash&lt;/h3&gt;

&lt;p&gt;A slice is a list of values. In Perl a slice can be read into an array, assigned to individual scalars, or used as an input to a function or subroutine. Slices are useful when you only want to extract a handful of values from a hash. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %weekly_temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    monday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;,
    tuesday   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
    wednesday &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;,
    thursday  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;,
    friday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tuesday_temp, $friday_temp) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @weekly_temperature{(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuesday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;friday&amp;#39;&lt;/span&gt;)};

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$tuesday_temp\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#68&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$friday_temp\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#60&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above declares the &amp;lsquo;weekly_temperature&amp;rsquo; hash as usual. What&amp;rsquo;s unusual here is that to get the slice of values, the array sigil (&amp;lsquo;@&amp;rsquo;) is used by pre-pending it to the hash variable name. With this change the has will then lookup a list of values.&lt;/p&gt;

&lt;h3 id=&#34;access-all-values-with-the-values-function&#34;&gt;Access all values with the values function&lt;/h3&gt;

&lt;p&gt;The values function returns a list of the values contained in a hash. It&amp;rsquo;s possible to loop through the list of returned values and perform operations on them (e.g. print). For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %weekly_temperature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    monday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, 
    tuesday   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
    wednesday &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, 
    thursday  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, 
    friday    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $value (values %weekly_temperature){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $value &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#71 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#53 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#60&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#65 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#68&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A couple more tips when working with key value pairs of a hash: the code is more readable if you vertically align the fat comma (&amp;lsquo;=&amp;gt;&amp;rsquo;) operators and unlike C, Perl allows the last element to have a trailing comma, which makes it easier to add elements later without generating a compile error.&lt;/p&gt;

&lt;h3 id=&#34;access-all-keys-with-the-keys-function&#34;&gt;Access all keys with the keys function&lt;/h3&gt;

&lt;p&gt;The keys function returns a list of the keys contained in a hash. A common way to access all the key value pairs of a hash is to use loop through the list returned by the keys function. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %consultant_salaries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    associate        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25000&lt;/span&gt;,
    senior_associate &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40000&lt;/span&gt;,
    manager          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80000&lt;/span&gt;,
    director         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120000&lt;/span&gt;,
    partner          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250000&lt;/span&gt;,
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $grade (keys %consultant_salaries) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$grade: $consultant_salaries{$grade}\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#associate: 25000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#partner: 250000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#director: 120000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#manager: 80000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#senior_associate: 40000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above code we used the keys function to return a list of keys, looped though the list with foreach, and then printed the key and the value of each pair. Note that the print order of the pairs is different from intialization - that&amp;rsquo;s because hashes store their pairs in a random internal order. Also we used an interpreted quoted string using speech marks (&amp;ldquo;). This allows us to mix variables with plain text and escape characters like newline (&amp;rsquo;\n&amp;rsquo;) for convenient printing.&lt;/p&gt;

&lt;h3 id=&#34;access-all-key-value-pairs-with-the-each-function&#34;&gt;Access all key value pairs with the each function&lt;/h3&gt;

&lt;p&gt;The each function returns all keys and values of a hash, one at a time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %consultant_salaries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    associate        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25000&lt;/span&gt;,
    senior_associate &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40000&lt;/span&gt;,
    manager          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80000&lt;/span&gt;,
    director         &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120000&lt;/span&gt;,
    partner          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250000&lt;/span&gt;,
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($key, $value) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; each %consultant_salaries) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key: $value\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#associate: 25000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#partner: 250000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#director: 120000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#manager: 80000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#senior_associate: 40000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;add-a-new-key-value-pair&#34;&gt;Add a new key value pair&lt;/h3&gt;

&lt;p&gt;To add a new pair to a hash, use this syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# declare the hash as usual&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %fruit_pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (apples &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# add a new key value pair&lt;/span&gt;
$fruit_pairs{oranges} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lemons&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# prove the new pair exists by printing the hash&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($key, $value) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; each %fruit_pairs) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key: $value\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#apples: oranges&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#oranges: lemons&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;delete-a-key-value-pair&#34;&gt;Delete a key value pair&lt;/h3&gt;

&lt;p&gt;To remove a key value pair from a hash use the delete function. Delete requires the key of the pair in order to delete it from the hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %fruit_pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (apples &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# use the delete function with the pair&amp;#39;s key&lt;/span&gt;
delete $fruit_pairs{apples};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;update-a-value-of-a-pair&#34;&gt;Update a value of a pair&lt;/h3&gt;

&lt;p&gt;To update the value of a pair, simply assign it a new value using the same syntax as to add a new key value pair. The difference here is that the key already exists in the hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %fruit_pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (apples &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;# assign a new value to the pair&lt;/span&gt;
$fruit_pairs{apples} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;empty-a-hash&#34;&gt;Empty a hash&lt;/h3&gt;

&lt;p&gt;To empty a hash, re-declare it with no members:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %fruit_pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (apples &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# empty the hash&lt;/span&gt;
%fruit_pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;increment-decrement-a-value&#34;&gt;increment / decrement a value&lt;/h3&gt;

&lt;p&gt;Quick answer: use the same syntax for assigning / updating a value with the increment or decrement operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %common_word_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    the &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;,
    a   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# increment the value of the pair with the key &amp;#39;the&amp;#39; by 1&lt;/span&gt;
$common_word_count{the}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# decrement the key value pair with the key &amp;#39;a&amp;#39;&lt;/span&gt;
$common_word_count{a}&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;sort-a-hash-alphabetically&#34;&gt;Sort a hash alphabetically&lt;/h3&gt;

&lt;p&gt;Although the internal ordering of a hash is random, it is possible to sort the output from a hash into a more useful sequence. Perl provides the sort function to (obviously) sort lists of data. By default it sorts alphabetically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %common_word_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    the &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;,
    a   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,
);
&lt;span style=&#34;color:#75715e&#34;&gt;# use sort with keys to sort the keys of a hash&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key (sort keys %common_word_count){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#and&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#the&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# to sort values use keys to lookup the values and a compare block to compare them&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key (sort {$common_word_count{$a} &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; $common_word_count{$b}} keys %common_word_count){
       &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key: $common_word_count{$key}\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;#a: 29&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#the: 54&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#and: 98&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s review the code above. The compare block receives the hash keys using the keys function. It then compares the values of each key using $a and $b as special variables to lookup and compare the values of the two keys. This sorted list of keys is then passed to the foreach command and looped through as usual. Note how the order is printed in value order - however it is still alphabetical ordering.&lt;/p&gt;

&lt;h3 id=&#34;sort-a-hash-numerically&#34;&gt;Sort a hash numerically&lt;/h3&gt;

&lt;p&gt;Numerically sorting a hash requires using a compare block as in the previous example, but substituting the &amp;lsquo;cmp&amp;rsquo; operator for the numerical comparison operator (&amp;rsquo;&amp;lt;=&amp;gt;&amp;rsquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %common_word_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
            the &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;,
            a   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key (sort {$common_word_count{$a} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $common_word_count{$b}} keys %common_word_count) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key: $common_word_count{$key}\n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;get-the-hash-size&#34;&gt;Get the hash size&lt;/h3&gt;

&lt;p&gt;To get the size of a hash, simply call the keys function in a scalar context. This can be done by assigning the return value of keys to a scalar variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %common_word_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
            the &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;,
            a   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  keys %common_word_count;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$count\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

