<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microsoft on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/microsoft/</link>
    <description>Recent content in Microsoft on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jul 2018 10:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/microsoft/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - June 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---june-2018/</link>
      <pubDate>Wed, 04 Jul 2018 10:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---june-2018/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s the Fourth of July holiday here in the US, so this month&amp;rsquo;s cover image has been given a USA-style makeover. Below you&amp;rsquo;ll find my curated list of June&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Grep Microsoft Office documents with &lt;a href=&#34;https://metacpan.org/pod/App::Greple::msdoc&#34;&gt;App::Greple::msdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::JC::Client&#34;&gt;App::JC::Client&lt;/a&gt; is a small command line client for JIRA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::ReportPrereqs&#34;&gt;App::ReportPrereqs&lt;/a&gt; prints a nicely formatted report on distribution / project dependencies using the cpanfile&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::XRay&#34;&gt;AWS::XRay&lt;/a&gt; provides an interface to the request tracing service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::SendGrid::V3&#34;&gt;Email::SendGrid::V3&lt;/a&gt; is a class for emailing via the SendGrid v3 Web API&lt;/li&gt;
&lt;li&gt;A base class for Mattermost bots: &lt;a href=&#34;https://metacpan.org/pod/Net::Mattermost::Bot&#34;&gt;Net::Mattermost::Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access OpenGL prototyping tools using &lt;a href=&#34;https://metacpan.org/pod/OpenGL::Sandbox&#34;&gt;OpenGL::Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the You Need A Budget API with &lt;a href=&#34;https://metacpan.org/pod/WWW::YNAB&#34;&gt;WWW::YNAB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract the version of Perl a module declares with &lt;a href=&#34;https://metacpan.org/pod/Module::Extract::DeclaredVersion&#34;&gt;Module::Extract::DeclaredVersion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get module permissions from MetaCPAN API using &lt;a href=&#34;https://metacpan.org/pod/PAUSE::Permissions::MetaCPAN&#34;&gt;PAUSE::Permissions::MetaCPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Elasticsearch::Model&#34;&gt;Elasticsearch::Model&lt;/a&gt; is a replacement for ElasticSearchX::Model that works with Elasticsearch v6+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::AMEX::Transaction&#34;&gt;Finance::AMEX::Transaction&lt;/a&gt; parses AMEX transaction files: EPRAW, EPPRC, EPTRN, CBNOT, GRRCN&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Devel::CallParser has been patched to fix RT#110623 as an alt distribution: &lt;a href=&#34;https://metacpan.org/pod/Alt::Devel::CallParser::ButWorking&#34;&gt;Alt::Devel::CallParser::ButWorking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::XSConstructor&#34;&gt;Class::XSConstructor&lt;/a&gt; is a wow-fast (but limited) constructor in XS, See also &lt;a href=&#34;https://metacpan.org/pod/MooX::XSConstructor&#34;&gt;MooX::XSConstructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Embed Tiny C code in your Perl program using &lt;a href=&#34;https://metacpan.org/pod/FFI::TinyCC::Inline&#34;&gt;FFI::TinyCC::Inline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::TooMuchCode&#34;&gt;Perl::Critic::TooMuchCode&lt;/a&gt; provides critic policies for unused imports, constants and other detritus&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wow, get a Perl interface to the Gameboy Advance with &lt;a href=&#34;https://metacpan.org/pod/Device::GBA&#34;&gt;Device::GBA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manage and monitor the Synaccess NP-05B networked power strip with &lt;a href=&#34;https://metacpan.org/pod/Device::Power::Synaccess::NP05B&#34;&gt;Device::Power::Synaccess::NP05B&lt;/a&gt;. See also &lt;a href=&#34;https://metacpan.org/pod/App::np05bctl&#34;&gt;App::np05bctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Control a FeelTech FY32xx signal generator using &lt;a href=&#34;https://metacpan.org/pod/Electronics::SigGen::FY3200&#34;&gt;Electronics::SigGen::FY3200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::TL1UDP&#34;&gt;Net::TL1UDP&lt;/a&gt; provides a Transaction Language 1 (TL-1) UDP interface&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::GPIOExpander::MCP23017&#34;&gt;RPi::GPIOExpander::MCP23017&lt;/a&gt; interface with the MCP23017 GPIO Expander Integrated Circuit over I2C&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Showterm&#34;&gt;Dancer2::Plugin::Showterm&lt;/a&gt; is a Dancer2 port of &lt;a href=&#34;http://showterm.io/&#34;&gt;showterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::ConfigAppStart&#34;&gt;MojoX::ConfigAppStart&lt;/a&gt; can start Mojo apps using Config::App&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>When Perl isn&#39;t fast enough</title>
      <link>http://localhost:1313/article/when-perl-isn-t-fast-enough/</link>
      <pubDate>Sun, 28 Jan 2018 21:50:37 +0000</pubDate>
      
      <guid>http://localhost:1313/article/when-perl-isn-t-fast-enough/</guid>
      <description>

&lt;p&gt;Last year at $work we held a web application &amp;ldquo;bake off&amp;rdquo; competition, in order to find a suitable technology stack for serving some important pages on our website, as fast as possible. Our developers were allowed to compete individually or in a team, and they could use any programming language they wanted.&lt;/p&gt;

&lt;p&gt;The existing solution was based on Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; framework using &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt;, and the code had become utterly bloated, to the point at which it took several hundred ms to serve the pages. The issue wasn&amp;rsquo;t with the technology per se: a vanilla Catalyst application can serve responses in under 10ms, the problem was that the application code was shared among several different teams, and as each team added various features and functions, performance degraded.&lt;/p&gt;

&lt;p&gt;The overall aim then, was to see what we could do if we &amp;ldquo;burned it down&amp;rdquo; and started again. The bake off generated a lot of buzz: we were given carte blanche to spend as much time as needed working on it, and it was a lot of fun. We had entries in Python, Go, Java, Haskell, Lua, Node, Elixir and of course, Perl.&lt;/p&gt;

&lt;h1 id=&#34;round-1&#34;&gt;Round 1&lt;/h1&gt;

&lt;p&gt;The goal of the first round was to develop a web application that would respond to certain GET requests by serving a particular template. Much of the template was static, but there was some dynamic logic to it.&lt;/p&gt;

&lt;p&gt;My team built a solution on top of &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt;. We created thin request and response classes in &lt;a href=&#34;https://metacpan.org/pod/Moo&#34;&gt;Moo&lt;/a&gt;, a router coded in C (&lt;a href=&#34;https://metacpan.org/pod/Router::XS&#34;&gt;Router::XS&lt;/a&gt;), and used &lt;a href=&#34;https://metacpan.org/pod/Text::XSlate&#34;&gt;Text::XSlate&lt;/a&gt; for the template. The solution kicked ass - it was able to serve over 10,000 requests per second, and we placed second overall, losing out only to a Java entry.&lt;/p&gt;

&lt;h1 id=&#34;round-2&#34;&gt;Round 2&lt;/h1&gt;

&lt;p&gt;In round 2 things got trickier: our solutions would be required to make several requests to other internal services, in order to formulate the response. Additionally, our solutions would be judged for a &amp;ldquo;joy&amp;rdquo; factor: &lt;em&gt;would developers love working with this stack?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To satisfy the &amp;ldquo;joy&amp;rdquo; factor, we merged our code with another team&amp;rsquo;s entry, based on &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt;. That gave us a real web framework to develop with, as opposed to the threadbare classes we had developed in round 1.&lt;/p&gt;

&lt;p&gt;The requirement to make several requests to other services hurt us though. The kicker was, we had to make the requests concurrently &lt;em&gt;and&lt;/em&gt; compute concurrently on the responses. This was because the data needed for one request was coming from two separate data stores that could be fetched and processed and rendered concurrently. In other words, we needed threading.&lt;/p&gt;

&lt;p&gt;Perl can do asynchronous programming with modules like &lt;a href=&#34;https://metacpan.org/pod/IO::Async&#34;&gt;IO::Async&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/Coro&#34;&gt;Coro&lt;/a&gt;, but it&amp;rsquo;s single threaded. You &lt;em&gt;can&lt;/em&gt; compile Perl with &lt;a href=&#34;https://perldoc.perl.org/threads.html&#34;&gt;threads&lt;/a&gt;, which provide multi-threaded computing. They were developed back in the day by Microsoft to enable &lt;a href=&#34;https://perl.apache.org/&#34;&gt;mod_perl&lt;/a&gt; to run on Windows, in lieu of &lt;code&gt;fork()&lt;/code&gt;. Perl&amp;rsquo;s threads work by cloning the Perl interpreter&amp;rsquo;s internal data structures, and passing around a thread context variable to tell Perl which thread is requesting what data. These have predictable drawbacks: they require more system resources because of the cloned data, and each thread runs &lt;em&gt;slower&lt;/em&gt; than a single threaded Perl because of all the thread context checks.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s inability to multi-thread efficiently forced us to stay single-threaded and it really burnt us: the best performing Java and Go entries&amp;rsquo; throughput were within 3% of each other, but our solution was 50% slower.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Perl is such a versatile language: from the terminal, to scripting and application programming, it excels in many areas. We were able to develop a lightning-fast application that competed with, and bested several high performance language competitors. Ultimately though, $work decided to use Go as for this solution we needed a highly scalable, performant stack.&lt;/p&gt;

&lt;p&gt;Perl 6 might be a viable alternative soon. The latest 6.c &lt;a href=&#34;https://perl6.org/downloads/&#34;&gt;release&lt;/a&gt; includes a hybrid (M:N) threading model via a scheduler which comes into play when using &lt;a href=&#34;https://docs.perl6.org/language/concurrency&#34;&gt;higher level constructs&lt;/a&gt;. To bypass the scheduler and get more control, it has a &lt;a href=&#34;https://docs.perl6.org/type/Thread&#34;&gt;Thread&lt;/a&gt; class, for which each instance maps 1:1 with an OS thread. I suspect it is too slow to compete right now, but I will be watching future Perl 6 benchmarks with interest.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Cover image from &lt;a href=&#34;http://www.psdgraphics.com/psd/rocket-icon-psd/&#34;&gt;psdgraphics.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft to Fund Perl Development</title>
      <link>http://localhost:1313/pub/1999/06/activestate.html/</link>
      <pubDate>Wed, 09 Jun 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/06/activestate.html/</guid>
      <description>&lt;p&gt;If the good news is that the world&amp;rsquo;s largest software company has recognized the value of Perl and they are willing to fund new Perl development, then you know the bad news.&lt;/p&gt;

&lt;p&gt;Microsoft has entered into a three-year agreement with ActiveState Tool Corp. to fund development of Perl, most of which will be released as open source code. The intention of the agreement is to improve Perl on the Windows platform. ActiveState will add features previously missing from Windows ports of Perl, such as an implementation of &lt;em&gt;fork&lt;/em&gt;, as well as full support for Unicode on Windows platforms, a key feature for international users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_06_activestate/aslogo.gif&#34; width=&#34;136&#34; height=&#34;60&#34; /&gt;Dick Hardt of ActiveState believes that this announcement represents a formal endorsement of Perl by Microsoft, which should help Perl gain greater recognition. &amp;ldquo;Microsoft&amp;rsquo;s main motive,&amp;rdquo; he said, &amp;ldquo;is to improve interoperability between Unix and Windows.&amp;rdquo; The announcement can also be viewed as Microsoft getting its feet wet with supporting Open Source software on Windows. Yet Hardt knows that some are leery of Microsoft&amp;rsquo;s interest in Perl, especially in light of Sun&amp;rsquo;s battle with Microsoft over Java. He insists that the examples of Java and Perl are very different. &amp;ldquo;We are not producing &amp;lsquo;Microsoft Perl&amp;rsquo; under this deal,&amp;rdquo; said Hardt. &amp;ldquo;It won&amp;rsquo;t become a Microsoft product. In addition, the Unix and Windows versions of Perl will not diverge. They will continue to be produced from the same core source code.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Gurusamy Sarathy, one of the original developers of the Windows port of Perl who now works for ActiveState, said that he felt comfortable with the arrangement. &amp;ldquo;Microsoft is interested in the end result, not in controlling the development process,&amp;rdquo; he said. Hardt added that Microsoft has been funding Perl development through ActiveState since 1995. The current agreement is a sign that the relationship has been a good one.&lt;/p&gt;

&lt;p&gt;According to ActiveState, the new development will applied in the following areas: �&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extend Perl&amp;rsquo;s support for Unicode to all system calls so that Perl can interface with file names and environment variables as Unicode data.&lt;/li&gt;
&lt;li&gt;provide a functionally equivalent implementation of fork, a Unix system call which does not exist on NT systems. �&lt;/li&gt;
&lt;li&gt;improve the performance of Perlscript by saving the state of a compiled script for a subsequent script. This will help Perl match VBscript and JavaScript performance in the ASP environment.&lt;/li&gt;
&lt;li&gt;add support for the new Microsoft installer, which is a requirement for Windows 2000 compatibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, visit &lt;a href=&#34;http://www.activestate.com/&#34;&gt;www.activestate.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

