<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 Internals Closures on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-6-internals-closures/</link>
    <description>Recent content in Perl 6 Internals Closures on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Sep 2001 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-6-internals-closures/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week on Perl 6 (26 August - 1 September 2001)</title>
      <link>http://localhost:1313/pub/2001/09/p6pdigest/20010901.html/</link>
      <pubDate>Sat, 01 Sep 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/09/p6pdigest/20010901.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6 News&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Expunge_Implicit___Passing&#34;&gt;Expunge Implicit &lt;code&gt;@_&lt;/code&gt; Passing&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Finalization_and_Deterministic_Destruction&#34;&gt;Finalization and Deterministic Destruction&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Multiple_Dispatch_on_Objects&#34;&gt;Multiple Dispatch on Objects&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Program_Metadata&#34;&gt;Program Metadata&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#_versus_&#34;&gt;&lt;code&gt;!&amp;lt;&lt;/code&gt; versus &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Parroty_Bits&#34;&gt;Parroty Bits&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Perl 6 lists saw a little more traffic during this week: 137 messages across 19 threads, with 40 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-expunge-implicit-passing-expunge-implicit-passing-span&#34;&gt;&lt;span id=&#34;Expunge_Implicit___Passing&#34;&gt;Expunge Implicit &lt;code&gt;@_&lt;/code&gt; Passing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(22 posts) This topic from &lt;a href=&#34;http://localhost:1313/pub/2001/08/p6pdigest/20010818.html#Perl_6_Language&#34;&gt;two weeks ago&lt;/a&gt; came up again, as Ken Fox &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08070.html&#34;&gt;mentioned&lt;/a&gt; its use in redirectors. Michael Schwern suggested using &lt;code&gt;goto &amp;amp;code&lt;/code&gt; instead, and provided this final justification:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not just $method-&amp;gt;(@_); or &amp;amp;{$method}(@_); or goto $method?&lt;/p&gt;

&lt;p&gt;Any time you want to implicitly pass @_, you can just as easily *explicitly* pass it or use goto. As we&amp;rsquo;re not doing pass-throughs all over the place, it&amp;rsquo;s not the sort of thing you want implicit, as opposed to, say $_.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(This thread then &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08082.html&#34;&gt;devolved&lt;/a&gt; into a general debate on the usefulness of Java final classes.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-finalization-and-deterministic-destruction-finalization-and-deterministic-destruction-span&#34;&gt;&lt;span id=&#34;Finalization_and_Deterministic_Destruction&#34;&gt;Finalization and Deterministic Destruction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) Hong Zhang, however, did &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08089.html&#34;&gt;branch off&lt;/a&gt; and talk about the differentiation between finalization and destruction. There were then quite a few posts lamenting the demise of deterministic destruction with the move away from ref counting towards a more complex garbage collection scheme.&lt;/p&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08106.html&#34;&gt;pointed out&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GC has nothing to do with finalization. Many people want it to, and seem to conflate the two, but they&amp;rsquo;re separate. Dead object detection and cleanup doesn&amp;rsquo;t have to be tied to memory GC. It won&amp;rsquo;t be in perl 6. The perl 6 engine will guarantee whatever cleanup/finalization order and timliness that Larry puts into the language definition. That&amp;rsquo;s not a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-multiple-dispatch-on-objects-multiple-dispatch-on-objects-span&#34;&gt;&lt;span id=&#34;Multiple_Dispatch_on_Objects&#34;&gt;Multiple Dispatch on Objects&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) The first of two threads on multiple dispatch started &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08110.html&#34;&gt;here&lt;/a&gt;, with two examples &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08113.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08114.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was talk about whether it was an OO technique, how it should work with the dynamicness of Perl, and what the best, most efficient manner of implementing multimethod dispatch is. In the end, Perl will support some form of pluggable multimethod dispatcher, although that was about all that was agreed upon.&lt;/p&gt;

&lt;p&gt;(10 posts) The &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08127.html&#34;&gt;second thread&lt;/a&gt; decoupled multiple dispatch from objects, creating what it essentially subroutine overloading (by signature).&lt;/p&gt;

&lt;h3 id=&#34;span-id-program-metadata-program-metadata-span&#34;&gt;&lt;span id=&#34;Program_Metadata&#34;&gt;Program Metadata&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(15 posts) I &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08129.html&#34;&gt;mentioned&lt;/a&gt; a few pieces of metadata that I would like access to from within a Perl 6 program. The bulk of the thread was about how to &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08132.html&#34;&gt;access&lt;/a&gt; the source of a script from within a script in Perl 5.&lt;/p&gt;

&lt;h3 id=&#34;span-id-versus-versus-span&#34;&gt;&lt;span id=&#34;_versus_&#34;&gt;&lt;code&gt;!&amp;lt;&lt;/code&gt; versus &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(7 posts) Raptor &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08151.html&#34;&gt;suggested&lt;/a&gt; adding &lt;code&gt;!&amp;gt;&lt;/code&gt; and &lt;code&gt;!&amp;lt;&lt;/code&gt; to the logical operators as Another Way To Do It. Reactions were mixed, but no technical reason was given why it couldn&amp;rsquo;t be. (It should be noted that in tri-state logic, where he saw this, &lt;code&gt;!&amp;lt;&lt;/code&gt; is not the same as &lt;code&gt;&amp;gt;=&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens and Dan Sugalski are finishing up the seed code for the Parrot interpreter base.&lt;/p&gt;

&lt;p&gt;Dan:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The broad design of the Parrot internals is sufficiently complete to start implementing parts, and we are. We&amp;rsquo;ve the first cut core of an interpreter and, while I figure we&amp;rsquo;ll probably rewrite the thing at least once before final release, it runs. You can now write code in Parrot assembler, assemble it, and run the results.&lt;/p&gt;

&lt;p&gt;Most of the defined opcodes don&amp;rsquo;t have corresponding code for them, so it&amp;rsquo;s limited at the moment to integer and float operations with some control flow (branch, jump, and if) but more will be on the way soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simon:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve been sitting down and writing bits of Perl 6 (I&amp;rsquo;m working primarily on the string functions at the moment, because I can do that without getting in Dan&amp;rsquo;s hair too much) and also collecting our thoughts on the interpreter into documents that will specify the API and as much of the Grand Design as people need to know to be able to start helping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next phase of Parrot will be a code review - for the Perl internals community to poke and prod and make sense of what Dan and Simon have done. The community will provide feedback, and Dan and Simon will disappear for a brief period, before the code is opened up for development.&lt;/p&gt;

&lt;p&gt;After going public, work will mostly progress according to Dan&amp;rsquo;s To Do list.&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The last I heard, the next pair of stone tablets from Larry Wall and Damian Conway are coming down the mountain. That&amp;rsquo;s my story, and I&amp;rsquo;m sticking to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (19 - 25 August 2001)</title>
      <link>http://localhost:1313/pub/2001/08/p6pdigest/20010825.html/</link>
      <pubDate>Mon, 27 Aug 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p6pdigest/20010825.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6 News&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#Closures&#34;&gt;Closures&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Method_Signatures&#34;&gt;Method Signatures&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Foobar&#34;&gt;Foo::$bar&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Perl_6_Internals_Yes_There_Are_Some&#34;&gt;Perl 6 Internals (Yes, There Are Some...)&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#More_Modules&#34;&gt;More Modules&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another quiet week, with only 52 messages. 22 authors contributed to 10 threads.&lt;/p&gt;

&lt;h3 id=&#34;span-id-closures-closures-span&#34;&gt;&lt;span id=&#34;Closures&#34;&gt;Closures&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(17 posts) Dave Mitchell &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08032.html&#34;&gt;started&lt;/a&gt; the debate on whether closures should be explicitly declared, by way of having lexical variables not import into nested blocks implicitly. Some areas of discussion centered around whether &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08043.html&#34;&gt;named subs are closures&lt;/a&gt;, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08034.html&#34;&gt;closures are ever created accidentally&lt;/a&gt;, and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08038.html&#34;&gt;the current behavior is correct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dave further provided some insight into &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08039.html&#34;&gt;how closures actually work&lt;/a&gt;, to help explain his point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the $x:&lt;/p&gt;

&lt;p&gt;foo() is a closure created at compile time. By the time the main {} block has been executed (but before foo() is called), the $outer:x is undef, and $foo:x is &amp;lsquo;bar&amp;rsquo; (standard closure stuff). When foo() is executed, the anon sub is cloned, and at that time, $anon:x is set from from foo&amp;rsquo;s pad, so it gets &amp;lsquo;bar&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Without the $x:&lt;/p&gt;

&lt;p&gt;foo is no longer a closure - ie it doesnt have a private copy of $x in its pad. At cloning time, sub {$x} picks up its value of $x from $outer:x, since there isn&amp;rsquo;t a $x in foo&amp;rsquo;s pad - thus it picks up &amp;lsquo;undef&amp;rsquo; from $outer:x that went out of scope a while ago.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-method-signatures-method-signatures-span&#34;&gt;&lt;span id=&#34;Method_Signatures&#34;&gt;Method Signatures&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(12 posts) Damian Conway &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08052.html&#34;&gt;answered&lt;/a&gt; last week&amp;rsquo;s question on whether subroutine signatures will apply to methods in Perl 6. There was some subsequent debate on how strict Perl&amp;rsquo;s optional typing would need to be, and how easily it would still be to circumvent through regular Perl magic.&lt;/p&gt;

&lt;h3 id=&#34;span-id-foobar-foo-bar-span&#34;&gt;&lt;span id=&#34;Foobar&#34;&gt;&lt;code&gt;Foo::$bar&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(2 posts) Brent Dax &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08060.html&#34;&gt;asked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was thinking about Perl 6 today, and thought of something: if the sigil is now part of a variable&amp;rsquo;s name, does that mean that $Foo::bar should actually be Foo::$bar in Perl 6?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael Schwern&amp;rsquo;s &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08063.html&#34;&gt;thinking&lt;/a&gt;was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Techincally &amp;lsquo;bar&amp;rsquo; is shorthand for the complete name, &amp;lsquo;Foo::bar&amp;rsquo;. So &amp;lsquo;$Foo::bar&amp;rsquo; would remain.&lt;/p&gt;

&lt;p&gt;Besides, Foo::$bar looks funny.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-perl-6-internals-yes-there-are-some-perl-6-internals-yes-there-are-some-span&#34;&gt;&lt;span id=&#34;Perl_6_Internals_Yes_There_Are_Some&#34;&gt;Perl 6 Internals (Yes, There Are Some&amp;hellip;)&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(5 posts) Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03459.html&#34;&gt;announced&lt;/a&gt; that he&amp;rsquo;s got code:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve got the rudiments of the parrot interpreter and assembler built and running. (I get around 23M ops/sec on a 700MHz Alpha EV6) I&amp;rsquo;m beating it up enough to get it into a reasonably released state, so while I&amp;rsquo;m doing that&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simon Cozens made &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03461.html&#34;&gt;this suggestion&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On an unrelated note, and seeing Dan [and] Bryan&amp;rsquo;s experiments with different kinds of switch/dispatch, I think it makes sense to separate out ops which correspond to PMC vtable functions (add, subtract, etc.) and those which don&amp;rsquo;t. Those which do can be done with a switch to save a function call, and those which don&amp;rsquo;t can use function pointers. This achieves the same objective as auto-generating op wrappers around vtable functions, (saving one level of indirection) while leveraging the gain from a split-level op despatch loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-more-modules-more-modules-span&#34;&gt;&lt;span id=&#34;More_Modules&#34;&gt;More Modules&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(7 posts) John Siracusa &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00187.html&#34;&gt;continued&lt;/a&gt; the discussion on the Perl 6 module plan, calling for more conformity in APIs, and deepening the namespace heirarchy.&lt;/p&gt;

&lt;p&gt;Kirrily Robert &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00191.html&#34;&gt;pointed&lt;/a&gt; to some work she&amp;rsquo;s been doing on the &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/&#34;&gt;perl5-porters&lt;/a&gt; list - &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg62256.html&#34;&gt;perlmodstyle&lt;/a&gt; - in preparation for Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We should be seeing Apocalypse 3 (Larry Wall) and Exegesis 3 (Damian Conway) sometime this week, if things are on schedule. Nathan Torkington is currently &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03467.html&#34;&gt;evaluating&lt;/a&gt;&lt;a href=&#34;http://sourceforge.net/&#34;&gt;SourceForge&lt;/a&gt; as the Perl 6 code repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d like to keep the code on Sourceforge from the get-go. I don&amp;rsquo;t have much experience with Sourceforge, though, and would like to talk to someone who has. Which bits work well? Which bits aren&amp;rsquo;t worth the effort? Any tips or tricks to pass on?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;ve got some opinions, pass them on to &lt;a href=&#34;mailto:gnat@oreilly.com&#34;&gt;Nat&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

