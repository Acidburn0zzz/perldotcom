<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mvc on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/mvc/</link>
    <description>Recent content in Mvc on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2018 10:36:08 +0000</lastBuildDate>
    <atom:link href="/tags/mvc/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl and CGI</title>
      <link>http://localhost:1313/article/perl-and-cgi/</link>
      <pubDate>Mon, 12 Nov 2018 10:36:08 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-and-cgi/</guid>
      <description>

&lt;p&gt;CGI stands for &lt;a href=&#34;https://tools.ietf.org/html/rfc3875#section-6.2.1&#34;&gt;Common Gateway Interface&lt;/a&gt;, it&amp;rsquo;s a protocol for executing scripts via web requests, and in the late 1990&amp;rsquo;s was the main way to write dynamic programs for the Web. It&amp;rsquo;s also the name of the Perl &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;module&lt;/a&gt; we used (and for me, still use) to code for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; you probably don&amp;rsquo;t want to use CGI for modern web development, see &lt;a href=&#34;#why-not-to-use-cgi&#34;&gt;Why Not to Use CGI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-and-http&#34;&gt;CGI and HTTP&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of HTTP (HyperText Transfer Protocol), which is the communications protocol used by most Internet services. Broadly speaking, CGI programs receive HTTP requests, and return HTTP responses. An HTTP response header must include the status and the content-type. CGI (the interface) makes this easy.&lt;/p&gt;

&lt;p&gt;We could hardcode a Perl script to return an HTTP response header and HTML in the body:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
Status: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But CGI.pm can handle the header for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you don&amp;rsquo;t have to just send HTML text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
This is now text
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that is not the limit, by far. The content-type is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;Multipurpose Internet Mail Extension (MIME) type&lt;/a&gt;, and it determines how the browser handles the message once it returns. The above example treats the &amp;ldquo;This is now text&amp;rdquo; message as text, and displays it as such. If the content-type was &amp;ldquo;text/html&amp;rdquo;, it would be parsed for HTML like a web page. If it was &amp;ldquo;application/json&amp;rdquo;, it might be displayed like text, or formatted into a browsable form, depending on your browser or extensions. If it was &amp;ldquo;application/vnd.ms-excel&amp;rdquo; or even &amp;ldquo;text/csv&amp;rdquo;, the browser would likely open in in Excel or another spreadsheet program, or possibly directly into a gene sequencer, like happens to those I generate at work.&lt;/p&gt;

&lt;p&gt;And, if the program was this &amp;ndash;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpg&amp;#39;&lt;/span&gt; );
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/user/images/author/dave-jacoby.jpg&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$img&amp;gt;&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;ndash; you would get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/author/dave-jacoby.jpg&#34; alt=&#34;/images/author/dave-jacoby.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;processing-input&#34;&gt;Processing input&lt;/h2&gt;

&lt;p&gt;The first way to pass data is with the query string, (the portion of a URI beginning with &lt;code&gt;?&lt;/code&gt;), which you see in URLs like &lt;code&gt;https://example.com/?foo=bar&lt;/code&gt;. This uses the &amp;ldquo;GET&amp;rdquo; request method, and becomes available to the program as &lt;code&gt;$ENV-&amp;gt;{QUERY_STRING}&lt;/code&gt;, which in this case is &lt;code&gt;foo=bar&lt;/code&gt; (CGI programs receive their arguments as environment variables). But CGI provides the &lt;code&gt;param&lt;/code&gt; method which parses the query string into key value pairs, so you can work with them like a hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param($_) } $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param() ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qq{PARAM:\N}&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $k ( sort keys %param ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, $k, $param{$k};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;# PARAM:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# foo: bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, now, let&amp;rsquo;s make a web page like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/url/of/simple.cgi&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And click submit. The browser will send an HTTP &amp;ldquo;POST&amp;rdquo; request, with the form input as key value pairs in the request body. CGI handles this and places the data in &lt;code&gt;$cgi-&amp;gt;param&lt;/code&gt;, just like with &amp;ldquo;GET&amp;rdquo;. Only, with &amp;ldquo;POST&amp;rdquo; the size of input can be much larger (URL&amp;rsquo;s are generally limited to 2048 bytes by browsers).&lt;/p&gt;

&lt;h2 id=&#34;generating-html&#34;&gt;Generating HTML&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make that form above, using the HTML-generation techniques that come with CGI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output;
$output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start_form(
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/simple.cgi&amp;#34;&lt;/span&gt;
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;textfield( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_form;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with this, is the code to generate HTML with CGI can get very long and unreadable. The maintainers of CGI agree, which is why this is at the top of &lt;a href=&#34;https://metacpan.org/pod/CGI#HTML-Generation-functions-should-no-longer-be-used&#34;&gt;the documentation for CGI.pm&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All HTML generation functions within CGI.pm are no longer being maintained. [&amp;hellip;] The rationale for this is that the HTML generation functions of CGI.pm are an obfuscation at best and a maintenance nightmare at worst. You should be using a template engine for better separation of concerns. See &lt;a href=&#34;https://metacpan.org/pod/CGI::Alternatives&#34;&gt;CGI::Alternatives&lt;/a&gt; for an example of using CGI.pm with the &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Template Toolkit, that form might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Template;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;DATA&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/url/of/program&amp;#39;&lt;/span&gt;} ;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;
$template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;process(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$input,$data)
    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Template process failed&amp;#34;&lt;/span&gt;, $template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error();

__DATA__
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[% action %]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use Template Toolkit for all my server-side web work. It&amp;rsquo;s also the default in many of Perl&amp;rsquo;s web frameworks.&lt;/p&gt;

&lt;h2 id=&#34;configuring-cgi-on-apache&#34;&gt;Configuring CGI on Apache&lt;/h2&gt;

&lt;p&gt;To use CGI, your web server should have &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_cgi.html&#34;&gt;mod_cgi&lt;/a&gt; installed. Once installed, you will have to to configure your server to execute CGI programs.&lt;/p&gt;

&lt;p&gt;The first way is to have &lt;code&gt;cgi-bin&lt;/code&gt; directories where every file gets executed instead of transferred.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www/cgi-bin&amp;quot;&amp;gt;
    Options ExecCGI
    SetHandler cgi-script
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other is to allow CGI to be enabled per directory, with a configuration that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www&amp;quot;&amp;gt;
    Options +ExecCGI
    AddHandler cgi-script .cgi
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add a &lt;code&gt;.htaccess&lt;/code&gt; file in each directory that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler cgi-script .cgi
Options +ExecCGI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that &lt;code&gt;foo.pl&lt;/code&gt; will transfer but &lt;code&gt;foo.cgi&lt;/code&gt; will run, even if both are executable.&lt;/p&gt;

&lt;h2 id=&#34;why-not-to-use-cgi&#34;&gt;Why not to use CGI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg202130.html&#34;&gt;In May 2013, Ricardo Signes, then Perl5 Pumpking, sent this to the Perl5 Porters list&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it&amp;rsquo;s time to seriously consider removing CGI.pm from the core distribution. It is no longer what I&amp;rsquo;d point &lt;em&gt;anyone&lt;/em&gt; at for writing &lt;em&gt;any&lt;/em&gt; sort of web code. It is in the core, as far as I know, because once it was the state of the art, and a major reason for many people to use the language. I don&amp;rsquo;t think either is true now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was marked deprecated with 5.20 and removed from Core with 5.22. This is not catastrophic; it is still available in CPAN, so you would have to install it, or have your administrator install it, depending on your circumstances.&lt;/p&gt;

&lt;p&gt;So, why did CGI drop from &amp;ldquo;state of the art&amp;rdquo; to discouraged by its own maintainers?&lt;/p&gt;

&lt;p&gt;There are two big issues with CGI: speed and complexity. Every HTTP request triggers the forking of a new process on the web server, which is costly for server resources. A more efficient and faster way is to use a multi-process daemon which does its forking on startup and maintains a pool of processes to handle requests.&lt;/p&gt;

&lt;p&gt;CGI isn&amp;rsquo;t good at managing the complexity of larger web applications: it has no MVC architecture to help developers separate concerns. This tends to lead to hard-to-maintain programs.&lt;/p&gt;

&lt;p&gt;The rise of web frameworks such as Ruby on Rails, and the application servers they run on, have done much to solve both problems. There are many web frameworks written in Perl; among the most popular are &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Manual&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CGI also contains a security &lt;a href=&#34;https://metacpan.org/pod/distribution/CGI/lib/CGI.pod#Fetching-the-value-or-values-of-a-single-named-parameter&#34;&gt;vulnerability&lt;/a&gt; which must be coded around to avoid parameter injection.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;good&amp;rdquo; parts of CGI.pm, the header creation and parameter parsing, are well-explained in the module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;documentation&lt;/a&gt;. As for the deprecated HTML generation functions, they are documented &lt;a href=&#34;https://metacpan.org/pod/CGI::HTML::Functions&#34;&gt;separately&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lincoln Stein, the creator of CGI.pm also wrote the &lt;a href=&#34;https://www.amazon.com/Official-Guide-Programming-CGI-pm-Lincoln/dp/0471247448&#34;&gt;Official Guide&lt;/a&gt;. The book is 20 years old, and out of date but remains a clear and concise resource about CGI.pm.&lt;/p&gt;

&lt;p&gt;Lee Johnson, the current maintainer of CGI.pm wrote a long form blog &lt;a href=&#34;https://leejo.github.io/2016/02/22/all_software_is_legacy/&#34;&gt;post&lt;/a&gt; about the history of CGI, its current state and future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Dancer2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-application&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MANIFEST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SKIP
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;views
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;_index_route&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;MyApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;environments
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;production&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;public
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;favicon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ico
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fcgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;jquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;js
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets start the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dancer2 v0&lt;span style=&#34;color:#ae81ff&#34;&gt;.143000&lt;/span&gt; server &lt;span style=&#34;color:#ae81ff&#34;&gt;435&lt;/span&gt; listening on http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-static-site&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;page&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;requisites&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cat urls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; xargs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;P16 wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generate static websites from dynamic Perl web apps</title>
      <link>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</link>
      <pubDate>Tue, 15 Jul 2014 12:26:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Static websites aren&amp;rsquo;t suitable for every situation, but they have several advantages over dynamic apps; they&amp;rsquo;re more efficient, more secure and simpler to deploy. That said, developing and maintaining a static site is a pain, there&amp;rsquo;s just too much repetitive boilerplate code. Enter &lt;a href=&#34;https://metacpan.org/pod/wallflower&#34;&gt;Wallflower&lt;/a&gt;, it generates static websites from PSGI compatible Perl web applications. You get the best of both worlds: develop the routes, templates and unit tests in your favourite web framework but deploy it as a static website with Wallflower.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=App-Wallflower+1.004&#34;&gt;results&lt;/a&gt; for the latest version (v1.004) of App::Wallflower show it runs on just about any Perl and operating system, including Windows. You can install it from CPAN by going to the command line and typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::Wallflower&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wallflower-in-action&#34;&gt;Wallflower in action&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple application using &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a skeleton application for us. Now change into the root application directory and create a new directory to hold the static files, we&amp;rsquo;ll call it &amp;ldquo;static&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd MyApp
$ mkdir static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s all we need to generate the static site with wallflower:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wallflower &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;d static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wallflower will request the application root page (&amp;lsquo;/&amp;rsquo;) and spider all links it finds from there, copying the files to the static folder. This includes files referenced in your html and css, such as JavaScript files. If your app has links to all of its pages, this is all you need.&lt;/p&gt;

&lt;h3 id=&#34;test-the-static-site-with-nginx&#34;&gt;Test the static site with nginx&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s deploy the site with nginx locally (you&amp;rsquo;ll need nginx installed for this). First create the virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;server {
    listen &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
    server_name localhost;
    root &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#e6db74&#34;&gt;/MyApp/s&lt;/span&gt;tatic;
    location &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; {
        index index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html;
        rewrite &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/$ /i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html break;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming a unix-like platform, save the virtual host file to &amp;ldquo;/etc/nginx/sites-available/localhost&amp;rdquo;. Next enter these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ sudo cp static &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ cd &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/&lt;/span&gt;nginx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sites&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enabled
$ sudo ln &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/sites-available/&lt;/span&gt;localhost&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to start nginx. On RHEL/Fedora/CentOS you can start nginx with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Ubuntu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo service nginx start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now check out the site at &lt;a href=&#34;http://localhost:&#34;&gt;http://localhost:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/102/dancer2.png&#34; alt=&#34;The default Dancer app - statically deployed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty good to me!&lt;/p&gt;

&lt;h3 id=&#34;wallflower-tips&#34;&gt;Wallflower Tips&lt;/h3&gt;

&lt;p&gt;A few things I&amp;rsquo;ve found whilst using Wallflower:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use absolute urls over relative ones. So if you host your font files in your css directory, use: &amp;ldquo;/css/MyFont.ttf&amp;rdquo; instead of &amp;ldquo;MyFont.ttf&amp;rdquo; in your css files.&lt;/li&gt;
&lt;li&gt;Think about files you use but aren&amp;rsquo;t directly linked to in your app&amp;rsquo;s HTML pages, the sitemap.xml file for example. Feed urls for these files to Wallflower with the -F option.&lt;/li&gt;
&lt;li&gt;Watch out for urls in commented code as Wallflower will copy these too!&lt;/li&gt;
&lt;li&gt;The Wallflower docs recommend using extensions in your urls to ensure the correct content-type is set. I found this wasn&amp;rsquo;t required when I deployed the files with nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you prefer developing applications with Catalyst, Dancer or Mojolicious, Wallflower is a useful tool that can be incorporated into your development and deployment process. For further examples of Wallflower in action, check out the &lt;a href=&#34;https://metacpan.org/pod/Wallflower::Tutorial&#34;&gt;tutorial&lt;/a&gt; and advent calendar &lt;a href=&#34;http://www.perladvent.org/2012/2012-12-22.html&#34;&gt;entry&lt;/a&gt; by Wallflower creator Philippe Bruhat (BooK).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/ruthanddave/9432335346/in/photolist-9YgULK-6CwkPH-m68vYZ-4P7TsV-4Pc9dL-7UqEXc-8rbEQq-mPFbgf-Hw6fU-2JcQ24-7ZdMJc-5q1xn5-fnvbFu-fpNhu5-bY6j7J-6HC9cQ-7Y666Z-4RGjZ5-c5bJ5A-5Ma2Kx-7UshUJ-buamir-qLy2D-26mzb-nUfKdk-818aoT-4ne9U5-azaNvR-c7Ztsj-sbu9W-4hrgcG-8r8yrv-hdmVrd-a72iqb-4Kebyi-aEpfqd-6cdRLZ-7iqNqm-6XsteA-b8crZZ-ubPgJ-8pBxDZ-6R63RH-6AnSCX-byKj2-8b97G8-d6X7B-dddPtT-6pUqhf-ejhHg3|&#34;&gt;Ruth Hartnup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/85/catalyst%20dependencies.png&#34; alt=&#34;Catalyst framework&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/images/85/dancer2%20dependencies.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
$ make
$ make test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3374&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.16&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;172.95&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;4.56&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;178.52&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.38&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.07&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19.68&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.46&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21.59&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/&lt;/span&gt;SecApp_login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::cpanminus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd SecApp_login
$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;installdeps &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Working on &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Configuring SecApp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; Installed dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; Finishing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;secapp_server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl 
HTTP::Server::PSGI: Accepting connections at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_welcome.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_credentials.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_landing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst &lt;span style=&#34;color:#e6db74&#34;&gt;qw/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Static::Simple
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Authentication
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::Store::File
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::State::Cookie
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable X-Catalyst header&lt;/span&gt;
enable_catalyst_header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this method will be called everytime&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt; :Private {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# 404 unless https/testing &amp;amp; request method is GET/HEAD/POST&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;( ( $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secure &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &lt;span style=&#34;color:#e6db74&#34;&gt;/^(?:GET|HEAD|POST)$/&lt;/span&gt;, $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method )
        {
            $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;detach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;);
        }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; : ActionClass(&amp;#39;RenderView&amp;#39;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t require TLS for testing&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt; :Chained(&amp;#39;/&amp;#39;) PathPart(&amp;#39;login&amp;#39;) CaptureArgs(0) {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication code&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication failed, load the login form&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_form&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) GET {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# load the login template&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(template &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.tt&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_columns(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                passphrase &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rfc2307&amp;#39;&lt;/span&gt;,
                passphrase_class &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BlowfishCrypt&amp;#39;&lt;/span&gt;,
                passphrase_args &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
                    salt_random &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                },
                passphrase_check_method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_password&amp;#39;&lt;/span&gt;,
            });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_response 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_response_field};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_challenge 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_challenge_field};

  &lt;span style=&#34;color:#75715e&#34;&gt;# proceed if config has switched off CAPTCHA, or if the submission is valid, proceed&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{enabled} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; Captcha::reCAPTCHA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;check_answer(
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{private_key},
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;address,
                   $captcha_challenge,
                   $captcha_response)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{is_valid})
  {
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password};

    &lt;span style=&#34;color:#75715e&#34;&gt;# if username and passwords were supplied, authenticate&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $password) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;authenticate({ username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username,
                             password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $password } ))
      {
      &lt;span style=&#34;color:#75715e&#34;&gt;# authentication success, check user active and redirect to the secure landing page&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_object&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;active) {
          $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;uri_for($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;controller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;action_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;landing&amp;#39;&lt;/span&gt;)));
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad username or password.&amp;#34;&lt;/span&gt;);
      }
    }
  }
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ilib t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-prevent-brute-force-attacks&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_catpcha.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl web application security - HTTP headers</title>
      <link>http://localhost:1313/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</link>
      <pubDate>Mon, 31 Mar 2014 12:27:39 +0000</pubDate>
      
      <guid>http://localhost:1313/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</guid>
      <description>

&lt;p&gt;&lt;em&gt;HTTP headers are included in every HTTP response from a web server. Setting the appropriate HTTP headers can reduce the risk of man-in-the-middle and cross-site-scripting attacks on a web application. You can also reduce information leaks about the web application configuration - vital data that gives a would-be attacker clues about potential vulnerabilities. Read on to find out how to set the appropriate headers in your Perl web application.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;All three of major Perl web frameworks provide some kind of identifying header. Dancer and Mojolicious use &amp;ldquo;X-Powered-By&amp;rdquo; and Catalyst uses &amp;ldquo;X-Catalyst&amp;rdquo;. The problem with this header is it informs the requester the language of the application (Perl) and the web framework being used. In some cases it also reveals the version number. With this information a would-be attacker can focus on exploits that are specific to Perl or the web framework. Here&amp;rsquo;s how you can disable it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default Catalyst does not turn on its application header. The header is controlled by the &amp;ldquo;enable_catalyst_header&amp;rdquo; config option, normally located in the root application class (e.g. lib/MyApp.pm) or the application config file.&lt;/li&gt;
&lt;li&gt;Mojolicious does not set this header since &lt;a href=&#34;https://github.com/kraih/mojo/blob/b5da0c7afcdd793c85e8e2a67eb29f7f36bdb601/Changes#L538&#34;&gt;version 4.00&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dancer (and Dancer2) use the &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Config#no_server_tokens-(boolean)&#34;&gt;server tokens&lt;/a&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Web servers often broadcast information about themselves by default. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Server: nginx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.4.6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is risky for the same reason that revealing information about the underlying Perl web application is. To disable the server header in nginx, just add this line to your nginx.conf or virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;server_tokens off;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Apache 1.3x add these lines to your virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ServerTokens Prod
ServerSignature Off&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Apache 2.x, these lines will load the mod_headers module, and remove the server header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;LoadModule headers_module &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;lib&lt;span style=&#34;color:#e6db74&#34;&gt;/apache/mo&lt;/span&gt;dules&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mod_headers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;so
Header unset Server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the major Perl web frameworks ship with web servers that set the server header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
Server: HTTP::Server::PSGI

&lt;span style=&#34;color:#75715e&#34;&gt;# mojolicious&lt;/span&gt;
Server: Mojolicious (Perl)

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer&lt;/span&gt;
Server: Perl Dancer &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3121&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These headers can be overwritten within the application code. For instance, if we wanted to change the server to appear to be nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-frame-options&#34;&gt;X-Frame-Options&lt;/h3&gt;

&lt;p&gt;This header can prevent your application responses from being loaded within frame or iframe HTML elements (see the &lt;a href=&#34;http://tools.ietf.org/html/rfc7034&#34;&gt;spec&lt;/a&gt;). This is to prevent clickjacking requests where your application response is displayed on another website, within an invisible iframe, which then hijacks the user&amp;rsquo;s request when they click a link on your website. Here&amp;rsquo;s how to disable it in the respective web frameworks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;strict-transport-security&#34;&gt;Strict-Transport-Security&lt;/h3&gt;

&lt;p&gt;This header instructs the requester to load all content from the domain via HTTPS and not load any content unless there is a valid ssl certificate. This header can help prevent man-in-middle attacks as it ensures that all HTTP requests and responses are encrypted. The Strict-Transport-Security header has a max-age parameter that defines how long in seconds to enforce the policy for. Here&amp;rsquo;s how to add it to your Perl web application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;content-security-policy&#34;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;The CSP header sets a whitelist of domains from which content can be safely loaded. This prevents most types of XSS attack, assuming the malicious content is not hosted by a whitelisted domain. For example this line specifies that all content should only be loaded from the responding domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Security&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Policy: default&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;src &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy%0A&#34;&gt;a lot to CSP&lt;/a&gt; (&lt;a href=&#34;http://www.w3.org/TR/CSP/&#34;&gt;spec&lt;/a&gt;) and browser support is &lt;a href=&#34;http://caniuse.com/#feat=contentsecuritypolicy&#34;&gt;fairly good&lt;/a&gt;. One downside to the whitelist approach is it&amp;rsquo;s not compatible with ad services like Google&amp;rsquo;s adsense as you won&amp;rsquo;t know the domains in advance in order to whitelist them. To set the header in your facourite Perl web application, use on of these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-content-type-options&#34;&gt;X-Content-Type-Options&lt;/h3&gt;

&lt;p&gt;This is an IE only header that is used to disable mime sniffing. The vulnerability is that IE will auto-execute any script code contained in a file when IE attempts to detect the file type. This is disabled by default in IE anyway, but to enforce it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-download-options&#34;&gt;X-Download-Options&lt;/h3&gt;

&lt;p&gt;This is another IE-only header that prevents IE from opening an HTML file directly on download from a website. The security issue here is, if a browser opens the file directly, it can run as if it were part of the site. To add this header, use one of these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-xss-protection&#34;&gt;X-XSS-Protection&lt;/h3&gt;

&lt;p&gt;This is the final IE-only header. It was introduced in IE8 as part of the cross-site-scripting (XSS) filter functionality (more &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx&#34;&gt;here&lt;/a&gt;). The header can force IE to turn on its XSS filter. Additionally it has an optional setting called &amp;ldquo;mode&amp;rdquo; that can force IE to block the entire page if an XSS attempt is detected. Here&amp;rsquo;s how to add it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;adding-headers-in-the-web-server&#34;&gt;Adding headers in the web server&lt;/h3&gt;

&lt;p&gt;You may prefer to add these headers in the web server configuration, rather than at the application level. For nginx, use the &amp;ldquo;add_header&amp;rdquo; directive - see &lt;a href=&#34;https://gist.github.com/plentz/6737338&#34;&gt;here&lt;/a&gt; for a good example. For Apache use the &amp;ldquo;Header set&amp;rdquo; directive in mod_headers (&lt;a href=&#34;http://moko.ru/doc/apache/mod/mod_headers.html&#34;&gt;1.3&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/docs/2.0/de/mod/mod_headers.html&#34;&gt;2.x&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;testing-the-headers&#34;&gt;Testing the headers&lt;/h3&gt;

&lt;p&gt;tThere are a number of ways to check which headers your application is returning. Firstly you can use curl (replace perltricks.com with the URL to check):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;curl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will return the HTTP headers only:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;HTTP&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
Server: nginx
Date: Mon, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; GMT
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
Connection: keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alive
Cache&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Control: max&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;
X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Frame&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Options: DENY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;a href=&#34;https://securityheaders.com/&#34;&gt;SecurityHeaders.com&amp;rsquo;s&lt;/a&gt; excellent checking tool. Or you can inspect the headers yourself by using your browser&amp;rsquo;s developer mode.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These HTTP headers are easy to add and can make a reduce your application&amp;rsquo;s vulnerability to XSS and man-in-the-middle attacks, particularly for applications that allow users to upload content.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;text=Perl+web+application+security+-+HTTP+headers&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo © &lt;a href=&#34;http://www.flickr.com/photos/rightee/259084010/in/photostream/&#34;&gt;Andy Wright&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates: Mojolicious application header corrected. Web frameworks server header added. (31/3/2014)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reverse Callback Templating</title>
      <link>http://localhost:1313/pub/2008/03/14/reverse-callback-templating.html/</link>
      <pubDate>Fri, 14 Mar 2008 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2008/03/14/reverse-callback-templating.html/</guid>
      <description>

&lt;p&gt;Programmers have long recognized that separating code logic from presentation is good. The Perl community has produced many fine systems for doing just this. While there are many systems, they largely fall within two execution models, &lt;em&gt;pipeline&lt;/em&gt; and &lt;em&gt;callback&lt;/em&gt; (as noted by Perrin Harkins in &lt;a href=&#34;http://localhost:1313/pub/2001/08/21/templating.html&#34;&gt;Choosing a Templating System&lt;/a&gt;). &lt;a href=&#34;https://metacpan.org/pod/HTML::Template&#34;&gt;HTML::Template&lt;/a&gt; and &lt;a href=&#34;http://www.template-toolkit.org/&#34;&gt;Template Toolkit&lt;/a&gt; are in the pipeline category. Their templates consist of simple presentation logic in the form of loops and conditionals and template variables. The Perl program does its work, then loads and renders the appropriate template, as if data were flowing through a pipeline. &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;Mason&lt;/a&gt; and &lt;a href=&#34;http://perl.apache.org/embperl/&#34;&gt;Embperl&lt;/a&gt; fall into the callback category. They mix code in with the template markup, and the template &amp;ldquo;calls back&amp;rdquo; to Perl when it encounters program logic.&lt;/p&gt;

&lt;p&gt;A third execution model exists: the &lt;em&gt;reverse callback&lt;/em&gt; model. Template and code files are separate, just like in the pipeline approach. Instead of using a mini-language to handle display logic, however, the template consists of named sections. Perl executes and calls a specific section of the template at the appropriate time, rendering it. Effectively, this is the opposite of the callback method, which wraps Perl logic around portions (or sections) of a template in a single file. Reverse callback uses Perl statements to load, or call, specific portions of the the template. This approach has a few distinct advantages.&lt;/p&gt;

&lt;h3 id=&#34;a-reverse-callback-example&#34;&gt;A Reverse Callback Example&lt;/h3&gt;

&lt;p&gt;Suppose that you have a simple data structure you are dying to output as pretty HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @goods = (
    &amp;quot;oxfords,Brown leather,\$85,0&amp;quot;,
    &amp;quot;hiking,All sizes,\$55,7&amp;quot;,
    &amp;quot;tennis shoes,Women&#39;s sizes,\$35,15&amp;quot;,
    &amp;quot;flip flops,Colors of the rainbow,\$7,90&amp;quot;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, you need an HTML template with the appropriate sections defined. Sections are of vital importance; they enable &lt;code&gt;Template::Recall&lt;/code&gt; to keep the logic squarely in the code. &lt;code&gt;Template::Recall&lt;/code&gt; uses the default pattern &lt;code&gt;/[\s*=+\s*\w+\s*=+\s*]/&lt;/code&gt; (to match, for example, &lt;code&gt;[==== section_name ====]&lt;/code&gt;) to determine sections in a single file. The start of one section denotes the end of another. This is because &lt;code&gt;Template::Recall&lt;/code&gt; uses a &lt;code&gt;split()&lt;/code&gt; operation based on the above regex, saving the &lt;code&gt;\w+&lt;/code&gt; as the section key in an internal data structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ =================== header ===================]

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;my site - [&#39; title &#39;]&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h4&amp;gt;The date is [&#39; date &#39;]&amp;lt;/h4&amp;gt;



&amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;

    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;Shoe&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Details&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Price&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Quantity&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;

[ =================== product_row =================== ]
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;[&#39; shoe &#39;]&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;[&#39; details &#39;]&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;[&#39; price &#39;]&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;[&#39; quantity &#39;]&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;


[= footer =]
&amp;lt;/table&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This template is quite simple. It has three sections, a &amp;ldquo;header,&amp;rdquo; &amp;ldquo;product_row,&amp;rdquo; and &amp;ldquo;footer.&amp;rdquo; The sections essentially give away how the program logic is going to work. A driver program would call header and footer only once during program execution (start and end, respectively). product_row will be called multiple times during iteration over an array.&lt;/p&gt;

&lt;p&gt;Names contained within the delimeters &lt;code&gt;[&#39;&lt;/code&gt; and &lt;code&gt;&#39;]&lt;/code&gt; are template variables for replacement during rendering. For example, &lt;code&gt;[&#39; date &#39;]&lt;/code&gt; will be replaced by the current date when the program executes.&lt;/p&gt;

&lt;p&gt;The driver code must first instantiate a new Template::Recall object, &lt;code&gt;$tr&lt;/code&gt;, and pass it the path of the template, which I&amp;rsquo;ve saved as the file &lt;em&gt;template1.html&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Template::Recall;

my $tr = Template::Recall-&amp;gt;new( template_path =&amp;gt; &#39;template1.html&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;$tr&lt;/code&gt; created, the template sections are loaded and ready for use. The obvious first step is to render the header section with the &lt;code&gt;render()&lt;/code&gt; method. &lt;code&gt;render()&lt;/code&gt; takes the name of the section to process, and optionally, a hash of names and values to replace in that section. There are two template variables in the header section, &lt;code&gt;[&#39; title &#39;]&lt;/code&gt; and &lt;code&gt;[&#39; date &#39;]&lt;/code&gt;, so the call looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $tr-&amp;gt;render( &#39;header&#39;, { title =&amp;gt; &#39;MyStore&#39;, date =&amp;gt; scalar(localtime) } );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names used in the hash must match the names of the template variables in the section you intend to render. For example, &lt;code&gt;date =&amp;gt; scalar(localtime)&lt;/code&gt; means that &lt;code&gt;[&#39; date &#39;]&lt;/code&gt; in the header section will be dynamically replaced by the value produced by &lt;code&gt;scalar(localtime)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You probably noticed from the template that the header section created the start of an HTML table. This is a fine time to render &lt;code&gt;@goods&lt;/code&gt; as the table&amp;rsquo;s rows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $good (@goods)
{
    my @attr     = split(/,/, $good);
    my $quantity = $attr[3] eq &#39;0&#39; ? &#39;Out of stock&#39; : $attr[3];

    my %row      = (
        shoe     =&amp;gt; $attr[0],
        details  =&amp;gt; $attr[1],
        price    =&amp;gt; $attr[2],
        quantity =&amp;gt; $quantity,
    );

    print $tr-&amp;gt;render(&#39;product_row&#39;, \%row);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In actual code, this array would likely come from a database. For each row, the driver makes necessary logical decisions (such as displaying &amp;ldquo;Out of stock&amp;rdquo; if the quantity equals &amp;ldquo;0&amp;rdquo;), then calls &lt;code&gt;$tr-&amp;gt;render()&lt;/code&gt; to replace the placeholders in the template section with the values from &lt;code&gt;%row&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the driver renders the footer of the HTML output. There are no template variables to replace, so there&amp;rsquo;s no need to pass in a hash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $tr-&amp;gt;render(&#39;footer&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is this nice little output of footwear inventory:&lt;/p&gt;

&lt;h4 id=&#34;the-date-is-fri-aug-10-14-22-30-2007&#34;&gt;The date is Fri Aug 10 14:22:30 2007&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Shoe&lt;/th&gt;
&lt;th&gt;Details&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Quantity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;oxfords&lt;/td&gt;
&lt;td&gt;Brown leather&lt;/td&gt;
&lt;td&gt;$85&lt;/td&gt;
&lt;td&gt;Out of stock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hiking&lt;/td&gt;
&lt;td&gt;All sizes&lt;/td&gt;
&lt;td&gt;$55&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tennis shoes&lt;/td&gt;
&lt;td&gt;Women&amp;rsquo;s sizes&lt;/td&gt;
&lt;td&gt;$35&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;flip flops&lt;/td&gt;
&lt;td&gt;Colors of the rainbow&lt;/td&gt;
&lt;td&gt;$7&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;the-logic-is-in-the-code&#34;&gt;The Logic Is in the Code&lt;/h3&gt;

&lt;p&gt;What happens if you extend your shoe data slightly, to add categories? For instance, what if &lt;code&gt;@goods&lt;/code&gt; looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @goods = (
    &amp;quot;dress,oxfords,Brown leather,\$85,0&amp;quot;,
    &amp;quot;sports,hiking,All sizes,\$55,7&amp;quot;,
    &amp;quot;sports,tennis shoes,Women&#39;s sizes,\$35,15&amp;quot;,
    &amp;quot;recreation,flip flops,Colors of the rainbow,\$7,90&amp;quot;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output now needs grouping, which implies the use of nested loops. One loop can output the category header &amp;ndash; sports, dress, or recreation shoes &amp;ndash; and another will output the details of each shoe in that category.&lt;/p&gt;

&lt;p&gt;To handle this in HTML::Template, you would generally build a nested data structure of anonymous arrays and hashes, and then process it against nested &lt;code&gt;&amp;lt;TMPL_LOOP&amp;gt;&lt;/code&gt; directives in the template. Template::Recall logic remains in the code, you would build a nested loop structure in Perl that calls the appropriate sections. You can also use a hash to render the category sections as keys and detail sections as values in a single pass, and output them together using &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The template needs some modification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[====== table_start ====]
&amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;
[====== category =======]
&amp;lt;tr&amp;gt;&amp;lt;td colspan=&amp;quot;4&amp;quot;&amp;gt;&amp;lt;b&amp;gt;[&#39;category&#39;]&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
[====== detail ======]
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;[&#39;shoe&#39;]&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;[&#39;detail&#39;]&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;[&#39;price&#39;]&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;[&#39;quantity&#39;]&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
[======= table_end ====]
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This template now has a section called &amp;ldquo;category,&amp;rdquo; a single table row that spans all columns. The &amp;ldquo;detail&amp;rdquo; section is pretty much the same as in the previous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %inventory;

for my $good (@goods) {
    my @attr = split(/,/, $good);
    my $q    = $attr[4] == 0 ? &#39;Out of stock&#39; : $attr[4];

    $inventory{ $tr-&amp;gt;render(&#39;category&#39;, { category =&amp;gt; $attr[0] } ) } .=
        $tr-&amp;gt;render(&#39;detail&#39;,
            {
                shoe     =&amp;gt; $attr[1],
                detail   =&amp;gt; $attr[2],
                price    =&amp;gt; $attr[3],
                quantity =&amp;gt; $q,
            } );
}

print $tr-&amp;gt;render(&#39;table_start&#39;) .
    join(&#39;&#39;, %inventory) .
    $tr-&amp;gt;render(&#39;table_end&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loop looks surprisingly similar to the first example, doesn&amp;rsquo;t it? That&amp;rsquo;s because it is. Instead of printing each row, however, this code renders the first column in &lt;code&gt;@goods&lt;/code&gt; against the category template section, and then storing the output as a key in &lt;code&gt;%inventory&lt;/code&gt;. In the same iteration, it renders the remaining columns against the detail section and appends to the value of that key.&lt;/p&gt;

&lt;p&gt;After storing the rendered sections in this way to &lt;code&gt;%inventory&lt;/code&gt;, the code prints everything with a single statement, using &lt;code&gt;join&lt;/code&gt; to print all the values in &lt;code&gt;%inventory&lt;/code&gt;, including keys. The output is:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;recreation&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;flip flops&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;sports&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hiking&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tennis shoes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;dress&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;oxfords&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The code also handles conditional output. Suppose that at your growing online shoe emporium you provide special deals to customers who have bought over a certain dollar amount. As they browse your shoe inventory, these deals appear.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( $customer-&amp;gt;is_elite ) {
    print $tr-&amp;gt;render(&#39;special_deals&#39;, get_deals(&#39;elite&#39;) );
}
else {
    print $tr-&amp;gt;render(&#39;standard_deals&#39;, get_deals() );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about producing XML output? This usually requires a separate template? You can conditionally load a &lt;em&gt;.xml&lt;/em&gt; or &lt;em&gt;.html&lt;/em&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $tr;
if ( $q-&amp;gt;param(&#39;fmt&#39;) eq &#39;xml&#39; ) {
    $tr = Template::Recall-&amp;gt;new( template_path =&amp;gt; &#39;inventory.xml&#39; );
}
else {
    $tr = Template::Recall-&amp;gt;new( template_path =&amp;gt; &#39;inventory.html&#39; );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl provides everything you need to handle model, controller, &lt;em&gt;and&lt;/em&gt; view logic. Template::Recall capitalizes on this and helps to make projects code driven.&lt;/p&gt;

&lt;h3 id=&#34;template-model-comparison&#34;&gt;Template Model Comparison&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s important to note a few things that occurred in these examples &amp;ndash; or failed to occur, rather. First, there&amp;rsquo;s no mixture of code and template markup. All template access occurs through the method call &lt;code&gt;$tr-&amp;gt;render()&lt;/code&gt;. This is strong separation of concerns (SOC), just like the pipeline model, and unlike the callback model, which mixes template markup and code in the same file. Not only does strong SOC provide good code organization, it also keeps designers from having to sift through code to change markup. Consider using Mason to output the rows of &lt;code&gt;@goods&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% for my $good (@goods) {
%  my @attr     = split(/,/, $good);
%  my $quantity = $attr[3] eq &#39;0&#39; ? &#39;Out of stock&#39; : $attr[3];
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;% $attr[0] %&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;% $attr[1] %&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;% $attr[2] %&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;lt;% $quantity %&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
% }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an efficient approach, and easy enough for a programmer to walk through. It becomes difficult to maintain though, when designers are involved, if for no other reason than because a designer and a programmer need to access the same file to do their respective work. Design changes and code changes will not always share the same schedule because they belong to different domains. It also means that in order to switch templates, say to output XML or text (or both), you have to add more and more conditionals and templates to the code, making it increasingly difficult to read.&lt;/p&gt;

&lt;p&gt;The other thing that did not occur in this example is the leaking of any kind of logic (presentation or otherwise) into the template. Consider that HTML::Template would have to insert the &lt;code&gt;&amp;lt;TMPL_LOOP&amp;gt;&lt;/code&gt; statement in the template in order to output the rows of &lt;code&gt;@goods&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;TMPL_LOOP NAME=&amp;quot;PRODUCT&amp;quot;&amp;gt;
    &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;TMPL_VAR NAME=SHOE&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;TMPL_VAR NAME=DETAILS&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;TMPL_VAR NAME=PRICE&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;TMPL_VAR NAME=QUANTITY&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/TMPL_LOOP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not a big deal, really. If you care about line count, this only requires one extra line over the Template::Recall version, and that&amp;rsquo;s the the closing tag &lt;code&gt;&amp;lt;/TMPL_LOOP&amp;gt;&lt;/code&gt;. Nonetheless, the template now states some of the logic for the application. Sure, it&amp;rsquo;s only presentation logic, but it&amp;rsquo;s logic nonetheless. HTML::Template also provides &lt;code&gt;&amp;lt;TMPL_IF&amp;gt;&lt;/code&gt; for displaying items conditionally, and &lt;code&gt;&amp;lt;TMPL_INCLUDE&amp;gt;&lt;/code&gt; for including other templates. Again, this is logic contained in the template files.&lt;/p&gt;

&lt;p&gt;Template::Recall keeps as much logic as possible in the code. If you need to display something conditionally, use Perl&amp;rsquo;s &lt;code&gt;if&lt;/code&gt; statement. If you need to include other templates, load them using a Template::Recall object. Whereas the pipeline models likely work better for projects with a fairly sophisticated design team, Template::Recall tries to be the programmer&amp;rsquo;s friend and let him or her steer from the most comfortable place, the code.&lt;/p&gt;

&lt;p&gt;There is also a subtle cost to using the pipeline model for a simple loop like that above. Consider this HTML::Template footwear data code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $template = HTML::Template-&amp;gt;new(filename =&amp;gt; template1.tmpl&#39;);

my @output;

for my $good (@goods)
{
    my @attr = split(/,/, $_);
    my %row  = (
        SHOE     =&amp;gt; $attr[0],
        DETAILS  =&amp;gt; $attr[1],
        PRICE    =&amp;gt; $attr[2],
        QUANTITY =&amp;gt; $attr[3],
    );
    push( @output, \%row );
}

$template-&amp;gt;param(PRODUCT =&amp;gt; \@output);

print $template-&amp;gt;output();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code iterates over &lt;code&gt;@goods&lt;/code&gt; and builds a second array, &lt;code&gt;@output&lt;/code&gt;, with the rows as hash references. Then the template iterates over &lt;code&gt;@output&lt;/code&gt; within &lt;code&gt;&amp;lt;TMPL_LOOP&amp;gt;&lt;/code&gt;. That&amp;rsquo;s walking over the same data twice. Template sections do not suffer this cost, because you can output the data immediately, as you get it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $tr-&amp;gt;render(&#39;product_row&#39;, \%row);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is essentially what happens with Mason (or JSP/PHP/ASP for that matter). The main difference is that Template::Recall renders the section through a method call rather than mixing code and template.&lt;/p&gt;

&lt;p&gt;Template::Recall, by using sectioned templates, combines the efficiency of the callback model with the strong, clean separation of concerns inherent in the pipeline model, and perhaps gets the best of both worlds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rapid Web Application Deployment with Maypole : Part 2</title>
      <link>http://localhost:1313/pub/2004/04/29/maypole.html/</link>
      <pubDate>Thu, 29 Apr 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/04/29/maypole.html/</guid>
      <description>

&lt;p&gt;When we &lt;a href=&#34;http://localhost:1313/pub/2004/04/15/maypole.html&#34;&gt;last&lt;/a&gt; left our intrepid web developer, he had successfully set up an online sales catalogue in 11 lines of code. Now, however, he has to move on to turning this into a sales site with a shopping cart and all the usual trimmings. It&amp;rsquo;s time to see some of that flexibility we talked about last week; unfortunately this means we&amp;rsquo;re going to have to write some more code, but we can&amp;rsquo;t have everything.&lt;/p&gt;

&lt;h3 id=&#34;span-id-who-am-i-who-am-i-span&#34;&gt;&lt;span id=&#34;Who_Am_I?&#34;&gt;Who Am I?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In order to add the shopping cart to the site, we need to introduce the concept of a current user. This will allow viewers of the site to log in and have their own cart. We will be adding two new tables to the database, a table to store details about the user, and one to represent the cart. Our tables will look like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  CREATE TABLE user (
    id int not null auto_increment primary key,
    first_name varchar(64),
    last_name varchar(64),
    email varchar(255),
    password varchar(64),
    address1 varchar(255),
    address2 varchar(255),
    state varchar(255),
    postal_code varchar(64),
    country varchar(64)
  );

  CREATE TABLE cart_item (
    id int not null auto_increment primary key,
    user int,
    item int
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, Maypole automatically creates classes for the tables. We use &lt;code&gt;Class::DBI&lt;/code&gt; relationships to tell Maypole what&amp;rsquo;s going on with these tables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ISellIt::User-&amp;gt;has_many( &amp;quot;cart_items&amp;quot; =&amp;gt; &amp;quot;ISellIt::BasketItem&amp;quot;);
  ISellIt::BasketItem-&amp;gt;has_a( &amp;quot;user&amp;quot; =&amp;gt; &amp;quot;ISellit::User&amp;quot; );
  ISellIt::BasketItem-&amp;gt;has_a( &amp;quot;item&amp;quot; =&amp;gt; &amp;quot;ISellit::Product&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now need a way to tell our application about the current user. There&amp;rsquo;s a long explanation of Maypole&amp;rsquo;s authentication system in the &lt;a href=&#34;http://maypole.simon-cozens.org/doc/authentication.html&#34;&gt;Maypole documentation&lt;/a&gt;, but one of the easiest ways to do add the concept of the current user is with the &lt;code&gt;Maypole::Authentication::UserSessionCookie&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;As its name implies, this module takes care of associating a user with a session, and issuing a cookie to the user&amp;rsquo;s browser. It also manages validating the user&amp;rsquo;s login credentials, by default by looking up the user name and password in a database table; precisely what we need!&lt;/p&gt;

&lt;p&gt;Maypole provides an authentication method for us to override, and it&amp;rsquo;s here that we&amp;rsquo;re going to intercept any request that requires a user &amp;ndash; viewing the shopping cart, adding items to an order, and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub authenticate {
    my ($self, $r) = @_;
    unless ($r-&amp;gt;{table} eq &amp;quot;cart&amp;quot; or $r-&amp;gt;{action} eq &amp;quot;buy&amp;quot;) {
      return OK;
    }

    # Else we need a user
    $r-&amp;gt;get_user;
    if (!$r-&amp;gt;{user}) {
      $r-&amp;gt;template(&amp;quot;login&amp;quot;);
    }
    return OK;
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;get_user&lt;/code&gt; method, which does all the work of setting the cookie and setting the credentials, is provided by the &lt;code&gt;UserSessionCookie&lt;/code&gt; module. The only thing we need to tell it is that we&amp;rsquo;re going to use the user&amp;rsquo;s email address and password as login credentials, rather than some arbitrary user name. We can do this in the configuration for our application, as described in the &lt;code&gt;UserSessionCookie&lt;/code&gt; documentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ISellIt-&amp;gt;{config}-&amp;gt;{auth}-&amp;gt;{user_field} = &amp;quot;email&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we set up a login template, which will present the users with a form to enter their credentials; there&amp;rsquo;s one in the Maypole manual, in the &lt;a href=&#34;http://maypole.simon-cozens.org/doc/Request.html&#34;&gt;Request chapter&lt;/a&gt;, which we can modify to suit our needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% INCLUDE header %]

    &amp;lt;h2&amp;gt; You need to log in before buying anything &amp;lt;/h2&amp;gt;

  &amp;lt;DIV class=&amp;quot;login&amp;quot;&amp;gt;
  [% IF login_error %]
     &amp;lt;FONT COLOR=&amp;quot;#FF0000&amp;quot;&amp;gt; [% login_error %] &amp;lt;/FONT&amp;gt;
  [% END %]
    &amp;lt;FORM ACTION=&amp;quot;/[% request.path%]&amp;quot; METHOD=&amp;quot;post&amp;quot;&amp;gt;
  Email Address:
    &amp;lt;INPUT TYPE=&amp;quot;text&amp;quot; NAME=&amp;quot;email&amp;quot;&amp;gt; &amp;lt;BR&amp;gt;
  Password: &amp;lt;INPUT TYPE=&amp;quot;password&amp;quot; NAME=&amp;quot;password&amp;quot;&amp;gt; &amp;lt;BR&amp;gt;
  &amp;lt;INPUT TYPE=&amp;quot;submit&amp;quot;&amp;gt;
  &amp;lt;/FORM&amp;gt;
  &amp;lt;/DIV&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now logging in is sorted out; if a user presents the correct credentials, &lt;code&gt;get_user&lt;/code&gt; will put the user&amp;rsquo;s &lt;code&gt;ISellIt::User&lt;/code&gt; object in the Maypole request object as &lt;code&gt;$r-&amp;gt;{user}&lt;/code&gt;, and the user&amp;rsquo;s request will continue to where it was going.&lt;/p&gt;

&lt;p&gt;Now, of course, since we have a user object we can play with, we can use the user&amp;rsquo;s information in other contexts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% IF request.user %]
    &amp;lt;DIV class=&amp;quot;messages&amp;quot;&amp;gt;
    Welcome back, [% request.user.first_name %]!
    &amp;lt;/DIV&amp;gt;
  [% END %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we&amp;rsquo;re going to be referring to the user a lot, we pass it to the template as an additional argument, &lt;code&gt;my&lt;/code&gt;. Maypole has an open-ended &amp;ldquo;hook&amp;rdquo; method, &lt;code&gt;additional_data&lt;/code&gt;, which is perfect for doing just this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub additional_data {
    my $r = shift;
    $r-&amp;gt;{template_args}{my} = $r-&amp;gt;{user};
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call it &lt;code&gt;my&lt;/code&gt; so that we can say, for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;DIV class=&amp;quot;messages&amp;quot;&amp;gt;
    Welcome back, [% my.first_name %]!
    &amp;lt;/DIV&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we have a user. We can add a new action, &lt;code&gt;order&lt;/code&gt;, to add an item to the user&amp;rsquo;s shopping cart:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package ISellIt::Product;

  sub order :Exported {
    my ($self, $r, $product) = @_;
    $r-&amp;gt;{user}-&amp;gt;add_to_cart_items({ item =&amp;gt; $product });
    $r-&amp;gt;{template} = &amp;quot;view&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds an entry in the &lt;code&gt;cart_item&lt;/code&gt; table associating the item with the user, and then sends us back to viewing the item.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve sent our user back shopping without an indication that we actually did add an item to his shopping cart; we can give such an indication by passing information into the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub order :Exported {
    my ($self, $r, $product) = @_;
    $r-&amp;gt;{user}-&amp;gt;add_to_cart_items({ item =&amp;gt; $product });
    $r-&amp;gt;{template} = &amp;quot;view&amp;quot;;
    $r-&amp;gt;{template_args}{bought} = 1;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then displaying it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% IF bought %]
  &amp;lt;DIV class=&amp;quot;messages&amp;quot;&amp;gt;
    We&#39;ve just added this item to your shopping cart. To complete
    your transaction, please &amp;lt;A HREF=&amp;quot;/user/view_cart&amp;quot;&amp;gt;view your
    cart&amp;lt;/A&amp;gt; and check out.
  &amp;lt;/DIV&amp;gt;
  [% END %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we need to allow the user to view a cart.&lt;/p&gt;

&lt;h3 id=&#34;span-id-displaying-the-cart-displaying-the-cart-span&#34;&gt;&lt;span id=&#34;Displaying_the_Cart&#34;&gt;Displaying the Cart&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This also turns out to be relatively easy &amp;ndash; most things in Maypole are &amp;ndash; involving an action on the user class. We need to fill our Maypole request object with the items in the user&amp;rsquo;s cart:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package ISellIt::User;

  sub view_cart :Exported {
    my ($self, $r) = @_;
    $r-&amp;gt;{objects} = [ $r-&amp;gt;{user}-&amp;gt;cart_items ];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we need to produce a &lt;em&gt;user/view_cart&lt;/em&gt; template that displays them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% PROCESS header %]

  &amp;lt;h2&amp;gt; Your Shopping Cart &amp;lt;/h2&amp;gt;

  &amp;lt;TABLE&amp;gt;
  &amp;lt;TR&amp;gt; &amp;lt;TH&amp;gt; Product &amp;lt;/TH&amp;gt; &amp;lt;TH&amp;gt; Price &amp;lt;/TH&amp;gt; &amp;lt;/TR&amp;gt;
  [% SET count = 0;
  FOR item = objects;
    SET count = count + 1;
    &amp;quot;&amp;lt;tr&amp;quot;;
    &#39; class=&amp;quot;alternate&amp;quot;&#39; IF count % 2;
    &amp;quot;&amp;gt;&amp;quot;;
  %]
    &amp;lt;TD&amp;gt; [% item.product.name %] &amp;lt;/TD&amp;gt;
    &amp;lt;TD&amp;gt; [% item.product.price %] &amp;lt;/TD&amp;gt;
    &amp;lt;TD&amp;gt;
      &amp;lt;FORM ACTION=&amp;quot;/cart_item/delete/[% item.id %]&amp;quot;&amp;gt;
      &amp;lt;INPUT TYPE=&amp;quot;submit&amp;quot; VALUE=&amp;quot;Remove from cart&amp;quot;&amp;gt;
      &amp;lt;/FORM&amp;gt;
    &amp;lt;/TD&amp;gt;
  &amp;lt;/tr&amp;gt;
  [% END %]
  &amp;lt;/TABLE&amp;gt;

  &amp;lt;A HREF=&amp;quot;/user/checkout&amp;quot;&amp;gt; Check out! &amp;lt;/A&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, the HTML isn&amp;rsquo;t great, but it gives us something we can pass to the design people to style up nicely. Now on to checking out the cart&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;span-id-check-out-check-out-span&#34;&gt;&lt;span id=&#34;Check_out&#34;&gt;Check Out&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The hardest part about building an e-commerce application is interacting with the payment and credit-card fulfillment service. We&amp;rsquo;ll use the &lt;a href=&#34;https://metacpan.org/pod/Business::OnlinePayment&#34;&gt;Business::OnlinePayment&lt;/a&gt; module to handle that side of things, and handle the order fulfillment by simply sending an email.&lt;/p&gt;

&lt;p&gt;The actual check-out page needs to collect credit card and delivery information, and so it doesn&amp;rsquo;t actually need any objects; the only object we actually need is the &lt;code&gt;ISellIt::User&lt;/code&gt;, and that was stashed away in the request object by the authentication routine. However, we do want to display the total cost. So to make things easier we&amp;rsquo;ll add an action and compute this in Perl. We make the total cost a method on the user, so we can use this later:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package ISellIt::User;
  use List::Util qw(sum);
  sub basket_cost {
    my $self = shift;
    sum map { $_-&amp;gt;item-&amp;gt;price }
    $self-&amp;gt;basket_items
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And define &lt;code&gt;checkout&lt;/code&gt; to add this total to our template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub checkout :Exported {
    my ($self, $r) = @_;
    $r-&amp;gt;{template_args}{total_cost} = $r-&amp;gt;{user}-&amp;gt;basket_cost;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we write our &lt;em&gt;user/checkout&lt;/em&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% PROCESS header %]
  &amp;lt;h2&amp;gt; Check out &amp;lt;/h2&amp;gt;

  &amp;lt;p&amp;gt; Please enter your credit card and delivery details. &amp;lt;/p&amp;gt;

  &amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;https://www.isellit.com/user/do_checkout&amp;quot;&amp;gt;
    &amp;lt;P&amp;gt;
    First name: &amp;lt;input name=&amp;quot;first_name&amp;quot; value=&amp;quot;[% my.first_name %]&amp;quot;&amp;gt;&amp;lt;BR&amp;gt;
    Last name: &amp;lt;input name=&amp;quot;last_name&amp;quot; value=&amp;quot;[% my.last_name %]&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
    &amp;lt;P&amp;gt;
    Street address: &amp;lt;input name=&amp;quot;address&amp;quot; value=&amp;quot;[% my.address1 %]&amp;quot;&amp;gt;&amp;lt;BR&amp;gt;
    City: &amp;lt;input name=&amp;quot;city&amp;quot; value=&amp;quot;[% my.address2 %]&amp;quot;&amp;gt;&amp;lt;BR&amp;gt;
    State: &amp;lt;input name=&amp;quot;state&amp;quot; value=&amp;quot;[% my.state %]&amp;quot;&amp;gt;
    Zip: &amp;lt;input name=&amp;quot;zip&amp;quot; value=&amp;quot;[% my.postal_code %]&amp;quot;&amp;gt;
    &amp;lt;/P&amp;gt;

    &amp;lt;P&amp;gt;
    Card type: &amp;lt;select name=&amp;quot;type&amp;quot;&amp;gt;
      &amp;lt;option&amp;gt;Visa&amp;lt;/option&amp;gt;
      &amp;lt;option&amp;gt;Mastercard&amp;lt;/option&amp;gt;
      ...
    &amp;lt;/select&amp;gt;

    Card number: &amp;lt;input name=&amp;quot;card_number&amp;quot;&amp;gt;
    Expiration: &amp;lt;input name=&amp;quot;expiration&amp;quot;&amp;gt; &amp;lt;BR&amp;gt;
    Total: $ [% total_price %]
    &amp;lt;/P&amp;gt;
    &amp;lt;P&amp;gt;
    Please click &amp;lt;B&amp;gt;once&amp;lt;/B&amp;gt; and wait for the payment to be
    authorised.... &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;order&amp;quot;&amp;gt;
  &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happens when this data is sent to the &lt;code&gt;do_checkout&lt;/code&gt; action? (Over SSL, you&amp;rsquo;ll notice.) First of all, we&amp;rsquo;ll check if the user has entered address details for the first time, and if so, store them in the database. Perhaps unnecessary in this day of browsers that auto-fill forms, but it&amp;rsquo;s still a convenience. Maypole stores the POST&amp;rsquo;ed in parameters in &lt;code&gt;params&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub do_checkout :Exported {
    my ($self, $r) = @_;
    my %params = %{$r-&amp;gt;{params}};
    my $user = $r-&amp;gt;{user};

    $user-&amp;gt;address1($params{address}) unless $user-&amp;gt;address1;
    $user-&amp;gt;address2($params{city})  unless $user-&amp;gt;address2;
    $user-&amp;gt;state($params{state})    unless $user-&amp;gt;state;
    $user-&amp;gt;postal_code($params{zip})  unless $user-&amp;gt;postal_code;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to construct a request to go out via &lt;code&gt;Business::OnlinePayment&lt;/code&gt;; thankfully, the form parameters we&amp;rsquo;ve received are going to be precisely in the format that &lt;code&gt;OnlinePayment&lt;/code&gt; wants, thanks to careful form design. All we need to do is to insert our account details and the total:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $tx = new Business::OnlinePayment(&amp;quot;TCLink&amp;quot;);
    $tx-&amp;gt;content(%params,
      type   =&amp;gt; &amp;quot;cc&amp;quot;,
      login  =&amp;gt; VENDOR_LOGIN,
      password =&amp;gt; VENDOR_PASSWORD,
      action   =&amp;gt; &#39;Normal Authorization&#39;
      amount   =&amp;gt; $r-&amp;gt;{user}-&amp;gt;basket_total
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can submit the payment and see what happens. If there&amp;rsquo;s a problem, we add a message to the template and send the user back again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $tx-&amp;gt;submit;
    if (!$tx-&amp;gt;is_success) {
      $r-&amp;gt;{template_args}{message} =
        &amp;quot;There was a problem authorizing your transaction: &amp;quot;.
        $tx-&amp;gt;error_message;
      $r-&amp;gt;{template} = &amp;quot;checkout&amp;quot;;
      return;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we have our money; we probably want to tell the box-shifters about it, or we lose customers fast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    fulfill_order(
      address_details =&amp;gt; $r-&amp;gt;{params},
      order_details   =&amp;gt; [ map { $_-&amp;gt;item } $r-&amp;gt;{user}-&amp;gt;cart_items ],
      cc_auth     =&amp;gt; $tx-&amp;gt;authorization
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we empty the shopping cart, and send the user on his way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $_-&amp;gt;delete for $r-&amp;gt;{user}-&amp;gt;cart_items;
    $r-&amp;gt;{template} = &amp;quot;frontpage&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! We&amp;rsquo;ve taken a user from logging in, adding goods to the cart, credit card validation, and checkout. But&amp;hellip; wait. How did we get our user in the first place?&lt;/p&gt;

&lt;h3 id=&#34;span-id-registering-a-user-registering-a-user-span&#34;&gt;&lt;span id=&#34;Registering_a_User&#34;&gt;Registering a User&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We have to find a way to sign a user up. This is actually not that hard, particularly since we can use the example of &lt;a href=&#34;https://metacpan.org/pod/Maypole::Manual::Flox&#34;&gt;Flox&lt;/a&gt; in the Maypole manual. First, we&amp;rsquo;ll add a &amp;ldquo;register&amp;rdquo; link to our login template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;P&amp;gt;New user? &amp;lt;A HREF=&amp;quot;/user/register&amp;quot;&amp;gt;Sign up!&amp;lt;/A&amp;gt;&amp;lt;/P&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page doesn&amp;rsquo;t require any objects to be loaded up, since it&amp;rsquo;s just going to display a registration form; we can just add our template in &lt;em&gt;/user/register&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [% INCLUDE header %]
  &amp;lt;P&amp;gt;Welcome to buying with iSellIt!&amp;lt;/P&amp;gt;

  &amp;lt;P&amp;gt;To set up your account, we only need a few details from you:
  &amp;lt;/P&amp;gt;

  &amp;lt;FORM METHOD=&amp;quot;POST&amp;quot; ACTION=&amp;quot;/user/do_register&amp;quot;&amp;gt;
    &amp;lt;P&amp;gt;Your name:
    &amp;lt;input name=&amp;quot;first_name&amp;quot;&amp;gt;
    &amp;lt;input name=&amp;quot;last_name&amp;quot;&amp;gt; &amp;lt;/P&amp;gt;
    &amp;lt;P&amp;gt;Your email address: &amp;lt;input name=&amp;quot;email&amp;quot;&amp;gt; &amp;lt;/P&amp;gt;
    &amp;lt;P&amp;gt;Please choose a password: &amp;lt;input name=&amp;quot;password&amp;quot;&amp;gt; &amp;lt;/P&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;Register&amp;quot; value=&amp;quot;Register&amp;quot;&amp;gt;
  &amp;lt;/FORM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, we need to explain to &lt;a href=&#34;https://metacpan.org/pod/Class::DBI::FromCGI&#34;&gt;Class::DBI::FromCGI&lt;/a&gt; how these fields are to be edited:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ISellIt::User-&amp;gt;untaint_columns(
    printable =&amp;gt; [qw/first_name last_name password/],
    email   =&amp;gt; [qw/email/],
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can write our &lt;code&gt;do_register&lt;/code&gt; event, using the &lt;code&gt;FromCGI&lt;/code&gt; style:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub do_register :Exported {
    my ($self, $r) = @_;
    my $h = CGI::Untaint-&amp;gt;new(%{$r-&amp;gt;{params}});
    my $user = $self-&amp;gt;create_from_cgi($h);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there were any problems, we send them back to the register form again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (my %errors = $obj-&amp;gt;cgi_update_errors) {
      $r-&amp;gt;{template_args}{cgi_params} = $r-&amp;gt;{params};
      $r-&amp;gt;{template_args}{errors} = \%errors;
      $r-&amp;gt;{template} = &amp;quot;register&amp;quot;;
      return;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we now have a user; we need to issue the cookie as if the user had logged in normally. Again, this is something that &lt;code&gt;UserSessionCookie&lt;/code&gt; looks after for us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $r-&amp;gt;{user} = $user;
    $r-&amp;gt;login_user($user-&amp;gt;id);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally we send the user on his or her way again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $r-&amp;gt;{template} = &amp;quot;frontpage&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we go: now we can create new users; provision of a password reminder function is an exercise for the interested reader.&lt;/p&gt;

&lt;h3 id=&#34;span-id-maypole-summary-maypole-summary-span&#34;&gt;&lt;span id=&#34;Maypole_Summary&#34;&gt;Maypole Summary&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve done it &amp;ndash; we&amp;rsquo;ve created an e-commerce store in a very short space of time and with a minimal amount of code. One of the things that I like about Maypole is the extent to which you only need to code your business logic; all of the display templates can be mocked up and then shipped off to professionals, and the rest of the work is just handled magically behind the scenes by Maypole.&lt;/p&gt;

&lt;p&gt;Thanks to the TPF funding of Maypole, we now have an extensive user manual with several case studies (this one included), and a lively user and developer community. I hope you too will be joining it soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rapid Web Application Deployment with Maypole</title>
      <link>http://localhost:1313/pub/2004/04/15/maypole.html/</link>
      <pubDate>Thu, 22 Apr 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/04/15/maypole.html/</guid>
      <description>

&lt;p&gt;You have a database. You have a web server. You have a deadline.&lt;/p&gt;

&lt;p&gt;Whether it&amp;rsquo;s bringing up an e-commerce storefront for a new venture, implementing a new front-end to HR&amp;rsquo;s employee database, or even providing a neat way to track citations for U.S. English slang terms, it&amp;rsquo;s always the same story &amp;ndash; and the deadline is always yesterday.&lt;/p&gt;

&lt;p&gt;For this month of April, I&amp;rsquo;m working on a Perl Foundation sponsorship to develop a project of mine called Maypole, which enables Perl programmers to get web front-ends to databases, as well as complex web-based applications, up and running quickly.&lt;/p&gt;

&lt;p&gt;Extremely quickly, and with very little Perl coding required. I&amp;rsquo;ve used Maypole to set up an Intranet portal, a database and display system for choosing menus and recipes, song lyric and chord sheet projection software, an open-source social network site, and a web database of beer-tasting notes; and that just was in the past two weeks.&lt;/p&gt;

&lt;p&gt;Maypole&amp;rsquo;s flexibility stems from three fundamentals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Separation_of_concerns&#34;&gt;Clear separation of concerns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2004/04/15/maypole.html#Sensible_defaults&#34;&gt;Intelligent defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2004/04/15/maypole.html#Ease_of_Extensibility&#34;&gt;Ease of extensibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To demonstrate these three principles, we&amp;rsquo;re going to look at a bread-and-butter web application &amp;ndash; an online shop&amp;rsquo;s product catalogue &amp;ndash; and see how quickly we can put it together with Maypole.&lt;/p&gt;

&lt;h2 id=&#34;span-id-separation-of-concerns-separation-of-concerns-span&#34;&gt;&lt;span id=&#34;Separation_of_concerns&#34;&gt;Separation of Concerns&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Maypole was originally called &lt;code&gt;Apache::MVC&lt;/code&gt;, reflecting its basis in the Model-View-Controller design pattern. (I had to change it firstly because Maypole isn&amp;rsquo;t tied to Apache, and secondly because &lt;code&gt;Apache::MVC&lt;/code&gt; is a really dull name.) It&amp;rsquo;s the same design pattern that forms the foundation of similar projects in other languages, such as Java&amp;rsquo;s Struts framework.&lt;/p&gt;

&lt;p&gt;This design pattern is found primarily in graphical applications; the idea is that you have a Model class that represents and manipulates your data, a View class that is responsible for displaying that data to the user, and a Controller class that controls the other classes in response to events triggered by the user. This analogy doesn&amp;rsquo;t correspond precisely to a web-based application, but we can take an important principle from it. As Andy Wardley explains:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What the MVC-for-the-web crowd is really trying to achieve is a clear separation of concerns. Put your database code in one place, your application code in another, your presentation code in a third place. That way, you can chop and change different elements at will, hopefully without affecting the other parts (depending on how well your concerns are separated, of course). This is common sense and good practice. MVC achieves this separation of concerns as a byproduct of clearly separating inputs (controls) and outputs (views).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what Maypole does. It has a number of database drivers, a number of front-end drivers, and a number of templating presentation drivers. In common cases, Maypole provides precisely what you need for all of these areas, and you get to concentrate on writing just the business logic of your application. This is one of the reasons why Maypole lets you develop so rapidly &amp;ndash; because most of the time, you don&amp;rsquo;t need to do any development at all.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin, then, by choosing what elements are going to make up our product database. We will actually be using what is by far the most common configuration of model, view, and controller classes: Maypole provides a model class based on &lt;code&gt;Class::DBI&lt;/code&gt;, a view class based on &lt;code&gt;Template::Toolkit&lt;/code&gt;, and a controller class based on Apache &lt;code&gt;mod_perl&lt;/code&gt;. We&amp;rsquo;ll come to what all of this means in a second, but because this configuration is so common, it is the default; no code is required to set that up.&lt;/p&gt;

&lt;p&gt;We will, however, need a database. Our client is going to be &lt;code&gt;iSellIt&lt;/code&gt;, a fictitious supplier of computer components and software. We will have database tables for products, manufacturers, and categories of stuff, and subcategories of categories. Here&amp;rsquo;s what that database might look like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CREATE TABLE product (
        id int NOT NULL auto_increment primary key,
        category int,
        subcategory int,
        manufacturer int,
        part_number varchar(50),
        name varchar(50),
        cost decimal(6,2),
        description text
    );

    CREATE TABLE manufacturer (
        id int NOT NULL auto_increment primary key,
        name varchar(50),
        url varchar(255),
        notes text
    );

    CREATE TABLE category (
        id int NOT NULL auto_increment primary key,
        name varchar(50)
    );

    CREATE TABLE subcategory (
        id int NOT NULL auto_increment primary key,
        name varchar(50),
        category integer
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re going to assume that we&amp;rsquo;ve loaded some data into this database already, but we&amp;rsquo;re going to want the sales people to update it themselves over a web interface.&lt;/p&gt;

&lt;p&gt;In order to use Maypole, we need what&amp;rsquo;s called a driver module. This is a very short Perl module that defines the application we&amp;rsquo;re working with. I say it&amp;rsquo;s a Perl module, and that may make you think this is about writing code, but to be honest, most of it is actually configuration in disguise. Here&amp;rsquo;s the driver module for our ISellIt application. (The client may be called &lt;code&gt;iSellIt&lt;/code&gt;, but many years exposure to Perl module names makes me allergic to starting one with a lowercase letter.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package ISellIt;
    use base &#39;Apache::MVC&#39;;
    use Class::DBI::Loader::Relationship;

    ISellIt-&amp;gt;setup(&amp;quot;dbi:mysql:isellit&amp;quot;);
    ISellIt-&amp;gt;config-&amp;gt;{uri_base} = &amp;quot;http://localhost/isellit&amp;quot;;
    ISellIt-&amp;gt;config-&amp;gt;{rows_per_page} = 10;
    ISellIt-&amp;gt;config-&amp;gt;{loader}-&amp;gt;relationship($_) for 
        (&amp;quot;a manufacturer has products&amp;quot;, &amp;quot;a category has products&amp;quot;,
         &amp;quot;a subcategory has products&amp;quot;, &amp;quot;a category has subcategories&amp;quot;);

    1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ten lines of code; that&amp;rsquo;s the sort of size you should expect a Maypole application to be. Let&amp;rsquo;s take it apart, a line at a time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package ISellIt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the name of our application, and it&amp;rsquo;s what we&amp;rsquo;re going to tell Apache to use as the Perl handler for our web site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use base &#39;Apache::MVC&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says that we&amp;rsquo;re using the Apache front-end to Maypole, and so we&amp;rsquo;re writing a &lt;code&gt;mod_perl&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Class::DBI::Loader::Relationship;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we use a Perl module that I wrote to help put together Maypole driver classes. It allows us to declare the relationships between our database tables in a straightforward way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ISellIt-&amp;gt;setup(&amp;quot;dbi:mysql:isellit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We tell &lt;code&gt;ISellIt&lt;/code&gt; to go connect to the database and work out the tables and columns in our application. In addition, because we haven&amp;rsquo;t changed any class defaults, it&amp;rsquo;s assumed that we&amp;rsquo;re going to use &lt;code&gt;Class::DBI&lt;/code&gt; and Template Toolkit. We could have said that we want to use &lt;code&gt;Apache::MVC&lt;/code&gt; with &lt;code&gt;DBIx::SearchBuilder&lt;/code&gt; and &lt;code&gt;HTML::Mason&lt;/code&gt;, but we don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Maypole&amp;rsquo;s &lt;code&gt;Class::DBI&lt;/code&gt;-based class uses &lt;a href=&#34;https://metacpan.org/pod/Class::DBI::Loader&#34;&gt;&lt;code&gt;Class::DBI::Loader&lt;/code&gt;&lt;/a&gt; to investigate the structure of the database, and then map the &lt;code&gt;product&lt;/code&gt; table onto a &lt;code&gt;ISellIt::Product&lt;/code&gt; class, and so on. You can read more about how &lt;code&gt;Class::DBI&lt;/code&gt;&amp;rsquo;s table-class mapping works in &lt;a href=&#34;http://www.perl.com/pub/2002/11/27/classdbi.html&#34;&gt;Tony&amp;rsquo;s article about it&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ISellIt-&amp;gt;config-&amp;gt;{uri_base} = &amp;quot;http://localhost/isellit&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ISellIt&lt;/code&gt; sometimes needs to know where it lives, so that it can properly produce links to other pages inside the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ISellIt-&amp;gt;config-&amp;gt;{rows_per_page} = 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says that we don&amp;rsquo;t want to display the whole product list on one page; there&amp;rsquo;ll be a maximum of 10 items on a page, before we get a page-view of the list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ISellIt-&amp;gt;config-&amp;gt;{loader}-&amp;gt;relationship($_) for 
        (&amp;quot;a manufacturer has products&amp;quot;, &amp;quot;a category has products&amp;quot;,
         &amp;quot;a subcategory has products&amp;quot;, &amp;quot;a category has subcategories&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we define our relationship constraints, in reasonably natural syntax: a manufacturer has a number of products, and a category will delimit a collection of products, and so on.&lt;/p&gt;

&lt;p&gt;Ten lines of code. What has it got us?&lt;/p&gt;

&lt;h2 id=&#34;span-id-sensible-defaults-sensible-defaults-span&#34;&gt;&lt;span id=&#34;Sensible_defaults&#34;&gt;Sensible Defaults&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The second foundation of Maypole is its use of sensible defaults. It has a system of generic templates that &amp;ldquo;do the right thing&amp;rdquo; for viewing and editing data in a database. In many cases, web application programmers won&amp;rsquo;t need to change the default behavior at all; in the majority of cases, they only need to change a few of the templates, and in the best cases, they can declare that the templating is the web design group&amp;rsquo;s problem and not need to do any work at all.&lt;/p&gt;

&lt;p&gt;So, if we install the application and the default templates, and go to our site, &lt;code&gt;http://localhost/isellit&lt;/code&gt;; we should see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_04_15_maypole/maypole1.png&#34; alt=&#34;&#34; /&gt;
Which is only fair for 10 lines of code. But it gets better, because if we click on, say, the product listing, we get a screen like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_04_15_maypole/maypole2.png&#34; alt=&#34;&#34; /&gt;
Now that&amp;rsquo;s something we could probably give to the sales team with no further alterations needed, and they could happily add, edit, and delete products.&lt;/p&gt;

&lt;p&gt;Similarly, if we then click on a manufacturer in that products table, we see a handy page about the manufacturer, their products, and so on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_04_15_maypole/maypole3.png&#34; alt=&#34;&#34; /&gt;
Now I think we are getting some worth from our 10 lines. Next, we give the templates to the web designers. Maypole searches for templates in three different places: first, it looks for a template specific to a class; then it looks for a custom template for the whole application; finally, it looks in the &lt;em&gt;factory&lt;/em&gt; directory to use the totally generic, do-the-right-thing template.&lt;/p&gt;

&lt;p&gt;So, to make a better manufacturer view, we tell them to copy the &lt;em&gt;factory/view&lt;/em&gt; template into &lt;em&gt;manufacturer/view&lt;/em&gt; and customize it. We copy &lt;em&gt;factory/list&lt;/em&gt; into &lt;em&gt;product/list&lt;/em&gt; and customize it as a listing of products; we copy &lt;em&gt;factory/header&lt;/em&gt; and &lt;em&gt;factory/footer&lt;/em&gt; into the &lt;em&gt;custom/&lt;/em&gt; directory, and turn them into the boilerplate HTML surrounding every page, and so on.&lt;/p&gt;

&lt;p&gt;Now, I am not very good at HTML design, which is why I like Maypole &amp;ndash; it makes it someone else&amp;rsquo;s problem &amp;ndash; but this means I&amp;rsquo;m not very good at showing you what sort of thing you can do with the templates. But here&amp;rsquo;s a mock-up; I created &lt;code&gt;product/view&lt;/code&gt; with the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [% INCLUDE header %]
    [% PROCESS macros %]

    &amp;lt;DIV class=&amp;quot;nav&amp;quot;&amp;gt; You are in: [% maybe_link_view(product.category) %] &amp;gt; 
    [% maybe_link_view(product.subcategory) %] &amp;lt;/DIV&amp;gt;

    &amp;lt;h2&amp;gt; [% product.name %]&amp;lt;/h2&amp;gt;
    &amp;lt;DIV class=&amp;quot;manufacturer&amp;quot;&amp;gt; By [% maybe_link_view(product.manufacturer) %] 
    &amp;lt;/DIV&amp;gt;
    &amp;lt;DIV class=&amp;quot;description&amp;quot;&amp;gt; [% product.description %] &amp;lt;/DIV&amp;gt;

    &amp;lt;TABLE class=&amp;quot;view&amp;quot;&amp;gt;
    &amp;lt;TR&amp;gt;
        &amp;lt;TD class=&amp;quot;field&amp;quot;&amp;gt; Price (ex. VAT) &amp;lt;/TD&amp;gt; 
        &amp;lt;TD&amp;gt; &amp;amp;pound; [% product.cost %] &amp;lt;/TD&amp;gt;
    &amp;lt;/TR&amp;gt;
    &amp;lt;TR&amp;gt;
        &amp;lt;TD class=&amp;quot;field&amp;quot;&amp;gt; Part number  &amp;lt;/TD&amp;gt; 
        &amp;lt;TD&amp;gt; [% product.part_number %] &amp;lt;/TD&amp;gt;
    &amp;lt;/TR&amp;gt;
    &amp;lt;/TABLE&amp;gt;

    [% button(product, &amp;quot;order&amp;quot;) %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Producing the following screenshot. It may not look better, but at least it proves things can be made to look different.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_04_15_maypole/maypole4.png&#34; alt=&#34;&#34; /&gt;
We&amp;rsquo;ve written a Template Toolkit template; the parts surrounded in &lt;code&gt;[% ... %]&lt;/code&gt; are templating directives. If you&amp;rsquo;re not too familiar with the Template Toolkit, the Maypole manual&amp;rsquo;s &lt;a href=&#34;http://maypole.simon-cozens.org/doc/View.html&#34;&gt;view documentation&lt;/a&gt; has a good introduction to TT in the Maypole context.&lt;/p&gt;

&lt;p&gt;Maypole provides a number of default Template macros, such as &lt;code&gt;maybe_link_view&lt;/code&gt;, which links an object to a page viewing that object, although all of these can be overridden. It also passes in the object &lt;code&gt;product&lt;/code&gt;, which it knows to be the one we&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;In fact, that&amp;rsquo;s what Maypole is really about: we&amp;rsquo;ve described it in terms of putting a web front-end onto a database, but fundamentally, it&amp;rsquo;s responsible for using the URL &lt;code&gt;/product/view/210&lt;/code&gt; to load up the &lt;code&gt;product&lt;/code&gt; object with ID &lt;code&gt;210&lt;/code&gt;, call the &lt;code&gt;view&lt;/code&gt; method on its class, and pass it to the &lt;code&gt;view&lt;/code&gt; template. Similarly, &lt;code&gt;/product/list&lt;/code&gt; calls the &lt;code&gt;list&lt;/code&gt; method on the product class, which populates the template with a page full of products.&lt;/p&gt;

&lt;p&gt;The interesting thing about this template is that very last line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [% button(product, &amp;quot;order&amp;quot;) %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces a button which will produce a POST to the URL &lt;code&gt;/product/order/210&lt;/code&gt;, which does the same as &lt;code&gt;view&lt;/code&gt; except this time calls the &lt;code&gt;order&lt;/code&gt; method. But Maypole doesn&amp;rsquo;t yet know how to &lt;code&gt;order&lt;/code&gt; a product. This is OK, because we can tell it.&lt;/p&gt;

&lt;h2 id=&#34;span-id-ease-of-extensibility-ease-of-extensibility-span&#34;&gt;&lt;span id=&#34;Ease_of_Extensibility&#34;&gt;Ease of Extensibility&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Maypole&amp;rsquo;s third principle is ease of extensibility. That is to say, Maypole makes it very easy to go from a simple database front-end to a full-fledged web application. Which is just as well; as has been simulated above, once the templates come back from the web designers, you find that what you thought was just going to be a product database has become an online shop. And you&amp;rsquo;ve still got a deadline.&lt;/p&gt;

&lt;p&gt;But before we start extending our catalogue application to take on the new specifications (which we&amp;rsquo;ll do in the second article about this), let&amp;rsquo;s take a look at what we&amp;rsquo;ve achieved so far and what we need immediately.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve got a way to list all the products, manufacturers, categories, and subcategories in our database; we have a way to add, edit and delete all of these things; we can search for products by manufacturer, price, and so on. What&amp;rsquo;s to stop us deploying this as a customer-facing web site, as well as for Intranet updates to the product catalogue?&lt;/p&gt;

&lt;p&gt;The immediate problem is security. We can add, edit, and delete products &amp;ndash; but so can anyone else. We want to allow those coming from the outside world only to view, list and search; for everything else, we require the user to be coming from an IP address in our internal range. (For now; we&amp;rsquo;ll add the concept of a user when we&amp;rsquo;re adding the shopping cart, and the idea of privileged user won&amp;rsquo;t be far off that.)&lt;/p&gt;

&lt;p&gt;Unfortunately, now we want some user-defined behavior, we have to start writing code. Thankfully, we don&amp;rsquo;t have to write much of it. We add a few lines to our driver class, first to define our private IP address space as a &lt;code&gt;NetAddr::IP&lt;/code&gt; object, since that provides a handy way of determining if an address is in a network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use constant INTERNAL_RANGE =&amp;gt; &amp;quot;10.0.0.0/8&amp;quot;;
    use NetAddr::IP;
    my $range = NetAddr::IP-&amp;gt;new(INTERNAL_RANGE);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we write our authentication method; Maypole&amp;rsquo;s default &lt;code&gt;authenticate&lt;/code&gt; allows everyone access to everything, so we need to override this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Maypole::Constants;
    sub authenticate {
        my ($self, $r) = @_;

        # Everyone can view, search, list
        return OK if $r-&amp;gt;action =~ /^(view|search|list)$/;

        # Else they have to be in the internal network
        my $ip = NetAddr-&amp;gt;IP-&amp;gt;new($r-&amp;gt;{ar}-&amp;gt;connection-&amp;gt;remote_ip);
        return OK if $ip-&amp;gt;within($range);
        return DECLINED;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;authenticate&lt;/code&gt; class method gets passed a Maypole request object; this is like an Apache request object, but at a much, much higher level &amp;ndash; it contains information about the web request, the class that&amp;rsquo;s going to be used to fulfill the request, the method we need to call on the class, the template that&amp;rsquo;s going to be processed, any objects, form parameters, and query parameters, and so on.&lt;/p&gt;

&lt;p&gt;At this point, Maypole has already parsed the URI into its component database table, action, and additional arguments, so we first check to see if the action is one of the universally permitted ones.&lt;/p&gt;

&lt;p&gt;If not, we extract the &lt;code&gt;Apache::Request&lt;/code&gt; object stashed inside the Maypole object, and ask it for the remote IP address. If it&amp;rsquo;s in the private range, we can do everything. If not, we can do nothing. Simple enough.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s almost ready to go live, when the design guys tell you that they&amp;rsquo;d really love to put a picture alongside the description of a product. No problem.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s two ways to do this; the way that seems really easy uses the file system to store the pictures, and has you put something like this in the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;IMG SRC=&amp;quot;/static/product_pictures/[% product.id %].png&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But while that&amp;rsquo;s very simple for viewing pictures, and makes a great mockup, it&amp;rsquo;s not that easy to upload pictures. So you decide to put the pictures in the database. You add a &amp;ldquo;picture&amp;rdquo; binary column to the product table, and then you consult the Maypole manual.&lt;/p&gt;

&lt;p&gt;One of the great things about this Perl Foundation sponsorship is that it&amp;rsquo;s allowing me to put together a really great manual, which contains all sorts of tricks for dealing with Maypole; the &lt;a href=&#34;http://maypole.simon-cozens.org/doc/Request.html&#34;&gt;Request&lt;/a&gt; chapter contains a couple of recipes for uploading and displaying photos.&lt;/p&gt;

&lt;p&gt;What we need to do is create some new actions &amp;ndash; one to upload a picture, and one to display it again. We&amp;rsquo;ll only show the one to display a picture, since you can get them both from the manual, and because looking at this turns out to be a handy way to understand how to extend Maypole more generally.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s useful to visualize what we&amp;rsquo;re going to end up with, and work backwards. We&amp;rsquo;ll have a URL like &lt;code&gt;/product/view_picture/210&lt;/code&gt; producing an &lt;code&gt;image/png&lt;/code&gt; or similar page with the product&amp;rsquo;s image. This allows us to put in our templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;IMG SRC=&amp;quot;/product/view_picture/[% product.id %]/&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And have the image displayed on our product view page. In fact, we&amp;rsquo;re more likely to want to say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [% IF product.picture %]
    &amp;lt;IMG SRC=&amp;quot;/product/view_picture/[% product.id %]/&amp;quot;&amp;gt;
    [% ELSE %]
    &amp;lt;IMG SRC=&amp;quot;/static/no_picture.png&amp;quot;&amp;gt;
    [% END %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we&amp;rsquo;ve explained that Maypole turns URLs into method calls, so we&amp;rsquo;re going to be putting a &lt;code&gt;view_picture&lt;/code&gt; method in the product&amp;rsquo;s class; this class is &lt;code&gt;ISellIt::Product&lt;/code&gt;, so we begin like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package ISellIt::Product;
    sub view_picture {
        my ($self, $r) = @_;
        # ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has a big problem. We don&amp;rsquo;t actually want people to be able to call any method on our class over the web; that would be unwise. Maypole will refuse to do this. So in order to tell Maypole that we&amp;rsquo;re allowed to call this method remotely, we decorate it with an attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub view_picture :Exported {
        my ($self, $r) = @_;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we can call &lt;code&gt;view_picture&lt;/code&gt; over the Web; we now need to make it populate the Maypole request with the appropriate data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub view_picture :Exported {
        my ($self, $r, $product) = @_;
        if ($product) {
            $r-&amp;gt;{content_type} = &amp;quot;image/png&amp;quot;;
            $r-&amp;gt;{content} = $product-&amp;gt;picture;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a slightly unusual Maypole method, because we&amp;rsquo;re bypassing the whole view class processing and templating stages, and generating content manually, but it serves to illustrate one thing: Maypole arranges for the appropriate object to be passed into the method; we&amp;rsquo;ve gone from URL to object without requiring any code of our own.&lt;/p&gt;

&lt;p&gt;When we come to implementing ordering, in our next article, we&amp;rsquo;ll be adding more actions like this to place the product in a user&amp;rsquo;s shopping cart, check out, validate his credit card and so on. But this should be good enough for now: a templated, web-editable product database, with pictures, without stress, without too much code, and within the deadline. Well, almost.&lt;/p&gt;

&lt;h2 id=&#34;span-id-summary-summary-span&#34;&gt;&lt;span id=&#34;Summary&#34;&gt;Summary&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Maypole is evolving rapidly, thanks primarily to the Perl Foundation who have enabled me to work on it for this month; it&amp;rsquo;s allowed me to write many thousands of words of articles, sample applications, and Maypole-related code, and this has helped Maypole to become an extremely useful framework for developing web applications.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

