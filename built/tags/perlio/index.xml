<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perlio on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perlio/</link>
    <description>Recent content in Perlio on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2015 12:19:04 +0000</lastBuildDate>
    <atom:link href="/tags/perlio/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stupid open() tricks</title>
      <link>http://localhost:1313/article/182/2015/7/15/Stupid-open---tricks/</link>
      <pubDate>Wed, 15 Jul 2015 12:19:04 +0000</pubDate>
      
      <guid>http://localhost:1313/article/182/2015/7/15/Stupid-open---tricks/</guid>
      <description>

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; function can do much more than you probably realize. If you read enough about Perl, you&amp;rsquo;ll start to notice the theme that everyone expects you to use the three-argument &lt;code&gt;open&lt;/code&gt;. There&amp;rsquo;s much more that the &lt;code&gt;open&lt;/code&gt; can do. Some of these &amp;ldquo;stupid open() tricks&amp;rdquo; may be useful, but they may also be dangerous. These tricks were performed on a closed course by a professional driver. Do not attempt at home. Or work. And, to focus on &lt;code&gt;open&lt;/code&gt;, I&amp;rsquo;ve left off all of the error checking.&lt;/p&gt;

&lt;h3 id=&#34;no-explicit-filename&#34;&gt;No explicit filename&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a one-argument form of &lt;code&gt;open&lt;/code&gt; that takes only a bareword filehandle. In this example, when I open the filehandle &lt;code&gt;F&lt;/code&gt; with no other arguments, Perl uses the package scalar variable of the same name as the filename:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; $F;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( $F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift @ARGV ) {
  open F;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(  ) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; }
  close F;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might seem a bit silly, but as many shortcuts like this, consider the one-liner and scripting side of Perl. Imagine I want to go through a bunch of files on the command line, but some of those I want to skip. I can&amp;rsquo;t simply use &lt;code&gt;-n&lt;/code&gt; because that opens all the files for me. I have to handle that myself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;while($F=shift){next if$F=~/\.jpg/;open F;while(&amp;lt;F&amp;gt;){print;exit if /Perl/}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe you&amp;rsquo;ll need that once in life. Maybe you&amp;rsquo;ll never want to use it. Still, there it is.&lt;/p&gt;

&lt;h3 id=&#34;create-an-anonymous-temporary-file&#34;&gt;Create an anonymous temporary file&lt;/h3&gt;

&lt;p&gt;If I give &lt;code&gt;open&lt;/code&gt; a filename of an explicit &lt;code&gt;undef&lt;/code&gt; and the read-write mode (&lt;code&gt;+&amp;gt;&lt;/code&gt; or &lt;code&gt;+&amp;lt;&lt;/code&gt;), Perl opens an anonymous temporary file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;gt;&amp;#39;&lt;/span&gt;, undef;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl actually creates a named file and opens it, but immediately unlinks the name. No one else will be able to get to that file because no one else has the name for it. If I had used &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;, I might leave the temporary file there, or something else might be able to see it while I&amp;rsquo;m working with it.&lt;/p&gt;

&lt;h3 id=&#34;print-to-a-string&#34;&gt;Print to a string&lt;/h3&gt;

&lt;p&gt;If my &lt;strong&gt;perl&lt;/strong&gt; is compiled with PerlIO (it probably is), I can open a filehandle on a scalar variable if the filename argument is a reference to that variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is handy when I want to capture output for an interface that expects a filehandle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;something_that_prints( $fh );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;$string&lt;/code&gt; contains whatever was printed by the function. I can inspect it by printing it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I captured:\n$string&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;read-lines-from-a-string&#34;&gt;Read lines from a string&lt;/h3&gt;

&lt;p&gt;I can also read from a scalar variable by opening a filehandle on it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; $string;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can play with the string line-by-line without messing around with regex anchors or line endings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; ) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I write about these sorts of filehandle-on-string tricks in &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;make-a-pipeline&#34;&gt;Make a pipeline&lt;/h3&gt;

&lt;p&gt;Most Unix programmers probably already know that they can read the output from a command as the input for another command. I can do that with Perl&amp;rsquo;s &lt;code&gt;open&lt;/code&gt; too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pipe, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$pipe&amp;gt;&lt;/span&gt; ) {
  say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_&amp;#34;&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reads the output of the &lt;code&gt;date&lt;/code&gt; system command and prints it. But, I can have more than one command in that pipeline. I have to abandon the three-argument form which purposely prevents this nonsense:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pipe, &lt;span style=&#34;color:#e6db74&#34;&gt;qq(cat &amp;#39;$0&amp;#39; | sort |)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$pipe&amp;gt;&lt;/span&gt; ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$.: $_&amp;#34;&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This captures the text of the current program, sorts each line alphabetically and prints the output with numbered lines. I might get a &lt;a href=&#34;http://www.smallo.ruhr.de/award.html&#34;&gt;Useless Use of cat Award&lt;/a&gt; for that program that sorts the lines of the program, but it&amp;rsquo;s still a feature.&lt;/p&gt;

&lt;h3 id=&#34;gzip-on-the-fly&#34;&gt;gzip on the fly&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;http://perltricks.com/article/162/2015/3/27/Gzipping-data-directly-from-Perl&#34;&gt;Gzipping data directly from Perl&lt;/a&gt;, I showed how I could compress data on the fly by using Perl&amp;rsquo;s gzip IO layer. This is handy when I have limited disk space:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;:gzip&amp;#39;&lt;/span&gt; $filename 
  &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not write to $filename: $!&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; something_interesting() ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; { $fh } $_;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can go the other direction as well, reading directly from compressed files when I don&amp;rsquo;t have enough space to uncompress them first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:gzip&amp;#39;&lt;/span&gt; $filename 
  &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not read from $filename: $!&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;change-stdout&#34;&gt;Change STDOUT&lt;/h3&gt;

&lt;p&gt;I can change the default output filehandle with &lt;code&gt;select&lt;/code&gt; if I don&amp;rsquo;t like standard output, but I can do that in another way. I can change &lt;code&gt;STDOUT&lt;/code&gt; for the times when the easy way isn&amp;rsquo;t fun enough. David Farrell showed some of this in &lt;a href=&#34;http://perltricks.com/article/45/2013/10/27/How-to-redirect-and-restore-STDOUT&#34;&gt;How to redirect and restore STDOUT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First I can say the &amp;ldquo;dupe&amp;rdquo; the standard output filehandle with the special &lt;code&gt;&amp;amp;&lt;/code&gt;mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $STDOLD, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;amp;&amp;#39;&lt;/span&gt;, STDOUT;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any of the file modes will work there as long as I append the &lt;code&gt;&amp;amp;&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;I can then re-open &lt;code&gt;STDOUT&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should be logged to log.txt.&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I&amp;rsquo;m ready to change it back, I do the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open STDOUT, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;amp;&amp;#39;&lt;/span&gt;, $STDOLD;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should show in the terminal&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I only have the file descriptor, perhaps because I&amp;rsquo;m working with an old Unix programmer who thinks &lt;strong&gt;vi&lt;/strong&gt; is a crutch, I can use that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;&amp;amp;=$fd&amp;#34;&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not open filehandle on $fd\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file descriptor has a three-argument form too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;amp;=&amp;#39;&lt;/span&gt;, $fd
  &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not open filehandle on $fd\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can have multiple filehandles that go to the same place since they are different names for the same file descriptor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;amp;=&amp;#39;&lt;/span&gt;, fileno(STDOUT);

say         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Going to default&amp;#39;&lt;/span&gt;;
say $fh     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Going to duped version. fileno &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; fileno($fh);
say STDOUT  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Going to STDOUT. fileno &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; fileno($fh);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these print to STDOUT.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

