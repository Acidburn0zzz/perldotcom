<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/sql/</link>
    <description>Recent content in Sql on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Oct 2018 10:02:33 +0000</lastBuildDate>
    <atom:link href="/tags/sql/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Querying MySQL with Perl and DBI</title>
      <link>http://localhost:1313/article/querying-mysql-with-perl/</link>
      <pubDate>Tue, 16 Oct 2018 10:02:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/querying-mysql-with-perl/</guid>
      <description>

&lt;h1 id=&#34;querying-mysql-with-perl-and-dbi&#34;&gt;Querying MySQL with Perl and DBI&lt;/h1&gt;

&lt;p&gt;MySQL is one of the top databases, with options from &lt;a href=&#34;http://www.raspberry-projects.com/pi/software_utilities/web-servers/mysql&#34;&gt;installing it on a Raspberry PI&lt;/a&gt; to DBaaS providers such as &lt;a href=&#34;https://cloud.google.com/sql/&#34;&gt;Google&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/rds/&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I was first learning to work with databases, I needed a toy project, where I could learn without it affecting work data. I was getting into Quantified Self and wanted to get better sleep, so I wrote a coffee tracker and a &lt;em&gt;lot&lt;/em&gt; of MySQL.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial&#34;&gt;DigitalOcean has a good article on setting up and using a MySQL database on a Linux server&lt;/a&gt;, covering both Debian and RedHat-based packages. If you want to use Perl to connect to the database as well, you need to add development packages for &lt;code&gt;DBD::mysql&lt;/code&gt; to connect to. On the Debian side, run &lt;code&gt;apt-get install libmysqlclient-dev&lt;/code&gt; to get the client-side dev libraries for &lt;a href=&#34;https://metacpan.org/pod/DBD::mysql&#34;&gt;DBD::mysql&lt;/a&gt; to use to talk to the database, no matter if you get DBD::mysql and &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; from apt or CPAN.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re wanting to run from Windows, &lt;a href=&#34;http://strawberryperl.com/&#34;&gt;Strawberry Perl&lt;/a&gt; comes bundled with DBD::mysql and the client libraries. For Mac users, you may need to use Homebrew to install the client libs.&lt;/p&gt;

&lt;p&gt;Note: &lt;a href=&#34;https://mariadb.com/&#34;&gt;MariaDB&lt;/a&gt; was forked from MySQL by the original developer, Michael Widenius. They are functionally interchangeable. If you want to hear more of the story, &lt;a href=&#34;https://twit.tv/shows/floss-weekly/episodes/194&#34;&gt;Randal Schwartz interviewed him for FLOSS Weekly&lt;/a&gt;. If you want to work with MariaDB instead, there is &lt;a href=&#34;https://mariadb.com/kb/en/library/perl-dbi/&#34;&gt;DBD::MariaDB&lt;/a&gt;, but the MySQL driver &amp;ldquo;should generally work&amp;rdquo; with MariaDB. This article will cover MySQL.&lt;/p&gt;

&lt;p&gt;There also exists a pure Perl module that interacts with MySQL without the drivers, called &lt;a href=&#34;https://metacpan.org/pod/Net::MySQL&#34;&gt;Net::MySQL&lt;/a&gt;. If you are coding where you cannot install drivers, it could be helpful, but it won&amp;rsquo;t be covered here.&lt;/p&gt;

&lt;p&gt;(note to editor: SETUP is WAY big. We kinda need it, but if the goal is &amp;lt; 1000 words, there&amp;rsquo;s a problem.)&lt;/p&gt;

&lt;h2 id=&#34;connecting&#34;&gt;Connecting&lt;/h2&gt;

&lt;p&gt;This is as much a networking protocol as a query language, so the first step is to connect to the database. In this case, we want the host (maybe &lt;code&gt;localhost&lt;/code&gt;), the port (the default is 3306) and the database, which we&amp;rsquo;ll call &lt;em&gt;coffee&lt;/em&gt;, which makes the &lt;em&gt;source&lt;/em&gt; to be &lt;code&gt;dbi:mysql:coffee:localhost:3306&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of optional attributes you can also add when connecting to a database, and here are a few I use on suggestion from &lt;a href=&#34;http://perltraining.com.au/talks/dbi-trick.pdf&#34;&gt;Paul Fenwick&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dbi:mysql:$database:$host:$port&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %attr;
    $attr{RaiseError}         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# throws die() w/ error&lt;/span&gt;
    $attr{PrintError}         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# avoid double-printing&lt;/span&gt;
    $attr{ShowErrorStatement} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# appends query to error&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dbh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DBI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect( $source, $user, $password, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%attr )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $DBI::errstr ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;data-into-db&#34;&gt;Data Into DB&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;re connected to the database, with &lt;code&gt;$dbh&lt;/code&gt; as our handler. Creating the table is a bit outside what we&amp;rsquo;re doing here, but running the query &lt;code&gt;describe coffee&lt;/code&gt; brings us this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;+-----------+--------------+------+-----+-------------------+-------+
| Field     | Type         | Null | Key | Default           | Extra |
+-----------+--------------+------+-----+-------------------+-------+
| id        | varchar(255) | NO   | PRI | NULL              |       |
| cups      | int(10)      | NO   |     | NULL              |       |
| datestamp | timestamp    | NO   |     | CURRENT_TIMESTAMP |       |
+-----------+--------------+------+-----+-------------------+-------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;datestamp&lt;/code&gt; are auto-populated, so the query is as easy as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INSERT INTO coffee ( cups ) VALUES ( ? )&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll notice the &lt;code&gt;?&lt;/code&gt;. This serves as a &lt;strong&gt;placeholder&lt;/strong&gt;, allowing me to enterone cup or ten, depending on what kind of day I&amp;rsquo;m having. Yes, we &lt;strong&gt;could&lt;/strong&gt; change that question mark into the actual number, but in the world of computing, &lt;a href=&#34;https://xkcd.com/327/&#34;&gt;you&amp;rsquo;re not always in control of what data is going in.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;exploits_of_a_mom.png&#34; alt=&#34;The Image from xkcd 327&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @cups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepare($query) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
$sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(@cups) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rows;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;$rows&lt;/code&gt; gives us the number of rows affected by this query, which, in this case, would be 1.&lt;/p&gt;

&lt;p&gt;If we knew, each time, we&amp;rsquo;d report only one cup, it would be quicker and easier to just do as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INSERT INTO coffee ( cups ) VALUES ( 1 )&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;data-out-of-db&#34;&gt;Data Out Of DB&lt;/h2&gt;

&lt;p&gt;So, now I have several years of coffee tracked, and I want to do something with it. Like, how many cups of coffee have I had per day?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SQL&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SELECT SUM(cups) cups,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    DATE(datestamp) date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FROM coffee
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;GROUP BY date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ORDER BY date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SQL&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepare($query) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
$sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $arrayref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $fetchall_arrayref();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is good, but it has two problems: we&amp;rsquo;re getting everything and we&amp;rsquo;re not getting it by name. It&amp;rsquo;s an array of arrays, and we have hashes for a reason.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SQL&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;select SUM(cups) cups ,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    DATE(datestamp) date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FROM coffee_intake
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;WHERE DATE(datestamp) &amp;gt; ?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;AND DATE(datestamp) &amp;lt; ?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;GROUP BY date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ORDER BY date
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SQL&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-01&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-31&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepare($query) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
$sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(@$dates) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hashref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fetchall_hashref(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have a hashref that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;2017-12-02&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cups&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2017-12-02&amp;#34;&lt;/span&gt;
   },
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is good, but it could be better. We&amp;rsquo;re duplicating the date, but we cannot have a key be anything that isn&amp;rsquo;t in the query.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-01&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-31&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;prepare($query) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
$sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;execute(@$dates) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; croak $dbh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;errstr;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hashref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sth&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fetchall_arrayref({});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives us an array of hashrefs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
   {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cups&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2017-12-02&amp;#34;&lt;/span&gt;
   },
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;more-info&#34;&gt;More Info&lt;/h2&gt;

&lt;p&gt;The documentation for &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/DBD::mysql&#34;&gt;DBD::mysql&lt;/a&gt; are in-depth and excellent, and there are several articles on Perl.com that are well worth reading. &lt;a href=&#34;https://www.perl.com/pub/1999/10/DBI.html/&#34;&gt;Mark-Jason Dominus has a Short Guide to DBI&lt;/a&gt;  and &lt;a href=&#34;https://www.perl.com/pub/2003/10/23/databases.html/&#34;&gt;Simon Cozens wrote more generally about DBI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more on how to protect your databases, &lt;a href=&#34;https://blog.petdance.com/&#34;&gt;Andy Lester&lt;/a&gt; maintains &lt;a href=&#34;http://bobby-tables.com/&#34;&gt;Bobby-Tables&lt;/a&gt;, which shows you how to avoid SQL injection attacks.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

