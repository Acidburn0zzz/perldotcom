<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>State of the Onion on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/state-of-the-onion/</link>
    <description>Recent content in State of the Onion on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 09:07:55 +0000</lastBuildDate>
    <atom:link href="/tags/state-of-the-onion/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Listen to Larry Wall&#39;s State of the Onion 2000 on YouTube</title>
      <link>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</link>
      <pubDate>Fri, 10 Jul 2020 09:07:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/TODDR&#34;&gt;Todd Rinaldo&lt;/a&gt; has uploaded Larry&amp;rsquo;s State of the Onion talk from YAPC &lt;del&gt;19100&lt;/del&gt; 2000 to &lt;a href=&#34;https://www.youtube.com/watch?v=a1SEt_-QMDo&#34;&gt;YouTube&lt;/a&gt;. Previously it was available in separate mp3 files, but this is much more accessible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a typical Larry talk filled with quirky, humorous observations about life and programming, and notably he announces the Perl 6 project.&lt;/p&gt;

&lt;p&gt;Unfortunately the audio is low quality (hey it was 20 years ago at a low-budget conference); you can read a transcript of the talk &lt;a href=&#34;http://localhost:1313/pub/2000/10/23/soto2000.html/&#34;&gt;here&lt;/a&gt; (with mp3 download links at the bottom). We also have collection of attendees&amp;rsquo; &lt;a href=&#34;http://localhost:1313/pub/2000/07/yapc19101.html/&#34;&gt;reports&lt;/a&gt; from the conference.&lt;/p&gt;

&lt;p&gt;If you enjoy Larry&amp;rsquo;s talks, you might like some of his other &lt;a href=&#34;http://localhost:1313/authors/larry-wall/&#34;&gt;transcribed talks / articles&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hidden Gems of Perl.com</title>
      <link>http://localhost:1313/article/hidden-gems-of-perl-com/</link>
      <pubDate>Thu, 04 Jan 2018 09:00:06 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hidden-gems-of-perl-com/</guid>
      <description>

&lt;p&gt;A few months ago, as I was familiarizing myself with the old Perl.com source material, I kept getting distracted by these wonderful articles that I hadn&amp;rsquo;t read before. Now that the site has relaunched, and the old articles lovingly restored, I thought I&amp;rsquo;d share a few of these hidden gems with you.&lt;/p&gt;

&lt;h3 id=&#34;here-be-wizards&#34;&gt;Here be Wizards&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Where Wizards Fear to Tread&lt;/em&gt; was a brief, perlguts-focused series started by &lt;a href=&#34;https://www.perl.com/authors/simon-cozens/&#34;&gt;Simon Cozens&lt;/a&gt;. This particular &lt;a href=&#34;http://localhost:1313/pub/2002/05/07/optree.html/&#34;&gt;article&lt;/a&gt; discusses the Perl op tree.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to rekindle this series. If you have a Perl internals article that you&amp;rsquo;d like to write, please get in touch with &lt;a href=&#34;mailto:perl.com-editor@perl.org&#34;&gt;me&lt;/a&gt; or see our contributing &lt;a href=&#34;https://github.com/dnmfarrell/perldotcom/blob/master/CONTRIBUTING.md&#34;&gt;guide&lt;/a&gt; and send us a pull request with a draft article.&lt;/p&gt;

&lt;h3 id=&#34;naughty-perl&#34;&gt;Naughty Perl&lt;/h3&gt;

&lt;p&gt;In the old Perl.com source code, I came across several raw documents which didn&amp;rsquo;t appear to have been officially published on the site, but did contain good content. For example &lt;a href=&#34;https://www.perl.com/authors/tom-christiansen/&#34;&gt;Tom Christiansen&amp;rsquo;s&lt;/a&gt; article &lt;a href=&#34;http://localhost:1313/doc/FMTEYEWTK/versus/perl.html/&#34;&gt;The Seven Deadly Sins of Perl&lt;/a&gt; is a fun read worthy of your time. Can you count how many of the &amp;ldquo;sins&amp;rdquo; have been addressed since then?&lt;/p&gt;

&lt;h3 id=&#34;just-code-it-in-perl-6&#34;&gt;Just code it in Perl (6)?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/06/27/ctoperl.html/&#34;&gt;Why not Translate Perl to C?&lt;/a&gt; is a sobering reminder by &lt;a href=&#34;https://www.perl.com/authors/mark-jason-dominus/&#34;&gt;Mark Jason Dominus&lt;/a&gt; that re-writing Perl as C often won&amp;rsquo;t yield faster programs. The article ends with optimistic speculation that Perl 6 may use gradual typing and static data structures to deliver better performance. Fast-forward a few years, and good news! Perl 6 supports &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/18/day-18-sized-typed-shaped/&#34;&gt;sized and typed data structures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MJD regularly blogs at his own &lt;a href=&#34;https://blog.plover.com/&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;state-of-the-onion&#34;&gt;State of the Onion&lt;/h3&gt;

&lt;p&gt;Larry has a good number of &lt;a href=&#34;https://www.perl.com/authors/larry-wall/&#34;&gt;articles&lt;/a&gt; on Perl.com, including some of the oldest. The &lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html/&#34;&gt;2nd State of the Onion&lt;/a&gt; was published way back in August 1998, and it&amp;rsquo;s still an entertaining read (or re-read if you&amp;rsquo;ve forgotten it).&lt;/p&gt;

&lt;h3 id=&#34;more-to-come&#34;&gt;More to come&lt;/h3&gt;

&lt;p&gt;There are more articles to recommend, but for the sake of brevity I&amp;rsquo;ll stop here. In the meantime feel free to explore the site; you never know, you might stumble upon another &amp;hellip; hidden gem!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hidden-gems-of-perl-com/indiana-stone.jpg&#34; alt=&#34;Indiana Jones discovers treasure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Cover image by &lt;a href=&#34;http://i.imgur.com/4VOS6iz.png&#34;&gt;Shachar Harshuv&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming is Hard, Let&#39;s Go Scripting...</title>
      <link>http://localhost:1313/pub/2007/12/06/soto-11.html/</link>
      <pubDate>Thu, 06 Dec 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/12/06/soto-11.html/</guid>
      <description>

&lt;p&gt;I think, to most people, scripting is a lot like obscenity. I can&amp;rsquo;t define it, but I&amp;rsquo;ll know it when I see it. Here are some common memes floating around:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Simple language
    &amp;quot;Everything is a string&amp;quot;
    Rapid prototyping
    Glue language
    Process control
    Compact/concise
    Worse-is-better
    Domain specific
    &amp;quot;Batteries included&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;I don&amp;rsquo;t see any real center here, at least in terms of technology. If I had to pick one metaphor, it&amp;rsquo;d be easy onramps. And a slow lane. Maybe even with some optional fast lanes.&lt;/p&gt;

&lt;h3 id=&#34;easy-onramps&#34;&gt;Easy Onramps&lt;/h3&gt;

&lt;p&gt;But basically, scripting is not a technical term. When we call something a scripting language, we&amp;rsquo;re primarily making a linguistic and cultural judgment, not a technical judgment.&lt;/p&gt;

&lt;p&gt;I see scripting as one of the humanities. It&amp;rsquo;s our linguistic roots showing through. So speaking of roots&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;the-past&#34;&gt;The Past&lt;/h3&gt;

&lt;p&gt;Suppose you went back to Ada Lovelace and asked her the difference between a script and a program. She&amp;rsquo;d probably look at you funny, then say something like: Well, a script is what you give the actors, but a program is what you give the audience. That Ada was one sharp lady&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since her time, we seem to have gotten a bit more confused about what we mean when we say scripting. It confuses even me, and I&amp;rsquo;m supposed to be one of the experts.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m afraid all I can do is give you my own worm&amp;rsquo;s eye view of the past, the present, and the future. Let me warn you that I am not without a few prejudices here and there.&lt;/p&gt;

&lt;h3 id=&#34;basic&#34;&gt;BASIC&lt;/h3&gt;

&lt;p&gt;Now, however it was initially intended, I think BASIC turned out to be one of the first major scripting languages, especially the extended version that DEC put onto its minicomputers called BASIC/PLUS, which happily included recursive functions with arguments. I started out as a BASIC programmer. Some people would say that I&amp;rsquo;m permanently damaged. Some people are undoubtedly right.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m not going to apologize for that. All language designers have their occasional idiosyncracies. I&amp;rsquo;m just better at it than most. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;rsts-basic-plus&#34;&gt;RSTS BASIC/PLUS&lt;/h3&gt;

&lt;p&gt;Anyway, when I was a RSTS programmer on a PDP-11, I certainly treated BASIC as a scripting language, at least in terms of rapid prototyping and process control. I&amp;rsquo;m sure it warped my brain forever. Perl&amp;rsquo;s statement modifiers are straight out of BASIC/PLUS. It even had some cute sigils on the ends of its variables to distinguish string and integer from floating point.&lt;/p&gt;

&lt;p&gt;But you could do extreme programming. In fact, I had a college buddy I did pair programming with. We took a compiler writing class together and studied all that fancy stuff from the dragon book. Then of course the professor announced we would be implementing our own language, called PL/0. After thinking about it a while, we announced that we were going to do our project in BASIC. The professor looked at us like were insane. Nobody else in the class was using BASIC. And you know what? Nobody else in the class finished their compiler either. We not only finished but added I/O extensions, and called it PL 0.5. That&amp;rsquo;s rapid prototyping.&lt;/p&gt;

&lt;h3 id=&#34;unix&#34;&gt;Unix?&lt;/h3&gt;

&lt;p&gt;I remember one day our computer center got a letter from Bell Labs telling us that we could get a tape of Unix V6 for cheap, only $100 because they were coming out shortly with V7. We all looked at each other and said, Why would we ever want to use this thing called Unix? We have RSTS.&lt;/p&gt;

&lt;h3 id=&#34;jam-no-not-that-one&#34;&gt;JAM (no not that one)&lt;/h3&gt;

&lt;p&gt;My first scripting language was written in BASIC. For my job in the computer center I wrote a language that I called JAM, short for Jury-rigged All-purpose Meta-language. Story of my life&amp;hellip;&lt;/p&gt;

&lt;p&gt;JAM was an inside-out text-processing language much like PHP, except that HTML hadn&amp;rsquo;t been invented yet. We mostly used it as a fancy macro processor for BASIC. Unlike PHP, it did not have 3,000 functions in one namespace. We wouldn&amp;rsquo;t have had the memory, for one thing.&lt;/p&gt;

&lt;h3 id=&#34;lisp&#34;&gt;LISP&lt;/h3&gt;

&lt;p&gt;For good or ill, when I went off to grad school, I studied linguistics, so the only computer language I used there was LISP. It was my own personal McCarthy era.&lt;/p&gt;

&lt;p&gt;Is LISP a candidate for a scripting language? While you can certainly write things rapidly in it, I cannot in good conscience call LISP a scripting language. By policy, LISP has never really catered to mere mortals.&lt;/p&gt;

&lt;p&gt;And, of course, mere mortals have never really forgiven LISP for not catering to them.&lt;/p&gt;

&lt;h3 id=&#34;pascal-ada&#34;&gt;Pascal, Ada&lt;/h3&gt;

&lt;p&gt;Once I got into industry, I wrote a compiler in Pascal for a discrete event simulator, and slavered over the forthcoming Ada specs. As a linguist, I don&amp;rsquo;t think of Ada as a big language. Now, English and Japanese, those are big languages. Ada is just a medium-sized language.&lt;/p&gt;

&lt;h3 id=&#34;unix-shell&#34;&gt;Unix, shell&lt;/h3&gt;

&lt;p&gt;After several years I finally became acquainted with Unix and its various scripting languages. OK, to be more precise, BSD, and csh.&lt;/p&gt;

&lt;h3 id=&#34;bsd-csh&#34;&gt;BSD, csh&lt;/h3&gt;

&lt;p&gt;Yeah, yeah, I know. More brain damage&amp;hellip;&lt;/p&gt;

&lt;p&gt;I also learned a little C.&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s because a little C is all there is. I&amp;rsquo;m still learning those libraries though.&lt;/p&gt;

&lt;h3 id=&#34;shell-awk-sed-find-expr&#34;&gt;shell + awk + sed + find + expr&amp;hellip;&lt;/h3&gt;

&lt;p&gt;But the frustrations of Unix shell programming led directly to the creation of Perl, which I don&amp;rsquo;t really have time to tell. But essentially, I found that shell scripting was intrinsically limited by the fact that most of its verbs are not under its control and hence largely inconsistent with each other. And the nouns are impoverished, restricted to strings and files, with who-knows-what typology.&lt;/p&gt;

&lt;h3 id=&#34;c-xor-shell&#34;&gt;C xor shell&lt;/h3&gt;

&lt;p&gt;More destructive was the mindset that it was a one-dimensional universe: you either programmed in C or you programmed in shell, because they&amp;rsquo;re obviously at opposite ends of the One True Continuum. Perl came about when I realized that scripting did not always have to viewed as the opposite of programming, but that a single language could be pretty good for both. That opened up a huge ecological niche. Many of you have seen my old clamshell diagram, with the two dimensions of manipulexity and whipuptitude.&lt;/p&gt;

&lt;h3 id=&#34;tcl&#34;&gt;Tcl&lt;/h3&gt;

&lt;p&gt;After Perl came Tcl, which in a sense is a purer scripting language than Perl. Perl just pretends that everything is a string when it&amp;rsquo;s convenient, but Tcl really believes that as a controlling metaphor. The string metaphor tends to have bad performance ramifications, but that&amp;rsquo;s not why Tcl languished, I think. There were two reasons for that.&lt;/p&gt;

&lt;p&gt;First, Tcl stayed in the Unix mindset that controlling tools was the opposite of creating tools, so they didn&amp;rsquo;t optimize much. The fast parts can always be written in C, after all.&lt;/p&gt;

&lt;p&gt;The second reason was the lack of a decent extension mechanism, so you ended up with separate executables for expect, incr-tcl, etc.&lt;/p&gt;

&lt;p&gt;I must say, though, that I&amp;rsquo;ve always admired Tcl&amp;rsquo;s delegational model of semantics. But it fell into the same trap as LISP by expecting everyone to use the One True Syntax. Speaking of the One True Syntax:&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;After Tcl came Python, which in Guido&amp;rsquo;s mind was inspired positively by ABC, but in the Python community&amp;rsquo;s mind was inspired negatively by Perl. I&amp;rsquo;m not terribly qualified to talk about Python however. I don&amp;rsquo;t really know much about Python. I only stole its object system for Perl 5. I have since repented.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m much more qualified to talk about Ruby&amp;ndash;that&amp;rsquo;s because a great deal of Ruby&amp;rsquo;s syntax is borrowed from Perl, layered over Smalltalk semantics. I&amp;rsquo;ve always viewed Ruby as a much closer competitor for Perls ecological niche, not just because of the borrowed ideas, but because both Perl and Ruby take their functional programming support rather more seriously that Python does. On the other hand, I think Ruby kind of screwed up on its declaration syntax, among other things.&lt;/p&gt;

&lt;h3 id=&#34;sh&#34;&gt;*sh&lt;/h3&gt;

&lt;p&gt;Meanwhile, the Bourne shell was extended into the Korn shell and bash. I didn&amp;rsquo;t have much to do with those either. Thankfully. I will say that the continued evolution of the shell shows just how crufty a language can get when you just keep adding on ad hoc syntactic features.&lt;/p&gt;

&lt;h3 id=&#34;php&#34;&gt;PHP&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve also seen the rise of PHP, which takes the worse-is-better approach to dazzling new depths, as it were. By and large PHP seems to be making the same progression of mistakes as early Perl did, only slower. The one thing it does better is packaging. And when I say packaging, I don&amp;rsquo;t mean namespaces.&lt;/p&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;Then there&amp;rsquo;s JavaScript, a nice clean design. It has some issues, but in the long run JavaScript might actually turn out to be a decent platform for running Perl 6 on. Pugs already has part of a backend for JavaScript, though sadly that has suffered some bitrot in the last year. I think when the new JavaScript engines come out we&amp;rsquo;ll probably see renewed interest in a JavaScript backend.&lt;/p&gt;

&lt;h3 id=&#34;monad-powershell&#34;&gt;Monad/PowerShell&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve looked a bit at Microsoft&amp;rsquo;s Monad, and I&amp;rsquo;m pleased to note that it has object pipes like Perl 6. I just hope they don&amp;rsquo;t patent it.&lt;/p&gt;

&lt;h3 id=&#34;lua-applescript&#34;&gt;Lua, AppleScript&lt;/h3&gt;

&lt;p&gt;There are other scripting languages in wide use. Sadly, I must confess I never looked closely at Lua or AppleScript, probably because I&amp;rsquo;m not a game designer with a Mac.&lt;/p&gt;

&lt;p&gt;Actually, I suspect it runs deeper than that, which brings us up to the present time.&lt;/p&gt;

&lt;h3 id=&#34;the-present&#34;&gt;The Present&lt;/h3&gt;

&lt;p&gt;When I look at the present situation, what I see is the various scripting communities behaving a lot like neighboring tribes in the jungle, sometimes trading, sometimes warring, but by and large just keeping out of each other&amp;rsquo;s way in complacent isolation.&lt;/p&gt;

&lt;p&gt;I tend to take an anthropological view of these things. Many of you here are Perl programmers, but some of you come from other programming tribes. And depending on your tribal history, you might think of a string as a pointer to a byte array if you&amp;rsquo;re a C programmer, or as a list if you&amp;rsquo;re a functional programmer, or as an object if you&amp;rsquo;re a Java programmer. I view a string as a Text, with a capital T.&lt;/p&gt;

&lt;h3 id=&#34;text&#34;&gt;Text&lt;/h3&gt;

&lt;p&gt;I read that word from a postmodern perspective. Of course, the term Postmodern is itself context-sensitive. Some folks think Postmodernism means little more than the Empowerment of the Vulgar. Some folks think the same about Perl.&lt;/p&gt;

&lt;p&gt;But I take Postmodernism to mean that a Text, whether spoken or written, is an act of communication requiring intelligence on both ends, and sometimes in the middle too. I don&amp;rsquo;t want to talk to a stupid computer language. I want my computer language to understand the strings I type.&lt;/p&gt;

&lt;p&gt;Perl is a postmodern language, and a lot of conservative folks feel like Postmodernism is a rather liberal notion. So it&amp;rsquo;s rather ironic that my views on Postmodernism were primarily informed by studying linguistics and translation as taught by missionaries, specifically, the Wycliffe Bible Translators. One of the things they hammered home is that there&amp;rsquo;s really no such thing as a primitive human language. By which they mean essentially that all human languages are Turing complete.&lt;/p&gt;

&lt;p&gt;When you go out to so-called primitive tribes and analyze their languages, you find that structurally they&amp;rsquo;re just about as complex as any other human language. Basically, you can say pretty much anything in any human language, if you work at it long enough. Human languages are Turing complete, as it were.&lt;/p&gt;

&lt;p&gt;Human languages therefore differ not so much in what you &lt;em&gt;can&lt;/em&gt; say but in what you &lt;em&gt;must&lt;/em&gt; say. In English, you are forced to differentiate singular from plural. In Japanese, you don&amp;rsquo;t have to distinguish singular from plural, but you do have to pick a specific level of politeness, taking into account not only your degree of respect for the person you&amp;rsquo;re talking to, but also your degree of respect for the person or thing you&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;So languages differ in what you&amp;rsquo;re forced to say. Obviously, if your language forces you to say something, you can&amp;rsquo;t be concise in that particular dimension using your language. Which brings us back to scripting.&lt;/p&gt;

&lt;p&gt;How many ways are there for different scripting languages to be concise?&lt;/p&gt;

&lt;p&gt;How many recipes for borscht are there in Russia?&lt;/p&gt;

&lt;p&gt;Language designers have many degrees of freedom. I&amp;rsquo;d like to point out just a few of them.&lt;/p&gt;

&lt;h3 id=&#34;early-binding-late-binding&#34;&gt;early binding / late binding&lt;/h3&gt;

&lt;p&gt;Binding in this context is about exactly when you decide which routine you&amp;rsquo;re going to call for a given routine name. In the early days of computing, most binding was done fairly early for efficiency reasons, either at compile time, or at the latest, at link time. You still tend to see this approach in statically typed languages. With languages like Smalltalk, however, we began to see a different trend, and these days most scripting languages are trending towards later binding. That&amp;rsquo;s because scripting languages are trying to be dwimmy (Do What I Mean), and the dwimmiest decision is usually a late decision because you then have more available semantic and even pragmatic context to work with. Otherwise you have to predict the future, which is hard.&lt;/p&gt;

&lt;p&gt;So scripting languages naturally tend to move toward an object-oriented point of view, where the binding doesn&amp;rsquo;t happen &amp;lsquo;til method dispatch time. You can still see the scars of conflict in languages like C++ and Java though. C++ makes the default method type non-virtual, so you have to say virtual explicitly to get late binding. Java has the notion of final classes, which force calls to the class to be bound at compile time, essentially. I think both of those approaches are big mistakes. Perl 6 will make different mistakes. In Perl 6 all methods are virtual by default, and only the application as a whole can tell the optimizer to finalize classes, presumably only after you know how all the classes are going to be used by all the other modules in the program.&lt;/p&gt;

&lt;h3 id=&#34;single-dispatch-multiple-dispatch&#34;&gt;single dispatch / multiple dispatch&lt;/h3&gt;

&lt;p&gt;In a sense, multiple dispatch is a way to delay binding even longer. You not only have to delay binding &amp;lsquo;til you know the type of the object, but you also have to know the types of all rest of the arguments before you can pick a routine to call. Python and Ruby always do single dispatch, while Dylan does multiple dispatch. Here is one dimension in which Perl 6 &lt;em&gt;forces&lt;/em&gt; the caller to be explicit for clarity. I think it&amp;rsquo;s an important distinction for the programmer to bear in mind, because single dispatch and multiple dispatch are philosophically very different ideas, based on different metaphors.&lt;/p&gt;

&lt;p&gt;With single-dispatch languages, you are basically sending a message to an object, and the object decides what to do with that message. With multiple dispatch languages, however, there is no privileged object. All the objects involved in the call have equal weight. So one way to look at multiple dispatch is that the objects are completely passive. But if the objects aren&amp;rsquo;t deciding how to bind, who is?&lt;/p&gt;

&lt;p&gt;Well, it&amp;rsquo;s sort of a democratic thing. All the routines of a given name get together and hold a political conference. (Well, not really, but this is how the metaphor works.) Each of the routines is a delegate to the convention. All the potential candidates put their names in the hat. Then all the routines vote on who the best candidate is, and the next best, and the next best after that. And eventually the routines themselves decide what the best routine to call is.&lt;/p&gt;

&lt;p&gt;So basically, multiple dispatch is like democracy. It&amp;rsquo;s the worst way to do late binding, except for all the others.&lt;/p&gt;

&lt;p&gt;But I really do think that&amp;rsquo;s true, and likely to become truer as time goes on. I&amp;rsquo;m spending a lot of time on this multiple dispatch issue because I think programming in the large is mutating away from the command-and-control model implicit in single dispatch. I think the field of computation as a whole is moving more toward the kinds of decisions that are better made by swarms of insects or schools of fish, where no single individual is in control, but the swarm as a whole has emergent behaviors that are somehow much smarter than any of the individual components.&lt;/p&gt;

&lt;h3 id=&#34;eager-evaluation-lazy-evaluation&#34;&gt;eager evaluation / lazy evaluation&lt;/h3&gt;

&lt;p&gt;Most languages evaluate eagerly, including Perl 5. Some languages evaluate all expressions as lazily as possible. Haskell is a good example of that. It doesn&amp;rsquo;t compute anything until it is forced to. This has the advantage that you can do lots of cool things with infinite lists without running out of memory. Well, at least until someone asks the program to calculate the whole list. Then you&amp;rsquo;re pretty much hosed in any language, unless you have a real Turing machine.&lt;/p&gt;

&lt;p&gt;So anyway, in Perl 6 we&amp;rsquo;re experimenting with a mixture of eager and lazy. Interestingly, the distinction maps very nicely onto Perl 5&amp;rsquo;s concept of scalar context vs. list context. So in Perl 6, scalar context is eager and list context is lazy. By default, of course. You can always force a scalar to be lazy or a list to be eager if you like. But you can say things like &lt;code&gt;for 1..Inf&lt;/code&gt; as long as your loop exits some other way a little bit before you run into infinity.&lt;/p&gt;

&lt;h3 id=&#34;eager-typology-lazy-typology&#34;&gt;eager typology / lazy typology&lt;/h3&gt;

&lt;p&gt;Usually known as static vs. dynamic, but again there are various positions for the adjustment knob. I rather like the gradual typing approach for a number of reasons. Efficiency is one reason. People usually think of strong typing as a reason, but the main reason to put types into Perl 6 turns out not to be strong typing, but rather multiple dispatch. Remember our political convention metaphor? When the various candidates put their names in the hat, what distinguishes them? Well, each candidate has a political platform. The planks in those political platforms are the types of arguments they want to respond to. We all know politicians are only good at responding to the types of arguments they want to have&amp;hellip;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another way in which Perl 6 is slightly more lazy than Perl 5. We still have the notion of contexts, but exactly when the contexts are decided has changed. In Perl 5, the compiler usually knows at compile time which arguments will be in scalar context, and which arguments will be in list context. But Perl 6 delays that decision until method binding time, which is conceptually at run time, not at compile time. This might seem like an odd thing to you, but it actually fixes a great number of things that are suboptimal in the design of Perl 5. Prototypes, for instance. And the need for explicit references. And other annoying little things like that, many of which end up as frequently asked questions.&lt;/p&gt;

&lt;h3 id=&#34;limited-structures-rich-structures&#34;&gt;limited structures / rich structures&lt;/h3&gt;

&lt;p&gt;Awk, Lua, and PHP all limit their composite structures to associative arrays. That has both pluses and minuses, but the fact that awk did it that way is one of the reasons that Perl does it differently, and differentiates ordered arrays from unordered hashes. I just think about them differently, and I think a lot of other people do too.&lt;/p&gt;

&lt;h3 id=&#34;symbolic-wordy&#34;&gt;symbolic / wordy&lt;/h3&gt;

&lt;p&gt;Arguably APL is also a kind of scripting language, largely symbolic. At the other extreme we have languages that eschew punctuation in favor of words, such as AppleScript and COBOL, and to a lesser extent all the Algolish languages that use words to indicate blocks where the C-derived languages use curlies. I prefer a balanced approach here, where symbols and identifiers are each doing what theyre best at. I like it when most of the actual words are those chosen by the programmer to represent the problem at hand. I don&amp;rsquo;t like to see words used for mere syntax. Such syntactic functors merely obscure the real words. That&amp;rsquo;s one thing I learned when I switched from Pascal to C. Braces for blocks. It&amp;rsquo;s just right visually.&lt;/p&gt;

&lt;p&gt;Actually, there are languages that do it even worse than COBOL. I remember one Pascal variant that required your keywords to be capitalized so that they would stand out. No, no, no, no, no! You don&amp;rsquo;t want your functors to stand out. It&amp;rsquo;s shouting the wrong words: IF! foo THEN! bar ELSE! baz END! END! END! END!&lt;/p&gt;

&lt;p&gt;Anyway, in Perl 6 we&amp;rsquo;re raising the standard for where we use punctuation, and where we don&amp;rsquo;t. We&amp;rsquo;re getting rid of some of our punctuation that isn&amp;rsquo;t really pulling its weight, such as parentheses around conditional expressions, and most of the punctuational variables. And we&amp;rsquo;re making all the remaining punctuation work harder. Each symbol has to justify its existence according to Huffman coding.&lt;/p&gt;

&lt;p&gt;Oddly, there&amp;rsquo;s one spot where we&amp;rsquo;re introducing new punctuation. After your sigil you can add a twigil, or secondary sigil. Just as a sigil tells you the basic structure of an object, a twigil tells you that a particular variable has a weird scope. This is basically an idea stolen from Ruby, which uses sigils to indicate weird scoping. But by hiding our twigils after our sigils, we get the best of both worlds, plus an extensible twigil system for weird scopes we haven&amp;rsquo;t thought of yet.&lt;/p&gt;

&lt;p&gt;We think about extensibility a lot. We think about languages we don&amp;rsquo;t know how to think about yet. But leaving spaces in the grammar for new languages is kind of like reserving some of our land for national parks and national forests. Or like an archaeologist not digging up half the archaeological site because we know our descendants will have even better analytical tools than we have.&lt;/p&gt;

&lt;p&gt;Really designing a language for the future involves a great deal of humility. As with science, you have to assume that, over the long term, a great deal of what you think is true will turn out not to be quite the case. On the other hand, if you don&amp;rsquo;t make your best guess now, you&amp;rsquo;re not really doing science either. In retrospect, we know APL had too many strange symbols. But we wouldn&amp;rsquo;t be as sure about that if APL hadn&amp;rsquo;t tried it first.&lt;/p&gt;

&lt;h3 id=&#34;compile-time-run-time&#34;&gt;compile time / run time&lt;/h3&gt;

&lt;p&gt;Many dynamic languages can eval code at run time. Perl also takes it the other direction and runs a lot of code at compile time. This can get messy with operational definitions. You don&amp;rsquo;t want to be doing much file I/O in your &lt;code&gt;BEGIN&lt;/code&gt; blocks, for instance. But that leads us to another distinction:&lt;/p&gt;

&lt;h3 id=&#34;declarational-operational&#34;&gt;declarational / operational&lt;/h3&gt;

&lt;p&gt;Most scripting languages are way over there on the operational side. I thought Perl 5 had an oversimplified object system till I saw Lua. In Lua, an object is just a hash, and there&amp;rsquo;s a bit of syntactic sugar to call a hash element if it happens to contain code. Thats all there is. They don&amp;rsquo;t even have classes. Anything resembling inheritance has to be handled by explicit delegation. That&amp;rsquo;s a choice the designers of Lua made to keep the language very small and embeddable. For them, maybe it&amp;rsquo;s the right choice.&lt;/p&gt;

&lt;p&gt;Perl 5 has always been a bit more declarational than either Python or Ruby. I&amp;rsquo;ve always felt strongly that implicit scoping was just asking for trouble, and that scoped variable declarations should be very easy to recognize visually. Thats why we have &lt;code&gt;my&lt;/code&gt;. It&amp;rsquo;s short because I knew we&amp;rsquo;d use it frequently. Huffman coding. Keep common things short, but not too short. In this case, 0 is too short.&lt;/p&gt;

&lt;p&gt;Perl 6 has more different kinds of scopes, so we&amp;rsquo;ll have more declarators like &lt;code&gt;my&lt;/code&gt; and &lt;code&gt;our&lt;/code&gt;. But appearances can be deceiving. While the language looks more declarative on the surface, we make most of the declarations operationally hookable underneath to retain flexibility. When you declare the type of a variable, for instance, you&amp;rsquo;re really just doing a kind of tie, in Perl 5 terms. The main difference is that you&amp;rsquo;re tying the implementation to the variable at compile time rather than run time, which makes things more efficient, or at least potentially optimizable.&lt;/p&gt;

&lt;h3 id=&#34;immutable-classes-mutable-classes&#34;&gt;immutable classes / mutable classes&lt;/h3&gt;

&lt;p&gt;Classes in Java are closed, which is one of the reasons Java can run pretty fast. In contrast, Ruby&amp;rsquo;s classes are open, which means you can add new things to them at any time. Keeping that option open is perhaps one of the reasons Ruby runs so slow. But that flexibility is also why Ruby has Rails.&lt;/p&gt;

&lt;p&gt;Perl 6 will have an interesting mix of immutable generics and mutable classes here, and interesting policies on who is allowed to close classes when. Classes are never allowed to close or finalize themselves, for instance. Sorry, for some reason I keep talking about Perl 6. It could have something to do with the fact that we&amp;rsquo;ve had to think about all of these dimensions in designing Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;class-based-prototype-based&#34;&gt;class-based / prototype-based&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s another dimension that can open up to allow both approaches. Some of you may be familiar with classless languages like Self or JavaScript. Instead of classes, objects just clone from their ancestors or delegate to other objects. For many kinds of modeling, it&amp;rsquo;s actually closer to the way the real world works. Real organisms just copy their DNA when they reproduce. They don&amp;rsquo;t have some DNA of their own, and an &lt;code&gt;@ISA&lt;/code&gt; array telling you which parent objects contain the rest of their DNA.&lt;/p&gt;

&lt;p&gt;The meta-object protocol for Perl 6 defaults to class-based, but is flexible enough to set up prototype-based objects as well. Some of you have played around with &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; in Perl 5. Moose is essentially a prototype of Perl 6&amp;rsquo;s object model. On a semantic level, anyway. The syntax is a little different. Hopefully a little more natural in Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;passive-data-global-consistency-active-data-local-consistency&#34;&gt;passive data, global consistency / active data, local consistency&lt;/h3&gt;

&lt;p&gt;Your view of data and control will vary with how functional or object-oriented your brain is. People just think differently. Some people think mathematically, in terms of provable universal truths. Functional programmers don&amp;rsquo;t much care if they strew implicit computation state throughout the stack and heap, as long as everything &lt;em&gt;looks&lt;/em&gt; pure and free from side-effects.&lt;/p&gt;

&lt;p&gt;Other people think socially, in terms of cooperating entities that each have their own free will. And it&amp;rsquo;s pretty important to them that the state of the computation be stored with each individual object, not off in some heap of continuations somewhere.&lt;/p&gt;

&lt;p&gt;Of course, some of us can&amp;rsquo;t make up our minds whether we&amp;rsquo;d rather emulate the logical Sherlock Holmes or sociable Dr. Watson. Fortunately, scripting is not incompatible with either of these approaches, because both approaches can be made more approachable to normal folk.&lt;/p&gt;

&lt;h3 id=&#34;info-hiding-scoping-attachment&#34;&gt;info hiding / scoping / attachment&lt;/h3&gt;

&lt;p&gt;And finally, if you&amp;rsquo;re designing a computer language, there are a couple bazillion ways to encapsulate data. You have to decide which ones are important. What&amp;rsquo;s the best way to let the programmer achieve separation of concerns?&lt;/p&gt;

&lt;h3 id=&#34;object-class-aspect-closure-module-template-trait&#34;&gt;object / class / aspect / closure / module / template / trait&lt;/h3&gt;

&lt;p&gt;You can use any of these various traditional encapsulation mechanisms.&lt;/p&gt;

&lt;h3 id=&#34;transaction-reaction-dynamic-scope&#34;&gt;transaction / reaction / dynamic scope&lt;/h3&gt;

&lt;p&gt;Or you can isolate information to various time-based domains.&lt;/p&gt;

&lt;h3 id=&#34;process-thread-device-environment&#34;&gt;process / thread / device / environment&lt;/h3&gt;

&lt;p&gt;You can attach info to various OS concepts.&lt;/p&gt;

&lt;h3 id=&#34;screen-window-panel-menu-icon&#34;&gt;screen / window / panel / menu / icon&lt;/h3&gt;

&lt;p&gt;You can hide info various places in your GUI. Yeah, yeah, I know, everything is an object. But some objects are more equal than others.&lt;/p&gt;

&lt;h3 id=&#34;syntactic-scope-semantic-scope-pragmatic-scope&#34;&gt;syntactic scope / semantic scope / pragmatic scope&lt;/h3&gt;

&lt;p&gt;Information can attach to various abstractions of your program, including, bizarrely, lexical scopes. Though if you think about it hard enough, you realize lexical scopes are also a funny kind of dynamic scope, or recursion wouldn&amp;rsquo;t work right. A &lt;code&gt;state&lt;/code&gt; variable is actually more purely lexical than a &lt;code&gt;my&lt;/code&gt; variable, because it&amp;rsquo;s shared by all calls to that lexical scope. But even state variables get cloned with closures. Only global variables can be truly lexical, as long as you refer to them only in a given lexical scope. Go figure.&lt;/p&gt;

&lt;p&gt;So really, most of our scopes are semantic scopes that happen to be attached to a particular syntactic scope.&lt;/p&gt;

&lt;p&gt;You may be wondering what I mean by a &lt;em&gt;pragmatic&lt;/em&gt; scope. That&amp;rsquo;s the scope of what the user of the program is storing in their brain, or in some surrogate for their brain, such as a game cartridge. In a sense, most of the web pages out there on the Internet are part of the pragmatic scope. As is most of the data in databases. The hallmark of the pragmatic scope is that you really don&amp;rsquo;t know the lifetime of the container. It&amp;rsquo;s just out there somewhere, and will eventually be collected by that Great Garbage Collector that collects all information that anyone forgets to remember. The Google cache can only last so long. Eventually we will forget the meaning of every URL. But we must not forget the &lt;em&gt;principle&lt;/em&gt; of the URL. That leads us to our next degree of freedom.&lt;/p&gt;

&lt;h3 id=&#34;use-lingua-perligata&#34;&gt;use Lingua::Perligata;&lt;/h3&gt;

&lt;p&gt;If you allow a language to mutate its own grammar within a lexical scope, how do you keep track of that cleanly? Perl 5 discovered one really bad way to do it, namely source filters, but even so we ended up with Perl dialects such as Perligata and Klingon. What would it be like if we actually did it right?&lt;/p&gt;

&lt;p&gt;Doing it right involves treating the evolution of the language as a pragmatic scope, or as a set of pragmatic scopes. You have to be able to name your dialect, kind of like a URL, so there needs to be a universal root language, and ways of warping that universal root language into whatever dialect you like. This is actually near the heart of the vision for Perl 6. We don&amp;rsquo;t see Perl 6 as a single language, but as the root for a family of related languages. As a family, there are shared cultural values that can be passed back and forth among sibling languages as well as to the descendants.&lt;/p&gt;

&lt;p&gt;I hope you&amp;rsquo;re all scared stiff by all these degrees of freedom. I&amp;rsquo;m sure there are other dimensions that are even scarier.&lt;/p&gt;

&lt;p&gt;But&amp;hellip; I think its a manageable problem. I think its possible to still think of Perl 6 as a scripting language, with easy onramps.&lt;/p&gt;

&lt;p&gt;And the reason I think its manageable is because, for each of these dimensions, it&amp;rsquo;s not just a binary decision, but a knob that can be positioned at design time, compile time, or even run time. For a given dimension X, different scripting languages make different choices, set the knob at different locations.&lt;/p&gt;

&lt;h3 id=&#34;you-can-t-even-think-about-x&#34;&gt;You can&amp;rsquo;t even think about X!&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s only one way to do X!
There&amp;rsquo;s more than one way to do X!
There are too many ways to do X!&lt;/p&gt;

&lt;p&gt;You may recognize some slogans in here.&lt;/p&gt;

&lt;h3 id=&#34;curling-up&#34;&gt;Curling Up&lt;/h3&gt;

&lt;p&gt;So I&amp;rsquo;m not suggesting that all scripting languages have to take all these dimensions into account, even if Perl 6 tries to. The scripting paradigm is not any one of these dimensions. According to various theories the universe may be laid out in ten or twenty dimensions, but generally we get by with only about three and a half of those dimensions. The rest are said to be curled up. Maybe we live in a scripting universe.&lt;/p&gt;

&lt;p&gt;Most of the scripting languages we call Perl 6 will have most of these dimensions curled up most of the time. But unlike the real universe, where it takes huge machines to uncurl these dimensions, we&amp;rsquo;ll make the dimensions uncurl just by keeping our declarations straight. Well, we&amp;rsquo;ll try. And where that fails, we&amp;rsquo;ll rely on the culture to keep things straight.&lt;/p&gt;

&lt;p&gt;For example, that&amp;rsquo;s exactly what happened already with Perl 5. We have the declarations, &lt;code&gt;use strict; use warnings;&lt;/code&gt;. But it&amp;rsquo;s the culture that decided to enforce the use of them. So much so that we&amp;rsquo;ve decided that they should be the default for most of Perl 6. It was one of those decisions by the hive. In this case the swarm turned out to be smarter than the language designer. And that&amp;rsquo;s as it should be.&lt;/p&gt;

&lt;h3 id=&#34;the-future&#34;&gt;The Future&lt;/h3&gt;

&lt;p&gt;Well, so what&amp;rsquo;s the future of scripting?&lt;/p&gt;

&lt;p&gt;In my completely unbiased opinion, that would be Perl 6. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Seriously though, it&amp;rsquo;s always safe to predict that the ecological landscape will end up with many small languages and a few dominant ones. Some languages like AppleScript have particular ecological niches and are unlikely to grow out of them. Other languages get used outside their original niche. There will always be the generalists, like crows and mockingbirds, and the specialists, like penguins and dodos. (Well, maybe not always the dodos&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Among the generalists, the conventional wisdom is that the worse-is-better approach is more adaptive. Personally, I get a little tired of the argument: My worse-is-better is better than your worse-is-better because I&amp;rsquo;m better at being worser! Is it really true that the worse-is-better approach always wins? With Perl 6 we&amp;rsquo;re trying to sneak one better-is-better cycle in there and hope to come out ahead before reverting to the tried and true worse-is-better approach. Whether that works, only time will tell.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The State of the Onion 10</title>
      <link>http://localhost:1313/pub/2006/09/21/onion.html/</link>
      <pubDate>Thu, 21 Sep 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/09/21/onion.html/</guid>
      <description>&lt;p&gt;Welcome to the tenth State of the Perl Onion. For those of you who are unfamiliar with my methods, this is the annual speech wherein I ramble on about various things that are only marginally related to the state of Perl. I&amp;rsquo;ve gotten pretty good at rambling in my old age.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Scientific American&lt;/em&gt; that just came out, there&amp;rsquo;s an article on chess experts, written by an expert, on what makes experts so expert. This expert claims that you can become an expert in just about anything if you study it persistently for ten years or so. So, since this is my tenth State of the Onion, maybe I&amp;rsquo;m about to become an expert in giving strange talks. One can only hope (not).&lt;/p&gt;

&lt;p&gt;Speaking of chess, how many of you recognize this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x00.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Does this help?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x01.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is, of course, the mnemonic for the old Linnean taxonomy of biological classification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x02.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Those of you who understand computers better than critters can think of these as nested namespaces.&lt;/p&gt;

&lt;p&gt;This is all about describing nature, so naturally, different languages care about different levels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x03.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, PHP isn&amp;rsquo;t much into taxonomy, so everything in PHP is just its own species in a flat namespace. Congratulations, this is your new species name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x04.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby, of course, is interested primarily in Classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x05.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Python, as the &amp;ldquo;anti-Perl,&amp;rdquo; is heavily invested in maintaining Order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x06.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you &lt;em&gt;might&lt;/em&gt; be smart enough to program in Haskell if you&amp;rsquo;ve received a MacArthur Genus award.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x07.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; used to be I couldn&amp;rsquo;t spell &amp;ldquo;genus,&amp;rdquo; and now I are one &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x08.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Moving right along toward the other end of the spectrum, we have JavaScript that kind of believes in Phyla without believing in Classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x09.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And at the top of the heap, playing king of the mountain, we have languages like C# and Java. The kingdom of Java only has one species.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x10.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The kingdom of C# has many species, but they all look like C#.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x11.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that leaves us with families.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x12.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I expect I have a pretty good excuse for thinking a lot about families lately, and here is my excuse:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x13.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is Julian, my grandson. Julian, meet the open source hackers. Open source hackers, meet Julian.&lt;/p&gt;

&lt;p&gt;Many of you will remember my daughter Heidi from previous OSCONs. A couple years ago she married Andy, and Julian is the result. I think he&amp;rsquo;s a keeper. Julian, I mean.&lt;/p&gt;

&lt;p&gt;Well, and Andy too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x14.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Andy obviously has his priorities straight. I would certainly recommend him as a son-in-law to anyone. (Wait, that doesn&amp;rsquo;t quite work &amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x15.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are many definitions of family, of course. Here&amp;rsquo;s a mommy and a daddy truck. They live on a truck farm, and raise little trucks.&lt;/p&gt;

&lt;p&gt;Out in California, the word &amp;ldquo;family&amp;rdquo; keeps leaping out at me from various signs. People use the word &amp;ldquo;family&amp;rdquo; in some really weird ways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x16.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There was a Family Fun Center, with a miniature golf course. I believe that sign. At least for the golf. As a parent, I&amp;rsquo;m not sure the game arcade is for the whole family. I&amp;rsquo;m an expert in staying out of loud places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x17.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But the sign that said &amp;ldquo;Farmers Feed America&amp;ndash;Family Water Alliance&amp;rdquo; &amp;hellip; I suspect the word &amp;ldquo;family&amp;rdquo; is in there more for its PR value than anything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x18.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And, of course, &amp;ldquo;family planning&amp;rdquo; is for when you plan &lt;em&gt;not&lt;/em&gt; to have a family. Go figure.&lt;/p&gt;

&lt;p&gt;All of my kids were unplanned, but that doesn&amp;rsquo;t mean they were unwanted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x19.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Many of you know that I have four kids, but in a strange way, I really have five, if you count Perl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x20.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Geneva thinks of Perl as more or less her twin sister, since they were both born in 1987. But then, Geneva is strange.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x21.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some people think Perl is strange too. That&amp;rsquo;s okay&amp;ndash;all my kids are a little strange. They come by it naturally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x22.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x23.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a self-portrait of the other end of Geneva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x24.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what you usually see of Lewis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x25.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some of Aron, pulling the door that says &amp;ldquo;push.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x26.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;rsquo;s Heidi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x27.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;She always was a pale child.&lt;/p&gt;

&lt;p&gt;Actually, here&amp;rsquo;s the real picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x28.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see she&amp;rsquo;s actually quite sane. Compared to the rest of us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x29.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of my wife Gloria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x30.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another picture of my wife. Well, her arms. The feet are my mom&amp;rsquo;s. Actually, this is &lt;em&gt;really&lt;/em&gt; a picture of my granddog, Milo. He&amp;rsquo;s the one on the right.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve talked before about how the stages in Perl&amp;rsquo;s life are very much like that of a kid. To review:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x31.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This extended metaphor can be extended even further as necessary and prudent. Actually, it&amp;rsquo;s probably unnecessary and imprudent, but I&amp;rsquo;ll extend it anyway, because I find the metaphor useful. Perl, my fifth child, is showing various signs that she is about to grow up, and as a pseudo-parent, that makes me pseudo-proud of her. But there are other ways the metaphor makes me happy. For instance, it gives me another argument about the name of Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x32.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From time to time, people have suggested that Perl 6 is sufficiently different from Perl 5 that she should be given a new name. But we don&amp;rsquo;t usually rename our kids when they grow up. They may choose to rename themselves, of course. For the moment I think Perl would like her name to stay Perl.&lt;/p&gt;

&lt;p&gt;Now, I know what some of you are thinking: in anthropomorphizing Perl this way, Larry has gone completely off the deep end. That&amp;rsquo;s not possible&amp;ndash;I started out by jumping off the deep end, and I haven&amp;rsquo;t noticed the water getting any shallower lately.&lt;/p&gt;

&lt;p&gt;But in justification of my metaphor, let me just say that when I say &amp;ldquo;Perl&amp;rdquo; here, I&amp;rsquo;m not just talking about the language, but the entire culture. There are a lot of people who worked hard to raise Perl up to where she is today, and a bunch more people working hard to send her off to college. It&amp;rsquo;s the collective aspirations of those people that is the real personality of Perl.&lt;/p&gt;

&lt;p&gt;When we first announced the Perl 6 effort back in 2000, we said it would be the community redesign of Perl. That continues to be the case today. It may look like I&amp;rsquo;m making all these arbitrary decisions as the language designer, but as with a teenager, you somehow end up making most of your decisions consistent with what they want. With what the Perl community wants, in this case.&lt;/p&gt;

&lt;p&gt;If a teenager doesn&amp;rsquo;t want to listen to you, you can&amp;rsquo;t make &amp;lsquo;em.&lt;/p&gt;

&lt;p&gt;The fact is, Perl would be nothing without the people around her. Here&amp;rsquo;s a new acronym:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x33.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or if you like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x34.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It really helps to have an extended family to raise a kid well. American culture has been somewhat reductionist in this respect, but a lot of other cultures around the world understand the importance of extended family. Maybe it&amp;rsquo;s just because Americans move around so much. But it&amp;rsquo;s a healthy trend that young people these days are manufacturing their own extended families. At the church I go to, we call it &amp;ldquo;Doing Life Together.&amp;rdquo; Here in the extended Perl family, we&amp;rsquo;re doing life together too.&lt;/p&gt;

&lt;p&gt;We have people in our family like Uncle Chip and Aunt Audrey. There&amp;rsquo;s Cousin Allison, and Cousin Ingy, and Cousin Uri, and our very own Evil Brother Damian. I think Randal occasionally enjoys being the honorary black sheep of the family, as it were.&lt;/p&gt;

&lt;p&gt;It all kind of reminds me of the Addams family. Hmm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x35.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I watched &lt;em&gt;The Addams Family&lt;/em&gt; a lot when I was young. Maybe you should call me Gomez, and call Gloria, Morticia. I must confess that I do love it when my wife speaks French. It gives me déjà vu all up and down my spine.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s okay for me to tell you that because I live in a fishbowl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x36.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x37.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure who gets to be Lurch. Or Thing. Anybody wanna volunteer? We&amp;rsquo;re always looking for volunteers in the Perl community. Don&amp;rsquo;t be scared. The Addams family can be a little scary, and so can the Perl family, but you&amp;rsquo;ll notice we&amp;rsquo;re also affectionate and accepting. In a ghoulish sort of way.&lt;/p&gt;

&lt;p&gt;We could take this TV family metaphor a lot further, but fortunately for you I never watched the &lt;em&gt;Partridge Family&lt;/em&gt; or &lt;em&gt;The Brady Bunch&lt;/em&gt; or &lt;em&gt;All in the Family&lt;/em&gt; or &lt;em&gt;Father Knows Best&lt;/em&gt;. Those of you who were here before know I mostly watched &lt;em&gt;The Man From U.N.C.L.E.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I also watched &lt;em&gt;Combat&lt;/em&gt;, a World War II show. But I was kind of a gruesome little kid that way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x38.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I like gruesome shows. Maybe that explains why I liked the Addams family. Hmm. I once sat on the lap of the Santa Claus at Sears and asked for all five toy machine guns listed in the Sears catalog that year. For some reason I didn&amp;rsquo;t get any of them. But I suppose my family loved me in spite of my faults. My role models in parenting obviously didn&amp;rsquo;t come from TV. Or maybe they did. You know, that would explain a lot about how my family turned out. In actual fact, the picture above is another self-portrait done by my daughter Geneva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x39.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, I love my own family, even if they&amp;rsquo;re kind of peculiar at times. Last month we were staying at a Motel 6 in Medford, Oregon. Gloria kindly went off to fetch me a cup of coffee from the motel lobby, and then she came to this door and stood there for a while wondering how to pull the door open with her hands full. Then she realized that the door must have been designed by someone who thinks there should be only one obvious way to do it. Because, the fact is, you can either pull or push this door, despite what it says. I suggested we should start marking such pushmepullyu doors with a P*. We obviously need more globs in real life.&lt;/p&gt;

&lt;p&gt;Anyway, back to my weird family&amp;ndash;this summer as we were driving around, we had a great literary discussion about how Tolstoy debunks the Great Man theory of history in &lt;em&gt;War and Peace&lt;/em&gt;. After discussing the far-too-heavily overloaded namespace in Russian novels and the almost complete absence of names in the &lt;em&gt;Tale of Genji&lt;/em&gt;, we tried to decide if the &lt;em&gt;Tale of Genji&lt;/em&gt; was the first novel or not, and decided that it was really the first soap opera. Of course, then there had to be a long discussion of what really &lt;em&gt;was&lt;/em&gt; the first novel&amp;ndash;&lt;em&gt;Tale of Genji&lt;/em&gt;, &lt;em&gt;Madame Bovary&lt;/em&gt;, or &lt;em&gt;Sense and Sensibility&lt;/em&gt;. Then there&amp;rsquo;s the first romance, first mystery, first fantasy, first science fiction, first modern novel, etc. One interesting fact we noted was that the first in a genre almost always has to officially be some other genre too. For example, the &lt;em&gt;Tale of Genji&lt;/em&gt; was written in the existing form of explication of some haiku. Transitional forms are important in biological evolution as well, as one species learns to become another species. That&amp;rsquo;s why we explicitly allow people to program babytalk in Perl. The only way to become smart is to be stupid first. Puts a new spin on the Great Man theory of history.&lt;/p&gt;

&lt;p&gt;So then, as we were driving we saw a cloud formation resembling Thomas Jefferson, which led us to speculate on the Great Documents theory of history. &amp;ldquo;Liberty, Equality, Fraternity&amp;rdquo; brought up the Great Slogans theory of history.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x40.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Back to Tolstoy: &amp;ldquo;Moscow didn&amp;rsquo;t burn because Napoleon decided to burn it. Moscow burned because it was made of wood.&amp;rdquo; Those of you who attended YAPC Chicago may recognize that as the Great Cow theory of history. Or maybe the lantern was really kicked over by a camel, and there was a coverup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x41.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, back to the family again, presuming the house hasn&amp;rsquo;t burned down. They say that &amp;ldquo;A family is where, when you have to go there, they have to take you in.&amp;rdquo; Arguably, regardless of your viewpoint, many people have been, um, taken in by Perl culture.&lt;/p&gt;

&lt;p&gt;Sorry. I have a low taste for taking people in with puns.&lt;/p&gt;

&lt;p&gt;But hey, taking people in is good. And stray kitties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x42.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some families just naturally accumulate strays. My wife and I were both fortunate enough to grow up in families that took in strays as a matter of course. We have a number of honorary members of our own family. I think a good family tends to Borg people who need to be taken in. It&amp;rsquo;s a lot like the way Audrey hands out commit bits to Pugs left and right. It all one big happy hivemind. Er, I mean family.&lt;/p&gt;

&lt;p&gt;Now, it&amp;rsquo;s all well and good to get people in the door, but that&amp;rsquo;s only the beginning of accessibility. Whenever you get someone new in the family, either by birth or by adoption, where do you go from there? You have to raise your kids somehow, and they&amp;rsquo;re all different. Raising different kids requires different approaches, just like computer problems do.&lt;/p&gt;

&lt;p&gt;So, then, how do we raise a family according to the various computing paradigms?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x43.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Imperative programming is the &lt;em&gt;Father Knows Best&lt;/em&gt; approach. It only works at all when Father &lt;em&gt;does&lt;/em&gt; know best, which is not all that often. Often Mother knows &amp;ldquo;bester&amp;rdquo; than Father. Hi, Gloria. And a surprising amount of the time, it&amp;rsquo;s the kids who know &amp;ldquo;bestest.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x44.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some reason the Von Trapp family comes to mind. I guess you have to structure your family to make the &lt;em&gt;Sound of Music&lt;/em&gt; together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x45.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Look, if you hit your sister, she &lt;em&gt;will&lt;/em&gt; hit you back. Duh.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x46.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously anyone who doesn&amp;rsquo;t program their family functionally has a dysfunctional family. But what does it mean to have a functional family? &amp;ldquo;Being hit back is a function of whether you hit your sister.&amp;rdquo; On the surface, everything appears to be free of side effects. Certainly when I tell my kids to mind their manners it often seems to have no lasting effect. Really, though, it does, but in the typical family, there&amp;rsquo;s a lot of hidden state change wound in the call stack. We first learn lazy evaluation in the family.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Don&amp;rsquo;t take the last piece of candy unless you really want it.&amp;rdquo;
&amp;ldquo;Please define whether you really care, and exactly how much you care.&amp;rdquo;
&amp;ldquo;I&amp;rsquo;m sure I care more than you do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s almost a direct quote from Heidi when she was young: &amp;ldquo;But I want it more than you do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x47.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Functional programming tends to merge into declarative programming in general. I married into a family where you have to declare whether you want the last piece of cheesecake, or you&amp;rsquo;re unlikely to get it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x48.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I grew up in more of a culture where it was everyone&amp;rsquo;s responsibility to let someone else have the cheesecake. This algorithm did not always terminate. After several rounds of, &amp;ldquo;No, you go ahead and take it, no you take it, no you take it &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In the end, nobody was really sure who wanted the cheesecake. I guess you say it was a form of starvation. But when I married into my wife&amp;rsquo;s family I found out that I definitely wouldn&amp;rsquo;t get the cheesecake until I learned to predeclare.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x49.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see, inheritance is obviously important, or you wouldn&amp;rsquo;t have a family in the first place. On the other hand, the family is where culture is handed down in the form of design patterns. A good model of composition is important&amp;ndash;a lot of the work of being a family consists of just trying to stay in one spot together. As a form of composition, we learn how to combine our traits constructively by playing various roles in the family. Sometimes those are fixed roles built at family composition time, and sometimes those are temporary roles that are mixed in at run time. Delegation is also important. I frequently delegate to my sons: &amp;ldquo;Lewis, take the trash out.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x50.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s Design By Contract. &amp;ldquo;Keep your promises, young man!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x51.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Metaprogramming. &amp;ldquo;Takes one to know one!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x52.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aspected-oriented programming comes up when we teach our kids to evaluate their methods in the broader context of society:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Okay kid, now that you&amp;rsquo;ve passed your driver&amp;rsquo;s test, you still have to believe the stop signs, but when the speed limit sign says 65, what it really means is that you should try to keep it under 70. Or when you&amp;rsquo;re in Los Angeles, under 80.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x53.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But I think the basic Perl paradigm is &amp;ldquo;Whatever-oriented programming.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Your kid comes to you and says, &amp;ldquo;Can I borrow the car?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You say: &amp;ldquo;&lt;em&gt;May&lt;/em&gt; I borrow the car?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;They say: &amp;ldquo;Whatever &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x54.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Should I push the door or pull it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x55.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x56.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x57.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x58.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, &amp;ldquo;whatever&amp;rdquo; is such an important concept that we built it into Perl 6. This is read, &amp;ldquo;from one to whatever.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x59.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might ask why we can&amp;rsquo;t just say &amp;ldquo;from one to infinity&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x60.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The problem is that not all operators operate on numbers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x61.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not all operators are ranges. Here&amp;rsquo;s the sibling argument operator, which repeats the same words an arbitrary number of times:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x62.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl has always been about letting you care about the things you want to care about, while not caring about the things you don&amp;rsquo;t want to care about, or that maybe you&amp;rsquo;re not quite &lt;em&gt;ready&lt;/em&gt; to care about yet. That&amp;rsquo;s how Perl achieves both its accessibility and its power. We&amp;rsquo;ve just baked more of that &amp;ldquo;who cares?&amp;rdquo; philosophy into Perl 6.&lt;/p&gt;

&lt;p&gt;A couple of years ago, Tim O&amp;rsquo;Reilly asked me what great problem Perl 6 was being designed to solve. This question always just sat in my brain sideways because, apart from Perl 0, I have never thought of Perl as the solution to any one particular problem. If there&amp;rsquo;s a particular problem that Perl is trying to solve, it&amp;rsquo;s the basic fact that all programming languages suck. Sort of the concept of original sin, applied to programming languages.&lt;/p&gt;

&lt;p&gt;As parents, to the extent that we can influence the design of our kids, we design our kids to be creative, not to solve a particular problem. About as close as we get to that is to hope the kid takes over the family business, and we all know how often that sort of coercion works.&lt;/p&gt;

&lt;p&gt;No, instead, we design our kids to be ready to solve problems, by helping them learn to be creative, to be socially aware, to know how to use tools, and maybe even how to manufacture the tools for living when they&amp;rsquo;re missing. They should be prepared to do &amp;hellip; whatever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x63.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Trouble is, it takes a long time to make an adult, on the order of 20 years. Most insects don&amp;rsquo;t take 20 years to mature.&lt;/p&gt;

&lt;p&gt;Apparently it takes you ten years to become an expert in being a kid, and then another ten years to become an expert in &lt;em&gt;not&lt;/em&gt; being a kid. Some people never manage the second part at all, or have a strange idea of adulthood. Some people think that adulthood is when you just bake all your learning into hardware and don&amp;rsquo;t learn anything new ever again, except maybe a few baseball scores. That&amp;rsquo;s an oversimplified view of reality, much like building a hardwired Lisp machine. Neoteny is good in moderation. We have to be lifelong learners to really be adults, I think.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x64.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No, adulthood is really more about mature judgment. I think an adult is basically someone who knows when to care, and how to figure out when they should care when they don&amp;rsquo;t know offhand. A teenager is forever caring about things the parents think are unimportant, and &lt;em&gt;not&lt;/em&gt; caring about things the parents think &lt;em&gt;are&lt;/em&gt; important. Well, hopefully not forever. That&amp;rsquo;s the point. But it&amp;rsquo;s certainly a long process, with both kids and programming languages.&lt;/p&gt;

&lt;p&gt;In computer science, it is said that premature optimization is the root of all evil. The same is true in the family. In parenting terms, you pick your battlefields, and learn not to care so much about secondary objectives. If you can&amp;rsquo;t modulate what you care about, you&amp;rsquo;re not really ready to parent a teenager. Teenagers have a way of finding your hot buttons and pushing them just to distract you from the important issues. So, don&amp;rsquo;t get distracted.&lt;/p&gt;

&lt;p&gt;There are elements of the Perl community that like to push our collective hot buttons. Most of them go by the first name of Anonymous, because they don&amp;rsquo;t really want to stand up for their own opinions. The naysayers could even be right: we may certainly fail in what we&amp;rsquo;re trying to do with Perl 6, but I&amp;rsquo;d just like to point out that only those people who put their name behind their opinions are allowed to say &amp;ldquo;I told you so.&amp;rdquo; Anonymous cowards like the &amp;ldquo;told you so&amp;rdquo; part as long as it doesn&amp;rsquo;t include the &amp;ldquo;I.&amp;rdquo; Anonymous cowards don&amp;rsquo;t have an &amp;ldquo;I,&amp;rdquo; by definition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x65.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, don&amp;rsquo;t let the teenage trolls distract you from the real issues.&lt;/p&gt;

&lt;p&gt;As parents we&amp;rsquo;re setting up some minimum expectations for civilized behavior. Perl should have good manners by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x66.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl should be wary of strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x67.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But Perl should be helpful to strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x68.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While we&amp;rsquo;re working on their weaknesses, we also have to encourage our kids to develop where they have strengths, even if that makes them not like everyone else. It&amp;rsquo;s okay to be a little weird.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x69.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Every kid is different. At least, all my kids are really different. From each other, I mean. Well, and the other way too.&lt;/p&gt;

&lt;p&gt;I guess my kids are all alike in one way. None of them is biddable. They&amp;rsquo;re all arguers and will happily debate the merits of any idea presented to them whether it needs further discussion or not. They&amp;rsquo;re certainly unlikely to simply wander off to the slaughter with any stranger that suggests it.&lt;/p&gt;

&lt;p&gt;This is the natural result of letting them fight as siblings, with supervision. It&amp;rsquo;s inevitable that siblings will squabble. Your job as parent is to make sure they fight fair. It helps a lot if the parents have already learned how to fight fair. What I mean by fight fair is that you fight about what you&amp;rsquo;re fighting about&amp;ndash;you don&amp;rsquo;t fight the other person. If you find yourself dragging all sorts of old baggage into an argument, then you&amp;rsquo;re fighting the person, you&amp;rsquo;re not fighting about something anymore. Nothing makes me happier as a parent than to hear one of my kids make a logical argument at the same time as they&amp;rsquo;re completely pissed off.&lt;/p&gt;

&lt;p&gt;If you teach your kids to argue effectively, they&amp;rsquo;ll be resistant to peer pressure. You can&amp;rsquo;t be too careful here. There are a lotta computer languages out there doing drugs. As a parent, you don&amp;rsquo;t get into a barricade situation and isolate your kids from the outside world forever. Moving out and building other relationships is a natural process, but it needs some supervision.&lt;/p&gt;

&lt;p&gt;Perl is learning to care deeply about things like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x70.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This final point is crucial, if you want to understand the state of Perl today. Perl 6 is all about reconciling the supposedly irreconcilable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x71.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reconciling the seemingly irreconcilable is part of why Perl 6 taking so long. We want to understand the various tensions that have surfaced as people have tried to use and extend Perl 5. In fact, just as Perl 1 was an attempt to digest Unix Culture down into something more coherent, you can view Perl 6 as an attempt to digest CPAN down into something more coherent. Here are some of the irreconcilables we run into when we do that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x72.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OO brings us a world of choices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x73.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do we even have classes at all?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x74.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And if we do, how do they inherit and dispatch?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x75.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Is our type system more general than our class system?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x76.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plus a grab bag of other issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x77.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally, the biggie:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x78.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reconciling these known conflicts is all well and good, but our goal as a parent must be a bit larger than that.&lt;/p&gt;

&lt;p&gt;Just as a child that leaves the house today will face unpredictable challenges tomorrow, the programming languages of the future will have to reconcile not only the conflicting ideas we know about today, but also the conflicting ideas that we haven&amp;rsquo;t even thought of yet.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t know how to do that. Nobody knows how to do that, because nobody is smart enough. Some people pretend to be smart enough. That&amp;rsquo;s not something I care about.&lt;/p&gt;

&lt;p&gt;Nevertheless, a lot of smart people are really excited about Perl 6 because, as we go about teaching Perl how to reconcile the current crop of irreconcilables, we&amp;rsquo;re also hoping to teach Perl strategies for how to cope with future irreconcilables. It&amp;rsquo;s our vision that Perl can learn to care about what future generations will care about, and not to care about what they don&amp;rsquo;t care about.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty abstruse, I&amp;rsquo;ll admit. Future-proofing your children is hard. &lt;em&gt;Some&lt;/em&gt; of us get excited by the long-term potential of our kids. But it&amp;rsquo;s also exciting when you see their day-to-day progress. And we&amp;rsquo;ve make a lot of progress recently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x79.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In terms of Audrey&amp;rsquo;s Perl 6 timeline, we&amp;rsquo;re right at that spot where it says &amp;ldquo;hack, hack, hack.&amp;rdquo; In a year or so we&amp;rsquo;ll be up here saying, &amp;ldquo;What&amp;rsquo;s the big deal?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This is the year that Perl 6 will finally be bootstrapped in Perl 6, one way or another. Actually, make that one way &lt;em&gt;and&lt;/em&gt; another. There are several approaches being pursued currently, in a kind of flooding algorithm. One or another of those approaches is bound to work eventually.&lt;/p&gt;

&lt;p&gt;Now, anyone who has been following along at home knows that we never, ever promise a delivery date for Perl 6. Nevertheless, I can point out that many of us hope to have most of a Perl 6 parser written in Perl 6 by &lt;em&gt;this&lt;/em&gt; Christmas. The only big question is which VM it will compile down to first. There&amp;rsquo;s a bit of a friendly race between the different implementations, but that&amp;rsquo;s healthy, since they&amp;rsquo;re all aiming to support the same language.&lt;/p&gt;

&lt;p&gt;So one of the exciting things that happened very recently is that the Pugs test suite was freed from its Haskell implementation and made available for all the other implementations to test against. There are already roughly 12,000 tests in the test suite, with more coming every day. The Haskell implementation is, of course, the furthest along in terms of passing tests, but the other approaches are already starting to pass the various basic sanity tests, and as many of you know, getting the first test to pass is already a large part of the work.&lt;/p&gt;

&lt;p&gt;So the plan is for Perl 6 to run consistently on a number of platforms. We suspect that eventually the Parrot platform is likely to be the most efficient way to run Perl 6, and may well be the best way to achieve interoperability with other dynamic languages, especially if Parrot can be embedded whole in other platforms.&lt;/p&gt;

&lt;p&gt;But the other virtual machines out there each have their own advantages. The Haskell implementation may well turn out to be the most acceptable to academia, and the best reference implementation for semantics, since Haskell is so picky. JavaScript is already ubiquitous in the browsers. There are various ideas for how to host Perl 6 on top of other VMs as well. Whatever.&lt;/p&gt;

&lt;p&gt;But the VM that works the best for Perl right now is, in fact, Perl 5. We&amp;rsquo;ve already bootstrapped much of a Perl 5 compiler for Perl 6. Here&amp;rsquo;s a picture of the approach of layering Perl 6 on Perl 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x80.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here in the middle we have the Great Moose theory of history.&lt;/p&gt;

&lt;p&gt;Other stuff that&amp;rsquo;s going on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x81.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to lots of testing and documentation projects, I&amp;rsquo;m very happy that Sage La Torra is working on a P5-to-P6 translator for the Google Summer of Code. Soon we&amp;rsquo;ll be able to take Perl 5 code, translate it to Perl 6, and then translate it back to Perl 5 to see how well we did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x82.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another bootstrapping approach is to take our current Haskell codebase and translate to Perl 6. That could be very important long term in keeping all the various implementations in sync.&lt;/p&gt;

&lt;p&gt;There are many, many other exciting things going on all the time. Hang out on the mailing lists and on the IRC channels to find out more.&lt;/p&gt;

&lt;p&gt;If you care.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x83.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl is growing up, but she&amp;rsquo;s doing so in a healthy way, I think. Those of us who are parents tend to try to discourage our kids from getting married too young, because we know how much people change around their twentieth year. Around the age of 19 or 20 is when we start that last major rewiring of our brains to become adults. This year, Perl will be 19 going on 20. She&amp;rsquo;s due for a brain rewiring.&lt;/p&gt;

&lt;p&gt;In previous years, Perl was just trying to act grownup by ignoring her past. This year, I&amp;rsquo;m happy to report that instead of just trying to act grownup, Perl is going back and reintegrating her personality to include the positive aspects of childhood and adolescence. I don&amp;rsquo;t know where Perl will go in the next ten or twenty years. It&amp;rsquo;s my job to say, &amp;ldquo;I don&amp;rsquo;t care anymore,&amp;rdquo; and kick her out of the house. She&amp;rsquo;s a big girl now, and she&amp;rsquo;s becoming graceful and smart and wise, and she can just decide her future for herself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x84.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Whatever. Thanks for listening, and for learning to care, and for learning to not care. Have a great conference! I don&amp;rsquo;t care how!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The State of the Onion 9</title>
      <link>http://localhost:1313/pub/2005/09/22/onion.html/</link>
      <pubDate>Thu, 22 Sep 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/09/22/onion.html/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/0title.jpg&#34; alt=&#34;figure 1&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the last couple of years, we&amp;rsquo;ve been homeschooling our two youngest kids. Gloria has been making sure they learn the easy subjects like history and mathematics. I&amp;rsquo;ve been making sure they also learn the hard subjects like, um, cinematography. So I&amp;rsquo;ve been making sure they view some of the great classics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/1bond.jpg&#34; alt=&#34;figure 2&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;
&lt;em&gt;James Bond materials copyright 1962 - 2005 United Artists Corporation and Danjac, LLC&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Home schooling works best if the parents learn alongside the children, so I&amp;rsquo;ve been forced to watch the Bond corpus along with my kids.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/2bond.jpg&#34; alt=&#34;figure 3&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or is that the Bond corpses? Seems like there are an awful lot of them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/3bond.jpg&#34; alt=&#34;figure 4&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, it&amp;rsquo;s a large body of work.&lt;/p&gt;

&lt;p&gt;Though some of the bodies are larger than others. If you know what I mean, and I think you do.&lt;/p&gt;

&lt;p&gt;Anyway, now that I&amp;rsquo;ve been wading through the Bond corpus again, I&amp;rsquo;ve noticed something I&amp;rsquo;ve never noticed before about the show. It&amp;rsquo;s just not terribly realistic. I mean, come on, who would ever name an organization &amp;ldquo;SPECTRE?&amp;rdquo; Good names are important, especially for bad guys. A name like SPECTRE is just too obvious. SPECTRE. Boo! Whooo!! Run away.&lt;/p&gt;

&lt;p&gt;You know, if I were going to name an evil programming language, I certainly wouldn&amp;rsquo;t name it after a snake. Python! Run away, run away.&lt;/p&gt;

&lt;p&gt;When I was young I actually preferred &lt;em&gt;Man from U.N.C.L.E&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/4uncle.jpg&#34; alt=&#34;figure 5&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now &amp;ldquo;THRUSH,&amp;rdquo; that&amp;rsquo;s is a decent name for an evil organization.&lt;/p&gt;

&lt;p&gt;Oh, and then there&amp;rsquo;s &lt;em&gt;Get Smart&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/5smart.jpg&#34; alt=&#34;figure 6&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unlike James Bond, it&amp;rsquo;s highly realistic. I can believe in an evil organization with a name like &amp;ldquo;KAOS.&amp;rdquo; After we&amp;rsquo;re done with the James Bond series, I plan to show my kids &lt;em&gt;Get Smart&lt;/em&gt;. I want to make sure my kids score high on intelligence tests. Ba dump bump.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a child of the Cold War. We didn&amp;rsquo;t go quite as far as to build a bomb shelter, but we actually thought about it before deciding our house would probably burn up anyway. Back then people thought you could win a nuclear war, or at least try real hard not to lose one. Eventually we all figured out that imperfect knowledge was a feature, and so we settled on a national policy of Fear, Uncertainty, and Doubt, though they couldn&amp;rsquo;t bring themselves to call it the FUD doctrine, so they called it MAD instead. Probably because they read too much &lt;em&gt;MAD&lt;/em&gt; magazine. Hmm, that puts a whole new twist on the &amp;ldquo;Spy vs. Spy&amp;rdquo; comics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/6boom.jpg&#34; alt=&#34;figure 7&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, as a child of the Cold War, I know that seeing a mushroom cloud is a good thing, since it means you haven&amp;rsquo;t been vaporized just yet. Sort of the same principle that you should never be scared of thunder, since the shocking part is already over with. Or more subtly, if you live under the flight path of several airports, like me, you&amp;rsquo;re always wondering if the Blue Angels going 100 feet overhead are going to run into your house. But as soon as you hear the Doppler shift dropping in pitch, you know that they&amp;rsquo;re probably going to miss your house, because if they were on a collision course with your house, the pitch would stay the same until impact. As I said, that&amp;rsquo;s one&amp;rsquo;s subtle.&lt;/p&gt;

&lt;p&gt;Of course, you should also plan ahead. Where there&amp;rsquo;s one plane, there&amp;rsquo;s likely to be another one coming along after it. And lightning &lt;em&gt;does&lt;/em&gt; strike twice in the same place. And, if you see a mushroom cloud, I would suggest that you start replanning your short-term future. And your new future plans should probably take into account not only your future but the future plans of about a million other people who just saw the same mushroom cloud and are suddenly replanning their futures.&lt;/p&gt;

&lt;p&gt;Anyway, planning is good. Well, &lt;em&gt;some&lt;/em&gt; planning.&lt;/p&gt;

&lt;p&gt;Everyone my age and older knows that Five-Year Plans are bad for people, unless of course you&amp;rsquo;re someone like Josef Stalin, in which case they&amp;rsquo;re just bad for &lt;em&gt;other&lt;/em&gt; people. All good Americans know that good plans come in four-year increments, because they mostly involve planning to get reelected.&lt;/p&gt;

&lt;p&gt;I probably shouldn&amp;rsquo;t point this out, but we&amp;rsquo;ve been planning Perl 6 for five years now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/7peoples.jpg&#34; alt=&#34;figure 8&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comrades, here in the People&amp;rsquo;s Republic, the last five years have seen great progress in the science of computer programming. In the next five years, we will not starve nearly so many programmers, except for those we are starving on purpose, and those who will starve accidentally. Comrades, our new five-year mission is to boldly go where no man has gone before! Oh wait, wrong TV show.&lt;/p&gt;

&lt;p&gt;You might say that Perl grew out of the Cold War. I&amp;rsquo;ve often told the story about how Perl was invented at a secret lab that was working on a secret NSA project, so I won&amp;rsquo;t repeat that here, since it&amp;rsquo;s no secret. Some of you have heard the part about my looking for a good name for Perl, and scanning through &lt;em&gt;/usr/dict/words&lt;/em&gt; for every three- and four-letter word with positive connotations. Though offhand, I can&amp;rsquo;t explain how I missed seeing Ruby. So anyway, I ended up with &amp;ldquo;Pearl&amp;rdquo; instead.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s a little known fact that one of the three-letter names I considered for quite a while was the word &amp;ldquo;spy.&amp;rdquo; Now, those of you who took in Damian&amp;rsquo;s session on Presentation Aikido are now wondering whether I&amp;rsquo;m just making this up to make this speech more interesting. And in this particular case, I&amp;rsquo;m not. You can ask my brother-in-law, who was there. On the other hand, please don&amp;rsquo;t ask him to vouch for anything else in this speech.&lt;/p&gt;

&lt;p&gt;But wouldn&amp;rsquo;t &amp;ldquo;Spy&amp;rdquo; be a great name to give to a language whose purpose was pattern matching and reporting? Hmm. And spies are also called &amp;ldquo;agents of change.&amp;rdquo; &amp;ldquo;Practical extractions are one of our specialties.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Instead of a &lt;code&gt;warn&lt;/code&gt; operator, it&amp;rsquo;d have to be the &lt;code&gt;warn off&lt;/code&gt; operator. Instead of having a &lt;code&gt;die&lt;/code&gt; operator, we might have had the &lt;code&gt;let die&lt;/code&gt; operator. Then we&amp;rsquo;d get Perl poetry, I mean, Spy poetry, with phrases like &lt;code&gt;live or let die&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How history might have been different! Those of you who are Perl programmers might instead be attending the 9th annual Spy conference. And maybe Ruby would not have been named Ruby, but instead have been named Spook, or Agent. And Python might not have been named after Monty Python, but after some other comedy troupe. It might be called Stooge, or Muppet, or something.&lt;/p&gt;

&lt;p&gt;Even if you&amp;rsquo;re not a child of the Cold War, you&amp;rsquo;ve been affected. My kids have been affected. Lately my son Aron and my daughter Geneva have been designing a game. No, not a computer game. It&amp;rsquo;s a kind of a board game involving spies and cool gadgets. It&amp;rsquo;s not done yet, so don&amp;rsquo;t pester them over when it&amp;rsquo;s going to be done. At least, don&amp;rsquo;t pester them any more than you pester me about Perl 6. Heh, heh.&lt;/p&gt;

&lt;p&gt;But as soon as I saw their cast of characters, I knew I had my theme for this year&amp;rsquo;s talk. For some reason, any time I see a really diverse set of characters, I think of the open source community in general, and the Perl community in specific.&lt;/p&gt;

&lt;p&gt;So if you&amp;rsquo;re new to the department, I&amp;rsquo;d like to introduce you to a few of the other spooks working for the organization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/16up.jpg&#34; alt=&#34;figure 9&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The cards for this game list various stats for each character&amp;rsquo;s strengths and weaknesses, as well as their favorite gadget. Now, as it happens, these spies all happen to be Perl programmers as well, so in this talk maybe we&amp;rsquo;ll get to see what their favorite &lt;em&gt;Perl&lt;/em&gt; gadgets are.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/ace.jpg&#34; alt=&#34;figure 10&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ace is the quintessential spy. All the fake spies like James Bond are based on him. And like Bond, Ace is such a good spy that he doesn&amp;rsquo;t care if everyone knows he&amp;rsquo;s a spy. Ace knows he&amp;rsquo;s the hero of the story, and therefore invincible.&lt;/p&gt;

&lt;p&gt;So Ace does spying simply because it&amp;rsquo;s fun. That&amp;rsquo;s also why he does Perl programming. He knows it&amp;rsquo;s all just a big game, and it&amp;rsquo;s fun to win with the hand you are dealt. On the other hand, it&amp;rsquo;s also fun to win by changing the rules. It&amp;rsquo;s especially fun if you can win using someone else&amp;rsquo;s money.&lt;/p&gt;

&lt;p&gt;You know, when you think about it, most open source software is written using someone else&amp;rsquo;s money. Most Perl programmers are not paid directly to hack on Perl, or Pugs, or on CPAN modules. A lucky few are paid to have fun, but most of us have to make a living some other way, and our bosses kindly let us spend part of our time working on things that are mutually beneficial to the organization and to the world in general. And if we have fun doing that, they don&amp;rsquo;t seem to mind.&lt;/p&gt;

&lt;p&gt;But on the flip side, the Aces of the world all seem to know how to create fun wherever they go, or at least they know how to go places where people know how to have fun. For this reason, Ace is one of the most important people in the Perl community.&lt;/p&gt;

&lt;p&gt;This last year, we were starting to lose our sense of fun in the Perl community. Though we tried to be careful about not making promises, everyone knew in their hearts that five years is an awfully long time to wait for anything. People were getting tired and discouraged and a little bit dreary.&lt;/p&gt;

&lt;p&gt;Then Autrijus Tang showed up. Maybe we should call him &amp;ldquo;Ace&amp;rdquo; Tang. He basically said, &amp;ldquo;Look, we&amp;rsquo;ll never get this done unless we optimize for fun.&amp;rdquo; So fun is exactly what the Pugs project is optimized for. Mind you, Autrijus&amp;rsquo;s idea of fun is to learn Haskell and then write a prototype of Perl 6 in it. Now, for those of you who don&amp;rsquo;t know, Haskell is one of those pure functional languages that doesn&amp;rsquo;t allow any side effects (except, of course, when it does). Really way-out-there stuff, compared to the thinking of the average Perl programmer.&lt;/p&gt;

&lt;p&gt;Furthermore, Autrijus thinks it&amp;rsquo;s fun to persuade other functional programmers that it would fun to bootstrap Perl 6 in Haskell. These folks proudly call themselves the &amp;ldquo;lambdacamels.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;But when this happened, a few skeptical people in the Perl community thought they knew what was going to happen next. The cabal would say that this was just too crazy, and we already had Parrot, and why duplicate effort. You know, your basic turf-protection reaction.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s not what happened. Instead, the cabal said, &amp;ldquo;Yay. We can work this problem from both ends now. Let&amp;rsquo;s give Autrijus all the help we can. Parrot will work bottom-up, and Pugs will work top-down.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Did I say &amp;ldquo;work&amp;rdquo;? I meant &amp;ldquo;play.&amp;rdquo; That&amp;rsquo;s what Ace does best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/chat.jpg&#34; alt=&#34;figure 11&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But not everyone is an Ace. Some people are naturally sneaky. Every organization needs a second-story man, and people like The Cat prefer to have their fun in private. I strongly suspect certain Perl programmers of being retired jewel thieves. You watch the version tree, and things mysteriously disappear in one place and appear somewhere else. Like a real cat, Le Chat&amp;rsquo;s ego is not involved in any kind of public way. That&amp;rsquo;s not to say that cats don&amp;rsquo;t have egos&amp;ndash;just that they don&amp;rsquo;t care whether you notice.&lt;/p&gt;

&lt;p&gt;Cats know how to get into and out of places they&amp;rsquo;re not supposed to be able to get into and out of. Cats seem to know how to levitate, and to pass through supposedly impermeable barriers. Even the stupidest cat knows how to make you think they&amp;rsquo;re reading your mind, but it&amp;rsquo;s all a trick.&lt;/p&gt;

&lt;p&gt;In Perl culture, Cats also do sneaky things. Sneakiness is a good quality when you&amp;rsquo;re playing Perl golf, for example. Sneaky Perl programmers like to do sneaky things with overloading and with source filters. In fact, Le Chat is looking forward with glee to the day he can change the Perl 6 grammar on the fly and write yet another set of ACME modules. Oh, hi Damian&amp;ndash;didn&amp;rsquo;t see you there.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/engles.jpg&#34; alt=&#34;figure 12&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is Miss Engles. She&amp;rsquo;s a librarian. Like a jewel thief, she also moves things from place to place, but for very different reasons. A jewel thief moves things &lt;em&gt;from&lt;/em&gt; where they belong, while a librarian moves things &lt;em&gt;to&lt;/em&gt; where they belong. A place for everything, and everything in its place. Miss Engles likes those aspects of Perl 6 that support literate programming, and that let her index the documentation in various ways.&lt;/p&gt;

&lt;p&gt;Miss Engles has never cracked a smile because, oddly enough, not cracking a smile is what makes her happy. She is a librarian all the way to the bone. Or that&amp;rsquo;s what she&amp;rsquo;d like you to believe.&lt;/p&gt;

&lt;p&gt;But in fact, as we all know from the movies, librarians take off their glasses and let down their hair when they get off work, and become completely different people. Librarians instinctively understand paradigm shifts, having perused most of the history section in their spare time, not to mention a great deal of the psychology section. So nothing ever surprises a librarian, least of all themselves. If a librarian ever says &amp;ldquo;I&amp;rsquo;m shocked,&amp;rdquo; you know they&amp;rsquo;re being completely sarcastic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/eric.jpg&#34; alt=&#34;figure 13&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eric has a problem with dyslexia, so he&amp;rsquo;s never going to be a librarian. But that&amp;rsquo;s okay, since he&amp;rsquo;s not terribly interested in the things librarians are interested in. Now, since Miss Engles is officially interested in almost everything, that makes it a little tough for people like Eric, since it forces him to be interested in almost nothing. But that&amp;rsquo;s okay&amp;ndash;give him a fishing pole and a tent, and he&amp;rsquo;s happy. Oh, he wouldn&amp;rsquo;t mind a suitcase nuke, either.&lt;/p&gt;

&lt;p&gt;Perl culture is full of easy-going, straightforward people. Actually, now that I look at it, this looks like Eric O&amp;rsquo;Reilly, long-lost cousin to Tim O&amp;rsquo;Reilly. Just kidding. But Tim has always been a straight dealer, and so is Eric, in his own way. I think with Tim it&amp;rsquo;s a matter of choice, but with Eric&amp;ndash;well, that&amp;rsquo;s just the way he is.&lt;/p&gt;

&lt;p&gt;Eric is the sort of agent you send skiing over the mountain to count enemy soldiers. Pick your term: he&amp;rsquo;s a trooper, or a SEAL, or a Marine. You know he&amp;rsquo;ll almost certainly come back alive, eventually, but you don&amp;rsquo;t quite know in advance whether he&amp;rsquo;ll have to kill all the enemy soldiers in order to count them. What you do know is that if he does, he certainly won&amp;rsquo;t hold it against any of them. Nothing personal. That&amp;rsquo;s just the way it is.&lt;/p&gt;

&lt;p&gt;And when he reports in, you&amp;rsquo;ll just get the facts, without much interpretation. Eric doesn&amp;rsquo;t put many comments in his code. He thinks that if you have to comment a piece of code, you haven&amp;rsquo;t written it clearly enough. He is looking forward to working in Perl 6 because a lot of the magical cruft has been cleaned out of the language, or at least moved into places where he doesn&amp;rsquo;t have to worry about it, such as function signatures.&lt;/p&gt;

&lt;p&gt;But the thing he loves most about Perl 6 is the multimethod dispatch, precisely because those crufty signatures also allow him to say what he wants without extra words.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/jezebel.jpg&#34; alt=&#34;figure 14&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jezebel isn&amp;rsquo;t really a bad girl. She&amp;rsquo;s just drawn that way.&lt;/p&gt;

&lt;p&gt;For all we know, this might be Miss Engles on her day off.&lt;/p&gt;

&lt;p&gt;That being said, I wouldn&amp;rsquo;t mind it if there more female programmers, especially female Perl programmers. And no, I don&amp;rsquo;t mean it like that, or my wife wouldn&amp;rsquo;t let me say it. But I think we need some spies to tell us what things in our culture appeal to women, and what don&amp;rsquo;t. And it kinda goes without saying that these spies need to be women. Well, look, the guys all have a lot of great ideas, but you know, guys tend to be rather, well, idea-oriented. In theory, Perl culture is supposed to be more cooperative than competitive, but it&amp;rsquo;s kind of hard to argue for that viewpoint when the vast majority of us are standing and pounding our chests like big gorillas. I include myself in that category. Er, the gorilla category, not the Jezebel category. Just thought I&amp;rsquo;d clear that up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/mama.jpg&#34; alt=&#34;figure 15&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think Mama represents the older generation of Perl programmers. Mama is wise to all the stupid tricks of the young&amp;rsquo;uns, and not afraid to tell &amp;lsquo;em off for it. Mama tends to be strict, but she has good reasons for it, because she takes the long view.&lt;/p&gt;

&lt;p&gt;A lot of Mamas must hang out on PerlMonks&amp;ndash;they&amp;rsquo;re the ones who are always saying &amp;ldquo;use strict; use warnings;&amp;rdquo; or you&amp;rsquo;ll grow up to be sorry you didn&amp;rsquo;t. And wipe your feet when you come in.&lt;/p&gt;

&lt;p&gt;Mama kinda likes the fact that Perl 6 is growing up to become a strict language by default, but she isn&amp;rsquo;t quite sure what she&amp;rsquo;s gonna do after the kids are all grown up. It makes her happy and sad at the same time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/natasha.jpg&#34; alt=&#34;figure 16&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Natasha gets to represent the next wave of international programmers, particularly those from developing countries. Natasha&amp;rsquo;s mother probably worked for a large eastern-bloc TLA, and I don&amp;rsquo;t mean IBM. But Natasha is actually doing a bit of industrial work here. All in the interests of capitalism, of course. Though &lt;em&gt;whose&lt;/em&gt; capital is perhaps a bit unclear at times.&lt;/p&gt;

&lt;p&gt;A lot of people like Natasha are trying to figure out how to make a living in the new economic realities, and one of those economic realities is that the traditional western powers are trying to vacuum up all intellectual property rights on behalf of various corporate interests. And she wonders, rightfully so, if there will ever be any place in that economy for her, and for people like her.&lt;/p&gt;

&lt;p&gt;So when our friend &amp;ldquo;Mad Dog&amp;rdquo; comes to town, and preaches the gospel that free and open source software is the only path to freedom, the only way for the rest of the world to push back&amp;ndash;well, she can see the appeal of that notion.&lt;/p&gt;

&lt;p&gt;And there are a &lt;em&gt;lot&lt;/em&gt; of Natashas in the world, and potential Natashas. Over the long haul, she may well be the most important member of this list.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/oliver.jpg&#34; alt=&#34;figure 17&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oliver represents the next generation of programmers, who don&amp;rsquo;t even know it yet. Oliver is not ready to learn computer science. He is just starting to think about programming because he&amp;rsquo;d like to be a video game designer someday. He doesn&amp;rsquo;t know that what he likes best about Perl is that it will let him learn what he needs to know one concept at a time, without forcing him to learn a bunch of abstract concepts all at once before he really needs them. When he drives on the freeway, he drives in the slow lane.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/pixie.jpg&#34; alt=&#34;figure 18&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, Pixie drives in the fast lane. She is what you might call an extreme programmer.&lt;/p&gt;

&lt;p&gt;As an extreme programmer, Pixie loves testing. Preferably testing to destruction. The best defense is a good offense. She&amp;rsquo;ll get the job done, but she&amp;rsquo;s determined to have a lot of fun doing it.&lt;/p&gt;

&lt;p&gt;Pixie works well in small teams, especially with pair programming. A team of two is the perfect size for her because wherever she&amp;rsquo;s aiming, her partner can always stand on the opposite side of her.&lt;/p&gt;

&lt;p&gt;As part of a rapid response unit, Pixie is very much into rapid prototyping. So Pixie&amp;rsquo;s favorite Perl 6 feature is the &lt;code&gt;yadayadayada&lt;/code&gt; operator, which lets her stub out new functions and blow up their interfaces even before the function bodies are written.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/radcliffe.jpg&#34; alt=&#34;figure 19&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the quintessential English banker, Mr. Radcliffe is a firm believer in reliability, with a dash of style. For our talk today, he gets to represent the business interests surrounding open source software. Mr. Radcliffe knows that businesses have different set of goals than most open source programmers, but he also knows that there is a great deal of overlap in those goals, and that the clever businessman can exploit that overlap to the betterment of both business and programmer.&lt;/p&gt;

&lt;p&gt;You see, Mr. Radcliffe understands that one thing can have multiple functions. His umbrella is almost certainly multifunctional. Mr. Radcliffe&amp;rsquo;s favorite part of Perl 6 is that nearly every feature is multifunctional, though not completely orthogonal. That doesn&amp;rsquo;t bother Mr. Radcliffe, because nobody who rides cabs around in London expects complete orthogonality. He just expects to get where he&amp;rsquo;s going.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/router.jpg&#34; alt=&#34;figure 20&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What can I say? Perl is also used by script kiddies. We just hope Oliver doesn&amp;rsquo;t grow up to be a script kiddie like r0u73r. Or if he does, we hope it&amp;rsquo;s just a passing phase.&lt;/p&gt;

&lt;p&gt;And in fact, r0u73r &lt;em&gt;used&lt;/em&gt; to be a script kiddie, but now uses his 1337 skills for good. To some extent, most of us were cargo culters as we learned how to program. We were reusing code, which is good, but we just didn&amp;rsquo;t always understand &lt;em&gt;why&lt;/em&gt; we were reusing the code. But the Perl community has always had a soft spot for cargo culters, and seeks to educate them until they learn the real reasons for things being the way they are. Then they&amp;rsquo;re ready to join the real cult. Er, I mean, the real culture.&lt;/p&gt;

&lt;p&gt;Anyway, as a vestige of his former ways, r0u73r looks forward to using the introspection capabilities of Perl 6, particularly when he can introspect someone &lt;em&gt;else&amp;rsquo;s&lt;/em&gt; data structures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/tina.jpg&#34; alt=&#34;figure 21&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tina seems like a girl who just wants to have fun, but she&amp;rsquo;s really aspiring to be Mata Hari, except for the part about getting caught and executed. As a dancer, and perhaps an actress someday, Tina understands about playing roles. She knows that the role she&amp;rsquo;s currently playing is not who she really is. In Perl 6 terms, she understands the difference between an &amp;ldquo;isa&amp;rdquo; relationship and a &amp;ldquo;does&amp;rdquo; relationship. So she&amp;rsquo;s very much into the Perl 6 concepts of roles, traits, properties, and mixins.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/wheelbarrow.jpg&#34; alt=&#34;figure 22&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wheelbarrow is a scavenger. That is to say, he&amp;rsquo;s a sysadmin.&lt;/p&gt;

&lt;p&gt;Wheelbarrow loves to sift through the trash, which in his case consists primarily of discarded HTTP logs. Wheelbarrow loves the strong pattern-matching skills of Perl, and wonders how much better he&amp;rsquo;ll be at scavenging useful information with Perl 6 rules.&lt;/p&gt;

&lt;p&gt;As a strong believer in ecology, Wheelbarrow also loves CPAN, and hopes that Perl 6&amp;rsquo;s version of CPAN will be even better at helping him reduce, reuse, and recycle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/wraith.jpg&#34; alt=&#34;figure 23&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wraith has trained herself to be good at hiding. She&amp;rsquo;s particularly good at information hiding and various forms of encapsulation.&lt;/p&gt;

&lt;p&gt;Wraith also loves all the crazy new Perl 6 operators, especially the ones that will allow her to express parallel operations implicitly. She is willing to train herself in their skillful use because she values efficiency of expression. Why toss a single throwing star when you can throw eight at once?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/wuli.jpg&#34; alt=&#34;figure 24&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wu-Li is the old guy who is interested in Unicode, and is looking forward to Perl 6&amp;rsquo;s built-in support for efficient and ubiquitous Unicode processing. Wu-Li likes to think about the various positive and negative aspects of various strange philosophies, whether Eastern, Western, Northern, Southern, or somewhere in-between.&lt;/p&gt;

&lt;p&gt;Wu-Li isn&amp;rsquo;t actually Chinese. He only thinks he&amp;rsquo;s Chinese because when he was young his parents told him that every third child born into the world was Chinese, and he was a third child.&lt;/p&gt;

&lt;p&gt;As a foreteller of the future, Wu-Li is the only person who knows when Perl 6 is coming out, and I&amp;rsquo;m not telling. Er, he&amp;rsquo;s not telling.&lt;/p&gt;

&lt;p&gt;Wu-Li is also known for giving peculiar speeches from time to time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/x.jpg&#34; alt=&#34;figure 25&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally we come to Mr. X. I don&amp;rsquo;t know much about Mr. X, because nobody knows anything about Mr. X except Mr. X himself. We can only guess.&lt;/p&gt;

&lt;p&gt;Mr. X seems to be highly placed in his organization, because all his information is of high quality, and of strategic value. Mr. X seems to believe in clean interfaces, with no extraneous information. He&amp;rsquo;s a master of the deaddrop, and other forms of message passing. He seems to understand Perl 6&amp;rsquo;s concept of delegation, so he&amp;rsquo;s probably in management. Perhaps he&amp;rsquo;s the CIO. Or maybe he&amp;rsquo;s the CFO&amp;rsquo;s assistant. Who knows?&lt;/p&gt;

&lt;p&gt;In any event, he may be someone with some decision-making power, but he can&amp;rsquo;t afford to compromise his position by being overtly in favor of open source. At least, not yet. Nevertheless, he may be the most important player in the eventual success of open source. Mr. X is future-oriented, and as enigmatic as the future itself. We sincerely hope he turns out to be a nice person.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/16up.jpg&#34; alt=&#34;figure 26&#34; width=&#34;400&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s our organization in a nutshell. We sincerely hope you&amp;rsquo;ll join up. Unfortunately, if you don&amp;rsquo;t join, we&amp;rsquo;ll have to liquidate you.&lt;/p&gt;

&lt;p&gt;Well, enough of that. If this were an ordinary State of the Onion speech, I would now go into my standard spiel about how diverse the open source community is and how it&amp;rsquo;s such a great thing that we can pool our various strengths and produce something greater than any of us can do alone. And if this conference were still in California, I might say it again anyway, since diversity in California is not just encouraged, it&amp;rsquo;s actually required, culturally speaking. Californians have gotten to the point of being completely intolerant of non-diversity. But we&amp;rsquo;re not in California, so let&amp;rsquo;s just assume I said all that again and go on to something else.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to leave you with one thought, along with all these pretty pictures.&lt;/p&gt;

&lt;p&gt;As I was thinking about the intelligence community and its recent obvious failures, it kinda put a new spin onto the phrase, &amp;ldquo;Information wants to be free,&amp;rdquo; or my own version of it, which is that &amp;ldquo;Information wants to be useful.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We often think that intelligence failures are caused by having too little information. But often, in retrospect, we find that the problem is too much information, and that in fact, we had the data available to us, if only it had been analyzed correctly.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m just wondering if we&amp;rsquo;re getting ourselves into a similar situation with open source software. More software is not always better software. Google notwithstanding, I think it&amp;rsquo;s actually getting harder and harder over time to find that nugget you&amp;rsquo;re looking for. This process of re-inventing the wheel makes better wheels, but we&amp;rsquo;re running the risk of getting buried under a lot of half-built wheels.&lt;/p&gt;

&lt;p&gt;And there are two take-home lessons from that. The first is that, as an open source author, you should be quick to try to make someone else&amp;rsquo;s half-built wheel better, and slow to try to make your own. We&amp;rsquo;re making progress in this realm in the Perl community, but I don&amp;rsquo;t think any open source community ever gets good enough at harmonizing the dissimilar interests that sometimes lead to project forks. We can always improve there.&lt;/p&gt;

&lt;p&gt;The second take-home lesson is this. Pity your poor intelligence analyst back at headquarters. He&amp;rsquo;s not all that intelligent, after all. The intelligence of the intelligence community is distributed, and it&amp;rsquo;s often the Tinas and the Wheelbarrows of the world that know when they&amp;rsquo;ve got a piece of hot information. But somehow that meta-information gets lost on transmission back to headquarters.&lt;/p&gt;

&lt;p&gt;So my plea to all you agents out there today is to use your own initiative in figuring out which things to bother us with, and which things to work out for yourself. You&amp;rsquo;re smart, and the worst that can happen is that we tell you that you&amp;rsquo;ve wasted some effort. Just think of it as a kind of commit and rollback mechanism. Recent studies in multithreading show that hard locks do not scale as well as Software Transactional Memory, which is just such a commit/rollback mechanism.&lt;/p&gt;

&lt;p&gt;Look around you. We are a multithreaded organization, so the same is true socially. It&amp;rsquo;s easy to get offended or discouraged when a rollback happens, but just don&amp;rsquo;t. The whole community will function more efficiently that way.&lt;/p&gt;

&lt;p&gt;But if you get rolled back on something you know is important, just keep pushing. Those of us back at headquarters try to stay flexible and open-minded, but we don&amp;rsquo;t always succeed. So keep that good intel coming in, because good analysts can change their minds occasionally, too. At least, that&amp;rsquo;s what I think this week, and this year.&lt;/p&gt;

&lt;p&gt;This talk will self-destruct in five seconds. Thank you all for listening.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_09_22_onion/Z.gif&#34; alt=&#34;figure&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The State of the Onion</title>
      <link>http://localhost:1313/pub/2004/08/18/onion.html/</link>
      <pubDate>Thu, 19 Aug 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/08/18/onion.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: All comments in square brackets are X screensavers that I ran for my slides. If you want to play along at home, start up xscreensaver-demo and click on the screensaver named. By the way, for any screensaver that wants random images (such as VidWhacker), I used a directory full of strange camel pictures (some of which I processed to make even stranger, just for those of you who think the phrase &amp;ldquo;strange camel&amp;rdquo; is redundant).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;VidWhacker (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Good evening. Welcome to my eighth State of the Onion speech. I only have two more speeches to go after this, and I&amp;rsquo;ll be up to 10. You see, 10 is kind of a magical number for speeches. According to Sturgeon&amp;rsquo;s Law, 9 out of 10 speeches are crap. After we get to number 10, we&amp;rsquo;ll know which one of mine &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; &amp;hellip; Probably number 9 or number 10 &amp;hellip;&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m giving you fair warning that this is probably going to be a lousy speech. Those of you who attended Damian Conway&amp;rsquo;s Presentation Aikido seminar yesterday will be sure of it. You&amp;rsquo;ll probably get more out of this speech than anyone else — mostly as a kind of negative example. You can just get out Damian&amp;rsquo;s notes and start ticking off all the rules I&amp;rsquo;ve violated.&lt;/p&gt;

&lt;p&gt;Now the particular reason this speech is going to be lousy is that I made up all my slides before I knew what I was going to talk about.&lt;/p&gt;

&lt;p&gt;Well, OK, that&amp;rsquo;s not quite right. I didn&amp;rsquo;t make up my slides. I was lazy. That&amp;rsquo;s a virtue, right? And I was Impatient. Plus I had the hubris to think that it didn&amp;rsquo;t really matter what my slides say — I can probably wrap a speech around them anyway. Especially since there&amp;rsquo;s only a 10% chance that it has to be a good speech.&lt;/p&gt;

&lt;p&gt;So anyway, here&amp;rsquo;s my first real slide. It&amp;rsquo;s a picture of how Damian thinks.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Maze&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;As most of you know, Damian is very clear-headed and determined. He gets where he&amp;rsquo;s going. It doesn&amp;rsquo;t matter what the problem is, he&amp;rsquo;ll find a way to solve it eventually. He may have to backtrack occasionally, but he&amp;rsquo;s very goal-oriented, and knows how to backtrack gracefully. It&amp;rsquo;s very good that we have Damian on the Perl 6 design team, because we need someone who thinks like that.&lt;/p&gt;

&lt;p&gt;Here, on the other hand, is a picture of how well I think on Damian&amp;rsquo;s level.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;AntSpotlight (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Yes, this is the famous Ant Spotlight screensaver. And yes, that is where I got all my slides from. And no, I didn&amp;rsquo;t have a goal in mind when I picked them. Do you see any goals in this picture? Do you see any efficient search strategies? Do you see anything resembling speed here?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s how well I think on Damian&amp;rsquo;s level. On a different level, I think like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cloudlife, fast&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;On this level, my mind is in a continual ferment. Things bubble up to the surface unbidden, and evolve in unexpected directions. Everything gets compared with everything else because the entire stew pot is bubbling like crazy. Well, maybe it&amp;rsquo;s not &lt;em&gt;like&lt;/em&gt; crazy. Maybe it &lt;em&gt;is&lt;/em&gt; crazy.&lt;/p&gt;

&lt;p&gt;One of the things that bubbled up recently was that the subject of this talk had to be screensavers. I didn&amp;rsquo;t know why. Maybe I still don&amp;rsquo;t know why. But be that as it may, that&amp;rsquo;s what this talk is about. Screensavers, and why I have to talk about them today, and why I have to talk about why I have to talk about them today. It&amp;rsquo;s a kind of recursive problem, you see.&lt;/p&gt;

&lt;p&gt;Incidentally, this screensaver is a variant of Conway&amp;rsquo;s Game of Life. No, not our Conway, the other Conway. Unless our Conway is the other Conway. Whatever, we&amp;rsquo;ll keep our Conway. After all, he&amp;rsquo;s TheDamian.&lt;/p&gt;

&lt;p&gt;Anyway, the game of Life is sort of the prototypical example of a cellular automaton. A number of screensavers are based on cellular automata. I have great empathy for all of them, because that&amp;rsquo;s how I think&amp;hellip; I think&amp;hellip;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Critical&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;On the other hand, my mind is like a screensaver that no one can ever look at, except maybe me, and God. People can&amp;rsquo;t see the ferment in my mind. What they see externally has to be filtered through my verbal apparatus, which is actually quite limited. I often think that my verbal processor is a slow interpreter. My wife&amp;rsquo;s verbal processor is a fast compiler. Actually, those of you who know Gloria will realize that she probably does her verbal processing down in the microcode. Or maybe it&amp;rsquo;s just hardwired. She can read out loud faster than I can read silently. Or maybe it&amp;rsquo;s just that she can talk faster than I can think. Or more likely, it&amp;rsquo;s just that I think slower than she talks.&lt;/p&gt;

&lt;p&gt;Anyway, where was I? Oh, yeah. This is how other people view my thinking. I spend a certain amount of time bouncing all over the cognitive map, then I&amp;rsquo;ll perseverate in a particular area for a while, and then I&amp;rsquo;ll take a flying mental leap to something that seems to the observer to be totally unrelated. They aren&amp;rsquo;t unrelated, but they &lt;em&gt;are&lt;/em&gt; long-range links. You know — all that six degrees of separation stuff. You need the long links as well as the short ones to make your graph work that way. There, my mentioning that is another example of just that sort of mental leap. This screensaver tends to look like a random walk generated by a person with attention deficit disorder. I don&amp;rsquo;t have ADHD. I tend to perseverate and not get distracted when I &lt;em&gt;should&lt;/em&gt; get distracted. If anything, I have Asperger&amp;rsquo;s syndrome, or some kind of mild autism. My good friend Tom Christiansen, who does have ADHD, once said jokingly that I have &amp;ldquo;task-switching deficit&amp;rdquo; disorder. He&amp;rsquo;s probably right on that. Certainly I seem to be stuck on this Perl thing. I&amp;rsquo;ve been stuck there for more than 15 years now. People think I make these long mental leaps all the time, but they&amp;rsquo;re all in the scope of this one picture. In my mind, everything relates to Perl, one way or another. You&amp;rsquo;ll notice this screensaver never jumps off the screen.&lt;/p&gt;

&lt;p&gt;Another way to view this screensaver is that the long jumps are indicative of the ability to stay on task a long time. In that view, if you have attention deficit disorder, your thinking looks more like this, because you&amp;rsquo;re changing directions faster than you want to.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Wander&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;People with ADHD have many endearing qualities, spontaneity not the least of them. But it &lt;em&gt;is&lt;/em&gt; a disability, and the ADHD approach only gets you so far. More to the point, it tends to get you back where you were. Here we see a screensaver based on a random walk. It&amp;rsquo;s actually rather stultifying if you watch it long enough. It&amp;rsquo;s been shown mathematically that a random walk will eventually return to the place it started if you wait long enough.&lt;/p&gt;

&lt;p&gt;Now, just because I say a random walk is stultifying to watch, please don&amp;rsquo;t take that to mean that ADHD people are stultifying to watch. Quite the opposite, in fact. I&amp;rsquo;m just using these screensavers as talking points, as metaphors of life, but some of my metaphors limp. As we get older we realize that everyone has disabilities. That seems to be true of metaphors as well. They all limp. Except for the ones that are dead. Anyway, please don&amp;rsquo;t anyone take offense at my free associations. Even if they&amp;rsquo;re true.&lt;/p&gt;

&lt;p&gt;You know how people are sometimes rude on Usenet or on a mailing list. Sometimes they&amp;rsquo;ll write something that can only be taken as a deadly insult, and then they have the unmitigated gall to put a smiley face on it, as if that makes it all right. It doesn&amp;rsquo;t, you know. Nevertheless, if I insult you with a deadly insult in this talk, please put one of those little smileys after it. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Anyway, where was I. Oh, yes, random walks. And the fact that they&amp;rsquo;re kind of stultifying to watch.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Rorschach&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You could throw in a little symmetry for interest. In fact, there&amp;rsquo;s already a special screensaver for that, which you can use if you want to find out if you&amp;rsquo;ve cracked&amp;hellip;&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip;&lt;/p&gt;

&lt;p&gt;Personally, Rorschach blots always look like butterflies to me. Or pelvis bones, I admit it.&lt;/p&gt;

&lt;p&gt;Or Mecha warriors. And such. You could almost swear the designers of Japanese anime must use this program to come up with new ideas for various kinds of monsters. But it&amp;rsquo;s still a random-walk program when you look at it. It&amp;rsquo;s value to psychoanalysis comes from the bilateral symmetry, which psychoanalysts think will remind us of sex, for some reason. Probably has something to do with the fact that people are bilaterally symmetrical.&lt;/p&gt;

&lt;p&gt;Pychoanalysts tend to have abstract hang-ups about sex (at least the Freudian ones do), but since we&amp;rsquo;re not psychoanalysts here, why stop at bilateral symmetry? Why stop at random walks? Why not psychoanalyze ourselves with other kinds of free associations?&lt;/p&gt;

&lt;p&gt;Which is precisely what I&amp;rsquo;m doing here. Another way of looking at this talk is that I&amp;rsquo;m psychoanalyzing myself in front of you, using all these screensavers as Rorschach blots to free associate with. Another way to look at it is that screensavers are sort of a poor man&amp;rsquo;s LSD, without the bad trips.&lt;/p&gt;

&lt;p&gt;By the way, I don&amp;rsquo;t think there are any Freudian psychologists in the audience, but if you happen to be a Freudian psychologist, and were insulted by my earlier remarks &amp;hellip; well &amp;hellip; just deal with it &amp;hellip; repress it, or something &amp;hellip;.&lt;/p&gt;

&lt;p&gt;In honor of Freudian psychology, I should in all fairness point out that I am myself the subject a classical case of repressed memory. I don&amp;rsquo;t remember anything from my fifth grade. It wasn&amp;rsquo;t anything sexual (I don&amp;rsquo;t think!), but I am told that it was one of these experimental open classrooms where you have to decide yourself what you&amp;rsquo;re going to learn. That works well for these kinds of people:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Maze&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;One of the aspects of my Asperger personality is that I don&amp;rsquo;t initiate things like that. I have impaired executive function, in modern terminology. I almost never initiate telephone calls. I almost never initiate anything, in fact. Funny, considering Perl, but nevertheless true.&lt;/p&gt;

&lt;p&gt;The most telling example of that is when Deja first put up all the old Usenet news articles for browsing. My good friend Randal Schwartz went in and discovered that of the hundreds of articles I&amp;rsquo;d posted over the years, only one article was not a follow-up to some else&amp;rsquo;s article. I don&amp;rsquo;t initiate. I have no initiative. I guess that makes me lazy. Oh, well.&lt;/p&gt;

&lt;p&gt;Anyway, I don&amp;rsquo;t remember fifth grade at all. I did terribly that year, and completely blocked it out of my memory. I remember fourth grade and sixth grade just fine though. But then, I did well those years. It all fits. Case closed.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;DangerBall&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;But now I have this other psychological mystery I&amp;rsquo;m trying to solve. Maybe it&amp;rsquo;s just some kind of compulsion, but I &lt;em&gt;know&lt;/em&gt; deep down that I have to talk about screensavers for this speech. But why? Why, why, why, why, why? It&amp;rsquo;s irrational and illogical.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s what the rest of this talk is about. It all ties in with what happened to me last year, and it also all ties in with Perl.&lt;/p&gt;

&lt;p&gt;So about what happened to me last year: I had a mutation. That&amp;rsquo;s nothing new — people have mutations all the time. So do screensavers. Many screensavers, such as this one, are based simply on showing you a mutating object, moving around the screen. That&amp;rsquo;s pretty natural for screensavers. After all, the original purpose of screensavers was to save your screen, and that meant not putting the same picture up in the same place for an extended period of time. Of course, a blank screen would serve for that just as well. But, ya know, a blank screen just isn&amp;rsquo;t very interesting. So we get these various mutator objects instead.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cubenetic&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one does interweaving cubes.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Engine&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cute mutator. The little engine that could, if you will&amp;hellip;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;FlipFlop&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one does flip flops. Being good at flip-flops is a prerequisite for designing computer languages. At least, I find that I have to do frequent flip-flops in the design of Perl 6. I probably shouldn&amp;rsquo;t over-generalize that to other language designers, who by and large are smarter than I am.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Gears&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of Perl 5. It&amp;rsquo;s cool.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Gears (planetary)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of Perl 6. It&amp;rsquo;s just the same as Perl 5, only cooler.&lt;/p&gt;

&lt;p&gt;Planetary gears are very scalable — you can get a large increase or decrease in revolutions out of them. For that reason, planetary gears are often used in the engines of high-performance turboprop aircraft. Definitely industrial-strength stuff.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bouboule, 3d&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This one&amp;rsquo;s kind of ugly, but then it&amp;rsquo;s supposed to be viewed in 3D using those red/blue glasses. For some reason it reminds me of my stomach when I&amp;rsquo;m not feeling so good.&lt;/p&gt;

&lt;p&gt;Which reminds me to get back to the subject. Mutations. I had one, in my stomach. It&amp;rsquo;s a pretty well understood mutation, as these things go. It&amp;rsquo;s the sort of mutation that produces a stomach tumor.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Mirrorblob, color&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;As I stood in this exact spot a year ago, I told you that I&amp;rsquo;d been in the hospital for four days with a bleeding ulcer. What I did not know at that time was that the ulcer was on a tumor the size of my fist toward the lower end of my stomach. I did not know that I would have the lower half of my stomach removed two weeks after OSCON. I did not know that I would have complications, and complications on my complications, recursively. I did not know that I&amp;rsquo;d be spending a total of two months in the hospital.&lt;/p&gt;

&lt;p&gt;I was pretty ignorant back then.&lt;/p&gt;

&lt;p&gt;You see, when you have bleeding ulcers on your vacation in Kauai, the doctor there tells you that he saw the ulcers, but he doesn&amp;rsquo;t tell you that he saw them on a tumor. What he does tell you is to see a gastroenterologist the moment you get home. After all, he doesn&amp;rsquo;t want to ruin the rest of your vacation. Never mind that you&amp;rsquo;ve spent it in the hospital.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;SpeedMine&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;So after last year&amp;rsquo;s OSCON I go in for another gastric endoscopy. That&amp;rsquo;s where they slide a tube down your throat to look at what&amp;rsquo;s down there. This is rather unpleasant, so they use what&amp;rsquo;s called conscious sedation. They spray numbing gunk in the back of your throat, and put you partway under. You can kind of remember it afterwards, but not the bad bits.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Spotlight (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Then the doctor looks around, much like our ant spotlight we had earlier. He can&amp;rsquo;t see too much at a time, but he spots the tumor, and takes pictures of it. He can&amp;rsquo;t tell how big it is, because endoscopes are monocular, and you can&amp;rsquo;t really tell how close you are to what you&amp;rsquo;re looking at.&lt;/p&gt;

&lt;p&gt;A lot of screensavers are based on the spotlight metaphor. Here&amp;rsquo;s another:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bumps (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;And another.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Zoom, lenses (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;In this case, the size of the spotlight is the whole screen, like one of those useless digital zooms on your digital cameras. But it&amp;rsquo;s still just viewing one portion of the picture, whether that&amp;rsquo;s part of a camel, or part of an elephant. Or part of your stomach. My stomach, in this case.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Goop&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;At this point my gastroenterologist refers me to a surgeon. Since we don&amp;rsquo;t know how big the tumor is, I have to drink a bunch of coconut-flavored white gludge and go in for a CT scan. I don&amp;rsquo;t like coconut. I don&amp;rsquo;t like white gludge. But I do it anyway. It makes some of your body less transparent than other parts. Some screensavers are about transparency. Others are about opacity.&lt;/p&gt;

&lt;p&gt;Like the distinction between fermions and bosons, objects in screensavers have to decide whether to bounce off each other or allow overlap. And if they overlap, whether one of them hides the other or not. In this case, we see through the overlap. Many screensavers just pile things on top of each other, like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Cynosure&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I find these screensavers disturbing, because they remind me that with the passage of time, everything old gets covered over by new things. It&amp;rsquo;s a metaphor of past, present, and future.&lt;/p&gt;

&lt;p&gt;After my CT scan, the surgeon calls my wife even before I get home, and asks if I could go into surgery the very next day to have the tumor removed. She says yes. So I do. Sometimes the future is closer than you think.&lt;/p&gt;

&lt;p&gt;General anesthesia is not like sleeping. My dreams usually kind of look like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pipes&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;But general anesthesia looks like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Blank&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You have no present, just a past, and (hopefully) a future. You don&amp;rsquo;t dream — it&amp;rsquo;s just a big blank until you come out from under.&lt;/p&gt;

&lt;p&gt;Then they put you on morphine, so you won&amp;rsquo;t hurt. Instead, you itch. Did you know morphine makes you itch? Boy, does it ever. And you have really weird dreams. Dreams kind of like this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Bubbles, fastest, no hide&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Or this:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Lament&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I had really weird dreams on morphine. Didn&amp;rsquo;t like those screensavers. But a wonderful poem came to me — it started out &amp;ldquo;In Xanadu did Kubla Khan a stately pleasure dome decree.&amp;rdquo; But I can&amp;rsquo;t remember the rest of it.&lt;/p&gt;

&lt;p&gt;Just kidding. But the place I did visit in my dreams was Xanadu, and it wasn&amp;rsquo;t a very nice place to be. I prefer normal dreams.&lt;/p&gt;

&lt;p&gt;When I was awake, I thought I was choking to death because of the tube down my nose to my stomach. I wasn&amp;rsquo;t, but I thought I was. It wasn&amp;rsquo;t until I cajoled a nurse into looking down my throat with a flashlight that I was mollified. That nurse became my favorite nurse, in a Florence Nightingale sort of way. I had several other favorite nurses too, for various reasons.&lt;/p&gt;

&lt;p&gt;But then I had complications. As some of you know, twenty years ago I went blind in my right eye due to a case of shingles in my cornea. Shingles is just a recurrence of chicken pox virus.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s a screensaver called &amp;ldquo;NerveRot&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;NerveRot&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I love this screensaver, in a perverse sort of way. It&amp;rsquo;s so&amp;hellip;so&amp;hellip;in your face. It&amp;rsquo;s unnatural in so many ways. It looks like a fractal, but its fractal dimensionality isn&amp;rsquo;t constant.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t love real nerverot. And shingles is a form of nerve rot, one of those things that kicks you when you&amp;rsquo;re down. And I was down. I got a shingles infection on both sides of my head, which was unusual. It took me several days to figure it out. Fortunately, they have drugs to suppress it. But instead of getting out of the hospital in five days, it took ten. The good news was that my pathology analysis results came back saying that the excised tumor looked relatively benign in all respects except for its large size.&lt;/p&gt;

&lt;p&gt;The bad news was that I was home for only twenty-four hours, and had to go back to emergency. I had never been more nauseous in my life, and to compound that, I found that even if I wanted to, I couldn&amp;rsquo;t upchuck due to spasms in my esophagus. If you&amp;rsquo;ve ever had a tube down your nose, you&amp;rsquo;ll know that you never want to have one again, but I was so miserable that I asked for one. It was a great improvement.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Compass&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This screensaver was written to be nauseating, and I think it succeeds admirably in that. In fact, it really bugs me that I don&amp;rsquo;t know why it has two needles pointing in different directions. I had far too many needles going in various directions when I was in the hospital. I hope that other needle there isn&amp;rsquo;t the altimeter.&lt;/p&gt;

&lt;p&gt;Anyway, this reminds us that an open source project needs a leader who has a good sense of direction, who doesn&amp;rsquo;t change his mind continually about things like, say, how double-quoted strings ought to process interpolations, or which bits of the parser should work top down, and which bottom up. If you can find such a leader for Perl 6, that would definitely be an improvement over me. At least in some respects. Of course, I have the advantage of rules one and two. Rule 1: Larry is always right. Rule 2: Larry will still be right even after he changes his mind. Now I&amp;rsquo;m thinking there should also be a Rule 3, just in case. Rule 3 would say that Larry does not need to continue to be right after he&amp;rsquo;s dead.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;BSOD &amp;quot;Blue Screen of Death&amp;quot;&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I was sure I was dying. I went back into the hospital, and stayed there for weeks. The bad news was that my surgery site had scarred up, and I couldn&amp;rsquo;t eat or drink anything. I got all my nutrients and fluids through an IV line.&lt;/p&gt;

&lt;p&gt;The good news was that if I waited long enough, it might open up again of its own accord.&lt;/p&gt;

&lt;p&gt;That bad news was that after several weeks, it didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;The good news was that they had ways of putting tubes in to bypass the obstruction. So I had more procedures.&lt;/p&gt;

&lt;p&gt;The bad news was the procedures didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;The good news was that they had a way to revise the first surgery.&lt;/p&gt;

&lt;p&gt;The bad news was that fixing the first surgery meant going through surgery all over again six weeks after my first surgery. Meanwhile, I spent a lot of time idling.&lt;/p&gt;

&lt;p&gt;I think I started developing an empathy for screensavers about that time. The poor things just have to sit there and twiddle their thumbs. I was simultaneously bored and unable to concentrate. My friends sent me books that I couldn&amp;rsquo;t read. The only thing I could concentrate on long enough was crossword puzzles. With a crossword puzzle, you can quit after a clue or two, and still make overall progress, even if your brain is crashing every few minutes. As mine was at that point.&lt;/p&gt;

&lt;p&gt;This particular screensaver fools me more often than I care to admit. The problem is that the more computers you&amp;rsquo;ve used, the more different kinds of crashes you&amp;rsquo;ve seen. And mentally, you classify them all in the &amp;ldquo;Oh, shit!&amp;rdquo; category, which is a category the brain is very efficient at processing.&lt;/p&gt;

&lt;p&gt;On the other hand, the part of your brain that says, &amp;ldquo;Hey, that&amp;rsquo;s the crash screen for a different operating system, dufus!&amp;rdquo; — that part operates at a much slower pace. This is actually a profound psychological truth. Back in the heyday of Prolog, everyone was bragging about how many LIPs they were able to process. That&amp;rsquo;s logical inferences per second. But your brain applies many different LIPs ratings depending on how urgent the problem seems to be. The brain is chock full of shortcuts, and orthogonality be screwed. Optimizers cheat, and sometimes they get caught cheating. With this screensaver, you can catch your own brain&amp;rsquo;s optimizer cheating.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pedal&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I got to go home for a week before my second surgery. I could even walk around my neighborhood with a portable IV pack on my back. I remember admiring some of the flowers in the neighborhood. They were a welcome sight after the hospital. But, you know, it&amp;rsquo;s really scary getting all your food and water through a tube. Especially the water. I got to be home for my birthday, but I couldn&amp;rsquo;t eat anything. Well, OK, I cheated. I ate one Popsicle, and watched it drain back out of my stomach tube. At least it tasted good.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Blank&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;My second surgery was a success. Eventually. I had to go through the same morphine rigmarole again. At least this time they put in a stomach drain tube so I didn&amp;rsquo;t have to put up with a nose tube. But I had complications again, this time with some internal bleeding. I lost enough blood that they were seriously considering giving me a transfusion. But I squeaked through, and eventually came home. This time I had a feeding tube, which was in some ways an improvement over an IV, and in other ways not. In particular, I was now housebound, because the stomach feeding pump was not as portable as the IV pump. I had to make do with fake foliage on my computer screen.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Forest&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This screensaver makes use of an ancient technique. If you&amp;rsquo;re working in an opaque medium such as oil paint, draw the background first. Then paint the foreground over that. This may seem like cheating, but we use rules of thumb like this all the time. Every time you do lexical scoping, you&amp;rsquo;re treating the outer lexical scope like a background, and the inner lexical scope like a foreground. That&amp;rsquo;s why it&amp;rsquo;s so natural to talk about an inner variable hiding an outer variable of the same name.&lt;/p&gt;

&lt;p&gt;Can you begin to see why I have a special mental relationship with these screensavers? Maybe I&amp;rsquo;m a little bit crazy, but I can&amp;rsquo;t decide if it&amp;rsquo;s psychotic or neurotic. You know the difference, don&amp;rsquo;t you? A psychotic thinks that 2 + 2 = 5. A neurotic knows that 2 + 2 = 4, but it makes him nervous.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just a simple, everyday obsession.&lt;/p&gt;

&lt;p&gt;Eventually, I learned to eat again, and got off my feeding tube. I&amp;rsquo;ll never take eating for granted again. I&amp;rsquo;ll never take tubes for granted again either. Now that I&amp;rsquo;m out of the hospital, here&amp;rsquo;s what my dreams look like:&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pipes&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Only they mean something different now.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Endgame&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I recovered pretty rapidly, physically speaking. But it took months to really get back into gear mentally. Not until this spring did I feel like I was competent to write Apocalypse 12, the one about object-oriented Perl. All in all, I&amp;rsquo;d estimate that my little medical escapade set the Perl 6 design back six months or so. But Apocalypse 12 was the last big hurdle. With that, the design of Perl 6 can be said to be largely complete.&lt;/p&gt;

&lt;p&gt;We are now in the endgame, which is the name of this screensaver. Now that the Parrot engine is in such fine shape, it&amp;rsquo;s time to concentrate on writing a fine Perl 6 compiler to target it.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Anemone&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Open source projects start out small and grow over time. They send out tendrils in directions you don&amp;rsquo;t expect. Perl started as a text-processing language. Look, now it&amp;rsquo;s a system-administration language. And look over there, now it&amp;rsquo;s a web-programming language, too. Oh, wait, now it&amp;rsquo;s for genomics research.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll note sometimes the tendrils withdraw, like a squid&amp;rsquo;s tentacles. That&amp;rsquo;s just the natural process of deciding which things belong in the core. In squid terms, what to eat. Perl has eaten a number of things in the last 15 years. Some of them caused indigestion, but hey, that&amp;rsquo;s life.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice it&amp;rsquo;s cyclical. All successful open-source projects go through periods of expansion followed by periods of redesign and reintegration. It&amp;rsquo;s a natural cycle. You just have to try and not starve while you&amp;rsquo;re molting. Perl has been molting for a few years now. Or maybe it&amp;rsquo;s been more of a metamorphosis in a cocoon. Anyway, Perl 6 is going to start emerging this year. It&amp;rsquo;s going to be exciting.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Atlantis&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;You might say we&amp;rsquo;re going to have a whale of a time.&lt;/p&gt;

&lt;p&gt;The latest National Geographic has an article about squid who change their colors. Often they have reasons for changing, but sometimes I think they just change for the heck of it. A couple of years ago I was snorkeling in the Bahamas, and got to watch a school of cuttlefish swimming along. They weren&amp;rsquo;t hiding or courting or anything like that, but as they swam along they would all change color to brown, then yellow, then red, then green. It&amp;rsquo;s like, &amp;ldquo;Hey guys, wouldn&amp;rsquo;t it be cool if we all ran the same screensaver at the same time?&amp;rdquo; Sort of a cultural identity thing, I suppose.&lt;/p&gt;

&lt;p&gt;The interesting thing was that while I was watching, they forked. You know, like BSD. One group of cuttlefish went off one way, and the other group went off another. Maybe they had a personality conflict. Maybe they had a fight over licensing. I dunno. But the cool thing was that the moment they forked, they desynchronized their screensavers. This group wanted to stay green, while the other group wanted to go on and try out some purple. Who knows what goes on in the mind of a cuttlefish — it&amp;rsquo;s possible that they split specifically over the color issue. Wouldn&amp;rsquo;t be the first open-source project to split over the color of the bike shed.&lt;/p&gt;

&lt;p&gt;I predict that within 10 years, we&amp;rsquo;ll have clothing that runs screensavers, and what&amp;rsquo;s more, we&amp;rsquo;ll have gangs of people running around with synchronized displays to show that they &amp;ldquo;belong.&amp;rdquo; Schools will then outlaw gang screensavers, and impose uniform screensavers on their students. Someone will hack into your clothes processor just to get you into trouble with the teachers. Norton and McAfee will sell software to make sure your clothes keep saying what you want them to say, and not what someone else wants them to say. Or show&amp;hellip;&lt;/p&gt;

&lt;p&gt;Or maybe by then your shirt will be able to authenticate all the IPv6 addresses it communicates with. The hard part is going the other way — how are you going to authenticate your shirt to someone else? Are you going to bother to set up an unspoofable identity for every shirt in your closet?&lt;/p&gt;

&lt;p&gt;Of course, if your shirt is programmable, you really only need one of them. Or maybe you need two, for when the other one is in the wash. I suppose geeks can get away with owning a single programmable shirt. For some definition of &amp;ldquo;get away with.&amp;rdquo; Maybe it&amp;rsquo;s more like &amp;ldquo;get away &lt;em&gt;from&lt;/em&gt;,&amp;rdquo; as in &amp;ldquo;get away from me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Molecule (sucrose)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Anyway, that&amp;rsquo;s another talk. In fact, it&amp;rsquo;s a talk I already gave five years ago. Some of you will recognize this screensaver. It wasn&amp;rsquo;t a screensaver yet when I gave my third State of the Onion talk, but now it is. That&amp;rsquo;s progress. Cool. But watch out for those pheromones. And if you&amp;rsquo;re on a low-carb diet, don&amp;rsquo;t even think about looking at this picture of sugar.&lt;/p&gt;

&lt;p&gt;Well, enough about chemistry. I already talked about that once. If I start repeating myself, you&amp;rsquo;ll think I&amp;rsquo;m getting old. (I &lt;em&gt;am&lt;/em&gt; getting old, but I don&amp;rsquo;t want you to think it.) Anyway, you want to hear something fresh. Fresher than a geek&amp;rsquo;s T-shirt, anyway.&lt;/p&gt;

&lt;p&gt;In any event, the real geeks will probably just have the screen tattooed on their chest. Or their stomachs. Teletubbies &amp;ldquo;R&amp;rdquo; us.&lt;/p&gt;

&lt;p&gt;Anyway, back to freshness.&lt;/p&gt;

&lt;p&gt;Now, there&amp;rsquo;s two ways one can go about keeping a fresh outlook on life. One way that works, or at least works for some people, is to suddenly change course in midstream. Call it the worms approach.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Shadebobs&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;The problem with worms is that they don&amp;rsquo;t learn much from history. The only history they remember is where they just were, which is where they don&amp;rsquo;t want to be now. I&amp;rsquo;ve known some people like that.&lt;/p&gt;

&lt;p&gt;The other approach to keeping fresh it to not be quite so, um, random. In other words, learn a little more from history. You can do that either by depth or by breadth. In any case you&amp;rsquo;re keeping more history state around than just a single position.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Demon, slow&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Software projects have history, and state. Here you see various software projects feeding on the disorder around them. I&amp;rsquo;d like to think some of them are open-source projects, but doubtless some of the more aggressive ones are closed source.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Demon, fast&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Over the long term, this is also a view of how dominant species tend to wipe out their smaller competitors. This is also, unfortunately, a picture of where the business world is heading these days. At the rate we&amp;rsquo;re going, we&amp;rsquo;ll end up with just a few large corporate players because right now we have the best government big business can buy. You can see just a few little holdouts that survive in tiny ecological niches only because they&amp;rsquo;re parasitic on the large beasts.&lt;/p&gt;

&lt;p&gt;Notice also that nearly all the original information has been destroyed in the name of progress. Archeologists will have to study the leftover crumbs, as they always have. Necessarily, they will over-generalize, just as historians always over-generalize. That&amp;rsquo;s all you can do when too much has been forgotten. Of course, I&amp;rsquo;m over-generalizing about history here. But screensavers that forget things make me sad.&lt;/p&gt;

&lt;p&gt;Speaking of history, I recently got to see Tom Stoppard&amp;rsquo;s play, &lt;em&gt;Arcadia&lt;/em&gt;. I should say, I got to see it &lt;em&gt;again&lt;/em&gt;. Every time around, I get something a little different from it. It&amp;rsquo;s an iterated algorithm.&lt;/p&gt;

&lt;p&gt;For another example, take Perl. Paul Graham has opined (Hi, Paul) that there are a lot of spectacularly original ideas in Perl, but I&amp;rsquo;d like to correct that impression. There are indeed a few original ideas in Perl, but most of the ideas were stolen. Perl has learned a spectacular number of things from history. Paul was right about one thing, though — some of the things Perl learned from history were spectacularly &lt;em&gt;wrong&lt;/em&gt;. That&amp;rsquo;s not to say that some of my original ideas weren&amp;rsquo;t also spectacularly wrong. But hey, that&amp;rsquo;s what iterated algorithms are for. &amp;ldquo;Release early, release often&amp;rdquo; is the old phrase. The new catchphrase seems to be &amp;ldquo;Learning in Public.&amp;rdquo; Same sort of thing.&lt;/p&gt;

&lt;p&gt;[At this point I skipped to the final section for lack of time, but you can see the rest of my padding material here.]&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Triangle&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;This makes some pretty good-looking mountains. It cheats, of course, compared to how Mother Nature does it. This sort of algorithm doesn&amp;rsquo;t simulate plate tectonics or erosion, so you&amp;rsquo;re not going to get good mountain ranges or river valleys out of it. But our computers are still far too slow to do adequate simulation of all of physics, so we live in an era where &amp;ldquo;as good as we can do&amp;rdquo; has to be &amp;ldquo;good enough.&amp;rdquo; The brute-force approach would often take too long, so our algorithms tend to cheat all over the place. In the case of a fractal landscape like this, that can actually be a psychological advantage, insofar as the artificial landscape comes out with a slightly alien feel, which people seem to like, in moderation.&lt;/p&gt;

&lt;p&gt;The problem with exploring oversimplifications, however, is that they&amp;rsquo;re not actually as interesting as real life over the long haul. At least, not individually. Maybe there are enough oversimplifications to explore that they emulate the richness of reality merely by being sufficiently different from each other. Certainly all the books ever written don&amp;rsquo;t add up to the complexity of the universe, since obviously they&amp;rsquo;re a part of it. And yet through the power of imagination, an individual book can give us the impression of worlds beyond our own.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure how this relates to Perl, except to say that Perl has always been about being &amp;ldquo;good enough&amp;rdquo; rather than &amp;ldquo;perfect.&amp;rdquo; Good enough is often a lot more interesting than perfect. It&amp;rsquo;s almost as if the imperfections that keep &amp;ldquo;good enough&amp;rdquo; from being &amp;ldquo;perfect&amp;rdquo; are the very features that make things interesting, because there are a lot more ways for things to go wrong than for them to go right. Even if it&amp;rsquo;s just a little wrong. A lot of these screensavers are a little bit wrong. But they&amp;rsquo;re interestingly wrong.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Circuit&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t gonna show this one, but last Wednesday I was suddenly in the state that it looked like I wasn&amp;rsquo;t going to be able to show any of these screensavers. Namely, my laptop completely crapped out. It was too late to send it in for repair and have any hope of getting it back again in time. I didn&amp;rsquo;t have the money to buy a new laptop, nor the time to install Fedora Core 2 on one if I had bought one. I couldn&amp;rsquo;t guarantee that I could find a laptop to borrow that would have Fedora Core 2 on it, at least, not in time to make sure I got these screensavers all lined up in a row. Fortunately, I was pretty sure I knew what was wrong with my laptop, since the power light had been flickering when I wiggled the cord.&lt;/p&gt;

&lt;p&gt;So on Thursday I spent all day dismantling my laptop to get at the motherboard. I don&amp;rsquo;t know why they make it so you have to remove everything else before you can remove the motherboard, but that&amp;rsquo;s basically what you have to do. Then I went down to Fry&amp;rsquo;s and bought the teeny-tiniest little soldering iron they sell. I went back home, and I got that motherboard out and I soldered it with the complete expectation that I was probably ruining the motherboard completely. I put it back together again, and only had two extra screws when I was done. I still don&amp;rsquo;t know what they belong to. But it doesn&amp;rsquo;t matter. &amp;lsquo;Cause I booted that sucker up, and it worked. And that&amp;rsquo;s the laptop I&amp;rsquo;m showing you these screensavers on. How many of you have ever tried to solder your motherboard? OK, keep your hands up if the motherboard still worked afterwards. You guys know how I feel right now.&lt;/p&gt;

&lt;p&gt;Of course, the joke&amp;rsquo;s kind of on me. It broke again just before I left, and I had to resolder it again last night&amp;hellip; I have a great deal of empathy for my computer, having to undergo two surgeries like that&amp;hellip;&lt;/p&gt;

&lt;p&gt;Many screensavers are based on bouncing balls.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Pong&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Pong, a classic. The first version didn&amp;rsquo;t even use a computer.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;BouncingCow&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m waiting for the version that does a bouncing camel.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Boxed&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Multiple bouncing balls in a box are a metaphor for community. Notice how the escaping balls explode. This is what happens to people who move from Perl to Ruby.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Attraction, balls&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Attraction and repulsion. Some people find Perl attractive at a distance and repulsive up-close. Others have just the opposite reaction.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Eruption&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;With small enough balls, you start getting into particle simulations, which are good for flame-like effects. But if you look closely here, you can actually see the little balls bouncing when they hit the ground.&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;Euler2d&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;Communities are defined by their centers, and often have a fractal quality about them. The people circulating further in are more involved than the people farther out. The insiders say things like, &amp;ldquo;We need to make Perl 6 the best language for most common tasks.&amp;rdquo; The people further out do not feel absolutely bound to one community or another. They say things like, &amp;ldquo;Use whatever language is appropriate for the task at hand.&amp;rdquo; The outer people are more likely to drift from one community to another. That&amp;rsquo;s OK. In fact, it&amp;rsquo;s healthy.&lt;/p&gt;

&lt;p&gt;When it gets unhealthy is when you start drawing boundaries between communities, and you start being exclusive. Or worse, mandatorily inclusive. Then you start building things like the Berlin wall to keep people inside your community. In anthropological terms, that&amp;rsquo;s tribalism. A tribal Perl programmer might say, &amp;ldquo;If you leave the Perl tribe to go and join the Python tribe, we will hunt you down, cook you, and eat you.&amp;rdquo; Or if you join the Ruby tribe, you will explode. By and large, I am not in favor of tribalism.&lt;/p&gt;

&lt;p&gt;Except for my tribe, of course.&lt;/p&gt;

&lt;p&gt;[Here&amp;rsquo;s the ending I skipped to.]&lt;/p&gt;

&lt;p&gt;[&lt;code&gt;VidWhacker (camels)&lt;/code&gt;]&lt;/p&gt;

&lt;p&gt;I could go on and on. There are over 200 screensavers that come with X windows these days. We haven&amp;rsquo;t begun to talk about some of the fancier ones that you can download that do useful work, like searching for extraterrestrial intelligence, or finding new cancer drugs. But the ones I&amp;rsquo;ve talked about today are the once I notice in my kitchen when I walk past my Linux box. I notice them, and I think about them, and I think about what they mean. So I hope you&amp;rsquo;re starting to get an appreciation for them.&lt;/p&gt;

&lt;p&gt;But I don&amp;rsquo;t think I&amp;rsquo;ve really adequately conveyed yet why I wanted to show you these screensavers. Last night, when I tried to explain all this to my family, I suddenly found myself getting rather teary-eyed about it all. It&amp;rsquo;s not so much the fact that the individual screensavers are so interesting. It&amp;rsquo;s really about how they relate to each other, and to the world.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of talk lately about 100-year languages and the like, and while it&amp;rsquo;s fun to speculate on the nature of such long-term enterprises, the history of futurology warns us that the only sure prediction is that all predictions are sure to be inaccurate. The things that are relatively predictable are not fashionable. They&amp;rsquo;re small, but universal. Like screensavers. I predict we&amp;rsquo;ll have screensavers in a 100 years, even if we don&amp;rsquo;t have screens any more, and all our brains take their inputs via neural implants. And those future screensavers will relate to each other just the same way as our screensavers, even if they are different screensavers.&lt;/p&gt;

&lt;p&gt;Think about this little program called &lt;code&gt;xscreensaver-demo&lt;/code&gt; that I&amp;rsquo;ve been using to show you these screensavers. Within this program, all screensavers are considered equal. It&amp;rsquo;s like in a hospital where all the nurses on your floor are considered to be more or less interchangeable. And indeed, they purposefully mix things around so you get different nurses each day. But when they do that, you discover that, in fact, all the nurses are different. All the doctors are different. And they&amp;rsquo;re all wonderful in their own way. Likewise, every screensaver is different, and you can relate to them in different ways.&lt;/p&gt;

&lt;p&gt;They are so equal, yet so unequal at the same time. And last night I realized that this was what was important about Perl, and about the Perl community. Not a fancy grammar, or fast engine, or clever optimizer. Those things are all nice, but the heart of Perl the language is all those modules that fit into Perl like interchangeable screensavers, and yet are all so different from each other. And the people who write those modules, and grammars, and engines — they&amp;rsquo;re all equal in the eyes of the Perl community, and yet all so different.&lt;/p&gt;

&lt;p&gt;So it was really only last night that I figured out why I had to talk about screensavers tonight. And that reason is you. You&amp;rsquo;re my little flock of screensavers. You&amp;rsquo;re my nurses and my doctors and my patients. You&amp;rsquo;ve performed multiple surgeries on my soul, and let me perform surgeries on your souls. We&amp;rsquo;re a hospital of people helping each other, performing random acts of beauty for each other, even when no one is watching but God.&lt;/p&gt;

&lt;p&gt;These days I may be missing the bottom of my stomach, but I still have the bottom of my heart. So I would like to thank you from the bottom of my heart for being precisely who you are.&lt;/p&gt;

&lt;p&gt;Thank you. Thank you. Thank you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State of the Onion 2003</title>
      <link>http://localhost:1313/pub/2003/07/16/soto2003.html/</link>
      <pubDate>Wed, 16 Jul 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/07/16/soto2003.html/</guid>
      <description>&lt;p&gt;This is the 7th annual State of the Perl Onion speech, wherein I tell you how Perl is doing. Perl is doing fine, thank you. Now that that&amp;rsquo;s out of the way, I&amp;rsquo;d like to spend the rest of the time telling jokes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide1.jpg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In fact, the conference organizers have noticed that I spend most of the time telling jokes. So each year they give me a little less time, so I have to chop out more of the serious subject matter so as to leave time for the jokes.&lt;/p&gt;

&lt;p&gt;Extrapolating several years into the future, they&amp;rsquo;ll eventually chop my time down to ten seconds. I&amp;rsquo;ll have just enough time to say: &amp;ldquo;I&amp;rsquo;m really, really excited about what is happening with Perl this year. And I&amp;rsquo;d like to announce that, after lengthy negotiations, Guido and I have finally decided&amp;hellip; &amp;lt;gong&amp;gt; [&amp;ldquo;Time&amp;rsquo;s up. Next speaker please&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;Well, you didn&amp;rsquo;t really want to know that anyway&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since this is a State of the Union speech, or State of the Onion, in the particular case of Perl, I&amp;rsquo;m supposed to tell you what Perl&amp;rsquo;s current state is. But I already told you that the current state of Perl is just fine. Or at least as fine as it ever was. Maybe a little better.&lt;/p&gt;

&lt;p&gt;But what you really want to know about is the future state of Perl. That&amp;rsquo;s nice. I don&amp;rsquo;t know much about the future of Perl. Nobody does. That&amp;rsquo;s part of the design of Perl 6. Since we&amp;rsquo;re designing it to be a mutable language, it will probably mutate. If I did know the future of Perl, and if I told you, you&amp;rsquo;d probably run away screaming.&lt;/p&gt;

&lt;p&gt;As I was meditating on this subject, thinking about how I don&amp;rsquo;t know the future of Perl, and how you probably don&amp;rsquo;t &lt;em&gt;want&lt;/em&gt; to know it anyway, I was reminded of a saying that I first saw posted in the 1960&amp;rsquo;s. You may feel like this on some days.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We the unwilling,
led by the unknowing,
are doing the impossible
for the ungrateful.
We have done so much for so long with so little
We are now qualified to do anything with nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide2.jpg&#34; alt=&#34;blue collar&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I think of it as the Blue-Collar Worker&amp;rsquo;s Creed.&lt;/p&gt;

&lt;p&gt;This has been attributed to various people, none of whom are Ben Franklin, Abraham Lincoln, or Mark Twain. My favorite attribution is to Mother Teresa. She may well have quoted it, but I don&amp;rsquo;t think she coined it, because I don&amp;rsquo;t think Mother Teresa thought of herself as &amp;ldquo;unwilling&amp;rdquo;. After all, Mother Teresa got a Nobel prize for being one of the most willing people on the face of the earth.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also been attributed to the Marines in Vietnam, and it certainly fits a little better. But since I grew up in a Navy town, I&amp;rsquo;d like to think it was invented by a civilian shipyard worker working for the Navy. In any event, I first saw it posted in a work area at Puget Sound Naval Shipyard back in the 1960&amp;rsquo;s. Now, you may well wondering what I was doing in a Naval Shipyard in the 1960&amp;rsquo;s. That&amp;rsquo;s a secret.&lt;/p&gt;

&lt;p&gt;Anyway, you may also be wondering why I brought it up at all. Well, last year I used the table of contents from an issue of Scientific American as my outline. This year I&amp;rsquo;d like to use this as my outline.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to, but I won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;But if I did, here&amp;rsquo;s what I&amp;rsquo;d say.&lt;/p&gt;

&lt;p&gt;From the postmodern point of view, this is a text that needs to be deconstructed. It was obviously written by someone in a position of power pretending not to be. And by making light of the plight of blue collar workers, and allowing the oppressed workers to post this copy-machine meme in the workplace, this white-collar wolf in blue-collar sheep&amp;rsquo;s clothing has managed to persuade the oppressed workers that being powerless is something to be proud of.&lt;/p&gt;

&lt;p&gt;Now, some of you young folks are too steeped in postmodernism to know anything about postmodernism, so let&amp;rsquo;s review. Postmodernism in its most vicious form started out with the notion that there exist various cultural constructs, or texts, or memes, that allow some human beings to oppress other human beings. Of course, in Soviet Russia it&amp;rsquo;s the other way around. Which is why they managed to deconstruct themselves, I guess.&lt;/p&gt;

&lt;p&gt;Anyway, deconstructionism is all about throwing out the bad cultural memes, where &amp;ldquo;bad&amp;rdquo; is defined as anything an oppressed person doesn&amp;rsquo;t like. Which is fine as far as it goes, but the spanner in the works is that you can only be an oppressed person if the deconstructionists say you are. Dead white males need not apply. Fortunately, I&amp;rsquo;m not dead yet. Though I&amp;rsquo;m trying. As some of you know, several weeks ago I was in the hospital with a bleeding ulcer. I guess I&amp;rsquo;m a little like Soviet Russia. I oppress myself, so I deconstruct myself.&lt;/p&gt;

&lt;p&gt;Oh, by the way, I got better. In case you hadn&amp;rsquo;t noticed.&lt;/p&gt;

&lt;p&gt;Though I&amp;rsquo;m not allowed to drink anything brown anymore. Sigh. That&amp;rsquo;s why this speech is so boring — I wrote it under the non-influence.&lt;/p&gt;

&lt;p&gt;But back to postmodernism. Postmodern critics have invented a notation for using a word and denying its customary meaning at the same time, since most customary meanings are oppressive to someone or other, and if not, they ought to be. Or something like that.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m going to borrow that notation for my own oppressive purposes, and strike out a few of these words that don&amp;rsquo;t mean exactly what I want them to mean. I hope that doesn&amp;rsquo;t make me a postmodern critic. Or maybe it does. As Humpty Dumpty said, the question is who&amp;rsquo;s to be master, that&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start by striking out &amp;ldquo;unwilling&amp;rdquo;, because there are quite a few willing people around here. Or at least willful.&lt;/p&gt;

&lt;p&gt;And let&amp;rsquo;s strike out &amp;ldquo;unknowing&amp;rdquo; too, because you wouldn&amp;rsquo;t be sitting here listening to us leaders here tonight if you thought we didn&amp;rsquo;t know anything. On the other hand, maybe you just came for the jokes&amp;hellip;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s strike out the &amp;ldquo;impossible&amp;rdquo;. Actually, I hesitate to strike that one out, because what we&amp;rsquo;re trying to do with Perl is to be all things to all people, and in the long run that is completely impossible, technically, socially, and theologically speaking.&lt;/p&gt;

&lt;p&gt;But that doesn&amp;rsquo;t stop us from trying. And who knows, maybe more of it is possible than we imagine.&lt;/p&gt;

&lt;p&gt;We definitely have to strike out ungrateful, because we know many people are grateful. Nevertheless, a number of people find it impossible to be grateful, and we should be working to please them as well. Love your enemies, and all that. Another impossible task. Or&amp;hellip; perhaps the same one.&lt;/p&gt;

&lt;p&gt;I like to please people who did not expect to be pleased. One day when I was a lot younger than I am now, I performed a piece on my violin. A lady came up to me afterward and said, &amp;ldquo;You know, I don&amp;rsquo;t like the violin. But I liked that.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I treasure that sort of compliment, just as I treasure the email messages that say, &amp;ldquo;I had given up on computer programming because it wasn&amp;rsquo;t any fun, and then I discovered Perl.&amp;rdquo; That&amp;rsquo;s what I mean when I say we should work to please the people who don&amp;rsquo;t expect to be grateful.&lt;/p&gt;

&lt;p&gt;Anyway, back to our Creed here. I can&amp;rsquo;t see anything wrong with the last two lines. In fact, they&amp;rsquo;re directly applicable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have done so much for so long with so little&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are now qualified to anything with nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s Perl 6. I suppose I need to strike that out too, since it doesn&amp;rsquo;t really exist yet, except in our heads.&lt;/p&gt;

&lt;p&gt;Well, maybe that&amp;rsquo;s not such a bad outline after all. Let&amp;rsquo;s talk a little more about those things.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide10.jpg&#34; alt=&#34;the unwilling&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling&lt;/p&gt;

&lt;p&gt;Here in the open source community, we&amp;rsquo;re willing to help out, but that&amp;rsquo;s because we&amp;rsquo;re &lt;em&gt;not&lt;/em&gt; willing to put up with the status quo. And that&amp;rsquo;s generally due to our inflated sense of Laziness, Impatience, and Hubris. But then a really funny thing happens. A number of us will get together and agree about something that needs doing because of our Laziness, Impatience, and Hubris, and then we&amp;rsquo;ll start working on that project with a great deal of industriousness, patience, and humility, which seem to be the very opposite qualities to those that motivated us in the first place.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried to figure out a rationale for that, but I&amp;rsquo;ve pretty much come to the conclusion that it&amp;rsquo;s not rational or reasonable. It&amp;rsquo;s just who we are. Here&amp;rsquo;s a favorite quotation of mine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The reasonable man adapts himself to the world; the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that all of us agree that this is true. We just can&amp;rsquo;t always agree on what to be unreasonable about. Of course, this was written by George Bernard Shaw, who had his own ideas of the most reasonable ways to be unreasonable. This is, after all, the guy who wrote Pygmalion, upon which the musical My Fair Lady was based, with dear old &amp;lsquo;Enry &amp;lsquo;Iggins and Eliza Dolit&amp;rsquo;le going at each other&amp;rsquo;s throats. And over linguistics of all things. Fancy that.&lt;/p&gt;

&lt;p&gt;The only problem with this quote is that it&amp;rsquo;s false. A lot of progress comes from unreasonable women.&lt;/p&gt;

&lt;p&gt;Well, okay, maybe Shaw meant &amp;ldquo;he or she&amp;rdquo; when he only said &amp;ldquo;he&amp;rdquo;. Still, if we&amp;rsquo;re going to please unreasonable people in the twenty-first century, maybe we need to rewrite it like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide11.jpg&#34; alt=&#34;strike out man and him&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On the other hand, some people are impossible to please. We should probably just strike out &amp;ldquo;George Bernard Shaw&amp;rdquo; since he&amp;rsquo;s a dead white male.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide13.jpg&#34; alt=&#34;unknowing&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s me all over. Which is what the bug said after he hit the windshield.&lt;/p&gt;

&lt;p&gt;Or as the bug&amp;rsquo;s friend said, &amp;ldquo;Bet you don&amp;rsquo;t have the guts to do that again.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Whether I have the guts to do Perl again is another question. My guts are still in sad shape at the moment, according to the doctor&amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, back to &amp;ldquo;me the unknowing&amp;rdquo;. I admit that there&amp;rsquo;s an awful lot that I don&amp;rsquo;t know. I&amp;rsquo;d love to tell you how much I don&amp;rsquo;t know, but I don&amp;rsquo;t know that either.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ll have to talk about what I know instead. If you are so inclined, you may infer that I am totally oblivious to anything I don&amp;rsquo;t talk about today.&lt;/p&gt;

&lt;p&gt;One thing I do know about is the universal architectural diagram. It looks like this.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t have to be chartreuse. How about pink, to match the fireworks up in the corner. I put the fireworks up in the corner there in case you missed the fireworks on the 4th of July.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide14.jpg&#34; alt=&#34;pink&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, this is the universal architectural diagram because you can represent almost any architecture with it, if you try hard enough. Here&amp;rsquo;s a common enough one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide15.jpg&#34; alt=&#34;CPU&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Here we have a bus that&amp;rsquo;s common across the other three components of our computer, the memory, the CPU, and the I/O system. Within the computer we have other entities such as strings, which you can view either as a whole or as a sequence of characters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide16.jpg&#34; alt=&#34;string&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
An integer is just like a string, only it&amp;rsquo;s a sequence of bits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide17.jpg&#34; alt=&#34;integer&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We can go from very small ideas like integers to very large ideas like government:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide18.jpg&#34; alt=&#34;government&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or even alternate forms of government.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide19.jpg&#34; alt=&#34;Borg&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The diagram is even more versatile because you can rotate it on its side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide20.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide21.jpg&#34; alt=&#34;right&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, for some reason, this particular orientation seems to engender the most patriotism. It might just be accidental, but if you color it like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide22.jpg&#34; alt=&#34;flag&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
people start thinking about saluting it. Kinda goes with the fireworks, I guess.&lt;/p&gt;

&lt;p&gt;A little more dangerous is this diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide23.jpg&#34; alt=&#34;object&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s amazing how many people will salute that one. And people will even go to war for this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide24.jpg&#34; alt=&#34;class&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But you know, the whole notion of objects like this is that there are ways in which you treat them as a single thing, and ways in which you treat them as multiple things. Every structured object is wrapped up in its own identity. That&amp;rsquo;s really what this little diagram is getting at.&lt;/p&gt;

&lt;p&gt;Well, let&amp;rsquo;s keep rotating it and see what we get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide26.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide27.jpg&#34; alt=&#34;God&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Okay, if you happen to be a Christian of the trinitarian persuasion like me, then you believe that God is a structured object that is simultaneously singular and plural depending on how you look at it. Of course, nobody ever fights about that sort of thing, right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide28.jpg&#34; alt=&#34;plain&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide29.jpg&#34; alt=&#34;left&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s kind of unusual to see the diagram in this orientation, probably due to linguistic considerations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide30.jpg&#34; alt=&#34;one out of many&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
But whether you say &amp;ldquo;one out of many&amp;rdquo; or &amp;ldquo;e pluribus unum&amp;rdquo;,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide31.jpg&#34; alt=&#34;pluribus&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
it means much the same thing. In a language that reads left to right, perhaps it&amp;rsquo;s more naturally suited to processes that lose information, such as certain kinds of logic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide32.jpg&#34; alt=&#34;or&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Again, we can go from the very small to the very large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide33.jpg&#34; alt=&#34;black hole&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
If you feed three random planets to a black hole, you also lose information. Or at least you hide it very well, depending on your theory of how black holes work.&lt;/p&gt;

&lt;p&gt;If you feed one of these diagrams to a black hole, it turns into a piece of spaghetti.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s not, and say we did.&lt;/p&gt;

&lt;p&gt;Oddly enough, what I&amp;rsquo;d really like to talk about today is Perl. If we look at our goal for the Parrot project, it looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide37.jpg&#34; alt=&#34;Borg Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Oops, wrong slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide38.jpg&#34; alt=&#34;Parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That is, Parrot is designed to be a single engine upon which we can run both Perl 5 and Perl 6. And&amp;hellip; stuff. Admittedly, this is a rather Perl-centric view of reality, to the extent you can call this reality.&lt;/p&gt;

&lt;p&gt;Well, okay, I&amp;rsquo;ll cheat and show you the other stuff we&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide39.jpg&#34; alt=&#34;detail&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We&amp;rsquo;d also like to support, for example, PHP, Ruby, Python, BASIC, Scheme, COBOL, Java, Befunge, TECO, Rebol, REXX, and&amp;hellip; I can&amp;rsquo;t quite make out that one on the bottom there. And if I could, I wouldn&amp;rsquo;t say it anyway, because there are children present, and I wouldn&amp;rsquo;t want to fuck up their brains.&lt;/p&gt;

&lt;p&gt;Okay, I admit this is not quite reality yet. I just put in all those languages because I&amp;rsquo;m a white male who is trying to oppress you before I&amp;rsquo;m quite dead. So I&amp;rsquo;d better strike out a few things that aren&amp;rsquo;t really there yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide40.jpg&#34; alt=&#34;strikes&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Could I interest you in a really fast BASIC interpreter?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide41.jpg&#34; alt=&#34;Parrot + BASIC&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Well, it&amp;rsquo;s time to move on to our next point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide42.jpg&#34; alt=&#34;impossible&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
&amp;gt; We the unwilling, led by the unknowing, are doing the impossible.&lt;/p&gt;

&lt;p&gt;Is what we&amp;rsquo;re doing really impossible? It&amp;rsquo;s possible. But we won&amp;rsquo;t know till we try. More precisely, till we finish trying. Sometimes things seem impossible to us, but maybe that&amp;rsquo;s just because we&amp;rsquo;re all slackers.&lt;/p&gt;

&lt;p&gt;And because we oversimplify.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take another look at the pink tennis court. I mean, the universal architectural diagram. It really isn&amp;rsquo;t quite as universal as I&amp;rsquo;ve made it out to be. First, let&amp;rsquo;s get rid of the pink.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Maybe I should give equal time to blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide44.jpg&#34; alt=&#34;blue&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Nah.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide43.jpg&#34; alt=&#34;black&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Anyway, as I was saying, this isn&amp;rsquo;t universal enough. Here&amp;rsquo;s the real universal diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide46.jpg&#34; alt=&#34;line widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
This is what&amp;rsquo;s known as an impossible object. I like it. I&amp;rsquo;m impossible object oriented. This particular impossible object is often called a widget. But you knew that already.&lt;/p&gt;

&lt;p&gt;What you might not have known is that, up till now, it&amp;rsquo;s been thought impossible to color such an object accurately. But as you can see,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide47.jpg&#34; alt=&#34;colorized&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
that is false. There are still some perceptual difficulties with it, but I&amp;rsquo;m sure &lt;em&gt;that&lt;/em&gt; problem is just a relic of our reptile brain. Or was it our bird brain. I forget. In any event, if you have trouble perceiving this object correctly, just use the universal clarification tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide48.jpg&#34; alt=&#34;cloud&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
I&amp;rsquo;ll assume you can supply your own cloud from now on.&lt;/p&gt;

&lt;p&gt;Should be easy here in Portland&amp;hellip; I&amp;rsquo;m allowed to make jokes about Portland because I grew up in the Pacific Northwet.&lt;/p&gt;

&lt;p&gt;As you can see, this more accurate universal architectural diagram can actually be rotated in 3-d with properly simulated lighting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide49.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide50.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide51.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide52.jpg&#34; alt=&#34;rotate&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s extensible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide53.jpg&#34; alt=&#34;6comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt; &lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide54.jpg&#34; alt=&#34;12comb&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Comb structures are important in a programming language. That&amp;rsquo;s why we&amp;rsquo;re adding a switch statement to Perl 6.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a more accurate representation of Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide55.jpg&#34; alt=&#34;parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
It&amp;rsquo;s also more sophisticated linguistically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide56.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Not only can it represent singular and plural concepts, but also the old Indo-European notion of dual objects.&lt;/p&gt;

&lt;p&gt;We still have vestiges of that in English.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide57.jpg&#34; alt=&#34;oxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
One ox, many oxes, two oxen yoked together pulling your plow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide58.jpg&#34; alt=&#34;regexen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Or one regex, many regexes, but two regexen working together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide59.jpg&#34; alt=&#34;Vaxen&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
You always wanted to know the proper name for a two-headed Vax?&lt;/p&gt;

&lt;p&gt;Everything is possible. You should be grateful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide60.jpg&#34; alt=&#34;ungrateful&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
On to the ungrateful undead.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s been a lot of carping lately about how slow Perl 6 development is going. Some of it comes from well intentioned folks, but some of it comes from our poison pen pals who live in the troll house. Still, I think a lot of the criticism shows a lack of understanding of the basic laws of development. These laws can be illustrated with this diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide61.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Basically, perfect development is impossible. Development can be fast, good, and cheap. Pick two.&lt;/p&gt;

&lt;p&gt;Actually, that&amp;rsquo;s unrealistic.&lt;/p&gt;

&lt;p&gt;Pick one.&lt;/p&gt;

&lt;p&gt;Which one would you pick? You want fast? You want cheap? No, I think you want this one.&lt;/p&gt;

&lt;p&gt;Good.&lt;/p&gt;

&lt;p&gt;Good design is neither fast nor cheap. Every time we crank out a new chunk of the design of Perl 6 or of Parrot, it&amp;rsquo;s a bit like writing a master&amp;rsquo;s thesis. It&amp;rsquo;s a lot of reading, and a lot of writing, and a lot of thinking, and a lot of email, and a lot of phone conferences. It&amp;rsquo;s really complicated and multidimensional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide62.jpg&#34; alt=&#34;escher&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
There&amp;rsquo;s a lot going on behind the scenes that you don&amp;rsquo;t hear about every day. Many people have sacrificed to give us time to work on these things. People have donated their own time and money to it. O&amp;rsquo;Reilly and Associates have donated phone conferences and other infrastructure. The Perl 6 design team in particular has borne a direct financial cost but also a tremendous opportunity cost in pursuing this at the expense of career and income. I&amp;rsquo;m not looking for sympathy, but I want you to know that I almost certainly could have landed a full-time job 20 months ago if I&amp;rsquo;d been willing to forget about Perl 6. I&amp;rsquo;m extremely grateful for the grants the Perl Foundation has been able to give toward the Perl 6 effort. But I just want you to know that it&amp;rsquo;s costing us more than that.&lt;/p&gt;

&lt;p&gt;But Perl 6 is all about freedom, and that&amp;rsquo;s why we&amp;rsquo;re willing to pledge our lives, our fortunes, and our sacred honor.&lt;/p&gt;

&lt;p&gt;Times are tough, and I&amp;rsquo;m not begging for more sacrifice from you good folks. I just want to give a little perspective, and fair warning that at some point soon I&amp;rsquo;m going to have to get a real job with real health insurance because I can&amp;rsquo;t live off my mortgage much longer. It&amp;rsquo;s bad for my ulcer, and it&amp;rsquo;s bad for my family.&lt;/p&gt;

&lt;p&gt;Fortunately, the basic design of Perl 6 is largely done, appearances to the contrary notwithstanding. Damian and I will be talking about that in the Perl 6 session later in the week.&lt;/p&gt;

&lt;p&gt;Well, enough ranting. I don&amp;rsquo;t want to sound ungrateful myself, because I&amp;rsquo;m not. In any event, the last three years have been extremely exciting, and I think the coming years will be just as interesting.&lt;/p&gt;

&lt;p&gt;In particular, I have a great announcement to make at the end of my talk about what&amp;rsquo;s going to be happening next. But let me explain a bit first what&amp;rsquo;s happened, again using our poor, abused widget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide63.jpg&#34; alt=&#34;implementations&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
In this case, time is flowing in the upward direction.&lt;/p&gt;

&lt;p&gt;Originally we just had one implementation of Perl, and the general perception as we started developing Perl 6 was that we were going to have two implementations of Perl.&lt;/p&gt;

&lt;p&gt;But in actual fact, we&amp;rsquo;re going to have at least three implementations of Perl.&lt;/p&gt;

&lt;p&gt;First, the good old Perl 5 that&amp;rsquo;s based on C, And on the right, the Perl 6 that&amp;rsquo;s based on Parrot. But there in the middle is a Perl5 that is also based on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide64.jpg&#34; alt=&#34;ellipses&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Note that the left two are the same language, while the right two share the same platform.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s that Perl 5 doing there in the middle? If you&amp;rsquo;ve been following Perl 6 development, you&amp;rsquo;ll know that from the very beginning we&amp;rsquo;ve said that there has to be a migration strategy, and that that strategy has two parts. First, we have to be able to translate Perl 5 to Perl 6. If that were all of it, we wouldn&amp;rsquo;t need the middle Perl there. But not only do people need to be able to translate from Perl 5 to Perl 6, it is absolutely crucial that they be allowed to do it piecemeal. You can&amp;rsquo;t translate a complicated set of modules all at once and expect them to work. Instead, we want people to be able to run some of their modules in Perl 5, and others in Perl 6, all under the same interpreter.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one good reason to have a Perl 5 compiler for Parrot. Another good reason is that we expect Perl 5 to run faster on Parrot, by and large.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide65.jpg&#34; alt=&#34;hands&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Yet another reason is that we have a little bootstrapping issue with the Perl 6 grammar. The Perl 6 grammar is defined in Perl 6 regexes. But those regexes are parsed with the Perl 6 grammar. Catch 22. The solution to this involves two things. First, a magical module of Damian&amp;rsquo;s that translates Perl 6 regexes back into Perl 5 regexes. Second, a Perl 5 regex interpreter to run those regexes. Now, it&amp;rsquo;d be possible to do it with old Perl 5, but it&amp;rsquo;ll be cleaner to run it with the new Perl 5 running on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide66.jpg&#34; alt=&#34;widget&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Now, it&amp;rsquo;s awfully cumbersome to keep saying &amp;ldquo;Perl 5 over Parrot&amp;rdquo; and such, so we need to do some namespace cleanup here. We can drop the &amp;ldquo;over Parrot&amp;rdquo; for Perl 6, because that&amp;rsquo;s redundant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide67.jpg&#34; alt=&#34;drop parrot&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Likewise, people always think of the original when we say &amp;ldquo;Perl 5&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide68.jpg&#34; alt=&#34;drop C&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
That means we need a code name for this thing in the middle. We&amp;rsquo;ve decided to call it &amp;ldquo;Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide69.jpg&#34; alt=&#34;Ponie&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
We have lots of reasons to call it that. To be sure, none of them are &lt;em&gt;good&lt;/em&gt; reasons, but I&amp;rsquo;m told it will make the London.pm&amp;rsquo;ers deliriously happy if I say, &amp;ldquo;I want a Ponie&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And I do want a Ponie. &amp;ldquo;I want the Ponie, I want the whole Ponie. I want it now.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide71.jpg&#34; alt=&#34;versions&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
The plan is to for Ponie version 5.10 to be a drop-in replacement for Perl 5.10. Eventually there will be a Ponie 5.12, and if Ponie is good enough, there may not be an old-fashioned 5.12. We&amp;rsquo;ll just stop with 5.10.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;re gonna start on Ponie right now. Since I&amp;rsquo;ve been carping about lack of resources, you might wonder how we&amp;rsquo;re gonna do this.&lt;/p&gt;

&lt;p&gt;Well, as it happens, a nice company called Fotango has a lot of Perl 5 code they want to run on Parrot, and they are clued enough to have authorized one of their employees, our very own Arthur Bergman, to spend company time porting Perl 5 to Parrot.&lt;/p&gt;

&lt;p&gt;Is that cool or what? I&amp;rsquo;m out of time, so read the press release. But I&amp;rsquo;m really excited by our vision for the future, and if you&amp;rsquo;re not excited, maybe you need to have your vision checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2003_07_16_soto2003/slide72.jpg&#34; alt=&#34;vision&#34; width=&#34;499&#34; height=&#34;375&#34; /&gt;
Thanks for listening, and I hope that from now on you&amp;rsquo;ll all be completely unreasonable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3rd State of the Onion</title>
      <link>http://localhost:1313/pub/1999/08/onion/talk1.html/</link>
      <pubDate>Mon, 30 Aug 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/08/onion/talk1.html/</guid>
      <description>&lt;p&gt;This talk was delivered by &lt;a href=&#34;http://www.wall.org/~larry&#34;&gt;Larry Wall&lt;/a&gt; on August 23, 1999 at the &lt;a href=&#34;http://conference.oreilly.com&#34;&gt;Perl Conference 3.0&lt;/a&gt; in Monterey, CA.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: most of the pictures this year were images of molecules that I animated using a program called &lt;a href=&#34;http://www.umass.edu/microbio/rasmol/&#34;&gt;RasMol&lt;/a&gt;, along with a &lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/pmol&#34;&gt;Perl script&lt;/a&gt; to drive it and make the molecules rotate. You probably don&amp;rsquo;t have RasMol on your computer, and if you do, you probably don&amp;rsquo;t have my script. So in the following I&amp;rsquo;ve substituted static images, but these link to the corresponding PDB files, which can be fed to RasMol (or my script, pmol) if you want to play with the images yourself. You can find many more PDB files on the net if you&amp;rsquo;re interested.)&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Two years ago, in my &lt;a href=&#34;http://localhost:1313/pub/1997/wall/keynote.html&#34;&gt;first&lt;/a&gt; State of the Onion speech, I used sounds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I play ``&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/absorbed.au&#34;&gt;You will be absorbed&lt;/a&gt;.&amp;rdquo;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, in my &lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html&#34;&gt;second&lt;/a&gt; State of the Onion speech, I used pictures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hap.gif&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hap2.gif&#34; alt=&#34;Happy face&#34; width=&#34;315&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those of you who heard or read that speech will recall that I threatened to use smellovision this year. So guess what.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I hold up an onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an onion. Allow me to cut it here in front of you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I cut the onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They laughed, they cried&amp;hellip;&lt;/p&gt;

&lt;p&gt;And just this last week, they &lt;a href=&#34;http://dailynews.yahoo.com/h/ap/19990816/pl/senate_fumes_1.html&#34;&gt;evacuated&lt;/a&gt; a federal building in Washington, D.C. because people were getting sick from some mysterious toxic fumes. Guess what sort of toxic fumes they turned out to be?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I wave the onion.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The active ingredient in onion, the one that makes you cry, is thought to be something called 1-propenyl sulfenic acid. In chemistry shorthand, that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CH3-CH=CH-SOH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be wondering what this has to do with programming. Other than the fact that reading other people&amp;rsquo;s code sometimes makes you want to cry.&lt;/p&gt;

&lt;p&gt;The point I would like to make today is that I think the Perl community has ``good chemistry&amp;rdquo;. We often talk about groups of people having ``good chemistry&amp;rdquo;. Especially when the group consists of two people who suddenly like each other very much.&lt;/p&gt;

&lt;p&gt;Unfortunately, what the phrase ``good chemistry&amp;rdquo; usually means is that we don&amp;rsquo;t understand what&amp;rsquo;s making the chemistry good. Chemistry is a mystery to most of us. It&amp;rsquo;s like saying ``It&amp;rsquo;s all Greek to me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one little problem with that saying. I can read Greek. I learned some classical Greek at &lt;a href=&#34;http://www.spu.edu&#34;&gt;Seattle Pacific University&lt;/a&gt; as part of my declared major, Natural and Artificial Languages. That was just an excuse to mix up linguistics and computer science. You probably know that already.&lt;/p&gt;

&lt;p&gt;What you may not know is that I started off college with a double major in Chemistry and Music. If I can&amp;rsquo;t say, ``It&amp;rsquo;s all Greek to me,&amp;rdquo; neither can I say, ``We have good chemistry.&amp;rdquo; At least, I can&amp;rsquo;t say it without wondering what it means. I have some ideas about what good chemistry is, and that&amp;rsquo;s what I&amp;rsquo;m going to talk about today.&lt;/p&gt;

&lt;p&gt;So to start, here&amp;rsquo;s one of our favorite molecules.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/caffeine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/caffeine.gif&#34; alt=&#34;Caffeine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is caffeine. Good chemistry in this case means keeping you awake through my talk.&lt;/p&gt;

&lt;p&gt;Actually, you should find this talk interesting if you&amp;rsquo;ve ever had anything to do with chemistry. And if you are lifeform that is not based on chemistry, I apologize in advance. Well hey, this&amp;rsquo;ll talk will probably get slashdotted, and who knows how many AI projects are reading slashdot these days?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also tempted to apologize for the fact that this talk is organized organically. But I won&amp;rsquo;t. It&amp;rsquo;s funny, but the way the English language is going, ``organized organically&amp;rdquo; is becoming an oxymoron. You wouldn&amp;rsquo;t think so, since the two words are based on the same root. But our world today has two opposing views on the goodness of hierarchy, and each of these words has fallen down on opposite sides of the fence. Modern life is organized, while postmodern life is merely organic.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m not here to talk about postmodernism. I &lt;a href=&#34;http://www.wall.org/~larry/pm.html&#34;&gt;tried&lt;/a&gt; to do that last spring, and afterwards I was thoroughly deconstructed by the deconstructionists for attempting to deconstruct deconstructionism. At least, that&amp;rsquo;s the construction I put on their construction of it. I was talking about postmodern culture, and they thought I was talking about postmodern literature. Not at all the same thing!&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m enough of a postmodern that if you tell me my talk is &lt;em&gt;organized&lt;/em&gt;, I&amp;rsquo;ll be insulted, but if you tell me my talk is &lt;em&gt;organic&lt;/em&gt;, I&amp;rsquo;ll be complimented.&lt;/p&gt;

&lt;p&gt;If you tell me my talk is &lt;em&gt;orgasmic&lt;/em&gt;, I won&amp;rsquo;t believe you.&lt;/p&gt;

&lt;p&gt;At least, not until I light this candle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I wave around an oversized votive candle.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I ordered this candle a couple of days ago over the Web from a company called &lt;a href=&#34;http://www.erox.com&#34;&gt;Realm Fragrances&lt;/a&gt;. They hold the patent on fragrances containing human pheromones. This candle purports to contain human pheromones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I light the candle.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Come on baby, light my fire&amp;hellip;&lt;/p&gt;

&lt;p&gt;If you didn&amp;rsquo;t think Perl was sexy before, you will now.&lt;/p&gt;

&lt;p&gt;(Whether you want to or not.)&lt;/p&gt;

&lt;p&gt;Better programming through chemistry&amp;hellip;&lt;/p&gt;

&lt;p&gt;Actually, I just read another &lt;a href=&#34;http://www.discover.com/sep_99/breakfollies.html&#34;&gt;news item&lt;/a&gt; a couple of weeks ago that said that some study had just shown that the recently discovered vomeronasal receptors in the human nose are, in fact, vestigial, and don&amp;rsquo;t have neurons to them in adults. Ah, well. Studies are a dime a dozen. If you try hard enough, you can even find studies that prove cigarette smoking is bad for you.&lt;/p&gt;

&lt;p&gt;Speaking of studies, a bright fellow by the name of &lt;a href=&#34;http://opensource.activestate.com/authors/tedshieh/index.html&#34;&gt;Ted Shieh&lt;/a&gt; has been &lt;a href=&#34;http://opensource.activestate.com/authors/tedshieh/software.html&#34;&gt;studying&lt;/a&gt; the demand for programmers of various kinds. He&amp;rsquo;s been analyzing the web site &lt;a href=&#34;http://www.dice.com&#34;&gt;www.dice.com&lt;/a&gt;, where corporate America advertises openings for high-tech jobs, about 132,000 as of today. This is what is known to pollsters as a large statistical sample.&lt;/p&gt;

&lt;p&gt;Of course, to a chemist it would be a very small statistical sample. Chemists aren&amp;rsquo;t impressed until you start using exponential notation. You know, Avocado&amp;rsquo;s number, and all that.&lt;/p&gt;

&lt;p&gt;Anyway, here&amp;rsquo;s a chart that Ted came up with. It charts the number of job listings on dice.com that mention any of the top programming languages. The chart shows growth over the last six months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/gch.gif&#34; alt=&#34;job listings on dice.com&#34; width=&#34;918&#34; height=&#34;621&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl is the yellow line.&lt;/p&gt;

&lt;p&gt;Allow me to point out this spot in April when Perl passed up COBOL.&lt;/p&gt;

&lt;p&gt;Of course, passing up COBOL is no big deal these days, since demand for COBOL seems to be trailing off, for some strange reason.&lt;/p&gt;

&lt;p&gt;Perhaps more to the point, notice this spot in July when Perl passed up Visual Basic.&lt;/p&gt;

&lt;p&gt;Finally, notice this spot way down in the corner, where Python finally got off the baseline. A little.&lt;/p&gt;

&lt;p&gt;In the race to the millennium, it looks like C++ will win, Java will place, and Perl will show. Some of you no doubt will wish we could erase those top two lines, but I don&amp;rsquo;t think you should be unduly concerned. Note that both C++ and Java are systems programming languages. They&amp;rsquo;re the two sports cars out in front of the race. Meanwhile, Perl is the fastest SUV, coming up in front of all the other SUVs. It&amp;rsquo;s the best in its class.&lt;/p&gt;

&lt;p&gt;Of course, we all know Perl is in a class of its own.&lt;/p&gt;

&lt;p&gt;Our real competitor according to this chart is JavaScript. They&amp;rsquo;re coming along strong in fourth place. That&amp;rsquo;s not terribly surprising, considering that JavaScript has taken over a lot of the role in the browser that everyone originally thought Java was going to fill by itself.&lt;/p&gt;

&lt;p&gt;This chart actually lies a little, since it&amp;rsquo;s not scaled by the number of jobs listed on dice.com. And that number has been doubling once every year or so. So all these lines are a little too optimistic.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another chart from Ted that corrects for that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pct.gif&#34; alt=&#34;correction on jobs listed on dice.com&#34; width=&#34;931&#34; height=&#34;601&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this chart, all the languages add up to 100%, so we can see what the relative demand has been over the last six months.&lt;/p&gt;

&lt;p&gt;See the pinkish band at the top. Imminent death of COBOL predicted.&lt;/p&gt;

&lt;p&gt;Look at these bottom two bands. Of course, we don&amp;rsquo;t want to be fooled by the fact that they&amp;rsquo;re next to each other, but I do think that Java is growing primarily at the expense of C++. And maybe COBOL.&lt;/p&gt;

&lt;p&gt;Meanwhile, both Perl and JavaScript are chewing into Visual Basic, and maybe COBOL. Nobody else on the screen is doing any chewing. The thin blue band at the top is Smalltalk. If you look really closely at the black line above that, it gets a little thicker in spots. That&amp;rsquo;s Python.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another way in which these charts might be lying. They don&amp;rsquo;t tell us how many jobs there actually are out there.&lt;/p&gt;

&lt;p&gt;Perhaps there&amp;rsquo;s no demand for Python programmers simply because Python programmers are really easy to find without using dice.com.&lt;/p&gt;

&lt;p&gt;Some of you look dubious.&lt;/p&gt;

&lt;p&gt;On the other hand, maybe the demand for Java programmers is driven entirely by hype, and there are in reality no Java programmers out there.&lt;/p&gt;

&lt;p&gt;Well hey, maybe that&amp;rsquo;s why they cancelled JavaOS last week.&lt;/p&gt;

&lt;p&gt;I really do have a hard time believing that COBOL is dying. Maybe the demand is going down for COBOL programmers because there are billions of COBOL programmers beating down the doors of businesses looking for jobs. Maybe the demand was artificially high because of Y2K fixups. I dunno. Maybe someone did a study that proves COBOL is bad for your health.&lt;/p&gt;

&lt;p&gt;Well, enough disclaimers. As long as the demand for Perl keeps going up, we&amp;rsquo;re doing something right. You can call it buzz or you can call it brownian motion, but let&amp;rsquo;s keep doing the good chemistry.&lt;/p&gt;

&lt;p&gt;So, all right, what &lt;em&gt;is&lt;/em&gt; good chemistry. First of all, good chemistry is a little bit messy. Good chemistry is not the same as perfect chemistry. If you want perfect chemistry, here&amp;rsquo;s an example.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/diamond.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/diamond.gif&#34; alt=&#34;Diamond&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a bit of diamond crystal. Diamonds may be a girl&amp;rsquo;s best friend (next to pheromone candles), but they&amp;rsquo;re actually rather boring. Crystals are pretty, but they just kind of sit there, not doing much of anything.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/prl.gif&#34; alt=&#34;Pearls&#34; width=&#34;325&#34; height=&#34;281&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pearls are much more interesting. They&amp;rsquo;re produced by living oysters, after all. They consist of alternating layers of calcium carbonate crystals and an organic binder known as conchiolin. (I suppose it must have something to do with conches.) These alternating layers are what make the pearl irridescent. Calcium carbonate is, of course, a compound of calcium, carbon, and oxygen. Conchiolin is a mixture of various proteins and polysaccharides, rather like your fingernails.&lt;/p&gt;

&lt;p&gt;In other words, pearls are complicated, and a little bit messy.&lt;/p&gt;

&lt;p&gt;I think good chemistry is complicated, and a little bit messy. I suppose one of the reasons I think that is because, when I was young, I had a chemistry set.&lt;/p&gt;

&lt;p&gt;Back in those days, men were men, boys were boys, and chemistry sets were Chemistry Sets. Chemistry sets had real test tubes, and a real alcohol burner, and real chemicals. Dangerous chemicals. The bottles had warnings like, ``Eat thou not of this. If thou eatest of this, thou shalt surely die.&amp;rdquo; Or something like that.&lt;/p&gt;

&lt;p&gt;Sure, you could do all the fun experiments turning things red or blue or clear again, but you could also do the things that really matter to a junior high boy. You could make things that stink. You could make things that explode.&lt;/p&gt;

&lt;p&gt;Of course, they didn&amp;rsquo;t give you everything you needed for that in the chemistry set. You were expected to go down to the drug store and buy your own potassium nitrate, otherwise known as saltpeter. Saltpeter is cool stuff, for a junior high boy.&lt;/p&gt;

&lt;p&gt;One day I mixed some saltpeter with sulfur and sugar. You&amp;rsquo;re all familiar with sugar at the macroscopic level. Here&amp;rsquo;s a picture of a sucrose molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/sucrose.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/sucrose.gif&#34; alt=&#34;Sucrose&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nowadays it seems sort of a shame to use such a pretty, not to mention tasty, molecule merely for fuel, but that&amp;rsquo;s what I did. I discovered a couple of things. First, I discovered that this mixture makes an excellent stink bomb. As you can see here, the sugar molecule has lots of hydrogens. When you burn the mixture, apparently the sugar donates hydrogen and the sulfur donates, well, sulfur, producing hydrogen sulfide in copious quantities.&lt;/p&gt;

&lt;p&gt;I also discovered that I should not light off stink bombs in the basement. Besides smelling like rotten eggs, hydrogen sulfide is rather poisonous in large quantities. Guess who had just manufactured large quantities of it. In the basement. Fortunately, no one else was home at the time, and I had the house aired out by the time anyone came home. But I didn&amp;rsquo;t know that, so all morning, the door to the basement had a sign that said, ``If thou goest down here, thou shalt surely die.&amp;rdquo; Or something like that.&lt;/p&gt;

&lt;p&gt;Maybe someday I&amp;rsquo;ll talk about the rockets. Rocket science is messy too.&lt;/p&gt;

&lt;p&gt;By the way, I&amp;rsquo;m showing you this molecule courtesy of a program called ``RasMol&amp;rdquo;. No, it&amp;rsquo;s not written in Perl. It&amp;rsquo;s written in C. Sorry.&lt;/p&gt;

&lt;p&gt;Believe it or not, there really are a few good programs out there written in C. You know, &lt;em&gt;rn&lt;/em&gt;&amp;hellip; &lt;em&gt;patch&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Maybe &lt;em&gt;perl&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;But in my defense, allow me to point out that I&amp;rsquo;m running the animation by piping commands to RasMol from a Perl script. And that&amp;rsquo;s as it should be. We don&amp;rsquo;t have to do everything with Perl. We just have to be in control.&lt;/p&gt;

&lt;p&gt;Actually, I&amp;rsquo;m not a control freak. I think I&amp;rsquo;m more of a chaos freak.&lt;/p&gt;

&lt;p&gt;Well, okay, I&amp;rsquo;m really a controlled chaos freak. Here&amp;rsquo;s some &lt;a href=&#34;http://dir.yahoo.com/Entertainment/Comics_and_Animation/Characters/Wallace_and_Gromit&#34;&gt;Wallace and Gromit&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I play ``&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/WG_control.au&#34;&gt;Everything seems to be under control!&lt;/a&gt;&amp;ldquo;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seriously, Perl doesn&amp;rsquo;t have to be in control. It just likes to be in the middle. Kind of like those carbon atoms there in sucrose. Or here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cynac.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cynac.gif&#34; alt=&#34;polycyanoacrylate&#34; width=&#34;568&#34; height=&#34;264&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a strand of polycyanoacrylate, more commonly known as superglue. In the middle of things is where a glue language belongs. The world will always have interstices, and we&amp;rsquo;ll always be needing to put glue into them upon occasion. We&amp;rsquo;re in the business of developing better glue molecules. So don&amp;rsquo;t fret yourselves about whether Perl is doing better or worse than some other language in the job market. We&amp;rsquo;re not in that kind of a race.&lt;/p&gt;

&lt;p&gt;We do not define Perl as an improved version of some other language. Nor do we have to define Perl as the next universal language. We&amp;rsquo;re not trying to make Perl a better language than C++, or Python, or Java, or JavaScript. We&amp;rsquo;re trying to make Perl a better language than Perl. That&amp;rsquo;s all.&lt;/p&gt;

&lt;p&gt;So, what do you want in a glue language?&lt;/p&gt;

&lt;p&gt;Well, you have to have the basics, of course. The BASIC programming language was called BASIC for a reason, after all. This superglue molecule shows us a nice bit of linear programming along the backbone. It&amp;rsquo;s a bit obscured by all the cyanide groups. I find it a bit odd that surgeons use superglue because it&amp;rsquo;s non-toxic. Hydrogen cyanide is what they use in the gas chamber in California. Go figure.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simpler example of linear programming, without all the cyanide on the side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/decane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/decane.gif&#34; alt=&#34;decane&#34; width=&#34;560&#34; height=&#34;295&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is decane, a simple linear hydrocarbon. We don&amp;rsquo;t use it for glue. I am undoubtedly burning some decane in my candle here, since parafin is largely made up of long linear alkanes. If we chop this molecule in half, we get a shorter script. Er, program. Er, molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/pentane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pentane.gif&#34; alt=&#34;pentane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a simple molecule of pentane. We don&amp;rsquo;t use it for glue, either. Mostly we burn it up, because pentane is a basic ingredient of gasoline. But certainly not the only ingredient. You&amp;rsquo;d never want to burn 100% pentane in your car. 100% pentane is the very definition of 0 octane gas. To get 100 octane gas, we have to add a branching capability to our language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/hexamethylethane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/hexamethylethane.gif&#34; alt=&#34;hexamethylethane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This molecule defines the standard for 100 octane gas. Not suprisingly, it&amp;rsquo;s called octane, or at least one variety thereof. It&amp;rsquo;s official name is 2,2,3,3-tetramethyl butane, which is a really stupid name, because the methyl groups added onto the side of the butane are exactly equivalent to the methyl groups at the ends of the butane. I think it should be called 1,1,1,2,2,2-hexamethyl ethane. But that&amp;rsquo;s not how chemical names officially work. You have to pick the longest carbon chain you can, four in this case, even if thereby you deny the basic symmetry of the molecule. It&amp;rsquo;s kind of like the standard definition of regular expressions, where you always have to match the longest string. Of course, lots of people call it hexamethyl ethane anyway, since real people really do believe there&amp;rsquo;s more than one way to do it. People use minimal regular expressions now too, thanks to Perl. I&amp;rsquo;m not sure what the octane rating of Perl is. Perl doesn&amp;rsquo;t make your engine knock, but it&amp;rsquo;s not very expensive either.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool molecule, if you&amp;rsquo;re into explosions. Or branching structures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/nitroglycerin.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/nitroglycerin.gif&#34; alt=&#34;nitroglycerin&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems like whenever you run into a cool explosive, you tend to find nitrogen involved, whether you&amp;rsquo;re talking about potassium nitrate, or nitrogen triiodide, or in this case glyceryl trinitrate. More commonly known as nitroglycerin. Also more commonly &lt;em&gt;used&lt;/em&gt; as a heart medication than as an explosive. Still, to a junior high boy, it&amp;rsquo;s dynamite.&lt;/p&gt;

&lt;p&gt;Of course, not only do we need branching structures in our programming language, but we need various looping constructs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/tnt.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/tnt.gif&#34; alt=&#34;tnt&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s TNT, trinitrotoluene, frequently confused with dynamite. But it takes a detonator to get TNT to explode. You can take pure TNT and hit it with a hammer, and nothing will happen. Don&amp;rsquo;t try this with dynamite. It will ruin your day, if not your hammer.&lt;/p&gt;

&lt;p&gt;TNT is based on toluene, which is a benzene ring with one methyl group. People used to think of benzene and other aromatic molecules as having double bonds that alternated rapidly with single bonds. But it turns out that all the extra electrons are usually out in a cloud on either side of the ring, which hangs a great big negative charge out there, which is why many potent biological molecules use them. Loops are a powerful part of Perl too. That&amp;rsquo;s why there are so many different kinds of loops in Perl.&lt;/p&gt;

&lt;p&gt;And there&amp;rsquo;s more than one way to do it in chemistry as well. Interestingly, you can substitute nitrogens for carbons and get aromatic loops as well. You can always tell the aromatic loops from the non-aromatic loops because the aromatics don&amp;rsquo;t seem to have enough hydrogens attached to the carbons or nitrogens. Perl has other ways of telling loops apart. Here&amp;rsquo;s a molecule that will drive you loopy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/histamine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/histamine.gif&#34; alt=&#34;histamine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is histamine. Many of you are intimately familiar with histamines, because as loops, they program you to sneeze repeatedly. Some of you may be producing histamines because of the fragrances in this candle. Some of you may have gone so far as to program your body with an antihistamine such as &lt;a href=&#34;http://www.healing-aid.com&#34;&gt;Benadryl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/benadryl.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/benadryl.gif&#34; alt=&#34;benadryl&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously, Benadryl is the more powerful program because it has two loops instead of one.&lt;/p&gt;

&lt;p&gt;Alternately, you can view it as the reuse of modules. Though it looks more like cut and paste to me. For real reusability, of course, you need to study catalysts, and their proteinaceous cousins, enzymes. Most enzymes are just chock full of loops, branches, objects, interfaces, and what have you. Many reusable enzymes can be downloaded from the CDAN. That&amp;rsquo;s the Comprehensive DNA Archive Network, replicated in the nucleus of each of your cells.&lt;/p&gt;

&lt;p&gt;Just a few more loops. I like loops a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cyclonite.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cyclonite.gif&#34; alt=&#34;cyclonite&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another dual-use explosive, cyclonite. It doubles as a rat poison. Rat eats it, KABOOM! In this case you can see that the ring is not aromatic, so all the carbons connect to four things and the nitrogens to three things.&lt;/p&gt;

&lt;p&gt;One thing we haven&amp;rsquo;t figured out how to do in Perl is three-dimensional loops. Hey, Sarathy, let&amp;rsquo;s put this on the Todo list:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/cubane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/cubane.gif&#34; alt=&#34;cubane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is cubane. Not aromatic. See all the hydrogens.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/dodecahedrane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/dodecahedrane.gif&#34; alt=&#34;dodecahedrane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is dodecahedrane. Also not aromatic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/buckyball.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/buckyball.gif&#34; alt=&#34;buckyball&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And of course, buckminsterfullerene, which is aromatic, for some definition of the term. Note that there are no hydrogens at all. Buckyballs are a recently discovered form of pure carbon, like graphite and diamond. Making organic molecules without hydrogen is kind of like writing Perl without dollar signs. Which oddly enough you will be able to do easily, now that we&amp;rsquo;re getting lvalue subroutines, another recent discovery.&lt;/p&gt;

&lt;p&gt;I have a gazillion other molecules I could show you, but I&amp;rsquo;d like to go back and explain a little more personal history. After all, the theme of all these keynote speeches has been that you can&amp;rsquo;t really understand Perl without understanding Larry. There is an unfortunate corollary, however. Since it&amp;rsquo;s not possible to understand Larry, it&amp;rsquo;s not possible to understand Perl either.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s okay, because Perl is a bit like those early chemistry sets. You didn&amp;rsquo;t really have to understand what you were doing in order to do interesting things. You might blow yourself up, but more likely, you&amp;rsquo;d have a great deal of fun.&lt;/p&gt;

&lt;p&gt;I remember a lot more about my chemistry set than I do of high school chemistry. In fact, about the only thing I learned in high school chemistry was Avocado&amp;rsquo;s, er, Avogadros number, 6.02 times 10 to the something big. But between my chemistry set and Avogadro&amp;rsquo;s number, I managed to persuade myself to major in Chemistry in college.&lt;/p&gt;

&lt;p&gt;Among other things.&lt;/p&gt;

&lt;p&gt;My first year at college, I took inorganic chemistry. Inorganic chemistry is mostly about weighing things. I spent an awful lot of time trying to get the scales to read what they were supposed to read. The error bars on my graphs were always rather too large.&lt;/p&gt;

&lt;p&gt;I remember wandering into the lab next door, and being shocked to find a jar of potassium cyanide sitting in the cupboard. I suppose that&amp;rsquo;s when it first occurred to me that we really do expect people not to be idiots. For example, we really do expect people not to call &lt;code&gt;system(&amp;quot;rm -rf *&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also learned something about ambiguity that year. I was leafing through a chemistry book when I saw an entry that said, ``periodic acid&amp;rdquo;. ``Huh,&amp;rdquo; I said. I should really have figured it out sooner, since I knew about perchloric acid. Periodic acid is &lt;em&gt;not&lt;/em&gt; acid that&amp;rsquo;s periodically acidic, but rather it&amp;rsquo;s per-iodic acid, based on iodine, just as perchloric acid is based on chlorine.&lt;/p&gt;

&lt;p&gt;Even if periodic acid isn&amp;rsquo;t, the periodic table is. We studied the periodic table of the elements a lot in inorganic chemistry. There&amp;rsquo;s a reason it&amp;rsquo;s called periodic, and it also has to do with the fact that iodine is like chlorine, and fluorine, and bromine. Sort of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/pt2.gif&#34; alt=&#34;periodic table&#34; width=&#34;801&#34; height=&#34;575&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You know, if this were a computer language, people would say it has too many ways to do the same thing. It has too many features that work too similarly, and at the same time it&amp;rsquo;s missing key features of higher abstraction that would really help an &lt;a href=&#34;http://www.mit.edu&#34;&gt;MIT&lt;/a&gt; grad student. Elements do multiple inheritance of properties, which is evil. Strong typing is not enforced. Nothing should be made of carbon, because organic programming gives you too many ways to get into trouble. There are too many metals, too many gasses, and not enough semiconductors like silicon. There ought to be more elements like carbon. Everything should be made of carbon atoms. Silicon is only good for sand, it should be removed. If this were really object-oriented, electrons and quarks would have the same interface as atoms and molecules. There&amp;rsquo;s not enough encapsulation of electrons in the metals. There&amp;rsquo;s too much encapsulation in the lanthanides and the noble gasses. And why the heck do we need so many different noble gasses anyway? They don&amp;rsquo;t do anything! Throw &amp;lsquo;em into that big hole at the top of the chart. And don&amp;rsquo;t get me started on isotopes!&lt;/p&gt;

&lt;p&gt;The periodic table is a mess. It should be redesigned.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what I learned in inorganic chemistry. My second year I took organic chemistry. That&amp;rsquo;s the same year I started working as a computer programmer. Before that I was working as a projectionist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I look at the projection screen in the auditorium.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You know, I&amp;rsquo;m still a projectionist. You can never entirely stop being what you once were. That&amp;rsquo;s why it&amp;rsquo;s important to be the right person today, and not put it off till tomorrow.&lt;/p&gt;

&lt;p&gt;Organic chemistry is way cool, but there&amp;rsquo;s a problem. You can always tell who is taking organic chemistry on campus. That whole second year, whenever I wandered into the computer center, I was told I smelled like a goat. (In retrospect, I would rather have smelled like a camel.) Anyway, the odor of everything from ether to isoamyl acetate was oozing out of my pores, and it took several weeks for it to wear off after the school year was out. At least, so I&amp;rsquo;m told. I couldn&amp;rsquo;t smell much of anything for the rest of the summer.&lt;/p&gt;

&lt;p&gt;But I enjoyed organic chemistry. We did both synthesis and analysis, but I think I enjoyed the synthesis more. Not too surprising, given who I am. I&amp;rsquo;ve never stopped being a synthesist.&lt;/p&gt;

&lt;p&gt;Actually, I think chemistry strikes a good balance between synthesis and analysis, between holism and reductionism. As a synthesist, I tend to be scared of reductionism. You know, behavior can be reduced to biology, biology can be reduced to biochemistry, and biochemistry can be reduced to chemistry. Chemistry, in turn, can be reduced to physics. And physics, of course, can be reduced to theology.&lt;/p&gt;

&lt;p&gt;Well, hey, that follows logically from the fact that physics can be reduced to math.&lt;/p&gt;

&lt;p&gt;Ask most any mathemetician about God, and he&amp;rsquo;ll say something like, ``We can&amp;rsquo;t prove that God exists. However, we can prove that if God does exist, he&amp;rsquo;s pretty good at math. In fact, we can prove that even if God doesn&amp;rsquo;t exist, he&amp;rsquo;s still pretty good at math.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Personally, I think God is pretty good at both analysis and synthesis. I like the periodic table the way it is, thank you.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an ester I synthesized, called isoamyl acetate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/banana.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/banana.gif&#34; alt=&#34;banana&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know this better as the smell of banana.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I eat a banana.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You might think bananas are relatively harmless, but after the quarter was over, I took my precious isoamyl acetate to my dorm room. During an all-dorm water fight, I had the bright idea of turning another floor of the dorm into banana heaven, so I got out my stash of banana perfume. One of my floormates grabbed it from me, went down to the other floor and threw it in someone&amp;rsquo;s face, who proceeded to almost asphyxiate. Fortunately, he didn&amp;rsquo;t, so no one ever asked where the banana perfume came from, and I had a close escape from the law of unintended consequences. But one of the consequences was that chemistry lost a bit of its glamour for me that day. Eventually I realized I didn&amp;rsquo;t want to be a chemist. By my third year in college, I had changed my major to Premed, but I didn&amp;rsquo;t really want to be a doctor either. It was just an excuse to take all the science courses I wanted.&lt;/p&gt;

&lt;p&gt;But another consequence was that I realized that, whenever you synthesize something, people will find a way misuse it. People misuse Perl too&amp;ndash;if you can call spammers people. Perl is the language of choice for network abuse. That doesn&amp;rsquo;t mean Perl isn&amp;rsquo;t a net win for the world. In the long run, I suspect more lives will be saved by nitroglycerin than will be destroyed by it. But &lt;a href=&#34;http://www.nobel.se/alfred/index.html&#34;&gt;Alfred Nobel&lt;/a&gt;&amp;rsquo;s brother was one of the people destroyed by it. I&amp;rsquo;d rather not be destroyed by Perl.&lt;/p&gt;

&lt;p&gt;Chemistry is a serious subject. Sometimes it&amp;rsquo;s a matter of life and death. Here&amp;rsquo;s vitamin C.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vit-c.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vit-c.gif&#34; alt=&#34;Vitamin C&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that&amp;rsquo;s what you call mission critical programming. Here&amp;rsquo;s vitamin B-12.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vitamin-b12.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vitamin-b12.gif&#34; alt=&#34;Vitamin B-12&#34; width=&#34;512&#34; height=&#34;544&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vitamin B-12 is the proof that cobalt is necessary in your diet. Cobalt is the pinkish atom in the middle attached to five nitrogens and a cyanide group. In this context, cyanide gives life rather than taking it away. Context is everything in chemistry, just as it is in Perl.&lt;/p&gt;

&lt;p&gt;Even when chemistry is not life and death to people, it&amp;rsquo;s life and death to bacteria and insects. Here&amp;rsquo;s malathion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/malathion.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/malathion.gif&#34; alt=&#34;malathion&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One year when my wife was pregnant with one of our kids, we were camped here near &lt;a href=&#34;http://www.monterey.com&#34;&gt;Monterey&lt;/a&gt;, and we got sprayed with malathion.&lt;/p&gt;

&lt;p&gt;That kid turned out strange. But then, all my kids turned out strange.&lt;/p&gt;

&lt;p&gt;Strange and wonderful. Kind of like Perl.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/nicotine.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/nicotine.gif&#34; alt=&#34;nicotine&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a naturally occuring insecticide. An organic pesticide, if you will. It occurs naturally in the leaves of the species &lt;em&gt;Nicotiana Tabacum&lt;/em&gt;. Obviously, since nicotine is a natural insecticide, it can&amp;rsquo;t be bad for you, can it?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/ddt.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/ddt.gif&#34; alt=&#34;ddt&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This molecule with the &lt;a href=&#34;http://einstein.drexel.edu/pages/students/kohr/pages/Who_is_Mr.Yuck.html&#34;&gt;Mr. Yuk&lt;/a&gt; chlorines is DDT, still used in many parts of the world, but not here. We thought it was death for insects, but it was also death for birds. The law of unintended consequences again. But where DDT is still used, millions of people are alive who would have been dead of malaria.&lt;/p&gt;

&lt;p&gt;To an organic chemist, pesticides are organic.&lt;/p&gt;

&lt;p&gt;To an organic farmer, pesticides are &lt;em&gt;not&lt;/em&gt; organic.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s okay, you can make Perl mean opposite things too. I &lt;em&gt;expect&lt;/em&gt; people to make Perl mean opposite things, both good and bad. That doesn&amp;rsquo;t take anything away from the central meaning of Perl. To explain the central meaning of Perl, let&amp;rsquo;s look at the central meaning of the word ``organic&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you go back to ancient Greek, the noun &lt;em&gt;organon&lt;/em&gt; already meant what we often mean by ``organ&amp;rdquo; today; that is, a functional subsystem of your body. But &lt;em&gt;organon&lt;/em&gt; could also mean an implement, or a tool, such as a surgical instrument. The related adjective &lt;em&gt;organikos&lt;/em&gt; meant ``serving as a tool, or engine.&amp;rdquo; There you have it. If Perl is a tool or engine, then you&amp;rsquo;re doing organic programming by definition.&lt;/p&gt;

&lt;p&gt;Interestingly, not only could the Greek word mean a surgical instrument, it could also mean a musical instrument. So music is also organic. Perl and music have a lot in common. Maybe next year I should talk about music. After all, I majored in Music too.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re really lucky, I&amp;rsquo;ll forget to bring my violin.&lt;/p&gt;

&lt;p&gt;Somewhere between music and chemistry there&amp;rsquo;s got to be a joke about organ grinders, but I&amp;rsquo;ll be a monkey&amp;rsquo;s uncle if I can see it.&lt;/p&gt;

&lt;p&gt;Anyway, now you know that the ancient Greeks thought their tools were organs, or their organs were tools.&lt;/p&gt;

&lt;p&gt;Hmm, maybe I&amp;rsquo;d better not expand on that.&lt;/p&gt;

&lt;p&gt;Actually, as a linguist, I don&amp;rsquo;t believe in etymological meanings. The meanings of words depend on many contexts, but all of the real contexts are in the present language, and true etymology is only in the past. On the other hand, part of the current context is what you &lt;em&gt;think&lt;/em&gt; the etymology of a word is. That&amp;rsquo;s why people like me keep trotting out etymological arguments, even though they&amp;rsquo;re relatively meaningless, not to mention wrong half the time.&lt;/p&gt;

&lt;p&gt;So, what &lt;em&gt;do&lt;/em&gt; I mean when I say I program organically? The central meaning of ``organic&amp;rdquo; these days derives from the organs of the body. It means doing business naturally, the way that your body does business, complicated and messy, with lots of interconnections and ramifications and stuff we don&amp;rsquo;t entirely understand yet. But that&amp;rsquo;s the way nature does business.&lt;/p&gt;

&lt;p&gt;On the basis of that, the organic farmers can tell you that it&amp;rsquo;s unnatural to use pesticides, because we don&amp;rsquo;t want it to be part of us, while organic chemists can tell you that it&amp;rsquo;s natural to use carbon-based chemistry, because what we&amp;rsquo;re made of. They&amp;rsquo;re both right, in their way.&lt;/p&gt;

&lt;p&gt;Likewise, Perl is designed to let you program naturally. Whatever &lt;em&gt;you&lt;/em&gt; think natural means.&lt;/p&gt;

&lt;p&gt;Perl culture must also be organic. That means that each bond in the molecule of Perl culture must work the way it&amp;rsquo;s supposed to. There is no central atom to the Perl molecule. Maybe I&amp;rsquo;m a heavy cobalt atom hidden off somewhere in the middle, but the whole molecule is what works. The molecule has what is called &lt;a href=&#34;http://www.sciam.com/1998/0198issue/0198ingber.html&#34;&gt;tensegrity&lt;/a&gt;: the proper balance of pushes and pulls to maintain its integrity. In terms of our culture, it means that sometimes we attract each other, and sometimes we repel each other, but more importantly, it means that we&amp;rsquo;re there for each other there to attract or repel as necessary. Look for balance in your attractions and repulsions. Look for equilibrium.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s good for the Perl molecule is good for the Open Source molecule. Last year I gave you a picture of the Open Source world taken from physics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/roche.gif&#34; alt=&#34;Rocheworld&#34; width=&#34;399&#34; height=&#34;187&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;a href=&#34;http://www.baen.com/catalog/rlforwar.htm&#34;&gt;Rocheworld&lt;/a&gt;, where two gravitationally bound bodies approach each other. It&amp;rsquo;s a curious coincidence that the word &lt;em&gt;rapp-roche-ment&lt;/em&gt; has a ``roche&amp;rdquo; in the middle. The picture was intended to indicate the approach of the open source world to the commercial world. I wondered at the time whether things would become unstable if the two worlds got even closer together. That&amp;rsquo;s what would happen in a real Rocheworld. But gravitation turns out to be an incomplete model for what&amp;rsquo;s really going to happen. Gravity is never repulsive, and can only be balanced by centrifugal force, but the combination of electromagnetism and the strong force make atomic bonds that can push as well as pull. So I think that the open source folks and the commercial folks will find the right balance. Here&amp;rsquo;s a sample molecule.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/ethyne.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/ethyne.gif&#34; alt=&#34;ethyne&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the molecule known to most of you as acetylene.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;re to make this correspond to last year&amp;rsquo;s picture, then this hydrogen atom on the left is named Richard, and the one on the right is named Bill. (Hmm, they seem to be circling each other. How appropriate.) [Well, they were circling in my talk, anyway.] This carbon atom on the left is all the open source folks that are trying to cooperate constructively with commercial folks, and this other carbon atom is all the commercial folks trying to cooperate with open source folks. The bond in the middle is simultaneously the strongest bond and the weakest bond. It&amp;rsquo;s the strongest bond, because it&amp;rsquo;s a triple bond. It&amp;rsquo;s also the weakest bond, because it&amp;rsquo;s a very energetic bond, and could be broken by outside forces.&lt;/p&gt;

&lt;p&gt;But not by inside forces.&lt;/p&gt;

&lt;p&gt;Let me be specific. Some folks in this room are extremely leary of Bill. Others are extremely leary of Richard. These people tend to be leary not only of the opposite hydrogen, but also the opposite carbon. They are supplying the repulsive forces, because they fear the opposite extreme.&lt;/p&gt;

&lt;p&gt;At the same time, there are lots of good people who are actively supplying the attractive forces. Nobody has enough power to crush the two carbons together. Nobody has enough power to tear them apart. They&amp;rsquo;re in a metastable state. They have tensegrity. It&amp;rsquo;s my hope that the open source movement achieves this kind of tensegrity.&lt;/p&gt;

&lt;p&gt;That being said, acetylene &lt;em&gt;is&lt;/em&gt; flammable. If it is abused too much, it can explode. I only ever had one unanticipated explosion when I was doing chemistry in my basement, and that was when I was generating acetylene. I was an idiot, and was generating it in a small glass jar. Don&amp;rsquo;t try this at home. Fortunately, it was a very small glass jar, and I was already wearing glasses at the time. I was shaken but unhurt. I don&amp;rsquo;t play with acetylene much any more, because it is rather touchy stuff. So maybe, if you&amp;rsquo;re thinking about starting a war between the open source folks and the commercial folks, you should think again. First of all, you&amp;rsquo;ll be fighting against a lot of good folks, and you&amp;rsquo;ll probably lose. Second of all, you might win, and the world will be split up into separate atoms. Maybe that&amp;rsquo;s what the hydrogens on the end want, but the carbons in the middle would really like to stick together and make something useful.&lt;/p&gt;

&lt;p&gt;If we try hard enough, maybe we can make open source into something stable in the middle. Here&amp;rsquo;s the funniest molecule I saw in my research.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/bcfimethane.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/bcfimethane.gif&#34; alt=&#34;bromochlorofluoroiodomethane&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called bromochlorofluoroiodomethane. I have no idea what it&amp;rsquo;s good for (or more likely, bad for), just as I have no idea where open source culture is going. But I think of open source as the single carbon in the middle, holding steady the separate interests of these four different atoms, bromine, chlorine, fluorine, and iodine, which to my mind represent the domains .gov, .edu, .org, and .com. If we work things right, maybe we can balance things tetrahedrally so that, for instance, the .govs and .edus keep the .coms and .orgs from destroying each other, and vice versa every whichaway.&lt;/p&gt;

&lt;p&gt;I guess I really am an optimist. A paranoid optimist, true, but an optimist nonetheless.&lt;/p&gt;

&lt;p&gt;Of course, this picture is also an oversimplification. The true picture is much more organic. Whatever that means.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_1999_08_onion_talk1/vit-e.pdb&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_1999_08_onion_talk1/vit-e.gif&#34; alt=&#34;Vitamin&amp;quot; e&amp;quot;E&amp;quot;&#34; width=&#34;512&#34; height=&#34;283&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I leave you with some vitamin E. Like many of the most useful molecules in biology, it is self contradictory. It has a strongly polar end, and a strongly nonpolar end. It has a funny shape. It smells a little odd. It looks like it was designed by a committee. It&amp;rsquo;s sort of a molecular camel, if you will.&lt;/p&gt;

&lt;p&gt;Nevertheless, it&amp;rsquo;s a useful beast. Just as each of those atoms is necessary to the proper functioning of the molecule as a whole, the molecule as a whole is necessary to the functioning of each of you sitting here today. Each of you in turn can be a vitamin that helps keeps the Perl community healthy.&lt;/p&gt;

&lt;p&gt;And our collective hope is that the Perl community is one of the vitamins that will keep the world healthy.&lt;/p&gt;

&lt;p&gt;The key to equilibrium is to balance out all your reactions.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t overreact. Don&amp;rsquo;t underreact.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t overact. Don&amp;rsquo;t underact.&lt;/p&gt;

&lt;p&gt;But do act. And act passionately, with balance.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t going to talk about rockets. But I want the Perl community to behave like a rocket engine. What&amp;rsquo;s the point of rocket science? It&amp;rsquo;s to see how big of an explosion you can have without blowing your rocket chamber apart. I want to have the maximum amount of passion in the Perl community without blowing the community apart. So have a little tolerance for other people&amp;rsquo;s passions, even if they don&amp;rsquo;t match your own. Let&amp;rsquo;s balance our passions.&lt;/p&gt;

&lt;p&gt;``Churn, baby, churn,&amp;rdquo; as &lt;a href=&#34;http://www.garage.com&#34;&gt;Guy Kawasaki&lt;/a&gt; told us earlier today. It&amp;rsquo;s the only way we&amp;rsquo;ll jump to the next curve. It&amp;rsquo;s how we&amp;rsquo;ll let a thousand flowers bloom.&lt;/p&gt;

&lt;p&gt;I feel like I&amp;rsquo;m still playing with my chemistry set here, and I still don&amp;rsquo;t know what I&amp;rsquo;m doing entirely. Doubtless there will be more cool stinks and explosions this year, just as we&amp;rsquo;ve had our fair share of stinks and explosions in the last year. But face it, we&amp;rsquo;ve made many more good smells than bad ones. And the explosions haven&amp;rsquo;t done much besides ruffle a few feathers.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s keep doing organic chemistry this year. It&amp;rsquo;s good chemistry, even if we do smell like a camel occasionally.&lt;/p&gt;

&lt;p&gt;Thanks for letting me douse you with weird chemicals today.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

