<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pico on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pico/</link>
    <description>Recent content in Pico on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2019 18:26:42 +0000</lastBuildDate>
    <atom:link href="/tags/pico/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How do I Open This?</title>
      <link>http://localhost:1313/article/how-do-i-open-this-/</link>
      <pubDate>Mon, 03 Jun 2019 18:26:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-do-i-open-this-/</guid>
      <description>

&lt;p&gt;When I&amp;rsquo;m working on code, I have to open a lot of files.  I work primarily at the command line, inside a vim editor.  On any given day I may need to translate some or all of the following into file paths that vim can understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack traces&lt;/li&gt;
&lt;li&gt;Perl module names&lt;/li&gt;
&lt;li&gt;Perl module names suffixed with subroutine names&lt;/li&gt;
&lt;li&gt;git-grep results&lt;/li&gt;
&lt;li&gt;GitHub URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figuring this stuff out isn&amp;rsquo;t generally that hard, but it can make your day just a little longer than it needs to be, so I wrote &lt;a href=&#34;https://metacpan.org/pod/ot&#34;&gt;ot&lt;/a&gt;: a command line utility provided by &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using vim in examples, but ot also supports nvim, emacs,nano and pico, defaulting to whatever you have set in &lt;code&gt;$ENV{EDITOR}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;following-along&#34;&gt;Following Along&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be working out of a repository at &lt;a href=&#34;https://github.com/oalders/git-helpers&#34;&gt;https://github.com/oalders/git-helpers&lt;/a&gt;.  If you&amp;rsquo;d like to follow along:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oalders/git-helpers.git
$ cd git-helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-a-perl-module-name&#34;&gt;Using a Perl Module Name&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now in the root of the &lt;strong&gt;git-helpers&lt;/strong&gt; Git repository.  Let&amp;rsquo;s say we want to open the Git::Helpers module.  Translating a Perl module name into a file path isn&amp;rsquo;t all that hard.  Given something like Git::Helpers, I know that I&amp;rsquo;m likely (but not always) looking for a file called &lt;code&gt;Git/Helpers.pm&lt;/code&gt;.  This could be in lib, t/lib or some custom directory.  If I know exactly where to find this file, I can invoke vim directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if I&amp;rsquo;m not sure, or if I&amp;rsquo;m just lazy, this will get me to the same place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because, by default, ot will search your lib and t/lib directories for local files. You can override this via the &lt;code&gt;$ENV{OPEN_THIS_LIBS}&lt;/code&gt; variable. It accepts a comma-separated list of libs.&lt;/p&gt;

&lt;p&gt;If the file can&amp;rsquo;t be found in one of the standard lib locations, ot will try to find an installed file on the system.  So, if we&amp;rsquo;re not in the root of the git-helpers repository, but we&amp;rsquo;ve previously installed Git::Helpers from CPAN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;might open open the following file: &lt;code&gt;~/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Git/Helpers.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-perl-module-at-a-subroutine-declaration&#34;&gt;Opening a Perl Module at a Subroutine Declaration&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take this a step further.  What if we want to open a file for a module but we also want to go straight to the correct subroutine declaration?  Something like &lt;code&gt;Git::Helpers::is_inside_work_tree()&lt;/code&gt;.  We could probably craft a fancy one-liner to do this, but today we are lazy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.  This will Do The Right Thing.  (Note that in this case we had to quote the args to ot.  Your shell will likely require this as well.)&lt;/p&gt;

&lt;p&gt;We can do exactly the same thing for an installed module.  Try this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test::More::subtest()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case it opens &lt;code&gt;/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Test/More.pm&lt;/code&gt; at line 807, which is &lt;code&gt;sub subtest {&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-using-a-line-number&#34;&gt;Opening a File Using a Line Number&lt;/h2&gt;

&lt;h4 id=&#34;stack-traces&#34;&gt;Stack Traces&lt;/h4&gt;

&lt;p&gt;I see a lot of stack traces on any given day.  A relevant chunk of a stack trace might look like: &lt;code&gt;Died at lib/Git/Helpers.pm line 50.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Doing this by hand I might copy the file path and enter the following at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;rsquo;m feeling fancy, I might translate the line number into something that vim understands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim +50 lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, I can just copy the file location and line number and feed it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do the right thing and open &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; in vim at line 50.&lt;/p&gt;

&lt;h4 id=&#34;git-grep&#34;&gt;git-grep&lt;/h4&gt;

&lt;p&gt;The results of some searches, like &lt;code&gt;git grep&lt;/code&gt;, can contain line numbers as well as file names.  To configure this behaviour in git use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global grep.lineNumber true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t want to configure this directly in git you can also search via &lt;code&gt;git grep --line-number foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got line numbers in our git grep output, we can use its output to give hints to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub _build_latest_release&amp;#39;&lt;/span&gt; .
lib/Git/Helpers/CPAN.pm:70:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having run the above search, we can copy paste the results to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers/CPAN.pm:70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 70.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-at-an-arbitrary-line-and-column&#34;&gt;Opening a File at an Arbitrary Line and Column&lt;/h2&gt;

&lt;p&gt;As we saw above, ot can open files at the correct line number.  Let&amp;rsquo;s get even lazier and have ot open our files at the correct line &lt;strong&gt;and&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;If you use  the &lt;code&gt;--vimgrep&lt;/code&gt; option with &lt;code&gt;ripgrep&lt;/code&gt; then you will see column numbers as well as line numbers with your search results.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rg --vimgrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt; .
./lib/Git/Helpers/CPAN.pm:20:17:    builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt;,
./lib/Git/Helpers/CPAN.pm:70:5:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 20 and column 17, simply copy/paste the rg output and pass it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot ./lib/Git/Helpers/CPAN.pm:20:17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-github-links-locally&#34;&gt;Opening Github Links Locally&lt;/h2&gt;

&lt;p&gt;Passing a full GitHub URL &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/a&gt;, to &lt;code&gt;ot&lt;/code&gt; will allow you to open the file locally, if it can be found in your relative file path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; at line 50.&lt;/p&gt;

&lt;p&gt;Passing a truncated URL path is also valid, if the path parts exist locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-a-locally-checked-out-file-at-github&#34;&gt;Opening a Locally Checked Out File at GitHub&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; flag will allow you to open your local files on GitHub.&lt;/p&gt;

&lt;p&gt;Any of the following commands can launch a browser with a GitHub URL (hopefully) containing the file you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers
$ ot -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;
$ ot -b Git::Helpers:75
$ ot -b Git::Helpers line &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, from the top level of the git-helpers repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers:75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-in-your-env-path&#34;&gt;Opening a File in Your &lt;code&gt;$ENV{PATH}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ot can also be used as a shortcut to inspect files which can be found inside your &lt;code&gt;$ENV{PATH}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot perldoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;~/.plenv/versions/5.26.1/bin/perldoc&lt;/code&gt; on my machine.  You can think of this as shorthand for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ which perldoc | xargs -o vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to add support for more editors or other formats of data, please &lt;a href=&#34;https://github.com/oalders/open-this/issues&#34;&gt;get in touch with me&lt;/a&gt; and we&amp;rsquo;ll see what we can do.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See Also&lt;/h2&gt;

&lt;p&gt;For other solutions to the problem of finding and opening files, I highly recommend &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/PathPicker&#34;&gt;fpp&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

