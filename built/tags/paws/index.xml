<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paws on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/paws/</link>
    <description>Recent content in Paws on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Aug 2019 14:03:57 +0000</lastBuildDate>
    <atom:link href="/tags/paws/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - July 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---july-2019/</link>
      <pubDate>Tue, 20 Aug 2019 14:03:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---july-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PawsX::Waiter&#34;&gt;PawsX::Waiter&lt;/a&gt; is a Waiter library for Paws&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Web::NewsAPI&#34;&gt;Web::NewsAPI&lt;/a&gt; can fetch and search news headlines and sources from News API&lt;/li&gt;
&lt;li&gt;Use a language detection API with &lt;a href=&#34;https://metacpan.org/pod/WebService::DetectLanguage&#34;&gt;WebService::DetectLanguage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write cpanfiles without XS dependencies using &lt;a href=&#34;https://metacpan.org/pod/Module::CPANfile::Writer&#34;&gt;Module::CPANfile::Writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Symlink::DSL&#34;&gt;Symlink::DSL&lt;/a&gt; provides a domain-specific language for creating symbolic links&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DataLoader&#34;&gt;DataLoader&lt;/a&gt; abstracts data loading, with batching and caching to reduce overhead&lt;/li&gt;
&lt;li&gt;Get pseudo-random distribution functions with &lt;a href=&#34;https://metacpan.org/pod/Game::PseudoRand&#34;&gt;Game::PseudoRand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::IP6&#34;&gt;Geo::IP6&lt;/a&gt; provides country codes for any ipv6 or ipv4 address&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::BlockSync&#34;&gt;IO::BlockSync&lt;/a&gt; syncs data in blocks instead of whole files which can be useful for slow/unreliable destinations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encode/decode text for PDF using &lt;a href=&#34;https://metacpan.org/pod/Encode::PDFDoc&#34;&gt;Encode::PDFDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lib::Log4cplus&#34;&gt;Lib::Log4cplus&lt;/a&gt; provides a Perl interface to Log4cplus&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::TO_JSON&#34;&gt;MooX::TO_JSON&lt;/a&gt; saves you having to write a TO_JSON data serializer method for Moo classes&lt;/li&gt;
&lt;li&gt;Check if you are currently in compile time or run time using &lt;a href=&#34;https://metacpan.org/pod/Perl::Phase&#34;&gt;Perl::Phase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::FFI&#34;&gt;Time::FFI&lt;/a&gt; provides an FFI to POSIX date and time functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Moment::Role::Strptime&#34;&gt;Time::Moment::Role::Strptime&lt;/a&gt; strptime constructor for Time::Moment&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XT::Files&#34;&gt;XT::Files&lt;/a&gt; is a standard interface for author tests to find files to check&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::Adapter::UART&#34;&gt;Device::Chip::Adapter::UART&lt;/a&gt; is a Device::Chip::Adapter implementation for serial ports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Base::Tiny&#34;&gt;Mojo::Base::Tiny&lt;/a&gt; is a minimal base class for non-Mojo projects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Promisify&#34;&gt;Mojo::Promisify&lt;/a&gt; converts callback code to promise-based code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Iperf::Parser&#34;&gt;Net::Iperf::Parser&lt;/a&gt; parses lines from iperf, the network bandwidth tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Progressive::Web::Application&#34;&gt;Progressive::Web::Application&lt;/a&gt; is a utility for making an application &amp;lsquo;progressive&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - July 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---july-2017/</link>
      <pubDate>Wed, 02 Aug 2017 22:44:29 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---july-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::CastleIO&#34;&gt;WebService::CastleIO&lt;/a&gt; is a client for the identity theft protection service&lt;/li&gt;
&lt;li&gt;Get a simple Perl wrapper around the League of Legends API &lt;a href=&#34;https://metacpan.org/pod/WWW::RiotGames::LeagueOfLegends&#34;&gt;WWW::RiotGames::LeagueOfLegends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::IFConfig::Client&#34;&gt;WebService::IFConfig::Client&lt;/a&gt; is a client for the IP geo-location site&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Validate YAML Front Matter with TidyAll using &lt;a href=&#34;https://metacpan.org/pod/Code::TidyAll::Plugin::YAMLFrontMatter&#34;&gt;Code::TidyAll::Plugin::YAMLFrontMatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;List the contents of a directory with &lt;a href=&#34;https://metacpan.org/pod/Dir::ls&#34;&gt;Dir::ls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::ShareDir::Dist&#34;&gt;File::ShareDir::Dist&lt;/a&gt; can locate per-dist shared files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RL&#34;&gt;RL&lt;/a&gt; is an alternative to Term::Readline modules, providing an interface to the machine&amp;rsquo;s readline library on Linux and MacOS&lt;/li&gt;
&lt;li&gt;Sort version strings as in GNU filevercmp with &lt;a href=&#34;https://metacpan.org/pod/Sort::filevercmp&#34;&gt;Sort::filevercmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Several new Alien::Build plugins:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::Fetch::Prompt&#34;&gt;Alien::Build::Plugin::Fetch::Prompt&lt;/a&gt; to prompt a user before downloading tarballs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::Fetch::Rewrite&#34;&gt;Alien::Build::Plugin::Fetch::Rewrite&lt;/a&gt; to override destinations to local network paths for fetching&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Build::Plugin::Decode::SourceForge&#34;&gt;Alien::Build::Plugin::Decode::SourceForge&lt;/a&gt; to better handle SourceForge links&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::GNS::Parser&#34;&gt;Geo::GNS::Parser&lt;/a&gt; can parse a GNS data file (GeoNET Names Server data)&lt;/li&gt;
&lt;li&gt;Get a Perl extension for the libtiff library using &lt;a href=&#34;https://metacpan.org/pod/Graphics::TIFF&#34;&gt;Graphics::TIFF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JsonSQL&#34;&gt;JsonSQL&lt;/a&gt; is similar to SQL::Abstract: it defines a JSON format to represent SQL queries which can be validated and then used to generate SQL syntax&lt;/li&gt;
&lt;li&gt;Nonblocking MySQL connections via libmariadbclient with &lt;a href=&#34;https://metacpan.org/pod/MariaDB::NonBlocking&#34;&gt;MariaDB::NonBlocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neo4j::Cypher::Abstract&#34;&gt;Neo4j::Cypher::Abstract&lt;/a&gt; can generate cypher queries in Perl&lt;/li&gt;
&lt;li&gt;Create and modify PDFs using &lt;a href=&#34;https://metacpan.org/pod/PDF::Builder&#34;&gt;PDF::Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PGObject::Util::Replication::Standby&#34;&gt;PGObject::Util::Replication::Standby&lt;/a&gt; manages PG replication standbys&lt;/li&gt;
&lt;li&gt;Get a simple Postgresql-backed queue with &lt;a href=&#34;https://metacpan.org/pod/Pg::Queue&#34;&gt;Pg::Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Two new DynamoDB helpers that translate DynamoDB documents into Perl data structures and vice-versa:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::DynamoDB::Marshaler&#34;&gt;Net::Amazon::DynamoDB::Marshaler&lt;/a&gt; translates Perl hashrefs into DynamoDb format and vice versa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PawsX::DynamoDB::DocumentClient&#34;&gt;PawsX::DynamoDB::DocumentClient&lt;/a&gt; a simplified way of working with AWS DynamoDB items that uses Paws under the hood&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write fake AWS services using Paws and &lt;a href=&#34;https://metacpan.org/pod/PawsX::FakeImplementation::Instance&#34;&gt;PawsX::FakeImplementation::Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Paws::Net::MultiplexCaller&#34;&gt;Paws::Net::MultiplexCaller&lt;/a&gt; can route AWS service requests to other callers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create lexical aliases under different versions of Perl (except 5.20) using &lt;a href=&#34;https://metacpan.org/pod/Alias::Any&#34;&gt;Alias::Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Consul::Exec&#34;&gt;AnyEvent::Consul::Exec&lt;/a&gt; can execute commands across a Consul cluster&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CLI::Osprey&#34;&gt;CLI::Osprey&lt;/a&gt; - write command line apps with Moo(se) classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::DIC&#34;&gt;MooseX::DIC&lt;/a&gt; is a dependency injector for Moose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Calendar::Julian&#34;&gt;Calendar::Julian&lt;/a&gt; is a pretty Julian calendar implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LinAlg::Vector&#34;&gt;LinAlg::Vector&lt;/a&gt; is a Moose-based vector library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Physics::Ballistics&#34;&gt;Physics::Ballistics&lt;/a&gt; provides utility functions for projectile calculations&lt;/li&gt;
&lt;li&gt;Use immutable segment trees with &lt;a href=&#34;https://metacpan.org/pod/Set::SegmentTree&#34;&gt;Set::SegmentTree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract data from Google Analytics using &lt;a href=&#34;https://metacpan.org/pod/Mojo::GoogleAnalytics&#34;&gt;Mojo::GoogleAnalytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::Cached&#34;&gt;Mojo::UserAgent::Cached&lt;/a&gt; adds caching to Mojo::UserAgent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Cloudfront cache invalidation with Paws</title>
      <link>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</link>
      <pubDate>Mon, 03 Apr 2017 08:12:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/&#34;&gt;Deploy a static website with Paws&lt;/a&gt;, I developed a simple script to upload files to AWS S3, using &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;. In this article I&amp;rsquo;ll describe a script to invalidate CloudFront caches: this can be used to force CloudFront to re-cache files which have changed on S3.&lt;/p&gt;

&lt;h3 id=&#34;aws-cloudfront&#34;&gt;AWS CloudFront&lt;/h3&gt;

&lt;p&gt;CloudFront is Amazon&amp;rsquo;s Content Delivery Network service. It&amp;rsquo;s used to cache local versions of files so that they can be delivered to requests faster; for example if you used S3 to host your website in Amazon&amp;rsquo;s US East region, files on the website might load faster for East Coast customers than those on the West Coast. With a CDN like CloudFront however, copies of the website files can be saved all over the World, so that visitor&amp;rsquo;s browsers fetch the website files from closer geographic locations, improving the website speed.&lt;/p&gt;

&lt;p&gt;When cached website files are updated on S3, they need to be invalidated from the CloudFront cache. This forces CloudFront to fetch fresh copies of invalidated files.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;Using CloudFront with Paws is pretty easy. For cache invalidation all you really need is a CloudFront distribution id, and a list of files to be invalidated. This is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gettimeofday&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;distribution-id=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DISTRIBUTION_ID,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys=s&amp;#39;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @KEYS,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--distribution-id and --region are required&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $DISTRIBUTION_ID &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION;

&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no objects to invalidate!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @KEYS;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalidating cached keys: %s\n&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;, @KEYS;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();

$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, I use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to process the command line options. The script requires a CloudFront distribution id and an AWS region string. The &lt;code&gt;--keys&lt;/code&gt; switch is optional as the script also reads keys from &lt;code&gt;STDIN&lt;/code&gt;. This snippet is curious:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It sets the &lt;code&gt;STDIN&lt;/code&gt; filehandle to non-blocking mode. That way, if STDIN is empty when the script tries to read from it, it won&amp;rsquo;t block. On the next line, &lt;code&gt;map&lt;/code&gt; is used to prepend a slash to every key. This is required by CloudFront.&lt;/p&gt;

&lt;p&gt;The script then creates a Paws CloudFront object, and the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; &lt;code&gt;gettimeofday&lt;/code&gt; function is used to calculate a cheap unique id (it returns the current epoch seconds and microseconds).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the script calls the &lt;code&gt;CreateInvalidation&lt;/code&gt; method to send the data to AWS CloudFront:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;combining-tools&#34;&gt;Combining tools&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;s3-upload&lt;/code&gt; script prints the keys it updated on STDOUT, and &lt;code&gt;cf-invalid&lt;/code&gt; can read keys from STDIN. This makes for convenient chaining:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload --files static --bucket example.com --region us-east-1 \
| ./cf-invalid --distribution-id e9d4922bd9120 --region us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And because the scripts use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, the option names can be shortened:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload -f static -b example.com -r us-east-1 | ./cf-invalid -d e9d4922bd9120 -r us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, keys (filenames) can be specified as arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./cf-invalid -d e9d4922bd9120 -r us-east-1 -k index.html -k about.html -k contact.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both scripts are available on &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a static website with AWS S3 and Paws</title>
      <link>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</link>
      <pubDate>Tue, 21 Feb 2017 10:04:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</guid>
      <description>

&lt;p&gt;Amazon Web Services (AWS) is Amazon&amp;rsquo;s cloud services platform and S3 is the AWS file storage service. S3 is commonly used to host static websites. With Perl we have many modules for using AWS, but I like &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;, developed by &lt;a href=&#34;https://metacpan.org/author/JLMARTIN&#34;&gt;Jose Luis Martinez&lt;/a&gt; which supports many AWS services, including S3. In this article I&amp;rsquo;ll walk you through a Perl script I developed to upload and maintain a static website using S3 and Paws.&lt;/p&gt;

&lt;h3 id=&#34;aws-setup&#34;&gt;AWS setup&lt;/h3&gt;

&lt;p&gt;To use AWS from the command line you&amp;rsquo;ll need a to generate a key id and secret key for your account which you can get from the &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS website&lt;/a&gt;. Once you login with your Amazon credentials, click on your account name and go to &amp;ldquo;My Security Credentials&amp;rdquo;. Once you have a key id and secret key, you need to create the credentials files as used by &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;awscli&lt;/a&gt;. You can either install awscli and run &lt;code&gt;aws configure&lt;/code&gt;, else create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/.aws/default:
[default]
output = JSON
region = us-east

~/.aws/config:
[default]
aws_access_key_id = XXXXXXXXXXXX
aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the region value to the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html&#34;&gt;AWS region&lt;/a&gt; you want to use, and replace the &amp;ldquo;XXX&amp;rdquo; values with your own key id and secret key values. These files are stored in a different &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence&#34;&gt;location&lt;/a&gt; on Windows.&lt;/p&gt;

&lt;h3 id=&#34;create-an-s3-bucket&#34;&gt;Create an S3 bucket&lt;/h3&gt;

&lt;p&gt;S3 organizes files by bucket. Every bucket has URI-like name, which is unique across AWS. So if you&amp;rsquo;re going to host a website on S3, you&amp;rsquo;ll need to create a bucket for the website. This can be done via the AWS &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;web interface&lt;/a&gt;, the command-line &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/reference/s3/mb.html&#34;&gt;app&lt;/a&gt; or with Paws:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;);
$s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateBucket(Bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mystaticwebsite.com&amp;#39;&lt;/span&gt;, ACL &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ACL&lt;/code&gt; argument specifies that the bucket can be read publicly, but not edited, which makes sense for website files. At some point, you&amp;rsquo;ll need to enable the &amp;ldquo;static web hosting&amp;rdquo; &lt;a href=&#34;https://console.aws.amazon.com/s3/buckets/&#34;&gt;option&lt;/a&gt; for the bucket, but that&amp;rsquo;s not necessary to upload files to it.&lt;/p&gt;

&lt;h3 id=&#34;upload-files-to-s3&#34;&gt;Upload files to S3&lt;/h3&gt;

&lt;p&gt;S3 files are stored as objects in buckets. Every file has a key, which is similar to the filename. I&amp;rsquo;ve developed a &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;script&lt;/a&gt; called &lt;code&gt;s3-upload&lt;/code&gt; which uses Paws to upload files to S3 buckets. It uses &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to parse command line options. It requires &lt;code&gt;--bucket&lt;/code&gt; for the S3 bucket name, &lt;code&gt;--region&lt;/code&gt; for the AWS region, and &lt;code&gt;--files&lt;/code&gt; for the directory filepath:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Path::Tiny &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bucket=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BUCKET,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BASEPATH,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete-stale&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DELETE_STALE,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;must provide --bucket --region --files&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $BUCKET &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $BASEPATH;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory $BASEPATH not found&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d $BASEPATH;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $remote_objects &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_remote_objects($s3);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_objects  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upload($s3, $remote_objects);

delete_stale_objects($s3, $remote_objects, $local_objects) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $DELETE_STALE;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve omitted the subroutine definitions for brevity (see the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; for details). The script begins by validating the input options, then creates an &lt;code&gt;$s3&lt;/code&gt; object. It calls &lt;code&gt;get_remote_objects&lt;/code&gt; which returns a hashref of keys (files) and their last modified time currently in the bucket. It passes this to &lt;code&gt;upload&lt;/code&gt; which only uploads files that have been modified since being uploaded to S3 (you don&amp;rsquo;t want to upload the entire website if only one file has changed). &lt;code&gt;upload&lt;/code&gt; does many things, but essentially, it uses &lt;a href=&#34;https://metacpan.org/pod/Paws::S3::PutObject&#34;&gt;PutObject&lt;/a&gt; to upload files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  $s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;PutObject(
    Bucket  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $BUCKET,
    Key     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $key,
    ACL     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;,
    Body    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $path&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;slurp_raw,
  );
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;Key&lt;/code&gt; is the filename and &lt;code&gt;Body&lt;/code&gt; the raw bytes of the file. The &lt;code&gt;upload&lt;/code&gt; subroutine also returns a hashref of local keys and their last modified time. Optionally, the script can call &lt;code&gt;delete_stale_objects&lt;/code&gt; which deletes files from S3 which do not exist in the local tree.&lt;/p&gt;

&lt;p&gt;The script can be run like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will print any files uploaded to STDOUT and all other output to STDERR. The intention is to make it possible to pipe the filenames uploaded to other programs. A useful one might be a Cloudfront script which invalidates the cache for any files uploaded.&lt;/p&gt;

&lt;h3 id=&#34;more-features&#34;&gt;More features&lt;/h3&gt;

&lt;p&gt;Whilst the above script does the job, there are some features missing that are useful for static websites. Firstly, you might want to specify the MIME type of the files being uploaded. This is so when browsers fetch the files, S3 responds with the correct content type &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&#34;&gt;header&lt;/a&gt;. Otherwise, HTML files may not be displayed as websites, images may be downloaded instead of displayed, and so on. I use &lt;a href=&#34;https://metacpan.org/pod/Media::Type::Simple&#34;&gt;Media::Type::Simple&lt;/a&gt; for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Media::Type::Simple;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# setup mime types, add missing&lt;/span&gt;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime_types, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $MIME_TYPES &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t find $MIME_TYPES $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $media &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Media::Type::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($mime_types);
$media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/font-woff2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ext  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $path &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\.(\w+)$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval { @ext ? $media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;type_from_ext($ext[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) : undef };
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; STDERR $@ &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $@;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve uploaded a copy of &lt;code&gt;mime.types&lt;/code&gt; to the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/mime.types&#34;&gt;repo&lt;/a&gt;, and added a &lt;code&gt;--mime-types&lt;/code&gt; option for the filepath to a mime.types file (defaulting to &lt;code&gt;/etc/mime.types&lt;/code&gt;). Also not all media types are defined, so the code adds a custom definition for &lt;code&gt;woff2&lt;/code&gt;. The mime type is passed to &lt;code&gt;PutObject&lt;/code&gt; when a file is uploaded.&lt;/p&gt;

&lt;p&gt;Other useful options supported by the script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--strip&lt;/code&gt;- it seems cleaner to visit: &lt;code&gt;/home&lt;/code&gt; than &lt;code&gt;/home.html&lt;/code&gt;. The &lt;code&gt;--strip&lt;/code&gt; option can be used to specify any extensions to strip from filenames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--max-age&lt;/code&gt; - set a cache control header to have browsers cache files instead of downloading them on every page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt; - override the default behavior and upload all files, regardless of whether they already exist in the S3 bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These options can be used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale --mime-types mime.types --strip html --max-age 31536000 --force
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; is on GitHub. If you need help configuring a static website for AWS, Amazon have provided a good &lt;a href=&#34;http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

