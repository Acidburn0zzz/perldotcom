<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test_exception on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/test_exception/</link>
    <description>Recent content in Test_exception on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Mar 2015 13:27:17 +0000</lastBuildDate>
    <atom:link href="/tags/test_exception/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to test for exceptions in Perl</title>
      <link>http://localhost:1313/article/157/2015/3/5/How-to-test-for-exceptions-in-Perl/</link>
      <pubDate>Thu, 05 Mar 2015 13:27:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/157/2015/3/5/How-to-test-for-exceptions-in-Perl/</guid>
      <description>

&lt;p&gt;Most Perl programmers are familiar with &lt;a href=&#34;https://metacpan.org/pod/Test::More&#34;&gt;Test::More&lt;/a&gt;; it&amp;rsquo;s the go-to library for writing unit tests in Perl. But Test::More doesn&amp;rsquo;t provide functions for testing exceptions. For that you&amp;rsquo;ll need &lt;a href=&#34;https://metacpan.org/pod/Test::Exception&#34;&gt;Test::Exception&lt;/a&gt;. And good code throws exceptions - Paul Fenwick &lt;a href=&#34;http://perltraining.com.au/tips/2008-08-20.html&#34;&gt;once&lt;/a&gt; summed this approach nicely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bIlujDI&#39; yIchegh()Qo&#39;; yIHegh()!

It is better to die() than to return() in failure.

    -- Klingon programming proverb.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The simplest way to throw an exception is with Perl&amp;rsquo;s built-in &lt;code&gt;die&lt;/code&gt; function. Just like Test::More makes it easy to test that subroutines return the right values, Test::Exception makes it easy to check the code is &lt;em&gt;dying&lt;/em&gt; in the right way (and &lt;a href=&#34;https://metacpan.org/pod/Test::Fatal&#34;&gt;Test::Fatal&lt;/a&gt; is a good alternative).&lt;/p&gt;

&lt;h3 id=&#34;did-my-code-die-ok&#34;&gt;Did my code die ok?&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;re writing unit tests for the following package which exports the &lt;code&gt;double_integer&lt;/code&gt; subroutine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Double;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Exporter;
@ISA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Exporter&amp;#39;&lt;/span&gt;;
@EXPORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double_integer&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($number) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() requires a positive integer as an argument&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; defined $number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $number &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^\d+$/&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code will &lt;code&gt;die&lt;/code&gt; unless the double_integer subroutine is called with a positive integer. I&amp;rsquo;ll save this package as &lt;code&gt;Double.pm&lt;/code&gt;. Let&amp;rsquo;s write a test script for this package. Test::Exception exports the &lt;code&gt;dies_ok&lt;/code&gt; function that checks the code dies as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::Exception tests &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Double;

dies_ok { double_integer() } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with no number&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dies_ok&lt;/code&gt; is clever, it won&amp;rsquo;t actually let your code die and the program exit, as that would interrupt testing! Instead it catches any thrown exceptions so testing can continue. My program should also die if &lt;code&gt;double_integer&lt;/code&gt; is called with a non-number as an argument. I can add more tests for some common scenarios:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::Exception test &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Double;

dies_ok { double_integer() } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with no number&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(undef) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with undef&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with text&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1 two&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with mixed&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-7&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with a negative&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.5&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with a decimal&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can also check the code throws the right exception with &lt;code&gt;throws_ok&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::Exception tests &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Double;

throws_ok { double_integer() } &lt;span style=&#34;color:#e6db74&#34;&gt;qr/requires a positive integer/&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() requires a positive integer&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;throws_ok&lt;/code&gt; function checks that the code throws an exception, but also that the exception message matches a regex. This is useful if you have several different conditions that may throw different types of exceptions: imagine with a web application, you&amp;rsquo;d want to throw a different exception code if the user requested a page they didn&amp;rsquo;t have permission to access (403) versus requesting a non-existent page (404).&lt;/p&gt;

&lt;p&gt;Test::Exception is fully compatible with Test::More so you can combine functions from both libraries in the same file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::Exception;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Double;

&lt;span style=&#34;color:#75715e&#34;&gt;# test arg validation works&lt;/span&gt;
dies_ok { double_integer() } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with no number&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(undef) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with undef&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with text&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1 two&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with mixed&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-7&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with a negative&amp;#39;&lt;/span&gt;;
dies_ok { double_integer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.5&amp;#39;&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() dies with a decimal&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# test exception message&lt;/span&gt;
throws_ok { double_integer() } &lt;span style=&#34;color:#e6db74&#34;&gt;qr/requires a positive integer/&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double_integer() requires a positive integer&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# test double_integer works&lt;/span&gt;
lives_ok { double_integer(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calling double() with a number lives&amp;#39;&lt;/span&gt;;
is double_integer(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zero doubled is zero&amp;#39;&lt;/span&gt;;
is double_integer(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two doubled is four&amp;#39;&lt;/span&gt;;
is double_integer(&lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;, 
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nine nine nine doubled is one nine nine eight&amp;#39;&lt;/span&gt;;

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the test script checks both that the function throws the appropriate exception when the argument is wrong, and it returns the argument doubled when the argument is valid. If I save this test file as &lt;code&gt;Double.t&lt;/code&gt; I can run the tests at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl Double&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; number
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with undef
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with text
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with mixed
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with a negative
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() dies with a decimal
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; double_integer() requires a positive integer
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; calling double() with a number lives
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; zero doubled is zero
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; two doubled is four
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nine nine nine doubled is one nine nine eight
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the tests pass. &lt;a href=&#34;https://metacpan.org/pod/Test::Exception&#34;&gt;Test::Exception&lt;/a&gt; has great documentation and is easy to use, so add exception testing to your code today!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Added Test::Fatal reference 2015-03-10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

