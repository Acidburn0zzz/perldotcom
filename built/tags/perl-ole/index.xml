<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Ole on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-ole/</link>
    <description>Recent content in Perl Ole on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Apr 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-ole/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Automating Windows Applications with Win32::OLE</title>
      <link>http://localhost:1313/pub/2005/04/21/win32ole.html/</link>
      <pubDate>Thu, 21 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/21/win32ole.html/</guid>
      <description>

&lt;h3 id=&#34;getting-my-feet-wet&#34;&gt;Getting My Feet Wet&lt;/h3&gt;

&lt;p&gt;My first glimpse of the Internet happened at Lotus Development somewhere around 1994. A Mosaic demonstration duly impressed me. A few months later, working at a small Cambridge, MA company called Dataware brought me closer to the online revolution.&lt;/p&gt;

&lt;p&gt;I landed a job at America Online in 1995 working for their browser team. They originally had their own browser, which they had purchased from CMGI. It was kind of cool at the time because it included a tabbed frames feature about eight years before the Gecko engine.&lt;/p&gt;

&lt;p&gt;It was there that Pete Deschanes wrote a tool using Microsoft Visual Test to automate the America Online embedded web browser. I was especially interested in certain functions he was using that captured browser events.&lt;/p&gt;

&lt;p&gt;Later, I moved on to a company in Chelmsford, MA that was using OLE Automation to drive the translation of Microsoft Word Documents into Fax documents. Rob Murtha explained a lot to me about OLE Automation and introduced me to Perl and Java.&lt;/p&gt;

&lt;h3 id=&#34;washed-up&#34;&gt;Washed Up&lt;/h3&gt;

&lt;p&gt;The internet bubble burst for me in 2002 and I wound up stranded on the shores of Fidelity Investments as a manual tester for one of their many investment Web page groups. After a few weeks of manual testing, I was ready to automate several of my tasks.&lt;/p&gt;

&lt;p&gt;There was a problem. There were plenty of available Winrunner licenses, but I was not allowed to use them because I was not part of their automation group. In fact, I was reprimanded and almost lost my job for being too persistent in asking to use one. Then I decided to write my own automation tool.&lt;/p&gt;

&lt;p&gt;I had experience with C, C++, Java, and Perl. I decided to start with a scripting language just to get a prototype going. I also thought it would be cool to have a real open source script language to write code with instead of something that a few engineers had developed exclusively for Web automation.&lt;/p&gt;

&lt;p&gt;My process consisted of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask a question.&lt;/li&gt;
&lt;li&gt;Do some research.&lt;/li&gt;
&lt;li&gt;Write some code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The first thing I needed to do was to see if I could start &lt;code&gt;IExplore.exe&lt;/code&gt; from Perl. I knew I did not want to simply start the process with &lt;code&gt;system(&amp;quot;C:\\Program Files\\Internet Explorer\\IExplore.exe&amp;quot;);&lt;/code&gt;. Yes, I could get IE up and running that way, but I would not be able to do anything useful with it except to kill it.&lt;/p&gt;

&lt;p&gt;I noticed that Active Perl contained an interesting module called &lt;a href=&#34;https://metacpan.org/pod/Win32::OLE&#34;&gt;Win32::OLE&lt;/a&gt;. I opened the &lt;em&gt;OLE.pm&lt;/em&gt; file and began to read the comments.&lt;/p&gt;

&lt;p&gt;Comments like this looked very promising:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This module provides an interface to OLE Automation from Perl. OLE Automation brings VisualBasic-like scripting capabilities and offers powerful extensibility and the ability to control many Win32 applications from Perl scripts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one also looked pretty good:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;MessageLoop()&lt;/code&gt; class method will run a standard Windows message loop, dispatching messages until the &lt;code&gt;QuitMessageLoop()&lt;/code&gt; class method is called. It is used to wait for OLE events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping in mind that faith is the substance of things hoped for and the evidence of things not seen, I set about to write a Simple Automation Module for Internet Explorer using Active Perl&amp;rsquo;s &lt;code&gt;Win32::OLE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going back to the &lt;code&gt;Win32::OLE&lt;/code&gt; documentation I found out how to start IE through the COM object. I translated some examples for Excel and Word and wound up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE = Win32::OLE-&amp;gt;new(&amp;quot;InternetExplorer.Application&amp;quot;)
    || die &amp;quot;Could not start Internet Explorer.Application\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was nice, but nothing appeared on my computer screen. I could hear the hard drive making a sound like it was starting an application but I couldn&amp;rsquo;t see Internet Explorer. I decided to Google for some examples. The information out there was very sparse but I found something that set the visible attribute to 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE-&amp;gt;{visible} = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time Internet Explorer appeared with a blank screen. It was a start. I figured that there were a bunch of IE processes that I could not see on my machine from my previous efforts, so I killed those using the task manager.&lt;/p&gt;

&lt;p&gt;Next, I started a free Microsoft tool called &lt;code&gt;OLEVIEW.exe&lt;/code&gt;. This gave me a tree view of all automation objects registered on my machine. There were hundreds of them. I found the one called Internet Explorer (Ver. 1.0) and expanded the tree looking for methods. &lt;code&gt;IWebBrowser2&lt;/code&gt; looked interesting so I clicked on that and selected the View Type Info button. Out popped up a new window with a list of methods. This was looking better all the time.&lt;/p&gt;

&lt;p&gt;I clicked on a method called &lt;code&gt;Navigate&lt;/code&gt; and saw:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id(0x00000068), helpstring(&amp;quot;Navigates to a URL or file.&amp;quot;)].
void Navigate(
    [in] BSTR URL,
    [in, optional] VARIANT* Flags,
    [in, optional] VARIANT* TargetFrameName,
    [in, optional] VARIANT* PostData,
    [in, optional] VARIANT* Headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided to try it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$IE-&amp;gt;Navigate(&amp;quot;http://www.google.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I had navigated to my first website with my new automation tool.&lt;/p&gt;

&lt;h3 id=&#34;on-the-road&#34;&gt;On the Road&lt;/h3&gt;

&lt;p&gt;I knew I was getting close to hitting the wall. I had seen through Google and newsgroups that lots of folks had reached this point in the game and turned around. Remembering back to Pete Deschanes&amp;rsquo; Visual Test Tool, I was certain that I could make more progress if I could capture Internet Explorer&amp;rsquo;s events. I went back to the &lt;em&gt;OLE.pm&lt;/em&gt; documentation to do a little more reading about events.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=item Win32::OLE-&amp;gt;WithEvents(OBJECT[, HANDLER[, INTERFACE]])

This class method enables and disables the firing of events by
the specified OBJECT.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I could just grok what &lt;code&gt;OBJECT&lt;/code&gt;, &lt;code&gt;HANDLER&lt;/code&gt;, and &lt;code&gt;INTERFACE&lt;/code&gt; represented, I felt that I could get my events. I made some guesses.&lt;/p&gt;

&lt;p&gt;The Object: that would be what &lt;code&gt;Win32::OLE-&amp;gt;new()&lt;/code&gt; returned. Everyone knows you instantiate an object with the &lt;code&gt;new&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;The Handler: I read further through &lt;em&gt;OLE.pm&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HANDLER argument to &lt;code&gt;Win32::OLE-&amp;gt;WithEvents()&lt;/code&gt; can either be a CODE reference or a package name. In the first case, all events will invoke this particular function. The first two arguments to this function will be the OBJECT itself and the name of the event. The remaining arguments will be event-specific.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;WithEvents($Obj, \&amp;amp;Event);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I understood that &lt;code&gt;WithEvents&lt;/code&gt; was going to tell Internet Explorer to call my Perl Handler whenever IE fired an event. I had to give the &lt;code&gt;WithEvents&lt;/code&gt; call a reference to my subroutine like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\&amp;amp;Event
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What was the Interface name going to be? I went back to OLEVIEWER and looked through the interface folder. It looked like &lt;code&gt;DwebBrowserEvents2&lt;/code&gt; would deliver what I wanted.&lt;/p&gt;

&lt;p&gt;This is what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;WithEvents($IE,\&amp;amp;Event,&amp;quot;DWebBrowserEvents2&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all I needed was to write an Event subroutine for IE to call. The &lt;em&gt;OLE.pm&lt;/em&gt; comments told me that &amp;ldquo;the first two arguments to this function will be the OBJECT itself and the name of the event&amp;rdquo;, so I just used the document example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot;Event triggered: &#39;$Event&#39;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I noticed that there was a third argument called &lt;code&gt;@Args&lt;/code&gt; and assumed that this was there to catch all other unknown parameters for each event.&lt;/p&gt;

&lt;p&gt;How was I going to block my code to wait for the events to transpire? I returned to the &lt;em&gt;Win32::OLE&lt;/em&gt; comments:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;MessageLoop()&lt;/code&gt; class method will run a standard Windows message loop, dispatching messages until the &lt;code&gt;QuitMessageLoop()&lt;/code&gt; class method is called. It is used to wait for OLE events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I added this code, just to see if I could capture IE events:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;MessageLoop();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;i-ve-been-to-the-mountain-top&#34;&gt;I&amp;rsquo;ve Been to the Mountain Top&lt;/h3&gt;

&lt;p&gt;It was quite a moment when I saw these events pouring out of my nine lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Event triggered: CommandStateChange
Event triggered: OnVisible
Event triggered: PropertyChange
Event triggered: BeforeNavigate2
Event triggered: DownloadBegin
Event triggered: StatusTextChange
Event triggered: ProgressChange
Event triggered: FileDownload
Event triggered: DownloadComplete
Event triggered: TitleChange
Event triggered: NavigateComplete2
Event triggered: OnQuit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Internet Explorer was firing off events and its COM object was calling my Perl Event subroutine.&lt;/p&gt;

&lt;p&gt;From here, I kept searching the newsgroups. I found one sentence where someone mentioned acquiring the DOM from the &lt;code&gt;DocumentComplete&lt;/code&gt; Event. I knew this was a key, but how could I take this reference using Perl?&lt;/p&gt;

&lt;p&gt;I read up about the DOM. I borrowed a book from someone at work. &lt;a href=&#34;http://msdn.microsoft.com/workshop/author/dhtml/reference/dhtml_reference_entry.asp&#34;&gt;Microsoft has their own version&lt;/a&gt; of the DOM called DHTML and I came across their Web page. After reading this documentation for a while, I saw that the DOM could give me everything I needed to have a full-blown automation tool. All I needed was the reference.&lt;/p&gt;

&lt;h3 id=&#34;finding-the-dom&#34;&gt;Finding the DOM&lt;/h3&gt;

&lt;p&gt;I broke up my Event subroutine into pieces. I wanted to do something different for each triggered event. Specifically I wanted to try to take a reference to the DOM when the &lt;code&gt;DocumentComplete&lt;/code&gt; event triggered. My idea was that if I shifted out the first element of the @Args array, I would find the reference I was looking for. I rewrote the Event subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot; Event triggered: $Event\n&amp;quot;;
    if ($Event eq &amp;quot;DocumentComplete&amp;quot;) {
        $IEObject = shift @Args;
        print &amp;quot;Here is my reference: $IEObject\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This printed out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is the Event: DocumentComplete
Here is my reference: Win32::OLE=HASH(0x1a524fc)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was looking better all the time.&lt;/p&gt;

&lt;p&gt;I had a reference, but was it to the DHTML on the page that had just loaded? There was only one way to find out: could I use it to make a DHTML call? I looked on the Microsoft DHTML reference page for a property that would tell me I had a reference. &lt;code&gt;URL&lt;/code&gt; looked like a good one, so I tried this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &amp;quot;URL: &amp;quot; . $IEObject-&amp;gt;URL . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That gave me nothing. I went back to the OLEVIEWER and found this interesting method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id(0x000000cb), propget, helpstring(&amp;quot;Returns the active 
   Document automation object, if any.&amp;quot;)]
IDispatch* Document();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Active document sounded good, so I tried:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &amp;quot;URL: &amp;quot; . $IEObject-&amp;gt;Document-&amp;gt;URL . &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gave me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;URL: http://www.google.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Golden! My next step was to find a way to break out of the &lt;code&gt;MessageLoop()&lt;/code&gt; I was in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE-&amp;gt;QuitMessageLoop();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;going-on-home&#34;&gt;Going On Home&lt;/h3&gt;

&lt;p&gt;My last step was to do something more useful with my reference to the DHTML. It was time to write a subroutine that would enter text into an edit box. That would seal my proof of concept.&lt;/p&gt;

&lt;p&gt;Other automation tools need you to make a GUI map (Mercury Winrunner) or an include file (Segue Silk) of every page you view before running the automation. I wanted something that would just look through the code that was already on the page and pick out a control on the fly using the power of regular expressions.&lt;/p&gt;

&lt;p&gt;I found all of the methods and properties in the following example in the &lt;a href=&#34;http://msdn.microsoft.com/workshop/author/dhtml/reference/dhtml_reference_entry.asp&#34;&gt;Microsoft DHTML API documentation&lt;/a&gt;. First I needed a name for my subroutine. &lt;code&gt;SetEditBox&lt;/code&gt; seemed easy to understand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I need to pass in two parameters. The first would be the name of the control and the second would set the text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name,$value) = @_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to start with the document object from my reference to the DOM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name,$value) = @_;
    $IEDocument = $IEObject-&amp;gt;{Document};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save time iterating, I made the assumption that edit boxes would only appear inside forms. I used the collection called &lt;code&gt;forms&lt;/code&gt; to return all forms on the page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$forms = $IEDocument-&amp;gt;forms;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it was time to iterate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for ($i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I needed each item in the form collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$form = $forms-&amp;gt;item($i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside this iteration I wanted to find a specific element of the form with the name of the edit box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (defined($form-&amp;gt;elements($name))) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside this if statement I wanted to set the value of the edit box to the value passed into the subroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it was time to get out of Dodge so I wouldn&amp;rsquo;t waste time continuing the iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the final initial subroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub SetEditBox {
    my ($name, $value) = @_;
    my $IEDocument     = $IEObject-&amp;gt;{Document};
    my $forms          = $IEDocument-&amp;gt;forms;

    for (my $i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
        my $form       = $forms-&amp;gt;item($i);
        if (defined($form-&amp;gt;elements($name))) {
           $form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
        }
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is something very similar to the first original proof of concept version of &lt;a href=&#34;http://samie.sourceforge.net&#34;&gt;SAMIE&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Win32::OLE qw(EVENTS);
my $URL = &amp;quot;http://samie.sf.net/simpleform.html&amp;quot;;
my $IE  = Win32::OLE-&amp;gt;new(&amp;quot;InternetExplorer.Application&amp;quot;)
    || die &amp;quot;Could not start Internet Explorer.Application\n&amp;quot;;
Win32::OLE-&amp;gt;WithEvents($IE,\&amp;amp;Event,&amp;quot;DWebBrowserEvents2&amp;quot;);

$IE-&amp;gt;{visible} = 1;

$IE-&amp;gt;Navigate($URL);

Win32::OLE-&amp;gt;MessageLoop();
SetEditBox(&amp;quot;name&amp;quot;,&amp;quot;samie&amp;quot;);

sub Event {
    my ($Obj,$Event,@Args) = @_;
    print &amp;quot;Here is the Event: $Event\n&amp;quot;;
    if ($Event eq &amp;quot;DocumentComplete&amp;quot;) {
        $IEObject = shift @Args;
        print &amp;quot;Here is my reference: $IEObject\n&amp;quot;;
        print &amp;quot;URL: &amp;quot; .  $IEObject-&amp;gt;Document-&amp;gt;URL . &amp;quot;\n&amp;quot;;
            Win32::OLE-&amp;gt;QuitMessageLoop();
    }
}

sub SetEditBox {
    my ($name, $value) = @_;
    my $IEDocument     = $IEObject-&amp;gt;{Document};
    my $forms          = $IEDocument-&amp;gt;forms;

    for (my $i = 0; $i &amp;lt; $forms-&amp;gt;length; $i++) {
        my $form       = $forms-&amp;gt;item($i);
        if (defined($form-&amp;gt;elements($name))) {
           $form-&amp;gt;elements($name)-&amp;gt;{value} = $value;
        }
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It made me laugh and tip my hat to Larry Wall, to think that I had the basic proof of concept of a $3,000 dollar per seat automation tool with about thirty lines of Perl. See more at the &lt;a href=&#34;http://samie.sourceforge.net/&#34;&gt;SAMIE home page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

