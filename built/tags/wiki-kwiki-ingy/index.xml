<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wiki Kwiki Ingy on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/wiki-kwiki-ingy/</link>
    <description>Recent content in Wiki Kwiki Ingy on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 May 2003 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/wiki-kwiki-ingy/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CGI::Kwiki</title>
      <link>http://localhost:1313/pub/2003/05/14/kwiki.html/</link>
      <pubDate>Tue, 13 May 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/05/14/kwiki.html/</guid>
      <description>

&lt;p&gt;This article is about a new Perl module called CGI::Kwiki. With this module you can create a &lt;strong&gt;Wiki Web site&lt;/strong&gt; in less than a minute. Now that&amp;rsquo;s quick. Or more appropriately, ``That&amp;rsquo;s Kwik!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve not heard of a Wiki, it&amp;rsquo;s a Web site that allows you to add and edit pages directly from your browser. Generally, every page on the site has a link or button that will let you edit the page that you are reading. When you edit a page, the raw contents of that page come up in a text edit area in your browser. You can make any changes you want. When you hit the &lt;em&gt;SAVE&lt;/em&gt; button, the changes become live.&lt;/p&gt;

&lt;p&gt;To create a new page, you just create a link on the current page to a page that didn&amp;rsquo;t exist before. Then when you follow the new link, you are allowed to edit the new page.&lt;/p&gt;

&lt;p&gt;Knowledge of HTML is not a prerequisite for using a Wiki. It&amp;rsquo;s not even a requisite, because the raw Wiki contents that you edit are not presented as HTML. Wikis use a much more natural markup, that resembles the messages posted in Usenet news groups. An example can speak for itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    == A Page Header for a Sample Wiki Page ==

    Here&#39;s list of some WikiFormattingCodes:
    * Lines that begin &#39;* &#39; form a bulleted list
    * Asterisks might be used to mean *bold* text
    * Links like http://www.perl.com work automatically
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only markup that should require further explanation is the text &lt;code&gt;WikiFormattingCodes&lt;/code&gt;. Capitalized words that are mushed together form a link to another page on the Wiki site.&lt;/p&gt;

&lt;p&gt;A Wiki is simply a Web site that is easy for ordinary people to edit. So where did the Wiki idea come from and why is it important?&lt;/p&gt;

&lt;h3 id=&#34;span-id-ward-s-wiki-wisdom-ward-s-wiki-wisdom-span&#34;&gt;&lt;span id=&#34;ward&#39;s wiki wisdom&#34;&gt;Ward&amp;rsquo;s Wiki Wisdom&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve only been dabbling in the world of Wiki for less than a year. Rather than answer that question myself, I decided to ask the inventor of the Wiki. Now by pure coincidence, Ward Cunningham lives but a few miles from my house and well with in my telephone area code. I decided to drop him a line, and find out his innermost feelings on his creation:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: Yes, hello. May I speak to Mr. Ward Cunningham?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Who is this?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: This is Brian Ingerson from Perl.com. I have a few questions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Perl?! That&amp;rsquo;s not me! &lt;strong&gt;Wall&lt;/strong&gt; is to blame. Call him.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: No. Wait. It&amp;rsquo;s about the Wiki.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Ah, yes. The Wiki. Well let&amp;rsquo;s get to business.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: Why did you invent the Wiki?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Wiki had a predecessor that was a hyper-card stack. I wrote it to explore hypertext. I wanted to try recording something that was ragged, something that wouldn&amp;rsquo;t fit into columns. I had this pet theory that programming ideas were spread by people working together. I set out to chart the flow of ideas through my company (then Tektronix). This turned out to be more fun than I ever would have imagined.&lt;/p&gt;

&lt;p&gt;When we were really trying to capture a programmer&amp;rsquo;s experience in software patterns, I remembered that stack and set out to do it over with the technology of the moment, the World Wide Web. This was 1994. I wrote Wiki to support and enlarge the community writing software patterns.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: What do you see as Wiki&amp;rsquo;s most-positive contribution to the world?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Back in 1994, the Web was a pretty wonderful place, with lots of people putting up stuff just because they thought someone else would find it interesting or useful. Wiki preserves that feeling in a place that has become too much of a shopping mall. It reminds people that sometimes to work together you have to trust each other more than you have any reason to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: Are you concerned that there are so many different Wiki implementations?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: I was concerned once. I wish everyone used my markup instead of inventing their own. But that didn&amp;rsquo;t happen. Now I realize that the implementations have done more to spread the idea than I ever could with my one version. That is the way it is with really simple things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: What programming language is your Wiki written in?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ward&lt;/em&gt;: Um, &amp;hellip; Perl.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian&lt;/em&gt;: Tell me about that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;click&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-wikis-wikis-everywhere-wikis-wikis-everywhere-span&#34;&gt;&lt;span id=&#34;wikis wikis everywhere&#34;&gt;Wikis Wikis Everywhere&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Just in case you didn&amp;rsquo;t visualize the tongue entering and exiting my cheek, Ward does not have anything against Perl. To the contrary, he does almost all his open-source development with it, including his Wiki software. Try visiting his Wiki site, &lt;a href=&#34;http://c2.com/cgi/wiki&#34;&gt;http://c2.com/cgi/wiki&lt;/a&gt;, for an excellent introduction to Wiki.&lt;/p&gt;

&lt;p&gt;As was pointed out, there are many many implementations that have sprung forth since the Wiki was invented, and many of those were written in Perl. That&amp;rsquo;s because a Wiki is fairly easy to implement and everyone seems to want to do it slightly differently.&lt;/p&gt;

&lt;p&gt;Most of these implementations are just simple CGI scripts at heart. Even though they may have gathered dozens of special features over the years, they are really just ad hoc programs that are not particularly modularized or designed for extensibility.&lt;/p&gt;

&lt;p&gt;One notable exception is the CGI::Wiki module by Kate ``Kake&amp;rdquo; Pugh. This relatively new CPAN distribution is designed to be a &lt;strong&gt;Wiki framework&lt;/strong&gt;. The various bits of functionality are encapsulated into class modules that can be extended by end users. As far as I know, this project is the first attempt in Perl to modularize the Wiki concept. It&amp;rsquo;s about time!&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;second attempt&lt;/em&gt; is a completely different module called CGI::Kwiki; the subject of this article. When I evaluated CGI::Wiki, I found it a little too &lt;em&gt;heavy&lt;/em&gt; for my needs. It had about a dozen prerequisite modules and required an SQL database. CGI::Kwiki by comparison requires no extra modules besides those that come with Perl, and stores its Web pages as plain text files.&lt;/p&gt;

&lt;p&gt;I find this preferable, because I can install a new Kwiki in seconds (literally) and I have the full arsenal of Unix commands at my disposal for manipulating the content. In fact, the default search facility for CGI::Kwiki is just a method call that invokes the Unix command &lt;code&gt;grep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another compelling aspect of CGI::Kwiki is that every last bit of it is extensible, and extending it is trivial. About the only thing you can&amp;rsquo;t easily change is the fact that it is written in Perl.&lt;/p&gt;

&lt;p&gt;Because of this, I have probably set up more than a dozen Kwiki sites in the past month, and customized each one according to my needs. In this article, I&amp;rsquo;ll show you how to do the same thing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-kwikest-way-to-start-the-kwikest-way-to-start-span&#34;&gt;&lt;span id=&#34;the kwikest way to start&#34;&gt;The Kwikest Way to Start&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So just how easy is it to install a Kwiki? Well, that depends on how many of the basics you already have in place. You need a Web server and Perl, of course. You also need to have the CGI::Kwiki module installed from CPAN. That&amp;rsquo;s about it.&lt;/p&gt;

&lt;p&gt;For the sake of a specific example, let&amp;rsquo;s say that you are running the Apache Web server (version 1.3.x) and that &lt;code&gt;/home/johnny/public_html/cgi-bin/&lt;/code&gt; is a CGI-enabled directory. With that setup in place, you can issue the following commands to create a new Kwiki:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cd /home/johnny/public_html/cgi-bin/
    mkdir my-kwiki
    cd my-kwiki
    kwiki-install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! Your Kwiki is installed and ready for action. You should be able to point your Web browser at:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://your-domain/~johnny/cgi-bin/my-kwiki/index.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and begin your wiki adventure.&lt;/p&gt;

&lt;p&gt;At this point, if you do an &lt;code&gt;ls&lt;/code&gt; command inside the &lt;code&gt;my-kwiki&lt;/code&gt; directory, then you should see two files (&lt;code&gt;index.cgi&lt;/code&gt; and &lt;code&gt;config.yaml&lt;/code&gt;). &lt;code&gt;index.cgi&lt;/code&gt; is just a point of execution for the CGI::Kwiki class modules, and config.yaml is little more than a list of which class modules are being used. You should also see a directory called &lt;code&gt;database&lt;/code&gt;, where all your Kwiki pages are stored as individual plain text files.&lt;/p&gt;

&lt;p&gt;These files will become important later as we explore how to customize Kwiki to your personal needs or whims.&lt;/p&gt;

&lt;p&gt;If you are having trouble configuring Apache for CGI, then here is the basic &lt;code&gt;httpd.conf&lt;/code&gt; section that I use for my personal Kwikis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Alias /kwiki/ /home/ingy/kwiki/
    &amp;lt;Directory /home/ingy/kwiki/&amp;gt;
        Order allow,deny
        Allow from all
        Options ExecCGI FollowSymLinks Indexes
        AddHandler cgi-script .cgi
        DirectoryIndex index.cgi
    &amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows me to connect with this URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://localhost/kwiki/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-using-your-kwiki-using-your-kwiki-span&#34;&gt;&lt;span id=&#34;using your kwiki&#34;&gt;Using Your Kwiki&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;When you first visit your newly installed Kwiki, you&amp;rsquo;ll notice that there are a number of default pages already installed. Most notably is the one called HomePage, because that&amp;rsquo;s the one you&amp;rsquo;ll see first. This page requests that you change it as soon as possible. Go ahead and give it a try. Click the &lt;code&gt;EDIT&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;You should see the text of HomePage laid out in Kwiki format inside an editable text area. Make some changes and click the &lt;code&gt;SAVE&lt;/code&gt; button. The first thing you&amp;rsquo;ll probably want to know is exactly how all the little Kwiki markup characters work.&lt;/p&gt;

&lt;h4 id=&#34;span-id-kwikiformattingrules-kwikiformattingrules-span&#34;&gt;&lt;span id=&#34;kwikiformattingrules&#34;&gt;KwikiFormattingRules&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;CGI::Kwiki has a set of default formatting rules that reflect my favorites from other Wikis. Some are from WardsWiki, some from MoinMoin, some from UseMod. All of them are customizable. More on that shortly. For now, let&amp;rsquo;s go over the basics.&lt;/p&gt;

&lt;p&gt;The first thing to learn is how to create a link. A link to another page on the site is made by squishing two or more words together in CamelCase. If the page doesn&amp;rsquo;t exist yet, then that&amp;rsquo;s OK. Clicking on it will allow you to create the new page from scratch. This is how Wikis grow.&lt;/p&gt;

&lt;p&gt;You can also create an external link by simply starting some text with &lt;code&gt;http:&lt;/code&gt;. Like &lt;a href=&#34;http://c2.com/cgi/wiki&#34;&gt;http://c2.com/cgi/wiki&lt;/a&gt;, the original Wiki Web site. Sometimes you want an internal link that isn&amp;rsquo;t CamelCase. Just put the link text inside square brackets. If you want the link to be external, then add the &lt;code&gt;http:&lt;/code&gt; component inside the brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [check_this_out]
    [check this out http://checked.out]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second most-common formatting rule I use is preformatted text. This is used for things like Perl code examples. Text that is preformatted is automatically immune to futher Wiki processing. To mark text as preformatted you just indent it. This is similar to the approach that POD takes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub backwards_string {
            return join &#39;&#39;, reverse split &#39;&#39;, shift;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the FormattingRules that I personally like is the ability to create HTML tables. You do it like this (if you&amp;rsquo;re a bowler):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    | Player | 1   | 2   | 3   |
    | Marv   | 8-1 | X   | 9-/ |
    | Sally  | X   | X   | 8-1 |
    | Ingy   | 5-2 | 6-0 | 7-0 |
    | Big Al | 0-1 | 5-\ | X   |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The people I bowl with usually get tired after three frames)&lt;/p&gt;

&lt;p&gt;Tables are made by separating cells with vertical bar (or pipe) characters. Many times I need to put multiline text inside the cells. Kwiki accomplishes this by allowing a Here-Document style syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    | yaml | perl | python |
    | &amp;lt;&amp;lt;end_yaml | &amp;lt;&amp;lt;end_perl | {&#39;foo&#39;:&#39;bar&#39;,&#39;bar&#39;:[42]} |
    ---
    foo: bar
    bar:
      - 42
    end_yaml
    {
      foo =&amp;gt; &#39;bar&#39;,
      bar =&amp;gt;
        [ 42 ]
    }
    end_perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kwiki has a fairly rich set of default formatting rules. You&amp;rsquo;ll find an exhaustive list of all the rules right inside your new Kwiki. The page is called KwikiFormattingRules. To find this page (and every other page on your Kwiki) click the RecentChanges link at the top of the current page.&lt;/p&gt;

&lt;h3 id=&#34;span-id-kustomizingkwiki-kustomizingkwiki-span&#34;&gt;&lt;span id=&#34;kustomizingkwiki&#34;&gt;KustomizingKwiki&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To those of you familiar with the Wiki world, this has all been fairly pedestrian stuff so far. Here&amp;rsquo;s where I think that things get interesting. As I stated before, every last part of the Kwiki software is changable, customizable and extensible. Best of all, it&amp;rsquo;s easy to do.&lt;/p&gt;

&lt;p&gt;CGI::Kwiki is made up of more than a dozen class modules. Each class is responsible for a specific piece of the overall Kwiki behavior. To change something about a particular class, you just subclass it with a module of your own.&lt;/p&gt;

&lt;p&gt;Some of the more important CGI::Kwiki classes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_CGI%3A%3AKwiki%3A%3AFormatter&#34;&gt;CGI::Kwiki::Formatter&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the most-common class to extend. It&amp;rsquo;s where all the formatting rules are codified.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_CGI%3A%3AKwiki%3A%3ADatabase&#34;&gt;CGI::Kwiki::Database&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This class loads and stores the Kwiki pages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_CGI%3A%3AKwiki%3A%3ATemplate&#34;&gt;CGI::Kwiki::Template&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Defines the HTML that gives the look and feel to your Kwiki.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_CGI%3A%3AKwiki%3A%3ADriver&#34;&gt;CGI::Kwiki::Driver&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Controls the entire CGI process.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_CGI%3A%3AKwiki%3A%3AConfig&#34;&gt;CGI::Kwiki::Config&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An abstraction for reading the config file parameters.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kwiki knows what classes to use by looking in it&amp;rsquo;s config file. So if you want to subclass something, then the first thing you would do is change the &lt;code&gt;config.yaml&lt;/code&gt; entry to point to your new class. Let&amp;rsquo;s start with a easy one.&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-kwik-and-dirty-tweak-a-kwik-and-dirty-tweak-span&#34;&gt;&lt;span id=&#34;a kwik and dirty tweak&#34;&gt;A Kwik and Dirty Tweak&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Kwiki will turn a word or phrase inside &lt;code&gt;*&lt;/code&gt;asterisks&lt;code&gt;*&lt;/code&gt; to bold text. This is similar to the way you might do it in text e-mail. But WardsWiki uses &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;triple quotes&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; for bolding. Let&amp;rsquo;s change your Kwiki to do it like Ward does.&lt;/p&gt;

&lt;p&gt;First, create a file called &lt;code&gt;MyFormatter.pm&lt;/code&gt;. You can put it right inside your Kwiki installation directory, and Kwiki will find it. The contents of the file should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package MyFormatter;
    use base &#39;CGI::Kwiki::Formatter&#39;;

    sub bold {
        my ($self, $text) = @_;
        $text =~ s#&#39;&#39;&#39;(.*?)&#39;&#39;&#39;#&amp;lt;b&amp;gt;$1&amp;lt;/b&amp;gt;#g;
        return $text;
    }

    1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, change the &lt;code&gt;config.yaml&lt;/code&gt; file to use this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    formatter_class: MyFormatter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Kwiki formatting engine will now call your subroutine with pieces of text that are eligible to contain bold formatting. Sections of text that are already preformatted code will not be passed to your &lt;code&gt;bold()&lt;/code&gt; method. And as you can see, &lt;code&gt;MyFormatter&lt;/code&gt; is a subclass of &lt;a href=&#34;#item_CGI%3A%3AKwiki%3A%3AFormatter&#34;&gt;&lt;code&gt;CGI::Kwiki::Formatter&lt;/code&gt;&lt;/a&gt; so all the other formatting behaviors remain intact.&lt;/p&gt;

&lt;h4 id=&#34;span-id-kwiki-s-formatting-engine-kwiki-s-formatting-engine-span&#34;&gt;&lt;span id=&#34;kwiki&#39;s formatting engine&#34;&gt;Kwiki&amp;rsquo;s Formatting Engine&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s look under the hood at CGI::Kwiki&amp;rsquo;s hotrod formatting engine. You&amp;rsquo;ll need to be familiar with it to do any serious formatting changes. Conceptually, it&amp;rsquo;s rather simple. It works like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The text starts out as one big string.&lt;/li&gt;
&lt;li&gt;There is a list of formatting routines that are applied in a certain order.&lt;/li&gt;
&lt;li&gt;The string is passed to the first formatting routine. This routine may change the original text. It may also break the text into a number of substrings. It then return the strings it has created and manipulated.&lt;/li&gt;
&lt;li&gt;Each of the substrings is run through the next formatting routine in line.&lt;/li&gt;
&lt;li&gt;Sometimes, a formatting routine will want to make sure that no further routines touch a particular substring. It can do this by returning a hard reference to that string.&lt;/li&gt;
&lt;li&gt;After all the substrings have been passed through every routine, they are joined back together to form one long string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The specific routines and their order of execution is determined by another method called &lt;code&gt;process_order()&lt;/code&gt;. The &lt;code&gt;process_order&lt;/code&gt; method just returns a list of method names in the order they should be called. The default &lt;code&gt;process_order&lt;/code&gt; method is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub process_order {
        return qw(
            function
            table code header_1 header_2 header_3 
            escape_html
            lists comment horizontal_line
            paragraph 
            named_http_link no_http_link http_link
            no_wiki_link wiki_link force_wiki_link
            bold italic underscore
        );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The best way to get a good feel for how to do things is to look over the CGI::Kwiki::Formatter module itself.&lt;/p&gt;

&lt;h4 id=&#34;span-id-kontentkontrol-kontentkontrol-span&#34;&gt;&lt;span id=&#34;kontentkontrol&#34;&gt;KontentKontrol&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The biggest fear that many people have of setting up a Wiki site is that someone will come along and destroy all their pages. This happens from time to time, but in general people just don&amp;rsquo;t do it. It&amp;rsquo;s really not that cool of a trick to pull off. Someone could even write a program to destroy a Wiki, but if they were that smart, hopefully they&amp;rsquo;d be mature enough not to do it.&lt;/p&gt;

&lt;p&gt;As of this writing, CGI::Kwiki doesn&amp;rsquo;t do anything to protect your data. But remember, it&amp;rsquo;s just code. Let&amp;rsquo;s now extend your code to do a simple backup, everytime a page is written.&lt;/p&gt;

&lt;p&gt;Possibly the simplest way to back up files on Unix is to use RCS. Let&amp;rsquo;s make the Kwiki perform an RCS checkin every time it saves a page.&lt;/p&gt;

&lt;p&gt;This time we need to extend the database class. Change the config file like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    database_class: MyDatabase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then write a file called MyDatabase.pm that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package MyDatabase;
    use base &#39;CGI::Kwiki::Database&#39;;

    sub store {
        my $self = shift;
        my ($file) = @_;
        $self-&amp;gt;SUPER::store(@_);
        system(qq{ci -q -l -m&amp;quot;saved&amp;quot; database/$file backup/$file,v});
    }



    1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Be sure to add a backup directory that the CGI program can write to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir backup
    chmod 777 backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case the &lt;code&gt;store&lt;/code&gt; method calls its parent method to handle this actual database store. But then it invokes an extra rcs command to backup the changes to the file.&lt;/p&gt;

&lt;p&gt;Hopefully these examples will give you an idea of how to go about making other types of modifications to CGI::Kwiki. If you make a whole set of cohesive and generally useful extensions, then please consider putting them on CPAN as module distribution.&lt;/p&gt;

&lt;h3 id=&#34;span-id-a-kwiki-in-every-pot-a-kwiki-in-every-pot-span&#34;&gt;&lt;span id=&#34;a kwiki in every pot&#34;&gt;A Kwiki in Every Pot&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The classic use for a Wiki site is to provide a multi-user forum for some topic of interest. In this context, Wiki is a great collaboration tool. People can add new ideas, and revise old ones. The Wiki serves as both an archive and a news site. Most Wikis provide a search mechanism and a RecentChanges facility.&lt;/p&gt;

&lt;p&gt;But I think this only scratches the surface of Wiki usage possibilities. Since a Kwiki is so easy to create, I now find myself doing it all the time. It&amp;rsquo;s almost like I&amp;rsquo;m creating a new wiki for every little thing I set out to do. Here&amp;rsquo;s a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Personal_Planning&#34;&gt;Personal Planning&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have a personal wiki for keeping track of my projects. I keep it on my laptop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Module_Development&#34;&gt;Module Development&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every Perl module I write these days has its own Kwiki in the directory. I use them mainly for creating Test::FIT testing tables. (See Test::FIT on CPAN). But I can also use it for project notes and documentation. Since I can extend the Kwiki, I can make it export the pages to POD if I want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Autobiowiki&#34;&gt;Autobiowiki&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am seriously considering writing the stories of my life in a Wiki. If I can get others to to the same, then the Wikis could be linked using Ward&amp;rsquo;s SisterSite mechanism. This would create one big story. (See &lt;a href=&#34;http://c2.com/cgi/wiki?AboutSisterSites&#34;&gt;http://c2.com/cgi/wiki&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Project_Collaboration&#34;&gt;Project Collaboration&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For my bigger projects I like to create a user community based around a Wiki. Using Test::FIT I can actually get my users to write failing tests for my projects. And they can help write documentation, report bugs, share recipes, etc. (See &lt;a href=&#34;http://fit.freepan.org&#34;&gt;http://fit.freepan.org&lt;/a&gt; and &lt;a href=&#34;http://yaml.freepan.org&#34;&gt;http://yaml.freepan.org&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;One final point of interest; this entire article was written in a Wiki format. I needed to submit it to my editor in POD format, which he in turn formatted into the HTML you are reading now. I accomplished this by simply using an extension of CGI::Kwiki::Formatter that produces POD instead of HTML!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: The raw content of this article along with the formatter program can be found at &lt;a href=&#34;http://www.freepan.org/ingy/articles/kwiki/&#34;&gt;http://www.freepan.org/ingy/articles/kwiki/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: &lt;a href=&#34;http://www.kwiki.org/&#34;&gt;http://www.kwiki.org&lt;/a&gt; has been created as the official kwiki home page.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-about-the-author-about-the-author-span&#34;&gt;&lt;span id=&#34;about the author&#34;&gt;About the Author&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Brian Ingerson has been programming for more than 20 years, and hacking Perl for five of those. He is dedicated to improving the overall quality of scripting languages including Perl, Python and Ruby. He currently hails from Portland, Ore.; the very location of this year&amp;rsquo;s O&amp;rsquo;Reilly Open Source Convention. How convenient!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

