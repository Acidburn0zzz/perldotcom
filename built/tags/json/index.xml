<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/json/</link>
    <description>Recent content in Json on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2020 20:11:44 +0000</lastBuildDate>
    <atom:link href="/tags/json/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JSON, Unicode, and Perl … Oh My!</title>
      <link>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</link>
      <pubDate>Wed, 29 Jan 2020 20:11:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</guid>
      <description>

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might think this a reasonable enough round-trip, just using two
different JSON libraries, &lt;a href=&#34;https://metacpan.org/pod/Mojo::JSON&#34;&gt;Mojo::JSON&lt;/a&gt;
and &lt;a href=&#34;https://metacpan.org/pod/Cpanel::JSON::XS&#34;&gt;Cpanel::JSON::XS&lt;/a&gt;.
In fact, though, when you run
this you’ll see that $decode in the above is &lt;code&gt;&amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;&lt;/code&gt;,
not just the &lt;code&gt;&amp;quot;\xc3\xa9&amp;quot;&lt;/code&gt; that we started with.&lt;/p&gt;

&lt;p&gt;Now invert the encoder/decoder modules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now $decode is just &lt;code&gt;&amp;quot;\x{e9}&amp;quot;&lt;/code&gt;. What’s going on here?&lt;/p&gt;

&lt;h2 id=&#34;what-s-in-a-string&#34;&gt;What’s in a string?&lt;/h2&gt;

&lt;p&gt;To appreciate the above, we first have to grapple with what Perl strings
&lt;em&gt;are&lt;/em&gt;, fundamentally. Unlike C strings, Perl strings aren’t mere arrays
of bytes … but unlike, say, Python 3 strings, Perl strings aren’t arrays of
Unicode characters, either. Perl strings, rather, are arrays of “code
points” in an undefined character set.&lt;/p&gt;

&lt;p&gt;In particular, unlike Python, JavaScript, and many other popular high-level
programming languages, Perl strings do not differentiate between “binary”
and “text”. For example, if Perl reads
bytes 0xff, 0xfe, 0xfd, and 0xfc off of a binary filehandle, the string
that Perl creates from those 4 bytes is understood to contain not 4 &lt;em&gt;bytes&lt;/em&gt;,
but 4 &lt;em&gt;code points&lt;/em&gt;, without reference to any particular character set,
stored in an abstract, internal-use encoding.
(The Perl interpreter may, in fact, use 4 bytes to store the string, but that
would be an implementation detail, of no concern to interpreted Perl code.)&lt;/p&gt;

&lt;p&gt;This point must be stressed: Perl _does not care_—and does not &lt;em&gt;want&lt;/em&gt; to
care—whether a given string’s code points represent bytes or characters.
(More will be said on this later.)&lt;/p&gt;

&lt;h2 id=&#34;back-to-json&#34;&gt;Back to JSON&lt;/h2&gt;

&lt;p&gt;In our examples above we compared round-tripping using different libraries
for the encode and decode. Let’s dig further by comparing just the
encoded JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mojo_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cp_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $mojo_json, $cp_json );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;;
$VAR2 = &amp;quot;[\&amp;quot;\x{c3}\x{a9}\&amp;quot;]&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;
outputs one string using octal escapes
and the other using hex. This reflects another Perl interpreter
implementation detail which, for now, is of no concern.)&lt;/p&gt;

&lt;p&gt;Our input string contains two code points, 0xc3 and 0xa9. Recall that
there is no specific character set associated with those code points; they’re
just numbers. JSON, though, is purely Unicode—and the
latest standard mandates UTF-8 encoding specifically. So we need to translate
our “no-character-set” code points to UTF-8 in order to encode to JSON. But
how to do this?&lt;/p&gt;

&lt;p&gt;We can’t, strictly speaking. It would be like trying
to convert 5 “currency units” to U.S. dollars: we need to know the actual
source currency (Bitcoin? Euros?) to get an answer. Likewise, in Perl, to
express our stored “code points” in UTF-8 we need to know what &lt;em&gt;characters&lt;/em&gt;
those code points represent. For example, your Perl string might store code
point 142 … but which character is that? Perl doesn’t know, and Perl doesn’t
care. Without a defined character set, a code point is just a number.&lt;/p&gt;

&lt;p&gt;To work around this problem, our JSON libraries make reasonable—though
not necessarily correct—assumptions about what the string’s code points
represent.&lt;/p&gt;

&lt;p&gt;Mojo::JSON assumes that our 2 original code points are Unicode. That means
Mojo::JSON thinks we gave it the characters U+00C3 (Ã) and
U+00A9 (©). The reason for the “expansion” from 2 code points to 4 in the
encoded JSON is that
Mojo::JSON encodes our code points as UTF-8: U+00C3 becomes Perl
code points 0303 (0xc3) and 0203 (0x83), and U+00A9 becomes 0302 (0xc2) and
0251 (0xa9).&lt;/p&gt;

&lt;p&gt;Cpanel::JSON::XS makes a different assumption that suits a different
interpretation: This encoder assumes that our 2 original code points
represent whatever bytes of the characters that should go into the eventual
JSON. Unlike with Mojo::JSON, there is no assumption about a desired encoding,
which allows the caller full control over the encoding.&lt;/p&gt;

&lt;p&gt;(This flexibility allows the encoder’s caller to choose, e.g., UTF-16 rather
than UTF-8 for the encoded JSON. That made more sense prior to the latest
JSON specification, which mandates UTF-8 outside closed systems.)&lt;/p&gt;

&lt;p&gt;The same difference in behavior applies to our two decoder functions. They,
too, face an “unsolvable” problem, the reverse of that for encoding. And
their solutions mirror the encoders’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{e9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recall that Mojo::JSON’s encoder interprets its input as Unicode and that
its output code points represent bytes of UTF-8.
Above you’ll see that its decoder does the inverse: it interprets its
input as bytes of UTF-8 and outputs code points understood to be Unicode.
This means the number of code points output will be smaller than the number
input if the input contains any code points above 127 (0x7f), which UTF-8
represents as multiple bytes.&lt;/p&gt;

&lt;p&gt;As for Cpanel::JSON::XS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;decode()&lt;/code&gt; method, like &lt;code&gt;encode()&lt;/code&gt;, assumes that the caller will
handle encoding manually and so simply copies code points.&lt;/p&gt;

&lt;h2 id=&#34;aside-assumptions-of-utf-8&#34;&gt;Aside: Assumptions of UTF-8&lt;/h2&gt;

&lt;p&gt;Mojo::JSON’s behavior of encoding to UTF-8 has precedent: Perl itself!&lt;/p&gt;

&lt;p&gt;You may have run into something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; perl -e&#39;print &amp;quot;\x{100}&amp;quot;&#39;
Wide character in print at -e line 1.
Ā
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For code points 0-255 Perl just outputs the code point as an octet, but
when asked to output a code point that exceeds 255, obviously that doesn’t
work. In this case, Perl assumes you want UTF-8 but throws the “wide
character” warning to tip you off to the fact that you missed something—in
this case, you neglected to encode code point 256 to bytes.&lt;/p&gt;

&lt;h2 id=&#34;abusing-the-system&#34;&gt;Abusing the System&lt;/h2&gt;

&lt;p&gt;Cpanel::JSON::XS’s &lt;code&gt;encode()&lt;/code&gt; allows for a nonstandard use of JSON:
literal binary data. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl -MCpanel::JSON::XS -e&#39;print Cpanel::JSON::XS-&amp;gt;new()-&amp;gt;encode([&amp;quot;\xff&amp;quot;])&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… will output 5 bytes: &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt;, 0xff, &lt;code&gt;&amp;quot;&lt;/code&gt;, and &lt;code&gt;]&lt;/code&gt;. This is invalid JSON
because no Unicode encoding (let alone UTF-8) ever encodes a character to
a single 0xff byte. Only special decoders that understand this “literal
binary” JSON variant will parse this as intended. That reliance on a custom
mode of operation undercuts JSON’s usefulness as a widely-supported
standard—which may seem fine at first but
can easily bite if your application grows in scope.&lt;/p&gt;

&lt;p&gt;Applications that need to serialize strings with arbitrary octets (i.e.,
binary) should apply a secondary encoding (e.g., Base64) to strings prior
to JSON encoding. Or, better yet, prefer a binary-friendly encoding like
&lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-that-flag-behind-the-curtain&#34;&gt;About That Flag Behind the Curtain …&lt;/h2&gt;

&lt;p&gt;If you run the output from our two encoder methods through
&lt;a href=&#34;https://metacpan.org/pod/Devel::Peek&#34;&gt;Devel::Peek&lt;/a&gt;, you’ll
see something like this for Mojo::JSON’s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fdc27802f30) at 0x7fdc27e59c58
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x7fdc28826350 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and this for Cpanel::JSON::XS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fc0cd004d30) at 0x7fc0cd016228
  REFCNT = 1
  FLAGS = (POK,pPOK,UTF8)
  PV = 0x7fc0cce2ef60 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0 [UTF8 &amp;quot;[&amp;quot;\x{c3}\x{a9}&amp;quot;]&amp;quot;]
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;UTF8&lt;/code&gt; flag in the latter. This tells us that Perl’s
internal storage of the string’s code points uses UTF-8 encoding. This
difference is why, as we saw earlier, Data::Dumper encodes Mojo::JSON’s output
using
octal escapes but Cpanel::JSON::XS’s using hex: Data::Dumper recognizes the
UTF8 flag and renders its output based on it.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://perldoc.perl.org/perlunifaq.html#What-is-%22the-UTF8-flag%22%3f&#34;&gt;perldoc perlunifaq&lt;/a&gt; makes clear, though, the UTF8 flag is &lt;strong&gt;not&lt;/strong&gt; meant for
consumption by Perl code. Perl applications should regard strings as
simple sequences of code points, without regard for how the
Perl interpreter may store those strings in memory.&lt;/p&gt;

&lt;p&gt;That being said,
in limited contexts it &lt;em&gt;may&lt;/em&gt; work to imitate the distinction between string
types in languages like Python and JavaScript by regarding
UTF8-flagged strings as “character strings” and non-UTF8-flagged strings as
“byte strings”—indeed, &lt;a href=&#34;https://metacpan.org/pod/Sereal::Encoder&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;serializers&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;on&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;CPAN&lt;/a&gt;, including two of my own,
do exactly this. This isn’t
a supported model, though, for using Perl strings, and any code that
depends on it may behave differently in different Perl versions. Caveat
emptor!&lt;/p&gt;

&lt;h2 id=&#34;making-peace&#34;&gt;Making Peace&lt;/h2&gt;

&lt;p&gt;JSON and Perl are odd bedfellows. Perl’s lack of distinct number and string
types, for example, can yield JSON that uses the wrong type for one
value or the other. Perl’s lack of native booleans produces a similar effect.&lt;/p&gt;

&lt;p&gt;The encoding problems discussed above, though, are especially nefarious
because accommodating them requires a good understanding of all of the above.
Most developers can accommodate something like &lt;code&gt;{&amp;quot;age&amp;quot;: &amp;quot;9&amp;quot;}&lt;/code&gt; easily enough
because typecasting from &lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; (string) to &lt;code&gt;9&lt;/code&gt; (number) is commonplace. But
how many would see &lt;code&gt;&amp;quot;Ã©&amp;quot;&lt;/code&gt; and think, “ah! I simply have to treat those
characters’ code points as bytes then decode those bytes as UTF-8!” Some
would, to be sure—perhaps even many—but likely fewer than can easily coerce
&lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Binary-friendly encodings like &lt;a href=&#34;http://cbor.io&#34;&gt;CBOR&lt;/a&gt;
mitigate against this problem because whatever decodes the Perl-sourced
data can more easily recognize the need to decode from binary. Anyone
who doesn’t know about bytes and encodings will quickly learn! Fundamentally,
though, even CBOR doesn’t really fit Perl’s “pure code points” string model
very well because CBOR distinguishes strongly between binary and text strings,
which Perl does not.&lt;/p&gt;

&lt;p&gt;At the end of the day, Perl’s data model, for all of the conveniences that it
affords us, makes communication with many other languages a challenge. The
best we can do is to anticipate these problems and deal with them as they arise.&lt;/p&gt;

&lt;h2 id=&#34;epilogue-json-alternatives&#34;&gt;Epilogue: JSON Alternatives&lt;/h2&gt;

&lt;p&gt;JSON’s inability to store arbitrary octet strings is, in my experience,
its biggest liability,
but there are other reasons why I often prefer to avoid JSON:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Its inability to store comments and proscription against trailing commas
make it an awkward choice for human-maintained data structures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its &lt;code&gt;\uXXXX&lt;/code&gt; escapes support only characters within Unicode’s
&lt;abbr title=&#34;Basic Multilingual Plane&#34;&gt;BMP&lt;/abbr&gt;; to store emoji or other
non-BMP characters you either have to encode to UTF-8 directly or indicate
a UTF-16 surrogate pair (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-16#U+010000_to_U+10FFFF&#34;&gt;What does that mean?&lt;/a&gt;) in &lt;code&gt;\uXXXX&lt;/code&gt; escapes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It’s inefficient compared with binary formats.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; is a nice serialization format
for human-maintained data structures. It’s line-delimited and—of course!—allows
comments, and any Unicode code point can be expressed in simple hexadecimal.
TOML is fairly new, and its specification is still in flux; nevertheless,
it already undergirds a number of high-profile
software projects like Rust’s &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;
package manager and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;—which powers this site! CPAN
&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;hosts&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;several&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML&#34;&gt;implementations&lt;/a&gt; of this serialization.&lt;/p&gt;

&lt;p&gt;The aforementioned &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; improves upon JSON’s efficiency and
also allows for storage of binary strings. Whereas JSON encoders must
stringify numbers and escape all strings, CBOR stores numbers “literally”
and prefixes strings with their length, which obviates the need to escape those
strings. These dramatically simplify both encoding and decoding. As with
TOML and YAML, CPAN hosts &lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;CBOR&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;implementations&lt;/a&gt;.
(Full disclosure: Two of these are of my own authorship.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Sereal/Sereal&#34;&gt;Sereal&lt;/a&gt; is another great JSON substitute
that confers most of CBOR’s benefits and can even serialize more
“Perl-specific” items like regular expressions. This makes it ideal
for Perl-to-Perl IPC. The reference implementation is CPAN’s
&lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt; distribution.
Sereal isn’t as well-supported as CBOR outside Perl,
though, so if you need to communicate with non-Perl code, Sereal may
not work as well for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; is another format that humans can maintain easily.
Unlike TOML, YAML supports binary strings; in fact, it’s flexible enough
to replace Data::Dumper in many cases. CPAN includes
a &lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;number&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::PP&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::Old&#34;&gt;libraries&lt;/a&gt; that implement YAML.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2016/</link>
      <pubDate>Wed, 06 Apr 2016 09:12:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Everything old was new again in March. Apart from smatterings of cool new toys, CPAN got several new loggers, plugin loaders, templates, and configuration management tools.&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Pushover&#34;&gt;Net::Pushover&lt;/a&gt; provides a Perly interface to Pushover, the message delivery service&lt;/li&gt;
&lt;li&gt;Get a client for the TeamCity, the CI service with &lt;a href=&#34;https://metacpan.org/pod/WebService::TeamCity&#34;&gt;WebService::TeamCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Robinhood&#34;&gt;Finance::Robinhood&lt;/a&gt; allows you to trade stocks and ETFs with RobinHood, the free brokerage startup&lt;/li&gt;
&lt;li&gt;Use the Let&amp;rsquo;s Encrypt certificate service with &lt;a href=&#34;https://metacpan.org/pod/WWW::LetsEncrypt&#34;&gt;WWW::LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PubNub&#34;&gt;WWW::PubNub&lt;/a&gt; provides an interface to PubNub, the streaming network service&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Footprintless&#34;&gt;Footprintless&lt;/a&gt; is a configuration management program with minimal installations&lt;/li&gt;
&lt;li&gt;Log to date/time-stamped files with &lt;a href=&#34;https://metacpan.org/pod/Log::File::Rolling&#34;&gt;Log::File::Rolling&lt;/a&gt;, a fork of Log::Dispatch::File::Rolling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Logging::Simple&#34;&gt;Logging::Simple&lt;/a&gt; aims to be a minimalist but useful logging system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Task::Viral&#34;&gt;Task::Viral&lt;/a&gt; is a Perl configuration and installation system, like Pinto, CPAN::Mini et al.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AtteanX::Endpoint&#34;&gt;AtteanX::Endpoint&lt;/a&gt; is a SPARQL 1.1 endpoint for &lt;a href=&#34;https://metacpan.org/pod/Attean&#34;&gt;Attean&lt;/a&gt;, the semantic web framework&lt;/li&gt;
&lt;li&gt;Print nice calendars at the terminal using &lt;a href=&#34;https://metacpan.org/pod/Calendar::Gregorian&#34;&gt;Calendar::Gregorian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Tubes&#34;&gt;Data::Tubes&lt;/a&gt; is a cute data transformation module; needs iterators!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Typist&#34;&gt;JSON::Typist&lt;/a&gt; aims to &amp;ldquo;replace mushy strings and numbers&amp;rdquo; with proper typed classes. Useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Template::Pure&#34;&gt;Template::Pure&lt;/a&gt; is a port of &lt;a href=&#34;http://beebole.com/pure/&#34;&gt;pure.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract a stack trace from an exception object with &lt;a href=&#34;https://metacpan.org/pod/Devel::StackTrace::Extract&#34;&gt;Devel::StackTrace::Extract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::SmokeTests&#34;&gt;Dist::Zilla::Plugin::SmokeTests&lt;/a&gt; makes it easy to run smoke tests run automated environments only&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MCE::Shared&#34;&gt;MCE::Shared&lt;/a&gt; is an extension for sharing threads and processes, also &lt;a href=&#34;https://metacpan.org/pod/MCE&#34;&gt;MCE&lt;/a&gt; is great&lt;/li&gt;
&lt;li&gt;Load plugins from files or modules with &lt;a href=&#34;https://metacpan.org/pod/Plugin::Simple&#34;&gt;Plugin::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Doctest&#34;&gt;Test::Doctest&lt;/a&gt; can extract and evaluate tests from pod fragments - curious&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::IRPulses&#34;&gt;Linux::IRPulses&lt;/a&gt; Parse infra-red pulse data - also see Timm&amp;rsquo;s recent &lt;a href=&#34;http://localhost:1313/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/&#34;&gt;article&lt;/a&gt; on the subject&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Guess language from text using a word list with &lt;a href=&#34;https://metacpan.org/pod/Text::Guess::Language&#34;&gt;Text::Guess::Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check if text is UTF8 compatible with &lt;a href=&#34;https://metacpan.org/pod/Unicode::CheckUTF8::PP&#34;&gt;Unicode::CheckUTF8::PP&lt;/a&gt; a pure Perl module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ecl&#34;&gt;ecl&lt;/a&gt; executes Embedded Common Lisp code within Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/EMDIS::ECS&#34;&gt;EMDIS::ECS&lt;/a&gt; provides useful subroutines for the European Marrow Donor Information System standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a simple local search engine for your Dancer app with &lt;a href=&#34;https://metacpan.org/pod/Dancer::SearchApp&#34;&gt;Dancer::SearchApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::ACME&#34;&gt;Mojo::ACME&lt;/a&gt; use the Let&amp;rsquo;s Encrypt ACME API with your Mojo app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Pod&#34;&gt;Plack::Middleware::Pod&lt;/a&gt; can render POD files as HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - September 2015</title>
      <link>http://localhost:1313/article/196/2015/10/1/What-s-new-on-CPAN---September-2015/</link>
      <pubDate>Thu, 01 Oct 2015 13:49:32 +0000</pubDate>
      
      <guid>http://localhost:1313/article/196/2015/10/1/What-s-new-on-CPAN---September-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/MsgPack::RPC&#34;&gt;MsgPack::RPC&lt;/a&gt; is a client for the &lt;a href=&#34;https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md&#34;&gt;MessagePack-RPC&lt;/a&gt; standard. It&amp;rsquo;s fully featured, providing send, notify, event subscription and logging.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux has &lt;a href=&#34;http://techblog.babyl.ca/entry/neovim-part-1&#34;&gt;blogged&lt;/a&gt; about his motivations for developing MsgPack::RPC to use it with &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt;. His entertaining &lt;a href=&#34;http://techblog.babyl.ca/entry/neovim-way-to-go&#34;&gt;musings&lt;/a&gt; are a good read. Now you can get an API to Neovim using his other new module, &lt;a href=&#34;https://metacpan.org/pod/Neovim::RPC&#34;&gt;Neovim::RPC&lt;/a&gt;. Awesome work!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Client&#34;&gt;API::Client&lt;/a&gt; is a general-purpose API client class&lt;/li&gt;
&lt;li&gt;Get simple OATH authentication with &lt;a href=&#34;https://metacpan.org/pod/App::OATH&#34;&gt;App::OATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::p5stack&#34;&gt;App::p5stack&lt;/a&gt; manages your dependencies and Perl requirements in a local directory. Looks useful for standalone projects, packaging etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::PhotoBackup::Server&#34;&gt;Net::PhotoBackup::Server&lt;/a&gt; - everyone backs up their photos right?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Rarbg::torrentapi&#34;&gt;Rarbg::torrentapi&lt;/a&gt; is a Wrapper around Rarbg torrentapi&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Zotero&#34;&gt;WWW::Zotero&lt;/a&gt; provides a Perl interface to the Zotero API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Scaleway&#34;&gt;WebService::Scaleway&lt;/a&gt; is a Perl interface to Scaleway, the cloud VPN provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Station&#34;&gt;Config::Station&lt;/a&gt; looks interesting: class-based; it can load configurations from files and the environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log all DBI queries with &lt;a href=&#34;https://metacpan.org/pod/DBI::Log&#34;&gt;DBI::Log&lt;/a&gt;. Awesome!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::TempDB&#34;&gt;DBIx::TempDB&lt;/a&gt; creates temporary databases for testing - supports Postgres, MySQL, SQLite&lt;/li&gt;
&lt;li&gt;Render data structures for easy grepping using &lt;a href=&#34;https://metacpan.org/pod/Data::Crumbr&#34;&gt;Data::Crumbr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Diachronic collocation index using &lt;a href=&#34;https://metacpan.org/pod/DiaColloDB&#34;&gt;DiaColloDB&lt;/a&gt;. Don&amp;rsquo;t know what this is, but it looks interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::JpegMinimal&#34;&gt;Image::JpegMinimal&lt;/a&gt; creates JPEG previews without headers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MarpaX::RFC::RFC3987&#34;&gt;MarpaX::RFC::RFC3987&lt;/a&gt; parse and validate IRIs with this Marpa module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Message::String&#34;&gt;Message::String&lt;/a&gt; a &amp;ldquo;pragma&amp;rdquo; to declare and organise messaging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Brat::Handler&#34;&gt;Brat::Handler&lt;/a&gt; is a Perl module for managing Brat files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Anonymous&#34;&gt;Class::Anonymous&lt;/a&gt; get private classes with private data &amp;ldquo;for realz&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;This looks like a useful analysis tool; &lt;a href=&#34;https://metacpan.org/pod/Devel::Trace::Subs&#34;&gt;Devel::Trace::Subs&lt;/a&gt; tracks code flow and stack traces.&lt;/li&gt;
&lt;li&gt;Do acceptance testing for JSON-Schema based validators with &lt;a href=&#34;https://metacpan.org/pod/Test::JSON::Schema::Acceptance&#34;&gt;Test::JSON::Schema::Acceptance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yes!! Retry test functions on failure using &lt;a href=&#34;https://metacpan.org/pod/Test::Retry&#34;&gt;Test::Retry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Perl extension for &lt;a href=&#34;https://metacpan.org/pod/Device::Modem::SMSModem&#34;&gt;Device::Modem::SMSModem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A driver for the Pertelian X2040 USB LCD with &lt;a href=&#34;https://metacpan.org/pod/Device::Pertelian&#34;&gt;Device::Pertelian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily tie database data to Gtk2 / Wx based apps using &lt;a href=&#34;https://metacpan.org/pod/Gtk2::Ex::DbLinker::DbTools&#34;&gt;Gtk2::Ex::DbLinker::DbTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eliminate an entire email thread with &lt;a href=&#34;https://metacpan.org/pod/Mail::ThreadKiller&#34;&gt;Mail::ThreadKiller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Libpuzzle&#34;&gt;Image::Libpuzzle&lt;/a&gt; provides a Perl interface to libpuzzle - the image similarity library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Tradis&#34;&gt;Bio::Tradis&lt;/a&gt; can Bio-Tradis contains a set of tools to analyze the output from TraDIS analyses&lt;/li&gt;
&lt;li&gt;Manipulate RGB tuples with &lt;a href=&#34;https://metacpan.org/pod/Number::RGB&#34;&gt;Number::RGB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Date&#34;&gt;Time::Date&lt;/a&gt; appears to be the simplest date time implementation in Perl yet. I wonder what the limitations are?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a JSON View that owns its own data with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::JSON::PerRequest&#34;&gt;Catalyst::View::JSON::PerRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add templates to the Data Section of Catalyst views using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MicroTemplate::DataSection&#34;&gt;Catalyst::View::MicroTemplate::DataSection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replay terminal captures in your Dancer app using &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Showterm&#34;&gt;Dancer::Plugin::Showterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::Mojo&#34;&gt;Future::Mojo&lt;/a&gt; let&amp;rsquo;s you use futures with Mojo::IOLoop. Very cool!&lt;/li&gt;
&lt;li&gt;The arms-race for faster continues! Replace HTTP::Headers and HTTP::Headers::Fast with &lt;a href=&#34;https://metacpan.org/pod/HTTP::XSHeaders&#34;&gt;HTTP::XSHeaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mercury&#34;&gt;Mercury&lt;/a&gt; is an application broker class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check your DuckDuckGo cheatsheets with Perl</title>
      <link>http://localhost:1313/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</link>
      <pubDate>Fri, 28 Aug 2015 02:10:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/190/2015/8/28/Check-your-DuckDuckGo-cheatsheets-with-Perl/</guid>
      <description>

&lt;p&gt;With DuckDuckGo&amp;rsquo;s global &lt;a href=&#34;https://duck.co/blog&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; just around the corner, I&amp;rsquo;ve pulled together a &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check&#34;&gt;script&lt;/a&gt; for checking &lt;a href=&#34;http://perltricks.com/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier&#34;&gt;cheatsheets&lt;/a&gt;. The script checks the cheatsheet is valid JSON and has the required entries and values.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To run the script, download it from &lt;a href=&#34;https://github.com/dnmfarrell/DDG-cheatsheet-check/blob/master/cheatsheet_check&#34;&gt;Github&lt;/a&gt;. It requires the &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; Perl modules which you can install with &lt;code&gt;cpan&lt;/code&gt; at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan JSON HTTP::Tiny&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to give execute permissions to the script too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;744&lt;/span&gt; cheatsheet_check&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Once you have a cheatsheet in JSON that you want to check, just pass the filepath to &lt;code&gt;cheatsheet_check&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;cheatsheet_check &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cheatsheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example output for the &lt;code&gt;perldoc&lt;/code&gt; cheatsheet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Subtest: file
    ok 1 - file exists
    ok 2 - filename is appropriate
    ok 3 - file content can be read
    ok 4 - content is valid JSON
    1..4
ok 1 - file
    # Subtest: headers
    ok 1 - has id
    ok 2 - has name
    ok 3 - has description
    1..3
ok 2 - headers
    # Subtest: metadata
    ok 1 - has metadata
    ok 2 - has metadata sourceName
    ok 3 - has metadata sourceUrl
    ok 4 - sourceUrl is not undef
    ok 5 - fetch sourceUrl
    1..5
ok 3 - metadata
    # Subtest: sections
    ok 1 - has section_order
    ok 2 - section_order is an array of section names
    ok 3 - has sections
    ok 4 - sections is a hash of section key/pairs
    ok 5 - &#39;Usage&#39; exists in sections
    ok 6 - &#39;Module Options&#39; exists in sections
    ok 7 - &#39;Search Options&#39; exists in sections
    ok 8 - &#39;Common Options&#39; exists in sections
    ok 9 - &#39;Search Options&#39; exists in section_order
    ok 10 - &#39;Search Options&#39; is an array
    ok 11 - &#39;Search Options&#39; entry: 0 has a key
    ok 12 - &#39;Search Options&#39; entry: 0 has a val
    ok 13 - &#39;Search Options&#39; entry: 1 has a key
    ok 14 - &#39;Search Options&#39; entry: 1 has a val
    ok 15 - &#39;Search Options&#39; entry: 2 has a key
    ok 16 - &#39;Search Options&#39; entry: 2 has a val
    ok 17 - &#39;Common Options&#39; exists in section_order
    ok 18 - &#39;Common Options&#39; is an array
    ok 19 - &#39;Common Options&#39; entry: 0 has a key
    ok 20 - &#39;Common Options&#39; entry: 0 has a val
    ok 21 - &#39;Common Options&#39; entry: 1 has a key
    ok 22 - &#39;Common Options&#39; entry: 1 has a val
    ok 23 - &#39;Common Options&#39; entry: 2 has a key
    ok 24 - &#39;Common Options&#39; entry: 2 has a val
    ok 25 - &#39;Common Options&#39; entry: 3 has a key
    ok 26 - &#39;Common Options&#39; entry: 3 has a val
    ok 27 - &#39;Common Options&#39; entry: 4 has a key
    ok 28 - &#39;Common Options&#39; entry: 4 has a val
    ok 29 - &#39;Module Options&#39; exists in section_order
    ok 30 - &#39;Module Options&#39; is an array
    ok 31 - &#39;Module Options&#39; entry: 0 has a key
    ok 32 - &#39;Module Options&#39; entry: 0 has a val
    ok 33 - &#39;Module Options&#39; entry: 1 has a key
    ok 34 - &#39;Module Options&#39; entry: 1 has a val
    ok 35 - &#39;Module Options&#39; entry: 2 has a key
    ok 36 - &#39;Module Options&#39; entry: 2 has a val
    ok 37 - &#39;Module Options&#39; entry: 3 has a key
    ok 38 - &#39;Module Options&#39; entry: 3 has a val
    ok 39 - &#39;Usage&#39; exists in section_order
    ok 40 - &#39;Usage&#39; is an array
    ok 41 - &#39;Usage&#39; entry: 0 has a key
    ok 42 - &#39;Usage&#39; entry: 0 has a val
    ok 43 - &#39;Usage&#39; entry: 1 has a key
    ok 44 - &#39;Usage&#39; entry: 1 has a val
    1..44
ok 4 - sections
1..4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run over 20 different tests against the cheatsheet. The script checks that the JSON is valid, that the required headers are present (e.g. id, name and description). It checks that the metadata is valid and points to a live URL. Finally it checks that the sections are valid and correctly mapped.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Remember, even if the cheatsheet passes all the tests, you still need to check it looks right in the browser. &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; can help with that. This Saturday I&amp;rsquo;ll be hanging out at the NYC Quack &amp;amp; Hack at &lt;a href=&#34;http://www.meetup.com/Quack-Hack-New-York-City/events/224567174/&#34;&gt;Orbital&lt;/a&gt;. I look forward to seeing everyone there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; added HTTP::Tiny dependency. 2015-08-28&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing DuckDuckGo plugins just got easier</title>
      <link>http://localhost:1313/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</link>
      <pubDate>Sat, 22 Aug 2015 14:05:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/189/2015/8/22/Writing-DuckDuckGo-plugins-just-got-easier/</guid>
      <description>

&lt;p&gt;The developers behind DuckDuckGo, the search engine that doesn&amp;rsquo;t track you, have made it easier than ever to write plugins for the site. With the first global &lt;a href=&#34;https://duck.co/blog/post/196/the-first-global-quack-hack&#34;&gt;Quack &amp;amp; Hack&lt;/a&gt; event taking place later this month, there&amp;rsquo;s never been a better time to get involved.&lt;/p&gt;

&lt;h3 id=&#34;instant-answers&#34;&gt;Instant Answers&lt;/h3&gt;

&lt;p&gt;The DuckDuckGo engine supports several types of plugin, but instant answers that provide a static &amp;ldquo;cheatsheet&amp;rdquo; are a simple to get started. &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;Previously&lt;/a&gt; developing a new instant answer would require a Perl module, a test file and a plain text version of the response. Now all you need to provide is a JSON file of your instant answer and you&amp;rsquo;re in business.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to fork the DuckDuckGo &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies&#34;&gt;repo&lt;/a&gt; and clone your forked repo to your development machine. Optionally you can install &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt;, which can launch a local version of the DuckDuckGo site for testing your code. Another way to test the cheatsheet is via &lt;a href=&#34;https://vimeo.com/132712266&#34;&gt;Codio&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;an-instant-answer-json-file&#34;&gt;An Instant Answer JSON file&lt;/h3&gt;

&lt;p&gt;Instant answer JSON files should be created in the &lt;code&gt;share/goodie/cheat_sheets&lt;/code&gt; directory in the repo. A good way to start is to copy one of the existing files and change it to include your content.&lt;/p&gt;

&lt;p&gt;This is a truncated example from my &lt;code&gt;perldoc&lt;/code&gt; instant answer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc_cheat_sheet&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Perl Documentation&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sourceName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc Manual&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sourceUrl&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://perldoc.perl.org/perldoc.html&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;section_order&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module Options&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Search Options&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Common Options&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sections&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[perldoc &amp;lt;option&amp;gt;]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start perldoc&amp;#34;&lt;/span&gt;
        },
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[perldoc perldoc]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc help&amp;#34;&lt;/span&gt;
        }
        ],
       &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; fields should be unique values that describe the plugin. The &lt;code&gt;metadata&lt;/code&gt; fields describe the source of the information in the instant answer. It&amp;rsquo;s good to use a canonical source - in this case I referenced the official Perl documentation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sections&lt;/code&gt; field is the content of the instant answer. Each entry is a key value for an array of key pairs. &lt;code&gt;section_order&lt;/code&gt; describes the order in which the sections will be displayed in the search engine results, so make sure you put the most important sections first!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at a section entry, here is &lt;code&gt;Module Options&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module Options&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module::Name&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Show module documentation&amp;#34;&lt;/span&gt;
        },
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-l Module::Name]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module filepath&amp;#34;&lt;/span&gt;
        },
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-m Module::Name]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module source code&amp;#34;&lt;/span&gt;
        },
        {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-lm Module::Name]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;val&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Module filepath (alt.)&amp;#34;&lt;/span&gt;
        }
        ],&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;ldquo;Module Options&amp;rdquo; is the section name, this must be present exactly in the &lt;code&gt;section_order&lt;/code&gt; field, or this section will not appear at all. The section name text is the subheading used for the section, so be sure to choose something readable: &amp;ldquo;Module Options&amp;rdquo; is better than &amp;ldquo;module_options&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Each key pair entry represents the text to be displayed for the instant answer, the &lt;code&gt;key&lt;/code&gt; text should be the code and &lt;code&gt;val&lt;/code&gt; the description. If the &lt;code&gt;key&lt;/code&gt; text contains spaces, wrap the text in square brackets to ensure it&amp;rsquo;s displayed as code on the web page (see this article&amp;rsquo;s cover image for examples). You can find the complete perldoc JSON file &lt;a href=&#34;https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/share/goodie/cheat_sheets/json/perldoc.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;You can test your instant answer using &lt;a href=&#34;https://metacpan.org/pod/App::DuckPAN&#34;&gt;App::DuckPAN&lt;/a&gt; (see my previous &lt;a href=&#34;http://perltricks.com/article/169/2015/4/20/Writing-DuckDuckGo-instant-answers-is-easy&#34;&gt;article&lt;/a&gt; for examples). If you want to discuss your instant answer with a developer, or resolve an issue, the DuckDuckGo team are on Slack, you can request access via &lt;a href=&#34;mailto:QuackSlack@duckduckgo.com?subject=AddMe&#34;&gt;email&lt;/a&gt;. The official &lt;a href=&#34;https://duck.co/duckduckhack/goodie_overview&#34;&gt;documentation&lt;/a&gt; is also useful.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve finished an instant answer, create a pull request! The DuckDuckGo developers will review your code and give feedback. Once your instant answer is approved, it will go live within a few days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; Changed chat details for DDG slack 2015-08-26&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2015</title>
      <link>http://localhost:1313/article/172/2015/5/7/What-s-new-on-CPAN---April-2015/</link>
      <pubDate>Thu, 07 May 2015 11:47:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/172/2015/5/7/What-s-new-on-CPAN---April-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;Dancer::Plugin::Test::Jasmine by Yanick Champoux provides a way to inject Jasmine tests into Dancer applications. So cool!&lt;/p&gt;

&lt;p&gt;Jasmine is a popular JavaScript test framework, and with frontend frameworks like AngularJS, a large amount of application logic often falls outside of the vista of Perl unit testing. Yanick&amp;rsquo;s module provides a way to run Jasmine tests in Perl. He&amp;rsquo;s also &lt;a href=&#34;http://techblog.babyl.ca/entry/dancer-jasmine&#34;&gt;written&lt;/a&gt; about it. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Tangerine&#34;&gt;App::Tangerine&lt;/a&gt; is a terminal app for reporting module dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PAUSE::TimeMachine&#34;&gt;App::PAUSE::TimeMachine&lt;/a&gt; lets you view the PAUSE package list over time&lt;/li&gt;
&lt;li&gt;Get slack notifications about Git releases with &lt;a href=&#34;https://metacpan.org/pod/App::GitHooks::Plugin::NotifyReleasesToSlack&#34;&gt;App::GitHooks::Plugin::NotifyReleasesToSlack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::CouchDB&#34;&gt;Data::CouchDB&lt;/a&gt; is an API for CouchDB the document database&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Minecraft::Fishbans&#34;&gt;WebService::Minecraft::Fishbans&lt;/a&gt; provides an API for searching Minecraft banned user services&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::Electron&#34;&gt;Alien::Electron&lt;/a&gt; will install the awesome &lt;a href=&#34;http://electron.atom.io/&#34;&gt;electron&lt;/a&gt; framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/palien&#34;&gt;palien&lt;/a&gt; is a command line app for interfacing with Alien::Base based distributions&lt;/li&gt;
&lt;li&gt;Query FreeBSD for a list of running jails using &lt;a href=&#34;https://metacpan.org/pod/FreeBSD::Jails&#34;&gt;FreeBSD::Jails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Are you missing all those lovely modules that were discarded from the Perl core? Then you&amp;rsquo;ll love &lt;a href=&#34;https://metacpan.org/pod/Bundle::ExCore&#34;&gt;Bundle::ExCore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::JBoss&#34;&gt;Net::JBoss&lt;/a&gt; provides bindings for the JBoss Management API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::DynamoDB::Simple&#34;&gt;Amazon::DynamoDB::Simple&lt;/a&gt; provides an simplified API for Amazon&amp;rsquo;s DynamoDB, but requires data in 2 AWS regions.&lt;/li&gt;
&lt;li&gt;Another AWS project, &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt; is an ambitious attempt at unified framework covering all AWS services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::XS::Sugar&#34;&gt;JSON::XS::Sugar&lt;/a&gt; provides super fast JSON serialization with fine-grained control of boolean values&lt;/li&gt;
&lt;li&gt;Useful for database development,&lt;a href=&#34;https://metacpan.org/pod/Data::ShortNameProvider&#34;&gt;Data::ShortNameProvider&lt;/a&gt; will generate short names unlikely to clash with existing ones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subunits&#34;&gt;Test::Subunits&lt;/a&gt;, a new module from Damian Conway, extracts subunit tests from code, or runs inline unit tests. Wowl!&lt;/li&gt;
&lt;li&gt;Throw and delay exceptions with &lt;a href=&#34;https://metacpan.org/pod/Exception::Delayed&#34;&gt;Exception::Delayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Munge::Whitespace&#34;&gt;Dist::Zilla::Plugin::Munge::Whitespace&lt;/a&gt; will strip trailing whitespace from files&lt;/li&gt;
&lt;li&gt;Trace the origin of loaded modules using &lt;a href=&#34;https://metacpan.org/pod/Devel::Module::Trace&#34;&gt;Devel::Module::Trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::Role::Chatty&#34;&gt;MooX::Role::Chatty&lt;/a&gt; is a configurable progress message reporter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;Two new BusPirate modules from Paul Evans:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::SSD1306&#34;&gt;Device::BusPirate::Chip::SSD1306&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::BusPirate::Chip::DS1307&#34;&gt;Device::BusPirate::Chip::DS1307&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Text::Shorten::ForTwitter&#34;&gt;Acme::Text::Shorten::ForTwitter&lt;/a&gt; shortens Twitter text in a clever, extensible way&lt;/li&gt;
&lt;li&gt;Create beautiful photo websites with &lt;a href=&#34;https://metacpan.org/pod/Photography::Website&#34;&gt;Photography::Website&lt;/a&gt;. Check out the &lt;a href=&#34;http://www.superformosa.nl/&#34;&gt;example&lt;/a&gt;. A command line &lt;a href=&#34;https://metacpan.org/pod/distribution/Photography-Website/bin/photog&#34;&gt;app&lt;/a&gt; is also available.&lt;/li&gt;
&lt;li&gt;Great new Catalyst feature: &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::MapComponentDependencies&#34;&gt;Catalyst::Plugin::MapComponentDependencies&lt;/a&gt; provides dependency handling for Catalyst components&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::JWT&#34;&gt;Mojo::JWT&lt;/a&gt; provides JSON web tokens for Mojolicious&lt;/li&gt;
&lt;li&gt;Send messages to users of your Dancer2 web app using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Growler&#34;&gt;Dancer2::Plugin::Growler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

