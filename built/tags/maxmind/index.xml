<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maxmind on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/maxmind/</link>
    <description>Recent content in Maxmind on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Sep 2014 12:22:54 +0000</lastBuildDate>
    <atom:link href="/tags/maxmind/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Easily check your IP address with Perl</title>
      <link>http://localhost:1313/article/116/2014/9/18/Easily-check-your-IP-address-with-Perl/</link>
      <pubDate>Thu, 18 Sep 2014 12:22:54 +0000</pubDate>
      
      <guid>http://localhost:1313/article/116/2014/9/18/Easily-check-your-IP-address-with-Perl/</guid>
      <description>

&lt;p&gt;Every now and then I&amp;rsquo;ll run into a problem where I need to programmatically check my IP address. Each time I&amp;rsquo;ve hand-crafted a solution, which is fine, but good programming is DRY programming, and so I finally wrote a module to do it. The module is called &lt;a href=&#34;https://metacpan.org/pod/WWW::curlmyip&#34;&gt;WWW::curlmyip&lt;/a&gt; because it uses the &lt;a href=&#34;http://curlmyip.com&#34;&gt;curlmyip.com&lt;/a&gt; service. I find the module useful and you might too.&lt;/p&gt;

&lt;h3 id=&#34;core-perl-solution&#34;&gt;Core Perl solution&lt;/h3&gt;

&lt;p&gt;Before we look at the module, let&amp;rsquo;s consider a Perl solution using only core Perl code. I can grab my IP address from the terminal with a single line of Perl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MHTTP::Tiny &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://curlmyip.com})-&amp;gt;{content}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;121.45.140.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; if you&amp;rsquo;re on Windows use double quotes instead of singles.&lt;/p&gt;

&lt;p&gt;Well that was easy. But notice how I didn&amp;rsquo;t have to append a newline to the output? That&amp;rsquo;s because curlmyip.com returns the IP address with a newline appended. If we want to use the IP address as an input to any other program, we&amp;rsquo;ll need to &lt;code&gt;chomp&lt;/code&gt; that newline away. The code would then be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MHTTP::Tiny &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$ip=HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://curlmyip.com})-&amp;gt;{content}; chomp $ip; say $ip&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;121.45.140.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not so clean anymore is it? In fact it would be a stretch to call this a &amp;ldquo;one liner&amp;rdquo; at all. What about if I wanted to add exception handling, to &lt;code&gt;die&lt;/code&gt; and print a useful error message? Once you get to this stage, it&amp;rsquo;s time to think about putting the code into a module.&lt;/p&gt;

&lt;h3 id=&#34;using-www-curlmyip&#34;&gt;Using WWW::curlmyip&lt;/h3&gt;

&lt;p&gt;The module exports a &lt;code&gt;get_ip&lt;/code&gt; function which returns the IP address. It&amp;rsquo;s super simple to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::curlmyip;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ip();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good. But what can you do with this information? In the past I&amp;rsquo;ve had programs check my IP address when connected to a VPN, or to TOR to confirm my real IP is masked. The other obvious use case is geolocation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::curlmyip;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Geo::IP;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ip();

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $geoip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Geo::IP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GeoLiteCity.dat&amp;#39;&lt;/span&gt;, GEOIP_STANDARD);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $record &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $geoip&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;record_by_addr($ip);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You are in $record-&amp;gt;{region_name}, $record-&amp;gt;{country_code}\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this code I retrieve my IP address and then lookup my location using the &lt;a href=&#34;https://metacpan.org/pod/Geo::IP&#34;&gt;Geo::IP&lt;/a&gt; module from MaxMind. Saving the code as &lt;code&gt;whereami.pl&lt;/code&gt; and running it outputs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ whereami&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
You are in New York, US&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The geolocation data could also be used an an input to last week&amp;rsquo;s weather &lt;a href=&#34;http://perltricks.com/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl&#34;&gt;script&lt;/a&gt; to automatically retrieve the weather forecast for your local area.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a simple task but hopefully WWW::curlmyip makes obtaining your IP address a little easier. If your interested in Geo::IP, check out Gabor Szabo&amp;rsquo;s recent &lt;a href=&#34;http://perlmaven.com/using-travis-ci-and-installing-geo-ip-on-linux#h2&#34;&gt;guide&lt;/a&gt; on how to install it. Finally, if you want to get your IP address and location in a single request, take a look at my other new module, &lt;a href=&#34;https://metacpan.org/pod/WWW::ipinfo&#34;&gt;WWW::ipinfo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

