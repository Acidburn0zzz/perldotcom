<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lists on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/lists/</link>
    <description>Recent content in Lists on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2000 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/lists/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guide to the Perl 6 Working Groups</title>
      <link>http://localhost:1313/pub/2000/09/perl6mail.html/</link>
      <pubDate>Tue, 05 Sep 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/09/perl6mail.html/</guid>
      <description>

&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;•&lt;a href=&#34;#announcements%20and%20overviews&#34;&gt;Announcements and Overviews&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#internals&#34;&gt;Internals&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#language&#34;&gt;Language&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagedata&#34;&gt;perl6-language-data&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagedatetime&#34;&gt;perl6-language-datetime&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageerrors&#34;&gt;perl6-language-errors&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageflow&#34;&gt;perl6-language-flow&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageio&#34;&gt;perl6-language-io&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagemlc&#34;&gt;perl6-language-mlc&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageobjects&#34;&gt;perl6-language-objects&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageregex&#34;&gt;perl6-language-regex&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagestrict&#34;&gt;perl6-language-strict&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagesubs&#34;&gt;perl6-language-subs&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageunlink&#34;&gt;perl6-language-unlink&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Larry said at the Perl conference this summer that the old model of Perl development was not working well any more. That model had one giant mailing list, &lt;code&gt;perl5-porters&lt;/code&gt;, on which everything pertaining to Perl 5 was discussed.&lt;/p&gt;

&lt;p&gt;After the conference, a new mailing list, called &lt;code&gt;bootstrap&lt;/code&gt;, was set up to discuss how Perl 6 design and development should be organized. The &lt;code&gt;bootstrap&lt;/code&gt; discussion set up a number of &amp;ldquo;working groups,&amp;rdquo; each with its own mailing list, and each with a chairperson charged with maintaining order on their mailing list, promoting discussion, and producing weekly activity reports.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bootstrap&lt;/code&gt; list also set up a &amp;ldquo;request for comments&amp;rdquo; process. Anyone who wants to make a proposal about what Perl 6 should become is required to write up a formal proposal, called an &lt;code&gt;RFC&lt;/code&gt;, and submit it to the Perl 6 librarian. The RFC is then discussed by the appropriate working group. The idea is that this will discourage people from floating quarter-baked ideas &amp;ndash; having to write up an RFC will motivate people to think through their ideas a little better so that they are at least half-baked.&lt;/p&gt;

&lt;p&gt;One problem with the &lt;code&gt;perl5-porters&lt;/code&gt; model was that the same topics would come up over and over every few months. The hope is that a repository of old proposals will make it easier to recognize when a topic has come up before.&lt;/p&gt;

&lt;p&gt;The Perl 6 development site at &lt;a href=&#34;http://dev.perl.org/&#34;&gt;http://dev.perl.org/&lt;/a&gt; has information about the RFCs and the working groups.&lt;/p&gt;

&lt;p&gt;All the mailing lists are hosted on &lt;code&gt;perl.org&lt;/code&gt;. Most are archived at &lt;code&gt;www.mail-archive.com&lt;/code&gt;. For example, the &lt;code&gt;perl6-announce&lt;/code&gt; list is archived at &lt;a href=&#34;http://www.mail-archive.com/perl6-announce@perl.org/&#34;&gt;http://www.mail-archive.com/perl6-announce@perl.org/&lt;/a&gt; . Summaries of some mailing lists are available at &lt;a href=&#34;http://dev.perl.org/summary/&#34;&gt;http://dev.perl.org/summary/&lt;/a&gt;. A description of the main Perl 6 mailing lists and working groups follows:&lt;/p&gt;

&lt;p&gt;Until this week, &lt;code&gt;perl6-announce&lt;/code&gt; received announcements of new Perl 6 mailing lists, working group weekly summaries, and new RFCs. But nobody expected that so many RFCs would be posted so quickly. In the past few days, the RFC traffic has been moved to a secondary list, &lt;code&gt;perl6-annnounce-rfc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-meta&lt;/code&gt; replaced the old &lt;code&gt;bootstrap&lt;/code&gt; list. Discussion concerns how mailing lists are run, RFC formatting issues, and other meta-topics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-all&lt;/code&gt; is supposed to carry &lt;em&gt;every&lt;/em&gt; message from &lt;em&gt;every&lt;/em&gt; list, so don&amp;rsquo;t subscribe unless you want a &lt;em&gt;lot&lt;/em&gt; of mail.&lt;/p&gt;

&lt;p&gt;The main internals mailing list is &lt;code&gt;perl6-internals&lt;/code&gt;, which is chaired by Dan Sugalski. This is the only list seriously discussing implementation instead of interface issues, so it is probably more worthy of attention. (Discussion on the other lists often gets rather pie-in-the-sky because the participants are not constrained by the limitations of reality.)&lt;/p&gt;

&lt;p&gt;Topics interest include alternative garbage collection methods and a &lt;code&gt;vtable&lt;/code&gt; structure for Perl variables. The hope is that if you don&amp;rsquo;t like the way Perl hashes work, you will be able to plug in your own implementation, which is presently impossible. (This was also one of the major goals of Topaz.) There have also been a lot of flames about whether to take the socket functions out of the core, whether to take the trigonometry functions out of the core, etc.&lt;/p&gt;

&lt;h2 id=&#34;span-id-language-language-span&#34;&gt;&lt;span id=&#34;language&#34;&gt;Language&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This large family of mailing lists is the repository for everyone&amp;rsquo;s half-baked ideas about what Perl 6 should look like to the Perl 6 programmer. Traffic on &lt;code&gt;perl6-language&lt;/code&gt; itself is high, and would be enormous, except that much of the traffic has been spun off to a dozen or so sublists. The remaining topics are miscellaneous. Recent highlights include ``Perl should support an interactive mode&amp;rdquo; and ``&lt;code&gt;chop()&lt;/code&gt; should be dropped.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The sublists of &lt;code&gt;perl6-language&lt;/code&gt; include:&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagedata-perl6-language-data-span&#34;&gt;&lt;span id=&#34;perl6languagedata&#34;&gt;perl6-language-data&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data and data types. Much of the discussion here has concerned matrices and the best way to express matrix operations in Perl. The PDL (Perl Data Language) group has a number of RFCs out asking for Perl to provide better support for true, C-style arrays.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagedatetime-perl6-language-datetime-span&#34;&gt;&lt;span id=&#34;perl6languagedatetime&#34;&gt;perl6-language-datetime&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Date and time representations and other issues. This list has carried very little traffic.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageerrors-perl6-language-errors-span&#34;&gt;&lt;span id=&#34;perl6languageerrors&#34;&gt;perl6-language-errors&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Error handling and exceptions. Most of the traffic on this list has concerned built-in exception objects for Perl.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageflow-perl6-language-flow-span&#34;&gt;&lt;span id=&#34;perl6languageflow&#34;&gt;perl6-language-flow&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Flow control syntax. Most of the discussion on this list has been about the language interface to threads, but there have been some other conversations. One suggestion is to add an automatic loop counter to Perl, so that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for (@array) {

          print &amp;quot;$_ is element number $COUNTER\n&amp;quot;

        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would print each element of the array with its index. Part of the discussion from &lt;code&gt;perl6-language-errors&lt;/code&gt; about exception handling has found its way over here.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageio-perl6-language-io-span&#34;&gt;&lt;span id=&#34;perl6languageio&#34;&gt;perl6-language-io&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Input and output. Surprisingly, this list seems to be discussing mostly trivia. One proposal removes the &lt;code&gt;format&lt;/code&gt; feature from the core, placing it into a module. Another proposal wants to make &lt;code&gt;&amp;gt;blah blah blah&amp;lt;&lt;/code&gt; synonymous with &lt;code&gt;print  &amp;quot;blah blah blah&amp;quot;&lt;/code&gt;. Another wants to rename &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, and &lt;code&gt;STDERR&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagemlc-perl6-language-mlc-span&#34;&gt;&lt;span id=&#34;perl6languagemlc&#34;&gt;perl6-language-mlc&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was created with a specific mandate to discuss the issue of multi-line comments for two weeks and to report back with the results. The results: No consensus was reached. The list is now closed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageobjects-perl6-language-objects-span&#34;&gt;&lt;span id=&#34;perl6languageobjects&#34;&gt;perl6-language-objects&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Object-oriented programming features. Some of the more interesting proposals: constructor and destructor methods should be called hierarchically. (This means that if class &lt;code&gt;A&lt;/code&gt; inherits from &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s constructor should automatically call &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s before it runs itself.) Private keys and methods for objects.&lt;/p&gt;

&lt;p&gt;The point of many of the proposals seems to be to make Perl look more like C++ or like Java.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageregex-perl6-language-regex-span&#34;&gt;&lt;span id=&#34;perl6languageregex&#34;&gt;perl6-language-regex&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Regexes and matching syntax and the &lt;code&gt;tr///&lt;/code&gt; operator. A number of threads here have focused on getting rid of the &lt;code&gt;=~&lt;/code&gt; operator and making pattern matching and replacement syntax more normal. Other proposals have tried to clean up some of Perl&amp;rsquo;s less felicitous regex features, such as &lt;code&gt;$&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagestrict-perl6-language-strict-span&#34;&gt;&lt;span id=&#34;perl6languagestrict&#34;&gt;perl6-language-strict&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was set up to discuss the relationship of Perl 6 to the &lt;code&gt;use strict&lt;/code&gt; pragma. Some of the issues it discussed were whether &lt;code&gt;strict &#39;vars&#39;&lt;/code&gt; should be the default and whether variables could be lexical by default. The list is now closed. There was supposed to be a summary, but I didn&amp;rsquo;t see it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagesubs-perl6-language-subs-span&#34;&gt;&lt;span id=&#34;perl6languagesubs&#34;&gt;perl6-language-subs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Issues related to subroutines and subroutine calls and return values. There has been a lot of discussion of lvalue subroutines. An lvalue subroutine is one that can be placed on the left-hand side of an &lt;code&gt;=&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        mysub(...) = ... ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is frequently useful in connection with object-oriented styles, where you might like to write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $car-&amp;gt;color = &#39;red&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-perl6languageunlink-perl6-language-unlink-span&#34;&gt;&lt;span id=&#34;perl6languageunlink&#34;&gt;perl6-language-unlink&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was given a fixed amount of time to determine whether the &lt;code&gt;unlink&lt;/code&gt; function should be renamed to something more intuitive. The list is closed.&lt;/p&gt;

&lt;h2 id=&#34;span-id-miscellaneous-miscellaneous-span&#34;&gt;&lt;span id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;perl6-build&lt;/code&gt; discusses the configuration and build process.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl-qa&lt;/code&gt;, led by Michael Schwern, concerns quality assurance, bug tracking, and testing. Note that unlike the others, the mailing list name has no &lt;code&gt;6&lt;/code&gt; in it. Many of Michael&amp;rsquo;s ideas about how to find and track bugs can be implemented for Perl 5 regardless of what happens to Perl 6, so if you&amp;rsquo;re looking for some real work to do right away, this would be a good list to join.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-stdlib&lt;/code&gt; is supposed to carry proposals relating to Perl&amp;rsquo;s standard modules, but it has had very little traffic.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-licenses&lt;/code&gt; is carrying discussion about licensing and free software issues.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

