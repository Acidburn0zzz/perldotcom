<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Role_basic on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/role_basic/</link>
    <description>Recent content in Role_basic on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Oct 2014 13:16:03 +0000</lastBuildDate>
    <atom:link href="/tags/role_basic/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to test Perl roles without creating test classes</title>
      <link>http://localhost:1313/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</link>
      <pubDate>Thu, 16 Oct 2014 13:16:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/120/2014/10/16/How-to-test-Perl-roles-without-creating-test-classes/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been working on a &lt;a href=&#34;https://github.com/sillymoose/March&#34;&gt;game engine&lt;/a&gt; which uses a composition pattern for its actors. I&amp;rsquo;m using &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt; to create the roles. Role::Tiny is really convenient as it lets you use roles with native OO Perl, without committing to a whole object system like Moose. A typical role looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; March::Attribute::Id;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.020&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;signatures&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;experimental&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; ($self)
{
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{id};
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this role does is return the id attribute of the consuming class (yes I&amp;rsquo;m using &lt;a href=&#34;http://perltricks.com/article/72/2014/2/24/Perl-levels-up-with-native-subroutine-signatures&#34;&gt;signatures&lt;/a&gt; throughout). I wanted to write unit tests for this role, but I didn&amp;rsquo;t want to a create test class to test the role. So how do you construct an object from a package that has no constructor? The answer is by using &lt;code&gt;bless&lt;/code&gt; in your test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless { id &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; }, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Id&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Id&amp;#39;&lt;/span&gt; }

is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id()&amp;#39;&lt;/span&gt;;

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code creates an object called &lt;code&gt;$self&lt;/code&gt; by blessing a hashref with the package name of the role that I want to test. It adds a key value pair for the id attribute, and then tests that the role&amp;rsquo;s id method returns the correct id value. I can execute the tests using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;vl t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Id&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t 
t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Id&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; 
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Attribute::Id;
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; id()
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
ok
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is another role I want to test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; March::Attribute::Direction;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.020&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;signatures&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;experimental&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Game;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Msg;

requires &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;direction&lt;/span&gt; ($self, $new_direction = 0)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($new_direction &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $new_direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;isa(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Math::Shape::Vector&amp;#39;&lt;/span&gt;))
    {
        $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{direction} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $new_direction;

        &lt;span style=&#34;color:#75715e&#34;&gt;# publish direction to game queue&lt;/span&gt;
        March::Game&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;publish(
            March::Msg&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(__PACKAGE__, $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;id, $new_direction)
        );
    }
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{direction};
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This role gets and sets the direction vector for the consuming class. The challenge with testing this role is that it requires the consuming class to implement an &lt;code&gt;id&lt;/code&gt; method. Role::Tiny&amp;rsquo;s &lt;code&gt;requires&lt;/code&gt; function is a great way to ensure that the consuming class meets the requirements of the role. But how do we test it without creating a real class with an &lt;code&gt;id&lt;/code&gt; sub? What I do is declare the required sub in the test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Math::Shape::Vector;

&lt;span style=&#34;color:#75715e&#34;&gt;# create an object&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless { direction &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Math::Shape::Vector&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) 
                  }, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Direction&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# add required sub&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;March&lt;/span&gt;::Attribute::Direction::id { &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; };

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;March::Attribute::Direction&amp;#39;&lt;/span&gt; }

is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{x}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction x is 1&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{y}, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction y is 2&amp;#39;&lt;/span&gt;;
ok $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction( Math::Shape::Vector&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) ),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Update direction to new vector&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{x}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction x is still 1&amp;#39;&lt;/span&gt;;
is $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;direction&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{y}, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Check direction y is now 0&amp;#39;&lt;/span&gt;;

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The magic line is &lt;code&gt;sub March::Attribute::Direction::id { 107 };&lt;/code&gt; which adds the sub to the role I&amp;rsquo;m testing (it just returns the value 107). Now I can test the &lt;code&gt;direction&lt;/code&gt; method, again using &lt;code&gt;prove&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lv t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t 
t&lt;span style=&#34;color:#e6db74&#34;&gt;/Attribute/&lt;/span&gt;Direction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; 
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; March::Attribute::Direction;
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Update direction to &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; vector
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
ok &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Check direction
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
ok
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.08&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.10&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;it-s-not-all-gravy&#34;&gt;It&amp;rsquo;s not all gravy&lt;/h3&gt;

&lt;p&gt;One drawback I&amp;rsquo;ve encountered with this approach can be seen with the following role and test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Data::Inspector;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Role::Tiny;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inspect_data&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $data);
    Data::Dumper&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Dump([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Inspecting:&amp;#39;&lt;/span&gt;, $data]);
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This role has a method called &lt;code&gt;inspect_data&lt;/code&gt; which simply returns a dump of any data reference pass to it. This is the test file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bless {}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data::Inspector&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { use_ok &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data::Inspector&amp;#39;&lt;/span&gt; } 

ok $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;inspect_data({ test &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt; });

done_testing();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before I bless the role in the test file and then proceed to test the &lt;code&gt;inspect_data&lt;/code&gt; method. This test file runs and all the tests pass. Can you spot this issue here? Notice that the Data::Inspector role uses &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&amp;rsquo;s&lt;/a&gt; &lt;code&gt;Dump&lt;/code&gt; method, but it doesn&amp;rsquo;t load the Data::Dumper module, the test file does! This is a problem as when the Data::Inspector role is used elsewhere in real code, it will crash and burn when it doesn&amp;rsquo;t find Data::Dumper loaded in memory.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With this project I intend to create a lot of simple roles, so this approach provides a lightweight way for me to test roles within the test file without creating test classes for every role.&lt;/p&gt;

&lt;p&gt;I really like &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;Role::Tiny&lt;/a&gt;. It&amp;rsquo;s flexible: you can create minimalist trait-like behavior or go further and create mixins (roles which modify state). It has nice features like auto-enabling strict and warnings, method modifiers and good &lt;a href=&#34;https://metacpan.org/pod/Role::Tiny&#34;&gt;documentation&lt;/a&gt;. &lt;a href=&#34;https://metacpan.org/pod/Role::Basic&#34;&gt;Role::Basic&lt;/a&gt; is another lightweight roles module that supports traits only (by &lt;a href=&#34;https://metacpan.org/pod/Role::Basic#DESIGN-GOALS-AND-LIMITATIONS&#34;&gt;design&lt;/a&gt;). I wonder if I&amp;rsquo;ll come to regret using a mixin approach as I get further into development of the game engine.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

