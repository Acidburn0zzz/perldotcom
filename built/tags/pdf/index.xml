<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pdf on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pdf/</link>
    <description>Recent content in Pdf on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 May 2020 09:44:03 +0000</lastBuildDate>
    <atom:link href="/tags/pdf/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl Hacks, Perl School, and the future of Perl publishing</title>
      <link>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</link>
      <pubDate>Thu, 28 May 2020 09:44:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</guid>
      <description>

&lt;p&gt;Dave Cross, long-time Perl user, trainer, and author, recently released &lt;a href=&#34;https://perlhacks.com/2020/04/the-best-of-perl-hacks/&#34;&gt;The Best of Perl Hacks&lt;/a&gt;, a curated collection of his best posts from his &lt;a href=&#34;https://perlhacks.com&#34;&gt;Perl Hacks blog&lt;/a&gt;. His imprint, &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt;, has published six e-books, including two that I wrote.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an unrelated book, &lt;a href=&#34;http://shop.oreilly.com/product/9780596526740.do&#34;&gt;Perl Hacks: Tips &amp;amp; Tools For Programming, Debugging, And Surviving&lt;/a&gt;, by chromatic, Damian Conway, and Curtis &amp;ldquo;Ovid&amp;rdquo; Poe. It&amp;rsquo;s also very good, but completely separate from Dave&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-hacks-when-did-you-start-it-and-what-do-you-like-to-post-there&#34;&gt;What is Perl Hacks? When did you start it and what do you like to post there?&lt;/h4&gt;

&lt;p&gt;Perl Hacks is my Perl blog. It&amp;rsquo;s where I post all my Perl-related articles.&lt;/p&gt;

&lt;p&gt;I started it in May 2009. Before then, pretty much everyone in the
Perl community used to blog on a site called &lt;a href=&#34;https://use-perl.github.io&#34;&gt;Use
Perl&lt;/a&gt;. But that site was starting to look
a bit dated and a number of people moved their blogs to other places
at around the same time. It&amp;rsquo;s no coincidence that the
&lt;a href=&#34;https://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; site also dates from the same
year.&lt;/p&gt;

&lt;p&gt;My rule for choosing what to post on the site is basically &amp;ldquo;is this
about Perl?&amp;rdquo; But looking back over the lifetime of the site (which I
did when compiling the book) I noticed that the type of article had
changed over time. When I first started, there were a lot of &amp;ldquo;newsy&amp;rdquo;
entriesâ€”&amp;rdquo;London.pm will be holding these meetings&amp;rdquo;, &amp;ldquo;I&amp;rsquo;m running a
training course&amp;rdquo;, things like that. But later I started posting longer
articles about the Perl community or interesting technical corners of
Perl.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-choose-what-went-into-the-ebook-what-are-some-of-your-favorite-posts-which-ones-got-the-best-responses&#34;&gt;How did you choose what went into the ebook? What are some of your favorite posts? Which ones got the best responses?&lt;/h4&gt;

&lt;p&gt;I basically read through the site over a weekend. I ignored all of the
short articles and anything that was topical and would no longer be
interesting. I then did a second pass, planning to get to about fifty
articles. I think I ended up with fifty-seven.&lt;/p&gt;

&lt;p&gt;There are a couple of technical articles that I&amp;rsquo;m particularly pleased
with. &lt;a href=&#34;https://perlhacks.com/2014/01/dots-perl/&#34;&gt;Dots and Perl&lt;/a&gt;
explains Perl&amp;rsquo;s five operators that are just made of dots. Can you
name them all? Ok, strictly speaking, one of them isn&amp;rsquo;t actually an
operator. And &lt;a href=&#34;https://perlhacks.com/2015/04/subroutines-and-ampersands/&#34;&gt;Subroutines and
Ampersands&lt;/a&gt;
was written so I had somewhere to point people who still insist on
putting ampersands on subroutine calls. It carefully explains why it&amp;rsquo;s
rarely necessary (and hasn&amp;rsquo;t been since Perl 5 was released).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://perlhacks.com/2015/12/long-death-cgi-pm/&#34;&gt;The Long Death of
CGI.pm&lt;/a&gt; which
investigated the effects that removing
&lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI.pm&lt;/a&gt; from the Perl core distribution
would have. I thought there was some nice detective work in there.&lt;/p&gt;

&lt;p&gt;The post that got the most response was called &lt;a href=&#34;https://perlhacks.com/2012/03/you-must-hate-version-control-systems/&#34;&gt;You Must Hate Version
Control
Systems&lt;/a&gt;. The title was taken from a Perl job ad from a company that
no-one seemed to want to work for. The person who posted the ad turned
up in the comments and tried to explain why he wrote that, but I don&amp;rsquo;t
think anyone was convinced. This was the one time that I regretted
that I couldn&amp;rsquo;t use a post&amp;rsquo;s comments in the book.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-school-why-did-you-start-it-what-was-the-first-book&#34;&gt;What is Perl School? Why did you start it? What was the first book?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; was a brand that I started to
use in 2012 for some training I ran in London. I had theory that
people weren&amp;rsquo;t keeping their Perl knowledge up to date and many
employers weren&amp;rsquo;t keen on investing in training about what was &amp;ldquo;just a
scripting language.&amp;rdquo; So, I reasoned, if I ran low-cost training
courses at the weekend, people would come on them and the average
level of Perl knowledge in London would rise.&lt;/p&gt;

&lt;p&gt;I ran these courses for a year before putting them on ice. But I liked
the brand and knew that I wanted to use it again in the future.&lt;/p&gt;

&lt;p&gt;In 2015 I wrote a beginners&amp;rsquo; Perl tutorial for Udemy. They published
it on their site and I often pointed people at it. But a couple of
years later, I checked their site to find that a CSS upgrade had
rendered the page pretty much unreadable. I pointed this out to them
and after a bit of discussion, they told me that they weren&amp;rsquo;t going to
invest the time to fix it but said that I was welcome to publish it
elsewhere.&lt;/p&gt;

&lt;p&gt;At the same time I had been experimenting with building ebooks from
Markdown and had developed the pipeline that I still use today. So the
first Perl School book was the serendipitous meeting between my
experimental ebook pipeline and a long piece of text that I wanted to
get out to as many people as possible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called &lt;a href=&#34;https://perlschool.com/books/perl-taster/&#34;&gt;Perl Taster: Your First Two Hours With
Perl&lt;/a&gt;. I published it just
before the 2017 London Perl Workshop and announced it in a lighting
talk at that workshop. I invited other people to contribute books,
offering to help with the technical parts of getting them published.
John Davies approached me about the book that became &lt;a href=&#34;https://perlschool.com/books/selenium-perl/&#34;&gt;Selenium and
Perl&lt;/a&gt; and it&amp;rsquo;s just grown from there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-was-your-experience-giving-low-cost-and-free-perl-training-in-the-uk&#34;&gt;What was your experience giving low-cost and free Perl training in the UK?&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve run Perl training at all levels in the UK. Five years ago I&amp;rsquo;d
still get two or three enquiries a year from companies who were
interested in training, but that&amp;rsquo;s all dried up. I can&amp;rsquo;t remember the
last time someone asked me about running a course for them.&lt;/p&gt;

&lt;p&gt;The Perl School courses were popular for a while. I&amp;rsquo;d get twenty or so
people giving up their Saturday and paying a small fee to get Perl
training. But after a year, the interest started to wane. I cancelled
the last one because I didn&amp;rsquo;t get enough attendees to make it
worthwhile.&lt;/p&gt;

&lt;p&gt;For many years I&amp;rsquo;ve run a free ninety-minute or two-hour course as
part of the London Perl Workshop. I always get a pretty good turn-out
for those. But, to be honest, that&amp;rsquo;s about the only place I can
guarantee much interest in Perl training in the UK these days.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;you-previously-wrote-the-print-books-data-munging-with-perl-https-www-manning-com-books-data-munging-with-perl-manning-press-and-template-toolkit-http-www-template-toolkit-org-book-html-o-reilly-associates-with-andy-wardley-and-darren-chamberlain-how-is-perl-school-s-process-different-than-what-you-experienced-with-those-publishers&#34;&gt;You previously wrote the print books &lt;a href=&#34;https://www.manning.com/books/data-munging-with-perl&#34;&gt;Data Munging with Perl&lt;/a&gt; (Manning Press) and &lt;a href=&#34;http://www.template-toolkit.org/book.html&#34;&gt;Template Toolkit&lt;/a&gt; (O&amp;rsquo;Reilly &amp;amp; Associates, with Andy Wardley and Darren Chamberlain). How is Perl School&amp;rsquo;s process different than what you experienced with those publishers?&lt;/h4&gt;

&lt;p&gt;I guess the main difference is that there&amp;rsquo;s a lot less process
involved with the Perl School books.&lt;/p&gt;

&lt;p&gt;With a traditional publisher, there are lots of departments involved.
The editor will want to know when the manuscript will be ready because
they will want to book time from technical reviewers and
proof-readers. They&amp;rsquo;ll also need to plan in designers and even book
printing time on the presses. All of that means there&amp;rsquo;s a lot of
pressure on the author to make a plan for getting the book written and
then to stick to that plan.&lt;/p&gt;

&lt;p&gt;With an ebook, it&amp;rsquo;s all a lot less structured. I largely rely on
authors to arrange their own technical reviewers. I&amp;rsquo;ll do a bit of
proof-reading. And we haven&amp;rsquo;t (as yet) used any designersâ€”that
probably shows, to be honest.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m not going to pressure an author to finish a manuscript. When
you&amp;rsquo;re ready, I&amp;rsquo;ll steer you through turning your Markdown into an
ebook and then publishing it on Amazon. If it takes longer than you
expected, then so what?&lt;/p&gt;

&lt;p&gt;In many ways, I see parallels with the &lt;a href=&#34;http://theleanstartup.com&#34;&gt;Lean
Startup&lt;/a&gt; ideas of Eric Ries. We&amp;rsquo;re small
and we&amp;rsquo;re agile. If you come to me with a completed book, we might
well be able to get it on Amazon in a week or two. For a traditional
publisher, that time will be months.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-are-the-biggest-challenges-to-technical-publishing-today-how-does-something-like-perl-school-respond-to-that&#34;&gt;What do you think are the biggest challenges to technical publishing today? How does something like Perl School respond to that?&lt;/h4&gt;

&lt;p&gt;Traditional publishing is an expensive business. Publishers need to
make a lot of money just to break even on a book. I don&amp;rsquo;t know the
details, but they have to sell a certain number of copies in order to
make it worth publishing a book. And that, in turn, means that they
will rarely take a risk. For a technical publisher, that means only
publishing books about technologies that have reached a certain level
of usage.&lt;/p&gt;

&lt;p&gt;People are also buying fewer technical books. Technologies change
quickly and many books will be out of date before they get to the
bookshops. If you want up to date information about your favourite
technologies then you&amp;rsquo;re probably better off going to the developer&amp;rsquo;s
web site.&lt;/p&gt;

&lt;p&gt;For a publisher like Perl School, the economics are different. We have
far smaller costs and (as I mentioned before) we can get books in
customers&amp;rsquo; hands far more quickly.&lt;/p&gt;

&lt;p&gt;Large technical publishers have largely abandoned Perl. They just
don&amp;rsquo;t see that they would get the level of sales needed to justify a
new Perl book. Perl School is happy to take that riskâ€”because, really,
it&amp;rsquo;s a tiny risk for us.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-are-your-personal-reading-preferences-which-device-do-you-like-what-size-screen-do-you-need-and-which-format-works-best-for-you&#34;&gt;What are your personal reading preferences? Which device do you like, what size screen do you need, and which format works best for you?&lt;/h4&gt;

&lt;p&gt;I do like a real book. But they take up too much space, so I&amp;rsquo;ve pretty
much completely stopped buying them over the last five years. I like
being able to access all of the ebook part of my library from a device
that I can carry in my pocket. One thing that would make me really
happy is a device that could rip my existing paper library to ebooks
in the same way that we all ripped our CDs to MP3s.&lt;/p&gt;

&lt;p&gt;Currently, I read ebooks on an 8&amp;rdquo; Amazon Kindle Fire. That&amp;rsquo;s just
bigger than a paperback and fits in a (large) pocket in the same way
that a book would. I also have a 10&amp;rdquo; Pixel Slate which I&amp;rsquo;ll often use
for reading in my house. I&amp;rsquo;m rather firmly locked into the Amazon
ebook ecosystem, so I prefer to find books in Mobi formatâ€”but I can
drive Calibre, so I&amp;rsquo;m happy to convert from other formats.&lt;/p&gt;

&lt;p&gt;I get mildly annoyed by web sites that promise me an ebook and then
deliver a PDF. PDFs are made to be read at a certain size and if
you&amp;rsquo;re reading them on a smaller screen it will either be too small to
read or you&amp;rsquo;ll need to scroll back and forth a lot. A proper ebook
format (like Mobi or ePub) will reformat pages for any combination of
screen size and font size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-can-someone-write-a-book-for-perl-school-what-topics-do-you-think-would-be-most-interesting&#34;&gt;How can someone write a book for Perl School? What topics do you think would be most interesting?&lt;/h4&gt;

&lt;p&gt;Simply email me at hello@perlschool.com with your suggestions. I&amp;rsquo;ll
talk you though the technical side of getting the book written and
published on Amazonâ€”it&amp;rsquo;s really not very hard.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d pretty much consider any Perl-related topic. I would never have
thought of publishing books on Selenium or Cucumber, but John Davies
wrote them and I&amp;rsquo;ve published them. And they seem to be selling.&lt;/p&gt;

&lt;p&gt;But there are books I&amp;rsquo;d like to see. I&amp;rsquo;d love to publish books on the
various &amp;ldquo;Modern Perl&amp;rdquo; tools that we all useâ€”Moose, DBIx::Class, things
like thatâ€”and all of Perl&amp;rsquo;s popular web frameworks.&lt;/p&gt;

&lt;p&gt;I think the one I&amp;rsquo;d most like to see is one that, in my head, is
called &amp;ldquo;Modern Core Perl&amp;rdquo;. It covers all of the important changes in
the core Perl language back to version 5.10. Basically, it&amp;rsquo;s a
tutorial based on all of the &lt;code&gt;perldelta&lt;/code&gt;s. I&amp;rsquo;ve thought about writing
it myself a few times, but I just don&amp;rsquo;t have the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</link>
      <pubDate>Tue, 10 Sep 2019 17:18:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::GoShippo&#34;&gt;WebService::GoShippo&lt;/a&gt; is a simple client for Shippo&amp;rsquo;s shipping and handling API&lt;/li&gt;
&lt;li&gt;Use Google&amp;rsquo;s CloudTasks API to queue up tasks with &lt;a href=&#34;https://metacpan.org/pod/Google::CloudTasks&#34;&gt;Google::CloudTasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manage machines and software using the Puppet Enterprise API with &lt;a href=&#34;https://metacpan.org/pod/Puppet::Classify&#34;&gt;Puppet::Classify&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Puppet::Orchestrator&#34;&gt;Puppet::Orchestrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure 433 MHz HC-12 Radio Frequency serial transceivers with &lt;a href=&#34;https://metacpan.org/pod/RF::HC12&#34;&gt;RF::HC12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PlantUML&#34;&gt;WWW::PlantUML&lt;/a&gt; is a simple client for retrieving diagram URLs from a plantuml server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parse ldap config files with &lt;a href=&#34;https://metacpan.org/pod/Config::Parser::ldap&#34;&gt;Config::Parser::ldap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use XOAUTH2 authentication with Net::POP3 via &lt;a href=&#34;https://metacpan.org/pod/Net::POP3::XOAuth2&#34;&gt;Net::POP3::XOAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenBSD::Checkpass&#34;&gt;OpenBSD::Checkpass&lt;/a&gt; provides an interface to OpenBSD crypt_checkpass(3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Helper::WindowFunctions&#34;&gt;DBIx::Class::Helper::WindowFunctions&lt;/a&gt; adds basic support for window functions to DBIx::Class&lt;/li&gt;
&lt;li&gt;Clean data so it is safe to output to JSON using &lt;a href=&#34;https://metacpan.org/pod/Data::Clean::ForJSON&#34;&gt;Data::Clean::ForJSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dita::PCD&#34;&gt;Dita::PCD&lt;/a&gt; is an implementation of the Please Change Dita Language&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Puppet::DB&#34;&gt;Puppet::DB&lt;/a&gt; retrieves data (facts, reports) from a Puppet DB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Code::Quality&#34;&gt;Code::Quality&lt;/a&gt; uses static analysis  (clang, lizard) to compute a &amp;ldquo;code quality&amp;rdquo; metric for a program&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Curses::Readline&#34;&gt;Curses::Readline&lt;/a&gt; provides readline for curses&lt;/li&gt;
&lt;li&gt;Perform continuous database migration using &lt;a href=&#34;https://metacpan.org/pod/Geoffrey&#34;&gt;Geoffrey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Partially apply parameters to functions with &lt;a href=&#34;https://metacpan.org/pod/PartialApplication&#34;&gt;PartialApplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profile database queries run during tests using &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::DBIProfile&#34;&gt;Test2::Plugin::DBIProfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Collect and display test memory usage information with &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::MemUsage&#34;&gt;Test2::Plugin::MemUsage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/parent::versioned&#34;&gt;parent::versioned&lt;/a&gt; establishes ISA relationships with base classes at compile time, with version checking&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Layout&#34;&gt;Text::Layout&lt;/a&gt; can create documents/graphics using the Pango style markup formatting (PDFs, cairo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gaming&#34;&gt;Gaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run Conway&amp;rsquo;s Game of Life faster using &lt;a href=&#34;https://metacpan.org/pod/Game::Life::Faster&#34;&gt;Game::Life::Faster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::static&#34;&gt;Mojolicious::Command::static&lt;/a&gt; stands up a simple static file server&lt;/li&gt;
&lt;li&gt;Test Mojo under Test2 with &lt;a href=&#34;https://metacpan.org/pod/Test2::MojoX&#34;&gt;Test2::MojoX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weasel::DriverRole&#34;&gt;Weasel::DriverRole&lt;/a&gt; provides an API definition for Weasel&amp;rsquo;s driver wrappers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</link>
      <pubDate>Mon, 13 Mar 2017 08:29:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebook Messenger Send API using &lt;a href=&#34;https://metacpan.org/pod/Facebook::Messenger::Client&#34;&gt;Facebook::Messenger::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Taskwarrior::Kusarigama&#34;&gt;Taskwarrior::Kusarigama&lt;/a&gt; provides a plugin system for the Taskwarrior task manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Fitbit&#34;&gt;WebService::Fitbit&lt;/a&gt; can get, post and delete Fitbit API data&lt;/li&gt;
&lt;li&gt;Get a perly interface to the &lt;a href=&#34;https://www.theforeman.org/introduction.html&#34;&gt;Foreman&lt;/a&gt; API using &lt;a href=&#34;https://metacpan.org/pod/WWW::Foreman::API&#34;&gt;WWW::Foreman::API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a CPANTS Kwalitee Report using &lt;a href=&#34;https://metacpan.org/pod/CPANTS::Kwalitee::Report&#34;&gt;CPANTS::Kwalitee::Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read large directories over NFS with &lt;a href=&#34;https://metacpan.org/pod/Linux::NFS::BigDir&#34;&gt;Linux::NFS::BigDir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coordinates::Converter::LV03&#34;&gt;Geo::Coordinates::Converter::LV03&lt;/a&gt; converts Swiss LV03 coordinates to WSG84 and vice versa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hadoop::Inline::ClassLoader&#34;&gt;Hadoop::Inline::ClassLoader&lt;/a&gt; loads Hadoop Java classes via Inline::Java&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::Tiny&#34;&gt;PDF::Tiny&lt;/a&gt; is a lightweight PDF parser&lt;/li&gt;
&lt;li&gt;Convert JSON via an IO layer with &lt;a href=&#34;https://metacpan.org/pod/PerlIO::via::json&#34;&gt;PerlIO::via::json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a raw quote operator for Perl with &lt;a href=&#34;https://metacpan.org/pod/Syntax::Keyword::RawQuote&#34;&gt;Syntax::Keyword::RawQuote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Autoload::AUTOCAN&#34;&gt;Autoload::AUTOCAN&lt;/a&gt; provides some sugar for autoloading methods&lt;/li&gt;
&lt;li&gt;Treat environment variables as arrays with &lt;a href=&#34;https://metacpan.org/pod/Env::ShellWords&#34;&gt;Env::ShellWords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repo::Commits&#34;&gt;Git::Repo::Commits&lt;/a&gt; gets all commits in a repository&lt;/li&gt;
&lt;li&gt;Part of the new MOP framework, &lt;a href=&#34;https://metacpan.org/pod/Method::Traits&#34;&gt;Method::Traits&lt;/a&gt; adds coderefs to methods via subroutine attributes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Piper&#34;&gt;Piper&lt;/a&gt; is a flexible, iterable pipeline engine with automatic batching with a great name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::tored&#34;&gt;Proc::tored&lt;/a&gt; manages a process using a pid file. Check out &lt;a href=&#34;https://metacpan.org/pod/Proc::tored::Pool&#34;&gt;Proc::tored::Pool&lt;/a&gt; for an example implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::Dash::Button&#34;&gt;Amazon::Dash::Button&lt;/a&gt; let&amp;rsquo;s you use your Amazon dash button for &lt;em&gt;anything&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get a perly interface to the Revolt USB Dongle PX-1674-675 using &lt;a href=&#34;https://metacpan.org/pod/Device::USB::PX1674&#34;&gt;Device::USB::PX1674&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/author/STEVEB&#34;&gt;Steve Bertrand&lt;/a&gt; released more RaspberryPi goodies:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::BMP180&#34;&gt;RPi::BMP180&lt;/a&gt; - interface to the BMP180 barometric pressure sensor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::DAC::MCP4922&#34;&gt;RPi::DAC::MCP4922&lt;/a&gt; - interface to the MCP49x2 series digital to analog converters (DAC) over the SPI bus&lt;/li&gt;
&lt;li&gt;See his recent blog &lt;a href=&#34;http://blogs.perl.org/users/steve_bertrand/2017/03/raspberry-pi-becoming-more-prevalent.html&#34;&gt;post&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compare visually similar strings with &lt;a href=&#34;https://metacpan.org/pod/String::Similex&#34;&gt;String::Similex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ucam::Term&#34;&gt;Ucam::Term&lt;/a&gt; returns information about the start and end dates of terms at the University of Cambridge&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::Tolkien::Shire::Data&#34;&gt;Date::Tolkien::Shire::Data&lt;/a&gt; provides functionality for Shire calendars.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Phylo::Forest::DBTree&#34;&gt;Bio::Phylo::Forest::DBTree&lt;/a&gt; provides a Bio::Phylo-like API for large phylogenies&lt;/li&gt;
&lt;li&gt;Partition a number into addition sequences with &lt;a href=&#34;https://metacpan.org/pod/Math::Partition::Rand&#34;&gt;Math::Partition::Rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get Kruskall-Wallis statistics and test using &lt;a href=&#34;https://metacpan.org/pod/Statistics::ANOVA::KW&#34;&gt;Statistics::ANOVA::KW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::EditFile&#34;&gt;Dancer2::Plugin::EditFile&lt;/a&gt; - easily edit a text file from a Dancer2 app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Mailer&#34;&gt;Email::Mailer&lt;/a&gt; aims to be a &amp;ldquo;multi-purpose emailer for HTML, auto-text, attachments, and templates&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PDF Processing with Perl</title>
      <link>http://localhost:1313/pub/2007/09/20/pdf-processing-with-perl.html/</link>
      <pubDate>Fri, 21 Sep 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/09/20/pdf-processing-with-perl.html/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.adobe.com/&#34;&gt;Adobe&lt;/a&gt;&amp;rsquo;s PDF has become a standard for text documents. Most office products can export their content into PDF. However, this software reaches its limits if you want advanced tasks such as combining different PDF documents into one single document or adding and adjusting the bookmarks panel for better navigation. Imagine that you want to collect all relevant Perl.com articles in one PDF file with an up-to-date bookmarks panel. You could use a tool like &lt;a href=&#34;http://www.easysw.com/&#34;&gt;HTMLDOC&lt;/a&gt;, but adding article number 51 would require you to fetch articles one through 50 from the Web again. In most cases you would not be satisfied by the resulting bookmarks panel, either. This article shows how to use &lt;a href=&#34;https://metacpan.org/pod/PDF::Reuse&#34;&gt;PDF::Reuse&lt;/a&gt;, by Lars Lundberg, for combining different PDF documents and adding bookmarks to them.&lt;/p&gt;

&lt;h3 id=&#34;example-material&#34;&gt;Example Material&lt;/h3&gt;

&lt;p&gt;Although its capabilities are limited in this area, you can also use &lt;code&gt;PDF::Reuse&lt;/code&gt; to create PDF documents. If you want to create more sophisticated documents you should investigate other PDF-packages like &lt;a href=&#34;https://metacpan.org/pod/PDF::API2&#34;&gt;PDF::API2&lt;/a&gt; from Alfred Reibenschuh or &lt;a href=&#34;https://metacpan.org/pod/Text::PDF&#34;&gt;Text::PDF&lt;/a&gt; from Martin Hosken. However &lt;code&gt;PDF::Reuse&lt;/code&gt; is sufficient to create a simple PDF to use in later examples. The following listing should be rather self explanatory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # file: examples/create-pdfs.pl
  use strict;
  use PDF::Reuse;

  mkdir &amp;quot;out&amp;quot; if (!-e &amp;quot;out&amp;quot;) ;

  foreach my $x (1..4) {
      prFile(&amp;quot;out/file-$x.pdf&amp;quot;);

      foreach my $y (1..10) {
          prText(35,800,&amp;quot;File: file-$x.pdf&amp;quot;);
          prText(510,800,&amp;quot;Page: $y&amp;quot;);

          foreach my $z (1..15) {
              prText(35,700-$z*16,&amp;quot;Line $z&amp;quot;);
          }

          # add graphics with the prAdd function

          # stroke color
          prAdd(&amp;quot;0.1 0.1 0.9 RG\n&amp;quot;);

          # fill color
          prAdd(&amp;quot;0.9 0.1 0.1 rg\n&amp;quot;);

          my $pos = 750 - ($y * 40);

          prAdd(&amp;quot;540 $pos 10 40 re\n&amp;quot;);
          prAdd(&amp;quot;B\n&amp;quot;);

          if ($y &amp;lt; 10) {
              prPage();
          }
      }

      prEnd();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open a new file with with &lt;code&gt;prFile($filename)&lt;/code&gt; and close it with &lt;code&gt;prEnd&lt;/code&gt;. Between those two calls, add text with the &lt;code&gt;prText&lt;/code&gt; command. You can also draw graphics by using the low level command &lt;code&gt;prAdd&lt;/code&gt; with plain PDF markup as parameter. Start a new page with &lt;code&gt;prPage&lt;/code&gt;. &lt;code&gt;prFile&lt;/code&gt; starts the first one automatically, so you need to add a new page only if your document has more than one page. Be aware that for the &lt;code&gt;prText(x,y,Text)&lt;/code&gt; command the origin of the coordinate system is on the left bottom of the page.&lt;/p&gt;

&lt;p&gt;As an example of adding PDF markup with &lt;code&gt;prAdd&lt;/code&gt;, the code creates a red rectangle with blue borders. In case you would like to add more graphics or complex graphics to your PDF, you can study the examples of the &lt;a href=&#34;http://partners.adobe.com/public/developer/pdf/index_reference.html&#34;&gt;PDF reference manual&lt;/a&gt;. If so, consider switching to &lt;code&gt;PDF::API2&lt;/code&gt; or &lt;code&gt;Text::PDF&lt;/code&gt; instead of using &lt;code&gt;prAdd&lt;/code&gt;, as they both provide a comfortable layer of abstraction over the PDF markup language.&lt;/p&gt;

&lt;h3 id=&#34;combining-pdf-documents&#34;&gt;Combining PDF Documents&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PDF::Reuse&lt;/code&gt;&amp;rsquo;s main strength is the modification and reassembling of existing PDF documents. The next example assembles a new file from the example material.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # file: examples/combine-pdfs.pl

  use strict;
  use PDF::Reuse;

  prFile(&amp;quot;out/resultat.pdf&amp;quot;);

  prDoc(&#39;out/file-1.pdf&#39;,1,4);
  prDoc(&#39;out/file-2.pdf&#39;,2,9);
  prDoc(&#39;out/file-3.pdf&#39;,8);
  prDoc(&#39;out/file-4.pdf&#39;);

  prEnd();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, &lt;code&gt;prFile($filename)&lt;/code&gt; opens the file. Next, the &lt;code&gt;prDoc($filename, $firstPage, $lastPage)&lt;/code&gt; calls add to the new file various page ranges from the example file. The arguments &lt;code&gt;$firstPage&lt;/code&gt; and &lt;code&gt;$lastPage&lt;/code&gt; are optional. Omit both to add the entire document. If only &lt;code&gt;$firstPage&lt;/code&gt; is present, the call will add everything from that page to the end. Finally, &lt;code&gt;prEnd&lt;/code&gt; closes the file.&lt;/p&gt;

&lt;h3 id=&#34;reusing-existing-pdf-files&#34;&gt;Reusing Existing PDF Files&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;PDF::Reuse&lt;/code&gt; it is possible to use existing PDF files as templates for creating new documents. Suppose that you have a file &lt;em&gt;customer.txt&lt;/em&gt; containing a list of customers to whom to send a letter. You&amp;rsquo;ve used a tool to create a PDF document, such as OpenOffice.org or Adobe Acrobat, to produce the letter itself. Now you can write a short program to add the date and the names and addresses of your customers to the letter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # file: examples/reuse-letter.pl
  use PDF::Reuse;
  use Date::Formatter;
  use strict;

  my $date = Date::Formatter-&amp;gt;now();
  $date-&amp;gt;createDateFormatter(&amp;quot;(DD).(MM). (YYYY)&amp;quot;);

  my $n      =  1;
  my $incr   = 14;
  my $infile = &#39;examples/customer.txt&#39;;

  prFile(&amp;quot;examples/sample-letters.pdf&amp;quot;);

  prCompress(1);
  prFont(&#39;Arial&#39;);
  prForm(&amp;quot;examples/sample-letter.pdf&amp;quot;);

  open (my $fh, &amp;quot;&amp;lt;$infile&amp;quot;) || die &amp;quot;Couldn&#39;t open $infile, $!\n aborts!\n&amp;quot;;

  while (my $line = &amp;lt;$fh&amp;gt;)  {
      my $x = 60;
      my $y = 760;

      my ($first, $last, $street, $zipCode, $city, $country) = split(/,/, $line);
      last unless $country;

      prPage() if $n++ &amp;gt; 1 ;
      prText($x, $y, &amp;quot;$first $last&amp;quot;);

      $y -= $incr;
      prText($x, $y, $street);

      $y -= $incr;
      prText($x, $y, $zipCode);
      prText(($x + 40), $y, $city);

      $y -= $incr;
      prText($x,   $y, $country);
      prText(60,  600, &amp;quot;Dear $first $last,&amp;quot;);
      prText(400, 630, &amp;quot;Berlin, $date&amp;quot;);
  }

  prEnd();
  close $fh;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After opening the file with &lt;code&gt;prFile&lt;/code&gt;, the call to &lt;code&gt;prCompress(1)&lt;/code&gt; enables PDF compression. &lt;code&gt;prFont&lt;/code&gt; sets the file&amp;rsquo;s font. The always-available options are Times-Roman, Times-Bold, Times-Italic, Times-BoldItalic, Courier, Courier-Bold, Courier-Oblique, Courier-BoldOblique, Helvetica, Helvetica-Bold, Helvetica-Oblique, and Helvetica-BoldOblique. Set the font size with &lt;code&gt;prFontSize&lt;/code&gt;. The default font is Helvetica, with 12 pixel size.&lt;/p&gt;

&lt;p&gt;The rest of the code is a simple loop over the file containing the customer data to filling the template with &lt;code&gt;prText&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;adding-page-numbers&#34;&gt;Adding Page Numbers&lt;/h3&gt;

&lt;p&gt;Sometimes you need only make a small change to a document, such as adding missing page numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # file: examples/sample-numbers.pl
  use PDF::Reuse;
  use strict;

  my $n = 1;

  prFile(&#39;examples/sample-numbers.pdf&#39;);

  while (1) {
     prText(550, 40, $n++);
     last unless prSinglePage(&#39;sample-letters.pdf&#39;);
  }

  prEnd();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;prSinglePage&lt;/code&gt; takes one page after the other from an existing PDFdocument and returns the number of remaining pages after each invocation.&lt;/p&gt;

&lt;h3 id=&#34;low-level-pdf-commands&#34;&gt;Low-Level PDF Commands&lt;/h3&gt;

&lt;p&gt;If you know low-level PDF instructions, you can add them with with the &lt;code&gt;prAdd(string)&lt;/code&gt; subroutine. &lt;code&gt;PDF::Reuse&lt;/code&gt; will perform no syntax checks on the instructions, so refer to the PDF reference manual. Here&amp;rsquo;s an example of printing colored rectangles with the &lt;code&gt;prAdd&lt;/code&gt; subroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # file: examples/sample-rectangle.pl
  use PDF::Reuse;
  use strict;

  prFile(&#39;examples/sample-rectangle.pdf&#39;);

  my $x = 40;
  my $y = 50;
  my @colors;

  foreach my $r (0..5) {
     foreach my $g (0..5) {
         foreach my $b (0..5) {
             push @colors,
                 sprintf(&amp;quot;%1.1f %1.1f %1.1f rg\n&amp;quot;,
                 $r * 0.2, $g * 0.2, $b * 0.2);
         }
     }
  }

  while (1) {
     if ($x &amp;gt; 500) {
         $x = 40; $y += 40;
         last unless @colors;
     }

     # a rectangle
     my $string = &amp;quot;$x $y 30 30 re\n&amp;quot;;
     $string   .= shift @colors;

     # fill and stroke
     $string   .= &amp;quot;b\n&amp;quot;;

     prAdd($string);

     $x += 40;
  }

  prEnd();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-bookmarks&#34;&gt;Adding Bookmarks&lt;/h3&gt;

&lt;p&gt;Working with PDF files becomes comfortable if the document has bookmarks with a table of contents-like structure. Some applications either can&amp;rsquo;t provide the PDF document with bookmarks or support insufficient or incorrect bookmarks. &lt;code&gt;PDF::Reuse&lt;/code&gt; can fill this gap with the &lt;code&gt;prBookmark($reference)&lt;/code&gt; subroutine.&lt;/p&gt;

&lt;p&gt;A bookmark reference is a hash or a array of hashes that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   {  text  =&amp;gt; &#39;Document-Text&#39;,
             act   =&amp;gt; &#39;this.pageNum = 0; this.scroll(40, 500);&#39;,
             kids  =&amp;gt; [ { text =&amp;gt; &#39;Chapter 1&#39;,
                          act  =&amp;gt; &#39;1, 40, 600&#39;
                        },
                        { text =&amp;gt; &#39;Chapter 2&#39;,
                          act  =&amp;gt; &#39;10, 40, 600&#39;
                        }
                      ]
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;where &lt;code&gt;act&lt;/code&gt; is a JavaScript action to trigger when someone clicks on the bookmark. Because those JavaScript actions only work in the Acrobat Reader but not in other PDF viewer applications, I will later show a improvement of &lt;code&gt;PDF::Reuse&lt;/code&gt; that fixes this issue.&lt;/p&gt;

&lt;p&gt;Other examples for using &lt;code&gt;PDF::Reuse&lt;/code&gt;, including image embedding, are available in the &lt;a href=&#34;https://metacpan.org/pod/PDF::Reuse::Tutorial&#34;&gt;PDF::Reuse::Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-console-application-for-combining-pdf-documents&#34;&gt;A Console Application for Combining PDF Documents&lt;/h3&gt;

&lt;p&gt;To avoid editing the Perl code for combining PDF documents every time you want to merge documents, I&amp;rsquo;ve written a console application that takes the names of the input files and the page ranges for each file as arguments. That&amp;rsquo;s easy to reuse in a graphical application using Perl/Tk, so I&amp;rsquo;ve put that code in a separate Perl module called &lt;code&gt;CombinePDFs&lt;/code&gt;. The command-line application will interact with this package instead of directly working on &lt;code&gt;PDF::Reuse&lt;/code&gt;. The following diagram shows the relationship between the Packages, example, and applications.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Examples    |     Packages            |     applications
  -------------------------------------------------------------------
  combine.pdfs                           app-combine-console-pdfs.pl
              \                         /
               PDF::Reuse -- CombinePDFs
              /                         \
   create.pdfs                           app-combine-tk-pdfs.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application &lt;em&gt;app-combine-console-pdfs.pl&lt;/em&gt; does not deal directly with &lt;code&gt;PDF::Reuse&lt;/code&gt; but parses the command line arguments with &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; written by Johan Vromans. This is the standard package for this task. Here it parses the input filenames and the page ranges into two arrays of same length. The user also has to supply a filename for the output and, optionally, a bookmarks file. The main subroutine that parses the command line arguments and executes &lt;code&gt;CombinePDFs::createPDF&lt;/code&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub main {
      GetOptions(&amp;quot;infile=s&amp;quot;    =&amp;gt; \@infiles,
                 &amp;quot;outfile=s&amp;quot;   =&amp;gt; \$outfile,
                 &amp;quot;pages=s&amp;quot;,    =&amp;gt; \@pages,
                 &#39;overwrite&#39;   =&amp;gt; \$overwrite,
                 &#39;bookmarks:s&#39; =&amp;gt; \$bookmarks,
                 &#39;help&#39;        =&amp;gt; \&amp;amp;help);
      help unless ((@infiles and $outfile and @pages) and @pages == @infiles);

      checkPages();
      checkFiles();
      checkBookmarks();

      CombinePDFs::createPDF(\@infiles, \@pages, $outfile, $bookmarks);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user passes an insufficient number of arguments, invalid filenames, or incorrect page ranges, the code invokes the the usage subroutine. It also gets invoked if the user asks explicitly for &lt;code&gt;-help&lt;/code&gt; on the command line. Any good command line application should be written that way. &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; can distinguish between mandatory arguments, with &lt;code&gt;=&lt;/code&gt; as the symbol after the argument name (infile, pages), optional arguments, with &lt;code&gt;:&lt;/code&gt; (bookmarks), or flags (overwrite, usage), without a symbol. It can store these arguments as arrays (infile, pages), hashes, or scalars. It also supports type checking.&lt;/p&gt;

&lt;h3 id=&#34;combinepdfs-package&#34;&gt;CombinePDFs Package&lt;/h3&gt;

&lt;p&gt;The application itself mainly performs error checking. If everything is fine, it calls the &lt;code&gt;CombinePDFs::createPDF&lt;/code&gt; subroutine, passing the array of input files, the array of page ranges, and the bookmarks information. The bookmarks scalar is optional.&lt;/p&gt;

&lt;p&gt;Page ranges can be comma-separated ranges (&lt;code&gt;1-11,14,17-23&lt;/code&gt;), single pages, or the &lt;code&gt;all&lt;/code&gt; token. You can include the same page several times in the same document.&lt;/p&gt;

&lt;p&gt;The file-checking code looks for read permissions and tests if the file is a PDF document by using the &lt;code&gt;CombinePDFs::isPDF($filename)&lt;/code&gt; subroutine. Although &lt;a href=&#34;https://metacpan.org/pod/PDF&#34;&gt;PDF&lt;/a&gt;, by Antonio Rosella, also provides such a method, this package was not developed with the &lt;code&gt;use strict&lt;/code&gt; pragma and gives a lot of warnings. Furthermore, the package is not actively maintained, so there seems to be no chance to fix this in the near future. Implementing the &lt;code&gt;isPDF&lt;/code&gt; subroutine is quite simple; it reads the first line of the PDF file and checks for the magic string &lt;code&gt;%PDF-1.[0-9]&lt;/code&gt; in the first line of the document.&lt;/p&gt;

&lt;p&gt;Please note that &lt;code&gt;PDF::Reuse&lt;/code&gt; is not an object oriented package. Therefore the &lt;code&gt;CombinePDFs&lt;/code&gt; package is not object oriented, either. A user of this package could create several instances, but all instances work on the same PDF file.&lt;/p&gt;

&lt;p&gt;Submitting complex data structures via the command line is a difficult issue, so I decided that bookmarks should come from a text file. This file has a simple markup to reflect a tree structure, where each line resembles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;level&amp;gt; &amp;quot;bookmarks text&amp;quot; &amp;lt;page&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The level starts with 0 for root bookmarks. Children of the root bookmarks have a level of 1, their children a level of 2, and so on. Currently, the system supports bookmarks up to three levels of nesting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 0 &amp;quot;Folder File 1 - Page 1&amp;quot; 1
 1 &amp;quot;File 1 - Page 2&amp;quot; 2
 1 &amp;quot;Subfolder File 1 - Page 3&amp;quot; 3
 2 &amp;quot;File 1 - Page 4&amp;quot;  4
 0 &amp;quot;Folder File 2 - Page 7 &amp;quot; 7
 1 &amp;quot;File 2 - Page 7&amp;quot; 7
 1 &amp;quot;File 2 - Page 9&amp;quot; 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parsing subroutine for the bookmarks file &lt;code&gt;CombinePDFs::addBookmarks($filename)&lt;/code&gt; should be easy to understand, though that&amp;rsquo;s not necessarily true of the complex data structure created inside this subroutine.&lt;/p&gt;

&lt;p&gt;Bookmarks are an array of hashes. &lt;code&gt;addBookmarks&lt;/code&gt; uses several attributes. &lt;code&gt;text&lt;/code&gt; is the title of the entry in the bookmarks panel. &lt;code&gt;act&lt;/code&gt; is the action to trigger when someone clicks the entry. Here it is the page number to open. &lt;code&gt;kids&lt;/code&gt; contains a reference to the children of this bookmark entry. During the loop over the file content, the code searches for each level the last entry in a variable and pushes its related children on those last entries. The root bookmarks get collected as an array, and the loop adds the children as a reference to an array, and so on for the grand children. The result is a nested complex data structure which stores all children in the &lt;code&gt;kids&lt;/code&gt; attribute of the parent&amp;rsquo;s bookmarks hashâ€”an array of hashes containing other arrays of hashes and so on.&lt;/p&gt;

&lt;p&gt;The parsing subroutine for the bookmarks file &lt;code&gt;CombinePDFs::addBookmarks($filename)&lt;/code&gt; collects bookmarks in a array of hashes. At the end, it adds the bookmarks to the document with &lt;code&gt;prBookmarks($reference)&lt;/code&gt;. All of this means that you can use a bookmarks file with the PDF file with a command line like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ perl bin/app-combine-pdfs.pl \
      --infile out/file-1.pdf --pages 1-6 \
      --infile out/file-2.pdf --pages 1-4,7,9-10 \
      --bookmarks out/bookmarks.cnt \
      --outfile file-all.pdf --overwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, you must open the document&amp;rsquo;s navigation panel manually because &lt;code&gt;PDF::Reuse&lt;/code&gt; does not yet allow you to declare a default view, whether full screen or panel view. This is easy to fix, and the author Lars Lundberg has promised me to do so in a next release of &lt;code&gt;PDF::Reuse&lt;/code&gt;. In order to enable this feature until a new release will appear I included a modified version of &lt;code&gt;PDF::Reuse&lt;/code&gt; in the examples zip file that accompanies this article.&lt;/p&gt;

&lt;p&gt;Furthermore, the bookmarks use JavaScript functions. To use the bookmarks in PDF viewers other than Acrobat Reader, my patched &lt;code&gt;PDF::Reuse&lt;/code&gt; package replaces JavaScript bookmarks with PDF specification compliant bookmarks. To do that, replace the &lt;code&gt;act&lt;/code&gt; key with a &lt;code&gt;page&lt;/code&gt; key using the appropiate page number and scroll options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $bookmarks = {  text  =&amp;gt; &#39;Document&#39;,
                 page  =&amp;gt; &#39;0,40,50;&#39;,
                 kids  =&amp;gt; [ { text =&amp;gt; &#39;Chapter 1&#39;,
                          page  =&amp;gt; &#39;1, 40, 600&#39;
                        },
                        { text =&amp;gt; &#39;Chapter 2&#39;,
                          page  =&amp;gt; &#39;10, 40, 600&#39;
                        }
                      ]
          }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then print the bookmarks to the PDF document as usual with &lt;code&gt;prBookmark($bookmarks);&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tk-application-to-combine-pdf-documents&#34;&gt;Tk Application to Combine PDF Documents&lt;/h3&gt;

&lt;p&gt;Console applications are fine for experienced users, but you can&amp;rsquo;t expect that all users belong to this category. Therefore it might be worth it to write a GUI for combining PDF documents. The &lt;a href=&#34;https://metacpan.org/pod/Tk&#34;&gt;Perl/Tk toolkit&lt;/a&gt; founded on the old Tix widgets for Tcl/Tk is not very modern, although this might change with the &lt;a href=&#34;http://www.tcl.tk/software/tcltk/8.5.html&#34;&gt;Tcl/Tk release 8.5&lt;/a&gt; and the Tile widgetsâ€”but it is very portable. That&amp;rsquo;s why I used it for the GUI example. Because I put a layer between the &lt;code&gt;PDF::Reuse&lt;/code&gt; package and the command line application with the &lt;code&gt;CombinePDFs&lt;/code&gt; package, it was easy to reuse those parts in the Tk-application &lt;em&gt;app-combine-tk-pdfs.pl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With the Tk application, the user visually selects PDF files, orders the files in a &lt;code&gt;Tk::Tree&lt;/code&gt; widget, and changes the page ranges and the bookmarks text in &lt;code&gt;Tk::Entry&lt;/code&gt; fields. Furthermore, the application can store the resulting tree structure inside a session file and restored that later on. It&amp;rsquo;s also possible to copy and paste entries inside the tree, which makes it easy to create a bookmarks panel for single files without using bookmark files. The Tk application can be found in the download at the end of this article.&lt;/p&gt;

&lt;p&gt;Beside the final PDF file, the application creates a file with the same basename and the &lt;em&gt;.cnt&lt;/em&gt; extension. This file contains the bookmarks for the PDF. It&amp;rsquo;s also useful to continue the processing of the combined PDF file instead of reassembling all the source files again. The entry for this feature is &lt;code&gt;File-&amp;gt;Load Bookmarks-File&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When loading a bookmarks file, the same extension convention is in place.&lt;/p&gt;

&lt;h3 id=&#34;other-pdf-packages-on-cpan&#34;&gt;Other PDF Packages on CPAN&lt;/h3&gt;

&lt;p&gt;I like &lt;code&gt;PDF::Reuse&lt;/code&gt;, but there are several other options for PDF creation and manipulation on the CPAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::API2&#34;&gt;PDF::API2&lt;/a&gt;, by Alfred Reibenschuh, is actively maintained. It is the package of choice if creating new PDF documents from scratch.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::API2::Simple&#34;&gt;PDF::API2::Simple&lt;/a&gt;, by Red Tree Systems, is a wrapper over the &lt;code&gt;PDF::API2&lt;/code&gt; module for users who find the PDF::API2 module to difficult to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::PDF&#34;&gt;Text::PDF&lt;/a&gt;, by Martin Hosken, can work on more than PDF file at the same time and has Truetype font support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CAM::PDF&#34;&gt;CAM::PDF&lt;/a&gt;, by Clotho Advanced Media, is like &lt;code&gt;PDF::Reuse&lt;/code&gt; more focused on reading and manipulating existing PDF documents. However, it can work on multiple files at the same time. Use it if you need more features than &lt;code&gt;PDF::Reuse&lt;/code&gt; actually provides.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PDF::Reuse&lt;/code&gt; is a well-written and well-documented package, which makes it easy to create, combine, and change existing PDF documents. The two sample applications show some of its capabilities. Two limitations should be mentioned however, &lt;code&gt;PDF::Reuse&lt;/code&gt; can&amp;rsquo;t reuse existing bookmarks, and after combining different PDF documents some of the inner document hyperlinks might stop working properly. The &lt;a href=&#34;http://localhost:1313/media/_pub_2007_09_20_pdf-processing-with-perl/pdf_reuse.zip&#34;&gt;example source code&lt;/a&gt; for the applications, packages, and the modified &lt;code&gt;PDF::Reuse&lt;/code&gt; is available.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

