<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regex on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/regex/</link>
    <description>Recent content in Regex on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 May 2013 20:16:55 +0000</lastBuildDate>
    <atom:link href="/tags/regex/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dynamic variable names with a dereferencing block</title>
      <link>http://localhost:1313/article/23/2013/5/2/Dynamic-variable-names-with-a-dereferencing-block/</link>
      <pubDate>Thu, 02 May 2013 20:16:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/23/2013/5/2/Dynamic-variable-names-with-a-dereferencing-block/</guid>
      <description>&lt;p&gt;Perl is remarkably flexible and allows you to achieve all kinds of wizardry with the language. One example of this is using a dereferencing block to use a scalar value as a variable name. This allows you to use variables with dynamic names.&lt;/p&gt;

&lt;p&gt;An interesting example of this can be seen in &lt;a href=&#34;https://metacpan.org/source/NRG/Nginx-ParseLog-1.01/lib/Nginx/ParseLog.pm&#34;&gt;Nginx::ParseLog&lt;/a&gt;, I&amp;rsquo;ve reproduced the relevant code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $log_string &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/^($ip)\s-\s (.*?)\s         \[(.*?)\]\s  &amp;#34;(.*?)&amp;#34;\s  (\d+)\s  (\d+)\s     &amp;#34;(.*?)&amp;#34;\s  &amp;#34;(.*?)&amp;#34;$/x&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $deparsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
         
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @field_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            ip     
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        remote_user
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            time    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            request
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            status 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            bytes_send
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            referer 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            user_agent
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    /&lt;/span&gt;;
 
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; strict &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;refs&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# some Perl magic&lt;/span&gt;
 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@field_list) {
            $deparsed&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ $_  } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ${ &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;$c };
            }
    }
     
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $deparsed;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this code does is match $log_string against a regex - if the match is successful, it iterates through the regex capture global variables ($1-$8), using the values of @field_list as the key values for the captures. The dynamic variable name is stored in $c.&lt;/p&gt;

&lt;p&gt;Using dynamic variable names can provide useful shortcuts when used in the right context. Dynamic variables can also increase the risk of error (note that strict &amp;lsquo;refs&amp;rsquo; had to be disabled for this code to work). What&amp;rsquo;s nice about this example is using the regex match in the if statement provides the assurance that every capture was successful, hence in this context it should be ok to turn strict refs off briefly.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

