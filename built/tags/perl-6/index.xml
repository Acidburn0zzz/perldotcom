<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-6/</link>
    <description>Recent content in Perl 6 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jan 2018 09:00:06 +0000</lastBuildDate>
    <atom:link href="/tags/perl-6/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hidden Gems of Perl.com</title>
      <link>http://localhost:1313/article/hidden-gems-of-perl-com/</link>
      <pubDate>Thu, 04 Jan 2018 09:00:06 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hidden-gems-of-perl-com/</guid>
      <description>

&lt;p&gt;A few months ago, as I was familiarizing myself with the old Perl.com source material, I kept getting distracted by these wonderful articles that I hadn&amp;rsquo;t read before. Now that the site has relaunched, and the old articles lovingly restored, I thought I&amp;rsquo;d share a few of these hidden gems with you.&lt;/p&gt;

&lt;h3 id=&#34;here-be-wizards&#34;&gt;Here be Wizards&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Where Wizards Fear to Tread&lt;/em&gt; was a brief, perlguts-focused series started by &lt;a href=&#34;https://www.perl.com/authors/simon-cozens/&#34;&gt;Simon Cozens&lt;/a&gt;. This particular &lt;a href=&#34;http://localhost:1313/pub/2002/05/07/optree.html/&#34;&gt;article&lt;/a&gt; discusses the Perl op tree.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to rekindle this series. If you have a Perl internals article that you&amp;rsquo;d like to write, please get in touch with &lt;a href=&#34;mailto:perl.com-editor@perl.org&#34;&gt;me&lt;/a&gt; or see our contributing &lt;a href=&#34;https://github.com/dnmfarrell/perldotcom/blob/master/CONTRIBUTING.md&#34;&gt;guide&lt;/a&gt; and send us a pull request with a draft article.&lt;/p&gt;

&lt;h3 id=&#34;naughty-perl&#34;&gt;Naughty Perl&lt;/h3&gt;

&lt;p&gt;In the old Perl.com source code, I came across several raw documents which didn&amp;rsquo;t appear to have been officially published on the site, but did contain good content. For example &lt;a href=&#34;https://www.perl.com/authors/tom-christiansen/&#34;&gt;Tom Christiansen&amp;rsquo;s&lt;/a&gt; article &lt;a href=&#34;http://localhost:1313/doc/FMTEYEWTK/versus/perl.html/&#34;&gt;The Seven Deadly Sins of Perl&lt;/a&gt; is a fun read worthy of your time. Can you count how many of the &amp;ldquo;sins&amp;rdquo; have been addressed since then?&lt;/p&gt;

&lt;h3 id=&#34;just-code-it-in-perl-6&#34;&gt;Just code it in Perl (6)?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/06/27/ctoperl.html/&#34;&gt;Why not Translate Perl to C?&lt;/a&gt; is a sobering reminder by &lt;a href=&#34;https://www.perl.com/authors/mark-jason-dominus/&#34;&gt;Mark Jason Dominus&lt;/a&gt; that re-writing Perl as C often won&amp;rsquo;t yield faster programs. The article ends with optimistic speculation that Perl 6 may use gradual typing and static data structures to deliver better performance. Fast-forward a few years, and good news! Perl 6 supports &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/18/day-18-sized-typed-shaped/&#34;&gt;sized and typed data structures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MJD regularly blogs at his own &lt;a href=&#34;https://blog.plover.com/&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;state-of-the-onion&#34;&gt;State of the Onion&lt;/h3&gt;

&lt;p&gt;Larry has a good number of &lt;a href=&#34;https://www.perl.com/authors/larry-wall/&#34;&gt;articles&lt;/a&gt; on Perl.com, including some of the oldest. The &lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html/&#34;&gt;2nd State of the Onion&lt;/a&gt; was published way back in August 1998, and it&amp;rsquo;s still an entertaining read (or re-read if you&amp;rsquo;ve forgotten it).&lt;/p&gt;

&lt;h3 id=&#34;more-to-come&#34;&gt;More to come&lt;/h3&gt;

&lt;p&gt;There are more articles to recommend, but for the sake of brevity I&amp;rsquo;ll stop here. In the meantime feel free to explore the site; you never know, you might stumble upon another &amp;hellip; hidden gem!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hidden-gems-of-perl-com/indiana-stone.jpg&#34; alt=&#34;Indiana Jones discovers treasure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Cover image by &lt;a href=&#34;http://i.imgur.com/4VOS6iz.png&#34;&gt;Shachar Harshuv&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Larry Wall interviewed in San Francisco</title>
      <link>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</link>
      <pubDate>Mon, 16 Oct 2017 09:26:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</guid>
      <description>&lt;p&gt;Larry was interviewed in San Francisco at Erlang &amp;amp; Elixir Factory SF Bay Area 2017 conference. As you&amp;rsquo;d expect from Larry, the talk covered many interesting topics including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl 6&lt;/li&gt;
&lt;li&gt;Paul Graham&amp;rsquo;s 100 year language&lt;/li&gt;
&lt;li&gt;How culture influences thinking and programming&lt;/li&gt;
&lt;li&gt;History of hardware and how computers are like people&lt;/li&gt;
&lt;li&gt;Larry&amp;rsquo;s early programming languages and influences&lt;/li&gt;
&lt;li&gt;Programming paradigms and language design&lt;/li&gt;
&lt;li&gt;Types and their benefits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first 22 minutes are Larry showcasing Perl 6&amp;rsquo;s major features. If you&amp;rsquo;re familiar with those already, you might want to skip ahead. My favorite anecdote was about the Unix community and Perl:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Henry Spencer called early Perl &amp;ldquo;awk with skin cancer&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Larry Wall&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The video, slides and audio of the interview are available on InfoQ&amp;rsquo;s &lt;a href=&#34;https://www.infoq.com/presentations/language-design-perl&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Via&lt;/em&gt;: O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;https://www.oreilly.com/feed/four-short-links&#34;&gt;Four short links&lt;/a&gt; and &lt;a href=&#34;https://developers.slashdot.org/story/17/10/07/0259243/new-video-peeks-inside-the-head-of-perl-creator-larry-wall&#34;&gt;Slashdot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Activating Perl 6 syntax highlighting in Vim</title>
      <link>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</link>
      <pubDate>Tue, 22 Sep 2015 22:16:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</guid>
      <description>

&lt;p&gt;Modern versions of the Vim text editor ship with Perl 6 syntax highlighting, but automatically activating it is tricky because Perl 6 files can have ambiguous file extensions. It can get tiresome to correct the file type every time you open a Perl 6 file, so I&amp;rsquo;m going to show you a few tricks that I use to make Vim detect Perl 6 files automatically.&lt;/p&gt;

&lt;h3 id=&#34;showing-and-setting-the-filetype-in-vim&#34;&gt;Showing and setting the filetype in Vim&lt;/h3&gt;

&lt;p&gt;First of all I want to make sure that syntax highlighting is turned on by default, so I add this option to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To edit your &lt;code&gt;.vimrc&lt;/code&gt; just start Vim and enter this command &lt;code&gt;:e $MYVIMRC&lt;/code&gt;. Save your changes with &lt;code&gt;:w&lt;/code&gt;, and then reload your &lt;code&gt;.vimrc&lt;/code&gt; with &lt;code&gt;:so %&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that I have syntax highlighting turned on, I need to know how set Vim&amp;rsquo;s file type to Perl 6 when I&amp;rsquo;m working with Perl 6 files. I can see the current file type by typing this command &lt;code&gt;:set filetype?&lt;/code&gt;. To set the file type to Perl 6, I use this command &lt;code&gt;:set filetype=perl6&lt;/code&gt;. The &lt;code&gt;filetype&lt;/code&gt; keyword can be shortened to &lt;code&gt;ft&lt;/code&gt;. In which case the last command becomes &lt;code&gt;:set ft=perl6&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;detecting-perl-6-files&#34;&gt;Detecting Perl 6 files&lt;/h3&gt;

&lt;p&gt;Now the challenge becomes correctly detecting when I&amp;rsquo;m working with Perl 6 files in Vim. Perl 6 scripts shouldn&amp;rsquo;t be a problem: Vim (not Vi) automatically parses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_line&#34;&gt;shebang&lt;/a&gt; line to determine the file type. However this fails when the script has an extension like &lt;code&gt;.pl&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;use-the-pm6-file-extension&#34;&gt;Use the .pm6 file extension&lt;/h4&gt;

&lt;p&gt;Vim will automatically use Perl 6 syntax highlighting if the file extension is &lt;code&gt;.pm6&lt;/code&gt;. So when working with Perl 6 module files, it&amp;rsquo;s better to use this extension. This doesn&amp;rsquo;t help when I&amp;rsquo;m working on other people&amp;rsquo;s Perl 6 projects however. It also doesn&amp;rsquo;t help for test files, which do not have an equivalent Perl 6 file extension (&lt;code&gt;.t6&lt;/code&gt; test files are ignored when installing Perl 6 modules).&lt;/p&gt;

&lt;h4 id=&#34;use-a-modeline&#34;&gt;Use a modeline&lt;/h4&gt;

&lt;p&gt;A modeline is a line of code in the text of the file which Vim reads and executes. So to activate Perl 6 syntax highlighting I just need to add this modeline to every Perl 6 file I work with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim: filetype=perl6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look at the &lt;a href=&#34;https://github.com/Mouq/json5/blob/master/lib/JSON5/Tiny.pm6#L54&#34;&gt;source code&lt;/a&gt; of JSON5::Tiny for a real-World example. To Perl 6 this code looks just like an ordinary comment, but Vim will use it to turn on Perl 6 syntax highlighting. The modeline can appear anywhere in the code, but it&amp;rsquo;s better to place it at the start or end of the file.&lt;/p&gt;

&lt;p&gt;Older versions of Vim (pre 7.3) and when Vim is run under root privileges, disable modelines as a security risk. Don&amp;rsquo;t run Vim as root! But if you have an older Vim, you can turn on modelines with &lt;code&gt;:set modeline&lt;/code&gt;. As with &lt;code&gt;filetype&lt;/code&gt;, modeline can be abbreviated to &lt;code&gt;ml&lt;/code&gt;, so &lt;code&gt;set ml&lt;/code&gt; works too. To activate modelines automatically, add this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The downside of using modelines? First there is aforementioned security risk for older Vims. Also it feels impure to add editor directives to the code I&amp;rsquo;m working with, as not everyone uses Vim. These seem like minor issues though.&lt;/p&gt;

&lt;h4 id=&#34;use-a-local-vimrc&#34;&gt;Use a local vimrc&lt;/h4&gt;

&lt;p&gt;Often different Open Source projects will have different coding conventions that I need to follow, so it can be helpful to use a local vimrc file to store these project-specific settings. This works for syntax highlighting too. In order to use local vimrc files, I add the following code to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will check the current working directory for &lt;code&gt;.vimrc.local&lt;/code&gt; file, and automatically execute it if it finds it. &lt;strong&gt;Warning&lt;/strong&gt; this is a security risk - Vim will execute ANY instruction in a local vimrc, so I am very careful when working with projects that are not my own. Next I create a &lt;code&gt;.vimrc.local&lt;/code&gt; file in the root project directory and add this auto command to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au Bufnewfile,bufRead *.pm,*.t,*.pl set filetype=perl6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I open or create any file with a Perl extension, Vim will set the syntax highlighting to Perl 6. I like this technique because it&amp;rsquo;s not intrusive: it doesn&amp;rsquo;t require any changes to the Perl 6 files themselves, so it works well on shared projects (I never check-in my local vimrc to the Git repo).&lt;/p&gt;

&lt;h4 id=&#34;use-code-detection&#34;&gt;Use code detection&lt;/h4&gt;

&lt;p&gt;I can also have Vim try to detect Perl 6 code automatically. Two directives which would indicate we&amp;rsquo;re working with Perl 6 instead of Perl 5 code: the shebang line and the &lt;code&gt;use v6;&lt;/code&gt; directive. To check for these, I&amp;rsquo;ll add a function to my .vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function uses &lt;code&gt;getline()&lt;/code&gt; to check the first line of the file to see if it looks like a Perl 6 shebang. This should work well for &lt;code&gt;.pl&lt;/code&gt; scripts, but Perl 6 module files will not have a shebang, so the next part of the script checks the first 5 lines of the file for the &lt;code&gt;use v6;&lt;/code&gt; directive. The last line of code is an auto command which will call the function anytime we open file with a Perl file extension.&lt;/p&gt;

&lt;p&gt;The main drawback of this technique is that not all Perl 6 code uses the &lt;code&gt;use v6;&lt;/code&gt; directive, and so when working with module files, the code detection can fail. However the code detection could be improved to use more rules for detecting Perl 6 code such as class declarations. The &lt;a href=&#34;https://github.com/vim-perl/vim-perl&#34;&gt;vim-perl&lt;/a&gt; plugin has more sophisticated Perl 6 code detection &lt;a href=&#34;https://github.com/vim-perl/vim-perl/blob/master/ftdetect/perl11.vim&#34;&gt;rules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;complete-vimrc&#34;&gt;Complete .vimrc&lt;/h3&gt;

&lt;p&gt;This &lt;code&gt;.vimrc&lt;/code&gt; contains all the code shown above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on

&amp;quot;Recognize modeline # vim: filetype=perl6
set ml

&amp;quot;check for a local vimrc
if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif

&amp;quot;check for Perl 6 code
function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s it, four useful-but-imperfect techniques for detecting file types in Vim. I tend to use a combination of all four. This would be a nice problem not to have. I&amp;rsquo;d like the Perl 6 community to agree and encourage unambiguous file extensions like &lt;code&gt;.pm6&lt;/code&gt;, &lt;code&gt;.t6&lt;/code&gt; and &lt;code&gt;.pl6&lt;/code&gt;. Larry Wall called this &amp;ldquo;free advertising&amp;rdquo;. It&amp;rsquo;s also a simple way to make Perl 6 programmers more productive. Not every text editor is as customizable as Vim.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get to grips with Prove, Perl&#39;s test workhorse</title>
      <link>http://localhost:1313/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse/</link>
      <pubDate>Tue, 09 Jun 2015 12:59:02 +0000</pubDate>
      
      <guid>http://localhost:1313/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse/</guid>
      <description>

&lt;p&gt;Prove is a test running tool that ships with Perl. It has a ton of options, which can make it confusing for a beginner to use. If you have never used prove, or are not confident using it, do not despair! This article will get you up to speed with prove and it&amp;rsquo;s most common options.&lt;/p&gt;

&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;

&lt;p&gt;If you have Perl installed, you should already have Prove installed as well. To demo the features of Prove, I&amp;rsquo;m going to clone the Mojolicious repo using Git. I like demoing Prove with Mojolicious as it has a large test suite. At the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/kraih/mo&lt;/span&gt;jo
$ cd mojo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I&amp;rsquo;ve cloned the Mojolicious repo and changed into the project directory. Now I&amp;rsquo;m ready to run some tests with Prove!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l t&lt;span style=&#34;color:#e6db74&#34;&gt;/mojo/&lt;/span&gt;asset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I executed Prove using the &lt;code&gt;prove&lt;/code&gt; command. I included the &lt;code&gt;-l&lt;/code&gt; option so that Prove would load the Mojolicious code beneath the &lt;code&gt;lib&lt;/code&gt; directory. If I didn&amp;rsquo;t do this, Perl would not find the Mojolicious code referenced in &lt;code&gt;t/mojo/asset.t&lt;/code&gt; and raise an error, or perhaps worse, it might run the tests against an older version of Mojolicious I already had installed on my system.&lt;/p&gt;

&lt;p&gt;Sometimes the code to include is not directly in the &lt;code&gt;lib&lt;/code&gt; directory. For these cases Prove has the &lt;code&gt;-I&lt;/code&gt; option for &amp;ldquo;include&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I&lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#e6db74&#34;&gt;/lib /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;test_file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prove can run a single test file, or if given a directory containing multiple test files, with will execute them all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mojo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This runs all the test files in &lt;code&gt;t/mojo&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;recursively-execute-test-files-with-r&#34;&gt;Recursively execute test files with &amp;ldquo;r&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The Mojolicious project has test files in several different directories beneath the &lt;code&gt;t&lt;/code&gt; directory. It would be tiresome to locate all of these directory paths and give them to Prove. Instead, Prove provides the &lt;code&gt;-r&lt;/code&gt; option to recursively search for test files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lr&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option executed every test file under the &lt;code&gt;t&lt;/code&gt; directory, about 10,000 tests across 85 different files. Pretty convenient huh? Note that I didn&amp;rsquo;t provide the &lt;code&gt;t&lt;/code&gt; directory as an argument, because Prove searches the &lt;code&gt;t&lt;/code&gt; directory by default. Now that&amp;rsquo;s convenience!&lt;/p&gt;

&lt;h3 id=&#34;run-tests-in-parallel-using-j&#34;&gt;Run tests in parallel using &amp;ldquo;j&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The ability to run lots of test files is useful, but it can take a long time to run all of the tests. On my machine, executing the Mojolicious test suite takes 32 seconds. To speed things up, Prove can run test files in parallel, to share the work across multiple processes. To do this I just add the &lt;code&gt;-j&lt;/code&gt; option plus the number of processes I want to use. I have a quad core machine, so I&amp;rsquo;m going to use 4 different processes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, prove executed all the tests in 12 seconds. That&amp;rsquo;s a 266% speed-up, not bad!&lt;/p&gt;

&lt;h3 id=&#34;get-more-detail-with-v-for-verbose&#34;&gt;Get more detail with &amp;ldquo;v&amp;rdquo; for verbose&lt;/h3&gt;

&lt;p&gt;To minimize line noise, by default Prove provides summary-level statistics and low-level detail for test failures. Sometimes it&amp;rsquo;s useful to see the output for each test. I can see this detail by adding the &lt;code&gt;-v&lt;/code&gt; option for &amp;ldquo;verbose&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lrv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;running-perl-6-tests&#34;&gt;Running Perl 6 tests&lt;/h3&gt;

&lt;p&gt;Prove can run tests for other languages, as long as the tests follow the Test Anything Protocol. Perl 6 unit tests follow TAP, so we can use Prove to run Perl 6 tests too! I can demo this on my Perl 6 module, &lt;a href=&#34;https://github.com/dnmfarrell/URI-Encode&#34;&gt;URI::Encode&lt;/a&gt;. To follow along, just clone the repo with Git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/&lt;/span&gt;URI&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Encode
$ cd URI&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Encode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run non Perl tests with Prove, we need to pass the &lt;code&gt;--exec&lt;/code&gt; option, with a program name. That tells Prove which program to execute the tests with. Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;exec perl6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I didn&amp;rsquo;t have to pass the filepath of which tests to run. It&amp;rsquo;s just lucky that by convention Perl6 modules have their tests in the &lt;code&gt;t&lt;/code&gt; directory, usually with a &lt;code&gt;.t&lt;/code&gt; extension. For other languages, you&amp;rsquo;ll need to specify the test filepath:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;exec some_program &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;testfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;You can get a summary of the options Prove accepts by using the &lt;code&gt;-h&lt;/code&gt; option for help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ prove &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more detailed documentation, use &lt;code&gt;perldoc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc prove&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perldoc is another useful Perl tool, if you&amp;rsquo;d like to know more about it, have a look at our introductory &lt;a href=&#34;http://perltricks.com/article/155/2015/2/26/Hello-perldoc--productivity-booster&#34;&gt;article&lt;/a&gt;. Prove also has a man page entry (if you&amp;rsquo;re on Unix/BSD based systems).&lt;/p&gt;

&lt;h3 id=&#34;prove-cheat-sheet&#34;&gt;Prove Cheat sheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;prove [options] [filepath]

Options
-------
l       Include the &amp;quot;lib&amp;quot; dir
I       Include a dir: -I/path/to/lib
r       Recursively search and run test files
j       Parallel, specify # procs: -j 4
v       Verbose test output
h       Help, summary of options
exec    Exec tests in another program: --exec perl6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing Perl 5 pod with Perl 6</title>
      <link>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</link>
      <pubDate>Thu, 30 Apr 2015 13:14:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just finished developing a Perl 5 pod &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5&#34;&gt;parser&lt;/a&gt; written in Perl 6. Developing the grammar was surprisingly easy, which is a testament to Perl 6 as I&amp;rsquo;m no genius coder. With help from the folks at #perl6, I did learn some interesting things along the way, and wanted to share them. Plus, code!&lt;/p&gt;

&lt;p&gt;By the way, if you haven&amp;rsquo;t read my &lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;introduction&lt;/a&gt; to Perl 6 grammars, check it out first, and the rest of this article should make more sense.&lt;/p&gt;

&lt;h3 id=&#34;developing-the-grammar&#34;&gt;Developing the grammar&lt;/h3&gt;

&lt;p&gt;In Perl 6 a grammar is a special type of class for parsing text. The idea is to declare a series of regexes using the &lt;code&gt;token&lt;/code&gt; method, which are then used to parse input. For &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/Grammar.pm&#34;&gt;Pod::Perl5::Grammar&lt;/a&gt; I literally worked my way through &lt;a href=&#34;https://perldoc.perl.org/perlpod.html&#34;&gt;perlpod&lt;/a&gt;, the Perl 5 pod specification, writing tokens as I went.&lt;/p&gt;

&lt;p&gt;There were a few challenges. First, consider how would you define a regex for lists? In pod, lists can contain lists, so can a definition include itself? The answer is yes, a recursive definition is fine, as long as it doesn&amp;rsquo;t match a zero length string, which leads to an infinite loop. Here&amp;rsquo;s the definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token over_back { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over&amp;gt;&lt;/span&gt;
                    [
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_item&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;verbatim_paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_for&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;begin_end&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;encoding&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over_back&amp;gt;&lt;/span&gt;
                    ]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;back&amp;gt;&lt;/span&gt;
                  }

token over      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;over [&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[0..9]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ]? &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }
token _item     { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;item &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
                    [
                        [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;  ]
                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;? ]
                    ]
                  }
token back      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;back &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The token &lt;code&gt;over_back&lt;/code&gt; describes an entire list from start to finish. It basically says that a list must begin with an &lt;code&gt;=over&lt;/code&gt; and end with &lt;code&gt;=back&lt;/code&gt;, and can have a whole bunch of things in between, including another &lt;code&gt;over_back&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For simplicity&amp;rsquo;s sake, I tried to name the tokens the same as how they&amp;rsquo;re written in pod. In some cases this wasn&amp;rsquo;t possible, for instance &lt;code&gt;item&lt;/code&gt; causes a namespace clash with another method that the Grammar class inherits. So watch out for those cases, you&amp;rsquo;ll get weird errors (this is a &lt;a href=&#34;https://rt.perl.org/rt3//Public/Bug/Display.html?id=77350&#34;&gt;bug&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is one pattern I really love and used over and over in the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;before &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is useful when you have a pattern to capture, but if there&amp;rsquo;s no matching pattern ignore everything else. In this case, &lt;code&gt;pod_section&lt;/code&gt; is a token that defines a section of pod, but pod is often written inline with Perl code, which the grammar should ignore. So the second half of the definition uses a negative lookahead &lt;code&gt;?!before&lt;/code&gt; to check the next character is not a &lt;code&gt;pod_section&lt;/code&gt;, and uses a period &lt;code&gt;.&lt;/code&gt; to match everything else (including newlines). Both conditions are grouped in square brackets with an asterisk placed &lt;strong&gt;outside&lt;/strong&gt; the group in order to check one character at a time.&lt;/p&gt;

&lt;p&gt;The grammar can be used to parse standalone and inline pod. It will extract every pod section it finds into match object (basically a Perl data structure), ready for processing. It&amp;rsquo;s easy to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parsefile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/some.pod&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action classes&lt;/h3&gt;

&lt;p&gt;So far so cool, but we can do more. Action classes are regular Perl 6 classes that can be given to the grammar at parse time. They provide behavior (actions) for token matching events. Just name the methods in the action class the same as the token they should be executed on. I wrote a pod-to-HTML action &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/ToHTML.pm&#34;&gt;class&lt;/a&gt;. Here is the method for converting &lt;code&gt;=head1&lt;/code&gt; to HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time the grammar matches a head1 token, this method executes. It&amp;rsquo;s passed the regex capture variable &lt;code&gt;$/&lt;/code&gt;, which contains the head1 regex capture, from which it extracts the text string.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool fact: action classes are even easier to write than grammars. It would be trivial to write a pod to markdown converter using Pod::Perl5::Grammar, unless someone beats me to it (hint, hint). That said, I did encounter a few challenges along the way.&lt;/p&gt;

&lt;p&gt;Essentially for HTML conversion, each action class method can just extract the text from it&amp;rsquo;s matching token, reformat it as required, and print it out. This approach worked great until I encountered nested tokens like formatting codes, which sit within a paragraph of text. You don&amp;rsquo;t want to go from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i&amp;gt;this is in italics&amp;lt;/i&amp;gt;
&amp;lt;b&amp;gt;this is in bold&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can happen because the italics and bold token regexes match first. So to get around this issue, I used a buffer to store the HTML from the transformed sub-tokens, and then when a paragraph token is matched, it substitutes its own text with the contents of the buffer. The action class code for this looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method paragraph ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $original_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $pair &lt;span style=&#34;color:#75715e&#34;&gt;# reverse as we&amp;#39;re working outside in&lt;/span&gt;
  {
    $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $para_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subst($pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key, {$pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value});
  }
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;{$para_text}&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;);
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;);
  }

method italic ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;i&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/i&amp;gt;&amp;#34;&lt;/span&gt;);
}

method bold ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for with action classes is regex handling. &lt;strong&gt;Every&lt;/strong&gt; action class example I&amp;rsquo;ve seen uses &lt;code&gt;$/&lt;/code&gt; in the method signature. This is a mistake, as guess what this does:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# silly example&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Cannot assign to a readonly variable or a value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mushroom cloud-style boom. When &lt;code&gt;$/&lt;/code&gt; is passed to &lt;code&gt;head1&lt;/code&gt; it is read only. Executing &lt;strong&gt;any&lt;/strong&gt; regex in the same lexical scope will attempt to overwrite &lt;code&gt;$/&lt;/code&gt;. This bit me a few times and with help from #perl6, I ended up using this pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding &lt;code&gt;is copy&lt;/code&gt; to the signature creates a copy instead of a reference for &lt;code&gt;$/&lt;/code&gt;. I then copy the match variable into &lt;code&gt;$match&lt;/code&gt;, so that the following regex can clobber &lt;code&gt;$/&lt;/code&gt;. I *think* a better solution is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($match)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it&amp;rsquo;s that simple, just don&amp;rsquo;t name the signature parameter &lt;code&gt;$/&lt;/code&gt; and all the headaches disappear. I haven&amp;rsquo;t tested this extensively&amp;hellip;&lt;/p&gt;

&lt;p&gt;To use an action class, just pass it to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::ToHTML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::ToHTML&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :$actions);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example I used a named positional argument &lt;code&gt;:$actions&lt;/code&gt;. This &lt;strong&gt;must&lt;/strong&gt; be called actions to work. In the second example I named the argument like this: &lt;code&gt;:actions($actions)&lt;/code&gt;, in which case the action class object can be called whatever you want.&lt;/p&gt;

&lt;h3 id=&#34;improving-pod&#34;&gt;Improving pod&lt;/h3&gt;

&lt;p&gt;PerlTricks.com articles are written in HTML. Special snowflake style HTML with class names and &lt;code&gt;span&lt;/code&gt; tags. This is a pain for writers to use and a pain to edit. I&amp;rsquo;d love to use pod as the source - it would be easier for writers to use and faster for me to edit. That said, I&amp;rsquo;d like to extend pod with some useful features for blogging. For instance, you may be familiar with formatting codes like &lt;code&gt;B&amp;lt;...&amp;gt;&lt;/code&gt; for bold and the like. Well, what about &lt;code&gt;@&amp;lt; ... &amp;gt;&lt;/code&gt; for a Twitter references, or &lt;code&gt;M&amp;lt; ... &amp;gt;&lt;/code&gt; for &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt; links?&lt;/p&gt;

&lt;p&gt;As Perl 6 grammars are classes, they can be inherited and overridden. So I can add my Twitter and Metacpan formatting codes to the grammar like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll also need to override the &lt;code&gt;format_codes&lt;/code&gt; token to include the new tokens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token format_codes  {
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;italic&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;bold&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;escape&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;singleline&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;index&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;zeroeffect&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;twitter|&amp;lt;metacpan&amp;gt;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s that easy. The new grammar will parse all pod, plus my two new formatting codes. Of course the action class Pod::Perl5::Pod can be extended and overridden too, and would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Pod::Perl5::ToHTML::PerlTricks is Pod::Perl5::ToHTML
{
  method twitter ($match)
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;,
      $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;a href=&amp;#34;&lt;/span&gt;http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;twitter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&amp;gt;{$match&amp;lt;name&amp;gt;.Str}&amp;lt;/&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  method metacpan ($match)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    self.add_to_buffer(&amp;#39;paragraph&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      $match.Str =&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{$match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wait-there-s-more&#34;&gt;Wait, there&amp;rsquo;s more&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a cleaner way to manage groups of tokens, it&amp;rsquo;s called &lt;a href=&#34;http://design.perl6.org/S06.html#Routine_modifiers&#34;&gt;multi-dispatch&lt;/a&gt;. Instead of defining &lt;code&gt;format_codes&lt;/code&gt; as a list of alternative tokens it can match against, we declare a prototype method, and declare each formatting method as a &lt;code&gt;multi&lt;/code&gt; of the prototype. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;proto token format_codes  { &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; }
multi token format_codes:italic { I&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:bold   { B&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:code   { C&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when this grammar is inherited, there is no need to override &lt;code&gt;format_codes&lt;/code&gt;. Instead I can declare the new tokens as multis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token format_codes:twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token format_codes:metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using multi-dispatch also has the modest benefit of simplifying the data extraction path when working with a match object. For instance, these code extracts the link section from the 3rd paragraph of a pod block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# regular version&lt;/span&gt;
is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# multi dispatch equivalent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example, the format token name &lt;code&gt;link&lt;/code&gt; is required. But with multi-dispatch, we can remove that, as shown in the second example.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s what I learned; overall writing a pod parser in Perl 6 was straightforward. If you&amp;rsquo;re programming in Perl 6 and have questions, I&amp;rsquo;d highly recommend the &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt; irc channel on freenode, the people there were friendly and responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;Multi-dispatch example added. Thanks to Jonathan Scott Duff for providing the multi-dispatch explanation and code. 2015-05-01&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get started with Perl 6 one liners</title>
      <link>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</link>
      <pubDate>Thu, 20 Nov 2014 14:04:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</guid>
      <description>

&lt;p&gt;One thing that sets Perl apart from other languages is the ability to write small programs in a single line of code, known as a &amp;ldquo;one liner&amp;rdquo;. It&amp;rsquo;s often faster to type a program directly into the terminal than to write a throwaway script. And one liners are powerful too; they&amp;rsquo;re complete Perl programs that can load external libraries but also integrate into the terminal. You can pipe data in or out of a one liner.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Perl 6 supports one liners. And in the same way Perl 6 cleaned up Perl 5&amp;rsquo;s warts elsewhere, the one liner syntax is also better. It&amp;rsquo;s cleaner with fewer special variables and options to memorize. This article aims to get you up-and-running with Perl 6 one liners.&lt;/p&gt;

&lt;h3 id=&#34;the-basics&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;To get started with one liners, all you really need to understand is the &lt;code&gt;-e&lt;/code&gt; option. This tells Perl to execute what follows as a program. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl6 -e &#39;say &amp;quot;Hello, World!&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s step through this code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;perl6&lt;/code&gt; invokes the Perl 6 program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; tells Perl 6 to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;say &amp;quot;Hello, World!&amp;quot;&#39;&lt;/code&gt; is the program. Every program must be surrounded in single quotes (except on Windows, see (&lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners#converting-for-windows&#34;&gt;converting for Windows&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run a one-liner, just type it into the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say &amp;#34;Hello, World!&amp;#34;&amp;#39;&lt;/span&gt;
Hello, World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;file-processing&#34;&gt;File processing&lt;/h3&gt;

&lt;p&gt;If you want to load a file, just add the path to the file after the program code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program prints every line in &lt;code&gt;/path/to/file.txt&lt;/code&gt;. You may know that &lt;code&gt;$_&lt;/code&gt; is the default variable, which in this case is the current line being looped through. &lt;code&gt;lines&lt;/code&gt; is a list that is automatically created for you whenever you pass a filepath to a one-liner. Now let&amp;rsquo;s re-write that one liner, step-by-step. These one liners are all equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { $_.say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { .say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for (lines)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for lines&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like &lt;code&gt;$_&lt;/code&gt; is the default variable, methods called on the default variable can omit the variable name. They become default methods. So &lt;code&gt;$_.say&lt;/code&gt; becomes &lt;code&gt;.say&lt;/code&gt;. This brevity pays off with one liners - it&amp;rsquo;s less typing!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; option changes the behavior of the program: it executes the code once for every line of the file. To uppercase and print every line of &lt;code&gt;/path/to/file.txt&lt;/code&gt; you can type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.uc.say&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option is just like &lt;code&gt;-n&lt;/code&gt; except that it will automatically print &lt;code&gt;$_&lt;/code&gt;. This means that another way we could uppercase a file would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$_ = $_.uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or by applying a shortcut, this does the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.=uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options are really useful and often spare the programmer from extra typing.&lt;/p&gt;

&lt;h3 id=&#34;load-modules&#34;&gt;Load modules&lt;/h3&gt;

&lt;p&gt;The final thing you should know is how to load a module. This is really powerful as you can extend Perl 6&amp;rsquo;s capabilities by importing external libraries. The &lt;code&gt;-M&lt;/code&gt; switch stands for load module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code &lt;code&gt;-M URI::Encode&lt;/code&gt; loads the URI::Encode module, which exports the &lt;code&gt;encode_uri&lt;/code&gt; subroutine. It prints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;%2F10%20ways%20to%20crush%20it%20with%20Perl%206&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if you have a module that is not installed in a standard location? In this case using &lt;code&gt;-M&lt;/code&gt; alone won&amp;rsquo;t work, as Perl won&amp;rsquo;t find the module. For these scenarios, just pass use the &lt;code&gt;-I&lt;/code&gt; switch to include the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I lib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;www.example.com/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Perl 6 will search for URI::Encode in &lt;code&gt;lib&lt;/code&gt; as well as the standard install locations.&lt;/p&gt;

&lt;p&gt;Finally, if you want a summary of all of these options, just use the &lt;code&gt;-h&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    With &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; arguments, enters a REPL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; With a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[programfile]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-e&amp;#34;&lt;/span&gt; option, compiles the given program &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; by default also executes the compiled code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
 
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c                   check syntax only (runs &lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHECK&lt;/span&gt; blocks)
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc                extract documentation &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; it as text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e program           one line of program
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help           display this help text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n                   run program once &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each line of input
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p                   same as &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n, but also &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $_ at the end of lines
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I path              adds the path to the module search path
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M module            loads the module prior to running the program
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[stage]     specify compilation stage to emit
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;optimize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[level]   &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; the given level of optimization (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[flags]  enable trace flags, see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parrot --help-debug&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[mode]    specify string encoding mode
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[name]  specify name of output file
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version        display version information
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;stagestats         display time spent in the compilation stages
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exception       display a low level backtrace on errors
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; profile information to standard error
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[module]       Use Pod::To::[module] to render inline documentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
     
    Note that only boolean single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter options may be bundled&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    Output from &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile can be visualized by kcachegrind&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    To modify the include path, you can set the PERL6LIB environment variable:

    PERL6LIB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt; perl6 example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

    For more information, see the perl6(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) man page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article was adapted from my open source &lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners&#34;&gt;book&lt;/a&gt;, which has lots of example Perl 6 one liners, many of which were contributed by the Perl 6 community. If you&amp;rsquo;re interested in learning more Perl 6, I&amp;rsquo;d recommend visiting the official &lt;a href=&#34;http://perl6.org/&#34;&gt;website&lt;/a&gt;, which has links to the IRC channel and official documentation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Perl 6 with Visual Studio 2013</title>
      <link>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</link>
      <pubDate>Tue, 18 Nov 2014 13:34:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</guid>
      <description>

&lt;p&gt;I think the last time I tried playing around with anything related to Perl 6 was at least two years ago. Recently, &lt;a href=&#34;https://fosdem.org/2015/schedule/event/get_ready_to_party/&#34;&gt;an understated entry&lt;/a&gt; in Fosdem &amp;lsquo;15 schedule caught the Perl community&amp;rsquo;s attention:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The last pieces are finally falling into place. After years of design and implementation, 2015 will be the year that Perl 6 officially launches for production use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since then, Microsoft made &lt;a href=&#34;http://blog.nu42.com/2014/11/64-bit-perl-5201-with-visual-studio.html&#34;&gt;Visual Studio 2013 freely available&lt;/a&gt; for individuals and small teams. Up to this point, I had been using the compiler that comes with Windows SDK 7.1 with decent results, but, of course, couldn&amp;rsquo;t resist the temptation to build Perl 5.20.1 with the new compiler.&lt;/p&gt;

&lt;p&gt;This was followed by an encouraging question from &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2m3t6s/%CE%BD42_64bit_perl_5201_with_visual_studio_2013/cm1iqnb&#34;&gt;David Farrell&lt;/a&gt;: &amp;ldquo;Have you thought about compiling Rakudo?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I hadn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;I had been anticipating too many headaches from not using *nix tools, but I decided to give it a shot. Perl 6 really couldn&amp;rsquo;t be ready enough that I could just get the source and build it, could it?&lt;/p&gt;

&lt;p&gt;I started with Rakudo Star - a Perl 6 distribution that bundles some useful modules and a package manager. I downloaded &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;rakudo-star-2014.09.tar.gz&lt;/a&gt;, extracted it and ran the configure script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;C:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Src&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configures Perl 6 to use &lt;a href=&#34;http://moarvm.com/&#34;&gt;MoarVM&lt;/a&gt;, one of several virtual machines that Perl 6 can be built for. From that point on, it was just a matter of following a few prompts and soon I had a &lt;code&gt;perl6&lt;/code&gt; that was churning through the specification tests.&lt;/p&gt;

&lt;p&gt;Those did take a while. In the end there were about a dozen test failures which represent a tiny fraction of the total number of tests.&lt;/p&gt;

&lt;h3 id=&#34;compiling-rakudo-from-source&#34;&gt;Compiling Rakudo from source&lt;/h3&gt;

&lt;p&gt;Using the two months old Rakudo Star distribution left me wanting more. So I headed over to &lt;a href=&#34;https://github.com/rakudo/rakudo/&#34;&gt;Rakudo&amp;rsquo;s GitHub repository&lt;/a&gt; and proceeded to checkout and build the default branch.&lt;/p&gt;

&lt;p&gt;If you want to build Rakudo from source you will need &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; for this to work. There are several options available, including &lt;a href=&#34;https://windows.github.com/&#34;&gt;GitHub Windows&lt;/a&gt; and &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;. I prefer to use &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; versions of *nixy utilities by adding Cygwin&amp;rsquo;s executable locations &lt;em&gt;last&lt;/em&gt; in my &lt;code&gt;%PATH%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a version of Git installed, these are the steps to follow:&lt;/p&gt;

&lt;p&gt;Open a &amp;ldquo;VS2013 x64 Native Tools Command Prompt&amp;rdquo;. You can find the shortcuts under &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\Shortcuts&lt;/code&gt; (with Visual Studio 2015, the shortcut is under: &lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Visual Studio 2015\Visual Studio Tools\Windows Desktop Command Prompts&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Run the following commands to get the Rakudo source and build it for MoarVM:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/rakudo/&lt;/span&gt;rakudo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cd rakudo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nqp &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;backends&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;C:&lt;span style=&#34;color:#e6db74&#34;&gt;/opt/&lt;/span&gt;Perl6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N.B. Make sure this is a native Windows &lt;code&gt;perl&lt;/code&gt;, not a Cygwin version in case you have those on the path. If you want to be absolutely certain, specify the full path. E.g., in my case, &lt;code&gt;C:\opt\perl-5.20.1\bin\perl Configure.pl ...&lt;/code&gt;. You may also have to adjust the &lt;code&gt;--prefix&lt;/code&gt; path to suit your system.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;Configure.pl&lt;/code&gt; will pull in the rest of the components necessary to build Rakudo. The rest is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake test
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake spectest
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run spectest only if you are really patient or curious. When those tests were done, I had seven spectest failures. I didn&amp;rsquo;t care much about those at this point. My purpose was to have a &lt;code&gt;perl6&lt;/code&gt; working well enough to let me try, (for the first time ever!), some Perl 6 examples.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;Perl6\bin&lt;/code&gt; path to your user path. If everything worked as smoothly as it did for me, try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v
This is perl6 version &lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gf8f6feb built on MoarVM version
&lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g05b25a6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just for fun:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Hello World!&amp;#39;.say&amp;#34;&lt;/span&gt;
Hello World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;installing-perl-6-modules&#34;&gt;Installing Perl 6 Modules&lt;/h3&gt;

&lt;p&gt;What is Perl without the ability to exploit other people&amp;rsquo;s hard work for your gain?&lt;/p&gt;

&lt;p&gt;Perl 6, just like Perl 5, has a module system. You can find contributed modules at &lt;a href=&#34;http://modules.perl6.org/&#34;&gt;modules.perl6.org&lt;/a&gt;, and install them using &lt;a href=&#34;https://github.com/tadzik/panda/&#34;&gt;panda&lt;/a&gt;. Unfortunately bootstrapping panda didn&amp;rsquo;t work for me due to &lt;a href=&#34;https://github.com/tadzik/File-Find/blob/master/t/01-file-find.t&#34;&gt;test failures with File::Find&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am not sure if these indicate problems with the underlying library, or problems with the way tests are written. I suspect the latter, but that will have to wait. In the mean time, I will &lt;a href=&#34;http://perl6.org/documentation/&#34;&gt;explore the basic language&lt;/a&gt; to get a better feel for Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - added VS2015 instructions. 2016-01-04&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to contribute to the exercism.io Perl 5 repo</title>
      <link>http://localhost:1313/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</link>
      <pubDate>Thu, 22 May 2014 15:09:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Earlier this week I rounded off our exercism.io article with a call to action to help port exercises into the Perl 5 repo. Today I&amp;rsquo;m going to walk through the porting process step-by-step and show you how easy it is to contribute.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a GitHub account and Perl installed. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;fork-the-repo&#34;&gt;Fork the repo&lt;/h3&gt;

&lt;p&gt;To contribute to a project on GitHub, we&amp;rsquo;ll use the &amp;ldquo;fork and pull&amp;rdquo; approach. First we&amp;rsquo;ll login to GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_1.png&#34; alt=&#34;&#34; title=&#34;Login to GitHub&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, search for the exercism/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_2.png&#34; alt=&#34;&#34; title=&#34;Search for exercism/xperl5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_3.png&#34; alt=&#34;&#34; title=&#34;Click the fork button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;ldquo;Fork&amp;rdquo; button to copy the repo into our own perltricks/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_4.png&#34; alt=&#34;&#34; title=&#34;Our own forked repo&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;get-the-exercises&#34;&gt;Get the exercises&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ve forked the repo, we can commit changes to our forked version. To start we&amp;rsquo;ll need to download the Perl exercises from our forked repo. We can do this from the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/x&lt;/span&gt;perl5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the xperl5 repo into a directory called &amp;ldquo;xperl5&amp;rdquo;. Next download the list of common exercises:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/exercism/x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;common&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the latest list of available exercises to the &amp;ldquo;x-common&amp;rdquo; directory, which contains a collection of readme files for the exercises. Any exercise that has a readme file in x-common that is missing from the xperl5 directory needs to be ported.&lt;/p&gt;

&lt;h3 id=&#34;find-the-exercise-in-another-language&#34;&gt;Find the exercise in another language&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve found an exercise that needs to be ported, you&amp;rsquo;ll want to find that exercise in one of the other languages repos. It&amp;rsquo;s far easier to translate an exercise than to write it from scratch yourself! The Ruby, Python and JavaScript repos have most of the exercises, so we&amp;rsquo;ll start with one of those. For example to download the Ruby exercises repo, just type this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/exercism/x&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the xruby directory doesn&amp;rsquo;t have the exercise you&amp;rsquo;re looking to port, try cloning xpython or xjavascript instead.&lt;/p&gt;

&lt;h3 id=&#34;porting-the-exercise&#34;&gt;Porting the exercise&lt;/h3&gt;

&lt;p&gt;To port an exercise you need to provide the exercise test file and an Example.pm module which passes the tests. Earlier this week I ported the &amp;ldquo;leap&amp;rdquo; exercise from Ruby to Perl. This involved three steps. First I created the new exercise subdirectory in the xperl5 directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ mkdir xperl5&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;leap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, I translated the Ruby test file &amp;ldquo;xruby/leap/leap_test.rb&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
require_relative &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;

class Date
  def leap?
    throw &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try to implement this yourself instead of using Ruby&amp;#39;s implementation.&amp;#34;&lt;/span&gt;
  end
  
  alias :gregorian_leap? :leap?
  alias :julian_leap? :leap?
end

class YearTest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; MiniTest::Unit::TestCase
  def test_leap_year
    assert Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt;)
  end

  def test_non_leap_year
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1997&lt;/span&gt;)
  end
  
  def test_non_leap_even_year
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;)
  end

  def test_century
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;)
  end

  def test_fourth_century
    skip
    assert Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt;)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to &amp;ldquo;xperl5/leap/leap.t&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More tests &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ENV{EXERCISM} ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Example&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Leap&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $module &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;::is_leap&amp;#39;&lt;/span&gt;;

use_ok($module) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; BAIL_OUT (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You need to create a module called $module.pm.&amp;#34;&lt;/span&gt;);
can_ok($module, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_leap&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; BAIL_OUT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing package $module with sub is_leap().&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; strict &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;refs&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1996 is a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1997&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1997 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1998 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1900 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2400 is a leap year&amp;#39;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally I ported the example answer &amp;ldquo;xruby/leap/example.rb&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delegate&amp;#39;&lt;/span&gt;

class Year &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; SimpleDelegator

  def self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(number)
    Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(number)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?
  end 

  def leap?
    divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
  end

  private

  def divisible_by?(i)
    (self % i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  end 
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the Perl version, &amp;ldquo;xperl5/leap/Example.pm&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Example;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_leap&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;)
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
        ? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;divisible_by&lt;/span&gt; {
    $_[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;_[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

__PACKAGE__;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the test file at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EXERCISM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; prove leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; ok   
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of our tests passed, so we can commit these files. I also &lt;a href=&#34;https://github.com/sillymoose/xperl6/tree/master/leap&#34;&gt;ported&lt;/a&gt; a Perl 6 version.&lt;/p&gt;

&lt;h3 id=&#34;add-the-new-exercise-to-the-forked-repo&#34;&gt;Add the new exercise to the forked repo&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve ported the files, we need to add them to the forked xperl5 repository and commit the change. Here&amp;rsquo;s are the commands to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd xperl5
$ git add leap&lt;span style=&#34;color:#e6db74&#34;&gt;/Example.pm leap/&lt;/span&gt;leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
$ git commit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Added the leap exercise&amp;#39;&lt;/span&gt;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the forked repo is out of sync with exercism/xperl5 you&amp;rsquo;ll need to &lt;a href=&#34;http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository&#34;&gt;rebase&lt;/a&gt; it.&lt;/p&gt;

&lt;h3 id=&#34;create-a-pull-request&#34;&gt;Create a pull request&lt;/h3&gt;

&lt;p&gt;Returning to GitHub, all we have to do is initiate a pull request from our forked repo at perltricks/xperl5. Clicking the &amp;ldquo;pull requests&amp;rdquo; link on the right of the screen brings us to the pull requests screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;new pull request&amp;rdquo; button will create the pull request form, GitHub automatically knows that the pull request should go back to exercism/xperl5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;Send pull request&amp;rdquo; button submits the pull request and we&amp;rsquo;re done! The exercism repo committers usually respond within a couple of hours. So now you&amp;rsquo;ve seen how easy it is to port an exercise, be warned it can be addictive &amp;hellip;&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;text=How+to+contribute+to+the+exercism.io+Perl+5+repo&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Carl Mäsak</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</link>
      <pubDate>Tue, 31 Aug 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</guid>
      <description>&lt;p&gt;Carl Mäsak is a developer of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt; and arguably the most dedicated bug wrangler. He&amp;rsquo;s contributed to more bug reports than anyone else. If you find that Rakudo does not do as you expect, you&amp;rsquo;ll likely talk to him on #perl6 for help triaging and categorizing your bug.&lt;/p&gt;

&lt;p&gt;In his own words, here&amp;rsquo;s how he&amp;rsquo;s helped make Perl 6 real.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent my teens learning programming by writing hundreds of small graphical games in BASIC. A combination of university studies and employment has given me a more solid foundation in programming, but I&amp;rsquo;m still catching up on the theory in many places.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helping bring it from the world of ideas into the world of implementations. As part of that, helping build up all the things around the implementations: libraries, tooling, documentation, culture. Making Perl 6 practically usable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got pulled in during the early Pugs days in 2005, but only staying on the outskirts of the community. I saw with regret how the Pugs development slowed and stopped during 2007, and with growing excitement how the Rakudo development got going in 2008. My real entrance as a contributor was that summer, when I secretly co-wrote &lt;a href=&#34;http://november-wiki.org/&#34;&gt;a wiki engine on top of Rakudo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A wiki engine (November), a 3-d connection game (&lt;a href=&#34;http://github.com/masak/druid/&#34;&gt;Druid&lt;/a&gt;), a Perl 6 project installer (&lt;a href=&#34;http://github.com/masak/proto/&#34;&gt;proto&lt;/a&gt;), a set of web development modules (&lt;a href=&#34;http://github.com/masak/web/&#34;&gt;Web.pm&lt;/a&gt;), a grammar engine (&lt;a href=&#34;http://github.com/masak/gge/&#34;&gt;GGE&lt;/a&gt;), and a dozen smaller modules and projects.&lt;/p&gt;

&lt;p&gt;I also occasionally contribute commits to Rakudo, to the Perl 6 specification, and I regularly blog about the progress and culture of Perl 6. My biggest single contribution is probably submitting hundreds of Rakudo bugs that I or others have found in the course of using Rakudo Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just remember being awed by the visionary tone and promise of the Apocalypses as they were rolled out. I no longer have any memory of like one particular feature more than the others. Since I program more in Perl 6 than in any other language nowadays, I tend to take them for granted. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the new regex/grammar features will be so attractive that other languages won&amp;rsquo;t be able to keep their grubby hands off them. Of course, they also won&amp;rsquo;t get the pervasiveness of regexes and grammars just by tacking them onto an existing language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primarily the extremely low amounts of vandalism, considering that hundreds of people have write access to the documents which specify the language itself. Accidental damage is also often quickly corrected, and more subtle errors get discovered and corrected in a wiki-like manner in the long term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also gained a new respect for what a &amp;ldquo;holistic&amp;rdquo; process the design of a language such as Perl 6 can be sometimes. Whether some feature turns out to be a good idea is determined by dozens of minute interactions in the spec, not all of them &amp;ldquo;local&amp;rdquo;, and some of them outright emergent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hard way. :-) By trying to express every new thought I have and seeing what fails: Perl 6, Rakudo, or my thought. I&amp;rsquo;m still learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come to &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt;. Familiarize yourself with &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;. Get a pet project. Experiment. Have fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not qualified to fully answer that. The one piece of the puzzle I do have is that some pieces of software out there are stale and dead, whereas others are limber, extensible and moving. It&amp;rsquo;s important to design for the eventuality that the user of the language knows best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A number of small, sometimes contradictory criteria. It gets the job done. It&amp;rsquo;s down-to-earth rather than abstraction-laden. It&amp;rsquo;s practical rather than orthogonal. It&amp;rsquo;s often consistent in strange and unexpected ways. It favours you rather than the compiler implementor. It goes an extra mile to be user friendly rather than cryptic. It doesn&amp;rsquo;t oversimplify. It encapsulates some linguistic notion. It scales with your needs. It&amp;rsquo;s as much about language culture as it is about language implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sub/method signatures, the type system, grammars, extending the language, the metamodel&amp;hellip; all of these make things that were possible but tricky or ugly before downright easy or beautiful. Perl 5 can do a whole lot of the above things using modules, but with Perl 6 you get them out-of-the-box, and fully integrated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most await before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to more speed and stability in the existing implementations, mostly in Rakudo. I think excellent database and web support will create great changes in the way Perl 6 is used and presented.&lt;/p&gt;

&lt;p&gt;As for actual features, I&amp;rsquo;m excited that &lt;a href=&#34;http://perlcabal.org/syn/S09.html&#34;&gt;Synopsis 9&lt;/a&gt; might be mostly implemented this year—it contains a lot of exciting syntactic sugar.&lt;/p&gt;

&lt;p&gt;Also very much looking forward to playing with macros—I&amp;rsquo;ve been waiting five years for them now! :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m delighted that what drives Rakudo development and makes it efficient is the fact that the group of people organized around it are able to communicate their needs and abilities, able to delegate as well as do large chunks of work in isolation as called for by the situation. I&amp;rsquo;m thinking of Patrick when I say that, but I see those traits in others as well.&lt;/p&gt;

&lt;p&gt;It also doesn&amp;rsquo;t hurt that those of us involved in development form an increasingly knit-together group of people who enjoy each other&amp;rsquo;s company, not only on IRC but away from the keyboard as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the time before it gets the obvious the-more-the-better features— stability and speed—what Rakudo needs most is people who are brave enough to deploy it in new and interesting situations. It is still the case that when we try new things with Rakudo, we discover new bugs and corner cases, and as a result the whole development process benefits. So we need people who want to break new ground.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you mean the name, there&amp;rsquo;s no consensus yet. Suggestions welcome. All we agree on is that Rakudo Nova might not fly, Rakudo Neutron Star sounds a bit heavy, and Rakudo Black Hole would kinda suck.&lt;/p&gt;

&lt;p&gt;As for what features come next after Rakudo Star, I think an important part of the development after the Rakudo Star release will be to get feedback from people who use it, in order to know better what to focus on next. I know the core devs have some ideas, but there&amp;rsquo;s also room for course corrections. Whether the next distribution release will be after half a year, a full year, or some other timespan, depends a lot on that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A future version of Perl 6 the specification? The mind boggles. I think I don&amp;rsquo;t have any further demands on the specification than what we already have in there. I&amp;rsquo;m fully occupied trying to think up ways to abuse the features from the current spec as they come online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to agree that the #perl6 channel on freenode is a generally friendly place. It&amp;rsquo;s at least partly the result of conscious effort. On the &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;perl6-* emailing lists&lt;/a&gt; you will at times see the most informative and friendly RTFM emails you&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s still an open question for me is how these community features will scale, as the ratio of newbies to regulars skyrockets, as the frequently asked questions become more frequent, and as Perl 6 enters an &amp;ldquo;Eternal September&amp;rdquo; phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tend to get involved in the discussion about them. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear in retrospect that we should have started both Rakudo and Pugs in 2001, not years later. Of course, we had neither the knowledge we do today, nor the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being curious about Perl 6, by writing their first little script, by finding a module (new or extant) to work on, by reporting bugs or proposing enchancements in Rakudo or the various projects, by bringing interesting discussions to the channel, by interacting with the community, and by being nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most misconceptions seem to me to be merely the result of a deplorable lack of correct information, mixed with blindly cargo-culted mockery.&lt;/p&gt;

&lt;p&gt;Some people seem to think that working on a language design for ten years, adapting it both to new ideas and to the feedback from implementations, in itself qualifies as a failure of some sort. I see a language growing both more real and more realistic every day.&lt;/p&gt;

&lt;p&gt;Some people haven&amp;rsquo;t been reached by the news that we actually have runnable implementations of Perl 6, and have had so for the past five years. Those people usually become very happy to hear that we do.&lt;/p&gt;

&lt;p&gt;Others consider the Perl 6 effort as &amp;ldquo;merely an academic effort&amp;rdquo;, whose purpose will in the end only be to inform Perl 5 in certain ways, and whose ivory-tower denizens will never truly reconnect with reality. This is the only misconception that I, having written dozens of Perl 6 modules which actually run, and having as my focus making Perl 6 more practically usable, can sometimes feel saddened by.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nearly all of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carl and other Perl 6 developers are hard at work on both the Perl 6 specification as well as the Rakudo Perl 6 implementation. &lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.08&#34;&gt;Rakudo Star 2010.08 is now available&lt;/a&gt;, with better performance, fewer bugs, and more features.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Jonathan Worthington</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</link>
      <pubDate>Wed, 11 Aug 2010 15:29:27 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jnthn.net/&#34;&gt;Jonathan Worthington&lt;/a&gt; is one of the lead developers of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt;. A couple of months before the &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star release&lt;/a&gt;, Perl.com interviewed him about his work on Perl 6 and what the rest of us should expect as we explore this new language. Follow Jonathan&amp;rsquo;s work at &lt;a href=&#34;http://6guts.wordpress.com/&#34;&gt;6guts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered programming when I was about eight years old, and got hooked. It started out with Logo and BBC Micro BASIC on some computers at school. Several years and a couple of PC-based dialects of Basic later, my family got internet access at home, and a couple of years later I ran across Perl.&lt;/p&gt;

&lt;p&gt;I ended up going off to university to do Computer Science. I questioned it a bit—I wasn&amp;rsquo;t certain my childhood hobby would still be interesting as a topic of study and a future career. Happily, it deepened my curiosity rather than bored me. I took a particular interest in languages, compilers and type systems, though the natural language processing courses kind of caught my interest too.&lt;/p&gt;

&lt;p&gt;That all came to an end several years back, when I graduated. Since then, I&amp;rsquo;ve done a few years freelancing and living abroad, and recently joined a startup company in Sweden. Amusingly, it makes the third country starting with an &amp;ldquo;S&amp;rdquo; that I&amp;rsquo;ve lived in since graduating—the other two were sunny Spain and the lesser-known but lovely Slovakia, a place I remain very fond of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the moment, I&amp;rsquo;m primarily interested in writing a good compiler for it. Beyond that, I&amp;rsquo;d like to use it to build more cool things, though I&amp;rsquo;ve little idea what yet. We&amp;rsquo;ll see what comes along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in 2003, a couple of years after discovering Perl, I heard about Perl 6. I found the &lt;a href=&#34;http://dev.perl.org/perl6/apocalypse/&#34;&gt;apocalypses&lt;/a&gt; engaging, and joined a couple of mailing lists. A lot of perl6-language bewildered me. Well, some things never change. :-) I felt way out of my depth on the language design front back then, but then found the &lt;a href=&#34;http://www.parrot.org/&#34;&gt;Parrot&lt;/a&gt; project, which was a little more concrete. I wrote a couple of patches to improve Windows support.&lt;/p&gt;

&lt;p&gt;I did more bits with Parrot over the following years—mostly on the bytecode format and some object orientation bits. I didn&amp;rsquo;t really get involved with the Perl 6 compiler itself until 2007. That summer, I went to OSCON, drank a few beers and then told Larry Wall, of all people, that implementing junctions in the Perl 6 on Parrot compiler sounded interesting.&lt;/p&gt;

&lt;p&gt;Sadly, autumn of 2007 saw me pretty depressed. I withdrew from hacking on just about everything, went to wander around China for a month and hurriedly arranged to move abroad, in hope of putting some distance between myself and things. With the Spanish sun to improve my mood, and noticing that the latest iteration of the Perl 6 compiler—built on the &lt;a href=&#34;http://docs.parrot.org/parrot/devel/html/PCT_Tutorial.html&#34;&gt;Parrot Compiler Toolkit&lt;/a&gt;—had landed, it felt like time to try and make good on my junctions remark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, not long after digging in to junctions, I discovered that doing junctions properly meant doing multiple dispatch&amp;hellip; and doing multiple dispatch meant doing a bunch of the type system stuff&amp;hellip; and doing that meant being able to declare classes and roles. A couple of years of hacking later, and with plenty of input and help from others, we&amp;rsquo;re doing pretty well on all of those areas now in Rakudo. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a hard one. There are many interesting features in Perl 6—some of them big things, some of them much smaller. What I&amp;rsquo;ve really come to admire isn&amp;rsquo;t so much the features themselves, but rather the much smaller number of fundamentals that they&amp;rsquo;re all built on top of, and how they them form a coherent whole that is greater than its parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perl has long been a leader in regexes, and in many senses &lt;a href=&#34;http://perlcabal.org/syn/S05.html&#34;&gt;Perl 6 grammars and its new regex syntax&lt;/a&gt; are a game changer. Parsing problems that are beyond traditional regexes are now often easily expressible. Additionally, the changes in Perl 6 seriously try to address the cultural problems; good software development practices, such as code re-use, should also apply to regexes, and that—amongst other things—is now made easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The willingness to revisit things when an implementation points out issues, and an overriding commitment to get it right, rather than just get it out the door in whatever shape as soon as possible. While it is somewhat frustrating for those waiting to use Perl 6 in production, and to some degree for those of us implementing it too when things get re-hashed, I&amp;rsquo;m also convinced that the Perl 6 we deliver will be better for the time that&amp;rsquo;s been taken over it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By implementing a chunk of it. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Drop along to &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt; for links to the latest and greatest in terms of documentation and tutorials. Some of us are also working on a book (&lt;a href=&#34;http://github.com/perl6/book/&#34;&gt;Using Perl 6&lt;/a&gt;). And of course, don&amp;rsquo;t forget to join the #perl6 IRC channel. It&amp;rsquo;s a friendly place, and a great place to get questions answered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While 20 years sounds a long time, in many senses if a language gets a reasonable level of adoption—which I do hope Perl 6 will—it&amp;rsquo;s easy enough for legacy code to still be in production 20 years on.&lt;/p&gt;

&lt;p&gt;The more interesting challenge is how to make a language that can stay at the forefront for 20 years and still be considered modern. Since what&amp;rsquo;s considered modern will of course mutate, that means the language has to be able to be designed with the ability to mutate too. Handling language mutations sanely, and making sure it&amp;rsquo;s always clear what &amp;ldquo;dialect&amp;rdquo; of Perl 6 is being spoken, has been one of the big challenges in making Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It makes an easy thing easy, or a hard thing possible. The amount of code is proportional to the task at hand. It feels natural. It solves a real, practical problem, so you can get your work done efficiently and have time to go for a beer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d say writing OO code is decidedly easier now, particularly for those coming from other non-Perl language backgrounds. At the same time, so is writing functional code. And writing clean code is most certainly easier. Language extensions are an example of a harder thing that is made much more possible in Perl 6; introducing a new operator isn&amp;rsquo;t that much harder than writing a subroutine, you just have to give it an interesting looking name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature are you most awaiting before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a slightly odd sense, I am using Perl 6 for a serious project; big chunks of Rakudo are actually written in Perl 6. That aside, though, feature wise I think Rakudo is doing pretty well; the things I&amp;rsquo;m most waiting on—and helping us improve on—are issues like performance, stability and having a good range of modules to draw on. If I had to identify the next big features we need, though, it&amp;rsquo;s concurrency support and native type support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The high standards at which it is conducted. For example, we have a lot of effort going in to testing, and test coverage is taken seriously and highly valued by all all of those working on Rakudo. People often code-review each other&amp;rsquo;s patches. Discussion on the channel and on the mailing lists—even in the face of opposing views—is just about always polite and friendly. The Perl 6 team is easily the best I&amp;rsquo;ve ever had the privilege to work with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wider deployment means growing the users base. People should choose a technology primarily on the merits of the technology itself. Therefore, to grow a user base, Rakudo needs to deliver not only the benefits of the Perl 6 language itself, but also a stable and performant implementation of it. It&amp;rsquo;s a wider issue than Rakudo, but we also need lots of good modules and, perhaps, some kind of killer app. Those kinds of things will come from the community at large rather than just the core Rakudo team, however they matter significantly to Rakudo&amp;rsquo;s own success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after Rakudo Star?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I often talk about Rakudo development as being like going for a hike up a mountain. While the most impressive view will be at that top—when we have a complete Perl 6 implementation—at some points along the way there will be good views, and it&amp;rsquo;s good to pause and enjoy them. Rakudo is one of those points on the journey—in fact, the most significant so far.&lt;/p&gt;

&lt;p&gt;Rakudo has caused us to focus for a while on trying to get something useful and usable. That has been valuable, however there are still some big items to take care of on the way to the mountain peak. Those will once again take center stage after Rakudo *.&lt;/p&gt;

&lt;p&gt;Two big areas of focus will be on native type handling and parallelism. Part of the native type handling will involve a re-visit of how objects look internally. Part of this is being able to store native types in them, not just other objects. Additionally, we can actually do the vast majority of object attribute lookups as index offsets instead of hash lookups, which should be a big performance win. Lexical variable access can also be optimized in a similar fashion. We have a lot of statically known information about a Perl 6 program that we pretty much just throw away today.&lt;/p&gt;

&lt;p&gt;We will also be transforming Rakudo from a compiler with one backend—Parrot—into a compiler with multiple backends. We&amp;rsquo;ve had an architecture open to such things for some time now, but getting the core features in place and actually delivering something of note have been far more important goals so far.&lt;/p&gt;

&lt;p&gt;However, at this point, I think some things—especially parallelism, an area where Parrot is currently weak—will be much easier to do an initial implementation of for another backend. It usually takes at least a first cut implementation and some iteration to get the specification solidified and refined, and it will be easier to do that on a base that offers solid concurrency primitives. I also hope that having other backends will help us grow both the user base and the developer base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really looking forward to having good threading and parallel programming support—but perhaps that&amp;rsquo;s mostly because we&amp;rsquo;ll be done with the hard work of making it happen!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The state of the Perl 6 community today is something that is dear to many of us who are a part of it. People frequently comment how the #perl6 IRC channel is somehow different to the norm; it&amp;rsquo;s very open to newcomers and beginners, and people tend to have a very slow burning fuse. The challenge, of course, is scaling that community without losing all of the nice things about it. Significantly, the key players all really want to work out how to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mostly through a very regular presence on #perl6, where a lot of them are thrashed out. I also read the spec change commits as they are reported on the perl6-language list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implementation having been started sooner. Implementations have been the primary driver towards the spec converging on something implementable and sane. That said, the pre-implementation, tossing-about-ideas phase was, of course, important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s so much that needs doing in the Perl 6 world today! Generally, I just advise interested people to take a look around, spot something interesting to help with or something that&amp;rsquo;s missing that they would like to work on, and dig in! Perl 6 is very much about &lt;a href=&#34;http://www.slideshare.net/autang/ofun-optimizing-for-fun&#34;&gt;-Ofun&lt;/a&gt;. For some of us, fun is compiler guts. For others, fun is web frameworks. For others, fun is making awesome documentation. If you want to help, find what&amp;rsquo;s fun for you, do it well, and make your mark on the evolving Perl 6 community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perhaps the biggest one is that some people equate &amp;ldquo;taking a long time&amp;rdquo; with &amp;ldquo;not going to happen&amp;rdquo;. It&amp;rsquo;s an easy enough misconception to form given the project&amp;rsquo;s long time scale, especially for anyone not really following the day-to-day progress. Of course, it&amp;rsquo;s a hard misconception to understand for those who are following it too. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, there&amp;rsquo;s thousands of modules to be written for all kinds of needs from popular to niche. One area that certainly needs more effort, however, is documentation. It&amp;rsquo;s not like there aren&amp;rsquo;t projects started, more just too few hands for the amount of work that needs to be done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome Rakudo Star</title>
      <link>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</link>
      <pubDate>Thu, 29 Jul 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/07/welcome-rakudo-star.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.perl6.org/&#34;&gt;Perl 6&lt;/a&gt; has evolved over a long time. As originally conceived, it was to be a modest cleanup of Perl 5 semantics and implementation. By shrugging off a few of the less desirable features and misfeatures, Perl the language could evolve in new ways.&lt;/p&gt;

&lt;p&gt;As it turns out, a language is more than a bundle of features. It&amp;rsquo;s a set of design principles which govern interlocking syntax and semantics and idioms. The greater the internal consistency of that philosophy, the greater the coherence of the language and its community and its ecosystem.&lt;/p&gt;

&lt;p&gt;Given the chance to reinvent Perl one more time (the first reinvention was Perl 4 to Perl 5), could the community produce a language which could evolve to meet the needs of programmers for at least the next twenty years? Could we do so without all of the pain and tension between the need to retain backwards compatibility and the desire to improve based on real world experiences?&lt;/p&gt;

&lt;p&gt;That task was larger than any of us could have predicted, but the results (Perl&amp;rsquo;s testing culture! Roles! Moose! Grammars!) demonstrate their utility even now, even in the Perl 5 world. Both languages feed off of the other. Both languages help us to research and define and refine what Perl is and what Perl can be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.07&#34;&gt;Rakudo Star&lt;/a&gt; is a milestone in that process. We&amp;rsquo;re proud of what we&amp;rsquo;ve accomplished, and we&amp;rsquo;ve reached a point where we want to share it with the wider world.&lt;/p&gt;

&lt;p&gt;People will complain. They don&amp;rsquo;t like twigils. (They don&amp;rsquo;t like sigils!) All they ever wanted was a better object system. They hate operators or Unicode operators. They don&amp;rsquo;t want to learn how multiple dispatch works. They miss the CPAN. They prefer homoiconicity of syntax. They feel betrayed that after ten years, Rakudo Star is the first of several distribution releases and not the final, it&amp;rsquo;s completely finished that&amp;rsquo;s it, install it to run your space station, release&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip; as if designing a language intended to evolve and change and adapt over the next several decades were a simple, three-month task to produce a perfect, static, never-needs-updating specification. (Implementation is merely a matter of hiring enough typists, you see.)&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s neither what Perl 6 is nor how it works. What matters now is that you—yes, you—can download and install and play with Perl 6 right now. It&amp;rsquo;s not complete, whatever that means. It&amp;rsquo;s not finished, because twenty years from now we&amp;rsquo;ll still release new versions to meet needs that we can&amp;rsquo;t possibly predict right now.&lt;/p&gt;

&lt;p&gt;What we &lt;em&gt;can&lt;/em&gt; do is figure out what &lt;em&gt;you&lt;/em&gt; need. What works for you? What doesn&amp;rsquo;t? Are there bugs to fix? Are there particular optimizations you&amp;rsquo;d like to see? (Our next big task is optimization.) Now begins the work of polishing. What can we do to make Perl 6 even more amazing for you for the next release of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo&lt;/a&gt; and the next and the next and the next?&lt;/p&gt;

&lt;p&gt;Set aside your assumptions. Try Perl 6 yourself with Rakudo Star. Perl in every form is the work of a community willing to make amazing things happen. That task continues—help us make Perl more powerful, more flexible, more useful, and more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming is Hard, Let&#39;s Go Scripting...</title>
      <link>http://localhost:1313/pub/2007/12/06/soto-11.html/</link>
      <pubDate>Thu, 06 Dec 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/12/06/soto-11.html/</guid>
      <description>

&lt;p&gt;I think, to most people, scripting is a lot like obscenity. I can&amp;rsquo;t define it, but I&amp;rsquo;ll know it when I see it. Here are some common memes floating around:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Simple language
    &amp;quot;Everything is a string&amp;quot;
    Rapid prototyping
    Glue language
    Process control
    Compact/concise
    Worse-is-better
    Domain specific
    &amp;quot;Batteries included&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;I don&amp;rsquo;t see any real center here, at least in terms of technology. If I had to pick one metaphor, it&amp;rsquo;d be easy onramps. And a slow lane. Maybe even with some optional fast lanes.&lt;/p&gt;

&lt;h3 id=&#34;easy-onramps&#34;&gt;Easy Onramps&lt;/h3&gt;

&lt;p&gt;But basically, scripting is not a technical term. When we call something a scripting language, we&amp;rsquo;re primarily making a linguistic and cultural judgment, not a technical judgment.&lt;/p&gt;

&lt;p&gt;I see scripting as one of the humanities. It&amp;rsquo;s our linguistic roots showing through. So speaking of roots&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;the-past&#34;&gt;The Past&lt;/h3&gt;

&lt;p&gt;Suppose you went back to Ada Lovelace and asked her the difference between a script and a program. She&amp;rsquo;d probably look at you funny, then say something like: Well, a script is what you give the actors, but a program is what you give the audience. That Ada was one sharp lady&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since her time, we seem to have gotten a bit more confused about what we mean when we say scripting. It confuses even me, and I&amp;rsquo;m supposed to be one of the experts.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m afraid all I can do is give you my own worm&amp;rsquo;s eye view of the past, the present, and the future. Let me warn you that I am not without a few prejudices here and there.&lt;/p&gt;

&lt;h3 id=&#34;basic&#34;&gt;BASIC&lt;/h3&gt;

&lt;p&gt;Now, however it was initially intended, I think BASIC turned out to be one of the first major scripting languages, especially the extended version that DEC put onto its minicomputers called BASIC/PLUS, which happily included recursive functions with arguments. I started out as a BASIC programmer. Some people would say that I&amp;rsquo;m permanently damaged. Some people are undoubtedly right.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m not going to apologize for that. All language designers have their occasional idiosyncracies. I&amp;rsquo;m just better at it than most. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;rsts-basic-plus&#34;&gt;RSTS BASIC/PLUS&lt;/h3&gt;

&lt;p&gt;Anyway, when I was a RSTS programmer on a PDP-11, I certainly treated BASIC as a scripting language, at least in terms of rapid prototyping and process control. I&amp;rsquo;m sure it warped my brain forever. Perl&amp;rsquo;s statement modifiers are straight out of BASIC/PLUS. It even had some cute sigils on the ends of its variables to distinguish string and integer from floating point.&lt;/p&gt;

&lt;p&gt;But you could do extreme programming. In fact, I had a college buddy I did pair programming with. We took a compiler writing class together and studied all that fancy stuff from the dragon book. Then of course the professor announced we would be implementing our own language, called PL/0. After thinking about it a while, we announced that we were going to do our project in BASIC. The professor looked at us like were insane. Nobody else in the class was using BASIC. And you know what? Nobody else in the class finished their compiler either. We not only finished but added I/O extensions, and called it PL 0.5. That&amp;rsquo;s rapid prototyping.&lt;/p&gt;

&lt;h3 id=&#34;unix&#34;&gt;Unix?&lt;/h3&gt;

&lt;p&gt;I remember one day our computer center got a letter from Bell Labs telling us that we could get a tape of Unix V6 for cheap, only $100 because they were coming out shortly with V7. We all looked at each other and said, Why would we ever want to use this thing called Unix? We have RSTS.&lt;/p&gt;

&lt;h3 id=&#34;jam-no-not-that-one&#34;&gt;JAM (no not that one)&lt;/h3&gt;

&lt;p&gt;My first scripting language was written in BASIC. For my job in the computer center I wrote a language that I called JAM, short for Jury-rigged All-purpose Meta-language. Story of my life&amp;hellip;&lt;/p&gt;

&lt;p&gt;JAM was an inside-out text-processing language much like PHP, except that HTML hadn&amp;rsquo;t been invented yet. We mostly used it as a fancy macro processor for BASIC. Unlike PHP, it did not have 3,000 functions in one namespace. We wouldn&amp;rsquo;t have had the memory, for one thing.&lt;/p&gt;

&lt;h3 id=&#34;lisp&#34;&gt;LISP&lt;/h3&gt;

&lt;p&gt;For good or ill, when I went off to grad school, I studied linguistics, so the only computer language I used there was LISP. It was my own personal McCarthy era.&lt;/p&gt;

&lt;p&gt;Is LISP a candidate for a scripting language? While you can certainly write things rapidly in it, I cannot in good conscience call LISP a scripting language. By policy, LISP has never really catered to mere mortals.&lt;/p&gt;

&lt;p&gt;And, of course, mere mortals have never really forgiven LISP for not catering to them.&lt;/p&gt;

&lt;h3 id=&#34;pascal-ada&#34;&gt;Pascal, Ada&lt;/h3&gt;

&lt;p&gt;Once I got into industry, I wrote a compiler in Pascal for a discrete event simulator, and slavered over the forthcoming Ada specs. As a linguist, I don&amp;rsquo;t think of Ada as a big language. Now, English and Japanese, those are big languages. Ada is just a medium-sized language.&lt;/p&gt;

&lt;h3 id=&#34;unix-shell&#34;&gt;Unix, shell&lt;/h3&gt;

&lt;p&gt;After several years I finally became acquainted with Unix and its various scripting languages. OK, to be more precise, BSD, and csh.&lt;/p&gt;

&lt;h3 id=&#34;bsd-csh&#34;&gt;BSD, csh&lt;/h3&gt;

&lt;p&gt;Yeah, yeah, I know. More brain damage&amp;hellip;&lt;/p&gt;

&lt;p&gt;I also learned a little C.&lt;/p&gt;

&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s because a little C is all there is. I&amp;rsquo;m still learning those libraries though.&lt;/p&gt;

&lt;h3 id=&#34;shell-awk-sed-find-expr&#34;&gt;shell + awk + sed + find + expr&amp;hellip;&lt;/h3&gt;

&lt;p&gt;But the frustrations of Unix shell programming led directly to the creation of Perl, which I don&amp;rsquo;t really have time to tell. But essentially, I found that shell scripting was intrinsically limited by the fact that most of its verbs are not under its control and hence largely inconsistent with each other. And the nouns are impoverished, restricted to strings and files, with who-knows-what typology.&lt;/p&gt;

&lt;h3 id=&#34;c-xor-shell&#34;&gt;C xor shell&lt;/h3&gt;

&lt;p&gt;More destructive was the mindset that it was a one-dimensional universe: you either programmed in C or you programmed in shell, because they&amp;rsquo;re obviously at opposite ends of the One True Continuum. Perl came about when I realized that scripting did not always have to viewed as the opposite of programming, but that a single language could be pretty good for both. That opened up a huge ecological niche. Many of you have seen my old clamshell diagram, with the two dimensions of manipulexity and whipuptitude.&lt;/p&gt;

&lt;h3 id=&#34;tcl&#34;&gt;Tcl&lt;/h3&gt;

&lt;p&gt;After Perl came Tcl, which in a sense is a purer scripting language than Perl. Perl just pretends that everything is a string when it&amp;rsquo;s convenient, but Tcl really believes that as a controlling metaphor. The string metaphor tends to have bad performance ramifications, but that&amp;rsquo;s not why Tcl languished, I think. There were two reasons for that.&lt;/p&gt;

&lt;p&gt;First, Tcl stayed in the Unix mindset that controlling tools was the opposite of creating tools, so they didn&amp;rsquo;t optimize much. The fast parts can always be written in C, after all.&lt;/p&gt;

&lt;p&gt;The second reason was the lack of a decent extension mechanism, so you ended up with separate executables for expect, incr-tcl, etc.&lt;/p&gt;

&lt;p&gt;I must say, though, that I&amp;rsquo;ve always admired Tcl&amp;rsquo;s delegational model of semantics. But it fell into the same trap as LISP by expecting everyone to use the One True Syntax. Speaking of the One True Syntax:&lt;/p&gt;

&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;After Tcl came Python, which in Guido&amp;rsquo;s mind was inspired positively by ABC, but in the Python community&amp;rsquo;s mind was inspired negatively by Perl. I&amp;rsquo;m not terribly qualified to talk about Python however. I don&amp;rsquo;t really know much about Python. I only stole its object system for Perl 5. I have since repented.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m much more qualified to talk about Ruby&amp;ndash;that&amp;rsquo;s because a great deal of Ruby&amp;rsquo;s syntax is borrowed from Perl, layered over Smalltalk semantics. I&amp;rsquo;ve always viewed Ruby as a much closer competitor for Perls ecological niche, not just because of the borrowed ideas, but because both Perl and Ruby take their functional programming support rather more seriously that Python does. On the other hand, I think Ruby kind of screwed up on its declaration syntax, among other things.&lt;/p&gt;

&lt;h3 id=&#34;sh&#34;&gt;*sh&lt;/h3&gt;

&lt;p&gt;Meanwhile, the Bourne shell was extended into the Korn shell and bash. I didn&amp;rsquo;t have much to do with those either. Thankfully. I will say that the continued evolution of the shell shows just how crufty a language can get when you just keep adding on ad hoc syntactic features.&lt;/p&gt;

&lt;h3 id=&#34;php&#34;&gt;PHP&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve also seen the rise of PHP, which takes the worse-is-better approach to dazzling new depths, as it were. By and large PHP seems to be making the same progression of mistakes as early Perl did, only slower. The one thing it does better is packaging. And when I say packaging, I don&amp;rsquo;t mean namespaces.&lt;/p&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;Then there&amp;rsquo;s JavaScript, a nice clean design. It has some issues, but in the long run JavaScript might actually turn out to be a decent platform for running Perl 6 on. Pugs already has part of a backend for JavaScript, though sadly that has suffered some bitrot in the last year. I think when the new JavaScript engines come out we&amp;rsquo;ll probably see renewed interest in a JavaScript backend.&lt;/p&gt;

&lt;h3 id=&#34;monad-powershell&#34;&gt;Monad/PowerShell&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve looked a bit at Microsoft&amp;rsquo;s Monad, and I&amp;rsquo;m pleased to note that it has object pipes like Perl 6. I just hope they don&amp;rsquo;t patent it.&lt;/p&gt;

&lt;h3 id=&#34;lua-applescript&#34;&gt;Lua, AppleScript&lt;/h3&gt;

&lt;p&gt;There are other scripting languages in wide use. Sadly, I must confess I never looked closely at Lua or AppleScript, probably because I&amp;rsquo;m not a game designer with a Mac.&lt;/p&gt;

&lt;p&gt;Actually, I suspect it runs deeper than that, which brings us up to the present time.&lt;/p&gt;

&lt;h3 id=&#34;the-present&#34;&gt;The Present&lt;/h3&gt;

&lt;p&gt;When I look at the present situation, what I see is the various scripting communities behaving a lot like neighboring tribes in the jungle, sometimes trading, sometimes warring, but by and large just keeping out of each other&amp;rsquo;s way in complacent isolation.&lt;/p&gt;

&lt;p&gt;I tend to take an anthropological view of these things. Many of you here are Perl programmers, but some of you come from other programming tribes. And depending on your tribal history, you might think of a string as a pointer to a byte array if you&amp;rsquo;re a C programmer, or as a list if you&amp;rsquo;re a functional programmer, or as an object if you&amp;rsquo;re a Java programmer. I view a string as a Text, with a capital T.&lt;/p&gt;

&lt;h3 id=&#34;text&#34;&gt;Text&lt;/h3&gt;

&lt;p&gt;I read that word from a postmodern perspective. Of course, the term Postmodern is itself context-sensitive. Some folks think Postmodernism means little more than the Empowerment of the Vulgar. Some folks think the same about Perl.&lt;/p&gt;

&lt;p&gt;But I take Postmodernism to mean that a Text, whether spoken or written, is an act of communication requiring intelligence on both ends, and sometimes in the middle too. I don&amp;rsquo;t want to talk to a stupid computer language. I want my computer language to understand the strings I type.&lt;/p&gt;

&lt;p&gt;Perl is a postmodern language, and a lot of conservative folks feel like Postmodernism is a rather liberal notion. So it&amp;rsquo;s rather ironic that my views on Postmodernism were primarily informed by studying linguistics and translation as taught by missionaries, specifically, the Wycliffe Bible Translators. One of the things they hammered home is that there&amp;rsquo;s really no such thing as a primitive human language. By which they mean essentially that all human languages are Turing complete.&lt;/p&gt;

&lt;p&gt;When you go out to so-called primitive tribes and analyze their languages, you find that structurally they&amp;rsquo;re just about as complex as any other human language. Basically, you can say pretty much anything in any human language, if you work at it long enough. Human languages are Turing complete, as it were.&lt;/p&gt;

&lt;p&gt;Human languages therefore differ not so much in what you &lt;em&gt;can&lt;/em&gt; say but in what you &lt;em&gt;must&lt;/em&gt; say. In English, you are forced to differentiate singular from plural. In Japanese, you don&amp;rsquo;t have to distinguish singular from plural, but you do have to pick a specific level of politeness, taking into account not only your degree of respect for the person you&amp;rsquo;re talking to, but also your degree of respect for the person or thing you&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;So languages differ in what you&amp;rsquo;re forced to say. Obviously, if your language forces you to say something, you can&amp;rsquo;t be concise in that particular dimension using your language. Which brings us back to scripting.&lt;/p&gt;

&lt;p&gt;How many ways are there for different scripting languages to be concise?&lt;/p&gt;

&lt;p&gt;How many recipes for borscht are there in Russia?&lt;/p&gt;

&lt;p&gt;Language designers have many degrees of freedom. I&amp;rsquo;d like to point out just a few of them.&lt;/p&gt;

&lt;h3 id=&#34;early-binding-late-binding&#34;&gt;early binding / late binding&lt;/h3&gt;

&lt;p&gt;Binding in this context is about exactly when you decide which routine you&amp;rsquo;re going to call for a given routine name. In the early days of computing, most binding was done fairly early for efficiency reasons, either at compile time, or at the latest, at link time. You still tend to see this approach in statically typed languages. With languages like Smalltalk, however, we began to see a different trend, and these days most scripting languages are trending towards later binding. That&amp;rsquo;s because scripting languages are trying to be dwimmy (Do What I Mean), and the dwimmiest decision is usually a late decision because you then have more available semantic and even pragmatic context to work with. Otherwise you have to predict the future, which is hard.&lt;/p&gt;

&lt;p&gt;So scripting languages naturally tend to move toward an object-oriented point of view, where the binding doesn&amp;rsquo;t happen &amp;lsquo;til method dispatch time. You can still see the scars of conflict in languages like C++ and Java though. C++ makes the default method type non-virtual, so you have to say virtual explicitly to get late binding. Java has the notion of final classes, which force calls to the class to be bound at compile time, essentially. I think both of those approaches are big mistakes. Perl 6 will make different mistakes. In Perl 6 all methods are virtual by default, and only the application as a whole can tell the optimizer to finalize classes, presumably only after you know how all the classes are going to be used by all the other modules in the program.&lt;/p&gt;

&lt;h3 id=&#34;single-dispatch-multiple-dispatch&#34;&gt;single dispatch / multiple dispatch&lt;/h3&gt;

&lt;p&gt;In a sense, multiple dispatch is a way to delay binding even longer. You not only have to delay binding &amp;lsquo;til you know the type of the object, but you also have to know the types of all rest of the arguments before you can pick a routine to call. Python and Ruby always do single dispatch, while Dylan does multiple dispatch. Here is one dimension in which Perl 6 &lt;em&gt;forces&lt;/em&gt; the caller to be explicit for clarity. I think it&amp;rsquo;s an important distinction for the programmer to bear in mind, because single dispatch and multiple dispatch are philosophically very different ideas, based on different metaphors.&lt;/p&gt;

&lt;p&gt;With single-dispatch languages, you are basically sending a message to an object, and the object decides what to do with that message. With multiple dispatch languages, however, there is no privileged object. All the objects involved in the call have equal weight. So one way to look at multiple dispatch is that the objects are completely passive. But if the objects aren&amp;rsquo;t deciding how to bind, who is?&lt;/p&gt;

&lt;p&gt;Well, it&amp;rsquo;s sort of a democratic thing. All the routines of a given name get together and hold a political conference. (Well, not really, but this is how the metaphor works.) Each of the routines is a delegate to the convention. All the potential candidates put their names in the hat. Then all the routines vote on who the best candidate is, and the next best, and the next best after that. And eventually the routines themselves decide what the best routine to call is.&lt;/p&gt;

&lt;p&gt;So basically, multiple dispatch is like democracy. It&amp;rsquo;s the worst way to do late binding, except for all the others.&lt;/p&gt;

&lt;p&gt;But I really do think that&amp;rsquo;s true, and likely to become truer as time goes on. I&amp;rsquo;m spending a lot of time on this multiple dispatch issue because I think programming in the large is mutating away from the command-and-control model implicit in single dispatch. I think the field of computation as a whole is moving more toward the kinds of decisions that are better made by swarms of insects or schools of fish, where no single individual is in control, but the swarm as a whole has emergent behaviors that are somehow much smarter than any of the individual components.&lt;/p&gt;

&lt;h3 id=&#34;eager-evaluation-lazy-evaluation&#34;&gt;eager evaluation / lazy evaluation&lt;/h3&gt;

&lt;p&gt;Most languages evaluate eagerly, including Perl 5. Some languages evaluate all expressions as lazily as possible. Haskell is a good example of that. It doesn&amp;rsquo;t compute anything until it is forced to. This has the advantage that you can do lots of cool things with infinite lists without running out of memory. Well, at least until someone asks the program to calculate the whole list. Then you&amp;rsquo;re pretty much hosed in any language, unless you have a real Turing machine.&lt;/p&gt;

&lt;p&gt;So anyway, in Perl 6 we&amp;rsquo;re experimenting with a mixture of eager and lazy. Interestingly, the distinction maps very nicely onto Perl 5&amp;rsquo;s concept of scalar context vs. list context. So in Perl 6, scalar context is eager and list context is lazy. By default, of course. You can always force a scalar to be lazy or a list to be eager if you like. But you can say things like &lt;code&gt;for 1..Inf&lt;/code&gt; as long as your loop exits some other way a little bit before you run into infinity.&lt;/p&gt;

&lt;h3 id=&#34;eager-typology-lazy-typology&#34;&gt;eager typology / lazy typology&lt;/h3&gt;

&lt;p&gt;Usually known as static vs. dynamic, but again there are various positions for the adjustment knob. I rather like the gradual typing approach for a number of reasons. Efficiency is one reason. People usually think of strong typing as a reason, but the main reason to put types into Perl 6 turns out not to be strong typing, but rather multiple dispatch. Remember our political convention metaphor? When the various candidates put their names in the hat, what distinguishes them? Well, each candidate has a political platform. The planks in those political platforms are the types of arguments they want to respond to. We all know politicians are only good at responding to the types of arguments they want to have&amp;hellip;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another way in which Perl 6 is slightly more lazy than Perl 5. We still have the notion of contexts, but exactly when the contexts are decided has changed. In Perl 5, the compiler usually knows at compile time which arguments will be in scalar context, and which arguments will be in list context. But Perl 6 delays that decision until method binding time, which is conceptually at run time, not at compile time. This might seem like an odd thing to you, but it actually fixes a great number of things that are suboptimal in the design of Perl 5. Prototypes, for instance. And the need for explicit references. And other annoying little things like that, many of which end up as frequently asked questions.&lt;/p&gt;

&lt;h3 id=&#34;limited-structures-rich-structures&#34;&gt;limited structures / rich structures&lt;/h3&gt;

&lt;p&gt;Awk, Lua, and PHP all limit their composite structures to associative arrays. That has both pluses and minuses, but the fact that awk did it that way is one of the reasons that Perl does it differently, and differentiates ordered arrays from unordered hashes. I just think about them differently, and I think a lot of other people do too.&lt;/p&gt;

&lt;h3 id=&#34;symbolic-wordy&#34;&gt;symbolic / wordy&lt;/h3&gt;

&lt;p&gt;Arguably APL is also a kind of scripting language, largely symbolic. At the other extreme we have languages that eschew punctuation in favor of words, such as AppleScript and COBOL, and to a lesser extent all the Algolish languages that use words to indicate blocks where the C-derived languages use curlies. I prefer a balanced approach here, where symbols and identifiers are each doing what theyre best at. I like it when most of the actual words are those chosen by the programmer to represent the problem at hand. I don&amp;rsquo;t like to see words used for mere syntax. Such syntactic functors merely obscure the real words. That&amp;rsquo;s one thing I learned when I switched from Pascal to C. Braces for blocks. It&amp;rsquo;s just right visually.&lt;/p&gt;

&lt;p&gt;Actually, there are languages that do it even worse than COBOL. I remember one Pascal variant that required your keywords to be capitalized so that they would stand out. No, no, no, no, no! You don&amp;rsquo;t want your functors to stand out. It&amp;rsquo;s shouting the wrong words: IF! foo THEN! bar ELSE! baz END! END! END! END!&lt;/p&gt;

&lt;p&gt;Anyway, in Perl 6 we&amp;rsquo;re raising the standard for where we use punctuation, and where we don&amp;rsquo;t. We&amp;rsquo;re getting rid of some of our punctuation that isn&amp;rsquo;t really pulling its weight, such as parentheses around conditional expressions, and most of the punctuational variables. And we&amp;rsquo;re making all the remaining punctuation work harder. Each symbol has to justify its existence according to Huffman coding.&lt;/p&gt;

&lt;p&gt;Oddly, there&amp;rsquo;s one spot where we&amp;rsquo;re introducing new punctuation. After your sigil you can add a twigil, or secondary sigil. Just as a sigil tells you the basic structure of an object, a twigil tells you that a particular variable has a weird scope. This is basically an idea stolen from Ruby, which uses sigils to indicate weird scoping. But by hiding our twigils after our sigils, we get the best of both worlds, plus an extensible twigil system for weird scopes we haven&amp;rsquo;t thought of yet.&lt;/p&gt;

&lt;p&gt;We think about extensibility a lot. We think about languages we don&amp;rsquo;t know how to think about yet. But leaving spaces in the grammar for new languages is kind of like reserving some of our land for national parks and national forests. Or like an archaeologist not digging up half the archaeological site because we know our descendants will have even better analytical tools than we have.&lt;/p&gt;

&lt;p&gt;Really designing a language for the future involves a great deal of humility. As with science, you have to assume that, over the long term, a great deal of what you think is true will turn out not to be quite the case. On the other hand, if you don&amp;rsquo;t make your best guess now, you&amp;rsquo;re not really doing science either. In retrospect, we know APL had too many strange symbols. But we wouldn&amp;rsquo;t be as sure about that if APL hadn&amp;rsquo;t tried it first.&lt;/p&gt;

&lt;h3 id=&#34;compile-time-run-time&#34;&gt;compile time / run time&lt;/h3&gt;

&lt;p&gt;Many dynamic languages can eval code at run time. Perl also takes it the other direction and runs a lot of code at compile time. This can get messy with operational definitions. You don&amp;rsquo;t want to be doing much file I/O in your &lt;code&gt;BEGIN&lt;/code&gt; blocks, for instance. But that leads us to another distinction:&lt;/p&gt;

&lt;h3 id=&#34;declarational-operational&#34;&gt;declarational / operational&lt;/h3&gt;

&lt;p&gt;Most scripting languages are way over there on the operational side. I thought Perl 5 had an oversimplified object system till I saw Lua. In Lua, an object is just a hash, and there&amp;rsquo;s a bit of syntactic sugar to call a hash element if it happens to contain code. Thats all there is. They don&amp;rsquo;t even have classes. Anything resembling inheritance has to be handled by explicit delegation. That&amp;rsquo;s a choice the designers of Lua made to keep the language very small and embeddable. For them, maybe it&amp;rsquo;s the right choice.&lt;/p&gt;

&lt;p&gt;Perl 5 has always been a bit more declarational than either Python or Ruby. I&amp;rsquo;ve always felt strongly that implicit scoping was just asking for trouble, and that scoped variable declarations should be very easy to recognize visually. Thats why we have &lt;code&gt;my&lt;/code&gt;. It&amp;rsquo;s short because I knew we&amp;rsquo;d use it frequently. Huffman coding. Keep common things short, but not too short. In this case, 0 is too short.&lt;/p&gt;

&lt;p&gt;Perl 6 has more different kinds of scopes, so we&amp;rsquo;ll have more declarators like &lt;code&gt;my&lt;/code&gt; and &lt;code&gt;our&lt;/code&gt;. But appearances can be deceiving. While the language looks more declarative on the surface, we make most of the declarations operationally hookable underneath to retain flexibility. When you declare the type of a variable, for instance, you&amp;rsquo;re really just doing a kind of tie, in Perl 5 terms. The main difference is that you&amp;rsquo;re tying the implementation to the variable at compile time rather than run time, which makes things more efficient, or at least potentially optimizable.&lt;/p&gt;

&lt;h3 id=&#34;immutable-classes-mutable-classes&#34;&gt;immutable classes / mutable classes&lt;/h3&gt;

&lt;p&gt;Classes in Java are closed, which is one of the reasons Java can run pretty fast. In contrast, Ruby&amp;rsquo;s classes are open, which means you can add new things to them at any time. Keeping that option open is perhaps one of the reasons Ruby runs so slow. But that flexibility is also why Ruby has Rails.&lt;/p&gt;

&lt;p&gt;Perl 6 will have an interesting mix of immutable generics and mutable classes here, and interesting policies on who is allowed to close classes when. Classes are never allowed to close or finalize themselves, for instance. Sorry, for some reason I keep talking about Perl 6. It could have something to do with the fact that we&amp;rsquo;ve had to think about all of these dimensions in designing Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;class-based-prototype-based&#34;&gt;class-based / prototype-based&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s another dimension that can open up to allow both approaches. Some of you may be familiar with classless languages like Self or JavaScript. Instead of classes, objects just clone from their ancestors or delegate to other objects. For many kinds of modeling, it&amp;rsquo;s actually closer to the way the real world works. Real organisms just copy their DNA when they reproduce. They don&amp;rsquo;t have some DNA of their own, and an &lt;code&gt;@ISA&lt;/code&gt; array telling you which parent objects contain the rest of their DNA.&lt;/p&gt;

&lt;p&gt;The meta-object protocol for Perl 6 defaults to class-based, but is flexible enough to set up prototype-based objects as well. Some of you have played around with &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; in Perl 5. Moose is essentially a prototype of Perl 6&amp;rsquo;s object model. On a semantic level, anyway. The syntax is a little different. Hopefully a little more natural in Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;passive-data-global-consistency-active-data-local-consistency&#34;&gt;passive data, global consistency / active data, local consistency&lt;/h3&gt;

&lt;p&gt;Your view of data and control will vary with how functional or object-oriented your brain is. People just think differently. Some people think mathematically, in terms of provable universal truths. Functional programmers don&amp;rsquo;t much care if they strew implicit computation state throughout the stack and heap, as long as everything &lt;em&gt;looks&lt;/em&gt; pure and free from side-effects.&lt;/p&gt;

&lt;p&gt;Other people think socially, in terms of cooperating entities that each have their own free will. And it&amp;rsquo;s pretty important to them that the state of the computation be stored with each individual object, not off in some heap of continuations somewhere.&lt;/p&gt;

&lt;p&gt;Of course, some of us can&amp;rsquo;t make up our minds whether we&amp;rsquo;d rather emulate the logical Sherlock Holmes or sociable Dr. Watson. Fortunately, scripting is not incompatible with either of these approaches, because both approaches can be made more approachable to normal folk.&lt;/p&gt;

&lt;h3 id=&#34;info-hiding-scoping-attachment&#34;&gt;info hiding / scoping / attachment&lt;/h3&gt;

&lt;p&gt;And finally, if you&amp;rsquo;re designing a computer language, there are a couple bazillion ways to encapsulate data. You have to decide which ones are important. What&amp;rsquo;s the best way to let the programmer achieve separation of concerns?&lt;/p&gt;

&lt;h3 id=&#34;object-class-aspect-closure-module-template-trait&#34;&gt;object / class / aspect / closure / module / template / trait&lt;/h3&gt;

&lt;p&gt;You can use any of these various traditional encapsulation mechanisms.&lt;/p&gt;

&lt;h3 id=&#34;transaction-reaction-dynamic-scope&#34;&gt;transaction / reaction / dynamic scope&lt;/h3&gt;

&lt;p&gt;Or you can isolate information to various time-based domains.&lt;/p&gt;

&lt;h3 id=&#34;process-thread-device-environment&#34;&gt;process / thread / device / environment&lt;/h3&gt;

&lt;p&gt;You can attach info to various OS concepts.&lt;/p&gt;

&lt;h3 id=&#34;screen-window-panel-menu-icon&#34;&gt;screen / window / panel / menu / icon&lt;/h3&gt;

&lt;p&gt;You can hide info various places in your GUI. Yeah, yeah, I know, everything is an object. But some objects are more equal than others.&lt;/p&gt;

&lt;h3 id=&#34;syntactic-scope-semantic-scope-pragmatic-scope&#34;&gt;syntactic scope / semantic scope / pragmatic scope&lt;/h3&gt;

&lt;p&gt;Information can attach to various abstractions of your program, including, bizarrely, lexical scopes. Though if you think about it hard enough, you realize lexical scopes are also a funny kind of dynamic scope, or recursion wouldn&amp;rsquo;t work right. A &lt;code&gt;state&lt;/code&gt; variable is actually more purely lexical than a &lt;code&gt;my&lt;/code&gt; variable, because it&amp;rsquo;s shared by all calls to that lexical scope. But even state variables get cloned with closures. Only global variables can be truly lexical, as long as you refer to them only in a given lexical scope. Go figure.&lt;/p&gt;

&lt;p&gt;So really, most of our scopes are semantic scopes that happen to be attached to a particular syntactic scope.&lt;/p&gt;

&lt;p&gt;You may be wondering what I mean by a &lt;em&gt;pragmatic&lt;/em&gt; scope. That&amp;rsquo;s the scope of what the user of the program is storing in their brain, or in some surrogate for their brain, such as a game cartridge. In a sense, most of the web pages out there on the Internet are part of the pragmatic scope. As is most of the data in databases. The hallmark of the pragmatic scope is that you really don&amp;rsquo;t know the lifetime of the container. It&amp;rsquo;s just out there somewhere, and will eventually be collected by that Great Garbage Collector that collects all information that anyone forgets to remember. The Google cache can only last so long. Eventually we will forget the meaning of every URL. But we must not forget the &lt;em&gt;principle&lt;/em&gt; of the URL. That leads us to our next degree of freedom.&lt;/p&gt;

&lt;h3 id=&#34;use-lingua-perligata&#34;&gt;use Lingua::Perligata;&lt;/h3&gt;

&lt;p&gt;If you allow a language to mutate its own grammar within a lexical scope, how do you keep track of that cleanly? Perl 5 discovered one really bad way to do it, namely source filters, but even so we ended up with Perl dialects such as Perligata and Klingon. What would it be like if we actually did it right?&lt;/p&gt;

&lt;p&gt;Doing it right involves treating the evolution of the language as a pragmatic scope, or as a set of pragmatic scopes. You have to be able to name your dialect, kind of like a URL, so there needs to be a universal root language, and ways of warping that universal root language into whatever dialect you like. This is actually near the heart of the vision for Perl 6. We don&amp;rsquo;t see Perl 6 as a single language, but as the root for a family of related languages. As a family, there are shared cultural values that can be passed back and forth among sibling languages as well as to the descendants.&lt;/p&gt;

&lt;p&gt;I hope you&amp;rsquo;re all scared stiff by all these degrees of freedom. I&amp;rsquo;m sure there are other dimensions that are even scarier.&lt;/p&gt;

&lt;p&gt;But&amp;hellip; I think its a manageable problem. I think its possible to still think of Perl 6 as a scripting language, with easy onramps.&lt;/p&gt;

&lt;p&gt;And the reason I think its manageable is because, for each of these dimensions, it&amp;rsquo;s not just a binary decision, but a knob that can be positioned at design time, compile time, or even run time. For a given dimension X, different scripting languages make different choices, set the knob at different locations.&lt;/p&gt;

&lt;h3 id=&#34;you-can-t-even-think-about-x&#34;&gt;You can&amp;rsquo;t even think about X!&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s only one way to do X!
There&amp;rsquo;s more than one way to do X!
There are too many ways to do X!&lt;/p&gt;

&lt;p&gt;You may recognize some slogans in here.&lt;/p&gt;

&lt;h3 id=&#34;curling-up&#34;&gt;Curling Up&lt;/h3&gt;

&lt;p&gt;So I&amp;rsquo;m not suggesting that all scripting languages have to take all these dimensions into account, even if Perl 6 tries to. The scripting paradigm is not any one of these dimensions. According to various theories the universe may be laid out in ten or twenty dimensions, but generally we get by with only about three and a half of those dimensions. The rest are said to be curled up. Maybe we live in a scripting universe.&lt;/p&gt;

&lt;p&gt;Most of the scripting languages we call Perl 6 will have most of these dimensions curled up most of the time. But unlike the real universe, where it takes huge machines to uncurl these dimensions, we&amp;rsquo;ll make the dimensions uncurl just by keeping our declarations straight. Well, we&amp;rsquo;ll try. And where that fails, we&amp;rsquo;ll rely on the culture to keep things straight.&lt;/p&gt;

&lt;p&gt;For example, that&amp;rsquo;s exactly what happened already with Perl 5. We have the declarations, &lt;code&gt;use strict; use warnings;&lt;/code&gt;. But it&amp;rsquo;s the culture that decided to enforce the use of them. So much so that we&amp;rsquo;ve decided that they should be the default for most of Perl 6. It was one of those decisions by the hive. In this case the swarm turned out to be smarter than the language designer. And that&amp;rsquo;s as it should be.&lt;/p&gt;

&lt;h3 id=&#34;the-future&#34;&gt;The Future&lt;/h3&gt;

&lt;p&gt;Well, so what&amp;rsquo;s the future of scripting?&lt;/p&gt;

&lt;p&gt;In my completely unbiased opinion, that would be Perl 6. &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Seriously though, it&amp;rsquo;s always safe to predict that the ecological landscape will end up with many small languages and a few dominant ones. Some languages like AppleScript have particular ecological niches and are unlikely to grow out of them. Other languages get used outside their original niche. There will always be the generalists, like crows and mockingbirds, and the specialists, like penguins and dodos. (Well, maybe not always the dodos&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Among the generalists, the conventional wisdom is that the worse-is-better approach is more adaptive. Personally, I get a little tired of the argument: My worse-is-better is better than your worse-is-better because I&amp;rsquo;m better at being worser! Is it really true that the worse-is-better approach always wins? With Perl 6 we&amp;rsquo;re trying to sneak one better-is-better cycle in there and hope to come out ahead before reverting to the tried and true worse-is-better approach. Whether that works, only time will tell.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Everyday Perl 6</title>
      <link>http://localhost:1313/pub/2007/05/10/everyday-perl-6.html/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/05/10/everyday-perl-6.html/</guid>
      <description>

&lt;p&gt;Perl 6 will soon be here. How will programming in Perl 6 be different from programming in Perl 5 for your average Perl programmer? The answer is: very different yet very much the same. A Perl 6 program viewed at arm&amp;rsquo;s length will look much like a Perl 5 program viewed at arm&amp;rsquo;s length. Programming in Perl 6 will still feel like programming in Perl. What will change however, is that Perl 6 will enable programmers to be more expressive by giving them more tools to work with (making easy things easy) and allowing them to be more precise in their expressions.&lt;/p&gt;

&lt;p&gt;While many of the changes in Perl 6 make it easier for people new to programming or coming from other programming languages to understand the language, none of the changes were made solely on those grounds. If your favorite part of Perl 5 syntax is that it uses an arrow for method dispatch on objects, don&amp;rsquo;t be dismayed that Perl 6 uses a dot instead. The designers carefully considered each syntactic change to ensure that Perl 6 still has the Perlish nature &lt;em&gt;and&lt;/em&gt; that the change was an overall improvement. Some Perl programmers delight in the syntactic differences of the language, but some of those differences aren&amp;rsquo;t that important when compared to the big picture of Perl&amp;rsquo;s culture (which includes the language, CPAN, and the community of programmers).&lt;/p&gt;

&lt;h3 id=&#34;sigil-invariance&#34;&gt;Sigil Invariance&lt;/h3&gt;

&lt;p&gt;One of the fundamental changes is that whenever you refer to individual elements of an aggregate (an array or hash), rather than changing the sigil to denote the type of thing you get back, the sigil remains the same.&lt;/p&gt;

&lt;p&gt;For example, in both Perl 5 and Perl 6 you can create and initialize aggregates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @array = (1,3,5,12,37,42);
    my %hash  = ( alpha =&amp;gt; 4, beta =&amp;gt; 6 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How you access the individual elements of those aggregates looks just a little different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                            # Perl 5
    my $third = @array[2];              my $third = $array[2];
    my $beta  = %hash{&#39;beta&#39;};          my $beta = $hash{&#39;beta&#39;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Long-time Perl 5 programmers might wonder how slices work in Perl 6. The answer is: the same way as in Perl 5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @odds = @array[1,3,5];           # array slice
    my @bets = %hash{&#39;alpha&#39;,&#39;beta&#39;};   # hash slice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference is that in Perl 5 the hash slice would have started with a &lt;code&gt;@&lt;/code&gt; sigil.&lt;/p&gt;

&lt;h3 id=&#34;new-brackets&#34;&gt;New Brackets&lt;/h3&gt;

&lt;p&gt;In these hash examples, it&amp;rsquo;s awkward quoting the indexes into the hash. Perl 5 allows a syntactic shortcut where &lt;code&gt;$hash{word}&lt;/code&gt; works as if you had written &lt;code&gt;$hash{&#39;word&#39;}&lt;/code&gt;. A problem with that is that it can cause confusion when your &lt;code&gt;word&lt;/code&gt; happens to be the name of a subroutine and you really want Perl to execute that subroutine.&lt;/p&gt;

&lt;p&gt;In Perl 6, a syntactic shortcut for accessing hash elements takes advantage of a name change of the &amp;ldquo;quote word&amp;rdquo; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    my @array = &amp;lt;foo bar baz&amp;gt;;      my @array = qw(foo bar baz);
    my %hash  = &amp;lt;a b c d e f g h&amp;gt;;  my %hash = qw(a b c d e f g h);
    my $queue = %hash&amp;lt;q&amp;gt;;           my $queue = $hash{&#39;q&#39;};
    my @vows  = %hash&amp;lt;c a g e&amp;gt;;     my @vows = @hash{qw(c a g e)};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, just as double-quoted strings interpolate while single-quoted strings do not, double-bracketed &amp;ldquo;quote word&amp;rdquo; constructs also interpolate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $foo  = &amp;quot;This is&amp;quot;;
    my $bar  = &amp;quot;the end&amp;quot;;
    my @blah = &amp;lt;&amp;lt; $foo $bar &amp;gt;&amp;gt;;     # (&#39;This&#39;,&#39;is&#39;,&#39;the&#39;,&#39;end&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the interpolation happens &lt;em&gt;before&lt;/em&gt; the &amp;ldquo;quote word&amp;rdquo; aspect of this operator.&lt;/p&gt;

&lt;p&gt;Speaking of interpolation, interpolating into double-quoted strings has changed slightly. Now to interpolate an array into a string, you must provide a set of empty brackets at the end of the array name. This has the side benefit of eliminating the ambiguity of whether you meant interpolation if you happen to include (for instance) an email address in your double-quoted string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @items = &amp;lt;names addresses email&amp;gt;;
    say &amp;quot;Send @items[] to test@foo.com&amp;quot;;
    # Send names addresses email to test@foo.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also interpolate more things into your double-quoted strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    say &amp;quot;Send me $person.name()&amp;quot;;         # results of a method call
    say &amp;quot;2 + 2 = { 2+2 }&amp;quot;;                # any bit of perl code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That second one means that you&amp;rsquo;ll have to be careful about inserting curly braces in your double-quoted strings, but that&amp;rsquo;s a small price to pay for the ability to interpolate the results of arbitrary Perl code.&lt;/p&gt;

&lt;p&gt;By the way, get used to the &lt;code&gt;say&lt;/code&gt; subroutine. It&amp;rsquo;s the same as &lt;code&gt;print&lt;/code&gt;, but it appends a newline to the end. Quite useful, that.&lt;/p&gt;

&lt;h3 id=&#34;fewer-parentheses&#34;&gt;Fewer Parentheses&lt;/h3&gt;

&lt;p&gt;The usual places in Perl 5 that require parentheses no longer do in Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
        if $cond  { ... }                if ($cond)  { ... }
    unless $cond  { ... }            unless ($cond)  { ... }
     while $cond  { ... }             while ($cond)  { ... }
       for @array { ... }               for (@array) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 6, parentheses are now only necessary for grouping.&lt;/p&gt;

&lt;h3 id=&#34;idioms&#34;&gt;Idioms&lt;/h3&gt;

&lt;p&gt;Another big change is that some of the standard Perl 5 idioms look different in Perl 6. In particular, the standard idiom for reading lines from a file involves a &lt;code&gt;for&lt;/code&gt; loop rather than a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    for =$fh { ... }                while (&amp;lt;$fh&amp;gt;) { ... }
    for =&amp;lt;&amp;gt;  { ... }                while (&amp;lt;&amp;gt;)    { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Perl 5 programmers are probably thinking, &amp;ldquo;but doesn&amp;rsquo;t that put the part that reads the filehandle in list context, causing the entire file to be slurped into memory?&amp;rdquo; The answer is both yes and no. Yes, it&amp;rsquo;s in list context, but in Perl 6, by default all lists are lazy so they aren&amp;rsquo;t read until necessary.&lt;/p&gt;

&lt;p&gt;In this example, unary &lt;code&gt;=&lt;/code&gt; is the operator that causes an iterator to, well&amp;hellip;iterate. If &lt;code&gt;$fh&lt;/code&gt; is a filehandle, &lt;code&gt;=$fh&lt;/code&gt; iterates over that file by reading one line at a time. In scalar context &lt;code&gt;=$fh&lt;/code&gt; will read one line, and in list context it will read one line at a time as many times as necessary to get to the end of the file. Iterating over the empty string (remember the new role of the angle brackets) is equivalent to Perl 5&amp;rsquo;s reading files from the command line.&lt;/p&gt;

&lt;h3 id=&#34;operator-rename&#34;&gt;Operator Rename&lt;/h3&gt;

&lt;p&gt;Several common operators have new symbols in Perl 6. These symbol changes make the overall language more regular so that it&amp;rsquo;s easier to parse, but most importantly so that it&amp;rsquo;s easier for humans to remember:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    $object.method(@args);          $obj-&amp;gt;method(@args);
    $x = $cond ?? $true !! $false;  $x = $cond ? $true : $false;
    $s = &amp;quot;con&amp;quot; ~ &amp;quot;cat&amp;quot; ~ &amp;quot;enate&amp;quot;;   $s = &amp;quot;con&amp;quot; . &amp;quot;cat&amp;quot; . &amp;quot;enate&amp;quot;;
    $str ~~ /$pattern/;             $str =~ /$pattern/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any time you see a &lt;code&gt;~&lt;/code&gt; in Perl 6, it has something to do with strings. A unary &lt;code&gt;~&lt;/code&gt; puts its rvalue in a string context, binary &lt;code&gt;~&lt;/code&gt; is string concatenation, and a doubled &lt;code&gt;~&lt;/code&gt; lets you match a regular expression against a string (actually, it does more than that, but from a perspective of not knowing the language at all or from knowing Perl 5, it&amp;rsquo;s enough to know initially that &lt;code&gt;~~&lt;/code&gt; will pattern match on strings).&lt;/p&gt;

&lt;h3 id=&#34;new-perl-6-syntax&#34;&gt;New Perl 6 Syntax&lt;/h3&gt;

&lt;p&gt;Perl 6 also has some brand-new syntax.&lt;/p&gt;

&lt;h4 id=&#34;long-comments&#34;&gt;Long Comments&lt;/h4&gt;

&lt;p&gt;Many people always gripe about the fact that Perl 5 lacks a lightweight multi-line comment mechanism (POD is apparently too verbose). Perl 6 solves this one quite nicely. If a bracketing character immediately follows the comment character (&lt;code&gt;#&lt;/code&gt;), the comment extends to the corresponding closing bracket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #[  This is a
        multi-line comment
        that ends here ----&amp;gt;  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S02.html#Whitespace_and_Comments&#34;&gt;Whitespace and Comments in Synopsis 02&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h4 id=&#34;switch-statement&#34;&gt;switch Statement&lt;/h4&gt;

&lt;p&gt;For those of you who have forever wished for a switch statement in Perl, Perl 6 will have it (only by another name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    given $thing {
        when 3      { say &amp;quot;three&amp;quot;; }
        when 5      { say &amp;quot;five&amp;quot;;  }
        when 9      { say &amp;quot;nine&amp;quot;;  }
        when &amp;quot;a&amp;quot;    { say &amp;quot;what?&amp;quot;; }
        default     { say &amp;quot;none&amp;quot;;  }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This construct is much more powerful than I&amp;rsquo;ve outlined here, however, as it takes advantage of the smart match operator to do the right thing when the given &lt;code&gt;$thing&lt;/code&gt; (or the thing it&amp;rsquo;s being &amp;ldquo;compared&amp;rdquo; against in the &lt;code&gt;when&lt;/code&gt; clause) is an object or an array or hash, or code, etc.&lt;/p&gt;

&lt;h4 id=&#34;new-loops&#34;&gt;New Loops&lt;/h4&gt;

&lt;p&gt;The C-style &lt;code&gt;for&lt;/code&gt; loop operator has become &lt;code&gt;loop&lt;/code&gt;. But you can omit the parenthetical portion to write an infinite loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    loop { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another new looping construct is the &lt;code&gt;repeat&lt;/code&gt; loop, which occupies the same niche as Perl 5&amp;rsquo;s &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt; pseudoloop. The big difference is that unlike &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt; is a real loop and as such, you are free to use &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt; and it does the right thing.&lt;/p&gt;

&lt;p&gt;For more information see &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S04.html&#34;&gt;Synopsis 04&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;parameterized-blocks&#34;&gt;Parameterized Blocks&lt;/h4&gt;

&lt;p&gt;Essentially, every block in a Perl 6 program is a subroutine. Some blocks, like those used in an &lt;code&gt;if&lt;/code&gt; statement, have no parameters; but others do, such as the body of a &lt;code&gt;for&lt;/code&gt; loop. But any block may be parameterized. This is especially useful for doing things that aren&amp;rsquo;t easy in Perl 5 but should be &amp;ndash; like examining values three at a time with &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @trimults = map -&amp;gt; $a,$b,$c { $a * $b * $c }, @numbers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example where Perl 6 co-opts the arrow notation for a higher purpose. The arrow now introduces parameters to a block. You are most likely to see this in &lt;code&gt;for&lt;/code&gt; loops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    for @array -&amp;gt; $a     { ... }    for my $a (@array) { ... }
    for @array -&amp;gt; $a, $b { ... }    # too complex :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second &lt;code&gt;for&lt;/code&gt; loop will take items from &lt;code&gt;@array&lt;/code&gt; two at a time and lexically assign them to &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; for the duration of the block. The same behavior is not so easy to accomplish in Perl 5.&lt;/p&gt;

&lt;p&gt;Another way to write the &lt;code&gt;@trimults&lt;/code&gt; example, but slightly less verbose, is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @trimults = map { $^a * $^b * $^c }, @numbers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables with a caret (&lt;code&gt;^&lt;/code&gt;) immediately after the sigil are implicit parameters to the block, and Perl 6 assigns them in Unicode-order. That is, &lt;code&gt;$^a&lt;/code&gt; is the first parameter, &lt;code&gt;$^b&lt;/code&gt; the second, and &lt;code&gt;$^c&lt;/code&gt; the third.&lt;/p&gt;

&lt;p&gt;There is yet a third way to write a parameterized block that&amp;rsquo;s more verbose but more also powerful. It allows the programmer to take full advantage of subroutine signatures. Yes, TMTOWTDI, is still alive and well :-)&lt;/p&gt;

&lt;h4 id=&#34;subroutine-signatures&#34;&gt;Subroutine Signatures&lt;/h4&gt;

&lt;p&gt;You can still write subroutines the way you always have in Perl 5, but Perl 6 allows you to specify a &amp;ldquo;signature&amp;rdquo; that describes how many parameters to pass to the subroutine, which parameters are optional, which parameters are positional, which are named, what the default values are for unpassed parameters, which parameters copy the value that is passed, which parameters alias the variable, etc.&lt;/p&gt;

&lt;p&gt;For more information on subroutines in Perl 6, see &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S06.html&#34;&gt;Synopsis 06&lt;/a&gt; and Phil Crow&amp;rsquo;s recent article &lt;a href=&#34;http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html&#34;&gt;The Beauty of Perl 6 Parameter Passing&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;variable-typing&#34;&gt;Variable Typing&lt;/h4&gt;

&lt;p&gt;In the interest of allowing programmers to be precise in their expressions, Perl 6 allows for optional variable typing. That is, the programmer can not only say, &amp;ldquo;this variable is a scalar&amp;rdquo; but can also say &amp;ldquo;this scalar conforms to the expectation of items in this particular class.&amp;rdquo; In other words, you can say things such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my Dog  $spot;
    my Fish $wanda;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and it means something useful to Perl as well as the programmer. The variable &lt;code&gt;$spot&lt;/code&gt; is only usable in a place where Perl expects a &lt;code&gt;Dog&lt;/code&gt;, and the variable &lt;code&gt;$wanda&lt;/code&gt; only works in places where Perl expects a &lt;code&gt;Fish&lt;/code&gt;. However, the Perl 5-ish code will work perfectly fine, too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my Dog  $spot;
    my Fish $wanda;
    my $x;
    $x = $spot;
    $x = $wanda;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;because &lt;code&gt;$x&lt;/code&gt; is sufficiently &amp;ldquo;untyped&amp;rdquo; that it can accept a &lt;code&gt;Dog&lt;/code&gt; or a &lt;code&gt;Fish&lt;/code&gt;, or any scalar thing.&lt;/p&gt;

&lt;h4 id=&#34;multiple-dispatch&#34;&gt;Multiple Dispatch&lt;/h4&gt;

&lt;p&gt;Variable typing coupled with subroutine signatures gives the benefit of multiple dispatch. What that means is that you can declare two subroutines with the same name but different signatures, and Perl will select which subroutine to invoke at runtime based on the parameters sent to the subroutine. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    multi sub feed(Dog  $spot)  { say &amp;quot;dog food!&amp;quot;;  }
    multi sub feed(Fish $wanda) { say &amp;quot;fish food!&amp;quot;;  }

    my Fish $nemo;
    my Dog  $rover;

    feed($nemo);                 # fish food!
    feed($rover);                # dog food!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;multi&lt;/code&gt; keyword tells Perl that you intend to declare multiple subroutines with the same name, and it should use the name and the parameters and whatever other distinguishing characteristics it can to decide which one to actually invoke.&lt;/p&gt;

&lt;h3 id=&#34;the-end&#34;&gt;The End&lt;/h3&gt;

&lt;p&gt;I hope this introduction gives you a feel for some of the changes in Perl 6 and shows how these changes are good and useful.&lt;/p&gt;

&lt;p&gt;A prototype implementation of Perl 6 called &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;&lt;em&gt;pugs&lt;/em&gt;&lt;/a&gt; should be able to execute all of the examples I&amp;rsquo;ve given in this article. If not, get on the freenode IRC network, join #perl6, ask for a commit bit, and submit a test to the Pugs repository, and one of the pugs Developers will probably update Pugs to run it soon enough :-)&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Special thanks to all of the people on IRC (#perl and #perl6) who looked over this article and gave their input and commentary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Beauty of Perl 6 Parameter Passing</title>
      <link>http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html/</link>
      <pubDate>Thu, 01 Mar 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html/</guid>
      <description>

&lt;p&gt;Perl 6 is not finished, but you can already play with it. I hope this article will encourage you to try it. Begin by installing &lt;a href=&#34;https://metacpan.org/pod/Pugs&#34;&gt;Pugs&lt;/a&gt;, a Perl 6 compiler implemented in Haskell. Note that you will also need Haskell (see directions in the Pugs &lt;em&gt;INSTALL&lt;/em&gt; file for how to get it).&lt;/p&gt;

&lt;p&gt;Of course, Pugs is not finished. It couldn&amp;rsquo;t be. The Perl 6 design is still in progress. However, Pugs still has many key features that are going to turn our favorite language into something even greater.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-script&#34;&gt;A Simple Script&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m about to take a big risk. I&amp;rsquo;m going to show you a script that performs Newton&amp;rsquo;s method. Please don&amp;rsquo;t give up before you get started.&lt;/p&gt;

&lt;p&gt;Sir Isaac Newton was a noted computer scientist and sometime astronomer, physicist, and mathematician, as the communications of the ACM once described him. He and others developed a fairly simple way of finding square roots. It goes like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs
    use v6;

    my Num  $target = 9;
    my Num  $guess  = $target;

    while (abs( $guess**2 - $target ) &amp;gt; 0.005) {
        $guess += ( $target - $guess**2 ) / ( 2 * $guess );

        say $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version always finds the square root of 9, which conveniently is 3. This aids testing because I don&amp;rsquo;t have to remember a more interesting square root, for example, the square root of 2. When I run this, the output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    5
    3.4
    3.0235294117647058823529411764705882352941
    3.0000915541313801785305561913481345845731
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last number is the square root of 9 accurate to three decimal places.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s going on.&lt;/p&gt;

&lt;p&gt;Once Pugs is installed, you can use it in a shebang line (on Unix or Cygwin, at least). Otherwise, invoke the script through &lt;code&gt;pugs&lt;/code&gt; as you would for &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pugs newton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To let Perl 6 know that I want Perl 6 and not Perl 5, I type &lt;code&gt;use v6;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Perl 6, the basic primitive types are still scalar, array, and hash. There are also more types of scalars. In this case, I&amp;rsquo;m using the floating-point type Num for both the target (the number whose square root I want) and the guess (which I hope will improve until it is the square root of the target). I can use this syntax in Perl 5. In Perl 6 it will be the norm (or so I hope). I&amp;rsquo;ve used &lt;code&gt;my&lt;/code&gt; to limit the scope of the variables just as in Perl 5.&lt;/p&gt;

&lt;p&gt;Newton&amp;rsquo;s method always needs a guess. Without explaining, I&amp;rsquo;ll say that for square roots the guess makes little difference. To make it easy, I guessed the number itself. Obviously, that&amp;rsquo;s not a good guess, but it works eventually.&lt;/p&gt;

&lt;p&gt;The while loop goes until the square of the guess is close to the target. How close is up to me. I chose .005 to give about three places of accuracy.&lt;/p&gt;

&lt;p&gt;Inside the loop, the code improves the guess at each step using Newton&amp;rsquo;s formula. I won&amp;rsquo;t explain it at all. (I&amp;rsquo;ve resisted the strong temptation from my math-teacher days to explain a lot more. Be glad I resisted. But if you are curious, consult a calculus textbook. Or better yet, send me email. I&amp;rsquo;d love to say more!) I&amp;rsquo;ll present a more general form of the method soon, which may jog the memories of the calculus lovers in the audience, or not.&lt;/p&gt;

&lt;p&gt;Finally, at the end of each iteration, I used &lt;code&gt;say&lt;/code&gt; to print the answer. This beats writing: &lt;code&gt;print &amp;quot;$guess\n&amp;quot;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Except for using &lt;code&gt;say&lt;/code&gt; and declaring the type of the numbers to be &lt;code&gt;Num&lt;/code&gt;, there&amp;rsquo;s not much to separate the above script from one I might have written in Perl 5. That&amp;rsquo;s okay. It&amp;rsquo;s about to get more Perl 6ish.&lt;/p&gt;

&lt;h3 id=&#34;an-exporting-module&#34;&gt;An Exporting Module&lt;/h3&gt;

&lt;p&gt;While it&amp;rsquo;s fine to have a script that finds square roots, it would be better to generalize this in a couple of ways. One good change is to make it a module so that others can share it. Another is to turn loose the power of Newton and look for other kinds of roots, like cube roots and other even more exotic ones.&lt;/p&gt;

&lt;p&gt;First, I&amp;rsquo;ll turn the script above into a module that exports a &lt;code&gt;newton&lt;/code&gt; sub. Then, I&amp;rsquo;ll tackle generalizing the method.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m finished, I want to be able to use the module like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs

    use Newton;

    my $answer = newton(4);

    say $answer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;say&lt;/code&gt; is so helpful, I could combine the last two statements:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        say &amp;quot;{ newton(4) }&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s right, strings will run code if you put it in braces.&lt;/p&gt;

&lt;p&gt;The module, &lt;em&gt;Newton.pm&lt;/em&gt;, looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;
    use v6;

    sub newton(Num $target) is export {
        my Num  $guess  = $target;

        while (abs( $guess**2 - $target ) &amp;gt; 0.005) {
            $guess += ( $target - $guess**2 ) / ( 2 * $guess );
        }

        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here begins the familiar package declaration borrowed from Perl 5. (In Perl 6 itself, &lt;code&gt;package&lt;/code&gt; identifies Perl 5 source code. The &lt;a href=&#34;https://metacpan.org/pod/v6&#34;&gt;v6&lt;/a&gt; module lets you run some Perl 6 code in Perl 5 programs.) Immediately following is &lt;code&gt;use v6;&lt;/code&gt;, just as in the original script.&lt;/p&gt;

&lt;p&gt;Declaring subs in Perl 6 doesn&amp;rsquo;t have to be any different than in Perl 5, but it should be. This one says it takes a numeric variable called &lt;code&gt;target&lt;/code&gt;. Such genuine prototypes allow for Perl 6 to report compilation errors when you call a sub with the wrong arguments. That single step will move Perl 6 onto the list of possible languages for a lot of large-scale application development shops.&lt;/p&gt;

&lt;p&gt;At the end of the declaration, just before the opening brace for the body, I included &lt;code&gt;is export&lt;/code&gt;. This puts &lt;code&gt;newton&lt;/code&gt; into the namespace of whoever uses the module (at least, if they use the module in the normal way; they could explicitly decline to take imports). There is no need to explicitly use &lt;code&gt;Exporter&lt;/code&gt; and set up &lt;code&gt;@EXPORT&lt;/code&gt; or its friends.&lt;/p&gt;

&lt;p&gt;The rest of the code is the same, except that it returns the answer and no longer proclaims its guess at each iteration.&lt;/p&gt;

&lt;h3 id=&#34;assigning-defaults&#34;&gt;Assigning Defaults&lt;/h3&gt;

&lt;p&gt;Adding genuine, compiler-enforced parameters to sub declarations is a giant leap forward for Perl. For many people, that particular looseness in Perl 5 keeps it out of any discussions about what language to use for a project. I experienced this unfortunate reality firsthand in my last job. There&amp;rsquo;s a lot more to declarations in Perl 6, though.&lt;/p&gt;

&lt;p&gt;Suppose I want to give the caller control over the accuracy of the method, yet I want to provide a sensible default if that caller doesn&amp;rsquo;t want to think of a good one. I might write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;
    use v6;

    sub newton(
        Num  $target,
        Num  :$epsilon = 0.005,  # note the colon
        Bool :$verbose = 0,
    ) is export {
        my Num  $guess  = $target;

        while (abs( $guess**2 - $target ) &amp;gt; $epsilon ) {
            $guess += ( $target - $guess**2 ) / ( 2 * $guess );
                    say $guess if $verbose;
        }

        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I&amp;rsquo;ve introduced two new optional parameters: &lt;code&gt;$verbose&lt;/code&gt;, for whether to print at each step (the default is to keep quiet) and &lt;code&gt;$epsilon&lt;/code&gt;, the Greek letter we math types often use for tolerances.&lt;/p&gt;

&lt;p&gt;While the caller might use this exactly as before, she now has options. She might say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $answer = newton(165, verbose =&amp;gt; 1, epsilon =&amp;gt; .00005);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives extra accuracy and prints the values at each iteration (which prints the value of the last iteration twice: once in the loop and again in the driving script). Note that the named parameters may appear in any order.&lt;/p&gt;

&lt;h3 id=&#34;making-assumptions&#34;&gt;Making Assumptions&lt;/h3&gt;

&lt;p&gt;Finally, Newton&amp;rsquo;s method can find roots for more things than just squares. To make this general requires a bit more work and some extra math (which I&amp;rsquo;ll again brush under the rug).&lt;/p&gt;

&lt;p&gt;It is easy enough to supply the function for which you want roots. For example, the squaring function could be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub f(Num $x) { $x**2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the update line of the loop, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $guess += ( $target - f($guess) ) / ( 2 * $guess );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changing &lt;code&gt;f&lt;/code&gt; would change the roots you seek.&lt;/p&gt;

&lt;p&gt;The problem is on the far side of the division symbol. &lt;code&gt;2 * $guess&lt;/code&gt; depends on the function (it&amp;rsquo;s the first derivative, for those who care). I could require the caller to provide this, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub fprime(Num $x) { 2 * $x }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the update would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $guess += ( $target - f($guess) ) / fprime($guess);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two problems with this approach. First, you need a way for the caller to pass those functions into the sub. That&amp;rsquo;s actually pretty easy; just add parameters of type Code to the list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub newton(
        Num  $target,
        Code $f,
        Code $fprime,
        Num  :$epsilon = 0.005,
        Bool :$verbose = 0,
    ) is export {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second problem is that the caller may not know how to calculate &lt;code&gt;$fprime&lt;/code&gt;. Perhaps I should make calculus a prerequisite for using the module, but that just might scare away a few potential users. I want to provide a default, but the default depends on what the function is. If I knew what &lt;code&gt;$f&lt;/code&gt; was, I could estimate &lt;code&gt;$fprime&lt;/code&gt; for users.&lt;/p&gt;

&lt;p&gt;Perl 6 provides precisely this ability. Here&amp;rsquo;s the final module, a bit at a time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package Newton;

    use v6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s nothing new.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub approxfprime(Code $f, Num $x) {
        my Num $delta = 0.1;
        return ($f($x + $delta) - $f($x - $delta))/(2 * $delta);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those who care (surely at least one person does), this is a second-order centered difference. For those who don&amp;rsquo;t, its an approximation suitable for use in the &lt;code&gt;newton&lt;/code&gt; sub. It takes a function and a number and returns an estimate of the value needed for division.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub newton(
        Num  $target,
        Code $f,
        Code :$fprime         = &amp;amp;approxfprime.assuming( f =&amp;gt; $f ),
        Num  :$epsilon        = 0.0005,
        Bool :$verbose        = 0,
    ) returns Num is export {
        my Num $guess  = $target / 2;

        while (abs($f($guess) - $target) &amp;gt; $epsilon) {

            $guess += ($target - $f($guess)) / $fprime($guess);

            say $guess if $verbose;
        }
        return $guess;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A script using this program could be as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/pugs

    use Newton;

    sub f(Num $x) { return $x**3 }

    say &amp;quot;{ newton(8, \&amp;amp;f, verbose =&amp;gt; 1, epsilon =&amp;gt; .00005) }&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the caller must supply the function &lt;code&gt;f&lt;/code&gt;. The one in the example is for cube roots.&lt;/p&gt;

&lt;p&gt;If the caller provides the derivative as &lt;code&gt;fprime&lt;/code&gt;, I use it. Otherwise, as in the example, I use &lt;code&gt;approxfprime&lt;/code&gt;. Whereas a caller-supplied &lt;code&gt;fprime&lt;/code&gt; would take one number and return another, &lt;code&gt;approxfprime&lt;/code&gt; needs a number and a function. The function needed is the one the caller passed to &lt;code&gt;newton&lt;/code&gt;. How do you pass it on? Currying—that is, supplying one or more of the parameters of a function once, then using the simplified version after that.&lt;/p&gt;

&lt;p&gt;In Perl 6, you can obtain a reference to a sub by placing the sub sigil &lt;code&gt;&amp;amp;&lt;/code&gt; in front of the function&amp;rsquo;s name (providing it is in scope). To curry, add &lt;code&gt;.assuming&lt;/code&gt; to the end of that and supply values for one or more arguments in parentheses. All of this is harder to talk about than to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Code :$fprime         = &amp;amp;approxfprime.assuming( f =&amp;gt; $f ),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code means that the caller might supply a value. If this is the case, use it. Otherwise, use &lt;code&gt;approxfprime&lt;/code&gt; with the caller&amp;rsquo;s function in place of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Perl 6 calling conventions are extremely well designed. Not only do they allow compile-time parameter checking, they also allow named parameters with or without complex defaults, even including curried default functions. This is going to be very powerful. In fact, with Pugs, it already is.&lt;/p&gt;

&lt;p&gt;There is a slightly more detailed version of the example from this article in the &lt;em&gt;examples/algorithms/&lt;/em&gt; directory of the Pugs distribution. It&amp;rsquo;s called &lt;em&gt;Newton.pm&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;As much as it pains me to say it, if you need heavy duty numerics, don&amp;rsquo;t code in pure Perl. Rather, use FORTRAN, C, or Perl with PDL. And be careful. Numerics is full of unexpected gotchas, which lead to poor performance or outright incorrect results. Unfortunately, Newton&amp;rsquo;s method, in the general case, is notoriously risky. When in doubt about numerics, do as I do and consult a professional in the field.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The State of the Onion 10</title>
      <link>http://localhost:1313/pub/2006/09/21/onion.html/</link>
      <pubDate>Thu, 21 Sep 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/09/21/onion.html/</guid>
      <description>&lt;p&gt;Welcome to the tenth State of the Perl Onion. For those of you who are unfamiliar with my methods, this is the annual speech wherein I ramble on about various things that are only marginally related to the state of Perl. I&amp;rsquo;ve gotten pretty good at rambling in my old age.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Scientific American&lt;/em&gt; that just came out, there&amp;rsquo;s an article on chess experts, written by an expert, on what makes experts so expert. This expert claims that you can become an expert in just about anything if you study it persistently for ten years or so. So, since this is my tenth State of the Onion, maybe I&amp;rsquo;m about to become an expert in giving strange talks. One can only hope (not).&lt;/p&gt;

&lt;p&gt;Speaking of chess, how many of you recognize this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x00.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Does this help?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x01.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is, of course, the mnemonic for the old Linnean taxonomy of biological classification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x02.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Those of you who understand computers better than critters can think of these as nested namespaces.&lt;/p&gt;

&lt;p&gt;This is all about describing nature, so naturally, different languages care about different levels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x03.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, PHP isn&amp;rsquo;t much into taxonomy, so everything in PHP is just its own species in a flat namespace. Congratulations, this is your new species name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x04.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby, of course, is interested primarily in Classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x05.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Python, as the &amp;ldquo;anti-Perl,&amp;rdquo; is heavily invested in maintaining Order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x06.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you &lt;em&gt;might&lt;/em&gt; be smart enough to program in Haskell if you&amp;rsquo;ve received a MacArthur Genus award.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x07.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; used to be I couldn&amp;rsquo;t spell &amp;ldquo;genus,&amp;rdquo; and now I are one &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x08.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Moving right along toward the other end of the spectrum, we have JavaScript that kind of believes in Phyla without believing in Classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x09.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And at the top of the heap, playing king of the mountain, we have languages like C# and Java. The kingdom of Java only has one species.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x10.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The kingdom of C# has many species, but they all look like C#.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x11.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that leaves us with families.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x12.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I expect I have a pretty good excuse for thinking a lot about families lately, and here is my excuse:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x13.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is Julian, my grandson. Julian, meet the open source hackers. Open source hackers, meet Julian.&lt;/p&gt;

&lt;p&gt;Many of you will remember my daughter Heidi from previous OSCONs. A couple years ago she married Andy, and Julian is the result. I think he&amp;rsquo;s a keeper. Julian, I mean.&lt;/p&gt;

&lt;p&gt;Well, and Andy too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x14.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Andy obviously has his priorities straight. I would certainly recommend him as a son-in-law to anyone. (Wait, that doesn&amp;rsquo;t quite work &amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x15.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are many definitions of family, of course. Here&amp;rsquo;s a mommy and a daddy truck. They live on a truck farm, and raise little trucks.&lt;/p&gt;

&lt;p&gt;Out in California, the word &amp;ldquo;family&amp;rdquo; keeps leaping out at me from various signs. People use the word &amp;ldquo;family&amp;rdquo; in some really weird ways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x16.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There was a Family Fun Center, with a miniature golf course. I believe that sign. At least for the golf. As a parent, I&amp;rsquo;m not sure the game arcade is for the whole family. I&amp;rsquo;m an expert in staying out of loud places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x17.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But the sign that said &amp;ldquo;Farmers Feed America&amp;ndash;Family Water Alliance&amp;rdquo; &amp;hellip; I suspect the word &amp;ldquo;family&amp;rdquo; is in there more for its PR value than anything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x18.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And, of course, &amp;ldquo;family planning&amp;rdquo; is for when you plan &lt;em&gt;not&lt;/em&gt; to have a family. Go figure.&lt;/p&gt;

&lt;p&gt;All of my kids were unplanned, but that doesn&amp;rsquo;t mean they were unwanted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x19.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Many of you know that I have four kids, but in a strange way, I really have five, if you count Perl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x20.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Geneva thinks of Perl as more or less her twin sister, since they were both born in 1987. But then, Geneva is strange.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x21.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some people think Perl is strange too. That&amp;rsquo;s okay&amp;ndash;all my kids are a little strange. They come by it naturally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x22.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x23.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a self-portrait of the other end of Geneva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x24.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what you usually see of Lewis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x25.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some of Aron, pulling the door that says &amp;ldquo;push.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x26.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;rsquo;s Heidi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x27.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;She always was a pale child.&lt;/p&gt;

&lt;p&gt;Actually, here&amp;rsquo;s the real picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x28.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see she&amp;rsquo;s actually quite sane. Compared to the rest of us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x29.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a picture of my wife Gloria.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x30.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another picture of my wife. Well, her arms. The feet are my mom&amp;rsquo;s. Actually, this is &lt;em&gt;really&lt;/em&gt; a picture of my granddog, Milo. He&amp;rsquo;s the one on the right.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve talked before about how the stages in Perl&amp;rsquo;s life are very much like that of a kid. To review:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x31.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This extended metaphor can be extended even further as necessary and prudent. Actually, it&amp;rsquo;s probably unnecessary and imprudent, but I&amp;rsquo;ll extend it anyway, because I find the metaphor useful. Perl, my fifth child, is showing various signs that she is about to grow up, and as a pseudo-parent, that makes me pseudo-proud of her. But there are other ways the metaphor makes me happy. For instance, it gives me another argument about the name of Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x32.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From time to time, people have suggested that Perl 6 is sufficiently different from Perl 5 that she should be given a new name. But we don&amp;rsquo;t usually rename our kids when they grow up. They may choose to rename themselves, of course. For the moment I think Perl would like her name to stay Perl.&lt;/p&gt;

&lt;p&gt;Now, I know what some of you are thinking: in anthropomorphizing Perl this way, Larry has gone completely off the deep end. That&amp;rsquo;s not possible&amp;ndash;I started out by jumping off the deep end, and I haven&amp;rsquo;t noticed the water getting any shallower lately.&lt;/p&gt;

&lt;p&gt;But in justification of my metaphor, let me just say that when I say &amp;ldquo;Perl&amp;rdquo; here, I&amp;rsquo;m not just talking about the language, but the entire culture. There are a lot of people who worked hard to raise Perl up to where she is today, and a bunch more people working hard to send her off to college. It&amp;rsquo;s the collective aspirations of those people that is the real personality of Perl.&lt;/p&gt;

&lt;p&gt;When we first announced the Perl 6 effort back in 2000, we said it would be the community redesign of Perl. That continues to be the case today. It may look like I&amp;rsquo;m making all these arbitrary decisions as the language designer, but as with a teenager, you somehow end up making most of your decisions consistent with what they want. With what the Perl community wants, in this case.&lt;/p&gt;

&lt;p&gt;If a teenager doesn&amp;rsquo;t want to listen to you, you can&amp;rsquo;t make &amp;lsquo;em.&lt;/p&gt;

&lt;p&gt;The fact is, Perl would be nothing without the people around her. Here&amp;rsquo;s a new acronym:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x33.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or if you like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x34.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It really helps to have an extended family to raise a kid well. American culture has been somewhat reductionist in this respect, but a lot of other cultures around the world understand the importance of extended family. Maybe it&amp;rsquo;s just because Americans move around so much. But it&amp;rsquo;s a healthy trend that young people these days are manufacturing their own extended families. At the church I go to, we call it &amp;ldquo;Doing Life Together.&amp;rdquo; Here in the extended Perl family, we&amp;rsquo;re doing life together too.&lt;/p&gt;

&lt;p&gt;We have people in our family like Uncle Chip and Aunt Audrey. There&amp;rsquo;s Cousin Allison, and Cousin Ingy, and Cousin Uri, and our very own Evil Brother Damian. I think Randal occasionally enjoys being the honorary black sheep of the family, as it were.&lt;/p&gt;

&lt;p&gt;It all kind of reminds me of the Addams family. Hmm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x35.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I watched &lt;em&gt;The Addams Family&lt;/em&gt; a lot when I was young. Maybe you should call me Gomez, and call Gloria, Morticia. I must confess that I do love it when my wife speaks French. It gives me déjà vu all up and down my spine.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s okay for me to tell you that because I live in a fishbowl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x36.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x37.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure who gets to be Lurch. Or Thing. Anybody wanna volunteer? We&amp;rsquo;re always looking for volunteers in the Perl community. Don&amp;rsquo;t be scared. The Addams family can be a little scary, and so can the Perl family, but you&amp;rsquo;ll notice we&amp;rsquo;re also affectionate and accepting. In a ghoulish sort of way.&lt;/p&gt;

&lt;p&gt;We could take this TV family metaphor a lot further, but fortunately for you I never watched the &lt;em&gt;Partridge Family&lt;/em&gt; or &lt;em&gt;The Brady Bunch&lt;/em&gt; or &lt;em&gt;All in the Family&lt;/em&gt; or &lt;em&gt;Father Knows Best&lt;/em&gt;. Those of you who were here before know I mostly watched &lt;em&gt;The Man From U.N.C.L.E.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I also watched &lt;em&gt;Combat&lt;/em&gt;, a World War II show. But I was kind of a gruesome little kid that way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x38.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I like gruesome shows. Maybe that explains why I liked the Addams family. Hmm. I once sat on the lap of the Santa Claus at Sears and asked for all five toy machine guns listed in the Sears catalog that year. For some reason I didn&amp;rsquo;t get any of them. But I suppose my family loved me in spite of my faults. My role models in parenting obviously didn&amp;rsquo;t come from TV. Or maybe they did. You know, that would explain a lot about how my family turned out. In actual fact, the picture above is another self-portrait done by my daughter Geneva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x39.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, I love my own family, even if they&amp;rsquo;re kind of peculiar at times. Last month we were staying at a Motel 6 in Medford, Oregon. Gloria kindly went off to fetch me a cup of coffee from the motel lobby, and then she came to this door and stood there for a while wondering how to pull the door open with her hands full. Then she realized that the door must have been designed by someone who thinks there should be only one obvious way to do it. Because, the fact is, you can either pull or push this door, despite what it says. I suggested we should start marking such pushmepullyu doors with a P*. We obviously need more globs in real life.&lt;/p&gt;

&lt;p&gt;Anyway, back to my weird family&amp;ndash;this summer as we were driving around, we had a great literary discussion about how Tolstoy debunks the Great Man theory of history in &lt;em&gt;War and Peace&lt;/em&gt;. After discussing the far-too-heavily overloaded namespace in Russian novels and the almost complete absence of names in the &lt;em&gt;Tale of Genji&lt;/em&gt;, we tried to decide if the &lt;em&gt;Tale of Genji&lt;/em&gt; was the first novel or not, and decided that it was really the first soap opera. Of course, then there had to be a long discussion of what really &lt;em&gt;was&lt;/em&gt; the first novel&amp;ndash;&lt;em&gt;Tale of Genji&lt;/em&gt;, &lt;em&gt;Madame Bovary&lt;/em&gt;, or &lt;em&gt;Sense and Sensibility&lt;/em&gt;. Then there&amp;rsquo;s the first romance, first mystery, first fantasy, first science fiction, first modern novel, etc. One interesting fact we noted was that the first in a genre almost always has to officially be some other genre too. For example, the &lt;em&gt;Tale of Genji&lt;/em&gt; was written in the existing form of explication of some haiku. Transitional forms are important in biological evolution as well, as one species learns to become another species. That&amp;rsquo;s why we explicitly allow people to program babytalk in Perl. The only way to become smart is to be stupid first. Puts a new spin on the Great Man theory of history.&lt;/p&gt;

&lt;p&gt;So then, as we were driving we saw a cloud formation resembling Thomas Jefferson, which led us to speculate on the Great Documents theory of history. &amp;ldquo;Liberty, Equality, Fraternity&amp;rdquo; brought up the Great Slogans theory of history.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x40.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Back to Tolstoy: &amp;ldquo;Moscow didn&amp;rsquo;t burn because Napoleon decided to burn it. Moscow burned because it was made of wood.&amp;rdquo; Those of you who attended YAPC Chicago may recognize that as the Great Cow theory of history. Or maybe the lantern was really kicked over by a camel, and there was a coverup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x41.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, back to the family again, presuming the house hasn&amp;rsquo;t burned down. They say that &amp;ldquo;A family is where, when you have to go there, they have to take you in.&amp;rdquo; Arguably, regardless of your viewpoint, many people have been, um, taken in by Perl culture.&lt;/p&gt;

&lt;p&gt;Sorry. I have a low taste for taking people in with puns.&lt;/p&gt;

&lt;p&gt;But hey, taking people in is good. And stray kitties.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x42.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some families just naturally accumulate strays. My wife and I were both fortunate enough to grow up in families that took in strays as a matter of course. We have a number of honorary members of our own family. I think a good family tends to Borg people who need to be taken in. It&amp;rsquo;s a lot like the way Audrey hands out commit bits to Pugs left and right. It all one big happy hivemind. Er, I mean family.&lt;/p&gt;

&lt;p&gt;Now, it&amp;rsquo;s all well and good to get people in the door, but that&amp;rsquo;s only the beginning of accessibility. Whenever you get someone new in the family, either by birth or by adoption, where do you go from there? You have to raise your kids somehow, and they&amp;rsquo;re all different. Raising different kids requires different approaches, just like computer problems do.&lt;/p&gt;

&lt;p&gt;So, then, how do we raise a family according to the various computing paradigms?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x43.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Imperative programming is the &lt;em&gt;Father Knows Best&lt;/em&gt; approach. It only works at all when Father &lt;em&gt;does&lt;/em&gt; know best, which is not all that often. Often Mother knows &amp;ldquo;bester&amp;rdquo; than Father. Hi, Gloria. And a surprising amount of the time, it&amp;rsquo;s the kids who know &amp;ldquo;bestest.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x44.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some reason the Von Trapp family comes to mind. I guess you have to structure your family to make the &lt;em&gt;Sound of Music&lt;/em&gt; together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x45.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Look, if you hit your sister, she &lt;em&gt;will&lt;/em&gt; hit you back. Duh.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x46.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously anyone who doesn&amp;rsquo;t program their family functionally has a dysfunctional family. But what does it mean to have a functional family? &amp;ldquo;Being hit back is a function of whether you hit your sister.&amp;rdquo; On the surface, everything appears to be free of side effects. Certainly when I tell my kids to mind their manners it often seems to have no lasting effect. Really, though, it does, but in the typical family, there&amp;rsquo;s a lot of hidden state change wound in the call stack. We first learn lazy evaluation in the family.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Don&amp;rsquo;t take the last piece of candy unless you really want it.&amp;rdquo;
&amp;ldquo;Please define whether you really care, and exactly how much you care.&amp;rdquo;
&amp;ldquo;I&amp;rsquo;m sure I care more than you do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s almost a direct quote from Heidi when she was young: &amp;ldquo;But I want it more than you do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x47.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Functional programming tends to merge into declarative programming in general. I married into a family where you have to declare whether you want the last piece of cheesecake, or you&amp;rsquo;re unlikely to get it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x48.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I grew up in more of a culture where it was everyone&amp;rsquo;s responsibility to let someone else have the cheesecake. This algorithm did not always terminate. After several rounds of, &amp;ldquo;No, you go ahead and take it, no you take it, no you take it &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In the end, nobody was really sure who wanted the cheesecake. I guess you say it was a form of starvation. But when I married into my wife&amp;rsquo;s family I found out that I definitely wouldn&amp;rsquo;t get the cheesecake until I learned to predeclare.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x49.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see, inheritance is obviously important, or you wouldn&amp;rsquo;t have a family in the first place. On the other hand, the family is where culture is handed down in the form of design patterns. A good model of composition is important&amp;ndash;a lot of the work of being a family consists of just trying to stay in one spot together. As a form of composition, we learn how to combine our traits constructively by playing various roles in the family. Sometimes those are fixed roles built at family composition time, and sometimes those are temporary roles that are mixed in at run time. Delegation is also important. I frequently delegate to my sons: &amp;ldquo;Lewis, take the trash out.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x50.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s Design By Contract. &amp;ldquo;Keep your promises, young man!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x51.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Metaprogramming. &amp;ldquo;Takes one to know one!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x52.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aspected-oriented programming comes up when we teach our kids to evaluate their methods in the broader context of society:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Okay kid, now that you&amp;rsquo;ve passed your driver&amp;rsquo;s test, you still have to believe the stop signs, but when the speed limit sign says 65, what it really means is that you should try to keep it under 70. Or when you&amp;rsquo;re in Los Angeles, under 80.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x53.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But I think the basic Perl paradigm is &amp;ldquo;Whatever-oriented programming.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Your kid comes to you and says, &amp;ldquo;Can I borrow the car?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You say: &amp;ldquo;&lt;em&gt;May&lt;/em&gt; I borrow the car?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;They say: &amp;ldquo;Whatever &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x54.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Should I push the door or pull it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x55.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x56.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x57.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x58.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, &amp;ldquo;whatever&amp;rdquo; is such an important concept that we built it into Perl 6. This is read, &amp;ldquo;from one to whatever.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x59.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might ask why we can&amp;rsquo;t just say &amp;ldquo;from one to infinity&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x60.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The problem is that not all operators operate on numbers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x61.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not all operators are ranges. Here&amp;rsquo;s the sibling argument operator, which repeats the same words an arbitrary number of times:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x62.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl has always been about letting you care about the things you want to care about, while not caring about the things you don&amp;rsquo;t want to care about, or that maybe you&amp;rsquo;re not quite &lt;em&gt;ready&lt;/em&gt; to care about yet. That&amp;rsquo;s how Perl achieves both its accessibility and its power. We&amp;rsquo;ve just baked more of that &amp;ldquo;who cares?&amp;rdquo; philosophy into Perl 6.&lt;/p&gt;

&lt;p&gt;A couple of years ago, Tim O&amp;rsquo;Reilly asked me what great problem Perl 6 was being designed to solve. This question always just sat in my brain sideways because, apart from Perl 0, I have never thought of Perl as the solution to any one particular problem. If there&amp;rsquo;s a particular problem that Perl is trying to solve, it&amp;rsquo;s the basic fact that all programming languages suck. Sort of the concept of original sin, applied to programming languages.&lt;/p&gt;

&lt;p&gt;As parents, to the extent that we can influence the design of our kids, we design our kids to be creative, not to solve a particular problem. About as close as we get to that is to hope the kid takes over the family business, and we all know how often that sort of coercion works.&lt;/p&gt;

&lt;p&gt;No, instead, we design our kids to be ready to solve problems, by helping them learn to be creative, to be socially aware, to know how to use tools, and maybe even how to manufacture the tools for living when they&amp;rsquo;re missing. They should be prepared to do &amp;hellip; whatever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x63.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Trouble is, it takes a long time to make an adult, on the order of 20 years. Most insects don&amp;rsquo;t take 20 years to mature.&lt;/p&gt;

&lt;p&gt;Apparently it takes you ten years to become an expert in being a kid, and then another ten years to become an expert in &lt;em&gt;not&lt;/em&gt; being a kid. Some people never manage the second part at all, or have a strange idea of adulthood. Some people think that adulthood is when you just bake all your learning into hardware and don&amp;rsquo;t learn anything new ever again, except maybe a few baseball scores. That&amp;rsquo;s an oversimplified view of reality, much like building a hardwired Lisp machine. Neoteny is good in moderation. We have to be lifelong learners to really be adults, I think.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x64.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No, adulthood is really more about mature judgment. I think an adult is basically someone who knows when to care, and how to figure out when they should care when they don&amp;rsquo;t know offhand. A teenager is forever caring about things the parents think are unimportant, and &lt;em&gt;not&lt;/em&gt; caring about things the parents think &lt;em&gt;are&lt;/em&gt; important. Well, hopefully not forever. That&amp;rsquo;s the point. But it&amp;rsquo;s certainly a long process, with both kids and programming languages.&lt;/p&gt;

&lt;p&gt;In computer science, it is said that premature optimization is the root of all evil. The same is true in the family. In parenting terms, you pick your battlefields, and learn not to care so much about secondary objectives. If you can&amp;rsquo;t modulate what you care about, you&amp;rsquo;re not really ready to parent a teenager. Teenagers have a way of finding your hot buttons and pushing them just to distract you from the important issues. So, don&amp;rsquo;t get distracted.&lt;/p&gt;

&lt;p&gt;There are elements of the Perl community that like to push our collective hot buttons. Most of them go by the first name of Anonymous, because they don&amp;rsquo;t really want to stand up for their own opinions. The naysayers could even be right: we may certainly fail in what we&amp;rsquo;re trying to do with Perl 6, but I&amp;rsquo;d just like to point out that only those people who put their name behind their opinions are allowed to say &amp;ldquo;I told you so.&amp;rdquo; Anonymous cowards like the &amp;ldquo;told you so&amp;rdquo; part as long as it doesn&amp;rsquo;t include the &amp;ldquo;I.&amp;rdquo; Anonymous cowards don&amp;rsquo;t have an &amp;ldquo;I,&amp;rdquo; by definition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x65.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, don&amp;rsquo;t let the teenage trolls distract you from the real issues.&lt;/p&gt;

&lt;p&gt;As parents we&amp;rsquo;re setting up some minimum expectations for civilized behavior. Perl should have good manners by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x66.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl should be wary of strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x67.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But Perl should be helpful to strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x68.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While we&amp;rsquo;re working on their weaknesses, we also have to encourage our kids to develop where they have strengths, even if that makes them not like everyone else. It&amp;rsquo;s okay to be a little weird.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x69.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Every kid is different. At least, all my kids are really different. From each other, I mean. Well, and the other way too.&lt;/p&gt;

&lt;p&gt;I guess my kids are all alike in one way. None of them is biddable. They&amp;rsquo;re all arguers and will happily debate the merits of any idea presented to them whether it needs further discussion or not. They&amp;rsquo;re certainly unlikely to simply wander off to the slaughter with any stranger that suggests it.&lt;/p&gt;

&lt;p&gt;This is the natural result of letting them fight as siblings, with supervision. It&amp;rsquo;s inevitable that siblings will squabble. Your job as parent is to make sure they fight fair. It helps a lot if the parents have already learned how to fight fair. What I mean by fight fair is that you fight about what you&amp;rsquo;re fighting about&amp;ndash;you don&amp;rsquo;t fight the other person. If you find yourself dragging all sorts of old baggage into an argument, then you&amp;rsquo;re fighting the person, you&amp;rsquo;re not fighting about something anymore. Nothing makes me happier as a parent than to hear one of my kids make a logical argument at the same time as they&amp;rsquo;re completely pissed off.&lt;/p&gt;

&lt;p&gt;If you teach your kids to argue effectively, they&amp;rsquo;ll be resistant to peer pressure. You can&amp;rsquo;t be too careful here. There are a lotta computer languages out there doing drugs. As a parent, you don&amp;rsquo;t get into a barricade situation and isolate your kids from the outside world forever. Moving out and building other relationships is a natural process, but it needs some supervision.&lt;/p&gt;

&lt;p&gt;Perl is learning to care deeply about things like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x70.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This final point is crucial, if you want to understand the state of Perl today. Perl 6 is all about reconciling the supposedly irreconcilable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x71.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reconciling the seemingly irreconcilable is part of why Perl 6 taking so long. We want to understand the various tensions that have surfaced as people have tried to use and extend Perl 5. In fact, just as Perl 1 was an attempt to digest Unix Culture down into something more coherent, you can view Perl 6 as an attempt to digest CPAN down into something more coherent. Here are some of the irreconcilables we run into when we do that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x72.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OO brings us a world of choices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x73.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do we even have classes at all?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x74.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And if we do, how do they inherit and dispatch?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x75.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Is our type system more general than our class system?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x76.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plus a grab bag of other issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x77.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally, the biggie:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x78.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reconciling these known conflicts is all well and good, but our goal as a parent must be a bit larger than that.&lt;/p&gt;

&lt;p&gt;Just as a child that leaves the house today will face unpredictable challenges tomorrow, the programming languages of the future will have to reconcile not only the conflicting ideas we know about today, but also the conflicting ideas that we haven&amp;rsquo;t even thought of yet.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t know how to do that. Nobody knows how to do that, because nobody is smart enough. Some people pretend to be smart enough. That&amp;rsquo;s not something I care about.&lt;/p&gt;

&lt;p&gt;Nevertheless, a lot of smart people are really excited about Perl 6 because, as we go about teaching Perl how to reconcile the current crop of irreconcilables, we&amp;rsquo;re also hoping to teach Perl strategies for how to cope with future irreconcilables. It&amp;rsquo;s our vision that Perl can learn to care about what future generations will care about, and not to care about what they don&amp;rsquo;t care about.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty abstruse, I&amp;rsquo;ll admit. Future-proofing your children is hard. &lt;em&gt;Some&lt;/em&gt; of us get excited by the long-term potential of our kids. But it&amp;rsquo;s also exciting when you see their day-to-day progress. And we&amp;rsquo;ve make a lot of progress recently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x79.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In terms of Audrey&amp;rsquo;s Perl 6 timeline, we&amp;rsquo;re right at that spot where it says &amp;ldquo;hack, hack, hack.&amp;rdquo; In a year or so we&amp;rsquo;ll be up here saying, &amp;ldquo;What&amp;rsquo;s the big deal?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This is the year that Perl 6 will finally be bootstrapped in Perl 6, one way or another. Actually, make that one way &lt;em&gt;and&lt;/em&gt; another. There are several approaches being pursued currently, in a kind of flooding algorithm. One or another of those approaches is bound to work eventually.&lt;/p&gt;

&lt;p&gt;Now, anyone who has been following along at home knows that we never, ever promise a delivery date for Perl 6. Nevertheless, I can point out that many of us hope to have most of a Perl 6 parser written in Perl 6 by &lt;em&gt;this&lt;/em&gt; Christmas. The only big question is which VM it will compile down to first. There&amp;rsquo;s a bit of a friendly race between the different implementations, but that&amp;rsquo;s healthy, since they&amp;rsquo;re all aiming to support the same language.&lt;/p&gt;

&lt;p&gt;So one of the exciting things that happened very recently is that the Pugs test suite was freed from its Haskell implementation and made available for all the other implementations to test against. There are already roughly 12,000 tests in the test suite, with more coming every day. The Haskell implementation is, of course, the furthest along in terms of passing tests, but the other approaches are already starting to pass the various basic sanity tests, and as many of you know, getting the first test to pass is already a large part of the work.&lt;/p&gt;

&lt;p&gt;So the plan is for Perl 6 to run consistently on a number of platforms. We suspect that eventually the Parrot platform is likely to be the most efficient way to run Perl 6, and may well be the best way to achieve interoperability with other dynamic languages, especially if Parrot can be embedded whole in other platforms.&lt;/p&gt;

&lt;p&gt;But the other virtual machines out there each have their own advantages. The Haskell implementation may well turn out to be the most acceptable to academia, and the best reference implementation for semantics, since Haskell is so picky. JavaScript is already ubiquitous in the browsers. There are various ideas for how to host Perl 6 on top of other VMs as well. Whatever.&lt;/p&gt;

&lt;p&gt;But the VM that works the best for Perl right now is, in fact, Perl 5. We&amp;rsquo;ve already bootstrapped much of a Perl 5 compiler for Perl 6. Here&amp;rsquo;s a picture of the approach of layering Perl 6 on Perl 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x80.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here in the middle we have the Great Moose theory of history.&lt;/p&gt;

&lt;p&gt;Other stuff that&amp;rsquo;s going on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x81.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to lots of testing and documentation projects, I&amp;rsquo;m very happy that Sage La Torra is working on a P5-to-P6 translator for the Google Summer of Code. Soon we&amp;rsquo;ll be able to take Perl 5 code, translate it to Perl 6, and then translate it back to Perl 5 to see how well we did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x82.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another bootstrapping approach is to take our current Haskell codebase and translate to Perl 6. That could be very important long term in keeping all the various implementations in sync.&lt;/p&gt;

&lt;p&gt;There are many, many other exciting things going on all the time. Hang out on the mailing lists and on the IRC channels to find out more.&lt;/p&gt;

&lt;p&gt;If you care.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x83.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perl is growing up, but she&amp;rsquo;s doing so in a healthy way, I think. Those of us who are parents tend to try to discourage our kids from getting married too young, because we know how much people change around their twentieth year. Around the age of 19 or 20 is when we start that last major rewiring of our brains to become adults. This year, Perl will be 19 going on 20. She&amp;rsquo;s due for a brain rewiring.&lt;/p&gt;

&lt;p&gt;In previous years, Perl was just trying to act grownup by ignoring her past. This year, I&amp;rsquo;m happy to report that instead of just trying to act grownup, Perl is going back and reintegrating her personality to include the positive aspects of childhood and adolescence. I don&amp;rsquo;t know where Perl will go in the next ten or twenty years. It&amp;rsquo;s my job to say, &amp;ldquo;I don&amp;rsquo;t care anymore,&amp;rdquo; and kick her out of the house. She&amp;rsquo;s a big girl now, and she&amp;rsquo;s becoming graceful and smart and wise, and she can just decide her future for herself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2006_09_21_onion/x84.jpg&#34; width=&#34;500&#34; height=&#34;375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Whatever. Thanks for listening, and for learning to care, and for learning to not care. Have a great conference! I don&amp;rsquo;t care how!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

