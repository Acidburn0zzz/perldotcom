<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jan 2018 21:50:37 +0000</lastBuildDate>
    <atom:link href="/tags/java/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>When Perl isn&#39;t fast enough</title>
      <link>http://localhost:1313/article/when-perl-isn-t-fast-enough/</link>
      <pubDate>Sun, 28 Jan 2018 21:50:37 +0000</pubDate>
      
      <guid>http://localhost:1313/article/when-perl-isn-t-fast-enough/</guid>
      <description>

&lt;p&gt;Last year at $work we held a web application &amp;ldquo;bake off&amp;rdquo; competition, in order to find a suitable technology stack for serving some important pages on our website, as fast as possible. Our developers were allowed to compete individually or in a team, and they could use any programming language they wanted.&lt;/p&gt;

&lt;p&gt;The existing solution was based on Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; framework using &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt;, and the code had become utterly bloated, to the point at which it took several hundred ms to serve the pages. The issue wasn&amp;rsquo;t with the technology per se: a vanilla Catalyst application can serve responses in under 10ms, the problem was that the application code was shared among several different teams, and as each team added various features and functions, performance degraded.&lt;/p&gt;

&lt;p&gt;The overall aim then, was to see what we could do if we &amp;ldquo;burned it down&amp;rdquo; and started again. The bake off generated a lot of buzz: we were given carte blanche to spend as much time as needed working on it, and it was a lot of fun. We had entries in Python, Go, Java, Haskell, Lua, Node, Elixir and of course, Perl.&lt;/p&gt;

&lt;h1 id=&#34;round-1&#34;&gt;Round 1&lt;/h1&gt;

&lt;p&gt;The goal of the first round was to develop a web application that would respond to certain GET requests by serving a particular template. Much of the template was static, but there was some dynamic logic to it.&lt;/p&gt;

&lt;p&gt;My team built a solution on top of &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt;. We created thin request and response classes in &lt;a href=&#34;https://metacpan.org/pod/Moo&#34;&gt;Moo&lt;/a&gt;, a router coded in C (&lt;a href=&#34;https://metacpan.org/pod/Router::XS&#34;&gt;Router::XS&lt;/a&gt;), and used &lt;a href=&#34;https://metacpan.org/pod/Text::XSlate&#34;&gt;Text::XSlate&lt;/a&gt; for the template. The solution kicked ass - it was able to serve over 10,000 requests per second, and we placed second overall, losing out only to a Java entry.&lt;/p&gt;

&lt;h1 id=&#34;round-2&#34;&gt;Round 2&lt;/h1&gt;

&lt;p&gt;In round 2 things got trickier: our solutions would be required to make several requests to other internal services, in order to formulate the response. Additionally, our solutions would be judged for a &amp;ldquo;joy&amp;rdquo; factor: &lt;em&gt;would developers love working with this stack?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To satisfy the &amp;ldquo;joy&amp;rdquo; factor, we merged our code with another team&amp;rsquo;s entry, based on &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt;. That gave us a real web framework to develop with, as opposed to the threadbare classes we had developed in round 1.&lt;/p&gt;

&lt;p&gt;The requirement to make several requests to other services hurt us though. The kicker was, we had to make the requests concurrently &lt;em&gt;and&lt;/em&gt; compute concurrently on the responses. This was because the data needed for one request was coming from two separate data stores that could be fetched and processed and rendered concurrently. In other words, we needed threading.&lt;/p&gt;

&lt;p&gt;Perl can do asynchronous programming with modules like &lt;a href=&#34;https://metacpan.org/pod/IO::Async&#34;&gt;IO::Async&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/Coro&#34;&gt;Coro&lt;/a&gt;, but it&amp;rsquo;s single threaded. You &lt;em&gt;can&lt;/em&gt; compile Perl with &lt;a href=&#34;https://perldoc.perl.org/threads.html&#34;&gt;threads&lt;/a&gt;, which provide multi-threaded computing. They were developed back in the day by Microsoft to enable &lt;a href=&#34;https://perl.apache.org/&#34;&gt;mod_perl&lt;/a&gt; to run on Windows, in lieu of &lt;code&gt;fork()&lt;/code&gt;. Perl&amp;rsquo;s threads work by cloning the Perl interpreter&amp;rsquo;s internal data structures, and passing around a thread context variable to tell Perl which thread is requesting what data. These have predictable drawbacks: they require more system resources because of the cloned data, and each thread runs &lt;em&gt;slower&lt;/em&gt; than a single threaded Perl because of all the thread context checks.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s inability to multi-thread efficiently forced us to stay single-threaded and it really burnt us: the best performing Java and Go entries&amp;rsquo; throughput were within 3% of each other, but our solution was 50% slower.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Perl is such a versatile language: from the terminal, to scripting and application programming, it excels in many areas. We were able to develop a lightning-fast application that competed with, and bested several high performance language competitors. Ultimately though, $work decided to use Go as for this solution we needed a highly scalable, performant stack.&lt;/p&gt;

&lt;p&gt;Perl 6 might be a viable alternative soon. The latest 6.c &lt;a href=&#34;https://perl6.org/downloads/&#34;&gt;release&lt;/a&gt; includes a hybrid (M:N) threading model via a scheduler which comes into play when using &lt;a href=&#34;https://docs.perl6.org/language/concurrency&#34;&gt;higher level constructs&lt;/a&gt;. To bypass the scheduler and get more control, it has a &lt;a href=&#34;https://docs.perl6.org/type/Thread&#34;&gt;Thread&lt;/a&gt; class, for which each instance maps 1:1 with an OS thread. I suspect it is too slow to compete right now, but I will be watching future Perl 6 benchmarks with interest.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Cover image from &lt;a href=&#34;http://www.psdgraphics.com/psd/rocket-icon-psd/&#34;&gt;psdgraphics.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6 (17 - 30 June 2001)</title>
      <link>http://localhost:1313/pub/2001/07/p6pdigest/20010703.html/</link>
      <pubDate>Tue, 03 Jul 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/07/p6pdigest/20010703.html/</guid>
      <description>

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Perl_Doesnt_Suck&#34;&gt;Perl Doesn&#39;t Suck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Multiple_Classifications&#34;&gt;Multiple Classifications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Once_Inherited_Twice_Shy&#34;&gt;Once Inherited, Twice Shy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#ClassObject&#34;&gt;Class::Object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#The_Internal_String_API&#34;&gt;The Internal String API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Miscellany&#34;&gt;Miscellany&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.
Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The lists have been very light recently. During the last two weeks of June, three of the mailing lists received a mere 142 messages across 20 different threads. 40 different authors contributed. Only 5 threads generated much traffic. Eventually, I&amp;rsquo;ll come up with a better way of reporting these meaningless metrics.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-doesnt-suck-perl-doesn-t-suck-span&#34;&gt;&lt;span id=&#34;Perl_Doesnt_Suck&#34;&gt;Perl Doesn&amp;rsquo;t Suck&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Adam Turoff &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00939.html&#34;&gt;provided&lt;/a&gt; a detailed summary of some recent battles against &lt;a href=&#34;http://java.sun.com/&#34;&gt;The Big Bean&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, at the end of the day, I have no fewer than five JVMs installed, all completely different implementations of two Java standards. As a Perl programmer, I find this abhorrent. Installing any version of Perl release in the last 7 years is no different from installing any other release: download, extract, ./configure -des, make, make test, make install. Done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Elaine Ashton, however, &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00943.html&#34;&gt;disagreed&lt;/a&gt;, to a point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t believe I was saying that. My point was that you had a bad experience installing Java on FreeBSD and have declared that it sucks to install it. Unsurprisingly, I have never had a problem installing or supporting Java on Solaris but there are plenty of things to grumble about Perl sometimes, especially if you deploy multiple versions and configurations across multiple platforms and multiple versions of those platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-meta@perl.org/msg00945.html&#34;&gt;pointed out&lt;/a&gt; that Solaris is &amp;ldquo;Sun&amp;rsquo;s Blessed Platform&amp;rdquo;, and it shouldn&amp;rsquo;t be surprising that Java should install easily there. The discussion then touched a bit on distributions, licensing, support roles, and, yes, even George Carlin.&lt;/p&gt;

&lt;h3 id=&#34;span-id-once-inherited-twice-shy-once-inherited-twice-shy-span&#34;&gt;&lt;span id=&#34;Once_Inherited_Twice_Shy&#34;&gt;Once Inherited, Twice Shy&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-multiple-classifications-multiple-classifications-span&#34;&gt;&lt;span id=&#34;Multiple_Classifications&#34;&gt;Multiple Classifications&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;David Whipp &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07621.html&#34;&gt;asked&lt;/a&gt; if &lt;code&gt;bless&lt;/code&gt; could take, and &lt;code&gt;ref&lt;/code&gt; return, a list, allowing for a cleaner multiple-inheritance model for objects in Perl. Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07624.html&#34;&gt;simplified&lt;/a&gt; the request to object-based vice class-based inheritance, and then &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07631.html&#34;&gt;provided&lt;/a&gt; some potential trade-offs.&lt;/p&gt;

&lt;p&gt;Damian, of course, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07625.html&#34;&gt;submitted&lt;/a&gt; code to fake it in Perl 5. He did muse about an &lt;code&gt;ISA&lt;/code&gt; property, though, which would act like &lt;code&gt;@ISA&lt;/code&gt;, but at the object level.&lt;/p&gt;

&lt;h4 id=&#34;span-id-classobject-class-object-span&#34;&gt;&lt;span id=&#34;ClassObject&#34;&gt;Class::Object&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michael &amp;ldquo;Class::Object&amp;rdquo; Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07663.html&#34;&gt;asked&lt;/a&gt; why all this (Class::Object) had to be (Class::Object) in the core (Class::Object). Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07665.html&#34;&gt;opined&lt;/a&gt;:
&amp;gt; Doing it properly in a module is significantly more of a pain than doing it in the core. Faking it with a module means a fair amount of (reasonably slow) perl code, doing it in the core requires a few extra lines of C code in the method dispatch opcode function.&lt;/p&gt;

&lt;p&gt;To which, of course, Michael Class::Objected:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve already done it, it was easy. Adding in an object-based inheritance system should be just as easy, I just need an interface. $obj-&amp;gt;parents(@other_objs) is a little clunky.&lt;/p&gt;

&lt;p&gt;&amp;hellip;Look at Class::Object! Its really, really thin. Benchmark it, its no slower than regular objects. &lt;a href=&#34;http://www.pobox.com/~schwern/src/Class-Object-0.01.tar.gz&#34;&gt;http://www.pobox.com/~schwern/src/Class-Object-0.01.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[The Golden Troll Award goes to Dan Brien for &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07679.html&#34;&gt;this gem&lt;/a&gt;.]&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-internal-string-api-the-internal-string-api-span&#34;&gt;&lt;span id=&#34;The_Internal_String_API&#34;&gt;The Internal String API&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03221.html&#34;&gt;initiated&lt;/a&gt; discussion on the internal API for strings:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since we&amp;rsquo;re going to try and take a shot at being encoding-neutral in the core, we&amp;rsquo;re going to need some form of string API so the core can actually manipulate string data. I&amp;rsquo;m thinking we&amp;rsquo;ll need to be able to at least do this with string:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convert from and to UTF-32&lt;/li&gt;
&lt;li&gt;lengths in bytes, characters, and possibly glyphs&lt;/li&gt;
&lt;li&gt;character size (with the variable length ones reporting in negative numbers)&lt;/li&gt;
&lt;li&gt;get and set the locale (This might not be the spot for this)&lt;/li&gt;
&lt;li&gt;normalize (a noop for non-Unicode data)&lt;/li&gt;
&lt;li&gt;Get the encoding name&lt;/li&gt;
&lt;li&gt;Do a substr operation by character and glyph&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;David Nicol &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03233.html&#34;&gt;suggested&lt;/a&gt; implementing strings as a tree, vice a contiguous memory block. After some pondering, this seemed to &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03236.html&#34;&gt;grow on&lt;/a&gt; Dan, and he is awaiting a yea-or-nay from Larry. Copy-On-Write for Strings will also be &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03242.html&#34;&gt;implemented&lt;/a&gt;, although there was no mention of a potential key signature.&lt;/p&gt;

&lt;h3 id=&#34;span-id-miscellany-miscellany-span&#34;&gt;&lt;span id=&#34;Miscellany&#34;&gt;Miscellany&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07602.html&#34;&gt;released&lt;/a&gt; an updated version of his Perl 6 emulator.&lt;/p&gt;

&lt;p&gt;Marcel Grunauer &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07667.html&#34;&gt;announced&lt;/a&gt; a Proof-of-Concepts page for Perl 6, which contains info and links to Perl 5 modules that may provide a glimpse of things to come.&lt;/p&gt;

&lt;p&gt;There were more &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03247.html&#34;&gt;complaints&lt;/a&gt; about operator choices. (Specifically, &lt;code&gt;~&lt;/code&gt; for string concatenation, and &lt;code&gt;.&lt;/code&gt; (the dot) for dereference (vice &lt;code&gt;-&amp;gt;&lt;/code&gt;).)&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s but three weeks till &lt;a href=&#34;http://conferences.oreilly.com/perl&#34;&gt;TPC 5.0 kicks off in San Diego&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

