<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operator on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/operator/</link>
    <description>Recent content in Operator on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Nov 2013 01:47:23 +0000</lastBuildDate>
    <atom:link href="/tags/operator/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Understanding the modulo operator</title>
      <link>http://localhost:1313/article/46/2013/11/4/Understanding-the-modulo-operator/</link>
      <pubDate>Mon, 04 Nov 2013 01:47:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/46/2013/11/4/Understanding-the-modulo-operator/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The behavior of the modulo operator (%) can catch programmers by surprise as it is often misunderstood to provide the remainder of an arithmetic division operation. This article reviews the modulo operator behavior and provides an arithmetic division solution.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;modulo-gotchas&#34;&gt;Modulo &amp;ldquo;Gotchas&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;First of all &lt;a href=&#34;https://perldoc.perl.org/perlop.html#Multiplicative-Operators&#34;&gt;modulo&lt;/a&gt; is an integer operator, and if it receives fractional arguments, Perl will only use the integer portion of the fraction. This means that the following two operations are equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.5&lt;/span&gt; % 3&lt;span style=&#34;color:#ae81ff&#34;&gt;.2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; % 3;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second the modulo operator is performing &lt;a href=&#34;http://en.wikipedia.org/wiki/Euclidean_division&#34;&gt;Euclidean division&lt;/a&gt; not &lt;a href=&#34;https://en.wikipedia.org/wiki/Division_%28mathematics%29&#34;&gt;arithmetic division&lt;/a&gt;. Mathematically this is expected, however that is why the characterization of modulo as returning the &amp;ldquo;remainder of a division operation&amp;rdquo; can catch programmers by surprise - it does not return a fractional decimal. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 2.5&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; % 2; &lt;span style=&#34;color:#75715e&#34;&gt;# 1 (not 0.5)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some languages (e.g. Haskell) implement a remainder function to provide the remainder from arithmetic division: where 5 over 2 would yield 0.5. Perl does not provide this out of the box, so a solution has to be coded or found on CPAN.&lt;/p&gt;

&lt;h3 id=&#34;implementing-an-arithmetic-remainder-function&#34;&gt;Implementing an arithmetic remainder function&lt;/h3&gt;

&lt;p&gt;The following subroutine returns the remainder from an arithmetic division operation. It takes two arguments: a dividend ($a) and a divisor ($b) and returns early for zero and undef arguments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remainder&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($a, $b) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $a;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $a &lt;span style=&#34;color:#e6db74&#34;&gt;/ $b - int($a /&lt;/span&gt; $b);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; remainder(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;# 0.5&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; remainder(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# 0.1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; remainder(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;# 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively looking to CPAN, the &lt;a href=&#34;https://metacpan.org/pod/Math::Decimal&#34;&gt;Math::Decimal&lt;/a&gt; module provides a &amp;ldquo;dec_rem&amp;rdquo; subroutine (disclaimer - I have not tested it).&lt;/p&gt;

&lt;h6 id=&#34;further-reading&#34;&gt;Further reading&lt;/h6&gt;

&lt;p&gt;perldoc has an entry for the &lt;a href=&#34;https://perldoc.perl.org/perlop.html#Multiplicative-Operators&#34;&gt;modulo operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use the logical-or and defined-or operators to provide default subroutine variable behaviour</title>
      <link>http://localhost:1313/article/32/2013/7/6/Use-the-logical-or-and-defined-or-operators-to-provide-default-subroutine-variable-behaviour/</link>
      <pubDate>Sat, 06 Jul 2013 20:42:40 +0000</pubDate>
      
      <guid>http://localhost:1313/article/32/2013/7/6/Use-the-logical-or-and-defined-or-operators-to-provide-default-subroutine-variable-behaviour/</guid>
      <description>

&lt;p&gt;Perl subroutines do not have signatures so variables must be initialized and arguments assigned to them inside the subroutine code. This article describes two useful shortcuts that can simplify this process.&lt;/p&gt;

&lt;h3 id=&#34;logical-or&#34;&gt;Logical-or&lt;/h3&gt;

&lt;p&gt;One trick that Perl programmers use is the logical-or operator (&amp;lsquo;||&amp;rsquo;) to provide default behaviour for subroutine arguments. The default behaviour will only occur if the argument is provided is false (undefined, zero or a zero-length string). Imagine that we&amp;rsquo;re developing a subroutine that processes data for car insurance quotes - we&amp;rsquo;ll need to collect some basic data such as the applicant&amp;rsquo;s date of birth, sex and number of years driving. All of the arguments are mandatory - we can use the logical-or operator to return early if these arguments are false.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_quote_data&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{dob} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{sex} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $years_driving &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        defined($args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{years_driving}) ? $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{years_driving} : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;# do stuff&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this subroutine code does is assign the first element of the default array (@_) to $args using shift. By default shift will operate on @_, so there is no need to include it as an argument. Next the subroutine initializes and assigns the $dob and $sex variables. In both cases we use the logical-or (&amp;lsquo;||&amp;rsquo;) operator to return early from the subroutine if these variables are false. This is a more concise code pattern than using an if statement block. We cannot use this trick to return early from the $years_driving variable as it may be provided as zero, which Perl treats as logical false but we want to keep. So in this case we have to first check if the argument was defined (which would include zero) and then use a ternary operator to either assign the value or return early.&lt;/p&gt;

&lt;h3 id=&#34;defined-or&#34;&gt;Defined-or&lt;/h3&gt;

&lt;p&gt;Since version 5.10.0 Perl has has had the defined-or operator (&amp;lsquo;//&amp;rsquo;). This will check if the variable is defined, and if it is not, Perl will execute the code on the right-side of the operator. We can use it to simplify our subroutine code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_quote_data&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{dob} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{sex} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $years_driving &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{years_driving} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;# do stuff&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the modified code above, first we have included a line to use Perl 5.10.0 or greater - this will ensure that the version of Perl executing the code has the defined-or operator. Next we&amp;rsquo;ve simplified the code for $years_driving to use the logical-or operator. This will now accept zero as an argument, but return when $years_driving is undefined.&lt;/p&gt;

&lt;h3 id=&#34;default-values&#34;&gt;Default values&lt;/h3&gt;

&lt;p&gt;We can also use defined-or to provide default values for subroutine arguments. For example if we assumed that all users of our subroutine are male, we can change the $sex variable to default to &amp;rsquo;M&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_quote_data&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{dob} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{sex} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $years_driving &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{years_driving} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;# do stuff&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if the $sex variable is undef, the process_quote_data subroutine will assign &amp;rsquo;M&amp;rsquo; as it&amp;rsquo;s value.&lt;/p&gt;

&lt;p&gt;You can read more about these operators and in the &lt;a href=&#34;https://perldoc.perl.org/perlop.html#Logical-Defined-Or&#34;&gt;perlop section&lt;/a&gt; of the official Perl documentation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The conditional (ternary) operator</title>
      <link>http://localhost:1313/article/20/2013/4/16/The-conditional--ternary--operator/</link>
      <pubDate>Tue, 16 Apr 2013 23:12:40 +0000</pubDate>
      
      <guid>http://localhost:1313/article/20/2013/4/16/The-conditional--ternary--operator/</guid>
      <description>&lt;p&gt;One way to reduce the verbosity of Perl code is to replace if-else statements with a conditional operator expression. The conditional operator (aka ternary operator) takes the form: &lt;strong&gt;logical test&lt;/strong&gt; ? &lt;strong&gt;value if true&lt;/strong&gt; : &lt;strong&gt;value if false&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s convert a standard Perl if-else into its conditional operator equivalent, using a fictitious subroutine. First here is the if-else:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_salary&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $salary;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($hours &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) {
        $salary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_overtime_wage($hours);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $salary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_normal_wage($hours);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $salary;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is the same statement using the conditional operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_salary&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $hours &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; ? get_overtime_wage($hours) : get_normal_wage($hours);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully this example shows how using the conditional operator can shorten and simplify Perl code. For further detail, check out the &lt;a href=&#34;https://perldoc.perl.org/perlop.html#Conditional-Operator&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>List shortcuts: qw the quote whitespace operator</title>
      <link>http://localhost:1313/article/15/2013/4/9/List-shortcuts--qw-the-quote-whitespace-operator/</link>
      <pubDate>Tue, 09 Apr 2013 00:02:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/15/2013/4/9/List-shortcuts--qw-the-quote-whitespace-operator/</guid>
      <description>&lt;p&gt;A popular way to build a list of literal quotes in Perl is to use the quote whitespace operator (qw). It&amp;rsquo;s terse, versatile and elegant. To see why, let&amp;rsquo;s look at a typical statement using a list of strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# import the Encode module and three subroutines&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Encode (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decode&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encode&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;find_encoding&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To define the list of strings in Perl we had to encase every string with apostrophes, separated by commas and surrounded by parentheses. That&amp;rsquo;s a lot of fluff, and opens the door to easy mistakes such as using speechmarks (&amp;ldquo;) when you needed an apostrophe. Instead of doing that, we could have used the quote whitespace operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Encode &lt;span style=&#34;color:#e6db74&#34;&gt;qw/decode encode find_encoding/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The quote whitespace operator takes a list delimiter followed by a list of plain strings separated by whitespace and returns list of literal quoted strings. The delimiter can be an ASCII symbol (slash / is a popular choice), brackets or parentheses. Let&amp;rsquo;s review some more examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# assign a list of an array&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ny_boroughs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw{Bronx Brooklyn Manhattan Queens Staten_Island}&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Quote some tricky symbols using tilde as the list delimiter&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ascii_symbols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw~! @ $ % ^ &amp;amp; * ( ) - _ = + { } [ ] \ | / ? ~&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Use qw an input to a loop&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $firm (&lt;span style=&#34;color:#e6db74&#34;&gt;qw/Deloitte ErnstAndYoung KPMG PWC/&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $firm; 
}

&lt;span style=&#34;color:#75715e&#34;&gt;# It will ignore spaces, even double or triple spaces&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @colours &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(red  blue   yellow    pink   green   )&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (@colours) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $_;
}
&lt;span style=&#34;color:#75715e&#34;&gt;# red&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# blue&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# yellow&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pink&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# green&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the quote whitespace operator often results in a cleaner, simpler syntax that reduces the risk of error when working with lists.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repeat strings with the repetition operator Repeat strings with the repetition operator</title>
      <link>http://localhost:1313/article/10/2013/4/2/Repeat-strings-with-the-repetition-operator-Repeat-strings-with-the-repetition-operator/</link>
      <pubDate>Tue, 02 Apr 2013 22:14:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/10/2013/4/2/Repeat-strings-with-the-repetition-operator-Repeat-strings-with-the-repetition-operator/</guid>
      <description>&lt;p&gt;You get the idea - Perl has a repetition operator (x) that repeats the scalar or list on its left by the number on it&amp;rsquo;s right (like multiplication).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I like chocolate&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $string x &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#results&lt;/span&gt;

I like chocolateI like chocolateI like chocolateI like chocolateI like chocolateI like chocolateI like chocolateI like chocolateI like chocolateI like chocolate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may be able to think of more useful employment for this operator, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CS &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print qq!\N{U+2661} \N{U+2665}! x 1000;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl string functions - concatenate substring and split</title>
      <link>http://localhost:1313/article/8/2013/3/31/Perl-string-functions---concatenate-substring-and-split/</link>
      <pubDate>Sun, 31 Mar 2013 23:04:34 +0000</pubDate>
      
      <guid>http://localhost:1313/article/8/2013/3/31/Perl-string-functions---concatenate-substring-and-split/</guid>
      <description>

&lt;p&gt;Perl has many string functions, let&amp;rsquo;s take a look at a some of the most common ones: concatenate, substring and split.&lt;/p&gt;

&lt;h3 id=&#34;concatenate&#34;&gt;Concatenate&lt;/h3&gt;

&lt;p&gt;Concatenate strings by inserting a fullstop (.) operator between them. Perl will automatically &amp;lsquo;stringify&amp;rsquo; scalar variables that were initialised as a number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# declare and concatenate two strings&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $joke &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A horse walks &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;into a bar.&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# A horse walks into a bar.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Concatenate two scalars&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $meat  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sandwich&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lunch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $meat &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $bread; &lt;span style=&#34;color:#75715e&#34;&gt;# hamsandwich&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Concatenate scalars initialised as numbers&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hour        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $minutes     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $time_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $hour &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $minutes; &lt;span style=&#34;color:#75715e&#34;&gt;# 6:30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;substring&#34;&gt;Substring&lt;/h3&gt;

&lt;p&gt;Substring extracts and returns a sub-set of an existing string. It takes up to four arguments: the expression to substring, the offset from where to start the substring, the length of the substring and a replacement string. If the length is omitted the substring will run to the end of input expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# substr(expression, offset, [length], [replacement])&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $joke            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A horse walks into a bar.&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $animal          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substr($joke, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# horse&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $favourite_place &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substr($joke, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# bar.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Extract a substring and replace the substring in the original string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $verb        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substr($joke, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;runs&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# walks&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $joke; &lt;span style=&#34;color:#75715e&#34;&gt;# A horse runs into a bar.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://perldoc.perl.org/functions/substr.html&#34;&gt;perldoc&lt;/a&gt; page for substr has many more useful examples.&lt;/p&gt;

&lt;h3 id=&#34;split&#34;&gt;Split&lt;/h3&gt;

&lt;p&gt;The split function divides an input string into a list of substrings using a split pattern, and an (optional) limit on the number of split fields. If the input expression is omitted, Perl will use $_.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# split(pattern, [expression], [number_of_fields])&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sentence       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A horse walks into a bar.&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @words          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, $sentence); &lt;span style=&#34;color:#75715e&#34;&gt;# A,horse,walks,into,a,bar&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fullname       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mr Stephen Doyle&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Limit the split to two fields&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @title_and_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, $fullname, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# Mr,Stephen Doyle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quoting strings in Perl - even ones containing apostrophes and quote or speech marks</title>
      <link>http://localhost:1313/article/7/2013/3/30/Quoting-strings-in-Perl---even-ones-containing-apostrophes-and-quote-or-speech-marks/</link>
      <pubDate>Sat, 30 Mar 2013 18:49:41 +0000</pubDate>
      
      <guid>http://localhost:1313/article/7/2013/3/30/Quoting-strings-in-Perl---even-ones-containing-apostrophes-and-quote-or-speech-marks/</guid>
      <description>

&lt;p&gt;Broadly speaking Perl has two types of strings: quotes that are interpolated at runtime and literal quotes that are not interpolated. Let&amp;rsquo;s review each of these in turn.&lt;/p&gt;

&lt;h3 id=&#34;interpolated-strings&#34;&gt;Interpolated Strings&lt;/h3&gt;

&lt;p&gt;These strings are declared by encapsulating the quote in speech marks (&amp;ldquo;). If the encapsulated quote contains variables or escape-sequences, these will be processed at runtime.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $integer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#Declare an interpolated string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sentence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I will count to $integer.\nThen I am coming for you!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $sentence;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;I will count to &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; 
Then I am coming &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the $integer variable was interpolated to print it&amp;rsquo;s value, and how the newline escape sequence (\n) was applied too.&lt;/p&gt;

&lt;h3 id=&#34;literal-strings-not-interpolated&#34;&gt;Literal strings (not interpolated)&lt;/h3&gt;

&lt;p&gt;Literal strings need to be encapsulated by apostrophes (&amp;lsquo;). The content of these strings will be preserved as quoted, and not interpolated at runtime. Using literal strings is also more efficient as the Perl parser does not have to examine the the string for variables and escape sequences for interpolation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $integer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#Declare a literal string&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sentence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I will count to $integer.\nThen I am coming for you!&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $sentence;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;I will count to $integer&lt;span style=&#34;color:#f92672&#34;&gt;.\&lt;/span&gt;nThen I am coming &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;strings-that-contain-quote-speech-marks&#34;&gt;Strings that contain quote / speech marks&lt;/h3&gt;

&lt;p&gt;To quote a string that contains speech marks or apostrophes, Perl provides two quote operators: &lt;strong&gt;q&lt;/strong&gt; for literal quotes and &lt;strong&gt;qq&lt;/strong&gt; for interpolated quotes. The quote operators let the programmer define the encapsulating characters for the string - simply choose characters that are not contained in your string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sillymoose&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $difficult_string_interpolated &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qq{Welcome $user\n. Whilst you are are here, you can &amp;#34;do as they do in Rome&amp;#34; and enjoy yourself}&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $difficult_string_interpolated;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Welcome sillymoose
Whilst you are are here, you can &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;do as they do in Rome&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; enjoy yourself&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the example above used curly braces ({,}) to encapsulate the string, Perl will accept most symbol characters such as those on the top of your keyboard(!@£$%^&amp;amp;*-+). Contrary to popular belief, Perl &lt;strong&gt;will not accept any character&lt;/strong&gt; as the delimiter - the letters of the alphabet (a-z) do not work for example.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install a specific version of a Perl module with CPAN</title>
      <link>http://localhost:1313/article/4/2013/3/27/How-to-install-a-specific-version-of-a-Perl-module-with-CPAN/</link>
      <pubDate>Wed, 27 Mar 2013 23:32:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/4/2013/3/27/How-to-install-a-specific-version-of-a-Perl-module-with-CPAN/</guid>
      <description>&lt;p&gt;Perl modules are usually installed via CPAN on the command line. This is invoked with the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan My::Module&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPAN will always try to install the latest stable version of a module, which is a sensible default, however this may not always be the required behaviour. To have CPAN install a specific version of a module, you need to provide the full module distribution filename including the author. For example to install the module Set::Object version 1.28, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan SAMV&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Set&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find the distribution filename for a module by searching for the module on &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

