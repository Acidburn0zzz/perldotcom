<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/mac/</link>
    <description>Recent content in Mac on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2013 01:54:20 +0000</lastBuildDate>
    <atom:link href="/tags/mac/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to schedule Perl scripts using cron</title>
      <link>http://localhost:1313/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</link>
      <pubDate>Fri, 11 Oct 2013 01:54:20 +0000</pubDate>
      
      <guid>http://localhost:1313/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</guid>
      <description>

&lt;p&gt;Cron is a job scheduling program available on UNIX-like platforms. Most system commands can be scheduled including the execution of Perl programs. Once a job is setup, cron will run it as scheduled even if the user is not logged in, which can be a great way to automate sysadmin tasks or repetitive jobs. This article describes how to run Perl scripts with cron.&lt;/p&gt;

&lt;h3 id=&#34;perl-script-tips&#34;&gt;Perl script tips&lt;/h3&gt;

&lt;p&gt;When preparing a script to be run by cron, there a few things to keep in mind. You may want to add a shebang line to the of the script for the Perl binary you want to execute. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/local/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you plan to run the script on different platforms, you can omit the shebang line, as the location of the Perl binary may vary from platform to platform (more on this later).&lt;/p&gt;

&lt;p&gt;Also ensure that any paths used in the script are absolute paths (such as for opening filehandles, database connection strings and external program paths).&lt;/p&gt;

&lt;h3 id=&#34;setup-a-crontab&#34;&gt;Setup a crontab&lt;/h3&gt;

&lt;p&gt;To schedule a job with cron, the job needs to be added to the user&amp;rsquo;s crontab. To do this open a terminal and type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;crontab &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open the crontab in a text editor. To add a job, a line must be added in the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; command to be executed
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-----&lt;/span&gt; day of week  (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, Sunday&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-------&lt;/span&gt; month        (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+---------&lt;/span&gt; day of month (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-----------&lt;/span&gt; hour         (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;+-------------&lt;/span&gt; min          (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;)

An asterisk (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) means all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are some example crontab entries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# execute every minute&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; perl &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every 5 minutes&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/5 * * * * perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every hour at 0 minutes past the hour&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; perl &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every 12 hours at half past the hour&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/12 * * * perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your script does not contain a shebang line, provide the absolute path to the Perl binary in the crontab. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/12 * * * /&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;span style=&#34;color:#e6db74&#34;&gt;/perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the crontab and exit the text editor. To check the job has been scheduled, you can check your crontab with this command from the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;crontab &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print your current crontab to the terminal.&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting-cron&#34;&gt;Troubleshooting cron&lt;/h3&gt;

&lt;p&gt;Working with cron is usually straightforward, but if you are having difficulty getting the Perl script to run, check the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the cron log to be sure that cron is running the job as you expect. It is usually found here: /var/log/cron&lt;/li&gt;
&lt;li&gt;Check that you are providing the correct absolute path to the Perl binary. Either in the shebang line inside the script or in crontab (if you are not sure what this is type &amp;ldquo;which perl&amp;rdquo; at the terminal).&lt;/li&gt;
&lt;li&gt;Make sure the script permissions allow execution (e.g. &amp;ldquo;chmod +x /path/to/file&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;If you are running additional programs within the Perl script, consider adding their binary paths to the crontab as cron does not have the same PATH as the user.&lt;/li&gt;
&lt;li&gt;If you need to run a script as root, just create a crontab for root using sudo: &amp;ldquo;sudo crontab -e&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good list of general cron tips can be found &lt;a href=&#34;http://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Catch and Handle Signals in Perl</title>
      <link>http://localhost:1313/article/37/2013/8/18/Catch-and-Handle-Signals-in-Perl/</link>
      <pubDate>Sun, 18 Aug 2013 18:48:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/37/2013/8/18/Catch-and-Handle-Signals-in-Perl/</guid>
      <description>

&lt;p&gt;Signals are types of messages sent by an operating system to a process such as a Perl program. Signals provide a method for communicating with a process, for example when running a command line program pressing control-c will send the interrupt signal (&amp;lsquo;SIGINT&amp;rsquo;) to the program by default terminating it. Signals are often unexpected and if not handled can leave your Perl program or data in an unfinished state. This article describes some useful Perl programming tools for gracefully handling signals.&lt;/p&gt;

&lt;h3 id=&#34;method-1-the-sig-hash&#34;&gt;Method 1: The %SIG Hash&lt;/h3&gt;

&lt;p&gt;All Perl programs have the global variable %SIG hash which contains keys corresponding to each signal type. When a signal is sent to a Perl program, the value of the matching key name in %SIG is automatically de-referenced. This makes it possible to assign code references to handle specific signals by adding a coderef to the signal&amp;rsquo;s key value in %SIG. Let&amp;rsquo;s use an example Perl script called sleeper.pl to demonstrate. All sleeper.pl does is sleep for 20 seconds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s update sleeper.pl to handle an interrupt signal using %SIG:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

$SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught a sigint $!&amp;#34;&lt;/span&gt; };

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run sleeper.pl on the command line and press control-c to send a SIGINT to it, we can see the our code ref was executed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl sleeper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;CCaught a sig int Interrupted system call at projects&lt;span style=&#34;color:#e6db74&#34;&gt;/scripts/s&lt;/span&gt;leeper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl line &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By updating the various key-value pairs in %SIG it&amp;rsquo;s possible to handle specific signals, for example we can update sleeper.pl to handle a terminate signal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

$SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught a sigint $!&amp;#34;&lt;/span&gt; };
$SIG{TERM} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught a sigterm $!&amp;#34;&lt;/span&gt; };

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s often easier to define a signal handling subroutine rather than using anonymous subroutines for every signal you wish to catch. Let&amp;rsquo;s update sleeper.pl accordingly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

$SIG{INT}  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;amp;&lt;/span&gt;signal_handler;
$SIG{TERM} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;amp;&lt;/span&gt;signal_handler;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signal_handler&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught a signal $!&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the signal_handler subroutine will be called everytime sleeper.pl receives a SIGINT or SIGTERM signal. Using these techniques it&amp;rsquo;s possible to extend signal-handling behavior for all signals that you wish to be handled.&lt;/p&gt;

&lt;h3 id=&#34;method-2-sigtrap&#34;&gt;Method 2: sigtrap&lt;/h3&gt;

&lt;p&gt;sigtrap is a useful Perl pragma that makes handling signals easier than manipulating %SIG directly. The sigtrap pragma recognizes three groups of signals: normal-signals (HUP, PIPE, INT, TERM), error-signals (ABRT, BUS, EMT, FPE, ILL, QUIT, SEGV, SYS and TRAP) and old-interface-signals (ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT, SEGV, SYS, TERM, and TRAP). Using sigtrap we can update sleeper.pl to die when any of the normal-signals are received:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; sigtrap &lt;span style=&#34;color:#e6db74&#34;&gt;qw/die normal-signals/&lt;/span&gt;;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of calling die we can have sigtrap call the signal_handler routine that we defined previously:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; sigtrap &lt;span style=&#34;color:#e6db74&#34;&gt;qw/handler signal_handler normal-signals/&lt;/span&gt;;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signal_handler&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught a signal $!&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a lot more to sigtrap, check out the &lt;a href=&#34;https://perldoc.perl.org/sigtrap.html&#34;&gt;sigtrap perldoc entry&lt;/a&gt; for more details about its functionality.&lt;/p&gt;

&lt;h3 id=&#34;useful-signal-handling-behavior&#34;&gt;Useful signal handling behavior&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s common to call die when handling SIGINT and SIGTERM. die is useful because it will ensure that Perl stops correctly: for example Perl will execute a destructor method if present when die is called, but the destructor method will not be called if a SIGINT or SIGTERM is received and no signal handler calls die. Additional behaviors that are useful in a signal handling subroutine are stack tracing, event logging, thread termination and temporary file clean up. The correct behavior to define will depend on the type of signal received and the type of Perl program.&lt;/p&gt;

&lt;h3 id=&#34;posix-signals&#34;&gt;POSIX signals&lt;/h3&gt;

&lt;p&gt;Not every signal can be handled: on POSIX compliant systems (such as BSD, Linux and OSX) SIGSTOP and SIGKILL cannot be caught, blocked or ignored. See the &lt;a href=&#34;http://man7.org/linux/man-pages/man7/signal.7.html&#34;&gt;signal man page&lt;/a&gt; for further details. Not every signal needs to be handled - each signal has a default program behavior (disposition) which may not affect the running of the program (also defined on the man page). You can find a list of signals Perl recognizes by printing %SIG at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foreach (keys %SIG) { print &amp;#34;$_\n&amp;#34; }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;windows-signals&#34;&gt;Windows signals&lt;/h3&gt;

&lt;p&gt;Windows implements a subset of the standard POSIX signals. These signals can still be handled using the techniques described above. Microsoft have provided a list of these signals on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms811896#ucmgch09_topic3&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run local Perl as root</title>
      <link>http://localhost:1313/article/36/2013/8/10/Run-local-Perl-as-root/</link>
      <pubDate>Sat, 10 Aug 2013 14:33:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/36/2013/8/10/Run-local-Perl-as-root/</guid>
      <description>&lt;p&gt;This is a simple trick for conveniently running local Perl as a root user on UNIX-based systems.&lt;/p&gt;

&lt;p&gt;Occasionally it&amp;rsquo;s necessary to run locally-installed Perl as root. However at the command line if you type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the Perl that is executed is the system Perl binary. This can be problematic as the System Perl may not have the modules required, or even be the correct version of Perl that you need to run. An easy fix for this is to use the which command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By nesting which between a dollar sign parentheses, the terminal will resolve the command first, which returns a string to the local Perl binary. Sudo then operates on this binary instead of the system Perl binary. You can prove this with the following terminal commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;which perl
&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl

sudo which perl
&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl

sudo echo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl)
&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test if the user is root</title>
      <link>http://localhost:1313/article/16/2013/4/10/Test-if-the-user-is-root/</link>
      <pubDate>Wed, 10 Apr 2013 21:48:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/16/2013/4/10/Test-if-the-user-is-root/</guid>
      <description>&lt;p&gt;When Perl is executing a program, it maintains the user id of the process owner in a global variable ($&amp;lt;). When a Perl program is executed by root or a user with root privileges (e.g. using the sudo command), the user id variable is always set to zero. This can be checked at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print $&amp;lt; . \n;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
$ sudo perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print $&amp;lt; . \n;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the root user id is always zero and in Perl zero is treated as false, it is a trivial task to test if the user is root during runtime. This can be used to for flow control, such as exiting the program early:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Carp &lt;span style=&#34;color:#e6db74&#34;&gt;qw/croak/&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($&amp;lt;) {
    croak &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: exiting program as not executed by root\n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Windows the user id variable is always set to zero and is of limited use. However the Perl &lt;a href=&#34;https://metacpan.org/pod/Win32&#34;&gt;Win32&lt;/a&gt; module has the Win32::IsAdminUser() method that can be used instead of $&amp;lt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Win32;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Carp &lt;span style=&#34;color:#e6db74&#34;&gt;qw/croak/&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; Win32::IsAdminUser()) {
    croak &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: exiting program as not executed by root\n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacPerl Gains Ground</title>
      <link>http://localhost:1313/pub/1998/06/macperl.html/</link>
      <pubDate>Wed, 03 Jun 1998 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1998/06/macperl.html/</guid>
      <description>

&lt;h3 id=&#34;new-macperl-cd-rom-available&#34;&gt;New MacPerl CD-ROM Available&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich Morin (&lt;a href=&#34;mailto:rdm@cfcl.com&#34;&gt;rdm@cfcl.com&lt;/a&gt;) of Prime Time Freeware has produced the &lt;a href=&#34;http://www.ptf.com/macperl/ptf_book/cdrom.html&#34;&gt;MacPerl CD-ROM&lt;/a&gt;, a distribution of the Perl for the Macintosh along with other Mac tools and documentation. I asked him about the MacPerl community and we were soon joined in email by Matthias Ulrich Neeracher (&lt;a href=&#34;mailto:neeri@iis.ee.ethz.ch&#34;&gt;neeri@iis.ee.ethz.ch&lt;/a&gt;), who is the person primarily responsible for porting Perl to the Macintosh.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-s-the-size-of-the-macperl-user-community-and-its-percentage-of-the-whole-perl-community&#34;&gt;What&amp;rsquo;s the size of the MacPerl user community and its percentage of the whole Perl community?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Small, but we&amp;rsquo;re hoping to change that a little! The MacPerl email list numbers under 2000, so the total user population is unlikely to be more than 5000, at present. This is far smaller than the size one might predict, based on the 25 million or so Macintosh users that are out there. Consequently, it is also a small percetage of the total Perl community.
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;MacPerl Resources&lt;/strong&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Prime Time Freeware&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.ptf.com/macperl/&#34;&gt;MacPerl Page&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.ptf.com/MacPerl/ptf_book/cdrom.html/&#34;&gt;MacPerl CD-ROM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Matthias Neeracher&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.iis.ee.ethz.ch/~neeri/macintosh/perl.html&#34;&gt;MacPerl Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Perl Reference&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://reference.perl.com/query.cgi?mac&#34;&gt;Macintosh Links&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Matthias:&lt;/em&gt; In fact, it&amp;rsquo;s approximately 1000 and remains fairly stable. However, there seems to be a self-limiting effect at work here in that with more then 8-900 users, the list grows too noisy for some and they unsubscribe.&lt;/p&gt;

&lt;p&gt;Counting through mail logs, I found that at least 3500 different e-mail addresses were subscribed to the list at one point, so it&amp;rsquo;s plausible that 2500 to 3000 different people were subscribed to the list over the last 5 years.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very hard to estimate the number of users, since it&amp;rsquo;s impossible to estimate the percentage of them on the list. MacPerl has been distributed on several Mac Magazine CDs, especially in Japanese magazines, so it might have penetration well beyond the internet. My estimate is similar to Rich&amp;rsquo;s, in the 5-10,000 user range.&lt;/p&gt;

&lt;h3 id=&#34;in-some-ways-perl-and-the-mac-seem-to-be-at-opposite-ends-of-the-computing-spectrum&#34;&gt;In some ways, Perl and the Mac seem to be at opposite ends of the computing spectrum.&lt;/h3&gt;

&lt;p&gt;*Rich:*I think that part of the problem is based on the fact that Apple promotes Macs as machines that one does not have to program. The Macintosh audience, therefore, self-selects for non-programmers.
Also, because the Mac does not have a native command-based &amp;ldquo;shell&amp;rdquo; (discounting MPW, which is not a mass-market product), Mac users may not have experience in using textual commands of any sort.&lt;/p&gt;

&lt;p&gt;On the other hand, a great deal of Web development is done on the Mac platform, so MacPerl would seem to be a good fit. Also, many UNIX users keep Macs around for &amp;ldquo;productivity tools&amp;rdquo;. Some of these folks are likely to be interested in having a version of Perl for the Mac.&lt;/p&gt;

&lt;h3 id=&#34;with-macperl-you-can-run-any-perl-script-on-a-mac-this-helps-make-the-mac-more-unix-like-as-a-development-platform&#34;&gt;With MacPerl, you can run any perl script on a Mac. This helps make the Mac more UNIX-like as a development platform.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Well, almost any&amp;hellip; MacPerl does not support some of the Unix- specific features of Perl, such as backquotes (though a few idioms such as `pwd` are emulated). &lt;em&gt;Matthias:&lt;/em&gt; Backquotes themselves work, too, if you have MPW around. This is a real option now that MPW is free.&lt;/p&gt;

&lt;h3 id=&#34;can-you-talk-about-other-ways-mac-developers-are-using-perl&#34;&gt;Can you talk about other ways Mac developers are using Perl?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; MacPerl allows access to Apple Events, the Toolbox, and other Mac-specific capabilities. This lets them build Mac-specific applications to, for instance, grab data from a Mac database and process it for use on a Web page or in another Mac application.
&lt;em&gt;Matthias:&lt;/em&gt; To use one example that struck me as particularly odd, some people are apparently using MacPerl as a frontend to DNA sequence databases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; MacPerl also serves as an administrative scripting language for the Mac. Some tasks do not fit well in the interactive Macintosh paradigm (e.g., copy all the files with the extension &amp;lsquo;.html&amp;rsquo; to another directory); MacPerl makes it trivial to automate these tasks. In fact, MacPerl allows the creation of &amp;ldquo;droplets&amp;rdquo; (Perl scripts, packaged as applications, onto which the user can drag- and-drop files and folders.&lt;/p&gt;

&lt;p&gt;Vicki Brown and I are working, sporadically, on a package called &amp;lsquo;Mop&amp;rsquo; (Mother of perl), which adds Unix-like commands to a Perl- based shell. If we can get it to the point where we&amp;rsquo;re reasonably happy with it, we&amp;rsquo;ll talk about it on the MacPerl Pages and in the MacPerl book.&lt;/p&gt;

&lt;h3 id=&#34;macperl-allows-a-web-developer-to-run-cgi-applications-using-the-mac-as-the-platform-for-the-web-server&#34;&gt;MacPerl allows a Web developer to run CGI applications using the Mac as the platform for the Web server.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Although the Mac has many tools for creating CGI applications, a few grainy tasks will always require programming. MacPerl is a good answer for these. On the other hand, the Mac&amp;rsquo;s multitasking limitations can present performance problems. For instance, if a MacPerl-based CGI script goes off to calculate (or gets lost :-), no other script will be able to run for the duration&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-os-level-differences-between-macperl-and-other-implementations&#34;&gt;What are the OS-level differences between MacPerl and other implementations?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Mac OS does not support pre-emptive multitasking, pipes, fork or exec, hard links, relative symbolic links (read, aliases), really long file names (but see HFS+ in Mac OS 8.1 and Rhapsody!), or the use of devices as files (though MacPerl emulates some of these).&lt;/p&gt;

&lt;h3 id=&#34;isn-t-there-an-effort-underway-to-integrate-macperl-into-the-standard-perl-release-rather-than-having-separate-code-bases&#34;&gt;Isn&amp;rsquo;t there an effort underway to integrate MacPerl into the standard Perl release &amp;ndash; rather than having separate code bases?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Matthias bases each of his releases off a recent Perl release. The current release of MacPerl (5.1.9r4), for instance, is based on Perl 5.004. (Think of it as the 1.9th version of MacPerl on the 5.004 base.) I know that Matthias works with the other Perl porters, but I don&amp;rsquo;t know how much MacPerl code gets back into standard (read, Unix) Perl. Matthias, can you help clarify this?
&lt;em&gt;Matthias:&lt;/em&gt; On this issue, there is my theoretical position and OTOH the practical implementation.&lt;/p&gt;

&lt;p&gt;The theoretical position is that eventually, I&amp;rsquo;d like to have every file that occurs in both the Mac and standard Perl releases to be identical in both. I will *not* merge Mac specific files into the standard distribution (but will not stop anybody from doing so either), because that would enlarge the standard distribution a lot. The numbers that I came up with:&lt;/p&gt;

&lt;p&gt; 
Source File Size
Lines of Code
Mac specific core files
~20K
~1000
ext/MacPerl and ext/Mac
1M
&amp;gt;40000
MacPerl IDE (Application)
~600K
~23000*
* plus some binary files
(And with those, you&amp;rsquo;d still not have all sources you need to build MacPerl. There are a few non-Perl specific libraries needed in addition).&lt;/p&gt;

&lt;p&gt;Regarding the practical implementation of my theoretical position, I&amp;rsquo;m putting this off for &amp;ldquo;after I finish my PhD thesis&amp;rdquo; which, itself, has been a target far more moving than I&amp;rsquo;d like to admit.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

