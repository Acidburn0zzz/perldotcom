<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wss on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/wss/</link>
    <description>Recent content in Wss on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2018 09:12:57 +0000</lastBuildDate>
    <atom:link href="/tags/wss/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Real World Perl: Measuring Working Set Size</title>
      <link>http://localhost:1313/article/real-world-perl-measuring-working-set-size/</link>
      <pubDate>Thu, 18 Jan 2018 09:12:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/real-world-perl-measuring-working-set-size/</guid>
      <description>&lt;p&gt;Welcome to Real World Perl, a new series that aims to showcase uses of Perl out there &amp;ldquo;in the wild&amp;rdquo;. Each article will highlight something fun or interesting that somebody is doing with Perl. Got a suggestion for a Real World Perl example? &lt;a href=&#34;mailto:perl-com-editor@perl.org&#34;&gt;email me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s example comes from Brendan Gregg, whose new blog &lt;a href=&#34;http://www.brendangregg.com/blog/2018-01-17/measure-working-set-size.html&#34;&gt;post&lt;/a&gt; explains how to measure how much memory an application needs to keep working in Linux (the &amp;ldquo;Working Set Size&amp;rdquo;). An increased Working Set Size is one reason the Linux &lt;a href=&#34;https://fedoramagazine.org/kpti-new-kernel-feature-mitigate-meltdown/&#34;&gt;KPTI&lt;/a&gt; fix for &lt;a href=&#34;https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)&#34;&gt;Meltdown&lt;/a&gt; reduces application performance.&lt;/p&gt;

&lt;p&gt;One tool Brendan developed to measure this was &lt;a href=&#34;https://github.com/brendangregg/wss/blob/master/wss.pl&#34;&gt;wss.pl&lt;/a&gt;, a Perl script which accepts PID and duration seconds arguments to measure that process&amp;rsquo; Working Set Size. For example to measure my browser for 60 seconds, I enter the browser PID and 60:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./wss.pl 3479 60
Watching PID 3479 page references during 60 seconds...
Est(s)     RSS(MB)    PSS(MB)    Ref(MB)
60.068       52.28      14.68       4.59
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that 4.59 MB of memory was referenced by my browser process during the test.&lt;/p&gt;

&lt;p&gt;Brendan explained how the script works:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My wss.pl tool works by resetting a &amp;ldquo;referenced&amp;rdquo; flag on memory pages, and then checking later to see how many pages this flag returned to. I&amp;rsquo;m reminded of the old Unix page scanner, which would use a similar approach to find not-recently-used pages that are eligible for paging to the swap device (aka swapping). The referenced flag is really the &amp;ldquo;accessed&amp;rdquo; bit in the page table entry (PTE) which the processor normally updates anyway, and which can be read and cleared by the kernel (it&amp;rsquo;s _PAGE_ACCESSED in Linux).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;d like to know more about Working Size Set estimation, Brendan discusses it &lt;a href=&#34;http://www.brendangregg.com/wss.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Cover image from &lt;a href=&#34;https://pixabay.com/en/planet-earth-cosmos-continents-1457453/&#34;&gt;pixabay&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

