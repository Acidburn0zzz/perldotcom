<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pretty Printer on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pretty-printer/</link>
    <description>Recent content in Pretty Printer on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jul 2017 07:55:00 +0000</lastBuildDate>
    <atom:link href="/tags/pretty-printer/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pretty Printing Perl 6</title>
      <link>http://localhost:1313/article/pretty-printing-perl-6/</link>
      <pubDate>Wed, 26 Jul 2017 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/pretty-printing-perl-6/</guid>
      <description>&lt;p&gt;As I was working on &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;Learning Perl 6&lt;/a&gt;, I wanted a way to pretty print a hash to show the reader what happened. I didn&amp;rsquo;t want to output from the builtin routines and a module I found was a good start but needed more work. So I created the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I get to my module, Perl 6 already has some nice ways to summarize objects. My first task was to dump a match object to see what it matched. Here&amp;rsquo;s a bit of code that matches a string against a regex and saves the result in &lt;code&gt;$match&lt;/code&gt;. That&amp;rsquo;s a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I output that with &lt;a href=&#34;https://docs.perl6.org/routine/put&#34;&gt;put&lt;/a&gt;, I get the part of the string that matched:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could change the code slightly to use &lt;a href=&#34;https://docs.perl6.org/routine/say&#34;&gt;say&lt;/a&gt;. That&amp;rsquo;s like &lt;code&gt;put&lt;/code&gt; but calls the &lt;a href=&#34;https://docs.perl6.org/routine/gist&#34;&gt;.gist&lt;/a&gt; method on the object first to provide a human-compatible version of the object. Each object can decide on it&amp;rsquo;s own what that means.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match;  &lt;span style=&#34;color:#75715e&#34;&gt;# put $match.gist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the output is almost the same. There are some fancy quotes around it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｢c1｣
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of &lt;code&gt;.gist&lt;/code&gt;, which &lt;code&gt;say&lt;/code&gt; gives me for free, I could call the &lt;a href=&#34;https://docs.perl6.org/routine/perl&#34;&gt;perl&lt;/a&gt; method explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;put $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a string that represents what Perl 6 thinks the data structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;https://docs.perl6.org/programs/01-debugging#Dumper_function_dd&#34;&gt;dd&lt;/a&gt;, a Rakudo-specific dumping feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is similar to the string for &lt;code&gt;.perl&lt;/code&gt;, but also slightly different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match $match = Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t particularly like any of formats because they are squished together and rather ugly to my eyes (but being pleasing to me personally shows up in exactly zero designs). I looked for a module, and even though the Perl 6 module ecosystem is fairly young, I found &lt;a href=&#34;https://github.com/drforr/perl6-pp&#34;&gt;Pretty::Printer&lt;/a&gt; from Jeff Goff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pretty::Printer; &lt;span style=&#34;color:#75715e&#34;&gt;# From Jeff Goff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

Pretty::Printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pp: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, I didn&amp;rsquo;t get anything (or, more exactly, I got literally &amp;ldquo;anything&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Any
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Pretty::Printer&lt;/code&gt; was nice for the few data types that it handled, but not a &lt;code&gt;Match&lt;/code&gt; object. It had some builtin handlers that it selected with a &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth) }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth) }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started to work on &lt;code&gt;Pretty::Printer&lt;/code&gt; to add a &lt;code&gt;Match&lt;/code&gt; handler, and then a few others, but I quickly realized I was getting far away from Jeff&amp;rsquo;s original code. Not only that, but I didn&amp;rsquo;t want to add more and more branches to the &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check more derived types first.&lt;/span&gt;
    when Match   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Match($ds,$depth) }
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth)  }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Map     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Map($ds,$depth) }
    when List    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth)  }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I changed my module name to &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump&lt;/a&gt; and ended up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was much more pleased with the output which allowed me easily pick out the part of the object I wanted to inspect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(
  :from(5),
  :hash(Map.new()),
  :list($()),
  :made(Mu),
  :orig(&amp;quot;:::abc123::&amp;quot;),
  :pos(7),
  :to(7)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solves that problem. But what about all the other types? One of my first improvements was a way to dump a class that my module did not know about. I knew about the &lt;code&gt;TO_JSON&lt;/code&gt; method that the Perl 5 &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; module. With that, a class could decide its own JSON representation. I could do that with &lt;code&gt;PrettyDump&lt;/code&gt;. If a class or object has a &lt;code&gt;PrettyDump&lt;/code&gt; method, my module will use that preferentially:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class SomeClass {
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
    method PrettyDump ( $pretty, $ds, $depth ) {
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
        }
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class doesn&amp;rsquo;t need to define that method. I could decorate an object with a &lt;code&gt;PrettyDump&lt;/code&gt; method through a role. The &lt;a href=&#34;https://docs.perl6.org/language/operators#infix_but&#34;&gt;but&lt;/a&gt; operator can do that for me by creating a new object in a new class that includes that role mixed into the original class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Int $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $a but role {
  method PrettyDump ( $pretty, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({self.^name}) {self}&amp;#34;&lt;/span&gt;;
    }
  };
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $b;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code looks different from Jeff&amp;rsquo;s, but it&amp;rsquo;s not that different. Instead of a &lt;code&gt;given-when&lt;/code&gt;, I have an &lt;code&gt;if&lt;/code&gt; structure. I collapsed Jeff&amp;rsquo;s branches into &lt;code&gt;self.can: $ds.^name&lt;/code&gt; to look for a matching method to the object type (and introduced a bug while doing it. See it?). The first branch looks for the &lt;code&gt;PrettyDump&lt;/code&gt; method. The second does some special handling for numeric things. If none of those work, I &lt;code&gt;die&lt;/code&gt;, which is another stupid thing I did at first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
  put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In dump. Got &amp;#34;&lt;/span&gt;, $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Numeric: $ds, $depth;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not handle &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I kept going. I wanted a way to add (and remove) handlers to a &lt;code&gt;PrettyDump&lt;/code&gt; object. I could add those as roles, but I thought about doing this repeatedly and often and didn&amp;rsquo;t like the idea of the frankenclass that would create. I added a way to do it on my own (although I might change my mind later):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

class SomeClass { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $pretty, $ds, Int $depth = 0 ) {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  }

$pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;handler: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SomeClass&amp;#39;&lt;/span&gt;, $handler;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code added a couple more branches (and some code comments to elucidate the process). First, I&amp;rsquo;d look for a handler. If I&amp;rsquo;d defined one of those, I&amp;rsquo;d use it. Otherwise, I went through the same process. I did add some more checks at the end. If nothing else worked, I try a &lt;code&gt;.Str&lt;/code&gt; method. Instead of &lt;code&gt;die&lt;/code&gt;-ing at the end, I add an &amp;ldquo;unhandled thingy&amp;rdquo; string for that object. That way I know that I didn&amp;rsquo;t handle something and the rest of the program keeps going. That turned out to be more important than I thought. I use this to peek at a program as it executes. It&amp;rsquo;s not part of the program flow and shouldn&amp;rsquo;t interrupt it because my dumping code is incomplete:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, Int $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Str ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the PrettyDump object has a user-defined handler&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for this type, prefer that one&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handles: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;handle: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# The object might have its own method to dump&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# its structure&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
      $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s any sort of Numeric, we&amp;#39;ll handle it&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# and dispatch further&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Numeric: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we have a method name that matches the class, we&amp;#39;ll&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# use that.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
      self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the class inherits from something that we know&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# about, use the most specific one that we know about&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep( { self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $_&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $type {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $type&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can( $what );
        $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;(
         $ds, $depth, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$ds.^name}.new(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
        }
      $str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we&amp;#39;re this far and the object has a .Str method,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# we&amp;#39;ll use that:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Str&amp;#39;&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({$ds.^name}): &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, we&amp;#39;ll put a placeholder method there&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Unhandled {$ds.^name})&amp;#34;&lt;/span&gt;
      }
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I got further into this code, I looked at Perl 5&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;, but discovered that this isn&amp;rsquo;t the same sort of thing. That module outputs Perl code that I could &lt;a href=&#34;https://perldoc.perl.org/functions/eval.html&#34;&gt;eval&lt;/a&gt; to get back the same data structure. I didn&amp;rsquo;t want that &lt;a href=&#34;https://www.masteringperl.org/2012/12/the-storable-security-problem/&#34;&gt;can of worms&lt;/a&gt; in my module.&lt;/p&gt;

&lt;p&gt;Beyond what I&amp;rsquo;ve shown here, I&amp;rsquo;ve been fiddling with formatting and other minor things as I run into problems. If there&amp;rsquo;s something that you&amp;rsquo;d like to do with the code, you can contribute through the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump GitHub repo&lt;/a&gt;, or even fork my code as the basis for your own experiments.&lt;/p&gt;

&lt;p&gt;(Part of this work was supported by a travel grant from &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. I presented talks about my work at &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/pretty-dump-perl-6&#34;&gt;Amsterdam.pm&lt;/a&gt;, &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/dumping-perl-6-french-perl-workshop&#34;&gt;French Perl Workshop 2017&lt;/a&gt;, and &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/prettydump-perl-6-londonpm&#34;&gt;London.pm&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

