<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Internals on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-internals/</link>
    <description>Recent content in Perl Internals on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Oct 2019 12:07:00 +0000</lastBuildDate>
    <atom:link href="/tags/perl-internals/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My Perl Wishlist: Invariant Sigils (Part 1)</title>
      <link>http://localhost:1313/article/my-perl-wishlist-invariant-sigils-part-1/</link>
      <pubDate>Sun, 27 Oct 2019 12:07:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/my-perl-wishlist-invariant-sigils-part-1/</guid>
      <description>

&lt;p&gt;Pop quiz!  Q: What was my mistake in this line?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is %HASH{answer}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forty-two&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%HASH properly filled&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A: I had the answer right, but I messed up the sigil on &lt;code&gt;HASH&lt;/code&gt;.  It
should be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is $HASH{answer}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forty-two&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%HASH properly filled&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#  ^ $, not %&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, on Perl v5.20+, both statements work the same way!  I
didn&amp;rsquo;t catch the problem until I shipped this code and
&lt;a href=&#34;http://matrix.cpantesters.org/?dist=vars-i+1.08-TRIAL&#34;&gt;cpantesters&lt;/a&gt;
showed me my mistake.  It was an easy fix, but it reminded me that Perl&amp;rsquo;s
&lt;a href=&#34;http://modernperlbooks.com/books/modern_perl/chapter_03.html#variablenamesandsigils&#34;&gt;variant sigils&lt;/a&gt;
can trip up programmers at any level.  If I could change one thing about
Perl 5, I would change to invariant sigils.&lt;/p&gt;

&lt;h2 id=&#34;the-current-situation&#34;&gt;The current situation&lt;/h2&gt;

&lt;p&gt;In Perl, the sigil tells you
&lt;a href=&#34;https://perldoc.perl.org/perlintro.html#Perl-variable-types&#34;&gt;how many things to expect&lt;/a&gt;.
Scalars such as &lt;code&gt;$foo&lt;/code&gt; are single values.  Any single value in an array
&lt;code&gt;@foo&lt;/code&gt; or hash &lt;code&gt;%foo&lt;/code&gt;, since it is only one thing,
&lt;a href=&#34;https://perldoc.perl.org/perldata.html#Variable-names&#34;&gt;also uses &lt;code&gt;$&lt;/code&gt;&lt;/a&gt;,
so &lt;code&gt;$foo&lt;/code&gt;, &lt;code&gt;@foo&lt;/code&gt;, and &lt;code&gt;%foo&lt;/code&gt; could all refer to different pieces of the
same variable &amp;mdash; or to different variables.
This technique of &amp;ldquo;variant sigils&amp;rdquo; works, but confuses
new Perl users and tripped up yours truly.  To know what you
are accessing in an array or hash, you have to look at both the sigil
and the brackets.  As a reminder:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sigil&lt;/th&gt;
&lt;th&gt;No brackets&lt;/th&gt;
&lt;th&gt;&lt;code&gt;[ ]&lt;/code&gt; (array access)&lt;/th&gt;
&lt;th&gt;&lt;code&gt;{ }&lt;/code&gt; (hash access)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z&lt;/code&gt;: a scalar, i.e., a single value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z[0]&lt;/code&gt;: the first element of array &lt;code&gt;@z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z{0}&lt;/code&gt;: the value in hash &lt;code&gt;%z&lt;/code&gt; at key &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z&lt;/code&gt;: An array, i.e., a list of value(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z[0, 1]&lt;/code&gt;: the list &lt;code&gt;($z[0], $z[1])&lt;/code&gt; of two elements from &lt;code&gt;@z&lt;/code&gt; (an &amp;ldquo;array slice&amp;rdquo;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z{0, &amp;quot;foo&amp;quot;}&lt;/code&gt;: the list &lt;code&gt;($z{0}, $z{foo})&lt;/code&gt; of two elements from hash &lt;code&gt;%z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;: A hash, i.e., a list of key/value pair(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z[0, 1]&lt;/code&gt;: the list &lt;code&gt;(0, $z[0], 1, $z[1])&lt;/code&gt; of keys and two values from array &lt;code&gt;@z&lt;/code&gt; (a &amp;ldquo;hash slice&amp;rdquo;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z{0, &amp;quot;foo&amp;quot;}&lt;/code&gt;: the list &lt;code&gt;(&amp;quot;0&amp;quot;, $z{0}, &amp;quot;foo&amp;quot;, $z{foo})&lt;/code&gt; of keys and values from hash &lt;code&gt;%z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;make-the-sigils-part-of-the-name&#34;&gt;Make the sigils part of the name&lt;/h2&gt;

&lt;p&gt;To save myself from repeating my errors, I&amp;rsquo;d like the sigil to be part of a
variable&amp;rsquo;s name.  This is not a new idea; scalars work this way in Perl, bash,
and &lt;a href=&#34;https://docs.perl6.org/language/101-basics#sigil_and_identifier&#34;&gt;Raku&lt;/a&gt;
(&lt;a href=&#34;https://github.com/perl6/problem-solving/blob/master/solutions/language/Path-to-Raku.md&#34;&gt;formerly Perl 6&lt;/a&gt;).
That would make the above table look like:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sigil&lt;/th&gt;
&lt;th&gt;No brackets&lt;/th&gt;
&lt;th&gt;&lt;code&gt;[ ]&lt;/code&gt; (array access)&lt;/th&gt;
&lt;th&gt;&lt;code&gt;{ }&lt;/code&gt; (hash access)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z&lt;/code&gt;: a scalar, i.e., a single value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z[0]&lt;/code&gt;: N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z{0}&lt;/code&gt;: N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z&lt;/code&gt;: An array, i.e., a list of value(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z[0]&lt;/code&gt;: the first element of &lt;code&gt;@z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z{0}&lt;/code&gt;: N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;: A hash, i.e., a list of key/value pair(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z[0]&lt;/code&gt;: N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z{0}&lt;/code&gt;: the value in hash &lt;code&gt;%z&lt;/code&gt; at key &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Simpler!  Any reference to &lt;code&gt;@z&lt;/code&gt; would always be doing &lt;em&gt;something&lt;/em&gt; with
the array named &lt;code&gt;@z&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;but-what-about-slices&#34;&gt;But what about slices?&lt;/h2&gt;

&lt;p&gt;Slices such as &lt;code&gt;@z[0,1]&lt;/code&gt; and &lt;code&gt;%z{qw(hello there)}&lt;/code&gt; return multiple
values from an array or hash.  If sigils &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; are no longer
available for slicing, we need an alternative.
The Perl family currently provides two models: postfix dereferencing
(&amp;ldquo;postderef&amp;rdquo;) syntax and postfix adverbs.&lt;/p&gt;

&lt;p&gt;Perl v5.20+ support
&lt;a href=&#34;https://www.effectiveperlprogramming.com/2014/09/use-postfix-dereferencing/&#34;&gt;postderef&lt;/a&gt;,
which gives us one option.  Postderef separates the name from the slice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Valid Perl v5.20+&lt;/span&gt;
$hashref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{a};      &lt;span style=&#34;color:#75715e&#34;&gt;# Scalar, element at index &amp;#34;a&amp;#34; of the hash pointed to by $hashref&lt;/span&gt;
$hashref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{a};     &lt;span style=&#34;color:#75715e&#34;&gt;# List including the &amp;#34;a&amp;#34; element of the hash pointed to by $hashref&lt;/span&gt;
$hashref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;%{a};     &lt;span style=&#34;color:#75715e&#34;&gt;# List including the key &amp;#34;a&amp;#34; and the &amp;#34;a&amp;#34; element of the hash pointed to by $hashref&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type of slice comes after the reference, instead of as a sigil
before the reference.  With non-references, that idea would give us slice
syntax such as &lt;code&gt;@array@[1,2,3]&lt;/code&gt; or &lt;code&gt;%hash%{a}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Raku gives us another option: &amp;ldquo;adverbs&amp;rdquo; such as
&lt;a href=&#34;https://docs.perl6.org/language/subscripts#:kv&#34;&gt;&lt;code&gt;:kv&lt;/code&gt;&lt;/a&gt;.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Valid Raku
%hash{&amp;#34;a&amp;#34;}          # Single value, element at index &amp;#34;a&amp;#34; of %hash
%hash{&amp;#34;a&amp;#34;}:v;       # The same --- just the value
%hash{&amp;#34;a&amp;#34;}:kv;      # The list including key &amp;#34;a&amp;#34; and the value of the &amp;#34;a&amp;#34; element of %hash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The adverb (e.g., &lt;code&gt;:kv&lt;/code&gt;) goes in postfix position, immediately
after the brackets or braces.  Following this model,
slices would look like &lt;code&gt;@array[1,2,3]:l&lt;/code&gt; or &lt;code&gt;%hash{a}:kv&lt;/code&gt;.  (For clarity,
I propose &lt;code&gt;:l&lt;/code&gt;, as in &lt;strong&gt;l&lt;/strong&gt;ist, instead of Raku&amp;rsquo;s &lt;code&gt;:v&lt;/code&gt;.  Raku&amp;rsquo;s &lt;code&gt;:v&lt;/code&gt; can return
a scalar or a list.)&lt;/p&gt;

&lt;p&gt;So, the choices I see are (postderef-inspired / Raku-inspired):&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;What you want&lt;/th&gt;
&lt;th&gt;No subscript&lt;/th&gt;
&lt;th&gt;&lt;code&gt;[ ]&lt;/code&gt; access&lt;/th&gt;
&lt;th&gt;&lt;code&gt;{ }&lt;/code&gt; access&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Scalar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$z&lt;/code&gt;: a scalar, i.e., a single value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z[0]&lt;/code&gt;: a single value from an array&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z{0}&lt;/code&gt;: the value in hash &lt;code&gt;%z&lt;/code&gt; at key &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;List of values&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z&lt;/code&gt;: an array, i.e., a list of value(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z@[0, 1]&lt;/code&gt; / &lt;code&gt;@z[0, 1]:l&lt;/code&gt;: the list currently written &lt;code&gt;($z[0], $z[1])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z@{0, &amp;quot;foo&amp;quot;}&lt;/code&gt; / &lt;code&gt;%z{0, &amp;quot;foo&amp;quot;}:l&lt;/code&gt;: the list currently written &lt;code&gt;($z{0}, $z{foo})&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;List of key/value pairs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z&lt;/code&gt;: a hash, i.e., a list of key/value pair(s)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@z%[0, 1]&lt;/code&gt; / &lt;code&gt;@z[0, 1]:kv&lt;/code&gt;: the list currently written &lt;code&gt;(0, $z[0], 1, $z[1])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%z%{0, &amp;quot;foo&amp;quot;}&lt;/code&gt; / &lt;code&gt;%z{0, &amp;quot;foo&amp;quot;}:kv&lt;/code&gt;: the list currently written &lt;code&gt;(&amp;quot;0&amp;quot;, $z{0}, &amp;quot;foo&amp;quot;, $z{foo})&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;you-can-t-always-get-what-you-want&#34;&gt;You can&amp;rsquo;t always get what you want&lt;/h2&gt;

&lt;p&gt;I prefer the adverb syntax.  It is easy to read, and it draws on
all the expertise that has gone into the design of Raku.
However, my preference has to be implementable.
I&amp;rsquo;m not convinced that it is without major surgery.&lt;/p&gt;

&lt;p&gt;The Perl parser decides how to interpret what is inside the brackets
depending on the context provided by the slice.
The parser interprets the &lt;code&gt;...&lt;/code&gt; in &lt;code&gt;@foo[...]&lt;/code&gt; as
a list (&lt;a href=&#34;https://github.com/Perl/perl5/blob/c58ad1f93e9ad7834d3735683462c07119aa87f5/perly.y#L1143-L1148&#34;&gt;ref&lt;/a&gt;).
In &lt;code&gt;$foo[...]&lt;/code&gt;, the parser sees the &lt;code&gt;...&lt;/code&gt; as a scalar expression
(&lt;a href=&#34;https://github.com/Perl/perl5/blob/c58ad1f93e9ad7834d3735683462c07119aa87f5/perly.y#L958-L960&#34;&gt;ref&lt;/a&gt;).
For any slice syntax, the Perl parser needs to know the desired
type of result while parsing the subscript expression.  The adverb form,
unfortunately, leaves the parser guessing until after the subscript
is parsed.&lt;/p&gt;

&lt;p&gt;You can, in fact, hack the Perl parser to save the subscript
until it sees a postfix adverb.  The parser can then apply the correct
context.  I wrote a
&lt;a href=&#34;https://github.com/Perl/perl5/compare/9786385e68f7f14df6f4dd0f04d2c72c0d9a2511...cxw42:3cd904788536b445c9c3abe9b469e1b569942051&#34;&gt;proof-of-concept&lt;/a&gt;
for &lt;code&gt;@arr[expr]:v&lt;/code&gt;.  It doesn&amp;rsquo;t execute any code, but it does parse
a postfix-adverb slice without crashing!  However, while writing that code,
I ran across a surprise: new syntax isn&amp;rsquo;t tied to a &lt;code&gt;use v5.xx&lt;/code&gt;
directive.&lt;/p&gt;

&lt;p&gt;It turns out the Perl parser lets code written against any Perl version
use the latest syntax.  Both of the following command lines work on Perl v5.30:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ perl -Mstrict -Mwarnings -E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my $z; $z-&amp;gt;@* = 10..20&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                           ^ -E: use all the latest features
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$ perl -Mstrict -Mwarnings -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my $z; $z-&amp;gt;@* = 10..20&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# (!!!)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;#                           ^ -e: not the latest features&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second command line does not &lt;code&gt;use v5.30&lt;/code&gt;, so you can&amp;rsquo;t use &lt;code&gt;say&lt;/code&gt;
(introduced in v5.10).  However, you can use postderef (from v5.20)!&lt;/p&gt;

&lt;p&gt;Because the parser lets old programs use new syntax, any proposed addition
to Perl&amp;rsquo;s syntax has to be meaningless in all previous Perl versions.
A postfix adverb fails this test.  For example, the following is a valid
Perl program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kv&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kv&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ? @arr[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]:kv;
        &lt;span style=&#34;color:#75715e&#34;&gt;# ^^^^^^^^^^^^ valid Perl 5 syntax, but not a slice :(&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My preferred slice syntax could change the meaning of existing programs,
so it looks like I can&amp;rsquo;t get my first choice.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;This is not the end of the story!  In Part 2, I will dig deeper into
Perl&amp;rsquo;s parser and tokenizer.  I will share some surprises I discovered
while investigating postderef.  I will then describe a possible path
to invariant sigils and the simplicity they can provide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hidden Gems of Perl.com</title>
      <link>http://localhost:1313/article/hidden-gems-of-perl-com/</link>
      <pubDate>Thu, 04 Jan 2018 09:00:06 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hidden-gems-of-perl-com/</guid>
      <description>

&lt;p&gt;A few months ago, as I was familiarizing myself with the old Perl.com source material, I kept getting distracted by these wonderful articles that I hadn&amp;rsquo;t read before. Now that the site has relaunched, and the old articles lovingly restored, I thought I&amp;rsquo;d share a few of these hidden gems with you.&lt;/p&gt;

&lt;h3 id=&#34;here-be-wizards&#34;&gt;Here be Wizards&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Where Wizards Fear to Tread&lt;/em&gt; was a brief, perlguts-focused series started by &lt;a href=&#34;https://www.perl.com/authors/simon-cozens/&#34;&gt;Simon Cozens&lt;/a&gt;. This particular &lt;a href=&#34;http://localhost:1313/pub/2002/05/07/optree.html/&#34;&gt;article&lt;/a&gt; discusses the Perl op tree.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to rekindle this series. If you have a Perl internals article that you&amp;rsquo;d like to write, please get in touch with &lt;a href=&#34;mailto:perl.com-editor@perl.org&#34;&gt;me&lt;/a&gt; or see our contributing &lt;a href=&#34;https://github.com/dnmfarrell/perldotcom/blob/master/CONTRIBUTING.md&#34;&gt;guide&lt;/a&gt; and send us a pull request with a draft article.&lt;/p&gt;

&lt;h3 id=&#34;naughty-perl&#34;&gt;Naughty Perl&lt;/h3&gt;

&lt;p&gt;In the old Perl.com source code, I came across several raw documents which didn&amp;rsquo;t appear to have been officially published on the site, but did contain good content. For example &lt;a href=&#34;https://www.perl.com/authors/tom-christiansen/&#34;&gt;Tom Christiansen&amp;rsquo;s&lt;/a&gt; article &lt;a href=&#34;http://localhost:1313/doc/FMTEYEWTK/versus/perl.html/&#34;&gt;The Seven Deadly Sins of Perl&lt;/a&gt; is a fun read worthy of your time. Can you count how many of the &amp;ldquo;sins&amp;rdquo; have been addressed since then?&lt;/p&gt;

&lt;h3 id=&#34;just-code-it-in-perl-6&#34;&gt;Just code it in Perl (6)?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/06/27/ctoperl.html/&#34;&gt;Why not Translate Perl to C?&lt;/a&gt; is a sobering reminder by &lt;a href=&#34;https://www.perl.com/authors/mark-jason-dominus/&#34;&gt;Mark Jason Dominus&lt;/a&gt; that re-writing Perl as C often won&amp;rsquo;t yield faster programs. The article ends with optimistic speculation that Perl 6 may use gradual typing and static data structures to deliver better performance. Fast-forward a few years, and good news! Perl 6 supports &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/18/day-18-sized-typed-shaped/&#34;&gt;sized and typed data structures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MJD regularly blogs at his own &lt;a href=&#34;https://blog.plover.com/&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;state-of-the-onion&#34;&gt;State of the Onion&lt;/h3&gt;

&lt;p&gt;Larry has a good number of &lt;a href=&#34;https://www.perl.com/authors/larry-wall/&#34;&gt;articles&lt;/a&gt; on Perl.com, including some of the oldest. The &lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html/&#34;&gt;2nd State of the Onion&lt;/a&gt; was published way back in August 1998, and it&amp;rsquo;s still an entertaining read (or re-read if you&amp;rsquo;ve forgotten it).&lt;/p&gt;

&lt;h3 id=&#34;more-to-come&#34;&gt;More to come&lt;/h3&gt;

&lt;p&gt;There are more articles to recommend, but for the sake of brevity I&amp;rsquo;ll stop here. In the meantime feel free to explore the site; you never know, you might stumble upon another &amp;hellip; hidden gem!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hidden-gems-of-perl-com/indiana-stone.jpg&#34; alt=&#34;Indiana Jones discovers treasure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Cover image by &lt;a href=&#34;http://i.imgur.com/4VOS6iz.png&#34;&gt;Shachar Harshuv&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Where Wizards Fear To Tread</title>
      <link>http://localhost:1313/pub/2002/05/07/optree.html/</link>
      <pubDate>Tue, 07 May 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/05/07/optree.html/</guid>
      <description>

&lt;p&gt;So you&amp;rsquo;re a Perl master. You&amp;rsquo;ve got XS sorted. You know how the internals work. Hey, there&amp;rsquo;s nothing we can teach you on perl.com that you don&amp;rsquo;t already know. You think? Where Wizards Fear To Tread brings you the information you won&amp;rsquo;t find anywhere else concerning the very top level of Perl hackery.&lt;/p&gt;

&lt;h3 id=&#34;span-id-putting-down-your-roots-putting-down-your-roots-span&#34;&gt;&lt;span id=&#34;putting down your roots&#34;&gt;Putting Down Your Roots&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This month, we look at the Perl op tree. Every Perl program is compiled into an internal representation before it is executed. Functions, subroutine calls, variable accesses, control structures, and all that makes up a Perl program, are converted into a series of different fundamental operations (&lt;em&gt;ops&lt;/em&gt;) and these ops are strung together into a tree data structure.&lt;/p&gt;

&lt;p&gt;For more on the different types of ops available, how they fit together, and how to manipulate them with the &lt;a href=&#34;https://metacpan.org/pod/B&#34;&gt;B&lt;/a&gt; compiler module, look at the &lt;a href=&#34;https://web.archive.org/web/20050205214309/http://www.netthink.co.uk:80/downloads/internals/&#34;&gt;Perl 5 internals tutorial&lt;/a&gt;. Right now, though, we&amp;rsquo;re going to take things a step further.&lt;/p&gt;

&lt;h3 id=&#34;span-id-b-and-beyond-with-b-utils-b-and-beyond-with-b-utils-span&#34;&gt;&lt;span id=&#34;b and beyond with b::utils&#34;&gt;B and Beyond With B::Utils&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;B&lt;/code&gt; module allows us to get at a wealth of information about an op, but it can become incredibly frustrating to know which op you want to deal with, and to perform simple manipulation on a range of ops. It also offers limited functionality for navigating around the op tree, meaning that you need to hold onto a load of additional state about which op is where. This gets complicated quickly. Finally, it&amp;rsquo;s not easy to get at the op trees for particular subroutines, or indeed, all subroutines both named and anonymous.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/B::Utils&#34;&gt;B::Utils&lt;/a&gt; was created at the request of Michael Schwern to address these issues. It offers much more high-level functionality for navigating through the tree, such as the ability to move &amp;ldquo;upward&amp;rdquo; or &amp;ldquo;backward&amp;rdquo;, to return the old name of an op that has currently been optimized away, to get a list of the op&amp;rsquo;s children, and so on. It can return arrays of anonymous subroutines, and hashes of subroutine op roots and starts. It also contains functions for walking through the op tree from various starting points in various orders, optionally filtering out ops that don&amp;rsquo;t match certain conditions; while performing actions on ops, &lt;code&gt;B::Utils&lt;/code&gt; provides &lt;code&gt;carp&lt;/code&gt; and &lt;code&gt;croak&lt;/code&gt; routines which perform error reporting from the point of view of the original source code.&lt;/p&gt;

&lt;p&gt;But one of the most useful functions provided by &lt;code&gt;B::Utils&lt;/code&gt; is the &lt;code&gt;opgrep&lt;/code&gt; routine. This allows you to filter a series of ops based on a pattern that represents their attributes and their position in a tree. The major advantage over doing it yourself is that &lt;code&gt;opgrep&lt;/code&gt; takes care of making sure that the attributes are present before testing them - the seasoned &lt;code&gt;B&lt;/code&gt; user is likely to be accustomed to the carnage that results from accidentally trying to call &lt;code&gt;name&lt;/code&gt; on a &lt;code&gt;B::NULL&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;For instance, we can find all the subroutine calls in a program with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;walkallops_filtered (
    sub { opgrep( { name =&amp;gt; &amp;quot;entersub&amp;quot; }, @_) },
    sub { print &amp;quot;Found one: $_[0]\n&amp;quot;; }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;opgrep&lt;/code&gt; supports alternation and negation of attribute queries. For instance, here are all the scalar variable accesses, whether to globals or lexicals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@svs = opgrep ( { name =&amp;gt; [&amp;quot;padsv&amp;quot;, &amp;quot;gvsv&amp;quot;] }, @ops)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And as for checking an op&amp;rsquo;s position in the tree, here are all the &lt;code&gt;exec&lt;/code&gt; ops followed by a &lt;code&gt;nextstate&lt;/code&gt; and then followed by something other than &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; or &lt;code&gt;die&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;walkallops_filtered(
    sub { opgrep( {
                      name =&amp;gt; &amp;quot;exec&amp;quot;,
                      next =&amp;gt; {
                         name    =&amp;gt; &amp;quot;nextstate&amp;quot;,
                         sibling =&amp;gt; {
                                       name =&amp;gt; [qw(! exit warn die)]
                                    }
                              }
                  }, @_)},
    sub {
          carp(&amp;quot;Statement unlikely to be reached&amp;quot;);
          carp(&amp;quot;\t(Maybe you meant system() when you said exec()?)\n&amp;quot;);
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-don-t-do-that-do-this-don-t-do-that-do-this-span&#34;&gt;&lt;span id=&#34;don&#39;t do that, do this&#34;&gt;Don&amp;rsquo;t Do That, Do This&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So, what can we do with all this? The answer is, of course, &amp;ldquo;anything we want&amp;rdquo;. If you can mess about with the op tree, then you have complete control over Perl&amp;rsquo;s operation. Let&amp;rsquo;s take an example.&lt;/p&gt;

&lt;p&gt;Damian Conway recently released the &lt;a href=&#34;https://metacpan.org/pod/Acme::Don::t&#34;&gt;Acme::Don&amp;rsquo;t&lt;/a&gt; module, which doesn&amp;rsquo;t do anything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;don&#39;t { print &amp;quot;Something\n&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;doesn&amp;rsquo;t print anything. Very clever. But not clever enough. You see, I like double negatives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $x = 1;
don&#39;t { print &amp;quot;Something\n&amp;quot; } unless $x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;doesn&amp;rsquo;t print anything either, and if you like double negatives, then you might agree that it should print something. But how on earth are we going to get Perl to do something when a test proves false? By messing about with the op tree, of course.&lt;/p&gt;

&lt;p&gt;The way to solve any problem like this is to think about the op tree that we&amp;rsquo;ve currently got, work out what we&amp;rsquo;d rather do instead, and work out the differences between the op trees. Then, we write something that looks for a given pattern in a program&amp;rsquo;s op tree and modifies it to be what we want.&lt;/p&gt;

&lt;p&gt;There are several ways of achieving what we actually want to get but the simplest one is this: add a second parameter to &lt;code&gt;don&#39;t&lt;/code&gt; which, if set, actually &lt;em&gt;does&lt;/em&gt; do the code. This allows us to replace any occurrence of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;don&#39;t { print &amp;quot;Something\n&amp;quot; } if (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;don&#39;t(sub { print &amp;quot;Something\n&amp;quot; }, 1) unless (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s now look at this in terms of op trees. Here&amp;rsquo;s the relevant part of the op tree for &lt;code&gt;don&#39;t { ... } if $x&lt;/code&gt;, produced by running &lt;code&gt;perl -MO=Terse&lt;/code&gt; and then using &lt;code&gt;sed&lt;/code&gt; to trim out to unsightly hex addresses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UNOP  null
        LOGOP  and
            UNOP  null [15]
                SVOP  *x
            UNOP  entersub [2]
                UNOP  null [141]
                    OP  pushmark
                    UNOP  refgen
                        UNOP  null [141]
                            OP  pushmark
                            SVOP  anoncode  SPECIAL #0 Nullsv
                    UNOP  null [17]
                        SVOP  *don::t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, the &lt;code&gt;if&lt;/code&gt; is represented as an &lt;code&gt;and&lt;/code&gt; op internally, which makes sense if you think about it. The two &amp;ldquo;legs&amp;rdquo; of the &lt;code&gt;and&lt;/code&gt;, called &amp;ldquo;first&amp;rdquo; and &amp;ldquo;other&amp;rdquo; are a call to fetch the value of &lt;code&gt;$c&lt;/code&gt;, and a subroutine call. Look at the subroutine call closely: the ops &amp;ldquo;inside&amp;rdquo; this set up a mark to say where the parameters start, push a reference to anonymous code (that&amp;rsquo;s our &lt;code&gt;{ ... }&lt;/code&gt;) onto the stack, and then push the glob for &lt;code&gt;*don::t&lt;/code&gt; on there.&lt;/p&gt;

&lt;p&gt;So, we need to do two things: We need to insert another parameter between &lt;code&gt;refgen&lt;/code&gt; and the &lt;code&gt;null&lt;/code&gt; attached to &lt;code&gt;*don::t&lt;/code&gt;, and we need to invert the sense of the test.&lt;/p&gt;

&lt;p&gt;Now we know what we&amp;rsquo;ve got to do, let&amp;rsquo;s start doing it - remember our solution: stage one, write code to find the pattern.&lt;/p&gt;

&lt;p&gt;This is actually pretty simple: We&amp;rsquo;re looking for either an &lt;code&gt;and&lt;/code&gt; or an &lt;code&gt;or&lt;/code&gt; op, and the &amp;ldquo;other&amp;rdquo; leg of the op is going to be a call to &lt;code&gt;*don::t&lt;/code&gt;. However, we have to be a bit clever here, since Perl internally performs a few optimizations on the op tree that even the &lt;code&gt;B::*&lt;/code&gt; reporting modules don&amp;rsquo;t tell you about. When Perl threads the &lt;code&gt;next&lt;/code&gt; pointers around an op tree, it does something special for a short-circuiting binary op like &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; - it sets the &lt;code&gt;other&lt;/code&gt; pointer to be not the first sibling in the tree, but the first op in execution order. In this case, that&amp;rsquo;s &lt;code&gt;pushmark&lt;/code&gt;, as we can see from running &lt;code&gt;B::Terse,exec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LOGOP (0x80fa008) and
    AND =&amp;gt; {
        OP (0x80f9f88) pushmark
        OP (0x80f9f20) pushmark
        SVOP (0x80f9ec0) anoncode  SPECIAL #0 Nullsv
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this knowledge, we can create a pattern to pass to &lt;code&gt;opgrep&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        name =&amp;gt; [&amp;quot;and&amp;quot;, &amp;quot;or&amp;quot;],
        other =&amp;gt; {
            name =&amp;gt; &amp;quot;pushmark&amp;quot;,
            sibling =&amp;gt; { next =&amp;gt; { name =&amp;gt; &amp;quot;gv&amp;quot; }}
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, this doesn&amp;rsquo;t tell us the whole story, since we actually need to check that the subroutine call &lt;strong&gt;is&lt;/strong&gt; to &lt;code&gt;don&#39;t&lt;/code&gt;, rather than to any other given subroutine that might be called conditionally. Hence, our filter looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub {
    my $op = shift;
    opgrep(
        {
            name =&amp;gt; [&amp;quot;and&amp;quot;, &amp;quot;or&amp;quot;],
            other =&amp;gt; {
                name =&amp;gt; &amp;quot;pushmark&amp;quot;,
                sibling =&amp;gt; { next =&amp;gt; { name =&amp;gt; &amp;quot;gv&amp;quot; }}
            }
        }, $op) or return;
    my $gv = $op-&amp;gt;other-&amp;gt;sibling-&amp;gt;next-&amp;gt;gv;
    return unless $gv-&amp;gt;STASH-&amp;gt;NAME eq &amp;quot;don&amp;quot; and $gv-&amp;gt;NAME eq &amp;quot;t&amp;quot;;
    return 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We grab the GV (we know exactly where it&amp;rsquo;s going to be because of our pattern!) and test that it&amp;rsquo;s in the &lt;code&gt;don&lt;/code&gt; stash and is called &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Part one done - we have located the ops that we want to change. Now how on earth do we change ops in an op tree?&lt;/p&gt;

&lt;h3 id=&#34;span-id-fixing-it-up-with-b-generate-fixing-it-up-with-b-generate-span&#34;&gt;&lt;span id=&#34;fixing it up with b::generate&#34;&gt;Fixing It Up With B::Generate&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;B::Generate&lt;/code&gt; was written to allow users to create their own ops and insert them into the op tree. The original intent was to be able to create bytecode for other languages to be run on the Perl virtual machine, but it&amp;rsquo;s found plenty of use manipulating existing Perl op trees.&lt;/p&gt;

&lt;p&gt;It provides &amp;ldquo;constructor&amp;rdquo; methods in all of the &lt;code&gt;B::*OP&lt;/code&gt; classes, and makes many of the accessor methods read-write instead of read-only. Let&amp;rsquo;s see how we can apply it to this problem. Remember that we want to negate the sense of the test, and then to add another argument to the call to &lt;code&gt;don&#39;t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the first of these tasks, &lt;code&gt;B::Generate&lt;/code&gt; provides the handy &lt;code&gt;mutate&lt;/code&gt; and &lt;code&gt;convert&lt;/code&gt; methods on each &lt;code&gt;B::OP&lt;/code&gt;-derived object to change one op&amp;rsquo;s type into another. The decision as to which of them use is slightly complex: &lt;code&gt;mutate&lt;/code&gt; can only be used for ops of the same type - for instance, you cannot use it to mutate a binary op into a unary op. However, &lt;code&gt;convert&lt;/code&gt; produces a completely new op, which needs to be threaded back into the op tree. So &lt;code&gt;convert&lt;/code&gt; is much more powerful, but &lt;code&gt;mutate&lt;/code&gt; is much more convenient. In this case, since we&amp;rsquo;re just flipping between &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;, we can get away with using &lt;code&gt;mutate&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require B::Generate;
my $op = shift;
if ($op-&amp;gt;name eq &amp;quot;and&amp;quot;) {
    $op-&amp;gt;mutate(&amp;quot;or&amp;quot;);
} else {
    $op-&amp;gt;mutate(&amp;quot;and&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to insert the additional parameter. For this, remember that &lt;code&gt;entersub&lt;/code&gt; works by popping off the top entry in the stack and calling that as a subroutine, and the remaining stack entries become parameters to the subroutine. So we want to add a &lt;code&gt;const&lt;/code&gt; op to put a constant on the stack. We use the &lt;code&gt;B::SVOP-&amp;gt;new&lt;/code&gt; constructor to create a new one, and then thread the &lt;code&gt;next&lt;/code&gt; pointers so that Perl&amp;rsquo;s main loop will call it between &lt;code&gt;$op-&amp;gt;other-&amp;gt;sibling&lt;/code&gt; (the &lt;code&gt;refgen&lt;/code&gt; op) and the op after it. (the GV which represents &lt;code&gt;*don::t&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $to_insert = $op-&amp;gt;other-&amp;gt;sibling;
my $newop = B::SVOP-&amp;gt;new(&amp;quot;const&amp;quot;, 0, 1);
$newop-&amp;gt;next($to_insert-&amp;gt;next);
$to_insert-&amp;gt;next($newop);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that&amp;rsquo;s left is to replace the definition of &lt;code&gt;don&#39;t&lt;/code&gt; so that, depending on the parameters, it sometimes &lt;code&gt;do&lt;/code&gt;es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub don&#39;t (&amp;amp;;$) { $_[0]-&amp;gt;() if $_[1] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there we have it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Acme::Don&#39;t;
CHECK {
    use B::Utils qw(opgrep walkallops_filtered);
    walkallops_filtered(
        sub {
            my $op = shift;
            opgrep(
            {
                name =&amp;gt; [&amp;quot;and&amp;quot;, &amp;quot;or&amp;quot;],
                other =&amp;gt; {
                    name =&amp;gt; &amp;quot;pushmark&amp;quot;,
                    sibling =&amp;gt; { next =&amp;gt; { name =&amp;gt; &amp;quot;gv&amp;quot; }}
                }
            }, $op) or return;
            my $gv = $op-&amp;gt;other-&amp;gt;sibling-&amp;gt;next-&amp;gt;gv;
            return unless $gv-&amp;gt;STASH-&amp;gt;NAME eq &amp;quot;don&amp;quot; and $gv-&amp;gt;NAME eq &amp;quot;t&amp;quot;;
            return 1;
        },
        sub {
            require B::Generate;
            my $op = shift;
            if ($op-&amp;gt;name eq &amp;quot;and&amp;quot;) {
                $op-&amp;gt;mutate(&amp;quot;or&amp;quot;);
            } else {
                $op-&amp;gt;mutate(&amp;quot;and&amp;quot;);
            }

            my $to_insert = $op-&amp;gt;other-&amp;gt;sibling;
            my $newop = B::SVOP-&amp;gt;new(&amp;quot;const&amp;quot;, 0, 1);
            $newop-&amp;gt;next($to_insert-&amp;gt;next);
            $to_insert-&amp;gt;next($newop);
        }
   );
}

sub don&#39;t (&amp;amp;;$) { $_[0]-&amp;gt;() if $_[1] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will turn&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$false = 0; $true = 1;

don&#39;t { print &amp;quot;Testing&amp;quot; } if $false;
don&#39;t { print &amp;quot;Testing again&amp;quot; } unless $true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$false = 0; $true = 1;

don&#39;t(sub { print &amp;quot;Testing&amp;quot; }, 1) unless $false;
don&#39;t(sub { print &amp;quot;Testing again&amp;quot; }, 1) if $true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;setting off the conditions and making &lt;code&gt;don&#39;t&lt;/code&gt; do the code. A neat trick? We think so.&lt;/p&gt;

&lt;h3 id=&#34;span-id-where-to-from-here-where-to-from-here-span&#34;&gt;&lt;span id=&#34;where to from here&#34;&gt;Where To From Here?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;But that&amp;rsquo;s not all! And, of course, this doesn&amp;rsquo;t cater for some of the more complex constructions people can create, such as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($x) {
    do_something();
    don&#39;t { do_the_other_thing() };
    do_something_else();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($x) {
    do_that();
    don&#39;t { do_this() }
} else {
    do_the_other();
    don&#39;t { do_something_else() }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this can be solved in just the same way. For instance, you want to turn the first one into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($x) {
    do_something();
    do_something_else();
} else {
    don&#39;t(sub { do_the_other_thing() }, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the second into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($x) {
    do_that();
    don&#39;t(sub { do_something_else() }, 1);
} else {
    do_the_other();
    don&#39;t(sub { do_this() }, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both of these transformations can be done by applying the method above: compare the op trees, work out the difference, find the pattern you want to look for, then write some code to manipulate the op tree into the desired output. An easy task for the interested reader &amp;hellip;&lt;/p&gt;

&lt;p&gt;And we really haven&amp;rsquo;t scratched the surface of what can be done with &lt;code&gt;B::Generate&lt;/code&gt; and &lt;code&gt;B::Utils&lt;/code&gt;; the &lt;code&gt;B::Generate&lt;/code&gt; test suite shows what sort of mayhem can be caused to existing Perl programs, and there have been experiments using &lt;code&gt;B::Generate&lt;/code&gt; to generate op trees for other languages - a &lt;code&gt;B::Generate&lt;/code&gt; port of Leon Brocard&amp;rsquo;s &lt;a href=&#34;http://www.sourceforge.net/projects/shiny&#34;&gt;shiny&lt;/a&gt; Ruby interpreter could produce Perl bytecode for simple Ruby programs; &lt;code&gt;chromatic&lt;/code&gt; is working on an idea to turn Perl programs into XML, manipulate them and use &lt;code&gt;B::Generate&lt;/code&gt; to turn them back into Perl op trees.&lt;/p&gt;

&lt;p&gt;Later in our &amp;ldquo;Where Wizards Fear To Tread&amp;rdquo; series, we&amp;rsquo;ll have articles about Perl and Java interaction, &lt;code&gt;iThreads&lt;/code&gt;, and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sapphire</title>
      <link>http://localhost:1313/pub/2000/09/sapphire.html/</link>
      <pubDate>Tue, 19 Sep 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/09/sapphire.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;sapphire  another gem of an idea&#34;&gt;&lt;/span&gt;
&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;a href=&#34;#design%20principles&#34;&gt;Design Principles&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#so,%20uh,%20what%20is%20it&#34;&gt;So, uh, what is it?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#where%20did%20it%20get&#34;&gt;Where did it get?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#what%20else%20can%20be%20done&#34;&gt;What else can be done?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#what%20can&amp;#39;t%20be%20done&#34;&gt;What can&#39;t be done?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#structure%20of%20a%20sapphire&#34;&gt;Structure of a Sapphire&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#the%20future%20of%20sapphire&#34;&gt;The future of Sapphire&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#reflections%20through%20a%20sapphire&#34;&gt;Reflections through a Sapphire&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Naming languages after stones is getting a bit old-hat these days. We all know and love Perl; you might have heard of the &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby language&lt;/a&gt;, which I&amp;rsquo;ll talk more about another time. There&amp;rsquo;s also Chip Salzenberg&amp;rsquo;s Topaz project, an idea to rewrite Perl in C++, which ended with the announcement of the Perl 6 effort. And now, there&amp;rsquo;s Sapphire. So what&amp;rsquo;s this all about?&lt;/p&gt;

&lt;p&gt;Sapphire is one of the many projects which was started purely and simply to prove a point. In this case, the point was that building a large program from scratch in this day and age is crazy. I was going to prove it by showing how rapidly software can be developed when using established libraries, and &lt;strong&gt;that&lt;/strong&gt; was done by seeing how quickly I could rewrite Perl 5.&lt;/p&gt;

&lt;p&gt;Also, as a secondary goal, I wanted to show the flexibility of some of my design ideas for Perl 6. It&amp;rsquo;s dangerous when people are sitting around for a long time discussing software design without implementations, without benchmarks and without a single line of code. I prefer getting up and doing something rather than talking about it. So I was going to show my ideas in software, not in words.&lt;/p&gt;

&lt;h3 id=&#34;span-id-design-principles-design-principles-span&#34;&gt;&lt;span id=&#34;design principles&#34;&gt;Design Principles&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Here are some of the ideas I was intending to showcase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Being_Good_Open_Source_Citizens&#34;&gt;Being Good Open-Source Citizens&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What do I mean by this? Perl 5 is extremely self-sufficient. Once you&amp;rsquo;ve got the source kit, it&amp;rsquo;ll compile anywhere, on almost any platform and requiring very few ``support&amp;rdquo; libraries. It&amp;rsquo;ll make do with what you have. One of the unfortunate side-effects of this is that if Perl wants to do something, it implements it itself. As a result, Perl contains a load of interesting routines, but keeps them to itself. It also doesn&amp;rsquo;t use any of the perfectly fine implementations of those interesting routines which are already out there.&lt;/p&gt;

&lt;p&gt;Some people think this is a feature; I think it&amp;rsquo;s a wart. If we can give things back to the open-source community, and work with them to help improve their tools, then everyone benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Generalising_Solutions&#34;&gt;Generalizing Solutions&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the great design choices of Perl 5 which appears to have been completely and utterly rejected in the discussions on Perl 6&amp;rsquo;s proposed language is that we do things in the most general way possible. This is why Perl doesn&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; huge numbers of new built-ins - it just needs a way to make user-defined syntax with the same status as built-ins. It doesn&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; beautiful new OO programming models - it just needs a way to help people write their own OO models. Sapphire tries to do things in the most general way possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Modularity&#34;&gt;Modularity&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perl 5 consists of a number of parts, including a stunning regular expression engine and a decent way of dealing with multityped variables. Unfortunately, in the current implementation, these parts are all highly interdependent in twisty ways. Separating them out into modules means that you can test them independently, distribute them as independent libraries, and upgrade them independently.&lt;/p&gt;

&lt;p&gt;Seems like a winner to me!&lt;/p&gt;

&lt;h3 id=&#34;span-id-so-uh-what-is-it-so-uh-what-is-it-span&#34;&gt;&lt;span id=&#34;so, uh, what is it&#34;&gt;So, uh, what is it?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Sapphire, then, is a partial implementation of the Perl 5 API. I wasn&amp;rsquo;t setting out to create a new interpreter, although that would have been necessary for some of the API routines, such as those which execute Perl code. What I wanted was to re-create the programming environment which Perl 5 gives you internally - a sort of ``super C,&amp;rdquo; a C customized for creating things such as Perl interpreters.&lt;/p&gt;

&lt;p&gt;Specifically, I wasn&amp;rsquo;t trying to do anything new. I &lt;em&gt;like&lt;/em&gt; Perl 5. It has a lot going for it. Of course, it could be tidier, since five years of cruft have accumulated all around it now. It could be less quirky, and it could display the design goals I have just mentioned. That&amp;rsquo;s what I wanted to do.&lt;/p&gt;

&lt;h3 id=&#34;span-id-where-did-it-get-where-did-it-get-span&#34;&gt;&lt;span id=&#34;where did it get&#34;&gt;Where did it get?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I gave myself a week. I was going to hack on it for one week, and see where that got me. I didn&amp;rsquo;t spend a lot of time on it, but I still managed to achieve a fair amount: I had scalars, arrays and hashes working, as well as Unicode manipulation to the level of Perl 5 and slightly beyond.&lt;/p&gt;

&lt;p&gt;How? Well, I started by looking at the glib library, at &lt;a href=&#34;http://developer.gnome.org/doc/API/glib/&#34;&gt;http://developer.gnome.org/doc/API/glib/.&lt;/a&gt; This provided a fantastic amount of what I needed. The &lt;code&gt;GPtrArray&lt;/code&gt; corresponds nicely with a Perl &lt;code&gt;AV&lt;/code&gt;, and glib also implements hashes, which saved a lot of time, although to have &lt;code&gt;HE&lt;/code&gt;s (hash entries) you need to dig a little into the glib source.&lt;/p&gt;

&lt;p&gt;All the Unicode support was there. I initially used GNOME&amp;rsquo;s libunicode, but then found that the development version of glib added UTF8 support and was much easier to deal with. There were a few functions I needed which Perl 5 already had, and I&amp;rsquo;ll be pushing those back to the glib maintainers for potential inclusion.&lt;/p&gt;

&lt;p&gt;Perl uses a lot of internal variable types to ensure portability - an &lt;code&gt;I32&lt;/code&gt; is an integer type guaranteed to be 32 bits, no matter where it runs. Not surprisingly, I didn&amp;rsquo;t have much work to do there, since glib provides a family of types, such as &lt;code&gt;gint32&lt;/code&gt;, to do the same thing. Differing byte orders are also catered for. The ``super C&amp;rdquo; environment the Perl 5 API provides is largely out there, in existing code.&lt;/p&gt;

&lt;p&gt;Oh, and let&amp;rsquo;s be honest: There was one large piece of existing code that was just &lt;em&gt;too&lt;/em&gt; tempting not to use, and that was Perl itself. When you&amp;rsquo;re trying to replicate something and you&amp;rsquo;ve got a working version in front of you, it&amp;rsquo;s tricky not to borrow from it; it seems a shame to throw away five years of work without looking for what can be salvaged from it. A lot of the scalar handling code came from Perl 5, although I did rearrange it and make it a lot more sensible and maintainable. I wasn&amp;rsquo;t just interested in developing with external libraries. I also wanted to see if I could correct some other misfeatures of Perl&amp;rsquo;s internals.&lt;/p&gt;

&lt;p&gt;The first problem to solve was the insidious use of macros on macros on macros. The way I went about this was by first outlawing lvalue macros. That is, for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SvPVX(sv) = &amp;quot;foo&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;had to turn into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sv_setpv(sv, &amp;quot;foo&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Incidentally, this is how &lt;em&gt;perlapi&lt;/em&gt; says it should be done. Perl 5 often optimizes for speed (sometimes too enthusiastically) at the expense of maintainability - Sapphire questions that trade-off, preferring to trust compiler optimization and Moore&amp;rsquo;s Law.&lt;/p&gt;

&lt;p&gt;Next, I wrote a reasonably sophisticated Perl program to convert inline functions into macros. That is, it would take
        #ifdef EXPAND_MACROS
        INLINE void sv_setpv (SV* sv, char * pv) {
           ((XPV*)  SvANY(sv))-&amp;gt;xpv_pv = pv;
        }
        #endif&lt;/p&gt;

&lt;p&gt;and turn it, automatically, into:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #ifdef EXPAND_MACROS
    #ifdef EXPAND_HERE
    INLINE void sv_setpv (SV* sv, char * pv) {
       ((XPV*)  SvANY(sv))-&amp;gt;xpv_pv = pv;
    }
    #endif
    #else
    #define sv_setpv(sv, pv) ((XPV*)  SvANY(sv))-&amp;gt;xpv_pv = pv
    #endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can choose whether your macros should be expanded by flipping on &lt;code&gt;-DEXPAND_MACROS&lt;/code&gt; and whether they should be inline by playing with &lt;code&gt;-DINLINE&lt;/code&gt;. But what&amp;rsquo;s &lt;code&gt;EXPAND_HERE&lt;/code&gt; for? Well, the above code snippet would go into an include file, maybe &lt;code&gt;sv.h&lt;/code&gt;, and one C file - let&amp;rsquo;s call it &lt;em&gt;sv_inline.c&lt;/em&gt; - would contain the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #include &amp;lt;sapphire.h&amp;gt;
    #define EXPAND_HERE
    #include &amp;lt;sv.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then if &lt;code&gt;EXPAND_MACROS&lt;/code&gt; was defined, the function definitions would all be provided in one place; if macros were not expanded, &lt;code&gt;sv_inline.c&lt;/code&gt; would define no functions. The function prototypes would be extracted automatically with &lt;a href=&#34;https://metacpan.org/pod/C::Scan&#34;&gt;C::Scan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the state of compiler optimization these days, it&amp;rsquo;s likely that turning everything into macros makes no significant speed difference. In which case, it&amp;rsquo;s best to turn on &lt;code&gt;EXPAND_MACROS&lt;/code&gt; to assist with source-level debuggers which cannot read macros. However, you can&amp;rsquo;t tell until you benchmark, and the ``optional expansion&amp;rdquo; method gives you a nice easy way to do that.&lt;/p&gt;

&lt;p&gt;I also took a swipe at memory allocation; it seems the first job in every large project is to write your own memory allocator. I had heard from perl5-porters and other places that the biggest speed overhead in XS routines is SV creation, so I wrote an allocator which would maintain pools of ready-to-ship variables, refreshing the pools when there was nothing else to do, like a McDonald&amp;rsquo;s burger line.&lt;/p&gt;

&lt;h3 id=&#34;span-id-what-else-can-be-done-what-else-can-be-done-span&#34;&gt;&lt;span id=&#34;what else can be done&#34;&gt;What else can be done?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If I had given myself two weeks, where would I be? Sticking with glib, I could very easily have safe signal handling, portable loadable module support, a main event dispatch loop and a safe threading model. It&amp;rsquo;s all there, ready to go. It&amp;rsquo;s free software, and that&amp;rsquo;s just one library.&lt;/p&gt;

&lt;p&gt;To be honest, I wouldn&amp;rsquo;t advocate the use of glib for everything I could do with it. For example, I replaced Perl&amp;rsquo;s main run loop &lt;code&gt;Perl_runops_standard&lt;/code&gt; in &lt;em&gt;run.c&lt;/em&gt;) with a &lt;code&gt;GMainLoop&lt;/code&gt; and benchmarked the two. The glib version, although signal safe, was at least five times slower. (However, you may want to contemplate what it means for graphical application programming if you have, effectively, a GNOME event loop right there in your interpreter.)&lt;/p&gt;

&lt;p&gt;Heavier Unicode support would probably need libunicode. What about regular expressions? Well, the glib developers are working on a fully Unicode-aware Perl-compatible regular expression library (which, frankly, is more than we have). If they don&amp;rsquo;t finish that, &lt;a href=&#34;ftp://ftp.cus.cam.ac.uk/pub/software/programs/pcre/&#34;&gt;Philip Hazel&amp;rsquo;s Perl Compatible Regular Expression library&lt;/a&gt; does exactly what it says on the tin.&lt;/p&gt;

&lt;h3 id=&#34;span-id-what-can-t-be-done-what-can-t-be-done-span&#34;&gt;&lt;span id=&#34;what can&#39;t be done&#34;&gt;What can&amp;rsquo;t be done?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There are some areas of Perl&amp;rsquo;s programming environment where I&amp;rsquo;m not aware of a pre-existing solution. For instance, &lt;em&gt;scope.c&lt;/em&gt; in the Perl source distribution gives C the concept of ``dynamic scope,&amp;rdquo; allowing you to save variables and restore them at the end of a block, just like the &lt;code&gt;local&lt;/code&gt; operator in Perl.&lt;/p&gt;

&lt;p&gt;And some problems just can&amp;rsquo;t be solved in C. There&amp;rsquo;s no good way, for instance, to get a partitioned namespace. I didn&amp;rsquo;t bother trying. Once you&amp;rsquo;ve told the developer what the API is, it&amp;rsquo;s his responsibility to ensure it works.&lt;/p&gt;

&lt;p&gt;On the other hand, C is not meant to be a language that gives you this type of support. Some would argue that C++ solves these problems, but in my experience, C++ never solves anything.&lt;/p&gt;

&lt;h3 id=&#34;span-id-structure-of-a-sapphire-structure-of-a-sapphire-span&#34;&gt;&lt;span id=&#34;structure of a sapphire&#34;&gt;Structure of a Sapphire&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As I&amp;rsquo;ve mentioned, I tried to plan the structure of Sapphire along modular lines, so that pieces could be tested individually and upgraded. My proposed structure was a series of libraries, like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libsvar&#34;&gt;&lt;code&gt;libsvar&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Standing for ``Sapphire variables,&amp;rdquo; &lt;code&gt;libsvar&lt;/code&gt; contains all the functions for manipulating SVs, AVs and HVs. This is an interesting library in its own right which can be used for programming outside of the Sapphire environment - having SVs in an ordinary C program without the overhead of a Perl interpreter really expands your programming possibilities, and, as far as I&amp;rsquo;m aware, there isn&amp;rsquo;t a good variable-handling library around.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libre&#34;&gt;&lt;code&gt;libre&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The regular expression engine would be separated into its own library, again so that external applications can use it without an entire Perl interpreter. I didn&amp;rsquo;t implement this myself, leaving it to PCRE or glib to provide this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libutf8&#34;&gt;&lt;code&gt;libutf8&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, we can split off the Unicode handling functions into their own library, although this functionality can be implemented by libunicode or glib.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libscope&#34;&gt;&lt;code&gt;libscope&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The present-day &lt;em&gt;scope.c&lt;/em&gt; and &lt;em&gt;scope.h&lt;/em&gt; solve a problem in C by giving it dynamic scoping; this is something that contributes to the friendliness of the Perl programming environment, and something we can separate and share.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libpp&#34;&gt;&lt;code&gt;libpp&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although this wouldn&amp;rsquo;t be useful outside of Sapphire, &lt;code&gt;libpp&lt;/code&gt; would contain the ``push-pop&amp;rdquo; code which runs the operations inside the interpreter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_libutil&#34;&gt;&lt;code&gt;libutil&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Libutil&lt;/code&gt; would contain everything else which was potentially useful outside of Sapphire - the memory allocation, the stack manipulation and so on.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-future-of-sapphire-the-future-of-sapphire-span&#34;&gt;&lt;span id=&#34;the future of sapphire&#34;&gt;The future of Sapphire&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So, what am I going to do with Sapphire now? To be honest, nothing at all. I hope it has served its purpose by presenting the argument for reusable code and stable design principles.&lt;/p&gt;

&lt;p&gt;I certainly don&amp;rsquo;t, at present, want to be placed in a position where I&amp;rsquo;m choosing between spending time fiddling with Sapphire and spending time contributing to coding Perl 6. Please understand: Sapphire is emphatically not intended to be a fork of Perl, merely an interesting interlude, and this is shown by the fact that I didn&amp;rsquo;t try to make any exciting changes.&lt;/p&gt;

&lt;p&gt;If anyone has some interesting ideas on how to take this ball and run with it, feel free. It&amp;rsquo;s free software, and this is exactly what you should be doing. Contact me if you&amp;rsquo;d like a copy of the source.&lt;/p&gt;

&lt;p&gt;I do have some thoughts on what my next experiment is going to be, however &amp;hellip; .&lt;/p&gt;

&lt;h3 id=&#34;span-id-reflections-through-a-sapphire-reflections-through-a-sapphire-span&#34;&gt;&lt;span id=&#34;reflections through a sapphire&#34;&gt;Reflections through a Sapphire&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;What have I learned from all this? I&amp;rsquo;ve learned a lot about the structure of Perl 5. I&amp;rsquo;ve realized that roughly half of it is support infrastructure for the other half, the business half. Is this good or bad? Well, it certainly means that we&amp;rsquo;re not beholden to anyone else - an external library may suddenly change its implementation, semantics or interface, and Sapphire would have to struggle to catch up. Perhaps it&amp;rsquo;s all about control. By implementing everything ourselves, the porters retain control over Perl.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also learned that Perl 5, internally, has a lot to share, yet, even though we claim to believe in code reuse where the CPAN&amp;rsquo;s concerned, we do very little of it on a lower level, neither really giving nor really taking.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned that rapid development can come out of a number of things. First, having external code already written to do the work for you helps a lot, even though you don&amp;rsquo;t have much control over it.&lt;/p&gt;

&lt;p&gt;Second, having an existing implementation of what you&amp;rsquo;re trying to program also helps, although you have to walk a fine line. Taking Perl 5 code wholesale meant I either had to do a lot of surgery or support things I didn&amp;rsquo;t really want to support, but ignoring the whole of the existing code base would feel like throwing the baby out with the bathwater. (Hence I would caution the Perl 6 internals people to thresh carefully the Perl 5 code; there is some wheat in that chaff, or else you wouldn&amp;rsquo;t be using it &amp;hellip; .)&lt;/p&gt;

&lt;p&gt;Finally, rapid development can come from having a well-organized and disciplined team. My team swiftly agreed on all matters of design and implementation and got down to coding without interminable and fruitless discussions, taking unanimous decisions on how to get around problems - because I was my team.&lt;/p&gt;

&lt;p&gt;Would I say the Sapphire experiment was a success? Well, since it taught me all the above, it certainly couldn&amp;rsquo;t have been a failure. Did it prove the point that developing with reusable code is worth the sacrifice in terms of control? That remains to be seen.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

