<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test2 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/test2/</link>
    <description>Recent content in Test2 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Sep 2019 17:18:24 +0000</lastBuildDate>
    <atom:link href="/tags/test2/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - August 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</link>
      <pubDate>Tue, 10 Sep 2019 17:18:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::GoShippo&#34;&gt;WebService::GoShippo&lt;/a&gt; is a simple client for Shippo&amp;rsquo;s shipping and handling API&lt;/li&gt;
&lt;li&gt;Use Google&amp;rsquo;s CloudTasks API to queue up tasks with &lt;a href=&#34;https://metacpan.org/pod/Google::CloudTasks&#34;&gt;Google::CloudTasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manage machines and software using the Puppet Enterprise API with &lt;a href=&#34;https://metacpan.org/pod/Puppet::Classify&#34;&gt;Puppet::Classify&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Puppet::Orchestrator&#34;&gt;Puppet::Orchestrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure 433 MHz HC-12 Radio Frequency serial transceivers with &lt;a href=&#34;https://metacpan.org/pod/RF::HC12&#34;&gt;RF::HC12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PlantUML&#34;&gt;WWW::PlantUML&lt;/a&gt; is a simple client for retrieving diagram URLs from a plantuml server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parse ldap config files with &lt;a href=&#34;https://metacpan.org/pod/Config::Parser::ldap&#34;&gt;Config::Parser::ldap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use XOAUTH2 authentication with Net::POP3 via &lt;a href=&#34;https://metacpan.org/pod/Net::POP3::XOAuth2&#34;&gt;Net::POP3::XOAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenBSD::Checkpass&#34;&gt;OpenBSD::Checkpass&lt;/a&gt; provides an interface to OpenBSD crypt_checkpass(3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Helper::WindowFunctions&#34;&gt;DBIx::Class::Helper::WindowFunctions&lt;/a&gt; adds basic support for window functions to DBIx::Class&lt;/li&gt;
&lt;li&gt;Clean data so it is safe to output to JSON using &lt;a href=&#34;https://metacpan.org/pod/Data::Clean::ForJSON&#34;&gt;Data::Clean::ForJSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dita::PCD&#34;&gt;Dita::PCD&lt;/a&gt; is an implementation of the Please Change Dita Language&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Puppet::DB&#34;&gt;Puppet::DB&lt;/a&gt; retrieves data (facts, reports) from a Puppet DB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Code::Quality&#34;&gt;Code::Quality&lt;/a&gt; uses static analysis  (clang, lizard) to compute a &amp;ldquo;code quality&amp;rdquo; metric for a program&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Curses::Readline&#34;&gt;Curses::Readline&lt;/a&gt; provides readline for curses&lt;/li&gt;
&lt;li&gt;Perform continuous database migration using &lt;a href=&#34;https://metacpan.org/pod/Geoffrey&#34;&gt;Geoffrey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Partially apply parameters to functions with &lt;a href=&#34;https://metacpan.org/pod/PartialApplication&#34;&gt;PartialApplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profile database queries run during tests using &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::DBIProfile&#34;&gt;Test2::Plugin::DBIProfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Collect and display test memory usage information with &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::MemUsage&#34;&gt;Test2::Plugin::MemUsage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/parent::versioned&#34;&gt;parent::versioned&lt;/a&gt; establishes ISA relationships with base classes at compile time, with version checking&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Layout&#34;&gt;Text::Layout&lt;/a&gt; can create documents/graphics using the Pango style markup formatting (PDFs, cairo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gaming&#34;&gt;Gaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run Conway&amp;rsquo;s Game of Life faster using &lt;a href=&#34;https://metacpan.org/pod/Game::Life::Faster&#34;&gt;Game::Life::Faster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::static&#34;&gt;Mojolicious::Command::static&lt;/a&gt; stands up a simple static file server&lt;/li&gt;
&lt;li&gt;Test Mojo under Test2 with &lt;a href=&#34;https://metacpan.org/pod/Test2::MojoX&#34;&gt;Test2::MojoX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weasel::DriverRole&#34;&gt;Weasel::DriverRole&lt;/a&gt; provides an API definition for Weasel&amp;rsquo;s driver wrappers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2019/</link>
      <pubDate>Tue, 12 Mar 2019 00:57:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::termpub&#34;&gt;App::termpub&lt;/a&gt; is an epub reader for the terminal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::TaxJar&#34;&gt;WebService::TaxJar&lt;/a&gt; provides a simple client to TaxJar&amp;rsquo;s REST API&lt;/li&gt;
&lt;li&gt;Geocode strings using datasciencetoolkit (US &amp;amp; UK) &lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::DataScienceToolkit&#34;&gt;Geo::Coder::DataScienceToolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query RightScale for server info using &lt;a href=&#34;https://metacpan.org/pod/RightScale::Query&#34;&gt;RightScale::Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Three new distributions for IP address APIs by Kang Meng:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::GeoIPify&#34;&gt;WebService::GeoIPify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::IPAPI&#34;&gt;WebService::IPAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::IPStack&#34;&gt;WebService::IPStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Disable the touchpad when a mouse is connected using &lt;a href=&#34;https://metacpan.org/pod/App::DTWMIC&#34;&gt;App::DTWMIC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse, manipulate and validate CloudFormation documents with &lt;a href=&#34;https://metacpan.org/pod/Cfn&#34;&gt;Cfn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dynamically inject data into static data with &lt;a href=&#34;https://metacpan.org/pod/Data::MethodProxy&#34;&gt;Data::MethodProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::MixedColor&#34;&gt;Log::MixedColor&lt;/a&gt; logs messages in different colors&lt;/li&gt;
&lt;li&gt;More easily use platform libraries provided by pkg-config with &lt;a href=&#34;https://metacpan.org/pod/Module::Build::Using::PkgConfig&#34;&gt;Module::Build::Using::PkgConfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Diff cnf and ini files using &lt;a href=&#34;https://metacpan.org/pod/App::mycnfdiff&#34;&gt;App::mycnfdiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Hopen&#34;&gt;Data::Hopen&lt;/a&gt; is a build tool (e.g. make) with first-class edges and explicit dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DataStruct::Flat&#34;&gt;DataStruct::Flat&lt;/a&gt; flattens nested data structures into a hash of key pair values&lt;/li&gt;
&lt;li&gt;Parse and cache spreadsheets for faster repeat processing with &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::Read::Ingester&#34;&gt;Spreadsheet::Read::Ingester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Decode audio/video files using LibVLC with &lt;a href=&#34;https://metacpan.org/pod/VideoLAN::LibVLC&#34;&gt;VideoLAN::LibVLC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/YottaDB&#34;&gt;YottaDB&lt;/a&gt; is a Perl interface to the NoSQL YottaDB database&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::XSPromises&#34;&gt;AnyEvent::XSPromises&lt;/a&gt; this Promises library is implemented in XS for performance&lt;/li&gt;
&lt;li&gt;Alternatively, &lt;a href=&#34;https://metacpan.org/pod/Promise::ES6&#34;&gt;Promise::ES6&lt;/a&gt; provides ES6-style promises&lt;/li&gt;
&lt;li&gt;Create tiny classes with read-only attributes using &lt;a href=&#34;https://metacpan.org/pod/Class::Tiny::Immutable&#34;&gt;Class::Tiny::Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::FFI&#34;&gt;Test2::Tools::FFI&lt;/a&gt; provides routines for convenient FFI testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perform matrix operations and LUP decomposition using &lt;a href=&#34;https://metacpan.org/pod/Math::MatrixLUP&#34;&gt;Math::MatrixLUP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Writing new testing tools with Test2</title>
      <link>http://localhost:1313/article/writing-new-testing-tools-with-test2/</link>
      <pubDate>Tue, 12 Jun 2018 15:26:40 +0000</pubDate>
      
      <guid>http://localhost:1313/article/writing-new-testing-tools-with-test2/</guid>
      <description>

&lt;p&gt;Perl has had great testing tools for a long time, but &lt;a href=&#34;https://metacpan.org/pod/Test2&#34;&gt;Test2&lt;/a&gt; is the single biggest improvement to Perl testing in years. One of my favorite Test2 features is how easy it is to extend it with new tools, and today I&amp;rsquo;ll show you how I wrote my first tool.&lt;/p&gt;

&lt;h3 id=&#34;dealing-with-known-test-failures&#34;&gt;Dealing with known test failures&lt;/h3&gt;

&lt;p&gt;Ideally when your tests fail, it means that something needs to be fixed, and that thing is fixable. However in the Real World™ things aren&amp;rsquo;t always that simple. For example you might investigate a failure, figure out the root cause, but the person to fix it is on vacation. Or perhaps there&amp;rsquo;s a datetime bug in the code, and it will resolve itself in a few days. The key here is that the failure is understood and not serious but also impractical to fix in the short term.&lt;/p&gt;

&lt;p&gt;I found myself in exactly this situation a few months ago. I didn&amp;rsquo;t want to skip the failing test, as I thought it might be forgotten, but I also wanted the build to complete in the meantime. In large distributed development teams, you want successful builds to be &amp;ldquo;the norm&amp;rdquo;, so when a build fails, developers take notice.&lt;/p&gt;

&lt;p&gt;I decided what I needed was a &lt;code&gt;skip_until&lt;/code&gt; function that would skip the test until a date was reached, at which point it would start failing again. Not finding anything on CPAN, I figured it was time for a new testing tool.&lt;/p&gt;

&lt;h3 id=&#34;test2-terminology-plugins-vs-tools&#34;&gt;Test2 terminology: plugins vs tools&lt;/h3&gt;

&lt;p&gt;In Test2, a &amp;ldquo;plugin&amp;rdquo; is a package which overrides the behavior of existing Test2 features, whereas a &amp;ldquo;tool&amp;rdquo; is a package which provides new functions. In this case I was creating a new testing function which didn&amp;rsquo;t already exist, so I needed to write a &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools&#34;&gt;Test2::Tools&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;test2-api-context&#34;&gt;Test2::API context&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::API&#34;&gt;Test2::API&lt;/a&gt; provides the &lt;code&gt;context&lt;/code&gt; function to access the test context during runtime. The context object provides common test methods like &lt;code&gt;pass&lt;/code&gt;, &lt;code&gt;fail&lt;/code&gt; and &lt;code&gt;skip&lt;/code&gt; etc, which let&amp;rsquo;s you add custom test behavior. Here&amp;rsquo;s how I use it to skip tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Test2::Tools::SkipUntil;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test2::API &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;context&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Exporter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; @EXPORT_OK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;skip_until&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;skip_until&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($reason, $count, $date) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($should_skip) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context();
    $ctx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;skip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;skipped test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$reason skip until $date&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$count);
    $ctx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;release;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exiting&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; SKIP;
  }
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I declare a new function called &lt;code&gt;skip_until&lt;/code&gt; which accepts a text reason to skip, a count of tests to skip and a date. This signature is the same as &lt;a href=&#34;Test2::Tools::Basic::skip&#34;&gt;skip&lt;/a&gt;, with the extra date parameter (I don&amp;rsquo;t love the parameter order but I figure it&amp;rsquo;s better to remain similar to prior art).&lt;/p&gt;

&lt;p&gt;For the sake of brevity I&amp;rsquo;ve omitted the argument checking code and the date time logic to decide whether &lt;code&gt;$should_skip&lt;/code&gt; is true or not. If it is, the main &lt;code&gt;if&lt;/code&gt; block obtains the test context, and calls &lt;code&gt;skip&lt;/code&gt; for the count of tests to skip. Next it calls &lt;code&gt;release&lt;/code&gt; to free the test context (&lt;a href=&#34;https://metacpan.org/pod/Test2::API::Context#CRITICAL-DETAILS&#34;&gt;important!&lt;/a&gt;). Finally it calls &lt;code&gt;last&lt;/code&gt; to exit the SKIP block that &lt;code&gt;skip_until&lt;/code&gt; would be called from.&lt;/p&gt;

&lt;p&gt;Careful readers might notice that the use of &lt;code&gt;SKIP&lt;/code&gt; means &lt;code&gt;$count&lt;/code&gt; can be 1, and all tests within the skip block will still be skipped. This is the same as the Test2 behavior, in fact that code is almost identical to the Test2::Tools::Basic &lt;a href=&#34;https://metacpan.org/source/EXODIST/Test2-Suite-0.000114/lib/Test2/Tools/Basic.pm#L67&#34;&gt;source&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-the-new-tool&#34;&gt;Using the new tool&lt;/h3&gt;

&lt;p&gt;Now if I import &lt;code&gt;Test2::Tools::SkipUntil&lt;/code&gt; in my tests I  can use it like any other module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test2::Tools::Basic;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test2::Tools::SkipUntil &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;skip_until&amp;#39;&lt;/span&gt;;

SKIP:{
  skip_until &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This should be fixed next month, see ticket #529&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-06-30&amp;#39;&lt;/span&gt;;

  ok foo();
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}

done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the tests will be skipped until the date is reached. Test2 makes writing new testing tools easy, if you have a good idea for a new testing function, consider using Test2.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Tools&#34;&gt;Test2::Tools&lt;/a&gt; is the Test2 documentation for Test2 tools&lt;/li&gt;
&lt;li&gt;For plugins see &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin&#34;&gt;Test2::Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::API&#34;&gt;Test2::API&lt;/a&gt; is used to get the test context object, see the context &lt;a href=&#34;https://metacpan.org/pod/Test2::API::Context#CRITICAL-DETAILS&#34;&gt;cardinal rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::SkipUntil&#34;&gt;Test2::Tools::SkipUntil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Cover image via &lt;a href=&#34;https://pixabay.com/p-762486/&#34;&gt;pixabay&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2018/</link>
      <pubDate>Sun, 03 Jun 2018 22:03:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Access the AcousticBrainz API using &lt;a href=&#34;https://metacpan.org/pod/WebService::AcousticBrainz&#34;&gt;WebService::AcousticBrainz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add, modify and delete products from the Bing Merchant Center platform using &lt;a href=&#34;https://metacpan.org/pod/Bing::ContentAPI&#34;&gt;Bing::ContentAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Qgoda&#34;&gt;Qgoda&lt;/a&gt; is a new static site generator with a fancy &lt;a href=&#34;http://www.qgoda.net/&#34;&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Pokemon&#34;&gt;WebService::Pokemon&lt;/a&gt; is another interface for the Pokémon API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::RESTCountries&#34;&gt;WebService::RESTCountries&lt;/a&gt; provides a Perly interface to the REST Countries &lt;a href=&#34;https://restcountries.eu&#34;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Swapi&#34;&gt;WebService::Swapi&lt;/a&gt; interfaces with the &lt;a href=&#34;https://swapi.co&#34;&gt;Star Wars API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Docker::Registry&#34;&gt;Docker::Registry&lt;/a&gt; is a client for talking to Docker Registries&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::K8s&#34;&gt;IO::K8s&lt;/a&gt; provides objects representing things in the Kubernetes API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Kubectl::CLIWrapper&#34;&gt;Kubectl::CLIWrapper&lt;/a&gt; Module to use the Kubernetes API via the kubectl CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add support for window functions to DBIx::Class using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Helper::ResultSet::WindowFunctions&#34;&gt;DBIx::Class::Helper::ResultSet::WindowFunctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Path::Class::Tiny&#34;&gt;Path::Class::Tiny&lt;/a&gt; has the interface of Path::Class but uses Path::Tiny under the hood&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::UNIVERSAL::can::t&#34;&gt;Acme::UNIVERSAL::can::t&lt;/a&gt; is a brilliant module: use it to discover which methods an object &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; do :-)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Prove::Plugin::TermTable&#34;&gt;App::Prove::Plugin::TermTable&lt;/a&gt; sets the size of the console for Term::Table (useful for Test2 based tests)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;The beginning of a Perl universe&amp;rdquo; - &lt;a href=&#34;https://metacpan.org/pod/Dot&#34;&gt;Dot&lt;/a&gt; is a new object system for Perl&lt;/li&gt;
&lt;li&gt;Run code and optinally reverse it with &lt;a href=&#34;https://metacpan.org/pod/Eval::Reversible&#34;&gt;Eval::Reversible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JavaScript::V8::CommonJS&#34;&gt;JavaScript::V8::CommonJS&lt;/a&gt; provides module loading support to https://metacpan.org/pod/JavaScript::V8&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::JSON::Pointer&#34;&gt;Test2::Tools::JSON::Pointer&lt;/a&gt; can compare parts of a JSON string to a data structure using JSON pointers&lt;/li&gt;
&lt;li&gt;Skip tests until a date is reached using &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::SkipUntil&#34;&gt;Test2::Tools::SkipUntil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::Bool&#34;&gt;Types::Bool&lt;/a&gt; provides boolean object types for Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::RTC::DS3231&#34;&gt;RPi::RTC::DS3231&lt;/a&gt; is an interface to the DS3231 Real-Time Clock IC over I2C&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Sandy&#34;&gt;App::Sandy&lt;/a&gt; is a bioinformatic tool to generate single/paired ends for a fasta file&lt;/li&gt;
&lt;li&gt;Store and check password using Argon2 with &lt;a href=&#34;https://metacpan.org/pod/Authen::Passphrase::Argon2&#34;&gt;Authen::Passphrase::Argon2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Manage a hierarchy of Data::MuForm classes with &lt;a href=&#34;https://metacpan.org/pod/Data::MuFormX::Registry&#34;&gt;Data::MuFormX::Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::SAML&#34;&gt;Mojo::SAML&lt;/a&gt; is a SAML2 toolkit using the Mojo stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Stor&#34;&gt;Stor&lt;/a&gt; is file storage retrieval API implemented over HTTP&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/TaskPipe&#34;&gt;TaskPipe&lt;/a&gt; is a YAML-driven framework for managing scrapers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---october-2016/</link>
      <pubDate>Thu, 03 Nov 2016 03:57:34 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---october-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve status information about Open Tibia MMORPG Servers with &lt;a href=&#34;https://metacpan.org/pod/Net::OTServ&#34;&gt;Net::OTServ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::TNT::ExpressConnect&#34;&gt;Business::TNT::ExpressConnect&lt;/a&gt; provides an interface to the shipping company&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;Tarantool is an in memory no-SQL store, use it with Perl using &lt;a href=&#34;https://metacpan.org/pod/DR::Tnt&#34;&gt;DR::Tnt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pandoc&#34;&gt;Pandoc&lt;/a&gt; is a wrapper for the useful document conversion tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/stasis&#34;&gt;stasis&lt;/a&gt; is an encrypting archive tool using tar, gpg and Perl. It is also a sneaky indexed package without a .pm file (disclosure - I am the module author).&lt;/li&gt;
&lt;li&gt;Get subtitles for videos using &lt;a href=&#34;https://metacpan.org/pod/WWW::SubDB&#34;&gt;WWW::SubDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bread::Runner&#34;&gt;Bread::Runner&lt;/a&gt; is a generic app runner for Bread::Board, the Inversion of Control framework&lt;/li&gt;
&lt;li&gt;Share locks with child processes using &lt;a href=&#34;https://metacpan.org/pod/File::Lock::ParentLock&#34;&gt;File::Lock::ParentLock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::Netfilter::Log&#34;&gt;Linux::Netfilter::Log&lt;/a&gt; is a Linux netfilter logging (libnetfilter_log) wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BSON::XS&#34;&gt;BSON::XS&lt;/a&gt; is an XS implementation of MongoDB&amp;rsquo;s BSON serialization&lt;/li&gt;
&lt;li&gt;Ajv is the premier JavaScript JSON schema validator, now you can use it with &lt;a href=&#34;https://metacpan.org/pod/Data::JSONSchema::Ajv&#34;&gt;Data::JSONSchema::Ajv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::MoneyCurrency&#34;&gt;Data::MoneyCurrency&lt;/a&gt; provides data about countries&amp;rsquo; currencies&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Templatize&amp;rdquo; data with &lt;a href=&#34;https://metacpan.org/pod/Data::Xslate&#34;&gt;Data::Xslate&lt;/a&gt; - useful for conditional config files and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::JSON::Slurper&#34;&gt;File::JSON::Slurper&lt;/a&gt; slurps and decodes JSON files in a single step&lt;/li&gt;
&lt;li&gt;This looks fun; create black and white PNG files from arrays using &lt;a href=&#34;https://metacpan.org/pod/Image::PNG::Write::BW&#34;&gt;Image::PNG::Write::BW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Postgresql58&#34;&gt;Test::Postgresql58&lt;/a&gt; is a Perl 5.8 compatible version of Test::Postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Distribute tasks among multiple workers with &lt;a href=&#34;https://metacpan.org/pod/Broker::Async&#34;&gt;Broker::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Continual::Process&#34;&gt;Continual::Process&lt;/a&gt; keeps processes running &amp;hellip; forever&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Import::Box&#34;&gt;Import::Box&lt;/a&gt; is a new way to import functions but not pollute the importing namespace&lt;/li&gt;
&lt;li&gt;Using Test2 and missing &lt;code&gt;explain()&lt;/code&gt;? Then you&amp;rsquo;ll love &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::Explain&#34;&gt;Test2::Tools::Explain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/T&#34;&gt;T&lt;/a&gt; encapsulates test imports to avoid polluting main (uses Import::Box)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::HTU21D&#34;&gt;Device::Chip::HTU21D&lt;/a&gt; is a chip driver for HTU21D&lt;/li&gt;
&lt;li&gt;Control Gqrx (software driven radio) using the Remote Control protocol using &lt;a href=&#34;https://metacpan.org/pod/GQRX::Remote&#34;&gt;GQRX::Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RPi::EnvUI&#34;&gt;App::RPi::EnvUI&lt;/a&gt; is a single page app grow room environment control for Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compute verb actants for Portuguese using &lt;a href=&#34;https://metacpan.org/pod/Lingua::PT::Actants&#34;&gt;Lingua::PT::Actants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently create and consume authenticated and encrypted messages using &lt;a href=&#34;https://metacpan.org/pod/Crypt::EAMessage&#34;&gt;Crypt::EAMessage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLx::DetachedObject&#34;&gt;PDLx::DetachedObject&lt;/a&gt; enables subclassing the non-standard PDL classes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDLx::Mask&#34;&gt;PDLx::Mask&lt;/a&gt; can mask multiple piddles with automatic two way feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t call it a framework; &lt;a href=&#34;https://metacpan.org/pod/MVC::Neaf&#34;&gt;MVC::Neaf&lt;/a&gt; is a new, minimalist web tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

