<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/github/</link>
    <description>Recent content in Github on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jan 2020 20:19:30 +0000</lastBuildDate>
    <atom:link href="/tags/github/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - December 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</link>
      <pubDate>Sun, 05 Jan 2020 20:19:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create a REST accessible AWS Lambda functions with &lt;a href=&#34;https://metacpan.org/pod/AWS::Lambda::Quick&#34;&gt;AWS::Lambda::Quick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Entry Point (for docker and other containers) &lt;a href=&#34;https://metacpan.org/pod/App::aep&#34;&gt;App::aep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::lrrr&#34;&gt;App::lrrr&lt;/a&gt; watches one or more directories and re-runs a given command when the contents change&lt;/li&gt;
&lt;li&gt;Get an auth token for GitHub with &lt;a href=&#34;https://metacpan.org/pod/GitHub::Apps::Auth&#34;&gt;GitHub::Apps::Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neovim::Ext&#34;&gt;Neovim::Ext&lt;/a&gt; provides Perl bindings for neovim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Thumbalizr&#34;&gt;WebService::Thumbalizr&lt;/a&gt; provides an interface to the web service to create screenshots of web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get the path to the source file or parent directory using &lt;a href=&#34;https://metacpan.org/pod/Path::This&#34;&gt;Path::This&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use libarchive from Perl with &lt;a href=&#34;https://metacpan.org/pod/Archive::Raw&#34;&gt;Archive::Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::NamedParams&#34;&gt;DBIx::NamedParams&lt;/a&gt; let&amp;rsquo;s you use execute SQL queries using named parameters (instead of &amp;lsquo;?&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Read and validate CSVs with &lt;a href=&#34;https://metacpan.org/pod/Data::Validate::CSV&#34;&gt;Data::Validate::CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Nanoid&#34;&gt;Nanoid&lt;/a&gt; is a port of the JavaScript unique string generator library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Validate::Simple&#34;&gt;Validate::Simple&lt;/a&gt; is a generic data validation module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/OSSEC&#34;&gt;OSSEC&lt;/a&gt; (intrusion detection) with Perl&lt;/li&gt;
&lt;li&gt;Faster promises with &lt;a href=&#34;https://metacpan.org/pod/Promise::XS&#34;&gt;Promise::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::CI&#34;&gt;Test::CI&lt;/a&gt;: get details about the current CI environment&lt;/li&gt;
&lt;li&gt;Write object-oriented tests that work with Test2 using &lt;a href=&#34;https://metacpan.org/pod/Test::Class::Tiny&#34;&gt;Test::Class::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::TraceCalls&#34;&gt;Test::TraceCalls&lt;/a&gt; outputs all subroutines called by a test script in JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/overload::open&#34;&gt;overload::open&lt;/a&gt; let&amp;rsquo;s you hook into the &lt;code&gt;open&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ISAL::Crypto&#34;&gt;ISAL::Crypto&lt;/a&gt; can &amp;ldquo;run multiple hash calculations at the same time on one cpu using vector registers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Cyclotomic&#34;&gt;Math::Polynomial::Cyclotomic&lt;/a&gt; s a &amp;ldquo;cyclotomic polynomials generator&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Throttle::Adaptive&#34;&gt;Throttle::Adaptive&lt;/a&gt; implements the &amp;ldquo;adaptive throttling&amp;rdquo; algorithm described in Google&amp;rsquo;s SRE book&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make a Dancer2 app mobile-aware using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::MobileDevice&#34;&gt;Dancer2::Plugin::MobileDevice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mail::Qmail::Filter&#34;&gt;Mail::Qmail::Filter&lt;/a&gt; filters incoming e-mails when using qmail as an MTA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Results::Role::Struct&#34;&gt;Mojo::DB::Results::Role::Struct&lt;/a&gt; returns database query results as structs&lt;/li&gt;
&lt;li&gt;Apply roles to Mojo database results with &lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Role::ResultsRoles&#34;&gt;Mojo::DB::Role::ResultsRoles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest 2019</title>
      <link>http://localhost:1313/article/hacktoberfest-2019/</link>
      <pubDate>Thu, 26 Sep 2019 13:56:16 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-2019/</guid>
      <description>

&lt;p&gt;Send some pull requests and get a free t-shirt! Hacktoberfest is back for a seventh year to encourage cross-project participation. &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; wants you to &lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;register for Hacktoberfest&lt;/a&gt; (no purchase required) then open five pull requests to public repositories on GitHub. Get your feet wet with open source and git; once you see how easy it is you&amp;rsquo;ll probably come back for more. And you&amp;rsquo;ll get a nice Hacktoberfest t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hacktoberfestswaglist.com&#34;&gt;Other companies have their own swag&lt;/a&gt; to add to your haul when you contribute to their projects. You can even &lt;a href=&#34;https://github.com/crweiner/hacktoberfest-swag-list&#34;&gt;contribute to that list&lt;/a&gt; with a pull request to add your swag.&lt;/p&gt;

&lt;h2 id=&#34;find-something-to-hack&#34;&gt;Find something to hack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tpf/perldotcom&#34;&gt;Perl.com&lt;/a&gt; has some website issues you might consider. Or, you can &lt;a href=&#34;http://localhost:1313/article/how-to-write-your-first-article-for-perl-com/&#34;&gt;write an article for Perl.com&lt;/a&gt; and send that as a pull request. Or, read some of the older articles and edit them to fix typos, new web addresses, and so on. Since Perl.com is its own GitHub project, almost anything you see is updatable. If you don&amp;rsquo;t know where to change something, we&amp;rsquo;ll help you figure it out.&lt;/p&gt;

&lt;p&gt;I maintain the &lt;a href=&#34;https://github.com/briandfoy/PerlPowerTools&#34;&gt;PerlPowerTools&lt;/a&gt; project and there are several niggling style issues that I&amp;rsquo;d like to handle so I can improve PerlPowerTool&amp;rsquo;s score on &lt;a href=&#34;https://kritika.io/users/briandfoy/repos/7253941177493998/&#34;&gt;kritika.io&lt;/a&gt;, which is currently an F based on most of this code being written in a style more palatable 20 years ago.&lt;/p&gt;

&lt;p&gt;Perl.com has a &lt;a href=&#34;https://github.com/tpf/perldotcom/issues/203&#34;&gt;GitHub issue&lt;/a&gt; where some projects have listed their interest (and check for others that might show up after we post this article):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pullrequest.club/&#34;&gt;Pull Request Club&lt;/a&gt; is like the old &lt;a href=&#34;http://cpan-prc.org&#34;&gt;CPAN Pull Request Challenge&lt;/a&gt;, but for everything.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmacdotorg/newsapi-perl&#34;&gt;Web::NewsAPI&lt;/a&gt; is a module for communicating with NewsAPI, letting you fetch and search news headlines and stories from around the world using Perl.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmacdotorg/sweat&#34;&gt;Sweat&lt;/a&gt; is a fully-featured workout timer that aims to distract you from the pain of exercise by reading mildly interesting stuff from the internet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Difegue/LANraragi&#34;&gt;LANraragi&lt;/a&gt; is a self-hosted comic/manga manager running on &lt;a href=&#34;https://www.mojolicious.org&#34;&gt;Mojo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://exercism.io/&#34;&gt;Exercism.io&lt;/a&gt; has online programming exercises and wants more for &lt;a href=&#34;https://github.com/exercism/perl5&#34;&gt;Perl 5&lt;/a&gt; and &lt;a href=&#34;https://github.com/exercism/perl6&#34;&gt;Perl 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/UPC/ravada&#34;&gt;ravada&lt;/a&gt; is a Perl module for remote virtual desktops managers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EnlightenedPerlOrganisation/task-kensho&#34;&gt;Task::Kensho&lt;/a&gt; is a list of recommended modules for Enlightened Perl development and &lt;a href=&#34;http://blogs.perl.org/users/grinnz/2019/09/taskkensho-needs-your-help.html&#34;&gt;needs some help&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you get your Pull Request accepted, &lt;a href=&#34;https://www.perl.com/article/how-to-get-pull-request-accepted-/#author-bio-mohammad-anwar&#34;&gt;Mohammad S Anwar&lt;/a&gt; has some advice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;How to become a CPAN contributor, Part 1&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor-part-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-get-pull-request-accepted-/&#34;&gt;How to get your Pull Request accepted?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;get-help-with-your-issues&#34;&gt;Get help with your issues&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t have to do anything special to get help, but here are a few tips. Remember, the goal isn&amp;rsquo;t necessarily to convert people to core contributors, so start with something gentle that can draw in the curious.&lt;/p&gt;

&lt;p&gt;When people contribute, be insanely positive–help people learn how to make good pull requests and integrate their work into your project. Remember that successful projects blend all sorts of skills and perspectives, and this is your chance to let other people hack on the stuff you didn&amp;rsquo;t want to do yourself.&lt;/p&gt;

&lt;p&gt;Here are some ways you can encourage that work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create some GitHub issues for small work you&amp;rsquo;d like other people to try. These don&amp;rsquo;t need to be complex and they don&amp;rsquo;t need to be actual code. Something like &amp;ldquo;Update the README&amp;rdquo; or &amp;ldquo;Add the LICENSE file&amp;rdquo; don&amp;rsquo;t require that much knowledge of your core code.&lt;/li&gt;
&lt;li&gt;Label some of your projects GitHub issues with the &amp;ldquo;hacktoberfest&amp;rdquo; or &amp;ldquo;good first issue&amp;rdquo; tags. Make these bite-sized chunks appropriate for beginners.&lt;/li&gt;
&lt;li&gt;Label the issues based on their domain, such as &amp;ldquo;website design&amp;rdquo;, &amp;ldquo;coding&amp;rdquo;, or &amp;ldquo;documentation&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/crweiner/hacktoberfest-swag-list&#34;&gt;Offer some swag&lt;/a&gt;. A $5 t-shirt can get your several hundred dollars worth of work that you&amp;rsquo;ve been putting off.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;follow-hacktoberfest&#34;&gt;Follow hacktoberfest&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/hacktoberfest&#34;&gt;@hacktoberfest&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/hashtag/hacktoberfest&#34;&gt;#hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See Perl.com&amp;rsquo;s &lt;a href=&#34;https://www.perl.com/tags/hacktoberfest/&#34;&gt;earlier articles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Cover image © &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How do I Open This?</title>
      <link>http://localhost:1313/article/how-do-i-open-this-/</link>
      <pubDate>Mon, 03 Jun 2019 18:26:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-do-i-open-this-/</guid>
      <description>

&lt;p&gt;When I&amp;rsquo;m working on code, I have to open a lot of files.  I work primarily at the command line, inside a vim editor.  On any given day I may need to translate some or all of the following into file paths that vim can understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack traces&lt;/li&gt;
&lt;li&gt;Perl module names&lt;/li&gt;
&lt;li&gt;Perl module names suffixed with subroutine names&lt;/li&gt;
&lt;li&gt;git-grep results&lt;/li&gt;
&lt;li&gt;GitHub URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figuring this stuff out isn&amp;rsquo;t generally that hard, but it can make your day just a little longer than it needs to be, so I wrote &lt;a href=&#34;https://metacpan.org/pod/ot&#34;&gt;ot&lt;/a&gt;: a command line utility provided by &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using vim in examples, but ot also supports nvim, emacs,nano and pico, defaulting to whatever you have set in &lt;code&gt;$ENV{EDITOR}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;following-along&#34;&gt;Following Along&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be working out of a repository at &lt;a href=&#34;https://github.com/oalders/git-helpers&#34;&gt;https://github.com/oalders/git-helpers&lt;/a&gt;.  If you&amp;rsquo;d like to follow along:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oalders/git-helpers.git
$ cd git-helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-a-perl-module-name&#34;&gt;Using a Perl Module Name&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now in the root of the &lt;strong&gt;git-helpers&lt;/strong&gt; Git repository.  Let&amp;rsquo;s say we want to open the Git::Helpers module.  Translating a Perl module name into a file path isn&amp;rsquo;t all that hard.  Given something like Git::Helpers, I know that I&amp;rsquo;m likely (but not always) looking for a file called &lt;code&gt;Git/Helpers.pm&lt;/code&gt;.  This could be in lib, t/lib or some custom directory.  If I know exactly where to find this file, I can invoke vim directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if I&amp;rsquo;m not sure, or if I&amp;rsquo;m just lazy, this will get me to the same place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because, by default, ot will search your lib and t/lib directories for local files. You can override this via the &lt;code&gt;$ENV{OPEN_THIS_LIBS}&lt;/code&gt; variable. It accepts a comma-separated list of libs.&lt;/p&gt;

&lt;p&gt;If the file can&amp;rsquo;t be found in one of the standard lib locations, ot will try to find an installed file on the system.  So, if we&amp;rsquo;re not in the root of the git-helpers repository, but we&amp;rsquo;ve previously installed Git::Helpers from CPAN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;might open open the following file: &lt;code&gt;~/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Git/Helpers.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-perl-module-at-a-subroutine-declaration&#34;&gt;Opening a Perl Module at a Subroutine Declaration&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take this a step further.  What if we want to open a file for a module but we also want to go straight to the correct subroutine declaration?  Something like &lt;code&gt;Git::Helpers::is_inside_work_tree()&lt;/code&gt;.  We could probably craft a fancy one-liner to do this, but today we are lazy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.  This will Do The Right Thing.  (Note that in this case we had to quote the args to ot.  Your shell will likely require this as well.)&lt;/p&gt;

&lt;p&gt;We can do exactly the same thing for an installed module.  Try this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test::More::subtest()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case it opens &lt;code&gt;/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Test/More.pm&lt;/code&gt; at line 807, which is &lt;code&gt;sub subtest {&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-using-a-line-number&#34;&gt;Opening a File Using a Line Number&lt;/h2&gt;

&lt;h4 id=&#34;stack-traces&#34;&gt;Stack Traces&lt;/h4&gt;

&lt;p&gt;I see a lot of stack traces on any given day.  A relevant chunk of a stack trace might look like: &lt;code&gt;Died at lib/Git/Helpers.pm line 50.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Doing this by hand I might copy the file path and enter the following at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;rsquo;m feeling fancy, I might translate the line number into something that vim understands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim +50 lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, I can just copy the file location and line number and feed it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do the right thing and open &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; in vim at line 50.&lt;/p&gt;

&lt;h4 id=&#34;git-grep&#34;&gt;git-grep&lt;/h4&gt;

&lt;p&gt;The results of some searches, like &lt;code&gt;git grep&lt;/code&gt;, can contain line numbers as well as file names.  To configure this behaviour in git use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global grep.lineNumber true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t want to configure this directly in git you can also search via &lt;code&gt;git grep --line-number foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got line numbers in our git grep output, we can use its output to give hints to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub _build_latest_release&amp;#39;&lt;/span&gt; .
lib/Git/Helpers/CPAN.pm:70:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having run the above search, we can copy paste the results to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers/CPAN.pm:70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 70.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-at-an-arbitrary-line-and-column&#34;&gt;Opening a File at an Arbitrary Line and Column&lt;/h2&gt;

&lt;p&gt;As we saw above, ot can open files at the correct line number.  Let&amp;rsquo;s get even lazier and have ot open our files at the correct line &lt;strong&gt;and&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;If you use  the &lt;code&gt;--vimgrep&lt;/code&gt; option with &lt;code&gt;ripgrep&lt;/code&gt; then you will see column numbers as well as line numbers with your search results.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rg --vimgrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt; .
./lib/Git/Helpers/CPAN.pm:20:17:    builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt;,
./lib/Git/Helpers/CPAN.pm:70:5:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 20 and column 17, simply copy/paste the rg output and pass it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot ./lib/Git/Helpers/CPAN.pm:20:17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-github-links-locally&#34;&gt;Opening Github Links Locally&lt;/h2&gt;

&lt;p&gt;Passing a full GitHub URL &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/a&gt;, to &lt;code&gt;ot&lt;/code&gt; will allow you to open the file locally, if it can be found in your relative file path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; at line 50.&lt;/p&gt;

&lt;p&gt;Passing a truncated URL path is also valid, if the path parts exist locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-a-locally-checked-out-file-at-github&#34;&gt;Opening a Locally Checked Out File at GitHub&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; flag will allow you to open your local files on GitHub.&lt;/p&gt;

&lt;p&gt;Any of the following commands can launch a browser with a GitHub URL (hopefully) containing the file you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers
$ ot -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;
$ ot -b Git::Helpers:75
$ ot -b Git::Helpers line &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, from the top level of the git-helpers repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers:75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-in-your-env-path&#34;&gt;Opening a File in Your &lt;code&gt;$ENV{PATH}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ot can also be used as a shortcut to inspect files which can be found inside your &lt;code&gt;$ENV{PATH}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot perldoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;~/.plenv/versions/5.26.1/bin/perldoc&lt;/code&gt; on my machine.  You can think of this as shorthand for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ which perldoc | xargs -o vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to add support for more editors or other formats of data, please &lt;a href=&#34;https://github.com/oalders/open-this/issues&#34;&gt;get in touch with me&lt;/a&gt; and we&amp;rsquo;ll see what we can do.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See Also&lt;/h2&gt;

&lt;p&gt;For other solutions to the problem of finding and opening files, I highly recommend &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/PathPicker&#34;&gt;fpp&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get your Pull Request accepted</title>
      <link>http://localhost:1313/article/how-to-get-pull-request-accepted-/</link>
      <pubDate>Tue, 05 Mar 2019 20:35:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-get-pull-request-accepted-/</guid>
      <description>

&lt;p&gt;Recently, someone I met online (and a respected name in Perl community), asked me if I could share my tips for how to get a Pull Request accepted. I have been submitting PRs for over 4 years, over the course of which I&amp;rsquo;ve seen a few successful patterns.&lt;/p&gt;

&lt;h2 id=&#34;keep-it-short-and-simple&#34;&gt;Keep it short and simple&lt;/h2&gt;

&lt;p&gt;The golden rule is &amp;ldquo;keep the change simple and minimal&amp;rdquo;. Always remember the distribution owner doesn&amp;rsquo;t have time to go through big changes in a single sitting. So it is better to split the big changes into smaller units. Ideally one commit per PR.&lt;/p&gt;

&lt;p&gt;If you fancy then you may want to have one change per commit in a PR. But the downside is, if a PR has more than 2 commits then you are back to square one, expecting the owner to spend too much time to review. So keep it simple, one PR one commit.&lt;/p&gt;

&lt;h2 id=&#34;pick-active-distributions&#34;&gt;Pick active distributions&lt;/h2&gt;

&lt;p&gt;The second most important thing to keep in mind is to pick an active distribution, i.e. one with regular releases. In my experience, you have more chance of a PR being reviewed and accepted if the author is active. MetaCPAN&amp;rsquo;s recent uploads &lt;a href=&#34;https://metacpan.org/recent?size=500&#34;&gt;page&lt;/a&gt; can help you identify distributions with recent changes.&lt;/p&gt;

&lt;h2 id=&#34;build-rapport&#34;&gt;Build rapport&lt;/h2&gt;

&lt;p&gt;If you can get in the good books of the distribution owner they&amp;rsquo;ll be more likely to accept your PR. Not every PR you submit will be accordance with the owner&amp;rsquo;s coding style or way of thinking. So be prepared to get pushback, or even rejection. This is an opportunity to converse with the owner, find out what they &lt;em&gt;do&lt;/em&gt; want. Maintaining a sense of humor throughout the discussion can go a long way to removing friction.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Those are my tips for getting your PR accepted. If you&amp;rsquo;d like to get started in Open Source but aren&amp;rsquo;t sure where to start, my previous two articles (&lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor-part-2/&#34;&gt;two&lt;/a&gt;) cover how to identify simple fixes for modules.&lt;/p&gt;

&lt;p&gt;Many people have asked me, where do I get the motivation to submit PRs non-stop for so many years. The real joy for me is when the owner acknowledges my PR and says &amp;ldquo;Thank you&amp;rdquo;. It means a lot to me. If you need any help getting started, feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to become a CPAN contributor - part 2</title>
      <link>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</link>
      <pubDate>Wed, 01 Aug 2018 20:20:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</guid>
      <description>

&lt;p&gt;In the previous &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;article&lt;/a&gt; I described some typical issues that are good for first time CPAN contributors to tackle. In this article, I will go through the nitty-gritty of fixing issues, and some gotchas to watch out for. If you&amp;rsquo;re not familiar with the differences between a Perl distribution, module and package, check out this &lt;a href=&#34;http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;missing-license-meta-name&#34;&gt;Missing license meta name&lt;/h3&gt;

&lt;p&gt;This is where the build script is missing a license name. It should be an easy fix - just add the license name to the build script. However there is a catch and I have been bitten by it before: the license meta name depends on the build script type. For example, if the distribution document says the license is &amp;ldquo;Artistic 2&amp;rdquo; in Makefile.PL the meta name would be &amp;ldquo;artistic_2&amp;rdquo; whereas in a dist.ini it would be &amp;ldquo;Artistic_2_0&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;E.g. the Makefile.PL from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube&#34;&gt;Map::Tube&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
ABSTRACT_FROM &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/Map/Tube.pm&amp;#39;&lt;/span&gt;,
LICENSE       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic_2&amp;#39;&lt;/span&gt;,
EXE_FILES     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script/map-data-converter&amp;#39;&lt;/span&gt; ],
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to the dist.ini from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube-Delhi&#34;&gt;Map::Tube::Delhi&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
author  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;mohammad.anwar@yahoo.com&amp;gt;&lt;/span&gt;
license &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Artistic_2_0
copyright_holder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are adding a software license to a distribution, &lt;a href=&#34;https://metacpan.org/pod/Software::License&#34;&gt;Software::License&lt;/a&gt; is a good resource which has many different types of Open Source licenses.&lt;/p&gt;

&lt;p&gt;One thing to check for is whether the distribution repository has a META.yml file or not. If it does, adding the license meta name to the build script may cause the build process to warn: &amp;ldquo;Invalid LICENSE value &amp;hellip;&amp;rdquo;. This happens because the META.yml already contains a license value of &amp;ldquo;unknown&amp;rdquo;, which conflicts with the build script. The solution here is to delete the META.yml file and build the distribution, adding the newly-generated META.yml back into the repository.&lt;/p&gt;

&lt;p&gt;You might be thinking, why would you keep META.yml in the project repository as it can be easily generated? I agree it&amp;rsquo;s probably a mistake, but keep in mind your intent is to add the license meta and nothing else. The author might have a good reason for keeping the META.yml file around. One approach would be to discuss with the author if it is good idea to drop it completely.&lt;/p&gt;

&lt;h3 id=&#34;missing-strict-warnings-pragma&#34;&gt;Missing strict/warnings pragma&lt;/h3&gt;

&lt;p&gt;This is the easiest of all: one or more modules in the distribution are missing the [strict]](https://metacpan.org/pod/strict) or &lt;a href=&#34;https://metacpan.org/pod/warnings&#34;&gt;warnings&lt;/a&gt; pragmas. Just add the line &lt;code&gt;use strict;&lt;/code&gt; (or &lt;code&gt;use warnings;&lt;/code&gt;) at the top of the modules missing them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; package_name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is it that simple? Yes and no. If the module uses Moose or Moo then &lt;code&gt;use strict;&lt;/code&gt; is enabled automatically, so the additional import is redundant. The module &lt;a href=&#34;https://metacpan.org/pod/Test::Strict&#34;&gt;Test::Strict&lt;/a&gt; has the &lt;code&gt;strict_ok&lt;/code&gt; test function to detect whether a module has enabled strict mode or not (full disclosure, I am the distribution maintainer).&lt;/p&gt;

&lt;p&gt;With the warnings pragma, there can be other considerations too. I was giving talk at the German Perl Workshop 2018, during the talk I spoke about one of my pull requests being rejected by the author for adding warnings pragma. At the time I didn&amp;rsquo;t have the courage to question the author, so I apologized and moved on. Surprisingly, the very same author was sitting in the front row attending my talk! And he was none other than [Reini Urban](). At the end of the talk, he explained to me why he rejected the pull request: in some cases, adding the warnings pragma can reduce how fast Perl executes.&lt;/p&gt;

&lt;p&gt;So the moral of the story is, be careful when adding use warnings; line. To be honest with you, I avoid dealing with missing warnings issues unless I know the author personally.&lt;/p&gt;

&lt;h3 id=&#34;missing-meta-json&#34;&gt;Missing META.json&lt;/h3&gt;

&lt;p&gt;Sometimes, you will find a distribution missing the META.json file. Recently, I have noticed many CPAN module authors have adopted &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; as the distribution builder. I am a big fan of this tool, however if the author is moving from a traditional distribution builder like &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt; then they often forget to generate this file.&lt;/p&gt;

&lt;p&gt;There is an easy solution to this problem: just add &lt;code&gt;[MetaJSON]&lt;/code&gt; to the dist.ini file, and Dist::Zilla will generate it during the build process.&lt;/p&gt;

&lt;h3 id=&#34;missing-a-minimum-perl-version&#34;&gt;Missing a minimum Perl version&lt;/h3&gt;

&lt;p&gt;This is where the build script does not declare the minimum version of Perl it requires. I am now going to show you how to add this information depending on what distribution builder is used by the module author.&lt;/p&gt;

&lt;p&gt;In case of ExtUtils::MakeMaker, it is as simple as adding the key &lt;code&gt;MIN_PERL_VERSION&lt;/code&gt; as shown below to the Makefile.PL script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::MakeMaker;

WriteMakefile(
  MIN_PERL_VERSION   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas if distribution builder is Module::Build then you can do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Module::Build;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Module::Builder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  requires &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it is using Dist::Zilla then you can either explicitly set the minimum Perl version in the dist.ini as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[Prereqs]
perl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can use the plugin &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::MinimumPerlFast&#34;&gt;MinimumPerlFast&lt;/a&gt; which will detect the minimum Perl version needed by the distribution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[MinimumPerlFast]
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need any help getting started as a CPAN contributor, feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to become a CPAN contributor</title>
      <link>http://localhost:1313/article/how-to-become-cpan-contributor/</link>
      <pubDate>Sun, 13 May 2018 20:46:28 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-become-cpan-contributor/</guid>
      <description>

&lt;p&gt;To become a CPAN contributor, you don&amp;rsquo;t need to write a new CPAN distribution, you just need to submit a change to an existing distribution that get&amp;rsquo;s accepted by the author.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never gotten your hands dirty editing Perl modules, the first question that may come to mind is: &amp;ldquo;Do I know enough to contribute to other people&amp;rsquo;s code?&amp;rdquo;. Well in my experience, you don&amp;rsquo;t have to be an expert to become a contributor. There are plenty of opportunities out there suitable for beginner-level Perl programmers.&lt;/p&gt;

&lt;h3 id=&#34;how-about-an-example&#34;&gt;How about an example?&lt;/h3&gt;

&lt;p&gt;Before I answer that question, I would like to point you to where to look for stuff to contribute. The easiest way is to keep an eye on the metacpan &lt;a href=&#34;https://metacpan.org/recent&#34;&gt;recently uploaded&lt;/a&gt; distributions page. I recommend this for beginners as new distributions usually offer plenty of opportunities to contribute.&lt;/p&gt;

&lt;p&gt;As you&amp;rsquo;re clicking through recently uploaded distributions, check the &lt;strong&gt;Kwalitee&lt;/strong&gt; link on each distribution&amp;rsquo;s page, and look to see if any issues are listed. Kwalitee issues are often minor that any beginner can help with.&lt;/p&gt;

&lt;p&gt;In terms of example issues that contributors can help with, I&amp;rsquo;ve listed the most common ones below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code is missing strict/warnings pragma&lt;/li&gt;
&lt;li&gt;Distribution missing META file(s)&lt;/li&gt;
&lt;li&gt;Pod syntax error&lt;/li&gt;
&lt;li&gt;Makefile.PL/Build.PL missing build prereqs&lt;/li&gt;
&lt;li&gt;Missing license meta&lt;/li&gt;
&lt;li&gt;MANIFEST incomplete/lists files not in distribution&lt;/li&gt;
&lt;li&gt;Build script is not executable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are lucky then you might find the distribution source is hosted on GitHub. For your first few contributions, I would suggest focusing on distributions hosted on GitHub as chances are, you already have a GitHub account. To check if a distribution is on GitHub, look for the &amp;ldquo;Clone repository&amp;rdquo; link on the distribution&amp;rsquo;s metacpan page (&lt;a href=&#34;https://metacpan.org/pod/Term::ProgressBar&#34;&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;prepare-the-ground-first&#34;&gt;Prepare the ground first&lt;/h3&gt;

&lt;p&gt;By this point you should have identified a distribution with a Kwalitee issue that is hosted on GitHub. Fork the repository on GitHub so that you have a copy of the distribution source in your own repository. The next step is to open a terminal and clone the forked repository on to your local machine.&lt;/p&gt;

&lt;p&gt;Create a new branch for your proposed changes. Give the branch a meaningful name that describes the nature of the contributions you intend to make (e.g. &amp;ldquo;kwalitee-fixes&amp;rdquo;). Before you make any changes, try building and installing the module to make sure the code compiles and the tests are passing. Lets follow the happy path and assume the distribution is clean and all test pass.&lt;/p&gt;

&lt;h3 id=&#34;action-now&#34;&gt;Action now&lt;/h3&gt;

&lt;p&gt;This is your moment now, you are about to jump into someone else&amp;rsquo;s domain. So be extra &lt;strong&gt;careful&lt;/strong&gt; and &lt;strong&gt;vigilant&lt;/strong&gt;. Make sure you only change the parts you intend to. Watch out in case your text editor swaps tabs for spaces, or removes EOF newlines from files. If you&amp;rsquo;re changing code, follow the coding style of the author so that your changes fit with their way of doing things. This will make your contributions more likely to be accepted by them.&lt;/p&gt;

&lt;p&gt;Once you have made the necessary changes, commit and push the changes to your repository. Now go to your forked repository&amp;rsquo;s GitHub web page and create a pull request. Double check your commit and make sure no other changes are included by accident. Submit the pull request describing your changes what improvements they bring.&lt;/p&gt;

&lt;p&gt;Hopefully the author will merge your pull request and &lt;strong&gt;congratulations&lt;/strong&gt; you are a contributor now! You helped make Open Source better and should be proud. But don&amp;rsquo;t get &lt;em&gt;disheartened&lt;/em&gt; if you don&amp;rsquo;t see a response within a few days. You may get a response within minutes, but it might take months. One author responded to my pull request &lt;strong&gt;after a year&lt;/strong&gt;. In the meantime whilst you&amp;rsquo;re waiting to hear back, there are plenty of new distributions that could use your help!&lt;/p&gt;

&lt;h3 id=&#34;need-help&#34;&gt;Need help?&lt;/h3&gt;

&lt;p&gt;If you need a helping hand then feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going. I&amp;rsquo;ll also be speaking about this topic at &lt;a href=&#34;http://act.perlconference.org/tpc-2018-glasgow/&#34;&gt;The Perl Conference in Glasgow&lt;/a&gt;, so come on by and say hi.&lt;/p&gt;

&lt;p&gt;Good luck and all the very best with your CPAN contributions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2018/</link>
      <pubDate>Mon, 05 Mar 2018 20:10:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SPID&#34;&gt;Net::SPID&lt;/a&gt; provides an interface to the Italian digital identity system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SMS::Send::NANP::Twilio&#34;&gt;SMS::Send::NANP::Twilio&lt;/a&gt; can send SMS via Twilio&lt;/li&gt;
&lt;li&gt;Interact with Extreme Networking products over Telnet, SSH or Serial port using &lt;a href=&#34;https://metacpan.org/pod/Control::CLI::Extreme&#34;&gt;Control::CLI::Extreme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Figure out the default settings for an Apache httpd daemon using &lt;a href=&#34;https://metacpan.org/pod/Apache::Defaults&#34;&gt;Apache::Defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::AWS&#34;&gt;Config::AWS&lt;/a&gt; can parse the INI-like AWS config files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::ReadHandle::Include&#34;&gt;IO::ReadHandle::Include&lt;/a&gt; can read files with &lt;code&gt;#include&lt;/code&gt; directives&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::FromPerlVer&#34;&gt;Module::FromPerlVer&lt;/a&gt; manages modules by Perl version&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Break up large database queries into batches using &lt;a href=&#34;https://metacpan.org/pod/DBIx::BatchChunker&#34;&gt;DBIx::BatchChunker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Visitor::Tiny&#34;&gt;Data::Visitor::Tiny&lt;/a&gt; recursively walks data structures&lt;/li&gt;
&lt;li&gt;Get a DWIM JSON parser with &lt;a href=&#34;https://metacpan.org/pod/JSON::ize&#34;&gt;JSON::ize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Turn DBIx::Class results into JSON API documents using &lt;a href=&#34;https://metacpan.org/pod/JSONAPI::Document&#34;&gt;JSONAPI::Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Term&#34;&gt;Pod::Term&lt;/a&gt; is another pod parser borne out of need. Last time I checked Pod::Simple still had code called &amp;ldquo;blackbox&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Transform CSV files into pivot-style tables with &lt;a href=&#34;https://metacpan.org/pod/Text::CSV::Pivot&#34;&gt;Text::CSV::Pivot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pg::ServiceFile&#34;&gt;Pg::ServiceFile&lt;/a&gt; is a PostgreSQL connection service file interface&lt;/li&gt;
&lt;li&gt;PostgreSQL connection service file parser: &lt;a href=&#34;https://metacpan.org/pod/Config::Pg::ServiceFile&#34;&gt;Config::Pg::ServiceFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another XKCD-style password generator, perhaps better than others though: &lt;a href=&#34;https://metacpan.org/pod/CtrlO::Crypt::XkcdPassword&#34;&gt;CtrlO::Crypt::XkcdPassword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add Design By Contract á la Eiffel with &lt;a href=&#34;https://metacpan.org/pod/Class::DbC&#34;&gt;Class::DbC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate a GUI from a text design using &lt;a href=&#34;https://metacpan.org/pod/GUIDeFATE&#34;&gt;GUIDeFATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Back up your repositories, issues, gists and more with &lt;a href=&#34;https://metacpan.org/pod/Github::Backup&#34;&gt;Github::Backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try to Do the Right Thing &amp;trade; when opening files with &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parallel::Subs&#34;&gt;Parallel::Subs&lt;/a&gt; is a simple way to run subs in parallel and process their return value in perl. Let&amp;rsquo;s hope Storable is fast enough!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::CLI&#34;&gt;Term::CLI&lt;/a&gt; is a command line interpreter based on Term::ReadLine&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unix::Groups::FFI&#34;&gt;Unix::Groups::FFI&lt;/a&gt; provides an interface to Unix group syscalls&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A client for talking with the Transmission BitTorrent daemon: &lt;a href=&#34;https://metacpan.org/pod/Mojo::Transmission&#34;&gt;Mojo::Transmission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::JSONAPI&#34;&gt;Mojolicious::Plugin::JSONAPI&lt;/a&gt; is a Mojo plugin for building JSON API-compliant applications&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Auth::SSO&#34;&gt;Plack::Auth::SSO&lt;/a&gt; is a role for middleware Single Sign On (SSO) authentication&lt;/li&gt;
&lt;li&gt;Measure HTTP stats on each request with &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::StatsPerRequest&#34;&gt;Plack::Middleware::StatsPerRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::Fast&#34;&gt;URI::Fast&lt;/a&gt; is a fast(er) URI parser&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup your computer for CPAN-PRC</title>
      <link>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</link>
      <pubDate>Wed, 21 Feb 2018 23:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</guid>
      <description>

&lt;p&gt;Earlier I wrote about &lt;a href=&#34;http://localhost:1313/article/why-should-you-join-cpan-prc/&#34;&gt;why should you join CPAN Pull Request Challenge&lt;/a&gt;. Now I will explain how to get your computer ready to work on your assignment. You can grab a Docker image and start hacking right away, or you can install everything you need on your computer.&lt;/p&gt;

&lt;h3 id=&#34;option-1-the-docker-way&#34;&gt;Option 1: The Docker Way&lt;/h3&gt;

&lt;p&gt;By using a Docker image that has everything you need, you can start working in minutes.&lt;/p&gt;

&lt;h4 id=&#34;1-install-docker&#34;&gt;1: Install Docker&lt;/h4&gt;

&lt;p&gt;On Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, see the instructions for &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;2-fork-clone-the-repo&#34;&gt;2: Fork &amp;amp; clone the repo&lt;/h4&gt;

&lt;p&gt;Now you need to fork and clone the Github repository you were assigned for the PRC. For example, I created this &lt;a href=&#34;https://github.com/kyzn/App-p&#34;&gt;fork&lt;/a&gt;, and can clone it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/App-p ~/Desktop/App-p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-run-docker&#34;&gt;3: Run Docker&lt;/h4&gt;

&lt;p&gt;I have prepared a docker &lt;a href=&#34;https://github.com/kyzn/perlbrew-prc-dockerimage&#34;&gt;image&lt;/a&gt; which comes with a stable version of Perl, &lt;a href=&#34;https://metacpan.org/pod/App::perlbrew&#34;&gt;perlbrew&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt;, all pre-installed.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I would run docker on the repo I cloned in step 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -v ~/Desktop/App-p:/App-p -it kyzn/perlbrew-prc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/Desktop/App-p&lt;/code&gt; is the local path to the repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/App-p&lt;/code&gt; is the path of the directory inside the Docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will launch an Ubuntu image as root user, mounting the repository to &lt;code&gt;/App-p&lt;/code&gt;. Git is installed, but you need to use your local (non-Docker) terminal to pull/push. The text editors nano, vim, and emacs are installed in the image as well. You can also use your local text editor.&lt;/p&gt;

&lt;h4 id=&#34;building-a-docker-image&#34;&gt;Building a Docker Image&lt;/h4&gt;

&lt;p&gt;Alternatively, you can build the docker image by hand. Note that this will take some time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/perlbrew-prc-dockerimage
$ cd perlbrew-prc-dockerimage
$ docker build -t kyzn/perlbrew-prc:my_build .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use the same &lt;code&gt;docker run&lt;/code&gt; command with your own &lt;code&gt;my_build&lt;/code&gt; tag.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;option-2-the-local-way&#34;&gt;Option 2: The Local Way&lt;/h3&gt;

&lt;p&gt;You can install the same tools to your computer; I&amp;rsquo;ve prepared instructions for macOS and Ubuntu. This usually takes about one to two hours.&lt;/p&gt;

&lt;h4 id=&#34;notes-for-macos-users&#34;&gt;Notes for macOS users&lt;/h4&gt;

&lt;p&gt;Perl, during its installation, will ask for permission for incoming network connections. Denying that request doesn&amp;rsquo;t break anything for CPAN-PRC purposes.&lt;/p&gt;

&lt;p&gt;Installing modules via &lt;code&gt;cpanm&lt;/code&gt; might give you a permission error. In the terminal, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R $USER:staff ~/.cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command changes the owner of the cpanm folder, which usually fixes the issue.&lt;/p&gt;

&lt;p&gt;You need to install homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-install-perlbrew&#34;&gt;1: Install Perlbrew&lt;/h4&gt;

&lt;p&gt;Most systems come with a certain version of Perl installed. Yet it is often recommended not to tamper system Perl, as applications depend on its state. That&amp;rsquo;s why we want to install a separate Perl for development purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://install.perlbrew.pl | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s done, it will ask you to add &lt;code&gt;source ~/perl5/perlbrew/etc/bashrc&lt;/code&gt; to your &lt;code&gt;~/.bashrc&lt;/code&gt;. You should do as instructed right away.&lt;/p&gt;

&lt;h4 id=&#34;2-install-perl&#34;&gt;2: Install Perl&lt;/h4&gt;

&lt;p&gt;Now that we have Perlbrew in place, we can go ahead and install a Perl on our own, keeping system Perl alone. I am going to suggest installing latest stable-version. You may run &lt;code&gt;perlbrew available&lt;/code&gt; to see most common versions. Note that this will take a while.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install -j 4 stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two ways to use a Perl version with Perlbrew: &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt;. &lt;code&gt;use&lt;/code&gt; is temporary, it goes away once you close the terminal. That&amp;rsquo;s why I recommend &lt;code&gt;switch&lt;/code&gt;, which will make it permanent. Change the version to the one you just installed. You can run &lt;code&gt;perlbrew list&lt;/code&gt; to see installed versions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew switch $(perlbrew list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure switch worked, check your Perl version in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-install-cpanm&#34;&gt;3: Install cpanm&lt;/h4&gt;

&lt;p&gt;This is a &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;script&lt;/a&gt; that will help you install CPAN modules. There already is a client installed, called &lt;code&gt;cpan&lt;/code&gt;. But, &lt;code&gt;cpan&lt;/code&gt; requires configuration and is more verbose and slower than &lt;code&gt;cpanm&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install-cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be sure you&amp;rsquo;re using the perlbrew installed cpanm, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which cpanm | grep perlbrew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the terminal displays any matching output, it worked.&lt;/p&gt;

&lt;h4 id=&#34;4-install-dzil&#34;&gt;4: Install dzil&lt;/h4&gt;

&lt;p&gt;Many CPAN authors use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt; to build and release their modules. The chances of your PRC assignment having a dist.ini file (dzil configuration) are high.&lt;/p&gt;

&lt;p&gt;First you need to install a non-Perl dependency, openssl. On macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install Dist::Zilla with cpanm. Note that this will take a while, as it has a lot of dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Dist::Zilla
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-install-reply-optional&#34;&gt;5: Install reply (optional)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;reply&lt;/code&gt; is a nice interactive shell that lets you play around.&lt;/p&gt;

&lt;p&gt;Ubuntu users will need to install these missing dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libncurses5-dev libreadline-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install &lt;code&gt;reply&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Term::ReadLine::Gnu Reply
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Now you are ready to work on your assignment! Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why should you join CPAN-PRC?</title>
      <link>http://localhost:1313/article/why-should-you-join-cpan-prc/</link>
      <pubDate>Thu, 25 Jan 2018 09:23:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/why-should-you-join-cpan-prc/</guid>
      <description>

&lt;p&gt;The CPAN Pull Request Challenge (PRC) aims to improve the quality of code on &lt;a href=&#34;https://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt;, the online archive of Perl modules, by having participants submit pull requests to CPAN module authors.&lt;/p&gt;

&lt;p&gt;Every month participants are assigned a new module to improve, and submit &lt;a href=&#34;https://help.github.com/articles/about-pull-requests/&#34;&gt;pull requests&lt;/a&gt; to the module repo on GitHub. Participants are not competing with each other, rather the &amp;ldquo;challenge&amp;rdquo; is to keep up with your monthly assignments.&lt;/p&gt;

&lt;h3 id=&#34;how-to-sign-up&#34;&gt;How to sign up&lt;/h3&gt;

&lt;p&gt;You can join as an individual or as a team. A team could be your company, you and a few friends, or your local Perl Mongers group.&lt;/p&gt;

&lt;p&gt;Simply email Neil Bowers (&amp;ldquo;neil at bowers dot com&amp;rdquo;) your GitHub username and PAUSE ID if you have one, or if joining as a group, your GitHub organization name. Tell him you want to join the challenge, and you are in!&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Once per month, you will receive an email noting your assigned distribution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-assignment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can fix a failing test, fix an issue, correct a typo, any kind of improvement. If you&amp;rsquo;re not sure where to start, there are services on top of CPAN that can help identify issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpantesters.org/&#34;&gt;CPAN Testers&lt;/a&gt; is a Continuous Integration service that often identifies issues with failing tests and/or platform specific bugs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rt.cpan.org/&#34;&gt;Request Tracker&lt;/a&gt; is the default bug tracker for CPAN modules (issues may also be listed on GitHub)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpancover.com&#34;&gt;CPAN Cover&lt;/a&gt; reports on code coverage for tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpants.cpanauthors.org/&#34;&gt;CPANTS&lt;/a&gt; is a &amp;ldquo;kwalitee&amp;rdquo; assessment tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good place to start is &lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan&lt;/a&gt;, a CPAN search engine which links to all of the above services. Scan through the module documentation and related information, to try and find things that need fixing or enhancing.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified the changes you&amp;rsquo;d like to make, fork the module on GitHub, commit your changes and open a pull request with the new changes. Then reply to your assignment email saying &amp;ldquo;It&amp;rsquo;s done!&amp;rdquo;, and link to your pull requests on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Although it&amp;rsquo;s better to do your assignments every month, you may not be willing to commit to it, and that is fine! If something comes up, you can skip a month. If you need more time for a module, you can stick to your assignment for longer. There&amp;rsquo;s a solution as long as you want to keep participating.&lt;/p&gt;

&lt;h3 id=&#34;why-join&#34;&gt;Why join?&lt;/h3&gt;

&lt;p&gt;One reason is that this year might be your &lt;a href=&#34;http://neilb.org/2018/01/01/cpan-prc-2018.html&#34;&gt;last chance!&lt;/a&gt; It may &lt;a href=&#34;http://neilb.org/2018/01/06/what-after-prc.html&#34;&gt;evolve&lt;/a&gt;, but this will most likely be the &lt;strong&gt;last year&lt;/strong&gt; you can get a CPAN module assignment.&lt;/p&gt;

&lt;p&gt;I joined this challenge &lt;a href=&#34;https://kyzn.org/2015-01-17-cpan-pr-challenge-012015.html&#34;&gt;in 2015&lt;/a&gt; when I was still at college. It motivated me to read other people&amp;rsquo;s code, even though I had a hard time understanding it. It also taught me a lot about the Open Source ecosystem. I did 4 assignments in 2015, another 4 in 2016, and doubled to 8 in 2017. I am also part of &lt;a href=&#34;https://github.com/ziprecruiter&#34;&gt;Team-ZipRecruiter&lt;/a&gt;, which has been participating since April 2017. It really is fun!&lt;/p&gt;

&lt;p&gt;If you are looking for more reasons, here are few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a great way to study &amp;ldquo;production ready&amp;rdquo; code and communicate with fellow programmers&lt;/li&gt;
&lt;li&gt;You can contribute to open source code, support Perl and build your resume&lt;/li&gt;
&lt;li&gt;Assignments introduce you to code on CPAN that you otherwise might have missed&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re part of a group it could be a fun team-building event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds interesting? Then send an email to Neil (&amp;ldquo;neil at bowers dot com&amp;rdquo;) with your GitHub username!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-merged.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest is here</title>
      <link>http://localhost:1313/article/hacktoberfest-is-here/</link>
      <pubDate>Sun, 02 Oct 2016 10:51:01 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-is-here/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; is here, and you can be part of the effort to make Perl the most popular language in the month long festival of patches and pull requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/&#34;&gt;GitHub&lt;/a&gt; have teamed up to encourage new users to participate in open source. Make four pull requests to any GitHub project and they&amp;rsquo;ll give you a limited-edition Hacktoberfest t-shirt. It might not sound like much, but consider what you get besides the shirt: you&amp;rsquo;re in the commit logs of four projects and your profile has some history. That&amp;rsquo;s the first step in building your open source résumé.&lt;/p&gt;

&lt;p&gt;The sponsors suggest that projects that want to participate label their issues with &amp;ldquo;Hacktoberfest&amp;rdquo;. That&amp;rsquo;s not strictly necessary, but you can &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;search&lt;/a&gt; for issues that projects think are suitable for new users. I think all of my projects are suitable (I may be optimistic), so I wanted a way to label all of my issues across all of my projects.&lt;/p&gt;

&lt;p&gt;I found out about this as I was building some other GitHub tools. I looked at &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Pithub&#34;&gt;Pithub&lt;/a&gt;, and Marchex&amp;rsquo;s &lt;a href=&#34;https://github.com/marchex/github-api-tools&#34;&gt;github-api-tools&lt;/a&gt; but I wanted to iterate through long lists of paged results and process each item as I received them. The &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub Developer API&lt;/a&gt; is quite nice and even if you are re-inventing the wheel you&amp;rsquo;re learning about wheels, making this a fun night of work.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/examples/hacktoberfest.pl&#34;&gt;hacktoberfest.pl&lt;/a&gt; in my &lt;a href=&#34;https://github.com/briandfoy/ghojo&#34;&gt;ghojo&lt;/a&gt; repo. It will log in, list all of my repos (there are a couple hundred), create the &amp;ldquo;Hacktoberfest&amp;rdquo; label in each, and then apply the label to each open issue.&lt;/p&gt;

&lt;p&gt;The ghojo project is still very much in its infancy (which means there&amp;rsquo;s all sorts of pull request opportunities). But I allow quite a bit of flexibility by accepting a callback for things I expect to return many items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  };

$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each time I find a repo—and you don&amp;rsquo;t have to know how I do that—I run that callback. It&amp;rsquo;s a little bit like &lt;a href=&#34;https://metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt;&amp;rsquo;s use of the &lt;code&gt;wanted&lt;/code&gt; coderef. You don&amp;rsquo;t see the very nice API paging going on either; &lt;code&gt;repos&lt;/code&gt; keeps fetching more results as long as there are more results.&lt;/p&gt;

&lt;p&gt;That callback deals with a repo, but each repo has a list of issues. I want to process this list of issues as I run into them. So what I need is a callback to process a repo with a nested callback for the issues:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.24&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $label_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hacktoberfest&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $user, $repo ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;m{/}&lt;/span&gt;, $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{full_name};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_repo_object( $owner, $repo );

  &lt;span style=&#34;color:#75715e&#34;&gt;# get the labels for that repo&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{ &lt;span style=&#34;color:#e6db74&#34;&gt;qw(name color)&lt;/span&gt; } } $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;labels&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*;&lt;/span&gt;

  unless( exists $labels{$label_name} ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create_label( $label_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff5500&amp;#39;&lt;/span&gt; );
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\tCreated $label_name label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $rc;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
    $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_labels_to_issue( $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{number}, $label_name );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $item;
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $issues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;issues( $callback );

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $repo;
  };


$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Curiously, within a couple of hours of uploading the program, I received my first Hacktoberfest &lt;a href=&#34;https://github.com/briandfoy/ghojo/pull/14&#34;&gt;pull request&lt;/a&gt;. &lt;a href=&#34;https://github.com/haydenty&#34;&gt;haydenty&lt;/a&gt; added the &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file to my ghojo repo. It&amp;rsquo;s something I&amp;rsquo;ve been meaning to add to all of my repos. Now I&amp;rsquo;m considering adding an issue to each repo to note that and label each one &amp;ldquo;Hacktoberfest&amp;rdquo;. Or someone who wants to get started with something simple can create the issues for me, or send the pull requests right off.&lt;/p&gt;

&lt;p&gt;If you have lots of repos, label your issues to help push Perl up in &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;the rankings&lt;/a&gt;. By the time we reach the end of the month, I&amp;rsquo;ll have a program to reverse the labeling.&lt;/p&gt;

&lt;p&gt;Some of this I&amp;rsquo;m doing for fun, and some of this I&amp;rsquo;m doing because some organizations want better GitHub tools. Somehow how October is when all of that is coming together. If you&amp;rsquo;d like me to work on this sort of stuff for you, &lt;a href=&#34;mailto:brian.d.foy@gmail.com&#34;&gt;let me know&lt;/a&gt;! But submit those pull requests first so you get that t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2016</title>
      <link>http://localhost:1313/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</link>
      <pubDate>Wed, 10 Feb 2016 15:02:35 +0000</pubDate>
      
      <guid>http://localhost:1313/article/213/2016/2/10/What-s-new-on-CPAN---January-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; Last year&amp;rsquo;s &amp;ldquo;module of the month&amp;rdquo; experiment has come to an end. I think there are better ways to promote Perl modules and developers (see &lt;a href=&#34;http://cpan-weekly.org/&#34;&gt;CPAN Weekly&lt;/a&gt; for example).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convert CPAN distributions into RPM packages with the newly-repackaged &lt;a href=&#34;https://metacpan.org/pod/App::CPANtoRPM&#34;&gt;App::CPANtoRPM&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Inspect&#34;&gt;App::Inspect&lt;/a&gt; helps you easily find the versions and locations of installed modules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::tt&#34;&gt;App::tt&lt;/a&gt; is a command line time tracking app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Duo&#34;&gt;Net::Duo&lt;/a&gt; provides a Perl API for the popular multifactor authentication service&lt;/li&gt;
&lt;li&gt;Read articles from two popular sources at the command line: &lt;a href=&#34;https://metacpan.org/pod/App::tldr&#34;&gt;App::tldr&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/WebService::TDWTF&#34;&gt;WebService::TDWTF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conveniently find local outdated modules and for CPAN:&lt;a href=&#34;https://metacpan.org/pod/CPAN::Diff&#34;&gt;CPAN::Diff&lt;/a&gt; and Pinto: &lt;a href=&#34;https://metacpan.org/pod/DarkPAN::Compare&#34;&gt;DarkPAN::Compare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dispatch log events to Slack with log4perl and &lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::Slack&#34;&gt;Log::Dispatch::Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Useful for low-level network tasks, &lt;a href=&#34;https://metacpan.org/pod/Net::Frame::Layer::VRRP&#34;&gt;Net::Frame::Layer::VRRP&lt;/a&gt; provides a Virtual Router Redundancy Protocol class&lt;/li&gt;
&lt;li&gt;A simple way to get a high-resolution Unix epoch: &lt;a href=&#34;https://metacpan.org/pod/Time::TAI::Simple&#34;&gt;Time::TAI::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::SQL&#34;&gt;Types::SQL&lt;/a&gt; is library of SQL types; useful for Moo/Moose/Mouse classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interesting; call functions / methods from a different caller with &lt;a href=&#34;https://metacpan.org/pod/Call::From&#34;&gt;Call::From&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Declare&#34;&gt;Export::Declare&lt;/a&gt; provides simple and clean ways to export code and variables.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Importer&#34;&gt;Importer&lt;/a&gt; provides convenient routines for importing (and renaming!) code from modules&lt;/li&gt;
&lt;li&gt;Easily test non-blocking Perl scripts (like Mojo apps) with &lt;a href=&#34;https://metacpan.org/pod/Test::Script::Async&#34;&gt;Test::Script::Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::Workflow&#34;&gt;Test2::Workflow&lt;/a&gt; is a framework for building testing workflows (e.g. &lt;a href=&#34;https://metacpan.org/pod/Test2::Tools::Spec&#34;&gt;Test2::Tools::Spec&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Make scalars which execute a subroutine every time they&amp;rsquo;re accessed using &lt;a href=&#34;https://metacpan.org/pod/Tie::Scalar::Callback&#34;&gt;Tie::Scalar::Callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run Visual Basic and JavaScript code via OLE with &lt;a href=&#34;https://metacpan.org/pod/Win32::VBScript&#34;&gt;Win32::VBScript&lt;/a&gt;. Fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Paul Evans continues to deliver new hardware tools via &lt;a href=&#34;https://metacpan.org/pod/Device::Chip&#34;&gt;Device::Chip&lt;/a&gt;! Get a driver for the PCF8563 chip (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::PCF8563&#34;&gt;Device::Chip::PCF8563&lt;/a&gt;), and a driver for SD and MMC cards (&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::SDCard&#34;&gt;Device::Chip::SDCard&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Poker::Eval&#34;&gt;Poker::Eval&lt;/a&gt; is a base class providing routines for Poker games including dealing, scoring and calculating expected win rates.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::redis&#34;&gt;URI::redis&lt;/a&gt; provides a URI class specific to Redis URIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::HTS&#34;&gt;Bio::HTS&lt;/a&gt; is an early-stage Perl interface for htslib&lt;/li&gt;
&lt;li&gt;Get cryptographically-secure and fast pseudo random number generators using &lt;a href=&#34;https://metacpan.org/pod/Crypt::DRBG&#34;&gt;Crypt::DRBG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create CGI (yes!) GitHub webhooks with&lt;a href=&#34;https://metacpan.org/pod/CGI::Github::Webhook&#34;&gt;CGI::Github::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Curious: &lt;a href=&#34;https://metacpan.org/pod/Lemplate&#34;&gt;Lemplate&lt;/a&gt; compiles TT templates to standalone Lua modules for OpenResty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing GitHub with the search API</title>
      <link>http://localhost:1313/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</link>
      <pubDate>Fri, 05 Sep 2014 12:11:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/</guid>
      <description>

&lt;p&gt;The Net::GitHub module provides a perly interface to GitHub&amp;rsquo;s feature-rich API. You can do everything with it, from creating new repos to managing issues and initiating pull requests. Today I&amp;rsquo;m going to focus on search.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Grab yourself a copy of &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; (make sure it&amp;rsquo;s version 0.68 or higher). The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=Net-GitHub+0.68&#34;&gt;results&lt;/a&gt; show that it builds on all major platforms, including Windows. You can install it via from CPAN at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Net::GitHub&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;first-steps&#34;&gt;First steps&lt;/h3&gt;

&lt;p&gt;First we need to create a search object. You can search GitHub anonymously up to 5 times per minute or if you authenticate, 20 times per minute. The module &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;documentation&lt;/a&gt; shows examples of how to authenticate, so we&amp;rsquo;ll proceed here unauthenticated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#75715e&#34;&gt;# unauthenticated&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above creates a &lt;code&gt;$search&lt;/code&gt; object, and initiates a repo search for docker. The &lt;code&gt;%data&lt;/code&gt; hash contains the search results. Let&amp;rsquo;s have a look at them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;incomplete_results&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; bless( &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JSON::XS::Boolean&amp;#39;&lt;/span&gt; ),
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;total_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12830&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ {
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open_issues_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;771&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.github.com/repos/docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_downloads&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; bless( &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JSON::XS::Boolean&amp;#39;&lt;/span&gt; ),
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tags_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://api.github.com/repos/docker/docker/tags&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forks_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2794&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_issues&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $VAR1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;}[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;has_downloads&amp;#39;&lt;/span&gt;},
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clone_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/docker/docker.git&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;private&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $VAR1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;incomplete_results&amp;#39;&lt;/span&gt;},
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watchers_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pushed_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-09-05T00:32:46Z&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Docker - the open-source application container engine&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;updated_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-09-04T21:59:25Z&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html_url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stargazers_count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;135198&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watchers&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14846&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;created_at&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2013-01-18T18:10:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;open_issues&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; 771,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;language&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt;Go&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                   &amp;#39;&lt;/span&gt;git_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt;git:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/docker/&lt;/span&gt;docker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;full_name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker/docker&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;homepage&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.docker.com&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forks&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2794&lt;/span&gt;,
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;score&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;89.950935&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
                   },
            ]
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve truncated the results for the sake of brevity, to show the top level key values and one simplified repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;incomplete_results&lt;/code&gt; is a key value pair that returns a boolean true if the are more search results than those returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total_count&lt;/code&gt; shows the total number of repos returned by the search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; is the interesting one - it&amp;rsquo;s an arrayref of repo hashes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-more-results&#34;&gt;Getting more results&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s update the code to pull more results. GitHub permits up to 100 results per API call and a 1,000 results per search.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker&amp;#39;&lt;/span&gt;,
                                      per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;has_next_page) {
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 5 queries max per minute&lt;/span&gt;
    push @data, @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above executes the same search as before, except now I&amp;rsquo;m passing the &lt;code&gt;per_page&lt;/code&gt; parameter to get 100 results per call. I also extract the &lt;code&gt;items&lt;/code&gt; arrayref directly into the &lt;code&gt;@data&lt;/code&gt; array. The while loop will continue to call the search API until no further results are returned or we hit the 1,000 result limit.&lt;/p&gt;

&lt;h3 id=&#34;analyzing-the-data&#34;&gt;Analyzing the data&lt;/h3&gt;

&lt;p&gt;So now we have a full set of results in , what can we do with it? One analysis that could be interesting is a count by programming language. Every repo hash contains a &lt;code&gt;language&lt;/code&gt; key value pair, so we can extract and count it. Lets see which language most docker-related repos are written in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::GitHub::V3;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::GitHub::V3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;search;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repositories({ &lt;span style=&#34;color:#e6db74&#34;&gt;q =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docker+created:&amp;gt;2014-09-01&amp;#39;&lt;/span&gt;,
                                      per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;has_next_page) {
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 5 queries max per minute&lt;/span&gt;
    push @data, @{ $search&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next_page&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{items} };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %languages;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo (@data) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{language} ? $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{language} : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;;
    $languages{ $language }&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (sort { $languages{$b} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $languages{$a} } keys %languages) {
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%10s: %5i\n&amp;#34;&lt;/span&gt;, $_, $languages{$_};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through this code. First of all, I changed the search argument to limit results to repos created since September 2014 using the &lt;code&gt;created&lt;/code&gt; qualifier. This was to ensure we didn&amp;rsquo;t hit the 1,000 result search limit. The GitHub search API supports a whole range of useful &lt;a href=&#34;https://developer.github.com/v3/search/#parameters&#34;&gt;search qualifiers&lt;/a&gt; (although it&amp;rsquo;s not documented, &lt;code&gt;created&lt;/code&gt; will take a full timestamp like &lt;code&gt;2014-09-01T00:00:00Z&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next I declared the &lt;code&gt;%languages&lt;/code&gt; hash and iterated through the results, extracting each repo&amp;rsquo;s language. Where language was &lt;code&gt;undef&lt;/code&gt;, I labelled the repo &amp;ldquo;Other&amp;rdquo;. Finally I sorted the results and printed them using &lt;a href=&#34;https://perldoc.perl.org/functions/printf.html&#34;&gt;printf&lt;/a&gt;to get a nicely formatted output. Here are the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;     Shell:   &lt;span style=&#34;color:#ae81ff&#34;&gt;238&lt;/span&gt;
     Other:    &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;
    Python:    &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
      Ruby:    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
JavaScript:     &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
        Go:     &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
      Perl:     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
       PHP:     &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
   Clojure:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      Java:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perhaps as is to be expected, the results show shell programs dominating the Docker space in September.&lt;/p&gt;

&lt;h3 id=&#34;further-info&#34;&gt;Further Info&lt;/h3&gt;

&lt;p&gt;GitHub&amp;rsquo;s search API supports more than just repo search. You can search issues, code and users as well. Check out the official GitHub search API &lt;a href=&#34;https://developer.github.com/v3/search/&#34;&gt;documentation&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt; provides an interface for far more than just search though. It&amp;rsquo;s a full-featured API - you can literally manage your GitHub account via Perl code with Net::GitHub. The developer Fayland Lam has provided loads of documentation, and I found him helpful responsive to enquiries. Thanks Fayland!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for more than just search, you may also want to look at Ingy döt Net&amp;rsquo;s awesome &lt;a href=&#34;https://github.com/ingydotnet/git-hub&#34;&gt;git-hub&lt;/a&gt;, which provides the full power of GitHub at the command line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celebrate CPAN day on August 16th</title>
      <link>http://localhost:1313/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</link>
      <pubDate>Wed, 13 Aug 2014 12:43:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/109/2014/8/13/Celebrate-CPAN-day-on-August-16th/</guid>
      <description>

&lt;p&gt;Back in 1995 CPAN was a visionary concept that propelled Perl to the height of its popularity during the dotcom boom. For the first time there was a single, integrated online system for Perl programmers to distribute software. Today CPAN continues to go from &lt;a href=&#34;http://neilb.org/cpan-report/&#34;&gt;strength to strength&lt;/a&gt; as Perl&amp;rsquo;s &amp;ldquo;killer feature&amp;rdquo;. CPAN Day is August the 16th - the day of the first ever upload to CPAN, and a fantastic opportunity to celebrate our wonderful tool and give back to the Perl community.&lt;/p&gt;

&lt;h3 id=&#34;ways-to-celebrate&#34;&gt;Ways to celebrate&lt;/h3&gt;

&lt;p&gt;The idea of CPAN Day was conceived by Philippe Bruhat from an IRC conversation with Neil Bowers. Since then, Neil has blogged daily about different ways to celebrate CPAN Day. Most of these ideas are Neil&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help make history by releasing a new &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/the-ghost-of-cpan-days-past.html&#34;&gt;distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Give your module good &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-abstract.html&#34;&gt;extract&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/craft-the-first-paragraph-of-your-description.html&#34;&gt;description&lt;/a&gt;, &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-modules-a-good-synopsis.html&#34;&gt;synopsis&lt;/a&gt; []() or &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/07/give-your-module-a-good-see-also-section.html&#34;&gt;see also&lt;/a&gt; section&lt;/li&gt;
&lt;li&gt;Thank a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/thank-a-cpan-author-on-cpan-day.html&#34;&gt;CPAN author&lt;/a&gt; or acknowledge a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/acknowledge-your-contributors-on-cpan-day.html&#34;&gt;contributor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Help keep Perl strong and donate to the &lt;a href=&#34;https://secure.donor.com/pf012/give&#34;&gt;Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put your module on &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/put-your-cpan-distributions-on-github.html&#34;&gt;Github&lt;/a&gt; so other programmers can easily contribute&lt;/li&gt;
&lt;li&gt;Classify your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/classify-your-rt-tickets-on-cpan-day.html&#34;&gt;RT tickets&lt;/a&gt; or fix a &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-a-bug-on-cpan-day.html&#34;&gt;bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have a stable module, let others know and update the distribution version to 1.0&lt;/li&gt;
&lt;li&gt;Check your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/check-your-test-coverage-with-develcover.html&#34;&gt;test coverage&lt;/a&gt; with Devel::Cover&lt;/li&gt;
&lt;li&gt;Make your module more portable by fixing your CPAN Testers &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/fix-your-cpan-testers-failures.html&#34;&gt;failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Increase your module&amp;rsquo;s &amp;ldquo;kwalitee&amp;rdquo; by improving your &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/get-cpants-clean-on-cpan-day.html&#34;&gt;CPANTS rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe improve your module &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/08/dont-be-afraid-to-rename-your-module-dist.html&#34;&gt;name&lt;/a&gt; or remove the &lt;a href=&#34;http://blogs.perl.org/users/book/2014/08/curating-cpan-sometimes-mean-deleting-stuff.html&#34;&gt;module&lt;/a&gt; entirely&lt;/li&gt;
&lt;li&gt;Write an article about your favourite CPAN module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there are loads of different ways to contribute! Earlier today I caught up with Neil Bowers and asked him if he had to pick one, which was the most important contribution. Neil said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I would pick the see also section - it outlines other relevant modules, the pros and cons of each one and saves people time when first approaching a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For you self-interested module authors out there, Neil also explained that a good SEE ALSO section can make your own module more popular. This is because &lt;a href=&#34;https://metacpan.org/&#34;&gt;metacpan&lt;/a&gt; is built on elastic search and by listing other modules in the SEE ALSO, you ensure that your modules appear in the search results for those other modules.&lt;/p&gt;

&lt;p&gt;So how will you celebrate CPAN Day? Even if you did just one of the above suggestions, you&amp;rsquo;d be supporting the community in some way. Apparently some of CPAN&amp;rsquo;s most prolific authors are planning large releases to CPAN. Diff records will be broken, commit history will be made. I&amp;rsquo;m planning to move my modules to GitHub and to thank an author. I can&amp;rsquo;t wait to see what everyone else does. The inaugural CPAN Day is August 16th 2014, let&amp;rsquo;s make it &lt;em&gt;our&lt;/em&gt; day!&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Thanks to Neil Bowers for contributing additional detail in support of this article.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create professional slideshows in seconds with App::revealup</title>
      <link>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</link>
      <pubDate>Fri, 06 Jun 2014 12:59:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is a command line app that creates slide shows from markdown documents. We listed it in this this month&amp;rsquo;s &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, but the app is so much fun I thought it was worth a separate feature.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to grab App::revealup from CPAN. The latest version (0.03) should run on most platforms including Windows. At the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::revealup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-a-presentation&#34;&gt;Create a presentation&lt;/h3&gt;

&lt;p&gt;App::revealup transforms markdown documents into slide shows, so let&amp;rsquo;s start by creating a basic presentation file, called presentation.md:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, markdown is easy to read. The code above is a single slide presentation. The only two interesting things going on here is the use of backticks (&amp;rdquo;`App::revealup`&amp;rdquo;) to create inline code and the hyperlink &amp;ldquo;&lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To view this slide in presentation mode, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open your browser and navigate to &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a second slide to showcase how different headers appear. In App::revealup the horizontal slide separator is three hyphens in a row (&amp;ldquo;&amp;mdash;&amp;rdquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::reveal dynamically reads the source presentation file, so you can leave the process running and just save the changes to the source presentation file. Reloading the browser at &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; should show the updated presentation. Press → to move to the second slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can add vertical slides too. These are delimited by three underscores (&amp;rdquo;___&amp;rdquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unordered
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lists are
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; made with plus, minus &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; asterisk
___

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Ordered
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lists are
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; made with numbers &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a period&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refreshing the browser, we get two additional slides. Press ↓ to move down one slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of trawling through every slide, I&amp;rsquo;ve completed the rest of the presentation and put it on &lt;a href=&#34;https://gist.github.com/dnmfarrell/1b118c5813a7a10ea7e2&#34;&gt;GitHub&lt;/a&gt;. The presentation content is an overview of the markdown syntax. Try running it with App::revealup!&lt;/p&gt;

&lt;p&gt;One nice feature is if you ever want to zoom out, just press the escape key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide_zoom.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-app-revealup-works&#34;&gt;How App::revealup works&lt;/h3&gt;

&lt;p&gt;App::revealup is the glue between the &lt;a href=&#34;http://lab.hakim.se/reveal-js/#/&#34;&gt;reveal.js&lt;/a&gt; library and the source markdown file. It launches a PSGI web server, and compiles a basic HTML document which loads reveal.js and any required libraries or css. You can override the default css theme by passing an extra command line option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme solarized&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::revealup installs all of the basic reveal.js &lt;a href=&#34;https://github.com/hakimel/reveal.js/tree/master/css/theme&#34;&gt;themes&lt;/a&gt; or you can provide your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/custom.css&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;App::revealup is great example of Perl as a glue language - pulling together useful libraries to create something greater than the sum of its parts. If you&amp;rsquo;d like to learn more about the markdown syntax, check out this &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheetsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;text=Create+professional+slideshows+in+seconds+with+App%3A%3Arevealup&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: command changed to match v0.10 (see &lt;a href=&#34;https://metacpan.org/changes/distribution/App-revealup&#34;&gt;changelog&lt;/a&gt;) 2014-08-24.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to contribute to the exercism.io Perl 5 repo</title>
      <link>http://localhost:1313/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</link>
      <pubDate>Thu, 22 May 2014 15:09:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/91/2014/5/22/How-to-contribute-to-the-exercism-io-Perl-5-repo/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Earlier this week I rounded off our exercism.io article with a call to action to help port exercises into the Perl 5 repo. Today I&amp;rsquo;m going to walk through the porting process step-by-step and show you how easy it is to contribute.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a GitHub account and Perl installed. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;fork-the-repo&#34;&gt;Fork the repo&lt;/h3&gt;

&lt;p&gt;To contribute to a project on GitHub, we&amp;rsquo;ll use the &amp;ldquo;fork and pull&amp;rdquo; approach. First we&amp;rsquo;ll login to GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_1.png&#34; alt=&#34;&#34; title=&#34;Login to GitHub&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, search for the exercism/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_2.png&#34; alt=&#34;&#34; title=&#34;Search for exercism/xperl5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_3.png&#34; alt=&#34;&#34; title=&#34;Click the fork button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;ldquo;Fork&amp;rdquo; button to copy the repo into our own perltricks/xperl5 repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_4.png&#34; alt=&#34;&#34; title=&#34;Our own forked repo&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;get-the-exercises&#34;&gt;Get the exercises&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ve forked the repo, we can commit changes to our forked version. To start we&amp;rsquo;ll need to download the Perl exercises from our forked repo. We can do this from the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/x&lt;/span&gt;perl5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the xperl5 repo into a directory called &amp;ldquo;xperl5&amp;rdquo;. Next download the list of common exercises:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/exercism/x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;common&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the latest list of available exercises to the &amp;ldquo;x-common&amp;rdquo; directory, which contains a collection of readme files for the exercises. Any exercise that has a readme file in x-common that is missing from the xperl5 directory needs to be ported.&lt;/p&gt;

&lt;h3 id=&#34;find-the-exercise-in-another-language&#34;&gt;Find the exercise in another language&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;ve found an exercise that needs to be ported, you&amp;rsquo;ll want to find that exercise in one of the other languages repos. It&amp;rsquo;s far easier to translate an exercise than to write it from scratch yourself! The Ruby, Python and JavaScript repos have most of the exercises, so we&amp;rsquo;ll start with one of those. For example to download the Ruby exercises repo, just type this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/exercism/x&lt;/span&gt;ruby&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the xruby directory doesn&amp;rsquo;t have the exercise you&amp;rsquo;re looking to port, try cloning xpython or xjavascript instead.&lt;/p&gt;

&lt;h3 id=&#34;porting-the-exercise&#34;&gt;Porting the exercise&lt;/h3&gt;

&lt;p&gt;To port an exercise you need to provide the exercise test file and an Example.pm module which passes the tests. Earlier this week I ported the &amp;ldquo;leap&amp;rdquo; exercise from Ruby to Perl. This involved three steps. First I created the new exercise subdirectory in the xperl5 directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ mkdir xperl5&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;leap&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, I translated the Ruby test file &amp;ldquo;xruby/leap/leap_test.rb&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
require_relative &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;

class Date
  def leap?
    throw &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try to implement this yourself instead of using Ruby&amp;#39;s implementation.&amp;#34;&lt;/span&gt;
  end
  
  alias :gregorian_leap? :leap?
  alias :julian_leap? :leap?
end

class YearTest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; MiniTest::Unit::TestCase
  def test_leap_year
    assert Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt;)
  end

  def test_non_leap_year
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1997&lt;/span&gt;)
  end
  
  def test_non_leap_even_year
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;)
  end

  def test_century
    skip
    refute Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;)
  end

  def test_fourth_century
    skip
    assert Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(&lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt;)
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to &amp;ldquo;xperl5/leap/leap.t&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Test::More tests &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ENV{EXERCISM} ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Example&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Leap&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $module &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;::is_leap&amp;#39;&lt;/span&gt;;

use_ok($module) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; BAIL_OUT (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You need to create a module called $module.pm.&amp;#34;&lt;/span&gt;);
can_ok($module, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_leap&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; BAIL_OUT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing package $module with sub is_leap().&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; strict &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;refs&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1996&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1996 is a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1997&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1997 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1998&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1998 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1900&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1900 is not a leap year&amp;#39;&lt;/span&gt;;
    is &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, $sub&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2400&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2400 is a leap year&amp;#39;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally I ported the example answer &amp;ldquo;xruby/leap/example.rb&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delegate&amp;#39;&lt;/span&gt;

class Year &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; SimpleDelegator

  def self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?(number)
    Year&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(number)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;leap?
  end 

  def leap?
    divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;divisible_by?(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
  end

  private

  def divisible_by?(i)
    (self % i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  end 
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the Perl version, &amp;ldquo;xperl5/leap/Example.pm&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Example;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_leap&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $year &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;)
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;divisible_by($year, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
        ? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;divisible_by&lt;/span&gt; {
    $_[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;_[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

__PACKAGE__;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the test file at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EXERCISM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; prove leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; ok   
All tests successful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.02&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; CPU)
Result: PASS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of our tests passed, so we can commit these files. I also &lt;a href=&#34;https://github.com/sillymoose/xperl6/tree/master/leap&#34;&gt;ported&lt;/a&gt; a Perl 6 version.&lt;/p&gt;

&lt;h3 id=&#34;add-the-new-exercise-to-the-forked-repo&#34;&gt;Add the new exercise to the forked repo&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve ported the files, we need to add them to the forked xperl5 repository and commit the change. Here&amp;rsquo;s are the commands to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd xperl5
$ git add leap&lt;span style=&#34;color:#e6db74&#34;&gt;/Example.pm leap/&lt;/span&gt;leap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
$ git commit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Added the leap exercise&amp;#39;&lt;/span&gt;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the forked repo is out of sync with exercism/xperl5 you&amp;rsquo;ll need to &lt;a href=&#34;http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository&#34;&gt;rebase&lt;/a&gt; it.&lt;/p&gt;

&lt;h3 id=&#34;create-a-pull-request&#34;&gt;Create a pull request&lt;/h3&gt;

&lt;p&gt;Returning to GitHub, all we have to do is initiate a pull request from our forked repo at perltricks/xperl5. Clicking the &amp;ldquo;pull requests&amp;rdquo; link on the right of the screen brings us to the pull requests screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;new pull request&amp;rdquo; button will create the pull request form, GitHub automatically knows that the pull request should go back to exercism/xperl5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/91/github_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the &amp;ldquo;Send pull request&amp;rdquo; button submits the pull request and we&amp;rsquo;re done! The exercism repo committers usually respond within a couple of hours. So now you&amp;rsquo;ve seen how easy it is to port an exercise, be warned it can be addictive &amp;hellip;&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;text=How+to+contribute+to+the+exercism.io+Perl+5+repo&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F91%2F2014%2F5%2F21%2FHow-to-contribute-to-the-exercism-io-Perl-5-repo&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

