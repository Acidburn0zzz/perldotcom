<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pod on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/pod/</link>
    <description>Recent content in Pod on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Mar 2018 20:10:05 +0000</lastBuildDate>
    <atom:link href="/tags/pod/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2018/</link>
      <pubDate>Mon, 05 Mar 2018 20:10:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SPID&#34;&gt;Net::SPID&lt;/a&gt; provides an interface to the Italian digital identity system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SMS::Send::NANP::Twilio&#34;&gt;SMS::Send::NANP::Twilio&lt;/a&gt; can send SMS via Twilio&lt;/li&gt;
&lt;li&gt;Interact with Extreme Networking products over Telnet, SSH or Serial port using &lt;a href=&#34;https://metacpan.org/pod/Control::CLI::Extreme&#34;&gt;Control::CLI::Extreme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Figure out the default settings for an Apache httpd daemon using &lt;a href=&#34;https://metacpan.org/pod/Apache::Defaults&#34;&gt;Apache::Defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::AWS&#34;&gt;Config::AWS&lt;/a&gt; can parse the INI-like AWS config files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::ReadHandle::Include&#34;&gt;IO::ReadHandle::Include&lt;/a&gt; can read files with &lt;code&gt;#include&lt;/code&gt; directives&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::FromPerlVer&#34;&gt;Module::FromPerlVer&lt;/a&gt; manages modules by Perl version&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Break up large database queries into batches using &lt;a href=&#34;https://metacpan.org/pod/DBIx::BatchChunker&#34;&gt;DBIx::BatchChunker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Visitor::Tiny&#34;&gt;Data::Visitor::Tiny&lt;/a&gt; recursively walks data structures&lt;/li&gt;
&lt;li&gt;Get a DWIM JSON parser with &lt;a href=&#34;https://metacpan.org/pod/JSON::ize&#34;&gt;JSON::ize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Turn DBIx::Class results into JSON API documents using &lt;a href=&#34;https://metacpan.org/pod/JSONAPI::Document&#34;&gt;JSONAPI::Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Term&#34;&gt;Pod::Term&lt;/a&gt; is another pod parser borne out of need. Last time I checked Pod::Simple still had code called &amp;ldquo;blackbox&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Transform CSV files into pivot-style tables with &lt;a href=&#34;https://metacpan.org/pod/Text::CSV::Pivot&#34;&gt;Text::CSV::Pivot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pg::ServiceFile&#34;&gt;Pg::ServiceFile&lt;/a&gt; is a PostgreSQL connection service file interface&lt;/li&gt;
&lt;li&gt;PostgreSQL connection service file parser: &lt;a href=&#34;https://metacpan.org/pod/Config::Pg::ServiceFile&#34;&gt;Config::Pg::ServiceFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another XKCD-style password generator, perhaps better than others though: &lt;a href=&#34;https://metacpan.org/pod/CtrlO::Crypt::XkcdPassword&#34;&gt;CtrlO::Crypt::XkcdPassword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add Design By Contract á la Eiffel with &lt;a href=&#34;https://metacpan.org/pod/Class::DbC&#34;&gt;Class::DbC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate a GUI from a text design using &lt;a href=&#34;https://metacpan.org/pod/GUIDeFATE&#34;&gt;GUIDeFATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Back up your repositories, issues, gists and more with &lt;a href=&#34;https://metacpan.org/pod/Github::Backup&#34;&gt;Github::Backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try to Do the Right Thing &amp;trade; when opening files with &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parallel::Subs&#34;&gt;Parallel::Subs&lt;/a&gt; is a simple way to run subs in parallel and process their return value in perl. Let&amp;rsquo;s hope Storable is fast enough!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::CLI&#34;&gt;Term::CLI&lt;/a&gt; is a command line interpreter based on Term::ReadLine&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unix::Groups::FFI&#34;&gt;Unix::Groups::FFI&lt;/a&gt; provides an interface to Unix group syscalls&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A client for talking with the Transmission BitTorrent daemon: &lt;a href=&#34;https://metacpan.org/pod/Mojo::Transmission&#34;&gt;Mojo::Transmission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::JSONAPI&#34;&gt;Mojolicious::Plugin::JSONAPI&lt;/a&gt; is a Mojo plugin for building JSON API-compliant applications&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Auth::SSO&#34;&gt;Plack::Auth::SSO&lt;/a&gt; is a role for middleware Single Sign On (SSO) authentication&lt;/li&gt;
&lt;li&gt;Measure HTTP stats on each request with &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::StatsPerRequest&#34;&gt;Plack::Middleware::StatsPerRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::Fast&#34;&gt;URI::Fast&lt;/a&gt; is a fast(er) URI parser&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reading remote documentation</title>
      <link>http://localhost:1313/article/reading-remote-documentation/</link>
      <pubDate>Sun, 11 Feb 2018 20:41:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/reading-remote-documentation/</guid>
      <description>

&lt;p&gt;When I need to read Perl documentation, I use &lt;a href=&#34;http://localhost:1313/article/155/2015/2/26/Hello-perldoc--productivity-booster/&#34;&gt;perldoc&lt;/a&gt;. I spend most of my time working at the terminal, so it&amp;rsquo;s convenient to drop to a command prompt and bring up the documentation for some module or command right there in the terminal.&lt;/p&gt;

&lt;h3 id=&#34;pod-cpandoc&#34;&gt;Pod::Cpandoc&lt;/h3&gt;

&lt;p&gt;Sometimes I need to check the documentation of a module I don&amp;rsquo;t have installed on my machine, and in those cases, &lt;code&gt;perldoc&lt;/code&gt; can&amp;rsquo;t help me. Instead I could use &lt;a href=&#34;https://metacpan.org/pod/Pod::Cpandoc&#34;&gt;cpandoc&lt;/a&gt;, as it behaves like perldoc, but it will fetch remote documentation if the module is not installed on your system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpandoc Foo::Bar
# displays Foo::Bar pod in pager app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;cpandoc&lt;/code&gt; supports the same options as &lt;code&gt;perldoc&lt;/code&gt;, you can use it for useful &lt;a href=&#34;http://perladvent.org/2011/2011-12-15.html&#34;&gt;tricks&lt;/a&gt; like browsing the source code for a module without installing it.&lt;/p&gt;

&lt;h3 id=&#34;metacpan&#34;&gt;♥ Metacpan ♥&lt;/h3&gt;

&lt;p&gt;Now, reading documentation in the terminal is fine and all, but I really like &lt;a href=&#34;http://metacpan.org&#34;&gt;metacpan&amp;rsquo;s&lt;/a&gt; distribution pages, which not only include documentation, but also incorporate CPAN Testers&amp;rsquo; results, a release history, open issues, and other useful links and data. So lately I&amp;rsquo;ve taken to reading documentation on metacpan.&lt;/p&gt;

&lt;p&gt;Getting there though, can be tiresome. I open a new browser tab, start typing &amp;ldquo;metacpan&amp;rdquo;, my browser then autocompletes it to the most recent metacpan address I viewed, which is inevitably &lt;strong&gt;not&lt;/strong&gt; the one I want, so I highlight the module name in the URL, and replace it with the one I&amp;rsquo;m looking for.&lt;/p&gt;

&lt;p&gt;After having performed this routine more times than I&amp;rsquo;d like to admit, I finally wrote a shell script to do it for me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://metacpan.org/pod/&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linux-gnu&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  xdg-open &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darwin&amp;#34;&lt;/span&gt;*  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  open &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cygwin&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  cygstart &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;msys&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;win32&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OSTYPE&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;freebsd&amp;#34;&lt;/span&gt;* &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  xdg-open &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OS not recognized&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It constructs the metacpan URL using the first argument passed to the script, and then opens the URL in a new browser tab. I named the script &lt;code&gt;pod&lt;/code&gt; and placed it in my local path (I was going to call it &lt;code&gt;mcpan&lt;/code&gt; but that&amp;rsquo;s a little similar to &lt;code&gt;cpanm&lt;/code&gt; for my tastes, plus &amp;ldquo;pod&amp;rdquo; is faster to type). So now if I want to view something on metacpan, all I have to do is type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod Foo::Bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the script does the rest. I&amp;rsquo;ve added commands for other operating systems, but I&amp;rsquo;ve only tested it on Linux and MacOS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing Perl 5 pod with Perl 6</title>
      <link>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</link>
      <pubDate>Thu, 30 Apr 2015 13:14:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just finished developing a Perl 5 pod &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5&#34;&gt;parser&lt;/a&gt; written in Perl 6. Developing the grammar was surprisingly easy, which is a testament to Perl 6 as I&amp;rsquo;m no genius coder. With help from the folks at #perl6, I did learn some interesting things along the way, and wanted to share them. Plus, code!&lt;/p&gt;

&lt;p&gt;By the way, if you haven&amp;rsquo;t read my &lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;introduction&lt;/a&gt; to Perl 6 grammars, check it out first, and the rest of this article should make more sense.&lt;/p&gt;

&lt;h3 id=&#34;developing-the-grammar&#34;&gt;Developing the grammar&lt;/h3&gt;

&lt;p&gt;In Perl 6 a grammar is a special type of class for parsing text. The idea is to declare a series of regexes using the &lt;code&gt;token&lt;/code&gt; method, which are then used to parse input. For &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/Grammar.pm&#34;&gt;Pod::Perl5::Grammar&lt;/a&gt; I literally worked my way through &lt;a href=&#34;https://perldoc.perl.org/perlpod.html&#34;&gt;perlpod&lt;/a&gt;, the Perl 5 pod specification, writing tokens as I went.&lt;/p&gt;

&lt;p&gt;There were a few challenges. First, consider how would you define a regex for lists? In pod, lists can contain lists, so can a definition include itself? The answer is yes, a recursive definition is fine, as long as it doesn&amp;rsquo;t match a zero length string, which leads to an infinite loop. Here&amp;rsquo;s the definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token over_back { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over&amp;gt;&lt;/span&gt;
                    [
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_item&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;verbatim_paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_for&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;begin_end&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;encoding&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over_back&amp;gt;&lt;/span&gt;
                    ]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;back&amp;gt;&lt;/span&gt;
                  }

token over      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;over [&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[0..9]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ]? &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }
token _item     { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;item &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
                    [
                        [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;  ]
                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;? ]
                    ]
                  }
token back      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;back &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The token &lt;code&gt;over_back&lt;/code&gt; describes an entire list from start to finish. It basically says that a list must begin with an &lt;code&gt;=over&lt;/code&gt; and end with &lt;code&gt;=back&lt;/code&gt;, and can have a whole bunch of things in between, including another &lt;code&gt;over_back&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For simplicity&amp;rsquo;s sake, I tried to name the tokens the same as how they&amp;rsquo;re written in pod. In some cases this wasn&amp;rsquo;t possible, for instance &lt;code&gt;item&lt;/code&gt; causes a namespace clash with another method that the Grammar class inherits. So watch out for those cases, you&amp;rsquo;ll get weird errors (this is a &lt;a href=&#34;https://rt.perl.org/rt3//Public/Bug/Display.html?id=77350&#34;&gt;bug&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is one pattern I really love and used over and over in the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;before &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is useful when you have a pattern to capture, but if there&amp;rsquo;s no matching pattern ignore everything else. In this case, &lt;code&gt;pod_section&lt;/code&gt; is a token that defines a section of pod, but pod is often written inline with Perl code, which the grammar should ignore. So the second half of the definition uses a negative lookahead &lt;code&gt;?!before&lt;/code&gt; to check the next character is not a &lt;code&gt;pod_section&lt;/code&gt;, and uses a period &lt;code&gt;.&lt;/code&gt; to match everything else (including newlines). Both conditions are grouped in square brackets with an asterisk placed &lt;strong&gt;outside&lt;/strong&gt; the group in order to check one character at a time.&lt;/p&gt;

&lt;p&gt;The grammar can be used to parse standalone and inline pod. It will extract every pod section it finds into match object (basically a Perl data structure), ready for processing. It&amp;rsquo;s easy to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parsefile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/some.pod&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action classes&lt;/h3&gt;

&lt;p&gt;So far so cool, but we can do more. Action classes are regular Perl 6 classes that can be given to the grammar at parse time. They provide behavior (actions) for token matching events. Just name the methods in the action class the same as the token they should be executed on. I wrote a pod-to-HTML action &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/ToHTML.pm&#34;&gt;class&lt;/a&gt;. Here is the method for converting &lt;code&gt;=head1&lt;/code&gt; to HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time the grammar matches a head1 token, this method executes. It&amp;rsquo;s passed the regex capture variable &lt;code&gt;$/&lt;/code&gt;, which contains the head1 regex capture, from which it extracts the text string.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool fact: action classes are even easier to write than grammars. It would be trivial to write a pod to markdown converter using Pod::Perl5::Grammar, unless someone beats me to it (hint, hint). That said, I did encounter a few challenges along the way.&lt;/p&gt;

&lt;p&gt;Essentially for HTML conversion, each action class method can just extract the text from it&amp;rsquo;s matching token, reformat it as required, and print it out. This approach worked great until I encountered nested tokens like formatting codes, which sit within a paragraph of text. You don&amp;rsquo;t want to go from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i&amp;gt;this is in italics&amp;lt;/i&amp;gt;
&amp;lt;b&amp;gt;this is in bold&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can happen because the italics and bold token regexes match first. So to get around this issue, I used a buffer to store the HTML from the transformed sub-tokens, and then when a paragraph token is matched, it substitutes its own text with the contents of the buffer. The action class code for this looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method paragraph ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $original_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $pair &lt;span style=&#34;color:#75715e&#34;&gt;# reverse as we&amp;#39;re working outside in&lt;/span&gt;
  {
    $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $para_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subst($pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key, {$pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value});
  }
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;{$para_text}&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;);
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;);
  }

method italic ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;i&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/i&amp;gt;&amp;#34;&lt;/span&gt;);
}

method bold ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for with action classes is regex handling. &lt;strong&gt;Every&lt;/strong&gt; action class example I&amp;rsquo;ve seen uses &lt;code&gt;$/&lt;/code&gt; in the method signature. This is a mistake, as guess what this does:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# silly example&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Cannot assign to a readonly variable or a value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mushroom cloud-style boom. When &lt;code&gt;$/&lt;/code&gt; is passed to &lt;code&gt;head1&lt;/code&gt; it is read only. Executing &lt;strong&gt;any&lt;/strong&gt; regex in the same lexical scope will attempt to overwrite &lt;code&gt;$/&lt;/code&gt;. This bit me a few times and with help from #perl6, I ended up using this pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding &lt;code&gt;is copy&lt;/code&gt; to the signature creates a copy instead of a reference for &lt;code&gt;$/&lt;/code&gt;. I then copy the match variable into &lt;code&gt;$match&lt;/code&gt;, so that the following regex can clobber &lt;code&gt;$/&lt;/code&gt;. I *think* a better solution is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($match)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it&amp;rsquo;s that simple, just don&amp;rsquo;t name the signature parameter &lt;code&gt;$/&lt;/code&gt; and all the headaches disappear. I haven&amp;rsquo;t tested this extensively&amp;hellip;&lt;/p&gt;

&lt;p&gt;To use an action class, just pass it to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::ToHTML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::ToHTML&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :$actions);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example I used a named positional argument &lt;code&gt;:$actions&lt;/code&gt;. This &lt;strong&gt;must&lt;/strong&gt; be called actions to work. In the second example I named the argument like this: &lt;code&gt;:actions($actions)&lt;/code&gt;, in which case the action class object can be called whatever you want.&lt;/p&gt;

&lt;h3 id=&#34;improving-pod&#34;&gt;Improving pod&lt;/h3&gt;

&lt;p&gt;PerlTricks.com articles are written in HTML. Special snowflake style HTML with class names and &lt;code&gt;span&lt;/code&gt; tags. This is a pain for writers to use and a pain to edit. I&amp;rsquo;d love to use pod as the source - it would be easier for writers to use and faster for me to edit. That said, I&amp;rsquo;d like to extend pod with some useful features for blogging. For instance, you may be familiar with formatting codes like &lt;code&gt;B&amp;lt;...&amp;gt;&lt;/code&gt; for bold and the like. Well, what about &lt;code&gt;@&amp;lt; ... &amp;gt;&lt;/code&gt; for a Twitter references, or &lt;code&gt;M&amp;lt; ... &amp;gt;&lt;/code&gt; for &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt; links?&lt;/p&gt;

&lt;p&gt;As Perl 6 grammars are classes, they can be inherited and overridden. So I can add my Twitter and Metacpan formatting codes to the grammar like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll also need to override the &lt;code&gt;format_codes&lt;/code&gt; token to include the new tokens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token format_codes  {
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;italic&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;bold&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;escape&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;singleline&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;index&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;zeroeffect&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;twitter|&amp;lt;metacpan&amp;gt;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s that easy. The new grammar will parse all pod, plus my two new formatting codes. Of course the action class Pod::Perl5::Pod can be extended and overridden too, and would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Pod::Perl5::ToHTML::PerlTricks is Pod::Perl5::ToHTML
{
  method twitter ($match)
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;,
      $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;a href=&amp;#34;&lt;/span&gt;http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;twitter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&amp;gt;{$match&amp;lt;name&amp;gt;.Str}&amp;lt;/&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  method metacpan ($match)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    self.add_to_buffer(&amp;#39;paragraph&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      $match.Str =&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{$match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wait-there-s-more&#34;&gt;Wait, there&amp;rsquo;s more&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a cleaner way to manage groups of tokens, it&amp;rsquo;s called &lt;a href=&#34;http://design.perl6.org/S06.html#Routine_modifiers&#34;&gt;multi-dispatch&lt;/a&gt;. Instead of defining &lt;code&gt;format_codes&lt;/code&gt; as a list of alternative tokens it can match against, we declare a prototype method, and declare each formatting method as a &lt;code&gt;multi&lt;/code&gt; of the prototype. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;proto token format_codes  { &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; }
multi token format_codes:italic { I&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:bold   { B&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:code   { C&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when this grammar is inherited, there is no need to override &lt;code&gt;format_codes&lt;/code&gt;. Instead I can declare the new tokens as multis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token format_codes:twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token format_codes:metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using multi-dispatch also has the modest benefit of simplifying the data extraction path when working with a match object. For instance, these code extracts the link section from the 3rd paragraph of a pod block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# regular version&lt;/span&gt;
is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# multi dispatch equivalent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example, the format token name &lt;code&gt;link&lt;/code&gt; is required. But with multi-dispatch, we can remove that, as shown in the second example.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s what I learned; overall writing a pod parser in Perl 6 was straightforward. If you&amp;rsquo;re programming in Perl 6 and have questions, I&amp;rsquo;d highly recommend the &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt; irc channel on freenode, the people there were friendly and responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;Multi-dispatch example added. Thanks to Jonathan Scott Duff for providing the multi-dispatch explanation and code. 2015-05-01&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello perldoc, productivity booster</title>
      <link>http://localhost:1313/article/155/2015/2/26/Hello-perldoc--productivity-booster/</link>
      <pubDate>Thu, 26 Feb 2015 13:42:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/155/2015/2/26/Hello-perldoc--productivity-booster/</guid>
      <description>

&lt;p&gt;Imagine this scenario: you&amp;rsquo;re using the DateTime module but you can&amp;rsquo;t remember the exact name of a function it provides. What do you do? You could open your browser, go to &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;, search for DateTime and look up the answer in the module&amp;rsquo;s documentation. A faster way would be to switch to the command line, and type &lt;code&gt;perldoc DateTime&lt;/code&gt; to display the module&amp;rsquo;s documentation right there in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; is a command line program for reading Perl documentation. It comes with Perl, so if you&amp;rsquo;ve got Perl installed, perldoc should be available too. Using perldoc is easy: as you&amp;rsquo;ve already seen, to view the documentation of a module you&amp;rsquo;ve installed, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc Module::Name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;perldoc will search for the module and if it finds it, display the module&amp;rsquo;s documentation (written in Pod). Using perldoc you can learn more about any aspect of Perl almost instantly. Want to know more about Pod? Try &lt;code&gt;perldoc pod&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dial-f-for-functions&#34;&gt;Dial -f for functions&lt;/h3&gt;

&lt;p&gt;Perl has a huge number of built-in functions, about 224 depending on the Perl version. Who can remember exactly how they all work? I know I can&amp;rsquo;t. To lookup a Perl function, use perldoc with the &lt;code&gt;-f&lt;/code&gt; switch. For instance to look up the documentation on the &lt;code&gt;rindex&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f rindex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rindex STR,SUBSTR,POSITION
rindex STR,SUBSTR
      Works just like index() except that it returns the position of the
      last occurrence of SUBSTR in STR. If POSITION is specified,
      returns the last occurrence beginning at or before that position.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! This is all well and good, but what do you do if you can&amp;rsquo;t remember the function name? Well you could use &lt;a href=&#34;https://metacpan.org/pod/B::Keywords&#34;&gt;B::Keywords&lt;/a&gt;, but another way would be to check out &lt;code&gt;perlfunc&lt;/code&gt; the Perl documentation on built-in functions. To read it, with perldoc just type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc perlfunc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;predefined-variables&#34;&gt;Predefined Variables&lt;/h3&gt;

&lt;p&gt;As with functions, Perl has a large number of predefined variables that do everything from storing the program name to tracking the state of the regex engine. They&amp;rsquo;re really useful, but often have obscure names like &lt;code&gt;$^O&lt;/code&gt; (the OS name). So if you find yourself needing to check whether you&amp;rsquo;re looking at a list separator (&lt;code&gt;$&amp;quot;&lt;/code&gt;) or an output separator (&lt;code&gt;$/&lt;/code&gt;), just use perldoc with the &lt;code&gt;-v&lt;/code&gt; switch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v $/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because some predefined variables have weird names, you may need to quote them on the command line for perldoc to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#34;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The predefined variables documentation is known as &lt;code&gt;perlvar&lt;/code&gt;. It&amp;rsquo;s well worth a read through at least once (&lt;code&gt;perldoc perlvar&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;searching-the-documentation&#34;&gt;Searching the documentation&lt;/h3&gt;

&lt;p&gt;Perl has a lot of great documentation, but it can be hard to remember the names of all of the entries. If you ever want to browse the table of contents, use &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Many people recommend perltoc for this, but for finding relevant entries, I think the perl entry is easier to browse than perltoc.&lt;/p&gt;

&lt;p&gt;Perl also has an extensive FAQ, (another entry that&amp;rsquo;s worth a read through). It has loads of answers to common queries. As usual you can read it with &lt;code&gt;perldoc faq&lt;/code&gt;, but you can also search it using the &lt;code&gt;-q&lt;/code&gt; switch. Want to know if there are any good IDEs for Perl? (a common newbie question):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;q ide&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Is there an IDE or Windows Perl Editor?
 Perl programs are just plain text, so any editor will do.

 If you&#39;re on Unix, you already have an IDE--Unix itself. The Unix
 philosophy is the philosophy of several small tools that each do one thing
 and do it well. It&#39;s like a carpenter&#39;s toolbox.

 If you want an IDE, check the following (in alphabetical order, not order
 of preference):

 Eclipse


     The Eclipse Perl Integration Project integrates Perl editing/debugging
     with Eclipse.

 Komodo


     ActiveState&#39;s cross-platform (as of October 2004, that&#39;s Windows,
     Linux, and Solaris), multi-language IDE has Perl support, including a
     regular expression debugger and remote debugging.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-module-install-locations&#34;&gt;Finding module install locations&lt;/h3&gt;

&lt;p&gt;perldoc isn&amp;rsquo;t just about documentation. If you need to find out where a module is installed, using the &lt;code&gt;-l&lt;/code&gt; switch, perldoc will return the filepath of the module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l Test::More&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get the path, you can open it in an editor directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ vi $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l Test::More)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One trick here: some modules don&amp;rsquo;t have any POD in them, for those modules, use &lt;code&gt;-lm&lt;/code&gt; to still return the path.&lt;/p&gt;

&lt;h3 id=&#34;read-module-source-code-in-perldoc&#34;&gt;Read module source code in perldoc&lt;/h3&gt;

&lt;p&gt;Finally, perldoc can also display module source code. Just use the &lt;code&gt;-m&lt;/code&gt; switch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m Test::More&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;This article has covered the most common features, but perldoc has a bunch of other capabilities that you can read about at the command line with &lt;code&gt;man perldoc&lt;/code&gt;. The Perl documentation is also &lt;a href=&#34;http://perldoc.perl.org/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that as you get more proficient with perldoc, you&amp;rsquo;ll need the online resources less and less. Get in the habit of switching to the command line, looking up something in perldoc and flipping right back to programming - it&amp;rsquo;s a productivity win.&lt;/p&gt;

&lt;h3 id=&#34;perldoc-cheatsheet&#34;&gt;perldoc cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;perldoc [option]

Module Options                               
--------------                               
         Module documentation     
-l       Module filepath          
-lm      Module filepath (alt.)   
-m       Module source


Search Options
--------------
-f     Get a built-in function definition
-v     Get a variable definition
-q      Search the faq for a keyword


Commonly Used Entries
---------------------
perl         Language overview, list of all other entries
perltoc      Table of contents
perlfunc     Built-in functions documentation
perlvar      Predefined variables documentation
perlref      References documentation
perlre       Regex documentation
faq          The Perl FAQ

Help
----
man perldoc     List of all perldoc options
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check your module POD using perldoc</title>
      <link>http://localhost:1313/article/9/2013/4/1/Check-your-module-POD-using-perldoc/</link>
      <pubDate>Mon, 01 Apr 2013 22:45:35 +0000</pubDate>
      
      <guid>http://localhost:1313/article/9/2013/4/1/Check-your-module-POD-using-perldoc/</guid>
      <description>&lt;p&gt;Perl ships with a command-line program called perldoc that makes it easier to search and read Perl&amp;rsquo;s vast documentation in the POD markup language. If perldoc is called with the -F flag, it will display the POD markup of an input file - this can be useful when your are developing a new Perl distribution and want to check the appearance of the POD in your module before it appears on CPAN for all to see.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pass a local file to perldoc&lt;/span&gt;

perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;F ProxyManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will then display the POD markup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ProxyManager(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)                                            

NAME
       Net::OpenVPN::ProxyManager &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; connect to proxy servers using OpenVPN&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

SYNOPSIS
       &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::OpenVPN::ProxyManager;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::OpenVPN::ProxyManager&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

       &lt;span style=&#34;color:#75715e&#34;&gt;# Create a config object to capture proxy server details&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $config_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $pm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create_config({remote &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;100.120.3.34 53&amp;#39;&lt;/span&gt;, proto &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;udp&amp;#39;&lt;/span&gt;});

       &lt;span style=&#34;color:#75715e&#34;&gt;# Launch OpenVPN and connect to the proxy&lt;/span&gt;
       $pm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect($config_object);
       &lt;span style=&#34;color:#75715e&#34;&gt;# do some stuff&lt;/span&gt;

       &lt;span style=&#34;color:#75715e&#34;&gt;# Disconnect from the proxy server&lt;/span&gt;
       $pm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;disconnect();

DESCRIPTION
       Net::OpenVPN::ProxyManager is an object oriented module that provides methods to simplify the management of proxy connections that support OpenVPN&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

This is a base generic class, see Net::OpenVPN::ProxyManager::HMA &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; additional methods to interact with hidemyass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com proxy servers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

METHODS
   &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
       The constructor accepts an anonymous hash &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; two optional parameters: config_path &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; warning_flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; config_path is the path that ProxyManager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm will &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; to create the config file when the create_config method is called&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; By default config_path is set to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/openvpn-config.conf&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

