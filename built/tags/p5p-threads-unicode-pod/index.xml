<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P5p Threads Unicode Pod on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/p5p-threads-unicode-pod/</link>
    <description>Recent content in P5p Threads Unicode Pod on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Oct 2001 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/p5p-threads-unicode-pod/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week on p5p 2001/10/21</title>
      <link>http://localhost:1313/pub/2001/10/p5pdigest/20011021.html/</link>
      <pubDate>Sun, 21 Oct 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/10/p5pdigest/20011021.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-this-fortnight-on-perl5-porters-08-21-october-2001-this-fortnight-on-perl5-porters-08-21-october-2001-span&#34;&gt;&lt;span id=&#34;This_fortnight_on_perl5_porters_08_21_October_2001&#34;&gt;This fortnight on perl5-porters (08-21 October 2001)&lt;/span&gt;&lt;/h3&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week on P5P&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#580_TODO&#34;&gt;5.8.0 TODO&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#POD&#34;&gt;POD&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Testing&#34;&gt;Testing&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#TAINT&#34;&gt;${^TAINT}&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#AUTOLOAD_and_packages&#34;&gt;AUTOLOAD and packages&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#BParrot&#34;&gt;B::Parrot&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Please send corrections and additions to perl-thisweek-YYYYMM@simon-cozens.org where YYYYMM is the current year and month. Changes and additions to the perl5-porters biographies are particularly welcome.&lt;/p&gt;

&lt;h3 id=&#34;span-id-580-todo-5-8-0-todo-span&#34;&gt;&lt;span id=&#34;580_TODO&#34;&gt;5.8.0 TODO&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jarkko posted a &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00391.html&#34;&gt;list of things to do&lt;/a&gt; before the 5.8.0 release (later, he posted another, &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00971.html&#34;&gt;shorter TODO list&lt;/a&gt;.) The main remaining issues are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PerlIO, Threading, and Multiplicity&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Attributes are Broken&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Basic Unicode Support&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FAQ Updates&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nick Ing-Simmons, who was unable to work on Perl for a while because of intellectual property restrictions at his new job, is back, and working very hard on &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00887.html&#34;&gt;fixing the PerlIO issues&lt;/a&gt;. Arthur Bergman has quietly but steadily been making &lt;code&gt;threads::shared&lt;/code&gt; work well enough to be shipped with 5.8.0. Damian has suitably evil plans for attributes, which Arthur and I plan to assimilate into the core.&lt;/p&gt;

&lt;p&gt;Jarkko, apparently working all alone, has made considerable progress towards making Perl comply with &amp;ldquo;Level 1 - Basic Unicode Support&amp;rdquo;, as defined by the Unicode standard, &lt;a href=&#34;http://www.unicode.org/unicode/reports/tr18/&#34;&gt;TR#18 &amp;ldquo;Unicode Regular Expression Guidelines&amp;rdquo;&lt;/a&gt;. Some features remain unimplemented, though, including character class subtraction and end-of-line matching.&lt;/p&gt;

&lt;p&gt;The Perl FAQ needs extensive updates, to remove obsolete material and add new material where appropriate.&lt;/p&gt;

&lt;p&gt;Any volunteers?&lt;/p&gt;

&lt;h3 id=&#34;span-id-pod-pod-span&#34;&gt;&lt;span id=&#34;POD&#34;&gt;POD&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In August, as he embarked on a rewrite of the POD documentation, Sean M. Burke said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A markup language without a clear specification simply invites everyone, including implementors, to have their own shaky idea of what the language means. And that, along with the general tendency for markup language parsing to produce write-only code, explains much of the upsetting current state of Pod::* modules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After several revisions, Sean has now released the final draft of his changes, which include a complete rewrite of the &lt;code&gt;perlpod&lt;/code&gt; manpage (a POD reference suitable for module authors), and the new &lt;code&gt;perlpodspec&lt;/code&gt; manpage (a more formal POD specification). The documents attempt to formalise best current practice in parsing and rendering POD, without introducing any radically new features. They were greeted with sighs of relief, and have been incorporated into perl-current.&lt;/p&gt;

&lt;p&gt;This is an excellent step towards alleviating the upsetting state of the &lt;code&gt;Pod::*&lt;/code&gt; modules, but there is still a lot of work to be done. Patches towards making the core documentation comply with the new specification are particularly welcome.&lt;/p&gt;

&lt;p&gt;Brad Appleton (the author of &lt;code&gt;Pod::Parser&lt;/code&gt; and &lt;code&gt;Pod::Checker&lt;/code&gt;) may not be able to hack on his POD modules for a while, and welcomes help. I am sure many of the other module authors could use a hand with testing and updating their modules in light of &lt;code&gt;perlpodspec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to help, or are interested in seeing what&amp;rsquo;s going on, Sean recommends that you join the &lt;a href=&#34;http://lists.perl.org/showlist.cgi?name=pod-people&#34;&gt;pod-people&lt;/a&gt; mailing list.&lt;/p&gt;

&lt;h3 id=&#34;span-id-testing-testing-span&#34;&gt;&lt;span id=&#34;Testing&#34;&gt;Testing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl has been doing better and better in tests, and H. Merijn Brand sums up the situation nicely:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;    **Lot&#39;s* of &#39;O&#39;s :))
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got a full set of &amp;lsquo;O&amp;rsquo;s (OK) for various AIX and HP-UX systems with their native compilers (and later, with gcc 3 under HP-UX). Hal Morris reports that perl passes all tests under Linux/390, while a few failures remain under UTS and VMS.&lt;/p&gt;

&lt;p&gt;More test reports from weird platforms are most welcome.&lt;/p&gt;

&lt;h3 id=&#34;span-id-taint-taint-span&#34;&gt;&lt;span id=&#34;TAINT&#34;&gt;${^TAINT}&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;When Perl is running in taint mode (because it was started with the &lt;code&gt;-T&lt;/code&gt; switch), a global variable (in the core) named &lt;code&gt;PL_tainting&lt;/code&gt; is set to 1 (it is usually 0). Michael G. Schwern posted &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00316.html&#34;&gt;a patch to make this value accessible to Perl programs&lt;/a&gt; as &lt;code&gt;${^TAINT}&lt;/code&gt;. Jarkko said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;troll&amp;gt;Why ${^TAINT} is read-only? It would be *so* convenient to &amp;hellip;&amp;lt;/troll&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, my HTML-hating email program stripped the &amp;lt;troll&amp;gt; tags, so I had to post &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00347.html&#34;&gt;a patch to make ${^TAINT} writable&lt;/a&gt; (thereby making &lt;code&gt;local ${^TAINT} = 0&lt;/code&gt; work as expected). The patch made Jarkko go temporarily blind (but not blind enough to accidentally apply it).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;magic_get()/set()&lt;/code&gt; functions in &lt;code&gt;mg.c&lt;/code&gt; retrieve and set the values of special variables like &lt;code&gt;${^TAINT}&lt;/code&gt; and &lt;code&gt;$^S&lt;/code&gt; (where &amp;ldquo;specialness&amp;rdquo; is defined by the &lt;code&gt;is_gv_magical()&lt;/code&gt; function in &lt;code&gt;gv.c&lt;/code&gt;). Both functions are big &lt;code&gt;switch&lt;/code&gt; statements which try to recognise the name of a variable, and then take some appropriate action. Schwern&amp;rsquo;s patch made &lt;code&gt;magic_get()&lt;/code&gt; assign the value of &lt;code&gt;PL_tainting&lt;/code&gt; to &lt;code&gt;${^TAINT}&lt;/code&gt; and make it read-only; mine removed the read-only markings, and taught &lt;code&gt;magic_set()&lt;/code&gt; to update PL_tainting when &lt;code&gt;${TAINT}&lt;/code&gt; is assigned to.&lt;/p&gt;

&lt;p&gt;It might be an interesting exercise to pick a special variable (say, &lt;code&gt;$^W&lt;/code&gt;) and figure out what Perl does to get or set its value. Rusty grep skills can be further polished by figuring out when and where the get and set functions are called. If you&amp;rsquo;re still bored, figure out how the value of &lt;code&gt;PL_tainting&lt;/code&gt; is computed and used.&lt;/p&gt;

&lt;h3 id=&#34;span-id-autoload-and-packages-autoload-and-packages-span&#34;&gt;&lt;span id=&#34;AUTOLOAD_and_packages&#34;&gt;AUTOLOAD and packages&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Paul Johnson posted a message about &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00811.html&#34;&gt;some weird AUTOLOAD behaviour&lt;/a&gt;. What should the following code do?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;package P1;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    *P2::AUTOLOAD = sub {
        print &amp;quot;|$::AUTOLOAD|$P1::AUTOLOAD|$P2::AUTOLOAD|\n&amp;quot;;
    };

    P2-&amp;gt;foo();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nobody was very sure, but perl-current behaves differently from 5.6.1, so something must be broken.&lt;/p&gt;

&lt;h3 id=&#34;span-id-bparrot-b-parrot-span&#34;&gt;&lt;span id=&#34;BParrot&#34;&gt;B::Parrot&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Will somebody please write a &lt;code&gt;B::Parrot&lt;/code&gt; module and post it to P5P, so that I can write about it in the summary? (Rather than just make things up, as certain unscrupulous individuals suggest I should do.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-miscellaneous-miscellaneous-span&#34;&gt;&lt;span id=&#34;Miscellaneous&#34;&gt;Miscellaneous&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael G. Schwern released &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00612.html&#34;&gt;Test::Simple 0.32&lt;/a&gt;. In the process, he introduced &lt;code&gt;$ENV{PERL_CORE}&lt;/code&gt;, to enable modules distributed both in the core and on the CPAN to use the same tests everywhere, thereby simplifying life greatly.&lt;/p&gt;

&lt;p&gt;Johan Vromans released &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00846.html&#34;&gt;Getopt::Long 2.26_02&lt;/a&gt;, a prerelease of version 2.27. Its guts have been redesigned to make room for expansion; testers and bug reports are particularly welcome.&lt;/p&gt;

&lt;p&gt;Russ Allbery released &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00839.html&#34;&gt;podlators 1.11&lt;/a&gt;, with several bug-fixes and some new features. (Russ still has a pile of mail to dig through, and he hopes to release another version soon.)&lt;/p&gt;

&lt;p&gt;Jarkko promptly assimilated all three, and found the time to release no less than seven snapshots.&lt;/p&gt;

&lt;p&gt;Kirrily Robert also submitted final drafts of some new documentation: &lt;code&gt;perlintro&lt;/code&gt; (a Perl introduction for beginners), and &lt;code&gt;perlmodstyle&lt;/code&gt; (a discussion of the current &amp;ldquo;best practices&amp;rdquo; in writing modules).&lt;/p&gt;

&lt;p&gt;Gisle Aas made a brief appearance to post &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00805.html&#34;&gt;an ExtUtils::MakeMaker patch&lt;/a&gt; which causes &lt;code&gt;$ENV{PERL_MM_USE_DEFAULT}&lt;/code&gt;, when set, to instruct &lt;code&gt;ExtUtils::MakeMaker::prompt&lt;/code&gt; to return the default answer to every question without waiting for input.&lt;/p&gt;

&lt;p&gt;Randolph Werner ported perl to 64-bit Windows (!).&lt;/p&gt;

&lt;p&gt;Perl 5.6.1 is now installed by default with HP-UX 11.00.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://lists.perl.org/showlist.cgi?name=perl5-changes&#34;&gt;perl5-changes&lt;/a&gt; mailing list records each patch to Perl when it is committed into the repository. It is highly recommended (Pumpking approved! 100% signal!) for people who want to keep in touch with perl-current. (Speaking of lists, a passing remark that P5P mail should have a &lt;a href=&#34;http://www.unicom.com/pw/reply-to-harmful.html&#34;&gt;munged Reply-To&lt;/a&gt; fortunately did not elicit any, er&amp;hellip; strong opinions.)&lt;/p&gt;

&lt;p&gt;Charles Lane fixed some niggling problems under VMS, and Craig A. Berry found some new ones. VMSperl now builds with PerlIO as the default, and it is possible to &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00601.html&#34;&gt;configure it for 64-bitness&lt;/a&gt; (although this causes a colourful test failure, evidently due to bugs in the system&amp;rsquo;s &lt;code&gt;gcvt()&lt;/code&gt; function, used to stringify numbers).&lt;/p&gt;

&lt;p&gt;Mikhail Zabaluev patched &lt;code&gt;perldoc&lt;/code&gt; to use &lt;code&gt;File::Temp&lt;/code&gt; instead of creating temporary files in an ad-hoc fashion. Tim Jenness tried to convince him that he should fix &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00959.html&#34;&gt;various other things&lt;/a&gt; in &lt;code&gt;perldoc&lt;/code&gt;, but Mikhail didn&amp;rsquo;t fall for it. Does anyone else want to try? (One of the changes, to use &lt;code&gt;Pod::Man&lt;/code&gt; rather than the &lt;code&gt;pod2man&lt;/code&gt; program, is similar to Schwern&amp;rsquo;s &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00823.html&#34;&gt;recent change to installhtml&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Perlbug posted an intriguing, but somewhat hard-to-decipher &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00315.html&#34;&gt;overview of the bug database&lt;/a&gt;, before dying again. Several &amp;ldquo;Hello, is this thing on?&amp;rdquo; messages and a flood of pent-up bug reports later, it is reported to be working again.&lt;/p&gt;

&lt;p&gt;Perl 5 had its seventh birthday on October 17th, 2001.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:ams@wiw.org&#34;&gt;Abhijit Menon-Sen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/10/07</title>
      <link>http://localhost:1313/pub/2001/10/p5pdigest/20011010.html/</link>
      <pubDate>Wed, 10 Oct 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/10/p5pdigest/20011010.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;span class=&#34;headline&#34;&gt;&lt;/span&gt;
This Week on P5P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;• &lt;a href=&#34;#chromatic&#34;&gt;chromatic&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Call_for_PerlIO_bugs&#34;&gt;Call for PerlIO bugs&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Attributes_are_broken&#34;&gt;Attributes are broken&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Multiple_FETCHes&#34;&gt;Multiple FETCHes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Code_cleanups&#34;&gt;Code cleanups&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Please send corrections and additions to perl-thisweek-YYYYMM@simon-cozens.org where YYYYMM is the current year and month. Changes and additions to the perl5-porters biographies are particularly welcome.&lt;/p&gt;

&lt;h3 id=&#34;span-id-chromatic-chromatic-span&#34;&gt;&lt;span id=&#34;chromatic&#34;&gt;chromatic&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;P5P is in awe of the patience and test writing ability of chromatic, who has, in a very short time, given us exhaustive new tests for &lt;code&gt;B::Terse&lt;/code&gt;, &lt;code&gt;Dumpvalue&lt;/code&gt;, &lt;code&gt;CGI::Fast&lt;/code&gt;, &lt;code&gt;CGI::Push&lt;/code&gt;, &lt;code&gt;CPAN::Nox&lt;/code&gt;, &lt;code&gt;Term::Cap&lt;/code&gt;, &lt;code&gt;Tie::Scalar&lt;/code&gt;, &lt;code&gt;Term::Complete&lt;/code&gt;, &lt;code&gt;ExtUtils::Command&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;filetest&lt;/code&gt;, &lt;code&gt;sigtrap&lt;/code&gt;, &lt;code&gt;warnings::register&lt;/code&gt;, and a bunch of patches to older tests. Thank you!&lt;/p&gt;

&lt;h3 id=&#34;span-id-call-for-perlio-bugs-call-for-perlio-bugs-span&#34;&gt;&lt;span id=&#34;Call_for_PerlIO_bugs&#34;&gt;Call for PerlIO bugs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Nicholas Clark found some people at a London.pm meeting who knew of unfixed PerlIO bugs, and suggested the following call-for-bugs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are aware of a PerlIO bug that perl5-porters isn&amp;rsquo;t aware of, please would you tell perl5-porters about it, preferably in the form of a regression test that will print &amp;ldquo;ok\n&amp;rdquo; once it is fixed. Else don&amp;rsquo;t be surprised if 5.8.0 ships with the bug still present.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(While you&amp;rsquo;re at it, report any other lurking bugs you know about.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-attributes-are-broken-attributes-are-broken-span&#34;&gt;&lt;span id=&#34;Attributes_are_broken&#34;&gt;Attributes are broken&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Arthur Bergman explained again why &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00051.html&#34;&gt;attributes are broken&lt;/a&gt;. The problem is that the &lt;code&gt;MODIFY_*_ATTRIBUTE&lt;/code&gt; subs (used to set attributes for a variable) are called at compile time. Thus, in the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub MODIFY_SCALAR_ATTRIBUTE {
        ...
        tie $obj, $class;
    }

    for (1..10) {
        my $foo : bar = &amp;quot;BAZ&amp;quot;;

        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variable &lt;code&gt;$foo&lt;/code&gt; would be tied only on the first iteration of the loop, after which the scope cleanup mechanism would remove its magic, and the variable would remain untied for the remaining iterations.&lt;/p&gt;

&lt;h3 id=&#34;span-id-multiple-fetches-multiple-fetches-span&#34;&gt;&lt;span id=&#34;Multiple_FETCHes&#34;&gt;Multiple FETCHes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff &amp;lsquo;japhy&amp;rsquo; Pinyan attacked some instances of &lt;code&gt;FETCH&lt;/code&gt; being called multiple times on tied variables (for &lt;code&gt;$tied++&lt;/code&gt;, &lt;code&gt;$tied || $untied&lt;/code&gt;), thus causing potentially undesirable side-effects (Read an &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00070.html&#34;&gt;analysis of the problem&lt;/a&gt; and &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00178.html&#34;&gt;the proposed solution&lt;/a&gt;). Several people pointed out the &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00190.html&#34;&gt;problems with this approach&lt;/a&gt;, but no better solution has been found yet.&lt;/p&gt;

&lt;p&gt;Jeff also wanted to optimise &lt;code&gt;grep&lt;/code&gt; when called in boolean context ( &lt;code&gt;if (grep EXPR, LIST)&lt;/code&gt;) to avoid iterating over the entire LIST, and just return the first time &lt;code&gt;EXPR&lt;/code&gt; was true, but the &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00129.html&#34;&gt;potentially desirable side-effects&lt;/a&gt; of &lt;code&gt;EXPR&lt;/code&gt; make this optimisation infeasible.&lt;/p&gt;

&lt;h3 id=&#34;span-id-code-cleanups-code-cleanups-span&#34;&gt;&lt;span id=&#34;Code_cleanups&#34;&gt;Code cleanups&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Casey West embarked on a &lt;code&gt;pod/*&lt;/code&gt; cleanup, to make the example code use strict where appropriate, be generally pleasing to the eye, and easy to understand. Despite this noble goal, his patches were met with some suspicion.&lt;/p&gt;

&lt;p&gt;Jeff Pinyan said the example shouldn&amp;rsquo;t use &lt;code&gt;$a&lt;/code&gt;, the &lt;code&gt;sort&lt;/code&gt; variable, but Jarkko didn&amp;rsquo;t want to encourage cargo-cult programming by punishing the poor innocent &lt;code&gt;$a&lt;/code&gt; for the vagaries of &lt;code&gt;sort&lt;/code&gt;. Abigail didn&amp;rsquo;t think the patches accomplished anything useful, but Jarkko said that consistency and following our own suggestions (in &lt;code&gt;perlstyle&lt;/code&gt;) are obviously good things.&lt;/p&gt;

&lt;p&gt;Casey posted an explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I feel that my style is a generally acceptable one that everyone can understand. In that light, I don&amp;rsquo;t think it&amp;rsquo;s a bad thing if I make some minor changes (single versus double quotes) in the process of making a whole document better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nobody said anything after that.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Andy Dougherty suggested an optional &lt;code&gt;make torture_test&lt;/code&gt; target to run tests which were not portable. (Schwern hasn&amp;rsquo;t noticed yet.)&lt;/p&gt;

&lt;p&gt;Arthur Bergman is running the LXR cross referencing tools on the perl source. The result: PXR, the &lt;a href=&#34;http://pxr.perl.org/source/&#34;&gt;Perl Cross Reference&lt;/a&gt;. It will eventually contain cross references of perl-current, the latest stable release, and the Parrot source.&lt;/p&gt;

&lt;p&gt;Brian Ingerson (of Inline fame) posted his first P5P patch, implementing the oft-requested &lt;code&gt;Data::Dumper&lt;/code&gt; feature to allow hash keys to be sorted. He even got the indentation right the first time!&lt;/p&gt;

&lt;p&gt;Craig Berry provided a patch to fix &lt;code&gt;%ENV&lt;/code&gt; tainting on VMS. (Only five tests fail on VMS now, and a couple of them are bogus failures.)&lt;/p&gt;

&lt;p&gt;Jarkko released two snapshots: 12307 and 12340. (The latest snapshot can be retrieved via rsync from &amp;ldquo;ftp.funet.fi::perlsnap&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;Michael Schwern sought a philosophical solution to the finding the path to the running perl interpreter. Instead, he found that the contents of &lt;code&gt;$^X&lt;/code&gt; are system dependent when perl is invoked by a #!-line.&lt;/p&gt;

&lt;p&gt;Nicholas Clark continued to submit lots of little patches, one of which became change #12345. This is entirely fitting, because Nick is a hoopy frood who knows exactly where his towel is.&lt;/p&gt;

&lt;p&gt;Paul Marquess and Robin Barker are investigating a &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00104.html&#34;&gt;DB_File bug&lt;/a&gt; involving filtered keys.&lt;/p&gt;

&lt;p&gt;Stas Bekman is hunting down interesting &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00257.html&#34;&gt;MakeMaker&lt;/a&gt; (and &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00352.html&#34;&gt;related&lt;/a&gt;) bugs. He also found a &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-10/msg00209.html&#34;&gt;scoping problem in the warnings pragma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, P5P was specially selected to receive a free mini-vacation to any of fifteen exciting destinations, along with several other people whose email addresses contained &amp;ldquo;per.&amp;rdquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:ams@wiw.org&#34;&gt;Abhijit Menon-Sen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/08/15</title>
      <link>http://localhost:1313/pub/2001/08/p5pdigest/20010815.html/</link>
      <pubDate>Wed, 15 Aug 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p5pdigest/20010815.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week on P5P&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#POD_Specification&#34;&gt;POD Specification&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;#Unicode_Normalisation&#34;&gt;Unicode Normalisation&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;#Threading_Semantics&#34;&gt;Threading Semantics&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;#perlmodstyle&#34;&gt;perlmodstyle&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;#Shrinking_down_the_Perl_install&#34;&gt;Shrinking down the Perl install&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Please send corrections and additions to perl-thisweek-YYYYMM@simon-cozens.org where YYYYMM is the current year and month. Changes and additions to the perl5-porters biographies are particularly welcome.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m back. This week saw the usual just-over-400 messages.&lt;/p&gt;

&lt;h3 id=&#34;span-id-pod-specification-pod-specification-span&#34;&gt;&lt;span id=&#34;POD_Specification&#34;&gt;POD Specification&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Sean Burke attempted to save the world:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Over the past several years, I have heard nothing but griping from all quarters about the perpetually underspecified state of perlpod, when considered as a pod specification. A markup language without a clear specification simply invites everyone, including implementors, to have their own shaky idea of what the language means. And that, along with the general tendency for markup language parsing to produce write-only code, explains much of the upsetting current state of Pod::* modules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so he did something about it. He wrote two documents, a completely rewritten &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-08/msg00614.html&#34;&gt;perlpod&lt;/a&gt; and a new &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-08/msg00615.html&#34;&gt;perlpodspec&lt;/a&gt;, which clarified the sense of POD without adding anything much in the way of new features. The spec in particular is extremely useful for those contemplating writing POD formatters. Jarkko reported that he&amp;rsquo;d be including them in 5.8.0, but Russ complained that the translators didn&amp;rsquo;t fully match the specification. Jarkko&amp;rsquo;s primary concern was cleaning up the horrendous state of the &lt;code&gt;L&amp;lt;..&amp;gt; tag, which is often abused. Russ picked up primarily on Sean&#39;s request that translators assume the input text to be UTF-8, although what that actually means is not specified. Sean clarified what he meant in quite a  long message:&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First off, my intent is to declare Unicode to be POD&amp;rsquo;s &amp;ldquo;the reference character set&amp;rdquo; (ugh, and I thought I could get out of this without using SGML jargon), for purposes of resolving E&amp;lt;number&amp;gt; sequences.&lt;/p&gt;

&lt;p&gt;So, for example, if I say E&amp;lt;233&amp;gt;, that is to mean the e-acute character, because in Unicode, code point 233 is e-acute.&lt;/p&gt;

&lt;p&gt;Whether &amp;ldquo;print ord 233&amp;rdquo; on your terminal prints an e-acute, an ess-tsett, a gimel, a &amp;ldquo;tsu&amp;rdquo; katakana, a double-dagger, or whether it lasers a hole thru your monitor&amp;rsquo;s glass, is a whole different problem.&lt;/p&gt;

&lt;p&gt;E&amp;lt;233&amp;gt; does NOT mean &amp;ldquo;simply pass a literal 233 blindly thru to the formatter&amp;rdquo;. E&amp;lt;233&amp;gt; and its exact synonym E&amp;lt;eacute&amp;gt; both merely mean &amp;ldquo;make a reasonable attempt to make an e-acute&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This wandered off into the usual Unicode semantics debate. Philip Newton threw a brilliantly unexpected spanner in the works:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(Oh, by the way, if someone writes POD on an EBCDIC machine, *all* of the bytes will have code points &amp;gt; 127 AFAIK if the author sticks only to letters and numbers.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Peter Prymmer also chastised the use of the word &amp;ldquo;ASCII&amp;rdquo; in the specification.&lt;/p&gt;

&lt;p&gt;Sarathy suggested we mandate POD to be in Unicode, and move towards assuming all Perl code to be in UTF8, and mandating unicode semantics on things like &lt;code&gt;chr $x&lt;/code&gt;when [$x] is less than 255. There did not appear to be anyone forging his posts.&lt;/p&gt;

&lt;h3 id=&#34;span-id-unicode-normalisation-unicode-normalisation-span&#34;&gt;&lt;span id=&#34;Unicode_Normalisation&#34;&gt;Unicode Normalisation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;And while we&amp;rsquo;re on the subject of Unicode, Sadahiro Tomoyuki rocks my world. Oh my. Not only has he produced an alternative and much cleaner (and more complete) module to handle normalization of Unicode data, he achieved the near-impossible and implemented the Unicode collation algorithm detailed in &lt;a href=&#34;http://www.unicode.org/unicode/reports/tr10/&#34;&gt;Unicode Technical Report 10&lt;/a&gt;. This is a major bonus, since it allows us to correctly compare and store Unicode strings.&lt;/p&gt;

&lt;p&gt;(Incidentally, Nick Ing-Simmons pointed out that &amp;ldquo;normalize&amp;rdquo; is incorrect, according to OED and Fowler. Surprisingly for p5p, this generated less comment than the technical content of the thread.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-threading-semantics-threading-semantics-span&#34;&gt;&lt;span id=&#34;Threading_Semantics&#34;&gt;Threading Semantics&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Artur reported on the remaining problems with iThreads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Request for threads-&amp;gt;kill, to kill a given thread, is this something we should have? Should we try to do what POSIX does with all these cancelation points and cancelation callbacks? We know what mutexes we own so we can make sure they are all canceled. My belief [is] that this is needed.&lt;/p&gt;

&lt;p&gt;On unix this can be done by a signal(?), I don&amp;rsquo;t know about Win32.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Right now, it seems like the parent interpreter must still stick around for its children. I think it will have to stay like this for 5.8 and something that can be fixed for 5.10 with a global SV arena; right now we use the first interpreter as the store.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Quitting the main thread; now, this kills all threads (as normal threading). However this usually comes at bad times. And we don&amp;rsquo;t get proper cleanup (and segfaults). I think we should wait for all threads to finish, letting the user kill them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;lock, unlock, share, are now implmented in threads::shared, You have to manually unlock(), it is not scope based. I think the implementation of lock() unlock() should perhaps move into pp_lock and pp_unlock, share() cond_*() needs new reference prototype.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sharing probably needs a new kind of magic, but I think that can wait until we see sharing working as we want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A shared blessed object: should the destructor be called once for each thread, or in the thread where it actually is destroyed? Is there a way to catch blessings to magic/tied variables? If not, I guess we can not rebless shared data structures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dan Sugalski suggested that people ought to write shutdown synchronisation code themselves, to ensure that the shared data structures are in a sane state. Benjamin Stuhl asked for a detach method to disown other threads, so that the main interpreter can shutdown while blissfully ignorant of what&amp;rsquo;s going on elsewhere. Dan made the very good point that we can provide surprising behaviour because:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you come to threaded programming without any experience, everything is surprising, and lots of things don&amp;rsquo;t make sense. Inexperienced thread programmers *will* screw themselves up. Repeatedly. Threads are a very powerful tool, but one with no guards to speak of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The discussion got heated soon afterwards, with Artur trying to avoid coredumps because coredumps are bad, but Dan maintaining that most things that happen with threads are bad, and coredumps are occasionally unavoidable - if you exit your interpreter without shutting down all your threads, that&amp;rsquo;s an abnormal exit and anything could happen.&lt;/p&gt;

&lt;p&gt;Artur did, however, go ahead with the new &lt;code&gt;shared_sv&lt;/code&gt; implementation, adding two files to core and core functionality for sharing, locking and correctly refcounting shared SVs. Wow.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perlmodstyle-perlmodstyle-span&#34;&gt;&lt;span id=&#34;perlmodstyle&#34;&gt;perlmodstyle&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Kirrily Robert (Skud) stormed onto the scene with a fantastic first contribution: she submitted a document on &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-08/msg00530.html&#34;&gt;Perl module style conventions&lt;/a&gt;, which was generally pretty well received, with a few minor nits.&lt;/p&gt;

&lt;p&gt;The ensuing thread had some very interesting thoughts on various style considerations. Benjamin Frantz did a benchmark of different parameter passing conventions, finding that passing arrays is 200,000ths of a second slower than passing hashes. So if you need a bit more speed from your Perl code, turn your arrays into hashes. This massive efficiency gain didn&amp;rsquo;t impress Michael Schwern, though:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Speed isn&amp;rsquo;t really the issue, clarity of interface is. You don&amp;rsquo;t want to confuse things in first-time module author docs by bringing up efficiency arguments. It just confuses things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This then turned into Yet Another CPAN Argument. Elaine Ashton did plea for help on behalf of the CPAN testers; if you want to be a hero, see &lt;a href=&#34;http://testers.cpan.org/&#34;&gt;testers.cpan.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Skud also hinted she&amp;rsquo;s working on a perltesttut. She also tried to herd date and time module authors onto the &lt;a href=&#34;mailto:datetime-subscribe@perl.org&#34;&gt;datetime list&lt;/a&gt;. Not a bad start. Think you can do better?&lt;/p&gt;

&lt;h3 id=&#34;span-id-shrinking-down-the-perl-install-shrinking-down-the-perl-install-span&#34;&gt;&lt;span id=&#34;Shrinking_down_the_Perl_install&#34;&gt;Shrinking down the Perl install&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Alan Burlison gave out the now-common howl: Perl has doubled in size from 5.005_03 to 5.6.1. However, he was trying to cram it onto the Solaris miniroot CD so that people can write Jumpstart scripts in Perl. Jarkko suggested throwing out &lt;code&gt;pod/&lt;/code&gt;, (which Alan had already done) &lt;code&gt;unicode/&lt;/code&gt; (with a caution that attempting to use Unicode stuff would make demons fly out of your nose.) the headers from &lt;code&gt;CORE/&lt;/code&gt;, plus a bunch of the libraries.&lt;/p&gt;

&lt;p&gt;Dan Sugalski suggested stuffing everything into &lt;code&gt;miniperl&lt;/code&gt;, statically linking in all the extensions.&lt;/p&gt;

&lt;p&gt;Dave Mitchell asked what the big Unicode files were; Jarkko explained that they could be stored compressed or left out completely, since the information in them is stripped out into the various &lt;code&gt;unicode/*.pl&lt;/code&gt; files. (By the way, &lt;code&gt;unicode/&lt;/code&gt; has been renamed &lt;code&gt;unicore/&lt;/code&gt; so that we can merge in &lt;code&gt;Unicode::*&lt;/code&gt; modules without having to worry about case-folding filesystems.) The only casualty would be &lt;code&gt;UnicodeCD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Andy Dougherty pointed to the Debian &lt;code&gt;perl-base&lt;/code&gt; package, which is a meagre 1.2Mb. This is possible by turning off the autoloader in some of the packages, and chopping down &lt;code&gt;lib/&lt;/code&gt; to the absolute bare essentials. The really serious cut, of course, would be to just ship &lt;code&gt;perl&lt;/code&gt;, &lt;code&gt;libperl.so&lt;/code&gt; and &lt;code&gt;Config.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There was a reasonably big thrad on wild-card expansion on Windows that I just couldn&amp;rsquo;t follow at all.&lt;/p&gt;

&lt;p&gt;Artur asked why &lt;code&gt;perl_run&lt;/code&gt; and not &lt;code&gt;perl_destruct&lt;/code&gt; called the &lt;code&gt;END&lt;/code&gt; blocks; Sarathy said it was a bug and wanted a patch, which Artur provided.&lt;/p&gt;

&lt;p&gt;Jerrad Pierce asked how to get modules that exist in the core and not on CPAN, such as the fixed-up version of &lt;code&gt;English&lt;/code&gt;. Schwern encouraged him to take the module back to CPAN.&lt;/p&gt;

&lt;p&gt;I discovered two old, dust-covered opcodes; Abhijit Menon-Sen breathed live into one of them, &lt;code&gt;rcatline&lt;/code&gt;, which optimizes &lt;code&gt;$a .= &amp;lt;foo&amp;gt;&lt;/code&gt;. Actually, Abhijit did all sorts this week, including: fixing the calling of &lt;code&gt;FIRSTKEY&lt;/code&gt; on tied hashes, allowing localised tying on filehandles, stopping &lt;code&gt;FETCH&lt;/code&gt; being called twice on tainted data, and, to defend accusations that he only fixes bugs without adding new functionality, added the ever-useful &lt;code&gt;panic&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Tony Bowden asked what would happen to the &lt;code&gt;my Dog $sam&lt;/code&gt; declaration now pseudohashes are dead. The responses were: i) pseudohashes aren&amp;rsquo;t dead yet, they just smell that way, and ii) nothing, since the &lt;code&gt;fields&lt;/code&gt; pragma would still do the trick.&lt;/p&gt;

&lt;p&gt;The old more-than-256-files-open-on-Solaris question came up again: this time, though, we had a sensible answer. PerlIO can be used to get around the Solaris limitation. Alan explained that there was a section in &lt;code&gt;perlsolaris&lt;/code&gt; about the limitation, which was due to the extreme backwards compatibility of Solaris harking back to a time before it could conceive of more than 256 files.&lt;/p&gt;

&lt;p&gt;Someone discovered that you can tie a variable with an object. The utility of this was debated, and Schwern conceded that there&amp;rsquo;d be no harm in documenting it. That&amp;rsquo;d be a nice little small task for someone.&lt;/p&gt;

&lt;p&gt;Andy Dougherty dropped in a couple of BSD patches, to the Makefile generation and the hints file. Paul Johnson made &lt;code&gt;B::Concise&lt;/code&gt; recognise padops.&lt;/p&gt;

&lt;p&gt;James Duncan allowed BEGIN blocks to be more visible from &lt;code&gt;B&lt;/code&gt;. Robin Houston asked whether or not we should move &lt;code&gt;PL_minus_c&lt;/code&gt; from a bool to a &lt;code&gt;U8&lt;/code&gt; to give us more flexibility; apparently we currently to &lt;code&gt;(PL_minus_c &amp;amp; 0x10)&lt;/code&gt; which, as Robin points out, is a &amp;ldquo;rather wrong thing to do to a bool&amp;rdquo;. I wonder when the Perl core was formally forbidden from doing wrong things.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:simon.co.uk&#34;&gt;Simon Cozens&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

