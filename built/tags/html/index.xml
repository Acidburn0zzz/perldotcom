<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/html/</link>
    <description>Recent content in Html on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jan 2015 14:01:42 +0000</lastBuildDate>
    <atom:link href="/tags/html/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Extracting from HTML with Mojo::DOM</title>
      <link>http://localhost:1313/article/143/2015/1/8/Extracting-from-HTML-with-Mojo--DOM/</link>
      <pubDate>Thu, 08 Jan 2015 14:01:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/143/2015/1/8/Extracting-from-HTML-with-Mojo--DOM/</guid>
      <description>&lt;p&gt;Everyone wants to parse HTML, and many people reach for a regular expression to do that. Although you can &lt;a href=&#34;http://stackoverflow.com/a/4234491/2766176&#34;&gt;use a regex to parse HTML&lt;/a&gt;, it&amp;rsquo;s not as fun as my latest favorite way: &lt;a href=&#34;https://metacpan.org/pod/Mojo::DOM&#34;&gt;Mojo::DOM&lt;/a&gt; with CSS3 selectors. I find this much easier than trying to remember XPATH and I get to play with Mojo.&lt;/p&gt;

&lt;p&gt;The DOM is the &lt;a href=&#34;http://www.w3.org/DOM/&#34;&gt;&amp;ldquo;Document Object Model&amp;rdquo;&lt;/a&gt;. Something behind the scenes parses and organizes the information and allows me to query it with questions such as &amp;ldquo;find all the &lt;code&gt;a&lt;/code&gt; tags inside a &lt;code&gt;div&lt;/code&gt; tag&amp;rdquo;, or &amp;ldquo;find all the tags of a particular class&amp;rdquo;. I don&amp;rsquo;t manipulate the text myself.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m using &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt;, I can get a DOM object from the response object from an HTTP request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::UserAgent;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ua &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::UserAgent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ua&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://metacpan.org/author/BDFOY&amp;#39;&lt;/span&gt; )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dom;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Mojo method-chaining style with one method per line shows its strengths as I get into more complicated tasks later.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to make a request to get a DOM object. I&amp;rsquo;m often presented with HTML files to parse with no server to give them to me. Depending on the tractability of the task, I might hand edit it to remove the parts I don&amp;rsquo;t want to think about then use a regex to handle the rest. That way, I don&amp;rsquo;t have to do a lot of work to save state and know where I am in the document. With a DOM, that&amp;rsquo;s not a problem.&lt;/p&gt;

&lt;p&gt;In the first example, I fetched &lt;code&gt;http://search.cpan.org/~bdfoy/&#39;&lt;/code&gt;, my author page at &lt;a href=&#34;http://search.cpan.org/&#34;&gt;CPAN Search&lt;/a&gt;. I&amp;rsquo;ll start with that HTML, assuming I already have it in a string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::DOM;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::DOM&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( $string );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $module_list;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I have the &lt;code&gt;$dom&lt;/code&gt; object, I can use &lt;code&gt;find&lt;/code&gt; to select elements. I give &lt;code&gt;find&lt;/code&gt; a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/DOM/CSS#SELECTORS&#34;&gt;CSS3 selector&lt;/a&gt;, in this case just &lt;code&gt;a&lt;/code&gt; to find all the anchor links. &lt;code&gt;find&lt;/code&gt; returns a &lt;a href=&#34;=&#34; title=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt; object, a fancy way to store a list and do things do it. The Mojolicious style makes heavy use of method chaining so it needs a way to call methods on the result. In this example, I merely &lt;code&gt;join&lt;/code&gt; the elements with a newline. These are the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.slidepanel&amp;#34;&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;toggle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slidepanel&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;i class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-bars icon-slidepanel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img alt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MetaCPAN icon&amp;#34;&lt;/span&gt; src&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/static/icons/metacpan-icon.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Home&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://grep.metacpan.org&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;i class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-search&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;grep&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cpan&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/recent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;i class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-history&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Recent&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/about&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;i class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-info&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;About&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/about/faq&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;i class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa fa-question&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;FAQ&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s a good start, but I extracted all of the links. I want to limit it to the links to my distributions. Looking at the HTML, I see that there is a table with id &lt;code&gt;author_releases&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;table  id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author_releases&amp;#34;&lt;/span&gt;
  data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sort&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1,0&amp;#34;&lt;/span&gt;
  class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table table-condensed table-striped table-releases tablesorter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;th class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;river-gauge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sr-only&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;River gauge&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;th class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name pull-left-phone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Release&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;th class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden-phone invisible no-sort&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;th class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Uploaded&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I change my selector to look for the first anchor in the first table cell in a table row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table#author_releases tr td.name a.ellipsis&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $module_list;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I have a list of the links I want, but with the anchor HTML and text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/App-Module-Lister&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/App-Module-Lister-0.153&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Module&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Lister&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.153&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/App-PPI-Dumper&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/App-PPI-Dumper-1.021&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;PPI&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dumper&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.021&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/App-scriptdist&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/App-scriptdist-0.242&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;scriptdist&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.242&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/App-unichar&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/App-unichar-0.012&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unichar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.012&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/App-url&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/App-url-1.004&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.004&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/Brick&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/Brick-0.228&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Brick&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.228&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/release/Bundle-BDFOY&amp;#34;&lt;/span&gt; title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BDFOY/Bundle-BDFOY-20190721&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Bundle&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;BDFOY&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20190721&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I still have a bit of work to do. I want to extract the value of the &lt;code&gt;href&lt;/code&gt; attribute. I can do that with the &lt;code&gt;map&lt;/code&gt; method from &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table#author_releases tr td.name a.ellipsis&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt; )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $module_list;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each element in the collection is actually a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/DOM&#34;&gt;Mojo::DOM&lt;/a&gt; object. The first argument to &lt;code&gt;map&lt;/code&gt; is the method to call on each element and the remaining arguments pass through to that method. In this case, I&amp;rsquo;m calling &lt;code&gt;text&lt;/code&gt; on each node to get the string between the opening and closing &lt;code&gt;A&lt;/code&gt; tags. Now I have my list of distributions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Module&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Lister&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.153&lt;/span&gt;
App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;PPI&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dumper&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.021&lt;/span&gt;
App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;scriptdist&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.242&lt;/span&gt;
App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unichar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.012&lt;/span&gt;
App&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.004&lt;/span&gt;
Brick&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.228&lt;/span&gt;
Bundle&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;BDFOY&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20190721&lt;/span&gt;
Business&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ISBN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.005&lt;/span&gt;
Business&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ISBN&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20191107&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s still as one string since I ended the method chain with &lt;code&gt;join(&amp;quot;\n&amp;quot;)&lt;/code&gt;. To get a list, I use &lt;code&gt;each&lt;/code&gt; to get the list, which I join myself later:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table#author_releases tr td.name a.ellipsis&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt; )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;each;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, @module_list;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could have also used &lt;code&gt;to_array&lt;/code&gt; to get an array reference instead.&lt;/p&gt;

&lt;p&gt;Instead of the distribution name with the version, I can break it up with &lt;a href=&#34;https://metacpan.org/pod/CPAN::DistnameInfo&#34;&gt;CPAN::DistnameInfo&lt;/a&gt;. I&amp;rsquo;ll turn every found link into a tuple of name and version. Since that module wants to deal with a distribution filename, I tack on &lt;em&gt;.tar.gz&lt;/em&gt; to make it work out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CPAN::DistnameInfo;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::Util &lt;span style=&#34;color:#e6db74&#34;&gt;qw(dumper)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::DOM&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( $string );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table#author_releases tr td.name a.ellipsis&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt; )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CPAN::DistnameInfo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_.tar.gz&amp;#34;&lt;/span&gt; );
        [ map { $d&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;$_() } &lt;span style=&#34;color:#e6db74&#34;&gt;qw(dist version)&lt;/span&gt; ];
         } )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;each;

say dumper( &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@module_list );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;each&lt;/code&gt; extracts each element from the collection and returns it. I use &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt; to display the array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-Module-Lister&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.153&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-PPI-Dumper&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.021&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-scriptdist&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.242&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-unichar&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.012&amp;#34;&lt;/span&gt;
  ],
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I want only the distributions that are beta versions (or whatever you want to call pre-1.0 releases), I can use &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt;&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @module_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dom
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table#author_releases tr td.name a.ellipsis&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt; )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CPAN::DistnameInfo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_.tar.gz&amp;#34;&lt;/span&gt; );
        [ map { $d&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;$_() } &lt;span style=&#34;color:#e6db74&#34;&gt;qw(dist version)&lt;/span&gt; ];
         } )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;grep( &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; } )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;each;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; filters the collection for which the subroutine returns a true value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[
[
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-Module-Lister&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.153&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-scriptdist&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.242&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App-unichar&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.012&amp;#34;&lt;/span&gt;
  ],
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brick&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.228&amp;#34;&lt;/span&gt;
  ],
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s the process. No HTML shows up in my code. The rest is figuring out how to select the particular element that I want. If you are interesting in more &lt;a href=&#34;http://mojolicio.us/perldoc/Mojo/Collection&#34;&gt;Mojo::Collection&lt;/a&gt; examples, you can check out &lt;a href=&#34;https://leanpub.com/mojo_web_clients&#34;&gt;Mojo Web Clients&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
*This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;. In it&amp;rsquo;s original form, it worked with &lt;em&gt;search.cpan.org&lt;/em&gt;, which had a different table and HTML. It was updated to work with MetaCPAN. See the &lt;a href=&#34;https://github.com/tpf/perldotcom/blob/master/content/article/extracting-from-html-with-mojo--dom.md&#34;&gt;entire history of the article&lt;/a&gt;*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML pro-parsing tips</title>
      <link>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</link>
      <pubDate>Thu, 10 Jul 2014 12:33:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Perl has some fantastic modules for parsing HTML and one of the best is XML::LibXML. It&amp;rsquo;s an interface to the libxml2 C library; super fast but also super-picky. I&amp;rsquo;ve often found XML::LibXML croaking on relatively simple - but incorrectly formed HTML. If you find this, do not give up! This article shares 3 simple techniques for overcoming malformed HTML when parsing with XML::LibXML.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tip-1-turn-on-recovery-mode&#34;&gt;Tip 1: turn on recovery mode&lt;/h3&gt;

&lt;p&gt;If XML::LibXML is croaking on a later part of the HTML, try turning on recovery mode, which will return all of the correctly parsed HTML up until XML::LibXML encountered the error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; XML::LibXML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $xml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( recover &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $xml&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With recovery mode set to 1, the parser will still warn about parsing errors. To suppress the warnings, set recover to 2.&lt;/p&gt;

&lt;h3 id=&#34;tip-2-sanitize-the-input-first-with-html-scrubber&#34;&gt;Tip 2: sanitize the input first with HTML::Scrubber&lt;/h3&gt;

&lt;p&gt;Sometimes recovery mode alone is not enough - XML::LibXML will croak at the first whiff of HTML if there are two doctype declarations for example. In these situations, consider sanitizing the HTML with &lt;a href=&#34;https://metacpan.org/pod/HTML::Scrubber&#34;&gt;HTML::Scrubber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTML::Scrubber provides both whitelist and blacklist functions to include or exclude HTML tags and attributes. It&amp;rsquo;s a powerful combination which allows you to create a custom filter to scrub the HTML that you want to parse.&lt;/p&gt;

&lt;p&gt;By default HTML::Scrubber removes all tags, but in the case of a duplicate doctype declaration, you just need that one tag removed. Let&amp;rsquo;s remove all div tags too for good measure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTML::Scrubber;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HTML::Scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( deny &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;doctype&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt; ],
                                    allow&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubbed_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;scrub($html);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $scrubbed_html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;deny&amp;rdquo; rule sets the scrubber blacklist (what to exclude) and the &amp;ldquo;allow&amp;rdquo; rule specifies the whitelist (what to include). Here we passed an asterisk (&amp;rdquo;*&amp;rdquo;) to allow, which means allow everything, but because we&amp;rsquo;re denying div and doctype tags, they&amp;rsquo;ll be removed.&lt;/p&gt;

&lt;h3 id=&#34;tip-3-extract-a-subset-of-data-with-a-regex-capture&#34;&gt;Tip 3: extract a subset of data with a regex capture&lt;/h3&gt;

&lt;p&gt;If the subset HTML you want to parse has a unique identifier (such as an id attribute), consider using a regex capture to extract it from the HTML document. You can then scrub or immediately parse this subset with XML::LibXML.&lt;/p&gt;

&lt;p&gt;For example recently I had to extract an HTML table from a badly-formed web page. Fortunately the table had an id attribute, which made extracting it with a regex a piece-of-cake:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/(&amp;lt;table id=&amp;#34;t2&amp;#34;&amp;gt;.*?&amp;lt;\/table&amp;gt;)/s&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $1 );
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the use of the &amp;ldquo;s&amp;rdquo; modifier in the regex to match multiline. Many HTML pages contain newlines and you don&amp;rsquo;t want your match fail because of that.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully these tips will make parsing HTML with XML::LibXML easier. My GitHub account has a web scraper &lt;a href=&#34;https://gist.github.com/sillymoose/998b9199007589199dce#file-get_swift_code-pl-L42&#34;&gt;script&lt;/a&gt; that uses some of these tips. If you&amp;rsquo;re looking for an entirely different approach to parsing HTML, check out &lt;a href=&#34;https://metacpan.org/pod/XML::Rabbit&#34;&gt;XML::Rabbit&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTML::TreeBuilder&#34;&gt;HTML::TreeBuilder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;text=HTML+pro-parsing+tips&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display beautiful Perl code in HTML without JavaScript</title>
      <link>http://localhost:1313/article/60/2014/1/13/Display-beautiful-Perl-code-in-HTML-without-JavaScript/</link>
      <pubDate>Mon, 13 Jan 2014 01:34:32 +0000</pubDate>
      
      <guid>http://localhost:1313/article/60/2014/1/13/Display-beautiful-Perl-code-in-HTML-without-JavaScript/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Would you like to display beautiful syntax-highlighted Perl code on the web without using JavaScript? Maybe you&amp;rsquo;d like to use an existing &lt;a href=&#34;http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html&#34;&gt;CSS markup theme&lt;/a&gt; without having to write in-line CSS in your Perl code? If yes, take a look at &lt;a href=&#34;https://metacpan.org/pod/PPI::Prettify&#34;&gt;PPI::Prettify&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://code.google.com/p/google-code-prettify/&#34;&gt;prettify.js&lt;/a&gt; library does a wonderful job of robustly syntax coloring a large number of different languages for displaying code on the web. It&amp;rsquo;s used on blogs.perl.org; we use it on PerlTricks.com. But because Perl is an ambiguous language, prettify.js often doesn&amp;rsquo;t tokenize all of the code correctly. What&amp;rsquo;s worse is if a user has JavaScript disabled, the code will not be highlighted at all. That&amp;rsquo;s why I wrote &lt;a href=&#34;https://metacpan.org/pod/PPI::Prettify&#34;&gt;PPI::Prettify&lt;/a&gt;. It runs in the backend using PPI::Document so it&amp;rsquo;s faster more accurate than prettify.js, but outputs the same HTML codes as prettify.js does, enabling you to re-use any of the existing CSS themes available (&lt;a href=&#34;http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;%0Ahttp://jmblog.github.io/color-themes-for-google-code-prettify/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;%0Ahttp://stanleyhlng.com/prettify-js/#theme-bootstrap-light&#34;&gt;here&lt;/a&gt; for example).&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need PPI::Prettify and can install it via CPAN at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan PPI::Prettify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In terms of OS compatibility, PPI::Prettify is pure-Perl so you should be able to run it on any platform that has Perl installed.&lt;/p&gt;

&lt;h3 id=&#34;tokenizing-inline-perl-code&#34;&gt;Tokenizing inline Perl code&lt;/h3&gt;

&lt;p&gt;PPI::Prettify exports a prettify() method that takes a string of Perl code, and returns it tokenized with &amp;lt;span&amp;gt; tags. To be safe, PPI::Prettify employs HTML encoding on all token content. Let&amp;rsquo;s whip up a quick script to demo prettify():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PPI::Prettify;

read(main::DATA, &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $code, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; prettify({ code &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $code });

__DATA__
&lt;span style=&#34;color:#75715e&#34;&gt;# a simple OO class&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Shape;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($class, $args) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        color  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;,
        length &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        width  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bless $self, $class;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_area&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $color) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $color;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script uses the &lt;a href=&#34;http://perltricks.com/article/24/2013/5/11/Perl-tokens-you-should-know&#34;&gt;__DATA__&lt;/a&gt; token to create a filehandle to some inline Perl code (The code is a simple OO example taken from our article &lt;a href=&#34;http://perltricks.com/article/25/2013/5/20/Old-School-Object-Oriented-Perl&#34;&gt;Old School Object Oriented Perl&lt;/a&gt;). The read function slurps the filehandle contents into $code. We then use the prettify() function to tokenize and markup the Perl code.&lt;/p&gt;

&lt;p&gt;Running that script returns the Perl code surrounded by &amp;lt;span&amp;gt; tags. This is a summary of the markup produced by prettify():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pre class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prettyprint&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a simple OO class&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pln&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kwd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pln&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;atn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;Shape&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;span class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pln&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example below shows how the markup looks in HTML (using the &lt;a href=&#34;http://code.google.com/p/google-code-prettify/source/browse/trunk/styles/desert.css?r=198&#34;&gt;desert&lt;/a&gt; CSS theme).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a simple OO class&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Shape;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($class, $args) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        color  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;,
        length &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        width  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bless $self, $class;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_area&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $color) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $color;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two things to note here: disabling JavaScript will have no effect on the syntax highlighting above, as it&amp;rsquo;s generated in backend using PPI::Prettify. Second, the code displays multiline comments correctly, (everything after &lt;a href=&#34;http://perltricks.com/article/24/2013/5/11/Perl-tokens-you-should-know&#34;&gt;__DATA__&lt;/a&gt;) unlike prettify.js.&lt;/p&gt;

&lt;h3 id=&#34;tokenizing-perl-code-stored-in-a-file&#34;&gt;Tokenizing Perl code stored in a file&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s easy to prettify existing Perl code from a file. You can do this in one line of Perl at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MPPI::Prettify &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MFile::Slurp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$code=read_file(&amp;#34;output&amp;#34;);print prettify({code=&amp;gt;$code})&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;advanced-feature-1-debug-mode&#34;&gt;Advanced feature 1: debug mode&lt;/h3&gt;

&lt;p&gt;The prettify() method also takes an optional debug parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prettify({ code &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $code, debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Debug mode will provide the same output, however every tag will be given a &amp;ldquo;title&amp;rdquo; attribute with the original PPI::Token class as the value. This can help you to understand how the original PPI::Token class maps to the markup by hovering the cursor over the text. The code from earlier has been printed with debug mode turned on. Try hovering!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a simple OO class&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Shape;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($class, $args) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        color  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;,
        length &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        width  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bless $self, $class;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_area&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{length} &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{width};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_color&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $color) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{color} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $color;
}

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;advanced-feature-2-override-the-mapping&#34;&gt;Advanced feature 2: override the mapping&lt;/h3&gt;

&lt;p&gt;You may want to change how certain tokens of Perl code are marked up. PPI::Prettify exports the mapping in a hashref, called $MARKUP_RULES. Every PPI::Token class is a key, with the value being the CSS class name that prettify.js uses (and the prettify CSS themes expect). For example PPI::Token::Comment is mapped to &amp;ldquo;com&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PPI::Token::Comment&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Combined with debug mode, it should be straightforward to change the mapping of a particular PPI::Token class to the prettify class you require.&lt;/p&gt;

&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;Consider using Adam Kennedy&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/PPI::HTML&#34;&gt;PPI::HTML&lt;/a&gt; if you are happy writing inline-CSS in your Perl code, or need more detailed markup than the 10 or so classes provided by PPI::Prettify. It&amp;rsquo;s a more mature module and can do line numbering too.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming with Mason</title>
      <link>http://localhost:1313/pub/2002/12/11/mason.html/</link>
      <pubDate>Wed, 11 Dec 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/12/11/mason.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Dave Rolsky and Ken Williams are the authors of &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mason is a powerful framework for generating dynamic text, and is especially useful when creating complex, featureful Web sites. For those (hopefully few) folks who haven&amp;rsquo;t yet heard of Mason, it is a Perl-based templating framework comparable to frameworks such as Apache::ASP, Embperl, and Template Toolkit. Like the first two, and unlike the latter, Mason operates by embedding Perl in text.&lt;/p&gt;

&lt;p&gt;Mason is based around the idea of a &lt;em&gt;component&lt;/em&gt;. A component is roughly equivalent to a Perl subroutine, and can contain text and/or code. Here is a &lt;em&gt;very&lt;/em&gt; simple, but complete component that has both text and code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % my $planet = &amp;quot;World&amp;quot;;
 Hello, &amp;lt;% $planet %&amp;gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When Mason runs this code, the output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of this article assumes at least a minimal familiarity with Mason, though if you&amp;rsquo;re at all familiar with other templating systems, you&amp;rsquo;ll probably be able to grok the code we show. For more details, I would of course recommend &lt;em&gt;Embedding Perl in HTML with Mason&lt;/em&gt;, written by Ken Williams and myself. Mason also comes with its own documentation, which can be seen online at &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;www.masonhq.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with any powerful and flexible system, Mason is applicable to a lot of problems, and there is always more than one way to do it. It is a &lt;em&gt;Perl&lt;/em&gt;-based system, after all!&lt;/p&gt;

&lt;p&gt;Below you&amp;rsquo;ll find some cookbook recipes for solving a few typical Web application problems. All the recipes assume that you are using the latest version of Mason, which at the time of this writing is 1.15, though most of them will work untouched with older versions.&lt;/p&gt;

&lt;h3 id=&#34;putting-a-session-id-in-all-urls&#34;&gt;Putting a Session ID in All URLs&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve ever written a dynamic Web application, then it&amp;rsquo;s likely that you&amp;rsquo;ve used sessions to store data as the user moves through the application. Typically, sessions are identified by session IDs that are stored in a cookie.&lt;/p&gt;

&lt;p&gt;If you cannot use cookies, then you can store the session ID in the URL. There are security and application problems with this approach (as well as with the user of cookies), but those are outside the scope of this article. The mod_perl user list archives at &lt;a href=&#34;http://marc.theaimsgroup.com/?l=apache-modperl&#34;&gt;marc.theaimsgroup.com/?l=apache-modperl&lt;/a&gt; contain a number of discussions related to this topic.&lt;/p&gt;

&lt;p&gt;Putting the session ID in the URL can be a hassle, because it means that you have to somehow process all the URLs you generate. Using Mason, this isn&amp;rsquo;t as difficult as it would be otherwise. There are at least two ways to do this.&lt;/p&gt;

&lt;p&gt;The first would be to put a filter in your top level &lt;code&gt;autohandler&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%filter&amp;gt;
   s/href=&amp;quot;([^&amp;quot;])+&amp;quot;/&#39;href=&amp;quot;&#39; . add_session_id($1) . &#39;&amp;quot;&#39;/eg;
   s/action=&amp;quot;([^&amp;quot;])+&amp;quot;/&#39;href=&amp;quot;&#39; . add_session_id($1) . &#39;&amp;quot;&#39;/eg;
  &amp;lt;/%filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;add_session_id()&lt;/code&gt; subroutine, which should be defined in a module, might look something like this:
      sub add_session_id {
          my $url = shift;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      return $url if $url =~ m{^\w+://}; # Don&#39;t alter external URLs

      if ($url =~ /\?/) {
      $url =~ s/\?/?session_id=$MasonBook::Session{_session_id}&amp;amp;/;
      } else {
          $url .= &amp;quot;?session_id=$MasonBook::Session{_session_id}&amp;quot;;
      }

      return $url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This routine accounts for external links as well as links with or without an existing query string.&lt;/p&gt;

&lt;p&gt;The drawback to putting this in a &lt;code&gt;&amp;lt;%filter&amp;gt;&lt;/code&gt; section is that it only filters URLs in the content generated by components, and misses any URLs that might be in headers, such as in a redirect. Therefore, you&amp;rsquo;d need to handle those cases separately with this solution.&lt;/p&gt;

&lt;p&gt;Another solution would be to create all URLs (including those intended for redirects) via a dedicated component or subroutine that adds the session id. This latter solution is probably a better idea, as it handles redirects properly. The drawback with this strategy is that you&amp;rsquo;ll have a Mason component call for every link, instead of just regular HTML.&lt;/p&gt;

&lt;p&gt;Here is just such a component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $scheme   =&amp;gt; &#39;http&#39;
   $username =&amp;gt; undef
   $password =&amp;gt; &#39;&#39;
   $host     =&amp;gt; undef
   $port     =&amp;gt; undef
   $path
   %query    =&amp;gt; ()
   $fragment =&amp;gt; undef
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   my $uri = URI-&amp;gt;new;

   if ($host) {
       $uri-&amp;gt;scheme($scheme);

       if (defined $username) {
           $uri-&amp;gt;authority( &amp;quot;$username:$password&amp;quot; );
       }

       $uri-&amp;gt;host($host);
       $uri-&amp;gt;port($port) if $port;
   }

   # Sometimes we may want to include a path in a query string as part
   # of the path but the URI module will escape the question mark.
   my $q;

   if ( $path =~ s/\?(.*)$// ) {
       $q = $1;
   }

   $uri-&amp;gt;path($path);

   # If there was a query string, we integrate it into the query
   # parameter.
   if ($q) {
       %query = ( %query, split /[&amp;amp;=]/, $q );
   }

   $query{session_id} = $UserSession{session_id};

   # $uri-&amp;gt;query_form doesn&#39;t handle hash ref values properly
   while ( my ( $key, $value ) = each %query ) {
       $query{$key} = ref $value eq &#39;HASH&#39; ? [ %$value ] : $value;
   }

   $uri-&amp;gt;query_form(%query) if %query;

   $uri-&amp;gt;fragment($fragment) if $fragment;
  &amp;lt;/%init&amp;gt;
  &amp;lt;% $uri-&amp;gt;canonical | n %&amp;gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you didn&amp;rsquo;t want to put the session ID in the query string, then you might instead make it part of the URL path. The application could retrieve the session id from incoming requests by using a mod_perl handler during the URL translation stage of request handling.&lt;/p&gt;

&lt;p&gt;This component provides a programmatic interface to URL generation. Here is an example of how to use it, assuming that you&amp;rsquo;ve saved it as a component called &lt;code&gt;/url&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ... some HTML ...
   Look at &amp;lt;a href=&amp;quot;&amp;lt;&amp;amp; /url, path =&amp;gt; &amp;quot;books.html&amp;quot; &amp;amp;&amp;gt;&amp;quot;&amp;gt;our books&amp;lt;/a&amp;gt;
   or &amp;lt;a href=&amp;quot;&amp;lt;&amp;amp; /url, host =&amp;gt; &amp;quot;www.oreilly.com&amp;quot;
                        path =&amp;gt; &amp;quot;/catalog&amp;quot; &amp;amp;&amp;gt;&amp;quot;&amp;gt;O&#39;Reilly&#39;s&amp;lt;/a&amp;gt;.
   ... some HTML ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;making-use-of-autoflush&#34;&gt;Making Use of Autoflush&lt;/h3&gt;

&lt;p&gt;Every once in a while, you may have to output a very large component or a file to the client. If you simply let this accumulate in the output buffer, you could use up a lot of memory. Furthermore, the slow response time may make the user think that the site has stalled.&lt;/p&gt;

&lt;p&gt;Here is an example that sends out the contents of a potentially large file without sucking up lots of memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $filename
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   local *FILE;
   open FILE, &amp;quot;&amp;lt; $filename&amp;quot; or die &amp;quot;Cannot open $filename: $!&amp;quot;;
   $m-&amp;gt;autoflush(1);
   while (&amp;lt;FILE&amp;gt;) {
       $m-&amp;gt;print($_);
   }
   $m-&amp;gt;autoflush(0);
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If each line wasn&amp;rsquo;t too huge, then you might just flush the buffer every once in a while:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $filename
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   local *FILE;
   open FILE, &amp;quot;&amp;lt; $filename&amp;quot; or die &amp;quot;Cannot open $filename: $!&amp;quot;;
   while (&amp;lt;FILE&amp;gt;) {
       $m-&amp;gt;print($_);
       $m-&amp;gt;flush_buffer unless $. % 10;
   }
   $m-&amp;gt;flush_buffer;
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unless $. % 10&lt;/code&gt; bit makes use of the special Perl variable &lt;code&gt;$.&lt;/code&gt;, which is the current line number of the file being read. If this number modulo 10 is equal to zero, then we flush the buffer. This means that we flush the buffer every 10 lines. (Replace the number 10 with any desired value.)&lt;/p&gt;

&lt;h3 id=&#34;user-authentication-and-authorization&#34;&gt;User Authentication and Authorization&lt;/h3&gt;

&lt;p&gt;One problem that Web sites have to solve over and over again is user authentication and authorization. These two topics are related but not the same, as some might think. Authentication is the process of figuring out if someone is who they say they are, and usually involves checking passwords or keys. Authorization comes after this, when we want to determine whether a particular person is allowed to perform a certain action.&lt;/p&gt;

&lt;p&gt;There are a number of modules on CPAN that are intended to help do these things under &lt;code&gt;mod_perl&lt;/code&gt;. In fact, Apache has separate request-handling phases for both authentication and authorization that &lt;code&gt;mod_perl&lt;/code&gt; can handle. It is certainly possible to use these modules with Mason.&lt;/p&gt;

&lt;p&gt;You can also do authentication and authorization using Mason components. Authentication will usually involve some sort of request for a login and a password, after which you give the user some sort of token (either in a cookie or a session) that indicates that they have been authenticated. You can then check the validity of this token for each request.&lt;/p&gt;

&lt;p&gt;If you have such a token, then authorization simply consists of checking that the user to whom the token belongs is allowed to perform a given action.&lt;/p&gt;

&lt;h3 id=&#34;using-apache-authcookie&#34;&gt;Using Apache::AuthCookie&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Apache::AuthCookie&lt;/code&gt; module, available from CPAN, is a module that handles both authentication and authorization via &lt;code&gt;mod_perl&lt;/code&gt; and can be easily hooked into Mason. Rather than go through all the details of configuring &lt;code&gt;Apache::AuthCookie&lt;/code&gt;, which requires various settings in your server config file, let&amp;rsquo;s just skip all that and show you how you&amp;rsquo;d make the interface to Mason.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Apache::AuthCookie&lt;/code&gt; requires that you create a &amp;ldquo;login script&amp;rdquo; that will be executed the first time a browser tries to access a protected area. Calling this a script is actually somewhat misleading since it is really a page rather than a script (though it could be a script that generates a page). Regardless, using a Mason component for your &amp;ldquo;login script&amp;rdquo; merely requires that you specify the path to your Mason component for the login script parameter.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll call this &amp;ldquo;script&amp;rdquo; &lt;code&gt;AuthCookieLoginForm.comp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Mason Book AuthCookie Login Form&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;
  Your attempt to access this document was denied
  (&amp;lt;% $r-&amp;gt;prev-&amp;gt;subprocess_env(&amp;quot;AuthCookieReason&amp;quot;) %&amp;gt;).  Please enter
  your username and password.
  &amp;lt;/p&amp;gt;

  &amp;lt;form action=&amp;quot;/AuthCookieLoginSubmit&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;destination&amp;quot; value=&amp;quot;&amp;lt;% $r-&amp;gt;prev-&amp;gt;uri %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;table align=&amp;quot;left&amp;quot;&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Username:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;credential_0&amp;quot; size=&amp;quot;10&amp;quot; maxlength=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Password:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;credential_1&amp;quot; size=&amp;quot;8&amp;quot; maxlength=&amp;quot;8&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td colspan=&amp;quot;2&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;/form&amp;gt;

  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component is modified version of the example login script included with the &lt;code&gt;Apache::AuthCookie&lt;/code&gt; distribution.&lt;/p&gt;

&lt;p&gt;The action used for this form, `&lt;code&gt;, is configured as part of your AuthCookie configuration in your&lt;/code&gt;httpd.conf` file.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about all it takes to glue &lt;code&gt;Apache::AuthCookie&lt;/code&gt; and Mason together. The rest of authentication and authorization is handled by configuring &lt;code&gt;mod_perl&lt;/code&gt; to use &lt;code&gt;Apache::AuthCookie&lt;/code&gt; to protect anything on your site that needs authorization. A very simple configuration might include the following directives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  PerlSetVar MasonBookLoginScript /AuthCookieLoginForm.comp

  &amp;lt;location /authcookieloginsubmit&amp;gt;
    AuthType MasonBook::AuthCookieHandler
    AuthName MasonBook
    SetHandler  perl-script
    PerlHandler MasonBook::AuthCookieHandler-&amp;gt;login
  &amp;lt;/location&amp;gt;

  &amp;lt;location /protected&amp;gt;
    AuthType MasonBook::AuthCookieHandler
    AuthName MasonBook
    PerlAuthenHandler MasonBook::AuthCookieHandler-&amp;gt;authenticate
    PerlAuthzHandler  MasonBook::AuthCookieHandler-&amp;gt;authorize
    require valid-user
  &amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MasonBook::AuthCookieHandler&lt;/code&gt; module would look like this:
      package MasonBook::AuthCookieHandler;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use strict;

  use base qw(Apache::AuthCookie);

  use Digest::SHA1;

  my $secret = &amp;quot;You think I&#39;d tell you?  Hah!&amp;quot;;

  sub authen_cred {
      my $self = shift;
      my $r = shift;
      my ($username, $password) = @_;

      # implementing _is_valid_user() is out of the scope of this chapter
      if ( _is_valid_user($username, $password) ) {
          my $session_key =
            $username . &#39;::&#39; . Digest::SHA1::sha1_hex( $username, $secret );
          return $session_key;
      }
  }

  sub authen_ses_key {
      my $self = shift;
      my $r = shift;
      my $session_key = shift;

      my ($username, $mac) = split /::/, $session_key;

      if ( Digest::SHA1::sha1_hex( $username, $secret ) eq $mac ) {
          return $session_key;
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This provides the minimal interface an &lt;code&gt;Apache::AuthCookie&lt;/code&gt; subclass needs to provide to get authentication working.&lt;/p&gt;

&lt;h3 id=&#34;doing-it-my-way-thanks-frank&#34;&gt;Doing It My Way (Thanks Frank)&lt;/h3&gt;

&lt;p&gt;But what if you don&amp;rsquo;t want to use &lt;code&gt;Apache::AuthCookie&lt;/code&gt;? For example, your site may need to work without using cookies. No doubt this was exactly what Frank Sinatra was thinking about when he sang &amp;ldquo;My Way,&amp;rdquo; so let&amp;rsquo;s do it our way.&lt;/p&gt;

&lt;p&gt;First, we will show an example authentication system that only uses Mason and passes the authentication token around via the URL (actually, via a session).&lt;/p&gt;

&lt;p&gt;This example assumes that we already have some sort of session system that passes the session id around as part of the URL, as discussed previously.&lt;/p&gt;

&lt;p&gt;We start with a quick login form. We will call this component &lt;code&gt;login_form.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $username =&amp;gt; &#39;&#39;
   $password =&amp;gt; &#39;&#39;
   $redirect_to =&amp;gt; &#39;&#39;
   @errors =&amp;gt; ()
  &amp;lt;/%args&amp;gt;
  &amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Mason Book Login&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;

  % if (@errors) {
  &amp;lt;h2&amp;gt;Errors&amp;lt;/h2&amp;gt;
  %   foreach (@errors) {
  &amp;lt;b&amp;gt;&amp;lt;% $_ | h %&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
  %   }
  % }

  &amp;lt;form action=&amp;quot;login_submit.html&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;redirect_to&amp;quot; value=&amp;quot;&amp;lt;% $redirect_to %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;table align=&amp;quot;left&amp;quot;&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Login:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; value=&amp;quot;&amp;lt;% $username %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Password:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; value=&amp;quot;&amp;lt;% $password %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td colspan=&amp;quot;2&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Login&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;/form&amp;gt;

  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This form uses some of the same techniques we show in Chapter 8 (&amp;ldquo;Building a Mason Site&amp;rdquo;) to pre-populate the form and to handle errors.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s make the component that handles the form submission. This component, called &lt;code&gt;login_submit.html&lt;/code&gt;, will check the username and password and, if they are valid, place an authentication token into the user&amp;rsquo;s session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $username
   $password
   $redirect_to
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   if (my @errors = check_login($username, $password) {
       $m-&amp;gt;comp( &#39;redirect.mas&#39;,
                  path =&amp;gt; &#39;login_form.html&#39;,
                  query =&amp;gt; { errors =&amp;gt; \@errors,
                             username =&amp;gt; $username,
                             password =&amp;gt; $password,
                             redirect_to =&amp;gt; $redirect_to } );
   }

   $MasonBook::Session{username} = $username;
   $MasonBook::Session{token} =
       Digest::SHA1::sha1_hex( &#39;My secret phrase&#39;, $username );

   $m-&amp;gt;comp( &#39;redirect.mas&#39;,
             path =&amp;gt; $redirect_to );
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component simply checks (via magic hand waving) that the username and password are valid and if they are, it generates an authentication token, which is added to the user&amp;rsquo;s session. To generate this token, we take the username, which is also in the session, and combine it with a secret phrase. We then generate a MAC from those two things.&lt;/p&gt;

&lt;p&gt;The authentication and authorization check looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if ( $MasonBook::Session{token} ) {
      if ( $MasonBook::Session{token} eq
           Digest::SHA1::sha1_hex( &#39;My secret phrase&#39;,
                                   $MasonBook::Session{username} ) {

          # R&amp;lt;... valid login, do something here&amp;gt;
      } else {
          # R&amp;lt;... someone is trying to be sneaky!&amp;gt;
      }
  } else { # no token
       my $wanted_page = $r-&amp;gt;uri;

       # Append query string if we have one.
       $wanted_page .= &#39;?&#39; . $r-&amp;gt;args if $r-&amp;gt;args;

       $m-&amp;gt;comp( &#39;redirect.mas&#39;,
                  path =&amp;gt; &#39;/login/login_form.html&#39;,
                  query =&amp;gt; { redirect_to =&amp;gt; $wanted_page } );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could put all the pages that require authorization in a single directory tree and have a top-level autohandler in that tree do the check. If there is no token to check, then we redirect the browser to the login page, and after a successful login they&amp;rsquo;ll return, assuming that they submit valid login credentials.&lt;/p&gt;

&lt;h3 id=&#34;access-controls-with-attributes&#34;&gt;Access Controls With Attributes&lt;/h3&gt;

&lt;p&gt;The components we saw previously assumed that there are only two access levels, unauthenticated and authenticated. A more complicated version of this code might involve checking that the user has a certain access level or role.&lt;/p&gt;

&lt;p&gt;In that case, we&amp;rsquo;d first check that we had a valid authentication token and then go on to check that the user actually had the appropriate access rights. This is simply an extra step in the authorization process.&lt;/p&gt;

&lt;p&gt;Using attributes, we can easily define access controls for different portions of our site. Let&amp;rsquo;s assume that we have four access levels, &amp;ldquo;Guest,&amp;rdquo; &amp;ldquo;User,&amp;rdquo; &amp;ldquo;Editor&amp;rdquo; and &amp;ldquo;Admin.&amp;rdquo; Most of the site is public, and viewable by anyone. Some parts of the site require a valid login, while some require a higher level of privilege.&lt;/p&gt;

&lt;p&gt;We implement our access check in our top-level autohandler, ``, from which all other components &lt;em&gt;must&lt;/em&gt; inherit in order for the access control code to be effective.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%init&amp;gt;
   my $user = get_user();  # again, hand waving

   my $required_access = $m-&amp;gt;base_comp-&amp;gt;attr(&#39;required_access&#39;);

   unless ( $user-&amp;gt;has_access_level($required_access) ) {
      # R&amp;lt;... do something like send them to another page&amp;gt;
   }

   $m-&amp;gt;call_next;
  &amp;lt;/%init&amp;gt;
  &amp;lt;%attr&amp;gt;
   required_access =&amp;gt; &#39;Guest&#39;
  &amp;lt;/%attr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is crucial that we set a default access level in this autohandler. By doing this, we are saying that by default, all components are accessible by all people, since every visitor will have at least &amp;ldquo;Guest&amp;rdquo; access.&lt;/p&gt;

&lt;p&gt;We can override this default elsewhere. For example, in a component called &lt;code&gt;/admin/autohandler&lt;/code&gt;, we might have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%attr&amp;gt;
   required_access =&amp;gt; &#39;Admin&#39;
  &amp;lt;/%attr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as all the components in the &lt;code&gt;directory inherit from the&lt;/code&gt; component and don&amp;rsquo;t override the &lt;code&gt;required_access&lt;/code&gt; attribute, we have effectively limited that directory (and its subdirectories) to administration users only. If we, for some reason, had an individual component in the `` directory that we wanted editors to be able to see, we could simply set the &amp;ldquo;required_access&amp;rdquo; attribute for that component to &amp;ldquo;Editor.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;managing-dbi-connections&#34;&gt;Managing DBI Connections&lt;/h3&gt;

&lt;p&gt;Not infrequently, we see people on the Mason users list asking questions about how to handle caching DBI connections.&lt;/p&gt;

&lt;p&gt;Our recipe for this is really simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Apache::DBI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than reinventing the wheel, use &lt;code&gt;Apache::DBI&lt;/code&gt;, which provides the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is completely transparent to use. Once you&amp;rsquo;ve used it, you simply call &lt;code&gt;DBI-&amp;gt;connect()&lt;/code&gt; as always and &lt;code&gt;Apache::DBI&lt;/code&gt; gives you an existing handle if one is available.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It makes sure that the handle is live, so that if your RDBMS goes down and then back up, your connections still work just fine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It does not cache handles made before Apache forks, as many DBI drivers do not support using a handle after a fork.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;generating-config-files&#34;&gt;Generating Config Files&lt;/h3&gt;

&lt;p&gt;Config files are a good candidate for generation by Mason. For example, your production and staging Web server config files might differ in only a few areas. Changes to one usually will need to be propagated to another. This is especially true with &lt;code&gt;mod_perl&lt;/code&gt;, where Web server configuration can basically be part of a Web-based application.&lt;/p&gt;

&lt;p&gt;On top of this, you may decide to set up a per-developer environment, either by having each developer run the necessary software on their own machine, or by starting Web servers on many different ports on a single development server. In this scenario, a template-driven config file generator becomes even more appealing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple script to drive this generation. This script assumes that all the processes are running on one shared development machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl -w

  use strict;

  use Cwd;
  use File::Spec;
  use HTML::Mason;
  use User::pwent;

  my $comp_root =
      File::Spec-&amp;gt;rel2abs( File::Spec-&amp;gt;catfile( cwd(), &#39;config&#39; ) );

  my $output;
  my $interp =
      HTML::Mason::Interp-&amp;gt;new( comp_root  =&amp;gt; $comp_root,
                out_method =&amp;gt; \$output,
                  );

  my $user = getpwuid($&amp;lt;);

  $interp-&amp;gt;exec( &#39;/httpd.conf.mas&#39;, user =&amp;gt; $user );

  my $file =  File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;etc&#39;, &#39;httpd.conf&#39; );
  open FILE, &amp;quot;&amp;gt;$file&amp;quot; or die &amp;quot;Cannot open $file: $!&amp;quot;;
  print FILE $output;
  close FILE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;httpd.conf.mas&lt;/code&gt; component might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ServerRoot &amp;lt;% $user-&amp;gt;dir %&amp;gt;

  PidFile &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;logs&#39;, &#39;httpd.pid&#39; ) %&amp;gt;

  LockFile &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;logs&#39;, &#39;httpd.lock&#39; ) %&amp;gt;

  Port &amp;lt;% $user-&amp;gt;uid + 5000 %&amp;gt;

  # loads Apache modules, defines content type handling, etc.
  &amp;lt;&amp;amp; standard_apache_config.mas &amp;amp;&amp;gt;

  &amp;lt;perl&amp;gt;
   use lib &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;lib&#39; ) %&amp;gt;;
  &amp;lt;/perl&amp;gt;

  DocumentRoot &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;htdocs&#39; ) %&amp;gt;

  PerlSetVar MasonCompRoot &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;htdocs&#39; ) %&amp;gt;
  PerlSetVar MasonDataDir &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;mason&#39; ) %&amp;gt;

  PerlModule HTML::Mason::ApacheHandler

  &amp;lt;filesmatch &amp;quot;\.html$&amp;quot;&amp;gt;
   SetHandler perl-script
   PerlHandler HTML::Mason::ApacheHandler
  &amp;lt;/filesmatch&amp;gt;

  &amp;lt;%args&amp;gt;
  $user
  &amp;lt;/%args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This points the server&amp;rsquo;s document root to the developer&amp;rsquo;s working directory. Similarly, it adds the &lt;code&gt;project/lib&lt;/code&gt; directory to Perl&amp;rsquo;s &lt;code&gt;@INC&lt;/code&gt; via &lt;code&gt;use lib&lt;/code&gt; so that the user&amp;rsquo;s working copy of the project&amp;rsquo;s modules are seen first. The server will listen on a port equal to the user&amp;rsquo;s user ID, plus 5,000.&lt;/p&gt;

&lt;p&gt;Obviously, this is an incomplete example. It doesn&amp;rsquo;t specify where logs will go, or other necessary config items. It also doesn&amp;rsquo;t handle generating the config file for a server intended to be run by the root user on a standard port.&lt;/p&gt;

&lt;h3 id=&#34;if-you-want-more&#34;&gt;If You Want More &amp;hellip;&lt;/h3&gt;

&lt;p&gt;These recipes were adapted from Chapter 11, &amp;ldquo;Recipes,&amp;rdquo; of &lt;em&gt;Embedding Perl in HTML With Mason&lt;/em&gt;. And, of course, the book contains a lot more than just recipes. If you&amp;rsquo;re interested in learning more about Mason, the book is a great place to start.&lt;/p&gt;

&lt;p&gt;Also, don&amp;rsquo;t forget to check out the Mason HQ site at &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;www.masonhq.com/&lt;/a&gt;, which contains online documentation, user-contributed code and docs, and links to the Mason users mailing list, which is another great resource for developers using Mason.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates recently released (October 2002) &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/chapter/index.html&#34;&gt;Sample Chapter 5, Advanced Features&lt;/a&gt;, is available free online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also look at the [Table of Contents](), the [Index](), and the [Full Description]() of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, [click here]().&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating Modular Web Pages With EmbPerl</title>
      <link>http://localhost:1313/pub/2001/03/embperl.html/</link>
      <pubDate>Tue, 13 Mar 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/03/embperl.html/</guid>
      <description>

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;a href=&#34;#getting%20started&#34;&gt;Getting Started&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#Hello%20World&#34;&gt;Hello World&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#websiteglobal%20variables&#34;&gt;Web Site Global Variables&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#modular%20files&#34;&gt;Modular Files&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#modular%20file%20inheritance&#34;&gt;Modular File Inheritance&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#subroutines%20in%20embperlobject&#34;&gt;Subroutines in EmbperlObject&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#conclusions&#34;&gt;Conclusions&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This tutorial is intended as a complement to the Embperl documentation, not a replacement. We assume a basic familiarity with Apache, mod_perl and Perl, and the Embperl documentation. No prior experience with EmbperlObject is assumed. The real purpose is to give a clearer idea of how EmbperlObject can help you build large Web sites. We give example code that can serve as a starting template and hints about the best practices that have come out of real experience using the toolkit. As always, there is more than one way to do it!&lt;/p&gt;

&lt;p&gt;Since EmbperlObject is an evolving tool, it is likely that these design patterns will evolve over time, and it is recommended that the reader check back on the Embperl Web site for new versions.&lt;/p&gt;

&lt;h3 id=&#34;span-id-motivation-constructing-modular-websites-motivation-constructing-modular-web-sites-span&#34;&gt;&lt;span id=&#34;motivation: constructing modular websites&#34;&gt;Motivation: Constructing Modular Web Sites&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Embperl is a tool that allows you to embed Perl code in your HTML documents. As such, it could handle just about everything you need to do with your Web site. So what is the point of EmbperlObject? What does it give us that we don&amp;rsquo;t already get with basic Embperl?&lt;/p&gt;

&lt;p&gt;As often seems to be the case with Perl, the answer has to do with laziness. We would all like the task of building Web sites to be as simple as possible. Anyone who has had to build a non-trivial site using pure HTML will have quickly experienced the irritation of having to copy-and-paste common code between documents - stuff like navigation bars and table formats. We have probably all wished for an ``include&amp;rdquo; HTML tag. EmbperlObject goes a long way toward solving this problem, without requiring the developer to resort to a lot of customized Perl code.&lt;/p&gt;

&lt;p&gt;In a nutshell, EmbperlObject extends Embperl by enabling the construction of Web sites in a modular, or object-oriented, fashion. I am using the term ``object-oriented&amp;rdquo; (OO) loosely here in the context of inheritance and overloading, but you don&amp;rsquo;t really need to know anything about the OO paradigm to benefit from EmbperlObject. As you will see from this short tutorial, it is possible to benefit from using EmbperlObject with even a minimal knowledge of Perl. With just a little instruction, in fact, pure HTML coders can use it to improve their Web site architecture. Having said that, however, EmbperlObject also provides for more advanced OO functionality, as we&amp;rsquo;ll see later.&lt;/p&gt;

&lt;h3 id=&#34;span-id-getting-started-getting-started-span&#34;&gt;&lt;span id=&#34;getting started&#34;&gt;Getting Started&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll assume that you&amp;rsquo;ve successfully installed the latest Apache, mod_perl and Embperl on your system. That should all be relatively painless - problems normally occur when mixing older versions of one tool with later versions of another. If you can, try to download the latest versions of everything.&lt;/p&gt;

&lt;p&gt;Having done all that, you might want to get going with configuring a Web site. The first thing you need to do is set up the Apache config file, usually called &lt;em&gt;httpd.conf&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-configuring-httpd-conf-configuring-httpd-conf-span&#34;&gt;&lt;span id=&#34;configuring httpd.conf&#34;&gt;Configuring &lt;em&gt;httpd.conf&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The following is an example configuration for a single virtual host to use EmbperlObject. There are, as usual, different ways to do this; but if you are starting from scratch, then it may be useful as a template. It works with the later versions of Apache (1.3.6 and up). Obviously, substitute your own IP address and domain name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        NameVirtualHost 10.1.1.3:80

        &amp;lt;VirtualHost 10.1.1.3:80&amp;gt;
                ServerName www.mydomain.com
                ServerAdmin webmaster@mydomain.com
                DocumentRoot /www/mydomain/com/htdocs
                DirectoryIndex index.html
                ErrorLog /www/mydomain/com/logs/error_log
                TransferLog /www/mydomain/com/logs/access_log
                PerlSetEnv EMBPERL_ESCMODE 0
                PerlSetEnv EMBPERL_OPTIONS 16
                PerlSetEnv EMBPERL_MAILHOST mail.mydomain.com
                PerlSetEnv EMBPERL_OBJECT_BASE base.epl
                PerlSetEnv EMBPERL_OBJECT_FALLBACK notfound.html
                PerlSetEnv EMBPERL_DEBUG 0
        &amp;lt;/VirtualHost&amp;gt;

        # Set EmbPerl handler for main directory
        &amp;lt;Directory &amp;quot;/www/mydomain/com/htdocs/&amp;quot;&amp;gt;
                &amp;lt;FilesMatch &amp;quot;.*\.html$&amp;quot;&amp;gt;
                        SetHandler  perl-script
                        PerlHandler HTML::EmbperlObject
                        Options     ExecCGI
                &amp;lt;/FilesMatch&amp;gt;
                &amp;lt;FilesMatch &amp;quot;.*\.epl$&amp;quot;&amp;gt;
                        Order allow,deny
                        Deny From all
                &amp;lt;/FilesMatch&amp;gt;
        &amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you could change the .html file extension in the FilesMatch directive; this is a personal preference issue. Personally, I use .html for the main document files because I can edit files using my favorite editor (emacs) and it will automatically load html mode. Plus, this may be a minor thing - but using .html rather than a special extension such as .epl adds a small amount of security to your site since it provides no clue that the Web site is using Embperl. If you&amp;rsquo;re careful about the handling of error messages, then there never will be any indication of this. These days, the less the script kiddies can deduce about you, the better &amp;hellip;&lt;/p&gt;

&lt;p&gt;Also, note that we have added a second FilesMatch directive, which denies direct access to files with .epl extensions (again, you could change this extension to another if you like, for example, .obj). This can be helpful for cases where you have Embperl files that contain fragments of code or HTML; you want those files to be in the Apache document tree, but you don&amp;rsquo;t want people to be able to request them directly - these files should only included directly into other documents from within Embperl, using Execute(). This is really a security issue. In the following examples, we name files that are not intended to be requested directly with the .epl extension. Files that are intended to be directly requested are named with the standard .html extension. This can also be helpful when scanning a directory to see which are the main document files and which are the modules. Finally, note that using the Apache FilesMatch directive to restrict access does not prevent us from accessing these files (via Execute) in Embperl.&lt;/p&gt;

&lt;p&gt;So how does all this translate into a real Web site? Let&amp;rsquo;s look at the classic example, Hello World.&lt;/p&gt;

&lt;h3 id=&#34;span-id-hello-world-hello-world-span&#34;&gt;&lt;span id=&#34;hello world&#34;&gt;Hello World&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The file specified by the EMBPERL_OBJECT_BASE apache directive (usually called &lt;em&gt;base.epl&lt;/em&gt;) is the lynchpin of how EmbperlObject operates. Whenever a request comes for any page on this Web site, Emperl will look for &lt;em&gt;base.epl&lt;/em&gt; - first in the same directory as the request, and if it&amp;rsquo;s not found there, then working up the directory tree to the root directory of the Web site. For example, if a request comes for &lt;a href=&#34;http://www.yoursite.com/foo/bar/file.html&#34;&gt;http://www.yoursite.com/foo/bar/file.html&lt;/a&gt;, then Embperl first looks for &lt;em&gt;/foo/bar/base.epl&lt;/em&gt;. If it doesn&amp;rsquo;t find &lt;em&gt;base.epl&lt;/em&gt; there, then it looks in &lt;em&gt;/foo/base.epl&lt;/em&gt;. If there&amp;rsquo;s still no luck, then it finally looks in &lt;em&gt;/base.epl&lt;/em&gt;. (These paths are all relative to the document root for the Web site). What is the point of all this?&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;em&gt;base.epl&lt;/em&gt; is a template for giving a common look-and-feel to your Web pages. This file is what is used to build the response to any request, regardless of the actual filename that was requested. So even if &lt;em&gt;file.html&lt;/em&gt; was requested, &lt;em&gt;base.epl&lt;/em&gt; is what is actually executed. &lt;em&gt;base.epl&lt;/em&gt; is a normal file containing valid HTML mixed with Perl code, but with a few small differences. Here&amp;rsquo;s a simple &amp;lsquo;Hello World&amp;rsquo; example of this approach:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;HTML&amp;gt;
        &amp;lt;HEAD&amp;gt;
                &amp;lt;TITLE&amp;gt;Some title&amp;lt;/TITLE&amp;gt;
        &amp;lt;/HEAD&amp;gt;
        &amp;lt;BODY&amp;gt;
        Joe&#39;s Website
        &amp;lt;P&amp;gt;
        [- Execute (&#39;*&#39;) -]
        &amp;lt;/BODY&amp;gt;
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/hello.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if the file &lt;a href=&#34;http://www.yoursite.com/hello.html&#34;&gt;http://www.yoursite.com/hello.html&lt;/a&gt; is requested, then &lt;em&gt;base.epl&lt;/em&gt; is what will get executed initially. So where does the file &lt;em&gt;hello.html&lt;/em&gt; come into the picture? Well, the key is the &amp;lsquo;*&amp;rsquo; parameter in the call to Execute(). &amp;lsquo;*&amp;rsquo; is a special filename, only used in &lt;em&gt;base.epl&lt;/em&gt;. It means, literally, ``the filename that was actually requested.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;What you will see if you try this example is something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Joe&#39;s Website

        Hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see here, the text ``Joe&amp;rsquo;s Web Site&amp;rdquo; is from &lt;em&gt;base.epl&lt;/em&gt; and the ``Hello world!&amp;rdquo; is from &lt;em&gt;hello.html&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This architecture also means that only &lt;em&gt;base.epl&lt;/em&gt; has to have the boilerplate code that each HTML file normally needs to contain - namely the &amp;lt;HTML&amp;gt; &amp;lt;BODY&amp;gt;, &amp;lt;/HTML&amp;gt; and so on. Since the &amp;lsquo;*&amp;rsquo; file is simply inserted into the code, all it needs to contain is the actual content that is specific to that file. Nothing else is necessary, because &lt;em&gt;base.epl&lt;/em&gt; has all the standard HTML trappings. Of course, you&amp;rsquo;ll probably have more interesting content, but you get the point.&lt;/p&gt;

&lt;h3 id=&#34;span-id-websiteglobal-variables-web-site-global-variables-span&#34;&gt;&lt;span id=&#34;websiteglobal variables&#34;&gt;Web Site Global Variables&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a more interesting example. When you create Perl variables in Embperl usually their scope is the current file; so they are effectively ``local&amp;rdquo; to that file. When you split your Web site into modules, however, it quickly becomes apparent that it is useful to have variables that are global to the Web site, i.e., shared between multiple files.&lt;/p&gt;

&lt;p&gt;To achieve this, EmbperlObject has a special object that is automatically passed to each page as it is executed. This object is usually referred to as the ``Request&amp;rdquo; object, because we get one of these objects created for each document request that the Web server receives. This object is passed in on the stack, so you can retrieve it using the Perl ``shift&amp;rdquo; statement. This object is also automatically destroyed after the request, so the Request object cannot be used to store data between requests. The idea is that you can store variables that are local to the current request, and shared between all documents on the current Web site; plus, as we&amp;rsquo;ll see later, we can also use it to call object methods. For example, let&amp;rsquo;s say you set up some variables in &lt;em&gt;base.epl&lt;/em&gt;, and then use them in &lt;em&gt;file.html&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;HTML&amp;gt;
        &amp;lt;HEAD&amp;gt;
                &amp;lt;TITLE&amp;gt;Some title&amp;lt;/TITLE&amp;gt;
        &amp;lt;/HEAD&amp;gt;
        [- 
                $req = shift;
                $req-&amp;gt;{webmaster} = &#39;John Smith&#39;
        -]
        &amp;lt;BODY&amp;gt;
        [- Execute (&#39;*&#39;) -]
        &amp;lt;/BODY&amp;gt;
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/file.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [- $req = shift -]
        Please send all suggestions to [+ $req-&amp;gt;{webmaster} +].
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that EmbperlObject is allowing us to set up global variables in one place and share them throughout the Web site. If you place &lt;em&gt;base.epl&lt;/em&gt; in the root document directory, you can have any number of other files in this and subdirectories, and they will all get these variables whenever they are executed. No matter which file is requested, &lt;em&gt;/base.epl&lt;/em&gt; is executed first and then the requested file.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t even need to include the requested &amp;lsquo;*&amp;rsquo; file, but typically you will have to - it would be a bit odd to ignore the requested file!&lt;/p&gt;

&lt;h3 id=&#34;span-id-modular-files-modular-files-span&#34;&gt;&lt;span id=&#34;modular files&#34;&gt;Modular Files&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The previous example is nice; it demonstrates the basic ability to have Web site-wide variables set up in &lt;em&gt;base.epl&lt;/em&gt; and then automatically have them shared by all other files. Leading on from this, we probably want to split up our files, for both maintainability and readability. For example, a non-trivial Web site will probably define some Web site-wide constants, perhaps some global variables, and maybe also have some kind of initialization code that has to be executed for each page (e.g. setting up a database connection). We could put all of this in &lt;em&gt;base.epl&lt;/em&gt;, but this file would quickly begin to look messy. It would be nice to split this stuff out into other files. For example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;HTML&amp;gt;
        [- Execute (&#39;constants.epl&#39;)-]
        [- Execute (&#39;init.epl&#39;)-]
        &amp;lt;HEAD&amp;gt;
                &amp;lt;TITLE&amp;gt;Some title&amp;lt;/TITLE&amp;gt;
        &amp;lt;/HEAD&amp;gt;
        &amp;lt;BODY&amp;gt;
        [- Execute (&#39;*&#39;) -]
        &amp;lt;/BODY&amp;gt;
        [- Execute (&#39;cleanup.epl&#39;) -]
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/constants.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [-
                $req = shift;
                $req-&amp;gt;{bgcolor} = &amp;quot;white&amp;quot;;
                $req-&amp;gt;{webmaster} = &amp;quot;John Smith&amp;quot;;
                $req-&amp;gt;{website_database} = &amp;quot;mydatabase&amp;quot;;
        -]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/init.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [-
                $req = shift;
                # Set up database connection
                use DBI;
                use CGI qw(:standard);
                $dsn = &amp;quot;DBI:mysql:$req-&amp;gt;{website_database}&amp;quot;;
                $req-&amp;gt;{dbh} = DBI-&amp;gt;connect ($dsn);
        -]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/cleanup.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [-
                $req = shift;
                # Close down database connection
                $req-&amp;gt;{dbh}-&amp;gt;disconnect();
        -]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see how this would be useful, since each page on your site now has a database connection available in $req-&amp;gt;{dbh}. Also notice that we have a &lt;em&gt;cleanup.epl&lt;/em&gt; file that is always executed at the end - this is useful for cleaning up, shutting down connections and so on.&lt;/p&gt;

&lt;h3 id=&#34;span-id-modular-file-inheritance-modular-file-inheritance-span&#34;&gt;&lt;span id=&#34;modular file inheritance&#34;&gt;Modular File Inheritance&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To recap, we have seen how we can break our site into modules that are common across multiple files, because they are automatically included by &lt;em&gt;base.epl&lt;/em&gt;. Inheritance is a way in which we can make our Web sites more modular.&lt;/p&gt;

&lt;p&gt;Although the concept of inheritance is one that stems from the object-oriented paradigm, you really don&amp;rsquo;t need to be an OO guru to understand it. We will demonstrate the concept through a simple example.&lt;/p&gt;

&lt;p&gt;Say you wanted different parts of your Web site to have different &amp;lt;TITLE&amp;gt; tags. You could set the title in each page manually, but if you had a number of different pages in each section, then this would quickly get tiresome. We could split off the &amp;lt;HEAD&amp;gt; section into its own file, just like &lt;em&gt;constants.epl&lt;/em&gt; and &lt;em&gt;init.epl&lt;/em&gt;, right? But so far, it looks like we are stuck with a single &lt;em&gt;head.epl&lt;/em&gt; file for the entire Web site, which doesn&amp;rsquo;t really help much.&lt;/p&gt;

&lt;p&gt;The answer lies in subdirectories. This is the key to unlocking inheritance and one of the most powerful features of EmbperlObject. You may use subdirectories currently in your Web site design, maybe for purposes of organization and maintenance. But here, subdirectories actually enable you to override files from upper directories. This is best demonstrated by example (simplified to make this specific point clearer - assume &lt;em&gt;constants.epl&lt;/em&gt;, &lt;em&gt;init.epl&lt;/em&gt; and &lt;em&gt;cleanup.epl&lt;/em&gt; are the same as in the previous example):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;HTML&amp;gt;
        [- Execute (&#39;constants.epl&#39;)-]
        [- Execute (&#39;init.epl&#39;)-]
        &amp;lt;HEAD&amp;gt;
        [- Execute (&#39;head.epl&#39;)-]
        &amp;lt;/HEAD&amp;gt;
        &amp;lt;BODY&amp;gt;
        [- Execute (&#39;*&#39;) -]
        &amp;lt;/BODY&amp;gt;
        [- Execute (&#39;cleanup.epl&#39;) -]
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/head.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;TITLE&amp;gt;Joe&#39;s Website&amp;lt;/TITLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/contact/head.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;TITLE&amp;gt;Contacting Joe&amp;lt;/TITLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assume that we have an &lt;em&gt;index.html&lt;/em&gt; file in each directory that does something useful. The main thing to focus on is &lt;em&gt;head.epl&lt;/em&gt;. You can see that we have one instance of this file in the root directory, and one in a subdirectory, namely &lt;em&gt;/contact/head.epl&lt;/em&gt;. Here&amp;rsquo;s the neat part: When a page is requested from your Web site, EmbperlObject will search automatically for &lt;em&gt;base.epl&lt;/em&gt; first in the same directory as the requested page. If it doesn&amp;rsquo;t find it there, then it tracks back up the directory tree until it finds the file. But then, when executing &lt;em&gt;base.epl&lt;/em&gt;, any files that are Executed (such as &lt;em&gt;head.epl&lt;/em&gt;) are first looked for in the &lt;strong&gt;original directory&lt;/strong&gt; of the requested file. Again, if the file is not found there, then EmbperlObject tracks back up the directory tree.&lt;/p&gt;

&lt;p&gt;So what does this mean? Well, if we have a subdirectory, then we can see whether we want just the usual &lt;em&gt;index.html&lt;/em&gt; file and nothing else. In that case, all the files included by &lt;em&gt;base.epl&lt;/em&gt; will be found in the root document directory. But if we redefine &lt;em&gt;head.epl&lt;/em&gt;, then EmbperlObject will pick up that version of the file whenever we are in the /contact/ subdirectory.&lt;/p&gt;

&lt;p&gt;That is inheritance in action. In a nutshell, subdirectories inherit files such as &lt;em&gt;head.epl&lt;/em&gt;, &lt;em&gt;constants.epl&lt;/em&gt; and so on from ``parent&amp;rdquo; directories. But if we want, we can redefine any of these files in our subdirectories, thus specializing that functionality for that part of our Web site. If we had 20 .html files in /contact/, then loading any of them would automatically get &lt;em&gt;/contact/head.epl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is all very cool, but there is one more wrinkle. Let&amp;rsquo;s say we want to redefine &lt;em&gt;init.epl&lt;/em&gt;, because there is some initialization that is specific to the /contact/ subdirectory. That&amp;rsquo;s fine since we can create &lt;em&gt;/contact/init.epl&lt;/em&gt; and that file would be loaded instead of &lt;em&gt;/init.epl&lt;/em&gt; whenever a file is requested from the /contact/ subdir. But this also means that the initialization code that is in &lt;em&gt;/init.epl&lt;/em&gt; would never get executed, right? That&amp;rsquo;s bad, because the base version of the file does a lot of useful set up. The answer is simple: For cases such as this, we need to make sure to call the parent version of the file at the start. For example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/contact/init.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [- Execute (&#39;../init.epl&#39;) -]

        [-
                # Do some setup specific to this subdirectory
        -]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the first thing we do here is Execute the parent version of the file (i.e., the one in the immediate parent directory). Thus we can ensure the integrity of the basic initialization that each page should receive.&lt;/p&gt;

&lt;p&gt;EmbperlObject is smart about this process. For example, we have a situation where we have several levels of subdirectory; then, say we only redefine &lt;em&gt;init.epl&lt;/em&gt; in one of the deeper levels, say &lt;em&gt;/sub/sub/sub/init.epl&lt;/em&gt;. Now, if this file tries to Execute &lt;em&gt;../init.epl&lt;/em&gt;, there may not be any such file in the immediate parent directory - so EmbperlObject automatically tracks back up the directories until it finds the base version, &lt;em&gt;/init.epl&lt;/em&gt;. So, for any subdirectory level in your Web site, you only have to redefine those files that are specific to this particular area. This results in a much cleaner Web site.&lt;/p&gt;

&lt;p&gt;You can break up your files into whatever level of granularity you want, depending on your needs. For instance, instead of just &lt;em&gt;head.epl&lt;/em&gt; you might break it down into &lt;em&gt;title.epl&lt;/em&gt;, &lt;em&gt;metatags.epl&lt;/em&gt; and so on. It&amp;rsquo;s up to you. The more you split it up, the more you can specialize in each of the subdirectories. There is a balance, however, because splitting things up too much results in an overly fragmented site that can be harder to maintain. Moderation is the key - only split out files if they contain a substantial chunk of code, or if you know that you need to redefine them in subdirectories, generally speaking.&lt;/p&gt;

&lt;h3 id=&#34;span-id-subroutines-in-embperlobject-subroutines-in-embperlobject-span&#34;&gt;&lt;span id=&#34;subroutines in embperlobject&#34;&gt;Subroutines in EmbperlObject&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There are two types of inheritance in EmbperlObject. The first is the one that we described in the previous section, i.e., inheritance of modular files via the directory hierarchy. The other type, which is closely related, is the inheritance of subroutines (both pure Perl and Embperl). In this context, subroutines are really object methods, as we&amp;rsquo;ll see below. As you are probably already aware, there are two types of subroutines in Embperl, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [!
                sub perl_sub
                {
                        # Some perl code
                }
        !]

        [$ sub embperl_sub $]
                Some HTML
        [$ endsub $]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In EmbperlObject, subroutines become object methods; the difference is that you always call an object method through an object reference. For example, instead of a straight subroutine call like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have instead a call through some object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $obj-&amp;gt;foo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EmbperlObject allows you to inherit object methods in much the same way as files. Because of the way that Perl implements objects and methods, there is just a little extra consideration needed. (Note: This is not really a good place to introduce Perl&amp;rsquo;s object functionality. If you&amp;rsquo;re not comfortable with inheritance, @ISA and object methods, then I suggest you take a look at the book ``Programming Perl&amp;rdquo; (O&amp;rsquo;Reilly) or ``Object Oriented Perl&amp;rdquo; by Damien Conway (Manning).)&lt;/p&gt;

&lt;p&gt;A simple use of methods can be demonstrated using the following example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [! sub title {&#39;Joe&#39;s Website&#39;} !]
        [- $req = shift -]
        &amp;lt;HTML&amp;gt;
        &amp;lt;HEAD&amp;gt;
        &amp;lt;TITLE&amp;gt;[+ $req-&amp;gt;title() +]&amp;lt;/TITLE&amp;gt;
        &amp;lt;/HEAD&amp;gt;
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/contact/index.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [! sub title {&#39;Contacting Joe&#39;} !]
        [- $req = shift -]
        &amp;lt;HTML&amp;gt;
                A contact form goes here
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an alternative way of implementing the previous ``contact&amp;rdquo; example, which still uses inheritance - but instead of placing the &amp;lt;TITLE&amp;gt; tag in a separate file (&lt;em&gt;head.epl&lt;/em&gt;), we use a method (title()). You can see that we define this method in &lt;em&gt;/base.epl&lt;/em&gt;, so any page that is requested from the root directory will get the title ``Joe&amp;rsquo;s Web Site.&amp;rdquo; This is a good default title. Then, in &lt;em&gt;/foo/index.html&lt;/em&gt; we redefine the &lt;code&gt;title()&lt;/code&gt; method to return ``Contacting Joe.&amp;rdquo; Inheritance ensures that when the call to &lt;code&gt;title()&lt;/code&gt; occurs in &lt;em&gt;/base.epl&lt;/em&gt;, the correct version of the method will be executed. Since &lt;em&gt;/foo/index.html&lt;/em&gt; has its own version of that method, it will automatically be called instead of the base version. This allows each file to potentially redefine methods that were defined in &lt;em&gt;/base.epl&lt;/em&gt;, and it works well. But, as your Web sites get bigger, you will probably want to split off some routines into their own files.&lt;/p&gt;

&lt;p&gt;EmbperlObject also allows us to create special files that contain only inheritable object methods. EmbperlObject can set up @ISA for us, so that the Perl object methods will work as expected. To do this, we need to access our methods through a specially created object rather than directly through the Request object (usually called $r or $req). This is best illustrated by the following example, which demonstrates the code that needs to be added to &lt;em&gt;base.epl&lt;/em&gt; and shows how we implement inheritance via a subdirectory. Once again, assume that missing files such as &lt;em&gt;constants.epl&lt;/em&gt; are the same as the previous example (Note that the &amp;lsquo;object&amp;rsquo; parameter to Execute only works in 1.3.1 and above).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/base.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;HTML&amp;gt;
        [- $subs = Execute ({object =&amp;gt; &#39;subs.epl&#39;}); -]
        [- Execute (&#39;constants.epl&#39;) -]
        [- Execute (&#39;init.epl&#39;) -]
        &amp;lt;HEAD&amp;gt;
        [- Execute (&#39;head.epl&#39;) -]
        &amp;lt;/HEAD&amp;gt;
        &amp;lt;BODY&amp;gt;
        [- Execute (&#39;*&#39;, $subs) -]
        &amp;lt;/BODY&amp;gt;
        [- Execute (&#39;cleanup.epl&#39;) -]
        &amp;lt;/HTML&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/subs.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [!
                sub hello
                {
                        my ($self, $name) = @_;
                        print OUT &amp;quot;Hello, $name&amp;quot;;
                }
        !]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/insult/index.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [-
                $subs = $param[0];
                $subs-&amp;gt;hello (&amp;quot;Joe&amp;quot;);
        -]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;/insult/subs.epl&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        [! Execute ({isa =&amp;gt; &#39;../subs.epl&#39;}) !]

        [!
                sub hello
                {
                        my ($self, $name) = @_;
                        $self-&amp;gt;SUPER::hello ($name);
                        print OUT &amp;quot;, you schmuck&amp;quot;;
                }
        !]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we requested the file &lt;em&gt;/insult/index.html&lt;/em&gt;, then we would see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Hello, Joe, you schmuck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what is happening? First, note that we create a $subs object in &lt;em&gt;base.epl&lt;/em&gt;, using a special call to Execute(). We then pass this object to files that will need it, via an &lt;code&gt;Execute()&lt;/code&gt; parameter. This can be seen with the &amp;lsquo;*&amp;rsquo; file.&lt;/p&gt;

&lt;p&gt;Next, we have two versions of &lt;em&gt;subs.epl&lt;/em&gt;. The first, &lt;em&gt;/subs.epl&lt;/em&gt;, is pretty straightforward. All we need to do is remember that all of these subroutines are now object methods, and so take the extra parameter ($self). The basic &lt;code&gt;hello()&lt;/code&gt; method simply says Hello to the name of the person passed in.&lt;/p&gt;

&lt;p&gt;Then we have a subdirectory, called /insult/. Here we have another instance of &lt;em&gt;subs.epl&lt;/em&gt;, and we redefine hello(). We call the parent version of the function, and then add the insult (``you schmuck&amp;rdquo;). You don&amp;rsquo;t have to call the parent version of methods you define, of course, but it&amp;rsquo;s a useful demonstration of the possibilities.&lt;/p&gt;

&lt;p&gt;The file &lt;em&gt;/insult/subs.epl&lt;/em&gt; has to have a call to &lt;code&gt;Execute()&lt;/code&gt; that sets up @ISA. This is the first line. You might ask why EmbperlObject doesn&amp;rsquo;t do this automatically; it is mainly for reasons of efficiency. Not every file is going to contain methods that need to inherit from the parent file, and so simply requiring this one line seemed to be a good compromise. It also allows for more flexibility, as you can include other arbitrary files into the @ISA tree if you want.&lt;/p&gt;

&lt;h3 id=&#34;span-id-conclusions-conclusions-span&#34;&gt;&lt;span id=&#34;conclusions&#34;&gt;Conclusions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So there you have it: an introduction to the use of EmbperlObject for constructing large, modular Web sites. You will probably use it to enable such things as Web site-wide navigation bars, table layouts and whatever else needs to be modularized.&lt;/p&gt;

&lt;p&gt;This document is just an introduction, to give a broad flavor of the tool. You should refer to the actual documentation for details.&lt;/p&gt;

&lt;p&gt;EmbperlObject will inevitably evolve as developers discover what is useful and what isn&amp;rsquo;t. We will try to keep this document up-to-date with these changes, but make sure to check the Embperl Web site regularly for the latest changes.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

