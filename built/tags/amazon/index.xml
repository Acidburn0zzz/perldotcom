<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amazon on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/amazon/</link>
    <description>Recent content in Amazon on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2017 08:29:48 +0000</lastBuildDate>
    <atom:link href="/tags/amazon/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</link>
      <pubDate>Mon, 13 Mar 2017 08:29:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebook Messenger Send API using &lt;a href=&#34;https://metacpan.org/pod/Facebook::Messenger::Client&#34;&gt;Facebook::Messenger::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Taskwarrior::Kusarigama&#34;&gt;Taskwarrior::Kusarigama&lt;/a&gt; provides a plugin system for the Taskwarrior task manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Fitbit&#34;&gt;WebService::Fitbit&lt;/a&gt; can get, post and delete Fitbit API data&lt;/li&gt;
&lt;li&gt;Get a perly interface to the &lt;a href=&#34;https://www.theforeman.org/introduction.html&#34;&gt;Foreman&lt;/a&gt; API using &lt;a href=&#34;https://metacpan.org/pod/WWW::Foreman::API&#34;&gt;WWW::Foreman::API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a CPANTS Kwalitee Report using &lt;a href=&#34;https://metacpan.org/pod/CPANTS::Kwalitee::Report&#34;&gt;CPANTS::Kwalitee::Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read large directories over NFS with &lt;a href=&#34;https://metacpan.org/pod/Linux::NFS::BigDir&#34;&gt;Linux::NFS::BigDir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coordinates::Converter::LV03&#34;&gt;Geo::Coordinates::Converter::LV03&lt;/a&gt; converts Swiss LV03 coordinates to WSG84 and vice versa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hadoop::Inline::ClassLoader&#34;&gt;Hadoop::Inline::ClassLoader&lt;/a&gt; loads Hadoop Java classes via Inline::Java&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::Tiny&#34;&gt;PDF::Tiny&lt;/a&gt; is a lightweight PDF parser&lt;/li&gt;
&lt;li&gt;Convert JSON via an IO layer with &lt;a href=&#34;https://metacpan.org/pod/PerlIO::via::json&#34;&gt;PerlIO::via::json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a raw quote operator for Perl with &lt;a href=&#34;https://metacpan.org/pod/Syntax::Keyword::RawQuote&#34;&gt;Syntax::Keyword::RawQuote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Autoload::AUTOCAN&#34;&gt;Autoload::AUTOCAN&lt;/a&gt; provides some sugar for autoloading methods&lt;/li&gt;
&lt;li&gt;Treat environment variables as arrays with &lt;a href=&#34;https://metacpan.org/pod/Env::ShellWords&#34;&gt;Env::ShellWords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repo::Commits&#34;&gt;Git::Repo::Commits&lt;/a&gt; gets all commits in a repository&lt;/li&gt;
&lt;li&gt;Part of the new MOP framework, &lt;a href=&#34;https://metacpan.org/pod/Method::Traits&#34;&gt;Method::Traits&lt;/a&gt; adds coderefs to methods via subroutine attributes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Piper&#34;&gt;Piper&lt;/a&gt; is a flexible, iterable pipeline engine with automatic batching with a great name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::tored&#34;&gt;Proc::tored&lt;/a&gt; manages a process using a pid file. Check out &lt;a href=&#34;https://metacpan.org/pod/Proc::tored::Pool&#34;&gt;Proc::tored::Pool&lt;/a&gt; for an example implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::Dash::Button&#34;&gt;Amazon::Dash::Button&lt;/a&gt; let&amp;rsquo;s you use your Amazon dash button for &lt;em&gt;anything&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get a perly interface to the Revolt USB Dongle PX-1674-675 using &lt;a href=&#34;https://metacpan.org/pod/Device::USB::PX1674&#34;&gt;Device::USB::PX1674&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/author/STEVEB&#34;&gt;Steve Bertrand&lt;/a&gt; released more RaspberryPi goodies:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::BMP180&#34;&gt;RPi::BMP180&lt;/a&gt; - interface to the BMP180 barometric pressure sensor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::DAC::MCP4922&#34;&gt;RPi::DAC::MCP4922&lt;/a&gt; - interface to the MCP49x2 series digital to analog converters (DAC) over the SPI bus&lt;/li&gt;
&lt;li&gt;See his recent blog &lt;a href=&#34;http://blogs.perl.org/users/steve_bertrand/2017/03/raspberry-pi-becoming-more-prevalent.html&#34;&gt;post&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compare visually similar strings with &lt;a href=&#34;https://metacpan.org/pod/String::Similex&#34;&gt;String::Similex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ucam::Term&#34;&gt;Ucam::Term&lt;/a&gt; returns information about the start and end dates of terms at the University of Cambridge&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::Tolkien::Shire::Data&#34;&gt;Date::Tolkien::Shire::Data&lt;/a&gt; provides functionality for Shire calendars.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Phylo::Forest::DBTree&#34;&gt;Bio::Phylo::Forest::DBTree&lt;/a&gt; provides a Bio::Phylo-like API for large phylogenies&lt;/li&gt;
&lt;li&gt;Partition a number into addition sequences with &lt;a href=&#34;https://metacpan.org/pod/Math::Partition::Rand&#34;&gt;Math::Partition::Rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get Kruskall-Wallis statistics and test using &lt;a href=&#34;https://metacpan.org/pod/Statistics::ANOVA::KW&#34;&gt;Statistics::ANOVA::KW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::EditFile&#34;&gt;Dancer2::Plugin::EditFile&lt;/a&gt; - easily edit a text file from a Dancer2 app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Mailer&#34;&gt;Email::Mailer&lt;/a&gt; aims to be a &amp;ldquo;multi-purpose emailer for HTML, auto-text, attachments, and templates&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN July 2014</title>
      <link>http://localhost:1313/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</link>
      <pubDate>Fri, 01 Aug 2014 12:38:59 +0000</pubDate>
      
      <guid>http://localhost:1313/article/106/2014/8/1/What-s-new-on-CPAN-July-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AntTweakBar&#34;&gt;AntTweakBar&lt;/a&gt; provides Perl bindings for the GUI library&lt;/li&gt;
&lt;li&gt;Use PayPoint&amp;rsquo;s merchant engine with &lt;a href=&#34;https://metacpan.org/pod/Business::PayPoint::MCPE&#34;&gt;Business::PayPoint::MCPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::PCDuino&#34;&gt;Device::PCDuino&lt;/a&gt; is a hardware interface for the pcDuino, by Timm Murray author of UAV::Pilot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HBase::JSONRest&#34;&gt;HBase::JSONRest&lt;/a&gt; is a RESTful interface to Apache HBase&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::Utils&#34;&gt;Net::Amazon::Utils&lt;/a&gt; provides helper utils for AWS&lt;/li&gt;
&lt;li&gt;Access Desk.com&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/WWW::Desk&#34;&gt;WWW::Desk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test GnuPG email sign/encrypt with &lt;a href=&#34;https://metacpan.org/pod/App::Eduard&#34;&gt;App::Eduard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::plackbench&#34;&gt;App::plackbench&lt;/a&gt; is a benchmarking tool for Plack applications&lt;/li&gt;
&lt;li&gt;Ensure that you only run a command once with &lt;a href=&#34;https://metacpan.org/pod/App::single&#34;&gt;App::single&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Lite&#34;&gt;Bio::Lite&lt;/a&gt; is a lightweight implementation of useful bio Perl functions&lt;/li&gt;
&lt;li&gt;Convert email addresses into the DNS rname format and vice versa using &lt;a href=&#34;https://metacpan.org/pod/DNS::RName::Converter&#34;&gt;DNS::RName::Converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hash::Ordered&#34;&gt;Hash::Ordered&lt;/a&gt; provides a simple implementation of an ordered hash with robust performance. Author David Golden &lt;a href=&#34;https://www.youtube.com/watch?v=p4U6FWyRBoQ&amp;amp;feature=youtu.be&#34;&gt;presented&lt;/a&gt; the module and comparison benchmarks recently at NY.pm (&lt;a href=&#34;http://www.dagolden.com/wp-content/uploads/2009/04/Adventures-in-Optimization-NYpm-July-2014.pdf&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generate sets of English names with &lt;a href=&#34;https://metacpan.org/pod/Mock::Person::EN&#34;&gt;Mock::Person::EN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Markdown::Github&#34;&gt;Pod::Markdown::Github&lt;/a&gt; converts POD to Github-sepcific markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Benchmark::Report::GitHub&#34;&gt;Benchmark::Report::GitHub&lt;/a&gt; generates benchmark reports from Travis-CI and publishes them on GitHub wiki&lt;/li&gt;
&lt;li&gt;Augment your DBIx::Class schema objects with additional logic using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Wrapper&#34;&gt;DBIx::Class::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::Contributors&#34;&gt;Dist::Zilla::Plugin::Git::Contributors&lt;/a&gt; pulls all of the author names from your Git commit history and adds them to your module&amp;rsquo;s metadata&lt;/li&gt;
&lt;li&gt;Looking for a drop-in replacement for Getop::Long with tab completion? Check out &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::Complete&#34;&gt;Getopt::Long::Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JCONF is a JSON format optimized for configuration files. &lt;a href=&#34;https://metacpan.org/pod/JCONF::Writer&#34;&gt;JCONF::Writer&lt;/a&gt; produces JCONF files from Perl data structures&lt;/li&gt;
&lt;li&gt;Enable OAuth2 support in command line applications with &lt;a href=&#34;https://metacpan.org/pod/OAuth::Cmdline&#34;&gt;OAuth::Cmdline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pegex::Forth&#34;&gt;Pegex::Forth&lt;/a&gt; is a Forth parser and interpreter built on Pegex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Refine&#34;&gt;Refine&lt;/a&gt; is a clever module that let&amp;rsquo;s you add methods to objects (not classes) at runtime&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Type::Tiny::XS&#34;&gt;Type::Tiny::XS&lt;/a&gt; for an even faster Type::Tiny&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Map::Tube::London&#34;&gt;Map::Tube::London&lt;/a&gt; will tell you the shortest route between two stations on the London Underground&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Pangram&#34;&gt;Text::Pangram&lt;/a&gt; identifies strings which are pangrams&lt;/li&gt;
&lt;li&gt;Access your Zombies Run! stats using &lt;a href=&#34;https://metacpan.org/pod/WebService::ZombiesRun&#34;&gt;WebService::ZombiesRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mojolicious&#34;&gt;Mojolicious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::UnixSocket&#34;&gt;Mojo::UserAgent::UnixSocket&lt;/a&gt; enables Mojo::UserAgent to interact with sockets&lt;/li&gt;
&lt;li&gt;Use HTML::Template::Pro templates in your application with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::HTMLTemplateProRenderer&#34;&gt;Mojolicious::Plugin::HTMLTemplateProRenderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support RESTful operations with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::REST&#34;&gt;Mojolicious::Plugin::REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Log webpage user events with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Surveil&#34;&gt;Mojolicious::Plugin::Surveil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Subtests&#34;&gt;Test::Subtests&lt;/a&gt; is interesting: it wraps Test::More tests into subtests and can allow some of them to fail&lt;/li&gt;
&lt;li&gt;Write RSpec - like tests for Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Test::Spec&#34;&gt;Rex::Test::Spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Deep::DateTime::RFC3339&#34;&gt;Test::Deep::DateTime::RFC3339&lt;/a&gt; tests that RFC3339 timestamps are within a certain tolerance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Docker::MySQL&#34;&gt;Test::Docker::MySQL&lt;/a&gt; launches MySQL docker containers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reuse your Kelp routes with &lt;a href=&#34;https://metacpan.org/pod/KelpX::AppBuilder&#34;&gt;KelpX::AppBuilder&lt;/a&gt; (Kelp is a Plack based web micro-framework)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::App::CGIBin::Streaming&#34;&gt;Plack::App::CGIBin::Streaming&lt;/a&gt; enables CGI applcaitions to use the Palck streaming protocol&lt;/li&gt;
&lt;li&gt;Tie variables to DuckDuckGo search using &lt;a href=&#34;https://metacpan.org/pod/Tie::DuckDuckGo&#34;&gt;Tie::DuckDuckGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2014</title>
      <link>http://localhost:1313/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</link>
      <pubDate>Thu, 03 Jul 2014 14:00:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/100/2014/7/3/What-s-new-on-CPAN---June-2014/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a REST API for your database with &lt;a href=&#34;https://metacpan.org/pod/Cookieville&#34;&gt;Cookieville&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::SaleaeLogic&#34;&gt;Device::SaleaeLogic&lt;/a&gt; provides a Perl interface to Saleae Logic devices&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Etcd&#34;&gt;Etcd&lt;/a&gt; is a Perl API for etcd, a key value store&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::OpenCage&#34;&gt;Geo::Coder::OpenCage&lt;/a&gt; is a Perl API for OpenCage a geocoding service&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::OEIS&#34;&gt;Math::OEIS&lt;/a&gt; provides an interface to Online Encyclopaedia of Integer Sequences. Who knew there was such a thing!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::PMP&#34;&gt;Net::PMP&lt;/a&gt; is an interface for the Public Media Platform&lt;/li&gt;
&lt;li&gt;Manage GNU Screen windows easily with &lt;a href=&#34;https://metacpan.org/pod/Term::GnuScreen::WindowArrayLike&#34;&gt;Term::GnuScreen::WindowArrayLike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Spotify&#34;&gt;WWW::Spotify&lt;/a&gt; provide an interface to the Spotify API&lt;/li&gt;
&lt;li&gt;Interact with a RabbitMQ broker using &lt;a href=&#34;https://metacpan.org/pod/WWW::RabbitMQ::Broker&#34;&gt;WWW::RabbitMQ::Broker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::GoKGS&#34;&gt;WWW::GoKGS&lt;/a&gt; is a scraper for the KGS Go server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Amazon::Route53::Caching&#34;&gt;WebService::Amazon::Route53::Caching&lt;/a&gt; implements a caching layer for the Amazon Route 53 DNS service&lt;/li&gt;
&lt;li&gt;Send error reports to raygun.io from your Plack middleware with &lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::Raygun&#34;&gt;Plack::Middleware::Raygun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;apps&#34;&gt;Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run CPANTS Kwalitee tests on your distribution with &lt;a href=&#34;https://metacpan.org/pod/App::CPANTS::Lint&#34;&gt;App::CPANTS::Lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Goto::Amazon&#34;&gt;App::Goto::Amazon&lt;/a&gt; provides a shortcut command for connecting to Amazon EC2 instances&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::HPGL2Cadsoft&#34;&gt;App::HPGL2Cadsoft&lt;/a&gt; converts HPGL files to Cadsoft Eagle script (a circuit board design tool)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Pg::Pool::Multiserver&#34;&gt;AnyEvent::Pg::Pool::Multiserver&lt;/a&gt; let&amp;rsquo;s you make asynchronous DB calls to multiple Postgres servers, using AnyEvent::Pg&lt;/li&gt;
&lt;li&gt;Convert CSS into a Regexp::Grammar parse tree with &lt;a href=&#34;https://metacpan.org/pod/CSS::Selector::Grammar&#34;&gt;CSS::Selector::Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run massive numbers of insert and update statements on a MySQL database using &lt;a href=&#34;https://metacpan.org/pod/DBIx::TxnPool&#34;&gt;DBIx::TxnPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Deeme&#34;&gt;Deeme&lt;/a&gt; is a &amp;ldquo;Database-agnostic driven Event Emitter&amp;rdquo; with support for multiple backends&lt;/li&gt;
&lt;li&gt;Auto-release your distributions to Stratopan with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::UploadToStratopan&#34;&gt;Dist::Zilla::Plugin::UploadToStratopan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lookup USA state names and capitals with &lt;a href=&#34;https://metacpan.org/pod/Geo::States&#34;&gt;Geo::States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Explain::Parser&#34;&gt;MySQL::Explain::Parser&lt;/a&gt; converts MySQL&amp;rsquo;s explain output into Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-system-administration&#34;&gt;Development &amp;amp; System Administration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBG&#34;&gt;DBG&lt;/a&gt; provides a collection of useful debugging functions for Perl code&lt;/li&gt;
&lt;li&gt;Another useful debugging too: get a stack trace for all system calls with &lt;a href=&#34;https://metacpan.org/pod/Devel::Trace::Syscall&#34;&gt;Devel::Trace::Syscall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quickly generate Perl data structures using &lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure&#34;&gt;Data::Random::Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::AuthorizedMethodRoles&#34;&gt;MooseX::AuthorizedMethodRoles&lt;/a&gt; provides role checking through whitelist methods&lt;/li&gt;
&lt;li&gt;Get Pango constants without the heft of Glib and Gtk2 libraries with &lt;a href=&#34;https://metacpan.org/pod/PangoConst&#34;&gt;PangoConst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sort::Key::Domain&#34;&gt;Sort::Key::Domain&lt;/a&gt; sorts domain names&lt;/li&gt;
&lt;li&gt;Get Jenkins compatible TAP test output with &lt;a href=&#34;https://metacpan.org/pod/TAP::Formatter::Jenkins&#34;&gt;TAP::Formatter::Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::RequiresInternet&#34;&gt;Test::RequiresInternet&lt;/a&gt; will check for Internet connectivity before running tests - very useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for the gramatically correct version of &amp;ldquo;Buffalo buffalo &amp;hellip;&amp;rdquo;? Look no further because &lt;a href=&#34;https://metacpan.org/pod/Acme::Buffalo::Buffalo&#34;&gt;Acme::Buffalo::Buffalo&lt;/a&gt; has got you covered&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::MilkyHolmes&#34;&gt;Acme::MilkyHolmes&lt;/a&gt; provides character information on the famous Japanese animated cartoon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Games::Go::Referee&#34;&gt;Games::Go::Referee&lt;/a&gt; analyses sgf files for Go rule violations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;Conveniently run A/B testing on CGI applications with &lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::AB&#34;&gt;CGI::Application::Plugin::AB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/CGI::Application::Plugin::Throttle&#34;&gt;CGI::Application::Plugin::Throttle&lt;/a&gt; implements a throttling function for users (identifies by IP address)&lt;/p&gt;

&lt;p&gt;Avoid connecting to blacklisted URLs with &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny::Paranoid&#34;&gt;HTTP::Tiny::Paranoid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New Dancer modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::CORS&#34;&gt;Dancer::Plugin::CORS&lt;/a&gt; configures cross-origin sharing rules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Negotiate&#34;&gt;Dancer::Plugin::Negotiate&lt;/a&gt; wraps HTTP::Negotiate&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Swig&#34;&gt;Dancer::Plugin::Swig&lt;/a&gt; implements a Swig wrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New Mojolicious modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Logf&#34;&gt;Mojolicious::Plugin::Logf&lt;/a&gt; flattens and logs complex data structures using sprintf&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::MoreUtilHelpers&#34;&gt;Mojolicious::Plugin::MoreUtilHelpers&lt;/a&gt; implements some utility methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::NetsPayment&#34;&gt;Mojolicious::Plugin::NetsPayment&lt;/a&gt; is an experimental module for making payments using Nets&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PayPal&#34;&gt;Mojolicious::Plugin::PayPal&lt;/a&gt; is an experimental module for making payments using PayPal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::GlobalEvents&#34;&gt;MojoX::GlobalEvents&lt;/a&gt; is an event handler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Amazon S3 from Perl</title>
      <link>http://localhost:1313/pub/2008/04/08/using-amazon-s3-from-perl.html/</link>
      <pubDate>Tue, 08 Apr 2008 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2008/04/08/using-amazon-s3-from-perl.html/</guid>
      <description>

&lt;p&gt;Data management is a critical and challenging aspect for any online resource. With exponentially growing data sizes and popularity of rich media, even small online resources must effectively manage and distribute a significant amount of data. Moreover, the peace of mind associated with an additional offsite data storage resource is invaluable to everyone involved.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;http://www.sundaymorningrides.com/&#34;&gt;SundayMorningRides.com&lt;/a&gt;, we manage a growing inventory of GPS and general GIS (Geography Information Systems) data and web content (text, images, videos, etc.) for the end users. In addition, we must also effectively manage daily snapshots, backups, as well as multiple development versions of our web site and supporting software. For any small organization, this can add up to significant costs &amp;ndash; not only as an initial monetary investment but also in terms of ongoing labor costs for maintenance and administration.&lt;/p&gt;

&lt;p&gt;Amazon Simple Storage Service (S3) was released specifically to address the problem of data management for online resources &amp;ndash; with the aim to provide &amp;ldquo;reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of web sites.&amp;rdquo; Amazon S3 provides a web service interface that allows developers to store and retrieve any amount of data. S3 is attractive to companies like SundayMorningRides.com as it frees us from upfront costs and the ongoing costs of purchasing, administration, maintenance, and scaling our own storage servers.&lt;/p&gt;

&lt;p&gt;This article covers the Perl, REST, and the Amazon S3 REST module, walking through the development of a collection of Perl-based tools for UNIX command-line based interaction to Amazon S3. I&amp;rsquo;ll also show how to set access permissions so that you can serve images or other data directly to your site from Amazon S3.&lt;/p&gt;

&lt;h4 id=&#34;a-bit-on-web-services&#34;&gt;A Bit on Web Services&lt;/h4&gt;

&lt;p&gt;Web services have become the de-facto method of exposing information and, well, services via the Web. Intrinsically, web services provide a means of interaction between two networked resources. Amazon S3 is accessible via both Simple Object Access Protocol (SOAP) or representational state transfer (REST).&lt;/p&gt;

&lt;p&gt;The SOAP interface organizes features into custom-built operations, similar to remote objects when using Java Remote Method Invocation (RMI) or Common Object Resource Broker Architecture (CORBA). Unlike RMI or CORBA, SOAP uses XML embedded in the body of HTTP requests as the application protocol.&lt;/p&gt;

&lt;p&gt;Like SOAP, REST also uses HTTP for transport. Unlike SOAP, REST operations are the standard HTTP operations &amp;ndash; GET, POST, PUT, and DELETE. I think of REST operations in terms of the CRUD semantics associated with relational databases: POST is Create, GET is Retrieve, PUT is Update, and DELETE is Delete.&lt;/p&gt;

&lt;h4 id=&#34;storage-for-the-internet&#34;&gt;&amp;ldquo;Storage for the Internet&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;Amazon S3 represents the data space in three core concepts: &lt;em&gt;objects&lt;/em&gt;, &lt;em&gt;buckets&lt;/em&gt;, and &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objects are the base level entities within Amazon S3. They consist of both object data and metadata. This metadata is a set of name-attribute pairs defined in the HTTP header.&lt;/li&gt;
&lt;li&gt;Buckets are collections of objects. There is no limit to the number of objects in a bucket, but each developer is limited to 100 buckets.&lt;/li&gt;
&lt;li&gt;Keys are unique identifiers for objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without wading through the details, I tend think of buckets as folders, objects as files, and keys as filenames. The purpose of this abstraction is to create a unique HTTP namespace for every object.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll assume that you have already signed up for &lt;a href=&#34;http://aws.amazon.com/s3&#34;&gt;Amazon S3&lt;/a&gt; and received your Access Key ID and Secret Access Key. If not, please do so.&lt;/p&gt;

&lt;p&gt;Please note that the &lt;code&gt;S3::*&lt;/code&gt; modules aren&amp;rsquo;t the only Perl modules available for connecting to Amazon S3. In particular, &lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::S3&#34;&gt;Net::Amazon::S3&lt;/a&gt; hides a lot of the details of the S3 service for you. For now, I&amp;rsquo;m going to use a simpler module to explain how the service works internally.&lt;/p&gt;

&lt;h4 id=&#34;connecting-creating-and-listing-buckets&#34;&gt;Connecting, Creating, and Listing Buckets&lt;/h4&gt;

&lt;p&gt;Connecting to Amazon S3 is as simple as supplying your Access Key ID and your Secret Access Key to create a connection, called here &lt;code&gt;$conn&lt;/code&gt;. Here&amp;rsquo;s how to create and list the contents of a bucket as well as list all buckets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use S3::AWSAuthConnection;
use S3::QueryStringAuthGenerator;

use Data::Dumper;

my $AWS_ACCESS_KEY_ID     = &#39;YOUR ACCESS KEY&#39;;
my $AWS_SECRET_ACCESS_KEY = &#39;YOUR SECRET KEY&#39;;

my $conn = S3::AWSAuthConnection-&amp;gt;new($AWS_ACCESS_KEY_ID,
                                      $AWS_SECRET_ACCESS_KEY);

my $BUCKET = &amp;quot;foo&amp;quot;;

print &amp;quot;creating bucket $BUCKET \n&amp;quot;;
print $conn-&amp;gt;create_bucket($BUCKET)-&amp;gt;message, &amp;quot;\n&amp;quot;;

print &amp;quot;listing bucket $BUCKET \n&amp;quot;;
print Dumper @{$conn-&amp;gt;list_bucket($BUCKET)-&amp;gt;entries}, &amp;quot;\n&amp;quot;;

print &amp;quot;listing all my buckets \n&amp;quot;;
print Dumper @{$conn-&amp;gt;list_all_my_buckets()-&amp;gt;entries}, &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because every S3 action takes place over HTTP, it is good practice to check for a 200 response.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $response = $conn-&amp;gt;create_bucket($BUCKET);
if ($response-&amp;gt;http_response-&amp;gt;code == 200) {
    # Good
} else {
    # Not Good
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see from the output, the results come back in a hash. I&amp;rsquo;ve used &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt; as a convenient way to view the contents. If you are running this for the first time, you will obviously not see anything listed in the bucket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listing bucket foo
$VAR1 = {
          &#39;Owner&#39; =&amp;gt; {
                     &#39;ID&#39; =&amp;gt; &#39;xxxxx&#39;,
                     &#39;DisplayName&#39; =&amp;gt; &#39;xxxxx&#39;
                   },
          &#39;Size&#39; =&amp;gt; &#39;66810&#39;,
          &#39;ETag&#39; =&amp;gt; &#39;&amp;quot;xxxxx&amp;quot;&#39;,
          &#39;StorageClass&#39; =&amp;gt; &#39;STANDARD&#39;,
          &#39;Key&#39; =&amp;gt; &#39;key&#39;,
          &#39;LastModified&#39; =&amp;gt; &#39;2007-12-18T22:08:09.000Z&#39;
        };
$VAR4 = &#39;
&#39;;
listing all my buckets
$VAR1 = {
          &#39;CreationDate&#39; =&amp;gt; &#39;2007-11-28T17:31:48.000Z&#39;,
          &#39;Name&#39; =&amp;gt; &#39;foo&#39;
        };
&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;writing-an-object&#34;&gt;Writing an Object&lt;/h4&gt;

&lt;p&gt;Writing an object is simply a matter of using the HTTP PUT method. Be aware that there is nothing to prevent you from overwriting an existing object; Amazon S3 will automatically update the object with the more recent write request. Also, it&amp;rsquo;s currently not possible to append to or otherwise modify an object in place without replacing it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %headers = (
    &#39;Content-Type&#39; =&amp;gt; &#39;text/plain&#39;
);
$response = $conn-&amp;gt;put( $BUCKET, $KEY, S3Object-&amp;gt;new(&amp;quot;this is a test&amp;quot;),
                        \%headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, you can read a file from STDIN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %headers;

FILE: while(1) {
    my $n = sysread(STDIN, $data, 1024 * 1024, length($data));
    if ($n &amp;lt; 0) {
        print STDERR &amp;quot;Error reading input: $!\n&amp;quot;;
        exit 1;
    }
    last FILE if $n == 0;
}
$response = $conn-&amp;gt;put(&amp;quot;$BUCKET&amp;quot;, &amp;quot;$KEY&amp;quot;, $data, \%headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add custom metadata, simply add to the &lt;code&gt;S3Object&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;S3Object-&amp;gt;new(&amp;quot;this is a test&amp;quot;, { name =&amp;gt; &amp;quot;attribute&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, every object has private access control when written. This allows only the user that stored the object to read it back. You can change these settings. Also, note that each object can hold a maximum of 5 GB of data.&lt;/p&gt;

&lt;p&gt;You are probably wondering if it is also possible to upload via a standard HTTP POST. The folks at Amazon are working on it as we speak &amp;ndash; see &lt;a href=&#34;http://developer.amazonwebservices.com/connect/thread.jspa?threadID=18616&amp;amp;tstart=0&#34;&gt;HTTP POST beta discussion&lt;/a&gt; for more information. Until that&amp;rsquo;s finished, you&amp;rsquo;ll have to perform web-based uploads via an intermediate server.&lt;/p&gt;

&lt;h4 id=&#34;reading-an-object&#34;&gt;Reading an Object&lt;/h4&gt;

&lt;p&gt;Like writing objects, there are several ways to read data from Amazon S3. One way is to generate a temporary URL to use with your favorite client (for example, wget or Curl) or even a browser to view or retrieve the object. All you have to do is generate the URL used to make the REST call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $generator = S3::QueryStringAuthGenerator-&amp;gt;new($AWS_ACCESS_KEY_ID,
    $AWS_SECRET_ACCESS_KEY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and then perform a simple HTTP GET request. This is a great trick if all you want to do is temporarily view or verify the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$generator-&amp;gt;expires_in(60);
my $url = $generator-&amp;gt;get($BUCKET, &amp;quot;$KEY&amp;quot;);
print &amp;quot;$url \n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also programmatically read the data directly from the initial connection. This is handy if you have to perform additional processing of the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $response = $conn-&amp;gt;get(&amp;quot;$BUCKET&amp;quot;, &amp;quot;$KEY&amp;quot;);
my $data     = $response-&amp;gt;object-&amp;gt;data;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another cool feature is &lt;a href=&#34;http://docs.amazonwebservices.com/AmazonS3/2006-03-01/&#34;&gt;the ability to use BitTorrent to download files from Amazon S3&lt;/a&gt; . You can access any object that has anonymous access privileges via BitTorrent.&lt;/p&gt;

&lt;h4 id=&#34;delete-an-object&#34;&gt;Delete an Object&lt;/h4&gt;

&lt;p&gt;By now you probably have the hang of the process. If you&amp;rsquo;re going to create objects, you&amp;rsquo;re probably going to have to delete them at some point.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$conn-&amp;gt;delete(&amp;quot;$BUCKET&amp;quot;, &amp;quot;$KEY&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-access-permissions-and-publish-to-a-website&#34;&gt;Set Access Permissions and Publish to a Website&lt;/h4&gt;

&lt;p&gt;As you may have noticed from the previous examples, all Amazon S3 objects access goes through HTTP. This makes Amazon S3 particularly useful as a online repository. In particular, it&amp;rsquo;s useful to manage and serve website media. You could almost imagine Amazon S3 serving as mini Content Delivery Network for media on your website. This example will demonstrate how to build a very simple online page where the images are served dynamically via Amazon S3.&lt;/p&gt;

&lt;p&gt;The first thing to do us to upload some images and set the ACL permissions to public. I&amp;rsquo;ve modified the previous example with one difference. To make objects publicly readable, include the header &lt;code&gt;x-amz-acl: public-read&lt;/code&gt; with the HTTP PUT request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %headers = (
    &#39;x-amz-acl&#39; =&amp;gt; &#39;public-read&#39;,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additional ACL permissions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;private (default setting if left blank)&lt;/li&gt;
&lt;li&gt;public-read&lt;/li&gt;
&lt;li&gt;public-read-write&lt;/li&gt;
&lt;li&gt;authenticated-read&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you know enough to put together a small script that will automatically display all images in the bucket to a web page (you&amp;rsquo;ll probably want to spruce up the formatting).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
my $BUCKET   = &amp;quot;foobar&amp;quot;;
my $response = $conn-&amp;gt;list_bucket(&amp;quot;$BUCKET&amp;quot;);

for my $entry (@{$response-&amp;gt;entries}) {
    my $public_url   = $generator-&amp;gt;get($BUCKET, $entry-&amp;gt;{Key});
    my ($url, undef) = split (/\?/, $public_url);
    $images         .= &amp;quot;&amp;lt;img src=\&amp;quot;$url\&amp;quot;&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;;
}
($webpage =  &amp;lt;&amp;lt;&amp;quot;WEBPAGE&amp;quot;);
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;$images&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
WEBPAGE
print $q-&amp;gt;header();
print $webpage;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add images to this web page, upload more files into the bucket and they will automatically appear the next time you load the page.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also simple to link to media one at a time for a webpage. If you examine the HTML generated by this example, you&amp;rsquo;ll see that all Amazon S3 URLs have the basic form &lt;code&gt;http://bucketname.s3.amazon.com/objectname&lt;/code&gt;. Also note that the namespace for buckets is shared with all Amazon S3 users. You may have already picked up on this.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Amazon S3 is a great tool that can help with the data management needs of all sized organizations by offering cheap and unlimited storage. For personal use, it&amp;rsquo;s a great tool for backups (also good for organizations) and general file storage. It&amp;rsquo;s also a great tool for collaboration. Instead of emailing files around, just upload a file and set the proper access controls &amp;ndash; no more dealing with 10 MB attachment restrictions!&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;http://www.sundaymorningrides.com/&#34;&gt;SundayMorningRides.com&lt;/a&gt; we use S3 as part of our web serving infrastructure to reduce the load on our hardware when serving media content.&lt;/p&gt;

&lt;p&gt;When combined with other Amazon Web Services such as SimpleDB (for structured data queries) and Elastic Compute Cloud (for data processing) it&amp;rsquo;s easy to envision a low cost solution for web-scale computing and data management.&lt;/p&gt;

&lt;h4 id=&#34;more-resources-and-references&#34;&gt;More Resources and References&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aws.amazon.com/s3&#34;&gt;Amazon S3 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.amazonwebservices.com/&#34;&gt;Amazon Webservices Developer Connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.amazonwebservices.com/connect/entry.jspa?externalID=133&amp;amp;categoryID=47&#34;&gt;Amazon S3 Library for REST in Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aws.typepad.com/&#34;&gt;Amazon Web Services Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

