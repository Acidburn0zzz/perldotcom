<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json Schema on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/json-schema/</link>
    <description>Recent content in Json Schema on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 13:40:05 +0000</lastBuildDate>
    <atom:link href="/tags/json-schema/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - May 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</link>
      <pubDate>Sat, 20 Jun 2020 13:40:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perl Layout Executor with &lt;a href=&#34;https://metacpan.org/pod/App::plx&#34;&gt;App::plx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FIDO::Raw&#34;&gt;FIDO::Raw&lt;/a&gt; provides bindings to the libfido2 library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::LibProj::cs2cs&#34;&gt;Geo::LibProj::cs2cs&lt;/a&gt; is a wrapper for the cs2cs command line client, part of the PROJ coordinate transformation library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Nauty&#34;&gt;Graph::Nauty&lt;/a&gt; provides bindings to Nauty (No AUTomorphisms, Yes?)&lt;/li&gt;
&lt;li&gt;Post OCR requests to ocr.space&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/OCR::OcrSpace&#34;&gt;OCR::OcrSpace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create reciples to declare and resolve dependencies between things with &lt;a href=&#34;https://metacpan.org/pod/Beam::Make&#34;&gt;Beam::Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography Library with &lt;a href=&#34;https://metacpan.org/pod/Crypto::ECC&#34;&gt;Crypto::ECC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::Redis&#34;&gt;HealthCheck::Diagnostic::Redis&lt;/a&gt; provides a healthcheck for Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SMTP&#34;&gt;HealthCheck::Diagnostic::SMTP&lt;/a&gt; performs a connectivity healthcheck to an SMTP mail server&lt;/li&gt;
&lt;li&gt;Show diffs of changes to files managed by Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Hook::File::Diff&#34;&gt;Rex::Hook::File::Diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mask secrets in log files with &lt;a href=&#34;https://metacpan.org/pod/String::Secret&#34;&gt;String::Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Groups&#34;&gt;File::Groups&lt;/a&gt; returns file extensions and media types for different files&lt;/li&gt;
&lt;li&gt;Get Digi-ID implementation with &lt;a href=&#34;https://metacpan.org/pod/DigiByte::DigiID&#34;&gt;DigiByte::DigiID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get elevation data for a given lat/lon using &lt;a href=&#34;https://metacpan.org/pod/Geo::Elevation::HGT&#34;&gt;Geo::Elevation::HGT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Karabiner&#34;&gt;JSON::Karabiner&lt;/a&gt; can easy JSON code generaation for Karabiner-Elements, the macOS keyboard customizer&lt;/li&gt;
&lt;li&gt;Validate JSON against a schema against the latest draft with &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Draft201909&#34;&gt;JSON::Schema::Draft201909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Documentation and tools for using Platypus with Go: &lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus::Lang::Go&#34;&gt;FFI::Platypus::Lang::Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::IO::Impl::Glib&#34;&gt;Future::IO::Impl::Glib&lt;/a&gt; implement Future::IO using Glib&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mu::Tiny&#34;&gt;Mu::Tiny&lt;/a&gt; is an even tinier object system&lt;/li&gt;
&lt;li&gt;Get a Try-Catch block (uses PPI) via &lt;a href=&#34;https://metacpan.org/pod/Nice::Try&#34;&gt;Nice::Try&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Number::Textify&#34;&gt;Number::Textify&lt;/a&gt; turns numbers into human-readable strings (customizable)&lt;/li&gt;
&lt;li&gt;Write composable, reusable tests with roles and Moo using &lt;a href=&#34;https://metacpan.org/pod/Test2::Roo&#34;&gt;Test2::Roo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::BNO055&#34;&gt;Device::Chip::BNO055&lt;/a&gt; provides a chip driver for BNO055&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PINE64::GPIO&#34;&gt;PINE64::GPIO&lt;/a&gt; provides an interface to PineA64 and PineA64+ GPIO pins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MojoTemplate&#34;&gt;Catalyst::View::MojoTemplate&lt;/a&gt;: use Mojolicious templates in Catalyst views&lt;/li&gt;
&lt;li&gt;Store Dancer2 session data in serealized files using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::Sereal&#34;&gt;Dancer2::Session::Sereal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find elements in a HTML::Element DOM using CSS selectors with &lt;a href=&#34;https://metacpan.org/pod/HTML::Selector::Element&#34;&gt;HTML::Selector::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Place a limit on &amp;ldquo;concurrent&amp;rdquo; promises with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Limiter&#34;&gt;Mojo::Promise::Limiter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add role-based access with context to a Mojo app via  &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ContextAuth&#34;&gt;Mojolicious::Plugin::ContextAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/POE::Component::SmokeBox::Recent::HTTP&#34;&gt;POE::Component::SmokeBox::Recent::HTTP&lt;/a&gt; is an extremely minimal HTTP client&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</link>
      <pubDate>Wed, 20 May 2020 01:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the open, decentralizedc Matrix communication network with &lt;a href=&#34;https://metacpan.org/pod/Net::Matrix::Webhook&#34;&gt;Net::Matrix::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Call Docker CLI commands from Perl using &lt;a href=&#34;https://metacpan.org/pod/Docker::CLI::Wrapper&#34;&gt;Docker::CLI::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/InfluxDB::Client::Simple&#34;&gt;InfluxDB::Client::Simple&lt;/a&gt; is a lightweight InfluxDB client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Termux::API&#34;&gt;Termux::API&lt;/a&gt; provides a Perly interface to the popular Android terminal emulator&lt;/li&gt;
&lt;li&gt;Get financial data via Yahoo Finance with &lt;a href=&#34;https://metacpan.org/pod/Yahoo::Finance&#34;&gt;Yahoo::Finance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant Street Group added more healthcheck modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHCheck&#34;&gt;HealthCheck::Diagnostic::DBHCheck&lt;/a&gt; checks a database handle has read/write permissions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SFTP&#34;&gt;HealthCheck::Diagnostic::SFTP&lt;/a&gt; checks secure FTP access&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::WebRequest&#34;&gt;HealthCheck::Diagnostic::WebRequest&lt;/a&gt; checks HTTP/HTTPS connectivity&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Moo-ify DBIx::Class rows using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Moo::ResultClass&#34;&gt;DBIx::Class::Moo::ResultClass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure::UTF8&#34;&gt;Data::Random::Structure::UTF8&lt;/a&gt; can fill a data structure with random UTF-8 data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Generate&#34;&gt;JSON::Schema::Generate&lt;/a&gt; generates JSON schemas from data structures&lt;/li&gt;
&lt;li&gt;Use named (instead of positional) placeholders with SQL queries via &lt;a href=&#34;https://metacpan.org/pod/SQL::Bind&#34;&gt;SQL::Bind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Docker::Names::Random&#34;&gt;Docker::Names::Random&lt;/a&gt; generates random strings like Docker does for container names (e.g. &amp;ldquo;lazy_fermat&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;A class based approach for scripting options: &lt;a href=&#34;https://metacpan.org/pod/Getopt::Class&#34;&gt;Getopt::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get simple, non-blocking IPC with &lt;a href=&#34;https://metacpan.org/pod/IPC::Simple&#34;&gt;IPC::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::amine&#34;&gt;MooseX::amine&lt;/a&gt; ++ for module naming, it let&amp;rsquo;s you examine the methods and properties of Moose objects&lt;/li&gt;
&lt;li&gt;Return from multiple blocks in one go with &lt;a href=&#34;https://metacpan.org/pod/Return::Deep&#34;&gt;Return::Deep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Ability&#34;&gt;Test::Ability&lt;/a&gt; provides property-based testing routines&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/fs::Promises&#34;&gt;fs::Promises&lt;/a&gt; provides a promises interface to non-blocking file system operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage passwords in Dancer2 with Argon2 using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Argon2&#34;&gt;Dancer2::Plugin::Argon2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the Minion job queue in your Dancer2 apps with &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Minion&#34;&gt;Dancer2::Plugin::Minion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Override any method in your Kelp application with &lt;a href=&#34;https://metacpan.org/pod/KelpX::Hooks&#34;&gt;KelpX::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Log::Role::Color&#34;&gt;Mojo::Log::Role::Color&lt;/a&gt; adds color to your interactive mojo logs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::Role::Signature&#34;&gt;Mojo::UserAgent::Role::Signature&lt;/a&gt; automatically signs request transactions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Multipart::Encoder&#34;&gt;Multipart::Encoder&lt;/a&gt; is an encoder for mime-type multipart/form-data.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - November 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---november-2017/</link>
      <pubDate>Fri, 22 Dec 2017 16:57:02 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---november-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compute Adler32 digests at the command line with &lt;a href=&#34;https://metacpan.org/pod/App::adler32&#34;&gt;App::adler32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get various string escaping/unescaping utilities using &lt;a href=&#34;https://metacpan.org/pod/App::EscapeUtils&#34;&gt;App::EscapeUtils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A simple tool for maintaining a shared group secret with &lt;a href=&#34;https://metacpan.org/pod/App::GroupSecret&#34;&gt;App::GroupSecret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YouTube has changed their API but you can manage your Watch Later videos with &lt;a href=&#34;https://metacpan.org/pod/App::WatchLater&#34;&gt;App::WatchLater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::weavedoc&#34;&gt;App::weavedoc&lt;/a&gt; provides a &lt;code&gt;perldoc&lt;/code&gt; for Pod weaver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Async::Beanstalk&#34;&gt;Net::Async::Beanstalk&lt;/a&gt; is a non-blocking beanstalk client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::DeathByCaptcha&#34;&gt;WebService::DeathByCaptcha&lt;/a&gt; provides a Perly interface for the DeathByCaptcha API&lt;/li&gt;
&lt;li&gt;Get a simple mail.ru client with &lt;a href=&#34;https://metacpan.org/pod/Mailru::Cloud&#34;&gt;Mailru::Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Globstar&#34;&gt;File::Globstar&lt;/a&gt; provides globstar (**) utils&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IPC::Pleather&#34;&gt;IPC::Pleather&lt;/a&gt; - &amp;ldquo;C has Cilk, Perl has Pleather&amp;rdquo;, love it!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Martian&#34;&gt;Martian&lt;/a&gt; extends Starman with max-memory usage cap&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::ConfigCascade&#34;&gt;MooseX::ConfigCascade&lt;/a&gt; is another cascading-style config&lt;/li&gt;
&lt;li&gt;Like Capture::Tiny but with more options, &lt;a href=&#34;https://metacpan.org/pod/POSIX::Run::Capture&#34;&gt;POSIX::Run::Capture&lt;/a&gt; will run a command and capture its output&lt;/li&gt;
&lt;li&gt;Identify Perl releases and download the most recent via FTP using &lt;a href=&#34;https://metacpan.org/pod/Perl::Download::FTP&#34;&gt;Perl::Download::FTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse files with continuation lines with &lt;a href=&#34;https://metacpan.org/pod/Text::Continuation::Parser&#34;&gt;Text::Continuation::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pack your Perl applications for Windows with &lt;a href=&#34;https://metacpan.org/pod/Win32::Packer&#34;&gt;Win32::Packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::Shortkeys::Kbh&#34;&gt;Win32::Shortkeys::Kbh&lt;/a&gt; is a module for hooking the keyboard on Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Pokemon::Go&#34;&gt;Data::Pokemon::Go&lt;/a&gt; aims to provide data for every Pokemon in Pokemon Go, the author is calling for contributors&lt;/li&gt;
&lt;li&gt;Represent a financial asset with &lt;a href=&#34;https://metacpan.org/pod/Finance::Underlying&#34;&gt;Finance::Underlying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::ReadHandle::Chain&#34;&gt;IO::ReadHandle::Chain&lt;/a&gt; can conveniently chain IO of multiple sources through a single filehandle&lt;/li&gt;
&lt;li&gt;Find the size of JPEG images with &lt;a href=&#34;https://metacpan.org/pod/Image::JPEG::Size&#34;&gt;Image::JPEG::Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Translate the latest JSON-Schema (v06) into Perl code using &lt;a href=&#34;https://metacpan.org/pod/JSV::Compiler&#34;&gt;JSV::Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manipulate LRC karaoke timed lyrics files using &lt;a href=&#34;https://metacpan.org/pod/Music::Lyrics::LRC&#34;&gt;Music::Lyrics::LRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read &lt;code&gt;.slob&lt;/code&gt; dictionaries (for Aard 2) using &lt;a href=&#34;https://metacpan.org/pod/Slob&#34;&gt;Slob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate XML from simple Perl data structures with &lt;a href=&#34;https://metacpan.org/pod/XML::FromPerl&#34;&gt;XML::FromPerl&lt;/a&gt; - sounds a lot like XML::Simple, but uses libxml2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Asynchronously run code concurrently in a pool of perl processes using &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::ProcessPool&#34;&gt;AnyEvent::ProcessPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a useful counter that signals when it reaches 0 with &lt;a href=&#34;https://metacpan.org/pod/Coro::Countdown&#34;&gt;Coro::Countdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Doit&#34;&gt;Doit&lt;/a&gt; is a framework for Perl scripting&lt;/li&gt;
&lt;li&gt;Moose has it&amp;rsquo;s clones, and now Mojo::Base has &lt;a href=&#34;https://metacpan.org/pod/Jojo::Base&#34;&gt;Jojo::Base&lt;/a&gt;, which implements a lexical &lt;code&gt;has&lt;/code&gt;. Naturally there is &lt;a href=&#34;https://metacpan.org/pod/Jojo::Role&#34;&gt;Jojo::Role&lt;/a&gt; too&lt;/li&gt;
&lt;li&gt;Create Moo classes with IO::Async event handlers using &lt;a href=&#34;https://metacpan.org/pod/MooX::EventHandler&#34;&gt;MooX::EventHandler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sort::Naturally::ICU&#34;&gt;Sort::Naturally::ICU&lt;/a&gt; implements a fast, natural sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate AWS S3 signed URLs using the aptly-named &lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::SignedURLGenerator&#34;&gt;Amazon::S3::SignedURLGenerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Authen::Krb5&#34;&gt;Authen::Krb5&lt;/a&gt; provides XS bindings for Kerberos 5, the secure network protocol&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neovim::RPC::Plugin::Taskwarrior&#34;&gt;Neovim::RPC::Plugin::Taskwarrior&lt;/a&gt; provides a Neovim UI for taskwarrior&lt;/li&gt;
&lt;li&gt;Get &lt;code&gt;printf&lt;/code&gt; style functions that handle multibyte characters using &lt;a href=&#34;https://metacpan.org/pod/Text::VisualPrintf&#34;&gt;Text::VisualPrintf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use the Boutros Lab valection C library from Perl with &lt;a href=&#34;https://metacpan.org/pod/Bio::Sampling::Valection&#34;&gt;Bio::Sampling::Valection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Track events and calculate a rolling average of time &lt;a href=&#34;https://metacpan.org/pod/Time::Spent&#34;&gt;Time::Spent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test if a cpanfile lists every used module with &lt;a href=&#34;https://metacpan.org/pod/Test::CPANfile&#34;&gt;Test::CPANfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Class::WithStrictPlan&#34;&gt;Test::Class::WithStrictPlan&lt;/a&gt; makes sure Test::Class executes the declared number of tests&lt;/li&gt;
&lt;li&gt;Declare subtests using subroutine attributes with &lt;a href=&#34;https://metacpan.org/pod/Test::Subtest::Attribute&#34;&gt;Test::Subtest::Attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test that your XS files are problem-free with XS::Check with &lt;a href=&#34;https://metacpan.org/pod/Test::XS::Check&#34;&gt;Test::XS::Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::HTML::Recursive::DeprecatedTags&#34;&gt;Test::HTML::Recursive::DeprecatedTags&lt;/a&gt; can check HTML files for deprecated tags&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Generate pretty HTML from Perl code in a Dancer2 app using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::SyntaxHighlight::Perl&#34;&gt;Dancer2::Plugin::SyntaxHighlight::Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ion&#34;&gt;Ion&lt;/a&gt; aims to be a &amp;ldquo;clear and concise API for writing TCP servers and clients&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Collection::Role::UtilsBy&#34;&gt;Mojo::Collection::Role::UtilsBy&lt;/a&gt; provides List::UtilsBy methods for Mojo::Collection objects&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mock APIs for free using JSON Schemas</title>
      <link>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</link>
      <pubDate>Wed, 20 Sep 2017 06:57:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is a module which takes a &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON schema&lt;/a&gt;, and generates a data structure compliant with the schema. Here&amp;rsquo;s a quick script to generate a data structure based on a schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gen-json - create json from a schema filepath&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { local($/);&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; }; &lt;span style=&#34;color:#75715e&#34;&gt;# slurp the filepath in @ARGV&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema_str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $schema);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($data);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, I need to pass the filepath to a JSON schema, in this case &lt;code&gt;user.json&lt;/code&gt; describes a web app user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gen-json user.json
$VAR1 = {
      &#39;email_address&#39; =&amp;gt; &#39;HfeiJzddxVTg@AspFqfgUKivV.com&#39;,
      &#39;birthdate&#39; =&amp;gt; &#39;2014-01-14T00:59:43.000Z&#39;,
      &#39;active&#39; =&amp;gt; bless( do{\(my $o = 0)}, &#39;JSON::PP::Boolean&#39; ),
      &#39;cell_phone_number&#39; =&amp;gt; &#39;043 185 8956&#39;,
      &#39;roles&#39; =&amp;gt; [
                   &#39;manager&#39;,
                   &#39;trainer&#39;,
                   &#39;admin&#39;
                 ],
      &#39;display_name&#39; =&amp;gt; &#39;Pswgfkjzdc&#39;,
      &#39;password&#39; =&amp;gt; &#39;QI0RQDR9A7W2EtuNHaQKvBFQp67oO0Ld&#39;,
      &#39;login&#39; =&amp;gt; &#39;7oRSCeREi9sWm&#39;,
      &#39;full_name&#39; =&amp;gt; &#39;Oiqmqdr Frfxrzkzfjn&#39;,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script creates a new &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; object called &lt;code&gt;$generator&lt;/code&gt;, slurps the JSON schema into &lt;code&gt;$schema&lt;/code&gt;, and generates the data structure assigning it to &lt;code&gt;$data&lt;/code&gt;. Then &lt;code&gt;$data&lt;/code&gt; is pretty-printed to STDOUT via &lt;code&gt;Data::Dumper&lt;/code&gt;. Notice how the data printed to the terminal is compliant but &lt;em&gt;not&lt;/em&gt; realistic.&lt;/p&gt;

&lt;h3 id=&#34;mocking-apis&#34;&gt;Mocking APIs&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s popular to describe API endpoints with JSON schemas for &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;. Swagger will generate documentation using the schemas, and even provides a request/response testing tool. We can make the JSON schemas even more useful by using them to mock API endpoints. Imagine you&amp;rsquo;ve defined an API but haven&amp;rsquo;t built it yet: you can create the API endpoint and return data mocked with &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; so that frontend development can begin without waiting for the backend to be ready.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;ve got the following Swagger doc (a JSON schema) which defines a single API route &lt;code&gt;/user&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
  &amp;quot;schemes&amp;quot;: [
    &amp;quot;https&amp;quot;
  ],
  &amp;quot;produces&amp;quot;: [
    &amp;quot;application/json&amp;quot;
  ],
  &amp;quot;paths&amp;quot;: {
    &amp;quot;/user&amp;quot;: {
      &amp;quot;get&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;returns a user for a given id&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
            &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        ],
        &amp;quot;responses&amp;quot;: {
          &amp;quot;200&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;Objects matching the search term&amp;quot;,
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
              &amp;quot;properties&amp;quot;: {
                &amp;quot;login&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{5,32}&amp;quot;
                },
                &amp;quot;full_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10} [A-Z][a-z]{3,20}&amp;quot;
                },
                &amp;quot;display_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10}&amp;quot;
                },
                &amp;quot;birthdate&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
                },
                &amp;quot;email_address&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
                },
                &amp;quot;cell_phone_number&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;\\d{3} \\d{3} \\d{4}&amp;quot;
                },
                &amp;quot;password&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{8,32}&amp;quot;
                },
                &amp;quot;roles&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                  &amp;quot;minItems&amp;quot;: 1,
                  &amp;quot;maxItems&amp;quot;: 4,
                  &amp;quot;uniqueItems&amp;quot;: true,
                  &amp;quot;items&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                    &amp;quot;enum&amp;quot;: [ &amp;quot;admin&amp;quot;, &amp;quot;manager&amp;quot;, &amp;quot;trainer&amp;quot;, &amp;quot;member&amp;quot; ]
                  }
                },
                &amp;quot;active&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Lite&#34;&gt;Mojolicious::Lite app&lt;/a&gt; to serve the mocked route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decode_json&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swaggerdoc.json&amp;#39;&lt;/span&gt;; local($/);&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $swaggerdoc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decode_json($json);

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $route_def &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $swaggerdoc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{paths}{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;}{get}{responses}{&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;}{schema};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $route_def);
  $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(json &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $response);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This app slurps and decodes the swagger doc on startup, saving the result to &lt;code&gt;$swaggerdoc&lt;/code&gt; and declares a &lt;code&gt;/user&lt;/code&gt; route which extracts the API definition from the &lt;code&gt;$swaggerdoc&lt;/code&gt;, and uses &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; to generate a response, and renders it. Let&amp;rsquo;s test the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hypnotoad user-app.pl
[Wed Sep 20 14:19:49 2017] [info] Listening at &amp;quot;http://*:8080&amp;quot;
Server available at http://127.0.0.1:8080

$ curl localhost:8080/user
{&amp;quot;active&amp;quot;:false,&amp;quot;birthdate&amp;quot;:&amp;quot;2009-08-30T17:47:32.000Z&amp;quot;,&amp;quot;cell_phone_number&amp;quot;:&amp;quot;254 403 0133&amp;quot;,&amp;quot;display_name&amp;quot;:&amp;quot;Nyzhoyp&amp;quot;,&amp;quot;email_address&amp;quot;:&amp;quot;gEyRQXRPrlzL@CvuRitFtArXv.com&amp;quot;,&amp;quot;full_name&amp;quot;:&amp;quot;Wmpgrd Bnaazxguekqtuezlu&amp;quot;,&amp;quot;login&amp;quot;:&amp;quot;oAxgIvYQfbRmWHq4WifclhQxAI&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;99wciSr8V&amp;quot;,&amp;quot;roles&amp;quot;:[&amp;quot;member&amp;quot;,&amp;quot;trainer&amp;quot;,&amp;quot;manager&amp;quot;]}

$ hypnotoad -s user-app.pl
Stopping Hypnotoad server 2177 gracefully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I launch the app into the background with &lt;code&gt;hypnotoad&lt;/code&gt;. Next I use &lt;code&gt;curl&lt;/code&gt; to test the endpoint, and it correctly returns the user JSON. Finally I stop the app via &lt;code&gt;hypnotoad&lt;/code&gt; again. Looking good!&lt;/p&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve run into a couple of limitations when using &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;. One I already mentioned: it generates compliant but not realistic data. This can cause an issue if you have interdependencies in your object properties, like &lt;code&gt;first_name&lt;/code&gt; should be a substring of &lt;code&gt;full_name&lt;/code&gt;. Or when generating dates, sometimes a random datetime is not precise enough: for realistic dates of birth you might want someone born between 10 and 80 years ago. This issue can be mitigated somewhat by clever use of regex definitions in the JSON schema, or by using the &lt;code&gt;example_key&lt;/code&gt; feature of &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another issue is caused by limitations in JSON schema itself: you might not be able to generate the data in the format your API returns, for example there is no date &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3&#34;&gt;format&lt;/a&gt;, only datetimes.&lt;/p&gt;

&lt;p&gt;But these are minor limitations, and I remain convinced that &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is great way to augment the value of JSON schemas, by rapidly generating test data and/or mocking APIs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - September 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---september-2016/</link>
      <pubDate>Wed, 12 Oct 2016 08:32:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---september-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Hadoop::Oozie&#34;&gt;Net::Hadoop::Oozie&lt;/a&gt; provides a Perl interface to Apache Oozie REST endpoints and utility methods&lt;/li&gt;
&lt;li&gt;Use HelpSystems Intermapper (network mapping and monitoring) with &lt;a href=&#34;https://metacpan.org/pod/Net::Intermapper&#34;&gt;Net::Intermapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DracPerl::Client&#34;&gt;DracPerl::Client&lt;/a&gt; is a client for Dell&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Dell_DRAC&#34;&gt;iDRAC&lt;/a&gt; controller&lt;/li&gt;
&lt;li&gt;Get a Perl interface to Cassandra&amp;rsquo;s native protocol with &lt;a href=&#34;https://metacpan.org/pod/Cassandra::Client&#34;&gt;Cassandra::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::Monzo&#34;&gt;Business::Monzo&lt;/a&gt; provides a Perl interface for the Monzo API (mobile banking)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Copy::Verify&#34;&gt;File::Copy::Verify&lt;/a&gt; copies data and compares checksums to verify the file was copied correctly&lt;/li&gt;
&lt;li&gt;Get fast network lookups with (Patricia trie based) &lt;a href=&#34;https://metacpan.org/pod/JCM::Net::Patricia&#34;&gt;JCM::Net::Patricia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MIME::Detect&#34;&gt;MIME::Detect&lt;/a&gt; is another file type detection module. Doesn&amp;rsquo;t seem to work for files without extensions (but checkout the &lt;a href=&#34;https://metacpan.org/pod/MIME::Detect&#34;&gt;See Also&lt;/a&gt; for useful alternatives).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Keystone&#34;&gt;Keystone&lt;/a&gt; is a Perl module for Keystone, a lightweight multi-architecture assembly library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Compress::Zstd&#34;&gt;Compress::Zstd&lt;/a&gt; is a Perl interface to Facebook&amp;rsquo;s &lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;zstd&lt;/a&gt; (de)compressor&lt;/li&gt;
&lt;li&gt;Visualize a DBIx::Class schema with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Visualizer&#34;&gt;DBIx::Class::Visualizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse FIX market data using &lt;a href=&#34;https://metacpan.org/pod/FIX::Parser&#34;&gt;FIX::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::OLC&#34;&gt;Geo::OLC&lt;/a&gt; is an encoder/decoder for Google&amp;rsquo;s Open Location Codes&lt;/li&gt;
&lt;li&gt;JSON schemas can be verbose - create them in shorthand using &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Shorthand&#34;&gt;JSON::Schema::Shorthand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Range::Merge&#34;&gt;Range::Merge&lt;/a&gt; merges ranges of numbers including subset/superset ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Manage the underlying Git data model with &lt;a href=&#34;https://metacpan.org/pod/Git::Database&#34;&gt;Git::Database&lt;/a&gt;. Author Philippe Bruhat wrote a blog &lt;a href=&#34;http://blogs.perl.org/users/book/2016/09/announcing-gitdatabase.html&#34;&gt;post&lt;/a&gt; about this recently&lt;/li&gt;
&lt;li&gt;Wow, Try/Catch syntax for Perl that&amp;rsquo;s fast, requires no trailing semicolon and respects &lt;code&gt;return&lt;/code&gt;: &lt;a href=&#34;https://metacpan.org/pod/Syntax::Keyword::Try&#34;&gt;Syntax::Keyword::Try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Tie::Handle::Filter&#34;&gt;Tie::Handle::Filter&lt;/a&gt; filters the output to a filehandle through a coderef&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A chip driver for TSL256x: &lt;a href=&#34;https://metacpan.org/pod/Device::Chip::TSL256x&#34;&gt;Device::Chip::TSL256x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::DHT11&#34;&gt;RPi::DHT11&lt;/a&gt; can fetch the temperature/humidity from the DHT11 hygrometer sensor on Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some new helper modules for Arabic:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Encode::Arabic::Franco&#34;&gt;Encode::Arabic::Franco&lt;/a&gt; turns Franco/chat Arabic into Arabic&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::AR::Regexp&#34;&gt;Lingua::AR::Regexp&lt;/a&gt; provides regex character classes for Arabic&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::AR::Tashkeel&#34;&gt;Lingua::AR::Tashkeel&lt;/a&gt; provides utility functions for Arabic vowel marks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Machi&#34;&gt;Acme::Machi&lt;/a&gt; - made me laugh&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DDG&#34;&gt;DDG&lt;/a&gt; is the DuckDuckGo search engine&amp;rsquo;s Open Source components (a dependency of App::DuckPAN)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Argon2&#34;&gt;Crypt::Argon2&lt;/a&gt; is a Perl interface to the Argon2 key derivation functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Digest::MurmurHash2::Neutral&#34;&gt;Digest::MurmurHash2::Neutral&lt;/a&gt; an XS based interface to the endian-neutral MurmurHash2 algorithm&lt;/li&gt;
&lt;li&gt;Generate Pseudorandom Binary Sequences using an Iterator-based Linear Feedback Shift Register with &lt;a href=&#34;https://metacpan.org/pod/Math::PRBS&#34;&gt;Math::PRBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

