<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cis194 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/cis194/</link>
    <description>Recent content in Cis194 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Oct 2015 12:47:18 +0000</lastBuildDate>
    <atom:link href="/tags/cis194/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Understanding Haskell types</title>
      <link>http://localhost:1313/article/198/2015/10/14/Understanding-Haskell-types/</link>
      <pubDate>Wed, 14 Oct 2015 12:47:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/198/2015/10/14/Understanding-Haskell-types/</guid>
      <description>

&lt;p&gt;I recently took a break from Perl work to study at the &lt;a href=&#34;http://recurse.com&#34;&gt;Recurse Center&lt;/a&gt;. I&amp;rsquo;m learning Haskell, and it&amp;rsquo;s been an interesting adventure so far. I&amp;rsquo;d heard good things about Haskell&amp;rsquo;s type system and started with an introductory book &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;. The book is filled with cartoonish humor - &amp;ldquo;how hard can this be?&amp;rdquo; I asked myself. The answer was &amp;ldquo;hard&amp;rdquo;. I found Haskell&amp;rsquo;s type system to be counter-intuitive, so this article lays out my understanding of Haskell types. If you&amp;rsquo;re a programmer with an imperative programming background, you might find this useful.&lt;/p&gt;

&lt;h3 id=&#34;your-intuition-is-wrong&#34;&gt;Your intuition is wrong&lt;/h3&gt;

&lt;p&gt;For imperative-language programmers, Haskell keywords are likely to mislead. Take the &lt;code&gt;type&lt;/code&gt; keyword for instance. It&amp;rsquo;s not for creating new types per se, but &lt;em&gt;type synonyms&lt;/em&gt;, which are like aliases for existing types. I might use it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;type FirstName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String
type LastName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String
type Age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Int&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One way to declare new types is with the &lt;code&gt;data&lt;/code&gt; keyword (naturally!). If I wanted to create a person type, I could use &lt;code&gt;data&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;data Person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person String String Int&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares a new type called &lt;code&gt;Person&lt;/code&gt; with 2 strings and 1 integer as attributes. But I could also use our type synonyms from the earlier example, and clarify my intentions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;data Person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person FirstName LastName Age&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;functions-and-types&#34;&gt;Functions and types&lt;/h3&gt;

&lt;p&gt;In Haskell function signatures can be restricted by types. I can create a function to tell which of two people is older:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;eldest &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; String
eldest (Person x1 y1 z1) (Person x2 y2 z2)
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; z2   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is older&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; z2   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x2 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is older&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;They&amp;#39;re the same age!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a lot of new syntax, so bear with me. The first line declares a function called &lt;code&gt;eldest&lt;/code&gt; which takes two persons and returns a string. The second line assigns the attributes of each person to variables. The rest of the function tests which person is older and returns an appropriate message. I&amp;rsquo;ll save all of this code into a file called &amp;ldquo;person.hs&amp;rdquo;, so I can test the function in the Haskell REPL, &lt;code&gt;ghci&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; :l person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] Compiling Main             ( person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs, interpreted )
Ok, modules loaded: Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; let a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bart&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simpson&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; let b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lisa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simpson&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; eldest a b
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bart Simpson is older&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes we don&amp;rsquo;t need to access all of the attributes of a type in a function. In these cases Haskell let&amp;rsquo;s you use &lt;code&gt;_&lt;/code&gt; as a placeholder, that won&amp;rsquo;t be assigned to a variable. For example to print the initials of a person, I only need to know their first and last names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;initials &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; String
initials (Person x y _) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [head x,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,head y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second line of code assigns a person&amp;rsquo;s firstname to &lt;code&gt;x&lt;/code&gt; and lastname to &lt;code&gt;y&lt;/code&gt;. It then takes the first char of each using &lt;code&gt;head&lt;/code&gt; and returns a new list of chars with a dot after each char. I can test the function by reloading &amp;ldquo;person.hs&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; :l person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] Compiling Main             ( person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs, interpreted )
Ok, modules loaded: Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; let a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Maggie&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simpson&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; initials a
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M.S.&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;typeclasses&#34;&gt;Typeclasses&lt;/h3&gt;

&lt;p&gt;Typeclasses are similar to traits (roles in Perl-speak) for types. For example, integers are instances of typeclasses like &lt;code&gt;Ord&lt;/code&gt; as they are orderable, &lt;code&gt;Num&lt;/code&gt; as they are numbers, and so on. Each typeclass defines functions for handling types in specific contexts. The &lt;code&gt;Eq&lt;/code&gt; typeclass adds the ability to compare types for equality using operators like &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By generalizing the properties of types with typeclasses, Haskell can support generic functions which operate on typeclasses, instead of being restricted to one type. The signature of the &lt;code&gt;quicksort&lt;/code&gt; function from &lt;a href=&#34;http://learnyouahaskell.com/recursion&#34;&gt;Learn You a Haskell&lt;/a&gt; is a great example of this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;quicksort &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (Ord a) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
quicksort &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
quicksort (x:xs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;
    let smallerSorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quicksort [a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs, a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x]
        biggerSorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quicksort [a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs, a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x]
    in  smallerSorted &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [x] &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; biggerSorted&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares a new function called quicksort which is restricted to lists of orderable types. Ignore the body and just focus on the first line of code, the function signature. The code &lt;code&gt;(Ord a)&lt;/code&gt; defines the typeclass constraint for the function. This function can be used to sort anything orderable, like lists of numbers. Aren&amp;rsquo;t strings just lists of chars? I guess we can sort them with &lt;code&gt;quicksort&lt;/code&gt; too then.&lt;/p&gt;

&lt;h3 id=&#34;instance-and-class&#34;&gt;Instance and Class&lt;/h3&gt;

&lt;p&gt;If you saw the &lt;code&gt;instance&lt;/code&gt; keyword in some Haskell code, you might think &amp;ldquo;aha, a singleton constructor!&amp;rdquo; but actually &lt;code&gt;instance&lt;/code&gt; is used to make types instances of typeclasses. This makes sense when you consider that every type is an &lt;strong&gt;instance&lt;/strong&gt; of a typeclass. Revisiting my &lt;code&gt;Person&lt;/code&gt; type from earlier, what if I wanted to make it orderable? Typically in the English-speaking parts of the world, people are sorted by their last name, so I&amp;rsquo;m going to implement it that way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;data Person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person FirstName LastName Age deriving (Eq, Show)

instance Ord Person where
  compare (Person _ a _) (Person _ b _) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compare a b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I start by updating the type declaration of Person with &lt;code&gt;deriving (Eq, Show)&lt;/code&gt;. These operate on the whole type (all of its attributes together). &lt;code&gt;Eq&lt;/code&gt; will let Haskell compare Persons for equality and &lt;code&gt;Show&lt;/code&gt; just let&amp;rsquo;s Haskell serialize the type as a string. The second line of code uses &lt;code&gt;instance&lt;/code&gt; to make persons orderable. The final line implements a comparison function using the lastname attribute of the Person. I can test the code using the &lt;code&gt;quicksort&lt;/code&gt; function declared above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; :l person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs
[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] Compiling Main             ( person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs, interpreted )
Ok, modules loaded: Main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; let a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jason&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bourne&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; let b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bond&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
ghci&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; quicksort [a,b]
[Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bond&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;,Person &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jason&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bourne&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sorted our list of people by their lastname, and because &lt;code&gt;Person&lt;/code&gt; is an instance of &lt;code&gt;Show&lt;/code&gt;, Haskell was able to print out the detail to the command line. Not bad!&lt;/p&gt;

&lt;p&gt;The final keyword to be aware of is &lt;code&gt;class&lt;/code&gt;. By now it shouldn&amp;rsquo;t surprise you to find out that &lt;code&gt;class&lt;/code&gt; is not for declaring classes like in imperative programming, but for creating new typeclasses. You probably won&amp;rsquo;t use this much when starting out with Haskell, but it&amp;rsquo;s useful to keep in mind for reducing repetitive code. If you have multiple sets of code doing very similar things for different types, consider creating a new typeclass and merging the functions to operate on the new type class, to keep things &lt;a href=&#34;https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-complete&#34;&gt;Code complete&lt;/h3&gt;

&lt;p&gt;This is the finished code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hs
type FirstName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String
type LastName  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String
type Age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Int 

data Person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Person FirstName LastName Age deriving (Eq, Show)

eldest &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; String
eldest (Person x1 y1 z1) (Person x2 y2 z2)
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; z2   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x1 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is older&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; z2   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x2 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is older&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;They&amp;#39;re the same age!&amp;#34;&lt;/span&gt;

initials &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; Person &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; String
initials (Person x y _) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [head x,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,head y, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;]

quicksort &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
quicksort (x:xs) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;
    let smallerSorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quicksort [a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs, a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x]
        biggerSorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quicksort [a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; xs, a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x]
    in  smallerSorted &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [x] &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; biggerSorted

instance Ord Person where
  compare (Person _ a _) (Person _ b _) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compare a b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;learn-haskell-the-hard-way&#34;&gt;Learn Haskell the Hard Way&lt;/h3&gt;

&lt;p&gt;Despite its childish demeanor, &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell&lt;/a&gt; goes deep into the Haskell type system and can be a bit long-winded at times. My current learning method involves reading the book, and typing out every code example, and studying Penn State&amp;rsquo;s &lt;a href=&#34;https://www.cis.upenn.edu/~cis194/spring13/lectures.html&#34;&gt;cis194 course&lt;/a&gt;. Both are free. O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://book.realworldhaskell.org/read/&#34;&gt;Real World Haskell&lt;/a&gt; is also available for free online, and emphasizes more immediate practical uses of Haskell. It&amp;rsquo;s good for when you&amp;rsquo;re tired of coding binary search trees and sorting algorithms. If you find yourself needing to lookup a Haskell term, DuckDuckGo has the &lt;code&gt;!h&lt;/code&gt; bang, which searches &lt;a href=&#34;https://www.haskell.org/hoogle/&#34;&gt;Hoogle&lt;/a&gt; automatically.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

