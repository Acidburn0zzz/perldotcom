<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wiki Openguides on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/wiki-openguides/</link>
    <description>Recent content in Wiki Openguides on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Oct 2003 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/wiki-openguides/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Open Guides</title>
      <link>http://localhost:1313/pub/2003/10/31/openguides.html/</link>
      <pubDate>Fri, 31 Oct 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/10/31/openguides.html/</guid>
      <description>

&lt;p&gt;First, a disclaimer.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not a wiki celebrity. I don&amp;rsquo;t look good in StudlyCaps. I&amp;rsquo;m not part of the wiki culture — I&amp;rsquo;ve never contributed to &lt;a href=&#34;http://c2.com/cgi/wiki?WelcomeVisitors&#34;&gt;Ward&amp;rsquo;s Wiki&lt;/a&gt;, never used &lt;a href=&#34;http://twiki.org/&#34;&gt;TWiki&lt;/a&gt;, am baffled by &lt;a href=&#34;http://twistedmatrix.com/users/jh.twistd/moin/moin.cgi/FrontPage&#34;&gt;MoinMoin&lt;/a&gt;, and every time I look at &lt;a href=&#34;http://www.usemod.com/cgi-bin/wiki.pl&#34;&gt;UseMod&lt;/a&gt; code, my brain turns to mashed banana. Most wiki people probably have no idea who I am.&lt;/p&gt;

&lt;p&gt;Having said that, I&amp;rsquo;m going to spend 2,500 words or so advocating the possibilities of Ward Cunningham&amp;rsquo;s simple, potent idea, and explaining how I and a couple of other &lt;a href=&#34;http://london.pm.org&#34;&gt;Perlmongers&lt;/a&gt; have applied it to create what I think is one of the most exciting Perl applications currently in existence — OpenGuides.&lt;/p&gt;

&lt;h3 id=&#34;beginnings&#34;&gt;Beginnings&lt;/h3&gt;

&lt;p&gt;grubstreet, the predecessor to OpenGuides, was conceived in early 2002 when I asked Earle Martin whether he knew of a London wiki:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;It seems that my friend&#39;s Wiki is running UseModWiki; I think I rather
like it.  It would be good if there was one of these for info about
London; do you know if anyone&#39;s done that?  Things like which pubs
serve food and good beer, etc.; which is the best end of the platform
to stand at to get a seat (discussed this kind of thing with blech
recently).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Earle was enthusiastic and made it so. We both got very excited and started filling the thing with content. Wiki makes this easy! You&amp;rsquo;re reading a web page and spot something that&amp;rsquo;s wrong or missing. Click the &amp;ldquo;edit&amp;rdquo; link, add your comment, and it&amp;rsquo;s right there.&lt;/p&gt;

&lt;h3 id=&#34;continuings&#34;&gt;Continuings&lt;/h3&gt;

&lt;p&gt;It didn&amp;rsquo;t take long before we started bumping our heads against the limitations of the &lt;code&gt;usemod&lt;/code&gt; software. Even leaving aside its tendency to clamp down on its (custom-format) flat-file database and refuse anyone edit access, I found myself writing umpteen screenscrapers to do simple things like find a nice pub in Soho. I hate screenscraping, but I love my beer.&lt;/p&gt;

&lt;p&gt;We tried to patch and amend &lt;code&gt;usemod&lt;/code&gt;. We tried very hard. Ivor Williams, in particular, spent a lot of time in its guts. I decided in the end that writing software should only hurt some of the time, and after several beers one night, made a pact with Chris Ball that grubstreet&amp;rsquo;s software would be rewritten in Real Perl. Chris held me to it, and a CPAN-friendly wiki toolkit — &lt;a href=&#34;https://metacpan.org/pod/CGI::Wiki&#34;&gt;CGI::Wiki&lt;/a&gt; — resulted. Once we had that to build on, we started on the CGI script that eventually turned into &lt;a href=&#34;https://metacpan.org/pod/OpenGuides&#34;&gt;OpenGuides&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-it-says-on-the-tin&#34;&gt;What It Says on the Tin&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://openguides.org/&#34;&gt;OpenGuides&lt;/a&gt; is a complete web application for managing a collaboratively written guide to a city or town.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install OpenGuides, and what you get is a blank framework waiting for you to put content into it.&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;div class=&#34;secondary&#34;&gt;
&lt;p&gt;There&#39;s an opportunity right here for anyone wanting to join the project team. Write a set of pages for bundling with new installs of the OpenGuides software — how to use the Guide, how to format your entries, maybe stub pages for things that all cities have in common, maybe a category framework for transport pages — you&#39;re bound to be able to come up with better ideas than those of us who&#39;ve been using the software for ages and are blind to its confusing spots.&lt;/p&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;just-a-skeleton-but-a-damned-sturdy-one&#34;&gt;Just a Skeleton, But a Damned Sturdy One&lt;/h3&gt;

&lt;p&gt;No, we didn&amp;rsquo;t just give you the equivalent of an empty directory to put your HTML files into. Start adding pages and you&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;Suppose I want to add a page about my local pub. I&amp;rsquo;ll click on &amp;ldquo;Create a new page&amp;rdquo; and type in the page name. What should I call it? Well, this is a new OpenGuides install, with no established conventions, so I could call it &amp;ldquo;The Drapers Arms&amp;rdquo;, &amp;ldquo;Drapers Arms&amp;rdquo;, &amp;ldquo;The Drapers Arms (Islington)&amp;rdquo;, or whatever. I just need to keep in mind that the name needs to be unique, so if I expect there to be more than one Drapers Arms in my city, I really should add some other kind of identifying information. &lt;a href=&#34;http://london.openguides.org/&#34;&gt;The Open Guide to London&lt;/a&gt; has a convention of including the postcode — thus &amp;ldquo;Drapers Arms, N1 1ER&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;OK, so I&amp;rsquo;ve done that, and now I&amp;rsquo;m presented with an editing form with several boxes for me to type into. The first, Content, is a freeform box where I can put any information that doesn&amp;rsquo;t fit into the particular boxes below.&lt;/p&gt;

&lt;p&gt;Locales and Categories are the next boxes. I can put whatever I like into these, and so can later visitors to this Guide. I don&amp;rsquo;t need to decide right now on a useful way to divide my city into locales; it&amp;rsquo;ll just emerge from the aggregated opinion of all the people who contribute. I can always come back to this, my first page, in a few months and add any later-defined categories or locales that seem to apply to it. Or I may not need to; someone else may have got around to it before me.&lt;/p&gt;

&lt;p&gt;Locales and categories are excellent ways to make sure that your newly added content doesn&amp;rsquo;t drift off into a decoupled purgatory of unlinked pages. Just add the Pubs category and the Islington locale to the Drapers Arms page, and anyone doing a search — whether a simple type-into-box or a directed &lt;a href=&#34;http://london.openguides.org/index.cgi?action=index;index_type=locale;index_value=Islington&#34;&gt;locale&lt;/a&gt; or &lt;a href=&#34;http://london.openguides.org/index.cgi?action=index;index_type=category;index_value=Pubs&#34;&gt;category&lt;/a&gt; search — will find it.&lt;/p&gt;

&lt;p&gt;Next, we get a set of smaller boxes for entering things like more-detailed location information, contact information, and opening hours. These boxes may be completely irrelevant to many, most, or all pages in your Guide. That&amp;rsquo;s OK. They&amp;rsquo;re optional. But if you &lt;em&gt;do&lt;/em&gt; fill them in, you get to play with what I feel is one of the most innovative, yet simple, features of OpenGuides — &lt;a href=&#34;http://london.openguides.org/index.cgi?distance_in_metres=500&amp;amp;id=Piccadilly+Circus+Station&amp;amp;action=find_within_distance&amp;amp;Go=Go&#34;&gt;find me everything within half a kilometre of Piccadilly Circus Tube station&lt;/a&gt;. Please. Because my feet hurt and I could murder a glass of wine.&lt;/p&gt;

&lt;h3 id=&#34;customization-and-extension&#34;&gt;Customization and Extension&lt;/h3&gt;

&lt;p&gt;I meant it when I said I wanted to be able to find pubs. I want to find all pubs in Notting Hill that serve food and have a beer garden. The Open Guide to London must have this information! There&amp;rsquo;s no obvious way to get to it directly, though. I may have to write some code.&lt;/p&gt;

&lt;p&gt;Given that I&amp;rsquo;m one of the admins, I have access to the database on the server — so I can call the CGI::Wiki &lt;code&gt;list_nodes_by_metadata&lt;/code&gt; method directly to find all pages in Category Pubs, Locale Notting Hill, and Category Pub Food.&lt;/p&gt;

&lt;p&gt;I wrote a CGI script to take in options for selecting pubs and output results. It&amp;rsquo;s very useful, so will be in one of the next few official OpenGuides releases. Here&amp;rsquo;s an excerpt. Note that the locale and categories are simply stored as CGI::Wiki metadata. Note also the use of CGI::Wiki::Plugin::Locator::UK to allow searching by nearest Tube station. You could easily adapt this if you live in a city where people navigate by some other kind of landmark.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %possible_features = (
    &amp;quot;beer gardens&amp;quot;    =&amp;gt; &amp;quot;Has beer garden&amp;quot;,
    &amp;quot;function room&amp;quot;   =&amp;gt; &amp;quot;Has function room&amp;quot;,
    &amp;quot;good beer guide&amp;quot; =&amp;gt; &amp;quot;Appears in the CAMRA Good Beer Guide&amp;quot;,
    &amp;quot;real cider&amp;quot;      =&amp;gt; &amp;quot;Serves real cider&amp;quot;,
    &amp;quot;belgian beer&amp;quot;    =&amp;gt; &amp;quot;Serves Belgian beer&amp;quot;,
    &amp;quot;pub food&amp;quot;        =&amp;gt; &amp;quot;Serves food of some kind&amp;quot;,
);

if ( $action eq &amp;quot;search&amp;quot; ) {
    my @locales       = CGI::param( &amp;quot;locale&amp;quot; );
    my @features      = CGI::param( &amp;quot;feature&amp;quot; );
    my @tube_stations = CGI::param( &amp;quot;tube&amp;quot; );

    # Ignore the blank &amp;quot;any locales&amp;quot; option.
    @locales = grep { $_ } @locales;

    # Ensure that we only look for &#39;allowed&#39; features.
    @features = grep { $possible_features{$_} } @features;

    # Ensure that we only look for extant Tube stations.
    my %is_tube = map { $_ =&amp;gt; 1 } list_tube_stations();
    @tube_stations = grep { $is_tube{$_} } @tube_stations;

    # Grab all the pubs, to start with.
    my @pubs = $wiki-&amp;gt;list_nodes_by_metadata(
                   metadata_type =&amp;gt; &amp;quot;category&amp;quot;,
                   metadata_value =&amp;gt; &amp;quot;pubs&amp;quot;,
                   ignore_case   =&amp;gt; 1,
    );

    # Filter by locale if specified.
    if ( scalar @locales &amp;gt; 0 ) {
        my @in_locale;
        foreach my $locale ( @locales ) {
            push @in_locale,
                 $wiki-&amp;gt;list_nodes_by_metadata(
                     metadata_type  =&amp;gt; &amp;quot;locale&amp;quot;,
                     metadata_value =&amp;gt; $locale,
                     ignore_case    =&amp;gt; 1,
                 );
        }
        my %in_locale_hash = map { $_ =&amp;gt; 1 } @in_locale;
        @pubs = grep { $in_locale_hash{$_} } @pubs;
    }

    # Filter by Tube station if specified.
    if ( scalar @tube_stations &amp;gt; 0 ) {
        my $locator = CGI::Wiki::Plugin::Locator::UK-&amp;gt;new;
        $wiki-&amp;gt;register_plugin( plugin =&amp;gt; $locator );
        my @near_station;
        foreach my $station ( @tube_stations ) {
            push @near_station,
                $locator-&amp;gt;find_within_distance(
                    node   =&amp;gt; $station . &amp;quot; Station&amp;quot;,
                    metres =&amp;gt; 600,
                );
         }
         my %near_station_hash = map { $_ =&amp;gt; 1 } @near_station;
         @pubs = grep { $near_station_hash{$_} } @pubs;
    }

    # Filter by features if specified.
    if ( scalar @features &amp;gt; 0 ) {
        my %has_feature = map { $_ =&amp;gt; [] } @pubs;
        foreach my $feature ( @features ) {
            my @has_this_feature = $wiki-&amp;gt;list_nodes_by_metadata(
                     metadata_type  =&amp;gt; &amp;quot;category&amp;quot;,
                     metadata_value =&amp;gt; $feature,
                     ignore_case    =&amp;gt; 1,
                 );
            foreach my $pub ( @has_this_feature ) {
                push @{ $has_feature{$pub} }, $feature;
            }
        }
        # Only keep pubs that have *all* the requested features.
        @pubs = grep { scalar @{ $has_feature{$_} } == scalar @features }
                     @pubs;
    }

    show_results(
                  pubs          =&amp;gt; \@pubs,
                  locales       =&amp;gt; \@locales,
                  tube_stations =&amp;gt; \@tube_stations,
                  features      =&amp;gt; [ @possible_features{ @features } ],
                );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;you-can-do-it-too&#34;&gt;You Can Do It, Too&lt;/h3&gt;

&lt;p&gt;Suppose I&amp;rsquo;d had the idea for this directed pub search but didn&amp;rsquo;t have direct access to any OpenGuides data store? No problem — I can play with the RDF interface. Most OpenGuides pages have a link to an RDF version, and this includes the auto-generated pages like locale or category search results.&lt;/p&gt;

&lt;p&gt;I can send a query like &lt;a href=&#34;http://london.openguides.org/index.cgi?action=index;index_type=category;index_value=Pubs;format=rdf&#34;&gt;http://london.openguides.org/index.cgi?action=index;index_type=category;index_value=Pubs;format=rdf&lt;/a&gt; and then use RDF::Core::Parser to parse the returned RDF/XML and get the data that otherwise would have required CGI::Wiki calls.&lt;/p&gt;

&lt;p&gt;The RDF interface isn&amp;rsquo;t too well advertised. A list of places where any kind of link to an RDF version is missing would be most useful.&lt;/p&gt;

&lt;p&gt;Given the simple data model of an OpenGuides page, such an external add-on would be trivial to incorporate into the core distribution. So once you&amp;rsquo;ve written one, send it to us.&lt;/p&gt;

&lt;p&gt;The RDF interface is also ideal for people interested in writing IRC bots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;15:12 &amp;lt;Kake&amp;gt; grotbot: things in Chinatown
15:12 &amp;lt;grotbot&amp;gt; OK, working on it
&amp;lt;grotbot&amp;gt; Kake: things in Chinatown: Crispy Duck, W1D 6PR; De Hems,
          W1D 5BW; Golden Harvest, WC2H 7BE; HK Diner; Hung&#39;s, W1D 6PR;
          Misato, W1D 6PG; Tai, W1D 4DH; Tokyo Diner; Zipangu, WC2H 7JJ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;The OpenGuides software is still young. The install procedure, in particular, needs a good going-over, plus some of the location features only currently work for guides to cities located in the UK.&lt;/p&gt;

&lt;h3 id=&#34;live-openguides-installs&#34;&gt;Live OpenGuides Installs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The biggest and most widely used install is &lt;a href=&#34;http://london.openguides.org/&#34;&gt;the original London one&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Oxford has two OpenGuides sites — &lt;a href=&#34;http://oxford.openguides.org/&#34;&gt;The Oxford Guide&lt;/a&gt; and &lt;a href=&#34;http://the.earth.li/~kake/cgi-bin/openguides/vegan-oxford.cgi&#34;&gt;The Vegan Guide to Oxford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; Your city belongs here! &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;similar-systems&#34;&gt;Similar systems&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://knowhere.co.uk/&#34;&gt;Knowhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.regveg.org&#34;&gt;RegVeg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.capitancook.com&#34;&gt;Capitan Cook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

