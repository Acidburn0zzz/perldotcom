<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Dumper on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/data-dumper/</link>
    <description>Recent content in Data Dumper on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 09:28:27 +0000</lastBuildDate>
    <atom:link href="/tags/data-dumper/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A slow boat to data</title>
      <link>http://localhost:1313/article/a-slow-boat-to-data/</link>
      <pubDate>Mon, 01 Jan 2018 09:28:27 +0000</pubDate>
      
      <guid>http://localhost:1313/article/a-slow-boat-to-data/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree&#34;&gt;Data::Dump::Tree&lt;/a&gt; aims to render your data structures in a more legible way. It&amp;rsquo;s usefulness grows with the amount of data to display.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the best for dumping three variables that you will never see again but it&amp;rsquo;s good at rendering complex data, rendering what you generate often, and rendering what will be read by other people.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can install it with &lt;a href=&#34;https://github.com/ugexe/zef&#34;&gt;zef&lt;/a&gt;, which comes with &lt;a href=&#34;http://rakudo.org&#34;&gt;Rakudo Star&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zef install Data::Dump::Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Data::Dump::Tree &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree&#34;&gt;repo&lt;/a&gt; has two branches: &lt;code&gt;release&lt;/code&gt; which is the branch &lt;em&gt;zef&lt;/em&gt; installs and &lt;code&gt;master&lt;/code&gt; which is the main development branch. I chose to develop on the latest Rakudo because bugs are fixed there. I may change the release branch to work only with Rakudo releases in the near future. There are tests to check the fitness of the module.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not often that an article starts with a call for help but I have noticed that they tend to be forgotten when put at the end. There are a few things that can get better; please help if you can! The help list is at the end of the article.&lt;/p&gt;

&lt;h3 id=&#34;the-legibility-principles&#34;&gt;The Legibility Principles&lt;/h3&gt;

&lt;p&gt;My idea is to make data rendering so simple and attractive that it removes the need to manually extract the relevant information from the data. Instead via filters present data that is simple enough for the end user and still detailed enough for a developer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Data::Dump::Tree&lt;/code&gt; displays the data vertically which reduces the text/surface ratio. I try to apply a few principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limit the text to area ratio; a screen packed with text is useless; maximal concentration of text has low legibility&lt;/li&gt;
&lt;li&gt;Contrast the rendering with color, symbols, font size, and spacing&lt;/li&gt;
&lt;li&gt;Simplification - show less data as fewer details increases the render legibility&lt;/li&gt;
&lt;li&gt;Organization - transformed or tabulated data can make data easier to interpret&lt;/li&gt;
&lt;li&gt;Relationships - relationships contextualize the data, I achieve that by numbering and coloring the render&lt;/li&gt;
&lt;li&gt;Interactive - you can collapse or expand data to manage the complexity of the render&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dd-vs-ddt&#34;&gt;&lt;code&gt;dd&lt;/code&gt; vs &lt;code&gt;ddt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There is no doubt whatsoever that the &lt;code&gt;dd&lt;/code&gt; builtin to Rakudo is many times faster than my &lt;code&gt;ddt&lt;/code&gt; but here are some examples that, in my opinion, are much more readable when rendered by &lt;code&gt;ddt&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;1-100-examples&#34;&gt;[1..100] examples&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

dd [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;
ddt [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s output is an example of compactnessâ€”clear and to the point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/dd-range.png&#34; alt=&#34;dd-range&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ddt&lt;/code&gt; lists data vertically so we get a long rendering that looks like this (I truncated the output to the first 24 lines):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/ddt-range.png&#34; alt=&#34;ddt-range&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a clear advantage of &lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s horizontal layout but let&amp;rsquo;s see what &lt;code&gt;ddt&lt;/code&gt; can do and when it may be more legible than &lt;code&gt;dd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ddt&lt;/code&gt; has a &lt;code&gt;:flat&lt;/code&gt; mode that changes the rendering orientation. It&amp;rsquo;s true that it can take a long time to render large data structures but I find those large data structure are unreadable in a compact rendering so all I&amp;rsquo;m really doing is exchanging rendering time for comprehension time.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s render the array of 100 elements in columns with 5 elements each:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

ddt [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}) ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/ddt-columns.png&#34; alt=&#34;ddt columns&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a bit better and shorter but all those indexes add a bit of noise. Or does it add noise? The data I am rendering is so simple that I don&amp;rsquo;t need any indexing. What if the data weren&amp;rsquo;t sorted? What if I wanted to look at the value at the 50th index?&lt;/p&gt;

&lt;p&gt;Here is an example with randomized data. I also used columns of 10 rows rather than 5. Still finding &lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s output better?:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

dd True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;
ddt True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}) ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/randomized.png&#34; alt=&#34;randomized&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Still not convinced? What about 300 random integers? Can you navigate that?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/300-entries.png&#34; alt=&#34;300-entries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make it a bit more complicated. I want to see the values that are between 50 and 59. Imagine I am going to present this data over and over and spending a few minutes changing how Arrays are displayed is worth it to me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree::DescribeBaseObjects ; &lt;span style=&#34;color:#75715e&#34;&gt;# for DVO&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Terminal::ANSIColor ;

role skinny
{
  multi method get_elements (Array $a)
  {
    $a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map:
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
        ?? DVO(color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold red&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; DVO($_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;))
    }
  }
}

ddt True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}), :does[skinny] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/50-60.png&#34; alt=&#34;50-60&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could have displayed a table or a text mode graph. That&amp;rsquo;s even better when my data has a non-builtin type; I write a handler and give it to &lt;code&gt;ddt&lt;/code&gt; and all instances will be rendered as I wish. I can write a filter and take over how other types are displayed, including the built-ins. Data::Dumper::Tree is all about giving me control of how data is rendered with a few sensible defaults.&lt;/p&gt;

&lt;p&gt;The project repo has more &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/tree/release/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;builtin-versus-user-types&#34;&gt;Builtin versus user types&lt;/h3&gt;

&lt;p&gt;Although &lt;code&gt;ddt&lt;/code&gt; handles quite a few builtin types, there are still some types I have not taken the time to look at. Those types may render wrongly or not at all. If you catch one of those, please open an issue in &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/issues&#34;&gt;GitHub&lt;/a&gt;. And if you add a handler for the type, please submit a pull request! You can look at &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/blob/release/lib/Data/Dump/Tree/DescribeBaseObjects.pm&#34;&gt;DescribeBaseObjects.pm&lt;/a&gt; to see what&amp;rsquo;s already handled.&lt;/p&gt;

&lt;p&gt;User defined types are handled in a generic way. If they define &lt;code&gt;ddt_*&lt;/code&gt; methods those will be called; otherwise the type attributes will be shown. The &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree#handling-specific-types&#34;&gt;documentation&lt;/a&gt; has more information about this.&lt;/p&gt;

&lt;h3 id=&#34;match&#34;&gt;Match&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&#34;https://www.learningperl6.com/2017/01/26/three-ways-to-pretty-print-perl-6/&#34;&gt;review of Dumpers&lt;/a&gt;, brian noted that &lt;code&gt;ddt&lt;/code&gt; output is not very interesting for Matches, and he was right. Not only is the default output not helpful but it even tries to hide all the details of the match. The reason for this is that there are details in a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object that are usually of no use when rendering.&lt;/p&gt;

&lt;p&gt;What if I want to see Match details in a data rendering? &lt;code&gt;ddt&lt;/code&gt; has a role I can use that will make it more useful when working with Matches. There are examples of the Match role usage with and without extra filtering and coloring in &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/blob/release/examples/match.pl&#34;&gt;examples/match.pl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/match.png&#34; alt=&#34;match&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;nativecall-types&#34;&gt;NativeCall Types&lt;/h3&gt;

&lt;p&gt;Look at &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/examples/gumbo.pl&#34;&gt;examples/gumbo.pl&lt;/a&gt;. &lt;code&gt;ddt&lt;/code&gt; can handle Perl 6&amp;rsquo;s &lt;a href=&#34;https://docs.perl6.org/language/nativecall&#34;&gt;NativeCall&lt;/a&gt; support. &lt;code&gt;dd&lt;/code&gt; simply displays the type &lt;code&gt;GumboNode&lt;/code&gt;. The &lt;code&gt;ddt&lt;/code&gt; output breaks it down and annotates the C portions of the data structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/gumbonode.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;filtering&#34;&gt;Filtering&lt;/h3&gt;

&lt;p&gt;You have seen an example of handler in the &lt;code&gt;[1..100]&lt;/code&gt; examples. Here is an example of filter applied to the parsing of a JSON data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;header_filter&lt;/span&gt;
  ($dumper, \r, $s, ($depth, $path, $glyph, @renderings),
   (\k, \b, \v, \f, \final, \want_address))
{
  &lt;span style=&#34;color:#75715e&#34;&gt;# simplifying the rendering&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;pair&amp;gt; with a value that has no sub elements can be&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# displayed in a more compact way&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;pair&amp;gt;&amp;#34;&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %caps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caps ;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; %caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caps[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;
    {
      v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ls(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;%caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; ls(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;%caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) ;
      final &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DDT_FINAL ;
    }
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# Below need no details&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;object&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;pairlist&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;array&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;arraylist&amp;gt;&amp;#39;&lt;/span&gt;
  {
    v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ;
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By applying the above filter, the amount of data displayed is reduced by a factor of almost three. The output without the filter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/unfiltered.png&#34; alt=&#34;unfiltered&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The output with the filter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/filtered.png&#34; alt=&#34;filtered&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;folding-and-sharing&#34;&gt;Folding And Sharing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/folding-animation.gif&#34; alt=&#34;folding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can display a rendered data structure in a curses interface by using the &lt;code&gt;:curses&lt;/code&gt; adjective:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ddt $data_structure, :curses;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can also send the rendering of a data structure to another process. This makes it easier to debug without cluttering the display for example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ddt $data_structure, :remote;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;less-commonly-used-options&#34;&gt;Less commonly used options&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:nl&lt;/code&gt; adds a blank line at the end of the rendering.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:indent&lt;/code&gt; indents the whole rendering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!display_info&lt;/code&gt;, &lt;code&gt;:!display_address&lt;/code&gt;, &lt;code&gt;:!display_type&lt;/code&gt; these remove the type/address from the rendering, for simple data this can improve the legibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h3&gt;

&lt;p&gt;I can be found on the &lt;em&gt;#perl6&lt;/em&gt; IRC channel and will receive mail if an issue is opened on &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/issues&#34;&gt;GitHub&lt;/a&gt;. I&amp;rsquo;m happy to help with general explanations and writing handlers/filters for new types or your types, especially if I can add it to the examples section.&lt;/p&gt;

&lt;h3 id=&#34;lending-a-hand&#34;&gt;Lending a hand&lt;/h3&gt;

&lt;p&gt;There are several areas that could use some help. Perhaps you can work on one of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a DHTML renderer which could use some love. There is no visual cue for folded containers. The search functionality needs polishing too. I am no web person so the code represents my best effort so far&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ddt&lt;/code&gt; support for builtin types can be expanded. That is best done by testing in your scripts and reporting when a type is not supported&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ddt&lt;/code&gt; is sluggish; it does a lot of things but it could do them faster. I tried profiling it but did not get very far. If you are proficient in Perl 6 and would like to have a look at the code, I will be happy to assist&lt;/li&gt;
&lt;li&gt;You could write a data display application that would accept data structures via a socket and present them to the user. It should display multiple renderings and let the user chose which rendering to display. A bit like a log viewer but for data renderings&lt;/li&gt;
&lt;li&gt;Become a co-maintainer and help maintain the module!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-articles-links&#34;&gt;Other articles/links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.perl.org/users/nadim_khemir/2017/08/perl-6-datadumptree-version-15.html&#34;&gt;Perl 6 Data::Dump::Tree version 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.perl.org/users/nadim_khemir/2017/08/take-a-walk-on-the-c-side.html&#34;&gt;Take a walk on the C side, ddt, du du, du du &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perl6advent.wordpress.com/2016/12/21/show-me-the-data/&#34;&gt;Show me the data!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data::Dump::Tree&lt;/code&gt; is the continuation of my Perl 5 module &lt;a href=&#34;https://metacpan.org/pod/Data::TreeDumper&#34;&gt;Data::TreeDumper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - September 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---september-2017/</link>
      <pubDate>Fri, 06 Oct 2017 00:53:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---september-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convenient send Bitcoin from a &lt;a href=&#34;http://www.noodlepi.com/about.html&#34;&gt;NoodlePi&lt;/a&gt; using &lt;a href=&#34;https://metacpan.org/pod/App::NoodlePay&#34;&gt;App::NoodlePay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::SSH::SwitchShell&#34;&gt;App::SSH::SwitchShell&lt;/a&gt; let&amp;rsquo;s you use your preferred shell and own home directory for shared SSH accounts&lt;/li&gt;
&lt;li&gt;Fetch the air date of your favorite TV show&amp;rsquo;s next episode using &lt;a href=&#34;https://metacpan.org/pod/WebService::NextEpisode&#34;&gt;WebService::NextEpisode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Vichan&#34;&gt;WebService::Vichan&lt;/a&gt; is an API client for 4chan and vichan-based imageboards&lt;/li&gt;
&lt;li&gt;A perl PagerDuty client with &lt;a href=&#34;https://metacpan.org/pod/PagerDuty::Agent&#34;&gt;PagerDuty::Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sendmail::AbuseIPDB&#34;&gt;Sendmail::AbuseIPDB&lt;/a&gt; API access for IP address abuse database&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Slack::Notify&#34;&gt;Slack::Notify&lt;/a&gt; can Trigger Slack incoming webhooks&lt;/li&gt;
&lt;li&gt;Splunk HTTP Event Collector (HEC) Client with &lt;a href=&#34;https://metacpan.org/pod/Splunk::HEC&#34;&gt;Splunk::HEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Map Perl releases to location of the tarballs via MetaCPAN API using &lt;a href=&#34;https://metacpan.org/pod/CPAN::Perl::Releases::MetaCPAN&#34;&gt;CPAN::Perl::Releases::MetaCPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::PowerShell::IPC&#34;&gt;Win32::PowerShell::IPC&lt;/a&gt; can interactively manipulate a captive PowerShell process&lt;/li&gt;
&lt;li&gt;Enumerate printers in Windows using &lt;a href=&#34;https://metacpan.org/pod/Win32::EnumPrinters&#34;&gt;Win32::EnumPrinters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Document::OOXML&#34;&gt;Document::OOXML&lt;/a&gt; manipulates of Office Open XML files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::OSM::Render&#34;&gt;Geo::OSM::Render&lt;/a&gt; is a collection of modules to render OpenStreetMap data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Control&#34;&gt;Text::Control&lt;/a&gt; transforms control characters and makes them easy to spot&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Data::Dumper::Extensions&#34;&gt;Acme::Data::Dumper::Extensions&lt;/a&gt; - experimental enhancements Data::Dumper, fun!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Const::Fast::Exporter&#34;&gt;Const::Fast::Exporter&lt;/a&gt; can export Const::Fast immutable variables&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Importer::Zim&#34;&gt;Importer::Zim&lt;/a&gt; can import functions Ã  la Invader Zim. Similar to Import::Box&lt;/li&gt;
&lt;li&gt;Convert lists to hashes extremely fast with &lt;a href=&#34;https://metacpan.org/pod/List::ToHash&#34;&gt;List::ToHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow Moo attributes to be &amp;ldquo;thunked&amp;rdquo; using &lt;a href=&#34;https://metacpan.org/pod/MooX::Thunking&#34;&gt;MooX::Thunking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::AccessorsOnly&#34;&gt;MooseX::AccessorsOnly&lt;/a&gt; can react when users root around inside your objects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/goto::file&#34;&gt;goto::file&lt;/a&gt; Stop parsing the current file and move on to a different one. Woah!&lt;/li&gt;
&lt;li&gt;Build trampolining functions with async/await syntax using &lt;a href=&#34;https://metacpan.org/pod/Async::Trampoline&#34;&gt;Async::Trampoline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lab::VXI11&#34;&gt;Lab::VXI11&lt;/a&gt; Perl interface to VXI-11 test &amp;amp; measurement backend&lt;/li&gt;
&lt;li&gt;Use Pimoroni&amp;rsquo;s Awesome &lt;a href=&#34;https://shop.pimoroni.com/products/unicorn-hat-hd&#34;&gt;Unicorn HAT HD&lt;/a&gt; with &lt;a href=&#34;https://metacpan.org/pod/RPi::UnicornHatHD&#34;&gt;RPi::UnicornHatHD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Emoji::NationalFlag&#34;&gt;Emoji::NationalFlag&lt;/a&gt; convert from country code to national flag emoji&lt;/li&gt;
&lt;li&gt;Extract Strings To PO Files with &lt;a href=&#34;https://metacpan.org/pod/Locale::XGettext&#34;&gt;Locale::XGettext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Cisco&#34;&gt;Crypt::Cisco&lt;/a&gt; provides commands for Cisco Type 7 Passwords&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MEME::Alphabet&#34;&gt;MEME::Alphabet&lt;/a&gt; provides nucleobase alphabet capabilities for Perl code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::OpenAPIRoutes&#34;&gt;Dancer2::Plugin::OpenAPIRoutes&lt;/a&gt; creates routes automatically from a Swagger config file. Cool!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::ReadWriteProcess&#34;&gt;Mojo::IOLoop::ReadWriteProcess&lt;/a&gt; executes external programs or internal code blocks as separate process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Loop&#34;&gt;Mojolicious::Plugin::Loop&lt;/a&gt; provides convenience functions for looping in Mojo templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty Printing Perl 6</title>
      <link>http://localhost:1313/article/pretty-printing-perl-6/</link>
      <pubDate>Wed, 26 Jul 2017 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/pretty-printing-perl-6/</guid>
      <description>&lt;p&gt;As I was working on &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;Learning Perl 6&lt;/a&gt;, I wanted a way to pretty print a hash to show the reader what happened. I didn&amp;rsquo;t want to output from the builtin routines and a module I found was a good start but needed more work. So I created the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I get to my module, Perl 6 already has some nice ways to summarize objects. My first task was to dump a match object to see what it matched. Here&amp;rsquo;s a bit of code that matches a string against a regex and saves the result in &lt;code&gt;$match&lt;/code&gt;. That&amp;rsquo;s a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I output that with &lt;a href=&#34;https://docs.perl6.org/routine/put&#34;&gt;put&lt;/a&gt;, I get the part of the string that matched:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could change the code slightly to use &lt;a href=&#34;https://docs.perl6.org/routine/say&#34;&gt;say&lt;/a&gt;. That&amp;rsquo;s like &lt;code&gt;put&lt;/code&gt; but calls the &lt;a href=&#34;https://docs.perl6.org/routine/gist&#34;&gt;.gist&lt;/a&gt; method on the object first to provide a human-compatible version of the object. Each object can decide on it&amp;rsquo;s own what that means.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match;  &lt;span style=&#34;color:#75715e&#34;&gt;# put $match.gist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the output is almost the same. There are some fancy quotes around it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ï½¢c1ï½£
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of &lt;code&gt;.gist&lt;/code&gt;, which &lt;code&gt;say&lt;/code&gt; gives me for free, I could call the &lt;a href=&#34;https://docs.perl6.org/routine/perl&#34;&gt;perl&lt;/a&gt; method explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;put $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a string that represents what Perl 6 thinks the data structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;https://docs.perl6.org/programs/01-debugging#Dumper_function_dd&#34;&gt;dd&lt;/a&gt;, a Rakudo-specific dumping feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is similar to the string for &lt;code&gt;.perl&lt;/code&gt;, but also slightly different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match $match = Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t particularly like any of formats because they are squished together and rather ugly to my eyes (but being pleasing to me personally shows up in exactly zero designs). I looked for a module, and even though the Perl 6 module ecosystem is fairly young, I found &lt;a href=&#34;https://github.com/drforr/perl6-pp&#34;&gt;Pretty::Printer&lt;/a&gt; from Jeff Goff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pretty::Printer; &lt;span style=&#34;color:#75715e&#34;&gt;# From Jeff Goff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

Pretty::Printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pp: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, I didn&amp;rsquo;t get anything (or, more exactly, I got literally &amp;ldquo;anything&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Any
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Pretty::Printer&lt;/code&gt; was nice for the few data types that it handled, but not a &lt;code&gt;Match&lt;/code&gt; object. It had some builtin handlers that it selected with a &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth) }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth) }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started to work on &lt;code&gt;Pretty::Printer&lt;/code&gt; to add a &lt;code&gt;Match&lt;/code&gt; handler, and then a few others, but I quickly realized I was getting far away from Jeff&amp;rsquo;s original code. Not only that, but I didn&amp;rsquo;t want to add more and more branches to the &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check more derived types first.&lt;/span&gt;
    when Match   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Match($ds,$depth) }
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth)  }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Map     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Map($ds,$depth) }
    when List    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth)  }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I changed my module name to &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump&lt;/a&gt; and ended up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was much more pleased with the output which allowed me easily pick out the part of the object I wanted to inspect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(
  :from(5),
  :hash(Map.new()),
  :list($()),
  :made(Mu),
  :orig(&amp;quot;:::abc123::&amp;quot;),
  :pos(7),
  :to(7)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solves that problem. But what about all the other types? One of my first improvements was a way to dump a class that my module did not know about. I knew about the &lt;code&gt;TO_JSON&lt;/code&gt; method that the Perl 5 &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; module. With that, a class could decide its own JSON representation. I could do that with &lt;code&gt;PrettyDump&lt;/code&gt;. If a class or object has a &lt;code&gt;PrettyDump&lt;/code&gt; method, my module will use that preferentially:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class SomeClass {
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â€¦&lt;/span&gt;
    method PrettyDump ( $pretty, $ds, $depth ) {
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â€¦&lt;/span&gt;
        }
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class doesn&amp;rsquo;t need to define that method. I could decorate an object with a &lt;code&gt;PrettyDump&lt;/code&gt; method through a role. The &lt;a href=&#34;https://docs.perl6.org/language/operators#infix_but&#34;&gt;but&lt;/a&gt; operator can do that for me by creating a new object in a new class that includes that role mixed into the original class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Int $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $a but role {
  method PrettyDump ( $pretty, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({self.^name}) {self}&amp;#34;&lt;/span&gt;;
    }
  };
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $b;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code looks different from Jeff&amp;rsquo;s, but it&amp;rsquo;s not that different. Instead of a &lt;code&gt;given-when&lt;/code&gt;, I have an &lt;code&gt;if&lt;/code&gt; structure. I collapsed Jeff&amp;rsquo;s branches into &lt;code&gt;self.can: $ds.^name&lt;/code&gt; to look for a matching method to the object type (and introduced a bug while doing it. See it?). The first branch looks for the &lt;code&gt;PrettyDump&lt;/code&gt; method. The second does some special handling for numeric things. If none of those work, I &lt;code&gt;die&lt;/code&gt;, which is another stupid thing I did at first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
  put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In dump. Got &amp;#34;&lt;/span&gt;, $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Numeric: $ds, $depth;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not handle &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I kept going. I wanted a way to add (and remove) handlers to a &lt;code&gt;PrettyDump&lt;/code&gt; object. I could add those as roles, but I thought about doing this repeatedly and often and didn&amp;rsquo;t like the idea of the frankenclass that would create. I added a way to do it on my own (although I might change my mind later):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

class SomeClass { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â€¦&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $pretty, $ds, Int $depth = 0 ) {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  }

$pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;handler: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SomeClass&amp;#39;&lt;/span&gt;, $handler;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code added a couple more branches (and some code comments to elucidate the process). First, I&amp;rsquo;d look for a handler. If I&amp;rsquo;d defined one of those, I&amp;rsquo;d use it. Otherwise, I went through the same process. I did add some more checks at the end. If nothing else worked, I try a &lt;code&gt;.Str&lt;/code&gt; method. Instead of &lt;code&gt;die&lt;/code&gt;-ing at the end, I add an &amp;ldquo;unhandled thingy&amp;rdquo; string for that object. That way I know that I didn&amp;rsquo;t handle something and the rest of the program keeps going. That turned out to be more important than I thought. I use this to peek at a program as it executes. It&amp;rsquo;s not part of the program flow and shouldn&amp;rsquo;t interrupt it because my dumping code is incomplete:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, Int $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Str ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the PrettyDump object has a user-defined handler&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for this type, prefer that one&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handles: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;handle: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# The object might have its own method to dump&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# its structure&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
      $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s any sort of Numeric, we&amp;#39;ll handle it&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# and dispatch further&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Numeric: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we have a method name that matches the class, we&amp;#39;ll&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# use that.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
      self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the class inherits from something that we know&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# about, use the most specific one that we know about&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep( { self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $_&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $type {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $type&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can( $what );
        $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;(
         $ds, $depth, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$ds.^name}.new(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
        }
      $str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we&amp;#39;re this far and the object has a .Str method,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# we&amp;#39;ll use that:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Str&amp;#39;&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({$ds.^name}): &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, we&amp;#39;ll put a placeholder method there&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Unhandled {$ds.^name})&amp;#34;&lt;/span&gt;
      }
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I got further into this code, I looked at Perl 5&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;, but discovered that this isn&amp;rsquo;t the same sort of thing. That module outputs Perl code that I could &lt;a href=&#34;https://perldoc.perl.org/functions/eval.html&#34;&gt;eval&lt;/a&gt; to get back the same data structure. I didn&amp;rsquo;t want that &lt;a href=&#34;https://www.masteringperl.org/2012/12/the-storable-security-problem/&#34;&gt;can of worms&lt;/a&gt; in my module.&lt;/p&gt;

&lt;p&gt;Beyond what I&amp;rsquo;ve shown here, I&amp;rsquo;ve been fiddling with formatting and other minor things as I run into problems. If there&amp;rsquo;s something that you&amp;rsquo;d like to do with the code, you can contribute through the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump GitHub repo&lt;/a&gt;, or even fork my code as the basis for your own experiments.&lt;/p&gt;

&lt;p&gt;(Part of this work was supported by a travel grant from &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. I presented talks about my work at &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/pretty-dump-perl-6&#34;&gt;Amsterdam.pm&lt;/a&gt;, &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/dumping-perl-6-french-perl-workshop&#34;&gt;French Perl Workshop 2017&lt;/a&gt;, and &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/prettydump-perl-6-londonpm&#34;&gt;London.pm&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

