<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xlsx on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/xlsx/</link>
    <description>Recent content in Xlsx on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Dec 2016 08:45:26 +0000</lastBuildDate>
    <atom:link href="/tags/xlsx/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - November 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</link>
      <pubDate>Thu, 08 Dec 2016 08:45:26 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Google services via their API with &lt;a href=&#34;https://metacpan.org/pod/API::Google&#34;&gt;API::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::ACME&#34;&gt;Net::ACME&lt;/a&gt; provides client methods for the ACME protocol used by Let&amp;rsquo;s Encrypt&lt;/li&gt;
&lt;li&gt;Two new modules for interacting with Azure services: &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::EventHubs&#34;&gt;Net::Azure::EventHubs&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::NotificationHubs&#34;&gt;Net::Azure::NotificationHubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse Lumberjack protocol frames with &lt;a href=&#34;https://metacpan.org/pod/Net::Lumberjack&#34;&gt;Net::Lumberjack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Mattermost&#34;&gt;AnyEvent::Mattermost&lt;/a&gt; is a non-blocking module for using the Mattermost API&lt;/li&gt;
&lt;li&gt;Get a non-blocking STOMP client using &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Stomper&#34;&gt;AnyEvent::Stomper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Freesound&#34;&gt;WebService::Freesound&lt;/a&gt; is a wrapper for the Freesound OAuth2 API&lt;/li&gt;
&lt;li&gt;Get library data using the Lobid API with &lt;a href=&#34;https://metacpan.org/pod/WebService::Lobid::Organisation&#34;&gt;WebService::Lobid::Organisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Kayako::RestAPI&#34;&gt;Kayako::RestAPI&lt;/a&gt; provides a Perly interface to the Kayako API (customer service platform)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::SwaggerUI&#34;&gt;Alien::SwaggerUI&lt;/a&gt; installs Swagger to render OpenAPI-spec documentation&lt;/li&gt;
&lt;li&gt;Get a REST API for CPAN Testers data using &lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::API&#34;&gt;CPAN::Testers::API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux users: read and write &lt;code&gt;/proc/$pid/maps&lt;/code&gt; files with &lt;a href=&#34;https://metacpan.org/pod/Linux::Proc::Maps&#34;&gt;Linux::Proc::Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::Memory&#34;&gt;Proc::Memory&lt;/a&gt; let&amp;rsquo;s you peek/poke other processes&amp;rsquo; address spaces&lt;/li&gt;
&lt;li&gt;Check the version numbers of Perl modules installed on remote servers using &lt;a href=&#34;https://metacpan.org/pod/Server::Module::Comparison&#34;&gt;Server::Module::Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Search emails in your inbox with &lt;a href=&#34;https://metacpan.org/pod/Email::Folder::Search&#34;&gt;Email::Folder::Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graphics::GVG&#34;&gt;Graphics::GVG&lt;/a&gt; is a lexer/parser for Game Vector Graphics&lt;/li&gt;
&lt;li&gt;Edit animated JPEG files with &lt;a href=&#34;https://metacpan.org/pod/Image::Animated::JPEG&#34;&gt;Image::Animated::JPEG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Repair&#34;&gt;JSON::Repair&lt;/a&gt; recognizes illegal JSON and can repair it to strict compliance&lt;/li&gt;
&lt;li&gt;Easily generate XLSX spreadsheets from data with &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::GenerateXLSX&#34;&gt;Spreadsheet::GenerateXLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Environ&#34;&gt;App::Environ&lt;/a&gt; easily build applications using service the locator pattern&lt;/li&gt;
&lt;li&gt;Get peer-to-peer messaging using &lt;a href=&#34;https://metacpan.org/pod/BeamX::Peer::Emitter&#34;&gt;BeamX::Peer::Emitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::ChatBots&#34;&gt;Bot::ChatBots&lt;/a&gt; is a base system for ChatBots&lt;/li&gt;
&lt;li&gt;Render management speak in IRC with &lt;a href=&#34;https://metacpan.org/pod/Bot::IRC::X::ManagementSpeak&#34;&gt;Bot::IRC::X::ManagementSpeak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sanity-check the calling context using &lt;a href=&#34;https://metacpan.org/pod/Call::Context&#34;&gt;Call::Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Kingpin&#34;&gt;Getopt::Kingpin&lt;/a&gt; is golang kingpin-style command line options parser&lt;/li&gt;
&lt;li&gt;Generate lists lazily with &lt;a href=&#34;https://metacpan.org/pod/List::Lazy&#34;&gt;List::Lazy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert rt.cpan.org tickets to GitHub issues using &lt;a href=&#34;https://metacpan.org/pod/RTx::ToGitHub&#34;&gt;RTx::ToGitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::MCP4725&#34;&gt;Device::Chip::MCP4725&lt;/a&gt; is a chip driver for MCP4725&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Damianware! Code Perl in Latin using &lt;a href=&#34;https://metacpan.org/pod/Lingua::Romana::Perligata&#34;&gt;Lingua::Romana::Perligata&lt;/a&gt; (not strictly a new distribution, just a new version)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::CLI&#34;&gt;API::CLI&lt;/a&gt; is a framework for creating RESTful command line clients&lt;/li&gt;
&lt;li&gt;Run PerlScript/ASP on Catalyst with &lt;a href=&#34;https://metacpan.org/pod/CatalystX::ASP&#34;&gt;CatalystX::ASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::HoboProcess&#34;&gt;Mojo::IOLoop::HoboProcess&lt;/a&gt; spawns subprocesses with MCE::Hobo&lt;/li&gt;
&lt;li&gt;Automatically rotate your Mojo app secrets using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AutoSecrets&#34;&gt;Mojolicious::Plugin::AutoSecrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parse Excel with ease using Perl</title>
      <link>http://localhost:1313/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</link>
      <pubDate>Tue, 05 Aug 2014 13:41:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/108/2014/8/5/Parse-Excel-with-ease-using-Perl/</guid>
      <description>

&lt;p&gt;In the business world, it seems like Excel spreadsheets are everywhere. Recently I had to parse several hundred spreadsheets under a tight deadline for a client. To make matters worse, the spreadsheets were in a mix of Excel 2003 (xls) and 2007 (xlsx) formats. Fortunately I know Perl, and using the Spreadsheet::Read module, it was easy. This article will show you how to use Spreadsheet::Read to parse Excel spreadsheets.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::Read&#34;&gt;Spreadsheet::Read&lt;/a&gt; and a couple of interface modules. &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::ParseExcel&#34;&gt;Spreadsheet::ParseExcel&lt;/a&gt; is an interface for Excel 2003 spreadsheets and &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::XLSX&#34;&gt;Spreadsheet::XLSX&lt;/a&gt; is for reading the modern Excel format. You can install all three modules from the terminal using cpan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Spreadsheet::ParseExcel Spreadsheet::XLSX Spreadsheet::Read&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-spreadsheet-read&#34;&gt;Using Spreadsheet::Read&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s parse the spreadsheet shown in the cover image, which contains an income statement. Spreadsheet::Read provides a simple, unified interface for reading spreadsheets. It exports the &lt;code&gt;ReadData&lt;/code&gt; function which requires a filepath to the spreadsheet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Spreadsheet::Read;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $workbook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReadData(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;income_statement.xlsx&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;$workbook&lt;/code&gt; contains the data structure representing the spreadsheet. We can inspect this structure by printing it with &lt;a href=&#34;https://metacpan.org/pod/Data::Printer&#34;&gt;Data::Printer&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; [
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] {
        error     undef,
        parser    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spreadsheet::XLSX&amp;#34;&lt;/span&gt;,
        sheet     {
            Sheet1   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        },
        sheets    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        type      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xlsx&amp;#34;&lt;/span&gt;,
        version   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.13&lt;/span&gt;
    },
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
        attr     &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
        B1       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Income Statement 2014&amp;#34;&lt;/span&gt;,
        B2       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Revenue&amp;#34;&lt;/span&gt;,
        B3       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cost of goods sold&amp;#34;&lt;/span&gt;,
        B4       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gross profit&amp;#34;&lt;/span&gt;,
        B5       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Financing costs&amp;#34;&lt;/span&gt;,
        B6       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tax&amp;#34;&lt;/span&gt;,
        B7       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Net profit&amp;#34;&lt;/span&gt;,
        cell     [
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;,
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] [
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Income Statement 2014&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Revenue&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cost of goods sold&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gross profit&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Financing costs&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tax&amp;#34;&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Net profit&amp;#34;&lt;/span&gt;
            ],
            [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] undef,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;47500&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;7150&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;10087.5&lt;/span&gt;,
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;30262.5&lt;/span&gt;
            ]
        ],
        C2       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 50,000.00 &amp;#34;&lt;/span&gt;,
        C3       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 2,500.00 &amp;#34;&lt;/span&gt;,
        C4       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 47,500.00 &amp;#34;&lt;/span&gt;,
        C5       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 7,150.00 &amp;#34;&lt;/span&gt;,
        C6       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 10,087.50 &amp;#34;&lt;/span&gt;,
        C7       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; $ 30,262.50 &amp;#34;&lt;/span&gt;,
        label    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sheet1&amp;#34;&lt;/span&gt;,
        maxcol   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
        maxrow   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows that &lt;code&gt;$workbook&lt;/code&gt; is an arrayref, whose first element describes the file, and subsequent elements represent the individual worksheets. The &lt;code&gt;label&lt;/code&gt; key pair contains the worksheet name, access it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{label}; &lt;span style=&#34;color:#75715e&#34;&gt;#Sheet1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cells can be referenced using Excel&amp;rsquo;s grid notation (&amp;ldquo;A3&amp;rdquo;) or via standard Perl array access. The different between these is formatting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{C2}; &lt;span style=&#34;color:#75715e&#34;&gt;#$ 50,000.00&lt;/span&gt;

$workbook&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{cell}[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;#50000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if you need to perform additional processing on the data you&amp;rsquo;re extracting (such as saving to a database), you probably want to use the &lt;code&gt;{cell}&lt;/code&gt; notation, to obtain clean data. With Spreadsheet::Read array indexes begin at 1, so cell &amp;ldquo;C2&amp;rdquo; is [3][2].&lt;/p&gt;

&lt;p&gt;Perhaps you want to loop through two columns at once and print them? No problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$workbook-&amp;gt;[1]{cell}[2][$_]: $workbook-&amp;gt;[1]{cell}[3][$_]\n&amp;#34;&lt;/span&gt;; 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some data points which Spreadsheet::Read does not provide: you cannot access the underlying formula of a cell and the styling data is also not available.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Spreadsheet::Read isn&amp;rsquo;t just great for command line apps, it has many uses. Unlike the Microsoft .Net interop library, Perl&amp;rsquo;s Excel interfaces are not single threaded and do not require Excel to be installed to work. Instead Spreadsheet::Read directly parses the Excel file. That makes it possible to process large computing tasks in parallel. Another possible use case is for a spreadsheet upload interface on a web application; Spreadsheet::Read also supports the Libre / Open Office formats as well as CSV text files.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

