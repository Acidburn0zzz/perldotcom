<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/security/</link>
    <description>Recent content in Security on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2016 20:37:57 +0000</lastBuildDate>
    <atom:link href="/tags/security/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl Jam VI: April Trolls</title>
      <link>http://localhost:1313/article/april_fools/</link>
      <pubDate>Wed, 04 May 2016 20:37:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/april_fools/</guid>
      <description>

&lt;p&gt;For an April Fool&amp;rsquo;s joke, I wanted to parody the &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Perl Jam circus&lt;/a&gt; where the author has an idea that something is wrong but gets the explanation half-wrong. I wrote &lt;a href=&#34;http://perltricks.com/article/perl-jam-iv-return-of-the-camel/&#34;&gt;Perl Jam VI: The Return of the Camel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought I&amp;rsquo;d catch some people out if I was clever enough with the first example and increasingly lazy. I might have been too clever, but I also think that April Fool&amp;rsquo;s is probably over. Not only that, I still felt guilty about not doing the work to explain things properly or giving you proper pointers where to look for good solutions.&lt;/p&gt;

&lt;h4 id=&#34;perl-s-rounding-problem&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h4&gt;

&lt;p&gt;Rounding is a problem for people who really care about numbers and where slight biases in numeric functions can skew results. Most people will probably never care about this because they don&amp;rsquo;t have to care. However, I used to work with scads of data from nuclear physics experiments where it could have mattered.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s particular issue is its reliance on someone else making the decision. When I first starting teaching Perl, many of my students had experience with C. They knew the issues with their libc. &lt;code&gt;perl&lt;/code&gt; defers many decisions on to that libc. This means that you can get different results with a different &lt;code&gt;perl&lt;/code&gt;s. Perl may run virtually everywhere, but it doesn&amp;rsquo;t guarantee you&amp;rsquo;ll get the same answer everywhere.&lt;/p&gt;

&lt;p&gt;There is plenty of literature out there on different methods, and there are more than several methods. Just that fact shows that people don&amp;rsquo;t agree on how it should work. If rounding might impact your results, you should be aware that you have many ways to deal with it. The &lt;a href=&#34;https://metacpan.org/pod/Math::Round&#34;&gt;Math::Round&lt;/a&gt; handles most of them.&lt;/p&gt;

&lt;h4 id=&#34;the-modulus-of-negative-numbers&#34;&gt;The modulus of negative numbers&lt;/h4&gt;

&lt;p&gt;The modulus operator was a bit more interesting since it actually has some problems and undefined behavior. I presented the table of operand combinations and noted which ones are defined in Perl. Some of the situations don&amp;rsquo;t have defined behavior.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t think that many people would take this section seriously since the modulus operator isn&amp;rsquo;t that popular. The &lt;a href=&#34;https://perldoc.perl.org/integer.html&#34;&gt;integer pragma &lt;/a&gt; may fix the problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internally, native integer arithmetic (as provided by your C compiler) is used. This means that Perl&amp;rsquo;s own semantics for arithmetic operations may not be preserved. One common source of trouble is the modulus of negative numbers, which Perl does one way, but your hardware may do another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The StackOverflow question &lt;a href=&#34;https://stackoverflow.com/a/32090446/2766176&#34;&gt;Perl: understanding modulo operation on negative numbers&lt;/a&gt; goes into more detail about Perl&amp;rsquo;s behavior.&lt;/p&gt;

&lt;p&gt;If this matters for your application, you can implement your own modulo operation (perhaps in &lt;a href=&#34;https://metacpan.org/pod/Inline::C&#34;&gt;Inline::C&lt;/a&gt;?) to do it exactly how you like to get the results you expect no matter where you run your program.&lt;/p&gt;

&lt;h4 id=&#34;fake-random-numbers&#34;&gt;Fake random numbers&lt;/h4&gt;

&lt;p&gt;When we say &amp;ldquo;random numbers&amp;rdquo;, experienced programmers generally understand that they aren&amp;rsquo;t actually using numbers that are random. They are &lt;a href=&#34;https://www.random.org/randomness/&#34;&gt;pseudo-random&lt;/a&gt;, although that&amp;rsquo;s too much to say over and over again. We shorten it to &amp;ldquo;random&amp;rdquo; to keep the sentences short. If you are seeding a random number generator, you&amp;rsquo;re using the fake kind.&lt;/p&gt;

&lt;p&gt;For the odd homework assignment or selecting a unique value you haven&amp;rsquo;t used yet, Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; may be fine. If you are doing something where you want real randomness, you don&amp;rsquo;t want something deterministic. You want &amp;ldquo;true&amp;rdquo; random numbers.&lt;/p&gt;

&lt;p&gt;Several modules provide an interface to better sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Random&#34;&gt;Net::Random&lt;/a&gt; can connect to internet services that send back random numbers. You have to trust the internet though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Random&#34;&gt;Crypt::Random&lt;/a&gt; connects to the local &lt;a href=&#34;http://man7.org/linux/man-pages/man4/random.4.html&#34;&gt;/dev/random&lt;/a&gt;. That uses environmental noise to generate bytes. The /dev/urandom device might drop down to pseudo-randomness though. Neither is a good source for long sequences of numbers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;http://www.entropykey.co.uk&#34;&gt;Entropy Key&lt;/a&gt; is a small USB device that helps the &lt;em&gt;/dev/random&lt;/em&gt; device fill up its entropy sink. This allows you to read from the device more frequently without dropping into pseudorandomness.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.random.org/integers/&#34;&gt;Random.org&lt;/a&gt; provides data based on atmospheric noise. In the StackOverflow question &lt;a href=&#34;http://stackoverflow.com/a/4093822/2766176&#34;&gt;How to generate an array with random values, without using a loop?&lt;/a&gt;, I presented a way to override Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; to use this source. Some other answers are illuminating as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with most everything else, there&amp;rsquo;s no answer that covers every use. That you discover other sources is a rite of passage for a programmer.&lt;/p&gt;

&lt;h4 id=&#34;perl-lets-anyone-program&#34;&gt;Perl lets anyone program&lt;/h4&gt;

&lt;p&gt;I joked that Perl&amp;rsquo;s real problem was that it existed, essentially, and that people could use it. It&amp;rsquo;s a variation on the joke about the world&amp;rsquo;s most secure computer is one that&amp;rsquo;s turned off, encased in concrete, and dropped to the bottom of the ocean. And, we&amp;rsquo;re not even sure even then.&lt;/p&gt;

&lt;p&gt;But, I had a more interesting point in mind. Despite any technical limitations or gotchas, documented or not, it&amp;rsquo;s people who make programs and the decisions about what programs will do. Knowing the syntax of a language is a start, but the biggest failures come from human decisions while programming. For entertaining illustrations of this idea, you might like Paul Fenwick&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=73vQglu-4H4&#34;&gt;An Illustrated History of Failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: The Return of the Camel</title>
      <link>http://localhost:1313/article/perl-jam-iv-return-of-the-camel/</link>
      <pubDate>Fri, 01 Apr 2016 08:32:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-jam-iv-return-of-the-camel/</guid>
      <description>

&lt;p&gt;A couple of recent presentations about Perl&amp;rsquo;s security have focused on the &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI module&lt;/a&gt; and &lt;a href=&#34;https://www.bugzilla.org&#34;&gt;Bugzilla&lt;/a&gt;. David Farrell responded to these in &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Netanel Rubin&amp;rsquo;s Perl Jam circus&lt;/a&gt;. There are much worse problems with Perl that we should think about.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-rounding-problem&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s approved way of rounding numbers goes through &lt;code&gt;(s)printf&lt;/code&gt;, but there&amp;rsquo;s a problem. In short, it does the wrong thing.&lt;/p&gt;

&lt;p&gt;Most people were taught the rule that 1, 2, 3, 4 round down to 0, and that 5, 6, 7, 8, and 9 round up to the next 0. That means that more digits round up than round down, introducing a systematic bias into any computations where you might round. You shouldn&amp;rsquo;t have to watch &lt;a href=&#34;http://www.imdb.com/title/tt0086393/&#34;&gt;Superman III&lt;/a&gt; to realize the disasterous global consequences this has.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to round a number. Most want to get to the nearest number, but if you are half way between, there are options. There are more than two ways. There are more than three. There are, well, a lot of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Round half up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half toward zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half away from zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to even&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to odd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half alternately up and down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half stochastically&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the GNU C compiler (or something based on it), you round half to even as the default. Perl relies on this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 1.5
2

$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 2.5
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time you try this you get the same answer (so, no stochastic or alternate rounding). The GNU C compiler can also use floor, ceiling, or truncate, but those have similar problems.&lt;/p&gt;

&lt;p&gt;As you are rounding, you are going to get more even numbers than odd numbers. If you are writing banking software, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.8055&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;assymetric currency rounding&lt;/a&gt; could destabilize a currency. The Risks Digest has several entries for &lt;a href=&#34;http://catless.ncl.ac.uk/php/risks/search.php?query=rounding&#34;&gt;security problems in rounding&lt;/a&gt;. These issues are much worse than some lame &amp;ldquo;attack&amp;rdquo; on CGI.pm because a programmer can&amp;rsquo;t read.&lt;/p&gt;

&lt;h3 id=&#34;the-modulus-of-negative-numbers&#34;&gt;The modulus of negative numbers&lt;/h3&gt;

&lt;p&gt;Among the heated technical debates, such as vi or emacs, tabs or spaces, or Star Wars or Star Trek (the first answer in each is the right one), the ones that matter, such as the correct value of modulo addition with negative numbers, are overlooked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary &amp;ldquo;%&amp;rdquo; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n : If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero).&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;The perldoc documentation for the % operators&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The modulo operators take two numbers and does something to them. For &lt;code&gt;$m % $n&lt;/code&gt;, you have:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$m&lt;/th&gt;
&lt;th&gt;$n&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;lt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;gt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $m, $n ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @ARGV;

$m &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
$n &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m = %d  n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   $m %  $n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -$m %  $n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   $m % -$n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -$m % -$n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;

printf $template,
   $m, $n,
   $m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;$m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
   $m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;$m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this give different results depending on the location of the unary minus operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl modulo.pl 137 12
m = 137  n = 12

   $m %  $n = 5
  -$m %  $n = 7
   $m % -$n = -7
  -$m % -$n = -5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That unary minus operator is two precedence levels above the modulo operator. That Perl makes one operator better than another is a whole other issue, but that&amp;rsquo;s the way it is and we can&amp;rsquo;t fix it now. Try it again. Use the parentheses (a feature Perl stole from LISP, which had some extra to spare) to separate the operators:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $m, $n ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @ARGV;

$m &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
$n &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m = %d  n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $m %  $n  = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -($m %  $n) = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $m % -$n  = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -($m % -$n) = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;

printf $template,
    $m, $n,
    $m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;($m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n),
    $m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;($m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You get different numbers this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m = 137  n = 12

    $m %  $n  = 5
  -($m %  $n) = -5
    $m % -$n  = -7
  -($m % -$n) = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s even worse, because those numbers aren&amp;rsquo;t what the documentation says they should be. &amp;ldquo;If &lt;code&gt;$n&lt;/code&gt; is positive, then &lt;code&gt;$m % $n&lt;/code&gt; is &lt;code&gt;$m&lt;/code&gt; minus the largest multiple of &lt;code&gt;$n&lt;/code&gt; less than or equal to &lt;code&gt;$m&lt;/code&gt;&amp;rdquo;. Let&amp;rsquo;s take the case of -137 and 12. There are a couple of ways to look at this. If a &amp;ldquo;multiple&amp;rdquo; we call &lt;code&gt;$i&lt;/code&gt; must be positive, there is no value such that &lt;code&gt;$n * $i&lt;/code&gt; will be less than or equal to any negative value. If that &lt;code&gt;$i&lt;/code&gt; can be negative, the word &amp;ldquo;largest&amp;rdquo;  is a bit troublesome. Wikipedia says &lt;a href=&#34;https://en.wikipedia.org/wiki/Large_numbers&#34;&gt;large numbers are positive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fake-random-numbers&#34;&gt;Fake random numbers&lt;/h3&gt;

&lt;p&gt;Perl has a &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; function. It claims to return &amp;ldquo;a random fractional number greater than or equal to 0&amp;rdquo;, but it doesn&amp;rsquo;t. It&amp;rsquo;s not random. It&amp;rsquo;s fake random in a way that might work if you only want to use one of them to complete a homework assignment in a beginning programming course in middle school. Although the documentation includes a footnote saying &amp;ldquo;You should not rely on it in security-sensitive situations&amp;rdquo;, it does not say &amp;ldquo;Don&amp;rsquo;t ever use this.&amp;rdquo; like it should. Try this program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -le &#39;srand(137); print rand for 1 .. 10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It outputs some numbers, which might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do you get the same numbers, but you get them in the same order. Perl tries to hide this from you by automatically calling &lt;code&gt;srand&lt;/code&gt; and giving it a &amp;ldquo;random&amp;rdquo; number to start the completely repeatable sequence.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only problem with these fake random numbers (which, again, Perl&amp;rsquo;s documentation never calls &amp;ldquo;fake&amp;rdquo;). They can only represent certain discrete values. See, for instance, the thread that &lt;a href=&#34;https://www.quora.com/Why-does-perl-rand-on-Win32-never-generate-a-value-between-0-890655528357032-and-0-890685315537721&#34;&gt;Why does perl rand() on Win32 never generate a value between 0.890655528357032 and 0.890685315537721?&lt;/a&gt;. On Windows, Perl uses 15 bits to represent the range of the fake random numbers instead of the 53 bits Perl could use.&lt;/p&gt;

&lt;p&gt;There are a variety of ways this can screw up if you use it in an application that keeps going and going. Eventually you come back to the beginning of the sequence, perhaps colliding with existing customer data.&lt;/p&gt;

&lt;h3 id=&#34;perl-lets-anyone-program&#34;&gt;Perl lets anyone program&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest problem with Perl is that anyone with a text editor can write a program and upload it to the internet. It&amp;rsquo;s a feature that Perl allows someone to get their work done, but the problem shows up when someone tries to generalize that to other people&amp;rsquo;s work. Projects such as &lt;a href=&#34;http://nms-cgi.sourceforge.net/&#34;&gt;Not Matt&amp;rsquo;s Scripts&lt;/a&gt; try to mitigate this by fixing the problem one script at a time. There are simply too many scripts to get to in the lifetime of the Universe.&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve made it this far without complaining on Twitter, Reddit, or Hacker News, congratulations. You know what day of the year it is.&lt;/p&gt;

&lt;p&gt;These are real issues, though, and if your application is senstive to small differences in numbers (such as calculating fundamental constants of the universe or pension fund allocations), you&amp;rsquo;re probably using sophisticated number libraries and have various levels of audits to verify the results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple, secure backups with Perl</title>
      <link>http://localhost:1313/article/185/2015/8/27/Simple--secure-backups-with-Perl/</link>
      <pubDate>Thu, 27 Aug 2015 13:09:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/185/2015/8/27/Simple--secure-backups-with-Perl/</guid>
      <description>

&lt;p&gt;Recently I was searching for a backup solution, and ended up rolling my own. The result is &lt;a href=&#34;https://github.com/dnmfarrell/Stasis&#34;&gt;Stasis&lt;/a&gt; a Perl program that uses &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;gpg&lt;/code&gt; to compress and encrypt files.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Stasis takes a list of file and directory paths and builds a temporary compressed gzip archive using &lt;code&gt;tar&lt;/code&gt;. It then encrypts the temporary archive with &lt;code&gt;gpg&lt;/code&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES 256-bit&lt;/a&gt;, saving it to a new location and removes the temporary archive. Stasis supports backups using a passphrase or a GPG key.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say I wanted to backup all files in my main home directories. I&amp;rsquo;d create a text file called &lt;code&gt;files_to_backup.txt&lt;/code&gt;, that contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/dfarrell/Documents
/home/dfarrell/Downloads
/home/dfarrell/Music
/home/dfarrell/Pictures
/home/dfarrell/Videos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can save all of these directories and files to Dropbox:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis --destination ~/Dropbox --files files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or more tersely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use passfile instead of passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passfile /path/to/passfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the &amp;ldquo;referrer&amp;rdquo; argument to provide a GPG key instead of a passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ignore the files matching patterns in &lt;code&gt;.stasisignore&lt;/code&gt;. This is useful if I wanted to ignore certain types of files, like OSX &lt;code&gt;.DS_Store&lt;/code&gt; index files or more broadly, all hidden files: &lt;code&gt;.*&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com -i .stasisignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limiting-the-number-of-backups&#34;&gt;Limiting the number of backups&lt;/h3&gt;

&lt;p&gt;Stasis accepts the &lt;code&gt;--limit&lt;/code&gt; option to only retain the most recent x backups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works really nicely with the &lt;code&gt;--days&lt;/code&gt; option, which tells stasis to only create a new archive if one deosn&amp;rsquo;t already exist within x days. So to keep a months&amp;rsquo; worth of weekly archives, I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4 --days 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now stasis will only retain the last 4 archives, and only create one new archive a week. My personal laptop isn&amp;rsquo;t always on, so I have a cron job that checks for this every 30 minutes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/30 * * * * stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com -l 4 -da 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;restoring-a-backup&#34;&gt;Restoring a backup&lt;/h3&gt;

&lt;p&gt;First decrypt the the backup with &lt;code&gt;gpg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg -d /path/to/backup.tar.gz.gpg &amp;gt; /path/to/output.tar.gz
gpg: AES256 encrypted data
gpg: encrypted with 1 passphrase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GPG will ask for the passphrase or GPG key passphrase to unlock the data. You can then inspect the decrypted archive&amp;rsquo;s files with &lt;code&gt;tar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --list -f /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvtf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To unzip the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvxf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;disadvantages-of-stasis&#34;&gt;Disadvantages of Stasis&lt;/h3&gt;

&lt;p&gt;Stasis suits my needs but it has several drawbacks which mean it might not be ideal for you. For one thing, it creates a standalone, encrypted archive every time it runs instead of incremental backups. Although this is simple, it also wastes space, so consider the implications if you intend to keep many backup copies. Because Stasis creates a temporary copy of the data it archives, it also requires enough disk space to create two compressed archives of the data.&lt;/p&gt;

&lt;p&gt;As Stasis creates a new archive every time, it can be a resource intensive process to backup. On my ultrabook, it takes Stasis about 20 seconds to create a new 400MB new archive. If you are intending to archive large amounts of data, you may need another solution.&lt;/p&gt;

&lt;p&gt;Archive names are fixed and should not be changed. Stasis creates encrypted archives with the ISO 8601 datetime in the filename like:&lt;code&gt;stasis-0000-00-00T00:00:00.tar.gz.gpg&lt;/code&gt;. To detect previous backup files, Stasis looks for files matching this pattern in the backup directory. This comes into play of you use the &lt;code&gt;--limit&lt;/code&gt; option.&lt;/p&gt;

&lt;h3 id=&#34;stasis-cheatsheet&#34;&gt;Stasis cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;stasis [options]

Options:

  --destination -de destination directory to save the encrypted archive to
  --days        -da only create an archive if one doesn&#39;t exist within this many days (optional)
  --files       -f  filepath to a text file of filepaths to backup
  --ignore      -i  filepath to a text file of glob patterns to ignore (optional)
  --limit       -l  limit number of stasis backups to keep in destination directory (optional)
  --passphrase      passphrase to use
  --passfile        filepath to a textfile containing the password to use
  --referrer    -r  name of the gpg key to use (instead of a passphrase or passfile)
  --temp        -t  temp directory path, uses /tmp by default
  --verbose     -v  verbose, print progress statements (optional)
  --help        -h  print this documentation (optional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt;:&lt;em&gt;Added new section covering &amp;ndash;days options, removed scripting section 2016-04-02&lt;/em&gt;
&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your users deserve better than Disqus</title>
      <link>http://localhost:1313/article/104/2014/7/29/Your-users-deserve-better-than-Disqus/</link>
      <pubDate>Tue, 29 Jul 2014 11:46:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/104/2014/7/29/Your-users-deserve-better-than-Disqus/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Occasionally readers of this site will contact us to lament our lack of a commenting system. The message usually goes like this: &amp;ldquo;I love the site but I wish you had a comments section&amp;rdquo;. Some readers even recommend a solution: &amp;ldquo;you should get Disqus&amp;rdquo; they say. We are considering adding a comments system to PerlTricks.com, but it probably won&amp;rsquo;t be Disqus. This article explains why.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-is-disqus&#34;&gt;What is Disqus?&lt;/h3&gt;

&lt;p&gt;Disqus is a third-party commenting system; you add some JavaScript code to your page and when a visitor&amp;rsquo;s browser loads the page, it runs the code which fetches the Disqus interface, and any existing comments from Disqus&amp;rsquo; servers. This makes Disqus easy to install and as such, Disqus is a popular commenting system (&amp;ldquo;used by over 3 million websites&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Disqus solves a lot of problems for the site owner: it has a good spam filter, provides notifications, authentication, a management interface and it looks good. Some users like it too: Disqus notifies users when their comment is replied to for example. For these reasons, when many site owners are facing the prospect of developing their own solution, the ease of installing Disqus makes it a natural choice. Disqus developers seem to have anticipated the typical doubts; concerned about your comments being stored by a third party? No problem, you can download them at any time. For site owners with time or cost pressures, Disqus is a compelling pitch.&lt;/p&gt;

&lt;h3 id=&#34;disqus-drawbacks&#34;&gt;Disqus&amp;rsquo; drawbacks&lt;/h3&gt;

&lt;p&gt;Security is a concern. Disqus&amp;rsquo; popularity makes it an inviting target for hackers as a repeatable exploit will be effective against potentially millions of websites. Exploits for Disqus are regularly discovered, just last &lt;a href=&#34;http://thehackernews.com/2014/06/Disqus-wordpress-plugin-flaw-leaves.html&#34;&gt;month&lt;/a&gt; a remote code execution exploit was found in the Wordpress Disqus plugin that left an estimated 1.4 million sites vulnerable. In December 2013, a &lt;a href=&#34;http://cornucopia-en.cornubot.se/2013/12/flash-disqus-cracked-security-flaw.html&#34;&gt;hack&lt;/a&gt; was published that allows a malicious user to obtain the email address of any Disqus user. As a site owner, you have a responsibility to treat your users well; yet a security hole in Disqus could lead to a hacker posting malicious code on your website, that attacks users as they visit the site (&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;XSS attacks&lt;/a&gt;). Morality aside, who knows what the legal costs for the site owner could be if an attack was successful?&lt;/p&gt;

&lt;p&gt;Disqus is basically a marketing company; they collect vast amounts of user data and sell advertising to third parties. Disqus tracks users across different websites - whether they are entering comments &lt;a href=&#34;http://en.wikipedia.org/wiki/Disqus#Criticism_.26_Privacy_Concerns&#34;&gt;or not&lt;/a&gt;. Once a user has entered a comment with Disqus, they can be tracked (&amp;ldquo;followed&amp;rdquo;) by any other Disqus user, and are not able to opt out. If this is starting to sound creepy to you, it&amp;rsquo;s because it is creepy. Disqus&amp;rsquo; &lt;a href=&#34;https://help.disqus.com/customer/portal/articles/466259-privacy-policy&#34;&gt;privacy policy&lt;/a&gt; for Personally Identifiable Information (PII) makes it clear that Disqus will disclose PII to third parties &amp;ldquo;for the purpose of providing the service to you&amp;rdquo; which sounds reasonable until you stop to question why Disqus would ever need to share PII with a third party. Meanwhile the non-PII that Disqus openly shares with third parties includes: browser cookie data, ip addresses, location and device identifiers. The issue here is that some third parties are so ubiquitous they are a third party to Disqus, but a first party to your users and as such non-PII quickly &lt;a href=&#34;http://cyberlaw.stanford.edu/node/6701&#34;&gt;becomes&lt;/a&gt; PII. You could argue that users of the site are free to block Disqus with tools like NoScript and Ghostery, which is true, but it also prevents the comments section from appearing for those users. What if they want to read the comments without being tracked?&lt;/p&gt;

&lt;p&gt;Most of the features that Disqus provides are easily obtainable elsewhere; need to prevent XSS content? Use &lt;a href=&#34;https://metacpan.org/pod/HTML::Entities&#34;&gt;HTML::Entities&lt;/a&gt; to HTML encode all outgoing comment text. Want to prevent spam? Add a CAPTCHA for new users posting comments. Want a decent-looking comments section? Copy the Disqus style (ha-ha). The problem is that these features are not tied up in one neat package - a developer will have to assemble the disparate components into a solution. That&amp;rsquo;s called software development.&lt;/p&gt;

&lt;p&gt;As a technologist, I see many parallels between Disqus and PHP; they&amp;rsquo;re both so easy to set up but deep-down you know that using them will cost you later. History &lt;a href=&#34;http://www.psychologytoday.com/blog/the-inertia-trap/201302/why-are-people-bad-evaluating-risks&#34;&gt;shows&lt;/a&gt; that humans consistently underestimate risk and in that regard, Disqus is no different. Site owners, don&amp;rsquo;t let the short-term convenience of Disqus get the better of you, your users deserve better. But what do you think? Let us know in the comments section below*.&lt;/p&gt;

&lt;p&gt;*J/k let us know on &lt;a href=&#34;http://www.reddit.com/r/programming/comments/2c19of/your_users_deserve_better_than_disqus/&#34;&gt;Reddit&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/PerlTricks&#34;&gt;Twitter&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/&lt;/span&gt;SecApp_login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::cpanminus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd SecApp_login
$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;installdeps &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Working on &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Configuring SecApp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; Installed dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; Finishing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;secapp_server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl 
HTTP::Server::PSGI: Accepting connections at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_welcome.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_credentials.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_landing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst &lt;span style=&#34;color:#e6db74&#34;&gt;qw/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Static::Simple
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Authentication
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::Store::File
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::State::Cookie
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable X-Catalyst header&lt;/span&gt;
enable_catalyst_header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this method will be called everytime&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt; :Private {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# 404 unless https/testing &amp;amp; request method is GET/HEAD/POST&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;( ( $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secure &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &lt;span style=&#34;color:#e6db74&#34;&gt;/^(?:GET|HEAD|POST)$/&lt;/span&gt;, $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method )
        {
            $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;detach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;);
        }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; : ActionClass(&amp;#39;RenderView&amp;#39;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t require TLS for testing&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt; :Chained(&amp;#39;/&amp;#39;) PathPart(&amp;#39;login&amp;#39;) CaptureArgs(0) {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication code&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication failed, load the login form&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_form&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) GET {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# load the login template&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(template &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.tt&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_columns(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                passphrase &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rfc2307&amp;#39;&lt;/span&gt;,
                passphrase_class &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BlowfishCrypt&amp;#39;&lt;/span&gt;,
                passphrase_args &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
                    salt_random &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                },
                passphrase_check_method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_password&amp;#39;&lt;/span&gt;,
            });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_response 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_response_field};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_challenge 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_challenge_field};

  &lt;span style=&#34;color:#75715e&#34;&gt;# proceed if config has switched off CAPTCHA, or if the submission is valid, proceed&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{enabled} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; Captcha::reCAPTCHA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;check_answer(
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{private_key},
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;address,
                   $captcha_challenge,
                   $captcha_response)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{is_valid})
  {
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password};

    &lt;span style=&#34;color:#75715e&#34;&gt;# if username and passwords were supplied, authenticate&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $password) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;authenticate({ username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username,
                             password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $password } ))
      {
      &lt;span style=&#34;color:#75715e&#34;&gt;# authentication success, check user active and redirect to the secure landing page&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_object&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;active) {
          $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;uri_for($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;controller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;action_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;landing&amp;#39;&lt;/span&gt;)));
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad username or password.&amp;#34;&lt;/span&gt;);
      }
    }
  }
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ilib t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-prevent-brute-force-attacks&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_catpcha.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elements of Access Control</title>
      <link>http://localhost:1313/pub/2008/02/13/elements-of-access-control.html/</link>
      <pubDate>Wed, 13 Feb 2008 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2008/02/13/elements-of-access-control.html/</guid>
      <description>

&lt;h3 id=&#34;why-gates&#34;&gt;Why Gates?&lt;/h3&gt;

&lt;p&gt;In a perfect world we wouldn&amp;rsquo;t do things we should not. However the world is not like this; people do forbidden things sometimes. This also applies to computer systems used by more than one person. Almost everyone has tried to read someone else&amp;rsquo;s email, view accounting department salary reports, or something else, or access otherwise hidden data.&lt;/p&gt;

&lt;p&gt;I know &lt;em&gt;you&lt;/em&gt; have never done this, but many people have.&lt;/p&gt;

&lt;h3 id=&#34;in-construction&#34;&gt;In Construction&lt;/h3&gt;

&lt;p&gt;The simplest way to allow or forbid a user account to do something is to check if the account is in a list of permitted accounts somewhere. If you assume that everything is forbidden unless explicitly allowed, the access function can be as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # access_check() return 1 or undef
  sub access_check
  {
    my $user_id     = shift;
    my @allow_users = @_;

    my %quick_allow = map { $_ =&amp;gt; 1 } @allow_users;

    return $quick_allow{ $user_id };
  }

  my @allowed = ( 11, 12, 23, 45 );

  print &amp;quot;User 23 allowed\n&amp;quot; if access_check( 23, @allowed );
  print &amp;quot;User 13 allowed\n&amp;quot; if access_check( 13, @allowed );
  print &amp;quot;User 99 allowed\n&amp;quot; if access_check( 99, @allowed );

  # only &amp;quot;User 23 allowed&amp;quot; will be printed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually access control can be almost as simple as this function. Using user IDs for access control is simple, but tends to be hard to maintain. The problem appears with systems with many users or with public systems where new users may be created at any point. Access lists may become very large for each operation, which needs access controls.&lt;/p&gt;

&lt;p&gt;One solution to this problem is &lt;em&gt;access groups&lt;/em&gt;. Each user may be a member of several groups. The access check will pass if the user is a member of a group with permission for the required operation. This middle level in the access check isolates users from the access check directly. It also helps the system&amp;rsquo;s design&amp;ndash;you can associate preset access groups with all controlled operations at their point of creation. Subsequently created users only need to be attached to one or more of those groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # mimic real system environment:
  # %ALL_USER_GROUPS represents &amp;quot;storage&amp;quot; that contains all
  # groups that each user is attached to
  my %ALL_USER_GROUPS = (
                    23 =&amp;gt; [ qw( g1  g4 ) ],
                    13 =&amp;gt; [ qw( g3  g5 ) ],
                    );
  # user 23 is in groups g1 and g4
  # user 13 -- in g3 and g5

  # return list of user&#39;s groups. read data from storage or
  # from %ALL_USER_GROUPS in this example
  sub get_user_groups
  {
    my $user_id     = shift;

    return @{ $ALL_USER_GROUPS{ $user_id } || [] };
  }

  # access_check_grp() return 1 or 0
  sub access_check_grp
  {
    my $user_id     = shift;
    my @allow_users = @_;

    my %quick_allow = map { $_ =&amp;gt; 1 } @allow_users;

    my @user_groups = get_user_groups( $user_id );

    for my $group ( @user_groups )
    {
      # user groups is listed, allow
      return 1 if $quick_allow{ $group };
    }

    # user group not found, deny
    return 0;
  }

  # this groups list is static and will not be altered
  # when users are added or removed from the system
  my @allowed = qw( g1  g2  g7  g9 );

  print &amp;quot;User 23 allowed\n&amp;quot; if access_check_grp( 23, @allowed );
  print &amp;quot;User 13 allowed\n&amp;quot; if access_check_grp( 13, @allowed );
  print &amp;quot;User 99 allowed\n&amp;quot; if access_check_grp( 99, @allowed );

  # only &amp;quot;User 23 allowed&amp;quot; will be printed
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storage&#34;&gt;Storage&lt;/h3&gt;

&lt;p&gt;Probably the most popular storage for system data nowadays is the SQL database. Here is a simple example of how to store users, groups, and mapping between them. Three tables are required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  SQL CREATE statements:

  create table user  ( id integer primary key, name char(64), pass char(64) );
  create table group ( id integer primary key, name char(64) );
  create table map   ( user integer, group integer );

  TABLE USER:

   Column |     Type      | Modifiers
  --------+---------------+-----------
   id     | integer       | not null
   name   | character(64) |
   pass   | character(64) |

  TABLE GROUP:

   Column |     Type      | Modifiers
  --------+---------------+-----------
   id     | integer       | not null
   name   | character(64) |

  TABLE MAP:

   Column |  Type   | Modifiers
  --------+---------+-----------
   user   | integer |
   group  | integer |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s fill those tables with some data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  letme=# select id, name from user;
   id |       name
  ----+------------------
    1 | Damian
    2 | Clive
    3 | Lana
  (3 rows)

  letme=# select * from group;
   id |       name
  ----+------------------
    1 | Admin
    2 | Users
    3 | Moderators
  (3 rows)

  letme=# select * from map;
   user | group
  -----+-----
     1 |   1
     1 |   2
     3 |   2
     3 |   3
     2 |   2
  (4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Users in this example are attached to those groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Damian: Users, Admin
  Clive:  Users
  Lana:   Users, Moderators
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-time&#34;&gt;Run-Time&lt;/h3&gt;

&lt;p&gt;Applications apply access control after user login. You can combine it with the login procedure&amp;ndash;for example to allow only specific group of users to connect on weekends. Even so, the access check occurs only after the login succeeds, that is, when the username and password are correct.&lt;/p&gt;

&lt;p&gt;A simple approach for loading required access info is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login, check username and password&lt;/li&gt;
&lt;li&gt;For unsuccessful login, deny access, print message, etc.&lt;/li&gt;
&lt;li&gt;For successful login, load group list for the user from database&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check for required group(s) for login&lt;/p&gt;

&lt;p&gt;This may deny login, print a message, or continue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User logged in, continue&lt;/p&gt;

&lt;p&gt;All access checks for operations happen after this point.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The run-time storage for a user&amp;rsquo;s groups can be simple hash. It can be either global or inside the user session object, depending on your system design. I&amp;rsquo;ve used a global hash here for simplicity of the examples, but if you copy and paste this code, remember that it is &lt;em&gt;mandatory&lt;/em&gt; for you to clear and recreate this global hash for every request right after the login or user session changes! You can also use some kind of session object to drop all user data at the end of the session, but this is just an option, not the only correct or possible way.&lt;/p&gt;

&lt;p&gt;(Also, a truly robust system would store a well-hashed version of the password, not the literal password, but that&amp;rsquo;s a story for a different article.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl
  use strict;
  use DBI;
  use Data::Dumper;

  our $USER_NAME;
  our $USER_ID;
  our %USER_GROUPS;

  my $DBH = DBI-&amp;gt;connect( &amp;quot;dbi:Pg:dbname=letme&amp;quot;, &amp;quot;postgres&amp;quot;, &amp;quot;&amp;quot;,
      { AutoCommit =&amp;gt; 0 } );

  # this is just an example!
  # username and password acquiring depends on the specific application
  user_login( &#39;Damian&#39;, &#39;secret4&#39; );

  print &amp;quot;User logged in: $USER_NAME\n&amp;quot;;
  print &amp;quot;User id:        $USER_ID\n&amp;quot;;
  print &amp;quot;User groups:    &amp;quot; . join( &#39;, &#39;, keys %USER_GROUPS ) . &amp;quot;\n&amp;quot;;

  sub user_login
  {
    my $user_name = shift;
    my $user_pass = shift;

    $USER_NAME   = undef;
    $USER_ID     = undef;
    %USER_GROUPS = ();

    # both name and password are required
    die &amp;quot;Empty user name&amp;quot;     if $user_name eq &#39;&#39;;
    die &amp;quot;Empty user password&amp;quot; if $user_pass eq &#39;&#39;;

    eval
    {
      my $ar = $DBH-&amp;gt;selectcol_arrayref(
          &#39;SELECT ID FROM USER WHERE NAME = ? AND PASS = ?&#39;,
                                        {},
                                        $user_name, $user_pass );

      $USER_ID   = shift @$ar;

      die &amp;quot;Wrong user name or password&amp;quot; unless $USER_ID &amp;gt; 0;

      $USER_NAME = $user_name;

      # loading groups
      my $ar = $DBH-&amp;gt;selectcol_arrayref( &#39;SELECT GROUP FROM MAP WHERE USER = ?&#39;,
                                        {},
                                        $USER_ID );

      %USER_GROUPS = map { $_ =&amp;gt; 1 } @$ar;
    };
    if( $@ )
    {
      # something failed, it is important to clear user data here
      $USER_NAME   = undef;
      $USER_ID     = undef;
      %USER_GROUPS = ();

      # propagate error
      die $@;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Damian&amp;rsquo;s password is correct, this code will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  User logged in: Damian
  User id:        1
  User groups:    1, 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The group access check function now is even simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub check_access
  {
    my $group = shift;
    return 0 unless $group &amp;gt; 0;
    return $USER_GROUPS{ $group };
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample code for an access check after login will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub edit_data
  {
    # require user to be in group 1 (admin) to edit data...
    die &amp;quot;Access denied&amp;quot; unless check_access( 1 );

    # user allowed, group 1 check successful
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if( check_access( 1 ) )
  {
    # user ok
  }
  else
  {
    # access denied
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-instructions&#34;&gt;Access Instructions&lt;/h3&gt;

&lt;p&gt;The next problem is how to define which groups can perform specific operations. Where this information is static (most cases), you can store group lists in configuration (text) files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  LOGIN: 2
  EDIT:  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, the EDIT operation needs group 1 (admin) and LOGIN needs group 2 (all users).&lt;/p&gt;

&lt;p&gt;Another example is to allow only administrators to log in during weekends:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # all users for mon-fri
  LOGIN_WEEKDAYS: 2

  # only admin for sat-sun
  LOGIN_WEEKENDS: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Administrators will be in both groups (1, 2), so they will be able to log in anytime. All regular users cannot login on weekends.&lt;/p&gt;

&lt;p&gt;This group list includes a moderators group. It could be useful to allow moderators do their job on weekends as well, implying an &lt;code&gt;OR&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # only admin or moderators for sat-sun
  LOGIN_WEEKENDS: 1, 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This named set of groups is a &lt;em&gt;policy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For now, there&amp;rsquo;s only one level in the policy and an &lt;code&gt;OR&lt;/code&gt; operation between groups in a list. Real-world policies may be more complex. However there is no need to overdesign this. Even large systems may work with just one more level. Here&amp;rsquo;s an &lt;code&gt;AND&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  LOGIN_WEEKENDS: 1+3, 4, 1+5+9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This policy will match (allowing login on weekend days) only for users in the following groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1 AND 3
  OR 4
  OR 1 AND 5 AND 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The login procedure must match the &lt;code&gt;LOGIN_WEEKENDS&lt;/code&gt; policy before allowing user to continue with other operations. Thus, you need a procedure for reading policy configuration files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  our %ACCESS_POLICY;

  sub read_access_config
  {
    my $fn = shift; # config file name

    open( my $f, $fn );
    while( &amp;lt;$f&amp;gt; )
    {
      chomp;
      next unless /\S/; # skip whitespace
      next if  /^[;#]/; # skip comments

      die &amp;quot;Syntax error: $_\n&amp;quot; unless /^\s*(\S+?):\s*(.+)$/;
      my $n = uc $1; # policy name: LOGIN_WEEKENDS
      my $v =    $2; # groups lsit: 1+3, 4, 1+5+9

      # return list of lists:
      # outer list uses comma separator, inner lists use plus sign separator
      $ACCESS_POLICY{ $n } = access_policy_parse( $v );
    }
    close( $f );
  }

  sub access_policy_parse
  {
    my $policy = shift;
    return [ map { [ split /[\s\+]+/ ] } split /[\s,]+/, $policy ];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;LOGIN_WEEKENDS&lt;/code&gt; policy, the resulting value in &lt;code&gt;%ACCESS_POLICY&lt;/code&gt; will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ACCESS_POLICY{ &#39;LOGIN_WEEKENDS&#39; } =&amp;gt;

                [
                  [ &#39;1&#39;, &#39;3&#39; ],
                  [ &#39;4&#39; ],
                  [ &#39;1&#39;, &#39;5&#39;, &#39;9&#39; ]
                ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To match this policy, a user must be in every groups listed in any of the inner lists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub check_policy
  {
    my $policy = shift;

    my $out_arr = $ACCESS_POLICY{ $policy };
    die &amp;quot;Invalid policy name; $policy\n&amp;quot; unless $out_arr;

    return check_policy_tree( $out_arr );
  }

  sub check_policy_tree
  {
    my $out_arr = shift;

    for my $in_arr ( @$out_arr )
    {

      my $c = 0; # matching groups count
      for my $group ( @$in_arr )
      {
        $c++ if $USER_GROUPS{ $group };
      }

      # matching groups is equal to all groups count in this list
      # policy match!
      return 1 if $c == @$in_arr;
    }

    # if this code is reached then policy didn&#39;t match
    return 0;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example cases will become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub user_login
  {
      # login checks here
      ...

      # login ok, check weekday policy
      my $wday = (localtime())[6];

      my $policy;
      if( $wday == 0 or $wday == 6 )
      {
        $policy = &#39;LOGIN_WEEKEND&#39;;
      }
      else
      {
        $policy = &#39;LOGIN_WEEKDAY&#39;;
      }

      die &amp;quot;Login denied&amp;quot; unless check_policy( $policy );
  }

  sub edit_data
  {
    # require user to be in group 1 (admin) to edit data...
    die &amp;quot;Access denied&amp;quot; unless check_policy( &#39;EDIT&#39; );

    # user allowed, &#39;EDIT&#39; policy match
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have all the parts of a working access control scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Policy configuration syntax&lt;/li&gt;
&lt;li&gt;Policy parser&lt;/li&gt;
&lt;li&gt;User group storage and mapping&lt;/li&gt;
&lt;li&gt;User group loading&lt;/li&gt;
&lt;li&gt;Policy match function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This scheme may seem complete, but it lacks one thing.&lt;/p&gt;

&lt;h3 id=&#34;data-fences&#34;&gt;Data Fences&lt;/h3&gt;

&lt;p&gt;In a multiuser system there is always some kind of ownership on the data stored in the database. This means that each user must see only those parts of the data that his user groups own.&lt;/p&gt;

&lt;p&gt;This ownership problem solution is separate from the policy scheme. Each row must have one or more fields filled with groups that have access to the data. Any SQL statements for reading data must also check for this field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $rg  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $ug  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $sql = &amp;quot;SELECT * FROM TABLE_NAME
             WHERE READ_GROUP IN ( $rg ) AND UPDATE_GROUP IN ( $ug )&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result set will contain only rows with read and update groups inside the current user&amp;rsquo;s group set. Sometimes you may need all of rows with the same read group for display, even though some of those rows have update restrictions the user does not meet. This case will use only the &lt;code&gt;READ_GROUP&lt;/code&gt; field for select and will cut off users when they try to update the record without permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $rg  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $sql = &amp;quot;SELECT * FROM TABLE_NAME WHERE READ_GROUP IN ( $rg )&amp;quot;;

  $sth = $dbh-&amp;gt;prepare( $sql );
  $sth-&amp;gt;execute();
  $hr = $sth-&amp;gt;fetchrow_hashref();

  die &amp;quot;Edit access denied&amp;quot; unless check_access( $hr-&amp;gt;{ &#39;UPDATE_GROUP&#39; } );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When access checks are explicitly after &lt;code&gt;SELECT&lt;/code&gt; statements it is possible to store full policy strings inside &lt;code&gt;CHAR&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $hr = $sth-&amp;gt;fetchrow_hashref();

  die &amp;quot;Edit access denied&amp;quot; unless check_policy_record( $hr, &#39;UPDATE_GROUP&#39; );

  sub check_policy_record
  {
      my $hr     = shift; # hash with record data
      my $field  = shift; # field containing policy string

      my $policy = $hr-&amp;gt;{ $field };
      my $tree   = access_policy_parse( $policy );

      return check_policy_tree( $tree );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in-the-middle-of-nowhere&#34;&gt;In the Middle of Nowhere&lt;/h3&gt;

&lt;p&gt;This access control scheme is simple and usable as described. It does not cover all possible cases of access control, but every application has its own unique needs. In certain cases, you can push some of these access controls to lower levels &amp;ndash; your database, for example &amp;ndash; depending on your needs. Good luck with building your own great wall!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beginners Intro to Perl - Part 6</title>
      <link>http://localhost:1313/pub/2001/01/begperl6.html/</link>
      <pubDate>Tue, 09 Jan 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/01/begperl6.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this venerable series is undergoing updates. You might be interested in the newer versions, available at:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/04/23/a-beginners-introduction-to-perl-510.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/05/07/beginners-introduction-to-perl-510-part-2.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Files and Strings with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.oreilly.com/2008/06/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Regular Expressions with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://broadcast.oreilly.com/2008/09/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl Web Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/10/begperl1.html&#34;&gt;Part 1 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl2.html&#34;&gt;Part 2 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl3.html&#34;&gt;Part 3 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/12/begperl4.html&#34;&gt;Part 4 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/12/begperl5.html&#34;&gt;Part 5 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#doing%20it%20right%20the%20first%20time&#34;&gt;Doing It Right the First Time&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#comments&#34;&gt;Comments&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#warnings&#34;&gt;Warnings&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#taint&#34;&gt;Taint&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#stuff%20taint%20doesn&amp;#39;t%20catch&#34;&gt;Stuff Taint Doesn&#39;t Catch&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#use%20strict&#34;&gt;&lt;code&gt;use strict&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#strict%20vars&#34;&gt;Strict vars&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#strict%20subs&#34;&gt;Strict subs&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#want%20a%20sub,%20get%20a%20string&#34;&gt;Want a Sub, Get a String&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#the%20one%20exception&#34;&gt;The One Exception&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#is%20this%20overkill&#34;&gt;Is This Overkill?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#play%20around!&#34;&gt;Play Around!&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;span-id-doing-it-right-the-first-time-doing-it-right-the-first-time-span&#34;&gt;&lt;span id=&#34;doing it right the first time&#34;&gt;Doing It Right the First Time&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Perl is a useful tool, which many people use to write some good software. But like all programming languages, Perl can also be used to create &lt;em&gt;bad&lt;/em&gt; software. Bad software contains bugs, has security holes and is hard to fix or extend.&lt;/p&gt;

&lt;p&gt;Fortunately, Perl offers you many ways to increase the quality of the programs you write. In this last installment in the Beginner&amp;rsquo;s Intro series, we&amp;rsquo;ll take a look at a few of them.&lt;/p&gt;

&lt;h3 id=&#34;span-id-comments-comments-span&#34;&gt;&lt;span id=&#34;comments&#34;&gt;Comments&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In the first part of this series, we looked at the lowly &lt;code&gt;#&lt;/code&gt;, which indicates a comment. Comments are your first line of defense against bad software, because they help answer the two questions that people always have when they look at source code: What does this program do and how does it do it? Comments should &lt;em&gt;always&lt;/em&gt; be part of any software you write. Complex code with no comments is not &lt;em&gt;automatically&lt;/em&gt; evil, but bring some holy water just in case.&lt;/p&gt;

&lt;p&gt;Good comments are short, but instructive. They tell you things that aren&amp;rsquo;t clear from reading the code. For example, here&amp;rsquo;s some obscure code that could use a comment or two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for $i (@q) {
            my ($j) = fix($i);
            transmit($j);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bad comments would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for $i (@q) { # @q is list from last sub
            my ($j) = fix($i);  # Gotta fix $j...
            transmit($j);  # ...and then it goes over the wire
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that you don&amp;rsquo;t &lt;em&gt;learn&lt;/em&gt; anything from these comments. &lt;code&gt;my  ($j) = fix($i); # Gotta fix $j...&lt;/code&gt; is meaningless, the equivalent of a dictionary that contains a definition like &lt;em&gt;widget (n.): A widget&lt;/em&gt;. &lt;em&gt;What&lt;/em&gt; is &lt;code&gt;@q&lt;/code&gt;? &lt;em&gt;Why&lt;/em&gt; do you have to fix its values? That may be clear from the larger context of the program, but you don&amp;rsquo;t want to skip all around a program to find out what one little line does!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s something a little clearer. Notice that we actually have &lt;em&gt;fewer&lt;/em&gt; comments, but they&amp;rsquo;re more instructive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       # Now that we&#39;ve got prices from database, let&#39;s send them to the buyer
       for $i (@q) {
           my ($j) = fix($i);  # Add local taxes, perform currency exchange
           transmit($j);
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s obvious where &lt;code&gt;@q&lt;/code&gt; comes from, and what &lt;code&gt;fix()&lt;/code&gt; does.&lt;/p&gt;

&lt;h3 id=&#34;span-id-warnings-warnings-span&#34;&gt;&lt;span id=&#34;warnings&#34;&gt;Warnings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Comments are good, but the most important tool for writing good Perl is the ``warnings&amp;rdquo; flag, the &lt;code&gt;-w&lt;/code&gt; command line switch. You can turn on warnings by placing &lt;code&gt;-w&lt;/code&gt; on the first line of your programs like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         #!/usr/local/bin/perl -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you&amp;rsquo;re running a program from the command line, you can use &lt;code&gt;-w&lt;/code&gt; there, as in &lt;code&gt;perl -w myprogram.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Turning on warnings will make Perl yelp and complain at a &lt;em&gt;huge&lt;/em&gt; variety of things that are almost always sources of bugs in your programs. Perl normally takes a relaxed attitude toward things that may be problems; it assumes that you know what you&amp;rsquo;re doing, even when you don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a program that Perl will be perfectly happy to run without blinking, even though it has an error on almost every line! (See how many you can spot.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       #!/usr/local/bin/perl

       $filename = &amp;quot;./logfile.txt&amp;quot;;
       open (LOG, $fn);
       print LOG &amp;quot;Test\n&amp;quot;;
       close LOGFILE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, add the &lt;code&gt;-w&lt;/code&gt; switch to the first line, and run it again. You should see something like this:&lt;/p&gt;

&lt;p&gt;Name ``main::filename&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 3. Name ``main::LOGFILE&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 6. Name ``main::fn&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 4. Use of uninitialized value at ./a6-warn.pl line 4. print on closed filehandle main::LOG at ./a6-warn.pl line 5.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what each of these errors means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Name ``main::filename&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 3.&lt;/em&gt; and &lt;em&gt;Name ``main::fn&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 4.&lt;/em&gt; Perl notices that &lt;code&gt;$filename&lt;/code&gt; and &lt;code&gt;$fn&lt;/code&gt; both only get used once, and guesses that you&amp;rsquo;ve misspelled or misnamed one or the other. This is because this almost always happens because of typos or bugs in your code, like using &lt;code&gt;$filenmae&lt;/code&gt; instead of &lt;code&gt;$filename&lt;/code&gt;, or using &lt;code&gt;$filename&lt;/code&gt; throughout your program except for one place where you use &lt;code&gt;$fn&lt;/code&gt; (like in this program).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Name ``main::LOGFILE&amp;rdquo; used only once: possible typo at ./a6-warn.pl line 6.&lt;/em&gt; In the same way that we made our &lt;code&gt;$filename&lt;/code&gt; typo, we mixed up the names of our filehandles: We use &lt;code&gt;LOG&lt;/code&gt; for the filehandle while we&amp;rsquo;re writing the log entry, but we try to close &lt;code&gt;LOGFILE&lt;/code&gt; instead.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Use of uninitialized value at ./a6-warn.pl line 4.&lt;/em&gt; This is one of Perl&amp;rsquo;s more cryptic complaints, but it&amp;rsquo;s not difficult to fix. This means that you&amp;rsquo;re trying to use a variable before you&amp;rsquo;ve assigned a value to it, and that is almost always an error. When we first mentioned &lt;code&gt;$fn&lt;/code&gt; in our program, it hadn&amp;rsquo;t been given a value yet. You can avoid this type of warning by always setting a &lt;em&gt;default&lt;/em&gt; value for a variable before you first use it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;print on closed filehandle main::LOG at ./a6-warn.pl line 5.&lt;/em&gt; We didn&amp;rsquo;t successfully open &lt;code&gt;LOG&lt;/code&gt;, because &lt;code&gt;$fn&lt;/code&gt; was empty. When Perl sees that we are trying to print something to the &lt;code&gt;LOG&lt;/code&gt; filehandle, it would normally just ignore it and assume that we know what we&amp;rsquo;re doing. But when &lt;code&gt;-w&lt;/code&gt; is enabled, Perl warns us that it suspects there&amp;rsquo;s something afoot.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, how do we fix these warnings? The first step, obviously, is to fix these problems in our script. (And while we&amp;rsquo;re at it, I deliberately violated our rule of always checking if &lt;code&gt;open()&lt;/code&gt; succeeded! Let&amp;rsquo;s fix that, too.) This turns it into:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/local/bin/perl -w

        $filename = &amp;quot;./logfile.txt&amp;quot;;
        open (LOG, $filename) or die &amp;quot;Couldn&#39;t open $filename: $!&amp;quot;;
        print LOG &amp;quot;Test\n&amp;quot;;
        close LOG;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we run our corrected program, and get this back from it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Filehandle main::LOG opened only for input at ./a6-warn2.pl line 5.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Where did &lt;em&gt;this&lt;/em&gt; error come from? Look at our &lt;code&gt;open()&lt;/code&gt;. Since we&amp;rsquo;re not preceding the filename with &amp;gt; or &amp;gt;&amp;gt;, Perl opens the file for &lt;em&gt;reading&lt;/em&gt;, but in the next line we&amp;rsquo;re trying to &lt;em&gt;write&lt;/em&gt; to it with a &lt;code&gt;print&lt;/code&gt;. Perl will normally let this pass, but when warnings are in place, it alerts you to possible problems. Change line 4 to this instead and everything will be great:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       open (LOG, &amp;quot;&amp;gt;&amp;gt;$filename&amp;quot;) or die &amp;quot;Couldn&#39;t open $filename: $!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;-w&amp;gt;&lt;/code&gt; flag is your friend. Keep it on at all times. You may also want to read the &lt;code&gt;&amp;lt;perldiag&amp;gt;&lt;/code&gt; man page, which contains a listing of all the various messages (including warnings) Perl will spit out when it encounters a problem. Each message is accompanied by a detailed description of what the message means and how to fix it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-taint-taint-span&#34;&gt;&lt;span id=&#34;taint&#34;&gt;Taint&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;-w&lt;/code&gt; will help make your Perl programs correct, but it won&amp;rsquo;t help make them &lt;em&gt;secure&lt;/em&gt;. It&amp;rsquo;s possible to write a program that doesn&amp;rsquo;t emit a single warning, but is totally insecure!&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say that you are writing a CGI program that needs to write a user&amp;rsquo;s comment to a user-specified file. You might use something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       #!/usr/local/bin/perl -w

       use CGI &#39;:standard&#39;;

       $file = param(&#39;file&#39;);
       $comment = param(&#39;comment&#39;);

       unless ($file) { $file = &#39;file.txt&#39;; }
       unless ($comment) { $comment = &#39;No comment&#39;; }

       open (OUTPUT, &amp;quot;&amp;gt;&amp;gt;/etc/webstuff/storage/&amp;quot; . $file) or die &amp;quot;$!&amp;quot;;
       print OUTPUT $comment . &amp;quot;\n&amp;quot;;
       close OUTPUT;

       print header, start_html;
       print &amp;quot;&amp;lt;P&amp;gt;Thanks!&amp;lt;/P&amp;gt;\n&amp;quot;;       
       print end_html;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you read the CGI programming installment, alarm bells are already ringing loud enough to deafen you. This program trusts the user to specify only a ``correct&amp;rdquo; filename, and you know better than to trust the user. But nothing in this program will cause &lt;code&gt;-w&lt;/code&gt; to bat an eye; as far as warnings are concerned, this program is completely correct.&lt;/p&gt;

&lt;p&gt;Fortunately, there&amp;rsquo;s a way to block these types of bugs before they become a problem. Perl offers a mechanism called &lt;em&gt;taint&lt;/em&gt; that marks any variable that the user can possibly control as being insecure. This includes user input, file input and environment variables. Anything that you set within your own program is considered safe:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $taint = &amp;lt;STDIN&amp;gt;;   # This came from user input, so it&#39;s tainted
     $taint2 = $ARGV[1]; # The @ARGV array is considered tainted too.
     $notaint = &amp;quot;Hi&amp;quot;;    # But this is in your program... it&#39;s untainted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You enable taint checking with the &lt;code&gt;-T&lt;/code&gt; flag, which you can combine with &lt;code&gt;-w&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      #!/usr/local/bin/perl -Tw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-T&lt;/code&gt; will prevent Perl from running most code that may be insecure. If you try to do various dangerous things with tainted variables, like open a file for writing or use the &lt;code&gt;system()&lt;/code&gt; or &lt;code&gt;exec()&lt;/code&gt; functions to run external commands, Perl will stop right away and complain.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;untaint&lt;/em&gt; a variable by running it through a regex with matching subexpressions, and using the results from the subexpressions. Perl will consider &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; and so forth to be safe for your program.&lt;/p&gt;

&lt;p&gt;For example, our file-writing CGI program may expect that ``sane&amp;rdquo; filenames contain only the alphanumeric characters that are matched by the &lt;code&gt;\w&lt;/code&gt; metacharacter (this would prevent a malicious user from passing a filename like &lt;code&gt;~/.bashrc&lt;/code&gt;, or even &lt;code&gt;../test&lt;/code&gt;). We&amp;rsquo;d use a filter like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       $file = param(&#39;file&#39;);
       if ($file) {
           $file =~ /^(\w+)$/;
           $file = $1;
       }

       unless ($file) { $file = &amp;quot;file.txt&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, &lt;code&gt;$file&lt;/code&gt; is guaranteed to be untainted. If the user passed us a filename, we don&amp;rsquo;t use it until we&amp;rsquo;ve made sure it matches only &lt;code&gt;\w+&lt;/code&gt;. If there was no filename, then we specify a default in our program. As for &lt;code&gt;$comment&lt;/code&gt;, we never actually do anything that would cause Perl&amp;rsquo;s taint checking to worry, so it doesn&amp;rsquo;t need to be checked to pass &lt;code&gt;-T&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-stuff-taint-doesn-t-catch-stuff-taint-doesn-t-catch-span&#34;&gt;&lt;span id=&#34;stuff taint doesn&#39;t catch&#34;&gt;Stuff Taint Doesn&amp;rsquo;t Catch&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Be careful! Even when you&amp;rsquo;ve turned on taint checking, you can still write an insecure program. Remember that taint only gets looked at when you try to &lt;em&gt;modify&lt;/em&gt; the system, by opening a file or running a program. Reading from a file will not trigger taintedness! A &lt;em&gt;very&lt;/em&gt; common breed of security hole exploits code that doesn&amp;rsquo;t look very different from this small program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/local/bin/perl -Tw

        use CGI &#39;:standard&#39;;

        $file = param(&#39;filename&#39;);
        unless ($file) { $file = &#39;file.txt&#39;; }

        open (FILE, &amp;quot;&amp;lt;/etc/webstuff/storage/&amp;quot; . $file) or die &amp;quot;$!&amp;quot;;

        print header();
        while ($line = &amp;lt;FILE&amp;gt;) {
            print $line;
        }

        close FILE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just imagine the joy when the ``filename&amp;rdquo; parameter contains &lt;code&gt;../../../../../../etc/passwd&lt;/code&gt;. (If you don&amp;rsquo;t see the problem: On a Unix system, the &lt;code&gt;/etc/passwd&lt;/code&gt; file contains a list of all the usernames on the system, and may also contain an encrypted list of their passwords. This is great information for crackers who want to get into a machine for further mischief.) Since you are only reading the file, Perl&amp;rsquo;s taint checking doesn&amp;rsquo;t kick in. Similarly, &lt;code&gt;print&lt;/code&gt; doesn&amp;rsquo;t trigger taint checking, so you&amp;rsquo;ll have to write your own value-checking code when you write any user input to a file!&lt;/p&gt;

&lt;p&gt;Taint is a good &lt;em&gt;first&lt;/em&gt; step in security, but it&amp;rsquo;s not the last.&lt;/p&gt;

&lt;h3 id=&#34;span-id-use-strict-use-strict-span&#34;&gt;&lt;span id=&#34;use strict&#34;&gt;&lt;code&gt;use strict&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Warnings and taint are two excellent tools for preventing your programs from doing bad things. If you want to go &lt;em&gt;further&lt;/em&gt;, Perl offers &lt;code&gt;use  strict&lt;/code&gt;. These two simple words can be put at the beginning of any program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/local/bin/perl -wT

        use strict;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A command like &lt;code&gt;use strict&lt;/code&gt; is called a &lt;em&gt;pragma&lt;/em&gt;. Pragmas are instructions to the Perl interpreter to do something special when it runs your program. &lt;code&gt;use strict&lt;/code&gt; does two things that make it harder to write bad software: It makes you declare all your variables (``strict vars&amp;rdquo;), and it makes it harder for Perl to mistake your intentions when you are using subs (``strict subs&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;If you only want to use one or two types of strictness in your program, you can list them in the &lt;code&gt;use strict&lt;/code&gt; pragma, or you can use a special &lt;code&gt;no strict&lt;/code&gt; pragma to turn off any or all of the strictness you enabled earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use strict &#39;vars&#39;;   # We want to require variables to be declared
        no strict &#39;vars&#39;;    # We&#39;ll go back to normal variable rules now

        use strict &#39;subs&#39;;   # We want Perl to distrust barewords (see below).

        no strict;           # Turn it off. Turn it all off. Go away, strict.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(There&amp;rsquo;s actually a third type of strictness - strict refs - which prevents you from using symbolic references. Since we haven&amp;rsquo;t really dealt with references, we&amp;rsquo;ll concentrate on the other two types of strictness.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-strict-vars-strict-vars-span&#34;&gt;&lt;span id=&#34;strict vars&#34;&gt;Strict vars&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl is generally trusting about variables. It will alllow you to create them out of thin air, and that&amp;rsquo;s what we&amp;rsquo;ve been doing in our programs so far. One way to make your programs more correct is to use &lt;em&gt;strict vars&lt;/em&gt;, which means that you must always &lt;em&gt;declare&lt;/em&gt; variables before you use them. You declare variables by using the &lt;code&gt;my&lt;/code&gt; keyword, either when you assign values to them or before you first mention them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my ($i, $j, @locations);
        my $filename = &amp;quot;./logfile.txt&amp;quot;;
        $i = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This use of &lt;code&gt;my&lt;/code&gt; doesn&amp;rsquo;t interfere with using it elsewhere, like in subs, and remember that a &lt;code&gt;my&lt;/code&gt; variable in a sub will be used instead of the one from the rest of your program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my ($i, $j, @locations);
        # ... stuff skipped ...
        sub fix {
            my ($q, $i) = @_;  # This doesn&#39;t interfere with the program $i!
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you end up using a variable &lt;em&gt;without&lt;/em&gt; declaring it, you&amp;rsquo;ll see an error before your program runs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use strict;
        $i = 5;
        print &amp;quot;The value is $i.\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you try to run this program, you see an error message similar to &lt;em&gt;Global symbol ``$i&amp;rdquo; requires explicit package name at a6-my.pl line 3.&lt;/em&gt; You fix this by declaring &lt;code&gt;$i&lt;/code&gt; in your program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use strict;
        my $i = 5;   # Or &amp;quot;my ($i); $i = 5;&amp;quot;, if you prefer...
        print &amp;quot;The value is $i.\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that &lt;em&gt;some&lt;/em&gt; of what strict vars does will overlap with the &lt;code&gt;-w&lt;/code&gt; flag, but not all of it. Using the two together makes it much more difficult, but not impossible, to use an incorrect variable name. For example, strict vars &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; catch it if you accidentally use the &lt;em&gt;wrong&lt;/em&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         my ($i, $ii) = (1, 2);
         print &#39;The value of $ii is &#39;, $i, &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code has a bug, but neither strict vars nor the &lt;code&gt;-w&lt;/code&gt; flag will catch it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-strict-subs-strict-subs-span&#34;&gt;&lt;span id=&#34;strict subs&#34;&gt;Strict subs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;During the course of this series, I&amp;rsquo;ve deliberately avoided mentioning all sorts of tricks that allow you to write more &lt;em&gt;compact&lt;/em&gt; Perl. This is because of a simple rule: &lt;em&gt;readability always wins&lt;/em&gt;. Not only can compactness make it difficult to read code, it can sometimes have weird side effects! The way Perl looks up subs in your program is an example. Take a look at this pair of three-line programs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       $a = test_value;
       print &amp;quot;First program: &amp;quot;, $a, &amp;quot;\n&amp;quot;;
       sub test_value { return &amp;quot;test passed&amp;quot;; }

       sub test_value { return &amp;quot;test passed&amp;quot;; }
       $a = test_value;
       print &amp;quot;Second program: &amp;quot;, $a, &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same program with one little, insignificant line moved, right? In both cases we have a &lt;code&gt;test_value()&lt;/code&gt; sub and we want to put its result into &lt;code&gt;$a&lt;/code&gt;. And yet, when we run the two programs, we get two different results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       First program&#39;s result: test_value
       Second program&#39;s result: test passed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason &lt;em&gt;why&lt;/em&gt; we get two different results is a little convoluted.&lt;/p&gt;

&lt;p&gt;In the first program, at the point we get to &lt;code&gt;$a = test_value;&lt;/code&gt;, Perl doesn&amp;rsquo;t know of any &lt;code&gt;test_value()&lt;/code&gt; sub, because it hasn&amp;rsquo;t gotten that far yet. This means that &lt;code&gt;test_value&lt;/code&gt; is interpreted as if it were the string &amp;lsquo;test_value&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;In the second program, the definition of &lt;code&gt;test_value()&lt;/code&gt; comes &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;$a = test_value;&lt;/code&gt; line. Since Perl has a &lt;code&gt;test_value()&lt;/code&gt; sub to call, that&amp;rsquo;s what it thinks &lt;code&gt;test_value&lt;/code&gt; means.&lt;/p&gt;

&lt;p&gt;The technical term for isolated words like &lt;code&gt;test_value&lt;/code&gt; that might be subs and might be strings depending on context, by the way, is &lt;em&gt;bareword&lt;/em&gt;. Perl&amp;rsquo;s handling of barewords can be confusing, and it can cause two different types of bug.&lt;/p&gt;

&lt;h3 id=&#34;span-id-want-a-sub-get-a-string-want-a-sub-get-a-string-span&#34;&gt;&lt;span id=&#34;want a sub, get a string&#34;&gt;Want a Sub, Get a String&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The first type of bug is what we encountered in our first program, which I&amp;rsquo;ll repeat here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $a = test_value;
        print &amp;quot;First program: &amp;quot;, $a, &amp;quot;\n&amp;quot;;
        sub test_value { return &amp;quot;test passed&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that Perl won&amp;rsquo;t look forward to find &lt;code&gt;test_value()&lt;/code&gt;, so since it hasn&amp;rsquo;t &lt;em&gt;already&lt;/em&gt; seen &lt;code&gt;test_value()&lt;/code&gt;, it assumes that you want a string. Strict subs will cause this program to die with an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use strict;

        my $a = test_value;
        print &amp;quot;Third program: &amp;quot;, $a, &amp;quot;\n&amp;quot;;
        sub test_value { &amp;quot;test passed&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Notice the &lt;code&gt;my&lt;/code&gt; put in to make sure that strict vars won&amp;rsquo;t complain about &lt;code&gt;$a&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Now you get an error message like &lt;em&gt;Bareword ``test_value&amp;rdquo; not allowed while ``strict subs&amp;rdquo; in use at ./a6-strictsubs.pl line 3.&lt;/em&gt; This is easy to fix, and there are two ways to do it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use parentheses to make it clear you&amp;rsquo;re calling a sub. If Perl sees &lt;code&gt;$a = test_value();&lt;/code&gt;, it will assume that even if it hasn&amp;rsquo;t seen &lt;code&gt;test_value()&lt;/code&gt; defined yet, it will sometime between now and the end of the program. (If there isn&amp;rsquo;t any &lt;code&gt;test_value()&lt;/code&gt; in your program, Perl will die while it&amp;rsquo;s running.) This is the easiest thing to do, and often the most readable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Declare your sub before you first use it, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use strict;

    sub test_value;  # Declares that there&#39;s a test_value() coming later ...
    my $a = test_value;  # ...so Perl will know this line is okay.
    print &amp;quot;Fourth program: &amp;quot;, $a, &amp;quot;\n&amp;quot;;
    sub test_value { return &amp;quot;test_passed&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Declaring your subs has the advantage of allowing you to maintain the &lt;code&gt;$a =  test_value;&lt;/code&gt; syntax if that&amp;rsquo;s what you find more readable, but it&amp;rsquo;s also a little obscure. Other programmers may not see why you have &lt;code&gt;sub  test_value;&lt;/code&gt; in your code.&lt;/p&gt;

&lt;p&gt;Of course, you could always move the definition of your sub &lt;em&gt;before&lt;/em&gt; the line where you want to call it. This isn&amp;rsquo;t quite as good as either of the other two methods, because now you are moving code around instead of making your existing code clearer. Also, it can cause &lt;em&gt;other&lt;/em&gt; problems, which we&amp;rsquo;ll discuss now &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;span-id-want-a-string-get-a-sub-want-a-string-get-a-sub-span&#34;&gt;&lt;span id=&#34;want a string, get a sub&#34;&gt;Want a String, Get a Sub&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve seen how &lt;code&gt;use strict&lt;/code&gt; can help prevent an error where you intend to call a sub, but instead get a string value. It also helps prevent the opposite error: wanting a string value, but calling a sub instead. This is a more dangerous class of bug, because it can be &lt;em&gt;very&lt;/em&gt; hard to trace, and it often pops up in the most unexpected places. Take a look at this excerpt from a long program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/local/bin/perl -Tw

        use strict;

        use SomeModule;
        use SomeOtherModule;
        use YetAnotherModule;

        # ... (and then there&#39;s hundreds of lines of code) ...

        # Now we get to line 400 of the program, which tests if we got an &amp;quot;OK&amp;quot;
        # before we act on a request from the user.
        if ($response_code eq OK) {
            act_on($request);
        } else {
            throw_away($request);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program works without a hitch for a long time, because Perl sees the bareword &lt;code&gt;OK&lt;/code&gt; and considers it to be a literal string. Then, two years later someone needs to add code to make this program understand HTTP status codes. They stick this in at line 2, or line 180, or line 399 (it doesn&amp;rsquo;t matter &lt;em&gt;exactly&lt;/em&gt; where, just that it comes before line 400):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub OK { return 200; } # HTTP &amp;quot;request ok, response follows&amp;quot; code
        sub NOT_FOUND { return 404; } # &amp;quot;URL not found&amp;quot; code
        sub SERVER_ERROR { return 500; } # &amp;quot;Server can&#39;t handle request&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a moment to guess what happens to our program now. Try to work the word ``disaster&amp;rdquo; into it.&lt;/p&gt;

&lt;p&gt;Thanks to this tiny change, our program now throws away every request that comes in to it. The &lt;code&gt;if ($response eq OK)&lt;/code&gt; test now calls the &lt;code&gt;OK()&lt;/code&gt; sub, which returns a value of 200. The &lt;code&gt;if&lt;/code&gt; now fails every time! The programmer, if they still have a job after this fiasco, must hunt through the entire program to find out exactly when the behavior of &lt;code&gt;if ($response eq OK)&lt;/code&gt; changed, and why.&lt;/p&gt;

&lt;p&gt;By the way, if the programmer is &lt;em&gt;really&lt;/em&gt; unlucky, that new &lt;code&gt;OK()&lt;/code&gt; sub wouldn&amp;rsquo;t even be in &lt;em&gt;their&lt;/em&gt; code at all, but defined somewhere in a new version of &lt;code&gt;SomeOtherModule.pm&lt;/code&gt; that just got installed!&lt;/p&gt;

&lt;p&gt;Barewords are dangerous because of this unpredictable behavior. &lt;code&gt;use  strict&lt;/code&gt; (or &lt;code&gt;use strict &#39;subs&#39;&lt;/code&gt;) makes them predictable, because barewords that might cause strange behavior in the future will make your program die before they can wreak havoc.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-one-exception-the-one-exception-span&#34;&gt;&lt;span id=&#34;the one exception&#34;&gt;The One Exception&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s &lt;em&gt;one&lt;/em&gt; place where it&amp;rsquo;s OK to use barewords even when you&amp;rsquo;ve turned on strict subs: when you are assigning hash keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $hash{sample} = 6;   # Same as $hash{&#39;sample&#39;} = 6
        %other_hash = ( pie =&amp;gt; &#39;apple&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Barewords in hash keys are always interpreted as strings, so there is no ambiguity.&lt;/p&gt;

&lt;h3 id=&#34;span-id-is-this-overkill-is-this-overkill-span&#34;&gt;&lt;span id=&#34;is this overkill&#34;&gt;Is This Overkill?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There are times when using all of the quality enforcement functionality (or ``correctness police,&amp;rdquo; if you like to anthropmorphize) Perl offers seems like overkill. If you&amp;rsquo;re just putting together a quick, three-line tool that you&amp;rsquo;ll use once and then never touch again, you probably don&amp;rsquo;t care about whether it&amp;rsquo;ll run properly under &lt;code&gt;use strict&lt;/code&gt;. When you&amp;rsquo;re the only person who will run a program, you generally don&amp;rsquo;t care if the &lt;code&gt;-T&lt;/code&gt; flag will show that you&amp;rsquo;re trying to do something unsafe with a piece of user input.&lt;/p&gt;

&lt;p&gt;Still, it&amp;rsquo;s a good idea to use every tool at your disposal to write good software. Here are three reasons to be concerned about correctness when you write just about &lt;em&gt;anything&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;One-off programs aren&amp;rsquo;t.&lt;/em&gt; There are few programs worth writing that only get run once. Software tools tend to accumulate, and get used. You&amp;rsquo;ll find that the more you use a program, the more you want it to do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Other people will read your code.&lt;/em&gt; Whenever programmers write something really good, they tend to keep it around, and give it to friends who have the same problem. More importantly, most projects aren&amp;rsquo;t one-person jobs; there are teams of programmers who need to work together, reading, fixing and extennding one another&amp;rsquo;s code. Unless your plans for the future include always working alone and having no friends, you should expect that other people will someday read and modify your code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;*&lt;strong&gt;You&lt;/strong&gt; will read your code.* Don&amp;rsquo;t think you have a special advantage in understanding your code just because you wrote it! Often you&amp;rsquo;ll need to go back to software you wrote months or even years earlier to fix it or extend it. During that time you&amp;rsquo;ll have forgotten all those clever little tricks you came up with during that caffeine-fueled all-nighter and all the little gotchas that you noticed but thought you would fix later.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three points all have one thing in common: Your programs &lt;em&gt;will&lt;/em&gt; be rewritten and enhanced by people who will appreciate every effort you make to make their job easier. When you make sure your code is readable and correct, it tends to start out much more secure and bug-free, and it tends to stay that way, too!&lt;/p&gt;

&lt;h3 id=&#34;span-id-play-around-play-around-span&#34;&gt;&lt;span id=&#34;play around!&#34;&gt;Play Around!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;During the course of this series, we&amp;rsquo;ve only scratched the surface of what Perl can do. Don&amp;rsquo;t take these articles as being definitive - they&amp;rsquo;re just an introduction! Read the &lt;code&gt;perlfunc&lt;/code&gt; page to learn about all of Perl&amp;rsquo;s built-in functions and see what ideas they inspire. My biography page tells you how to get in touch with me if you have any questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beginners Intro to Perl - Part 4</title>
      <link>http://localhost:1313/pub/2000/12/begperl4.html/</link>
      <pubDate>Wed, 06 Dec 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/12/begperl4.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this venerable series is undergoing updates. You might be interested in the newer versions, available at:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/04/23/a-beginners-introduction-to-perl-510.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/pub/2008/05/07/beginners-introduction-to-perl-510-part-2.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Files and Strings with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.oreilly.com/2008/06/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Regular Expressions with Perl 5.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://broadcast.oreilly.com/2008/09/a-beginners-introduction-to-pe.html&#34;&gt;A Beginner&amp;rsquo;s Introduction to Perl Web Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;it-s-cgi-time&#34;&gt;It&amp;rsquo;s CGI time&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Beginners Intro to Perl&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/10/begperl1.html&#34;&gt;Part 1 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl2.html&#34;&gt;Part 2 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/11/begperl3.html&#34;&gt;Part 3 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/12/begperl5.html&#34;&gt;Part 5 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
•&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/pub/2001/01/begperl6.html&#34;&gt;Part 6 of this series&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#cgi&#34;&gt;What is CGI?&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#cgi_program&#34;&gt;A Real CGI Program&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#uhoh&#34;&gt;Uh-Oh!&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#second_script&#34;&gt;Our Second Script&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#trust&#34;&gt;Trust No One&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#play_around&#34;&gt;Play Around!&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So far, we&amp;rsquo;ve talked about Perl as a language for mangling numbers, strings, and files - the original purpose of the language. Now it&amp;rsquo;s time to talk about what Perl does on the Web. In this installment, we&amp;rsquo;re going to talk about CGI programming.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cgi-what-is-cgi-span&#34;&gt;&lt;span id=&#34;cgi&#34;&gt;What is CGI?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Web is based on a client-server model: your browser (the client) making requests to a Web server. Most of these are simple requests for documents or images, which the server delivers to the browser for display.&lt;/p&gt;

&lt;p&gt;Of course, sometimes you want the server to do more than just dump the contents of a file. You&amp;rsquo;d like to do something with a server-side program - whether that &amp;ldquo;something&amp;rdquo; is using Web-based e-mail, looking up a phone number in a database or ordering a copy of &lt;em&gt;Evil Geniuses in a Nutshell&lt;/em&gt; for your favorite techie. This means the browser must be able to send information (an e-mail address, a name to look up, shipping information for a book) to the server, and the server must be able to use that information and return the results to the user.&lt;/p&gt;

&lt;p&gt;The standard for communication between a user&amp;rsquo;s Web browser and a server-side program running on the Web server is called &lt;strong&gt;CGI&lt;/strong&gt;, or Common Gateway Interface. It is supported by all popular Web server software. To get the most out of this article, you will need to have a server that supports CGI. This may be a server running on your desktop machine or an account with your ISP (though probably not a free Web-page service). If you don&amp;rsquo;t know whether you have CGI capabilities, ask your ISP or a local sysadmin how to set things up.&lt;/p&gt;

&lt;p&gt;Notice that I haven&amp;rsquo;t described how CGI works; that&amp;rsquo;s because you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to know. There&amp;rsquo;s a standard Perl module called &lt;code&gt;CGI.pm&lt;/code&gt; that will handle the CGI protocol for you. CGI.pm is part of the core Perl distribution, and any properly installed Perl should have it available.&lt;/p&gt;

&lt;p&gt;Telling your CGI program that you want to use the CGI module is as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use CGI &#39;:standard&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;use CGI &#39;:standard&#39;;&lt;/code&gt; statement tells Perl that you want to use the CGI.pm module in your program. This will load the module and make a set of CGI functions available for your code.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cgi-program-a-real-cgi-program-span&#34;&gt;&lt;span id=&#34;cgi_program&#34;&gt;A Real CGI Program&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s write our first real CGI program. Instead of doing something complex, we&amp;rsquo;ll write something that will simply throw back whatever we throw at it. We&amp;rsquo;ll call this script &lt;code&gt;backatcha.cgi&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/perl

use CGI &#39;:standard&#39;;

print header();
print start_html();

for $i (param()) {
    print &amp;quot;&amp;lt;b&amp;gt;&amp;quot;, $i, &amp;quot;&amp;lt;/b&amp;gt;: &amp;quot;, param($i), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
}

print end_html();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve never used HTML, the pair of &amp;lt;b&amp;gt; and &amp;lt;/b&amp;gt; tags mean &amp;ldquo;begin bold&amp;rdquo; and &amp;ldquo;end bold&amp;rdquo;, respectively, and the &amp;lt;br&amp;gt; tag means &amp;ldquo;line break.&amp;rdquo; (A good paper reference to HTML is O&amp;rsquo;Reilly&amp;rsquo;s &lt;em&gt;HTML &amp;amp; XHTML: The Definitive Guide&lt;/em&gt;, and online, I like &lt;a href=&#34;http://www.htmlhelp.com/&#34;&gt;the Web Design Group&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Install this program on your server and do a test run. (If you don&amp;rsquo;t have a Web server of your own, we&amp;rsquo;ve put a copy online for you &lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/backatcha.pl&#34;&gt;here&lt;/a&gt;.) Here&amp;rsquo;s a short list of what you do to install a CGI program:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the program is placed where your Web server will recognize it as a CGI script. This may be a special &lt;code&gt;cgi-bin&lt;/code&gt; directory or making sure the program&amp;rsquo;s filename ends in &lt;code&gt;.pl&lt;/code&gt; or &lt;code&gt;.cgi&lt;/code&gt;. If you don&amp;rsquo;t know where to place the program, your ISP or sysadmin should.&lt;/li&gt;
&lt;li&gt;Make sure the program can be run by the server. If you are using a Unix system, you may have to give the Web-server user read and execute permission for the program. It&amp;rsquo;s easiest to give these permissions to everybody by using &lt;code&gt;chmod filename 755&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make a note of the program&amp;rsquo;s URL, which will probably be something like http://&lt;em&gt;server name&lt;/em&gt;/cgi-bin/backatcha.cgi) and go to that URL in your browser. (Take a guess what you should do if you don&amp;rsquo;t know what the URL of the program is. Hint: It involves the words &amp;ldquo;ask,&amp;rdquo; &amp;ldquo;your&amp;rdquo; and &amp;ldquo;ISP.&amp;rdquo;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If this works, you will see in your browser &amp;hellip; a blank page! Don&amp;rsquo;t worry, this is what is &lt;em&gt;supposed&lt;/em&gt; to happen. The &lt;code&gt;backatcha.cgi&lt;/code&gt; script throws back what you throw at it, and we haven&amp;rsquo;t thrown anything at it yet. We&amp;rsquo;ll give it something to show us in a moment.&lt;/p&gt;

&lt;p&gt;If it &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; work, you probably saw either an error message or the source code of the script. We&amp;rsquo;ll try to diagnose these problems in the next section.&lt;/p&gt;

&lt;h3 id=&#34;span-id-uhoh-uh-oh-span&#34;&gt;&lt;span id=&#34;uhoh&#34;&gt;Uh-Oh!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If you saw an error message, your Web server had a problem running the CGI program. This may be a problem with the program or the file permissions.&lt;/p&gt;

&lt;p&gt;First, are you &lt;em&gt;sure&lt;/em&gt; the program has the correct file permissions? Did you set the file permissions on your program to 755? If not, do it now. (Windows Web servers will have a different way of doing this.) Try it again; if you see a blank page now, you&amp;rsquo;re good.&lt;/p&gt;

&lt;p&gt;Second, are you &lt;em&gt;sure&lt;/em&gt; the program actually works? (Don&amp;rsquo;t worry, it happens to the best of us.) Change the &lt;code&gt;use CGI&lt;/code&gt; line in the program to read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use CGI &#39;:standard&#39;, &#39;-debug&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the program from the command line. You should see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(offline mode: enter name=value pairs on standard input)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This message indicates that you&amp;rsquo;re &lt;em&gt;testing&lt;/em&gt; the script. You can now press Ctrl-D to tell the script to continue running without telling it any form items.&lt;/p&gt;

&lt;p&gt;If Perl reports any errors in the script, you can fix them now.&lt;/p&gt;

&lt;p&gt;(The &lt;code&gt;-debug&lt;/code&gt; option is incredibly useful. Use it whenever you have problems with a CGI program, and ignore it at your peril.)&lt;/p&gt;

&lt;p&gt;The other common problem is that you&amp;rsquo;re seeing the source code of your program, not the result of running your program. There are two simple problems that can cause this.&lt;/p&gt;

&lt;p&gt;First, are you &lt;em&gt;sure&lt;/em&gt; you&amp;rsquo;re going through your Web server? If you use your browser&amp;rsquo;s &amp;ldquo;load local file&amp;rdquo; option (to look at something like &lt;code&gt;/etc/httpd/cgi-bin/backatcha.cgi&lt;/code&gt; instead of something like &lt;code&gt;http://localhost/cgi-bin/backatcha.cgi&lt;/code&gt;), you aren&amp;rsquo;t even touching the Web server! Your browser is doing what you &amp;ldquo;wanted&amp;rdquo; to do: loading the contents of a local file and displaying them.&lt;/p&gt;

&lt;p&gt;Second, are you &lt;em&gt;sure&lt;/em&gt; the Web server knows it&amp;rsquo;s a CGI program? Most Web server software will have a special way of designating a file as a CGI program, whether it&amp;rsquo;s a special &lt;code&gt;cgi-bin&lt;/code&gt; directory, the &lt;code&gt;.cgi&lt;/code&gt; or &lt;code&gt;.pl&lt;/code&gt; extension on a file, or something else. Unless you live up to these expectations, the Web server will think the program is a text file, and serve up your program&amp;rsquo;s source code in plain-text form. Ask your ISP for help.&lt;/p&gt;

&lt;p&gt;CGI programs are unruly beasts at the best of times; don&amp;rsquo;t worry if it takes a bit of work to make them run properly.&lt;/p&gt;

&lt;h3 id=&#34;making-the-form-talk-back&#34;&gt;Making the Form Talk Back&lt;/h3&gt;

&lt;p&gt;At this point, you should have a working copy of &lt;code&gt;backatcha.cgi&lt;/code&gt; spitting out blank pages from a Web server. Let&amp;rsquo;s make it actually tell us something. Take the following HTML code and put it in a file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FORM ACTION=&amp;quot;putyourURLhere&amp;quot; METHOD=GET&amp;gt;
    &amp;lt;P&amp;gt;What is your favorite color? &amp;lt;INPUT NAME=&amp;quot;favcolor&amp;quot;&amp;gt;&amp;lt;/P&amp;gt;
&amp;lt;INPUT TYPE=submit VALUE=&amp;quot;Send form&amp;quot;&amp;gt;
lt;/FORM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to replace &lt;code&gt;putyourURLhere&lt;/code&gt; with the actual URL of your copy of &lt;code&gt;backatcha.cgi&lt;/code&gt;! If you want, you can use the &lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/backatcha.pl&#34;&gt;copy installed here&lt;/a&gt; at Perl.com.&lt;/p&gt;

&lt;p&gt;This is a simple form. It will show a text box where you can enter your favorite color and a &amp;ldquo;submit&amp;rdquo; button that sends your information to the server. Load this form in your browser and submit a favorite color. You should see this returned from the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;favcolor: green
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cgi-functions&#34;&gt;CGI functions&lt;/h3&gt;

&lt;p&gt;The CGI.pm module loads several special CGI functions for you. What are these functions?&lt;/p&gt;

&lt;p&gt;The first one, &lt;code&gt;header()&lt;/code&gt;, is used to output any necessary HTTP headers before the script can display HTML output. Try taking this line out; you&amp;rsquo;ll get an error from the Web server when you try to run it. This is &lt;em&gt;another&lt;/em&gt; common source of bugs!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;start_html()&lt;/code&gt; function is there for convenience. It returns a simple HTML header for you. You can pass parameters to it by using a hash, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print $cgi-&amp;gt;start_html( -title =&amp;gt; &amp;quot;My document&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The &lt;code&gt;end_html()&lt;/code&gt; method is similar, but outputs the footers for your page.)&lt;/p&gt;

&lt;p&gt;Finally, the most important CGI function is &lt;code&gt;param()&lt;/code&gt;. Call it with the name of a form item, and a list of all the values of that form item will be returned. (If you ask for a scalar, you&amp;rsquo;ll only get the first value, no matter how many there are in the list.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$yourname = param(&amp;quot;firstname&amp;quot;);
print &amp;quot;&amp;lt;P&amp;gt;Hi, $yourname!&amp;lt;/P&amp;gt;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you call &lt;code&gt;param()&lt;/code&gt; without giving it the name of a form item, it will return a list of &lt;em&gt;all&lt;/em&gt; the form items that are available. This form of &lt;code&gt;param()&lt;/code&gt; is the core of our backatcha script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for $i (param()) {
    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: &amp;quot;, param($i), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, a single form item can have more than one value. You might encounter code like this on the Web site of a pizza place that takes orders over the Web:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;P&amp;gt;Pick your toppings!&amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=pepperoni&amp;gt; Pepperoni &amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=mushrooms&amp;gt; Mushrooms &amp;lt;BR&amp;gt;
       &amp;lt;INPUT TYPE=checkbox NAME=top VALUE=ham&amp;gt; Ham &amp;lt;BR&amp;gt;
    &amp;lt;/P&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Someone who wants all three toppings would submit a form where the form item &lt;code&gt;top&lt;/code&gt; has three values: &amp;ldquo;pepperoni,&amp;rdquo; &amp;ldquo;mushrooms&amp;rdquo; and &amp;ldquo;ham.&amp;rdquo; The server-side code might include this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;&amp;lt;P&amp;gt;You asked for the following pizza toppings: &amp;quot;;
    @top = param(&amp;quot;top&amp;quot;);
    for $i (@top) {
        print $i, &amp;quot;. &amp;quot;;
    }
    print &amp;quot;&amp;lt;/P&amp;gt;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, here&amp;rsquo;s something to watch out for. Take another look at the pizza-topping HTML code. Try pasting that little fragment into the backatcha form, just above the &lt;code&gt;&amp;lt;INPUT TYPE=submit...&amp;gt;&lt;/code&gt; tag. Enter a favorite color, and check all three toppings. You&amp;rsquo;ll see this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    favcolor: burnt sienna
    top: pepperonimushroomsham
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why did this happens? When you call &lt;code&gt;param(&#39;name&#39;)&lt;/code&gt;, you get back a &lt;em&gt;list&lt;/em&gt; of all of the values for that form item. This could be considered a bug in the &lt;code&gt;backatcha.cgi&lt;/code&gt; script, but it&amp;rsquo;s easily fixed - use &lt;code&gt;join()&lt;/code&gt; to separate the item values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: &amp;quot;, join(&#39;, &#39;, param($i)), &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or call C&amp;lt;param()&amp;gt; in a scalar context first to get only the first value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $j = param($i);
    print &amp;quot;&amp;lt;b&amp;gt;$i&amp;lt;/b&amp;gt;: $j
\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always keep in mind that form items can have more than one value!&lt;/p&gt;

&lt;h3 id=&#34;span-id-second-script-our-second-script-span&#34;&gt;&lt;span id=&#34;second_script&#34;&gt;Our Second Script&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So now we know how to build a CGI program, and we&amp;rsquo;ve seen a simple example. Let&amp;rsquo;s write something useful. In the last article, we wrote a pretty good HTTP log analyzer. Why not Web-enable it? This will allow you to look at your usage figures from anywhere you can get to a browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/httpreport.pl&#34;&gt;Download the source code for the HTTP log analyzer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s decide what we want to do with our analyzer. Instead of showing all of the reports we generate at once, we&amp;rsquo;ll show only those the user selects. Second, we&amp;rsquo;ll let the user choose whether each report shows the entire list of items, or the top 10, 20 or 50 sorted by access count.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use a form such as this for our user interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;FORM ACTION=&amp;quot;/cgi-bin/http-report.pl&amp;quot; METHOD=POST&amp;gt;
        &amp;lt;P&amp;gt;Select the reports you want to see:&amp;lt;/P&amp;gt;

 &amp;lt;P&amp;gt;&amp;lt;INPUT TYPE=checkbox NAME=report VALUE=url&amp;gt;URLs requested&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=status&amp;gt;Status codes&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=hour&amp;gt;Requests by hour&amp;lt;BR&amp;gt;
    &amp;lt;INPUT TYPE=checkbox NAME=report VALUE=type&amp;gt;File types
 &amp;lt;/P&amp;gt;

 &amp;lt;P&amp;gt;&amp;lt;SELECT NAME=&amp;quot;number&amp;quot;&amp;gt;
     &amp;lt;OPTION VALUE=&amp;quot;ALL&amp;quot;&amp;gt;Show all
     &amp;lt;OPTION VALUE=&amp;quot;10&amp;quot;&amp;gt;Show top 10
     &amp;lt;OPTION VALUE=&amp;quot;20&amp;quot;&amp;gt;Show top 20
     &amp;lt;OPTION VALUE=&amp;quot;50&amp;quot;&amp;gt;Show top 50
 &amp;lt;/SELECT&amp;gt;&amp;lt;/P&amp;gt;

 &amp;lt;INPUT TYPE=submit VALUE=&amp;quot;Show report&amp;quot;&amp;gt;
    &amp;lt;/FORM&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Remember that you may need to change the URL!)&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re sending two different types of form item in this HTML page. One is a series of checkbox widgets, which set values for the form item &lt;code&gt;report&lt;/code&gt;. The other is a single drop-down list which will assign a single value to &lt;code&gt;number&lt;/code&gt;: either ALL, 10, 20 or 50.&lt;/p&gt;

&lt;p&gt;Take a look at the original HTTP log analyzer. We&amp;rsquo;ll start with two simple changes. First, the original program gets the filename of the usage log from a command-line argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      # We will use a command line argument to determine the log filename.
      $logfile = $ARGV[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We obviously can&amp;rsquo;t do that now, since the Web server won&amp;rsquo;t allow us to enter a command line for our CGI program! Instead, we&amp;rsquo;ll hard-code the value of &lt;code&gt;$logfile&lt;/code&gt;. I&amp;rsquo;ll use &amp;ldquo;/var/log/httpd/access_log&amp;rdquo; as a sample value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $logfile = &amp;quot;/var/log/httpd/access_log&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, we must make sure that we output all the necessary headers to our Web server before we print anything else:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      print header();
      print start_html( -title =&amp;gt; &amp;quot;HTTP Log report&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now look at the &lt;code&gt;report()&lt;/code&gt; sub from our original program. It has one problem, relative to our new goals: It outputs all the reports instead of only the ones we&amp;rsquo;ve selected. We&amp;rsquo;ll rewrite &lt;code&gt;report()&lt;/code&gt; so that it will cycle through all the values of the &lt;code&gt;report&lt;/code&gt; form item and show the appropriate report for each.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sub report {
    for $i (param(&#39;report&#39;)) {
 if ($i eq &#39;url&#39;) {
     report_section(&amp;quot;URL requests&amp;quot;, %url_requests);
 } elsif ($i eq &#39;status&#39;) {
     report_section(&amp;quot;Status code requests&amp;quot;, %status_requests);
 } elsif ($i eq &#39;hour&#39;) {
     report_section(&amp;quot;Requests by hour&amp;quot;, %hour_requests);
 } elsif ($i eq &#39;type&#39;) {
     report_section(&amp;quot;Requests by file type&amp;quot;, %type_requests);
 }
    }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we rewrite the &lt;code&gt;report_section()&lt;/code&gt; sub to output HTML instead of plain text. (We&amp;rsquo;ll discuss the new way we&amp;rsquo;re using &lt;code&gt;sort&lt;/code&gt; in a moment.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub report_section {
 my ($header, %type) = @_;
 my (@type_keys);

 # Are we sorting by the KEY, or by the NUMBER of accesses?
 if (param(&#39;number&#39;) ne &#39;ALL&#39;) {
     @type_keys = sort { $type{$b} &amp;lt;=&amp;gt; $type{$a}; } keys %type;

     # Chop the list if we have too many results
     if ($#type_keys &amp;gt; param(&#39;number&#39;) - 1) {
         $#type_keys = param(&#39;number&#39;) - 1;
     }
 } else {
     @type_keys = sort keys %type;
 }

 # Begin a HTML table
 print &amp;quot;&amp;lt;TABLE&amp;gt;\n&amp;quot;;

 # Print a table row containing a header for the table
 print &amp;quot;&amp;lt;TR&amp;gt;&amp;lt;TH COLSPAN=2&amp;gt;&amp;quot;, $header, &amp;quot;&amp;lt;/TH&amp;gt;&amp;lt;/TR&amp;gt;\n&amp;quot;;

 # Print a table row containing each item and its value
 for $i (@type_keys) {
     print &amp;quot;&amp;lt;TR&amp;gt;&amp;lt;TD&amp;gt;&amp;quot;, $i, &amp;quot;&amp;lt;/TD&amp;gt;&amp;lt;TD&amp;gt;&amp;quot;, $type{$i}, &amp;quot;&amp;lt;/TD&amp;gt;&amp;lt;/TR&amp;gt;\n&amp;quot;;
 }

 # Finish the table
 print &amp;quot;&amp;lt;/TABLE&amp;gt;\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-sorting-sorting-span&#34;&gt;&lt;span id=&#34;sorting&#34;&gt;Sorting&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl allows you to sort lists with the &lt;code&gt;sort&lt;/code&gt; keyword. By default, the sort will happen alphanumerically: numbers before letters, uppercase before lowercase. This is sufficient 99 percent of the time. The other 1 percent of the time, you can write a custom sorting routine for Perl to use.&lt;/p&gt;

&lt;p&gt;This sorting routine is just like a small sub. In it, you compare two special variables, &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;, and return one of three values depending on how you want them to show up in the list. Returning -1 means &amp;ldquo;&lt;code&gt;$a&lt;/code&gt; should come before &lt;code&gt;$b&lt;/code&gt; in the sorted list,&amp;rdquo; 1 means &amp;ldquo;&lt;code&gt;$b&lt;/code&gt; should come before &lt;code&gt;$a&lt;/code&gt; in the sorted list&amp;rdquo; and 0 means &amp;ldquo;they&amp;rsquo;re equal, so I don&amp;rsquo;t care which comes first.&amp;rdquo; Perl will run this routine to compare each pair of items in your list and produce the sorted result.&lt;/p&gt;

&lt;p&gt;For example, if you have a hash called &lt;code&gt;%type&lt;/code&gt;, here&amp;rsquo;s how you might sort its keys in descending order of their &lt;em&gt;values&lt;/em&gt; in the hash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sort {
        if ($type{$b} &amp;gt; $type{$a}) { return 1; }
 if ($type{$b} &amp;lt; $type{$a}) { return -1; }
 return 0;
    } keys %type;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, numeric sorting happens so often, Perl gives you a convenient shorthand for it: the &amp;lt;=&amp;gt; operator. This operator will perform the above comparison between two values for you and return the appropriate value. That means we can rewrite that test as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sort { $type{$b} &amp;lt;=&amp;gt; $type{$a}; } keys %type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(And this, in fact, is what we use in our log analyzer.)&lt;/p&gt;

&lt;p&gt;You can also compare strings with &lt;code&gt;sort&lt;/code&gt;. The &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;gt&lt;/code&gt; operators are the string equivalents of &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;cmp&lt;/code&gt; will perform the same test as &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;. (Remember, string comparisons will sort numbers before letters and uppercase before lowercase.)&lt;/p&gt;

&lt;p&gt;For example, you have a list of names and phone numbers in the format &amp;ldquo;John Doe 555-1212.&amp;rdquo; You want to sort this list by the person&amp;rsquo;s last name, and sort by first name when the last names are the same. This is a job made for &lt;code&gt;cmp&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     @sorted = sort {
         ($c) = ($a =~ / (\w+)/);
  ($d) = ($b =~ / (\w+)/);
  if ($c eq $d) {   # Last names are the same, sort on first name
      ($c) = ($a =~ /^(\w+)/);
      ($d) = ($b =~ /^(\w+)/);
      return $c cmp $d;
  } else {
      return $c cmp $d;
  }
     } @phone_numbers;
     for $i (@sorted) { print $i, &amp;quot;\n&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-trust-trust-no-one-span&#34;&gt;&lt;span id=&#34;trust&#34;&gt;Trust No One&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Now that we know how CGI programs can do what you want, let&amp;rsquo;s make sure they won&amp;rsquo;t do what you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; want. This is harder than it looks, because you can&amp;rsquo;t trust anyone to do what you expect.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example: You want to make sure the HTTP log analyzer will never show more than 50 items per report, because it takes too long to send larger reports to the user. The easy thing to do would be to eliminate the &amp;ldquo;ALL&amp;rdquo; line from our HTML form, so that the only remaining options are 10, 20 and 50. It would be very easy - and wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_12_begperl4/httpsecured.pl&#34;&gt;Download the source code for the HTTP analyzer with security enhancements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We saw that you can modify HTML forms when we pasted the pizza-topping sample code into our backatcha page. You can also use the URL to pass form items to a script - try going to &lt;code&gt;http://www.perl.com/2000/12/backatcha.cgi?itemsource=URL&amp;amp;typedby=you&lt;/code&gt; in your browser. Obviously, if someone can do this with the backatcha script, they can also do it with your log analyzer and stick any value for &lt;code&gt;number&lt;/code&gt; in that they want: &amp;ldquo;ALL&amp;rdquo; or &amp;ldquo;25000&amp;rdquo;, or &amp;ldquo;four score and seven years ago.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Your form doesn&amp;rsquo;t allow this, you say. Who cares? People will write custom HTML forms to exploit weaknesses in your programs, or will just pass bad form items to your script directly. You cannot trust anything users or their browsers tell you.&lt;/p&gt;

&lt;p&gt;You eliminate these problems by knowing what you expect from the user, and &lt;em&gt;disallowing&lt;/em&gt; everything else. Whatever you do not expressly permit is totally forbidden. Secure CGI programs consider everything guilty until it is &lt;em&gt;made&lt;/em&gt; innocent.&lt;/p&gt;

&lt;p&gt;For example, we want to limit the size of reports from our HTTP log analyzer. We decide that means the &lt;code&gt;number&lt;/code&gt; form item must have a value that is between 10 and 50. We&amp;rsquo;ll verify it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Make sure that the &amp;quot;number&amp;quot; form item has a reasonable value
    ($number) = (param(&#39;number&#39;) =~ /(\d+)/);
    if ($number &amp;lt; 10) {
        $number = 10;
    } elsif ($number &amp;gt; 50) {
        $number = 50;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we also have to change the &lt;code&gt;report_section()&lt;/code&gt; sub so it uses the &lt;code&gt;$number&lt;/code&gt; variable. Now, whether your user tries to tell your log analyzer that the value of &lt;code&gt;number&lt;/code&gt; is &amp;ldquo;10,&amp;rdquo; &amp;ldquo;200,&amp;rdquo; &amp;ldquo;432023,&amp;rdquo; &amp;ldquo;ALL&amp;rdquo; or &amp;ldquo;redrum,&amp;rdquo; your program will restrict it to a reasonable value.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to do anything with &lt;code&gt;report&lt;/code&gt;, because we only act when one of its values is something we expected. If the user tries to enter something other than our expressly permitted values (&amp;ldquo;url,&amp;rdquo; &amp;ldquo;status,&amp;rdquo; &amp;ldquo;hour&amp;rdquo; or &amp;ldquo;type&amp;rdquo;), we just ignore it.&lt;/p&gt;

&lt;p&gt;Use this sort of logic everywhere you know what the user &lt;em&gt;should&lt;/em&gt; enter. You might use &lt;code&gt;s/\D//g&lt;/code&gt; to remove non-numeric characters from items that should be numbers (and then test to make sure what&amp;rsquo;s left is within your range of allowable numbers!), or &lt;code&gt;/^\w+$/&lt;/code&gt; to make sure that the user entered a single word.&lt;/p&gt;

&lt;p&gt;All of this has two significant benefits. First, you simplify your error-handling code, because you make sure as early in your program as possible that you&amp;rsquo;re working with valid data. Second, you increase security by reducing the number of &amp;ldquo;impossible&amp;rdquo; values that might help an attacker compromise your system or mess with other users of your Web server.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t just take my word for it, though. The &lt;a href=&#34;http://www.w3.org/Security/Faq/&#34;&gt;CGI Security FAQ&lt;/a&gt; has more information about safe CGI programming in Perl than you ever thought could possibly exist, including a section listing some &lt;a href=&#34;http://www.w3.org/Security/Faq/wwwsf4.html#Q35&#34;&gt;security holes&lt;/a&gt; in real CGI programs.&lt;/p&gt;

&lt;h3 id=&#34;span-id-play-around-play-around-span&#34;&gt;&lt;span id=&#34;play_around&#34;&gt;Play Around!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You should now know enough about CGI programming to write a useful Web application. (Oh, and you learned a little bit more about sorting and comparison.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write the quintessential CGI program: a guestbook. Users enter their name, e-mail address and a short message, which is appended to an HTML file for all to see.&lt;/p&gt;

&lt;p&gt;Be careful! Never trust the user! A good beginning precaution is to &lt;em&gt;disallow all HTML&lt;/em&gt; by either removing &amp;lt; and &amp;gt; characters from all of the user&amp;rsquo;s information or replacing them with the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; character entities.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;substr()&lt;/code&gt;, too, to cut anything the user enters down to a reasonable size. Asking for a &amp;ldquo;short&amp;rdquo; message will do nothing to prevent the user dumping a 500k file into the message field!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write a program that plays tic-tac-toe against the user. Be sure that the computer AI is in a sub so it can be easily upgraded. (You&amp;rsquo;ll probably need to study HTML a bit to see how to output the tic-tac-toe board.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>

