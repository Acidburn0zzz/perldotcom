<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Module Build Makemaker on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/module-build-makemaker/</link>
    <description>Recent content in Module Build Makemaker on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Feb 2003 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/module-build-makemaker/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Module::Build</title>
      <link>http://localhost:1313/pub/2003/02/12/module1.html/</link>
      <pubDate>Wed, 12 Feb 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/02/12/module1.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Dave Rolsky is a co-author of the recently released &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was originally published in February of 2003, and was updated by Dave Rolsky and Michael Schwern in January, 2008.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever created a Perl module for distribution on CPAN, you&amp;rsquo;ve used the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; module. This venerable module goes back to the dawn of modern Perl, which began with the release of Perl 5.000.&lt;/p&gt;

&lt;p&gt;Recently, Ken Williams has created a potential replacement for &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; called &lt;code&gt;Module::Build&lt;/code&gt;, which was first released in August of 2002. Hugo van der Sanden, the pumpking for the current development version of Perl, has expressed interest in replacing &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; with &lt;code&gt;Module::Build&lt;/code&gt; for the 5.10 release of Perl, and Michael Schwern, the current &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; maintainer, agrees with him. &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; won&amp;rsquo;t go away any time soon, but we can hope for a gradual transition to a new and improved build system.&lt;/p&gt;

&lt;h2 id=&#34;span-id-why-extutils-makemaker-is-important-why-extutils-makemaker-is-important-span&#34;&gt;&lt;span id=&#34;why_extutils::makemaker_is_important&#34;&gt;Why ExtUtils::MakeMaker is Important&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; module, along with the &lt;code&gt;h2xs&lt;/code&gt; script, has been a huge boon to the Perl community, as it makes it possible to have a &lt;em&gt;standard&lt;/em&gt; way to distribute and install Perl modules. It automates many tasks that module authors would otherwise have to to implement by hand, such as turning XS into C, compiling that C code, generating man pages from POD, running a module&amp;rsquo;s test suite, and of course, installing the module.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is a huge part of what makes PAUSE and CPAN possible, and it is quite a programming feat. Python did not have a similar utility until the September, 1999 release of distutils, PHP&amp;rsquo;s PEAR didn&amp;rsquo;t begin until mid-2000, and Ruby is just beginning to work on a standard library distribution mechanism.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-scary-guts-of-extutils-makemaker-the-scary-guts-of-extutils-makemaker-span&#34;&gt;&lt;span id=&#34;the_scary_guts_of_extutils::makemaker&#34;&gt;The Scary Guts of ExtUtils::MakeMaker&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; works by generating a makefile that contains targets for the various tasks needed when maintaining or installing a module. Here&amp;rsquo;s an example target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  install :: all pure_install doc_install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with makefile syntax, you&amp;rsquo;ll realize that all this target does is call three other targets, which are named &amp;ldquo;all&amp;rdquo;, &amp;ldquo;pure_install&amp;rdquo;, and &amp;ldquo;doc_install&amp;rdquo;. These targets in turn may call other targets, or use system commands to do whatever action is needed, in this case installing the module and its associated documentation.&lt;/p&gt;

&lt;p&gt;The makefiles generated by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; are fairly complex. For example, using version 6.05 of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; to install my &lt;code&gt;Exception::Class&lt;/code&gt; module, a pure Perl distribution containing just one module, creates a makefile with about 390 lines of makefile code. Figuring out what this makefile actually does is no simple feat, because it consists of a maze of twisty macros, all alike, many of which simply call Perl one-liners from the command line to perform some task.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; code itself is extremely complicated, as it works on many operating systems (almost as many as Perl itself), and needs to accommodate their file systems, command line shells, different versions of make, and so on. And this is all done with an extra layer of indirection in place, because it is generating a makefile which does all the work.&lt;/p&gt;

&lt;p&gt;If you want to customize the module build or installation process, good luck. To do this, you must subclass &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, override methods that generate specific makefile targets, and then tweak the generated text to include your custom behavior, all the while preserving the basic behavior of the target. Considering that there is no documentation describing what to expect from these targets, and that the actual target text may change between releases of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; or between different OS&amp;rsquo;s, this can be quite painful to implement and maintain.&lt;/p&gt;

&lt;p&gt;And by the way, you can&amp;rsquo;t really subclass &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, instead you are subclassing the &lt;code&gt;MY&lt;/code&gt; package. This is a deeply strange hack, but the end result is that you can only override certain pre-defined methods in &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;HTML::Mason&lt;/code&gt; module includes this snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package MY;

  sub test {
      my $self = shift;

      my $test = $self-&amp;gt;SUPER::test(@_);

      # %MY::APACHE is set in makeconfig.pl.
      # If we are not going to test with Apache there is no harm in
      # setting this anyway.

      # The PORT env var is used by Apache::test.  Don&#39;t delete it!
      my $port = $MY::APACHE{port} || 8228;
      $MY::APACHE{apache_dir} ||= &amp;quot;;

      my $is_maintainer = main::is_maintainer();

      # This works for older MakeMakers
      $test =~ s/(runtests \@ARGV;)/\$\$ENV{MASON_VERBOSE} ==
      \$(TEST_VERBOSE) ? \$(TEST_VERBOSE) : \$\$ENV{MASON_VERBOSE};
      \$\$ENV{PORT}=$port;
      \$\$ENV{APACHE_DIR}=q^$MY::APACHE{apache_dir}^;
      \$\$ENV{MASON_MAINTAINER}=$is_maintainer; $1/;

      my $bs = $^O =~ /Win32/i ? &amp;quot; : &#39;\\&#39;;

      # This works for newer MakeMakers (5.48_01 +)
      $test =~ s/(&amp;quot;-MExtUtils::Command::MM&amp;quot; &amp;quot;-e&amp;quot; &amp;quot;)
      (test_harness\(\$\(TEST_VERBOSE\).*?\)&amp;quot;
      \$\(TEST_FILES\))/$1 $bs\$\$ENV{MASON_VERBOSE} == \$(TEST_VERBOSE) ?
      \$(TEST_VERBOSE) : $bs\$\$ENV{MASON_VERBOSE}; $bs\$\$ENV{PORT}=$port;
      $bs\$\$ENV{APACHE_DIR}=q^$MY::APACHE{apache_dir}^;
      $bs\$\$ENV{MASON_MAINTAINER}=$is_maintainer; $2/;

      return $test;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal of all this code is to pass some additional environment information to the test scripts when they are run, so we can do tests with a live Apache server. It accommodates several versions of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and attempts to work properly on multiple operating systems (at least Win32 and *nix), and it has to be careful about escaping things properly so that it executes properly from the shell.&lt;/p&gt;

&lt;h2 id=&#34;span-id-why-not-perl-why-not-perl-span&#34;&gt;&lt;span id=&#34;why_not_perl&#34;&gt;Why not Perl?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;All of this prompts the question of &amp;ldquo;why not just use Perl itself for all of this?&amp;rdquo; That&amp;rsquo;s exactly the question that Ken Williams answered with &lt;code&gt;Module::Build&lt;/code&gt;. The goal of &lt;code&gt;Module::Build&lt;/code&gt; is to do everything useful that &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; does, but to do this all with pure Perl wherever possible.&lt;/p&gt;

&lt;p&gt;This greatly simplifies the build system code, and &lt;code&gt;Module::Build&lt;/code&gt; works on systems which don&amp;rsquo;t normally include make, like Win32 and Mac OS. Of course, if a module installation requires the compilation of C code, you&amp;rsquo;ll still need an external C compiler.&lt;/p&gt;

&lt;p&gt;Additionally, customizing &lt;code&gt;Module::Build&lt;/code&gt;&amp;rsquo;s behavior is often quite trivial, and only requires that you know Perl, as opposed to knowing make syntax and possibly having to learn about multiple command line environments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; also aims to improve on some of the features provided by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;. One example is its prerequisite-checking system, which provides much more flexibility than what &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; allows. While these features could be added to &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, it&amp;rsquo;s risky to make major changes to such an important module, especially one with such complex internals.&lt;/p&gt;

&lt;h2 id=&#34;span-id-using-module-build-using-module-build-span&#34;&gt;&lt;span id=&#34;using_module::build&#34;&gt;Using Module::Build&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;From an end-user perspective, a module that uses &lt;code&gt;Module::Build&lt;/code&gt; looks quite a bit like one using &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and intentionally so. So to install a module using &lt;code&gt;Module::Build&lt;/code&gt; you&amp;rsquo;d type the following lines from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl Build.PL
  ./Build
  ./Build test
  ./Build install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;Build.PL&lt;/em&gt; script tells &lt;code&gt;Module::Build&lt;/code&gt; to create a &lt;em&gt;Build&lt;/em&gt; script. During this process, &lt;code&gt;Module::Build&lt;/code&gt; also writes some files to a &lt;em&gt;_build/&lt;/em&gt; directory. These files are used to store the build system&amp;rsquo;s state between invocations of the &lt;em&gt;Build&lt;/em&gt; script. This script, when invoked, simply loads up &lt;code&gt;Module::Build&lt;/code&gt; again, and tells it to perform the specified action. An action is the &lt;code&gt;Module::Build&lt;/code&gt; version of a makefile target, and actions are implemented in pure Perl whenever possible.&lt;/p&gt;

&lt;p&gt;A bare bones &lt;em&gt;Build.PL&lt;/em&gt; script might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Module::Build;

  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;module_name&amp;rdquo; parameter is like the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; &amp;ldquo;NAME&amp;rdquo; parameter.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;license&amp;rdquo; parameter is new with &lt;code&gt;Module::Build&lt;/code&gt;, and its intended use it allow automated tools to determine under which license your module is distributed.&lt;/p&gt;

&lt;p&gt;To determine your module&amp;rsquo;s version, &lt;code&gt;Module::Build&lt;/code&gt; looks in the module specified by the &amp;ldquo;module_name&amp;rdquo; parameter, though this can be overridden either by specifying a different module to look in, or by providing the version number directly.&lt;/p&gt;

&lt;p&gt;Of course, there are more options than those. For example, &lt;code&gt;Module::Build&lt;/code&gt; implements a prerequisite feature similar to that implemented by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, so we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; 2.1013,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have any experience with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, you can probably figure out that this says that our module requires any version of &lt;code&gt;CGI&lt;/code&gt;, and version 2.1013 or greater of &lt;code&gt;DBD::mysql&lt;/code&gt;. So far, this looks just like what &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; provides, but &lt;code&gt;Module::Build&lt;/code&gt; goes further.&lt;/p&gt;

&lt;p&gt;Consider what happens if we know that we need some piece of functionality first present in &lt;code&gt;DBD::mysql&lt;/code&gt; 2.1013. But perhaps a release after this, 2.1014, introduced a new bug that breaks our application. If this bug is fixed in version 2.1015, we &lt;em&gt;could&lt;/em&gt; simply require version 2.1015, but this is not ideal. There&amp;rsquo;s no reason to force someone who already has 2.1013 to upgrade because of a bug in a version they don&amp;rsquo;t have.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code&gt;Module::Build&lt;/code&gt; provides a more flexible version specification option that handles exactly this situation, so we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; &#39;&amp;gt;= 2.1013, != 2.1014&#39;,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says that we need a version greater than 2.1013 that &lt;strong&gt;is not&lt;/strong&gt; version 2.1014. Users who have version 2.1013 or version 2.1015 or greater are not forced to upgrade, but anyone with 2.1014 will be.&lt;/p&gt;

&lt;p&gt;If we knew that version 3.0 didn&amp;rsquo;t work with your module, we could change our specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; &#39;&amp;gt;= 2.1013, != 2.1014, &amp;lt; 3.0&#39;,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user does have version 3.0 or greater installed, it will at least let them know that it won&amp;rsquo;t work with our module. Unfortunately, the only possible way to use our module at this point is for the end user to manually downgrade their installation of &lt;code&gt;DBD::mysql&lt;/code&gt;, since Perl does not allow multiple versions of a module to co-exist peacefully. Still, this is better than letting the module be installed, only to fail at runtime when it tries to use an outdated API for &lt;code&gt;DBD::mysql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also other options related to prerequisites, such as &amp;ldquo;recommends&amp;rdquo; and &amp;ldquo;build_requires&amp;rdquo;, which can be helpful for prerequisites that are required to build the module but don&amp;rsquo;t need to be present after installation. There is also a &amp;ldquo;conflicts&amp;rdquo; option which can be used to warn a user about potential conflicts between the module they are installing and one they already have.&lt;/p&gt;

&lt;h2 id=&#34;span-id-action-action-span&#34;&gt;&lt;span id=&#34;action!&#34;&gt;Action!&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;As of release 1.15, Module::Build implements the following actions, most of which are based on existing &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_build&#34;&gt;build&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the default action, and is what happens if you run &lt;em&gt;./Build&lt;/em&gt; without any additional arguments. It is responsible for creating the &lt;em&gt;blib/&lt;/em&gt; directory and copying files into it, as well as compiling XS and C files. If you have any scripts like &lt;em&gt;lib/My/Module.pm.PL&lt;/em&gt;, these are also run during this action.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_test%2c_testdb&#34;&gt;test, testdb&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Runs the module&amp;rsquo;s tests using the &lt;code&gt;Test::Harness&lt;/code&gt; module. The &amp;ldquo;testdb&amp;rdquo; action can be used to run the tests under Perl&amp;rsquo;s debugger. Equivalently, a &amp;ldquo;debugger&amp;rdquo; parameter can be passed to the &amp;ldquo;test&amp;rdquo; action to get the same effect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_clean%2c_realclean&#34;&gt;clean, realclean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both actions delete any files created by the &amp;ldquo;build&amp;rdquo; action. The &amp;ldquo;realclean&amp;rdquo; action also deletes the existing &lt;em&gt;Build&lt;/em&gt; script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_diff&#34;&gt;diff&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This action is used to compare the files about to be installed with any corresponding files that already exist. This feature is unique to &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_install&#34;&gt;install&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installs the module files. As of version 0.15, this doesn&amp;rsquo;t yet create or install any man pages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_fakeinstall&#34;&gt;fakeinstall&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what the &amp;ldquo;install&amp;rdquo; would do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_dist&#34;&gt;dist&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creates a gzip&amp;rsquo;d tarball of your distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_manifest&#34;&gt;manifest&lt;/span&gt;&lt;/strong&gt;
Creates a &lt;em&gt;MANIFEST&lt;/em&gt; file for your distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distcheck&#34;&gt;distcheck&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what files are in the build directory but not in the &lt;em&gt;MANIFEST&lt;/em&gt; file, and vice versa.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_skipcheck&#34;&gt;skipcheck&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what files will not be added to the &lt;em&gt;MANIFEST&lt;/em&gt; by the &amp;ldquo;manifest&amp;rdquo; action, based on the contents of your &lt;em&gt;MANIFEST.SKIP&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distclean&#34;&gt;distclean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a shortcut for &amp;ldquo;realclean&amp;rdquo; followed by &amp;ldquo;distcheck&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distdir&#34;&gt;distdir&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creates a directory based on your distribution name and version, and then copies all the files listed in &lt;em&gt;MANIFEST&lt;/em&gt; to that directory. This directory is what people will see when they download and unpack your distribution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; also creates a file called &lt;em&gt;META.yaml&lt;/em&gt; which contains meta-data about your distribution. In the future, it may be possible to use a command line tool (written in Perl, of course) to read this file and use its contents to install your distribution, without running the &lt;em&gt;Build.PL&lt;/em&gt; script. It also makes the meta-data more readily available to tools like MetaCPAN or the CPAN shell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_disttest&#34;&gt;disttest&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This performs the &amp;ldquo;distdir&amp;rdquo; action, switches to the newly created directory, and then runs &lt;code&gt;perl Build.PL&lt;/code&gt;, &lt;code&gt;./Build&lt;/code&gt;, and &lt;code&gt;./Build test&lt;/code&gt;. This lets you make sure that your distribution is actually installable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_help&#34;&gt;help&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what actions are available. If additional actions are implemented in a distribution, then these are listed here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any of these options can be overridden through straightforward subclassing, so our &lt;code&gt;HTML::Mason&lt;/code&gt; example from earlier in this article might be written something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package MyFancyBuilder;

  use base &#39;Module::Build&#39;;

  sub ACTION_test {
      my $self = shift;

      # %MY::APACHE is set in makeconfig.pl.

      $ENV{PORT}             = $MY::APACHE{port}       || 8228;
      $ENV{APACHE_DIR}       = $MY::APACHE{apache_dir} || &amp;quot;;
      $ENV{MASON_VERBOSE}  ||= $self-&amp;gt;{properties}{verbose};
      # _is_maintainer_mode would be another method of our subclass
      $ENV{MASON_MAINTAINER} = $self-&amp;gt;_is_maintainer_mode();

      return $self-&amp;gt;SUPER::ACTION_test(@_);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version is actually readable, and is unlikely to break regardless of changes in the &lt;code&gt;Module::Build&lt;/code&gt; internals. This highlights just how difficult it was to accomplish a simple task using &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and how natural the pure-Perl solution can be.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-larger-picture-and-backwards-compatibility-the-larger-picture-and-backwards-compatibility-span&#34;&gt;&lt;span id=&#34;the_larger_picture_and_backwards_compatibility&#34;&gt;The Larger Picture and Backwards Compatibility&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;One difficulty in getting &lt;code&gt;Module::Build&lt;/code&gt; into widespread use is the fact that support for &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is so tightly integrated into CPAN installers.&lt;/p&gt;

&lt;p&gt;While the version of &lt;code&gt;CPAN.pm&lt;/code&gt; which ships with 5.8 does not know how to deal with Build.PL, the latest version available from CPAN does. It will even install &lt;code&gt;Module::Build&lt;/code&gt; for you. As of January 2008, &lt;code&gt;CPANPLUS&lt;/code&gt;, another CPAN shell, understands &lt;em&gt;Build.PL&lt;/em&gt; but will not install &lt;code&gt;Module::Build&lt;/code&gt; for you, but this will be remedied in a future release.&lt;/p&gt;

&lt;p&gt;However, old versions of &lt;code&gt;CPAN.pm&lt;/code&gt; are still in extremely widespread use, and users won&amp;rsquo;t necessarily upgrade &lt;code&gt;CPAN.pm&lt;/code&gt; before attempting to install a distribution that relies on &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple workarounds for this problem. The simplest is to just include a &lt;em&gt;Build.PL&lt;/em&gt; script and document this in the &lt;em&gt;README&lt;/em&gt; or &lt;em&gt;INSTALL&lt;/em&gt; files included with your distribution. This has the appeal of requiring of very little work to implement, but the downside is that people who expect things to just work with a CPAN shell will give up when your distribution doesn&amp;rsquo;t install properly.&lt;/p&gt;

&lt;p&gt;Another possibility is to create functionally equivalent &lt;em&gt;Build.PL&lt;/em&gt; and &lt;em&gt;Makefile.PL&lt;/em&gt; scripts. If you&amp;rsquo;re using &lt;code&gt;Module::Build&lt;/code&gt; because you need to customize installation behavior in a way that is difficult to do with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, this pretty much defeats the purpose of using &lt;code&gt;Module::Build&lt;/code&gt; at all, and in any case having two separate pieces of code that do the same thing is always unappealing.&lt;/p&gt;

&lt;p&gt;Then there&amp;rsquo;s the approach which involves using a &lt;em&gt;Makefile.PL&lt;/em&gt; script that simply installs &lt;code&gt;Module::Build&lt;/code&gt; if needed, and then generates a &lt;em&gt;Makefile&lt;/em&gt; that passes everything through to the &lt;em&gt;./Build&lt;/em&gt; script. This is known as the &amp;ldquo;passthrough&amp;rdquo; method.&lt;/p&gt;

&lt;p&gt;I think this approach gives the best result for the effort involved, and is the method I prefer. The &lt;code&gt;Module::Build&lt;/code&gt; distribution includes a &lt;code&gt;Module::Build::Compat&lt;/code&gt; module, which does the dirty work needed for this approach.&lt;/p&gt;

&lt;p&gt;Simply add &lt;code&gt;create_makefile_pl =&amp;gt; &#39;passthrough&#39;&lt;/code&gt; to the &lt;em&gt;Build.PL&lt;/em&gt; parameters and a &lt;em&gt;Makefile.PL&lt;/em&gt; will be created as part of the &lt;code&gt;Build dist&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of such a &lt;em&gt;Makefile.PL&lt;/em&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Note: this file was auto-generated by Module::Build::Compat version 0.03

    unless (eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; ) {
      print &amp;quot;This module requires Module::Build to install itself.\n&amp;quot;;

      require ExtUtils::MakeMaker;
      my $yn = ExtUtils::MakeMaker::prompt
        (&#39;  Install Module::Build now from CPAN?&#39;, &#39;y&#39;);

      unless ($yn =~ /^y/i) {
        die &amp;quot; *** Cannot install without Module::Build.  Exiting ...\n&amp;quot;;
      }

      require Cwd;
      require File::Spec;
      require CPAN;

      # Save this &#39;cause CPAN will chdir all over the place.
      my $cwd = Cwd::cwd();

      CPAN::Shell-&amp;gt;install(&#39;Module::Build::Compat&#39;);
      CPAN::Shell-&amp;gt;expand(&amp;quot;Module&amp;quot;, &amp;quot;Module::Build::Compat&amp;quot;)-&amp;gt;uptodate
        or die &amp;quot;Couldn&#39;t install Module::Build, giving up.\n&amp;quot;;

      chdir $cwd or die &amp;quot;Cannot chdir() back to $cwd: $!&amp;quot;;
    }
    eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; or die $@;

    Module::Build::Compat-&amp;gt;run_build_pl(args =&amp;gt; \@ARGV);
    require Module::Build;
    Module::Build::Compat-&amp;gt;write_makefile(build_class =&amp;gt; &#39;Module::Build&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what exactly is going on here? A good question indeed. Let&amp;rsquo;s walk through some of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    unless (eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; ) {
      print &amp;quot;This module requires Module::Build to install itself.\n&amp;quot;;

      require ExtUtils::MakeMaker;
      my $yn = ExtUtils::MakeMaker::prompt
        (&#39;  Install Module::Build now from CPAN?&#39;, &#39;y&#39;);

      unless ($yn =~ /^y/i) {
        die &amp;quot; *** Cannot install without Module::Build.  Exiting ...\n&amp;quot;;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first attempts to load version 0.02 or greater of the &lt;code&gt;Module::Build::Compat&lt;/code&gt; module. If it isn&amp;rsquo;t installed we know we need to install &lt;code&gt;Module::Build&lt;/code&gt;. Because we&amp;rsquo;re polite, we ask the user if they would like to install &lt;code&gt;Module::Build&lt;/code&gt; before going further. Some people dislike interactive installations, but fortunately the promp() command is pretty smart about detecting if there&amp;rsquo;s a user at the end of the line.&lt;/p&gt;

&lt;p&gt;Assuming that the user agrees to install &lt;code&gt;Module::Build&lt;/code&gt; (if they don&amp;rsquo;t the installer has to give up) this is what comes next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      # Save this &#39;cause CPAN will chdir all over the place.
      my $cwd = Cwd::cwd();

      CPAN::Shell-&amp;gt;install(&#39;Module::Build::Compat&#39;);
      CPAN::Shell-&amp;gt;expand(&amp;quot;Module&amp;quot;, &amp;quot;Module::Build::Compat&amp;quot;)-&amp;gt;uptodate
        or die &amp;quot;Couldn&#39;t install Module::Build, giving up.\n&amp;quot;;

      chdir $cwd or die &amp;quot;Cannot chdir() back to $cwd: $!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to use &lt;code&gt;CPAN.pm&lt;/code&gt; to actually install &lt;code&gt;Module::Build&lt;/code&gt;, but we need to first save our current directory, because &lt;code&gt;CPAN.pm&lt;/code&gt; calls &lt;code&gt;chdir()&lt;/code&gt; quite a bit, and we&amp;rsquo;ll need to be in the same directory as we started in after installing &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we load &lt;code&gt;CPAN.pm&lt;/code&gt; and tell it to install &lt;code&gt;Module::Build&lt;/code&gt;. After that, we &lt;code&gt;chdir()&lt;/code&gt; back to our original directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; or die $@;

    Module::Build::Compat-&amp;gt;run_build_pl(args =&amp;gt; \@ARGV);
    require Module::Build;
    Module::Build::Compat-&amp;gt;write_makefile(build_class =&amp;gt; &#39;Module::Build&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First it checks that the &lt;code&gt;Module::Build&lt;/code&gt; install worked. Then it simply tells &lt;code&gt;Module::Build::Compat&lt;/code&gt; to run the &lt;em&gt;Build.PL&lt;/em&gt; script, and to write out a &amp;ldquo;passthrough&amp;rdquo; &lt;em&gt;Makefile&lt;/em&gt;. &lt;code&gt;Module::Build::Compat&lt;/code&gt; will attempt to convert &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; style arguments, like &amp;ldquo;PREFIX&amp;rdquo;, to arguments that &lt;code&gt;Module::Build&lt;/code&gt; can understand, like &amp;ldquo;&amp;ndash;prefix&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;passthrough&amp;rdquo; &lt;em&gt;Makefile&lt;/em&gt; that &lt;code&gt;Module::Build::Compat&lt;/code&gt; generates looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  all :
          ./Build
  realclean :
          ./Build realclean
          rm -f \$(THISFILE)
  .DEFAULT :
          ./Build \$@
  .PHONY   : install manifest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;.DEFAULT&amp;rdquo; target is called when there is no matching make target for the one given on the command line. It uses the &amp;ldquo;$@&amp;rdquo; make variable, which will contain the name of the target that was passed to make. So if &amp;ldquo;make install&amp;rdquo; is called, then &amp;ldquo;$@&amp;rdquo; contains &amp;ldquo;install&amp;rdquo;, and it ends up running &amp;ldquo;./Build install&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The generated Makefile also contains a comment which specifies the module&amp;rsquo;s prerequisites, because this is how &lt;code&gt;CPAN.pm&lt;/code&gt; figures out what a module&amp;rsquo;s prerequisites are (scary but true).&lt;/p&gt;

&lt;p&gt;This approach is the most elegant of all, but the code that translates &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; arguments to something &lt;code&gt;Module::Build&lt;/code&gt; understands is quite minimal and won&amp;rsquo;t handle all possibilities.&lt;/p&gt;

&lt;p&gt;I have used this approach for one CPAN module, &lt;code&gt;Thesaurus.pm&lt;/code&gt;, and in my limited testing it did work. If you are inclined to try installing this module, please send bug reports to me or the &lt;code&gt;Module::Build&lt;/code&gt; users list, &lt;code&gt;module-build-general@lists.sf.net&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recently, Autrijus Tang submitted a more complex &lt;em&gt;Makefile.PL&lt;/em&gt; script which implements several pieces of additional functionality. First of all, it makes sure that the script is running as a user that can actually install &lt;code&gt;Module::Build&lt;/code&gt;. Second, it prefers &lt;code&gt;CPANPLUS.pm&lt;/code&gt; to &lt;code&gt;CPAN.pm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Autrijus&amp;rsquo; script looks promising, but since it hasn&amp;rsquo;t yet been tested, I&amp;rsquo;ve chosen not to include it here. It&amp;rsquo;s quite likely that some version of his script will be documented in future versions of &lt;code&gt;Module::Build&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-custom-behavior-custom-behavior-span&#34;&gt;&lt;span id=&#34;custom_behavior&#34;&gt;Custom Behavior&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;As was hinted at earlier, you can directly subclass &lt;code&gt;Module::Build&lt;/code&gt; in order to implement custom behavior. This is a big topic unto itself, and will be the topic of a future article here on perl.com.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-future-the-future-span&#34;&gt;&lt;span id=&#34;the_future&#34;&gt;The Future&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There is plenty of work left to be done on &lt;code&gt;Module::Build&lt;/code&gt;. Off the top of my head, here are some things that still need to be done:&lt;/p&gt;

&lt;p&gt;The installation phase does not yet create man pages based on POD included in the distribution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; needs to implement a &amp;ldquo;local install&amp;rdquo; feature like the one provided by the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; &amp;ldquo;PREFIX&amp;rdquo; argument. The logic that implements this in &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is Byzantine, but only because doing this correctly is quite complicated. This logic needs to be implemented for &lt;code&gt;Module::Build&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; needs better backwards compatibility with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;. The argument translation in &lt;code&gt;Module::Build::Compat&lt;/code&gt; is currently just a placeholder. Things like &amp;ldquo;PREFIX&amp;rdquo;, &amp;ldquo;LIB&amp;rdquo;, and &amp;ldquo;UNINST=1&amp;rdquo; all need to be translated by &lt;code&gt;Module::Build::Compat&lt;/code&gt;, and the equivalent functionality needs to be implemented for &lt;code&gt;Module::Build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CPANPLUS.pm&lt;/code&gt; could take advantage of more &lt;code&gt;Module::Build&lt;/code&gt; features. For example, it currently ignores the &amp;ldquo;conflict&amp;rdquo; information that &lt;code&gt;Module::Build&lt;/code&gt; makes available, and it doesn&amp;rsquo;t attempt to distinguish between &amp;ldquo;build_requires&amp;rdquo;, &amp;ldquo;requires&amp;rdquo;, or &amp;ldquo;recommends&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Some of what &lt;code&gt;Module::Build&lt;/code&gt; provides is intended for use by external tools, such as the meta-data provided by the &lt;em&gt;META.yaml&lt;/em&gt; file. &lt;code&gt;CPANPLUS.pm&lt;/code&gt; could use this to avoid having to run the &lt;em&gt;Build.PL&lt;/em&gt; and &lt;em&gt;Build&lt;/em&gt; scripts, thus avoiding the need to install any of the &amp;ldquo;build_requires&amp;rdquo; modules. Package managers like &lt;code&gt;rpm&lt;/code&gt; or the Debian tools could also use it to construct installable packages for Perl modules more easily.&lt;/p&gt;

&lt;p&gt;Adding at least basic support for &lt;code&gt;Module::Build&lt;/code&gt; to &lt;code&gt;CPAN.pm&lt;/code&gt; would be nice. If anyone is interested in pursuing this, I have an old patch that may provide a decent start on this. Contact me if you&amp;rsquo;re interested.&lt;/p&gt;

&lt;h2 id=&#34;span-id-more-information-more-information-span&#34;&gt;&lt;span id=&#34;more_information&#34;&gt;More Information&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;If you want to learn more about &lt;code&gt;Module::Build&lt;/code&gt;, the first thing you should do is install it (it will install itself just fine under &lt;code&gt;CPAN.pm&lt;/code&gt;) and read the docs for the &lt;code&gt;Module::Build&lt;/code&gt; and &lt;code&gt;Module::Build::Compat&lt;/code&gt; modules. The &lt;a href=&#34;https://github.com/Perl-Toolchain-Gang/Module-Build&#34;&gt;source is on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-thanks-thanks-span&#34;&gt;&lt;span id=&#34;thanks&#34;&gt;Thanks&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Thanks to Ken Williams for reviewing this article before publication, and for writing &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

