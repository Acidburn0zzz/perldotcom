<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advocacy on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/advocacy/</link>
    <description>Recent content in Advocacy on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Dec 2007 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/advocacy/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Memories of 20 Years of Perl</title>
      <link>http://localhost:1313/pub/2007/12/21/20-years-of-perl.html/</link>
      <pubDate>Fri, 21 Dec 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/12/21/20-years-of-perl.html/</guid>
      <description>

&lt;h3 id=&#34;proving-them-wrong&#34;&gt;Proving Them Wrong&lt;/h3&gt;

&lt;p&gt;Around 1991 I wrote a very useful program, in C, which took a bunch of files and then sorted them into groups according to which files had identical contents. A lot of sysadmins at the time wrote to thank me for it. But when I boasted about it at Usenix that year, people told me &amp;ldquo;oh, you should have written then in Perl.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That was pretty annoying, so I got the Camel Book (pink in those days) so that I could learn Perl and prove that they were wrong. But it turned out that they were right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mark Dominus is the author of &lt;a href=&#34;http://hop.perl.plover.com/&#34;&gt;Higher-Order Perl&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;my-first-cgi-program&#34;&gt;My First CGI Program&lt;/h3&gt;

&lt;p&gt;It was the year 2000, and I was working at a software startup in San Francisco. I was tasked with writing a simple form handler with an auto thank you email. I had been a C programmer for several years, a Fortran programmer for a few, and this was essentially my first Perl program. It was your standard CGI gateway which presented a form to the user, did some error checking, and sent a thank you email to the user.&lt;/p&gt;

&lt;p&gt;After a few hours of learning Perl and putting my form handler together, it was put live on our website. I was delighted that I was able to pick up this language so quickly and produce results in a short period of time. I never like programming C that much (although that has changed), due the fact that it got in my way. Perl just worked.&lt;/p&gt;

&lt;p&gt;I came into work the next day and reviewed how my program was doing. It turns out that my first bug had surfaced; the thank you email function managed to get caught in a loop. One poor soul who filled out my form had received 800 thank you emails! I was able to quickly fix the bug.&lt;/p&gt;

&lt;p&gt;In honor of my first Perl program, I would like to extend a hearty 800 thank yous to the Perl community! I have been using Perl ever since and love it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fred Moyer is just another mod_perl hacker&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;perl-and-the-university-student&#34;&gt;Perl and the University Student&lt;/h3&gt;

&lt;p&gt;One cannot imagine how useful Perl proves sometimes to a university student. I can recall several occasions in which I used Perl to facilitate a task or check my homework. Of them, there is one that I still remember very clearly.&lt;/p&gt;

&lt;p&gt;It was the course &amp;ldquo;Introduction to Computer Networks&amp;rdquo; and we learned about the various variations of networking protocols (Stop-and-wait, Go-back-N, and Selective-Repeat). We were given a simulation of these protocols written in C and compiled to run on Windows. The simulation could be ran with several parameters and would output a verbose file with the parameters of the simulation, the simulation itself and then some statistics of the simulation.&lt;/p&gt;

&lt;p&gt;We ran the program several times and got several files in return. Now we had to somehow insert the statistics into Excel so we can analyze them, process them, and create charts out of them. But the statistics were scattered over several different files, all with the same format, but nothing that Excel can understand (at least not without a massive amount of Visual Basic for Applications code).&lt;/p&gt;

&lt;p&gt;Without thinking for a moment, I started writing a Perl script that will process the files, extract the corresponding data and output a tab-delimited file that can be inputted into Excel. It took some time to write the script, and meanwhile my partner decided it may be faster to do it by hand. Thus, he occupied the nearby station, and started extracting the data himself. I finished a few minutes after that, though, (while he was just beginning in his manual labour) and we were able to input the data into Excel and continue the assignment. It took about 15 minutes or less, all in all.&lt;/p&gt;

&lt;p&gt;Later on I talked to a few fellow students about the assignment. One of them claimed it took him 3 hours to input everything into Excel. (!) Another said it took him one hour, which is still much worse than 15 minutes. Needless to say, none of them knew Perl.&lt;/p&gt;

&lt;p&gt;Enough said.&lt;/p&gt;

&lt;p&gt;(Originally published at &lt;a href=&#34;http://perl.org.il/pipermail/perl/2003-October/003151.html&#34;&gt;Perl Success Story, Israel.pm&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shlomi Fish has worked with Perl since 1996 and considers himself a happy user, developer and advocate of Perl and other open-source technologies.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-to-become-a-guru&#34;&gt;How To Become a Guru&lt;/h3&gt;

&lt;p&gt;In early 1999 I started a new job as a system administrator. In my previous position I&amp;rsquo;d taught myself Unix and GNU/Linux, and ended up writing a small tracking application for a customer service group in Java.&lt;/p&gt;

&lt;p&gt;As a new SA, I took over a pile of work from my predecessor, including some small Perl programs he&amp;rsquo;d downloaded, installed, and modified to add his name to the comments. Over the next couple of months, I picked up the Camel and the Perl Cookbook, and taught myself enough Perl that I could skim comp.lang.perl.moderated and answer some of the questions in my head.&lt;/p&gt;

&lt;p&gt;About that time, I started to do a little work on the Everything Engine &amp;ndash; not much, but a little bit &amp;ndash; and so I was the second external person to register on &lt;a href=&#34;http://www.perlmonks.org/&#34;&gt;PerlMonks&lt;/a&gt; when it started. In those days there was no voting, no XP, and there were just a few people racing to reach the milestone of a hundred posts.&lt;/p&gt;

&lt;p&gt;In between troubleshooting problems at work, I&amp;rsquo;d play with little programs, read whatever tutorials or books I could get, and answer any question I could on the site, and so I learned Perl that way.&lt;/p&gt;

&lt;p&gt;I remember the rush to find an idea &amp;ndash; any idea &amp;ndash; worthy of putting on the CPAN, and thinking in 2000 that every problem that anyone could solve, someone had already solved. I remember my first patch to Perl 5, then realizing that I hadn&amp;rsquo;t actually run the tests, and resolving to &lt;em&gt;improve&lt;/em&gt; the tests because they didn&amp;rsquo;t actually do what they said they should.&lt;/p&gt;

&lt;p&gt;I remember getting job offers from my postings, and meeting some of the top Perl programmers in the world for the first time, and being accepted because I did (some of the) things I said I would, just because no one else was doing them.&lt;/p&gt;

&lt;p&gt;That, I think, is the secret to become a contributing member of any community. Look for something that needs someone to do it and do it. You don&amp;rsquo;t have to have permission, just a little bit of determination and stubbornness and some time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a little sad that I missed the first eleven years of Perl&amp;rsquo;s life, but I&amp;rsquo;m glad to have caught up in the past nine years.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic does a lot of things, some of them even sometimes productive.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-an-english-major-saved-christmas&#34;&gt;How an English Major Saved Christmas&lt;/h3&gt;

&lt;p&gt;Right before Christmas of 1998 I was a fairly new employee at Amazon.com. Not a CS grad hacker with 30,000 shares, but an English grad customer service rep with 250. I knew about the 29,750 share disparity from picking up a fax for a star employee in the apps group. Instead of letting it get to me, I started to look into why it was so. I bought &lt;em&gt;Learning Perl&lt;/em&gt; and spent two of the most painful weeks of self-edification in my life discovering how the lack of &lt;code&gt;chmod +x&lt;/code&gt; was preventing me from getting through Chapter 2.&lt;/p&gt;

&lt;p&gt;Free at last I wrote, in two days, a badly needed and overlooked tax + shipping costs calculator for customer service for the new product tab launching that week. It was the kind of script that would take any decent Perl hacker 30 minutes. A former art critic saved hundreds of reps and tens of thousands of customers a lot of time and aggravation. I got the company&amp;rsquo;s &amp;ldquo;Just Do It&amp;rdquo; Award. If it had been C or Java or anything but Perl I wouldn&amp;rsquo;t have been able to do it.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;d come to anything but Perl, I would not have returned to coding&amp;ndash;I dabbled in BASIC and Assembly as a kid&amp;ndash;and I wouldnï¿½t be a software developer today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ashley Pond V is a New Mexican writer turned Seattlite software developer, currently working with Catalyst applications, who credits Perl with saving his soul as he&amp;rsquo;d probably have gone into marketing otherwise.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;smells-like-wet-camel&#34;&gt;Smells Like Wet Camel&lt;/h3&gt;

&lt;p&gt;Standing out in my memory is the day in college (either in late 1993 or early 1994) when my grandmother had emergency eye surgery. Originally, she only had a regularly scheduled checkup, and my mother could take her to the appointment before work began, but not pick her up. The doctor was one street over from the college (more or less) and I was conscripted to go over and take her home after her appointment and my first class. The day was rainy, increasing in intensity as the day grew older.&lt;/p&gt;

&lt;p&gt;Everything changed when I arrived at the doctor&amp;rsquo;s office, because the doctor had found something that required immediate attention. She had to be taken to a specialist immediately, and I began improvising. Each eye appointment took a long time, and they would only get longer as my grandmother was worked in to the specialist&amp;rsquo;s schedule as an emergency patient. So I had time to take her to the next appointment, leave her to wait for what might be hours, go to my next class, eat lunch, and come back and get her.&lt;/p&gt;

&lt;p&gt;I was trying to keep up with my college work, and brought my O&amp;rsquo;Reilly Perl book along so I could work on my computer science project, figuring I might as well do something useful while I was sitting around. My project involved writing an e-mail processing system in Perl, so I had bought what was for me at the time an almost impossibly expensive book to help me learn the language. On the way to the car, in the hardest and coldest rain I can ever remember, I was trying to help my grandmother and juggle the umbrella, car keys, car door, and everything else. The book slipped out from under my arm and landed in a puddle. Somehow, it landed on its edge, and had about an inch of muddy water soak into it. My new book! Ruined! Nothing to do but keep going, to the next appointment, and back to my class. I knew that to leave the college after eight a.m. was a guarantee of not being able to park anywhere near the building for the rest of the day, because the only parking spaces left were in the lower area of an overflow lot far from any building I needed to go to. Without even a sidewalk near this lot, I had plenty of time to think about my ruined book and what was happening to my grandmother as I trudged through the mud, in the pouring rain, to get to my next class.&lt;/p&gt;

&lt;p&gt;I also, in these days before mobile phones, had to find a pay phone to tell my mother about the abrupt change of plans. My grandmother eventually got settled in the hospital, where it was at least dry, and she pulled through the eye surgery fine. My waterlogged book with a brown bottom and hastily scribbled notes on the blank pages in the back was a good enough starting point; I graduated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.scottmcmahan.net/&#34;&gt;Scott McMahan&lt;/a&gt; has been writing Perl code since 1991.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;i-couldn-t-believe-that-perl-even-worked&#34;&gt;&amp;ldquo;I Couldn&amp;rsquo;t Believe That Perl Even Worked&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;My first exposure to Perl was a web server with &amp;ndash; I think &amp;ndash; Perl 4.036 installed. This would be 1995 or so. I wanted to write CGI scripts so I started reading everything I could find about Perl. I nearly lost heart when I read that the parser was, effectively, heuristic. Coming from a background in Pascal and C I couldn&amp;rsquo;t believe that Perl even worked.&lt;/p&gt;

&lt;p&gt;Fortunately Perl was the only option for my script. I persevered and discovered that &amp;ndash; not only did Perl work &amp;ndash; I rather enjoyed it. Within two weeks I had a CGI script that implemented a kind of ad-hoc PHP: chunks of Perl embedded in HTML. It was ugly &amp;ndash; but Perl had made it possible.&lt;/p&gt;

&lt;p&gt;At some time between then and now &amp;ndash; after digressions into Java and even LotusScript &amp;ndash; Perl became my main language. At the end of 2006 I decided to concentrate on Perl, release some modules, proactively seek out things I didn&amp;rsquo;t know about the language and learn them.&lt;/p&gt;

&lt;p&gt;As a result 2007 has been the happiest year of my professional career. I&amp;rsquo;ve written loads of code, most of which works. I attended my first YAPC in Vienna and came home with a bunch of new friends and a renewed enthusiasm for cranking out code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve still got plenty to learn. Perl may be easy to pick up but mastery takes years. And if you love programming that&amp;rsquo;s part of the fun. However good you think you are there&amp;rsquo;s always a way to improve.&lt;/p&gt;

&lt;p&gt;I dabble with other languages &amp;ndash; because if you take programming seriously you must. What do they know of Perl that only Perl know? There are things about Perl that grate. It&amp;rsquo;s not perfect but it&amp;rsquo;s, well, loveable I suppose.&lt;/p&gt;

&lt;p&gt;Thank you Perl community. Thank you Larry. Thank you for a lovely language.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Andy Armstrong is a compulsive Perl abuser based in Cumbria, UK.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;from-awk-to-perl&#34;&gt;From awk to perl&lt;/h3&gt;

&lt;p&gt;In early 1990, I was working with a large set of data that needed to be massaged and formatted so that it could be statistically analyzed.&lt;/p&gt;

&lt;p&gt;I started the task in awk, but quickly ran into trouble because awk could only open one file at a time. A quick search through the Usenet comp.lang group found Perl 3.0, which had just recently been released.&lt;/p&gt;

&lt;p&gt;I had to get the source code and build it on my machine, but it compiled cleanly and I was able to try some simple stuff. Worked real good too. As I had already a large awk program, that I didn&amp;rsquo;t want to re-edit for Perl, I ran it through &lt;code&gt;a2p&lt;/code&gt; and the &lt;code&gt;perl&lt;/code&gt; version produced the same results. I was hooked. When I got stuck, asking questions on comp.lang.perl almost always got instant answers. There has been an active perl community for a long time, and they were fabulous! (Just like now). I subsequently re-factored my code for perl and produced vast quantities of data to be analyzed. I have been using Perl ever since.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roe McBurnett is a systems engineer for a telecommunications company and has been working on telephony related projects as a developer, systems engineer, and software tester since 1985.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Hate Advocacy</title>
      <link>http://localhost:1313/pub/2000/12/advocacy.html/</link>
      <pubDate>Tue, 12 Dec 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/12/advocacy.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#why%20i%20hate%20advocacy&#34;&gt;Why I Hate Advocacy&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what%20does%20this%20have%20to%20do%20with%20programming%20languages&#34;&gt;What Does this Have to Do With Programming Languages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#my%20country%20right%20or%20wrong&#34;&gt;&amp;ldquo;My Country Right or Wrong&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#you%20know%20we%20do%20this%20too!&#34;&gt;You know we do this too!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more%20stories&#34;&gt;More Stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drink%20the%20koolaid&#34;&gt;Drink the Kool-Aid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#so%20what%20is%20the%20problem&#34;&gt;So What is the Problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perl%20programmers&#34;&gt;Perl Programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#it%20gets%20worse&#34;&gt;It Gets Worse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#any%20other%20problems&#34;&gt;Any Other Problems?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-why-i-hate-advocacy-why-i-hate-advocacy-span&#34;&gt;&lt;span id=&#34;why i hate advocacy&#34;&gt;Why I Hate Advocacy&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;I think programming language advocacy is a big problem, not just for the Perl community, but for the larger programming community.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to start with an example of the same phenomenon in a different community, then work around to programming languages. In his Baseball Abstract 1985, Bill James wrote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why are our information systems about managers so backward? Because we have gotten trapped in an unresolvable issue about whether a manager is &amp;ldquo;good&amp;rdquo; or is &amp;ldquo;bad.&amp;rdquo; The fan, beginning with a position on the goodness or the badness of the manager in question, interprets each action in the light of that reference and makes every question about him an extension of the first principle&amp;hellip; . Beginning with the premise that Bill Virdon stinks, every other question becomes a sub-heading of why Bill Virdon stinks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;James tried to make a beginning on the problem of evaluating baseball managers by making a simple, qualitative assessment of different managers&amp;rsquo; styles. He put together a questionnaire with questions like &amp;ldquo;Does he stay with the starter, or go to the bullpen quickly?&amp;rdquo; and &amp;ldquo;Does he pinch-hit much, and if so when?&amp;rdquo; Then he circulated the questionnaire, asking baseball fans to describe the managers with whom they were most familiar.&lt;/p&gt;

&lt;p&gt;James got a surprise: Questionnaires came back with vituperative complaints about managerial behavior: &amp;ldquo;This is where we see Bill Virdon&amp;rsquo;s real preference: go with the starter &amp;lsquo;til he drops. Hell, Virdon makes Billy Martin look like a wimp, Simon Legree like a quiche-eater.&amp;rdquo; How long will he stay with a starter who is struggling? &amp;ldquo;Exactly one batter too long, or until he faints, whichever comes first.&amp;rdquo; And so on.&lt;/p&gt;

&lt;p&gt;This didn&amp;rsquo;t help James at all. He was trying to understand baseball managers qualitatively, without judging in advance whether they were &amp;lsquo;good&amp;rsquo; or &amp;lsquo;bad&amp;rsquo;. &amp;ldquo;What Stan has done with the form of the managerial box,&amp;rdquo; wrote James, &amp;ldquo;is precisely what I designed the thing to try to lead the discussion away from.&amp;rdquo; But baseball fans had so many years of experience in making these judgments that they no longer knew how to talk about managers in any other terms. Even when the fans made simple, descriptive statements, other fans inevitably understood these as either indictments or praises. Discourse about managerial style was essentially impossible, except at this very low level of &amp;ldquo;Bill Virdon is a great manager!&amp;rdquo; &amp;ldquo;No he isn&amp;rsquo;t!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think this same thing has happened to programming language discussions. Advocacy has become so natural to us that we forget there is any other way to discuss programming languages. Even if we don&amp;rsquo;t forget, other people can&amp;rsquo;t understand us because they &lt;em&gt;hear&lt;/em&gt; advocacy whether we want them to or not.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example, parallel to the baseball example. About two years ago I was giving a talk to the local Perl user group about strong typing semantics. (I can&amp;rsquo;t get into details here, but the complete talk is available: &lt;a href=&#34;http://perl.plover.com/yak/typing/&#34;&gt;Strong Typing and Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I explained what types were, and said that a lot of people had concluded that strong typing was a failed experiment, based in part on the success of weakly typed languages like Perl and in part on an idea of the state of the art that was twenty-five years out of date.&lt;/p&gt;

&lt;p&gt;Then I gave a counterexample: I discussed the typing system in Standard ML, which is more recent, and showed how it fixed many of the big problems of other typing systems and also provided a lot of unexpected advantages. Part way through the explanation, one of the audience members raised his hand and asked &amp;ldquo;But what&amp;rsquo;s wrong with the way Perl does it?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was taken aback. I hadn&amp;rsquo;t said anything was wrong with the way Perl did it. In fact, I&amp;rsquo;d specifically said that Perl&amp;rsquo;s approach had been a big success. But somehow, people in my audience had gotten the idea that because I was pointing out benefits of Standard ML, I must be saying that Standard ML was good and Perl was bad. Apparently it was inconceivable that there might be &lt;em&gt;two&lt;/em&gt; right ways to do something.&lt;/p&gt;

&lt;p&gt;In that talk I discussed the Pascal type system at some length. There was only one reason that I brought up Pascal. I needed to convince people that type systems have moved forward a little since the invention of Pascal in 1968. I had found from many years of experience that when I mentioned strong typing, people would frequently say &amp;ldquo;You must be kidding. Pascal sucks.&amp;rdquo; I knew that if I did not address Pascal, people would be unpersuaded by my talkâthey might go home thinking I was advocating Pascal as soon as I mentioned strong typing. So I spent a lot of time discussing the particular failures of the Pascal type system so that I could show how these problems are surmountableâPascal is not the be-all and end-all of strong typing, as many people think. I discussed C at the same time, because the C and Pascal type systems are so similar, and I did not want people to think I was singling out Pascal.&lt;/p&gt;

&lt;p&gt;Nevertheless, several people have written to me to complain that my talk was &amp;lsquo;unfair to Pascal&amp;rsquo;. They saw the talk as an attack on their favorite language. I don&amp;rsquo;t understand this. Even if the talk had been about Pascal, which it wasn&amp;rsquo;t, it couldn&amp;rsquo;t have been an attack, because I only told the truth about Pascal. The Pascal type system &lt;em&gt;does&lt;/em&gt; have big problems, many of which were corrected in various incompatible ways by various vendors, and many of which were corrected by Wirth, the inventor of Pascal, in his later languages.&lt;/p&gt;

&lt;p&gt;You can be &amp;lsquo;unfair&amp;rsquo; to a person, and you can hurt their feelings, even if you tell only the truth. But Pascal is a programming language, not a person. It has no feelings to hurt. Criticizing Pascal&amp;rsquo;s type system is like complaining that your hammer has a scratched face. There is no use getting upset about it. You just have to get a new hammer or make do. Saying that the criticism is unfair to the hammer, for whatever reason, is just silly.&lt;/p&gt;

&lt;p&gt;I think I know what happened here, but I&amp;rsquo;d like to discuss it a little later.&lt;/p&gt;

&lt;p&gt;I got mail a couple of days ago from Jasmine Merced-Ownby, who runs the &lt;a href=&#34;http://www.perlarchive.com/&#34;&gt;Perl Archive&lt;/a&gt; web site. Part of the site had been implemented with PHP, and she was getting letters from people who were concerned that this &amp;lsquo;made Perl look bad&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;I guess an implicit admission that Perl might not be the very best tool for every possible job could be construed as making Perl look bad, but it seems like an awfully peculiar response, unless you imagine Perl and PHP engaged in a war from which there can be only one victor, and unless you think that if PHP is good for something, anything at all, then Perl must be bad.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recall that Perl has ever been advertised as the One Tool for Every Job. Perl came into a world full of other tools and made a name for itself as a &amp;lsquo;glue language&amp;rsquo; that can help a lot of other tools inter-operate. Perl fills in the spaces between the other tools. That alone is impressive and useful. In the past ten years, more and more, Perl has worked well in place of the other tools; that&amp;rsquo;s even better. But Perl&amp;rsquo;s motto is &amp;ldquo;There&amp;rsquo;s More Than One Way To Do It&amp;rdquo;, and sometimes that means that one of the ways is to use PHP. If PHP comes up a little short for some reason, maybe Perl can fill in the gap. I understand that PHP can call out to a Perl program for help. If that&amp;rsquo;s true, it&amp;rsquo;s not an admission of failure; it&amp;rsquo;s because Rasmus Lerdorf, the author, was smart. Perl can call out to C for help, and that&amp;rsquo;s not an admission of failure either. The best glues can stick to everything.&lt;/p&gt;

&lt;p&gt;In my world, PHP can be a good solution, and Perl can be a good solution, because maybe a problem can have more than one good solution. In my world you use what works, and using PHP can&amp;rsquo;t possibly reflect badly on Perl.&lt;/p&gt;

&lt;h2 id=&#34;span-id-more-stories-more-stories-span&#34;&gt;&lt;span id=&#34;more stories&#34;&gt;More Stories&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another example, I think of the same thing. If you look in perlfaq4, you&amp;rsquo;ll see a question that says &lt;a href=&#34;https://perldoc.perl.org/perlfaq4.html#How-do-I-handle-linked-lists%3f&#34;&gt;How do I handle linked lists?&lt;/a&gt; The answer begins by saying &amp;ldquo;In general, you usually don&amp;rsquo;t need a linked list in Perl,&amp;rdquo; which is exactly the right answer, and then goes on to explain how Perl arrays serve most of the purposes of linked lists. For example, people like to use linked lists to represent stacks in C; in Perl, the right approach is to use the &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt; functions on an array instead.&lt;/p&gt;

&lt;p&gt;But after explaining that linked lists are rarely useful in Perl, the manual goes on to show an implementation of linked lists: &amp;ldquo;If you really, really wanted, you could use structures&amp;hellip;&amp;rdquo; and then the code follows. Avi recently asked me why it bothers to show an implementation, when it says before and after that the implementation is not useful for anything.&lt;/p&gt;

&lt;p&gt;I tried to put myself in the position of the FAQ authors, and ask why I would do such a thing. The first answer I thought of was that I might do it to show off my erudition. But then a better answer came to mind.&lt;/p&gt;

&lt;p&gt;Of course, this is just a guess, but if I had been writing the FAQ, I would have been afraid to say &amp;ldquo;You don&amp;rsquo;t need linked lists in Perl&amp;rdquo; and leave it at that, because I would have imagined someone reading that answer and concluding that it was an evasion and that linked lists couldn&amp;rsquo;t be done at all in Perl. Avi seemed shocked that I could be so cynical, but I think a lot of people do think that way. Why might someone conclude that the answer was an evasion? If your belief is that the author of the Perl manual will never say anything bad about even the worst parts of Perl, then you will try to read between the lines.&lt;/p&gt;

&lt;h2 id=&#34;span-id-drink-the-koolaid-drink-the-kool-aid-span&#34;&gt;&lt;span id=&#34;drink the koolaid&#34;&gt;Drink the Kool-Aid&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I think the root of the problem is that we tend to organize ourselves into tribes. Then people in the tribe are our friends, and people outside are our enemies. I think it happens like this: Someone uses Perl, and likes it, and then they use it some more. But then something strange happens. They start to identify themselves with Perl, as if Perl were part of their body, or vice versa. They&amp;rsquo;re part of the Big Perl Tribe. They want other people to join the Tribe. If they meet someone who doesn&amp;rsquo;t like Perl, it&amp;rsquo;s an insult to the Tribe and a personal affront to them.&lt;/p&gt;

&lt;p&gt;I think that explains the reaction of the folks who wrote to me to complain about my unfairness to Pascal. I think maybe they took it personally, and felt that I was being unfair to &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Getting yourself confused with a programming language isn&amp;rsquo;t a sane thing to do, but a lot of people do it, including people from our community.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the only person who suspects this. This section&amp;rsquo;s title, &amp;ldquo;Drink the Kool-Aid,&amp;rdquo; comes from a great talk by Nat Torkington from last year&amp;rsquo;s YAPC. The title of Nat&amp;rsquo;s talk was &amp;ldquo;&lt;a href=&#34;http://prometheus.frii.com/~gnat/yapc/2000-advocacy/&#34;&gt;Be an advocate, not an asshole.&lt;/a&gt;&amp;rdquo; Nat&amp;rsquo;s talk has a slide on why people do advocacy. People he asked gave a few different answers, which he mentions. But then he says: &amp;ldquo;My secret suspicion is that a lot of third-party advocacy is just: Perl is the way and the light, man, so drink the Kool-Aid and ascend to programmer heaven.&amp;rdquo; I wouldn&amp;rsquo;t have put it that way, but I have the same suspicion.&lt;/p&gt;

&lt;h2 id=&#34;span-id-so-what-is-the-problem-so-what-is-the-problem-span&#34;&gt;&lt;span id=&#34;so what is the problem&#34;&gt;So What is the Problem?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Why should we try to get out of this mentality? What&amp;rsquo;s the big deal?&lt;/p&gt;

&lt;p&gt;One big problem with thinking and talking like this is that it means we can&amp;rsquo;t learn anything new. Suppose that PHP has some advantage over Perl that would lead Jasmine to use it in place of Perl on her web site. If that&amp;rsquo;s true, wouldn&amp;rsquo;t it be cool if Perl could copy that advantage in the next version?&lt;/p&gt;

&lt;p&gt;If you approach PHP with the idea that it has to be destroyed or shut out, that Perl is Right and Everything Else is Messed Up, you aren&amp;rsquo;t going to find out what PHP&amp;rsquo;s advantages are. You aren&amp;rsquo;t going to be in a state of mind that can recognize that PHP has something good that Perl doesn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Maybe there are ideas in modern strong typing systems that would improve Perl in the future; maybe not. But if you approach the strong typing discussion with a fixed notion that there must be something wrong with it just because it&amp;rsquo;s different from the way Perl works now, you&amp;rsquo;re not going to learn anything.&lt;/p&gt;

&lt;p&gt;Perl got where it is today by copying a lot of stuff from a lot of other languages. Perl&amp;rsquo;s most famous features, hashes and regexes, are copied from Unix utilities like AWK, grep, and sed. Perl&amp;rsquo;s statement modifiers are borrowed from BASIC-plus, of all places. Perl even has features that are borrowed from Ada, including one feature you use every day.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s growth won&amp;rsquo;t stop if Perl stops copying stuff from other languages, but it will slow down. Drastically. And Perl might stop being Perl. I&amp;rsquo;m glad I wasn&amp;rsquo;t stuck with Perl 4.036 for the last seven years, and I don&amp;rsquo;t want to be stuck with Perl 5.6.0 for the next ten years either. Borrowing from other languages has been good for Perl. To keep doing it, we have to be able to look at other languages and we have to be in a frame of mind to recognize the good stuff when we see it.&lt;/p&gt;

&lt;p&gt;One of the things I found most dismaying about the Perl 6 RFC process was the parochialism of many of the submissions. The submitter would be trying to solve some problem, and would come up with a crappy solution. And meanwhile, there would be a perfectly serviceable solution in the language next door, just waiting to be reused. But it seemed as though a lot of the people making proposals only knew Perl, and not any other languages.&lt;/p&gt;

&lt;h2 id=&#34;span-id-perl-programmers-perl-programmers-span&#34;&gt;&lt;span id=&#34;perl programmers&#34;&gt;Perl Programmers&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another problem with this us-versus-them discourse. People now identify me as a &amp;lsquo;Perl Programmer&amp;rsquo;. They automatically assume that everything that comes out of my mouth will be colored by that, that I&amp;rsquo;m going to love everything about Perl and hate everything else. If I do say anything negative about Perl, some people assume that the real truth must be ten times worse than what I would admit to. It can be hard for me to make myself understood. Tribal assumptions are impeding communication. I can&amp;rsquo;t be the only one with this problem.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think of myself as a Perl Programmer. I program in maybe half a dozen languages regularly, whatever&amp;rsquo;s convenient. I&amp;rsquo;ve been a programmer since about 1978. When folks call me a Perl Programmer, it never seems to occur to them that ten years ago they would have thought I was &amp;ldquo;C Programmer&amp;rdquo; and twenty years ago I would have been a &amp;ldquo;Fortran Programmer&amp;rdquo;. But they still won&amp;rsquo;t take me seriously when I talk about strong typing systems, because what does a Perl Programmer know about strong typing? If I make a simple factual statement, like &amp;ldquo;Standard ML has strong static typing&amp;rdquo;, people are apt to conclude from that that I think strong static typing is a bad idea, just because I said that Standard ML has it, and Mark Dominus is a Perl Programmer, not a Standard ML Programmer.&lt;/p&gt;

&lt;p&gt;Bill James complained about almost the same thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facing the question of &amp;ldquo;what is his strongest point as a manager,&amp;rdquo; I wrote for Sparky Anderson &amp;ldquo;His record.&amp;rdquo; I thought that this was rather complimentary&amp;hellip; But if you start with the assumption that I&amp;rsquo;m going to be ripping Sparky, then innocent comments become loaded with double meanings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;span-id-it-gets-worse-it-gets-worse-span&#34;&gt;&lt;span id=&#34;it gets worse&#34;&gt;It Gets Worse&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Maybe the biggest problem with the &amp;ldquo;Perl good, others bad&amp;rdquo; rut is that it&amp;rsquo;s going to impede our ability to communicate with &lt;em&gt;ourselves&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we decide that the Perl Way is the One True Way, then when someone appears and asks why &lt;code&gt;length(@a)&lt;/code&gt; does the wrong thing, we&amp;rsquo;re not going to have an intelligent answer. We&amp;rsquo;re going to come up with a lot of blather about &lt;code&gt;length()&lt;/code&gt;&amp;rsquo;s argument always being in a scalar context, yak yak yak. Listen, bub, I know all about scalar context, and I still think &lt;code&gt;length(@a)&lt;/code&gt; is a rotten idea and &lt;code&gt;length(%h)&lt;/code&gt; is even worse. Perl won big because it does what you mean, even when that isn&amp;rsquo;t orthogonal. There&amp;rsquo;s no way that &lt;code&gt;length(@a)&lt;/code&gt; is doing what you mean.&lt;/p&gt;

&lt;p&gt;Someone showed up in &lt;code&gt;comp.lang.perl.misc&lt;/code&gt; this week asking why &lt;code&gt;length(@a)&lt;/code&gt; does the Wrong Thing, and nobody gave any indication that anyone agreed with him. I guess they were all too busy defending Tribal Turf or something. &lt;a href=&#34;http://dev.perl.org/rfc/212.pod&#34;&gt;RFC 212&lt;/a&gt; proves that &lt;em&gt;someone&lt;/em&gt; out there agrees with this guy. But nobody would admit it.&lt;/p&gt;

&lt;h2 id=&#34;span-id-any-other-problems-any-other-problems-span&#34;&gt;&lt;span id=&#34;any other problems&#34;&gt;Any Other Problems?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m glad you asked. Us-versus-them is not a way to be an effective advocate. Says Nat: &amp;ldquo;Passion doesn&amp;rsquo;t convince. Passion makes you look like an idiot or an asshole.&amp;rdquo; Telling someone that Perl is great and their thing sucks isn&amp;rsquo;t going to persuade anyone of anything. This style of advocacy may be fun and easy, but it isn&amp;rsquo;t effective. You have to lead people, not drive them before you.&lt;/p&gt;

&lt;h2 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t really hate advocacy. I just hate the way we do it most of the time. We do it in a dumb way. And I think the discoursive habits we pick up as a result are going to impede the progress of programming languages for a long time.&lt;/p&gt;

&lt;p&gt;Perl has a strong tradition of getting along with (and borrowing from) other languages and other systems. That&amp;rsquo;s one of its greatest strengths. Let&amp;rsquo;s not throw that away.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have a book on my bookshelf that I&amp;rsquo;ve never read, but that has a great title. It says, &amp;ldquo;All Truth is God&amp;rsquo;s Truth.&amp;rdquo; And I believe that. The most viable belief systems are those that can reach out and incorporate new ideas, new memes, new metaphors, new interfaces, new extensions, new ways of doing things. My goal this year is to try to get Perl to reach out and cooperate with Java. I know it may be difficult for some of you to swallow, but Java is not the enemy. Nor is Lisp, or Python, or Tcl. That is not to say that these languages don&amp;rsquo;t have good and bad points. I am not a cultural relativist. Nor am I a linguistic relativist. In case you hadn&amp;rsquo;t noticed. :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two points if you can guess who said that.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

