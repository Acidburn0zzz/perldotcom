<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Libpostal on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/libpostal/</link>
    <description>Recent content in Libpostal on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Apr 2018 20:34:45 +0000</lastBuildDate>
    <atom:link href="/tags/libpostal/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XS utility routines that are good to know</title>
      <link>http://localhost:1313/article/xs-utility-routines-that-are-good-to-know/</link>
      <pubDate>Mon, 30 Apr 2018 20:34:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/xs-utility-routines-that-are-good-to-know/</guid>
      <description>

&lt;p&gt;In the previous &lt;a href=&#34;http://localhost:1313/article/writing-your-own-xs-functions/&#34;&gt;tutorial&lt;/a&gt;, we learned how to write our own functions in XS, how to process multiple arguments, and return different values, including &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial I&amp;rsquo;m going to cover some useful routines for common cases you&amp;rsquo;ll encounter when programming in XS. One that you&amp;rsquo;ve already seen is &lt;code&gt;SvOK&lt;/code&gt; which can tell you if a scalar is defined or not. Here are the new areas I&amp;rsquo;ll discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scheduling XS code to run at startup&lt;/li&gt;
&lt;li&gt;Handling tied variables&lt;/li&gt;
&lt;li&gt;Unicode tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When writing XS code, these are things you&amp;rsquo;ll often want to be aware of, and know how to handle.&lt;/p&gt;

&lt;h3 id=&#34;module-code&#34;&gt;Module Code&lt;/h3&gt;

&lt;p&gt;As before, we&amp;rsquo;ll define the module code to load our XS. This is all that&amp;rsquo;s required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package XS::Tutorial::Three;
require XSLoader;

XSLoader::load();
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should be saved as &lt;code&gt;lib/XS/Tutorial/Three.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;xs-code&#34;&gt;XS Code&lt;/h3&gt;

&lt;p&gt;The top of the XS file will look similar to the previous chapter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define PERL_NO_GET_CONTEXT // we&#39;ll define thread context if necessary (faster)
#include &amp;quot;EXTERN.h&amp;quot;         // globals/constant import locations
#include &amp;quot;perl.h&amp;quot;           // Perl symbols, structures and constants definition
#include &amp;quot;XSUB.h&amp;quot;           // xsubpp functions and macros

MODULE = XS::Tutorial::Three  PACKAGE = XS::Tutorial::Three
PROTOTYPES: ENABLE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to append any XS code after the &lt;code&gt;PROTOTYPES&lt;/code&gt; line. This should be saved as &lt;code&gt;lib/XS/Tutorial/Three.xs&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;scheduling-xs-code-to-run-at-startup&#34;&gt;Scheduling XS code to run at startup&lt;/h3&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll need to run some code before your XS functions can work. For example, &lt;a href=&#34;https://github.com/openvenues/libpostal&#34;&gt;libpostal&lt;/a&gt; has startup routines which populate data structures that must be called before the library can be used.&lt;/p&gt;

&lt;p&gt;You could code this in a &amp;ldquo;lazy&amp;rdquo; way, that is, inside the XS function, check to see if the init code has been run, and if not, run it before executing the rest of the function code.&lt;/p&gt;

&lt;p&gt;However XS offers another way to do it by using the &lt;code&gt;BOOT&lt;/code&gt; keyword. Any C code included below the keyword, will be executed during the startup process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BOOT:
printf(&amp;quot;We&#39;re starting up!\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The boot section is terminated by the first empty line after the keyword.&lt;/p&gt;

&lt;h3 id=&#34;handling-tied-variables&#34;&gt;Handling tied variables&lt;/h3&gt;

&lt;p&gt;Tied variables are special variables that execute custom code when they are interacted with. But you never use them, so why worry about them? The
thing is if you&amp;rsquo;re writing code to be used by others, you can&amp;rsquo;t be sure that a caller won&amp;rsquo;t pass a tied variable to one of your XS functions. And unlike
regular Perl, XS does &lt;strong&gt;not&lt;/strong&gt; execute tied code automatically.&lt;/p&gt;

&lt;p&gt;XS does provide &lt;a href=&#34;https://perldoc.perl.org/perlapi.html#Magical-Functions&#34;&gt;functions&lt;/a&gt; for working with tied variables though. One you&amp;rsquo;ll see in a lot of XS code is &lt;code&gt;SvGETMAGIC&lt;/code&gt;. Imagine your function is passed a tied variable; it&amp;rsquo;s value will be undefined in XS, until you call &lt;code&gt;mg_get&lt;/code&gt; (&amp;ldquo;magic get&amp;rdquo;) on it, which calls &lt;code&gt;FETCH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;mg_get&lt;/code&gt; can only be called on tied scalars so you don&amp;rsquo;t want to call it on a regular scalar. That&amp;rsquo;s where &lt;code&gt;SvGETMAGIC&lt;/code&gt; comes in: if the scalar is
tied, it will call &lt;code&gt;mg_get&lt;/code&gt;, if not, nothing will happen.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how you might use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV*
get_tied_value(SV *foo)

PPCODE:
  /* call FETCH() if it&#39;s a tied variable to populate the sv */
  SvGETMAGIC(foo);
  PUSHs(sv_2mortal(foo));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code declares an XS function called &lt;code&gt;get_tied_value&lt;/code&gt;, which accepts a scalar variable, and calls &lt;code&gt;SvGETMAGIC&lt;/code&gt; on it, returning the value, by pushing it onto the stack.&lt;/p&gt;

&lt;h4 id=&#34;magic&#34;&gt;Magic?&lt;/h4&gt;

&lt;p&gt;You might be wondering why functions dealing with tied variables are named &amp;ldquo;magic&amp;rdquo; or &amp;ldquo;mg&amp;rdquo;. The reason is that tied behavior for each variable is implemented via a pointer to a &lt;a href=&#34;https://perldoc.perl.org/perlguts.html#Magic-Virtual-Tables&#34;&gt;magic virtual table&lt;/a&gt; which is a structure containing function pointers to the tied behavior.&lt;/p&gt;

&lt;p&gt;Often the Perl C API will provide &lt;code&gt;mg&lt;/code&gt; (&amp;ldquo;magic&amp;rdquo;) and &lt;code&gt;nomg&lt;/code&gt; (&amp;ldquo;non magic&amp;rdquo;) variants of functions, so you can decide if you want to trigger the tied behavior.&lt;/p&gt;

&lt;h3 id=&#34;utf-8-tools&#34;&gt;UTF-8 tools&lt;/h3&gt;

&lt;p&gt;Perl has loads of tools for managing UTF-8 encoded text, but with XS you&amp;rsquo;re working in C, which does not. Start thinking about basic types like &lt;code&gt;char&lt;/code&gt;
and common assumptions in C code, and you&amp;rsquo;ll realize that multibyte characters can wreak havoc unless you handle them correctly.&lt;/p&gt;

&lt;p&gt;Fortunately, the Perl C API does provide &lt;a href=&#34;https://perldoc.perl.org/perlapi.html#Unicode-Support&#34;&gt;functions&lt;/a&gt; for managing UTF-8 data that
can help. Here are a couple of examples.&lt;/p&gt;

&lt;p&gt;Perl scalars have a UTF-8 flag, which is turned on when the scalar contains decoded UTF-8 data. We can detect it with &lt;code&gt;SvUTF8&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV*
is_utf8(SV *foo)
PPCODE:
  /* if the UTF-8 flag is set return 1 &amp;quot;true&amp;quot; */
  if (SvUTF8(foo)) {
    PUSHs(sv_2mortal(newSViv(1)));
  }
  /* else return undef &amp;quot;false&amp;quot; */
  else {
    PUSHs(sv_newmortal());
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This declares an XS function called &lt;code&gt;is_utf8&lt;/code&gt; which accepts a scalar and returns true if the UTF-8 flag is set, or false if it isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Imagine you have some C code that only works with ASCII text, that is, single byte characters. You can detect incoming scalars that have the UTF-8 flag turned on
with &lt;code&gt;SvUTF8&lt;/code&gt;, but what do you do about ones that have the flag?&lt;/p&gt;

&lt;p&gt;You could &lt;code&gt;croak&lt;/code&gt; immediately, throwing an exception. Or you could try to &lt;em&gt;downgrade&lt;/em&gt; the scalar to be non UTF-8 as the string may be marked as UTF-8 but only contain ASCII compatible characters (decimal values 0-127).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV*
is_downgradeable(SV *foo)
PPCODE:
  /* if the UTF-8 flag is set and the scalar is not downgrade-able return
     undef */
  if (SvUTF8(foo) &amp;amp;&amp;amp; !sv_utf8_downgrade(foo, TRUE)) {
    PUSHs(sv_newmortal());
  }
  /* else return 1 */
  else {
    PUSHs(sv_2mortal(newSViv(1)));
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function returns false if the scalar contains data that is not downgrade-able to ASCII, otherwise it returns true. It does that by using the &lt;code&gt;sv_utf8_downgrade&lt;/code&gt; function, which accepts the scalar and a boolean value indicating if it&amp;rsquo;s ok to fail. As the second argument is &lt;code&gt;TRUE&lt;/code&gt;, the function simply returns false if the scalar is not downgrade-able (otherwise it would &lt;code&gt;croak&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Parts &lt;a href=&#34;http://localhost:1313/article/getting-started-with-xs/&#34;&gt;one&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/article/writing-your-own-xs-functions/&#34;&gt;two&lt;/a&gt; in this series contain the background information necessary to understand this one&lt;/li&gt;
&lt;li&gt;This series is also on CPAN (&lt;a href=&#34;https://metacpan.org/pod/XS::Tutorial&#34;&gt;XS::Tutorial&lt;/a&gt;) complete with all the code&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://perldoc.perl.org/perlxs.html#The-BOOT%3a-Keyword&#34;&gt;BOOT&lt;/a&gt; keyword&lt;/li&gt;
&lt;li&gt;Tied variable &lt;a href=&#34;https://perldoc.perl.org/perlapi.html#Magical-Functions&#34;&gt;functions&lt;/a&gt; and the &lt;a href=&#34;https://perldoc.perl.org/perlguts.html#Magic-Virtual-Tables&#34;&gt;magic virtual table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlapi.html#Unicode-Support&#34;&gt;Perl UTF-8 functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Cover image &amp;copy; &lt;a href=&#34;https://pixabay.com/en/plumbing-pipe-wrench-plumber-840835/&#34;&gt;Steve Buissinne&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - July 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---july-2016/</link>
      <pubDate>Tue, 09 Aug 2016 09:11:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---july-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add copyright information to your images with &lt;a href=&#34;https://metacpan.org/pod/App::CopyrightImage&#34;&gt;App::CopyrightImage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test the tone perception of your ears with &lt;a href=&#34;https://metacpan.org/pod/App::tonematch&#34;&gt;App::tonematch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ExtUtils::PL2Bat&#34;&gt;ExtUtils::PL2Bat&lt;/a&gt; converts Perl scripts to batch files to run on Windows&lt;/li&gt;
&lt;li&gt;Get an interface to Mail Chimp&amp;rsquo;s API using &lt;a href=&#34;https://metacpan.org/pod/Mail::Chimp3&#34;&gt;Mail::Chimp3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OneAll is an all-in-one social media API, use it with &lt;a href=&#34;https://metacpan.org/pod/WWW::OneAll&#34;&gt;WWW::OneAll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PowerShell&#34;&gt;PowerShell&lt;/a&gt; wraps PowerShell commands&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Snapforce::API&#34;&gt;Snapforce::API&lt;/a&gt; provides a perly interface for the Snapforce CRM API&lt;/li&gt;
&lt;li&gt;Communicate with socket.io servers using &lt;a href=&#34;https://metacpan.org/pod/SocketIO::Emitter&#34;&gt;SocketIO::Emitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a simple API for querying Gentoo&amp;rsquo;s installed-package database using &lt;a href=&#34;https://metacpan.org/pod/Gentoo::VDB&#34;&gt;Gentoo::VDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitReturnOr&#34;&gt;Perl::Critic::Policy::BuiltinFunctions::ProhibitReturnOr&lt;/a&gt; checks for use of &lt;code&gt;return ... or ...&lt;/code&gt; - an easy mistake to make&lt;/li&gt;
&lt;li&gt;RT-Extension-Tags Extension using &lt;a href=&#34;https://metacpan.org/pod/RT::Extension::Tags&#34;&gt;RT::Extension::Tags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::SAMGov&#34;&gt;Parse::SAMGov&lt;/a&gt; parses SAM Entity Management Public Extract Layout from SAM.gov&lt;/li&gt;
&lt;li&gt;Access CSV, XML, HTML and log data with SQL using &lt;a href=&#34;https://metacpan.org/pod/DBD::AnyData2&#34;&gt;DBD::AnyData2&lt;/a&gt;, a new version of &lt;a href=&#34;https://metacpan.org/pod/DBD::AnyData&#34;&gt;DBIx::AnyData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use DBIx::Class in asynchronous environments with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Connector::Pool&#34;&gt;DBIx::Connector::Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::IEEE754::Tools&#34;&gt;Data::IEEE754::Tools&lt;/a&gt; provides functions for inspecting and manipulating Perl&amp;rsquo;s floating point values&lt;/li&gt;
&lt;li&gt;Create custom ETL processes using &lt;a href=&#34;https://metacpan.org/pod/ETL::Pipeline&#34;&gt;ETL::Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::libpostal&#34;&gt;Geo::libpostal&lt;/a&gt; Perl bindings for the speedy libpostal geo coder (disclaimer: I am the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MARC::Spec&#34;&gt;MARC::Spec&lt;/a&gt; builds and parses the MARCspec record path language&lt;/li&gt;
&lt;li&gt;Daniel Șuteu uploaded two search modules:&lt;a href=&#34;https://metacpan.org/pod/Search::MultiMatch&#34;&gt;Search::MultiMatch&lt;/a&gt; uses 2 dimensional arrays as keys, and &lt;a href=&#34;https://metacpan.org/pod/Search::ByPrefix&#34;&gt;Search::ByPrefix&lt;/a&gt; searches for substring matches&lt;/li&gt;
&lt;li&gt;Normalize URIs with &lt;a href=&#34;https://metacpan.org/pod/URI::Normalize&#34;&gt;URI::Normalize&lt;/a&gt; - no more missing trailing slashes, yay!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/YAML::LoadBundle&#34;&gt;YAML::LoadBundle&lt;/a&gt; loads a directory of YAML files into a single data structure, with different merge options. Nice!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use map reduce with just a few lines of code using &lt;a href=&#34;https://metacpan.org/pod/MapReduce::Framework::Simple&#34;&gt;MapReduce::Framework::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ReadonlyX&#34;&gt;ReadonlyX&lt;/a&gt; aims to be a faster, better version of Readonly. I wonder how it compares to community favorite &lt;a href=&#34;https://metacpan.org/pod/Const::Fast&#34;&gt;Const::Fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write your script in any encoding with &lt;a href=&#34;https://metacpan.org/pod/Filter::Encoding&#34;&gt;Filter::Encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alt::FFI::libffi&#34;&gt;Alt::FFI::libffi&lt;/a&gt; provides a Perl Foreign Function interface based on libffi&lt;/li&gt;
&lt;li&gt;Monkeypatch Moose exceptions with &lt;a href=&#34;https://metacpan.org/pod/MooseX::ErrorHandling&#34;&gt;MooseX::ErrorHandling&lt;/a&gt;. Docs say &amp;ldquo;This module is almost certainly a bad idea&amp;rdquo;. Ready for production then!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Params::ValidationCompiler&#34;&gt;Params::ValidationCompiler&lt;/a&gt; let&amp;rsquo;s you create and re-use parameter validation routines&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::AVR_HVSP&#34;&gt;Device::Chip::AVR_HVSP&lt;/a&gt; enables high-voltage serial programming for AVR chips&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::GoogleEarth::AutoTour&#34;&gt;Geo::GoogleEarth::AutoTour&lt;/a&gt; generates Google Earth tours using tracks and paths&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::WWWAuthenticate&#34;&gt;Parse::WWWAuthenticate&lt;/a&gt; parses the WWW-Authenticate HTTP header; not sure if this is better than using a general purpose parser like &lt;a href=&#34;https://metacpan.org/pod/HTTP::XSHeaders&#34;&gt;HTTP::XSHeaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PEF::Front&#34;&gt;PEF::Front&lt;/a&gt; is a new web framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plift&#34;&gt;Plift&lt;/a&gt; is a new templating module&lt;/li&gt;
&lt;li&gt;Implement a mock HTTP server for testing using &lt;a href=&#34;https://metacpan.org/pod/Test::HTTP::MockServer&#34;&gt;Test::HTTP::MockServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a test Apache instance with &lt;a href=&#34;https://metacpan.org/pod/Test::Instance::Apache&#34;&gt;Test::Instance::Apache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing Geo::libpostal</title>
      <link>http://localhost:1313/article/announcing-geo--libpostal/</link>
      <pubDate>Tue, 19 Jul 2016 08:33:59 +0000</pubDate>
      
      <guid>http://localhost:1313/article/announcing-geo--libpostal/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/openvenues/libpostal&#34;&gt;libpostal&lt;/a&gt; is a C library for normalizing and parsing international street addresses. It&amp;rsquo;s built from &lt;a href=&#34;http://www.openstreetmap.org/&#34;&gt;OpenStreetMap&lt;/a&gt; data, supports normalization in over 60 languages and can parse addresses from over 100 countries. It&amp;rsquo;s blindingly fast and now you can use it with Perl using &lt;a href=&#34;https://metacpan.org/pod/Geo::libpostal&#34;&gt;Geo::libpostal&lt;/a&gt;, a new module I wrote.&lt;/p&gt;

&lt;h3 id=&#34;normalizing-an-address&#34;&gt;Normalizing an address&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you support an application with a customer sign up process where the customer provides their address. One way to prevent duplicate sign-ups is by allowing only one customer per address. But how do you handle the scenario where the customer types their address slightly differently every time?&lt;/p&gt;

&lt;p&gt;One answer is to use libpostal&amp;rsquo;s normalization capability to expand single address string into valid variants. If you already have a customer whose address matches one of the variants, you know you&amp;rsquo;ve got a duplicate sign-up. Let&amp;rsquo;s say you have a customer with the address &amp;ldquo;216 Park Avenue Apt 17D, New York, NY 10022&amp;rdquo;. Then another customer comes along with the ever-so-similar address &amp;ldquo;216 Park &lt;strong&gt;Ave&lt;/strong&gt; Apt 17D, New York, NY 10022&amp;rdquo;. Here&amp;rsquo;s how you can test for that with Perl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Geo::libpostal &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expand_address&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @original_variants &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expand_address(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;216 Park Avenue Apt 17D, New York, NY 10022&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# @original_variants contains:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   216 park avenue apartment 17d new york new york 10022&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   216 park avenue apartment 17d new york ny 10022&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @new_variants &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expand_address(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;216 Park Ave Apt 17D, New York, NY 10022&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $address (@new_variants) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grep { $address &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; $_ } @original_variants) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duplicate address found!\n&amp;#34;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;expand_address()&lt;/code&gt; supports a ton of &lt;a href=&#34;https://metacpan.org/pod/Geo::libpostal#expand_address&#34;&gt;options&lt;/a&gt;: including returning results in multiple languages, expanding only certain components of an address, and the format of the expanded addresses.&lt;/p&gt;

&lt;h3 id=&#34;parsing-an-address&#34;&gt;Parsing an address&lt;/h3&gt;

&lt;p&gt;libpostal can also parse an address string into its constituent parts using such as house name, number, city and postcode. This can be useful for all sorts of things from information extraction to simplifying web forms. This is how to parse an address string with Perl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Geo::libpostal &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parse_address&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse_address(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;216 Park Avenue Apt 17D, New York, NY 10022&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# %address contains:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    road         =&amp;gt; &amp;#39;park avenue apt 17d&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    city         =&amp;gt; &amp;#39;new york&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    postcode     =&amp;gt; &amp;#39;10022&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    state        =&amp;gt; &amp;#39;ny&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    house_number =&amp;gt; &amp;#39;216&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;a-slow-starter&#34;&gt;A slow starter&lt;/h3&gt;

&lt;p&gt;To be as fast as possible, libpostal uses setup functions to create lookup tables in memory. These can take several seconds to construct, so under the hood Geo::libpostal lazily calls the setup functions for you. This means that the first call to &lt;code&gt;expand_address&lt;/code&gt; or &lt;code&gt;parse_address&lt;/code&gt; is a lot slower than usual as the setup functions are running as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Geo::libpostal &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expand_address&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# this is slow&lt;/span&gt;
@addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expand_address(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;216 Park Avenue Apt 17D, New York, NY 10022&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# this is fast!&lt;/span&gt;
@addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expand_address(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;76 Ninth Avenue, New York, NY 10111&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, libpostal has teardown functions which unload the lookup tables. Geo::libpostal has an internal function, &lt;code&gt;_teardown&lt;/code&gt; that is automatically called in an &lt;code&gt;END&lt;/code&gt; block, but you can call it directly too. The only effect will be that the subsequent call to &lt;code&gt;expand_address&lt;/code&gt; or &lt;code&gt;parse_address&lt;/code&gt; will be slower, as the setup functions are called again. With the latest version of libpostal it is safe to call setup or teardown multiple times in a process.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openvenues/libpostal&#34;&gt;libpostal&lt;/a&gt; is hosted on GitHub and maintained by &lt;a href=&#34;http://iam.al/&#34;&gt;Al Barrentine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This &lt;a href=&#34;https://medium.com/@albarrentine/statistical-nlp-on-openstreetmap-b9d573e6cc86#.5cbxb54w5&#34;&gt;blog post&lt;/a&gt; by Al Barrentine is an in-depth introduction to libpostal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::libpostal&#34;&gt;Geo::libpostal&lt;/a&gt; is hosted on &lt;a href=&#34;https://github.com/dnmfarrell/Geo-libpostal&#34;&gt;GitHub&lt;/a&gt;, pull requests welcome!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

