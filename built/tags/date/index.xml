<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Date on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/date/</link>
    <description>Recent content in Date on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2014 04:24:25 +0000</lastBuildDate>
    <atom:link href="/tags/date/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Solve almost any datetime need with Time::Piece</title>
      <link>http://localhost:1313/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</link>
      <pubDate>Fri, 10 Jan 2014 04:24:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Datetimes come up all the time in programming, so being fluent in handling them is an essential skill. There are &lt;a href=&#34;https://metacpan.org/search?q=date+time&#34;&gt;many modules&lt;/a&gt; on CPAN for dealing with datetimes, but for most tasks you only need one: &lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Time::Piece has been in Perl core since version 5.8, so you should already have it installed. If you don&amp;rsquo;t have it, you can install it via cpan at the terminal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Time::Piece&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-a-time-piece-object&#34;&gt;Create a Time::Piece object&lt;/h3&gt;

&lt;p&gt;To create a new Time::Piece object with the current system time, use the version of localtime exported by Time::Piece:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;get-a-datetime-string-in-any-format&#34;&gt;Get a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece provides many methods for printing the datetime in common formats. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$time;           &lt;span style=&#34;color:#75715e&#34;&gt;# Thu Jan  9 21:21:36 2014&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;datetime; &lt;span style=&#34;color:#75715e&#34;&gt;# 2014-01-09T21:21:36&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;date;     &lt;span style=&#34;color:#75715e&#34;&gt;# 2014-01-09&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mdy;      &lt;span style=&#34;color:#75715e&#34;&gt;# 01-09-2014&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fullday;  &lt;span style=&#34;color:#75715e&#34;&gt;# Thursday&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hms;      &lt;span style=&#34;color:#75715e&#34;&gt;# 21:21:36&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;epoch;    &lt;span style=&#34;color:#75715e&#34;&gt;# 1389320496 (Unix time)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to get the datetime in a custom format, Time::Piece provides a &amp;ldquo;strftime&amp;rdquo; method which takes a custom string format. A complete list of formatting codes is on the &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;man page&lt;/a&gt;. Here are some examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%y/%m/%d %H:%M&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# 14/01/09 21:21&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%y_%m_%d&amp;#39;&lt;/span&gt;);       &lt;span style=&#34;color:#75715e&#34;&gt;# 14_01_09&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;);             &lt;span style=&#34;color:#75715e&#34;&gt;# 1389320496 (Unix time)&lt;/span&gt;
$time&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y %y %G %g&amp;#39;&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;# 2014 14 2014 14 (4 different years,really)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;read-a-datetime-string-in-any-format&#34;&gt;Read a datetime string in any format&lt;/h3&gt;

&lt;p&gt;Time::Piece also provides a strptime method which takes a string, and a string format and initializes a new Time::Piece object with that datetime. If either the date or time component is missing, Time::Piece assumes the current date or time. Here are some examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $yesterday    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01-08-2014&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%m-%d-%Y&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $yesterdayDMY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;08-01-14&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%d-%m-%y&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lunchhour24  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;12:30&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%H:%M&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bedtime      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;12:30 AM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%l:%M %p&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# epoch - no problem&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_epoch   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1501615857&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# timezones are easy too&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $utc_datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mon, 19 Jan 2015 14:56:20 +0000&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%a, %d %b %Y %H:%M:%S %z&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $eastern_datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2015-10-05T09:34:19 -0400&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y-%m-%dT%T %z&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pacific_datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2015-10-05T09:34:19 -0700&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y-%m-%dT%T %z&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Time::Piece fails to parse timezones with colons in them. To handle that, just remove the colon from the timezone before passing it to &lt;code&gt;strptime&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2015-10-05T09:34:19 -04:00&amp;#39;&lt;/span&gt;;
$datetime    &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/([+\-]\d\d):(\d\d)/$1$2/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dt       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime($datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m-%dT%H:%M:%S %z&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strptime&lt;/code&gt; uses the same formatting codes as &lt;code&gt;strftime&lt;/code&gt;, you can get the full list &lt;a href=&#34;http://man7.org/linux/man-pages/man3/strftime.3.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compare-datetimes&#34;&gt;Compare datetimes&lt;/h3&gt;

&lt;p&gt;This is easy. Just initialize two Time::Piece objects and compare them with an operator (&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt; and &amp;lt;=&amp;gt;). For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $today &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $yesterday &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;01/08/2014&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%m/%d/%Y&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($today &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $yesterday) {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;datetime-math&#34;&gt;Datetime math&lt;/h3&gt;

&lt;p&gt;The first thing to know is that Time::Piece objects are &lt;strong&gt;immutable&lt;/strong&gt; so any operation performed on them will return a new object.&lt;/p&gt;

&lt;p&gt;Time::Piece provides a couple of methods for adding months and years (&amp;ldquo;add_months&amp;rdquo;, &amp;ldquo;add_years&amp;rdquo;) from Time::Piece objects. Simply use a negative integer to subtract. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $nextMonth   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $datetime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_months(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;# plus one month&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lastQuarter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $datetime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_months(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;# minus three months&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $nextDecade  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $datetime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_years(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;# plus 10 years&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lastYear    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $datetime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_years(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;# minus 1 year&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll often need more granular control over the datetime, and that&amp;rsquo;s where the &lt;a href=&#34;https://metacpan.org/pod/Time::Seconds&#34;&gt;Time::Seconds&lt;/a&gt; module comes in. Just include it in your program, and it will export several constants which can be used to adjust the datetime. The constants are: ONE_MINUTE, ONE_HOUR, ONE_DAY, ONE_WEEK, ONE_MONTH, ONE_YEAR, ONE_FINANCIAL_MONTH, LEAP_YEAR, NON_LEAP_YEAR.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to use the constants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Seconds;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tomorrow  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ONE_DAY;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lastWeek  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ONE_WEEK;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lastMonth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ONE_MONTH;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to change the datetime by seconds, with you can simply use integer arithmetic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $thirtySecsAgo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $now &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt; has excellent documentation, you can read it on the command line with perldoc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc Time::Piece&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

