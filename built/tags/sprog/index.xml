<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sprog on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/sprog/</link>
    <description>Recent content in Sprog on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jun 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/sprog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Data Munging with Sprog</title>
      <link>http://localhost:1313/pub/2005/06/23/sprog.html/</link>
      <pubDate>Thu, 23 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/23/sprog.html/</guid>
      <description>

&lt;p&gt;We&amp;rsquo;ve all been there&amp;ndash;a data translation problem rears its head and you reach for your toolkit of Perl snippets. It might involve parsing a CSV file, extracting MIME attachments, generating bulk SQL insert statements, or scraping data from a web application. You know you have code lying around that&amp;rsquo;ll take you halfway there, if only you could find it. Then there&amp;rsquo;s the problem of pulling it all together.&lt;/p&gt;

&lt;p&gt;Wouldn&amp;rsquo;t it be great if there was a way to catalog your code snippets? How about a way to browse or search by keyword, a way to modularize your code for easy reuse, and a way to document it and easily access that documentation? Wouldn&amp;rsquo;t it be even better if you could pull the pieces together to assemble a solution without having to actually write code at all?&lt;/p&gt;

&lt;p&gt;Now there is. Now there&amp;rsquo;s Sprog.&lt;/p&gt;

&lt;h3 id=&#34;the-assignment&#34;&gt;The Assignment&lt;/h3&gt;

&lt;p&gt;Picture yourself as a sysadmin at Example Corp. Your boss calls you in to say he&amp;rsquo;s setting up an LDAP server and he needs you to whip up an Lightweight Directory Interchange Format (LDIF) file, containing every employee&amp;rsquo;s name, phone number, and email account information. Oh, and he needs it this afternoon, so you&amp;rsquo;d better get typing.&lt;/p&gt;

&lt;p&gt;You sit back down at your desk to contemplate your fate. Who ya gonna call? The answer hits you&amp;ndash;the company phone list on the intranet! It has all of the information you need (Figure 1); you just need to get it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/phonelist.gif&#34; alt=&#34;Phone List Web Page&#34; width=&#34;500&#34; height=&#34;367&#34; /&gt;
&lt;em&gt;Figure 1. The company phone list web page&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;With a second flash of inspiration, you download the latest version of &lt;a href=&#34;http://sprog.sourceforge.net/&#34;&gt;Sprog&lt;/a&gt;. You install the Perl Gtk bindings and a few other modest prerequisites and before you know it, you&amp;rsquo;re looking at a clean green GUI (Figure 2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/01_workbench.gif&#34; alt=&#34;The Sprog Workspace&#34; width=&#34;500&#34; height=&#34;367&#34; /&gt;
&lt;em&gt;Figure 2. The Sprog workspace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A quick scan of the palette on the left reveals something labeled Retrieve URL, which sounds like a good start. Reading the instructions at the bottom of the window, you learn that the thing is a gear and that you can drag it across and drop it on the workspace.&lt;/p&gt;

&lt;p&gt;Having dragged the gear onto the workspace, you right-click on it and select Properties. Up pops a properties dialog (Figure 3), with a handy box where you paste in the URL of the phone list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/02_properties.gif&#34; alt=&#34;A properties dialog&#34; width=&#34;500&#34; height=&#34;368&#34; /&gt;
&lt;em&gt;Figure 3. A properties dialog&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, you drag across the Text Window gear from the palette and drop it on top of the Retrieve URL gear. It snaps reassuringly into position so that the two gears&amp;rsquo; connectors fasten together securely (Figure 4).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/03_interlocked.gif&#34; alt=&#34;Two gears connected together&#34; width=&#34;250&#34; height=&#34;94&#34; /&gt;
&lt;em&gt;Figure 4. Two gears connected together&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://conferences.oreillynet.com/os2005/&#34;&gt;&lt;img src=&#34;http://conferences.oreillynet.com/images/os2005/banners/120x240.gif&#34; alt=&#34;O&amp;#39;Reilly Open Source Convention 2005.&#34; width=&#34;120&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;
When you click the Run button on the toolbar, the machine leaps into life. The gears turn, it retrieves data, and a text window appears to display the HTML of the phone list page. Okay, great, you haven&amp;rsquo;t written a line of code and already you&amp;rsquo;ve replicated your browser&amp;rsquo;s View Source function.&lt;/p&gt;

&lt;p&gt;You save the machine to a file called &lt;em&gt;phonelist.sprog&lt;/em&gt; and then look for the next clue.&lt;/p&gt;

&lt;h3 id=&#34;making-connections&#34;&gt;Making Connections&lt;/h3&gt;

&lt;p&gt;Returning to the palette, you find a gear labelled Parse HTML Table. It looks promising, so you drag it onto the workbench. You pull apart the first two gears and attempt to add the new one in between them. Unfortunately, the new gear has a funny shaped output connector and the Text Window gear doesn&amp;rsquo;t seem to fit onto it.&lt;/p&gt;

&lt;p&gt;You right-click on the new gear and select Help. From the help page you learn that the output connector is a list connector. The gear takes a stream of HTML text and outputs rows of data, where each row is a list of values plucked from adjacent table cells.&lt;/p&gt;

&lt;p&gt;Once more, back at the palette, you discover a List To CSV gear, which has an input connector to match the table parser and an output connector to match the text window gear. You drag it over and snap them all together (Figure 5).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/04_to_csv.gif&#34; alt=&#34;Machine to produce CSV&#34; width=&#34;250&#34; height=&#34;152&#34; /&gt;
&lt;em&gt;Figure 5. A machine to produce CSV&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when you run the machine again, the text window fills with lovely CSV data. It&amp;rsquo;s not that you want CSV data, of course, but at least you can see that the machine has parsed the relevant data out from the HTML page. Or has it?&lt;/p&gt;

&lt;p&gt;On closer inspection, you realize that the machine has parsed the wrong table from the HTML. In true 1998 style, the page designer used nested tables to lay out the page. Even the list of navigation links is a table. Oh dear!&lt;/p&gt;

&lt;p&gt;The properties dialog for the Parse HTML Table gear allows you to specify which table you want to parse. The help page explains that you can enter just a number (such as 2 for the second table) or an XPath expression. There&amp;rsquo;s even an example XPath expression which you can cut and paste to select a table based on the contents of the first cell in the first row:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//table[./tr[1]/th[1 and contains(text(), &#39;First Name&#39;)]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As it happens, a bit of trial and error reveals that the phone list data is in the third table, so you set the selector to &lt;code&gt;3&lt;/code&gt;. Now when you run the machine, you see exactly the data you want in beautiful CSV format (not that you want CSV data, of course).&lt;/p&gt;

&lt;p&gt;Hang on! The data still isn&amp;rsquo;t quite right. The data values don&amp;rsquo;t contain any HTML tags, but they do seem to have lots of leading and trailing white space and embedded newlines. Racing back to the palette, you grab the Strip Whitespace gear, slot it into your machine and tweak its properties to specify exactly which white space you want stripped. Now when you run the machine again, you do get truly lovely CSV data (Figure 6).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/05_lovely_csv.gif&#34; alt=&#34;CSV output&#34; width=&#34;491&#34; height=&#34;266&#34; /&gt;
&lt;em&gt;Figure 6. CSV output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course, there&amp;rsquo;s no getting away from the fact that you still don&amp;rsquo;t want CSV data.&lt;/p&gt;

&lt;h3 id=&#34;what-were-you-trying-to-do-again&#34;&gt;What Were You Trying To Do, Again?&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;div class=&#34;secondary&#34;&gt;
&lt;p&gt;Did you know? Your email client can import LDIF files into your address book.&lt;/p&gt;
&lt;p&gt;To import an LDIF file into your Thunderbird address book:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open your address book.&lt;/li&gt;
&lt;li&gt;Select Tools -&amp;gt; Import.&lt;/li&gt;
&lt;li&gt;Select Address Books and then Next.&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Text file (LDIF ...)&amp;quot; and then Next.&lt;/li&gt;
&lt;li&gt;Select the LDIF file created from Sprog and then Open.&lt;/li&gt;
&lt;li&gt;Select Finish.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Remembering your original orders, you do a bit of reading about LDIF files. Your research shows that LDIF is a fairly simple text format. You need to generate a text file with an entry for each person separated by blank lines and formatted something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dn: uid=cat,ou=Staff,ou=People,dc=example,dc=com
objectClass: person
objectClass: inetOrgPerson
cn: Catherine Trenton
uid: cat 
sn: Trenton
givenName: Catherine
mail: cat@example.com
organizationName: Example Corp
telephoneNumber: 555-2349
mobileTelephoneNumber: 555-9623
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like a job for a template, and sure enough, you find a gear entitled Apply Template (TT2) in the palette. The template gear&amp;rsquo;s input connector is unlike either the pipe or the list connectors you&amp;rsquo;ve encountered so far. The help page tells you it&amp;rsquo;s a record connector that passes data using Perl hashes rather than arrays.&lt;/p&gt;

&lt;p&gt;Back on the palette, you find a handy gear called &amp;ldquo;List to Record&amp;rdquo; that automagically converts lists to records by assuming the first row contains a column heading, which it uses for field names (hash keys). You remove the List To CSV gear and replace it with &amp;ldquo;List to Record,&amp;rdquo; followed by the Apply Template (TT2) gears. With a few clicks and drags, you reassemble your machine into its &amp;ldquo;almost final&amp;rdquo; shape (Figure 7).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/06_template_gear.gif&#34; alt=&#34;Machine including template gear&#34; width=&#34;250&#34; height=&#34;207&#34; /&gt;
&lt;em&gt;Figure 7. Machine including template gear&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the properties dialog for the template gear, you add a template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dn: uid=[% email %],ou=Staff,ou=People,dc=example,dc=com
objectClass: person
objectClass: inetOrgPerson
cn: [% first_name %] [% surname %]
uid: [% email %]
sn: [% surname %]
givenName: [% first_name %]
mail: [% email %]
organizationName: Example Corp
telephoneNumber: [% phone %]
mobileTelephoneNumber: [% cell %]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results are almost exactly what you want, except that there are a couple of places where you wanted a &lt;code&gt;uid&lt;/code&gt; field and the closest you had available was &lt;code&gt;email&lt;/code&gt;. You need to strip out the &lt;code&gt;@example.com&lt;/code&gt; from the &lt;code&gt;dn&lt;/code&gt; and &lt;code&gt;uid&lt;/code&gt; lines. You unplug the Text Window gear and insert a &amp;ldquo;Find and Replace&amp;rdquo; gear to fix the first occurrence (Figure 8):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/07_fix_dn.gif&#34; alt=&#34;Find/replace to fix dn&#34; width=&#34;340&#34; height=&#34;199&#34; /&gt;
&lt;em&gt;Figure 8. Adding a &amp;ldquo;Find and Replace&amp;rdquo; gear&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;and another one to fix the second (Figure 9):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/08_fix_uid.gif&#34; alt=&#34;Find/replace to fix uid&#34; width=&#34;340&#34; height=&#34;199&#34; /&gt;
&lt;em&gt;Figure 9. Adding another &amp;ldquo;Find and Replace&amp;rdquo; gear&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;and now the output is exactly like what you wanted (Figure 10).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/09_final_output.gif&#34; alt=&#34;Final output&#34; width=&#34;491&#34; height=&#34;330&#34; /&gt;
&lt;em&gt;Figure 10. Final output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You swap out the Text Window gear for a Write File gear, select a filename, and run the machine one last time (Figure 11).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2005_06_23_sprog/10_final_machine.gif&#34; alt=&#34;Final machine&#34; width=&#34;250&#34; height=&#34;264&#34; /&gt;
&lt;em&gt;Figure 11. The final machine&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ve finished the job and you never had to touch your semicolon key once.&lt;/p&gt;

&lt;h3 id=&#34;more-about-sprog&#34;&gt;More About Sprog&lt;/h3&gt;

&lt;p&gt;I hope this article has given you some idea of what&amp;rsquo;s possible with Sprog. It can be a useful addition to the toolbox of people who write scripts to transform data. Beyond that, though, I intend it to be a useful tool for people who don&amp;rsquo;t write scripts&amp;ndash;&lt;em&gt;scripting for the GUI guys&lt;/em&gt;, if you will. Anyone who&amp;rsquo;s smart enough to drive a spreadsheet is smart enough to drive Sprog. It&amp;rsquo;s just a different way of working with data. Even if the only thing those people use it for is getting data into a form their spreadsheets can handle, then that&amp;rsquo;s surely useful.&lt;/p&gt;

&lt;p&gt;Sprog is under active development, with the framework being extended and new gears added all the time. Writing your own gears is easier than you might imagine, and there is a mailing list to ask questions and share your ideas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sprog.sourceforge.net&#34;&gt;Sprog project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.sourceforge.net/lists/listinfo/sprog-users&#34;&gt;Sprog mailing list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2005_06_23_sprog/files.tar.gz&#34;&gt;Article example files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

