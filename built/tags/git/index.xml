<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Mar 2020 00:46:47 +0000</lastBuildDate>
    <atom:link href="/tags/git/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</link>
      <pubDate>Thu, 12 Mar 2020 00:46:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::GitForge&#34;&gt;API::GitForge&lt;/a&gt; is a generic interface to APIs of sites like GitHub, GitLab etc.&lt;/li&gt;
&lt;li&gt;Build GIMP from its git repo using &lt;a href=&#34;https://metacpan.org/pod/App::gimpgitbuild&#34;&gt;App::gimpgitbuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use reCAPTCHA API version v3 with &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA::V3&#34;&gt;Captcha::reCAPTCHA::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Work with the Windows Credential Manager using &lt;a href=&#34;https://metacpan.org/pod/credsman&#34;&gt;credsman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send email via the SendGrid v3 Web API with &lt;a href=&#34;https://metacpan.org/pod/Email::SendGrid::V3&#34;&gt;Email::SendGrid::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Annex&#34;&gt;Git::Annex&lt;/a&gt; is a Perl interface for git-annex repositories&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gtk3::WebKit2&#34;&gt;Gtk3::WebKit2&lt;/a&gt; provides WebKit2 bindings for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neo4j::Bolt&#34;&gt;Neo4j::Bolt&lt;/a&gt; can communicate with a Neo4j server agent using Bolt protocol&lt;/li&gt;
&lt;li&gt;Control Windows Notepad++ app with code using &lt;a href=&#34;https://metacpan.org/pod/Win32::Mechanize::NotepadPlusPlus&#34;&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OPCUA::Open62541&#34;&gt;OPCUA::Open62541&lt;/a&gt; is a wrapper for the open62541 &lt;a href=&#34;https://en.wikipedia.org/wiki/OPC_Unified_Architecture&#34;&gt;OPC UA library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query Rundeck&amp;rsquo;s REST API with &lt;a href=&#34;https://metacpan.org/pod/RundeckAPI&#34;&gt;RundeckAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weather::MOSMIX&#34;&gt;Weather::MOSMIX&lt;/a&gt; downloads and parses the German weather service&amp;rsquo;s forecast data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::File::Share&#34;&gt;Mojo::File::Share&lt;/a&gt; aims to provide better local share directory support with Mojo::File&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::DNS::DomainController::Discovery&#34;&gt;Net::DNS::DomainController::Discovery&lt;/a&gt; can discover Microsoft Active Directory domain controllers via DNS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pb&#34;&gt;Pb&lt;/a&gt; is a workflow system made from Perl and bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Jasonify&#34;&gt;Jasonify&lt;/a&gt; is Just Another Serialized Object Notation library&lt;/li&gt;
&lt;li&gt;Create PDFs with &lt;a href=&#34;https://metacpan.org/pod/Mxpress::PDF&#34;&gt;Mxpress::PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set default PerlIO layers with &lt;a href=&#34;https://metacpan.org/pod/open::layers&#34;&gt;open::layers&lt;/a&gt;, an alternative to the open pragma&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repository::Plugin::Diff&#34;&gt;Git::Repository::Plugin::Diff&lt;/a&gt; adds a diff method to Git::Repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LooksLike&#34;&gt;LooksLike&lt;/a&gt; provides more precise alternatives to looks_like_number&lt;/li&gt;
&lt;li&gt;Have a role fire a callback when its applied via &lt;a href=&#34;https://metacpan.org/pod/Role::Hooks&#34;&gt;Role::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Arrow&#34;&gt;Test::Arrow&lt;/a&gt; is an Object-Oriented testing library with a fun syntax&lt;/li&gt;
&lt;li&gt;Mock method behavior with queued subs using &lt;a href=&#34;https://metacpan.org/pod/Test::Ratchet&#34;&gt;Test::Ratchet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Timer::Milestones&#34;&gt;Timer::Milestones&lt;/a&gt; is an easy-to-use code timing module&lt;/li&gt;
&lt;li&gt;Track changes to scalars (in color!) with &lt;a href=&#34;https://metacpan.org/pod/Var::Mystic&#34;&gt;Var::Mystic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Manifesto&#34;&gt;XS::Manifesto&lt;/a&gt; describes an approach for creating shared XS code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Zydeco&#34;&gt;Zydeco&lt;/a&gt; is a new OO framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get Raycast field-of-view and related routines using &lt;a href=&#34;https://metacpan.org/pod/Game::RaycastFOV&#34;&gt;Game::RaycastFOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Spiral&#34;&gt;Math::Spiral&lt;/a&gt; returns an endless stream of X, Y offset coordinates which represent a spiral shape&lt;/li&gt;
&lt;li&gt;Add numbers with fewer numerical errors using &lt;a href=&#34;https://metacpan.org/pod/Math::Summation&#34;&gt;Math::Summation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage an ecosystem of Plack organisms under Kelp with &lt;a href=&#34;https://metacpan.org/pod/Kelp::Module::Symbiosis&#34;&gt;Kelp::Module::Symbiosis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::HealthCheck&#34;&gt;Plack::Middleware::HealthCheck&lt;/a&gt; adds a health check endpoint for your Plack app&lt;/li&gt;
&lt;li&gt;Control an embedded WebKit2 engine with &lt;a href=&#34;https://metacpan.org/pod/WWW::WebKit2&#34;&gt;WWW::WebKit2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How do I Open This?</title>
      <link>http://localhost:1313/article/how-do-i-open-this-/</link>
      <pubDate>Mon, 03 Jun 2019 18:26:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-do-i-open-this-/</guid>
      <description>

&lt;p&gt;When I&amp;rsquo;m working on code, I have to open a lot of files.  I work primarily at the command line, inside a vim editor.  On any given day I may need to translate some or all of the following into file paths that vim can understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack traces&lt;/li&gt;
&lt;li&gt;Perl module names&lt;/li&gt;
&lt;li&gt;Perl module names suffixed with subroutine names&lt;/li&gt;
&lt;li&gt;git-grep results&lt;/li&gt;
&lt;li&gt;GitHub URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figuring this stuff out isn&amp;rsquo;t generally that hard, but it can make your day just a little longer than it needs to be, so I wrote &lt;a href=&#34;https://metacpan.org/pod/ot&#34;&gt;ot&lt;/a&gt;: a command line utility provided by &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using vim in examples, but ot also supports nvim, emacs,nano and pico, defaulting to whatever you have set in &lt;code&gt;$ENV{EDITOR}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;following-along&#34;&gt;Following Along&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be working out of a repository at &lt;a href=&#34;https://github.com/oalders/git-helpers&#34;&gt;https://github.com/oalders/git-helpers&lt;/a&gt;.  If you&amp;rsquo;d like to follow along:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oalders/git-helpers.git
$ cd git-helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-a-perl-module-name&#34;&gt;Using a Perl Module Name&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now in the root of the &lt;strong&gt;git-helpers&lt;/strong&gt; Git repository.  Let&amp;rsquo;s say we want to open the Git::Helpers module.  Translating a Perl module name into a file path isn&amp;rsquo;t all that hard.  Given something like Git::Helpers, I know that I&amp;rsquo;m likely (but not always) looking for a file called &lt;code&gt;Git/Helpers.pm&lt;/code&gt;.  This could be in lib, t/lib or some custom directory.  If I know exactly where to find this file, I can invoke vim directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if I&amp;rsquo;m not sure, or if I&amp;rsquo;m just lazy, this will get me to the same place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because, by default, ot will search your lib and t/lib directories for local files. You can override this via the &lt;code&gt;$ENV{OPEN_THIS_LIBS}&lt;/code&gt; variable. It accepts a comma-separated list of libs.&lt;/p&gt;

&lt;p&gt;If the file can&amp;rsquo;t be found in one of the standard lib locations, ot will try to find an installed file on the system.  So, if we&amp;rsquo;re not in the root of the git-helpers repository, but we&amp;rsquo;ve previously installed Git::Helpers from CPAN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;might open open the following file: &lt;code&gt;~/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Git/Helpers.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-perl-module-at-a-subroutine-declaration&#34;&gt;Opening a Perl Module at a Subroutine Declaration&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take this a step further.  What if we want to open a file for a module but we also want to go straight to the correct subroutine declaration?  Something like &lt;code&gt;Git::Helpers::is_inside_work_tree()&lt;/code&gt;.  We could probably craft a fancy one-liner to do this, but today we are lazy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.  This will Do The Right Thing.  (Note that in this case we had to quote the args to ot.  Your shell will likely require this as well.)&lt;/p&gt;

&lt;p&gt;We can do exactly the same thing for an installed module.  Try this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test::More::subtest()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case it opens &lt;code&gt;/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Test/More.pm&lt;/code&gt; at line 807, which is &lt;code&gt;sub subtest {&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-using-a-line-number&#34;&gt;Opening a File Using a Line Number&lt;/h2&gt;

&lt;h4 id=&#34;stack-traces&#34;&gt;Stack Traces&lt;/h4&gt;

&lt;p&gt;I see a lot of stack traces on any given day.  A relevant chunk of a stack trace might look like: &lt;code&gt;Died at lib/Git/Helpers.pm line 50.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Doing this by hand I might copy the file path and enter the following at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;rsquo;m feeling fancy, I might translate the line number into something that vim understands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim +50 lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, I can just copy the file location and line number and feed it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do the right thing and open &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; in vim at line 50.&lt;/p&gt;

&lt;h4 id=&#34;git-grep&#34;&gt;git-grep&lt;/h4&gt;

&lt;p&gt;The results of some searches, like &lt;code&gt;git grep&lt;/code&gt;, can contain line numbers as well as file names.  To configure this behaviour in git use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global grep.lineNumber true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t want to configure this directly in git you can also search via &lt;code&gt;git grep --line-number foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got line numbers in our git grep output, we can use its output to give hints to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub _build_latest_release&amp;#39;&lt;/span&gt; .
lib/Git/Helpers/CPAN.pm:70:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having run the above search, we can copy paste the results to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers/CPAN.pm:70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 70.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-at-an-arbitrary-line-and-column&#34;&gt;Opening a File at an Arbitrary Line and Column&lt;/h2&gt;

&lt;p&gt;As we saw above, ot can open files at the correct line number.  Let&amp;rsquo;s get even lazier and have ot open our files at the correct line &lt;strong&gt;and&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;If you use  the &lt;code&gt;--vimgrep&lt;/code&gt; option with &lt;code&gt;ripgrep&lt;/code&gt; then you will see column numbers as well as line numbers with your search results.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rg --vimgrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt; .
./lib/Git/Helpers/CPAN.pm:20:17:    builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt;,
./lib/Git/Helpers/CPAN.pm:70:5:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 20 and column 17, simply copy/paste the rg output and pass it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot ./lib/Git/Helpers/CPAN.pm:20:17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-github-links-locally&#34;&gt;Opening Github Links Locally&lt;/h2&gt;

&lt;p&gt;Passing a full GitHub URL &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/a&gt;, to &lt;code&gt;ot&lt;/code&gt; will allow you to open the file locally, if it can be found in your relative file path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; at line 50.&lt;/p&gt;

&lt;p&gt;Passing a truncated URL path is also valid, if the path parts exist locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-a-locally-checked-out-file-at-github&#34;&gt;Opening a Locally Checked Out File at GitHub&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; flag will allow you to open your local files on GitHub.&lt;/p&gt;

&lt;p&gt;Any of the following commands can launch a browser with a GitHub URL (hopefully) containing the file you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers
$ ot -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;
$ ot -b Git::Helpers:75
$ ot -b Git::Helpers line &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, from the top level of the git-helpers repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers:75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-in-your-env-path&#34;&gt;Opening a File in Your &lt;code&gt;$ENV{PATH}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ot can also be used as a shortcut to inspect files which can be found inside your &lt;code&gt;$ENV{PATH}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot perldoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;~/.plenv/versions/5.26.1/bin/perldoc&lt;/code&gt; on my machine.  You can think of this as shorthand for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ which perldoc | xargs -o vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to add support for more editors or other formats of data, please &lt;a href=&#34;https://github.com/oalders/open-this/issues&#34;&gt;get in touch with me&lt;/a&gt; and we&amp;rsquo;ll see what we can do.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See Also&lt;/h2&gt;

&lt;p&gt;For other solutions to the problem of finding and opening files, I highly recommend &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/PathPicker&#34;&gt;fpp&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Consistency in TMTOWTDI Perl</title>
      <link>http://localhost:1313/article/consistency-in-tmtowtdi-perl/</link>
      <pubDate>Mon, 08 Apr 2019 20:46:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/consistency-in-tmtowtdi-perl/</guid>
      <description>

&lt;p&gt;As a Perl developer I have a lot of freedom. TMTOWTDI (There&amp;rsquo;s More Than One Way To Do It) allows me to code how I want to code. I can solve a problem using whatever method I feel works best, whatever works for me. That&amp;rsquo;s a cool thing to have, but at the same time, after working on someone else&amp;rsquo;s code for a while and hating the experience, I can understand TMTOWTDIBSCINABTE (There&amp;rsquo;s More Than One Way To Do It, But Sometimes Consistency Is Not A Bad Thing Either) better as a principle.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been coding in Perl for about 9 years. I&amp;rsquo;ve been around the block a few times, at Evozon we work on a few legacy projects, so I&amp;rsquo;ve seen my fair share of code that makes me a proponent of always coding for the maintainer.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a quote floating around the internet for quite some time now, that sums up things pretty well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m not going to lie, I&amp;rsquo;ve been in a few situations where knowing the person who coded the monstrosity that I had to handle would have resulted in some very bad decisions on my part.&lt;/p&gt;

&lt;p&gt;Freedom is great, consistency is better. It&amp;rsquo;s better for you, when you end up working on your own code in a year, it&amp;rsquo;s better for your team and it&amp;rsquo;s better for whoever else will end up working on that project in the future.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re involved in a project that has multiple developers you will have different ideas and different ways of writing code. I work in a cross-functional team of more than 20 people and for consistent code, we use some small tricks that keeps the code easy to maintain - and us happy. Consistent code improves code quality and eliminates some potential bugs.&lt;/p&gt;

&lt;p&gt;My recommendation is to use a git pre-commit hook that runs &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/perltidy&#34;&gt;perltidy&lt;/a&gt;. The latter might be more cosmetic than anything else, but I find it helpful. I know that there are other possible tools, but I think that these three are a good combination to use, in order to have practical coding standards and consistent-looking code.&lt;/p&gt;

&lt;h2 id=&#34;set-up-perl-critic-and-perl-tidy&#34;&gt;Set Up Perl::Critic and Perl::Tidy&lt;/h2&gt;

&lt;p&gt;You can install &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and &lt;a href=&#34;{{ mcpan &amp;quot;Perl::Tidy&amp;quot; &amp;gt;}}&#34;&gt;Perl::Tidy&lt;/a&gt; from CPAN or they might be available on your package manager. Once installed, you&amp;rsquo;ll need to configure them.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;.perlcriticrc&lt;/code&gt; my suggestion is to start with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;severity = 5
verbose = %f: [%p] %m at line %l, column %c (Severity %s).\n%d\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These options are described in the Perl::Critic &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic#CONFIGURATION&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a basic configuration, which you can build upon based on your project and team needs. Increasing the severity might block simple changes from being commited, but in the long run makes your codebase more readable and easier to use.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;.perltidyrc&lt;/code&gt; I would suggest to have a team discussion to determine the following items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;brace styling&lt;/li&gt;
&lt;li&gt;length of lines (my suggestions is to have it at least 120 characters, but I know there are many people that still like it at 80),&lt;/li&gt;
&lt;li&gt;number of spaces or tabs per indentation&lt;/li&gt;
&lt;li&gt;whatever else you think that your team needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example with my file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-i=4
-ci=4
-bar
-ce
-nsbl
-cti=0
-sct
-sot
-pt=0
-sbt=1
-bt=1
-bbt=0
-nsfs
-nolq
-l=120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are described in the Perl::Tidy &lt;a href=&#34;https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy#FORMATTING-OPTIONS&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Commit both &lt;code&gt;.perlcriticrc&lt;/code&gt; and &lt;code&gt;.perltidyrc&lt;/code&gt; to your repo.&lt;/p&gt;

&lt;h2 id=&#34;set-up-the-git-pre-commit-hook&#34;&gt;Set Up the Git Pre-commit Hook&lt;/h2&gt;

&lt;p&gt;For existing projects, you&amp;rsquo;ll want to run perlcritic and perltidy on all existing files &lt;em&gt;before&lt;/em&gt; creating this pre-commit hook, fixing any files which don&amp;rsquo;t pass perlcritic or break perltidy. This is so that each subsequent commit will only be critiqued and tidied on the changes contained in the commit.&lt;/p&gt;

&lt;p&gt;To setup the pre-commit hook, create the file &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; in your root project directory. This file will be executed every time you type the &lt;code&gt;git commit&lt;/code&gt; command and ru on the files included in the commit.&lt;/p&gt;

&lt;p&gt;The file is a shell script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;files_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git diff --cached --name-only&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in $files_commit; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ pm|pl$ &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#run perlcritic first so that we avoid unnecessary tidying
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perlcritic $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source OK&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There was some error when running perlcritic on &lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perlcritic $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
            exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perltidy -b -bext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bk&amp;#39;&lt;/span&gt; $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
         echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There was an error when running perltidy on &lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;; please see the error file for more info&amp;#34;&lt;/span&gt;
           exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

git add $files_commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every file being committed, this code first runs perlcritic - if it reports a problem, then the script exits, canceling the commit. If perlcritic passes, then it runs perltidy on the same file, and if perltidy exits with an error, then it also aborts the commit. In this example, I am checking only for .pm and .pl files, you can add other type of files there too, like test files, pod files and so on.&lt;/p&gt;

&lt;p&gt;I know that this won&amp;rsquo;t solve every problem, but I think combining Perl::Critic and Perl::Tidy and running them automatically is good step towards having a consistent and readable codebase.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - July 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---july-2018/</link>
      <pubDate>Sun, 05 Aug 2018 18:40:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---july-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::SlowQuitApps&#34;&gt;App::SlowQuitApps&lt;/a&gt; - simplify the configuration of SlowQuitApps app on MacOS&lt;/li&gt;
&lt;li&gt;Get a &amp;ldquo;cointoss&amp;rdquo; command for Bernoulli and binomial distributions &lt;a href=&#34;https://metacpan.org/pod/App::cointoss&#34;&gt;App::cointoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::colorplus&#34;&gt;App::colorplus&lt;/a&gt; can manipulate ANSI color escape sequences&lt;/li&gt;
&lt;li&gt;Get info about a character with &lt;a href=&#34;https://metacpan.org/pod/App::unichar&#34;&gt;App::unichar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JavaScript::V8::XS&#34;&gt;JavaScript::V8::XS&lt;/a&gt; provides XS bindings for the V8 JavaScript engine. Woo!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Prometheus::Tiny&#34;&gt;Prometheus::Tiny&lt;/a&gt; is a tiny client for the time series database&lt;/li&gt;
&lt;li&gt;Perform queries using the Yandex Maps API with &lt;a href=&#34;https://metacpan.org/pod/Yandex::Geo&#34;&gt;Yandex::Geo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Parser for HAProxy configuration file using &lt;a href=&#34;https://metacpan.org/pod/Config::HAProxy&#34;&gt;Config::HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::AddInc&#34;&gt;File::AddInc&lt;/a&gt; is a &amp;ldquo;FindBin&amp;rdquo; for modulinos&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::IP::Checker&#34;&gt;Net::IP::Checker&lt;/a&gt; validates IP addresses &lt;em&gt;correctly&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Send data to the statsd plugin telegraf using &lt;a href=&#34;https://metacpan.org/pod/Net::Statsd::Client::Telegraf&#34;&gt;Net::Statsd::Client::Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a ready-made WordPress database schema with &lt;a href=&#34;https://metacpan.org/pod/WordPress::DBIC::Schema&#34;&gt;WordPress::DBIC::Schema&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write a heap dump file for later analysis with &lt;a href=&#34;https://metacpan.org/pod/Devel::MAT::Dumper&#34;&gt;Devel::MAT::Dumper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::LowLevel&#34;&gt;Git::LowLevel&lt;/a&gt; performs blob/tree/commit operations on a Git repo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HO::class&#34;&gt;HO::class&lt;/a&gt; is a class builder for hierarchical (arrayref) objects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::Enumeration&#34;&gt;MooX::Enumeration&lt;/a&gt; provides shortcuts for working with enum attributes in Moo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/POE::Filter::ThruPut&#34;&gt;POE::Filter::ThruPut&lt;/a&gt; is a POE filter that passes data through unchanged whilst counting bytes sent and received&lt;/li&gt;
&lt;li&gt;Get a language Server for Perl with &lt;a href=&#34;https://metacpan.org/pod/Perl::LanguageServer&#34;&gt;Perl::LanguageServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::ANSI::Fold&#34;&gt;Text::ANSI::Fold&lt;/a&gt; can split text by length but preserve ANSI sequences and multibyte characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Perl interface to MXNet Gluon ModelZoo with &lt;a href=&#34;https://metacpan.org/pod/AI::MXNet::Gluon::ModelZoo&#34;&gt;AI::MXNet::Gluon::ModelZoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BioSAILs::Command&#34;&gt;BioSAILs::Command&lt;/a&gt; is a command line wrapper for the BioX-Workflow-Command and HPC-Runner-Command libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract email addresses from webpages with &lt;a href=&#34;https://metacpan.org/pod/Email::Extractor&#34;&gt;Email::Extractor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do low-cost desktop software development via loopback and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Loco&#34;&gt;Mojolicious::Plugin::Loco&lt;/a&gt;f&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::LogStderr&#34;&gt;Plack::Middleware::LogStderr&lt;/a&gt; can redirect all STDERR output to another logger&lt;/li&gt;
&lt;li&gt;Scrape, store and analyze data from NHL.com with &lt;a href=&#34;https://metacpan.org/pod/Sport::Analytics::NHL&#34;&gt;Sport::Analytics::NHL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup your computer for CPAN-PRC</title>
      <link>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</link>
      <pubDate>Wed, 21 Feb 2018 23:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/setup-your-computer-for-cpan-prc/</guid>
      <description>

&lt;p&gt;Earlier I wrote about &lt;a href=&#34;http://localhost:1313/article/why-should-you-join-cpan-prc/&#34;&gt;why should you join CPAN Pull Request Challenge&lt;/a&gt;. Now I will explain how to get your computer ready to work on your assignment. You can grab a Docker image and start hacking right away, or you can install everything you need on your computer.&lt;/p&gt;

&lt;h3 id=&#34;option-1-the-docker-way&#34;&gt;Option 1: The Docker Way&lt;/h3&gt;

&lt;p&gt;By using a Docker image that has everything you need, you can start working in minutes.&lt;/p&gt;

&lt;h4 id=&#34;1-install-docker&#34;&gt;1: Install Docker&lt;/h4&gt;

&lt;p&gt;On Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, see the instructions for &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;2-fork-clone-the-repo&#34;&gt;2: Fork &amp;amp; clone the repo&lt;/h4&gt;

&lt;p&gt;Now you need to fork and clone the Github repository you were assigned for the PRC. For example, I created this &lt;a href=&#34;https://github.com/kyzn/App-p&#34;&gt;fork&lt;/a&gt;, and can clone it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/App-p ~/Desktop/App-p
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-run-docker&#34;&gt;3: Run Docker&lt;/h4&gt;

&lt;p&gt;I have prepared a docker &lt;a href=&#34;https://github.com/kyzn/perlbrew-prc-dockerimage&#34;&gt;image&lt;/a&gt; which comes with a stable version of Perl, &lt;a href=&#34;https://metacpan.org/pod/App::perlbrew&#34;&gt;perlbrew&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt;, all pre-installed.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I would run docker on the repo I cloned in step 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -v ~/Desktop/App-p:/App-p -it kyzn/perlbrew-prc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/Desktop/App-p&lt;/code&gt; is the local path to the repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/App-p&lt;/code&gt; is the path of the directory inside the Docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will launch an Ubuntu image as root user, mounting the repository to &lt;code&gt;/App-p&lt;/code&gt;. Git is installed, but you need to use your local (non-Docker) terminal to pull/push. The text editors nano, vim, and emacs are installed in the image as well. You can also use your local text editor.&lt;/p&gt;

&lt;h4 id=&#34;building-a-docker-image&#34;&gt;Building a Docker Image&lt;/h4&gt;

&lt;p&gt;Alternatively, you can build the docker image by hand. Note that this will take some time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/kyzn/perlbrew-prc-dockerimage
$ cd perlbrew-prc-dockerimage
$ docker build -t kyzn/perlbrew-prc:my_build .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use the same &lt;code&gt;docker run&lt;/code&gt; command with your own &lt;code&gt;my_build&lt;/code&gt; tag.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;option-2-the-local-way&#34;&gt;Option 2: The Local Way&lt;/h3&gt;

&lt;p&gt;You can install the same tools to your computer; I&amp;rsquo;ve prepared instructions for macOS and Ubuntu. This usually takes about one to two hours.&lt;/p&gt;

&lt;h4 id=&#34;notes-for-macos-users&#34;&gt;Notes for macOS users&lt;/h4&gt;

&lt;p&gt;Perl, during its installation, will ask for permission for incoming network connections. Denying that request doesn&amp;rsquo;t break anything for CPAN-PRC purposes.&lt;/p&gt;

&lt;p&gt;Installing modules via &lt;code&gt;cpanm&lt;/code&gt; might give you a permission error. In the terminal, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R $USER:staff ~/.cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command changes the owner of the cpanm folder, which usually fixes the issue.&lt;/p&gt;

&lt;p&gt;You need to install homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-install-perlbrew&#34;&gt;1: Install Perlbrew&lt;/h4&gt;

&lt;p&gt;Most systems come with a certain version of Perl installed. Yet it is often recommended not to tamper system Perl, as applications depend on its state. That&amp;rsquo;s why we want to install a separate Perl for development purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://install.perlbrew.pl | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s done, it will ask you to add &lt;code&gt;source ~/perl5/perlbrew/etc/bashrc&lt;/code&gt; to your &lt;code&gt;~/.bashrc&lt;/code&gt;. You should do as instructed right away.&lt;/p&gt;

&lt;h4 id=&#34;2-install-perl&#34;&gt;2: Install Perl&lt;/h4&gt;

&lt;p&gt;Now that we have Perlbrew in place, we can go ahead and install a Perl on our own, keeping system Perl alone. I am going to suggest installing latest stable-version. You may run &lt;code&gt;perlbrew available&lt;/code&gt; to see most common versions. Note that this will take a while.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install -j 4 stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two ways to use a Perl version with Perlbrew: &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt;. &lt;code&gt;use&lt;/code&gt; is temporary, it goes away once you close the terminal. That&amp;rsquo;s why I recommend &lt;code&gt;switch&lt;/code&gt;, which will make it permanent. Change the version to the one you just installed. You can run &lt;code&gt;perlbrew list&lt;/code&gt; to see installed versions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew switch $(perlbrew list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure switch worked, check your Perl version in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-install-cpanm&#34;&gt;3: Install cpanm&lt;/h4&gt;

&lt;p&gt;This is a &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;script&lt;/a&gt; that will help you install CPAN modules. There already is a client installed, called &lt;code&gt;cpan&lt;/code&gt;. But, &lt;code&gt;cpan&lt;/code&gt; requires configuration and is more verbose and slower than &lt;code&gt;cpanm&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perlbrew install-cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be sure you&amp;rsquo;re using the perlbrew installed cpanm, run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which cpanm | grep perlbrew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the terminal displays any matching output, it worked.&lt;/p&gt;

&lt;h4 id=&#34;4-install-dzil&#34;&gt;4: Install dzil&lt;/h4&gt;

&lt;p&gt;Many CPAN authors use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;dzil&lt;/a&gt; to build and release their modules. The chances of your PRC assignment having a dist.ini file (dzil configuration) are high.&lt;/p&gt;

&lt;p&gt;First you need to install a non-Perl dependency, openssl. On macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then install Dist::Zilla with cpanm. Note that this will take a while, as it has a lot of dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Dist::Zilla
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-install-reply-optional&#34;&gt;5: Install reply (optional)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;reply&lt;/code&gt; is a nice interactive shell that lets you play around.&lt;/p&gt;

&lt;p&gt;Ubuntu users will need to install these missing dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libncurses5-dev libreadline-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install &lt;code&gt;reply&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Term::ReadLine::Gnu Reply
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Now you are ready to work on your assignment! Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why should you join CPAN-PRC?</title>
      <link>http://localhost:1313/article/why-should-you-join-cpan-prc/</link>
      <pubDate>Thu, 25 Jan 2018 09:23:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/why-should-you-join-cpan-prc/</guid>
      <description>

&lt;p&gt;The CPAN Pull Request Challenge (PRC) aims to improve the quality of code on &lt;a href=&#34;https://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt;, the online archive of Perl modules, by having participants submit pull requests to CPAN module authors.&lt;/p&gt;

&lt;p&gt;Every month participants are assigned a new module to improve, and submit &lt;a href=&#34;https://help.github.com/articles/about-pull-requests/&#34;&gt;pull requests&lt;/a&gt; to the module repo on GitHub. Participants are not competing with each other, rather the &amp;ldquo;challenge&amp;rdquo; is to keep up with your monthly assignments.&lt;/p&gt;

&lt;h3 id=&#34;how-to-sign-up&#34;&gt;How to sign up&lt;/h3&gt;

&lt;p&gt;You can join as an individual or as a team. A team could be your company, you and a few friends, or your local Perl Mongers group.&lt;/p&gt;

&lt;p&gt;Simply email Neil Bowers (&amp;ldquo;neil at bowers dot com&amp;rdquo;) your GitHub username and PAUSE ID if you have one, or if joining as a group, your GitHub organization name. Tell him you want to join the challenge, and you are in!&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Once per month, you will receive an email noting your assigned distribution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-assignment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can fix a failing test, fix an issue, correct a typo, any kind of improvement. If you&amp;rsquo;re not sure where to start, there are services on top of CPAN that can help identify issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpantesters.org/&#34;&gt;CPAN Testers&lt;/a&gt; is a Continuous Integration service that often identifies issues with failing tests and/or platform specific bugs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rt.cpan.org/&#34;&gt;Request Tracker&lt;/a&gt; is the default bug tracker for CPAN modules (issues may also be listed on GitHub)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpancover.com&#34;&gt;CPAN Cover&lt;/a&gt; reports on code coverage for tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpants.cpanauthors.org/&#34;&gt;CPANTS&lt;/a&gt; is a &amp;ldquo;kwalitee&amp;rdquo; assessment tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good place to start is &lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan&lt;/a&gt;, a CPAN search engine which links to all of the above services. Scan through the module documentation and related information, to try and find things that need fixing or enhancing.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified the changes you&amp;rsquo;d like to make, fork the module on GitHub, commit your changes and open a pull request with the new changes. Then reply to your assignment email saying &amp;ldquo;It&amp;rsquo;s done!&amp;rdquo;, and link to your pull requests on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Although it&amp;rsquo;s better to do your assignments every month, you may not be willing to commit to it, and that is fine! If something comes up, you can skip a month. If you need more time for a module, you can stick to your assignment for longer. There&amp;rsquo;s a solution as long as you want to keep participating.&lt;/p&gt;

&lt;h3 id=&#34;why-join&#34;&gt;Why join?&lt;/h3&gt;

&lt;p&gt;One reason is that this year might be your &lt;a href=&#34;http://neilb.org/2018/01/01/cpan-prc-2018.html&#34;&gt;last chance!&lt;/a&gt; It may &lt;a href=&#34;http://neilb.org/2018/01/06/what-after-prc.html&#34;&gt;evolve&lt;/a&gt;, but this will most likely be the &lt;strong&gt;last year&lt;/strong&gt; you can get a CPAN module assignment.&lt;/p&gt;

&lt;p&gt;I joined this challenge &lt;a href=&#34;https://kyzn.org/2015-01-17-cpan-pr-challenge-012015.html&#34;&gt;in 2015&lt;/a&gt; when I was still at college. It motivated me to read other people&amp;rsquo;s code, even though I had a hard time understanding it. It also taught me a lot about the Open Source ecosystem. I did 4 assignments in 2015, another 4 in 2016, and doubled to 8 in 2017. I am also part of &lt;a href=&#34;https://github.com/ziprecruiter&#34;&gt;Team-ZipRecruiter&lt;/a&gt;, which has been participating since April 2017. It really is fun!&lt;/p&gt;

&lt;p&gt;If you are looking for more reasons, here are few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a great way to study &amp;ldquo;production ready&amp;rdquo; code and communicate with fellow programmers&lt;/li&gt;
&lt;li&gt;You can contribute to open source code, support Perl and build your resume&lt;/li&gt;
&lt;li&gt;Assignments introduce you to code on CPAN that you otherwise might have missed&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re part of a group it could be a fun team-building event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds interesting? Then send an email to Neil (&amp;ldquo;neil at bowers dot com&amp;rdquo;) with your GitHub username!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/why-should-you-join-cpan-prc/pr-merged.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plotting With Perl 6</title>
      <link>http://localhost:1313/article/plotting-with-perl-6/</link>
      <pubDate>Thu, 24 Aug 2017 15:27:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/plotting-with-perl-6/</guid>
      <description>

&lt;p&gt;(This chapter originally appeared in &lt;a href=&#34;http://www.apress.com/9781484228982&#34;&gt;Perl 6 Fundamentals: A Primer with
Examples, Projects, and Case Studies&lt;/a&gt;, by Moritz Lenz, published 2017 by Apress Media, LLC. Reprinted with permission.)&lt;/p&gt;

&lt;p&gt;Occasionally I come across git repositories where I want to know how active
they are and who the main developers are.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s develop a script that plots the commit history, and explore how to
use Python modules in Perl 6.&lt;/p&gt;

&lt;h2 id=&#34;extracting-the-stats&#34;&gt;Extracting the Stats&lt;/h2&gt;

&lt;p&gt;We want to plot the number of commits by author and date.
We can get this information easily by passing some options to &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $proc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run :out, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;git log &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;short &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format:%ad&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;%an&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (%total, %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author, %dates);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $proc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $line {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ( $date, $author ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    %total{$author}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$date}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    %dates{$date}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; executes an external command and &lt;code&gt;:out&lt;/code&gt; tells it to capture the
command&amp;rsquo;s output, making it available as &lt;code&gt;$proc.out&lt;/code&gt;. The command is
a list, with the first element being the actual executable and the rest of
the elements are command line arguments to this executable.&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;git log&lt;/code&gt; gets the options &lt;code&gt;--date short --pretty=format:%ad!%an&lt;/code&gt;, which
instructs it to produce lines like &lt;code&gt;2017-03-01!John Doe&lt;/code&gt;. This line
can be parsed with a simple call to &lt;code&gt;$line.split: &#39;!&#39;, 2&lt;/code&gt;, which splits
on the &lt;code&gt;!&lt;/code&gt; and limits the result to two elements. Assigning it to a
two-element list &lt;code&gt;( $date, $author )&lt;/code&gt; unpacks it. We then use hashes to
count commits by author (in &lt;code&gt;%total&lt;/code&gt;), by author and date (&lt;code&gt;%by-author&lt;/code&gt;),
and finally by date. In the second case, &lt;code&gt;%by-author{$author}&lt;/code&gt; isn&amp;rsquo;t
even a hash yet and we can still hash-index it. This is due to a feature
called &lt;em&gt;autovivification&lt;/em&gt;, which automatically creates (&amp;ldquo;vivifies&amp;rdquo;) objects
where we need them. The use of &lt;code&gt;++&lt;/code&gt; creates integers, &lt;code&gt;{...}&lt;/code&gt; indexing creates
hashes, &lt;code&gt;[...]&lt;/code&gt; indexing, &lt;code&gt;.push&lt;/code&gt; creates arrays, and so on.&lt;/p&gt;

&lt;p&gt;To get from these hashes to the top contributors by commit count, we can
sort &lt;code&gt;%total&lt;/code&gt; by value. Since this sorts in ascending order, sorting
by the negative value returns the list in descending order. The list contains
&lt;a href=&#34;https://docs.perl6.org/types/Pair&#34;&gt;Pair&lt;/a&gt; objects, where we only want the
first five, and only their keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %total&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(&lt;span style=&#34;color:#f92672&#34;&gt;-*.&lt;/span&gt;value)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;key);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each author, we can extract the dates of their activity and their
commit counts like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{@dates};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last line uses &lt;em&gt;slicing&lt;/em&gt;, that is, indexing a hash with a list to return
a list of elements.&lt;/p&gt;

&lt;h2 id=&#34;plotting-with-python&#34;&gt;Plotting with Python&lt;/h2&gt;

&lt;p&gt;Matplotlib is a very versatile library for all sorts of plotting and
visualization tasks. It is based on &lt;a href=&#34;http://www.numpy.org/&#34;&gt;NumPy&lt;/a&gt;, a Python library
for scientific and numeric computing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/&#34;&gt;Matplotlib&lt;/a&gt; is written in Python and for Python programs, but that
won&amp;rsquo;t stop us from using it in a Perl 6 program.&lt;/p&gt;

&lt;p&gt;But first, let&amp;rsquo;s take a look at a basic plotting example that uses dates
on the x-axis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

fig, subplots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(
    [datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)],
    [ &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; ],
    label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;An example&amp;#39;&lt;/span&gt;,
)
subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;, shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autofmt_xdate()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this run, you have to install Python 2.7 and matplotlib&lt;sup&gt;&lt;a href=&#34;#python2-only&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You can do
this on Debian-based Linux systems with &lt;code&gt;apt-get install -y python-matplotlib&lt;/code&gt;.
The package name is the same on RPM-based distributions such as CentOS or SUSE
Linux. MacOS users are advised to install Python 2.7 through homebrew and
macports and then use &lt;code&gt;pip2 install matplotlib&lt;/code&gt; or &lt;code&gt;pip2.7 install
matplotlib&lt;/code&gt; to get the library. Windows installation is probably easiest
through the &lt;a href=&#34;https://conda.io/docs/&#34;&gt;conda&lt;/a&gt; package manager, which offers
pre-built binaries of both Python and matplotlib.&lt;/p&gt;

&lt;p&gt;When you run this script with &lt;code&gt;python2.7 dates.py&lt;/code&gt;, it opens a GUI window,
showing the plot and some controls, which allow you to zoom, scroll, and
write the plot graphic to a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/matplotlib-window.png&#34; alt=&#34;Basic matplotlib plotting window&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;bridging-the-gap&#34;&gt;Bridging the Gap&lt;/h2&gt;

&lt;p&gt;The Rakudo Perl 6 compiler comes with a handy &lt;a href=&#34;https://docs.perl6.org/language/nativecall&#34;&gt;library for calling foreign
functions&lt;/a&gt; &amp;ndash; called &lt;code&gt;NativeCall&lt;/code&gt; &amp;ndash; which allows you to
call functions written in C, or anything with a compatible binary interface.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/niner/Inline-Python&#34;&gt;Inline::Python&lt;/a&gt; library uses
the native call functionality to talk to Python&amp;rsquo;s C API and offers
interoperability between Perl 6 and Python code. At the time of writing, this
interoperability is still fragile in places, but can be worth using for
some of the great libraries that Python has to offer.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;Inline::Python&lt;/code&gt;, you must have a C compiler available, and then
run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ zef install Inline::Python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start to run Python 2 code in your Perl 6 programs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Inline::Python;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print(&amp;#34;Hello, Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides the &lt;code&gt;run&lt;/code&gt; method, which takes a string of Python code and executes it,
you can also use &lt;code&gt;call&lt;/code&gt; to call Python routines by specifying the namespace,
the routine to call, and a list of arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Inline::Python;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import datetime&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print&amp;#39;&lt;/span&gt;, $date);    &lt;span style=&#34;color:#75715e&#34;&gt;# 2017-01-31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments that you pass to &lt;code&gt;call&lt;/code&gt; are Perl 6 objects, such as the three &lt;code&gt;Int&lt;/code&gt;
objects in this example. &lt;code&gt;Inline::Python&lt;/code&gt; automatically translates them into
the corresponding Python built-in data structure. It translates numbers,
strings, arrays, and hashes. Return values are also translated in the opposite
direction, though since Python 2 does not distinguish properly between
byte and Unicode strings, Python strings end up as buffers in Perl 6.&lt;/p&gt;

&lt;p&gt;Objects that &lt;code&gt;Inline::Python&lt;/code&gt; cannot translate are handled as opaque objects
on the Perl 6 side. You can pass them back into Python routines (as shown
with the &lt;code&gt;print&lt;/code&gt; call above) and you can call methods on them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isoformat()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode;               &lt;span style=&#34;color:#75715e&#34;&gt;# 2017-01-31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl 6 exposes attributes through methods, so Perl 6 has no syntax for
accessing attributes from foreign objects directly. For instance, if you try to access
the &lt;code&gt;year&lt;/code&gt; attribute of &lt;code&gt;datetime.date&lt;/code&gt; through the normal method
call syntax, you get an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;year;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dies with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;int&#39; object is not callable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, you have to use the &lt;code&gt;getattr&lt;/code&gt; builtin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getattr&amp;#39;&lt;/span&gt;, $date, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-the-bridge-to-plot&#34;&gt;Using the Bridge to Plot&lt;/h2&gt;

&lt;p&gt;We need access to two namespaces in Python, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;matplotlib.pyplot&lt;/code&gt;,
so let&amp;rsquo;s start by importing them and writing some short helpers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import datetime&amp;#39;&lt;/span&gt;);
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(Str $name, |c) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pydate&lt;/span&gt;(Str $d) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, $d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;Int));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now call &lt;code&gt;pydate(&#39;2017-03-01&#39;)&lt;/code&gt; to create a Python &lt;code&gt;datetime.date&lt;/code&gt;
object from an ISO-formatted string and call the &lt;code&gt;plot&lt;/code&gt; function to access
functionality from matplotlib:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subplots&amp;#39;&lt;/span&gt;);
$figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autofmt_xdate();

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot:
    $[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)],
    $[ %dates{@dates} ],
    label     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;,
    marker    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
    linestyle &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Perl 6 call &lt;code&gt;plot(&#39;subplots&#39;)&lt;/code&gt; corresponds to the Python code
&lt;code&gt;fig, subplots = plt.subplots()&lt;/code&gt;. Passing arrays to Python functions needs
a bit of extra work, because &lt;code&gt;Inline::Python&lt;/code&gt; flattens arrays. Using an extra &lt;code&gt;$&lt;/code&gt;
sigil in front of an array puts it into an extra scalar and thus prevents
the flattening.&lt;/p&gt;

&lt;p&gt;Now we can actually plot the number of commits by author, add a legend, and
plot the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $author {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{@dates};
    $subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot:
        $[ @dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate) ],
        $@counts,
        label     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $author,
        marker    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
        linestyle &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
}


$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;, shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;True);

plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run in the &lt;a href=&#34;https://github.com/ugexe/zef&#34;&gt;zef git repository&lt;/a&gt;, it produces
this plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors.png&#34; alt=&#34;Contributions to zef, a Perl 6 module installer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;stacked-plots&#34;&gt;Stacked Plots&lt;/h2&gt;

&lt;p&gt;I am not yet happy with the plot, so I want to explore using stacked
plots for presenting the same information. In a regular plot, the
y-coordinate of each plotted value is proportional to its value. In a
stacked plot, it is the distance to the previous value that is
proportional to its value. This is nice for values that add up to a
total that is also interesting.&lt;/p&gt;

&lt;p&gt;Matplotlib offers a &lt;a href=&#34;http://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.stackplot.html&#34;&gt;method called
&lt;code&gt;stackplot&lt;/code&gt;&lt;/a&gt;
for this task. Contrary to multiple &lt;code&gt;plot&lt;/code&gt; calls on a subplot object, it
requires a shared x-axis for all data series. Hence we must construct
one array for each author of git commits, where dates with no value are
set to zero.&lt;/p&gt;

&lt;p&gt;This time we have to construct an array of arrays where each inner array
has the values for one author:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $d {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
        @stack[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$d} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now plotting becomes a simple matter of a method call, followed by the
usual commands to add a title and show the plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stackplot($[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)], @stack);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result (again run on the zef source repository) is this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-stacked-1.png&#34; alt=&#34;Stacked plot of zef contributions over time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Comparing this to the previous visualization reveals a discrepancy:
There were no commits in 2014, and yet the stacked plot makes it appear
this way. In fact, the previous plots would have shown the same
&amp;ldquo;alternative facts&amp;rdquo; if we had chosen lines instead of points. It comes
from matplotlib (like nearly all plotting libraries) interpolates
linearly between data points. But in our case, a date with no data
points means zero commits happened on that date.&lt;/p&gt;

&lt;p&gt;To communicate this to matplotlib, we must explicitly insert zero values
for missing dates. This can be achieved by replacing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minmax;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.perl6.org/routine/minmax#class_Any&#34;&gt;&lt;code&gt;minmax&lt;/code&gt; method&lt;/a&gt;
finds the minimal and maximal values, and returns them in a
&lt;a href=&#34;https://docs.perl6.org/type/Range&#34;&gt;Range&lt;/a&gt;. Assigning the range to an
array turns it into an array of all values between the minimal and the
maximal value. The logic for assembling the &lt;code&gt;@stack&lt;/code&gt; variable already
maps missing values to zero.&lt;/p&gt;

&lt;p&gt;The result looks a bit better, but still far from perfect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-stacked-2.png&#34; alt=&#34;Stacked plot of zef contributions over time, with missing dates mapped to zero&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thinking more about the problem, contributions from separate days should
not be joined together, because it produces misleading results.
Matplotlib doesn&amp;rsquo;t support adding a legend automatically to stacked
plots, so this seems to be to be a dead end.&lt;/p&gt;

&lt;p&gt;Since a dot plot didn&amp;rsquo;t work very well, let&amp;rsquo;s try a different kind of
plot that represents each data point separately: a bar chart, or more
specifically, a stacked bar chart. Matplotlib offers the &lt;code&gt;bar&lt;/code&gt; plotting
method where the named parameter &lt;code&gt;bottom&lt;/code&gt; can be used to generate the
stacking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $d {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
        @bottom[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: $bottom;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$d} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        @stack[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: $value;
        $bottom &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; $value;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to supply color names ourselves and set the edge color of the
bars to the same color, otherwise the black edge color dominates the
result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;red green blue yellow black&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @plots;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
    @plots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: plot(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;,
        $[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)],
        @stack[$idx],
        $width,
        bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @bottom[$idx],
        color &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @colors[$idx],
        edgecolor &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @colors[$idx],
    );
}
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;legend&amp;#39;&lt;/span&gt;, $@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);

plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces the first plot that&amp;rsquo;s actually informative and not
misleading (provided you&amp;rsquo;re not color blind):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-bars.png&#34; alt=&#34;Stacked bar plot of zef contributions over time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to improve the result further, you could experiment with
limiting the number of bars by lumping together contributions by week or
month (or maybe &lt;code&gt;$n&lt;/code&gt;-day period).&lt;/p&gt;

&lt;h2 id=&#34;idiomatic-use-of-inline-python&#34;&gt;Idiomatic Use of Inline::Python&lt;/h2&gt;

&lt;p&gt;Now that the plots look informative and correct, it&amp;rsquo;s time to explore how
to better emulate the typical Python APIs through &lt;code&gt;Inline::Python&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-of-python-apis&#34;&gt;Types of Python APIs&lt;/h3&gt;

&lt;p&gt;Python is an object-oriented language, so many APIs involve method
calls, which &lt;code&gt;Inline::Python&lt;/code&gt; helpfully automatically translates for us.&lt;/p&gt;

&lt;p&gt;But the objects must come from somewhere and typically this is by
calling a function that returns an object, or by instantiating a class.
In Python, those two are really the same under the hood, since
instantiating a class is the same as calling the class as if it were a
function.&lt;/p&gt;

&lt;p&gt;An example of this (in Python) would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subplots
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subplots()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the matplotlib documentation tends to use another, equivalent
syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uses the &lt;code&gt;subplots&lt;/code&gt; symbol (class or function) as a method on the
module &lt;code&gt;matplotlib.pyplot&lt;/code&gt;, which the import statement aliases to &lt;code&gt;plt&lt;/code&gt;.
This is a more object-oriented syntax for the same API.&lt;/p&gt;

&lt;h3 id=&#34;mapping-the-function-api&#34;&gt;Mapping the Function API&lt;/h3&gt;

&lt;p&gt;The previous code examples used this Perl 6 code to call the &lt;code&gt;subplots&lt;/code&gt;
symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(Str $name, |c) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subplots&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to call &lt;code&gt;subplots()&lt;/code&gt; instead of &lt;code&gt;plot(&#39;subplots&#39;)&lt;/code&gt;, and
&lt;code&gt;bar(args)&lt;/code&gt; instead of &lt;code&gt;plot(&#39;bar&#39;, args)&lt;/code&gt;, we can use a function to
generate wrapper functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen&lt;/span&gt;(Str $namespace, *@names) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $name {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; (|args) {
            $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;subplots, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bar, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;legend, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;title, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;show)
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;subplots bar legend title show&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subplots();

&lt;span style=&#34;color:#75715e&#34;&gt;# more code here&lt;/span&gt;

legend($@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);
title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
show();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes the functions&amp;rsquo; usage quite nice, but comes at the cost
of duplicating their names. One can view this as a
feature, because it allows the creation of different aliases, or as a
source for bugs when the order is messed up, or a name misspelled.&lt;/p&gt;

&lt;p&gt;How could we avoid the duplication should we choose to create wrapper
functions?&lt;/p&gt;

&lt;p&gt;This is where Perl 6&amp;rsquo;s flexibility and introspection abilities pay off.
There are two key components that allow a nicer solution: the fact that
declarations are expressions, and that you can introspect variables for
their names.&lt;/p&gt;

&lt;p&gt;The first part means you can write &lt;code&gt;mysub my ($a, $b)&lt;/code&gt;, which
declares the variables &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;, and calls a function with those
variables as arguments. The second part means that &lt;code&gt;$a.VAR.name&lt;/code&gt; returns
a string &lt;code&gt;&#39;$a&#39;&lt;/code&gt;, the name of the variable.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s combine this to create a wrapper that initializes subroutines for
us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pysub&lt;/span&gt;(Str $namespace, |args) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;-&amp;gt;&lt;/span&gt; $sub {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;VAR&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;substr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        $sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; (|args) {
            $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
        }
    }
}

pysub &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;subplots, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bar, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;legend, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;title, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;show);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This avoids duplicating the name, but forces us to use some lower-level
Perl 6 features in sub &lt;code&gt;pysub&lt;/code&gt;. Using ordinary variables means that accessing their
&lt;code&gt;.VAR.name&lt;/code&gt; results in the name of the variable, not the name of the
variable that&amp;rsquo;s used on the caller side. So we can&amp;rsquo;t use slurpy
arguments as in&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pysub&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Str&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subs&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead we must use
&lt;code&gt;|args&lt;/code&gt; to obtain the rest of the arguments in a
&lt;a href=&#34;https://docs.perl6.org/type/Capture.html&#34;&gt;Capture&lt;/a&gt;. This doesn&amp;rsquo;t
flatten the list of variables passed to the function, so when we iterate
over them, we must do so by accessing &lt;code&gt;args[0]&lt;/code&gt;. By default, loop
variables are read-only, which we can avoid by using &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; instead of
&lt;code&gt;-&amp;gt;&lt;/code&gt; to introduce the signature. Fortunately, that also preserves the
name of the caller side variable.&lt;/p&gt;

&lt;h3 id=&#34;an-object-oriented-interface&#34;&gt;An Object-Oriented Interface&lt;/h3&gt;

&lt;p&gt;Instead of exposing the functions, we can also create types that emulate
the method calls on Python modules. For that we can implement a class with a
method &lt;code&gt;FALLBACK&lt;/code&gt;, which Perl 6 calls for us when calling a method that is not
implemented in the class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class PyPlot is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PyPlot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots;
&lt;span style=&#34;color:#75715e&#34;&gt;# plotting code goes here&lt;/span&gt;
$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend($@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);

$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Class &lt;code&gt;PyPlot&lt;/code&gt; inherits directly from &lt;code&gt;Mu&lt;/code&gt;, the root of the Perl 6 type
hierarchy, instead of &lt;code&gt;Any&lt;/code&gt;, the default parent class (which in turn inherits
from &lt;code&gt;Mu&lt;/code&gt;). &lt;code&gt;Any&lt;/code&gt; introduces a large number of methods that Perl 6 objects
get by default and since &lt;code&gt;FALLBACK&lt;/code&gt; is only invoked when a method is not
present, this is something to avoid.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;TWEAK&lt;/code&gt; is another method that
Perl 6 calls automatically for us, after the object has been fully
instantiated. All-caps method names are reserved for such special purposes.
It is marked as a &lt;code&gt;submethod&lt;/code&gt;, which means it is not inherited into subclasses.
Since &lt;code&gt;TWEAK&lt;/code&gt; is called at the level of each class, if it were a regular
method, a subclass would call it twice implicitly. Note that &lt;code&gt;TWEAK&lt;/code&gt; is only
supported in Rakudo version 2016.11 and later.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing specific to the Python package &lt;code&gt;matplotlib.pyplot&lt;/code&gt; in class
&lt;code&gt;PyPlot&lt;/code&gt;, except the namespace name. We could easily generalize it to any
namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class PythonModule is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;namespace;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $!namespace&amp;#34;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PythonModule&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py, :namespace&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;matplotlib.pyplot&amp;gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is one Perl 6 type that can represent any Python module. If instead we
want a separate Perl 6 type for each Python module, we could use roles, which
are optionally parameterized:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;role PythonModule[Str $namespace] is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PythonModule[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this approach, we can create type constraints for Python modules in
Perl 6 space:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;-histogram(PythonModule[&amp;#39;matplotlib.pyplot&amp;#39;], @data) {
    &lt;span style=&#34;color:#75715e&#34;&gt;# implementation here&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing in any wrapped Python module other than &lt;code&gt;matplotlib.pyplot&lt;/code&gt; results
in a type error.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve explored several ways to represent commit occurrence in plots and
utilized &lt;code&gt;Inline::Python&lt;/code&gt; to interface with a Python based plotting library.&lt;/p&gt;

&lt;p&gt;A bit of Perl 6 meta programming allowed us to emulate different kinds of
Python APIs pretty directly in Perl 6 code, allowing a fairly direct
translation of the original library&amp;rsquo;s documentation into Perl 6 code.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name=&#34;python2-only&#34;&gt;1&lt;/a&gt;: The reason why Python 2.7 has to be used is that, at the time of writing, &lt;code&gt;Inline::Python&lt;/code&gt; does not yet support Python 3.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git bisect and Perl</title>
      <link>http://localhost:1313/article/git-bisect-and-perl/</link>
      <pubDate>Tue, 08 Aug 2017 20:27:16 +0000</pubDate>
      
      <guid>http://localhost:1313/article/git-bisect-and-perl/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;https://ziprecruiter.com&#34;&gt;work&lt;/a&gt; we have many developers committing code to a large Git repo, and a huge test suite which runs to check the software builds and operates correctly. Inevitably, developers push commits which break a test or two, and in particularly hectic moments, it can be difficult to figure out &amp;ldquo;who broke the build&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Enter Git&amp;rsquo;s bisect &lt;a href=&#34;https://git-scm.com/docs/git-bisect&#34;&gt;command&lt;/a&gt;. I feed it the SHA of the earliest bad commit I know of (or &amp;ldquo;HEAD&amp;rdquo;) and the SHA of the last working commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start HEAD b507d1a
Bisecting: 41 revisions left to test after this (roughly 5 steps)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it running, using the failing test script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect run t/foo.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git will checkout a commit between &lt;code&gt;HEAD&lt;/code&gt; to &lt;code&gt;b507d1a&lt;/code&gt; and run &lt;code&gt;t/foo.t&lt;/code&gt; to determine if it is good or not. It will then select a subset of those commits, checkout one of them and run the test again. Git will keep going, subdividing commits into groups and testing them, until it&amp;rsquo;s found the earliest commit which the test fails on. It&amp;rsquo;s kind of fun:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/WjAkrAvSA0XV6/giphy.gif&#34; class=&#34;center&#34; alt=&#34;HUD targeting fighter jet&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually it will output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6717e8dd92ccc6b8f1a058799e895a716bbbb3fd is the first bad commit
commit 6717e8dd92ccc6b8f1a058799e895a716bbbb3fd
Author: Spider &amp;lt;spider@example.com&amp;gt;
Date:   Mon Jul 24 10:56:41 2017 -0700

    Add some feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I know who to contact about the broken build, so I can exit the bisect process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect reset
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bisect-and-exit-values&#34;&gt;Bisect and exit values&lt;/h3&gt;

&lt;p&gt;Bisect run treats certain exit values specially: 125 means the code cannot be tested, and 128 or higher will abort the bisect process. If Perl throws an exception it exits with 255 (instead of 0 for a pass and 1 for a test fail), aborting the bisect altogether:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bisect run failed:
exit code 141 from &#39;t/foo.t&#39; is &amp;lt; 0 or &amp;gt;= 128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this, wrap the call to &lt;code&gt;t/foo.t&lt;/code&gt; in a shell script which caps the return value of the test script at 127:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$@&amp;#34;&lt;/span&gt;
rv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$?
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; [ $rv &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;gt&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt; ]; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  exit $rv
fi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; is a string of the commands passed to the shell script, with spaces within each argument preserved, so it literally executes whatever arguments are passed to it (unlike &lt;code&gt;$*&lt;/code&gt; which would split each argument up with spaces before executing). Just like in Perl, &lt;code&gt;$?&lt;/code&gt; is the exit value of the last run command, which here I assign to &lt;code&gt;rv&lt;/code&gt;. Then the script exits either with 127 or the value of &lt;code&gt;rv&lt;/code&gt;. I save the script as &lt;code&gt;cap-exit-value&lt;/code&gt;, and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start HEAD b507d1a
Bisecting: 41 revisions left to test after this (roughly 5 steps)
$ git bisect run ./cap-exit-value t/foo.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when Git is bisecting, if the test fails or Perl throws an exception, it will be treated as a failure and bisect can continue.&lt;/p&gt;

&lt;p&gt;Hat tip to my colleague Frew, who first explained this issue and solution to me. If you like articles like these, you might enjoy his &lt;a href=&#34;https://blog.afoolishmanifesto.com/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</link>
      <pubDate>Mon, 13 Mar 2017 08:29:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebook Messenger Send API using &lt;a href=&#34;https://metacpan.org/pod/Facebook::Messenger::Client&#34;&gt;Facebook::Messenger::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Taskwarrior::Kusarigama&#34;&gt;Taskwarrior::Kusarigama&lt;/a&gt; provides a plugin system for the Taskwarrior task manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Fitbit&#34;&gt;WebService::Fitbit&lt;/a&gt; can get, post and delete Fitbit API data&lt;/li&gt;
&lt;li&gt;Get a perly interface to the &lt;a href=&#34;https://www.theforeman.org/introduction.html&#34;&gt;Foreman&lt;/a&gt; API using &lt;a href=&#34;https://metacpan.org/pod/WWW::Foreman::API&#34;&gt;WWW::Foreman::API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a CPANTS Kwalitee Report using &lt;a href=&#34;https://metacpan.org/pod/CPANTS::Kwalitee::Report&#34;&gt;CPANTS::Kwalitee::Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read large directories over NFS with &lt;a href=&#34;https://metacpan.org/pod/Linux::NFS::BigDir&#34;&gt;Linux::NFS::BigDir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coordinates::Converter::LV03&#34;&gt;Geo::Coordinates::Converter::LV03&lt;/a&gt; converts Swiss LV03 coordinates to WSG84 and vice versa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Hadoop::Inline::ClassLoader&#34;&gt;Hadoop::Inline::ClassLoader&lt;/a&gt; loads Hadoop Java classes via Inline::Java&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PDF::Tiny&#34;&gt;PDF::Tiny&lt;/a&gt; is a lightweight PDF parser&lt;/li&gt;
&lt;li&gt;Convert JSON via an IO layer with &lt;a href=&#34;https://metacpan.org/pod/PerlIO::via::json&#34;&gt;PerlIO::via::json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a raw quote operator for Perl with &lt;a href=&#34;https://metacpan.org/pod/Syntax::Keyword::RawQuote&#34;&gt;Syntax::Keyword::RawQuote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Autoload::AUTOCAN&#34;&gt;Autoload::AUTOCAN&lt;/a&gt; provides some sugar for autoloading methods&lt;/li&gt;
&lt;li&gt;Treat environment variables as arrays with &lt;a href=&#34;https://metacpan.org/pod/Env::ShellWords&#34;&gt;Env::ShellWords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repo::Commits&#34;&gt;Git::Repo::Commits&lt;/a&gt; gets all commits in a repository&lt;/li&gt;
&lt;li&gt;Part of the new MOP framework, &lt;a href=&#34;https://metacpan.org/pod/Method::Traits&#34;&gt;Method::Traits&lt;/a&gt; adds coderefs to methods via subroutine attributes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Piper&#34;&gt;Piper&lt;/a&gt; is a flexible, iterable pipeline engine with automatic batching with a great name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::tored&#34;&gt;Proc::tored&lt;/a&gt; manages a process using a pid file. Check out &lt;a href=&#34;https://metacpan.org/pod/Proc::tored::Pool&#34;&gt;Proc::tored::Pool&lt;/a&gt; for an example implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::Dash::Button&#34;&gt;Amazon::Dash::Button&lt;/a&gt; let&amp;rsquo;s you use your Amazon dash button for &lt;em&gt;anything&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Get a perly interface to the Revolt USB Dongle PX-1674-675 using &lt;a href=&#34;https://metacpan.org/pod/Device::USB::PX1674&#34;&gt;Device::USB::PX1674&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/author/STEVEB&#34;&gt;Steve Bertrand&lt;/a&gt; released more RaspberryPi goodies:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::BMP180&#34;&gt;RPi::BMP180&lt;/a&gt; - interface to the BMP180 barometric pressure sensor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::DAC::MCP4922&#34;&gt;RPi::DAC::MCP4922&lt;/a&gt; - interface to the MCP49x2 series digital to analog converters (DAC) over the SPI bus&lt;/li&gt;
&lt;li&gt;See his recent blog &lt;a href=&#34;http://blogs.perl.org/users/steve_bertrand/2017/03/raspberry-pi-becoming-more-prevalent.html&#34;&gt;post&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Compare visually similar strings with &lt;a href=&#34;https://metacpan.org/pod/String::Similex&#34;&gt;String::Similex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Ucam::Term&#34;&gt;Ucam::Term&lt;/a&gt; returns information about the start and end dates of terms at the University of Cambridge&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Date::Tolkien::Shire::Data&#34;&gt;Date::Tolkien::Shire::Data&lt;/a&gt; provides functionality for Shire calendars.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::Phylo::Forest::DBTree&#34;&gt;Bio::Phylo::Forest::DBTree&lt;/a&gt; provides a Bio::Phylo-like API for large phylogenies&lt;/li&gt;
&lt;li&gt;Partition a number into addition sequences with &lt;a href=&#34;https://metacpan.org/pod/Math::Partition::Rand&#34;&gt;Math::Partition::Rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get Kruskall-Wallis statistics and test using &lt;a href=&#34;https://metacpan.org/pod/Statistics::ANOVA::KW&#34;&gt;Statistics::ANOVA::KW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::EditFile&#34;&gt;Dancer2::Plugin::EditFile&lt;/a&gt; - easily edit a text file from a Dancer2 app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Mailer&#34;&gt;Email::Mailer&lt;/a&gt; aims to be a &amp;ldquo;multi-purpose emailer for HTML, auto-text, attachments, and templates&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest is here</title>
      <link>http://localhost:1313/article/hacktoberfest-is-here/</link>
      <pubDate>Sun, 02 Oct 2016 10:51:01 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-is-here/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; is here, and you can be part of the effort to make Perl the most popular language in the month long festival of patches and pull requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/&#34;&gt;GitHub&lt;/a&gt; have teamed up to encourage new users to participate in open source. Make four pull requests to any GitHub project and they&amp;rsquo;ll give you a limited-edition Hacktoberfest t-shirt. It might not sound like much, but consider what you get besides the shirt: you&amp;rsquo;re in the commit logs of four projects and your profile has some history. That&amp;rsquo;s the first step in building your open source résumé.&lt;/p&gt;

&lt;p&gt;The sponsors suggest that projects that want to participate label their issues with &amp;ldquo;Hacktoberfest&amp;rdquo;. That&amp;rsquo;s not strictly necessary, but you can &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;search&lt;/a&gt; for issues that projects think are suitable for new users. I think all of my projects are suitable (I may be optimistic), so I wanted a way to label all of my issues across all of my projects.&lt;/p&gt;

&lt;p&gt;I found out about this as I was building some other GitHub tools. I looked at &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Pithub&#34;&gt;Pithub&lt;/a&gt;, and Marchex&amp;rsquo;s &lt;a href=&#34;https://github.com/marchex/github-api-tools&#34;&gt;github-api-tools&lt;/a&gt; but I wanted to iterate through long lists of paged results and process each item as I received them. The &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub Developer API&lt;/a&gt; is quite nice and even if you are re-inventing the wheel you&amp;rsquo;re learning about wheels, making this a fun night of work.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/examples/hacktoberfest.pl&#34;&gt;hacktoberfest.pl&lt;/a&gt; in my &lt;a href=&#34;https://github.com/briandfoy/ghojo&#34;&gt;ghojo&lt;/a&gt; repo. It will log in, list all of my repos (there are a couple hundred), create the &amp;ldquo;Hacktoberfest&amp;rdquo; label in each, and then apply the label to each open issue.&lt;/p&gt;

&lt;p&gt;The ghojo project is still very much in its infancy (which means there&amp;rsquo;s all sorts of pull request opportunities). But I allow quite a bit of flexibility by accepting a callback for things I expect to return many items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  };

$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each time I find a repo—and you don&amp;rsquo;t have to know how I do that—I run that callback. It&amp;rsquo;s a little bit like &lt;a href=&#34;https://metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt;&amp;rsquo;s use of the &lt;code&gt;wanted&lt;/code&gt; coderef. You don&amp;rsquo;t see the very nice API paging going on either; &lt;code&gt;repos&lt;/code&gt; keeps fetching more results as long as there are more results.&lt;/p&gt;

&lt;p&gt;That callback deals with a repo, but each repo has a list of issues. I want to process this list of issues as I run into them. So what I need is a callback to process a repo with a nested callback for the issues:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.24&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $label_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hacktoberfest&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $user, $repo ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;m{/}&lt;/span&gt;, $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{full_name};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_repo_object( $owner, $repo );

  &lt;span style=&#34;color:#75715e&#34;&gt;# get the labels for that repo&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{ &lt;span style=&#34;color:#e6db74&#34;&gt;qw(name color)&lt;/span&gt; } } $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;labels&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*;&lt;/span&gt;

  unless( exists $labels{$label_name} ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create_label( $label_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff5500&amp;#39;&lt;/span&gt; );
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\tCreated $label_name label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $rc;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
    $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_labels_to_issue( $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{number}, $label_name );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $item;
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $issues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;issues( $callback );

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $repo;
  };


$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Curiously, within a couple of hours of uploading the program, I received my first Hacktoberfest &lt;a href=&#34;https://github.com/briandfoy/ghojo/pull/14&#34;&gt;pull request&lt;/a&gt;. &lt;a href=&#34;https://github.com/haydenty&#34;&gt;haydenty&lt;/a&gt; added the &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file to my ghojo repo. It&amp;rsquo;s something I&amp;rsquo;ve been meaning to add to all of my repos. Now I&amp;rsquo;m considering adding an issue to each repo to note that and label each one &amp;ldquo;Hacktoberfest&amp;rdquo;. Or someone who wants to get started with something simple can create the issues for me, or send the pull requests right off.&lt;/p&gt;

&lt;p&gt;If you have lots of repos, label your issues to help push Perl up in &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;the rankings&lt;/a&gt;. By the time we reach the end of the month, I&amp;rsquo;ll have a program to reverse the labeling.&lt;/p&gt;

&lt;p&gt;Some of this I&amp;rsquo;m doing for fun, and some of this I&amp;rsquo;m doing because some organizations want better GitHub tools. Somehow how October is when all of that is coming together. If you&amp;rsquo;d like me to work on this sort of stuff for you, &lt;a href=&#34;mailto:brian.d.foy@gmail.com&#34;&gt;let me know&lt;/a&gt;! But submit those pull requests first so you get that t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Displaying the Git branch in the terminal prompt with and without Perl</title>
      <link>http://localhost:1313/article/displaying-the-git-branch-in-the-terminal-prompt-with-perl/</link>
      <pubDate>Fri, 13 May 2016 07:57:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/displaying-the-git-branch-in-the-terminal-prompt-with-perl/</guid>
      <description>

&lt;p&gt;One way to evolve as a programmer is to pay attention to things you do repeatedly, and replace that action with an efficient alternative. It took me a shamefully long time to realize I was typing &lt;code&gt;git branch&lt;/code&gt; many times a day to check which branch I was committing code to. A more efficient way is to display the current branch name in the terminal prompt. Ideally I&amp;rsquo;d like to see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/some/path [master]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-branch-command&#34;&gt;The branch command&lt;/h3&gt;

&lt;p&gt;With Git version control, code changes are committed to branches. The active branch is the context for work. For example I might be working on a new feature, so I create a new branch called &amp;ldquo;new-feature-x&amp;rdquo; and start writing code. Any changes I make to the code whilst in this branch, do not affect the master branch of code. This makes knowing the active branch really important - I don&amp;rsquo;t want to commit code to the wrong branch.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;branch&lt;/code&gt; command displays a list of all local branches and places an asterisk next to the active one. So in my fictional example, it might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch
  master
* new-feature-x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git prepends an asterisk to highlight the active branch name. Sometimes I use this to remind myself which branches are available locally, but most of the time I&amp;rsquo;m checking it to see which branch I&amp;rsquo;m currently working on. The Git &lt;a href=&#34;https://git-scm.com/docs/git-branch&#34;&gt;branch documentation&lt;/a&gt; has more information on the ins and outs of &lt;code&gt;branch&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;parsing-git-branch-with-perl&#34;&gt;Parsing git branch with Perl&lt;/h3&gt;

&lt;p&gt;This is the one liner I want to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch 2&amp;gt; /dev/null | perl -ne &#39;print &amp;quot; [$_]&amp;quot; if s/^\*\s+// &amp;amp;&amp;amp; chomp&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It runs &lt;code&gt;git branch&lt;/code&gt; redirecting error messages to the netherworld. That means if the current working directory is not a git repository, the ensuing error message will be ignored. We pipe the list of git branches to Perl, which uses the &lt;code&gt;-n&lt;/code&gt; option to loop through each line of input, running the quoted code.&lt;/p&gt;

&lt;p&gt;The code operates on the default variable &lt;code&gt;$_&lt;/code&gt; which is the line of output from &lt;code&gt;git branch&lt;/code&gt; being looped over. The active branch name always begins with an asterisk, So &lt;code&gt;s/^\*\s+//&lt;/code&gt; tries to substitute the leading asterisk and whitespace from the branch name. Substitute returns the number of characters it replaced, so for all lines except the active branch, that will be zero and evaluate to false. If it&amp;rsquo;s true, the code then chomps the trailing newline character from the branch name and prints it.&lt;/p&gt;

&lt;p&gt;I can add this as a function to my &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;function current_git_branch {
  git branch &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/dev/&lt;/span&gt;null &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print &amp;#34; [$_]&amp;#34; if s/^\*\s+// &amp;amp;&amp;amp; chomp&amp;#39;&lt;/span&gt;
}
PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\w\$(current_git_branch) &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;PS1&lt;/code&gt; variable defines the terminal prompt content and style. Here I&amp;rsquo;ve defined it as follows: &lt;code&gt;\w&lt;/code&gt; is the current working directory path, e.g. &lt;code&gt;~/Projects/work/&lt;/code&gt; or whatever. This is followed by the call to &lt;code&gt;current_git_branch&lt;/code&gt;. Once those edits are saved in my &lt;code&gt;.bashrc&lt;/code&gt;, I need to save the file and reload it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ . ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now my terminal prompt looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Projects/work [new-feature-x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if I checkout a different branch it will change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Projects/work [new-feature-x] git checkout master
~/Projects/work [master]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;some-other-ways&#34;&gt;Some other ways&lt;/h3&gt;

&lt;p&gt;One easy alternative would be to use Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch 2&amp;gt; /dev/null | perl6 -ne &#39;print &amp;quot; [$_]&amp;quot; if s/^\*\s+// &amp;amp;&amp;amp; .chomp&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is almost the same as before, only &lt;code&gt;chomp&lt;/code&gt; has been changed to a method call. A regex capture could be used instead too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch 2&amp;gt; /dev/null | perl -ne &#39;print &amp;quot; [$1]&amp;quot; if /^\*\s+(\S+)/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve also seen &lt;a href=&#34;https://askubuntu.com/questions/730754/how-do-i-show-the-git-branch-with-colours-in-bash-prompt&#34;&gt;examples&lt;/a&gt; using &lt;code&gt;sed&lt;/code&gt; to parse the output instead of Perl.&lt;/p&gt;

&lt;h3 id=&#34;bash-only&#34;&gt;Bash only&lt;/h3&gt;

&lt;p&gt;Perhaps a more efficient approach is to have Git emit only the active branch name, and then we don&amp;rsquo;t need another program to parse the output at all, we can just use bash. Credit goes to &lt;a href=&#34;http://randalschwartz.com&#34;&gt;Randal Schwartz&lt;/a&gt; for showing me this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rev-parse --abbrev-ref HEAD
new-feature-x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This emits the active branch only. So now the code in my &lt;code&gt;.bashrc&lt;/code&gt; becomes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;function current_git_branch {
  local branch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;git rev&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parse &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;abbrev&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ref HEAD &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev/&lt;/span&gt;null);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; [[ &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n $branch ]];&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [$branch]&amp;#34;&lt;/span&gt;;
  fi
}
PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\w\$(current_git_branch) &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code assigns the output of the git command to the variable &lt;code&gt;branch&lt;/code&gt;. It then echoes the branch name as long as it&amp;rsquo;s not a zero length string (which happens when the current working directory is not a git repository). But wait a second, what happened to that newline at the end of the branch name? Bash has some interesting behavior with nested &lt;code&gt;echo&lt;/code&gt; commands. Check this out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo -n $(echo -e &amp;quot;\n\n\n\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run that command at the terminal you should get no output, even though it includes 4 newline characters, plus another newline appended by the &lt;code&gt;echo&lt;/code&gt; subcommand. The outer &lt;code&gt;echo&lt;/code&gt; ignores all newlines returned by the subcommand, and the &lt;code&gt;-n&lt;/code&gt; option suppresses its own newline append (thanks to Ben Grimm for the explanation).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going with the bash variant, but whichever method you use, displaying the branch name in the terminal is a nice time saver.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2016/</link>
      <pubDate>Fri, 04 Mar 2016 09:21:32 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/wp_tools&#34;&gt;App::WordPressTools&lt;/a&gt; provides tools to backup and upgrade WordPress installations.&lt;/li&gt;
&lt;li&gt;Manage AMQP connections with &lt;a href=&#34;https://metacpan.org/pod/Net::AMQP::ConnectionMgr&#34;&gt;Net::AMQP::ConnectionMgr&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Walmart&#34;&gt;WebService::Walmart&lt;/a&gt; Interface to Walmart&amp;rsquo;s open API.&lt;/li&gt;
&lt;li&gt;Get a Perly interface to the Microsoft Translator with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Translator::Microsoft&#34;&gt;Lingua::Translator::Microsoft&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Start interacting with Ticketmaster&amp;rsquo;s APIs using &lt;a href=&#34;https://metacpan.org/pod/Ticketmaster::API&#34;&gt;Ticketmaster::API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Mirror::Tiny&#34;&gt;CPAN::Mirror::Tiny&lt;/a&gt; can create local CPAN mirrors, with no XS dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::GELF::Util&#34;&gt;Log::GELF::Util&lt;/a&gt; provides utility functions for Graylog&amp;rsquo;s GELF format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stream data scattered across files by datetime using &lt;a href=&#34;https://metacpan.org/pod/CSV::HistoryPlayer&#34;&gt;CSV::HistoryPlayer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::BatchUpdate&#34;&gt;DBIx::Class::BatchUpdate&lt;/a&gt; can update DBIx results in batches, minimizing the number of queries executed.&lt;/li&gt;
&lt;li&gt;Run asynchronous queries on Postgres with AnyEvent and Promises with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Poggy&#34;&gt;DBIx::Poggy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::MyHTML&#34;&gt;HTML::MyHTML&lt;/a&gt; is a superfast, threaded, C based HTML parser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Similar&#34;&gt;Image::Similar&lt;/a&gt; measures how similar two images are.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Parsertron&#34;&gt;Regexp::Parsertron&lt;/a&gt; parses Perl regular expressions into trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Attrs&#34;&gt;Export::Attrs&lt;/a&gt; provides Perl 6&amp;rsquo;s &lt;code&gt;is export(...)&lt;/code&gt; trait as a Perl 5 attribute.&lt;/li&gt;
&lt;li&gt;Get functions to compare Git::Version objects using &lt;a href=&#34;https://metacpan.org/pod/Git::Version::Compare&#34;&gt;Git::Version::Compare&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::Diagnostics&#34;&gt;Parse::Diagnostics&lt;/a&gt; can extract diagnostic messages from Perl source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perlmazing&#34;&gt;Perlmazing&lt;/a&gt; - a bundle of lazily-loaded helper functions based on Perlmazing::Engine.&lt;/li&gt;
&lt;li&gt;GitHub inspired Perl module, run experiments with &lt;a href=&#34;https://metacpan.org/pod/Scientist&#34;&gt;Scientist&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to test a module against every installed version of Perl? &lt;a href=&#34;https://metacpan.org/pod/Test::BrewBuild&#34;&gt;Test::BrewBuild&lt;/a&gt; builds on perlbrew/berrybrew to do that for Windows Unix-based systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Mock::Time&#34;&gt;Test::Mock::Time&lt;/a&gt; create deterministic time &amp;amp; timers for testing. Particularly apt as February 29&lt;sup&gt;th&lt;/sup&gt; just passed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::AsyncSubtest&#34;&gt;Test2::AsyncSubtest&lt;/a&gt; execute subtests asynchronously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Astro::Constants&#34;&gt;Astro::Constants&lt;/a&gt; a collection of Astronomy constants.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Compress::Huffman&#34;&gt;Compress::Huffman&lt;/a&gt; can huffman-encode a symbol table.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Music::Voss&#34;&gt;Music::Voss&lt;/a&gt; provides functions for fractal noise generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remotely control Google Chrome from Perl with &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Chromi&#34;&gt;AnyEvent::Chromi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get an alternative syntax for describing Catalyst routes with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::ControllerRole::At&#34;&gt;Catalyst::ControllerRole::At&lt;/a&gt;. This is big.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::CGI&#34;&gt;Getopt::Long::CGI&lt;/a&gt; is a cool idea: execute CGI scripts just like passing arguments to a command line program.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Progress::Stored&#34;&gt;Time::Progress::Stored&lt;/a&gt; is a progress bar implementation with an web apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick tip: git push origin hamster?</title>
      <link>http://localhost:1313/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</link>
      <pubDate>Thu, 24 Dec 2015 17:20:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</guid>
      <description>&lt;p&gt;My typing is horrible. I make mistakes all the time. I&amp;rsquo;m an avid &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; user but I still use the arrow keys. I&amp;rsquo;m one of those people who need technology that does what they meant, not what they asked for. So if you&amp;rsquo;re a coder like me, you probably see this a lot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git push origin amster
error: src refspec amster does &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; match any&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately there is a simple workaround: Git&amp;rsquo;s &lt;a href=&#34;https://git-scm.com/docs/git-symbolic-ref&#34;&gt;symbolic references&lt;/a&gt;. I can add a symbolic reference for &lt;code&gt;amster&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git symbolic&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ref refs&lt;span style=&#34;color:#e6db74&#34;&gt;/heads/&lt;/span&gt;amster refs&lt;span style=&#34;color:#e6db74&#34;&gt;/heads/m&lt;/span&gt;aster&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now Git does what I meant:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git push origin amster
Counting objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Delta compression using up to &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Compressing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Writing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#e6db74&#34;&gt;/3), 695 bytes | 0 bytes/s&lt;/span&gt;, done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Total &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
To git@github&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com:user&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;SomeProject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
   ec208c7&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;fb0cb8f  amster &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because it&amp;rsquo;s a symbolic reference, anytime I mean to type &lt;code&gt;master&lt;/code&gt; but actually type &lt;code&gt;amster&lt;/code&gt;, Git will do the right thing. Try it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2015</title>
      <link>http://localhost:1313/article/176/2015/6/4/What-s-new-on-CPAN---May-2015/</link>
      <pubDate>Thu, 04 Jun 2015 15:35:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/176/2015/6/4/What-s-new-on-CPAN---May-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::GitHooks::Plugin::ForceBranchNamePattern&#34;&gt;App::GitHooks::Plugin::ForceBranchNamePattern&lt;/a&gt; will enforce a branch naming pattern using a regex. Author Guillaume Aubert gives the use case of building a Puppet environment from Git branches (Puppet environment names must be alphanumeric). Another example is when you want all Git branch names to map to an issue tracker id.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/AUBERTG&#34;&gt;Guillaume Aubert&lt;/a&gt; has developed many other useful Git hook plugins, such as emitting release messages into Slack and checking Perl code passes a Perl Critic review. Check them out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Disque&#34;&gt;Disque&lt;/a&gt; is a distributed job queue built on top of Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HPCI&#34;&gt;HPCI&lt;/a&gt; is an application for performing distributed computing&lt;/li&gt;
&lt;li&gt;Use the watcher plugin with Elasticsearch using &lt;a href=&#34;https://metacpan.org/pod/Search::Elasticsearch::Plugin::Watcher&#34;&gt;Search::Elasticsearch::Plugin::Watcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Pocket&#34;&gt;WWW::Pocket&lt;/a&gt; provides an interface for the Pocket v3 API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Marvel&#34;&gt;WWW::Marvel&lt;/a&gt; is an alpha-release interface for the Marvel comics API&lt;/li&gt;
&lt;li&gt;Looking for a faster XML library? TurboXSLT provides an interface to libturboxsl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/release/Net-Hadoop-YARN&#34;&gt;Net::Hadoop::YARN&lt;/a&gt; is an API for Apache Hadoop Next Generation&lt;/li&gt;
&lt;li&gt;Send Google Analytics user metrics from Perl using &lt;a href=&#34;https://metacpan.org/pod/Net::Google::Analytics::MeasurementProtocol&#34;&gt;Net::Google::Analytics::MeasurementProtocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::DirectConnect&#34;&gt;Net::Amazon::DirectConnect&lt;/a&gt; lets you interact with Amazon&amp;rsquo;s DirectConnect service&lt;/li&gt;
&lt;li&gt;Use the Airbrake Notifier API V3 Client with &lt;a href=&#34;https://metacpan.org/pod/Net::Airbrake&#34;&gt;Net::Airbrake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Perl&#34;&gt;Config::Perl&lt;/a&gt; aims to be a safer alternative to loading Perl data structures than with &lt;code&gt;eval&lt;/code&gt; by using PPI. Interesting approach, blackhat hackers start your engines&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Group::Git::Taggers::Perl&#34;&gt;Group::Git::Taggers::Perl&lt;/a&gt; provides a way to detect Perl git repos. Could be a useful complement to GitHub&amp;rsquo;s API language detection&lt;/li&gt;
&lt;li&gt;Store SpamAssassin rules performance data in Redis using &lt;a href=&#34;https://metacpan.org/pod/Mail::SpamAssassin::Plugin::RuleTimingRedis&#34;&gt;Mail::SpamAssassin::Plugin::RuleTimingRedis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Looking for a fast priority queue implementation? Check out &lt;a href=&#34;https://metacpan.org/pod/Array::Heap::ModifiablePriorityQueue&#34;&gt;Array::Heap::ModifiablePriorityQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::AuditAny&#34;&gt;DBIx::Class::AuditAny&lt;/a&gt; is a configurable change tracking tool for DBIx::Class schemas. For example it could be used to track the changes of values in a table over time (insert, update, delete etc)&lt;/li&gt;
&lt;li&gt;Manage database relationships in DBIx::Class when the traditional route fails with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Schema::Loader::DBI::RelPatterns&#34;&gt;DBIx::Class::Schema::Loader::DBI::RelPatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::TimeMoment&#34;&gt;DBIx::Class::InflateColumn::TimeMoment&lt;/a&gt; provides a DBIx::Class column handler for the super fast date time implementation&lt;/li&gt;
&lt;li&gt;Generate HTML from data using &lt;a href=&#34;https://metacpan.org/pod/HTML::AutoTag&#34;&gt;HTML::AutoTag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;With &lt;a href=&#34;https://metacpan.org/pod/Sereal::Path&#34;&gt;Sereal::Path&lt;/a&gt; you can use XPATH and JSONPath with Sereal-encoded data. Nice!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Find out the reverse dependencies of a module with &lt;a href=&#34;https://metacpan.org/pod/App::CPAN::Dependents&#34;&gt;App::CPAN::Dependents&lt;/a&gt;. Has a neat command line option too&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::AutoloadAll&#34;&gt;Acme::AutoloadAll&lt;/a&gt; exports all subroutines from every loaded module by injecting an autoload function into them. Crazy!&lt;/li&gt;
&lt;li&gt;Keep your Dzil GitHub credentials in one place with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Stash::GitHub&#34;&gt;Dist::Zilla::Stash::GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Object::Prototype&#34;&gt;Data::Object::Prototype&lt;/a&gt; makes prototype-style programming easy. Interesting approach&lt;/li&gt;
&lt;li&gt;Create application locks based on files or sockets with&lt;a href=&#34;https://metacpan.org/pod/JIP::LockFile&#34;&gt;JIP::LockFile&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/JIP::LockSocket&#34;&gt;JIP::LockSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Slice&#34;&gt;List::Slice&lt;/a&gt; provides head and tail functions for lists, plays nicely with functions that output lists like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Declare compile-time and class-safe constants with &lt;a href=&#34;https://metacpan.org/pod/pluskeys&#34;&gt;pluskeys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Device::GPS can read GSP NMEA data via serial port&lt;/li&gt;
&lt;li&gt;Device::GPIB::Prologix provides a Perly interface for the Prologix GPIB-USB Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-mathematics&#34;&gt;Science and Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::CUA&#34;&gt;Bio::CUA&lt;/a&gt; provides &amp;ldquo;comprehensive and flexible tools to analyze codon usage bias&amp;rdquo;. Looks impressive&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::LITE::Taxonomy::NCBI&#34;&gt;Bio::LITE::Taxonomy::NCBI&lt;/a&gt; aims to be a Lightweight and efficient NCBI taxonomic manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dallycot::Manual::Intro&#34;&gt;Dallycot&lt;/a&gt; is &amp;ldquo;an engine for running linked open code (algorithms expressed as linked open data) and exploring linked open data&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Read and write Graph6 / sparse6 graph formats with &lt;a href=&#34;https://metacpan.org/pod/Graph::Graph6&#34;&gt;Graph::Graph6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HEP::MCNS&#34;&gt;HEP::MCNS&lt;/a&gt; can convert Monte Carlo numbers into particle names&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LCS::BV&#34;&gt;LCS::BV&lt;/a&gt; is a bit vector implementation (read: faster) of the LCS algorithm (used for diff among other things)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::EWMA&#34;&gt;Math::EWMA&lt;/a&gt; provides an exponential weighted moving average object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::ActionSignatures&#34;&gt;Catalyst::ActionSignatures&lt;/a&gt; allows declaration of variables in Controller signatures&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Auth::HTTP::Basic::DWIW&#34;&gt;Dancer2::Plugin::Auth::HTTP::Basic::DWIW&lt;/a&gt; provides HTTP basic authentication for Dancer2 apps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Tinyish&#34;&gt;HTTP::Tinyish&lt;/a&gt; is a wrapper for the popular Perl HTTP modules (HTTP::Tiny, LWP etc) and will fallback to using the appropriate module for the request made&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::All::Securftp&#34;&gt;IO::All::Securftp&lt;/a&gt; implements a secure FTP handler for IO::All&lt;/li&gt;
&lt;li&gt;Interact with the JavaScript in your Mojo applications using &lt;a href=&#34;https://metacpan.org/pod/Mojo::Phantom&#34;&gt;Mojo::Phantom&lt;/a&gt;. Cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

