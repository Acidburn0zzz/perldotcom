<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Libxml2 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/libxml2/</link>
    <description>Recent content in Libxml2 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Apr 2017 09:13:30 +0000</lastBuildDate>
    <atom:link href="/tags/libxml2/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - March 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2017/</link>
      <pubDate>Fri, 14 Apr 2017 09:13:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Upload::Tiny&#34;&gt;CPAN::Upload::Tiny&lt;/a&gt; a tiny CPAN uploader&lt;/li&gt;
&lt;li&gt;Fetch streamable URLs from radio-station websites using &lt;a href=&#34;https://metacpan.org/pod/IHeartRadio::Streams&#34;&gt;IHeartRadio::Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kritika.io is a code quality service for Perl, use its API with &lt;a href=&#34;https://metacpan.org/pod/App::Kritika&#34;&gt;App::Kritika&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Access the Megaport API with &lt;a href=&#34;https://metacpan.org/pod/Megaport&#34;&gt;Megaport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the Money Over IP v2 API (Brazilian) with &lt;a href=&#34;https://metacpan.org/pod/Net::Moip::V2&#34;&gt;Net::Moip::V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Zendesk&#34;&gt;Net::Zendesk&lt;/a&gt; is a thin and lightweight interface for Zendesk&amp;rsquo;s API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Braintree&#34;&gt;WebService::Braintree&lt;/a&gt; is a fork of Net::Braintree for the Braintree Payment Services Gateway API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install the C libxml2 library on your system with &lt;a href=&#34;https://metacpan.org/pod/Alien::Libxml2&#34;&gt;Alien::Libxml2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checkout &lt;a href=&#34;https://metacpan.org/pod/Module::Build::FFI&#34;&gt;Module::Build::FFI&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Alien::Base::ModuleBuild&#34;&gt;Alien::Base::ModuleBuild&lt;/a&gt; if you want to distribute Alien modules with Build.PL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Glib::FindMinVersion&#34;&gt;Glib::FindMinVersion&lt;/a&gt; find the minimum version of GLib needed to compile C source&lt;/li&gt;
&lt;li&gt;Manage LXC containers with &lt;a href=&#34;https://metacpan.org/pod/Linux::LXC&#34;&gt;Linux::LXC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SSH::Putty&#34;&gt;Net::SSH::Putty&lt;/a&gt; execute SSH sessions with Putty in batch mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bytes::Random::XS&#34;&gt;Bytes::Random::XS&lt;/a&gt; generate random bytes in C!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Convert::Color::HSLuv&#34;&gt;Convert::Color::HSLuv&lt;/a&gt; convert between RGB, CIEXYZ, CIELUV, CIELCh, HSLuv, HPLuv color spaces&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::ResultSet::SetControl&#34;&gt;DBIx::Class::ResultSet::SetControl&lt;/a&gt; provides convenient looping over DBIC resultsets&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::FIX&#34;&gt;Protocol::FIX&lt;/a&gt; a Financial Information eXchange (FIX) parser/serializer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Starch::Plugin::SecureStateID&#34;&gt;Starch::Plugin::SecureStateID&lt;/a&gt; use cryptographically secure random when making state IDs for &lt;a href=&#34;https://metacpan.org/pod/Starch&#34;&gt;Starch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support line-oriented command interpreters with &lt;a href=&#34;https://metacpan.org/pod/Cmd::Interpreter&#34;&gt;Cmd::Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Forks::Queue&#34;&gt;Forks::Queue&lt;/a&gt;  a queue that can be shared across processes - neat!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::SigGuard&#34;&gt;IO::SigGuard&lt;/a&gt; provides signal protection for sysread/syswrite EINTR errors&lt;/li&gt;
&lt;li&gt;Get a minimal mailing list manager with &lt;a href=&#34;https://metacpan.org/pod/Sietima&#34;&gt;Sietima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sort::HashKeys&#34;&gt;Sort::HashKeys&lt;/a&gt; provides a faster hash key sort using XS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/X::Tiny&#34;&gt;X::Tiny&lt;/a&gt; is a lightweight exception framework&lt;/li&gt;
&lt;li&gt;Declare constants and export them automatically using &lt;a href=&#34;https://metacpan.org/pod/exported::constants&#34;&gt;exported::constants&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::ADC::MCP3008&#34;&gt;RPi::ADC::MCP3008&lt;/a&gt; is an interface to the MCP3008 analog to digital converter (ADC) on Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Describe time duration in Spanish using &lt;a href=&#34;https://metacpan.org/pod/Time::Duration::es&#34;&gt;Time::Duration::es&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/NanoB2B::NER&#34;&gt;NanoB2B::NER&lt;/a&gt; - turns labeled text lines into ARFF files, as part of an effort to &amp;ldquo;automatically extract and synthesize knowledge and trends in nanotechnology research&amp;rdquo; - cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use websockets in Perl with &lt;a href=&#34;https://metacpan.org/pod/Net::WebSocket&#34;&gt;Net::WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Web::AssetLib&#34;&gt;Web::AssetLib&lt;/a&gt; is a static asset pipeline manager - looks very capable&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Wurm&#34;&gt;Wurm&lt;/a&gt; is a new web framework based on fold-r. The docs are entertaining. Bravo!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML pro-parsing tips</title>
      <link>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</link>
      <pubDate>Thu, 10 Jul 2014 12:33:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/101/2014/7/10/HTML-pro-parsing-tips/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Perl has some fantastic modules for parsing HTML and one of the best is XML::LibXML. It&amp;rsquo;s an interface to the libxml2 C library; super fast but also super-picky. I&amp;rsquo;ve often found XML::LibXML croaking on relatively simple - but incorrectly formed HTML. If you find this, do not give up! This article shares 3 simple techniques for overcoming malformed HTML when parsing with XML::LibXML.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tip-1-turn-on-recovery-mode&#34;&gt;Tip 1: turn on recovery mode&lt;/h3&gt;

&lt;p&gt;If XML::LibXML is croaking on a later part of the HTML, try turning on recovery mode, which will return all of the correctly parsed HTML up until XML::LibXML encountered the error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; XML::LibXML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $xml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( recover &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $xml&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With recovery mode set to 1, the parser will still warn about parsing errors. To suppress the warnings, set recover to 2.&lt;/p&gt;

&lt;h3 id=&#34;tip-2-sanitize-the-input-first-with-html-scrubber&#34;&gt;Tip 2: sanitize the input first with HTML::Scrubber&lt;/h3&gt;

&lt;p&gt;Sometimes recovery mode alone is not enough - XML::LibXML will croak at the first whiff of HTML if there are two doctype declarations for example. In these situations, consider sanitizing the HTML with &lt;a href=&#34;https://metacpan.org/pod/HTML::Scrubber&#34;&gt;HTML::Scrubber&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTML::Scrubber provides both whitelist and blacklist functions to include or exclude HTML tags and attributes. It&amp;rsquo;s a powerful combination which allows you to create a custom filter to scrub the HTML that you want to parse.&lt;/p&gt;

&lt;p&gt;By default HTML::Scrubber removes all tags, but in the case of a duplicate doctype declaration, you just need that one tag removed. Let&amp;rsquo;s remove all div tags too for good measure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTML::Scrubber;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HTML::Scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( deny &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;doctype&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt; ],
                                    allow&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scrubbed_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $scrubber&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;scrub($html);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $scrubbed_html );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;deny&amp;rdquo; rule sets the scrubber blacklist (what to exclude) and the &amp;ldquo;allow&amp;rdquo; rule specifies the whitelist (what to include). Here we passed an asterisk (&amp;rdquo;*&amp;rdquo;) to allow, which means allow everything, but because we&amp;rsquo;re denying div and doctype tags, they&amp;rsquo;ll be removed.&lt;/p&gt;

&lt;h3 id=&#34;tip-3-extract-a-subset-of-data-with-a-regex-capture&#34;&gt;Tip 3: extract a subset of data with a regex capture&lt;/h3&gt;

&lt;p&gt;If the subset HTML you want to parse has a unique identifier (such as an id attribute), consider using a regex capture to extract it from the HTML document. You can then scrub or immediately parse this subset with XML::LibXML.&lt;/p&gt;

&lt;p&gt;For example recently I had to extract an HTML table from a badly-formed web page. Fortunately the table had an id attribute, which made extracting it with a regex a piece-of-cake:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/(&amp;lt;table id=&amp;#34;t2&amp;#34;&amp;gt;.*?&amp;lt;\/table&amp;gt;)/s&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XML::LibXML&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_html( string &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $1 );
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the use of the &amp;ldquo;s&amp;rdquo; modifier in the regex to match multiline. Many HTML pages contain newlines and you don&amp;rsquo;t want your match fail because of that.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully these tips will make parsing HTML with XML::LibXML easier. My GitHub account has a web scraper &lt;a href=&#34;https://gist.github.com/sillymoose/998b9199007589199dce#file-get_swift_code-pl-L42&#34;&gt;script&lt;/a&gt; that uses some of these tips. If you&amp;rsquo;re looking for an entirely different approach to parsing HTML, check out &lt;a href=&#34;https://metacpan.org/pod/XML::Rabbit&#34;&gt;XML::Rabbit&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/HTML::TreeBuilder&#34;&gt;HTML::TreeBuilder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;text=HTML+pro-parsing+tips&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F101%2F2014%2F7%2F10%2FHTML-pro-parsing-tips&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

