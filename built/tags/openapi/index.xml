<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openapi on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/openapi/</link>
    <description>Recent content in Openapi on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Oct 2018 20:42:27 +0000</lastBuildDate>
    <atom:link href="/tags/openapi/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - September 2018</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---september-2018/</link>
      <pubDate>Tue, 09 Oct 2018 20:42:27 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---september-2018/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple ASCII charting using &lt;a href=&#34;https://metacpan.org/pod/App::AsciiChart&#34;&gt;App::AsciiChart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::JsonLogUtils&#34;&gt;App::JsonLogUtils&lt;/a&gt; provides command line utilities for dealing with JSON-formatted log files&lt;/li&gt;
&lt;li&gt;Simple interface to the OneSky API: &lt;a href=&#34;https://metacpan.org/pod/Net::OneSky&#34;&gt;Net::OneSky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Communicate with the patron data store, Hetula using &lt;a href=&#34;https://metacpan.org/pod/Hetula::Client&#34;&gt;Hetula::Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Signer::AWSv4&#34;&gt;Signer::AWSv4&lt;/a&gt; can sign AWS requests with v4 signatures without needing an HTTP::Request object&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Exchange&#34;&gt;Data::Exchange&lt;/a&gt; can exchange files and update issues from your colleagues via an S3 bucket&lt;/li&gt;
&lt;li&gt;Manage cards and decks using &lt;a href=&#34;https://metacpan.org/pod/Ordeal::Model&#34;&gt;Ordeal::Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert OpenAPI (swagger) schemas to SQL::Translator schemas with &lt;a href=&#34;https://metacpan.org/pod/SQL::Translator::Parser::OpenAPI&#34;&gt;SQL::Translator::Parser::OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Types::PGPLOT&#34;&gt;Types::PGPLOT&lt;/a&gt; Type::Tiny compatible types for the PGPLOT library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XML::Invisible&#34;&gt;XML::Invisible&lt;/a&gt; transform &amp;ldquo;invisible XML&amp;rdquo; documents into XML using a grammar&lt;/li&gt;
&lt;li&gt;Get a faster backend for YAML::PP via &lt;a href=&#34;https://metacpan.org/pod/YAML::PP::LibYAML&#34;&gt;YAML::PP::LibYAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::IssueManager&#34;&gt;Git::IssueManager&lt;/a&gt; can manage issues in a git branch within your repository&lt;/li&gt;
&lt;li&gt;Get JSON API-style error objects with &lt;a href=&#34;https://metacpan.org/pod/JSON::API::Error&#34;&gt;JSON::API::Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::DBus&#34;&gt;Protocol::DBus&lt;/a&gt; D-Bus in pure Perl!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Astro::Coord::ECI::VSOP87D&#34;&gt;Astro::Coord::ECI::VSOP87D&lt;/a&gt; implements the VSOP87D position model of planetary motion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Email::Address::UseXS&#34;&gt;Email::Address::UseXS&lt;/a&gt; to avoid choking on badly formatted input&lt;/li&gt;
&lt;li&gt;Validate HTML with &lt;a href=&#34;https://metacpan.org/pod/HTML::T5&#34;&gt;HTML::T5&lt;/a&gt;, a fork of HTML::Lint&lt;/li&gt;
&lt;li&gt;Complete with the first fulfilled promise using &lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Role::HigherOrder&#34;&gt;Mojo::Promise::Role::HigherOrder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ForwardedFor&#34;&gt;Mojolicious::Plugin::ForwardedFor&lt;/a&gt; retrieves the remote address from X-Forwarded-For&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::PNGCast&#34;&gt;Mojolicious::Plugin::PNGCast&lt;/a&gt; can display a screencast from a headless browser or any PNG websocket stream&lt;/li&gt;
&lt;li&gt;Perform concurrent HTTP requests using libcurl with &lt;a href=&#34;https://metacpan.org/pod/Net::Curl::Parallel&#34;&gt;Net::Curl::Parallel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mock APIs for free using JSON Schemas</title>
      <link>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</link>
      <pubDate>Wed, 20 Sep 2017 06:57:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/mock-apis-for-free-using-json-schemas/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is a module which takes a &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON schema&lt;/a&gt;, and generates a data structure compliant with the schema. Here&amp;rsquo;s a quick script to generate a data structure based on a schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gen-json - create json from a schema filepath&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $schema    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { local($/);&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; }; &lt;span style=&#34;color:#75715e&#34;&gt;# slurp the filepath in @ARGV&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema_str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $schema);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper($data);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run it, I need to pass the filepath to a JSON schema, in this case &lt;code&gt;user.json&lt;/code&gt; describes a web app user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./gen-json user.json
$VAR1 = {
      &#39;email_address&#39; =&amp;gt; &#39;HfeiJzddxVTg@AspFqfgUKivV.com&#39;,
      &#39;birthdate&#39; =&amp;gt; &#39;2014-01-14T00:59:43.000Z&#39;,
      &#39;active&#39; =&amp;gt; bless( do{\(my $o = 0)}, &#39;JSON::PP::Boolean&#39; ),
      &#39;cell_phone_number&#39; =&amp;gt; &#39;043 185 8956&#39;,
      &#39;roles&#39; =&amp;gt; [
                   &#39;manager&#39;,
                   &#39;trainer&#39;,
                   &#39;admin&#39;
                 ],
      &#39;display_name&#39; =&amp;gt; &#39;Pswgfkjzdc&#39;,
      &#39;password&#39; =&amp;gt; &#39;QI0RQDR9A7W2EtuNHaQKvBFQp67oO0Ld&#39;,
      &#39;login&#39; =&amp;gt; &#39;7oRSCeREi9sWm&#39;,
      &#39;full_name&#39; =&amp;gt; &#39;Oiqmqdr Frfxrzkzfjn&#39;,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script creates a new &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; object called &lt;code&gt;$generator&lt;/code&gt;, slurps the JSON schema into &lt;code&gt;$schema&lt;/code&gt;, and generates the data structure assigning it to &lt;code&gt;$data&lt;/code&gt;. Then &lt;code&gt;$data&lt;/code&gt; is pretty-printed to STDOUT via &lt;code&gt;Data::Dumper&lt;/code&gt;. Notice how the data printed to the terminal is compliant but &lt;em&gt;not&lt;/em&gt; realistic.&lt;/p&gt;

&lt;h3 id=&#34;mocking-apis&#34;&gt;Mocking APIs&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s popular to describe API endpoints with JSON schemas for &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;. Swagger will generate documentation using the schemas, and even provides a request/response testing tool. We can make the JSON schemas even more useful by using them to mock API endpoints. Imagine you&amp;rsquo;ve defined an API but haven&amp;rsquo;t built it yet: you can create the API endpoint and return data mocked with &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; so that frontend development can begin without waiting for the backend to be ready.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;ve got the following Swagger doc (a JSON schema) which defines a single API route &lt;code&gt;/user&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;swagger&amp;quot;: &amp;quot;2.0&amp;quot;,
  &amp;quot;schemes&amp;quot;: [
    &amp;quot;https&amp;quot;
  ],
  &amp;quot;produces&amp;quot;: [
    &amp;quot;application/json&amp;quot;
  ],
  &amp;quot;paths&amp;quot;: {
    &amp;quot;/user&amp;quot;: {
      &amp;quot;get&amp;quot;: {
        &amp;quot;summary&amp;quot;: &amp;quot;returns a user for a given id&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;,
            &amp;quot;in&amp;quot;: &amp;quot;path&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
          }
        ],
        &amp;quot;responses&amp;quot;: {
          &amp;quot;200&amp;quot;: {
            &amp;quot;description&amp;quot;: &amp;quot;Objects matching the search term&amp;quot;,
            &amp;quot;schema&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
              &amp;quot;properties&amp;quot;: {
                &amp;quot;login&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{5,32}&amp;quot;
                },
                &amp;quot;full_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10} [A-Z][a-z]{3,20}&amp;quot;
                },
                &amp;quot;display_name&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[A-Z][a-z]{3,10}&amp;quot;
                },
                &amp;quot;birthdate&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;date-time&amp;quot;
                },
                &amp;quot;email_address&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;format&amp;quot;: &amp;quot;email&amp;quot;
                },
                &amp;quot;cell_phone_number&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;\\d{3} \\d{3} \\d{4}&amp;quot;
                },
                &amp;quot;password&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                  &amp;quot;pattern&amp;quot;: &amp;quot;[0-9A-Za-z]{8,32}&amp;quot;
                },
                &amp;quot;roles&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                  &amp;quot;minItems&amp;quot;: 1,
                  &amp;quot;maxItems&amp;quot;: 4,
                  &amp;quot;uniqueItems&amp;quot;: true,
                  &amp;quot;items&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
                    &amp;quot;enum&amp;quot;: [ &amp;quot;admin&amp;quot;, &amp;quot;manager&amp;quot;, &amp;quot;trainer&amp;quot;, &amp;quot;member&amp;quot; ]
                  }
                },
                &amp;quot;active&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;boolean&amp;quot;
                }
              }
            }
          }
        }
      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Lite&#34;&gt;Mojolicious::Lite app&lt;/a&gt; to serve the mocked route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::XS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;decode_json&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; JSON::Schema::ToJSON;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $generator  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON::Schema::ToJSON&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; { open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swaggerdoc.json&amp;#39;&lt;/span&gt;; local($/);&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $swaggerdoc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decode_json($json);

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $route_def &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $swaggerdoc&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{paths}{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;}{get}{responses}{&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;}{schema};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $generator&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;json_schema_to_json(schema &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $route_def);
  $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(json &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $response);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This app slurps and decodes the swagger doc on startup, saving the result to &lt;code&gt;$swaggerdoc&lt;/code&gt; and declares a &lt;code&gt;/user&lt;/code&gt; route which extracts the API definition from the &lt;code&gt;$swaggerdoc&lt;/code&gt;, and uses &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt; to generate a response, and renders it. Let&amp;rsquo;s test the app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hypnotoad user-app.pl
[Wed Sep 20 14:19:49 2017] [info] Listening at &amp;quot;http://*:8080&amp;quot;
Server available at http://127.0.0.1:8080

$ curl localhost:8080/user
{&amp;quot;active&amp;quot;:false,&amp;quot;birthdate&amp;quot;:&amp;quot;2009-08-30T17:47:32.000Z&amp;quot;,&amp;quot;cell_phone_number&amp;quot;:&amp;quot;254 403 0133&amp;quot;,&amp;quot;display_name&amp;quot;:&amp;quot;Nyzhoyp&amp;quot;,&amp;quot;email_address&amp;quot;:&amp;quot;gEyRQXRPrlzL@CvuRitFtArXv.com&amp;quot;,&amp;quot;full_name&amp;quot;:&amp;quot;Wmpgrd Bnaazxguekqtuezlu&amp;quot;,&amp;quot;login&amp;quot;:&amp;quot;oAxgIvYQfbRmWHq4WifclhQxAI&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;99wciSr8V&amp;quot;,&amp;quot;roles&amp;quot;:[&amp;quot;member&amp;quot;,&amp;quot;trainer&amp;quot;,&amp;quot;manager&amp;quot;]}

$ hypnotoad -s user-app.pl
Stopping Hypnotoad server 2177 gracefully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I launch the app into the background with &lt;code&gt;hypnotoad&lt;/code&gt;. Next I use &lt;code&gt;curl&lt;/code&gt; to test the endpoint, and it correctly returns the user JSON. Finally I stop the app via &lt;code&gt;hypnotoad&lt;/code&gt; again. Looking good!&lt;/p&gt;

&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve run into a couple of limitations when using &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;. One I already mentioned: it generates compliant but not realistic data. This can cause an issue if you have interdependencies in your object properties, like &lt;code&gt;first_name&lt;/code&gt; should be a substring of &lt;code&gt;full_name&lt;/code&gt;. Or when generating dates, sometimes a random datetime is not precise enough: for realistic dates of birth you might want someone born between 10 and 80 years ago. This issue can be mitigated somewhat by clever use of regex definitions in the JSON schema, or by using the &lt;code&gt;example_key&lt;/code&gt; feature of &lt;code&gt;JSON::Schema::ToJSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another issue is caused by limitations in JSON schema itself: you might not be able to generate the data in the format your API returns, for example there is no date &lt;a href=&#34;http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3&#34;&gt;format&lt;/a&gt;, only datetimes.&lt;/p&gt;

&lt;p&gt;But these are minor limitations, and I remain convinced that &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::ToJSON&#34;&gt;JSON::Schema::ToJSON&lt;/a&gt; is great way to augment the value of JSON schemas, by rapidly generating test data and/or mocking APIs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2017/</link>
      <pubDate>Fri, 08 Sep 2017 01:27:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Android::ADB&#34;&gt;Android::ADB&lt;/a&gt; is a thin wrapper over the &lt;code&gt;adb&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Drip::Request&#34;&gt;API::Drip::Request&lt;/a&gt; provides a Perl interface to api.getdrip.com, the email marketer&lt;/li&gt;
&lt;li&gt;Use Google&amp;rsquo;s Safe Browsing v4 API with &lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing4&#34;&gt;Net::Google::SafeBrowsing4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::AntiCaptcha&#34;&gt;WebService::AntiCaptcha&lt;/a&gt; provides a Perl interface to the captcha-defeating service&lt;/li&gt;
&lt;li&gt;Use Threat Stack&amp;rsquo;s security and compliance API with &lt;a href=&#34;https://metacpan.org/pod/WebService::ThreatStack&#34;&gt;WebService::ThreatStack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::Tibia::Cam&#34;&gt;Game::Tibia::Cam&lt;/a&gt; can parse the MMORPG TibiCam files and convert them to pcaps&lt;/li&gt;
&lt;li&gt;Use the Gnome IO library (GIO) with Perl using &lt;a href=&#34;https://metacpan.org/pod/Glib::IO&#34;&gt;Glib::IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Subsonic&#34;&gt;WWW::Subsonic&lt;/a&gt; provides an interface to the Subsonic media server API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Parse binary netflow data with &lt;a href=&#34;https://metacpan.org/pod/Data::Netflow&#34;&gt;Data::Netflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tired of object dumps polluting the terminal? &lt;a href=&#34;https://metacpan.org/pod/Data::Tersify&#34;&gt;Data::Tersify&lt;/a&gt; reduces the output to something useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FormValidator::Tiny&#34;&gt;FormValidator::Tiny&lt;/a&gt; is a teeny but useful data validator&lt;/li&gt;
&lt;li&gt;Parse JSON containing JavaScript-style comments using &lt;a href=&#34;https://metacpan.org/pod/JSON::WithComments&#34;&gt;JSON::WithComments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Tarantool&amp;rsquo;s RTREE data indexing functions in Perl with &lt;a href=&#34;https://metacpan.org/pod/DR::R&#34;&gt;DR::R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Railway Oriented Programming for error handling, and simplify your code with &lt;a href=&#34;https://metacpan.org/pod/Error::ROP&#34;&gt;Error::ROP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::EX&#34;&gt;Getopt::EX&lt;/a&gt; supports user defined options and additional parameter processing logic&lt;/li&gt;
&lt;li&gt;Simplify attribute declarations with &lt;a href=&#34;https://metacpan.org/pod/MooX::ShortHas&#34;&gt;MooX::ShortHas&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Mu&#34;&gt;Mu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Share objects between processes using &lt;a href=&#34;https://metacpan.org/pod/Patro&#34;&gt;Patro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PerlX::AsyncAwait&#34;&gt;PerlX::AsyncAwait&lt;/a&gt; async/await keywords in pure Perl, comes with author safety warning ☢&lt;/li&gt;
&lt;li&gt;Include Pod from other files with nice syntax using &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Include&#34;&gt;Pod::Weaver::Plugin::Include&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Alien::CPP&#34;&gt;Test::Alien::CPP&lt;/a&gt; provides testing tools for C++ Alien modules&lt;/li&gt;
&lt;li&gt;Render a table like &amp;ldquo;docker ps&amp;rdquo; does with &lt;a href=&#34;https://metacpan.org/pod/Text::Yeti::Table&#34;&gt;Text::Yeti::Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Check&#34;&gt;XS::Check&lt;/a&gt; can detect common errors in XS files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::AnalogConverters&#34;&gt;Device::Chip::AnalogConverters&lt;/a&gt; is a collection of chip drivers&lt;/li&gt;
&lt;li&gt;Get a Perl interface to libusb with &lt;a href=&#34;https://metacpan.org/pod/USB::LibUSB&#34;&gt;USB::LibUSB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Loan::Repayment&#34;&gt;Finance::Loan::Repayment&lt;/a&gt; is a simple loan calculator&lt;/li&gt;
&lt;li&gt;Use polyline algorithms with &lt;a href=&#34;https://metacpan.org/pod/Math::Vector::Real::Polyline&#34;&gt;Math::Vector::Real::Polyline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calculate the Shannon entropy H of a given input string using &lt;a href=&#34;https://metacpan.org/pod/Shannon::Entropy&#34;&gt;Shannon::Entropy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::DOM::Role::PrettyPrinter&#34;&gt;Mojo::DOM::Role::PrettyPrinter&lt;/a&gt; can pretty print DOMs&lt;/li&gt;
&lt;li&gt;Parse and encode XMLRPC messages using the Mojo stack via &lt;a href=&#34;https://metacpan.org/pod/Mojo::XMLRPC&#34;&gt;Mojo::XMLRPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::Validate::Util&#34;&gt;MojoX::Validate::Util&lt;/a&gt; provides a collection of data validation routines&lt;/li&gt;
&lt;li&gt;Use Futures in Mojo applications with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Future&#34;&gt;Mojolicious::Plugin::Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenAPI::Client&#34;&gt;OpenAPI::Client&lt;/a&gt; is a client for talking to an Open API server&lt;/li&gt;
&lt;li&gt;Check HTTP response bodies are zipped with &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckGzip&#34;&gt;WWW::CheckGzip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2017/</link>
      <pubDate>Fri, 08 Sep 2017 01:27:15 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Android::ADB&#34;&gt;Android::ADB&lt;/a&gt; is a thin wrapper over the &lt;code&gt;adb&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Drip::Request&#34;&gt;API::Drip::Request&lt;/a&gt; provides a Perl interface to api.getdrip.com, the email marketer&lt;/li&gt;
&lt;li&gt;Use Google&amp;rsquo;s Safe Browsing v4 API with &lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing4&#34;&gt;Net::Google::SafeBrowsing4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::AntiCaptcha&#34;&gt;WebService::AntiCaptcha&lt;/a&gt; provides a Perl interface to the captcha-defeating service&lt;/li&gt;
&lt;li&gt;Use Threat Stack&amp;rsquo;s security and compliance API with &lt;a href=&#34;https://metacpan.org/pod/WebService::ThreatStack&#34;&gt;WebService::ThreatStack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::Tibia::Cam&#34;&gt;Game::Tibia::Cam&lt;/a&gt; can parse the MMORPG TibiCam files and convert them to pcaps&lt;/li&gt;
&lt;li&gt;Use the Gnome IO library (GIO) with Perl using &lt;a href=&#34;https://metacpan.org/pod/Glib::IO&#34;&gt;Glib::IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Subsonic&#34;&gt;WWW::Subsonic&lt;/a&gt; provides an interface to the Subsonic media server API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Parse binary netflow data with &lt;a href=&#34;https://metacpan.org/pod/Data::Netflow&#34;&gt;Data::Netflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tired of object dumps polluting the terminal? &lt;a href=&#34;https://metacpan.org/pod/Data::Tersify&#34;&gt;Data::Tersify&lt;/a&gt; reduces the output to something useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FormValidator::Tiny&#34;&gt;FormValidator::Tiny&lt;/a&gt; is a teeny but useful data validator&lt;/li&gt;
&lt;li&gt;Parse JSON containing JavaScript-style comments using &lt;a href=&#34;https://metacpan.org/pod/JSON::WithComments&#34;&gt;JSON::WithComments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Tarantool&amp;rsquo;s RTREE data indexing functions in Perl with &lt;a href=&#34;https://metacpan.org/pod/DR::R&#34;&gt;DR::R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Railway Oriented Programming for error handling, and simplify your code with &lt;a href=&#34;https://metacpan.org/pod/Error::ROP&#34;&gt;Error::ROP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::EX&#34;&gt;Getopt::EX&lt;/a&gt; supports user defined options and additional parameter processing logic&lt;/li&gt;
&lt;li&gt;Simplify attribute declarations with &lt;a href=&#34;https://metacpan.org/pod/MooX::ShortHas&#34;&gt;MooX::ShortHas&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Mu&#34;&gt;Mu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Share objects between processes using &lt;a href=&#34;https://metacpan.org/pod/Patro&#34;&gt;Patro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PerlX::AsyncAwait&#34;&gt;PerlX::AsyncAwait&lt;/a&gt; async/await keywords in pure Perl, comes with author safety warning ☢&lt;/li&gt;
&lt;li&gt;Include Pod from other files with nice syntax using &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Include&#34;&gt;Pod::Weaver::Plugin::Include&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Alien::CPP&#34;&gt;Test::Alien::CPP&lt;/a&gt; provides testing tools for C++ Alien modules&lt;/li&gt;
&lt;li&gt;Render a table like &amp;ldquo;docker ps&amp;rdquo; does with &lt;a href=&#34;https://metacpan.org/pod/Text::Yeti::Table&#34;&gt;Text::Yeti::Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Check&#34;&gt;XS::Check&lt;/a&gt; can detect common errors in XS files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::AnalogConverters&#34;&gt;Device::Chip::AnalogConverters&lt;/a&gt; is a collection of chip drivers&lt;/li&gt;
&lt;li&gt;Get a Perl interface to libusb with &lt;a href=&#34;https://metacpan.org/pod/USB::LibUSB&#34;&gt;USB::LibUSB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Loan::Repayment&#34;&gt;Finance::Loan::Repayment&lt;/a&gt; is a simple loan calculator&lt;/li&gt;
&lt;li&gt;Use polyline algorithms with &lt;a href=&#34;https://metacpan.org/pod/Math::Vector::Real::Polyline&#34;&gt;Math::Vector::Real::Polyline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calculate the Shannon entropy H of a given input string using &lt;a href=&#34;https://metacpan.org/pod/Shannon::Entropy&#34;&gt;Shannon::Entropy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::DOM::Role::PrettyPrinter&#34;&gt;Mojo::DOM::Role::PrettyPrinter&lt;/a&gt; can pretty print DOMs&lt;/li&gt;
&lt;li&gt;Parse and encode XMLRPC messages using the Mojo stack via &lt;a href=&#34;https://metacpan.org/pod/Mojo::XMLRPC&#34;&gt;Mojo::XMLRPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MojoX::Validate::Util&#34;&gt;MojoX::Validate::Util&lt;/a&gt; provides a collection of data validation routines&lt;/li&gt;
&lt;li&gt;Use Futures in Mojo applications with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Future&#34;&gt;Mojolicious::Plugin::Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenAPI::Client&#34;&gt;OpenAPI::Client&lt;/a&gt; is a client for talking to an Open API server&lt;/li&gt;
&lt;li&gt;Check HTTP response bodies are zipped with &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckGzip&#34;&gt;WWW::CheckGzip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

