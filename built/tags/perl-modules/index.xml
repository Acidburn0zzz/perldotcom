<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Modules on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/perl-modules/</link>
    <description>Recent content in Perl Modules on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jul 2006 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/perl-modules/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Still More Perl Lightning Articles</title>
      <link>http://localhost:1313/pub/2006/07/13/lightning-articles.html/</link>
      <pubDate>Thu, 13 Jul 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/07/13/lightning-articles.html/</guid>
      <description>

&lt;p&gt;It has been common practice within the Perl community for ages to ship distributions with a &lt;em&gt;Makefile.PL&lt;/em&gt; so that the user will be able to install the packages when he retrieves them, either via the shell which the &lt;code&gt;CPAN/CPANPLUS&lt;/code&gt; modules offer or via manual CPAN download.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Makefile.PL&lt;/em&gt; consists of meta-information, which in the case of the distribution &lt;a href=&#34;https://metacpan.org/pod/HTML::Tagset&#34;&gt;&lt;code&gt;HTML::Tagset&lt;/code&gt;&lt;/a&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # This -*-perl-*- program writes the Makefile for installing this distribution.
 #
 # See &amp;quot;perldoc perlmodinstall&amp;quot; or &amp;quot;perldoc ExtUtils::MakeMaker&amp;quot; for
 # info on how to control how the installation goes.

 require 5.004;
 use strict;
 use ExtUtils::MakeMaker;

 WriteMakefile(
     NAME            =&amp;gt; &#39;HTML::Tagset&#39;,
     AUTHOR          =&amp;gt; &#39;Andy Lester &amp;lt;andy@petdance.com&amp;gt;&#39;,
     VERSION_FROM    =&amp;gt; &#39;Tagset.pm&#39;, # finds $VERSION
     ABSTRACT_FROM   =&amp;gt; &#39;Tagset.pm&#39;, # retrieve abstract from module
     PMLIBDIRS       =&amp;gt; [qw(lib/)],
     dist            =&amp;gt; { COMPRESS =&amp;gt; &#39;gzip -9f&#39;, SUFFIX =&amp;gt; &#39;gz&#39;, },
     clean           =&amp;gt; { FILES =&amp;gt; &#39;HTML-Tagset-*&#39; },
 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of interest are the arguments to &lt;code&gt;WriteMakefile()&lt;/code&gt;, because they influence the &lt;em&gt;Makefile&lt;/em&gt; written by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; after the user has invoked the usual build and install procedure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % perl Makefile.PL
 % make
 % make test
 # make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;module-build-successor-of-extutils-makemaker&#34;&gt;&lt;code&gt;Module::Build&lt;/code&gt;, Successor of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;As Ken Williams grew tired of &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;&lt;/a&gt; and its portability issues, he invented &lt;a href=&#34;https://metacpan.org/pod/Module::Build&#34;&gt;&lt;code&gt;Module::Build&lt;/code&gt;&lt;/a&gt;, a successor of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;. One goal of &lt;code&gt;Module::Build&lt;/code&gt; is to run smoothly on most operating systems, because it takes advantage of creating Perl-valid syntax files only and does not rely upon crufty &lt;em&gt;Makefiles&lt;/em&gt;, which are often subject to misinterpretation, because so many incompatible flavors of &lt;code&gt;make&lt;/code&gt; exist in the wild.&lt;/p&gt;

&lt;p&gt;The current maintainer of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, Michael G. Schwern, elaborated about this problem in his talk reachable via &amp;ldquo;&lt;a href=&#34;http://mungus.schwern.org/~schwern/talks/MakeMaker_Is_DOOMED/slides/&#34;&gt;MakeMaker is DOOMED&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;module-build-distribution-skeleton&#34;&gt;&lt;code&gt;Module::Build&lt;/code&gt; Distribution &amp;ldquo;Skeleton&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;If you take in consideration the distribution &lt;code&gt;HTML::Tagset&lt;/code&gt; again, the rough skeleton suitable for &lt;code&gt;Module::Build&lt;/code&gt; having converted the &lt;em&gt;Makefile.PL&lt;/em&gt; by &lt;a href=&#34;https://metacpan.org/pod/Module::Build::Convert&#34;&gt;&lt;code&gt;Module::Build::Convert&lt;/code&gt;&lt;/a&gt; into a &lt;em&gt;Build.PL&lt;/em&gt;, the output would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # This -*-perl-*- program writes the Makefile for installing this distribution.
 #
 # See &amp;quot;perldoc perlmodinstall&amp;quot; or &amp;quot;perldoc ExtUtils::MakeMaker&amp;quot; for
 # info on how to control how the installation goes.
 # Note: this file has been initially generated by Module::Build::Convert 0.24_01

 require 5.004;
 use strict;
 use warnings;

 use Module::Build;

 my $build = Module::Build-&amp;gt;new
   (
    module_name =&amp;gt; &#39;HTML::Tagset&#39;,
    dist_author =&amp;gt; &#39;Andy Lester &amp;lt;andy@petdance.com&amp;gt;&#39;,
    dist_version_from =&amp;gt; &#39;Tagset.pm&#39;,
    add_to_cleanup =&amp;gt; [
                        &#39;HTML-Tagset-*&#39;
                      ],
    license =&amp;gt; &#39;unknown&#39;,
    create_readme =&amp;gt; 1,
    create_makefile_pl =&amp;gt; &#39;traditional&#39;,
   );

 $build-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, while &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; prefers uppercased arguments, &lt;code&gt;Module::Build&lt;/code&gt; goes by entirely lowercased arguments, which obey the rule of least surprise by being as intuitive as a description can be.&lt;/p&gt;

&lt;p&gt;The build and installation procedure for a &lt;code&gt;Module::Build&lt;/code&gt; distribution is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % perl Build.PL
 % perl Build
 % perl Build test
 # perl Build install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;module-build-convert-s-state-of-operation&#34;&gt;&lt;code&gt;Module::Build::Convert&lt;/code&gt;&amp;rsquo;s State of Operation&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Module::Build::Convert&lt;/code&gt; actually does all of the background work and can be safely considered the back end, whereas &lt;code&gt;make2build&lt;/code&gt; is the practical front-end utility. &lt;code&gt;Module::Build::Convert&lt;/code&gt; currently exposes two kinds of operation: static approach and dynamic execution. The static approach parses the arguments contained within the &lt;em&gt;Makefile.PL&amp;rsquo;s&lt;/em&gt; &lt;code&gt;WriteMakefile()&lt;/code&gt; call, whereas dynamic execution runs the &lt;em&gt;Makefile.PL&lt;/em&gt; and captures the arguments provided to &lt;code&gt;WriteMakefile()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build::Convert&lt;/code&gt; parses statically by default, because the dynamic execution has the downside that code will be interpreted and the interpreted output will be written to the &lt;em&gt;Build.PL&lt;/em&gt;, so you have to conclude that the user of the distribution will end up with predefined values computed on the author&amp;rsquo;s system. This is something to avoid, whenever possible! If the parsing approach fails, perhaps looping endlessly on input, &lt;code&gt;Module::Build::Convert&lt;/code&gt; will reinitialize to perform dynamic execution of the &lt;em&gt;Makefile.PL&lt;/em&gt; instead.&lt;/p&gt;

&lt;h3 id=&#34;span-id-data-section-data-section-span&#34;&gt;&lt;span id=&#34;data_section&#34;&gt;Data Section&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Module::Build::Convert&lt;/code&gt; comes with a rather huge data section containing the argument conversion table, default arguments, sorting order, and begin and end code. If you wish to change this data, consider making a &lt;em&gt;~/.make2buildrc&lt;/em&gt; file by launching &lt;code&gt;make2build&lt;/code&gt; with the &lt;code&gt;-rc&lt;/code&gt; switch. &lt;em&gt;Do not&lt;/em&gt; edit the &lt;code&gt;Data&lt;/code&gt; section within &lt;code&gt;Module::Build::Convert&lt;/code&gt; directly, unless you are sure you want to submit a patch.&lt;/p&gt;

&lt;h4 id=&#34;argument-conversion&#34;&gt;Argument Conversion&lt;/h4&gt;

&lt;p&gt;On the left-hand side is the &lt;code&gt;MakeMaker&lt;/code&gt;&amp;rsquo;s argument name, and on the right-hand side the &lt;code&gt;Module::Build&lt;/code&gt;&amp;rsquo;s equivalent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NAME                  module_name
 DISTNAME              dist_name
 ABSTRACT              dist_abstract
 AUTHOR                dist_author
 VERSION               dist_version
 VERSION_FROM          dist_version_from
 PREREQ_PM             requires
 PL_FILES              PL_files
 PM                    pm_files
 MAN1PODS              pod_files
 XS                    xs_files
 INC                   include_dirs
 INSTALLDIRS           installdirs
 DESTDIR               destdir
 CCFLAGS               extra_compiler_flags
 EXTRA_META            meta_add
 SIGN                  sign
 LICENSE               license
 clean.FILES           @add_to_cleanup
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;default-arguments&#34;&gt;Default Arguments&lt;/h4&gt;

&lt;p&gt;These are default &lt;code&gt;Module::Build&lt;/code&gt; arguments to added. Arguments with a leading &lt;code&gt;#&lt;/code&gt; are ignored.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; #build_requires       HASH
 #recommends           HASH
 #conflicts            HASH
 license               unknown
 create_readme         1
 create_makefile_pl    traditional
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sorting-order&#34;&gt;Sorting Order&lt;/h4&gt;

&lt;p&gt;This is the sorting order for &lt;code&gt;Module::Build&lt;/code&gt; arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; module_name
 dist_name
 dist_abstract
 dist_author
 dist_version
 dist_version_from
 requires
 build_requires
 recommends
 conflicts
 PL_files
 pm_files
 pod_files
 xs_files
 include_dirs
 installdirs
 destdir
 add_to_cleanup
 extra_compiler_flags
 meta_add
 sign
 license
 create_readme
 create_makefile_pl
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;begin-code&#34;&gt;Begin Code&lt;/h4&gt;

&lt;p&gt;Code that precedes converted &lt;code&gt;Module::Build&lt;/code&gt; arguments. &lt;code&gt;$(UPPERCASE)&lt;/code&gt; are stubs being substituted by &lt;code&gt;Module::Build&lt;/code&gt; code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use strict;
 use warnings;

 use Module::Build;

 $MAKECODE

 my $b = Module::Build-&amp;gt;new
 $INDENT(
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;end-code&#34;&gt;End Code&lt;/h4&gt;

&lt;p&gt;Code that follows converted &lt;code&gt;Module::Build&lt;/code&gt; arguments. &lt;code&gt;$(UPPERCASE)&lt;/code&gt; are stubs being substituted by &lt;code&gt;Module::Build&lt;/code&gt; code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $INDENT);

 $b-&amp;gt;create_build_script;

 $MAKECODE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;make2build-basic-usage&#34;&gt;&lt;code&gt;make2build&lt;/code&gt; Basic Usage&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;make2build&lt;/code&gt; is as easy as launching it in the directory of the distribution of which &lt;em&gt;Makefile.PL&lt;/em&gt; you wish to convert.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% make2build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also provide the full path to the distribution, assuming, for example, you didn&amp;rsquo;t &lt;code&gt;cd&lt;/code&gt; directly into the distribution directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% make2build /path/to/HTML-Tagset*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In both cases, the command will convert any found &lt;em&gt;Makefile.PL&lt;/em&gt; files and will generate no output because &lt;code&gt;make2build&lt;/code&gt; acts quiet by default.&lt;/p&gt;

&lt;h3 id=&#34;make2build-switches&#34;&gt;&lt;code&gt;make2build&lt;/code&gt; Switches&lt;/h3&gt;

&lt;p&gt;As &lt;code&gt;make2build&lt;/code&gt; aims to be a proper script, it of course, provides both the &lt;code&gt;-h&lt;/code&gt; (help screen) and &lt;code&gt;-V&lt;/code&gt; (version) switches.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -h
 % make2build -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you end up with a mangled &lt;em&gt;Build.PL&lt;/em&gt; written, you can examine the parsing process by launching &lt;code&gt;make2build&lt;/code&gt; with the &lt;code&gt;-d&lt;/code&gt; switch, enabling the pseudo-interactive debugging mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should you not like the indentation length or judge it to be too small, increase it via the &lt;code&gt;-l&lt;/code&gt; switch followed by an integer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -l length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t agree with the sorting order predefined in &lt;code&gt;Module::Build::Convert&lt;/code&gt;, you may enforce the native sorting order, which strives to arrange standard arguments with those seen available in the &lt;code&gt;Makefile.PL&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The argument conversion table, default arguments to add, the sorting order of the arguments, and the begin and end code aren&amp;rsquo;t absolute, either. Change them by invoking &lt;code&gt;make2build&lt;/code&gt; with the &lt;code&gt;-rc&lt;/code&gt; switch to create a resource configuration file in the home directory of the current user; that is likely &lt;em&gt;~/.make2build.rc&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -rc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While &lt;code&gt;make2build&lt;/code&gt; is quiet by default, there are two verbosity levels. To enforce verbosity level 1, launch &lt;code&gt;make2build&lt;/code&gt; with &lt;code&gt;-v&lt;/code&gt;. To enforce verbosity level 2, use &lt;code&gt;-vv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;-v&lt;/code&gt;, the code will warn about &lt;em&gt;Makefile.PL&lt;/em&gt; options it does not understand or skips. With &lt;code&gt;-vv&lt;/code&gt;, it will accumulate &lt;code&gt;-v&lt;/code&gt; output and the entire generated &lt;em&gt;Build.PL&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -v
 % make2build -vv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may execute the &lt;em&gt;Makefile.PL&lt;/em&gt; in first place, but such usage is deprecated because &lt;code&gt;Module::Build::Convert&lt;/code&gt; downgrades automatically when needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % make2build -x (deprecated)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swinging-with-perl&#34;&gt;Swinging with Perl&lt;/h3&gt;

&lt;p&gt;Phil Crow&lt;/p&gt;

&lt;p&gt;Perl does not have a native graphical user interface (GUI) toolkit. So we use all manner of existing GUI tools in front of our Perl applications. Often we use a web browser. We have long had Perl/Tk and other libraries based on C/C++. Now we can also use Java&amp;rsquo;s Swing toolkit with similar ease.&lt;/p&gt;

&lt;p&gt;In my sample application, when the user presses a button, Perl evaluates an arithmetic expression from the input text box. The result appears in another text box. I&amp;rsquo;ll show the code for this application a piece at a time with a discussion after each piece. To see the whole thing, look in the examples directory of the &lt;a href=&#34;https://metacpan.org/pod/Java::Swing&#34;&gt;&lt;code&gt;Java::Swing&lt;/code&gt;&lt;/a&gt; distribution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/perl
    use strict; use warnings;

    BEGIN {
        $ENV{CLASSPATH} .= &#39;:/path/to/Java/Swing/java&#39;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Java::Swing&lt;/code&gt; needs certain Java classes to be in the class path before it loads, so I&amp;rsquo;ve appended a path to those classes in a &lt;code&gt;BEGIN&lt;/code&gt; block (this block must come before using &lt;code&gt;Java::Swing&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Java::Swing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This innocuous statement magically sets up namespaces for each Java Swing component, among other things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $expression  = JTextField-&amp;gt;new();
    my $answer      = JTextField-&amp;gt;new( { columns =&amp;gt; 10 } );
    my $submit      = JButton   -&amp;gt;new(&amp;quot;Evaluate&amp;quot;);
    my $frame       = JFrame    -&amp;gt;new();
    my $root_pane   = $frame-&amp;gt;getContentPane();
    my $south_panel = JPanel-&amp;gt;new();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After using &lt;code&gt;Java::Swing&lt;/code&gt;, you can refer to Swing components as Perl classes. You can even pass named parameters to their constructors, as shown for the second &lt;code&gt;JTextField&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $south_panel-&amp;gt;add(JLabel-&amp;gt;new(&amp;quot;Answer:&amp;quot;), &amp;quot;West&amp;quot;);
    $south_panel-&amp;gt;add($answer,                &amp;quot;Center&amp;quot;);
    $south_panel-&amp;gt;add($submit,                &amp;quot;East&amp;quot;);

    $root_pane-&amp;gt;add($expression,  &amp;quot;North&amp;quot;);
    $root_pane-&amp;gt;add($south_panel, &amp;quot;South&amp;quot;);

    $frame-&amp;gt;setSize(300, 100);
    $frame-&amp;gt;show();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most work with the components is the same as in any Java program. If you don&amp;rsquo;t understand the above code, consult a good book on Swing (like the one from O&amp;rsquo;Reilly).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $swinger = Java::Swing-&amp;gt;new();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a &lt;code&gt;Java::Swing&lt;/code&gt; instance to connect event listeners and to control the event loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $swinger-&amp;gt;connect(
        &amp;quot;ActionListener&amp;quot;, $submit, { actionPerformed =&amp;gt; \&amp;amp;evaluate }
    );

    $swinger-&amp;gt;connect(
        &amp;quot;WindowListener&amp;quot;, $frame, { windowClosing =&amp;gt; \&amp;amp;ending }
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connection is simple. Pass the listener type, the object to listen to, and a hash of code references to call back as events arrive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $swinger-&amp;gt;start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the event loop. After this, the program passively waits for event callbacks. It stops when one of the callbacks stops the event loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub evaluate {
        my $sender_name = shift;
        my $event       = shift;

        $answer-&amp;gt;setText(eval $expression-&amp;gt;getText());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My evaluation is simple. I retrieve the text from the expression &lt;code&gt;JTextField&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt; it, and pass the result to &lt;code&gt;setText&lt;/code&gt; on the answer &lt;code&gt;JTextField&lt;/code&gt;. Using &lt;code&gt;eval&lt;/code&gt; raises possible security concerns, so use it wisely.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub ending {
        $swinger-&amp;gt;stop();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the user closes the window, I stop the event loop by calling &lt;code&gt;stop&lt;/code&gt; on the &lt;code&gt;Java::Swing&lt;/code&gt; instance gained earlier. This kills the program.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Java::Swing&lt;/code&gt;, you can build Swing apps in Perl with some important bits of syntactic sugar. First, you don&amp;rsquo;t need to have separate Java files or inline sections. Second, you can pass named arguments to constructors. Finally, you can easily connect event listeners to Perl callback code.&lt;/p&gt;

&lt;h3 id=&#34;scriptify-your-module&#34;&gt;Scriptify Your Module&lt;/h3&gt;

&lt;p&gt;Josh McAdams&lt;/p&gt;

&lt;p&gt;Recently during an MJD talk at Chicago.pm, I saw a little Perl trick that was so amazingly simple and yet so useful that it was hard to believe that more mongers in the crowd hadn&amp;rsquo;t heard of it. The trick involved taking your module and adding a driver routine to it so the module could run as a script.&lt;/p&gt;

&lt;p&gt;To illustrate, start with an example module that contains two utility subroutines that convert weights between pounds and kilograms. The subroutines accept some number and multiplies it by a conversion factor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package WeightConverter;

  use strict;
  use warnings;
  use constant LB_PER_KG =&amp;gt; 2.20462262;
  use constant KG_PER_LB =&amp;gt; 1/LB_PER_KG;

  sub kilograms_to_pounds { $_[0] * LB_PER_KG; }

  sub pounds_to_kilograms { $_[0] * KG_PER_LB; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that the real module has a little error checking and POD, this module would serve you just fine. However, what if you decided that we needed to be able to easily do weight conversions from the command line? One option would be to write a Perl script that used &lt;code&gt;WeightConverter&lt;/code&gt;. If that seems like too much effort, there is a one-liner that would do conversions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MWeightConverter -e &#39;print WeightConverter::kilograms_to_pounds(1),&amp;quot;\n&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would do the trick, but it is a lot to remember and isn&amp;rsquo;t very fun to type. There is a lot of benefit available from saving some form of script, and believe it or not, the module can hold that script. All that you have to do is write some driver subroutine and then call that subroutine if the module is not being used by another script. Here is an example driver for &lt;code&gt;WeightConverter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This example driver script just loops through the command-line arguments and tries to find instances where the argument contains either a &lt;code&gt;k&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; equal to some value. Based on whether or not you are starting with pounds or kilograms, it calls the appropriate subroutine and prints the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub run {
    for (@ARGV) {
      if(/^[-]{0,2}(k|p)\w*=(.+)$/) {
        $1 eq &#39;k&#39; ?
          print &amp;quot;$2 kilograms is &amp;quot;, kilograms_to_pounds($2), &amp;quot; pounds\n&amp;quot; :
          print &amp;quot;$2 pounds is &amp;quot;, pounds_to_kilograms($2), &amp;quot; kilograms\n&amp;quot; ;
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all that is left is to tell the module to run the &lt;code&gt;run&lt;/code&gt; subroutine if someone has run the module on its own. This is as easy as adding one line somewhere in the main body of the module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  run unless caller;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All this statement does is execute the &lt;code&gt;run&lt;/code&gt; subroutine unless the &lt;code&gt;caller&lt;/code&gt; function returns a value. &lt;code&gt;caller&lt;/code&gt; will only return true if &lt;code&gt;WeightConverter&lt;/code&gt; is being used in another script. Now, this module is usable in other scripts as well as on the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $&amp;gt; perl WeightConverter.pm -kilos=2 -pounds=145 -k=.345
  2 kilograms is 4.40924524 pounds
  145 pounds is 65.7708937051548 kilograms
  .345 kilograms is 0.7605948039 pounds
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mocks-in-your-test-fixtures&#34;&gt;Mocks in Your Test Fixtures&lt;/h3&gt;

&lt;p&gt;by chromatic&lt;/p&gt;

&lt;p&gt;Since writing &lt;code&gt;Test::MockObject&lt;/code&gt;, I&amp;rsquo;ve used it in nearly every complex test file I&amp;rsquo;ve written. It makes my life much easier to be able to control only what I need for the current group of tests.&lt;/p&gt;

&lt;p&gt;I wish I&amp;rsquo;d written &lt;code&gt;Test::MockObject::Extends&lt;/code&gt; earlier than I did; that module allows you to decorate an existing object with a mockable wrapper. It works just as the wrapped object does, but if you add any mocked methods, it will work like a regular mock object.&lt;/p&gt;

&lt;p&gt;This is very useful when you don&amp;rsquo;t want to go through all of the overhead of setting up your own mock object but do want to override one or two methods. (It&amp;rsquo;s almost always the right thing to do instead of using &lt;code&gt;Test::MockObject.&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Another very useful test module is &lt;code&gt;Test::Class&lt;/code&gt;. It takes more work to understand and to use than &lt;code&gt;Test::More&lt;/code&gt;, but it pays back that investment by allowing you to group, reuse, and organize tests in the same way you would group, reuse, and organize objects in your code. Instead of writing your tests procedurally, from the start to the end of a test file, you organize them into classes.&lt;/p&gt;

&lt;p&gt;This is most useful when you&amp;rsquo;ve organized your code along similar lines. If you have a base class with a lot of behavior and a handful of subclasses that add and override a little bit of behavior, write a &lt;code&gt;Test::Class&lt;/code&gt;-based test for the base class and smaller tests that inherit from the base test for the subclasses.&lt;/p&gt;

&lt;p&gt;Goodbye, duplicate code.&lt;/p&gt;

&lt;h4 id=&#34;fixtures&#34;&gt;Fixtures&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Test::Class&lt;/code&gt; encourages you to group related tests into test methods. This allows you to override and extend those groups of tests in test subclasses. (Good OO design principles apply here; tests are still just code, after all.) One of the benefits of grouping tests in this way is that you can use test fixtures.&lt;/p&gt;

&lt;p&gt;A test fixture is another method that runs before every test method. You can use them to set up the test environment&amp;ndash;creating a new object to test, resetting test data, and generally making sure that tests don&amp;rsquo;t interfere with each other.&lt;/p&gt;

&lt;p&gt;A standard test fixture might resemble:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub make_fixture :Test( setup )
  {
      my $self        = shift;
      $self-&amp;gt;{object} = $self-&amp;gt;test_class()-&amp;gt;new();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that there&amp;rsquo;s a &lt;code&gt;test_class()&lt;/code&gt; method that returns the name of the class being tested, this fixture creates a new instance before every test method and stores it as the &lt;code&gt;object&lt;/code&gt; attribute. The test methods can then fetch this as normal.&lt;/p&gt;

&lt;h4 id=&#34;putting-them-together&#34;&gt;Putting Them Together&lt;/h4&gt;

&lt;p&gt;I recently built some tests for a large system using &lt;code&gt;Test::Class&lt;/code&gt;. Some of the tests had mockable features&amp;ndash;they dealt with file or database errors, for example. I found myself creating a lot of little &lt;code&gt;Test::MockObject::Extends&lt;/code&gt; instances within most of the tests.&lt;/p&gt;

&lt;p&gt;Then inspiration struck. Duplication is bad. Repetition is bad. Factor it out into one place.&lt;/p&gt;

&lt;p&gt;The insight was quick and sudden. If &lt;code&gt;Test::MockObject::Extends&lt;/code&gt; is transparent (and if it isn&amp;rsquo;t, please file a bug&amp;ndash;I&amp;rsquo;ll fix it), I can use it in the test fixture all the time and then be able to mock whenever I want without doing any setup. I changed my fixture to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub make_fixture :Test( setup )
  {
      my $self        = shift;
          my $object      = $self-&amp;gt;test_class()-&amp;gt;new();
      $self-&amp;gt;{object} = Test::MockObject::Extends-&amp;gt;new( $object );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of my code remained unchanged, except that now I could delete several identical lines from several test methods.&lt;/p&gt;

&lt;p&gt;Do note that, for this to work, you must adhere to good OO design principles in the code being tested. Don&amp;rsquo;t assume that &lt;code&gt;ref&lt;/code&gt; is always what you think it should be (and use the &lt;code&gt;isa()&lt;/code&gt; method instead).&lt;/p&gt;

&lt;p&gt;Sure, this is a one-line trick, but it removed a lot of busy work from my life and it illustrates two interesting techniques for managing tests. If you need simpler, more precise mocks, use &lt;code&gt;Test::MockObject::Extends&lt;/code&gt;. If you need better organization and less duplication in your test files, use &lt;code&gt;Test::Class&lt;/code&gt;. Like all good test modules, they work together almost flawlessly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More Advancements in Perl Programming</title>
      <link>http://localhost:1313/pub/2006/01/26/more_advanced_perl.html/</link>
      <pubDate>Thu, 26 Jan 2006 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2006/01/26/more_advanced_perl.html/</guid>
      <description>

&lt;p&gt;Around Easter last year, I finished writing the second edition of &lt;a href=&#34;http://www.oreilly.com/catalog/advperl2/&#34;&gt;Advanced Perl Programming&lt;/a&gt;, a task that had been four years in the making. The aim of this new edition was to reflect the way that Perl programming had changed since the first edition. Much of what Sriram wrote in the original edition was still true, but to be honest, not too much of it was useful anymore&amp;ndash;the Perl world has changed dramatically since the original publication.&lt;/p&gt;

&lt;p&gt;The first edition was very much about how to do things yourself; it operated at a very low level by current Perl standards. With the explosion of CPAN modules in the interim, &amp;ldquo;advanced Perl programming&amp;rdquo; now consists of plugging all of the existing components together in the right order, rather than necessarily writing the components from scratch. So the nature of the book had to change a lot.&lt;/p&gt;

&lt;p&gt;However, CPAN is still expanding, and the Perl world continues to change; &lt;em&gt;Advanced Perl Programming&lt;/em&gt; can never be a finished book, but only a snapshot in time. On top of all that, I&amp;rsquo;ve been learning more, too, and discovering more tricks to get work done smarter and faster. Even during the writing of the book, some of the best practices changed and new modules were developed.&lt;/p&gt;

&lt;p&gt;The book is still, I believe, an excellent resource for learning how to master Perl programming, but here, if you like, I want to add to that resource. I&amp;rsquo;ll try to say something about the developments that have happened in each chapter of the book.&lt;/p&gt;

&lt;h3 id=&#34;advanced-perl&#34;&gt;Advanced Perl&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m actually very happy with this chapter. The only thing I left out of the first chapter which may have been useful there is a section on &lt;code&gt;tie&lt;/code&gt;; but this is covered strongly in &lt;em&gt;Programming Perl&lt;/em&gt; anyway.&lt;/p&gt;

&lt;p&gt;On the other hand, although it&amp;rsquo;s not particularly advanced, one of the things I wish I&amp;rsquo;d written about in the book was best practices for creating object-oriented modules. My fellow O&amp;rsquo;Reilly author Damian Conway has already written two books about these topics, so, again, I didn&amp;rsquo;t get too stressed out about having to leave those sections out. That said, the two modules I would recommend for building OO classes don&amp;rsquo;t appear to get a mention in &lt;em&gt;Perl Best Practices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, we all know it&amp;rsquo;s a brilliant idea to create accessors for our data members in a class; however, it&amp;rsquo;s also a pain in the neck to create them yourself. There seem to be hundreds of CPAN modules that automate the process for you, but the easiest is the &lt;a href=&#34;https://metacpan.org/pod/Class::Accessor&#34;&gt;&lt;code&gt;Class::Accessor&lt;/code&gt;&lt;/a&gt; module. With this module, you declare which accessors you want, and it will automatically create them. As a useful bonus, it creates a default &lt;code&gt;new()&lt;/code&gt; method for you if you don&amp;rsquo;t want to write one of those, either.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package MyClass;

sub new { bless { %{@_} }, shift; }

sub name {
    my $self = shift;
    if (@_) { $self-&amp;gt;{name} = shift; }
    $self-&amp;gt;{name}
}

sub address {
    my $self = shift;
    if (@_) { $self-&amp;gt;{address} = shift; }
    $self-&amp;gt;{address}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can now say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package MyClass;
use base qw(Class::Accessor);

MyClass-&amp;gt;mk_accessors(qw( name address ));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Class::Accessor&lt;/code&gt; also contains methods for making read-only accessors and for creating separate read and write accessors, and everything is nicely overrideable. Additionally, there are subclasses that extend &lt;code&gt;Class::Accessor&lt;/code&gt; in various ways: &lt;a href=&#34;https://metacpan.org/pod/Class::Accessor::Fast&#34;&gt;&lt;code&gt;Class::Accessor::Fast&lt;/code&gt;&lt;/a&gt; trades off a bit of the extensibility for an extra speed boost, &lt;a href=&#34;https://metacpan.org/pod/Class::Accessor::Chained&#34;&gt;&lt;code&gt;Class::Accessor::Chained&lt;/code&gt;&lt;/a&gt; returns the object when called with parameters, and &lt;a href=&#34;https://metacpan.org/pod/Class::Accessor::Assert&#34;&gt;&lt;code&gt;Class::Accessor::Assert&lt;/code&gt;&lt;/a&gt; does rudimentary type checking on the parameter values. There are many, many modules on the CPAN that do this sort of thing, but this one is, in my opinion, the most flexible and simple.&lt;/p&gt;

&lt;p&gt;Speaking of flexibility, one way to encourage flexibility in your modules and applications is to make them pluggable&amp;ndash;that is, to allow other pieces of code to respond to actions that you define. &lt;a href=&#34;https://metacpan.org/pod/Module::Pluggable&#34;&gt;&lt;code&gt;Module::Pluggable&lt;/code&gt;&lt;/a&gt; is a simple but powerful little module that searches for installed modules in a given namespace. Here&amp;rsquo;s an example of its use in &lt;a href=&#34;https://metacpan.org/pod/Email::FolderType&#34;&gt;&lt;code&gt;Email::FolderType&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Module::Pluggable 
    search_path =&amp;gt; &amp;quot;Email::FolderType&amp;quot;, 
    require     =&amp;gt; 1, 
    sub_name    =&amp;gt; &#39;matchers&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks for all modules underneath the &lt;code&gt;Email::FolderType::&lt;/code&gt; namespace, &lt;code&gt;require&lt;/code&gt;s them, and assembles a list of their classes into the &lt;code&gt;matchers&lt;/code&gt; method. The module later determines the type of an email folder by passing it to each of the recognizers and seeing which of them handles it, with the moral equivalent of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub folder_type {
    my ($self, $folder) = @_;
    for my $class ($self-&amp;gt;matchers) {
        return $class if $class-&amp;gt;match($folder);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means you don&amp;rsquo;t need to know, when you&amp;rsquo;re writing the code, what folder types you support; you can start off with no recognizers and add them later. If a new type of email folder comes along, the user can install a third-party module from CPAN that deals with it, and &lt;code&gt;Email::FolderType&lt;/code&gt; requires no additional coding to add support for it.&lt;/p&gt;

&lt;h3 id=&#34;parsing&#34;&gt;Parsing&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest change of heart I had between writing a chapter and its publication was in the parsing chapter. That chapter had very little about parsing HTML, and what it did have was not very friendly. Since then, Gisle Aas and Sean Burke&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/HTML::TreeBuilder&#34;&gt;&lt;code&gt;HTML::TreeBuilder&lt;/code&gt;&lt;/a&gt; and the corresponding &lt;a href=&#34;https://metacpan.org/pod/XML::TreeBuilder&#34;&gt;&lt;code&gt;XML::TreeBuilder&lt;/code&gt;&lt;/a&gt; have established themselves as much simpler and more flexible ways to navigate HTML and XML documents.&lt;/p&gt;

&lt;p&gt;The basic concept in &lt;code&gt;HTML::TreeBuilder&lt;/code&gt; is the HTML element, represented as an object of the &lt;code&gt;HTML::Element&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$a = HTML::Element-&amp;gt;new(&#39;a&#39;, href =&amp;gt; &#39;http://www.perl.com/&#39;);
$html = $a-&amp;gt;as_HTML;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new element that is an anchor tag, with an &lt;code&gt;href&lt;/code&gt; attribute. The HTML equivalent in &lt;code&gt;$html&lt;/code&gt; would be &lt;code&gt;&amp;lt;a href=&amp;quot;http://www.perl.com&amp;quot;/&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can add some content to that tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$a-&amp;gt;push_content(&amp;quot;The Perl Homepage&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, the object represents &lt;code&gt;&amp;lt;a href=&amp;quot;http://www.perl.com&amp;quot;&amp;gt; The Perl Homepage &amp;lt;/a&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can ask this element for its tag, its attributes, its content, and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$tag = $a-&amp;gt;tag;
$link = $a-&amp;gt;attr(&amp;quot;href&amp;quot;);
@content = $a-&amp;gt;content_list; # More HTML::Element nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, when you are parsing HTML, you won&amp;rsquo;t be creating those elements manually. Instead, you&amp;rsquo;ll be navigating a tree of them, built out of your HTML document. The top-level module &lt;code&gt;HTML::TreeBuilder&lt;/code&gt; does this for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use HTML::TreeBuilder;
my $tree = HTML::TreeBuilder-&amp;gt;new();
$tree-&amp;gt;parse_file(&amp;quot;index.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;$tree&lt;/code&gt; is a &lt;code&gt;HTML::Element&lt;/code&gt; object representing the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag and all its contents. You can extract all of the links with the &lt;code&gt;extract_links()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (@{ $tree-&amp;gt;extract_links() || [] }) {
     my($link, $element, $attr, $tag) = @$_;
     print &amp;quot;Found link to $link in $tag\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the real workhorse of this module is the &lt;code&gt;look_down()&lt;/code&gt; method, which helps you pull elements out of the tree by their tags or attributes. For instance, in a search engine indexer, indexing HTML files, I have the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $tag ($tree-&amp;gt;look_down(&amp;quot;_tag&amp;quot;,&amp;quot;meta&amp;quot;)) {
    next unless $tag-&amp;gt;attr(&amp;quot;name&amp;quot;);
    $hash{$tag-&amp;gt;attr(&amp;quot;name&amp;quot;)} .= $tag-&amp;gt;attr(&amp;quot;content&amp;quot;). &amp;quot; &amp;quot;;
}

$hash{title} .= $_-&amp;gt;as_text.&amp;quot; &amp;quot; for $tree-&amp;gt;look_down(&amp;quot;_tag&amp;quot;,&amp;quot;title&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This finds all &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags and puts their attributes as name-value pairs in a hash; then it puts all the text inside of &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tags together into another hash element. Similarly, you can look for tags by attribute value, spit out sub-trees as HTML or as text, and much more, besides. For reaching into HTML text and pulling out just the bits you need, I haven&amp;rsquo;t found anything better.&lt;/p&gt;

&lt;p&gt;On the XML side of things, &lt;a href=&#34;https://metacpan.org/pod/XML::Twig&#34;&gt;&lt;code&gt;XML::Twig&lt;/code&gt;&lt;/a&gt; has emerged as the usual &amp;ldquo;middle layer,&amp;rdquo; when &lt;a href=&#34;https://metacpan.org/pod/XML::Simple&#34;&gt;&lt;code&gt;XML::Simple&lt;/code&gt;&lt;/a&gt; is too simple and &lt;a href=&#34;https://metacpan.org/pod/XML::Parser&#34;&gt;&lt;code&gt;XML::Parser&lt;/code&gt;&lt;/a&gt; is, well, too much like hard work.&lt;/p&gt;

&lt;h3 id=&#34;templating&#34;&gt;Templating&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s not much to say about templating, although in retrospect, I would have spent more of the paper expended on &lt;a href=&#34;https://metacpan.org/pod/HTML::Mason&#34;&gt;&lt;code&gt;HTML::Mason&lt;/code&gt;&lt;/a&gt; talking about the &lt;a href=&#34;http://www.template-toolkit.org/&#34;&gt;Template Toolkit&lt;/a&gt; instead. Not that there&amp;rsquo;s anything wrong with &lt;code&gt;HTML::Mason&lt;/code&gt;, but the world seems to be moving away from templates that include code in a specific language (say, Perl&amp;rsquo;s) towards separate templating little languages, like &lt;a href=&#34;https://metacpan.org/pod/Template::TAL&#34;&gt;TAL&lt;/a&gt; and Template Toolkit.&lt;/p&gt;

&lt;p&gt;The only thing to report is that Template Toolkit finally received a bit of attention from its maintainer a couple of months ago, but the long-awaited Template Toolkit 3 is looking as far away as, well, Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;natural-language-processing&#34;&gt;Natural Language Processing&lt;/h3&gt;

&lt;p&gt;Who would have thought that the big news of 2005 would be that Yahoo is relevant again? Not only are they coming up with interesting new search technologies such as Y!Q, but they&amp;rsquo;re releasing a lot of the guts behind what they&amp;rsquo;re doing as public APIs. One of those that is particularly relevant for NLP is the &lt;a href=&#34;http://developer.yahoo.net/search/content/V1/termExtraction.html&#34;&gt;Term Extraction web service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This takes a chunk of text and pulls out the distinctive terms and phrases. Think of this as a step beyond something like &lt;a href=&#34;https://metacpan.org/pod/Lingua::EN::Keywords&#34;&gt;&lt;code&gt;Lingua::EN::Keywords&lt;/code&gt;&lt;/a&gt;, with the firepower of Yahoo behind it. To access the API, simply send a HTTP &lt;code&gt;POST&lt;/code&gt; request to a given URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use LWP::UserAgent;
use XML::Twig;
my $uri  = &amp;quot;http://api.search.yahoo.com/ContentAnalysisService/V1/termExtraction&amp;quot;;
my $ua   = LWP::UserAgent-&amp;gt;new();
my $resp = $ua-&amp;gt;post($uri, {
    appid   =&amp;gt; &amp;quot;PerlYahooExtractor&amp;quot;,
    context =&amp;gt; &amp;lt;&amp;lt;EOF
Two Scottish towns have seen the highest increase in house prices in the
UK this year, according to new figures. 
Alexandria in West Dunbartonshire and Coatbridge in North Lanarkshire
both saw an average 35% rise in 2005. 
EOF
});
if ($resp-&amp;gt;is_success) { 
    my $xmlt = XML::Twig-&amp;gt;new( index =&amp;gt; [ &amp;quot;Result&amp;quot; ]);
    $xmlt-&amp;gt;parse($resp-&amp;gt;content);
    for my $result (@{ $xmlt-&amp;gt;index(&amp;quot;Result&amp;quot;) || []}) {
        print $result-&amp;gt;text;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;north lanarkshire
scottish towns
west dunbartonshire
house prices
coatbridge
dunbartonshire
alexandria
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I had informed the London Perl Mongers of this amazing discovery, Simon Wistow immediately bundled it up into a Perl module called &lt;a href=&#34;https://metacpan.org/pod/Lingua::EN::Keywords::Yahoo&#34;&gt;&lt;code&gt;Lingua::EN::Keywords::Yahoo&lt;/code&gt;&lt;/a&gt;, coming soon to a CPAN mirror near you.&lt;/p&gt;

&lt;h3 id=&#34;unicode&#34;&gt;Unicode&lt;/h3&gt;

&lt;p&gt;The best news about Unicode over the last year is that you should not have noticed any major changes. By now, the core Unicode support in Perl just works, and most of the CPAN modules that deal with external data have been updated to work with Unicode.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t see or hear anything about Unicode, that&amp;rsquo;s a good thing: it means it&amp;rsquo;s all working properly.&lt;/p&gt;

&lt;h3 id=&#34;poe&#34;&gt;POE&lt;/h3&gt;

&lt;p&gt;The chapter on POE was a great introduction to how POE works and some of the things that you can do with it, but it focused on using POE for networking applications and for daemons. This is only half the story. Recently a lot of interest has centered on using POE for graphical and command-line applications: Randal Schwartz takes over from the RSS aggregator at the end of the chapter by integrating it with a graphical interface in &amp;ldquo;&lt;a href=&#34;http://www.stonehenge.com/merlyn/PerlJournal/col11.html&#34;&gt;Graphical interaction with POE and Tk&lt;/a&gt;.&amp;rdquo; Here, I want to consider command-line applications.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Term::Visual&#34;&gt;&lt;code&gt;Term::Visual&lt;/code&gt;&lt;/a&gt; module is a POE component for creating applications with a split-screen interface; at the bottom of the interface, you type your input, and the output appears above a status line. The module handles all of the history, status bar updates, and everything else for you. Here&amp;rsquo;s an application that uses &lt;a href=&#34;https://metacpan.org/pod/Chatbot::Eliza&#34;&gt;&lt;code&gt;Chatbot::Eliza&lt;/code&gt;&lt;/a&gt; to provide therapeutic session with everyone&amp;rsquo;s favorite digital psychiatrist.&lt;/p&gt;

&lt;p&gt;First, set up the chatbot and create a new &lt;code&gt;Term::Visual&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w
use POE;
use POSIX qw(strftime);
use Term::Visual;
use Chatbot::Eliza;
my $eliza = Chatbot::Eliza-&amp;gt;new();
my $vt    = Term::Visual-&amp;gt;new( Alias =&amp;gt; &amp;quot;interface&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create the window, which will have space on its status bar for a clock:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $window_id = $vt-&amp;gt;create_window(
   Status =&amp;gt; { 0 =&amp;gt; { format =&amp;gt; &amp;quot;[%8.8s]&amp;quot;, fields =&amp;gt; [&amp;quot;time&amp;quot;] } },
   Title =&amp;gt; &amp;quot;Eliza&amp;quot; 
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need a &lt;a href=&#34;https://metacpan.org/pod/POE::Session&#34;&gt;&lt;code&gt;POE::Session&lt;/code&gt;&lt;/a&gt;, which will do all the work. It will have three states; the first is the &lt;code&gt;_start&lt;/code&gt; state, to tell &lt;code&gt;Term::Visual&lt;/code&gt; what to do with any input it gets from the keyboard and to update the clock:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POE::Session-&amp;gt;create
(inline_states =&amp;gt;
  { _start          =&amp;gt; sub {
        $_[KERNEL]-&amp;gt;post( interface =&amp;gt; send_me_input =&amp;gt; &amp;quot;got_term_input&amp;quot; );
        $_[KERNEL]-&amp;gt;yield( &amp;quot;update_time&amp;quot; );
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Updating the clock is simply a matter of setting the &lt;code&gt;time&lt;/code&gt; field declared earlier to the current time, and scheduling another update at the top of the next minute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    update_time     =&amp;gt; sub {
        $vt-&amp;gt;set_status_field( $window_id,
                               time =&amp;gt; strftime(&amp;quot;%I:%M %p&amp;quot;, localtime) );
        $_[KERNEL]-&amp;gt;alarm( update_time =&amp;gt; int(time() / 60) * 60 + 60 );
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you need to handle the input from the user. Do that in a separate subroutine to make things a big clearer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    got_term_input  =&amp;gt; \&amp;amp;handle_term_input,
  }
);

$poe_kernel-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;Term::Visual&lt;/code&gt; gets a line of text from the user, it passes it to the state declared in the &lt;code&gt;_start&lt;/code&gt; state. The code takes that text, prints it to the terminal as an echo, and then passes it through Eliza:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub handle_term_input {
  my ($heap, $input) = @_[HEAP, ARG0];
  if ($input =~ m{^/quit}i) {
    $vt-&amp;gt;delete_window($window_id); 
    exit;
  }

  $vt-&amp;gt;print($window_id, &amp;quot;&amp;gt; $input&amp;quot;);
  $vt-&amp;gt;print($window_id, $eliza-&amp;gt;transform($input));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In just a few lines of code you have a familiar interface, similar to many IRC or MUD clients, with POE hiding all of the event handling away.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Advanced Perl Programming&lt;/em&gt; showed how to write tests so that we all can be more sure that our code is doing what it should. How do you know your tests are doing enough? Enter Paul Johnson&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;&lt;code&gt;Devel::Cover&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Devel::Cover&lt;/code&gt; makes a record of each time a Perl operation or statement is executed, and then compares this against the statements in your code. So when you&amp;rsquo;re running your tests, you can see which of the code paths in your module get exercised and which don&amp;rsquo;t; if you have big branches of code that never get tested, maybe you should write more tests for them!&lt;/p&gt;

&lt;p&gt;To use it on an uninstalled module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cover -delete
$ HARNESS_PERL_SWITCHES=-MDevel::Cover make test
$ cover
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you a textual summary of code coverage; &lt;code&gt;cover -report html&lt;/code&gt; produces a colorized, navigable hypertext summary, useful for showing to bosses.&lt;/p&gt;

&lt;p&gt;This ensures that your code works&amp;ndash;or at least, that it does what your tests specify. The next step is to ensure that your code is actually of relatively decent quality. Because &amp;ldquo;quality&amp;rdquo; is a subjective metric when it comes to the art of programming, Perl folk have introduced the objective of &amp;ldquo;Kwalitee&amp;rdquo; instead, which may or may not have any bearing on quality.&lt;/p&gt;

&lt;p&gt;All modules on CPAN have their Kwalitee measured as part of the &lt;a href=&#34;http://cpants.dev.zsi.at/&#34;&gt;CPANTS&lt;/a&gt; (CPAN Testing Service) website. One way to test for and increase your Kwalitee is to use the &lt;a href=&#34;https://metacpan.org/pod/Module::Build::Kwalitee&#34;&gt;&lt;code&gt;Module::Build::Kwalitee&lt;/code&gt;&lt;/a&gt; module; this copies some boilerplate tests into your distribution that ensure that you have adequate and syntactically correct documentation, that you &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;All of this ought to go a fair way to improving the Kwalitee of your code, if not its actual quality!&lt;/p&gt;

&lt;h3 id=&#34;inline&#34;&gt;Inline&lt;/h3&gt;

&lt;p&gt;One of the things that has come over into Perl 5 from Perl 6 development is the concept of the Native Call Interface (NCI). This hasn&amp;rsquo;t fully been developed yet, but chromatic (yes, the editor of this very site) has been working on it.&lt;/p&gt;

&lt;p&gt;The idea is that, instead of having something like Inline or XS that creates a &amp;ldquo;buffer&amp;rdquo; between Perl and C libraries, you just call those libraries directly. At the moment, you need to compile any XS module against the library you&amp;rsquo;re using. This is particularly awkward for folk on cut-down operating systems that do not ship a compiler, such as Palm OS or Windows.&lt;/p&gt;

&lt;p&gt;The strength of NCI is that it doesn&amp;rsquo;t require a compiler; instead, it uses the operating system&amp;rsquo;s normal means of making calls into libraries. (Hence &amp;ldquo;Native Call.&amp;rdquo;) It uses Perl&amp;rsquo;s &lt;code&gt;DynaLoader&lt;/code&gt; to find libraries, load them, and then find the address of symbols inside of the library. Then it calls a generic &amp;ldquo;thunk&amp;rdquo; function to turn the symbol&amp;rsquo;s address into a call. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $lib = P5NCI::Library-&amp;gt;new( library =&amp;gt; &#39;nci_test&#39;, package =&amp;gt; &#39;NCI&#39; );
$lib-&amp;gt;install_function( &#39;double_int&#39;, &#39;ii&#39; );

my $two = NCI::double_int( 1 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These lines find the &lt;code&gt;nci_test&lt;/code&gt; shared library and get ready to put its functions into the &lt;code&gt;NCI&lt;/code&gt; namespace. It then installs the function &lt;code&gt;double_int&lt;/code&gt;, which is of signature &lt;code&gt;int double_int(int)&lt;/code&gt; (hence &lt;code&gt;ii&lt;/code&gt;). Once this is done, you can call the function from Perl. It&amp;rsquo;s not much trickier than Inline, but without the intermediate step of compilation.&lt;/p&gt;

&lt;p&gt;NCI isn&amp;rsquo;t quite there yet, and it only supports very simple function signatures. However, because of its portability, it&amp;rsquo;s definitely the one to watch for Perl-C interfaces in the future.&lt;/p&gt;

&lt;h3 id=&#34;everything-else&#34;&gt;Everything Else&lt;/h3&gt;

&lt;p&gt;The last chapter is &amp;ldquo;Fun with Perl.&amp;rdquo; Now, much has happened in the world of Perl fun, but much has happened all over Perl. There were many other things I wanted to write about, as well: CPAN best practices for date/time handling and email handling, Perl 6 and Pugs, the very latest web application frameworks such as Catalyst and Jifty, and so on. But all these would fill another book&amp;ndash;and if I ever finished that, it too would require an update like this one. So I hope this is enough for you to be getting on with!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated GUI Testing</title>
      <link>http://localhost:1313/pub/2005/08/11/win32guitest.html/</link>
      <pubDate>Thu, 11 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/11/win32guitest.html/</guid>
      <description>

&lt;p&gt;You use Perl at work. Sometimes you are unhappy because there is one application you always have to click on and fill all those input boxes. It&amp;rsquo;s very boring. Why not let Perl do that while you go grab a coffee? Also, maybe you sometimes feel frustrated that you need to start that nice app and want someone else type in for you. Let Perl do that, too.&lt;/p&gt;

&lt;h3 id=&#34;why-perl&#34;&gt;Why Perl?&lt;/h3&gt;

&lt;p&gt;Simply put: because you like Perl.&lt;/p&gt;

&lt;p&gt;The long story is that there are all sorts of software packages that you may use to automate graphical applications. Are they really good fits for what you want to do?&lt;/p&gt;

&lt;p&gt;Windows has many libraries that help you automate such things, but do the applications you use support those automation libraries? Too many do not. Moreover, is this enough for you to say you have tested a certain GUI feature? If not, read on.&lt;/p&gt;

&lt;h3 id=&#34;what-you-need&#34;&gt;What You Need&lt;/h3&gt;

&lt;p&gt;You need a working installation of Perl, with Perl/Tk included. I recommend &lt;a href=&#34;http://www.activestate.com/&#34;&gt;ActiveState&lt;/a&gt;&amp;rsquo;s ActivePerl. You also need the &lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest&#34;&gt;Win32::GuiTest&lt;/a&gt; module. Install it from the CPAN or, ideally, through PPM.&lt;/p&gt;

&lt;h3 id=&#34;example-code&#34;&gt;Example Code&lt;/h3&gt;

&lt;p&gt;Download the &lt;a href=&#34;http://localhost:1313/media/_pub_2005_08_11_win32guitest/tester.pl&#34;&gt;&lt;em&gt;tester.pl&lt;/em&gt;&lt;/a&gt; and the &lt;a href=&#34;http://localhost:1313/media/_pub_2005_08_11_win32guitest/tested.pl&#34;&gt;&lt;em&gt;tested.pl&lt;/em&gt;&lt;/a&gt; programs. They need to both be in the same directory. First run the &lt;em&gt;tested.pl&lt;/em&gt; program in order to see the windows it has and how it looks. The program does nothing by itself; it just serves as a &amp;ldquo;run&amp;rdquo; application. &lt;em&gt;tester.pl&lt;/em&gt; is more interesting. It spawns &lt;em&gt;tested.pl&lt;/em&gt; and starts sending it input (mouse moves, mouse clicks, and keystrokes).&lt;/p&gt;

&lt;p&gt;I tested these two programs on Windows 2000 Professional and Windows XP Home Edition using ActiveState&amp;rsquo;s distribution of Perl.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;tested.pl&lt;/em&gt; program is just a dummy GUI used to demonstrate the examples. It uses Tk, so although it is a Win32 GUI, it isn&amp;rsquo;t a native one. This has the effect that not all of the functions you can use with Win32::GuiTest will work as you would expect them to work against a native Win32 GUI. Fortunately, there are workarounds.&lt;/p&gt;

&lt;h3 id=&#34;a-few-words-about-windows&#34;&gt;A Few Words About Windows&lt;/h3&gt;

&lt;p&gt;Graphical user interfaces manage windows. Windows are just reusable objects with which users can interact. Almost all GUIs have more than just one window. I use &amp;ldquo;window&amp;rdquo; just as a generic term for any graphical object that an application may produce. This means that &amp;ldquo;window&amp;rdquo; is an abstract term after all.&lt;/p&gt;

&lt;p&gt;Windows have common elements that you need to consider before writing a program that interacts with a GUI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each window belongs to a window class (making it possible to search them by class).&lt;/li&gt;
&lt;li&gt;Windows have an organizational hierarchy; every GUI has at least one root window, and every window may have child windows. Windows form a tree. This makes them searchable (by class or not) in depth: start from a root window and search among its siblings.&lt;/li&gt;
&lt;li&gt;Some windows have text attached to them. This is useful to identify windows.&lt;/li&gt;
&lt;li&gt;Windows have an numeric ID that uniquely identifies them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that you can identify windows by any of their text, class, and parent window attributes. You can also pinpoint a window by its ID.&lt;/p&gt;

&lt;h3 id=&#34;finding-windows&#34;&gt;Finding Windows&lt;/h3&gt;

&lt;p&gt;When testing a GUI, first make sure the application you want to test has started. To do this, use the Win32::GuiTest exported function named &lt;code&gt;FindWindowLike()&lt;/code&gt;. Remember that hierarchy of Windows? If you search for an &lt;em&gt;Edit&lt;/em&gt; window, you may find it in the wrong place. That There can be multiple different GUIs started that &lt;em&gt;have&lt;/em&gt; editor windows. There should be a way to differentiate between these hypothetical editor windows&amp;ndash;and the hierarchical organization of windows helps.&lt;/p&gt;

&lt;p&gt;First look for the main window of the application, and then descend the hierarchy (that you have to know beforehand) until you reach the desired window.&lt;/p&gt;

&lt;p&gt;How can you know the windows hierarchy? There are two main ways. If you have written the GUI yourself or have access to its sources and have enough experience, you may find out what the hierarchy of windows is. Unfortunately, that&amp;rsquo;s quite tricky and prone to error.&lt;/p&gt;

&lt;p&gt;Another much simpler way to do this on Windows platforms is to use the free &lt;a href=&#34;http://www.catch22.net/software/winspy.asp&#34;&gt;WinSpy++&lt;/a&gt; program. Basically, it allows you to &lt;a href=&#34;http://www.piotrkaluski.com/files/winguitest/docs/ch02.html&#34;&gt;peek at an application&amp;rsquo;s window structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you use WinSpy++ to look at an application windowing structure, you will notice that every window has a numeric handle, expressed in hex. However, Perl expresses in decimal. This will come up again in a moment.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;FindWindowLike&lt;/code&gt; is: &lt;code&gt;FindWindowLike($window,$titleregex,$classregex,$childid,   $maxlevel)&lt;/code&gt;. It returns a list of found windows. The parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the (numeric) handle of the parent window to search under (remember the hierarchical organization of windows in a GUI). You may use &lt;em&gt;undef&lt;/em&gt; in order to search for all windows.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$window&lt;/em&gt; should be a decimal value, so if you know the window&amp;rsquo;s hex handle (as displayed by WinSpy++) you need to convert it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$titleregex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the most often used parameter. It is a regular expression for &lt;code&gt;FindWindowLike&lt;/code&gt; to match against window titles to find the appropriate window(s).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$classregex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This matches against a window class. Suppose that you want to find all buttons in an application. Use the function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @windows = FindWindowLike(undef,&amp;quot;&amp;quot;,&amp;quot;Button&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; if you don&amp;rsquo;t care what the class of the window is, do not omit the &lt;code&gt;$classregex&lt;/code&gt; parameter. Instead, use an empty string.&lt;/p&gt;

&lt;p&gt;Currently the &lt;code&gt;FindWindowLike()&lt;/code&gt; function does not check if &lt;code&gt;$classregex&lt;/code&gt; is undefined, so you will end up with a lot of Perl warnings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$childid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you pass this argument, then the function will match all windows with this ID.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$maxlevel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maximum depth level to match windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you may have noticed, the &lt;code&gt;tested&lt;/code&gt; program has a title that matches the string &amp;ldquo;Tested&amp;rdquo;. Thus, the &lt;code&gt;tester&lt;/code&gt; starts by searching windows matching this title:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@windows = FindWindowLike( undef, &amp;quot;Tested&amp;quot;, &amp;quot;&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;@windows&lt;/em&gt; will contain a list of window IDs that have a title matching the string. The point here is that you probably don&amp;rsquo;t want the &lt;code&gt;tested&lt;/code&gt; program to start more than once simultaneously.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( @windows &amp;gt; 1 ) {
     print &amp;quot;* The \&amp;quot;tested\&amp;quot; program is started more than once!\n&amp;quot;;
     ...
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is no &lt;code&gt;tested&lt;/code&gt; application already running, the program can start it and repeat the procedure, searching for windows that match our criteria (they contain the string &amp;ldquo;Tested&amp;rdquo; in their titles). If it&amp;rsquo;s running just once, its ID is &lt;code&gt;$windows[0]&lt;/code&gt;. In fact, this is the root window of the application.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no point in going further with the program if the GUI hasn&amp;rsquo;t started, so the code checks this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless ( @windows ) {
     print &amp;quot;* The program hasn&#39;t started!\n&amp;quot;;
     exit 1;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-a-specific-window-to-foreground&#34;&gt;Setting a Specific Window to Foreground&lt;/h3&gt;

&lt;p&gt;Finding a window is sometimes not enough. Often, you need to send some input to the window. Obviously, the window should be in the foreground. The appropriate functions are &lt;code&gt;SetActiveWindow()&lt;/code&gt; and &lt;code&gt;SetForegroundWindow()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of the way windows work under Win32, this may be trickier than it seems. Basically, if the caller is not in the foreground, it can not give another window &amp;ldquo;focus.&amp;rdquo; MSDN explains this in the documentation of the &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/windows/windowreference/windowfunctions/setforegroundwindow.asp&#34;&gt;&lt;code&gt;SetForegroundWindow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/setactivewindow.asp&#34;&gt;&lt;code&gt;SetActiveWindow&lt;/code&gt;&lt;/a&gt; functions.&lt;/p&gt;

&lt;p&gt;While this behavior is easy to explain if you consider that you usually don&amp;rsquo;t want applications that run in background to be able to annoy you (at least) by grabbing focus, there is at least one drawback. If you are running a GUI (perhaps remotely) to which you will send sensitive input for some reason, you may send those secrets to another, possibly malicious, application if the tested application does not have focus!&lt;/p&gt;

&lt;p&gt;Another problem is in running tester programs remotely, or at regular intervals. Suppose that your tester program spawns the tested program, then starts sending it events (mouse events and/or keystrokes). If the computer is in a &amp;ldquo;locked&amp;rdquo; state, according to Microsoft documentation, no application can be in the foreground. You may have unexpected results.&lt;/p&gt;

&lt;p&gt;If the GUI you are automating receives sensitive input (such as passwords), you have to find a means to &amp;ldquo;isolate&amp;rdquo; that machine&amp;rsquo;s input/output devices, such as keyboard/mouse/monitor, so that no one unauthorized can peek at what your Perl program is typing in. Good luck.&lt;/p&gt;

&lt;p&gt;In my opinion, every time you send input to a GUI, the Win32::GuiTest program should check if the application is in the foreground. If it isn&amp;rsquo;t, it should try to bring it to the front. If it can&amp;rsquo;t do that, it should fail and not continue.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample routine that &lt;em&gt;tester.pl&lt;/em&gt; uses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sub bring_window_to_front {
     my $window  = shift;
     my $success = 1;

     if ( SetActiveWindow($window) ) {
         print &amp;quot;* Successfully set the window id: $window active\n&amp;quot;;
     }
     else {
         print &amp;quot;* Could not set the window id: $window active\n&amp;quot;;
         $success = 0;
     }
     if ( SetForegroundWindow($window) ) {
         print &amp;quot;* Window id: $window brought to foreground\n&amp;quot;;
     }
     else {
         print &amp;quot;* Window id: $window could not be brought to foreground\n&amp;quot;;
         $success = 0;
     }

     return $success;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you don&amp;rsquo;t want to bring a window to front but expect it to be in front, use &lt;code&gt;GetForegroundWindow()&lt;/code&gt;. That way, you can just check the return value with a window ID and find out if it is in front.&lt;/p&gt;

&lt;h3 id=&#34;key-pressing&#34;&gt;Key Pressing&lt;/h3&gt;

&lt;p&gt;You have found your window and have made sure that it has focus. What next?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s time to send data to the window. This is the purpose of the &lt;code&gt;SendKeys()&lt;/code&gt; function. You can send to an application not only basic keypresses, but combinations of keys too. Here&amp;rsquo;s an example from the &lt;em&gt;tester.pl&lt;/em&gt; program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @keys = ( &amp;quot;%{F}&amp;quot;, &amp;quot;{RIGHT}&amp;quot;, &amp;quot;E&amp;quot;, );
for my $key (@keys) {
    SendKeys( $key, $pause_between_keypress );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code starts with an array containing the keypresses. Note the format of the first three elements. The keypresses are: &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;F&lt;/code&gt;, right arrow, and &lt;code&gt;E&lt;/code&gt;. With the application open, this navigates the menu in order to open the editor.&lt;/p&gt;

&lt;p&gt;For a full listing of &amp;ldquo;special&amp;rdquo; keystrokes or combinations of keys, consult the function&amp;rsquo;s documentation.&lt;/p&gt;

&lt;h3 id=&#34;finding-text-in-your-application&#34;&gt;Finding Text in Your Application&lt;/h3&gt;

&lt;p&gt;You may want to learn how you can &amp;ldquo;read&amp;rdquo; text written in GUI windows. Unfortunately, you can&amp;rsquo;t read everything. You &lt;em&gt;can&lt;/em&gt; read the text written in the title of windows (useful for identifying a window by its title). You can also read text in &lt;code&gt;Edit&lt;/code&gt; class windows; for example, the part of Internet Explorer where you type in a URL, or the list items in a &lt;code&gt;ListBox&lt;/code&gt;. There may be other window classes from where you can fetch text; just verify with WinSpy++ whether you can &amp;ldquo;read&amp;rdquo; from a window, before writing your program, in order to avoid frustration.&lt;/p&gt;

&lt;p&gt;Remember that you can&amp;rsquo;t (at least now) read everything written in a window. Maybe a future version of Win32::GuiTest will provide a means by which to fetch text from a window, no matter what class that window is. In my humble opinion, it would be an awesome feature.&lt;/p&gt;

&lt;p&gt;The two functions useful for grabbing text are &lt;code&gt;GetWindowText()&lt;/code&gt; and &lt;code&gt;WMGetText()&lt;/code&gt;. Both take as a parameter the window ID:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$text = GetWindowText($window);
$text = WMGetText($window);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pushing-buttons&#34;&gt;Pushing Buttons&lt;/h3&gt;

&lt;p&gt;Pushing buttons can be tricky. The syntax is &lt;code&gt;PushButton($button[,$delay])&lt;/code&gt;, and the variable &lt;code&gt;$button&lt;/code&gt; can be either the text of the button (its caption) or the button ID. As Piotr Kaluski points out in &amp;ldquo;&lt;a href=&#34;http://www.piotrkaluski.com/files/automation/gui/carfl_pushcb.html&#34;&gt;Be Careful with &lt;code&gt;PushChildButton&lt;/code&gt;&lt;/a&gt;,&amp;rdquo; you sometimes want to specify a button ID, but instead the function matches a button having text like the one you used in the regexp. He posted &lt;a href=&#34;http://groups.yahoo.com/group/perlguitest/message/876?threaded=1&#34;&gt;a patch to the &lt;em&gt;perlguitest&lt;/em&gt; mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also note that when using Tk, as I do in this example, you can&amp;rsquo;t identify buttons by their text&amp;ndash;you need to use their IDs (if you know them). With native Win32 applications, you can identify buttons by their text. To check the differences, use WinSpy++ to look at a Tk button&amp;rsquo;s caption and a native Win32 button&amp;rsquo;s caption.&lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;PushButton()&lt;/code&gt; works fine on native Win32 buttons, I couldn&amp;rsquo;t make it work on my Tk application, so in &lt;em&gt;tester.pl&lt;/em&gt;, I use a trick in the &lt;code&gt;push_button()&lt;/code&gt; subroutine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub push_button {
    my $parent_window_title = shift;
    my @button;
    my @window;

    SendKeys(&amp;quot;%{F}&amp;quot;);
    SendKeys(&amp;quot;O&amp;quot;);
    sleep 1;

    @window = FindWindowLike( undef, $parent_window_title, &amp;quot;&amp;quot; );

    if ( !bring_window_to_front( $window[0] ) ) {
        print &amp;quot;* Could not bring to front $window[0]\n&amp;quot;;
    }

    @button = FindWindowLike( $window[0], &amp;quot;&amp;quot;, &amp;quot;Button&amp;quot; );
    sleep 1;

    print &amp;quot;* Trying to push button id: $button[0]\n&amp;quot;;
    PushChildButton( $window[0], $button[0], 0.25 );
    sleep 1;

    click_on_the_middle_of_window( $button[0] );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the function depends on the &lt;em&gt;tested.pl&lt;/em&gt; application, as it has hard-coded the way to spawn the &lt;code&gt;Button&lt;/code&gt; window (by navigating the menu using keystrokes). It is easy to adapt it to be more flexible and to be less coupled with the rest of the code.&lt;/p&gt;

&lt;p&gt;After sending the right combination of keys (&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;F&lt;/code&gt;, &lt;code&gt;O&lt;/code&gt;), the code expects that the window containing the &lt;code&gt;Button&lt;/code&gt; will pop up. Then it uses &lt;code&gt;FindWindowLike()&lt;/code&gt; again, using as a search item the title of the window containing the button (in this case, &lt;code&gt;here&lt;/code&gt;). Remember what I said about the windows hierarchy?&lt;/p&gt;

&lt;p&gt;Next, it ensures that the &lt;code&gt;Button&lt;/code&gt; window has the focus, although this is not entirely necessary at this point. After bringing the window to the front, the code searches for a button in the window (I already know that there&amp;rsquo;s only one button there).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@button = FindWindowLike( $window[0], &amp;quot;&amp;quot;, &amp;quot;Button&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This narrows down the search: &amp;ldquo;Search for a window of the class &lt;code&gt;Button&lt;/code&gt; under the window that has the ID &lt;code&gt;$window[0]&lt;/code&gt;,&amp;rdquo; the window having the ID in &lt;code&gt;$window[0]&lt;/code&gt; having been previously found by its title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PushChildButton( $window[0], $button[0], 0.25 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is here just for the power of example, as it doesn&amp;rsquo;t work for the Tk button. It would work for a native Win32 button.&lt;/p&gt;

&lt;p&gt;The trick is that the code can still push it using the mouse! Having the button ID, as returned by &lt;code&gt;FindWindowLike()&lt;/code&gt;, the code calls the &lt;code&gt;click_on_the_middle_of_window&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub click_on_the_middle_of_window {
    my $window = shift;

    print &amp;quot;* Moving the mouse over the window id: $window\n&amp;quot;;

    my ( $left, $top, $right, $bottom ) = GetWindowRect($window);

    MouseMoveAbsPix( ( $right + $left ) / 2, ( $top + $bottom ) / 2 );

    sleep(1);

    print &amp;quot;* Left Clicking on the window id: $window\n&amp;quot;;
    SendMouse(&amp;quot;{LeftClick}&amp;quot;);
    sleep(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function takes a window ID as its parameter, searches its rectangle using &lt;code&gt;GetWindowRect()&lt;/code&gt;, and then moves the mouse pointer right in the middle of it with &lt;code&gt;MouseMoveAbsPix()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the pointer over the button, sending &lt;code&gt;LeftClick&lt;/code&gt; presses the button.&lt;/p&gt;

&lt;h3 id=&#34;moving-around-with-the-mouse&#34;&gt;Moving Around with the Mouse&lt;/h3&gt;

&lt;p&gt;As seen earlier, moving the mouse is straightforward: just use &lt;code&gt;MouseMoveAbsPix()&lt;/code&gt;. It takes as parameters the coordinates where you want the pointer to be (horizontal and vertical positions) in pixels.&lt;/p&gt;

&lt;p&gt;It is useful to use other two functions in conjunction: &lt;code&gt;SendMouse()&lt;/code&gt; and &lt;code&gt;GetWindowRect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SendMouse&lt;/code&gt; sends a mouse action to the &lt;code&gt;Desktop&lt;/code&gt;. It takes only one parameter: a mouse action such as &lt;code&gt;{LeftDown}&lt;/code&gt;, &lt;code&gt;{LeftUp}&lt;/code&gt;, or &lt;code&gt;{LeftClick}&lt;/code&gt;. For more details, see the function&amp;rsquo;s documentation.&lt;/p&gt;

&lt;p&gt;You can also move the mouse wheel using &lt;code&gt;MouseMoveWheel()&lt;/code&gt;. It takes a positive or a negative argument, indicating the direction of the motion.&lt;/p&gt;

&lt;p&gt;To send an action, you need to know where we send it. Usually you will move the mouse pointer over a window. &lt;code&gt;GetWindowRect()&lt;/code&gt; is useful to find the coordinates of a window.&lt;/p&gt;

&lt;p&gt;It can be simpler to create a wrapper around these three functions in order to move the mouse pointer over a selected window, and then generate a mouse action, as I did with &lt;code&gt;click_on_the_middle_of_window()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;Here are some links you may find useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest&#34;&gt;Win32::GuiTest documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest::Examples&#34;&gt;Win32::GuiTest::Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://groups.yahoo.com/group/perlguitest/&#34;&gt;PerlGuiTest group&lt;/a&gt; on Yahoo; this is quite an active group.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.piotrkaluski.com/files/winguitest/docs/index.html&#34;&gt;Win32::GuiTest extended tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building Good CPAN Modules</title>
      <link>http://localhost:1313/pub/2005/04/14/cpan_guidelines.html/</link>
      <pubDate>Thu, 14 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/14/cpan_guidelines.html/</guid>
      <description>

&lt;p&gt;When you are planning to release a module to CPAN, one of your first tasks is figure out what OS, Perl version(s), and other environments you will and will not support. Often, the answers will come from what you can and cannot support, based on the features you want to provide and the modules and libraries you have used.&lt;/p&gt;

&lt;p&gt;Many CPAN modules, however, unintentionally limit the places where they can work. There are several steps you can take to remove those limitations. Often, these steps are very simple changes that can actually enhance your module&amp;rsquo;s functionality and maintainability.&lt;/p&gt;

&lt;h3 id=&#34;it-runs-on-my-machine&#34;&gt;It Runs On My Machine&lt;/h3&gt;

&lt;p&gt;You have the latest PowerBook, update from CPAN every day, and run the latest Perl version. The people using your module are not. Remember, just because an application or OS is older than your grandmother doesn&amp;rsquo;t mean that it isn&amp;rsquo;t useful anymore. Code doesn&amp;rsquo;t spontaneously develop bugs over time, nor does it collect cruft that makes it run slower. Some vitally important applications have run untouched for 30+ years in languages that were deprecated when you were in diapers. These applications keep the lights on and keep track of all the money in the world, for example, and they typically run on very old computers.&lt;/p&gt;

&lt;p&gt;Companies want to keep using their older systems because these systems work and they want to use Perl because Perl works everywhere. If you can leverage CPAN, you already have 90 percent of every Perl application written.&lt;/p&gt;

&lt;h4 id=&#34;when-in-rome&#34;&gt;When in Rome&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cpan.org/ports/index.html&#34;&gt;Perl runs on at least 93 different operating systems&lt;/a&gt;. In addition, there are &lt;a href=&#34;http://ftp.funet.fi/pub/CPAN/src/&#34;&gt;18 different productionized Perl 5 versions&lt;/a&gt; floating around out there (not counting the development branches and build options). &lt;code&gt;93 x 18 = 1674&lt;/code&gt;. That means your module could run on one of well over 1500 different OS/Perl version environments. Add in threading, Unicode, and other options, and there is simply no way you can test your poor module in all of the places it will end up!&lt;/p&gt;

&lt;p&gt;Luckily, Perl also provides (many of) the answers.&lt;/p&gt;

&lt;h5 id=&#34;defining-your-needs&#34;&gt;Defining Your Needs&lt;/h5&gt;

&lt;p&gt;If you know that your module simply will not run in a certain environment, you should set up prerequisites. These allow you to provide a level of safety for your users. Prerequisites include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OSes that your module will not run under&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;$^O&lt;/code&gt; and &lt;code&gt;%Config&lt;/code&gt; for this. &lt;code&gt;$^O&lt;/code&gt; will tell you the name of the operating system. Sometimes, this isn&amp;rsquo;t specific enough, so you can check &lt;code&gt;%Config&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Config;

if ( $Config{ osname } ne &#39;solaris&#39; || $Config{ osver } &amp;lt; 2.9 )
{
    die &amp;quot;This module needs Solaris 2.9 or higher to run.\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s usually better to limit yourself to a specific set of OSes that you know to be good. As your module&amp;rsquo;s popularity grows, users will let you know if it works elsewhere.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perl versions/features&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;$]&lt;/code&gt; and &lt;code&gt;%INC&lt;/code&gt; for this. &lt;code&gt;$]&lt;/code&gt; holds the Perl version and &lt;code&gt;%INC&lt;/code&gt; contains a list of loaded Perl modules so far. (See the &lt;a href=&#34;http://localhost:1313/pub/2005/04/14/cpan_guidelines.html?page=2#threading&#34;&gt;Threading section&lt;/a&gt; for an example.) If your module simply cannot be run in Perl before a certain version, make sure you have a &lt;code&gt;use 5.00#&lt;/code&gt; (where &lt;code&gt;#&lt;/code&gt; is the version you need) within your module. Additionally, &lt;a href=&#34;https://metacpan.org/pod/Module::Build&#34;&gt;Module::Build&lt;/a&gt; allows you to specify a minimum Perl version in the &lt;code&gt;requires&lt;/code&gt; option for the constructor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modules/libraries&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt;, you can specify a &lt;code&gt;PREREQ_PM&lt;/code&gt; in your call to &lt;code&gt;WriteMakefile()&lt;/code&gt; to indicate that your module needs other modules to run. That can include version numbers, both the minimum and maximum acceptable. &lt;code&gt;Module::Build&lt;/code&gt; has a similar feature with the &lt;code&gt;requires&lt;/code&gt; option to the constructor.&lt;/p&gt;

&lt;p&gt;If you depend on external, non-Perl libraries, you should see if they exist before continuing onwards. Like everything else, CPAN has a solution: &lt;a href=&#34;https://metacpan.org/pod/App::Info&#34;&gt;App::Info&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use App::Info::HTTPD::Apache;

my $app = App::Info::HTTPD::Apache-&amp;gt;new;

unless ( $app-&amp;gt;installed ) {
    die &amp;quot;Apache isn&#39;t installed!\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;operating-system&#34;&gt;Operating System&lt;/h5&gt;

&lt;p&gt;What OS your module happens to land on is both less and more of an issue than most people realize. Most of us have had to work in both Unix-land and Windows-land, so we know of pitfalls with directory separators and hard-coding outside executables. However, there are other problems that only arise when your module lands in a place like VMS.&lt;/p&gt;

&lt;p&gt;The VMS filesystem, for example, has the idea of a volume in a fully qualified filename. VMS also handles file permissions and file versioning very differently than the standard Unix/Win32/Mac model. An excellent example of how to handle these differences is the core module &lt;a href=&#34;https://metacpan.org/pod/File::Spec&#34;&gt;File::Spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because this is an issue most authors have had to face at some point, there is a standard &lt;code&gt;perlpod&lt;/code&gt; called, fittingly, &lt;a href=&#34;https://perldoc.perl.org/perlport.html&#34;&gt;&lt;code&gt;perlport&lt;/code&gt;&lt;/a&gt;. If you follow what&amp;rsquo;s in there, you will be just fine.&lt;/p&gt;

&lt;h5 id=&#34;perl-version&#34;&gt;Perl Version&lt;/h5&gt;

&lt;p&gt;It&amp;rsquo;s been over ten years since the release of Perl 5.0.0, and Perl has changed a lot in that time. Most installations, however, are not the latest and greatest version. The main reason is &amp;ldquo;&lt;em&gt;If it ain&amp;rsquo;t broke, don&amp;rsquo;t fix it&lt;/em&gt;.&amp;rdquo; There is no such thing as a &lt;em&gt;safe upgrade&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Most applications have no need for the latest features and will never trip most of the bugs or security holes. They just aren&amp;rsquo;t that complex. If you restrict your module to features only found in 5.8, or even 5.6, you will ignore a large number of potential users.&lt;/p&gt;

&lt;h5 id=&#34;security-improvements&#34;&gt;Security Improvements&lt;/h5&gt;

&lt;p&gt;Most security fixes are transparent to the programmer. If the algorithms behind Perl hashes improve, you won&amp;rsquo;t see it. If a new release fixes a hole in &lt;code&gt;suidperl&lt;/code&gt;, your module won&amp;rsquo;t care.&lt;/p&gt;

&lt;p&gt;Sometimes, however, a security fix is a new feature whose usage will (and should) become the accepted norm: for example, the three-arg form of &lt;code&gt;open()&lt;/code&gt; of 5.6. In these cases, I use &lt;code&gt;string-eval&lt;/code&gt; to try to use the new feature and default to the old feature if it doesn&amp;rsquo;t work. (Checking &lt;code&gt;$]&lt;/code&gt; here isn&amp;rsquo;t helpful because if your Perl version is pre-5.6, it will still try to compile the three-arg form and complain.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval q{
    open( INFILE, &amp;quot;&amp;gt;&amp;quot;, $filename )
          or die &amp;quot;Cannot open &#39;$filename&#39; for writing: $!\n&amp;quot;;
}; if ( $@ ) {
    # Check to see if it&#39;s a compile error
    if ( $@ =~ /Too many arguments for open/ ) {
        open( INFILE, &amp;quot;&amp;gt; $filename&amp;quot; )
            or die &amp;quot;Cannot open &#39;$filename&#39; for writing: $!\n&amp;quot;;
    }
    else {
        # Otherwise, rethrow the error
        die $@;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h5&gt;

&lt;p&gt;Like security fixes, most bug fixes are transparent to the programmer. Most of us didn&amp;rsquo;t notice that the hashing algorithm was less than optimal in 5.8.0 and had several improvements in 5.8.1. I know I didn&amp;rsquo;t. In general, these will not affect you at all.&lt;/p&gt;

&lt;p&gt;Unlike security fixes, if your module breaks on a bug in a prior version of Perl, there&amp;rsquo;s probably not much you can do other than require the version where the bug fix occurred.&lt;/p&gt;

&lt;h5 id=&#34;new-features&#34;&gt;New Features&lt;/h5&gt;

&lt;p&gt;Everyone knows about &lt;code&gt;use warnings;&lt;/code&gt; and &lt;code&gt;our&lt;/code&gt; appearing in 5.6.0. You may, however, not know about the smaller changes. A good example is sorting.&lt;/p&gt;

&lt;p&gt;5.8.0 changed sorting to be stable. This means that if the two items compare equally, the resulting list will preserve their original order. Prior versions of Perl made no such guarantee. This means that code like this may not do what you expect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @input = qw( abcd abce efgh );
my @output = sort {
    substr( $a, 0, 3 ) cmp substr( $b, 0, 3 )
} @input;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you depend on the fact that &lt;code&gt;@output&lt;/code&gt; will contain &lt;code&gt;qw( abcd abce efgh )&lt;/code&gt;, your module may be run into problems on versions prior to 5.8.0. &lt;code&gt;@output&lt;/code&gt; could contain &lt;code&gt;qw( abce abcd efgh)&lt;/code&gt; because the sorting function considers &lt;code&gt;abcd&lt;/code&gt; and &lt;code&gt;abce&lt;/code&gt; identical.&lt;/p&gt;

&lt;h5 id=&#34;gotchas-with-os-and-perl-versions&#34;&gt;Gotchas With OS and Perl Versions&lt;/h5&gt;

&lt;p&gt;Your module may be pristine when it comes to OS or Perl versions. Is the rest of your distribution? Your tests may betray a dependency that you weren&amp;rsquo;t aware of.&lt;/p&gt;

&lt;p&gt;For example, 5.6.0 added lexically scoped warnings. Instead of using the &lt;code&gt;-w&lt;/code&gt; flag to the Perl executable, you can now say &lt;code&gt;use warnings&lt;/code&gt;. Because enabling warnings is generally a good thing, this is a very common header for test files written by conscientious programmers using Perl 5.6.0+:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use strict;
use warnings;

use Test::More tests =&amp;gt; 42;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, even if your module runs with Perls older than 5.6.0, your tests won&amp;rsquo;t! This means your distribution will not install through CPAN or CPANPLUS. For administrators who install modules this way and who have better things to do that debug a module&amp;rsquo;s tests, they won&amp;rsquo;t install it.&lt;/p&gt;

&lt;h4 id=&#34;major-new-features&#34;&gt;Major New Features&lt;/h4&gt;

&lt;p&gt;Some new features are so large that they change the name of the game. These include Unicode and threading. Unicode has had support, in one form or another, in every version of Perl 5. That support has slowly moved from modules (such as &lt;a href=&#34;https://metacpan.org/pod/Unicode::String&#34;&gt;Unicode::String&lt;/a&gt;) to the Perl core itself.&lt;/p&gt;

&lt;h5 id=&#34;threading&#34;&gt;Threading&lt;/h5&gt;

&lt;p&gt;In 5.8.0, Perl&amp;rsquo;s threading model changed from the 5.005 model (which never worked very well) to ithreads (which do). Additionally, multi-core processors are coming to the smaller servers. More and more, developers using 5.8+ choose to write threaded applications.&lt;/p&gt;

&lt;p&gt;This means that your module might have to play in a threaded playground, which is a weird place indeed to process-oriented folks. Now, Perl&amp;rsquo;s threading model is unshared by default, which means that global variables are safe from clobbering each other. This is different from the standard threading model, like Java&amp;rsquo;s, which shares all variables by default. Because of this decision, most modules will run under threads with little to no changes.&lt;/p&gt;

&lt;p&gt;The main issue you will need to resolve is what happens with your stateful variables. These are the variables that persist and keep a value in between invocations of a subroutine, yet need coordination across threads. A good example is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    my $counter;
    sub next_value ( return ++$counter; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you depend on this counter being coordinated across every invocation of the &lt;code&gt;next_value()&lt;/code&gt; subroutine, you need to take three steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sharing&lt;/p&gt;

&lt;p&gt;Because Perl doesn&amp;rsquo;t share your variables for you, you must explicitly share &lt;code&gt;$counter&lt;/code&gt; to make sure that it is correctly updated across threads.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Locking&lt;/p&gt;

&lt;p&gt;Because a context-switch between threads can happen at any time, you need to lock &lt;code&gt;$counter&lt;/code&gt; within the &lt;code&gt;next_value()&lt;/code&gt; subroutine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Version safety&lt;/p&gt;

&lt;p&gt;Also, because ithreads is an optional 5.8.0+ feature and the &lt;code&gt;lock()&lt;/code&gt; subroutine is undefined before 5.6.0+, you may want to do some version checks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    my $counter = 0;
    if ( $] &amp;gt;= 5.008 &amp;amp;&amp;amp; exists $INC{&#39;threads.pm&#39;} ) {
        require threads::shared;
        import threads::shared qw(share);
        share( $counter );
    }
    else {
        *lock = sub (*) {}
    }

    sub next_value {
        lock( $counter );
        $counter++;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best description that I&amp;rsquo;ve seen of what you need to do to port your application to a threaded works successfully is &amp;ldquo;&lt;a href=&#34;http://localhost:1313/pub/2002/06/11/threads.html&#34;&gt;Where Wizards Fear to Tread&lt;/a&gt;&amp;rdquo; on Perl 5.8 threads.&lt;/p&gt;

&lt;h5 id=&#34;unicode&#34;&gt;Unicode&lt;/h5&gt;

&lt;p&gt;Although Unicode had some support prior to 5.8.0, a major feature in 5.8.0 was the near-seamless handling of Unicode within Perl itself. Prior that that, developers had to use Unicode::String and other modules. This means that you should look to handling strings as gingerly as possible if you consider support for Unicode on Perls prior to 5.8.0 as important. Luckily, most major modules already do this for you without you having to worry about it.&lt;/p&gt;

&lt;p&gt;Discussing how to handle Unicode cleanly is an article in itself. Please see &lt;a href=&#34;https://perldoc.perl.org/perlunicode.html&#34;&gt;&lt;code&gt;perlunicode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://perldoc.perl.org/perluniintro.html&#34;&gt;&lt;code&gt;perluniintro&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h4 id=&#34;playing-nicely-with-others&#34;&gt;Playing Nicely with Others&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re like me, you heard &amp;ldquo;Doesn&amp;rsquo;t play well with others&amp;rdquo; a lot in kindergarten. While that&amp;rsquo;s an admirable trait for a hacker, it&amp;rsquo;s not something to praise in any modules that production systems depend upon. There are several common items to look out for when trying to play nicely with others.&lt;/p&gt;

&lt;h5 id=&#34;persistent-environments&#34;&gt;Persistent Environments&lt;/h5&gt;

&lt;p&gt;Persistent environments, like &lt;code&gt;mod_perl&lt;/code&gt; and FastCGI, are a fact of life. They make the WWW work. They are also a very different beast than a basic script that runs, does its thing, and ends. Basically, a persistent environment, such as &lt;code&gt;mod_perl&lt;/code&gt;, does a few things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Persistent interpreter&lt;/p&gt;

&lt;p&gt;Launching the Perl executable is expensive, relatively speaking. In an environment such as a web application, every request is a separate invocation of a Perl script. Persistence keeps a Perl interpreter around in memory between invocations, reducing the startup overhead dramatically.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Forked children&lt;/p&gt;

&lt;p&gt;In order to handle multiple requests at once, persistent environments tend to provide the capability for forked child processes, each with its own interpreter. Normally, this requires a copy of each module in every child&amp;rsquo;s memory area.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Shared memory&lt;/p&gt;

&lt;p&gt;Nearly every request will use the same modules (CGI, DBI, etc). Instead of loading them every time, persistent environments load them into shared memory that each of the child processes can access. This can save a lot of memory that would otherwise be required to load DBI once for every child. This allows the same machine to create many more children to handle many more requests simultaneously on the same machine.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caching needs a special mention. Because most persistent environments load most of the code into shared memory before forking off children, it makes sense to load as much code that won&amp;rsquo;t change as possible before forking. (If the code does change, the child process receives a fresh copy of the modified memory space, reducing the benefit of shared memory.) This means that modules need to be able to pre-load what they need on demand. This is why CGI, which normally defers loading anything as much as possible, provides the &lt;code&gt;:all&lt;/code&gt; option to load everything at once.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mod_perl&lt;/code&gt; folks have an excellent set of documentation as to what&amp;rsquo;s different about persistent environments, why you should care, and what you need to do for your module to work right.&lt;/p&gt;

&lt;h5 id=&#34;overloading&#34;&gt;Overloading&lt;/h5&gt;

&lt;p&gt;It&amp;rsquo;s very easy to create an overloaded class that cannot work with other overloaded classes. For example, if I&amp;rsquo;m using Overload::Num1 and Overload::Num2, I would expect &lt;code&gt;$num1 + $num2&lt;/code&gt; to DWIM. Unfortunately, with most overloaded classes written as below, they won&amp;rsquo;t. (For more information as to how this code works, please read &lt;a href=&#34;https://perldoc.perl.org/overload.html&#34;&gt;&lt;code&gt;overload&lt;/code&gt;&lt;/a&gt;, or the excellent article &amp;ldquo;&lt;a href=&#34;http://localhost:1313/pub/2003/07/22/overloading.html&#34;&gt;Overloading&lt;/a&gt;.&amp;ldquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub add {
    my ($l, $r, $inv) = @_;
    ($l, $r) = ($r, $l) if $inv;

    $l = ref $l ? $l-&amp;gt;numify : $l;
    $r = ref $r ? $r-&amp;gt;numify : $r;

    return $l + $r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Overload::Num1 uses the &lt;code&gt;numify()&lt;/code&gt; method to retrieve the number associated with the class. Overload::Num2 uses the &lt;code&gt;get_number()&lt;/code&gt; method. If I tried to use the two classes together, I would receive an error that looks something like &lt;em&gt;Can&amp;rsquo;t locate object method &amp;ldquo;numify&amp;rdquo; via package &amp;ldquo;Overload::Num2&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The solution is very simple&amp;ndash;don&amp;rsquo;t define an &lt;code&gt;add()&lt;/code&gt; method. Define a &lt;code&gt;numify&lt;/code&gt; (&lt;code&gt;0+&lt;/code&gt;) method, set fallback to true, and walk away. You don&amp;rsquo;t need to define a method for each option. You only need to do so if you have to do something special as part of doing that operation. For example, complex numbers have to add the rational and complex parts separately.&lt;/p&gt;

&lt;p&gt;If you absolutely have to define &lt;code&gt;add()&lt;/code&gt;, though, use something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub add {
    my ($l, $r, $inv) = @_;
    ($l, $r) = ($r, $l) if $inv;

    my $pkg = ref($l) || ref($r);

    # This is to explicitly call the appropriate numify() method
    $l = do {
        my $s = overload::Method( $l, &#39;0+&#39; );
        $s ? $s-&amp;gt;($l) : $l
    };

    $r = do {
        my $s = overload::Method( $r, &#39;0+&#39; );
        $s ? $s-&amp;gt;($r) : $r
    };

    return $pkg-&amp;gt;new( $l + $r );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, each overloaded class can handle things its way. The assumption, you&amp;rsquo;ll notice, is to bless the return value into the class whose &lt;code&gt;add()&lt;/code&gt; the caller called. This is acceptable; someone called its method, so &lt;em&gt;someone&lt;/em&gt; thought it was top dog! (If you have an &lt;code&gt;add&lt;/code&gt; method, no &lt;code&gt;numify&lt;/code&gt; method, and fallback activated, you will enter an infinite loop because &lt;code&gt;numify&lt;/code&gt; falls back to &lt;code&gt;$x + 0&lt;/code&gt;.)&lt;/p&gt;

&lt;h5 id=&#34;finding-out-what-something-is&#34;&gt;Finding Out What Something Is&lt;/h5&gt;

&lt;p&gt;At some point, your module needs to accept some data from somewhere. If you&amp;rsquo;re like me, you want your module to DWIM based on what data it has received. Eventually, you want to know &amp;ldquo;Is it a scalar, arrayref, or hashref?&amp;rdquo; (Yes, I know there are seven different types in Perl.) There are many, many ways to do this. Some even work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ref()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ref()&lt;/code&gt; is the time-honored way to dispatch based on datatype, resulting in code that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $is_hash = ref( $data ) eq &#39;HASH&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that &lt;code&gt;ref( $data )&lt;/code&gt; will return the class name of &lt;code&gt;$data&lt;/code&gt; if it&amp;rsquo;s an object. If someone has defined a class named &lt;code&gt;HASH&lt;/code&gt; (don&amp;rsquo;t do that!) that uses blessed array references, this will also break spectacularly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;isa()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isa()&lt;/code&gt; will tell you whether a reference inherits from a class. The various datatypes are actually class-like. Some people suggest writing code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $is_hash = UNIVERSAL::isa( $data, &#39;HASH&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will work whether or not &lt;code&gt;$data&lt;/code&gt; is blessed. Again, though, if someone is mean enough to call a class &lt;code&gt;HASH&lt;/code&gt; and bless an arrayref into it, you&amp;rsquo;ll have trouble. Worse, this technique may break polymorphism spectacularly if &lt;code&gt;$data&lt;/code&gt; is an object with an overloaded &lt;code&gt;isa()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; blocks&lt;/p&gt;

&lt;p&gt;Just try the data as a hashref and see if it succeeds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $is_hash = eval { %{$data}; 1 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This avoids the primary issue of the two options listed above, but this may unexpectedly succeed in the case of overloaded objects. If &lt;code&gt;$data&lt;/code&gt; is a Number::Fraction, you will mistakenly use &lt;code&gt;$data&lt;/code&gt; as a hash because Number::Fraction uses blessed hashes for objects, even though the intent is to use them as scalars.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Assume that objects are special&lt;/p&gt;

&lt;p&gt;By using &lt;a href=&#34;https://metacpan.org/pod/Scalar::Util&#34;&gt;Scalar::Util&lt;/a&gt;&amp;rsquo;s &lt;code&gt;blessed()&lt;/code&gt; and &lt;code&gt;reftype()&lt;/code&gt; functions, you can determine if a given scalar is a blessed reference or what type of reference it really is. If you want to find out if something is a hash reference, but you want to avoid the pitfalls listed above, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $is_hash = ( !blessed( $data ) &amp;amp;&amp;amp; ref $data eq &#39;HASH&#39; );
# or
my $is_hash = reftype( $data ) eq &#39;HASH&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nearly every use of overloading is to make an object behave as a scalar, as in Number::Fraction and similar classes. Using this technique allows you to respect the client&amp;rsquo;s wishes more easily. You will still miss a few possibilities, such as (the somewhat eccentric) &lt;a href=&#34;https://metacpan.org/pod/Object::MultiType&#34;&gt;Object::MultiType&lt;/a&gt; (an excellent example of what you &lt;em&gt;can&lt;/em&gt; do in Perl, if you put your mind to it).&lt;/p&gt;

&lt;p&gt;My personal preference is to let &lt;code&gt;$data&lt;/code&gt; tell &lt;em&gt;you&lt;/em&gt; what it can do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Object representations&lt;/p&gt;

&lt;p&gt;Not all objects are blessed hashrefs. I like to represent my objects as arrayrefs, and other people use Inside-Out objects which are references to undef that work with hidden data. This means that my overloaded numbers are arrays, but I want you to treat them as scalars. Unless you ask &lt;code&gt;$data&lt;/code&gt; how it wants you to treat it, how will you handle it correctly?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overloading accessors&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://perldoc.perl.org/overload.html&#34;&gt;&lt;code&gt;overload&lt;/code&gt;&lt;/a&gt; allows you to overload the accessor operators, such as &lt;code&gt;@{}&lt;/code&gt; and &lt;code&gt;%{}&lt;/code&gt;. This means that one can theoretically bless an array reference and provide the ability to access it as a hash reference. Object::MultiType is an example of this. It is a hashref that provides array-like access.&lt;/p&gt;

&lt;p&gt;Unfortunately, the CPAN module that would do this doesn&amp;rsquo;t exist, yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;letting-others-do-your-dirty-work&#34;&gt;Letting Others Do Your Dirty Work&lt;/h4&gt;

&lt;p&gt;The modules that you and I use on a daily basis are, in general, as OS-portable, version-independent, and polite as possible. This means that the more your module depends upon other modules to do the dirty work, the less you have to worry about it. Modules like File::Spec and Scalar::Util exist to help you out. Other modules like &lt;a href=&#34;https://metacpan.org/pod/XML::Parser&#34;&gt;XML::Parser&lt;/a&gt; will do their jobs, but also handle things like any Unicode you encounter so that you don&amp;rsquo;t have to.&lt;/p&gt;

&lt;p&gt;That said, you still have to be careful with whom your young module fraternizes with. Every module you add as a dependency is another module that can restrict where your module can live. If one of your module&amp;rsquo;s dependencies is Windows-only, such as anything from the Win32 namespace, then your module is now Windows-only. If one of your dependencies has a bug, then you also have that bug. Fortunately, there are a few ways to bypass these problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Buggy dependencies&lt;/p&gt;

&lt;p&gt;Generally, module authors fix bugs relatively quickly, especially if you&amp;rsquo;ve provided a test file that demonstrates the bug and a patch that makes those tests pass. Once your module&amp;rsquo;s dependency has a new version released, you can release a new version that requires the version with the bug fix.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OS-specific dependencies&lt;/p&gt;

&lt;p&gt;The first option is to accept it. If no one on Atari MiNT cares, then why should you? Alternatively, you can encapsulate the OS-dependent module and find another module that provides the same features on the OS you&amp;rsquo;re trying to support. File::Spec is an excellent example of how to encapsulate OS-specific behavior behind a common API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s a lot to keep in mind when writing a module for CPAN: OS and Perl versions, Unicode, threading, persistence&amp;ndash;it can be very overwhelming at times. With a few simple steps and a willingness to let your users tell you what they need, you&amp;rsquo;ll be the toast of the town.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Code Kata: Testing Imports</title>
      <link>http://localhost:1313/pub/2004/12/16/import_kata.html/</link>
      <pubDate>Thu, 16 Dec 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/12/16/import_kata.html/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2004/10/21/taint_testing_kata.html&#34;&gt;Perl Taint Test Kata&lt;/a&gt; introduced the idea of Perl Test Kata, small exercises designed to improve your understanding of Perl and your ability to write test-driven code. This article is the second in the series.&lt;/p&gt;

&lt;h3 id=&#34;import-testing-kata&#34;&gt;Import Testing Kata&lt;/h3&gt;

&lt;p&gt;Perl 5 added the ideas of namespaces and modules, making code reusable and easier to maintain. To allow convenience, it also added an importing mechanism to put code from a module into the current namespace.&lt;/p&gt;

&lt;p&gt;Behind the scenes, when you &lt;code&gt;use&lt;/code&gt; a module, Perl loads it from disk and, if successful, calls the special method &lt;code&gt;import()&lt;/code&gt;. By convention, this generally imports functions. Much of the time, &lt;code&gt;import()&lt;/code&gt; mundanely installs subroutines into the current namespace. That&amp;rsquo;s why so many modules use Exporter to provide a default &lt;code&gt;import()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s also a general module-loading hook that can perform many different types of manipulations. For example, &lt;a href=&#34;https://metacpan.org/pod/Filter::Simple&#34;&gt;Filter::Simple&lt;/a&gt; allows the use of source filters to transform code that looks entirely unlike Perl into valid code in the using module. Other modules change their behavior depending on any arguments passed to &lt;code&gt;import()&lt;/code&gt;. This includes &lt;a href=&#34;https://metacpan.org/pod/Test::More&#34;&gt;Test::More&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Test::Simple&#34;&gt;Test::Simple&lt;/a&gt;, which interpret their arguments as information about how many tests to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Test::More &#39;no_plan&#39;;

# or

use Test::More tests =&amp;gt; 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature is both powerful and important. Because of its importance, it needs good tests. Because of its power and flexibility, it may seem difficult to test an &lt;code&gt;import()&lt;/code&gt; well. Here are three sample implementations for you to practice testing.&lt;/p&gt;

&lt;h4 id=&#34;basic-exporting&#34;&gt;Basic Exporting&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package Basic::Exports;

use strict;

use base &#39;Exporter&#39;;
use vars &#39;@EXPORT&#39;;

@EXPORT = qw( foo bar );

sub foo { &#39;foo&#39; }
sub bar { &#39;bar&#39; }

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tests should check that using Basic::Exports exports &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; to the appropriate namespace and that they return the appropriate values. Another test is that the code &lt;code&gt;use Basic::Exports ();&lt;/code&gt; exports &lt;em&gt;neither&lt;/em&gt; function.&lt;/p&gt;

&lt;h4 id=&#34;optional-exports&#34;&gt;Optional Exports&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package Optional::Exports;

use strict;

use base &#39;Exporter&#39;;
use vars &#39;@EXPORT_OK&#39;;

@EXPORT_OK = qw( foo bar baz );

sub foo { &#39;foo&#39; }
sub bar { &#39;bar&#39; }
sub baz { &#39;baz&#39; }

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tests should check that Optional::Exports exports nothing by default and only those functions named, if there are any.&lt;/p&gt;

&lt;h4 id=&#34;load-time-behavior&#34;&gt;Load-time Behavior&lt;/h4&gt;

&lt;p&gt;A few modules have curious behavior. My Pod::ToDemo behaves differently when invoked from the command line versus when used within a module. This makes it substantially more difficult to test. Rather than make you reinvent the tests there, here&amp;rsquo;s a simpler custom &lt;code&gt;import()&lt;/code&gt; that does different things based on its invocation. If invoked from the command line, it prints a message to standard output. If used from a module, it exports the same &lt;code&gt;foo()&lt;/code&gt; subroutine as before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Export::Weird;

use strict;

sub import
{
    my ($package, undef, $line) = caller();

    if ( $line == 0 )
    {
        print &amp;quot;Invoked from command-line\n&amp;quot;;
    }
    else
    {
        no strict &#39;refs&#39;;
        *{ $package . &#39;::foo&#39; } = sub { &#39;foo&#39; };
    }
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only really tricky test here must exercise the behavior of the module when invoked from the command line. Assume that the documentation of the module suggests invoking it via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MExport::Weird -e 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next page explains some techniques for testing these examples. For best results, spend between 30 and 45 minutes working through the kata on your own before looking at the hints. For more information on how modules, &lt;code&gt;use&lt;/code&gt;, and &lt;code&gt;require&lt;/code&gt; work, see &lt;code&gt;perldoc perlmod&lt;/code&gt; and &lt;code&gt;perldoc perlfunc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tips-tricks-and-suggestions&#34;&gt;Tips, Tricks, and Suggestions&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve worked your way through writing tests for the three examples, here are the approaches I would take. They&amp;rsquo;re not the only ways to test these examples, but they do work. First, here is some background information on what&amp;rsquo;s happening.&lt;/p&gt;

&lt;h4 id=&#34;reloading&#34;&gt;Reloading&lt;/h4&gt;

&lt;p&gt;To test &lt;code&gt;import()&lt;/code&gt; properly, you must understand its implications. When Perl encounters a &lt;code&gt;use module;&lt;/code&gt; statement, it executes a two-step process &lt;em&gt;immediately&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BEGIN
{
    require module;
    module-&amp;gt;import();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can subvert both of these processes. To force Perl to reload a module, you can delete its entry from &lt;code&gt;%INC&lt;/code&gt;. Note that all of the keys of this special hash represent pathnames in Unix format. For example, even if you use Windows or VMS or Mac OS 9 or earlier, loading Filter::Simple successfully should result in &lt;code&gt;%INC&lt;/code&gt; containing a true value for the key of &lt;code&gt;Filter/Simple.pm&lt;/code&gt;. (You may also want to use the &lt;code&gt;delete_package()&lt;/code&gt; function of the Symbol module to clear out the namespace, though beware of the caveats there.) Now you can &lt;code&gt;require&lt;/code&gt; the module again.&lt;/p&gt;

&lt;h4 id=&#34;re-importing&#34;&gt;Re-importing&lt;/h4&gt;

&lt;p&gt;Next, you&amp;rsquo;ll have to call &lt;code&gt;import()&lt;/code&gt; manually. It&amp;rsquo;s a normal class method call, however, so you can provide all of the arguments as you would to a function or method call.&lt;/p&gt;

&lt;p&gt;You can also switch packages, though make sure that you qualify any calls to Test::* module functions appropriately:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Some::Other::Package;

module-&amp;gt;import( @args );

main::ok( 1, &#39;some test label&#39; );

# or 

::ok( 1, &#39;some test label&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;testing-exports&#34;&gt;Testing Exports&lt;/h4&gt;

&lt;p&gt;There are at least two techniques for checking the import of functions. One is the use of the &lt;code&gt;defined&lt;/code&gt; keyword and the other is through the &lt;code&gt;can()&lt;/code&gt; class method. For example, tests for Example #1 might be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use_ok( &#39;Basic::Exports&#39; );
ok( defined &amp;amp;foo,              &#39;module should export foo()&#39; )
ok( __PACKAGE__-&amp;gt;can( &#39;bar&#39; ), &#39;... and should export bar()&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test that these are the right functions, call them as normal and check their return values.&lt;/p&gt;

&lt;p&gt;By the way, the presence of the &lt;code&gt;__PACKAGE__&lt;/code&gt; symbol there allows this test to take place in other namespaces. If you haven&amp;rsquo;t imported the &lt;code&gt;ok()&lt;/code&gt; test function into this namespace, remember to qualify it, import it manually, or alias it so that the test program will itself run. (It may fail, which is fine, but errors in your tests are difficult and embarrassing to fix.)&lt;/p&gt;

&lt;h4 id=&#34;testing-non-exports&#34;&gt;Testing Non-Exports&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s difficult to prove a negative conclusively, but if you reverse the condition of a test, you can have good confidence that the module hasn&amp;rsquo;t provided anything unwanted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use_ok( &#39;Optional::Exports&#39; );
ok( ! __PACKAGE__-&amp;gt;can( &#39;foo&#39; ),
    &#39;module should not export foo() by default&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only tricky part of the tests here is in trying to import functions again. Call &lt;code&gt;import()&lt;/code&gt; explicitly as a class method of the module. Switching packages within the test can make this easier; you don&amp;rsquo;t have to unload the module if you do this.&lt;/p&gt;

&lt;h4 id=&#34;testing-weird-exports&#34;&gt;Testing Weird Exports&lt;/h4&gt;

&lt;p&gt;The easist way to test an &lt;code&gt;import()&lt;/code&gt; function that relies on command-line invocation or produces weird side effects that you may not want to handle in your current program is to launch it as a separate program. There are plenty of options for this, from &lt;code&gt;system&lt;/code&gt; to &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; to tricks with pipes and shell redirection. &lt;a href=&#34;https://metacpan.org/pod/IPC::Open3&#34;&gt;IPC::Open3&lt;/a&gt; is one good approach, if you want to use it in your test suite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! perl

use strict;
use warnings;

use blib;
use IPC::Open3;

use Test::More tests =&amp;gt; 3;

use_ok( &#39;Export::Weird&#39; );

my $pid = open3(
    undef, my $reader, undef,
    $^X, &#39;-Mblib&#39;, &#39;-MExport::Weird&#39;, &#39;-e&#39;, &#39;1&#39;
);

my @out = &amp;lt;$reader&amp;gt;;
is( @out,                                1,
    &#39;cli invocation should print one line&#39; );
is( $out[0], &amp;quot;Invoked from command-line\n&amp;quot;,
    &#39;... with the right message&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$^X&lt;/code&gt; represents the path to the Perl binary currently executing this program. The &lt;code&gt;-Mblib&lt;/code&gt; switch loads the &lt;code&gt;blib&lt;/code&gt; module to set &lt;code&gt;@INC&lt;/code&gt; in the program appropriately. Depending on how you&amp;rsquo;ve set up your directories and invoke this program, you may have to change this. The other commands follow the invocation scheme given in Example #3.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You should now have several ideas on how to test &lt;code&gt;import()&lt;/code&gt; methods of various kinds. For more details, read the tests of &lt;a href=&#34;https://metacpan.org/pod/Pod::ToDemo&#34;&gt;Pod::ToDemo&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/Test::Builder&#34;&gt;Test::Builder&lt;/a&gt;, which play strange games to achieve good test coverage.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve found a differently workable approach, I&amp;rsquo;d like to hear from you. Also, if you have suggestions for another kata (or would like to write one), please let me know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic is the author of &lt;a href=&#34;http://onyxneon.com/books/modern_perl/&#34;&gt;Modern Perl&lt;/a&gt;. In his spare time, he has been working on &lt;a href=&#34;https://trendshare.org/how-to-invest/&#34;&gt;helping novices understand stocks and investing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

