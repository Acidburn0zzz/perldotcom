<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catalyst on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/catalyst/</link>
    <description>Recent content in Catalyst on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 13:40:05 +0000</lastBuildDate>
    <atom:link href="/tags/catalyst/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - May 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</link>
      <pubDate>Sat, 20 Jun 2020 13:40:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perl Layout Executor with &lt;a href=&#34;https://metacpan.org/pod/App::plx&#34;&gt;App::plx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FIDO::Raw&#34;&gt;FIDO::Raw&lt;/a&gt; provides bindings to the libfido2 library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::LibProj::cs2cs&#34;&gt;Geo::LibProj::cs2cs&lt;/a&gt; is a wrapper for the cs2cs command line client, part of the PROJ coordinate transformation library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Nauty&#34;&gt;Graph::Nauty&lt;/a&gt; provides bindings to Nauty (No AUTomorphisms, Yes?)&lt;/li&gt;
&lt;li&gt;Post OCR requests to ocr.space&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/OCR::OcrSpace&#34;&gt;OCR::OcrSpace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create reciples to declare and resolve dependencies between things with &lt;a href=&#34;https://metacpan.org/pod/Beam::Make&#34;&gt;Beam::Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography Library with &lt;a href=&#34;https://metacpan.org/pod/Crypto::ECC&#34;&gt;Crypto::ECC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::Redis&#34;&gt;HealthCheck::Diagnostic::Redis&lt;/a&gt; provides a healthcheck for Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SMTP&#34;&gt;HealthCheck::Diagnostic::SMTP&lt;/a&gt; performs a connectivity healthcheck to an SMTP mail server&lt;/li&gt;
&lt;li&gt;Show diffs of changes to files managed by Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Hook::File::Diff&#34;&gt;Rex::Hook::File::Diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mask secrets in log files with &lt;a href=&#34;https://metacpan.org/pod/String::Secret&#34;&gt;String::Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Groups&#34;&gt;File::Groups&lt;/a&gt; returns file extensions and media types for different files&lt;/li&gt;
&lt;li&gt;Get Digi-ID implementation with &lt;a href=&#34;https://metacpan.org/pod/DigiByte::DigiID&#34;&gt;DigiByte::DigiID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get elevation data for a given lat/lon using &lt;a href=&#34;https://metacpan.org/pod/Geo::Elevation::HGT&#34;&gt;Geo::Elevation::HGT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Karabiner&#34;&gt;JSON::Karabiner&lt;/a&gt; can easy JSON code generaation for Karabiner-Elements, the macOS keyboard customizer&lt;/li&gt;
&lt;li&gt;Validate JSON against a schema against the latest draft with &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Draft201909&#34;&gt;JSON::Schema::Draft201909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Documentation and tools for using Platypus with Go: &lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus::Lang::Go&#34;&gt;FFI::Platypus::Lang::Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::IO::Impl::Glib&#34;&gt;Future::IO::Impl::Glib&lt;/a&gt; implement Future::IO using Glib&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mu::Tiny&#34;&gt;Mu::Tiny&lt;/a&gt; is an even tinier object system&lt;/li&gt;
&lt;li&gt;Get a Try-Catch block (uses PPI) via &lt;a href=&#34;https://metacpan.org/pod/Nice::Try&#34;&gt;Nice::Try&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Number::Textify&#34;&gt;Number::Textify&lt;/a&gt; turns numbers into human-readable strings (customizable)&lt;/li&gt;
&lt;li&gt;Write composable, reusable tests with roles and Moo using &lt;a href=&#34;https://metacpan.org/pod/Test2::Roo&#34;&gt;Test2::Roo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::BNO055&#34;&gt;Device::Chip::BNO055&lt;/a&gt; provides a chip driver for BNO055&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PINE64::GPIO&#34;&gt;PINE64::GPIO&lt;/a&gt; provides an interface to PineA64 and PineA64+ GPIO pins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MojoTemplate&#34;&gt;Catalyst::View::MojoTemplate&lt;/a&gt;: use Mojolicious templates in Catalyst views&lt;/li&gt;
&lt;li&gt;Store Dancer2 session data in serealized files using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::Sereal&#34;&gt;Dancer2::Session::Sereal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find elements in a HTML::Element DOM using CSS selectors with &lt;a href=&#34;https://metacpan.org/pod/HTML::Selector::Element&#34;&gt;HTML::Selector::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Place a limit on &amp;ldquo;concurrent&amp;rdquo; promises with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Limiter&#34;&gt;Mojo::Promise::Limiter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add role-based access with context to a Mojo app via  &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ContextAuth&#34;&gt;Mojolicious::Plugin::ContextAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/POE::Component::SmokeBox::Recent::HTTP&#34;&gt;POE::Component::SmokeBox::Recent::HTTP&lt;/a&gt; is an extremely minimal HTTP client&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</link>
      <pubDate>Wed, 29 Apr 2020 01:05:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get a colorful calendar in the terminal with &lt;a href=&#34;https://metacpan.org/pod/week&#34;&gt;App::week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::reCAPTCHA::v3&#34;&gt;Google::reCAPTCHA::v3&lt;/a&gt; is another Google captcha module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GraphQL::Client&#34;&gt;GraphQL::Client&lt;/a&gt; â€¦ is a GraphQL client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Masscan::Scanner&#34;&gt;Masscan::Scanner&lt;/a&gt; makes it easy to use the masscan port scanner.&lt;/li&gt;
&lt;li&gt;Make non-blocking requests to LastFM with &lt;a href=&#34;https://metacpan.org/pod/Mojo::WebService::LastFM&#34;&gt;Mojo::WebService::LastFM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Telegram&amp;rsquo;s Bot API with &lt;a href=&#34;https://metacpan.org/pod/Net::API::Telegram&#34;&gt;Net::API::Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::OpenVAS&#34;&gt;Net::OpenVAS&lt;/a&gt; let&amp;rsquo;s you program Greenbone&amp;rsquo;s OpenVAS platform with Perl&lt;/li&gt;
&lt;li&gt;Use Elasticsearch 6.x APIs with &lt;a href=&#34;https://metacpan.org/pod/Search::Elasticsearch::Client::6_0&#34;&gt;Search::Elasticsearch::Client::6_0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Block::NJH&#34;&gt;Block::NJH&lt;/a&gt; is interesting; add it to your CPAN distribution to &amp;ldquo;prevent your tests from running on NJH&amp;rsquo;s broken smokers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Structured&#34;&gt;Config::Structured&lt;/a&gt; provides &amp;ldquo;generalized and structured configuration value access&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Ping a database handle to check its health using &lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHPing&#34;&gt;HealthCheck::Diagnostic::DBHPing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::FilePermissions&#34;&gt;HealthCheck::Diagnostic::FilePermissions&lt;/a&gt; checks filepaths for expected permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DB::Object&#34;&gt;DB::Object&lt;/a&gt; is a database abstraction built on top of DBI&lt;/li&gt;
&lt;li&gt;Inspect DBIC objects in a compact format using &lt;a href=&#34;https://metacpan.org/pod/Data::Tersify::Plugin::DBIx::Class&#34;&gt;Data::Tersify::Plugin::DBIx::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MIME::Base32::XS&#34;&gt;MIME::Base32::XS&lt;/a&gt; is a faster Base32 encoder/decoder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Statistics::Covid&#34;&gt;Statistics::Covid&lt;/a&gt; fetches and manages Covid-19 statistics&lt;/li&gt;
&lt;li&gt;Get a Postgresql mock server for testing via &lt;a href=&#34;https://metacpan.org/pod/Test::PostgreSQL::Docker&#34;&gt;Test::PostgreSQL::Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bind Perl data structures into XML with &lt;a href=&#34;https://metacpan.org/pod/XML::BindData&#34;&gt;XML::BindData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XML::Minifier&#34;&gt;XML::Minifier&lt;/a&gt; is a configurable XML minifier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::Wherefore&#34;&gt;Devel::Wherefore&lt;/a&gt; helps debug Perl: &amp;ldquo;Where the heck did these subroutines come from?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Create relative symbolic links &lt;a href=&#34;https://metacpan.org/pod/File::Symlink::Relative&#34;&gt;File::Symlink::Relative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Generic&#34;&gt;Module::Generic&lt;/a&gt; is another class library, it uses AUTOLOAD for getter/setter methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/new&#34;&gt;new&lt;/a&gt; saves you from typing module names twice in one liners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::DB::Taxonomy::sqlite&#34;&gt;Bio::DB::Taxonomy::sqlite&lt;/a&gt; stores and manages NCBI data using sqlite&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Chebyshev&#34;&gt;Math::Polynomial::Chebyshev&lt;/a&gt; creates Chebyshev polynomials&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Store Catalyst sessions in Redis with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::RedisFast&#34;&gt;Catalyst::Plugin::Session::Store::RedisFast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not a traditional distribution, but &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::AWSLambda&#34;&gt;Mojo::Server::AWSLambda&lt;/a&gt; contains a simple example of how to define an AWS Lambda function which uses Mojo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Sticker&#34;&gt;Mojolicious::Plugin::Sticker&lt;/a&gt; combines Mojo apps into a single app&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Inspecting Catalyst</title>
      <link>http://localhost:1313/article/inspecting-catalyst/</link>
      <pubDate>Mon, 11 Nov 2019 10:34:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/inspecting-catalyst/</guid>
      <description>

&lt;p&gt;One of the convenient things about &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; is it lets you register controller methods as actions, so you don&amp;rsquo;t need a separate routing table of URIs to controller methods. A consequence of this though, is that when the web app gets large enough it can be tricky to keep track of all the different paths the app is responding to.&lt;/p&gt;

&lt;p&gt;Catalyst&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::DispatchType::Chained&#34;&gt;chained dispatch&lt;/a&gt; promotes code reuse, but exacerbates the issue by obfuscating route matching. Catalyst also permits declaring controller methods which match an unlimited number of paths after a prefix; another recipe for unpredictablity.&lt;/p&gt;

&lt;p&gt;Take a look at the MetaCPAN &lt;a href=&#34;https://github.com/metacpan/metacpan-web&#34;&gt;source code&lt;/a&gt;. Can you tell all of the routes it responds to?&lt;/p&gt;

&lt;p&gt;As far as I know, the only way is to launch the app in debug mode and Catalyst will print a list of all the controller actions and their URIs. I suppose you could try parsing that output, but that feels like a hack. If we&amp;rsquo;re programming a web app, surely we should be able to programmatically retrieve all the routes &lt;em&gt;we&amp;rsquo;ve&lt;/em&gt; created, without having to launch the app.&lt;/p&gt;

&lt;h2 id=&#34;catalyst-plugin-actionpaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/h2&gt;

&lt;p&gt;With that straw man sufficiently propped up, allow me to introduce &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt;. I wrote it a while ago to implement some &lt;a href=&#34;http://localhost:1313/article/208/2016/1/5/Save-time-with-compile-tests/&#34;&gt;axiomatic&lt;/a&gt; tests at work which checked for misconfigured Catalyst routes.&lt;/p&gt;

&lt;p&gt;The plugin adds the &lt;code&gt;get_action_paths&lt;/code&gt; method to the Catalyst context object. The method returns an arrayref of the application&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Action&#34;&gt;Catalyst::Action&lt;/a&gt; objects. The way Catalyst&amp;rsquo;s routing works is it loops through every action object until it finds one that matches the request, or returns in failure.&lt;/p&gt;

&lt;p&gt;To use the ActionPaths plugin on the MetaCPAN app I forked and cloned the &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;repo&lt;/a&gt;, and added the ActionPaths plugin to the application &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After installing &lt;a href=&#34;https://metacpan.org/pod/Carton&#34;&gt;Carton&lt;/a&gt; from the root project directory I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ carton install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which installed of the applications dependencies into the &lt;code&gt;./local&lt;/code&gt; directory. This is a nice way to avoid clobbering your system or user-installed modules with the application&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;I also had to install the libxml2-dev and node-less Ubuntu packages to provide all of the app&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;Finally I wrote this &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/d17066f41945692a960ba80ed1865f22286efb78&#34;&gt;script&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.16&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cwd;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Basename;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Spec;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $root_dir;
&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bin_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::Basename::dirname(__FILE__);
  $root_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cwd::abs_path(File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;catdir($bin_dir, File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;updir));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/local/lib/perl5&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# carton installed deps&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/lib&amp;#34;&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;# root application dir&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst::Test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MetaCPAN::Web&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($res, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ctx_request(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_action_paths}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It begins by figuring out the root application directory, and adding the paths to the local Carton-installed and the MetaCPAN project modules (it uses &lt;a href=&#34;https://metacpan.org/pod/lib&#34;&gt;lib&lt;/a&gt; to catch architecture specific nested paths).&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; to load the MetaCPAN::Web application. Catalyst::Test exports the &lt;code&gt;ctx_request&lt;/code&gt; method, which returns the Catalyst context object &lt;code&gt;$c&lt;/code&gt;. From there I can call &lt;code&gt;get_action_paths&lt;/code&gt; and print out all the routes served by MetaCPAN.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bin/dump-catalyst-paths
MetaCPAN::Web::Controller::Root   index           /
MetaCPAN::Web::Controller::Root   default         /...
MetaCPAN::Web::Controller::About  about           /about/
MetaCPAN::Web::Controller::About  contact         /about/contact/
MetaCPAN::Web::Controller::About  contributors    /about/contributors/
MetaCPAN::Web::Controller::About  development     /about/development/
MetaCPAN::Web::Controller::About  faq             /about/faq/
MetaCPAN::Web::Controller::About  meta_hack       /about/meta_hack/
MetaCPAN::Web::Controller::About  metadata        /about/metadata/
MetaCPAN::Web::Controller::About  missing_modules /about/missing_modules/
MetaCPAN::Web::Controller::About  resources       /about/resources/
MetaCPAN::Web::Controller::About  sponsors        /about/sponsors/
MetaCPAN::Web::Controller::About  stats           /about/stats/
MetaCPAN::Web::Controller::Author index           /author/*
# output truncated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An asterisk in the path is a placeholder. An ellipses means the path accepts unlimited(!) placeholders.&lt;/p&gt;

&lt;p&gt;In this case I&amp;rsquo;m just printing the controller methods and URIs they match, but you could implement all kinds of checks on the Catalyst::Action objects to detect violations of agreed upon development best practices.&lt;/p&gt;

&lt;h2 id=&#34;a-better-way&#34;&gt;A better way&lt;/h2&gt;

&lt;p&gt;The solution above works, but it feels a bit gross. I&amp;rsquo;ve added a plugin to the Catalyst app which the app doesn&amp;rsquo;t actually use. The script fakes a request to the app &lt;em&gt;just&lt;/em&gt; to get &lt;code&gt;$c&lt;/code&gt;. I&amp;rsquo;m using a test module but running no tests. Surely there is a better way.&lt;/p&gt;

&lt;p&gt;Typically, Catalyst applications call the &lt;code&gt;setup&lt;/code&gt; method in the application module (for MetaCPAN that&amp;rsquo;s &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/blob/7866904ca299701bfa850c10a9e0456f73109bc4/lib/MetaCPAN/Web.pm&#34;&gt;MetaCPAN::Web&lt;/a&gt;). The &lt;code&gt;setup&lt;/code&gt; method bootstraps the web application, doing things like configuring directories, initializing the logger, loading plugins and building the request dispatcher. These are stored in the application package which is a singleton.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Catalyst::Plugin::ActionPaths::get_action_paths&lt;/code&gt; uses the Catalyst context to get the dispatcher object, which is all it needs to extract the paths from the Catalyst app. So instead of using &lt;code&gt;request_ctx&lt;/code&gt; to get the context to get the dispatcher, I can just stand up the application myself and pluck the dispatcher out of the application package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; MetaCPAN::Web; &lt;span style=&#34;color:#75715e&#34;&gt;# calls setup()&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dispatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MetaCPAN::Web&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dispatcher;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if I re-write the &lt;code&gt;get_action_paths&lt;/code&gt; method to just use the dispatcher object directly, I can extract all the paths from the app without using &lt;code&gt;request_ctx&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_action_paths($dispatcher);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$actions}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works. Of course if I can dynamically load the MetaCPAN app and extract its routes, then I can do that for any Catalyst app. That&amp;rsquo;s what &lt;a href=&#34;https://gist.github.com/dnmfarrell/cad2c6f6395850cb1ceca48b3ba05b7c&#34;&gt;dump-catalyst-paths&lt;/a&gt; does. To dump a Catalyst app&amp;rsquo;s routes just provide the package name and any additional paths to include:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./dump-catalyst-routes MetaCPAN::Web lib local/lib/perl5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;postscript&#34;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re just a couple of months past the 10th anniversary of the publication of &lt;a href=&#34;https://www.apress.com/gp/book/9781430223658&#34;&gt;Catalyst: The Definitive Guide&lt;/a&gt;. Two of our core applications at work are Catalyst apps. As one of Perl&amp;rsquo;s premier MVC apps, it&amp;rsquo;s remarkable how resilient it&amp;rsquo;s been. That&amp;rsquo;s a testament to the implementation (which got a lot of things right) and more recently the work done by its maintainer &lt;a href=&#34;https://metacpan.org/author/JJNAPIORK&#34;&gt;John Napiorkowski&lt;/a&gt;. Thanks John!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re considering web application programming with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt; frameworks are modern alternatives to Catalyst.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2019/</link>
      <pubDate>Thu, 11 Apr 2019 01:41:28 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PhotoDB&#34;&gt;App::PhotoDB&lt;/a&gt; manages photography data&lt;/li&gt;
&lt;li&gt;Get command line utils for identifying module dependencies, function names and more with &lt;a href=&#34;https://metacpan.org/pod/App::perlutils&#34;&gt;App::perlutils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::rsync::retry&#34;&gt;App::rsync::retry&lt;/a&gt; wraps Rsync to retry on transfer errors&lt;/li&gt;
&lt;li&gt;Print horizontal rules of different styles ot the terminal with &lt;a href=&#34;https://metacpan.org/pod/App::term::hr&#34;&gt;App::term::hr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run Perl scripts in AWS Lambda with &lt;a href=&#34;https://metacpan.org/pod/AWS::Lambda&#34;&gt;AWS::Lambda&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DNS::Unbound&#34;&gt;DNS::Unbound&lt;/a&gt; provides an interface to NLNetLabs&amp;rsquo;s recursive DNS resolver&lt;/li&gt;
&lt;li&gt;Download a deck from speakerdeck.com with &lt;a href=&#34;https://metacpan.org/pod/WWW::Speakerdeck::Download&#34;&gt;WWW::Speakerdeck::Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Tk::JThumbnail&#34;&gt;Tk::JThumbnail&lt;/a&gt; is a file browser implemented in Tk&lt;/li&gt;
&lt;li&gt;Pixela is an activity tracking service, use it from Perl with &lt;a href=&#34;https://metacpan.org/pod/WebService::Pixela&#34;&gt;WebService::Pixela&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Slack::WebHook&#34;&gt;Slack::WebHook&lt;/a&gt; can post to a Slack webhook with preset layouts and colors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::ValidSign&#34;&gt;WebService::ValidSign&lt;/a&gt; provides a REST API client for ValidSign, the digital signature app&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/distribution/App-ucpan/script/ucpan&#34;&gt;App::ucpan&lt;/a&gt; updates CPAN modules with easy-to-read information&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dotenv&#34;&gt;Dotenv&lt;/a&gt; supports per-environment configurations, which is the &lt;em&gt;only&lt;/em&gt; way to do them in 12 factor apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chart::GGPlot&#34;&gt;Chart::GGPlot&lt;/a&gt; is an ambitious port of ggplot2 to Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Faker::Country&#34;&gt;Data::Faker::Country&lt;/a&gt; provides country and ISO country code data generation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Traverse&#34;&gt;Graph::Traverse&lt;/a&gt; adds a traverse() method for the Graph module&lt;/li&gt;
&lt;li&gt;Syndicate in JSON using &lt;a href=&#34;https://metacpan.org/pod/JSON::Feed&#34;&gt;JSON::Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Protocol::Database::PostgreSQL&#34;&gt;Protocol::Database::PostgreSQL&lt;/a&gt; is a PostgreSQL wire protocol implementation for Database::Async&lt;/li&gt;
&lt;li&gt;Quickly test if two arrays are identical using &lt;a href=&#34;https://metacpan.org/pod/Arrays::Same&#34;&gt;Arrays::Same&lt;/a&gt; (implemented in XS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Control the GPIO pins on the original NTC Chip with &lt;a href=&#34;https://metacpan.org/pod/Device::NTCChip::GPIO&#34;&gt;Device::NTCChip::GPIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Yeelight&#34;&gt;Device::Yeelight&lt;/a&gt; is a controller for Yeelight smart devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Giblog&#34;&gt;Giblog&lt;/a&gt; is an HTML blog builder backed by Git&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTTP::Simple&#34;&gt;HTTP::Simple&lt;/a&gt; provides a simple procedural interface to HTTP::Tiny&lt;/li&gt;
&lt;li&gt;Remove the Server header from the Mojolicious response using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::NoServerHeader&#34;&gt;Mojolicious::Plugin::NoServerHeader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::TextExceptions&#34;&gt;Mojolicious::Plugin::TextExceptions&lt;/a&gt; renders exceptions as text for command line user agents&lt;/li&gt;
&lt;li&gt;Use Wordpress as a headless CMS with &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Wordpress&#34;&gt;Mojolicious::Plugin::Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Catch unreachable code after a Catalyst &lt;code&gt;detach&lt;/code&gt; using &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::Catalyst::ProhibitUnreachableCode&#34;&gt;Perl::Critic::Policy::Catalyst::ProhibitUnreachableCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Perl and CGI</title>
      <link>http://localhost:1313/article/perl-and-cgi/</link>
      <pubDate>Mon, 12 Nov 2018 10:36:08 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-and-cgi/</guid>
      <description>

&lt;p&gt;CGI stands for &lt;a href=&#34;https://tools.ietf.org/html/rfc3875#section-6.2.1&#34;&gt;Common Gateway Interface&lt;/a&gt;, it&amp;rsquo;s a protocol for executing scripts via web requests, and in the late 1990&amp;rsquo;s was the main way to write dynamic programs for the Web. It&amp;rsquo;s also the name of the Perl &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;module&lt;/a&gt; we used (and for me, still use) to code for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; you probably don&amp;rsquo;t want to use CGI for modern web development, see &lt;a href=&#34;#why-not-to-use-cgi&#34;&gt;Why Not to Use CGI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-and-http&#34;&gt;CGI and HTTP&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of HTTP (HyperText Transfer Protocol), which is the communications protocol used by most Internet services. Broadly speaking, CGI programs receive HTTP requests, and return HTTP responses. An HTTP response header must include the status and the content-type. CGI (the interface) makes this easy.&lt;/p&gt;

&lt;p&gt;We could hardcode a Perl script to return an HTTP response header and HTML in the body:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
Status: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But CGI.pm can handle the header for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you don&amp;rsquo;t have to just send HTML text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
This is now text
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that is not the limit, by far. The content-type is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;Multipurpose Internet Mail Extension (MIME) type&lt;/a&gt;, and it determines how the browser handles the message once it returns. The above example treats the &amp;ldquo;This is now text&amp;rdquo; message as text, and displays it as such. If the content-type was &amp;ldquo;text/html&amp;rdquo;, it would be parsed for HTML like a web page. If it was &amp;ldquo;application/json&amp;rdquo;, it might be displayed like text, or formatted into a browsable form, depending on your browser or extensions. If it was &amp;ldquo;application/vnd.ms-excel&amp;rdquo; or even &amp;ldquo;text/csv&amp;rdquo;, the browser would likely open in in Excel or another spreadsheet program, or possibly directly into a gene sequencer, like happens to those I generate at work.&lt;/p&gt;

&lt;p&gt;And, if the program was this &amp;ndash;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpg&amp;#39;&lt;/span&gt; );
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/user/images/author/dave-jacoby.jpg&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$img&amp;gt;&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;ndash; you would get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/author/dave-jacoby.jpg&#34; alt=&#34;/images/author/dave-jacoby.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;processing-input&#34;&gt;Processing input&lt;/h2&gt;

&lt;p&gt;The first way to pass data is with the query string, (the portion of a URI beginning with &lt;code&gt;?&lt;/code&gt;), which you see in URLs like &lt;code&gt;https://example.com/?foo=bar&lt;/code&gt;. This uses the &amp;ldquo;GET&amp;rdquo; request method, and becomes available to the program as &lt;code&gt;$ENV-&amp;gt;{QUERY_STRING}&lt;/code&gt;, which in this case is &lt;code&gt;foo=bar&lt;/code&gt; (CGI programs receive their arguments as environment variables). But CGI provides the &lt;code&gt;param&lt;/code&gt; method which parses the query string into key value pairs, so you can work with them like a hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param($_) } $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param() ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qq{PARAM:\N}&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $k ( sort keys %param ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, $k, $param{$k};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;# PARAM:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# foo: bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, now, let&amp;rsquo;s make a web page like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/url/of/simple.cgi&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And click submit. The browser will send an HTTP &amp;ldquo;POST&amp;rdquo; request, with the form input as key value pairs in the request body. CGI handles this and places the data in &lt;code&gt;$cgi-&amp;gt;param&lt;/code&gt;, just like with &amp;ldquo;GET&amp;rdquo;. Only, with &amp;ldquo;POST&amp;rdquo; the size of input can be much larger (URL&amp;rsquo;s are generally limited to 2048 bytes by browsers).&lt;/p&gt;

&lt;h2 id=&#34;generating-html&#34;&gt;Generating HTML&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make that form above, using the HTML-generation techniques that come with CGI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output;
$output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start_form(
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/simple.cgi&amp;#34;&lt;/span&gt;
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;textfield( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_form;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with this, is the code to generate HTML with CGI can get very long and unreadable. The maintainers of CGI agree, which is why this is at the top of &lt;a href=&#34;https://metacpan.org/pod/CGI#HTML-Generation-functions-should-no-longer-be-used&#34;&gt;the documentation for CGI.pm&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All HTML generation functions within CGI.pm are no longer being maintained. [&amp;hellip;] The rationale for this is that the HTML generation functions of CGI.pm are an obfuscation at best and a maintenance nightmare at worst. You should be using a template engine for better separation of concerns. See &lt;a href=&#34;https://metacpan.org/pod/CGI::Alternatives&#34;&gt;CGI::Alternatives&lt;/a&gt; for an example of using CGI.pm with the &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Template Toolkit, that form might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Template;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;DATA&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/url/of/program&amp;#39;&lt;/span&gt;} ;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;
$template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;process(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$input,$data)
    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Template process failed&amp;#34;&lt;/span&gt;, $template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error();

__DATA__
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[% action %]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use Template Toolkit for all my server-side web work. It&amp;rsquo;s also the default in many of Perl&amp;rsquo;s web frameworks.&lt;/p&gt;

&lt;h2 id=&#34;configuring-cgi-on-apache&#34;&gt;Configuring CGI on Apache&lt;/h2&gt;

&lt;p&gt;To use CGI, your web server should have &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_cgi.html&#34;&gt;mod_cgi&lt;/a&gt; installed. Once installed, you will have to to configure your server to execute CGI programs.&lt;/p&gt;

&lt;p&gt;The first way is to have &lt;code&gt;cgi-bin&lt;/code&gt; directories where every file gets executed instead of transferred.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www/cgi-bin&amp;quot;&amp;gt;
    Options ExecCGI
    SetHandler cgi-script
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other is to allow CGI to be enabled per directory, with a configuration that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www&amp;quot;&amp;gt;
    Options +ExecCGI
    AddHandler cgi-script .cgi
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add a &lt;code&gt;.htaccess&lt;/code&gt; file in each directory that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler cgi-script .cgi
Options +ExecCGI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that &lt;code&gt;foo.pl&lt;/code&gt; will transfer but &lt;code&gt;foo.cgi&lt;/code&gt; will run, even if both are executable.&lt;/p&gt;

&lt;h2 id=&#34;why-not-to-use-cgi&#34;&gt;Why not to use CGI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg202130.html&#34;&gt;In May 2013, Ricardo Signes, then Perl5 Pumpking, sent this to the Perl5 Porters list&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it&amp;rsquo;s time to seriously consider removing CGI.pm from the core distribution. It is no longer what I&amp;rsquo;d point &lt;em&gt;anyone&lt;/em&gt; at for writing &lt;em&gt;any&lt;/em&gt; sort of web code. It is in the core, as far as I know, because once it was the state of the art, and a major reason for many people to use the language. I don&amp;rsquo;t think either is true now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was marked deprecated with 5.20 and removed from Core with 5.22. This is not catastrophic; it is still available in CPAN, so you would have to install it, or have your administrator install it, depending on your circumstances.&lt;/p&gt;

&lt;p&gt;So, why did CGI drop from &amp;ldquo;state of the art&amp;rdquo; to discouraged by its own maintainers?&lt;/p&gt;

&lt;p&gt;There are two big issues with CGI: speed and complexity. Every HTTP request triggers the forking of a new process on the web server, which is costly for server resources. A more efficient and faster way is to use a multi-process daemon which does its forking on startup and maintains a pool of processes to handle requests.&lt;/p&gt;

&lt;p&gt;CGI isn&amp;rsquo;t good at managing the complexity of larger web applications: it has no MVC architecture to help developers separate concerns. This tends to lead to hard-to-maintain programs.&lt;/p&gt;

&lt;p&gt;The rise of web frameworks such as Ruby on Rails, and the application servers they run on, have done much to solve both problems. There are many web frameworks written in Perl; among the most popular are &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Manual&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CGI also contains a security &lt;a href=&#34;https://metacpan.org/pod/distribution/CGI/lib/CGI.pod#Fetching-the-value-or-values-of-a-single-named-parameter&#34;&gt;vulnerability&lt;/a&gt; which must be coded around to avoid parameter injection.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;good&amp;rdquo; parts of CGI.pm, the header creation and parameter parsing, are well-explained in the module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;documentation&lt;/a&gt;. As for the deprecated HTML generation functions, they are documented &lt;a href=&#34;https://metacpan.org/pod/CGI::HTML::Functions&#34;&gt;separately&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lincoln Stein, the creator of CGI.pm also wrote the &lt;a href=&#34;https://www.amazon.com/Official-Guide-Programming-CGI-pm-Lincoln/dp/0471247448&#34;&gt;Official Guide&lt;/a&gt;. The book is 20 years old, and out of date but remains a clear and concise resource about CGI.pm.&lt;/p&gt;

&lt;p&gt;Lee Johnson, the current maintainer of CGI.pm wrote a long form blog &lt;a href=&#34;https://leejo.github.io/2016/02/22/all_software_is_legacy/&#34;&gt;post&lt;/a&gt; about the history of CGI, its current state and future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Saying Goodbye to search.cpan.org</title>
      <link>http://localhost:1313/article/saying-goodbye-to-search-cpan-org/</link>
      <pubDate>Tue, 26 Jun 2018 17:00:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/saying-goodbye-to-search-cpan-org/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve visited &lt;em&gt;search.cpan.org&lt;/em&gt; in the last day or
so, you may have noticed that the site is now directing all of its
traffic to &lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan.org&lt;/a&gt;. Let&amp;rsquo;s talk about what this change
means.&lt;/p&gt;

&lt;h3 id=&#34;why-is-this-change-taking-place&#34;&gt;Why is this change taking place?&lt;/h3&gt;

&lt;p&gt;The maintainers behind &lt;em&gt;search.cpan.org&lt;/em&gt; have decided
that it&amp;rsquo;s time to move on. After many, many years of keeping this site up and
running they have decided to pass on the torch (and the traffic) to
&lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan.org&lt;/a&gt;. Myself and the rest of the MetaCPAN team
have been working very hard to prepare for the influx of new traffic (and new
users). On behalf of Perl users everywhere, the we&amp;rsquo;d like to thank
&lt;a href=&#34;https://log.perl.org/2018/05/goodbye-search-dot-cpan-dot-org.html&#34;&gt;Graham Barr and all of the crew&lt;/a&gt;
behind &lt;em&gt;search.cpan.org&lt;/em&gt; for their many years of
working behind the scenes to keep this valuable resource up and running.&lt;/p&gt;

&lt;h3 id=&#34;how-does-this-change-cpan&#34;&gt;How does this change CPAN?&lt;/h3&gt;

&lt;p&gt;It doesn&amp;rsquo;t. CPAN is the central repository of uploaded Perl modules. Both
&lt;em&gt;search.cpan.org&lt;/em&gt; and
&lt;a href=&#34;https://metacpan.org&#34;&gt;metacpan.org&lt;/a&gt; are search interfaces for CPAN data.
They&amp;rsquo;re layers on top of CPAN. CPAN doesn&amp;rsquo;t know (or care) about them.&lt;/p&gt;

&lt;h3 id=&#34;how-does-this-change-pause&#34;&gt;How does this change PAUSE?&lt;/h3&gt;

&lt;p&gt;See above. Nothing changes on the PAUSE side of things.&lt;/p&gt;

&lt;h3 id=&#34;what-s-the-difference-between-search-cpan-org-and-metacpan-org&#34;&gt;What&amp;rsquo;s the difference between search.cpan.org and metacpan.org?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;search.cpan.org&lt;/em&gt; was the original CPAN module search.
MetaCPAN followed many years later. Unlike
&lt;em&gt;search.cpan.org&lt;/em&gt;, the MetaCPAN site is publicly
available at &lt;a href=&#34;https://github.com/metacpan&#34;&gt;GitHub&lt;/a&gt;. Contributions to the site
are welcome and encouraged. It&amp;rsquo;s very easy to get up and running. If you want
to change the front end of the site, &lt;a href=&#34;https://github.com/metacpan/metacpan-web/#installing-manually&#34;&gt;you can start an app in a couple of
minutes&lt;/a&gt;. If
you want to make changes to the MetaCPAN API, you can &lt;a href=&#34;https://github.com/metacpan/metacpan-developer&#34;&gt;spin up a Vagrant
box&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The MetaCPAN interface has more bells and whistles. This isn&amp;rsquo;t to everyone&amp;rsquo;s
taste, but there is a planned UI overhaul.&lt;/p&gt;

&lt;p&gt;MetaCPAN&amp;rsquo;s search interface does not always return the same results as
&lt;em&gt;search.cpan.org&lt;/em&gt; used to.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in helping improve the UI or search results, please get in
touch either at &lt;a href=&#34;https://github.com/metacpan/metacpan-web&#34;&gt;GitHub&lt;/a&gt; or at
&lt;code&gt;#metacpan&lt;/code&gt; on irc.perl.org.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re a small team and keeping this site up and running is a big
job, so the team is grateful for all contributions.&lt;/p&gt;

&lt;h3 id=&#34;do-i-need-to-create-a-metacpan-account&#34;&gt;Do I need to create a MetaCPAN account?&lt;/h3&gt;

&lt;p&gt;Only if a) you&amp;rsquo;re an author and you want to modify your profile or b) you want
to use the &amp;ldquo;++&amp;rdquo; buttons to upvote your favorite modules.&lt;/p&gt;

&lt;h3 id=&#34;what-does-this-mean-moving-forward&#34;&gt;What does this mean moving forward?&lt;/h3&gt;

&lt;p&gt;It was nice to have two different interfaces to CPAN, because this provided all
of us with a fallback for search results as well as some redundancy. If either
site had downtime, you could just use the other one. This is no longer an
option. However, the interface which we do have is open source, built on an
interesting stack and is a place where you can contribute. Don&amp;rsquo;t like
something?  Please help to fix it.&lt;/p&gt;

&lt;p&gt;MetaCPAN is housed in two different data centers
(&lt;a href=&#34;https://www.bytemark.co.uk/&#34;&gt;Bytemark&lt;/a&gt; in the UK and &lt;a href=&#34;https://www.liquidweb.com/&#34;&gt;Liquid
Web&lt;/a&gt; in the US). The MetaCPAN stack uses
&lt;a href=&#34;https://fastly.com&#34;&gt;Fastly&lt;/a&gt; for caching and redundancy. Other parts
include: Puppet, vagrant, Debian, &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt;,
Elasticsearch, &lt;a href=&#34;https://metacpan.org/pod/Minion&#34;&gt;Minion&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; and
Bootstrap. If you&amp;rsquo;re interested in learning more about any of these
technologies, please get involved with the project. We&amp;rsquo;d love to
have you on board.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When Perl isn&#39;t fast enough</title>
      <link>http://localhost:1313/article/when-perl-isn-t-fast-enough/</link>
      <pubDate>Sun, 28 Jan 2018 21:50:37 +0000</pubDate>
      
      <guid>http://localhost:1313/article/when-perl-isn-t-fast-enough/</guid>
      <description>

&lt;p&gt;Last year at $work we held a web application &amp;ldquo;bake off&amp;rdquo; competition, in order to find a suitable technology stack for serving some important pages on our website, as fast as possible. Our developers were allowed to compete individually or in a team, and they could use any programming language they wanted.&lt;/p&gt;

&lt;p&gt;The existing solution was based on Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; framework using &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt;, and the code had become utterly bloated, to the point at which it took several hundred ms to serve the pages. The issue wasn&amp;rsquo;t with the technology per se: a vanilla Catalyst application can serve responses in under 10ms, the problem was that the application code was shared among several different teams, and as each team added various features and functions, performance degraded.&lt;/p&gt;

&lt;p&gt;The overall aim then, was to see what we could do if we &amp;ldquo;burned it down&amp;rdquo; and started again. The bake off generated a lot of buzz: we were given carte blanche to spend as much time as needed working on it, and it was a lot of fun. We had entries in Python, Go, Java, Haskell, Lua, Node, Elixir and of course, Perl.&lt;/p&gt;

&lt;h1 id=&#34;round-1&#34;&gt;Round 1&lt;/h1&gt;

&lt;p&gt;The goal of the first round was to develop a web application that would respond to certain GET requests by serving a particular template. Much of the template was static, but there was some dynamic logic to it.&lt;/p&gt;

&lt;p&gt;My team built a solution on top of &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt;. We created thin request and response classes in &lt;a href=&#34;https://metacpan.org/pod/Moo&#34;&gt;Moo&lt;/a&gt;, a router coded in C (&lt;a href=&#34;https://metacpan.org/pod/Router::XS&#34;&gt;Router::XS&lt;/a&gt;), and used &lt;a href=&#34;https://metacpan.org/pod/Text::XSlate&#34;&gt;Text::XSlate&lt;/a&gt; for the template. The solution kicked ass - it was able to serve over 10,000 requests per second, and we placed second overall, losing out only to a Java entry.&lt;/p&gt;

&lt;h1 id=&#34;round-2&#34;&gt;Round 2&lt;/h1&gt;

&lt;p&gt;In round 2 things got trickier: our solutions would be required to make several requests to other internal services, in order to formulate the response. Additionally, our solutions would be judged for a &amp;ldquo;joy&amp;rdquo; factor: &lt;em&gt;would developers love working with this stack?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To satisfy the &amp;ldquo;joy&amp;rdquo; factor, we merged our code with another team&amp;rsquo;s entry, based on &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt;. That gave us a real web framework to develop with, as opposed to the threadbare classes we had developed in round 1.&lt;/p&gt;

&lt;p&gt;The requirement to make several requests to other services hurt us though. The kicker was, we had to make the requests concurrently &lt;em&gt;and&lt;/em&gt; compute concurrently on the responses. This was because the data needed for one request was coming from two separate data stores that could be fetched and processed and rendered concurrently. In other words, we needed threading.&lt;/p&gt;

&lt;p&gt;Perl can do asynchronous programming with modules like &lt;a href=&#34;https://metacpan.org/pod/IO::Async&#34;&gt;IO::Async&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/Coro&#34;&gt;Coro&lt;/a&gt;, but it&amp;rsquo;s single threaded. You &lt;em&gt;can&lt;/em&gt; compile Perl with &lt;a href=&#34;https://perldoc.perl.org/threads.html&#34;&gt;threads&lt;/a&gt;, which provide multi-threaded computing. They were developed back in the day by Microsoft to enable &lt;a href=&#34;https://perl.apache.org/&#34;&gt;mod_perl&lt;/a&gt; to run on Windows, in lieu of &lt;code&gt;fork()&lt;/code&gt;. Perl&amp;rsquo;s threads work by cloning the Perl interpreter&amp;rsquo;s internal data structures, and passing around a thread context variable to tell Perl which thread is requesting what data. These have predictable drawbacks: they require more system resources because of the cloned data, and each thread runs &lt;em&gt;slower&lt;/em&gt; than a single threaded Perl because of all the thread context checks.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s inability to multi-thread efficiently forced us to stay single-threaded and it really burnt us: the best performing Java and Go entries&amp;rsquo; throughput were within 3% of each other, but our solution was 50% slower.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Perl is such a versatile language: from the terminal, to scripting and application programming, it excels in many areas. We were able to develop a lightning-fast application that competed with, and bested several high performance language competitors. Ultimately though, $work decided to use Go as for this solution we needed a highly scalable, performant stack.&lt;/p&gt;

&lt;p&gt;Perl 6 might be a viable alternative soon. The latest 6.c &lt;a href=&#34;https://perl6.org/downloads/&#34;&gt;release&lt;/a&gt; includes a hybrid (M:N) threading model via a scheduler which comes into play when using &lt;a href=&#34;https://docs.perl6.org/language/concurrency&#34;&gt;higher level constructs&lt;/a&gt;. To bypass the scheduler and get more control, it has a &lt;a href=&#34;https://docs.perl6.org/type/Thread&#34;&gt;Thread&lt;/a&gt; class, for which each instance maps 1:1 with an OS thread. I suspect it is too slow to compete right now, but I will be watching future Perl 6 benchmarks with interest.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Cover image from &lt;a href=&#34;http://www.psdgraphics.com/psd/rocket-icon-psd/&#34;&gt;psdgraphics.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2017</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---october-2017/</link>
      <pubDate>Thu, 09 Nov 2017 09:07:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---october-2017/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::tt&#34;&gt;App::tt&lt;/a&gt; is a time tracking application for the terminal&lt;/li&gt;
&lt;li&gt;Get bindings for Bitbucket Server REST APIs via &lt;a href=&#34;https://metacpan.org/pod/WebService::BitbucketServer&#34;&gt;WebService::BitbucketServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Oxontime&#34;&gt;WWW::Oxontime&lt;/a&gt; can get live Oxford UK bus departure times&lt;/li&gt;
&lt;li&gt;Inspect Apache errors log with &lt;a href=&#34;https://metacpan.org/pod/App::Elog&#34;&gt;App::Elog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Yandex::Disk&#34;&gt;Yandex::Disk&lt;/a&gt; is a simple API for Yandex Disk&lt;/li&gt;
&lt;li&gt;Parse network device configurations with &lt;a href=&#34;https://metacpan.org/pod/ncp&#34;&gt;ncp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Directory::Scanner&#34;&gt;Directory::Scanner&lt;/a&gt; is a streaming searcher that won&amp;rsquo;t prefetch the results to save resources&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OTRS::OPM::Installer&#34;&gt;OTRS::OPM::Installer&lt;/a&gt; installs dependencies for the ticket manager app&lt;/li&gt;
&lt;li&gt;Format strings with terminal escape codes using &lt;a href=&#34;https://metacpan.org/pod/String::Tagged::Terminal&#34;&gt;String::Tagged::Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Win32::Net::Info&#34;&gt;Win32::Net::Info&lt;/a&gt; can retrieve Windows network adapter information&lt;/li&gt;
&lt;li&gt;Use icon libraries in Wx with &lt;a href=&#34;https://metacpan.org/pod/Wx::Perl::IconDepot&#34;&gt;Wx::Perl::IconDepot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::SeaBASS&#34;&gt;Data::SeaBASS&lt;/a&gt; can read/write &lt;a href=&#34;https://seabass.gsfc.nasa.gov/wiki/System_Description&#34;&gt;SeaBASS&lt;/a&gt; ocean data files&lt;/li&gt;
&lt;li&gt;Get globstar (&lt;code&gt;**&lt;/code&gt;) globbing with &lt;a href=&#34;https://metacpan.org/pod/File::Globstar&#34;&gt;File::Globstar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::Free&#34;&gt;Geo::Coder::Free&lt;/a&gt; provides geocoding functionality using free databases&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::Coder::US::Census&#34;&gt;Geo::Coder::US::Census&lt;/a&gt; provides a geocoding functionality US census.gov data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Display the cumulative test running time with &lt;a href=&#34;https://metacpan.org/pod/App::Prove::Plugin::CumulativeTimer&#34;&gt;App::Prove::Plugin::CumulativeTimer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Defined::KV&#34;&gt;Defined::KV&lt;/a&gt; provides a drop-in replacement function for a common idiom&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Git::RequireUnixEOL&#34;&gt;Dist::Zilla::Plugin::Git::RequireUnixEOL&lt;/a&gt; enforces Unix line endings in your distribution&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Breakdown&#34;&gt;List::Breakdown&lt;/a&gt; can conveniently breakdown lists into sublists&lt;/li&gt;
&lt;li&gt;Easily create named, parameterized types using &lt;a href=&#34;https://metacpan.org/pod/Type::TinyX::Facets&#34;&gt;Type::TinyX::Facets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/roles&#34;&gt;roles&lt;/a&gt; is a simple pragma for composing roles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Convert between braille character sets using &lt;a href=&#34;https://metacpan.org/pod/App::Brl2Brl&#34;&gt;App::Brl2Brl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Translates Portuguese words to Galician using fuzzy replacements with &lt;a href=&#34;https://metacpan.org/pod/Lingua::FuzzyTrans::PT2GL&#34;&gt;Lingua::FuzzyTrans::PT2GL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PGPLOT::Device&#34;&gt;PGPLOT::Device&lt;/a&gt; can autogenerate PGPLOT device names&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Base85&#34;&gt;Math::Base85&lt;/a&gt; provides support for base 85 numbers as defined by RFC 1924&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log Catalyst DBIC querylogs to the console using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::DBIC::ConsoleQueryLog&#34;&gt;Catalyst::Plugin::DBIC::ConsoleQueryLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::WebSocket&#34;&gt;Dancer2::Plugin::WebSocket&lt;/a&gt; adds a websocket interface to Dancer2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::Untidy&#34;&gt;HTML::Untidy&lt;/a&gt; is another way to generate HTML quickly and programmatically&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ClientIP::Pluggable&#34;&gt;Mojolicious::Plugin::ClientIP::Pluggable&lt;/a&gt; provides convenient client IP header handling for Mojolicious requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2016/</link>
      <pubDate>Thu, 05 Jan 2017 03:04:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. There were lot&amp;rsquo;s of fun holiday presents added to CPAN last month, enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RoboBot&#34;&gt;App::RoboBot&lt;/a&gt; is a multi-protocol S-Expression chatbot&lt;/li&gt;
&lt;li&gt;Remove ANSI coloring from output or files using &lt;a href=&#34;https://metacpan.org/pod/App::UnANSI&#34;&gt;App::UnANSI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bb::Collaborate::Ultra&#34;&gt;Bb::Collaborate::Ultra&lt;/a&gt; provides Perl bindings for Blackboard Ultra virtual classrooms&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JIRA::REST::Class&#34;&gt;JIRA::REST::Class&lt;/a&gt; is an OO module built on JIRA::REST&lt;/li&gt;
&lt;li&gt;Use the Azue Cognitive Services Face API with &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::CognitiveServices::Face&#34;&gt;Net::Azure::CognitiveServices::Face&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Wikipedia::LangTitles&#34;&gt;WWW::Wikipedia::LangTitles&lt;/a&gt; gets interwiki links from Wikipedia, with some interesting use cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Beam::Runner&#34;&gt;Beam::Runner&lt;/a&gt; - run methods from objects in Beam::Wire containers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Monitor::MetricsAPI&#34;&gt;Monitor::MetricsAPI&lt;/a&gt; provides metrics collection and reporting for Perl applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Redis::RateLimit&#34;&gt;Redis::RateLimit&lt;/a&gt; provides sliding window rate limiting with Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Layout::BuddySystem&#34;&gt;Data::Layout::BuddySystem&lt;/a&gt; Layout data in memory allocated via a buddy system&lt;/li&gt;
&lt;li&gt;Universally Unique Lexicographically Sortable Identifier using &lt;a href=&#34;https://metacpan.org/pod/Data::ULID&#34;&gt;Data::ULID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::RPC2::TwoWay&#34;&gt;JSON::RPC2::TwoWay&lt;/a&gt; Transport-independent bidirectional JSON-RPC 2.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mongol&#34;&gt;Mongol&lt;/a&gt; is a basic MongoDB wrapper for Moose objects with a great name&lt;/li&gt;
&lt;li&gt;Programatically build HTML (a la CGI) using &lt;a href=&#34;https://metacpan.org/pod/Moonshine::Element&#34;&gt;Moonshine::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert pod to Confluence-flavored markdown with &lt;a href=&#34;https://metacpan.org/pod/Pod::Confluence&#34;&gt;Pod::Confluence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Diff::Unified::XS&#34;&gt;Text::Diff::Unified::XS&lt;/a&gt; - if you need a fast diff this might be your module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;Unbless&amp;rsquo; Perl objects using &lt;a href=&#34;https://metacpan.org/pod/Acme::Damn&#34;&gt;Acme::Damn&lt;/a&gt; - love the name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::TestOnTap&#34;&gt;App::TestOnTap&lt;/a&gt; is a comprehensive test driver&lt;/li&gt;
&lt;li&gt;Lift subroutine calls into the BEGIN phase using &lt;a href=&#34;https://metacpan.org/pod/BEGIN::Lift&#34;&gt;BEGIN::Lift&lt;/a&gt;. If you&amp;rsquo;re interested in this module, also check out &lt;a href=&#34;https://metacpan.org/pod/B::CompilerPhase::Hook&#34;&gt;B::CompilerPhase::Hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MarpaX::Languages::Dash&#34;&gt;MarpaX::Languages::Dash&lt;/a&gt; is a Marpa-based parser for the DASH language&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::EventEmitter&#34;&gt;MooseX::EventEmitter&lt;/a&gt; is an event emitter for Moose&lt;/li&gt;
&lt;li&gt;This is an interesting idea: subroutine versioning &lt;a href=&#34;https://metacpan.org/pod/Sub::Versions&#34;&gt;Sub::Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UNIVERSAL::Object&#34;&gt;UNIVERSAL::Object&lt;/a&gt; aims to be &amp;ldquo;a useful base class&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get the names of postcodes/zipcodes with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Postcodes&#34;&gt;Lingua::Postcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::Asset&#34;&gt;Game::Asset&lt;/a&gt; loads game assets (images, music, etc.), author Timm Murray has uploaded several game-related modules recently. Check them out&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UMLS::Association&#34;&gt;UMLS::Association&lt;/a&gt; provides different semantic association measures in order to calculate the semantic association between two concepts in the UMLS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do cryptography in pure Perl using &lt;a href=&#34;https://metacpan.org/pod/Crypt::Perl&#34;&gt;Crypt::Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::Notebook&#34;&gt;HTML::Notebook&lt;/a&gt; compose HTML documents using notebook style, might be good for scientists&lt;/li&gt;
&lt;li&gt;Produce graphs of Stepford Dependencies using &lt;a href=&#34;https://metacpan.org/pod/Stepford::Grapher&#34;&gt;Stepford::Grapher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Perlinfo&#34;&gt;Catalyst::Plugin::Perlinfo&lt;/a&gt; displays additional information about Perl on the Catalyst debug screen&lt;/li&gt;
&lt;li&gt;Generate charts from data using BokehJS with &lt;a href=&#34;https://metacpan.org/pod/Chart::Bokeh&#34;&gt;Chart::Bokeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::ParamTypes&#34;&gt;Dancer2::Plugin::ParamTypes&lt;/a&gt; is a parameter type checking plugin for Dancer2&lt;/li&gt;
&lt;li&gt;Turn TCP streams into a line-based stream with &lt;a href=&#34;https://metacpan.org/pod/MojoX::LineStream&#34;&gt;MojoX::LineStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Conveniently fire off subprocesses in Mojo apps using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Subprocess&#34;&gt;Mojolicious::Plugin::Subprocess&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - November 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</link>
      <pubDate>Thu, 08 Dec 2016 08:45:26 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---november-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use Google services via their API with &lt;a href=&#34;https://metacpan.org/pod/API::Google&#34;&gt;API::Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::ACME&#34;&gt;Net::ACME&lt;/a&gt; provides client methods for the ACME protocol used by Let&amp;rsquo;s Encrypt&lt;/li&gt;
&lt;li&gt;Two new modules for interacting with Azure services: &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::EventHubs&#34;&gt;Net::Azure::EventHubs&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::NotificationHubs&#34;&gt;Net::Azure::NotificationHubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse Lumberjack protocol frames with &lt;a href=&#34;https://metacpan.org/pod/Net::Lumberjack&#34;&gt;Net::Lumberjack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Mattermost&#34;&gt;AnyEvent::Mattermost&lt;/a&gt; is a non-blocking module for using the Mattermost API&lt;/li&gt;
&lt;li&gt;Get a non-blocking STOMP client using &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Stomper&#34;&gt;AnyEvent::Stomper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Freesound&#34;&gt;WebService::Freesound&lt;/a&gt; is a wrapper for the Freesound OAuth2 API&lt;/li&gt;
&lt;li&gt;Get library data using the Lobid API with &lt;a href=&#34;https://metacpan.org/pod/WebService::Lobid::Organisation&#34;&gt;WebService::Lobid::Organisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Kayako::RestAPI&#34;&gt;Kayako::RestAPI&lt;/a&gt; provides a Perly interface to the Kayako API (customer service platform)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Alien::SwaggerUI&#34;&gt;Alien::SwaggerUI&lt;/a&gt; installs Swagger to render OpenAPI-spec documentation&lt;/li&gt;
&lt;li&gt;Get a REST API for CPAN Testers data using &lt;a href=&#34;https://metacpan.org/pod/CPAN::Testers::API&#34;&gt;CPAN::Testers::API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux users: read and write &lt;code&gt;/proc/$pid/maps&lt;/code&gt; files with &lt;a href=&#34;https://metacpan.org/pod/Linux::Proc::Maps&#34;&gt;Linux::Proc::Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Proc::Memory&#34;&gt;Proc::Memory&lt;/a&gt; let&amp;rsquo;s you peek/poke other processes&amp;rsquo; address spaces&lt;/li&gt;
&lt;li&gt;Check the version numbers of Perl modules installed on remote servers using &lt;a href=&#34;https://metacpan.org/pod/Server::Module::Comparison&#34;&gt;Server::Module::Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Search emails in your inbox with &lt;a href=&#34;https://metacpan.org/pod/Email::Folder::Search&#34;&gt;Email::Folder::Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graphics::GVG&#34;&gt;Graphics::GVG&lt;/a&gt; is a lexer/parser for Game Vector Graphics&lt;/li&gt;
&lt;li&gt;Edit animated JPEG files with &lt;a href=&#34;https://metacpan.org/pod/Image::Animated::JPEG&#34;&gt;Image::Animated::JPEG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Repair&#34;&gt;JSON::Repair&lt;/a&gt; recognizes illegal JSON and can repair it to strict compliance&lt;/li&gt;
&lt;li&gt;Easily generate XLSX spreadsheets from data with &lt;a href=&#34;https://metacpan.org/pod/Spreadsheet::GenerateXLSX&#34;&gt;Spreadsheet::GenerateXLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Environ&#34;&gt;App::Environ&lt;/a&gt; easily build applications using service the locator pattern&lt;/li&gt;
&lt;li&gt;Get peer-to-peer messaging using &lt;a href=&#34;https://metacpan.org/pod/BeamX::Peer::Emitter&#34;&gt;BeamX::Peer::Emitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bot::ChatBots&#34;&gt;Bot::ChatBots&lt;/a&gt; is a base system for ChatBots&lt;/li&gt;
&lt;li&gt;Render management speak in IRC with &lt;a href=&#34;https://metacpan.org/pod/Bot::IRC::X::ManagementSpeak&#34;&gt;Bot::IRC::X::ManagementSpeak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sanity-check the calling context using &lt;a href=&#34;https://metacpan.org/pod/Call::Context&#34;&gt;Call::Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Kingpin&#34;&gt;Getopt::Kingpin&lt;/a&gt; is golang kingpin-style command line options parser&lt;/li&gt;
&lt;li&gt;Generate lists lazily with &lt;a href=&#34;https://metacpan.org/pod/List::Lazy&#34;&gt;List::Lazy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert rt.cpan.org tickets to GitHub issues using &lt;a href=&#34;https://metacpan.org/pod/RTx::ToGitHub&#34;&gt;RTx::ToGitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::MCP4725&#34;&gt;Device::Chip::MCP4725&lt;/a&gt; is a chip driver for MCP4725&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Damianware! Code Perl in Latin using &lt;a href=&#34;https://metacpan.org/pod/Lingua::Romana::Perligata&#34;&gt;Lingua::Romana::Perligata&lt;/a&gt; (not strictly a new distribution, just a new version)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::CLI&#34;&gt;API::CLI&lt;/a&gt; is a framework for creating RESTful command line clients&lt;/li&gt;
&lt;li&gt;Run PerlScript/ASP on Catalyst with &lt;a href=&#34;https://metacpan.org/pod/CatalystX::ASP&#34;&gt;CatalystX::ASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::IOLoop::HoboProcess&#34;&gt;Mojo::IOLoop::HoboProcess&lt;/a&gt; spawns subprocesses with MCE::Hobo&lt;/li&gt;
&lt;li&gt;Automatically rotate your Mojo app secrets using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::AutoSecrets&#34;&gt;Mojolicious::Plugin::AutoSecrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2016/</link>
      <pubDate>Fri, 04 Mar 2016 09:21:32 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/wp_tools&#34;&gt;App::WordPressTools&lt;/a&gt; provides tools to backup and upgrade WordPress installations.&lt;/li&gt;
&lt;li&gt;Manage AMQP connections with &lt;a href=&#34;https://metacpan.org/pod/Net::AMQP::ConnectionMgr&#34;&gt;Net::AMQP::ConnectionMgr&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Walmart&#34;&gt;WebService::Walmart&lt;/a&gt; Interface to Walmart&amp;rsquo;s open API.&lt;/li&gt;
&lt;li&gt;Get a Perly interface to the Microsoft Translator with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Translator::Microsoft&#34;&gt;Lingua::Translator::Microsoft&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Start interacting with Ticketmaster&amp;rsquo;s APIs using &lt;a href=&#34;https://metacpan.org/pod/Ticketmaster::API&#34;&gt;Ticketmaster::API&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/CPAN::Mirror::Tiny&#34;&gt;CPAN::Mirror::Tiny&lt;/a&gt; can create local CPAN mirrors, with no XS dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::GELF::Util&#34;&gt;Log::GELF::Util&lt;/a&gt; provides utility functions for Graylog&amp;rsquo;s GELF format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stream data scattered across files by datetime using &lt;a href=&#34;https://metacpan.org/pod/CSV::HistoryPlayer&#34;&gt;CSV::HistoryPlayer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::BatchUpdate&#34;&gt;DBIx::Class::BatchUpdate&lt;/a&gt; can update DBIx results in batches, minimizing the number of queries executed.&lt;/li&gt;
&lt;li&gt;Run asynchronous queries on Postgres with AnyEvent and Promises with &lt;a href=&#34;https://metacpan.org/pod/DBIx::Poggy&#34;&gt;DBIx::Poggy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::MyHTML&#34;&gt;HTML::MyHTML&lt;/a&gt; is a superfast, threaded, C based HTML parser.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Image::Similar&#34;&gt;Image::Similar&lt;/a&gt; measures how similar two images are.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Parsertron&#34;&gt;Regexp::Parsertron&lt;/a&gt; parses Perl regular expressions into trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Export::Attrs&#34;&gt;Export::Attrs&lt;/a&gt; provides Perl 6&amp;rsquo;s &lt;code&gt;is export(...)&lt;/code&gt; trait as a Perl 5 attribute.&lt;/li&gt;
&lt;li&gt;Get functions to compare Git::Version objects using &lt;a href=&#34;https://metacpan.org/pod/Git::Version::Compare&#34;&gt;Git::Version::Compare&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Parse::Diagnostics&#34;&gt;Parse::Diagnostics&lt;/a&gt; can extract diagnostic messages from Perl source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perlmazing&#34;&gt;Perlmazing&lt;/a&gt; - a bundle of lazily-loaded helper functions based on Perlmazing::Engine.&lt;/li&gt;
&lt;li&gt;GitHub inspired Perl module, run experiments with &lt;a href=&#34;https://metacpan.org/pod/Scientist&#34;&gt;Scientist&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Want to test a module against every installed version of Perl? &lt;a href=&#34;https://metacpan.org/pod/Test::BrewBuild&#34;&gt;Test::BrewBuild&lt;/a&gt; builds on perlbrew/berrybrew to do that for Windows Unix-based systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Mock::Time&#34;&gt;Test::Mock::Time&lt;/a&gt; create deterministic time &amp;amp; timers for testing. Particularly apt as February 29&lt;sup&gt;th&lt;/sup&gt; just passed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test2::AsyncSubtest&#34;&gt;Test2::AsyncSubtest&lt;/a&gt; execute subtests asynchronously.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Astro::Constants&#34;&gt;Astro::Constants&lt;/a&gt; a collection of Astronomy constants.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Compress::Huffman&#34;&gt;Compress::Huffman&lt;/a&gt; can huffman-encode a symbol table.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Music::Voss&#34;&gt;Music::Voss&lt;/a&gt; provides functions for fractal noise generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remotely control Google Chrome from Perl with &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::Chromi&#34;&gt;AnyEvent::Chromi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get an alternative syntax for describing Catalyst routes with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::ControllerRole::At&#34;&gt;Catalyst::ControllerRole::At&lt;/a&gt;. This is big.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::CGI&#34;&gt;Getopt::Long::CGI&lt;/a&gt; is a cool idea: execute CGI scripts just like passing arguments to a command line program.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Progress::Stored&#34;&gt;Time::Progress::Stored&lt;/a&gt; is a progress bar implementation with an web apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2015</title>
      <link>http://localhost:1313/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</link>
      <pubDate>Thu, 09 Jul 2015 13:17:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/181/2015/7/9/What-s-new-on-CPAN---June-2015/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Storage&#34;&gt;Class::Storage&lt;/a&gt; is a module for serializing blessed references (objects). Once serialized, an object can be transmitted via JSON, XML, YAML or saved in a data store. Serializing objects can also make IPC easier: coroutines, threads and other processes can pass text but blessed references are often an issue.&lt;/p&gt;

&lt;p&gt;Module author Peter Valdemar MÃ¸rch has pulled together excellent documentation. A welcome addition to CPAN, check out the &lt;a href=&#34;https://metacpan.org/pod/Class::Storage#ACKNOWLEDGEMENTS&#34;&gt;acknowledgements section&lt;/a&gt; for some interesting background on the module. For an alternative approach, you might be interested in &lt;a href=&#34;https://metacpan.org/pod/Object::Serializer&#34;&gt;Object::Serializer&lt;/a&gt;. For non-readable serializers, checkout &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt; and the newer and faster &lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; - when working with object serializers like Class::Storage, only deserialize trusted data, as malicious code can be injected into the data, and when the data is deserialized, the code will be executed automatically. See for example this bug &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=105772&#34;&gt;report&lt;/a&gt; (&lt;em&gt;Thanks to Reini Urban for the reminder&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::Zendesk&#34;&gt;API::Zendesk&lt;/a&gt; provides a Perl interface for the customer support app&lt;/li&gt;
&lt;li&gt;Painlessly install libsvm, the support vector machine library using &lt;a href=&#34;https://metacpan.org/pod/Alien::LIBSVM&#34;&gt;Alien::LIBSVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Slack? Of course you do. Check out &lt;a href=&#34;https://metacpan.org/pod/AnyEvent::SlackRTM&#34;&gt;AnyEvent::SlackRTM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Develop your first Slack bot with &lt;a href=&#34;https://metacpan.org/pod/Bot::Backbone::Service::SlackChat&#34;&gt;Bot::Backbone::Service::SlackChat&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Interchange::Search::Solr&#34;&gt;Interchange::Search::Solr&lt;/a&gt; let&amp;rsquo;s you use Solr search with Perl&lt;/li&gt;
&lt;li&gt;Be popular, send your co-workers Bonusly with &lt;a href=&#34;https://metacpan.org/pod/WebService::Bonusly&#34;&gt;WebService::Bonusly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebDriver::Tiny&#34;&gt;WebDriver::Tiny&lt;/a&gt; is an all-new implementation of a Selenium webdriver API for Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::App&#34;&gt;Config::App&lt;/a&gt; implements &amp;ldquo;cascading configurations&amp;rdquo; - looks like a convenient way to have context-specific configurations without resorting to Perl code&lt;/li&gt;
&lt;li&gt;Quickly rind files on your Mac using &lt;a href=&#34;https://metacpan.org/pod/Mac::FindFile&#34;&gt;Mac::FindFile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Freenode&#34;&gt;Perl::Critic::Freenode&lt;/a&gt; is a compilation of policies recommended by the folks on the #perl channel on freenode IRC&lt;/li&gt;
&lt;li&gt;Include ditaa diagrams in pod with &lt;a href=&#34;https://metacpan.org/pod/Pod::Weaver::Plugin::Ditaa&#34;&gt;Pod::Weaver::Plugin::Ditaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract data from your Zoom 5341J cable modem with &lt;a href=&#34;https://metacpan.org/pod/Device::CableModem::Zoom5341J&#34;&gt;Device::CableModem::Zoom5341J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Dispatch::HipChat&#34;&gt;Log::Dispatch::HipChat&lt;/a&gt; will send your log messages to HipChat&lt;/li&gt;
&lt;li&gt;Moving averages are easy to implement, and easy to get wrong. The next time you need one, consider &lt;a href=&#34;https://metacpan.org/pod/Math::SMA&#34;&gt;Math::SMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re working with 35mm film and DX codes, you might like &lt;a href=&#34;https://metacpan.org/pod/Photography::DX&#34;&gt;Photography::DX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When stuck in Git merge conflict hell, sometimes it&amp;rsquo;s easier to say &amp;ldquo;I&amp;rsquo;m right&amp;rdquo;. &lt;a href=&#34;https://metacpan.org/pod/App::Git::Workflow::Command::Take&#34;&gt;App::Git::Workflow::Command::Take&lt;/a&gt; let&amp;rsquo;s you tell Git to merge your changes. You win!&lt;/li&gt;
&lt;li&gt;If you have a load of Git repos that you&amp;rsquo;d like to execute a command against, you might like &lt;a href=&#34;https://metacpan.org/pod/App::Multigit&#34;&gt;App::Multigit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Assert::Conditional&#34;&gt;Assert::Conditional&lt;/a&gt; from Tom Christiansen let&amp;rsquo;s you conditionally compile assertions into your Perl programs, ala C&amp;rsquo;s assert.h. Wow&lt;/li&gt;
&lt;li&gt;Daemonize &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://metacpan.org/pod/JIP::Daemon&#34;&gt;JIP::Daemon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;text-language&#34;&gt;Text &amp;amp; Language&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::Unicodify&#34;&gt;Acme::Unicodify&lt;/a&gt; can convert ASCII text into Unicode-esque characters&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::RS14_PP&#34;&gt;Crypt::RS14_PP&lt;/a&gt; is a pure Perl implementation of the RS14 encryption algorithm&lt;/li&gt;
&lt;li&gt;Convert HTML into FreeStyleWiki markup using &lt;a href=&#34;https://metacpan.org/pod/HTML::WikiConverter::FreeStyleWiki&#34;&gt;HTML::WikiConverter::FreeStyleWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Awesome! detect the language with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Identify::CLD2&#34;&gt;Lingua::Identify::CLD2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Hogan&#34;&gt;Text::Hogan&lt;/a&gt; is a Perl clone of hogan.js, the JavaScript template engine. Supports pre-compilation!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-mathematics&#34;&gt;Science and Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BloomFilter&#34;&gt;Algorithm::BloomFilter&lt;/a&gt; is a simple, superfast bloom filter implementation written in XS&lt;/li&gt;
&lt;li&gt;Not a new module, but it is new to CPAN, &lt;a href=&#34;https://metacpan.org/pod/App::Chart&#34;&gt;App::Chart&lt;/a&gt; the visual charting library is useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/BioX::Workflow&#34;&gt;BioX::Workflow&lt;/a&gt; is an &amp;ldquo;opinionated template based workflow writer&amp;rdquo;, hailing from the Bioinformatics World, but not just for BioX&lt;/li&gt;
&lt;li&gt;The Longest Common Subsequence algorithm is used for diffing text, among other uses. &lt;a href=&#34;https://metacpan.org/pod/LCS::XS&#34;&gt;LCS::XS&lt;/a&gt; is a supercharged version, written in XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract all of the supported URLs from your Catalyst app using &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt; (disclosure, I&amp;rsquo;m the module author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::Piwik&#34;&gt;Dancer::Plugin::Piwik&lt;/a&gt; helps you integrate Pwik analytics with a Dancer app&lt;/li&gt;
&lt;li&gt;Use MongoDB with Minion, the job queue application using &lt;a href=&#34;https://metacpan.org/pod/Minion::Backend::MongoDB&#34;&gt;Minion::Backend::MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Reactor::UV&#34;&gt;Mojo::Reactor::UV&lt;/a&gt; let&amp;rsquo;s you use the C library, libuv as the backend event loop for your Mojo application&lt;/li&gt;
&lt;li&gt;Rapidly expand shortened URLs with &lt;a href=&#34;https://metacpan.org/pod/WWW::Expand::More&#34;&gt;WWW::Expand::More&lt;/a&gt;. Cool!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Updated to include other example serializer modules and deserialization warning - 2015-07-09&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2015</title>
      <link>http://localhost:1313/article/149/2015/2/6/What-s-new-on-CPAN---January-2015/</link>
      <pubDate>Fri, 06 Feb 2015 13:34:40 +0000</pubDate>
      
      <guid>http://localhost:1313/article/149/2015/2/6/What-s-new-on-CPAN---January-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. This year we&amp;rsquo;re running a new feature: &amp;ldquo;module of the month&amp;rdquo;, where we highlight our favorite new CPAN upload. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus&#34;&gt;FFI::Platypus&lt;/a&gt; enables Perl to call foreign language functions (e.g. Python, C, Rust) using libffi. Unlike using XS, no knowledge of C is required. The module not only works great but has comprehensive documentation and is under active development.&lt;/p&gt;

&lt;p&gt;Module author Graham Ollis has also &lt;a href=&#34;http://blogs.perl.org/users/graham_ollis/2015/01/practical-ffi-with-platypus.html&#34;&gt;blogged&lt;/a&gt; about it. FFI::Platypus is hosted on &lt;a href=&#34;https://github.com/plicease/FFI-Platypus&#34;&gt;GitHub&lt;/a&gt;, check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily share files over HTTP with &lt;a href=&#34;https://metacpan.org/pod/charon&#34;&gt;charon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::PerlXLock&#34;&gt;App::PerlXLock&lt;/a&gt; will lock the screen when run. Requires X11&lt;/li&gt;
&lt;li&gt;Need to serve a directory over HTTP? Check out &lt;a href=&#34;https://metacpan.org/pod/App::SimpleHTTPServer&#34;&gt;App::SimpleHTTPServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::SpeedTest&#34;&gt;App::SpeedTest&lt;/a&gt;is cool command line utility for testing connection speeds&lt;/li&gt;
&lt;li&gt;It comes with warnings but &lt;a href=&#34;https://metacpan.org/pod/Google::Tasks&#34;&gt;Google::Tasks&lt;/a&gt; looks like a useful API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MetaCPAN::Helper&#34;&gt;MetaCPAN::Helper&lt;/a&gt; provides some high-level sugar for searching MetaCPAN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Shell::Tools&#34;&gt;Shell::Tools&lt;/a&gt; imports an arsenal of convenient modules for scripting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RemoteCommand&#34;&gt;App::RemoteCommand&lt;/a&gt; execute commands on remote servers - very nice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::Differences&#34;&gt;HTML::Differences&lt;/a&gt; provides &amp;ldquo;reasonably sane&amp;rdquo; HTML diffs&lt;/li&gt;
&lt;li&gt;Compare database structures using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Diff::Schema&#34;&gt;DBIx::Diff::Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Fake&#34;&gt;Data::Fake&lt;/a&gt; is a data generator module with a functional interface&lt;/li&gt;
&lt;li&gt;Read and update complex data structures easily using &lt;a href=&#34;https://metacpan.org/pod/Data::Focus&#34;&gt;Data::Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Phash::FFI&#34;&gt;Phash::FFI&lt;/a&gt; is an interface for an external library that hashes media files to test for similarity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-interop&#34;&gt;Development and Interop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::Me&#34;&gt;FFI::Me&lt;/a&gt; is provides some sugar over FFI::Raw that lets you call foreign language (e.g. C, Python, Ruby) library functions&lt;/li&gt;
&lt;li&gt;Generate a simple-but-sensible module readme with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Readme::Brief&#34;&gt;Dist::Zilla::Plugin::Readme::Brief&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Object::Properties&#34;&gt;Object::Properties&lt;/a&gt; is another class library, similar to Object::Tiny with some additional features&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ARGV::Struct&#34;&gt;ARGV::Struct&lt;/a&gt; parses complex command line arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing-debugging&#34;&gt;Testing &amp;amp; Debugging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Carp::Capture&#34;&gt;Carp::Capture&lt;/a&gt; stores stack traces for later inspection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Test::TidyAll&#34;&gt;Dist::Zilla::Plugin::Test::TidyAll&lt;/a&gt; will test your distribution code is tidy before letting you publish it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A couple of new Catalyst modules; &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::Cookie&#34;&gt;Catalyst::Plugin::Session::Store::Cookie&lt;/a&gt; does what it says, and &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ResponseFrom&#34;&gt;Catalyst::Plugin::ResponseFrom&lt;/a&gt; which allows the request and capture of responses from external URLs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FCGI::Buffer&#34;&gt;FCGI::Buffer&lt;/a&gt; provides a validator and cache for FCGI output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/85/catalyst%20dependencies.png&#34; alt=&#34;Catalyst framework&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/images/85/dancer2%20dependencies.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
$ make
$ make test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3374&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.16&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;172.95&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;4.56&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;178.52&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.38&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.07&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19.68&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.46&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21.59&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/&lt;/span&gt;SecApp_login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::cpanminus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd SecApp_login
$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;installdeps &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Working on &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Configuring SecApp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; Installed dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; Finishing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;secapp_server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl 
HTTP::Server::PSGI: Accepting connections at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_welcome.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-Â£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_credentials.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_landing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst &lt;span style=&#34;color:#e6db74&#34;&gt;qw/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Static::Simple
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Authentication
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::Store::File
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::State::Cookie
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable X-Catalyst header&lt;/span&gt;
enable_catalyst_header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this method will be called everytime&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt; :Private {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# 404 unless https/testing &amp;amp; request method is GET/HEAD/POST&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;( ( $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secure &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &lt;span style=&#34;color:#e6db74&#34;&gt;/^(?:GET|HEAD|POST)$/&lt;/span&gt;, $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method )
        {
            $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;detach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;);
        }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; : ActionClass(&amp;#39;RenderView&amp;#39;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t require TLS for testing&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt; :Chained(&amp;#39;/&amp;#39;) PathPart(&amp;#39;login&amp;#39;) CaptureArgs(0) {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication code&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication failed, load the login form&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_form&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) GET {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# load the login template&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(template &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.tt&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_columns(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                passphrase &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rfc2307&amp;#39;&lt;/span&gt;,
                passphrase_class &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BlowfishCrypt&amp;#39;&lt;/span&gt;,
                passphrase_args &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
                    salt_random &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                },
                passphrase_check_method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_password&amp;#39;&lt;/span&gt;,
            });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_response 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_response_field};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_challenge 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_challenge_field};

  &lt;span style=&#34;color:#75715e&#34;&gt;# proceed if config has switched off CAPTCHA, or if the submission is valid, proceed&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{enabled} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; Captcha::reCAPTCHA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;check_answer(
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{private_key},
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;address,
                   $captcha_challenge,
                   $captcha_response)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{is_valid})
  {
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password};

    &lt;span style=&#34;color:#75715e&#34;&gt;# if username and passwords were supplied, authenticate&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $password) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;authenticate({ username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username,
                             password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $password } ))
      {
      &lt;span style=&#34;color:#75715e&#34;&gt;# authentication success, check user active and redirect to the secure landing page&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_object&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;active) {
          $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;uri_for($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;controller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;action_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;landing&amp;#39;&lt;/span&gt;)));
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad username or password.&amp;#34;&lt;/span&gt;);
      }
    }
  }
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ilib t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-prevent-brute-force-attacks&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_catpcha.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;Â©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

