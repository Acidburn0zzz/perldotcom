<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansi on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/ansi/</link>
    <description>Recent content in Ansi on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Oct 2018 20:07:36 +0000</lastBuildDate>
    <atom:link href="/tags/ansi/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use terminal colors to distinguish information</title>
      <link>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</link>
      <pubDate>Tue, 23 Oct 2018 20:07:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</guid>
      <description>&lt;p&gt;The module &lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; is one of my favorite Perl tools. It doesn&amp;rsquo;t make my program work better but it allows me to quickly identify the output that&amp;rsquo;s important to me without missing out on the other stuff. I recently used it to track the shipments of my latest book.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&#34;https://www.learningperl6.com&#34;&gt;Learning Perl 6&lt;/a&gt; was published and the paper versions were available, I owed about 100 people a signed copy. From my years of publishing a print Perl magazine, I know that physically shipping stuff is an exercise in pain and memory. Did I send the book? When did I send it? I&amp;rsquo;m never quite sure the task is finished because a parcel might go missing without the recipient realizing they are missing something. Months later I get a complaint. No big whoop—that&amp;rsquo;s life in retail.&lt;/p&gt;

&lt;p&gt;I ship these through the US Postal Service and get a tracking number for each parcel. I could check those by hand at the USPS website, but I also wrote the &lt;a href=&#34;https://metacpan.org/pod/Business::US::USPS::WebTools&#34;&gt;Business::US::USPS::WebTools&lt;/a&gt; module to handle that for me. I can use the post office&amp;rsquo;s web API (rudimentary as it is) to get the status of packages.&lt;/p&gt;

&lt;p&gt;Curiously, this summer I had just given up this module because I didn&amp;rsquo;t want to maintain it anymore. I hadn&amp;rsquo;t used it in a couple of years and the web API interfaces had changed slightly. A couple weeks later I had another use for it. Go figure. It now lives in the &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules&#34;&gt;CPAN Adoptable Modules&lt;/a&gt; GitHub organization that I set up. If you have repos for modules that you no longer want, let me know about them. I&amp;rsquo;ll pull them into that organization and you can delete them from your own account. Anyone who wants to maintain them later will still find them. And, there&amp;rsquo;s also &lt;a href=&#34;https://github.com/gitpan&#34;&gt;GitPAN&lt;/a&gt;, but that&amp;rsquo;s not quite the same thing.&lt;/p&gt;

&lt;p&gt;To use this program, grab the module source from &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools&#34;&gt;GitHub&lt;/a&gt;. I had to update a few things to make it work and I might make further changes. &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools/commit/27c9443cc918d67f19f9a3a594e364a22fc5d16f&#34;&gt;Commit 27c9443&lt;/a&gt; from October 2, 2018 should be good. (And yes, it feels very strange not to point to a version on CPAN).&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need credentials from the &lt;a href=&#34;https://www.usps.com/business/web-tools-apis/welcome.htm&#34;&gt;WebTools site&lt;/a&gt;. They make it sound like a government official is going to scrutinize your application but you&amp;rsquo;ll get an email a couple of minutes later. No one from the USPS has ever contacted me to ask me what I was doing with the module. One curiosity of the US Government is that the Post Office has their own police force (mostly for  mail theft or mail fraud). But I don&amp;rsquo;t need to worry about that because my program adheres to the intended use of the service.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with a short program that gets the record for a single tracking number. I have my credentials in the environment so I can easily grab them for any other WebTools program I create. This one  prints a summary of the shipment (although there is a chain of steps from acceptance when I drop off the parcel to when they deliver it):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity)&lt;/span&gt;;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;,
		$tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is serviceable but boring (and I&amp;rsquo;ve mutated the tracking numbers so they aren&amp;rsquo;t valid and don&amp;rsquo;t represent actual shipments):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl track-one.pl 84058036993006920289
84058036993006920289  8:38 am September 14, 2018   Delivered, In/At Mailbox NEW YORK
$ perl track-one.pl CJ6467937US
CJ6467937US           9:38 am September 26, 2018   Departed PARIS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this program is much quicker than me going to the USPS website to paste numbers into their form. It can be better—what I really want to know is if I need to do anything for a shipment. I can read the output to figure that out. If it&amp;rsquo;s &amp;ldquo;Delivered&amp;rdquo; than I should be fine. If not, it can still be lost. But reading is hard! Adding color to that relieves me of the burden of scanning a whole line of text. The program can read the text for me and categorize it with color.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; works by outputting &lt;a href=&#34;http://wiki.bash-hackers.org/scripting/terminalcodes&#34;&gt;special escape sequences&lt;/a&gt; that instruct the (ANSI) terminal to switch colors. The new color is in effect until you output the special reset sequence (or change to another color):&lt;/p&gt;

&lt;pre&gt;$ perl -MTerm::ANSIColor=:constants -e &#39;print RED, &#34;Hello World&#34;, RESET&#39;
&lt;code style=&#34;color:red&#34;&gt;Hello World&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can do that in my tracking program. I&amp;rsquo;ll use green to indicate an outstanding shipment (a brighter color on my dark background) and blue (a darker color that subdues the line) to indicate a delivered shipment. I can know the status just by the color:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
		$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
		);
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s fine, but I don&amp;rsquo;t want to do these individually. I have all the tracking numbers in a file (a spreadsheet really, but that&amp;rsquo;s not important here). I want to check them all at once. I can do that in a &lt;code&gt;while&lt;/code&gt; loop that takes the lines from standard input. Of course the data are a bit dirty so I remove whitespace (the USPS formats it in different ways on different pages) and then skip lines that are empty. I do have some could that checks the validity of tracking numbers but it&amp;rsquo;s a bit old and doesn&amp;rsquo;t cover some of the new (undocumented) numbers they have been giving me. So I&amp;rsquo;m stuck with these simple checks. Otherwise, the program is mostly the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ) {
	chomp;
	&lt;span style=&#34;color:#e6db74&#34;&gt;s/\s+//g&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; length $_;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_ );

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
		warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
		state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
			$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
			);
		printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $_, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
		}

	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the outstanding shipments stand out from the delivered ones. Even with the heavily blurred screenshot I can make out which lines are the ones that I want to investigate. I&amp;rsquo;ve blurred this image a bit to protect personal information but even then I can pick out the shipments that are still out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/use-terminal-colors-to-distinguish-information/blurred-term-ansicolor.png&#34; alt=&#34;blurred output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s amazing that this works. The international cooperation for many countries is pretty good. I can get tracking all the way to the final delivery in many countries.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2016</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2016/</link>
      <pubDate>Thu, 05 Jan 2017 03:04:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2016/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. There were lot&amp;rsquo;s of fun holiday presents added to CPAN last month, enjoy!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RoboBot&#34;&gt;App::RoboBot&lt;/a&gt; is a multi-protocol S-Expression chatbot&lt;/li&gt;
&lt;li&gt;Remove ANSI coloring from output or files using &lt;a href=&#34;https://metacpan.org/pod/App::UnANSI&#34;&gt;App::UnANSI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bb::Collaborate::Ultra&#34;&gt;Bb::Collaborate::Ultra&lt;/a&gt; provides Perl bindings for Blackboard Ultra virtual classrooms&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JIRA::REST::Class&#34;&gt;JIRA::REST::Class&lt;/a&gt; is an OO module built on JIRA::REST&lt;/li&gt;
&lt;li&gt;Use the Azue Cognitive Services Face API with &lt;a href=&#34;https://metacpan.org/pod/Net::Azure::CognitiveServices::Face&#34;&gt;Net::Azure::CognitiveServices::Face&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Wikipedia::LangTitles&#34;&gt;WWW::Wikipedia::LangTitles&lt;/a&gt; gets interwiki links from Wikipedia, with some interesting use cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Beam::Runner&#34;&gt;Beam::Runner&lt;/a&gt; - run methods from objects in Beam::Wire containers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Monitor::MetricsAPI&#34;&gt;Monitor::MetricsAPI&lt;/a&gt; provides metrics collection and reporting for Perl applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Redis::RateLimit&#34;&gt;Redis::RateLimit&lt;/a&gt; provides sliding window rate limiting with Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Layout::BuddySystem&#34;&gt;Data::Layout::BuddySystem&lt;/a&gt; Layout data in memory allocated via a buddy system&lt;/li&gt;
&lt;li&gt;Universally Unique Lexicographically Sortable Identifier using &lt;a href=&#34;https://metacpan.org/pod/Data::ULID&#34;&gt;Data::ULID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::RPC2::TwoWay&#34;&gt;JSON::RPC2::TwoWay&lt;/a&gt; Transport-independent bidirectional JSON-RPC 2.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mongol&#34;&gt;Mongol&lt;/a&gt; is a basic MongoDB wrapper for Moose objects with a great name&lt;/li&gt;
&lt;li&gt;Programatically build HTML (a la CGI) using &lt;a href=&#34;https://metacpan.org/pod/Moonshine::Element&#34;&gt;Moonshine::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert pod to Confluence-flavored markdown with &lt;a href=&#34;https://metacpan.org/pod/Pod::Confluence&#34;&gt;Pod::Confluence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Diff::Unified::XS&#34;&gt;Text::Diff::Unified::XS&lt;/a&gt; - if you need a fast diff this might be your module&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;Unbless&amp;rsquo; Perl objects using &lt;a href=&#34;https://metacpan.org/pod/Acme::Damn&#34;&gt;Acme::Damn&lt;/a&gt; - love the name&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::TestOnTap&#34;&gt;App::TestOnTap&lt;/a&gt; is a comprehensive test driver&lt;/li&gt;
&lt;li&gt;Lift subroutine calls into the BEGIN phase using &lt;a href=&#34;https://metacpan.org/pod/BEGIN::Lift&#34;&gt;BEGIN::Lift&lt;/a&gt;. If you&amp;rsquo;re interested in this module, also check out &lt;a href=&#34;https://metacpan.org/pod/B::CompilerPhase::Hook&#34;&gt;B::CompilerPhase::Hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MarpaX::Languages::Dash&#34;&gt;MarpaX::Languages::Dash&lt;/a&gt; is a Marpa-based parser for the DASH language&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::EventEmitter&#34;&gt;MooseX::EventEmitter&lt;/a&gt; is an event emitter for Moose&lt;/li&gt;
&lt;li&gt;This is an interesting idea: subroutine versioning &lt;a href=&#34;https://metacpan.org/pod/Sub::Versions&#34;&gt;Sub::Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UNIVERSAL::Object&#34;&gt;UNIVERSAL::Object&lt;/a&gt; aims to be &amp;ldquo;a useful base class&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;language-international&#34;&gt;Language &amp;amp; International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get the names of postcodes/zipcodes with &lt;a href=&#34;https://metacpan.org/pod/Lingua::Postcodes&#34;&gt;Lingua::Postcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::Asset&#34;&gt;Game::Asset&lt;/a&gt; loads game assets (images, music, etc.), author Timm Murray has uploaded several game-related modules recently. Check them out&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UMLS::Association&#34;&gt;UMLS::Association&lt;/a&gt; provides different semantic association measures in order to calculate the semantic association between two concepts in the UMLS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do cryptography in pure Perl using &lt;a href=&#34;https://metacpan.org/pod/Crypt::Perl&#34;&gt;Crypt::Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HTML::Notebook&#34;&gt;HTML::Notebook&lt;/a&gt; compose HTML documents using notebook style, might be good for scientists&lt;/li&gt;
&lt;li&gt;Produce graphs of Stepford Dependencies using &lt;a href=&#34;https://metacpan.org/pod/Stepford::Grapher&#34;&gt;Stepford::Grapher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Perlinfo&#34;&gt;Catalyst::Plugin::Perlinfo&lt;/a&gt; displays additional information about Perl on the Catalyst debug screen&lt;/li&gt;
&lt;li&gt;Generate charts from data using BokehJS with &lt;a href=&#34;https://metacpan.org/pod/Chart::Bokeh&#34;&gt;Chart::Bokeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::ParamTypes&#34;&gt;Dancer2::Plugin::ParamTypes&lt;/a&gt; is a parameter type checking plugin for Dancer2&lt;/li&gt;
&lt;li&gt;Turn TCP streams into a line-based stream with &lt;a href=&#34;https://metacpan.org/pod/MojoX::LineStream&#34;&gt;MojoX::LineStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Conveniently fire off subprocesses in Mojo apps using &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Subprocess&#34;&gt;Mojolicious::Plugin::Subprocess&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

