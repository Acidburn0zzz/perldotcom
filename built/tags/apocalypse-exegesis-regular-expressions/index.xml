<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apocalypse Exegesis Regular Expressions on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/apocalypse-exegesis-regular-expressions/</link>
    <description>Recent content in Apocalypse Exegesis Regular Expressions on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Aug 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/tags/apocalypse-exegesis-regular-expressions/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exegesis 5</title>
      <link>http://localhost:1313/pub/2002/08/22/exegesis5.html/</link>
      <pubDate>Thu, 22 Aug 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/08/22/exegesis5.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this document is out of date and remains here for historic interest. See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S05.html&#34;&gt;Synopsis 5&lt;/a&gt; for the current design information.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#exegesis_5&#34;&gt;Exegesis 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whats_the_diff&#34;&gt;What&amp;rsquo;s the diff?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#starting_gently&#34;&gt;Starting gently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lay_it_out_for_me&#34;&gt;Lay it out for me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interpolate_ye_not&#34;&gt;Interpolate ye not &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the_incredible_hunk&#34;&gt;The incredible &lt;code&gt;$hunk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modified_modifiers&#34;&gt;Modified modifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#take_no_prisoners&#34;&gt;Take no prisoners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#meanwhile_back_at_the_hunk&#34;&gt;Meanwhile, back at the &lt;code&gt;$hunk&lt;/code&gt; &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this_or_nothing&#34;&gt;This or nothing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#failing_with_style&#34;&gt;Failing with style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#home_home_on_the_line_range&#34;&gt;Home, home on the (line) range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whats_my_line&#34;&gt;What&amp;rsquo;s my line?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the_final_frontier&#34;&gt;The final frontier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matchmaker_matchmaker&#34;&gt;Match-maker, match-maker &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a_cleaner_approach&#34;&gt;A cleaner approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whats_in_a-name&#34;&gt;What&amp;rsquo;s in a name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bad_line_no_match&#34;&gt;Bad line! No match!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thinking_ahead&#34;&gt;Thinking ahead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what_you_match_is_what_you_get&#34;&gt;What you match is what you get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a_hypothetical_solution_to_a_very_real_problem&#34;&gt;A hypothetical solution to a very real problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the_nesting_instinct&#34;&gt;The nesting instinct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extracting_the_insertions&#34;&gt;Extracting the insertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dont_just_match_there_do_something!&#34;&gt;Don&amp;rsquo;t just match there; do something!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smarter_alternatives&#34;&gt;Smarter alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rearranging_the_deckchairs&#34;&gt;Rearranging the deck chairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deriving_a_benefit&#34;&gt;Deriving a benefit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#different_diffs&#34;&gt;Different diffs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lets_get_cooking&#34;&gt;Let&amp;rsquo;s get cooking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-exegesis-5-exegesis-5-span&#34;&gt;&lt;span id=&#34;exegesis_5&#34;&gt;Exegesis 5&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Come_gather_round_Mongers%2C_whatever_you_code&#34;&gt;&lt;em&gt;Come gather round Mongers, whatever you code&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;span id=&#34;item_And_admit_that_your_forehead%27s_about_to_explode&#34;&gt;&lt;em&gt;And admit that your forehead&amp;rsquo;s about to explode&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;span id=&#34;item_%27Cos_Perl_patterns_induce_complete_brain_overloa&#34;&gt;&lt;em&gt;&amp;lsquo;Cos Perl patterns induce complete brain overload&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;span id=&#34;item_If_there%27s_source_code_you_should_be_maintainin%&#34;&gt;&lt;em&gt;If there&amp;rsquo;s source code, you should be maintainin&amp;rsquo;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;span id=&#34;item_Then_you_better_start_learnin%27_Perl_6_patterns_s&#34;&gt;&lt;em&gt;Then you better start learnin&amp;rsquo; Perl 6 patterns soon&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;span id=&#34;item_For_the_regexes%2C_they_are_a%2Dchangin%27&#34;&gt;&lt;em&gt;For the regexes, they are a-changin&amp;rsquo;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apocalypse 5 marks a significant departure in the ongoing design of Perl 6.&lt;/p&gt;

&lt;p&gt;Previous Apocalypses took an evolutionary approach to changing Perl&amp;rsquo;s general syntax, data structures, control mechanisms and operators. New features were added, old features removed, and existing features were enhanced, extended and simplified. But the changes described were remedial, not radical.&lt;/p&gt;

&lt;p&gt;Larry could have taken the same approach with regular expressions. He could have tweaked some of the syntax, added new &lt;code&gt;(?...)&lt;/code&gt; constructs, cleaned up the rougher edges, and moved on.&lt;/p&gt;

&lt;p&gt;Fortunately, however, he&amp;rsquo;s taking a much broader view of Perl&amp;rsquo;s future than that. And he saw that the problem with regular expressions was &lt;em&gt;not&lt;/em&gt; that they lacked a &lt;code&gt;(?$var:...)&lt;/code&gt; extension to do named captures, or that they needed a &lt;code&gt;\R&lt;/code&gt; metatoken to denote a recursive subpattern, or that there was a &lt;code&gt;[:YourNamedCharClassHere:]&lt;/code&gt; mechanism missing.&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;p&gt;Related articles:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;He saw that those features, laudable as they were individually, would just compound the real problem, which was that Perl 5 regular expressions were already groaning under the accumulated weight of their own metasyntax. And that a decade of accretion had left the once-clean notation arcane, baroque, inconsistent and obscure.&lt;/p&gt;

&lt;p&gt;It was time to throw away the prototype.&lt;/p&gt;

&lt;p&gt;Even more importantly, as powerful as Perl 5 regexes are, they are not nearly powerful enough. Modern text manipulation is predominantly about processing structured, hierarchical text. And that&amp;rsquo;s just plain painful with regular expressions. The advent of modules like Parse::Yapp and Parse::RecDescent reflects the community&amp;rsquo;s widespread need for more sophisticated parsing mechanisms. Mechanisms that should be native to Perl.&lt;/p&gt;

&lt;p&gt;As Piers Cawley has so eloquently misquoted: &lt;em&gt;“It is a truth universally acknowledged that any language in possession of a rich syntax must be in want of a rewrite.”&lt;/em&gt; Perl regexes are such a language. And Apocalypse 5 is precisely that rewrite.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-whats-the-diff-what-s-the-diff-span&#34;&gt;&lt;span id=&#34;#whats_the_diff&#34;&gt;What&amp;rsquo;s the diff?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s take a look at some of those new features. To do that, we&amp;rsquo;ll consider a series of examples structured around a common theme: recognizing and manipulating data in the Unix &lt;em&gt;&lt;a href=&#34;http://www.gnu.org/manual/diffutils-2.8.1/html_node/Detailed-Normal.html&#34;&gt;diff&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A classic diff consists of zero-or-more text transformations, each of which is known as a “hunk”. A hunk consists of a modification specifier, followed by one or more lines of context. Each hunk is either an append, a delete, or a change, and the type of hunk is specified by a single letter (&lt;code&gt;&#39;a&#39;&lt;/code&gt;, &lt;code&gt;&#39;d&#39;&lt;/code&gt;, or &lt;code&gt;&#39;c&#39;&lt;/code&gt;). Each of these single-letter specifiers is prefixed by the line numbers of the lines in the original document it affects, and followed by the equivalent line numbers in the transformed file. The context information consists of the lines of the original file (each preceded by a &lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; character), then the lines of the transformed file (each preceded by a &lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt;). Deletes omit the transformed context, appends omit the original context. If both contexts appear, then they are separated by a line consisting of three hyphens.&lt;/p&gt;

&lt;p&gt;Phew! You can see why natural language isn&amp;rsquo;t the preferred way of specifying data formats.&lt;/p&gt;

&lt;p&gt;The preferred way is, of course, to specify such formats as patterns. And, indeed, we could easily throw together a few Perl 6 patterns that collectively would match any data conforming to that format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $file = rx/ ^  &amp;lt;$hunk&amp;gt;*  $ /;

    $hunk = rx :i { 
        [ &amp;lt;$linenum&amp;gt; a :: &amp;lt;$linerange&amp;gt; \n
          &amp;lt;$appendline&amp;gt;+ 
        |
          &amp;lt;$linerange&amp;gt; d :: &amp;lt;$linenum&amp;gt; \n
          &amp;lt;$deleteline&amp;gt;+
        |
          &amp;lt;$linerange&amp;gt; c :: &amp;lt;$linerange&amp;gt; \n
          &amp;lt;$deleteline&amp;gt;+
          --- \n
          &amp;lt;$appendline&amp;gt;+
        ]
      |
        (\N*) ::: { fail &amp;quot;Invalid diff hunk: $1&amp;quot; }
    };

    $linerange = rx/ &amp;lt;$linenum&amp;gt; , &amp;lt;$linenum&amp;gt;
                   | &amp;lt;$linenum&amp;gt;
                   /;

    $linenum = rx/ \d+ /;

    $deleteline = rx/^^ \&amp;lt; &amp;lt;sp&amp;gt; (\N* \n) /;
    $appendline = rx/^^ \&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /;

    # and later...

    my $text is from($*ARGS);

    print &amp;quot;Valid diff&amp;quot; 
        if $text =~ /&amp;lt;$file&amp;gt;/;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-starting-gently-starting-gently-span&#34;&gt;&lt;span id=&#34;starting_gently&#34;&gt;Starting gently&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a lot of new syntax there, so let&amp;rsquo;s step through it slowly, starting with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $file = rx/ ^  &amp;lt;$hunk&amp;gt;*  $ /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This statement creates a pattern object. Or, as it&amp;rsquo;s known in Perl 6, a “rule”. People will probably still call them “regular expressions” or “regexes” too (and the keyword &lt;code&gt;rx&lt;/code&gt; reflects that), but Perl patterns long ago ceased being anything like “regular”, so we&amp;rsquo;ll try and avoid those terms.&lt;/p&gt;

&lt;p&gt;In any case, the &lt;code&gt;rx&lt;/code&gt; constructor builds a new rule, which is then stored in the &lt;code&gt;$file&lt;/code&gt; variable. The Perl 5 equivalent would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5
    my $file = qr/ ^  (??{$hunk})*  $ /x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This illustrates quite nicely why the entire syntax needed to change.&lt;/p&gt;

&lt;p&gt;The name of the rule constructor has changed from &lt;code&gt;qr&lt;/code&gt; to &lt;code&gt;rx&lt;/code&gt;, because in Perl 6 rule constructors &lt;em&gt;aren&amp;rsquo;t&lt;/em&gt; quotelike contexts. In particular, variables don&amp;rsquo;t interpolate into &lt;code&gt;rx&lt;/code&gt; constructors in the way they do for a &lt;code&gt;qq&lt;/code&gt; or a &lt;code&gt;qx&lt;/code&gt;. That&amp;rsquo;s why we can embed the &lt;code&gt;$hunk&lt;/code&gt; variable before it&amp;rsquo;s actually initialized.&lt;/p&gt;

&lt;p&gt;In Perl 6, an embedded variable becomes part of the rule&amp;rsquo;s implementation rather than part of its “source code”. As we&amp;rsquo;ll see shortly, the pattern itself can determine how the variable is treated (i.e., whether to interpolate it literally, treat it as a subpattern or use it as a container).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this document is out of date and remains here for historic interest. See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S05.html&#34;&gt;Synopsis 5&lt;/a&gt; for the current design information.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-lay-it-out-for-me-lay-it-out-for-me-span&#34;&gt;&lt;span id=&#34;lay_it_out_for_me&#34;&gt;Lay it out for me&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In Perl 6, each rule implicitly has the equivalent of the Perl 5 &lt;code&gt;/x&lt;/code&gt; modifier turned on, so we could lay out (and annotate) that first pattern like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $file = rx/ ^               # Must be at start of string
                &amp;lt;$hunk&amp;gt;         # Match what the rule in $hunk would match...
                        *       #          ...zero-or-more times
                $               # Must be at end of string (no newline allowed)
              /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;/x&lt;/code&gt; is the default, the whitespace in the pattern is ignored, which allows us to lay out the rule more readably. Comments are also honored, which enables us to document the rule sensibly. You can even use the closing delimiter in a comment safely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $caveat = rx/ Make \s+ sure \s+ to \s+ ask
                  \s+ (mum|mom)                 # handle UK/US spelling
                  \s+ (and|or)                  # handle and/or
                  \s+ dad \s+ first
                /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, the examples in this Exegesis &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; represent good comments in general, since they document what is happening, rather than why.&lt;/p&gt;

&lt;p&gt;The meanings of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; metacharacters are unchanged from Perl 5. However, the meaning of the &lt;code&gt;$&lt;/code&gt; metacharacter &lt;em&gt;has&lt;/em&gt; changed slightly: it no longer allows an optional newline before the end of the string. If you want that behavior, then you need to specify it explicitly. For example, to match a line ending in digits: &lt;code&gt;/ \d+ \n? $/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The compensation is that, in Perl 6, a &lt;code&gt;\n&lt;/code&gt; in a pattern matches a &lt;em&gt;logical&lt;/em&gt; newline (that is any of: &lt;code&gt;&amp;quot;\015\012&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;\012&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;\015&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;\x85&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;\x2028&amp;quot;&lt;/code&gt;), rather than just a &lt;em&gt;physical&lt;/em&gt; ASCII newline (i.e. just &lt;code&gt;&amp;quot;\012&amp;quot;&lt;/code&gt;). And a &lt;code&gt;\n&lt;/code&gt; will always try to match any kind of physical newline marker (not just the current system&amp;rsquo;s favorite), so it correctly matches against strings that have been aggregated from multiple systems.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-interpolate-ye-not-interpolate-ye-not-span&#34;&gt;&lt;span id=&#34;interpolate_ye_not&#34;&gt;Interpolate ye not &amp;hellip;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The really new bit in the &lt;code&gt;$file&lt;/code&gt; rule is the &lt;code&gt;&amp;lt;$hunk&amp;gt;&lt;/code&gt; element. It&amp;rsquo;s a directive to grab whatever&amp;rsquo;s in the &lt;code&gt;$hunk&lt;/code&gt; variable (presumably another pattern) and attempt to match it at that point in the rule. The important point is that the contents of &lt;code&gt;$hunk&lt;/code&gt; are only grabbed when the pattern matching mechanism actually needs to match against them, &lt;em&gt;not&lt;/em&gt; when the rule is being constructed. So it&amp;rsquo;s like the mysterious &lt;code&gt;(??{...})&lt;/code&gt; construct in Perl 5 regexes.&lt;/p&gt;

&lt;p&gt;The angle brackets themselves are a much more general mechanism in Perl 6 rules. They are the “metasyntactic markers” and replace the Perl 5 &lt;code&gt;(?...)&lt;/code&gt; syntax. They are used to specify numerous other features of Perl 6 rules, many of which we will explore below.&lt;/p&gt;

&lt;p&gt;Note that if we &lt;em&gt;hadn&amp;rsquo;t&lt;/em&gt; put the variable in angle-brackets, and had just written:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rx/ ^  $hunk*  $ /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then the contents of &lt;code&gt;$hunk&lt;/code&gt; would &lt;em&gt;still&lt;/em&gt; not be interpolated when the pattern was parsed. Once again, the pattern would grab the contents of the variable when it reached that point in its match. But, this time, without the angle brackets around &lt;code&gt;$hunk&lt;/code&gt;, the pattern would try to match the contents of the variable as an atomic literal string (rather than as a subpattern). “Atomic” means that the &lt;code&gt;*&lt;/code&gt; repetition quantifier applies to everything that&amp;rsquo;s in &lt;code&gt;$hunk&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; just to the last character (as it does in Perl 5).&lt;/p&gt;

&lt;p&gt;In other words, a raw variable in a Perl 6 pattern is matched as if it was a Perl 5 regex in which the interpolation had been &lt;code&gt;quotemeta&lt;/code&gt;&amp;rsquo;d and then placed in a pair of noncapturing parentheses. That&amp;rsquo;s really handy in something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    my $target = &amp;lt;&amp;gt;;                  # Get literal string to search for
    $text =~ m/ $target* /;           # Search for them as literals
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which in Perl 5 we&amp;rsquo;d have to write as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5
    my $target = &amp;lt;&amp;gt;;                  # Get literal string to search for
    chomp $target;                    # No autochomping in Perl 5 
    $text =~ m/ (?:\Q$target\E)* /x;  # Search for it, quoting metas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Raw arrays and hashes interpolate as literals, too. For example, if we use an array in a Perl 6 pattern, then the matcher will attempt to match any of its elements (each as a literal). So:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    @cmd = (&#39;get&#39;,&#39;put&#39;,&#39;try&#39;,&#39;find&#39;,&#39;copy&#39;,&#39;fold&#39;,&#39;spindle&#39;,&#39;mutilate&#39;);

    $str =~ / @cmd \( .*? \) /;     # Match a cmd, followed by stuff in parens
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5 
    @cmd = (&#39;get&#39;,&#39;put&#39;,&#39;try&#39;,&#39;find&#39;,&#39;copy&#39;,&#39;fold&#39;,&#39;spindle&#39;,&#39;mutilate&#39;);
    $cmd = join &#39;|&#39;, map { quotemeta $_ } @cmd;

    $str =~ / (?:$cmd) \( .*? \) /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, putting the array into angle brackets would cause the matcher to try and match each of the array elements as a pattern, rather than as a literal.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-the-incredible-hunk-the-incredible-hunk-span&#34;&gt;&lt;span id=&#34;the_incredible_hunk&#34;&gt;The incredible &lt;code&gt;$hunk&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The rule that &lt;code&gt;&amp;lt;$hunk&amp;gt;&lt;/code&gt; tries to match against is the next one defined in the program. Here&amp;rsquo;s the annotated version of it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $hunk = rx :i {                             # Case-insensitively...
        [                                       #   Start a non-capturing group
            &amp;lt;$linenum&amp;gt;                          #     Match the subrule in $linenum
            a                                   #     Match a literal &#39;a&#39;
            ::                                  #     Commit to this alternative
            &amp;lt;$linerange&amp;gt;                        #     Match the subrule in $linerange
            \n                                  #     Match a newline
            &amp;lt;$appendline&amp;gt;                       #     Match the subrule in $appendline...
                          +                     #         ...one-or-more times
        |                                       #   Or...
          &amp;lt;$linerange&amp;gt; d :: &amp;lt;$linenum&amp;gt; \n       #     Match $linerange, &#39;d&#39;, $linenum, newline
          &amp;lt;$deleteline&amp;gt;+                        #     Then match $deleteline once-or-more
        |                                       #   Or...
          &amp;lt;$linerange&amp;gt; c :: &amp;lt;$linerange&amp;gt; \n     #     Match $linerange, &#39;c&#39;, $linerange, newline
          &amp;lt;$deleteline&amp;gt;+                        #     Then match $deleteline once-or-more
          --- \n                                #     Then match three &#39;-&#39; and a newline
          &amp;lt;$appendline&amp;gt;+                        #     Then match $appendline once-or-more
        ]                                       #   End of non-capturing group
      |                                         # Or...
        (                                       #   Start a capturing group
            \N*                                 #     Match zero-or-more non-newlines
        )                                       #     End of capturing group
        :::                                     #     Emphatically commit to this alternative
        { fail &amp;quot;Invalid diff hunk: $1&amp;quot; }        #     Then fail with an error msg
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to note is that, like a Perl 5 &lt;code&gt;qr&lt;/code&gt;, a Perl 6 &lt;code&gt;rx&lt;/code&gt; can take (almost) any delimiters we choose. The &lt;code&gt;$hunk&lt;/code&gt; pattern uses &lt;code&gt;{...}&lt;/code&gt;, but we could have used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rx/pattern/     # Standard
    rx[pattern]     # Alternative bracket-delimiter style
    rx&amp;lt;pattern&amp;gt;     # Alternative bracket-delimiter style
    rx«forme»       # Délimiteurs très chic
    rx&amp;gt;pattern&amp;lt;     # Inverted bracketing is allowed too (!)
    rx»Muster«      # Begrenzungen im korrekten Auftrag
    rx!pattern!     # Excited
    rx=pattern=     # Unusual
    rx?pattern?     # No special meaning in Perl 6
    rx#pattern#     # Careful with these: they disable internal comments
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-modified-modifiers-modified-modifiers-span&#34;&gt;&lt;span id=&#34;modified_modifiers&#34;&gt;Modified modifiers&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In fact, the only characters not permitted as &lt;code&gt;rx&lt;/code&gt; delimiters are &lt;code&gt;&#39;:&#39;&lt;/code&gt; and &lt;code&gt;&#39;(&#39;&lt;/code&gt;. That&amp;rsquo;s because &lt;code&gt;&#39;:&#39;&lt;/code&gt; is the character used to introduce pattern modifiers in Perl 6, and &lt;code&gt;&#39;(&#39;&lt;/code&gt; is the character used to delimit any arguments that might be passed to those pattern modifiers.&lt;/p&gt;

&lt;p&gt;In Perl 6, pattern modifiers are placed &lt;em&gt;before&lt;/em&gt; the pattern, rather than after it. That makes life easier for the parser, since it doesn&amp;rsquo;t have to go back and reinterpret the contents of a rule when it reaches the end and discovers a &lt;code&gt;/s&lt;/code&gt; or &lt;code&gt;/m&lt;/code&gt; or &lt;code&gt;/i&lt;/code&gt; or &lt;code&gt;/x&lt;/code&gt;. And it makes life easier for anyone reading the code &amp;ndash; for precisely the same reason.&lt;/p&gt;

&lt;p&gt;The only modifier used in the &lt;code&gt;$hunk&lt;/code&gt; rule is the &lt;code&gt;:i&lt;/code&gt; (case-insensitivity) modifier, which works exactly as it does in Perl 5.&lt;/p&gt;

&lt;p&gt;The other rule modifiers available in Perl 6 are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Ae_or_%3Aeach&#34;&gt;&lt;code&gt;:e&lt;/code&gt; or &lt;code&gt;:each&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the replacement for Perl 5&amp;rsquo;s &lt;code&gt;/g&lt;/code&gt; modifier. It causes a match (or substitution) to be attempted as many times as possible. The name was changed because “each” is shorter and clearer in intent than “globally”. And because the &lt;code&gt;:each&lt;/code&gt; modifier can be combined with other modifiers (see below) in such a way that it&amp;rsquo;s no longer “global” in its effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_x&#34;&gt;&lt;code&gt;:x($count)&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This modifier is like &lt;code&gt;:e&lt;/code&gt;, in that it causes the match or substitution to be attempted repeatedly. However, unlike &lt;code&gt;:e&lt;/code&gt;, it specifies exactly how many times the match must succeed. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;fee fi &amp;quot;       =~ m:x(3)/ (f\w+) /;  # fails
    &amp;quot;fee fi fo&amp;quot;     =~ m:x(3)/ (f\w+) /;  # succeeds (matches &amp;quot;fee&amp;quot;,&amp;quot;fi&amp;quot;,&amp;quot;fo&amp;quot;)
    &amp;quot;fee fi fo fum&amp;quot; =~ m:x(3)/ (f\w+) /;  # succeeds (matches &amp;quot;fee&amp;quot;,&amp;quot;fi&amp;quot;,&amp;quot;fo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the repetition count doesn&amp;rsquo;t have to be a constant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    m:x($repetitions)/ pattern /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a series of tidy abbreviations for all the constant cases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    m:1x/ pattern /         # same as: m:x(1)/ pattern /
    m:2x/ pattern /         # same as: m:x(2)/ pattern /
    m:3x/ pattern /         # same as: m:x(3)/ pattern /
    # etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_nth&#34;&gt;&lt;code&gt;:nth($count)&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This modifier causes a match or substitution to be attempted repeatedly, but to ignore the first &lt;code&gt;$count-1&lt;/code&gt; successful matches. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $foo = &amp;quot;fee fi fo fum&amp;quot;;

    $foo =~ m:nth(1)/ (f\w+) /;        # succeeds (matches &amp;quot;fee&amp;quot;)
    $foo =~ m:nth(2)/ (f\w+) /;        # succeeds (matches &amp;quot;fi&amp;quot;)
    $foo =~ m:nth(3)/ (f\w+) /;        # succeeds (matches &amp;quot;fo&amp;quot;)
    $foo =~ m:nth(4)/ (f\w+) /;        # succeeds (matches &amp;quot;fum&amp;quot;)
    $foo =~ m:nth(5)/ (f\w+) /;        # fails
    $foo =~ m:nth($n)/ (f\w+) /;       # depends on the numeric value of $n

    $foo =~ s:nth(3)/ (f\w+) /bar/;    # $foo now contains: &amp;quot;fee fi bar fum&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, there is also a series of abbreviations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $foo =~ m:1st/ (f\w+) /;           # succeeds (matches &amp;quot;fee&amp;quot;)
    $foo =~ m:2nd/ (f\w+) /;           # succeeds (matches &amp;quot;fi&amp;quot;)
    $foo =~ m:3rd/ (f\w+) /;           # succeeds (matches &amp;quot;fo&amp;quot;)
    $foo =~ m:4th/ (f\w+) /;           # succeeds (matches &amp;quot;fum&amp;quot;)
    $foo =~ m:5th/ (f\w+) /;           # fails

    $foo =~ s:3rd/ (f\w+) /bar/;       # $foo now contains: &amp;quot;fee fi bar fum&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By the way, Perl isn&amp;rsquo;t going to be pedantic about these “ordinal” versions of repetition specifiers. If you&amp;rsquo;re not a native English speaker, and you find &lt;code&gt;:1th&lt;/code&gt;, &lt;code&gt;:2th&lt;/code&gt;, &lt;code&gt;:3th&lt;/code&gt;, &lt;code&gt;:4th&lt;/code&gt;, etc., easier to remember, then that&amp;rsquo;s perfectly OK.&lt;/p&gt;

&lt;p&gt;The various types of repetition modifiers can also be combined by separating them with additional colons:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $foo = &amp;quot;fee fi fo feh far foo fum &amp;quot;;

    $foo =~ m:2nd:2x/ (f\w+) /;        # succeeds (matches &amp;quot;fi&amp;quot;, &amp;quot;feh&amp;quot;)
    $foo =~ m:each:2nd/ (f\w+) /;      # succeeds (matches &amp;quot;fi&amp;quot;, &amp;quot;feh&amp;quot;, &amp;quot;foo&amp;quot;)
    $foo =~ m:x(2):nth(3)/ (f\w+) /;   # succeeds (matches &amp;quot;fo&amp;quot;, &amp;quot;foo&amp;quot;)
    $foo =~ m:each:3rd/ (f\w+) /;      # succeeds (matches &amp;quot;fo&amp;quot;, &amp;quot;foo&amp;quot;)
    $foo =~ m:2x:4th/ (f\w+) /;        # fails (not enough matches to satisfy :2x)
    $foo =~ m:4th:each/ (f\w+) /;      # succeeds (matches &amp;quot;feh&amp;quot;)

    $foo =~ s:each:2nd/ (f\w+) /bar/;  # $foo now &amp;quot;fee bar fo bar far bar fum &amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the order in which the two modifiers are specified doesn&amp;rsquo;t matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Ap5_or_%3Aperl5&#34;&gt;&lt;code&gt;:p5&lt;/code&gt; or &lt;code&gt;:perl5&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This modifier causes Perl 6 to interpret the contents of a rule as a regular expression in Perl 5 syntax. This is mainly provided as a transitional aid for porting Perl 5 code. And to mollify the curmudgeonly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Aw_or_%3Aword&#34;&gt;&lt;code&gt;:w&lt;/code&gt; or &lt;code&gt;:word&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This modifier causes whitespace appearing in the pattern to match optional whitespace in the string being matched. For example, instead of having to cope with optional whitespace explicitly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $cmd =~ m/ \s* &amp;lt;keyword&amp;gt; \s* \( [\s* &amp;lt;arg&amp;gt; \s* ,?]* \s* \)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can just write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $cmd =~ m:w/ &amp;lt;keyword&amp;gt; \( [ &amp;lt;arg&amp;gt; ,?]* \)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;:w&lt;/code&gt; modifier is also smart enough to detect those cases where the whitespace should actually be mandatory. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $str =~ m:w/a symmetric ally/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $str =~ m/a \s+ symmetric \s+ ally/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rather than:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $str =~ m/a \s* symmetric \s* ally/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it won&amp;rsquo;t accidentally match strings like &lt;code&gt;&amp;quot;asymmetric ally&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;asymmetrically&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Aany&#34;&gt;&lt;code&gt;:any&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This modifier causes the rule to match a given string in every possible way, simultaneously, and then return all the possible matches. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $str = &amp;quot;ahhh&amp;quot;;

    @matches =  $str =~ m/ah*/;         # returns &amp;quot;ahhh&amp;quot;
    @matches =  $str =~ m:any/ah*/;     # returns &amp;quot;ahhh&amp;quot;, &amp;quot;ahh&amp;quot;, &amp;quot;ah&amp;quot;, &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Au0%2C_%3Au1%2C_%3Au2%2C_%3Au3&#34;&gt;&lt;code&gt;:u0&lt;/code&gt;, &lt;code&gt;:u1&lt;/code&gt;, &lt;code&gt;:u2&lt;/code&gt;, &lt;code&gt;:u3&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These modifiers specify how the rule matches the dot (&lt;code&gt;.&lt;/code&gt;) metacharacter against Unicode data. If &lt;code&gt;:u0&lt;/code&gt; is specified, then dot matches a single byte; if &lt;code&gt;:u1&lt;/code&gt; is specified, then dot matches a single codepoint (i.e. one or more bytes representing a single Unicode “character”). If &lt;code&gt;:u2&lt;/code&gt; is specified, then dot matches a single grapheme (i.e. a base codepoint followed by zero or more modifier codepoints, such as accents). If &lt;code&gt;:u3&lt;/code&gt; is specified, then dot matches an appropriate “something” in a language-dependent manner.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s OK to ignore this modifier if you&amp;rsquo;re not using Unicode (and maybe even if you are). As usual, Perl will try to do the right thing. To that end, the default behavior of rules is &lt;code&gt;:u2&lt;/code&gt;, unless an overriding pragma (e.g. &lt;code&gt;use bytes&lt;/code&gt;) is in effect.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;/s&lt;/code&gt;, &lt;code&gt;/m&lt;/code&gt;, and &lt;code&gt;/e&lt;/code&gt; modifiers are no longer available. This is because they&amp;rsquo;re no longer needed. The &lt;code&gt;/s&lt;/code&gt; isn&amp;rsquo;t needed because the &lt;code&gt;.&lt;/code&gt; (dot) metacharacter now matches newlines as well. When we want to match “anything except a newline”, we now use the new &lt;code&gt;\N&lt;/code&gt; metatoken (i.e. “opposite of &lt;code&gt;\n&lt;/code&gt;”).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/m&lt;/code&gt; modifier isn&amp;rsquo;t required, because &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; always mean start and end of string, respectively. To match the start and end of a line, we use the new &lt;code&gt;^^&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; metatokens instead.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/e&lt;/code&gt; modifier is no longer needed, because Perl 6 provides the &lt;code&gt;$(...)&lt;/code&gt; string interpolator (as described in Apocalypse 2). So a substitution such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5
    s/(\w+)/ get_val_for($1) /e;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    s/(\w+)/$( get_val_for($1) )/;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this document is out of date and remains here for historic interest. See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S05.html&#34;&gt;Synopsis 5&lt;/a&gt; for the current design information.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-take-no-prisoners-take-no-prisoners-span&#34;&gt;&lt;span id=&#34;take_no_prisoners&#34;&gt;Take no prisoners&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The first character of the &lt;code&gt;$hunk&lt;/code&gt; rule is an opening square bracket. In Perl 5, that denoted the start of a character class, but not in Perl 6. In Perl 6, square brackets mark the boundaries of a noncapturing group. That is, a pair of square brackets in Perl 6 are the same as a &lt;code&gt;(?:...)&lt;/code&gt; in Perl 5, but less line-noisy.&lt;/p&gt;

&lt;p&gt;By the way, to get a character class in Perl 6, we need to put the square brackets inside a pair of metasyntactic angle brackets. So the Perl 5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5
    / [A-Za-z] [0-9]+ /x          # An A-Z or a-z, followed by digits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would become in Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    / &amp;lt;[A-Za-z]&amp;gt; &amp;lt;[0-9]&amp;gt;+ /       # An A-Z or a-z, followed by digits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Perl 5 complemented character class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5
    / [^A-Za-z]+ /x               # One-or-more chars-that-aren&#39;t-A-Z-or-a-z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes in Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    / &amp;lt;-[A-Za-z]&amp;gt;+ /              #  One-or-more chars-that-aren&#39;t-A-Z-or-a-z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The external minus sign is used (instead of an internal caret), because Perl 6 allows proper set operations on character classes, and the minus sign is the “difference” operator. So we could also create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6
    / &amp;lt; &amp;lt;alpha&amp;gt; - [A-Za-z] &amp;gt;+ /   # All alphabetics except A-Z or a-z
                                  # (i.e. the accented alphabetics)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explicit character classes were deliberately made a little less convenient in Perl 6, because they&amp;rsquo;re generally a bad idea in a Unicode world. For example, the &lt;code&gt;[A-Za-z]&lt;/code&gt; character class in the above examples won&amp;rsquo;t even match standard alphabetic Latin-1 characters like &lt;code&gt;&#39;Ã&#39;&lt;/code&gt;, &lt;code&gt;&#39;é&#39;&lt;/code&gt;, &lt;code&gt;&#39;ø&#39;&lt;/code&gt;, let alone alphabetic characters from code-sets such as Cyrillic, Hiragana, Ogham, Cherokee, or Klingon.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-meanwhile-back-at-the-hunk-meanwhile-back-at-the-hunk-span&#34;&gt;&lt;span id=&#34;meanwhile_back_at_the_hunk&#34;&gt;Meanwhile, back at the &lt;code&gt;$hunk&lt;/code&gt; &amp;hellip;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The noncapturing group of the &lt;code&gt;$hunk&lt;/code&gt; pattern groups together three alternatives, separated by &lt;code&gt;|&lt;/code&gt; metacharacters (as in Perl 5). The first alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;$linenum&amp;gt; a :: &amp;lt;$linerange&amp;gt;
    \n                         
    &amp;lt;$appendline&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grabs whatever is in the &lt;code&gt;$linenum&lt;/code&gt; variable, treats it as a subpattern, and attempts to match against it. It then matches a literal letter &lt;code&gt;&#39;a&#39;&lt;/code&gt; (or an &lt;code&gt;&#39;A&#39;&lt;/code&gt;, because of the &lt;code&gt;:i&lt;/code&gt; modifier on the rule). Then whatever the contents of the &lt;code&gt;$linerange&lt;/code&gt; variable match. Then a newline. Then it tries to match whatever the pattern in &lt;code&gt;$appendline&lt;/code&gt; would match, one or more times.&lt;/p&gt;

&lt;p&gt;But what about that double-colon after the &lt;code&gt;a&lt;/code&gt;? Shouldn&amp;rsquo;t the pattern have tried to match two colons at that point?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-this-or-nothing-this-or-nothing-span&#34;&gt;&lt;span id=&#34;this_or_nothing&#34;&gt;This or nothing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Actually, no. The double-colon is a new Perl 6 pattern-control structure. It has no effect (and is ignored) when the pattern is successfully matching, but if the pattern match should fail, and consequently back-track over the double-colon &amp;ndash; for example, to try and rematch an earlier repetition one fewer times &amp;ndash; the double-colon causes the entire surrounding group (i.e. the surrounding &lt;code&gt;[...]&lt;/code&gt; in this case) to fail as well.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a useful optimization in this case because, if we match a line number followed by an &lt;code&gt;&#39;a&#39;&lt;/code&gt; but subsequently fail, then there&amp;rsquo;s no point even trying either of the other two alternatives in the same group. Because we found an &lt;code&gt;&#39;a&#39;&lt;/code&gt;, there&amp;rsquo;s no chance we could match a &lt;code&gt;&#39;d&#39;&lt;/code&gt; or a &lt;code&gt;&#39;c&#39;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;So, in general, a double-colon means: “At this point I&amp;rsquo;m committed to this alternative within the current group &amp;ndash; don&amp;rsquo;t bother with the others if this one fails after this point”.&lt;/p&gt;

&lt;p&gt;There are other control directives like this, too. A single colon means: “Don&amp;rsquo;t bother backtracking into the previous element”. That&amp;rsquo;s useful in a pattern like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rx:w/ $keyword [-full|-quick|-keep]+ : end /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we successfully match the keyword (as a literal, by the way) and one or more of the three options, but then fail to match &lt;code&gt;&#39;end&#39;&lt;/code&gt;. In that case, there&amp;rsquo;s no point backtracking and trying to match one fewer option, and &lt;em&gt;still&lt;/em&gt; failing to find an &lt;code&gt;&#39;end&#39;&lt;/code&gt;. And then backtracking &lt;em&gt;another&lt;/em&gt; option, and failing again, etc. By using the colon after the repetition, we tell the matcher to give up after the first attempt.&lt;/p&gt;

&lt;p&gt;However, the single colon isn&amp;rsquo;t just a “Greed is Good” operator. It&amp;rsquo;s much more like a “Resistance is Futile” operator. That is, if the preceding repetition had been non-greedy instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rx:w/ $keyword [-full|-quick|-keep]+? : end /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then backtracking over the colon would prevent the &lt;code&gt;+?&lt;/code&gt; from attempting to match &lt;em&gt;more&lt;/em&gt; options. Note that this means that &lt;code&gt;x+?:&lt;/code&gt; is just a baroque way of matching exactly one repetition of &lt;code&gt;x&lt;/code&gt;, since the non-greedy repetition initially tries to match the minimal number of times (i.e. once) and the trailing colon then prevents it from backtracking and trying longer matches. Likewise, &lt;code&gt;x*?:&lt;/code&gt; and &lt;code&gt;x??:&lt;/code&gt; are arcane ways of matching exactly zero repetitions of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Generally, though, a single colon tells the pattern matcher that there&amp;rsquo;s no point trying any other match on the preceding repetition, because retrying (whether more or fewer repetitions) would just waste time and would still fail.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a three-colon directive. Three colons means: “If we have to backtrack past here, cause the entire rule to fail” (i.e. not just this group). If the double-colon in &lt;code&gt;$hunk&lt;/code&gt; had been triple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;$linenum&amp;gt; a ::: &amp;lt;$linerange&amp;gt;
    \n                         
    &amp;lt;$appendline&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then matching a line number and an &lt;code&gt;&#39;a&#39;&lt;/code&gt; and subsequently failing would cause the entire &lt;code&gt;$hunk&lt;/code&gt; rule to fail immediately (though the &lt;code&gt;$file&lt;/code&gt; rule that invoked it might still match successfully in some other way).&lt;/p&gt;

&lt;p&gt;So, in general, a triple-colon specifies: “At this point I&amp;rsquo;m committed to this way of matching the current rule &amp;ndash; give up on the rule completely if the matching process fails at this point”.&lt;/p&gt;

&lt;p&gt;Four colons &amp;hellip; would just be silly. So, instead, there&amp;rsquo;s a special named directive: &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. Backtracking through a &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; causes the entire match to immediately fail. And if the current rule is being matched as part of a larger rule, that larger rule will fail as well. In other words, it&amp;rsquo;s the “Blow up this Entire Planet and Possibly One or Two Others We Noticed on our Way Out Here” operator.&lt;/p&gt;

&lt;p&gt;If the double-colon in &lt;code&gt;$hunk&lt;/code&gt; had been a &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;$linenum&amp;gt; a &amp;lt;commit&amp;gt; &amp;lt;$linerange&amp;gt;
    \n                         
    &amp;lt;$appendline&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then matching a line number and an &lt;code&gt;&#39;a&#39;&lt;/code&gt; and subsequently failing would cause the entire &lt;code&gt;$hunk&lt;/code&gt; rule to fail immediately, &lt;em&gt;and&lt;/em&gt; would also cause the &lt;code&gt;$file&lt;/code&gt; rule that invoked it to fail immediately.&lt;/p&gt;

&lt;p&gt;So, in general, a &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; means: “At this point I&amp;rsquo;m committed to this way of completing the current match &amp;ndash; give up all attempts at matching anything if the matching process fails at this point”.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-failing-with-style-failing-with-style-span&#34;&gt;&lt;span id=&#34;failing_with_style&#34;&gt;Failing with style&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The other two alternatives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    | &amp;lt;$linerange&amp;gt; d :: &amp;lt;$linenum&amp;gt; \n
      &amp;lt;$deleteline&amp;gt;+                 
    | &amp;lt;$linerange&amp;gt; c :: &amp;lt;$linerange&amp;gt; \n
      &amp;lt;$deleteline&amp;gt;+  --- \n  &amp;lt;$appendline&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;are just variants on the first.&lt;/p&gt;

&lt;p&gt;If none of the three alternatives in the square brackets matches, then the alternative outside the brackets is tried:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    |  (\N*) ::: { fail &amp;quot;Invalid diff hunk: $1&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This captures a sequence of non-newline characters (&lt;code&gt;\N&lt;/code&gt; means “not &lt;code&gt;\n&lt;/code&gt;”, in the same way &lt;code&gt;\S&lt;/code&gt; means “not &lt;code&gt;\s&lt;/code&gt;” or &lt;code&gt;\W&lt;/code&gt; means “not &lt;code&gt;\w&lt;/code&gt;”). Then it invokes a block of Perl code inside the pattern. The call to &lt;code&gt;fail&lt;/code&gt; causes the match to fail at that point, and sets an associated error message that would subsequently appear in the &lt;code&gt;$!&lt;/code&gt; error variable (and which would also be accessible as part of &lt;code&gt;$0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note the use of the triple colon after the repetition. It&amp;rsquo;s needed because the &lt;code&gt;fail&lt;/code&gt; in the block will cause the pattern match to backtrack, but there&amp;rsquo;s no point backing up one character and trying again, since the original failure was precisely what we wanted. The presence of the triple-colon causes the entire rule to fail as soon as the backtracking reaches that point the first time.&lt;/p&gt;

&lt;p&gt;The overall effect of the &lt;code&gt;$hunk&lt;/code&gt; rule is therefore either to match one hunk of the diff, or else fail with a relevant error message.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-home-home-on-the-line-range-home-home-on-the-line-range-span&#34;&gt;&lt;span id=&#34;home_home_on_the_line_range&#34;&gt;Home, home on the (line)range&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The third and fourth rules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $linerange = rx/ &amp;lt;$linenum&amp;gt; , &amp;lt;$linenum&amp;gt;
                   | &amp;lt;$linenum&amp;gt; 
                   /;

    $linenum = rx/ \d+ /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;specify that a line number consists of a series of digits, and that a line range consists of either two line numbers with a comma between them or a single line number. The &lt;code&gt;$linerange&lt;/code&gt; rule could also have been written:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $linerange = rx/ &amp;lt;$linenum&amp;gt; [ , &amp;lt;$linenum&amp;gt; ]? /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which might be marginally more efficient, since it doesn&amp;rsquo;t have to backtrack and rematch the first &lt;code&gt;$linenum&lt;/code&gt; in the second alternative. It&amp;rsquo;s likely, however, that the rule optimizer will detect such cases and automatically hoist the common prefix out anyway, so it&amp;rsquo;s probably not worth the decrease in readability to do that manually.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-whats-my-line-what-s-my-line-span&#34;&gt;&lt;span id=&#34;whats_my_line&#34;&gt;What&amp;rsquo;s my line?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The final two rules specify the structure of individual context lines in the diff (i.e. the lines that say what text is being added or removed by the hunk):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ \&amp;lt; &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ \&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;^^&lt;/code&gt; markers ensure that each rule starts at the beginning of an entire line.&lt;/p&gt;

&lt;p&gt;The first character on that line must be either a &lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; or a &lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt;. Note that we have to escape these characters since angle brackets are metacharacters in Perl 6. An alternative would be to use the “literal string” metasyntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ &amp;lt;&#39;&amp;lt;&#39;&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ &amp;lt;&#39;&amp;gt;&#39;&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, angle brackets with a single-quoted string inside them match the string&amp;rsquo;s sequence of characters as literals (including whitespace and other metatokens).&lt;/p&gt;

&lt;p&gt;Or we could have used the quotemeta metasyntax (&lt;code&gt;\Q[...]&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ \Q[&amp;lt;] &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ \Q[&amp;gt;] &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Perl 5&amp;rsquo;s &lt;code&gt;\Q...\E&lt;/code&gt; construct is replaced in Perl 6 by just the &lt;code&gt;\Q&lt;/code&gt; marker, which now takes a group after it.&lt;/p&gt;

&lt;p&gt;We could also have used a single-letter character class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ &amp;lt;[&amp;lt;]&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ &amp;lt;[&amp;gt;]&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even a named character (&lt;code&gt;\c[CHAR NAME HERE]&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ \c[LEFT ANGLE BRACKET] &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ \c[RIGHT ANGLE BRACKET] &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whether any of those MTOWTDI is better than just escaping the angle bracket is, of course, a matter of personal taste.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-the-final-frontier-the-final-frontier-span&#34;&gt;&lt;span id=&#34;the_final_frontier&#34;&gt;The final frontier&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;After the leading angle, a single literal space is expected. Again, we could have specified that by escapology (&lt;code&gt;\ &lt;/code&gt;) or literalness (&lt;code&gt;&amp;lt;&#39; &#39;&amp;gt;&lt;/code&gt;) or quotemetaphysics (&lt;code&gt;\Q[ ]&lt;/code&gt;) or character classification (&lt;code&gt;&amp;lt;[ ]&amp;gt;&lt;/code&gt;), or deterministic nomimalism (&lt;code&gt;\c[SPACE]&lt;/code&gt;), but Perl 6 also gives us a simple &lt;em&gt;name&lt;/em&gt; for the space character: &lt;code&gt;&amp;lt;sp&amp;gt;&lt;/code&gt;. This is the preferred option, since it reduces line-noise and makes the significant space much harder to miss.&lt;/p&gt;

&lt;p&gt;Perl 6 provides predefined names for other useful subpatterns as well, including:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Cdot%3E&#34;&gt;&lt;code&gt;&amp;lt;dot&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which matches a literal dot (&lt;code&gt;&#39;.&#39;&lt;/code&gt;) character (i.e. it&amp;rsquo;s a more elegant synonym for &lt;code&gt;\.&lt;/code&gt;);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Clt%3E_and_%3Cgt%3E&#34;&gt;&lt;code&gt;&amp;lt;lt&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;gt&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which match a literal &lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; and &lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt; respectively. These give us yet another way of writing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ &amp;lt;lt&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ &amp;lt;gt&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Cws%3E&#34;&gt;&lt;code&gt;&amp;lt;ws&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which matches any sequence of whitespace (i.e. it&amp;rsquo;s a more elegant synonym for &lt;code&gt;\s+&lt;/code&gt;). Optional whitespace is, therefore, specified as &lt;code&gt;&amp;lt;ws&amp;gt;?&lt;/code&gt; or &lt;code&gt;&amp;lt;ws&amp;gt;*&lt;/code&gt; (Perl 6 will accept either);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Calpha%3E&#34;&gt;&lt;code&gt;&amp;lt;alpha&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which matches a single alphabetic character (i.e. it&amp;rsquo;s like the character class &lt;code&gt;&amp;lt;[A-Za-z]&amp;gt;&lt;/code&gt; but it handles accented characters and alphabetic characters from non-Roman scripts as well);&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_%3Cident%3E&#34;&gt;&lt;code&gt;&amp;lt;ident&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which is a short-hand for &lt;code&gt;[ [&amp;lt;alpha&amp;gt;|_] \w* ]&lt;/code&gt; (i.e. a standard identifier in many languages, including Perl)&lt;/p&gt;

&lt;p&gt;Using named subpatterns like these makes rules clearer in intent, easier to read, and more self-documenting. And, as we&amp;rsquo;ll see &lt;a href=&#34;#what&#39;s%20in%20a%20name&#34;&gt;shortly&lt;/a&gt;, they&amp;rsquo;re fully generalizable&amp;hellip;we can create our own.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-matchmaker-matchmaker-match-maker-match-maker-span&#34;&gt;&lt;span id=&#34;matchmaker_matchmaker&#34;&gt;Match-maker, match-maker&amp;hellip;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Finally, we&amp;rsquo;re ready to actually read in and match a diff file. In Perl 5, we&amp;rsquo;d do that like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 5

    local $/;          # Disable input record separator (enable slurp mode)
    my $text = &amp;lt;&amp;gt;;     # Slurp up input stream into $text

    print &amp;quot;Valid diff&amp;quot; 
        if $text =~ /$file/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could do the same thing in Perl 6 (though the syntax would differ slightly) and in this case that would be fine. But, in general, it&amp;rsquo;s clunky to have to slurp up the entire input before we start matching. The input might be huge, and we might fail early. Or we might want to match input interactively (and issue an error message as soon as the input fails to match). Or we might be matching a series of different formats. Or we might want to be able to leave the input stream in its original state if the match fails.&lt;/p&gt;

&lt;p&gt;The inability to do pattern matches immediately on an input stream is one of Perl 5&amp;rsquo;s few weaknesses when it comes to text processing. Sure, we can read line-by-line and apply pattern matching to each line, but trying to match a construct that may be laid out across an unknown number of lines is just painful.&lt;/p&gt;

&lt;p&gt;Not in Perl 6 though. In Perl 6, we can bind an input stream to a scalar variable (i.e. like a Perl 5 tied variable) and then just match on the characters in that stream as if they were already in memory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $text is from($*ARGS);       # Bind scalar to input stream

    print &amp;quot;Valid diff&amp;quot; 
        if $text =~ /&amp;lt;$file&amp;gt;/;      # Match against input stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important point is that, after the match, only those characters that the pattern actually matched will have been removed from the input stream.&lt;/p&gt;

&lt;p&gt;It may also be possible to skip the variable entirely and just write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;Valid diff&amp;quot; 
        if $*ARGS =~ /&amp;lt;$file&amp;gt;/;     # Match against input stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print &amp;quot;Valid diff&amp;quot; 
        if &amp;lt;&amp;gt; =~ /&amp;lt;$file&amp;gt;/;         # Match against input stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but that&amp;rsquo;s yet to be decided.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-a-cleaner-approach-a-cleaner-approach-span&#34;&gt;&lt;span id=&#34;a_cleaner_approach&#34;&gt;A cleaner approach&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The previous example solves the problem of recognizing a valid diff file quite nicely (and with only six rules!), but it does so by cluttering up the program with a series of variables storing those precompiled patterns.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s as if we were to write a collection of subroutines like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $print_name = sub ($data) { print $data{name}, &amp;quot;\n&amp;quot;; };
    my $print_age  = sub ($data) { print $data{age}, &amp;quot;\n&amp;quot;; };
    my $print_addr = sub ($data) { print $data{addr}, &amp;quot;\n&amp;quot;; };

    my $print_info = sub ($data) {
        $print_name($data);
        $print_age($data);
        $print_addr($data);
    };

    # and later...

    $print_info($info);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; do it that way, but it&amp;rsquo;s not the right way to do it. The right way to do it is as a collection of named subroutines or methods, often collected together in the namespace of a class or module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    module Info {

        sub print_name ($data) { print $data{name}, &amp;quot;\n&amp;quot;; }
        sub print_age ($data)  { print $data{age}, &amp;quot;\n&amp;quot;; }
        sub print_addr ($data) { print $data{addr}, &amp;quot;\n&amp;quot;; }

        sub print_info ($data) {
            print_name($data);
            print_age($data);
            print_addr($data);
        }
    }

    Info::print_info($info);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it is with Perl 6 patterns. You &lt;em&gt;can&lt;/em&gt; write them as a series of pattern objects created at run-time, but they&amp;rsquo;re much better specified as a collection of named patterns, collected together at compile-time in the namespace of a grammar.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the previous diff-parsing example rewritten that way (and with a few extra bells-and-whistles added in):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar Diff {
        rule file { ^  &amp;lt;hunk&amp;gt;*  $ }

        rule hunk :i { 
            [ &amp;lt;linenum&amp;gt; a :: &amp;lt;linerange&amp;gt; \n
              &amp;lt;appendline&amp;gt;+ 
            |
              &amp;lt;linerange&amp;gt; d :: &amp;lt;linenum&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
            |
              &amp;lt;linerange&amp;gt; c :: &amp;lt;linerange&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
              --- \n
              &amp;lt;appendline&amp;gt;+
            ]
          |
            &amp;lt;badline(&amp;quot;Invalid diff hunk&amp;quot;)&amp;gt;
        }

        rule badline ($errmsg) { (\N*) ::: { fail &amp;quot;$errmsg: $1&amp;quot; }

        rule linerange { &amp;lt;linenum&amp;gt; , &amp;lt;linenum&amp;gt;
                       | &amp;lt;linenum&amp;gt;
                       }

        rule linenum { \d+ }

        rule deleteline { ^^ &amp;lt;out_marker&amp;gt; (\N* \n) }
        rule appendline { ^^ &amp;lt;in_marker&amp;gt;  (\N* \n) }

        rule out_marker { \&amp;lt;  &amp;lt;sp&amp;gt; }
        rule in_marker  { \&amp;gt;  &amp;lt;sp&amp;gt; }
    }

    # and later...

    my $text is from($*ARGS);

    print &amp;quot;Valid diff&amp;quot; 
        if $text =~ /&amp;lt;Diff.file&amp;gt;/;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-whats-in-a-name-what-s-in-a-name-span&#34;&gt;&lt;span id=&#34;whats_in_a_name&#34;&gt;What&amp;rsquo;s in a name?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;grammar&lt;/code&gt; declaration creates a new namespace for rules (in the same way a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;module&lt;/code&gt; declaration creates a new namespace for methods or subroutines). If a block is specified after the grammar&amp;rsquo;s name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar HTML {

        rule file :iw { \Q[&amp;lt;HTML&amp;gt;]  &amp;lt;head&amp;gt;  &amp;lt;body&amp;gt;  \Q[&amp;lt;/HTML&amp;gt;] }

        rule head :iw { \Q[&amp;lt;HEAD&amp;gt;]  &amp;lt;head_tag&amp;gt;+  \Q[&amp;lt;HEAD&amp;gt;] }

        # etc.

    } # Explicit end of HTML grammar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then that new namespace is confined to that block. Otherwise the namespace continues until the end of the source section of the current file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar HTML;

    rule file :iw { \Q[&amp;lt;HTML&amp;gt;]  &amp;lt;head&amp;gt;  &amp;lt;body&amp;gt;  \Q[&amp;lt;/HTML&amp;gt;] }

    rule head :iw { \Q[&amp;lt;HEAD&amp;gt;]  &amp;lt;head_tag&amp;gt;+  \Q[&amp;lt;HEAD&amp;gt;] }

    # etc.

    # Implicit end of HTML grammar
    __END__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, as with the blockless variants on &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt;, this form of the syntax is designed to simplify one-namespace-per-file situations. It&amp;rsquo;s a compile-time error to put two or more blockless grammars, classes or modules in a single file.&lt;/p&gt;

&lt;p&gt;Within the namespace, named rules are defined using the &lt;code&gt;rule&lt;/code&gt; declarator. It&amp;rsquo;s analogous to the &lt;code&gt;sub&lt;/code&gt; declarator within a module, or the &lt;code&gt;method&lt;/code&gt; declarator within a class. Just like a class method, a named rule has to be invoked through its grammar if we refer to it outside its own namespace. That&amp;rsquo;s why the actual match became:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $text =~ /&amp;lt;Diff.file&amp;gt;/;         # Invoke through grammar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to match a named rule, we put the name in angle brackets. Indeed, many of the constructs we&amp;rsquo;ve already seen &amp;ndash; &lt;code&gt;&amp;lt;sp&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ws&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ident&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;alpha&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; &amp;ndash; are really just predefined named rules that come standard with Perl 6.&lt;/p&gt;

&lt;p&gt;Like subroutines and methods, within their own namespace, rules don&amp;rsquo;t have to be qualified. Which is why we can write things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange { &amp;lt;linenum&amp;gt; , &amp;lt;linenum&amp;gt;
                   | &amp;lt;linenum&amp;gt;
                   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange { &amp;lt;Diff.linenum&amp;gt; , &amp;lt;Diff.linenum&amp;gt;
                   | &amp;lt;Diff.linenum&amp;gt;
                   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using named rules has several significant advantages, apart from making the patterns look cleaner. For one thing, the compiler may be able to optimize the embedded named rules better. For example, it could inline the attempts to match &lt;code&gt;&amp;lt;linenum&amp;gt;&lt;/code&gt; within the &lt;code&gt;linerange&lt;/code&gt; rule. In the &lt;code&gt;rx&lt;/code&gt; version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $linerange = rx{ &amp;lt;$linenum&amp;gt; , &amp;lt;$linenum&amp;gt;
                   | &amp;lt;$linenum&amp;gt;
                   };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that&amp;rsquo;s not possible, since the pattern matching mechanism won&amp;rsquo;t know what&amp;rsquo;s in &lt;code&gt;$linenum&lt;/code&gt; until it actually tries to perform the match.&lt;/p&gt;

&lt;p&gt;By the way, we &lt;em&gt;can&lt;/em&gt; still use interpolated &lt;code&gt;&amp;lt;$subrule&amp;gt;&lt;/code&gt;-ish subpatterns in a named rule, and we can use named subpatterns in an &lt;code&gt;rx&lt;/code&gt;-ish rule. The difference between &lt;code&gt;rule&lt;/code&gt; and &lt;code&gt;rx&lt;/code&gt; is just that a &lt;code&gt;rule&lt;/code&gt; can have a name and must use &lt;code&gt;{...}&lt;/code&gt; as its delimiters, whereas an &lt;code&gt;rx&lt;/code&gt; doesn&amp;rsquo;t have a name and can use any allowed delimiters.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-bad-line-no-match-bad-line-no-match-span&#34;&gt;&lt;span id=&#34;bad_line_no_match&#34;&gt;Bad line! No match!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This version of the diff parser has an additional rule, named &lt;code&gt;badline&lt;/code&gt;. This rule illustrates another similarity between rules and subroutines/methods: rules can take arguments. The &lt;code&gt;badline&lt;/code&gt; rule factors out the error message creation at the end of the &lt;code&gt;hunk&lt;/code&gt; rule. Previously that rule ended with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    |  (\N*) ::: { fail &amp;quot;Invalid diff hunk: $1&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but in this version it ends with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    |  &amp;lt;badline(&amp;quot;Invalid diff hunk&amp;quot;)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a much better abstraction of the error condition. It&amp;rsquo;s easier to understand and easier to maintain, but it does require us to be able to pass an argument (the error message) to the new &lt;code&gt;badline&lt;/code&gt; subrule. To do that, we simply declare it to have a parameter list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule badline($errmsg) { (\N*) ::: { fail &amp;quot;$errmsg: $1&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the strong syntactic parallel with a subroutine definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub  subname($param)  { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The argument is passed to a subrule by placing it in parentheses after the rule name within the angle brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    |  &amp;lt;badline(&amp;quot;Invalid diff hunk&amp;quot;)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The argument can also be passed without the parentheses, but then it is interpreted as if it were the body of a separate rule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule list_of ($pattern) { 
            &amp;lt;$pattern&amp;gt; [ , &amp;lt;$pattern&amp;gt; ]*
    }

    # and later...

    $str =~ m:w/  \[                  # Literal opening square bracket
                  &amp;lt;list_of \w\d+&amp;gt;     # Call list_of subrule passing rule rx/\w\d+/
                  \]                  # Literal closing square bracket
               /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A rule can take as many arguments as it needs to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule seplist($elem, $sep) {
            &amp;lt;$elem&amp;gt;  [ &amp;lt;$sep&amp;gt; &amp;lt;$elem&amp;gt; ]*
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and those arguments can also be passed by name, using the standard Perl 6 pair-based mechanism (as described in Apocalypse 3).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $str =~ m:w/
                \[                                      # literal left square bracket
                &amp;lt;seplist(sep=&amp;gt;&amp;quot;:&amp;quot;, elem=&amp;gt;rx/&amp;lt;ident&amp;gt;/)&amp;gt;  # colon-separated list of identifiers
                \]                                      # literal right square bracket
               /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the list&amp;rsquo;s element specifier is itself an anonymous rule, which the &lt;code&gt;seplist&lt;/code&gt; rule will subsequently interpolate as a pattern (because the &lt;code&gt;$elem&lt;/code&gt; parameter appears in angle brackets within &lt;code&gt;seplist&lt;/code&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this document is out of date and remains here for historic interest. See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S05.html&#34;&gt;Synopsis 5&lt;/a&gt; for the current design information.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-thinking-ahead-thinking-ahead-span&#34;&gt;&lt;span id=&#34;thinking_ahead&#34;&gt;Thinking ahead&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The only other change in the grammar version of the diff parser is that the matching of the &lt;code&gt;&#39;&amp;lt;&#39;&lt;/code&gt; and &lt;code&gt;&#39;&amp;gt;&#39;&lt;/code&gt; at the start of the context lines has been factored out. Whereas before we had:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $deleteline = rx/^^ \&amp;lt; &amp;lt;sp&amp;gt; (\N* \n) /
    $appendline = rx/^^ \&amp;gt; &amp;lt;sp&amp;gt; (\N* \n) /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule deleteline { ^^ &amp;lt;out_marker&amp;gt; (\N* \n) }
    rule appendline { ^^ &amp;lt;in_marker&amp;gt;  (\N* \n) }

    rule out_marker { \&amp;lt;  &amp;lt;sp&amp;gt; }
    rule in_marker  { \&amp;gt;  &amp;lt;sp&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That seems like a step backwards, since it complicated the grammar for no obvious benefit, but the benefit will be reaped &lt;a href=&#34;#different%20diffs&#34;&gt;later&lt;/a&gt; when we discover another type of diff file that uses different markers for incoming and outgoing lines.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-what-you-match-is-what-you-get-what-you-match-is-what-you-get-span&#34;&gt;&lt;span id=&#34;what_you_match_is_what_you_get&#34;&gt;What you match is what you get&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Both the variable-based and grammatical versions of the code above do a great job of &lt;em&gt;recognizing&lt;/em&gt; a diff, but that&amp;rsquo;s all they do. If we only want syntax checking, that&amp;rsquo;s fine. But, generally, if we&amp;rsquo;re parsing data what we really want is to do something useful with it: transform it into some other syntax, make changes to its contents, or perhaps convert it to a Perl internal data structure for our program to manipulate.&lt;/p&gt;

&lt;p&gt;Suppose we did want to build a hierarchical Perl data structure representing the diff that the above examples match. What extra code would we need?&lt;/p&gt;

&lt;p&gt;None.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s right. Whenever Perl 6 matches a pattern, it &lt;em&gt;automatically&lt;/em&gt; builds a “result object” representing the various components of the match.&lt;/p&gt;

&lt;p&gt;That result object is named &lt;code&gt;$0&lt;/code&gt; (the program&amp;rsquo;s name is now &lt;code&gt;$*PROG&lt;/code&gt;) and it&amp;rsquo;s lexical to the scope in which the match occurs. The result object stores (amongst other things) the complete string matched by the pattern, and it evaluates to that string when used in a string context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if ($text =~ /&amp;lt;Diff.file&amp;gt;/) {
        $difftext = $0;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s handy, but not really useful for extracting data structures. However, in addition, any components within a match that were captured using parentheses become elements of the object&amp;rsquo;s array attribute, and are accessible through its array index operator. So, for example, when a pattern such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linenum_plus_comma { (\d+) (,?) };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;matches successfully, the array element 1 of the result object (i.e. &lt;code&gt;$0[1]&lt;/code&gt;) is assigned the result of the first parenthesized capture (i.e. the digits), whilst the array element 2 (&lt;code&gt;$0[2]&lt;/code&gt;) receives the comma. Note that array element zero of any result object is assigned the complete string that the pattern matched.&lt;/p&gt;

&lt;p&gt;There are also abbreviations for each of the array elements of &lt;code&gt;$0&lt;/code&gt;. &lt;code&gt;$0[1]&lt;/code&gt; can also be referred to as&amp;hellip;surprise, surprise&amp;hellip;&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$0[2]&lt;/code&gt; can also be referred to as &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$0[3]&lt;/code&gt; as &lt;code&gt;$3&lt;/code&gt;, etc. Like &lt;code&gt;$0&lt;/code&gt;, each of these numeric variables is also lexical to the scope in which the pattern match occurred.&lt;/p&gt;

&lt;p&gt;The parts of a matched string that were matched by a named subrule become entries in the result object&amp;rsquo;s hash attribute, and are subsequently accessible through its hash lookup operator. So, for example, when the pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule deleteline { ^^ &amp;lt;out_marker&amp;gt; (\N* \n) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;matches, the result object&amp;rsquo;s hash entry for the key &lt;code&gt;&#39;out_marker&#39;&lt;/code&gt; (i.e. &lt;code&gt;$0{out_marker}&lt;/code&gt;) will contain the result object returned by the successful nested match of the &lt;code&gt;out_marker&lt;/code&gt; subrule.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-a-hypothetical-solution-to-a-very-real-problem-a-hypothetical-solution-to-a-very-real-problem-span&#34;&gt;&lt;span id=&#34;a_hypothetical_solution_to_a_very_real_problem&#34;&gt;A hypothetical solution to a very real problem&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Named capturing into a hash is very convenient, but it doesn&amp;rsquo;t work so well for a rule like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          &amp;lt;linenum&amp;gt; , &amp;lt;linenum&amp;gt;
        | &amp;lt;linenum&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that the hash attribute of the rule&amp;rsquo;s &lt;code&gt;$0&lt;/code&gt; can only store one entry with the key &lt;code&gt;&#39;linenum&#39;&lt;/code&gt;. So if the &lt;code&gt;&amp;lt;linenum&amp;gt; , &amp;lt;linenum&amp;gt;&lt;/code&gt; alternative matches, then the result object from the second match of &lt;code&gt;&amp;lt;linenum&amp;gt;&lt;/code&gt; will overwrite the entry for the first &lt;code&gt;&amp;lt;linenum&amp;gt;&lt;/code&gt; match.&lt;/p&gt;

&lt;p&gt;The solution to this is a new Perl 6 pattern matching feature known as “hypothetical variables”. A hypothetical variable is a variable that is declared and bound within a pattern match (i.e. inside a closure within a rule). The variable is declared, not with a &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, or &lt;code&gt;temp&lt;/code&gt;, but with the new keyword &lt;code&gt;let&lt;/code&gt;, which was chosen because it&amp;rsquo;s what mathematicians and other philosophers use to indicate a hypothetical assumption.&lt;/p&gt;

&lt;p&gt;Once declared, a hypothetical variable is then bound using the normal binding operator. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule checked_integer {
            (\d+)                   # Match and capture one-or-more digits
            { let $digits := $1 }   # Bind to hypothetical var $digits
            -                       # Match a hyphen
            (\d)                    # Match and capture one digit
            { let $check := $2 }    # Bind to hypothetical var $check
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, if a sequence of digits is found, then the &lt;code&gt;$digits&lt;/code&gt; variable is bound to that substring. Then, if the dash and check-digit are matched, the digit is bound to &lt;code&gt;$check&lt;/code&gt;. However, if the dash or digit is not matched, the match will fail and backtrack through the closure. This backtracking causes the &lt;code&gt;$digits&lt;/code&gt; hypothetical variable to be automatically &lt;em&gt;un-bound&lt;/em&gt;. Thus, if a rule fails to match, the hypothetical variables within it are not associated with any value.&lt;/p&gt;

&lt;p&gt;Each hypothetical variable is really just another name for the corresponding entry in the result object&amp;rsquo;s hash attribute. So binding a hypothetical variable like &lt;code&gt;$digits&lt;/code&gt; within a rule actually sets the &lt;code&gt;$0{digits}&lt;/code&gt; element of the rule&amp;rsquo;s result object.&lt;/p&gt;

&lt;p&gt;So, for example, to distinguish the two line numbers within a line range:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          &amp;lt;linenum&amp;gt; , &amp;lt;linenum&amp;gt;
        | &amp;lt;linenum&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we could bind them to two separate hypothetical variables &amp;ndash; say, &lt;code&gt;$from&lt;/code&gt; and &lt;code&gt;$to&lt;/code&gt; &amp;ndash; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          (&amp;lt;linenum&amp;gt;)               # Match linenum and capture result as $1
          { let $from := $1 }       # Save result as hypothetical variable
          ,                         # Match comma
          (&amp;lt;linenum&amp;gt;)               # Match linenum and capture result as $2
          { let $to := $2 }         # Save result as hypothetical variable
        |
          (&amp;lt;linenum&amp;gt;)               # Match linenum and capture result as $3
          { let $from := $3 }       # Save result as hypothetical variable
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our result object has a hash entry &lt;code&gt;$0{from}&lt;/code&gt; and (maybe) one for &lt;code&gt;$0{to}&lt;/code&gt; (if the first alternative was the one that matched). In fact, we could &lt;em&gt;ensure&lt;/em&gt; that the result always has a &lt;code&gt;$0{to}&lt;/code&gt;, by setting the corresponding hypothetical variable in the second alternative as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          (&amp;lt;linenum&amp;gt;)
          { let $from := $1 }
          ,         
          (&amp;lt;linenum&amp;gt;)
          { let $to := $2 }
        |
          (&amp;lt;linenum&amp;gt;)
          { let $from := $3; let $to := $from }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problem solved.&lt;/p&gt;

&lt;p&gt;But only by introducing a new problem. All that hypothesizing made our rule ugly and complex. So Perl 6 provides a much prettier short-hand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          $from := &amp;lt;linenum&amp;gt;          # Match linenum rule, bind result to $from
          ,                           # Match comma
          $to := &amp;lt;linenum&amp;gt;            # Match linenum rule, bind result to $to
        |                             # Or...
          $from := $to := &amp;lt;linenum&amp;gt;   # Match linenum rule,
    }                                 #   bind result to both $from and $to
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, more compactly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          $from:=&amp;lt;linenum&amp;gt; , $to:=&amp;lt;linenum&amp;gt;
        | $from:=$to:=&amp;lt;linenum&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a Perl 6 rule contains a variable that is immediately followed by the binding operator (&lt;code&gt;:=&lt;/code&gt;), that variable is never interpolated. Instead, it is treated as a hypothetical variable, and bound to the result of the next component of the rule (in the above examples, to the result of the &lt;code&gt;&amp;lt;linenum&amp;gt;&lt;/code&gt; subrule match).&lt;/p&gt;

&lt;p&gt;You can also use hypothetical arrays and hashes, binding them to a component that captures repeatedly. For example, we might choose to name our set of hunks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule file { ^  @adonises := &amp;lt;hunk&amp;gt;*  $ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;collecting all the &lt;code&gt;&amp;lt;hunk&amp;gt;&lt;/code&gt; matches into a single array (which would then be available after the match as &lt;code&gt;$0{&#39;@adonises&#39;}&lt;/code&gt;. Note that the sigil is included in the key in this case).&lt;/p&gt;

&lt;p&gt;Or we might choose to bind a hypothetical hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule config {
        %init :=            # Hypothetically, bind %init to...
            [               # Start of group
                (&amp;lt;ident&amp;gt;)   # Match and capture an identifier
                \h*=\h*     # Match an equals sign with optional horizontal whitespace
                (\N*)       # Match and capture the rest of the line
                \n          # Match the newline
            ]*
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where each repetition of the &lt;code&gt;[...]*&lt;/code&gt; grouping captures two substrings on each repetition and converts them to a key/value pair, which is then added to the hash. The first captured substring in each repetition becomes the key, and the second captured substring becomes its associated value. The hypothetical &lt;code&gt;%init&lt;/code&gt; hash is also available through the rule&amp;rsquo;s result object, as &lt;code&gt;$0{&#39;%init&#39;}&lt;/code&gt; (again, with the sigil as part of the key).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-the-nesting-instinct-the-nesting-instinct-span&#34;&gt;&lt;span id=&#34;the_nesting_instinct&#34;&gt;The nesting instinct&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Of course, those line number submatches in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule linerange {
          $from:=&amp;lt;linenum&amp;gt; , $to:=&amp;lt;linenum&amp;gt;
        | $from:=$to:=&amp;lt;linenum&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will have returned their own result objects. And it&amp;rsquo;s a reference to those nested result objects that actually gets stored in &lt;code&gt;linerange&lt;/code&gt;&amp;rsquo;s &lt;code&gt;$0{from}&lt;/code&gt; and &lt;code&gt;$0{to}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, in the next higher rule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule hunk :i { 
        [ &amp;lt;linenum&amp;gt; a :: &amp;lt;linerange&amp;gt; \n
          &amp;lt;appendline&amp;gt;+ 
        |
          &amp;lt;linerange&amp;gt; d :: &amp;lt;linenum&amp;gt; \n
          &amp;lt;deleteline&amp;gt;+
        |
          &amp;lt;linerange&amp;gt; c :: &amp;lt;linerange&amp;gt; \n
          &amp;lt;deleteline&amp;gt;+
          --- \n
          &amp;lt;appendline&amp;gt;+
        ]
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the match on &lt;code&gt;&amp;lt;linerange&amp;gt;&lt;/code&gt; will return &lt;em&gt;its&lt;/em&gt; &lt;code&gt;$0&lt;/code&gt; object. So, within the &lt;code&gt;hunk&lt;/code&gt; rule, we could access the “from” digits of the line range of the hunk as: &lt;code&gt;$0{linerange}{from}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, at the highest level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule file { ^  &amp;lt;hunk&amp;gt;*  $ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we are matching a series of hunks, so the hypothetical &lt;code&gt;$hunk&lt;/code&gt; variable (and hence &lt;code&gt;$0{hunk}&lt;/code&gt;) will contain a result object whose array attribute contains the series of result objects returned by each individual &lt;code&gt;&amp;lt;hunk&amp;gt;&lt;/code&gt; match.&lt;/p&gt;

&lt;p&gt;So, for example, we could access the “from” digits of the line range of the third hunk as: &lt;code&gt;$0{hunk}[2]{linerange}{from}&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-extracting-the-insertions-extracting-the-insertions-span&#34;&gt;&lt;span id=&#34;extracting_the_insertions&#34;&gt;Extracting the insertions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;More usefully, we could locate and print every line in the diff that was being inserted, regardless of whether it was inserted by an “append” or a “change” hunk. Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $text is from($*ARGS);

    if $text =~ /&amp;lt;Diff.file&amp;gt;/ {
        for @{ $0{file}{hunk} } -&amp;gt; $hunk
             print @{$hunk{appendline}}
                 if $hunk{appendline};
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the &lt;code&gt;if&lt;/code&gt; statement attempts to match the text against the pattern for a diff file. If it succeeds, the &lt;code&gt;for&lt;/code&gt; loop grabs the &lt;code&gt;&amp;lt;hunk&amp;gt;*&lt;/code&gt; result object, treats it as an array, and then iterates each hunk match object in turn into &lt;code&gt;$hunk&lt;/code&gt;. The array of append lines for each hunk match is then printed (if there is in fact a reference to that array in the hunk).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-dont-just-match-there-do-something-don-t-just-match-there-do-something-span&#34;&gt;&lt;span id=&#34;dont_just_match_there_do_something&#34;&gt;Don&amp;rsquo;t just match there; do something!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Because Perl 6 patterns can have arbitrary code blocks inside them, it&amp;rsquo;s easy to have a pattern actually perform syntax transformations whilst it&amp;rsquo;s parsing. That&amp;rsquo;s often a useful technique because it allows us to manipulate the various parts of a hierarchical representation locally (within the rules that recognize them).&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to “reverse” the diff file. That is, suppose we had a diff that specified the changes required to transform file A to file B, but we needed the back-transformation instead: from file B to file A. That&amp;rsquo;s relatively easy to create. We just turn every “append” into a “delete”, every “delete” into an “append”, and reverse every “change”.&lt;/p&gt;

&lt;p&gt;The following code does exactly that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar ReverseDiff {
        rule file { ^  &amp;lt;hunk&amp;gt;*  $ }

        rule hunk :i { 
            [ &amp;lt;linenum&amp;gt; a :: &amp;lt;linerange&amp;gt; \n
              &amp;lt;appendline&amp;gt;+ 
              { @$appendline =~ s/&amp;lt;in_marker&amp;gt;/&amp;lt; /;
                let $0 := &amp;quot;${linerange}d${linenum}\n&amp;quot;
                        _ join &amp;quot;&amp;quot;, @$appendline;
              }
            |
              &amp;lt;linerange&amp;gt; d :: &amp;lt;linenum&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
              { @$deleteline =~ s/&amp;lt;out_marker&amp;gt;/&amp;gt; /;
                let $0 := &amp;quot;${linenum}a${linerange}\n&amp;quot;
                        _ join &amp;quot;&amp;quot;, @$deleteline;
              }
            |
              $from:=&amp;lt;linerange&amp;gt; c :: $to:=&amp;lt;linerange&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
              --- \n
              &amp;lt;appendline&amp;gt;+
              { @$appendline =~ s/&amp;lt;in_marker&amp;gt;/&amp;lt;/;
                @$deleteline =~ s/&amp;lt;out_marker&amp;gt;/&amp;gt;/;
                let $0 := &amp;quot;${to}c${from}\n&amp;quot;
                        _ join(&amp;quot;&amp;quot;, @$appendline)
                        _ &amp;quot;---\n&amp;quot;
                        _ join(&amp;quot;&amp;quot;, @$deleteline);
              }
            ]
          |
            &amp;lt;badline(&amp;quot;Invalid diff hunk&amp;quot;)&amp;gt;
        }

    rule badline ($errmsg) { (\N*) ::: { fail &amp;quot;$errmsg: $1&amp;quot; } }

    rule linerange { $from:=&amp;lt;linenum&amp;gt; , $to:=&amp;lt;linenum&amp;gt;
                       | $from:=$to:=&amp;lt;linenum&amp;gt;
                       }

    rule linenum { (\d+) }

    rule deleteline { ^^ &amp;lt;out_marker&amp;gt; (\N* \n) }
        rule appendline { ^^ &amp;lt;in_marker&amp;gt;  (\N* \n) }

    rule out_marker { \&amp;lt;  &amp;lt;sp&amp;gt; }
        rule in_marker  { \&amp;gt;  &amp;lt;sp&amp;gt; }
    }

    # and later...

    my $text is from($*ARGS);

    print @{ $0{file}{hunk} }
        if $text =~ /&amp;lt;Diff.file&amp;gt;/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rule definitions for &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;badline&lt;/code&gt;, &lt;code&gt;linerange&lt;/code&gt;, &lt;code&gt;linenum&lt;/code&gt;, &lt;code&gt;appendline&lt;/code&gt;, &lt;code&gt;deleteline&lt;/code&gt;, &lt;code&gt;in_marker&lt;/code&gt; and &lt;code&gt;out_marker&lt;/code&gt; are exactly the same as before.&lt;/p&gt;

&lt;p&gt;All the work of reversing the diff is performed in the &lt;code&gt;hunk&lt;/code&gt; rule. To do that work, we have to extend each of the three main alternatives of that rule, adding to each a closure that changes the result object it returns.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-smarter-alternatives-smarter-alternatives-span&#34;&gt;&lt;span id=&#34;smarter_alternatives&#34;&gt;Smarter alternatives&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In the first alternative (which matches “append” hunks), we match as before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;linenum&amp;gt; a :: &amp;lt;linerange&amp;gt; \n
    &amp;lt;appendline&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then we execute an embedded closure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    { @$appendline =~ s/&amp;lt;in_marker&amp;gt;/&amp;lt;/;
      let $0 := &amp;quot;${linerange}d${linenum}\n&amp;quot;
              _ join &amp;quot;&amp;quot;, @$appendline;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line reverses the “marker” arrows on each line of data that was previously being appended, using the smart-match operator to apply the transformation to each line. Note too, that we reuse the &lt;code&gt;in_marker&lt;/code&gt; rule within the substitution.&lt;/p&gt;

&lt;p&gt;Then we bind the result object (i.e. the hypothetical variable &lt;code&gt;$0&lt;/code&gt;) to a string representing the “reversed” append hunk. That is, we reverse the order of the line range and line number components, put a &lt;code&gt;&#39;d&#39;&lt;/code&gt; (for “delete”) between them, and then follow that with all the reversed data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    let $0 := &amp;quot;${linerange}d${linenum}\n&amp;quot;
            _ join &amp;quot;&amp;quot;, @$appendline;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The changes to the “delete” alternative are exactly symmetrical. Capture the components as before, reverse the marker arrows, reverse the &lt;code&gt;$linerange&lt;/code&gt; and &lt;code&gt;$linenum&lt;/code&gt;, change the &lt;code&gt;&#39;d&#39;&lt;/code&gt; to an &lt;code&gt;&#39;a&#39;&lt;/code&gt;, and append the reversed data lines.&lt;/p&gt;

&lt;p&gt;In the third alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $from:=&amp;lt;linerange&amp;gt; c :: $to:=&amp;lt;linerange&amp;gt; \n
    &amp;lt;deleteline&amp;gt;+   
    --- \n
    &amp;lt;appendline&amp;gt;+
    { @$appendline =~ s/&amp;lt;in_marker&amp;gt;/&amp;lt;/;
      @$deleteline =~ s/&amp;lt;out_marker&amp;gt;/&amp;gt;/;
      let $0 := &amp;quot;${to}c${from}\n&amp;quot;
              _ join(&amp;quot;&amp;quot;, @$appendline)
              _ &amp;quot;---\n&amp;quot;
              _ join(&amp;quot;&amp;quot;, @$deleteline);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;there are line ranges on both sides of the &lt;code&gt;&#39;c&#39;&lt;/code&gt;. So we need to give them distinct names, by binding them to extra hypothetical variables: &lt;code&gt;$from&lt;/code&gt; and &lt;code&gt;$to&lt;/code&gt;. We then reverse the order of two line ranges, but leave the &lt;code&gt;&#39;c&#39;&lt;/code&gt; as it was (because we&amp;rsquo;re simply changing something back to how it was previously). The markers on both the append and delete lines are reversed, and then the order of the two sets of lines is also reversed.&lt;/p&gt;

&lt;p&gt;Once those transformations has been performed on each hunk (i.e. as it&amp;rsquo;s being matched!), the result of successfully matching any &lt;code&gt;&amp;lt;hunk&amp;gt;&lt;/code&gt; subrule will be a string in which the matched hunk has already been reversed.&lt;/p&gt;

&lt;p&gt;All that remains is to match the text against the grammar, and print out the (modified) hunks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    print @{ $0{file}{hunk} }
        if $text =~ /&amp;lt;ReverseDiff.file&amp;gt;/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, since the &lt;code&gt;file&lt;/code&gt; rule is now in the ReverseDiff grammar&amp;rsquo;s namespace, we need to call the rule through that grammar. Note the way the syntax for doing that continues the parallel with methods and classes.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: this document is out of date and remains here for historic interest. See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S05.html&#34;&gt;Synopsis 5&lt;/a&gt; for the current design information.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-rearranging-the-deckchairs-rearranging-the-deck-chairs-span&#34;&gt;&lt;span id=&#34;rearranging_the_deckchairs&#34;&gt;Rearranging the deck-chairs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It might have come as a surprise that we were allowed to bind the pattern&amp;rsquo;s &lt;code&gt;$0&lt;/code&gt; result object directly, but there&amp;rsquo;s nothing magical about it. &lt;code&gt;$0&lt;/code&gt; turns out to be just another hypothetical variable&amp;hellip;the one that happens to be returned when the match is complete.&lt;/p&gt;

&lt;p&gt;Likewise, &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, etc. are all hypotheticals, and can also be explicitly bound in a rule. That&amp;rsquo;s very handy for ensuring that the right substring always turns up in the right numbered variable. For example, consider a Perl 6 rule to match simple Perl 5 method calls (matching &lt;em&gt;all&lt;/em&gt; Perl 5 method calls would, of course, require a much more sophisticated rule):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule method_call :w {
        # Match direct syntax:   $var-&amp;gt;meth(...)
        \$  (&amp;lt;ident&amp;gt;)  -\&amp;gt;  (&amp;lt;ident&amp;gt;)  \(  (&amp;lt;arglist&amp;gt;)  \)

      | # Match indirect syntax: meth $var (...)
        (&amp;lt;ident&amp;gt;)  \$  (&amp;lt;ident&amp;gt;)  [ \( (&amp;lt;arglist&amp;gt;) \) | (&amp;lt;arglist&amp;gt;) ]
    }

    my ($varname, methodname, $arglist);

    if ($source_code =~ / $0 := &amp;lt;method_call&amp;gt; /) {
        $varname    = $1 // $5;
        $methodname = $2 // $4;
        $arglist    = $3 // $6 // $7;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By binding the match&amp;rsquo;s &lt;code&gt;$0&lt;/code&gt; to the result of the &lt;code&gt;&amp;lt;method_call&amp;gt;&lt;/code&gt; subrule, we bind its &lt;code&gt;$0[1]&lt;/code&gt;, &lt;code&gt;$0[2]&lt;/code&gt;, &lt;code&gt;$0[3]&lt;/code&gt;, etc. to those array elements in &lt;code&gt;&amp;lt;method_call&amp;gt;&lt;/code&gt;&amp;rsquo;s result object. And thereby bind &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;, etc. as well. Then it&amp;rsquo;s just a matter of sorting out which numeric variable ended up with which bit of the method call.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s okay, but it would be much better if we could guarantee that the variable name was always in &lt;code&gt;$1&lt;/code&gt;, the method name in &lt;code&gt;$2&lt;/code&gt;, and the argument list in &lt;code&gt;$3&lt;/code&gt;. Then we could replace the last six lines above with just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my ($varname, methodname, $arglist) =
            $source_code =~ / $0 := &amp;lt;method_call&amp;gt; /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 5 there was no way to do that, but in Perl 6 it&amp;rsquo;s relatively easy. We just modify the &lt;code&gt;method_call&lt;/code&gt; rule like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule method_call :w {
        \$  $1:=&amp;lt;ident&amp;gt;  -\&amp;gt;  $2:=&amp;lt;ident&amp;gt;  \( $3:=&amp;lt;arglist&amp;gt; \)
      | $2:=&amp;lt;ident&amp;gt;  \$  $1:=&amp;lt;ident&amp;gt;  [ \( $3:=&amp;lt;arglist&amp;gt; \) | $3:=&amp;lt;arglist&amp;gt; ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, annotated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule method_call :w {
        \$                          #   Match a literal $
        $1:=&amp;lt;ident&amp;gt;                 #   Match the varname, bind it to $1
        -\&amp;gt;                         #   Match a literal -&amp;gt;
        $2:=&amp;lt;ident&amp;gt;                 #   Match the method name, bind it to $2
        \(                          #   Match an opening paren
        $3:=&amp;lt;arglist&amp;gt;               #   Match the arg list, bind it to $3
        \)                          #   Match a closing paren
      |                             # Or
        $2:=&amp;lt;ident&amp;gt;                 #   Match the method name, bind it to $2
        \$                          #   Match a literal $
        $1:=&amp;lt;ident&amp;gt;                 #   Match the varname, bind it to $1
        [                           #   Either...
          \( $3:=&amp;lt;arglist&amp;gt; \)       #     Match arg list in parens, bind it to $3
        |                           #   Or...
             $3:=&amp;lt;arglist&amp;gt;          #     Just match arg list, bind it to $3
        ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the rule&amp;rsquo;s &lt;code&gt;$1&lt;/code&gt; is bound to the variable name, regardless of which alternative matches. Likewise &lt;code&gt;$2&lt;/code&gt; is bound to the method name in either branch of the &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;$3&lt;/code&gt; is associated with the argument list, no matter which of the &lt;em&gt;three&lt;/em&gt; possible ways it was matched.&lt;/p&gt;

&lt;p&gt;Of course, that&amp;rsquo;s still rather ugly (especially if we have to write all those comments just so others can understand how clever we were).&lt;/p&gt;

&lt;p&gt;So an even better solution is just to use proper named rules (with their handy auto-capturing behaviour) for everything. And then slice the required information out of the result object&amp;rsquo;s hash attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    rule varname    { &amp;lt;ident&amp;gt; }
    rule methodname { &amp;lt;ident&amp;gt; }

    rule method_call :w {
        \$  &amp;lt;varname&amp;gt;  -\&amp;gt;  &amp;lt;methodname&amp;gt;  \( &amp;lt;arglist&amp;gt; \)
      | &amp;lt;methodname&amp;gt;  \$  &amp;lt;varname&amp;gt;  [ \( &amp;lt;arglist&amp;gt; \) | &amp;lt;arglist&amp;gt; ]
    }

    $source_code =~ / &amp;lt;method_call&amp;gt; /;

    my ($varname, $methodname, $arglist) =
            $0{method_call}{&amp;quot;varname&amp;quot;,&amp;quot;methodname&amp;quot;,&amp;quot;arglist&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-deriving-a-benefit-deriving-a-benefit-span&#34;&gt;&lt;span id=&#34;deriving_a_benefit&#34;&gt;Deriving a benefit&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As the above examples illustrate, using named rules in grammars provides a cleaner syntax and a reduction in the number of variables required in a parsing program. But, beyond those advantages, and the obvious benefits of moving rule construction from run-time to compile-time, there&amp;rsquo;s yet another significant way to gain from placing named rules inside a grammar: we can &lt;em&gt;inherit&lt;/em&gt; from them.&lt;/p&gt;

&lt;p&gt;For example, the ReverseDiff grammar is almost the same as the normal Diff grammar. The only difference is in the &lt;code&gt;hunk&lt;/code&gt; rule. So there&amp;rsquo;s no reason why we shouldn&amp;rsquo;t just have ReverseDiff inherit all that sameness, and simply redefine its notion of &lt;code&gt;hunk&lt;/code&gt;-iness. That would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar ReverseDiff is Diff {

        rule hunk :i { 
            [ &amp;lt;linenum&amp;gt; a :: &amp;lt;linerange&amp;gt; \n
              &amp;lt;appendline&amp;gt;+ 
              { $appendline =~ s/ &amp;lt;in_marker&amp;gt; /&amp;lt;/;
                let $0 := &amp;quot;${linerange}d${linenum}\n&amp;quot;
                        _ join &amp;quot;&amp;quot;, @$appendline;
              }
            |
              &amp;lt;linerange&amp;gt; d :: &amp;lt;linenum&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
              { $deleteline =~ s/ &amp;lt;out_marker&amp;gt; /&amp;gt;/;
                let $0 := &amp;quot;${linenum}a${linerange}\n&amp;quot;
                        _ join &amp;quot;&amp;quot;, @$deleteline;
              }
            |
              $from:=&amp;lt;linerange&amp;gt; c :: $to:=&amp;lt;linerange&amp;gt; \n
              &amp;lt;deleteline&amp;gt;+
              --- \n
              &amp;lt;appendline&amp;gt;+
              { $appendline =~ s/ &amp;lt;in_marker&amp;gt; /&amp;lt;/;
                $deleteline =~ s/ &amp;lt;out_marker&amp;gt; /&amp;gt;/;
                let $0 := &amp;quot;${to}c${from}\n&amp;quot;
                        _ join(&amp;quot;&amp;quot;, @$appendline)
                        _ &amp;quot;---\n&amp;quot;
                        _ join(&amp;quot;&amp;quot;, @$deleteline);
              }
            ]
          |
            &amp;lt;badline(&amp;quot;Invalid diff hunk&amp;quot;)&amp;gt;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;ReverseDiff is Diff&lt;/code&gt; syntax is the standard Perl 6 way of inheriting behaviour. Classes will use the same notation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    class Hacker is Programmer {...}
    class JAPH is Hacker {...}
    # etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, in the above example Diff is specified as the base grammar from which the new ReverseDiff grammar is derived. As a result of that inheritance relationship, ReverseDiff immediately inherits all of the Diff grammar&amp;rsquo;s rules. We then simple redefine ReverseDiff&amp;rsquo;s version of the &lt;code&gt;hunk&lt;/code&gt; rule, and the job&amp;rsquo;s done.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-different-diffs-different-diffs-span&#34;&gt;&lt;span id=&#34;different_diffs&#34;&gt;Different diffs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Grammatical inheritance isn&amp;rsquo;t only useful for tweaking the behaviour of a grammar&amp;rsquo;s rules. It&amp;rsquo;s also handy when two or more related grammars share some characteristics, but differ in some particulars. For example, suppose we wanted to support the “unified” diff format, as well as the “classic”.&lt;/p&gt;

&lt;p&gt;A unified diff consists of two lines of header information, followed by a series of hunks. The header information indicates the name and modification date of the old file (prefixing the line with three minus signs), and then the name and modification date of the new file (prefixing that line with three plus signs). Each hunk consists of an offset line, followed by one or more lines representing either shared context, or a line to be inserted, or a line to be deleted. Offset lines start with two “at” signs, then consist of a minus sign followed by the old line offset and line-count, and then a plus sign followed by the nes line offset and line-count, and then two more “at” signs. Context lines are prefixed with two spaces. Insertion lines are prefixed with a plus sign and a space. Deletion lines are prefixed with a minus sign and a space.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s not important right now.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;is&lt;/em&gt; important is that we could write another complete grammar for that, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar Diff::Unified {

        rule file { ^  &amp;lt;fileinfo&amp;gt;  &amp;lt;hunk&amp;gt;*  $ }

        rule fileinfo {
            &amp;lt;out_marker&amp;gt;&amp;lt;3&amp;gt; $oldfile:=(\S+) $olddate:=[\h* (\N+?) \h*?] \n
            &amp;lt;in_marker&amp;gt;&amp;lt;3&amp;gt;  $newfile:=(\S+) $newdate:=[\h* (\N+?) \h*?] \n
        }

        rule hunk { 
            &amp;lt;header&amp;gt;
            @spec := ( &amp;lt;contextline&amp;gt;
                     | &amp;lt;appendline&amp;gt;
                     | &amp;lt;deleteline&amp;gt;
                     | &amp;lt;badline(&amp;quot;Invalid line for unified diff&amp;quot;)&amp;gt;
                     )*
        }

        rule header {
            \@\@ &amp;lt;out_marker&amp;gt; &amp;lt;linenum&amp;gt; , &amp;lt;linecount&amp;gt; \h+
                 &amp;lt;in_marker&amp;gt;  &amp;lt;linenum&amp;gt; , &amp;lt;linecount&amp;gt; \h+
            \@\@ \h* \n
        }

        rule badline ($errmsg) { (\N*) ::: { fail &amp;quot;$errmsg: $1&amp;quot; } }

        rule linenum   { (\d+) }
        rule linecount { (\d+) }

        rule deleteline  { ^^ &amp;lt;out_marker&amp;gt; (\N* \n) }
        rule appendline  { ^^ &amp;lt;in_marker&amp;gt;  (\N* \n) }
        rule contextline { ^^ &amp;lt;sp&amp;gt; &amp;lt;sp&amp;gt;    (\N* \n) }

        rule out_marker { \+ &amp;lt;sp&amp;gt; }
        rule in_marker  {  - &amp;lt;sp&amp;gt; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That represents (and can parse) the new diff format correctly, but it&amp;rsquo;s a needless duplication of effort and code. Many the rules of this grammar are identical to those of the original diff parser. Which suggests we could just grab them straight from the original &amp;ndash; by inheriting them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    grammar Diff::Unified is Diff  {

        rule file { ^  &amp;lt;fileinfo&amp;gt;  &amp;lt;hunk&amp;gt;*  $ }

        rule fileinfo {
            &amp;lt;out_marker&amp;gt;&amp;lt;3&amp;gt; $newfile:=(\S+) $olddate:=[\h* (\N+?) \h*?] \n
            &amp;lt;in_marker&amp;gt;&amp;lt;3&amp;gt;  $newfile:=(\S+) $newdate:=[\h* (\N+?) \h*?] \n
        }

        rule hunk { 
            &amp;lt;header&amp;gt;
            @spec := ( &amp;lt;contextline&amp;gt;
                     | &amp;lt;appendline&amp;gt;
                     | &amp;lt;deleteline&amp;gt;
                     | &amp;lt;badline(&amp;quot;Invalid line for unified diff&amp;quot;)&amp;gt;
                     )*
        }

        rule header {
            \@\@ &amp;lt;out_marker&amp;gt; &amp;lt;linenum&amp;gt; , &amp;lt;linecount&amp;gt; \h+
                 &amp;lt;in_marker&amp;gt;  &amp;lt;linenum&amp;gt; , &amp;lt;linecount&amp;gt; \h+
            \@\@ \h* \n
        }

        rule linecount { (\d+) }

        rule contextline { ^^ &amp;lt;sp&amp;gt; &amp;lt;sp&amp;gt;  (\N* \n) }

        rule out_marker { \+ &amp;lt;sp&amp;gt; }
        rule in_marker  {  - &amp;lt;sp&amp;gt; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in this version we don&amp;rsquo;t need to specify the rules for &lt;code&gt;appendline&lt;/code&gt;, &lt;code&gt;deleteline&lt;/code&gt;, &lt;code&gt;linenum&lt;/code&gt;, etc. They&amp;rsquo;re provided automagically by inheriting from the &lt;code&gt;Diff&lt;/code&gt; grammar. So we only have to specify the parts of the new grammar that differ from the original.&lt;/p&gt;

&lt;p&gt;In particular, this is where we finally reap the reward for factoring out the &lt;code&gt;in_marker&lt;/code&gt; and &lt;code&gt;out_marker&lt;/code&gt; rules. Because we did that earlier, we can now just change the rules for matching those two markers directly in the new grammar. As a result, the inherited &lt;code&gt;appendline&lt;/code&gt; and &lt;code&gt;deleteline&lt;/code&gt; rules (which use &lt;code&gt;in_marker&lt;/code&gt; and &lt;code&gt;out_marker&lt;/code&gt; as subrules) will now attempt to match the new versions of &lt;code&gt;in_marker&lt;/code&gt; and &lt;code&gt;out_marker&lt;/code&gt; rules instead.&lt;/p&gt;

&lt;p&gt;And if you&amp;rsquo;re thinking that looks suspiciously like polymorphism, you&amp;rsquo;re absolutely right. The parallels between pattern matching and OO run &lt;em&gt;very&lt;/em&gt; deep in Perl 6.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-lets-get-cooking-let-s-get-cooking-span&#34;&gt;&lt;span id=&#34;lets_get_cooking&#34;&gt;Let&amp;rsquo;s get cooking&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;To sum up: Perl 6 patterns and grammars extend Perl&amp;rsquo;s text matching capacities enormously. But you don&amp;rsquo;t have to start using all that extra power right away. You can ignore grammars and embedded closures and assertions and the other sophisticated bits until you actually need them.&lt;/p&gt;

&lt;p&gt;The new rule syntax also cleans up much of the “line-noise” of Perl 5 regexes. But the fundamentals don&amp;rsquo;t change that much. Many Perl 5 patterns will translate very simply and naturally to Perl 6.&lt;/p&gt;

&lt;p&gt;To demonstrate that, and to round out this exploration of Perl 6 patterns, here are a few common Perl 5 regexes &amp;ndash; some borrowed from the &lt;em&gt;Perl Cookbook&lt;/em&gt;, and others from the Regexp::Common module &amp;ndash; all ported to equivalent Perl 6 rules:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_a_C_comment%3A&#34;&gt;Match a C comment:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
$str =~ m{ /\* .*? \*/ }xs;

# Perl 6
$str =~ m{ /\* .*? \*/ };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Remove_leading_qualifiers_from_a_Perl_identifier&#34;&gt;Remove leading qualifiers from a Perl identifier&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
$ident =~ s/^(?:\w*::)*//;

# Perl 6
$ident =~ s/^[\w*\:\:]*//;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Warn_of_text_with_lines_greater_than_80_characters&#34;&gt;Warn of text with lines greater than 80 characters&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
warn &amp;quot;Thar she blows!: $&amp;amp;&amp;quot;
        if $str =~ m/.{81,}/;

# Perl 6
warn &amp;quot;Thar she blows!: $0&amp;quot;
        if $str =~ m/\N&amp;lt;81,&amp;gt;/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_a_Roman_numeral&#34;&gt;Match a Roman numeral&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
$str =~ m/ ^ m* (?:d?c{0,3}|c[dm]) (?:l?x{0,3}|x[lc]) (?:v?i{0,3}|i[vx]) $ /ix;

# Perl 6
$str =~ m:i/ ^ m* [d?c&amp;lt;0,3&amp;gt;|c&amp;lt;[dm]&amp;gt;] [l?x&amp;lt;0,3&amp;gt;|x&amp;lt;[lc]&amp;gt;] [v?i&amp;lt;0,3&amp;gt;|i&amp;lt;[vx]&amp;gt;] $ /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Extract_lines_regardless_of_line_terminator&#34;&gt;Extract lines regardless of line terminator&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
push @lines, $1
        while $str =~ m/\G([^\012\015]*)(?:\012\015?|\015\012?)/gc;

# Perl 6
push @lines, $1
        while $str =~ m:c/ (\N*) \n /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_string&#34;&gt;Match a quote-delimited string (Friedl-style), capturing contents:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
$str =~ m/ &amp;quot; ( [^\\&amp;quot;]* (?: \\. [^\\&amp;quot;]* )* ) &amp;quot; /x;

# Perl 6
$str =~ m/ &amp;quot; ( &amp;lt;-[\\&amp;quot;]&amp;gt;* [ \\. &amp;lt;-[\\&amp;quot;]&amp;gt;* ]* ) &amp;quot; /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_a_decimal_IPv4_address%3A&#34;&gt;Match a decimal IPv4 address:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
my $quad = qr/(?: 25[0-5] | 2[0-4]\d | [0-1]??\d{1,2} )/x;

$str =~ m/ $quad \. $quad \. $quad \. $quad /x;

# Perl 6
rule quad {  (\d&amp;lt;1,3&amp;gt;) :: { fail unless $1 &amp;lt; 256 }  }

$str =~ m/ &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; /x;

# Perl 6 (same great approach, now less syntax)
rule quad {  (\d&amp;lt;1,3&amp;gt;) :: &amp;lt;($1 &amp;lt; 256)&amp;gt;  }

$str =~ m/ &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; &amp;lt;dot&amp;gt; &amp;lt;quad&amp;gt; /x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_a_floating%2Dpoint_number%2C_returning_compo&#34;&gt;Match a floating-point number, returning components:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
($sign, $mantissa, $exponent) =
        $str =~ m/([+-]?)([0-9]+\.?[0-9]*|\.[0-9]+)(?:e([+-]?[0-9]+))?/;

# Perl 6
($sign, $mantissa, $exponent) =
        $str =~ m/(&amp;lt;[+-]&amp;gt;?)(&amp;lt;[0-9]&amp;gt;+\.?&amp;lt;[0-9]&amp;gt;*|\.&amp;lt;[0-9]&amp;gt;+)[e(&amp;lt;[+-]&amp;gt;?&amp;lt;[0-9]&amp;gt;+)]?/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_a_floating%2Dpoint_number_maintainably%2C_re&#34;&gt;Match a floating-point number &lt;em&gt;maintainably&lt;/em&gt;, returning components:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
my $digit    = qr/[0-9]/;
my $sign_pat = qr/(?: [+-]? )/x;
my $mant_pat = qr/(?: $digit+ \.? $digit* | \. digit+ )/x;
my $expo_pat = qr/(?: $signpat $digit+ )? /x;

($sign, $mantissa, $exponent) =
        $str =~ m/ ($sign_pat) ($mant_pat) (?: e ($expo_pat) )? /x;

# Perl 6
rule sign     { &amp;lt;[+-]&amp;gt;? }
rule mantissa { &amp;lt;digit&amp;gt;+ [\. &amp;lt;digit&amp;gt;*] | \. &amp;lt;digit&amp;gt;+ }
rule exponent { [ &amp;lt;sign&amp;gt; &amp;lt;digit&amp;gt;+ ]? }

($sign, $mantissa, $exponent) = 
        $str =~ m/ (&amp;lt;sign&amp;gt;) (&amp;lt;mantissa&amp;gt;) [e (&amp;lt;exponent&amp;gt;)]? /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_nested_parentheses%3A&#34;&gt;Match nested parentheses:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
our $parens = qr/ \(  (?: (?&amp;gt;[^()]+) | (??{$parens}) )*  \) /x;
$str =~ m/$parens/;

# Perl 6
$str =~ m/ \(  [ &amp;lt;-[()]&amp;gt; + : | &amp;lt;self&amp;gt; ]*  \) /;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Match_nested_parentheses_maintainably%3A&#34;&gt;Match nested parentheses &lt;em&gt;maintainably&lt;/em&gt;:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Perl 5
our $parens = qr/
           \(                   # Match a literal &#39;(&#39;
           (?:                  # Start a non-capturing group
               (?&amp;gt;              #     Never backtrack through...
                   [^()] +      #         Match a non-paren (repeatedly)
               )                #     End of non-backtracking region
           |                    # Or
               (??{$parens})    #    Recursively match entire pattern
           )*                   # Close group and match repeatedly
           \)                   # Match a literal &#39;)&#39;
         /x;

$str =~ m/$parens/;

# Perl 6
$str =~ m/ &amp;lt;&#39;(&#39;&amp;gt;                # Match a literal &#39;(&#39;
           [                    # Start a non-capturing group
                &amp;lt;-[()]&amp;gt; +       #    Match a non-paren (repeatedly)
                :               #    ...and never backtrack that match
           |                    # Or
                &amp;lt;self&amp;gt;          #    Recursively match entire pattern
           ]*                   # Close group and match repeatedly
           &amp;lt;&#39;)&#39;&amp;gt;                # Match a literal &#39;)&#39;
         /;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Return to the &lt;a href=&#34;http://localhost:1313/&#34;&gt;Perl.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

