<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interview on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/interview/</link>
    <description>Recent content in Interview on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2020 07:30:00 +0000</lastBuildDate>
    <atom:link href="/tags/interview/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Perl Ambassador: Gabor Szabo</title>
      <link>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</link>
      <pubDate>Mon, 15 Jun 2020 07:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</guid>
      <description>

&lt;p&gt;This is the launch interview of a monthly series of interviews I&amp;rsquo;ll
publish on perl.com. I can promise you, fun and entertaining
interviews every month. So please watch this space. If you&amp;rsquo;d like me
to interview you, or know someone you&amp;rsquo;d like me to interview, let me
know. Take the same set of questions and send me your answers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gabor Szabo&lt;/strong&gt; is a long time Perl developer and DevOps trainer and the
author of the &lt;a href=&#34;https://perlmaven.com/perl-tutorial&#34;&gt;Perl tutorial&lt;/a&gt; and
of Perl Maven and on &lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt;. He
received a &lt;a href=&#34;http://whitecamel.org/p/gabor_szabo.html&#34;&gt;White Camel
Award&lt;/a&gt; in 2008. He teaches
&lt;a href=&#34;https://hostlocal.com/&#34;&gt;training courses in Israel&lt;/a&gt; and around the
world. He wears the hat of the chief editor of &lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly
newsletter&lt;/a&gt;, and is always happy to receive
notable Perl news items for inclusion in its next issue.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-first-start-using-perl&#34;&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I was working at a start-up company near Jerusalem that had an
AI-based software product which cost 1,000,000 USD with an additional
1-2 million cost for integration. That made sales a bit difficult so
we were working on a related product that would sell for a mere 30,000
USD. Just to get our feet in the door of the potential buyers of our
flagship product. We were using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Scheme_(programming_language)&#34;&gt;Scheme&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/AWK&#34;&gt;AWK&lt;/a&gt; to write our compiler on
Window 3.11. It was great fun, but I was also interested in all the
sysadmin work in the company (we had a Novell NetWare 3.11
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetWare&#34;&gt;network&lt;/a&gt; and all the other
areas that was not that interesting for the regular programmers. For
example our build system.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_NT&#34;&gt;Windows NT&lt;/a&gt; was
introduced in 1993 and I got the opportunity to start setting it up.
At around the same time our office was bought by
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetManage&#34;&gt;NetManage&lt;/a&gt;, one of the
pioneers in TCP/IP for MS Windows, in what is today called an
&lt;a href=&#34;https://en.wikipedia.org/wiki/Acqui-hiring&#34;&gt;Acqui-hiring&lt;/a&gt;. There we
used some &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_ClearCase&#34;&gt;Rational ClearCase&lt;/a&gt;
tools for bug tracking.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the time when I first started to use Perl, probably in 1993 or
1994. I built an in-house web application to allow the developers to
initiate a build of the software they were writing and to get
notification when the build was ready. As I recall it was running on
Windows. I also dealt with some of the bug-tracking automation that
was running on some Unix system.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier&#34;&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;I hardly have any Perl-related work these days so I can&amp;rsquo;t really say,
but when I need a script here and there I often use &lt;a href=&#34;https://metacpan.org/pod/Capture::Tiny&#34;&gt;Capture::Tiny&lt;/a&gt; and
keep re-creating it (partially and badly) in other languages. I love
testing so anything that starts with &lt;code&gt;Test::&lt;/code&gt; is usually interesting
to me.&lt;/p&gt;

&lt;p&gt;I also run the &lt;a href=&#34;https://perlmaven.com/&#34;&gt;Perl Maven&lt;/a&gt; and
&lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt; sites on a Dancer-based
application I wrote ages ago. The source is
&lt;a href=&#34;https://github.com/szabgab/Perl-Maven&#34;&gt;open&lt;/a&gt; though probably not
very useful to anyone besides me. So I use &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Template&#34;&gt;Template Toolkit&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/DateTime&#34;&gt;DateTime&lt;/a&gt;,
and &lt;a href=&#34;https://metacpan.org/pod/DateTime::Tiny&#34;&gt;DateTime::Tiny&lt;/a&gt; just to name a
few. Oh and of course I love &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and
&lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-overuse&#34;&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;I am not sure if any. Well, maybe except of &lt;code&gt;Perl::Critic&lt;/code&gt;. I just
noticed that I configured it that it won&amp;rsquo;t allow double-quotes around
a string if there is nothing to interpolate in it. So &amp;ldquo;perl&amp;rdquo; is bad,
&amp;lsquo;perl&amp;rsquo; is good. I need to relax this.&lt;/p&gt;

&lt;p&gt;I think I hardly ever used the fun features of Perl. I almost never
use the &lt;code&gt;do_this and do_that&lt;/code&gt; construct except for the &lt;code&gt;open or die&lt;/code&gt;.
I hardly use &lt;code&gt;$_&lt;/code&gt; and I think never use it explicitly. Maybe I was never
a real Perl programmer :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-wish-you-could-use-more&#34;&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that I hardly write Perl these days, any feature would be ok
with me :)&lt;/p&gt;

&lt;p&gt;I write mostly Python, Groovy, and recently Golang. So I would say I
miss the autovivification, though definitely not the bug Perl has in
being overenthusiastic about autovivification. I miss the possibility
to move around some code, or comment out some code and try the rest
without re-indenting everything. Though I don&amp;rsquo;t miss the time when I
was begging my Perl students to indent their code.&lt;/p&gt;

&lt;p&gt;I miss the CPAN Testers. (in these other languages). (And I do still
encounter Perl code in some corporation written by people who have
been writing Perl for 5-10 years and I always wonder why don&amp;rsquo;t they
actually learn Perl&amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-one-thing-you-d-like-to-change-about-perl&#34;&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;The community. Whatever that means. I wish people were prouder of
their work and embraced the 21st century.&lt;/p&gt;

&lt;p&gt;I wish they were more public about their work (e.g. announcements of
releases of perl IMHO are only published on the p5porters list.
Not on &lt;a href=&#34;http://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt;, not on &lt;a href=&#34;https://www.perl.org&#34;&gt;perl.org&lt;/a&gt;, and not on
&lt;a href=&#34;https://news.perlfoundation.org/&#34;&gt;https://news.perlfoundation.org/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Very few module authors write about new releases of their code. There
are very few people who write about Perl-related subjects. In many
cases those posts are not linking to each other.&lt;/p&gt;

&lt;p&gt;Some of the bloggers seem to have forgotten (or never learned) that
links are a form of supporting each other. This is sad as it gives the
impression that no-one uses Perl. Of course this is not new, it is
just getting worse every year as the people who used to write about
Perl stopped doing so or are writing about other subjects now.&lt;/p&gt;

&lt;p&gt;It also makes it much harder to fill
&lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly newsletter&lt;/a&gt;. If it wasn&amp;rsquo;t for the
&lt;a href=&#34;https://perlweeklychallenge.org/&#34;&gt;Perl Weekly Challenge&lt;/a&gt; we would
have half the size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-the-future-of-perl&#34;&gt;What is the future of Perl?&lt;/h4&gt;

&lt;p&gt;I think the number of &amp;ldquo;Perl programmers&amp;rdquo; will continue to decline and
with that less and less problems will have a solution on CPAN.&lt;/p&gt;

&lt;p&gt;However, the more interesting thing to me is what happens to the
&amp;ldquo;Perl programmers&amp;rdquo;. The same way the impact of Larry Wall on
programming goes far beyond the people who use (or ever used) Perl.
Or &lt;a href=&#34;https://en.wikipedia.org/wiki/Patch_(Unix)&#34;&gt;patch&lt;/a&gt; for that
matter.&lt;/p&gt;

&lt;p&gt;For example I would love to know what happened to all the people who
received a
&lt;a href=&#34;https://www.perl.org/advocacy/white_camel&#34;&gt;White Camel Award&lt;/a&gt; even
if they don&amp;rsquo;t write Perl any more.&lt;/p&gt;

&lt;p&gt;Same with the most high-profile CPAN authors. Even if they don&amp;rsquo;t write
Perl any more, their thinking was formed by Perl and by all the nice
things the community had throughout the last 32+ years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Hacks, Perl School, and the future of Perl publishing</title>
      <link>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</link>
      <pubDate>Thu, 28 May 2020 09:44:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</guid>
      <description>

&lt;p&gt;Dave Cross, long-time Perl user, trainer, and author, recently released &lt;a href=&#34;https://perlhacks.com/2020/04/the-best-of-perl-hacks/&#34;&gt;The Best of Perl Hacks&lt;/a&gt;, a curated collection of his best posts from his &lt;a href=&#34;https://perlhacks.com&#34;&gt;Perl Hacks blog&lt;/a&gt;. His imprint, &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt;, has published six e-books, including two that I wrote.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an unrelated book, &lt;a href=&#34;http://shop.oreilly.com/product/9780596526740.do&#34;&gt;Perl Hacks: Tips &amp;amp; Tools For Programming, Debugging, And Surviving&lt;/a&gt;, by chromatic, Damian Conway, and Curtis &amp;ldquo;Ovid&amp;rdquo; Poe. It&amp;rsquo;s also very good, but completely separate from Dave&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-hacks-when-did-you-start-it-and-what-do-you-like-to-post-there&#34;&gt;What is Perl Hacks? When did you start it and what do you like to post there?&lt;/h4&gt;

&lt;p&gt;Perl Hacks is my Perl blog. It&amp;rsquo;s where I post all my Perl-related articles.&lt;/p&gt;

&lt;p&gt;I started it in May 2009. Before then, pretty much everyone in the
Perl community used to blog on a site called &lt;a href=&#34;https://use-perl.github.io&#34;&gt;Use
Perl&lt;/a&gt;. But that site was starting to look
a bit dated and a number of people moved their blogs to other places
at around the same time. It&amp;rsquo;s no coincidence that the
&lt;a href=&#34;https://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; site also dates from the same
year.&lt;/p&gt;

&lt;p&gt;My rule for choosing what to post on the site is basically &amp;ldquo;is this
about Perl?&amp;rdquo; But looking back over the lifetime of the site (which I
did when compiling the book) I noticed that the type of article had
changed over time. When I first started, there were a lot of &amp;ldquo;newsy&amp;rdquo;
entries—&amp;rdquo;London.pm will be holding these meetings&amp;rdquo;, &amp;ldquo;I&amp;rsquo;m running a
training course&amp;rdquo;, things like that. But later I started posting longer
articles about the Perl community or interesting technical corners of
Perl.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-choose-what-went-into-the-ebook-what-are-some-of-your-favorite-posts-which-ones-got-the-best-responses&#34;&gt;How did you choose what went into the ebook? What are some of your favorite posts? Which ones got the best responses?&lt;/h4&gt;

&lt;p&gt;I basically read through the site over a weekend. I ignored all of the
short articles and anything that was topical and would no longer be
interesting. I then did a second pass, planning to get to about fifty
articles. I think I ended up with fifty-seven.&lt;/p&gt;

&lt;p&gt;There are a couple of technical articles that I&amp;rsquo;m particularly pleased
with. &lt;a href=&#34;https://perlhacks.com/2014/01/dots-perl/&#34;&gt;Dots and Perl&lt;/a&gt;
explains Perl&amp;rsquo;s five operators that are just made of dots. Can you
name them all? Ok, strictly speaking, one of them isn&amp;rsquo;t actually an
operator. And &lt;a href=&#34;https://perlhacks.com/2015/04/subroutines-and-ampersands/&#34;&gt;Subroutines and
Ampersands&lt;/a&gt;
was written so I had somewhere to point people who still insist on
putting ampersands on subroutine calls. It carefully explains why it&amp;rsquo;s
rarely necessary (and hasn&amp;rsquo;t been since Perl 5 was released).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://perlhacks.com/2015/12/long-death-cgi-pm/&#34;&gt;The Long Death of
CGI.pm&lt;/a&gt; which
investigated the effects that removing
&lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI.pm&lt;/a&gt; from the Perl core distribution
would have. I thought there was some nice detective work in there.&lt;/p&gt;

&lt;p&gt;The post that got the most response was called &lt;a href=&#34;https://perlhacks.com/2012/03/you-must-hate-version-control-systems/&#34;&gt;You Must Hate Version
Control
Systems&lt;/a&gt;. The title was taken from a Perl job ad from a company that
no-one seemed to want to work for. The person who posted the ad turned
up in the comments and tried to explain why he wrote that, but I don&amp;rsquo;t
think anyone was convinced. This was the one time that I regretted
that I couldn&amp;rsquo;t use a post&amp;rsquo;s comments in the book.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-school-why-did-you-start-it-what-was-the-first-book&#34;&gt;What is Perl School? Why did you start it? What was the first book?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; was a brand that I started to
use in 2012 for some training I ran in London. I had theory that
people weren&amp;rsquo;t keeping their Perl knowledge up to date and many
employers weren&amp;rsquo;t keen on investing in training about what was &amp;ldquo;just a
scripting language.&amp;rdquo; So, I reasoned, if I ran low-cost training
courses at the weekend, people would come on them and the average
level of Perl knowledge in London would rise.&lt;/p&gt;

&lt;p&gt;I ran these courses for a year before putting them on ice. But I liked
the brand and knew that I wanted to use it again in the future.&lt;/p&gt;

&lt;p&gt;In 2015 I wrote a beginners&amp;rsquo; Perl tutorial for Udemy. They published
it on their site and I often pointed people at it. But a couple of
years later, I checked their site to find that a CSS upgrade had
rendered the page pretty much unreadable. I pointed this out to them
and after a bit of discussion, they told me that they weren&amp;rsquo;t going to
invest the time to fix it but said that I was welcome to publish it
elsewhere.&lt;/p&gt;

&lt;p&gt;At the same time I had been experimenting with building ebooks from
Markdown and had developed the pipeline that I still use today. So the
first Perl School book was the serendipitous meeting between my
experimental ebook pipeline and a long piece of text that I wanted to
get out to as many people as possible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called &lt;a href=&#34;https://perlschool.com/books/perl-taster/&#34;&gt;Perl Taster: Your First Two Hours With
Perl&lt;/a&gt;. I published it just
before the 2017 London Perl Workshop and announced it in a lighting
talk at that workshop. I invited other people to contribute books,
offering to help with the technical parts of getting them published.
John Davies approached me about the book that became &lt;a href=&#34;https://perlschool.com/books/selenium-perl/&#34;&gt;Selenium and
Perl&lt;/a&gt; and it&amp;rsquo;s just grown from there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-was-your-experience-giving-low-cost-and-free-perl-training-in-the-uk&#34;&gt;What was your experience giving low-cost and free Perl training in the UK?&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve run Perl training at all levels in the UK. Five years ago I&amp;rsquo;d
still get two or three enquiries a year from companies who were
interested in training, but that&amp;rsquo;s all dried up. I can&amp;rsquo;t remember the
last time someone asked me about running a course for them.&lt;/p&gt;

&lt;p&gt;The Perl School courses were popular for a while. I&amp;rsquo;d get twenty or so
people giving up their Saturday and paying a small fee to get Perl
training. But after a year, the interest started to wane. I cancelled
the last one because I didn&amp;rsquo;t get enough attendees to make it
worthwhile.&lt;/p&gt;

&lt;p&gt;For many years I&amp;rsquo;ve run a free ninety-minute or two-hour course as
part of the London Perl Workshop. I always get a pretty good turn-out
for those. But, to be honest, that&amp;rsquo;s about the only place I can
guarantee much interest in Perl training in the UK these days.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;you-previously-wrote-the-print-books-data-munging-with-perl-https-www-manning-com-books-data-munging-with-perl-manning-press-and-template-toolkit-http-www-template-toolkit-org-book-html-o-reilly-associates-with-andy-wardley-and-darren-chamberlain-how-is-perl-school-s-process-different-than-what-you-experienced-with-those-publishers&#34;&gt;You previously wrote the print books &lt;a href=&#34;https://www.manning.com/books/data-munging-with-perl&#34;&gt;Data Munging with Perl&lt;/a&gt; (Manning Press) and &lt;a href=&#34;http://www.template-toolkit.org/book.html&#34;&gt;Template Toolkit&lt;/a&gt; (O&amp;rsquo;Reilly &amp;amp; Associates, with Andy Wardley and Darren Chamberlain). How is Perl School&amp;rsquo;s process different than what you experienced with those publishers?&lt;/h4&gt;

&lt;p&gt;I guess the main difference is that there&amp;rsquo;s a lot less process
involved with the Perl School books.&lt;/p&gt;

&lt;p&gt;With a traditional publisher, there are lots of departments involved.
The editor will want to know when the manuscript will be ready because
they will want to book time from technical reviewers and
proof-readers. They&amp;rsquo;ll also need to plan in designers and even book
printing time on the presses. All of that means there&amp;rsquo;s a lot of
pressure on the author to make a plan for getting the book written and
then to stick to that plan.&lt;/p&gt;

&lt;p&gt;With an ebook, it&amp;rsquo;s all a lot less structured. I largely rely on
authors to arrange their own technical reviewers. I&amp;rsquo;ll do a bit of
proof-reading. And we haven&amp;rsquo;t (as yet) used any designers—that
probably shows, to be honest.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m not going to pressure an author to finish a manuscript. When
you&amp;rsquo;re ready, I&amp;rsquo;ll steer you through turning your Markdown into an
ebook and then publishing it on Amazon. If it takes longer than you
expected, then so what?&lt;/p&gt;

&lt;p&gt;In many ways, I see parallels with the &lt;a href=&#34;http://theleanstartup.com&#34;&gt;Lean
Startup&lt;/a&gt; ideas of Eric Ries. We&amp;rsquo;re small
and we&amp;rsquo;re agile. If you come to me with a completed book, we might
well be able to get it on Amazon in a week or two. For a traditional
publisher, that time will be months.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-are-the-biggest-challenges-to-technical-publishing-today-how-does-something-like-perl-school-respond-to-that&#34;&gt;What do you think are the biggest challenges to technical publishing today? How does something like Perl School respond to that?&lt;/h4&gt;

&lt;p&gt;Traditional publishing is an expensive business. Publishers need to
make a lot of money just to break even on a book. I don&amp;rsquo;t know the
details, but they have to sell a certain number of copies in order to
make it worth publishing a book. And that, in turn, means that they
will rarely take a risk. For a technical publisher, that means only
publishing books about technologies that have reached a certain level
of usage.&lt;/p&gt;

&lt;p&gt;People are also buying fewer technical books. Technologies change
quickly and many books will be out of date before they get to the
bookshops. If you want up to date information about your favourite
technologies then you&amp;rsquo;re probably better off going to the developer&amp;rsquo;s
web site.&lt;/p&gt;

&lt;p&gt;For a publisher like Perl School, the economics are different. We have
far smaller costs and (as I mentioned before) we can get books in
customers&amp;rsquo; hands far more quickly.&lt;/p&gt;

&lt;p&gt;Large technical publishers have largely abandoned Perl. They just
don&amp;rsquo;t see that they would get the level of sales needed to justify a
new Perl book. Perl School is happy to take that risk—because, really,
it&amp;rsquo;s a tiny risk for us.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-are-your-personal-reading-preferences-which-device-do-you-like-what-size-screen-do-you-need-and-which-format-works-best-for-you&#34;&gt;What are your personal reading preferences? Which device do you like, what size screen do you need, and which format works best for you?&lt;/h4&gt;

&lt;p&gt;I do like a real book. But they take up too much space, so I&amp;rsquo;ve pretty
much completely stopped buying them over the last five years. I like
being able to access all of the ebook part of my library from a device
that I can carry in my pocket. One thing that would make me really
happy is a device that could rip my existing paper library to ebooks
in the same way that we all ripped our CDs to MP3s.&lt;/p&gt;

&lt;p&gt;Currently, I read ebooks on an 8&amp;rdquo; Amazon Kindle Fire. That&amp;rsquo;s just
bigger than a paperback and fits in a (large) pocket in the same way
that a book would. I also have a 10&amp;rdquo; Pixel Slate which I&amp;rsquo;ll often use
for reading in my house. I&amp;rsquo;m rather firmly locked into the Amazon
ebook ecosystem, so I prefer to find books in Mobi format—but I can
drive Calibre, so I&amp;rsquo;m happy to convert from other formats.&lt;/p&gt;

&lt;p&gt;I get mildly annoyed by web sites that promise me an ebook and then
deliver a PDF. PDFs are made to be read at a certain size and if
you&amp;rsquo;re reading them on a smaller screen it will either be too small to
read or you&amp;rsquo;ll need to scroll back and forth a lot. A proper ebook
format (like Mobi or ePub) will reformat pages for any combination of
screen size and font size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-can-someone-write-a-book-for-perl-school-what-topics-do-you-think-would-be-most-interesting&#34;&gt;How can someone write a book for Perl School? What topics do you think would be most interesting?&lt;/h4&gt;

&lt;p&gt;Simply email me at hello@perlschool.com with your suggestions. I&amp;rsquo;ll
talk you though the technical side of getting the book written and
published on Amazon—it&amp;rsquo;s really not very hard.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d pretty much consider any Perl-related topic. I would never have
thought of publishing books on Selenium or Cucumber, but John Davies
wrote them and I&amp;rsquo;ve published them. And they seem to be selling.&lt;/p&gt;

&lt;p&gt;But there are books I&amp;rsquo;d like to see. I&amp;rsquo;d love to publish books on the
various &amp;ldquo;Modern Perl&amp;rdquo; tools that we all use—Moose, DBIx::Class, things
like that—and all of Perl&amp;rsquo;s popular web frameworks.&lt;/p&gt;

&lt;p&gt;I think the one I&amp;rsquo;d most like to see is one that, in my head, is
called &amp;ldquo;Modern Core Perl&amp;rdquo;. It covers all of the important changes in
the core Perl language back to version 5.10. Basically, it&amp;rsquo;s a
tutorial based on all of the &lt;code&gt;perldelta&lt;/code&gt;s. I&amp;rsquo;ve thought about writing
it myself a few times, but I just don&amp;rsquo;t have the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Larry Wall interviewed in San Francisco</title>
      <link>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</link>
      <pubDate>Mon, 16 Oct 2017 09:26:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/larry-wall-interviewed-in-san-francisco/</guid>
      <description>&lt;p&gt;Larry was interviewed in San Francisco at Erlang &amp;amp; Elixir Factory SF Bay Area 2017 conference. As you&amp;rsquo;d expect from Larry, the talk covered many interesting topics including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl 6&lt;/li&gt;
&lt;li&gt;Paul Graham&amp;rsquo;s 100 year language&lt;/li&gt;
&lt;li&gt;How culture influences thinking and programming&lt;/li&gt;
&lt;li&gt;History of hardware and how computers are like people&lt;/li&gt;
&lt;li&gt;Larry&amp;rsquo;s early programming languages and influences&lt;/li&gt;
&lt;li&gt;Programming paradigms and language design&lt;/li&gt;
&lt;li&gt;Types and their benefits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first 22 minutes are Larry showcasing Perl 6&amp;rsquo;s major features. If you&amp;rsquo;re familiar with those already, you might want to skip ahead. My favorite anecdote was about the Unix community and Perl:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Henry Spencer called early Perl &amp;ldquo;awk with skin cancer&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Larry Wall&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The video, slides and audio of the interview are available on InfoQ&amp;rsquo;s &lt;a href=&#34;https://www.infoq.com/presentations/language-design-perl&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Via&lt;/em&gt;: O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;https://www.oreilly.com/feed/four-short-links&#34;&gt;Four short links&lt;/a&gt; and &lt;a href=&#34;https://developers.slashdot.org/story/17/10/07/0259243/new-video-peeks-inside-the-head-of-perl-creator-larry-wall&#34;&gt;Slashdot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thinking about Perl 6</title>
      <link>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</link>
      <pubDate>Tue, 25 Apr 2017 08:23:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</guid>
      <description>&lt;p&gt;&lt;em&gt;brian d foy interviews Laurent Rosenfeld, whose new book &lt;a href=&#34;http://shop.oreilly.com/product/0636920065883.do&#34;&gt;Think Perl 6&lt;/a&gt; from O&amp;rsquo;Reilly Media, comes out this summer and is available for pre-order. This book joins a series of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think &amp;hellip;&lt;/a&gt; books targeting different subjects and is provided for free under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/3.0/&#34;&gt;Creative Commons license&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was made possible through a reward on brian&amp;rsquo;s &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/learning-perl-6&#34;&gt;Kickstarter project for Learning Perl 6&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your Perl programming background? How did you discover the language, how did it help you solve problems, and what did you like about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Laurent)&lt;/em&gt; I started to program in Perl 5 in 2002. At the time I was using mainly Python (and also a bit of TCL/TK) for my scripting needs.&lt;/p&gt;

&lt;p&gt;The integration and implementation team for which I started to work at the time was using a number of mostly relatively small Perl programs in the context of a data migration suite.&lt;/p&gt;

&lt;p&gt;Although I wasn&amp;rsquo;t working as a developer at the time, I felt it would be good to get to get acquainted to the language. So I picked up a tutorial on the Internet and started to work on it, and I found the language to be quite pleasant.&lt;/p&gt;

&lt;p&gt;At that point, we received some large improperly formatted data files that needed to be pre-processed before we could use them. I first thought about writing quickly a Python script and then changed my mind: since I was trying to learn about Perl, maybe I could try to write that script in Perl. Within a day or so, I had a Perl script doing what was needed. That script was probably quite clumsy, and certainly did not comply with the best practices, but it worked exactly as needed.&lt;/p&gt;

&lt;p&gt;I was quite impressed how easily I had been able to write a script for real professional use with the small subset of Perl that I knew at the time. I continued with Perl. It is really a few years later that I started to really consider Perl as a programming language, rather than simply a scripting language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have made various tests and experiments with Perl 6 in 2012 and early 2013, but I started to work seriously with Perl 6 during the second half of 2013. I started to write about Perl 6 in 2014.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some of your favorite features of the new language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first that it belongs to the Perl family, with the same spirit (TIMTOWTDI, DWIM, etc.). This made it easy for me to learn it, even though Perl 5 and Perl 6 are different languages.&lt;/p&gt;

&lt;p&gt;Then the features I prefer are its powerful object model, the very good support for functional style programming, the enhanced regex features and grammars. I love the built-in possibilities of extending the languages, such as constructing new operators, extending the Perl 6 grammar, etc.&lt;/p&gt;

&lt;p&gt;The support for concurrent programming and parallel processing also seems to be great, but I have only played with that, I haven&amp;rsquo;t done anything serious with it at this point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your new book, &lt;em&gt;Think Perl 6&lt;/em&gt;, is based on a similar Python book. How did you discover that book? Were you doing Python at the time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many years ago I read the first edition of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think Python&lt;/a&gt; and had found it was a great book, because it wasn&amp;rsquo;t teaching Python, but rather teaching computer science and programming, using Python. This is the main idea of &lt;em&gt;Think Perl 6&lt;/em&gt;: teaching computer science using Perl 6.&lt;/p&gt;

&lt;p&gt;I have been using Python in the past, but I don&amp;rsquo;t remember if was using it regularly when I first read &lt;em&gt;Think Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How alike are the two books? Did you have to change much of the book to accommodate Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The early chapters are quite similar (except of course for the code examples and differences in syntactic features).&lt;/p&gt;

&lt;p&gt;As I said, both books are about teaching computer programming more than teaching the specific language. So most of what is about the art of programming is quite similar. But when it comes to the languages&amp;rsquo; features, there are obviously some major differences.&lt;/p&gt;

&lt;p&gt;The chapter on strings, for example, is quite different because there is a long part on regular expressions or regexes in &lt;em&gt;Think Perl 6&lt;/em&gt;, whereas the Python book does not even mention them.&lt;/p&gt;

&lt;p&gt;The later chapters, such as those about object-oriented programming, grammars or functional programming are completely different or even brand new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You started translating &lt;em&gt;Think Python&lt;/em&gt; into French. What motivated you to do that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I said, I had loved the first edition of that book. When friends of mine considered translating that book into French I strongly supported the idea.&lt;/p&gt;

&lt;p&gt;Initially, someone else (whom I knew well for having worked on other projects with her) started to translate the book, and I initially acted as a technical editor of the translation. Then I was dragged more into the project and translated myself the more technical parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What else have you translated?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have translated a number of other things. Concerning items that have the size of a book, I should mention &lt;em&gt;Modern Perl&lt;/em&gt;, the book by chromatic, and I am currently working on the translation of a book about Scala.&lt;/p&gt;

&lt;p&gt;Besides that, I have translated many shorter tutorials and articles on various features of programming languages such as Perl 5, Perl 6, Python, C++, Go, etc., as well as various articles about big data and also some pieces on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you think about the subject differently in French than English? Do these spoken languages affect how you explain things?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, I don&amp;rsquo;t think that the human language I use affects the way I think. Sometimes I think in English when writing something in French, and sometimes the other way around, but, most of the time, I think in the language in which I will try to express myself. I even dream in both languages (although more frequently in French). I think that I am truly bilingual in the sense that I can really think in both languages with no real difference (although, of course, my command of English is less fluent than my command of French, my mother tongue).&lt;/p&gt;

&lt;p&gt;But the language I use does of course change to a certain extent the way to express ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Think Perl 6&lt;/em&gt;&amp;rsquo;s subtitle is &amp;ldquo;Think Like a Computer Scientist&amp;rdquo;. Do you think that the programming world needs more academic rigor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More academic rigor, well, yes, in a certain way, but I am not sure that&amp;rsquo;s really what is lacking. A broader understanding of computer science is certainly needed. Sometimes I see people developing in one language, say PHP, and not really knowing any other language or any other way of doing things; that&amp;rsquo;s not very good. I tend to think you can&amp;rsquo;t really be a good programmer if you know only one language. I personally love programming languages and I have used at least three dozens of them over the last thirty years. I think it opens the mind to other approaches and better ways of doing things.&lt;/p&gt;

&lt;p&gt;I really agree with Tom Christiansen who said that a programmer that hasn&amp;rsquo;t been exposed to imperative or procedural programming, object-oriented programming, functional programming, and logical or declarative programming has some conceptual blindspots.&lt;/p&gt;

&lt;p&gt;And I also don&amp;rsquo;t think you can become a good programmer in just one semester or by simply reading &amp;ldquo;Programming X for Dummies.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What book has most influenced your programming habits?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relatively recently, definitely &lt;em&gt;&lt;a href=&#34;http://hop.perl.plover.com&#34;&gt;Higher Order Perl&lt;/a&gt;&lt;/em&gt;, the book by Mark Jason Dominus about functional programming in Perl 5. It is probably, in my opinion, the best IT/CS book I&amp;rsquo;ve read in the last ten years. It has changed really the way I program not only in Perl, but also how I write code in other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which books using languages other than Perl have made you a better Perl programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is hard to make a list and not to forget some important ones. Just naming a few, in no particular order: &lt;em&gt;The Practice of Programming&lt;/em&gt; (Kernighan and Pike), &lt;em&gt;Structure and Interpretation of Programming Languages&lt;/em&gt; (Abelson and Sussman), &lt;em&gt;Think Python&lt;/em&gt; (A. Downey), &lt;em&gt;Programming Pearls&lt;/em&gt; (Jon Bentley), &lt;em&gt;Mastering Regular Expressions&lt;/em&gt; (Jeffrey Friedl).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even if someone isn&amp;rsquo;t going to work in Perl 6, what lessons from your book can people take to other languages?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, I certainly wish that people that use my book to learn programming will continue to program in Perl 6, but I&amp;rsquo;ll be very happy if they learned programming with my book and become good programmers in another languages.&lt;/p&gt;

&lt;p&gt;Personally, when I was studying, I had to use a number of programming languages that I never or seldom used afterwards for any real-life purpose (Basic, Fortran, Pascal, Lisp, Scheme, Caml, Ada, Prolog, Modula-2, etc.). But I learned quite a bit from them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future do you see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I frankly don&amp;rsquo;t know. I think this language is really very good and efficient, but that&amp;rsquo;s not enough to become the leading language. There is an element of luck: is the language coming at the right time? Let&amp;rsquo;s face it: Perl 6 took way too long to come out. But that&amp;rsquo;s doesn&amp;rsquo;t matter too much if Perl 6 is the good match for today&amp;rsquo;s needs; I think it probably is. The good point about Perl 6 is that it can easily be extended; so, it is likely to satisfy not only current needs, but also tomorrow&amp;rsquo;s needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future would you like to see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I really think it is the greatest programming language I have seen so far. I hope people will start recognizing that.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl master - an interview with brian d foy</title>
      <link>http://localhost:1313/article/75/2014/3/6/Perl-master---an-interview-with-brian-d-foy/</link>
      <pubDate>Thu, 06 Mar 2014 03:52:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/75/2014/3/6/Perl-master---an-interview-with-brian-d-foy/</guid>
      <description>&lt;p&gt;&lt;em&gt;brian d foy is is a prolific Perl author, programmer and trainer whose new book, the second edition of Mastering Perl was recently published by O&amp;rsquo;Reilly. We caught up with brian to discuss the new book, his thoughts on technical writing and find out what other projects he&amp;rsquo;s working on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s talk about the elephant in the room, that new cover of Mastering Perl. Do you like it?&lt;/strong&gt;
I saw the change when the book was nearing completion, because they usually save that activity for the end of the publication process. I haven&amp;rsquo;t seen it in print yet, but I don&amp;rsquo;t think it will influence people that much, as people tend to buy technical books based on the title and the content rather than the cover. It seems similar to what Apple did with iOS 7—make everything very thin and flat. I&amp;rsquo;m getting old so I need everything to be bigger! It&amp;rsquo;s something different than what people have seen before and I think it will take a while for the style to take hold and then people will identify it with the Perl series much like the previous style.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/67/mastering_perl_first_second_cover.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally you set out the vision for Mastering Perl to be: &amp;ldquo;teach people to work on their own and get them on the road to being a Perl master&amp;rdquo; — how do you think the new edition of Mastering Perl achieves that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The second edition is very much like that the first in structure, although I&amp;rsquo;ve updated various things. The first edition was published in 2006 and it&amp;rsquo;s almost 10 years later. A lot of things have changed, such as which modules we&amp;rsquo;re using and how we think about the details, but the big stuff is the same.&lt;/p&gt;

&lt;p&gt;When I teach classes based on Mastering Perl, this is the stuff that people haven&amp;rsquo;t ever really thought about. We spend a lot of time teaching people how to deal with the language itself at the statement level, but not much on the higher, architectural level. It&amp;rsquo;s at that higher level where people can really get into trouble because they create things that syntactically work out but turn into a big mess when they operate as a whole.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We spend a lot of time teaching people how to deal with the language itself at the statement level, but not much on the higher, architectural level&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mastering Perl covers topics like debugging, profiling, logging, things that help people get things done. I&amp;rsquo;ve been very happy with the feedback I get from the book, now I just need to get everyone to read it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I saw it was number 2 on the Amazon Perl sales charts recently, so it seems to have had a positive impact so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon ratings can be very dynamic as people buy books so infrequently, (especially technical books), that if I sell one book on one day, it can move me very far up the sales charts. Also, initially for any new book there is a sales spike, I think pre-orders count as soon as the book ships. Mastering Perl is an advanced book too, so it may be popular for a while but never as popular as &lt;a href=&#34;http://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt; or &lt;a href=&#34;http://www.programmingperl.org&#34;&gt;Programming Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning Perl has been the best-selling Perl book for a long time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think ever since it came out it has been the best-selling Perl book. But nowhere near the numbers that Randal Schwartz was seeing in the first edition. That was just amazing. I hope to someday write a book that popular!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the new edition of Mastering Perl, there is a lot of new content. Which parts of that content were you most happy with or excited to tell other people about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The big changes were in the &amp;ldquo;Lightweight Persistence&amp;rdquo; and &amp;ldquo;Regular Expressions&amp;rdquo; chapters. In &amp;ldquo;Lightweight Persistence&amp;rdquo; we finally admitted to the community that &lt;a href=&#34;https://perldoc.perl.org/Storable.html#SECURITY-WARNING&#34;&gt;Storable&lt;/a&gt; has a a huge problem with security because in the Storable format we can inject various things to make Perl do things, especially with duplicate keys and class names that don&amp;rsquo;t exist. I had to rewrite all of the book&amp;rsquo;s content for Storable, and it was interesting to track that information down.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot that&amp;rsquo;s happened between 2005 and now; for example JSON just exploded. It seems everyone is using it and not so much YAML anymore. So I had to add JSON in. In my programming, JSON features a lot in what I&amp;rsquo;m doing now. It&amp;rsquo;s easy to exchange into other languages, to throw at your browser, and it&amp;rsquo;s decent to read (at least, it&amp;rsquo;s not that bad).&lt;/p&gt;

&lt;p&gt;The other huge change in the Regular Expressions chapter. When I looked at was in the that chapter, a lot of that stuff has moved down into either Learning Perl or Intermediate Perl and our goal with Mastering Perl, when Alison Randal and I both set out to write it, was to not include content that&amp;rsquo;s available in another book already, especially if it was one of the books that had my name on it.&lt;/p&gt;

&lt;p&gt;I had to take out a lot of that stuff, like non-greedy matching and anchors, which are in the other books. In order to keep the chapter, I had to replace that content with something advanced.&lt;/p&gt;

&lt;p&gt;Since 5.10 we&amp;rsquo;ve had a huge number of really powerful new features that no one has really seen yet; grammars, new flags, and the cool things you can do with those.&lt;/p&gt;

&lt;p&gt;I had to work really quite a bit on this chapter and luckily as I was writing it, Randal Schwartz came out with this &lt;a href=&#34;http://www.perlmonks.org/?node_id=995856&#34;&gt;regular expression&lt;/a&gt; that parses JSON, using a lot of the new key features. I don&amp;rsquo;t know if I would actually use it to parse JSON as he&amp;rsquo;s written it in a minimal way for a particular client problem that works for them. But it demonstrated a bunch of the stuff I wanted to talk about. So I built the chapter around that. I had to research what a lot of those feature do: they&amp;rsquo;re not very well explained in the Perl documentation (at least so far as I could understand them). Taking the new features and experimenting with them to understand them for Mastering Perl was something I really enjoyed doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On that topic, you write for all kinds of audiences, but would say that you enjoy writing for the advanced (Perl) audience more, because it gives you more opportunities to do things like that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I enjoy it in different ways. I get to do a lot more with Mastering Perl because as I say in the introduction, I&amp;rsquo;m assuming you already know Perl, or you know how to find out something by using the docs and where to ask questions. I&amp;rsquo;m not going to write out step-by-step how the map function works; the reader should already know how it works.&lt;/p&gt;

&lt;p&gt;That assumption let&amp;rsquo;s me expand on the idea of what we&amp;rsquo;re trying to do rather than the syntax. Whereas in Learning Perl you have to do very simple things because the reader is going to struggle with the concept of the particular feature that they&amp;rsquo;re using.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I would say I enjoy it more, it&amp;rsquo;s a different sort of enjoyment. I really like the beginning stuff. There&amp;rsquo;s a lot you get from kick-starting someone into the language and setting them on right path and then they can turn into a programmer. And I think that&amp;rsquo;s probably more rewarding to me than writing the very advanced material. That&amp;rsquo;s not to say one is better than the other, it&amp;rsquo;s just more satisfying to turn people into new Perl programmers than it is to level-up existing programmers. But I recognize the need to do both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The chapter structure of Mastering Perl is largely the same as before, do you think you got it right the first time around? I know there was a public development process that was involved.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think we did. In the first edition of Mastering Perl I had a lot of input from Alison Randal (the editor) and she was a big name in the Perl community. Unfortunately she&amp;rsquo;s moved on to other things, but she really knew Perl, the community, and how to program in Perl. So when we sat down to talk about the book, she had great ideas and input about how to organize things, and what to put in or leave out.&lt;/p&gt;

&lt;p&gt;We ran the book completely in the open. As I wrote things I let people see it (which is a very dangerous thing to do!) and people were not shy in telling me what they thought. Which is great, because you want them to say it before the book is published and not afterwards in an Amazon review. So that process really shaped the book.&lt;/p&gt;

&lt;p&gt;When I got to writing the second edition of Mastering Perl, I put it online again, and got a lot of good feedback for that. There wasn&amp;rsquo;t anyone saying &amp;ldquo;you need to have a chapter on x&amp;rdquo; (that wasn&amp;rsquo;t there before). I think that&amp;rsquo;s because most topics are covered elsewhere already. For instance we don&amp;rsquo;t have a chapter on XS, as it&amp;rsquo;s already covered in Tim Jenness&amp;rsquo; &lt;a href=&#34;http://www.manning.com/jenness/&#34;&gt;book&lt;/a&gt;, or you&amp;rsquo;re going to have to talk to perl5-porters because they don&amp;rsquo;t even have a good set of docs that explain everything. You just have to get your hands dirty. And XS keeps changing because of release of Perl, they&amp;rsquo;re improving the Perlguts interface to make it easier to use (which is fantastic). XS was one of the things that motivated Perl 6 because the Perl 5 core was so hard to hack on. I think for Mastering Perl, we got it right.&lt;/p&gt;

&lt;p&gt;The thing to remember for any book is that no book is going to give you everything. Learning Perl is a very targeted book. There&amp;rsquo;s that Randal Schwartz quote: &amp;ldquo;80% of the behavior of Perl can be described in 20% of the documentation&amp;rdquo;&lt;sup&gt;&lt;a href=&#34;#1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In Intermediate Perl we move on to how to write Perl with people in teams, reusable code, how to share it, and references. But they&amp;rsquo;re both very short books of about three hundred pages each and Mastering Perl is about the same size.&lt;/p&gt;

&lt;p&gt;If you look in some other languages and look at their books, they&amp;rsquo;ve got these gargantuan things that are a thousand pages or more. I know in Programming Perl we were limited to a certain page count because they couldn&amp;rsquo;t physically bind it otherwise.&lt;/p&gt;

&lt;p&gt;But not everyone needs 1200 pages. There are some people who&amp;rsquo;ll use Learning Perl and stop, because that&amp;rsquo;s all they need. So to people who say &amp;ldquo;why can&amp;rsquo;t you combine all this material into one big book&amp;rdquo;, the answer is you can, just buy the separate books and glue their back covers together, and there&amp;rsquo;s your one big book. The chapter sequence would be the same anyway!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to people who say &amp;ldquo;why can&amp;rsquo;t you combine all this material into one big book&amp;rdquo;, the answer is you can, just buy the separate books and glue their back covers together&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s a great Perl book market out there. The Perl community is really good at getting information out there. There&amp;rsquo;s a lot of beginning Perl books, there are enough of the advanced ones. My idea is if I teach you how to do something you don&amp;rsquo;t need a book on every particular topic. Once you learn how to use the documentation, you can quickly get up to speed on the particulars yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve written a lot about Perl, and you&amp;rsquo;ve been published in many different formats and mediums. What do you think are some of the key considerations for good technical writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I always remember what Randal told me when I first started writing Perl books. He mentored me and explained to me how to be a good technical writer. You always have at least three audiences: the people with no clue who have never heard of the thing you&amp;rsquo;re talking about, then there are the people who get the concept, but they need a reason to read it, and then there are the advanced users (who might not be a huge proportion of the audience), and they&amp;rsquo;ll want to learn something new or clever.&lt;/p&gt;

&lt;p&gt;Taking the JSON parser example from Mastering Perl, there are three people I&amp;rsquo;m thinking about. People who have never seen those features before; they haven&amp;rsquo;t seen a recursive regular expression and so I have to explain it as if talking to a beginner. There are people who have seen it, are aware of it, and have just never used it. So I had to do something interesting for them as they know how it works, but never had a reason to put it into practice. Then I think about that advanced group, who know all of this, but they want to be surprised by it somehow. And that&amp;rsquo;s what Randal&amp;rsquo;s final JSON parser example does.&lt;/p&gt;

&lt;p&gt;Another thing that Randal drilled into my head which is that you&amp;rsquo;ve got to realize where you&amp;rsquo;re starting and where you&amp;rsquo;re ending and you&amp;rsquo;ve got to lead the reader there because you&amp;rsquo;re telling a story; there&amp;rsquo;s a narrative. You can see that in my books. It&amp;rsquo;s not that there&amp;rsquo;s one section and then in the next section we&amp;rsquo;ve completely forgotten what was covered in the preceding section. We&amp;rsquo;re always on some kind of progression. In my writing, I start of at some point and write a story that progresses you to a final point which ties everything together. You have to keep that story line in mind, so you know what you need to emphasize and not, what to include and to leave out, to take people along the path you want them to travel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about code examples? That&amp;rsquo;s something that always features in technical writing. Do you have any guidelines or rules or rules of thumb that you follow when you&amp;rsquo;re including code examples in your writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I try to write code examples that have the least number of distractions. I could write a program that was &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; clean and uses all the modern Perl conveniences, but that would distract from the concept I&amp;rsquo;m trying to communicate, so I write very minimal programs. I don&amp;rsquo;t remember if I did this in Mastering Perl or not, but I don&amp;rsquo;t think I used the strict or warnings pragmas in the code examples. I didn&amp;rsquo;t want to have those extra two lines all the time. I think I do have the shebang line in there, but not those other two. It&amp;rsquo;s not that I&amp;rsquo;m saying don&amp;rsquo;t use strict or warnings, it&amp;rsquo;s just not what I&amp;rsquo;m thinking about. In the code examples I&amp;rsquo;m trying to focus on a particular concept and especially in Mastering Perl, I assume that people know how to write complete Perl programs on their own using good practices, so I&amp;rsquo;m not harping on about strict and warnings.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s one of the things the Perl community is killing itself with because every time someone comes in with a casual question, that&amp;rsquo;s the feedback they get: &amp;ldquo;we&amp;rsquo;re not going to help you unless you use strict in your program&amp;rdquo;, even if there was no strict problem in their question.&lt;/p&gt;

&lt;p&gt;Some of the other things I try to think about: how does the code look, and how does it fit together? I try to write code in paragraphs: there&amp;rsquo;ll be a bunch of statements together with no blank lines between them, then I&amp;rsquo;ll add blank line and begin coding the next paragraph. Different people have different ideas about that, but in Mastering Perl I&amp;rsquo;m the only name on the book so I get to decide the style!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Different people have different ideas about that (code style), but in Mastering Perl I&amp;rsquo;m the only name on the book so I get to decide the style!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing I think is important (and I try to pass this on in my classes) is that you&amp;rsquo;re going to have to look at all kinds of different styles anyway. So having a consistent style across every Perl book isn&amp;rsquo;t really helping the reader. When that reader sits down and opens a Perl program written by a C programmer, it will look very different and they won&amp;rsquo;t have the style crutch to help them. There are tools that can help you in this scenario, in Mastering Perl we cover perltidy, which formats Perl code to a coding style you define. It&amp;rsquo;s also like fiction: detective novels are not written in the same style as advanced literature, because the authors are trying to achieve different things. I think the coding style used in technical books is a lot like that. I don&amp;rsquo;t want to say much more on coding style else I might spark an online war about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s interesting, considering Perl&amp;rsquo;s motto, TIMTOWTDI (there is more than one way to do it), do you find it challenging to write about Perl, because it seems no matter how you write about something, someone else will always have another way of doing it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t bother me so much in terms of writing the books or reading other people&amp;rsquo;s code, but while we have TIMTOWTDI there is the corollary &amp;ldquo;but most of them are wrong&amp;rdquo; (I don&amp;rsquo;t remember who invented that). I think TIMTOWTDI is great; it let&amp;rsquo;s people with limited knowledge get stuff done. They don&amp;rsquo;t need to learn the one optimal function call to use, they can fake it with something else. You can parse a string tediously with an index, or use split or regex captures. For the person who just needs to get things done by the end of the day, that&amp;rsquo;s great because they may only need to know a couple of those methods, and not spend the time figuring out the one right method they don&amp;rsquo;t know. Later they can go back and optimize that code if they have to. So I don&amp;rsquo;t get too upset about TIMTOWTDI.&lt;/p&gt;

&lt;p&gt;I come from the Physics world where I have seen much worse code than the examples the community typically criticizes. I&amp;rsquo;ve seen this awful code running in big labs and bespoke equipment and it worked. I wouldn&amp;rsquo;t want to work on that code myself, but there is a point where you just have to get work done and I can&amp;rsquo;t expect everyone to be thinking about Perl all day long.&lt;/p&gt;

&lt;p&gt;I do appreciate beautiful code—there are some people who write code that is amazing to look at and fun to read, because the way they think about things and the features they use all weave together to make something really interesting. But I don&amp;rsquo;t expect that from everyone because that&amp;rsquo;s not the goal for most people. If I want to make people into Perl programmers I can&amp;rsquo;t make that the goal, I&amp;rsquo;m not trying to turn them into people who win code reading contests at conferences. I want to turn them into people who say &amp;ldquo;I used Perl and I got my work done and I was able to go and do something else&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not trying to turn them into people who win code reading contests at conferences. I want to turn them into people who say &amp;ldquo;I used Perl and I got my work done and I was able to go and do something else&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;On code readability, most textbooks print code in plain text without syntax highlighting (for cost savings or whatever). Do you think that&amp;rsquo;s a missed opportunity?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think my book &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt; had syntax highlighting, but really I don&amp;rsquo;t pay attention to my books after they&amp;rsquo;re published because I don&amp;rsquo;t want to see what the editors did to it. I write the book initially but there&amp;rsquo;s a whole bunch of people that come in and make it better. And sometimes they make it better in ways that I don&amp;rsquo;t like and it will take me a couple of years to come around to the fact that it was probably a good change.&lt;/p&gt;

&lt;p&gt;Syntax highlighting is a personal decision though. For example in my terminal I have a black background and 30% opacity and yellow text. I work mostly in &lt;a href=&#34;http://www.barebones.com/products/bbedit/&#34;&gt;BBEdit&lt;/a&gt;, and I just use the default syntax highlighting settings. Keywords are blue and comments are red and documentation is grey (I think). But when I look at code presented at conferences, there&amp;rsquo;s all kinds of things going on: braces are a particular color, etc. Everyone has their own particular way that they expect to see things so if I choose one syntax highlighting scheme in the book, it&amp;rsquo;s probably not going to work for anybody. Even the highlighting in Effective Perl Programming didn&amp;rsquo;t work out because they didn&amp;rsquo;t want to use red ink as they&amp;rsquo;re worried about people who have trouble seeing red (it can appear as grey). So the publishers changed the color, and now the things that would have usually been red are cyan and it makes me feel weird reading it. Syntax highlighting is a personal preference, and choosing any one particular style will not work for the majority of readers of the book.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always maintained that people should use whatever tools and settings they want to use with the proviso that their choice does not affect anybody else. If I use BBEdit that&amp;rsquo;s great as long as people using VI, Emacs or Komodo or whatever they want to use aren&amp;rsquo;t affected.&lt;/p&gt;

&lt;p&gt;If we had really fancy ebooks—which I&amp;rsquo;m still waiting for as ebooks now are still mostly static content—but if we had really fancy ones where we could load our code settings into it where we could see the code in our preferred syntax highlighting style. But we don&amp;rsquo;t have a way yet to inject a personal CSS into an ebook. I think there are huge missed opportunities there and I don&amp;rsquo;t think we&amp;rsquo;re going to get them now that Steve Jobs has passed on as I don&amp;rsquo;t think anyone cares as much as he did about how things look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In terms of that stance on not minding what other people use as long as it doesn&amp;rsquo;t affect what you use. There was that recent controversy about the Dist::Zilla authors on CPAN. What&amp;rsquo;s your take on that? Should we all reach for the MakeMaker approach, or do you have a different view?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not in love with &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;MakeMaker&lt;/a&gt; but it&amp;rsquo;s the best we&amp;rsquo;ve got. Module::Build solved a lot of problems, but it also didn&amp;rsquo;t work in some scenarios, so we&amp;rsquo;re back to MakeMaker now. I wish there were a better thing, but so far there isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Regarding &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;, my only real problem with that is when you drop into a Dist::Zilla project and you&amp;rsquo;re not a Dist::Zilla author, there&amp;rsquo;s absolutely nothing that tells you what to do. A lot of times there&amp;rsquo;s not even a readme. For a while there was a fad of making the readme just a copy of the pod in the main module. But I&amp;rsquo;ve always wanted to readme to be &amp;ldquo;this is how you can get started with this directory&amp;rdquo;. So in my readme files I explain how to build the program. The Dist::Zilla approach gets rid of all that. There is dzil.ini file and a bunch of directories but there&amp;rsquo;s nothing that says &amp;ldquo;this is what you need to do&amp;rdquo;. I think a lot of people wouldn&amp;rsquo;t even know what module to install so they can begin the installation process. When I brought this up on twitter, some people thought it would be a good idea to include a file that explains the installation process with Dist::Zilla. Then I went one step further and thought wouldn&amp;rsquo;t it be great to have a program that manages that process for the user, but then that&amp;rsquo;s topologically similar to the Makefile.PL route.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;my only real problem with that is when you drop into a Dist::Zilla project and you&amp;rsquo;re not a Dist::Zilla author, there&amp;rsquo;s absolutely nothing that tells you what to do&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know why Ricardo made Dist::Zilla, I know why some people use it, but I get annoyed when people push off their preferences for their particular activities onto others. Ricardo and David Golden are prolific CPAN authors and Dist::Zilla helps them be manage that. But the way that they work doesn&amp;rsquo;t have to be the way that the maintainer of a single module works. I&amp;rsquo;m not saying that we shouldn&amp;rsquo;t use Dist::Zilla, but that every time we use a tool we have to figure out how much it helps and how much it hurts.&lt;/p&gt;

&lt;p&gt;I think in a lot of cases, people have told me that when they drop into a git repository (to contribute a change) and there&amp;rsquo;s only a dist.ini file and they can&amp;rsquo;t find where they need to their change, they just give up. A lot of the stuff I do are doc patches for instance, but with Dist::Zilla some of the text comes from plugins that are created as part of the distribution. So the error might be higher up in the tool chain, but I don&amp;rsquo;t know which tool that is, and I&amp;rsquo;m not going to go looking for it. I&amp;rsquo;ll grep the distribution, and if I don&amp;rsquo;t find the thing I want to change, I&amp;rsquo;ll move on. That&amp;rsquo;s my personal decision—that it&amp;rsquo;s not worth my effort. Some people are going to be fine with that, they may think that they don&amp;rsquo;t get many contributions anyway, or that their users are all Dist::Zilla users, so they&amp;rsquo;ll get the contributions they need. It&amp;rsquo;s something that the community hasn&amp;rsquo;t really discussed, and when the subject does come up, it gets heated very quickly.&lt;/p&gt;

&lt;p&gt;There are a lot of people that don&amp;rsquo;t want to use Dist::Zilla for whatever particular reason. For me it&amp;rsquo;s not about Dist::Zilla, it&amp;rsquo;s about my philosophy on tools: should your personal tool choices impact mine? I like using the tools I use, if I had to use VI, I probably wouldn&amp;rsquo;t want to do much programming. If you talk to Ovid (Curtis Poe) for instance, he practically lives in VI, and if he couldn&amp;rsquo;t use it, he probably wouldn&amp;rsquo;t want to program either. So when we talk about build systems, it could be a completely different ballgame if Perl came with everything required to interact with a distribution built with Dist::Zilla, but that&amp;rsquo;s not the case.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to tell people to use Dist::Zilla or not to use it, I want people to think about (and this is the point of Mastering Perl) there are many tools available but does this tool make sense for your particular situation? There is not such thing as best practice unless you specify the context. So when we talk about whether a tool is a good thing or a bad thing, we need to have a situational context.&lt;/p&gt;

&lt;p&gt;As programmers what we really like to do is find &amp;ldquo;the one way&amp;rdquo;, even though Perl has TIMTOWTDI, we want to find the one right way to do it, and then tell everyone to do it that way (despite our disdain for Java, which often follows that approach). The Perl community version of that is &amp;ldquo;the right module&amp;rdquo;. For instance, something that just happened in the past couple of weeks, we&amp;rsquo;ve been telling people for years to use File::Slurp. It&amp;rsquo;s in the documentation, it&amp;rsquo;s in the FAQ. Every time someone asks the question &amp;ldquo;how do I read a file into a string&amp;rdquo; they&amp;rsquo;ve been told to use File::Slurp. It turns out the File::Slurp always wants to assume a particular encoding on the input file, and so slurping a file that does not follow the expected encoding, various bad things can happen. &lt;a href=&#34;https://rt.cpan.org/Ticket/Display.html?id=83126&#34;&gt;There&amp;rsquo;s a ticket&lt;/a&gt; in RT for that now, and people are saying that the module is &amp;ldquo;fundamentally broken&amp;rdquo;—there is not a way to get around it. We have been pushing this tool on people, and it&amp;rsquo;s critically broken. Is it that great? Sure it saves some typing, is a bit faster and works on some files, but is it that much better than localizing $/ and slurping the file manually? This way I have no dependency and I don&amp;rsquo;t need to go back and change anything if the module fails. It might be a tiny bit slower, but if I&amp;rsquo;m doing anything interesting (in the code), the time won&amp;rsquo;t make much difference.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As programmers what we really like to do is find &amp;ldquo;the one way&amp;rdquo; &amp;hellip; The Perl community version of that is &amp;ldquo;the right module&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Context really matters and this is why, back in the 90s I got into Perl. Perl was full of these kinds of people. One of the best people for this is Mark Jason Dominus. If you go to one of his talks, he has such a breadth of programming knowledge, he can really speak to the question of &amp;ldquo;is this a good idea?&amp;rdquo; because he&amp;rsquo;s aware of the different implementations in ML or Java or some other language most of us have never heard of, and he&amp;rsquo;s aware of the the consequences of those decisions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It seems you&amp;rsquo;re always writing something, so I&amp;rsquo;m sure you can&amp;rsquo;t keep your pen still for long. What&amp;rsquo;s next for you in terms of Perl writing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got a book I&amp;rsquo;m working on and it&amp;rsquo;s going a lot more slowly than I thought it would. I want to write a very thin book about Perl on Windows. It&amp;rsquo;s been a lot more painful than I expected. Not necessarily the writing, but just dealing with Windows. Partly because I&amp;rsquo;m not that experienced with Windows (which is one reason to write a book about something), but also it&amp;rsquo;s because Perl is from such a different universe, and I want to be true to the Perl on Windows concept (not Perl on Cygwin which is just Unix). Windows has a completely different filesystem to Unix filesystems, the metadata you can get out are different, how you name files is different and so on. I thought I could do it in two months but I&amp;rsquo;m coming up on two months and I&amp;rsquo;ve barely got through writing the first chapter, which is just about how to get Perl on Windows.&lt;/p&gt;

&lt;p&gt;Other than that, I want to do a series of experiments, to cover a topic in a short book, say 50 to 100 pages, and get some kind of crowdfunding for it. Maybe even a crowdfunding competition where the most funded project wins. The idea would be to get enough money to justify spending my time on it and I could put it out there, develop it in public and people could comment on it. Then I would make the book available on Amazon for some ridiculously low price. I would love to have books out there that are a dollar and sell ten thousand copies rather that a price of ten dollars and sell a thousand copies. I don&amp;rsquo;t really care how many sales I get, just that I get enough money to live and write the next book, that would be fantastic. I&amp;rsquo;m going to do this experiment at some point, I just have to get through this Windows book first!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a website for the Windows book, it&amp;rsquo;s &lt;a href=&#34;http://windowsperl.com&#34;&gt;WindowsPerl.com&lt;/a&gt;. There&amp;rsquo;s not much there yet, but I&amp;rsquo;m taking suggestions from people and letting them know what&amp;rsquo;s going on with the development process. I don&amp;rsquo;t know who is going to publish it yet, I have an idea, but we haven&amp;rsquo;t made a contract (but it&amp;rsquo;s not going to be O&amp;rsquo;Reilly). I&amp;rsquo;m talking about the book in the usual places so if people want to follow progress or comment, they can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there anything else your working on that you&amp;rsquo;d like to make people aware of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is one thing I have thought about for a long time and I guess I should just get off my butt and do it. For a while I&amp;rsquo;ve run the White Camel awards, it&amp;rsquo;s announced on Perl&amp;rsquo;s birthday (December 18), for outstanding non-technical achievement in Perl. We want to recognize people for doing all the stuff that no one ever remembers—things like working in the user group community, people who organize conferences and Perl monger events, people who are doing general Perl advocacy, like PerlTricks.&lt;/p&gt;

&lt;p&gt;What I want to do is create a new award, like a tangible award that they can use it to show that the community appreciates what they&amp;rsquo;ve done. And this would be for a technical achievement. I&amp;rsquo;m thinking something like a medal or I don&amp;rsquo;t know, we don&amp;rsquo;t wear lapels so if we gave out a lapel pin we&amp;rsquo;d have nothing to put it on!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve just done the Nerd Merit badges and I was thinking maybe something along that line. I don&amp;rsquo;t know quite how it would work, but every so often, I would just like the community to say that it&amp;rsquo;s time to give out another one of these awards somehow, and to decide who gets it. Like when Miyagawa released &lt;a href=&#34;http://cpanmin.us&#34;&gt;cpanminus&lt;/a&gt; it was such a ground-breaking thing, if everyone said &amp;ldquo;this person deserves an award&amp;rdquo;, and if we had some way to actually provide that award and show that we appreciate people for doing cools things, and it&amp;rsquo;s not just a pat on the back or a blog mention. It&amp;rsquo;s something tangible that they can show to their friends or whomever. I&amp;rsquo;ve thought about this for years, and I guess I should just do it, but I don&amp;rsquo;t quite know how it would work. We get so focused on algorithms, code and big ideas. But really it&amp;rsquo;s just people. The more that we can show our appreciation, the better we&amp;rsquo;ll feel, the nicer we&amp;rsquo;ll be to each other and the more we&amp;rsquo;ll be able to do together.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;[1]&lt;/sup&gt;Randal&amp;rsquo;s quote comes from &lt;a href=&#34;http://books.google.com/books?id=va1PSgaO4xIC&amp;amp;pg=PA3&amp;amp;lpg=PA3&amp;amp;dq=80%25+of+the+behavior+of+Perl+can+be+described+in+20%25+of+the+documentation&amp;amp;source=bl&amp;amp;ots=BOc7Eyc4YV&amp;amp;sig=ZEb4WZRk9eWvjk9j6PNhp_xgJOQ&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=rOcXU-mTFIyekAelkICoAQ&amp;amp;ved=0CCgQ6AEwAA#v=onepage&amp;amp;q=80%25%20of%20the%20behavior%20of%20Perl%20can%20be%20described%20in%2020%25%20of%20the%20documentation&amp;amp;f=false&#34;&gt;Learning Perl, Third Edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second edition of brian&amp;rsquo;s Mastering Perl is &lt;a href=&#34;http://www.amazon.com/gp/product/144939311X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=144939311X&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;available now&lt;/a&gt; (affiliate link).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An interview with Steven Haryanto</title>
      <link>http://localhost:1313/article/62/2014/1/24/An-interview-with-Steven-Haryanto/</link>
      <pubDate>Fri, 24 Jan 2014 03:17:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/62/2014/1/24/An-interview-with-Steven-Haryanto/</guid>
      <description>&lt;p&gt;&lt;em&gt;Steven Haryanto is a Perl programmer and &lt;a href=&#34;https://metacpan.org/author/SHARYANTO&#34;&gt;prolific CPAN author&lt;/a&gt;. We recently caught up with him to discuss his development approach and the tools he uses to be be so productive. (Steven tells us that the photo above is representative of his hometown, Bandung).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;According the recent &lt;a href=&#34;http://neilb.org/cpan-report/&#34;&gt;CPAN report&lt;/a&gt;, you made 769 releases to CPAN last year. How did you become so productive!?&lt;/strong&gt;
 For what it&amp;rsquo;s worth, I made over 900 releases in 2012, so 2013 is not *that* productive by comparison. Two things made it possible really: a dist build/release tool (I happen to use &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;) and the fact that I produce lots of mistakes/bugs :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Of those releases, is there any one in particular that stands out as a significant milestone for you?&lt;/strong&gt;
 To be honest, no. Things are going mostly incrementally nowadays, which I&amp;rsquo;m happy with. This means I haven&amp;rsquo;t needed to rewrite or redesign a module from scratch so far (well there are a couple of partial rewrites, but not very major).&lt;/p&gt;

&lt;p&gt;The overwhelming majority of modules which I publish on CPAN are those which I use by myself or for work. Currently only a few of those have been confirmed to be used by at least one other person. This includes &lt;a href=&#34;https://metacpan.org/pod/Org::Parser&#34;&gt;Org::Parser&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Data:Sah&#34;&gt;Data::Sah&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Gepok&#34;&gt;Gepok&lt;/a&gt;,&lt;a href=&#34;https://metacpan.org/pod/Data::Dump::Color&#34;&gt;Data::Dump::Color&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Progress::Any&#34;&gt;Progress::Any&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Log::Any::App&#34;&gt;Log::Any::App&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Text::ANSITable&#34;&gt;Text::ANSITable&lt;/a&gt; (only the last one was created in 2013). In 2012 I released 166 new distributions and in 2013 only 71. So 2013 was more about updates and improvements instead of creating new things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve talked in the past about &amp;ldquo;distribution oriented development&amp;rdquo;, do you still follow that approach, and why?&lt;/strong&gt;
 Yup, because making software modular keeps me from going insane, and modules and distributions are the units of modularity in Perl.&lt;/p&gt;

&lt;p&gt;Do you find developing as if you&amp;rsquo;re going to release the module forces you to follow better coding practices? (Like writing tests, documentation, error checking).&lt;/p&gt;

&lt;p&gt;Definitely. The coding practices for a Perl module and distribution are relatively established, so following them is a no-brainer. The already existing tools help too, relieving me from having to reinvent wheels.&lt;/p&gt;

&lt;p&gt;What text editor / IDE do you use to code in Perl? Why do you use that tool, have you tried others and prefer it?&lt;/p&gt;

&lt;p&gt;As some of you might know, I&amp;rsquo;m a fan of org-mode, so I&amp;rsquo;m stuck with Emacs for the time being. Not a very advanced user of both, though. I&amp;rsquo;ve also used Komodo IDE in the past, its regex debugger tool is neat. I&amp;rsquo;ve tried Padre too a while back, but due to installation issues I haven&amp;rsquo;t tried it again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Org-mode looks cool! - as a Perl developer which feature(s) of org-mode do you use the most?&lt;/strong&gt;
 Nothing Perl-specific, actually. I use org-mode like most other people (non-Perl-programmers and non-programmers alike): to organize my todo lists and to take notes. I also happen to write &lt;a href=&#34;https://metacpan.org/pod/Org::Parser&#34;&gt;Org::Parser&lt;/a&gt;, because no such module exists at the time, and this helps me create some scripts to process and summarize the Org documents which I write. For example I keep a daily statistics of the number of done/undone todo items, to record my progress. I do my time bookkeeping on an Org document using a simple, homegrown format. The todo reminder which I run from a shell startup file is also written in Perl.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also starting to use Org to write software product documentation, and later export to HTML (and then to PDF). There will probably be another CPAN module or two once the workflow is more defined.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I keep a daily statistics of the number of done/undone todo items, to record my progress&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve also mentioned use of tmux / screen. Could you explain how those terminal tools help your development?&lt;/strong&gt;
 I rarely use them these days, except when on slow and unreliable connections, which fortunately is occurring less frequently where I live. Normally Konsole suffices. But I do maintain screen sessions on servers I&amp;rsquo;m monitoring.&lt;/p&gt;

&lt;p&gt;Terminals is where I work most of the time though, so a lot of my CPAN modules are related to command-line application and terminals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your blog post (&amp;rdquo;&lt;a href=&#34;http://blogs.perl.org/users/steven_haryanto/2013/10/how-i-manage-my-perl-distributions.html&#34;&gt;How I manage my distributions&lt;/a&gt;&amp;rdquo;) you said you use Dist::Zilla to manage your distributions. Could you elaborate on how Dist::Zilla helps you be more productive?&lt;/strong&gt;
 &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; (or an equivalent tool) frees us from doing the boring and tedious parts of distribution building/releasing, allowing us to focus on writing code and encourages us to do more releases. Doing a new release can be done in a few seconds instead of a few minutes. With dozens or hundreds of distributions, it&amp;rsquo;s simply impossible to do things manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are your favourite Dist::Zilla plugins?&lt;/strong&gt;
 No one plugin in particular, perhaps &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::OurPkgVersion&#34;&gt;OurPkgVersion&lt;/a&gt; (simply because its big brother, &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::PkgVersion&#34;&gt;PkgVersion,&lt;/a&gt; modifies line numbers). &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::Run&#34;&gt;Run&lt;/a&gt; is also nifty too. But the great thing about Dist::Zilla is that when the existing plugins don&amp;rsquo;t cut it, you can simply create your own plugins to do the specific things you need. I&amp;rsquo;ve written a few myself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the great thing about Dist::Zilla is that when the existing plugins don&amp;rsquo;t cut it, you can simply create your own plugins to do the specific things you need.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Does your framework, Rinci help you with your development process?&lt;/strong&gt;
 Most certainly. Without the &lt;a href=&#34;https://metacpan.org/pod/Perinci&#34;&gt;Perinci&lt;/a&gt; tools I wouldn&amp;rsquo;t have written and released as many stuffs. They allow me to avoid or minimize doing boring and repetitive things which I hate doing, like writing POD, &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long::Spec&#34;&gt;Getopt::Long spec&lt;/a&gt;, command-line usage message, and so on. Like Dist::Zilla they let me focus on writing actual code instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use any static code analysis tools like Perl::Critic?&lt;/strong&gt;
 Currently, no. I should though. Maybe the thought of having to do lots of initial configuration and tweaking makes me put it off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re previously &lt;a href=&#34;http://blogs.perl.org/users/steven_haryanto/2012/11/the-sad-state-of-syntax-highlighting-libraries-on-cpan.html&#34;&gt;noted&lt;/a&gt; Perl&amp;rsquo;s lack of a good syntax highlighting library. Do you think that&amp;rsquo;s still the case today ?&lt;/strong&gt;
 Haven&amp;rsquo;t checked back; I even forget why I need a syntax highlighting library in the first place. I think it&amp;rsquo;s still the case and I&amp;rsquo;ve come to accept it. At least there are other tools available, not everything needs to be done in Perl. &lt;a href=&#34;https://metacpan.org/pod/PPI::HTML&#34;&gt;PPI::HTML&lt;/a&gt; is for highlighting Perl code and not other languages, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any other thought about the Perl community or development that you think people should be aware of?&lt;/strong&gt;
 Since Perl is a swiss-army knife tool, including as a shell script replacement and for writing command-line programs, I wish authors would pay more attention to startup overhead. It seems lots of prominent CPAN authors are mostly concerned only with writing pretty OO code or PSGI webapps or long-running daemons, but the truth is Perl is more than that. So I will certainly encourage and promote good lightweight alternatives of popular libraries like &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose,&lt;/a&gt; &lt;a href=&#34;https://metacpan.org/pod/DateTime&#34;&gt;DateTime,&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Log::Log4perl&#34;&gt;Log::Log4perl&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I wish authors would pay more attention to startup overhead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s next for you in terms of your development process, what are you looking forward to trying?&lt;/strong&gt;
 I will keep churning out CPAN modules to do my part in giving back to the Perl community. My current focus areas are: Indonesian-related (language/locale) modules , making bad-ass command-line programs with Perl, as well as other tools/libraries to cut back the boilerplate and emphasize the DRY principle.&lt;/p&gt;

&lt;p&gt;One project in the works is &lt;a href=&#34;http://cpanlists.org/&#34;&gt;cpanlists.org&lt;/a&gt; (not up yet), which will be a simple website and service to manage lists of authors and CPAN modules, along with comment and rating for each author/module. It&amp;rsquo;s much like an Amazon Listmania list, and I&amp;rsquo;ve blogged in the past about wanting to create something like it. I put it up mainly to publish my own notes as well as a proof-of-concept for Riap::HTTP, a protocol for a developer-friendly API service.&lt;/p&gt;

&lt;p&gt;People will be able to maintain a list of their favorite modules. This is already possible with ++ in MetaCPAN, but with MetaCPAN I can&amp;rsquo;t add notes for each module or rate each module. To rate modules one must use a separate service (&lt;a href=&#34;http://cpanratings.perl.org/&#34;&gt;CPAN Ratings&lt;/a&gt;). Also I want to create multiple lists aside from a single favorites list, for example: list of recommended modules to do X (e.g. logging or convert Markdown to POD), list of modules to avoid because of X (e.g. heavy startup overhead, high number of bugs), and so on.&lt;/p&gt;

&lt;p&gt;When lots of people create their lists, this will help users evaluate and choose the right CPAN modules for their needs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An interview with Peteris Krumins</title>
      <link>http://localhost:1313/article/54/2013/12/18/An-interview-with-Peteris-Krumins/</link>
      <pubDate>Wed, 18 Dec 2013 03:47:38 +0000</pubDate>
      
      <guid>http://localhost:1313/article/54/2013/12/18/An-interview-with-Peteris-Krumins/</guid>
      <description>&lt;p&gt;&lt;em&gt;Peteris Krumins is a Perl author, start-up founder and all-around hacker. He also runs the popular blog CatOnMat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re a really busy guy; running catonmat, Browserling and publishing books. What&amp;rsquo;s your secret?&lt;/strong&gt;
 I just work like crazy. It&amp;rsquo;s pretty much all I do! I&amp;rsquo;m a list person; one of my recent posts on catonmat was about how I work: I use Google Calendar to track the most important tasks; interviews, payments, important events, that kind of thing. Then I also use to-do lists, actually several to-do lists for each one of my projects - &lt;a href=&#34;http://www.browserling.com&#34;&gt;Browserling&lt;/a&gt;, &lt;a href=&#34;%0Ahttp://www.testling.com&#34;&gt;Testling&lt;/a&gt;, books, blog posts, a reading list, stuff like that. &lt;a href=&#34;http://www.catonmat.net/images/codeproject-interview/todo-list.jpg&#34;&gt;Here is an example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We&amp;rsquo;re talking because you&amp;rsquo;re famous for writing one liners in Perl. How did you get into that?&lt;/strong&gt;
 So there was this guy, Eric Pement and he collected hundreds of Awk one liners in this file &amp;ldquo;&lt;a href=&#34;http://www.pement.org/awk/awk1line.txt&#34;&gt;awk1line.txt&lt;/a&gt;&amp;rdquo; and he published it on UseNet, like 10 years ago. So I found his file and it was really interesting. I went through all of his one liners and learned Awk. Then I found that he had done the same thing for Sed (&lt;a href=&#34;http://www.pement.org/sed/sed1line.txt&#34;&gt;sed1line.txt&lt;/a&gt;) and I went through that and learned Sed. So that inspired me to create my own file for Perl, &lt;a href=&#34;http://www.catonmat.net/download/perl1line.txt&#34;&gt;perl1line.txt&lt;/a&gt; and it started from there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I read that that your post &amp;ldquo;Perl One Liners Explained&amp;rdquo; has something like 500,000 hits?&lt;/strong&gt;
 It&amp;rsquo;s an article series made out of eight separate posts. It&amp;rsquo;s actually more like 800,000 now for all posts combined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wow! Was that an outlier for you, did it make you think there was a lot of interest in this topic?&lt;/strong&gt;
 Well I had already written perl1line.txt by then. I wrote eight blog posts following the structure used by Eric Pement in his files; for example he had a section called &amp;ldquo;How to do line spacing in Awk&amp;rdquo;, so I wrote one post called &amp;ldquo;How to do line spacing with Perl one liners&amp;rdquo; and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your Perl One Liners book was originally self-published, then picked up by No Starch Press. How did that happen?&lt;/strong&gt;
 It was amazing. I just got an email from Bill, who runs No Starch Press and he asked me if I wanted to turn my self-published book into a real book. And I said &amp;ldquo;yeah!&amp;rdquo; and we got it published. Here&amp;rsquo;s the result - &lt;a href=&#34;http://nostarch.com/perloneliners&#34;&gt;Perl One Liners book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The new No Starch Press version has 30+ more pages of content, did No Starch help you with that?&lt;/strong&gt;
 Yes, we took the original text and improved it mainly by adding more examples. We added examples for most of the one liners. And we also added a section about running Perl on Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wanted to ask you about that. That seemed like a topic that hasn&amp;rsquo;t been well-covered elsewhere?&lt;/strong&gt;
 It was really hard to write. I had to test all of the one liners on PowerShell and the command line (cmd.exe) to make sure they worked, find all of the workarounds, handle special symbols, it was very challenging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Was that a section that No Starch Press encouraged?&lt;/strong&gt;
 Not really. I run Windows as well, it&amp;rsquo;s my primary workstation although I do have a bunch of Linux servers which I ssh into. Sometimes I need to run Perl one liners on Windows, so I thought a lot of my readers would be interested in how to run the one liners on Windows as well. We spent about a month on that section, it delayed the book for about a month and a half, because of it. It was very challenging and hard to write but it should help a lot of Windows users as it&amp;rsquo;s probably the best guide to running Perl from the command line on Windows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought a lot of my readers would be interested in how to run the one liners on Windows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Would you still use Unix tools over PowerShell on a Windows?&lt;/strong&gt;
 Well, I run Windows XP and don&amp;rsquo;t have PowerShell. I use Cygwin, but sometimes when I don&amp;rsquo;t want to use that, I just run bash.exe from &lt;a href=&#34;http://win-bash.sourceforge.net/&#34;&gt;win-bash&lt;/a&gt;. My setup is that I have Linux server mounted through Samba as a virtual drive. So if I have to do serious editing, I throw the file onto the shared drive and shh into my Linux server, so I don&amp;rsquo;t need to use the Linux tools on Windows that much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your book is full of interesting command line shortcuts and hidden features. Do you have a favourite one liner or code trick in Perl?&lt;/strong&gt;
 I love one liners that are like puzzles - you can&amp;rsquo;t understand them just by looking at them. You have to tinker around and try them out to see what it does. For example a regular expression like: &amp;ldquo;/[ -~]/&amp;rdquo; is fun, which matches every printable ASCII character from space to tilde.&lt;/p&gt;

&lt;p&gt;Another one liner which I like because it has no code in it is: &amp;ldquo;perl -00pe0&amp;rdquo;, for paragraph slurping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how did you find out about that? I don&amp;rsquo;t think it&amp;rsquo;s even documented in perlrun.&lt;/strong&gt;
 I don&amp;rsquo;t know how I came up with this one. I remember something about being on the #perl freenode IRC channel. When I was writing the book I was often on there asking people for advice. Maybe someone told me about it or I found it myself, but it&amp;rsquo;s fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve also written about Sed and Awk. If you know Perl one liners, do you need to learn Sed or Awk as well?&lt;/strong&gt;
 No, you don&amp;rsquo;t. But sometimes when you write a Perl one liner the equivalent one liner in Awk / Sed would be shorter. For example to reference the fifth word on a line in Awk it&amp;rsquo;s &amp;ldquo;$5&amp;rdquo; but in Perl it&amp;rsquo;s &amp;ldquo;$F[4]&amp;ldquo;, besides you&amp;rsquo;d have to turn on autosplitting and use a bunch of other command line arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What text editor / IDE do you use to code in Perl?&lt;/strong&gt;
 I use Vim. I have a bunch of customizations and shortcuts that I use. I have an article series on my site called &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/series/vim-plugins-you-should-know-about&#34;&gt;Vim plugins you should know about&lt;/a&gt;&amp;rdquo; that covers this. One of my favourite plugins is &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-surround-vim/&#34;&gt;surround.vim&lt;/a&gt;&amp;rdquo; - if you have a single-quoted string and want to change them to double-quotes, you type: cs&amp;rsquo;&amp;rdquo; and it will change them. You can change parentheses and many other things that surround something. Another plugin I like is &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-matchit-vim/&#34;&gt;matchit.vim&lt;/a&gt;&amp;rdquo;, which extends the shift + F5 (%) parenthesis matching in Vim to match HTML tags and if/then/else statements and other constructs. Some of my other favorites are &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-snipmate-vim/%0A&#34;&gt;snipmate.vim&lt;/a&gt;&amp;rdquo; for code snippets, &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-ragtag-allml-vim/&#34;&gt;ragtag.vim&lt;/a&gt;&amp;rdquo; for working with HTML tags and &amp;ldquo;&lt;a href=&#34;http://www.catonmat.net/blog/vim-plugins-nerdtree-vim/&#34;&gt;nerd_tree.vim&lt;/a&gt;&amp;rdquo; for browsing files in vim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about color schemes, do you have a favourite?&lt;/strong&gt;
 I don&amp;rsquo;t really care about color schemes - Vim does color the code but I don&amp;rsquo;t change it. I also don&amp;rsquo;t care about programming fonts. The font just have to be constant width and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;ve also written about EMACS before. Why do you stick with Vim over other tools?&lt;/strong&gt;
 I was working at this company once and I thought that from day one I would use EMACS (as a way of learning it) and see how it goes. After a few weeks I went back to Vim. I had to learn so many new key combinations it was hurting my productivity.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m programming in C and C++, I use Visual Studio. The best thing about using Visual Studio is if I forget a command or method, I can quickly look it up using IntelliSense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apart from one liners, do you develop Perl applications or modules?&lt;/strong&gt;
 Perl is my preferred programming language for writing quick tools, for example: uploading / downloading videos from YouTube, or parsing HTML pages. I&amp;rsquo;m incredibly fast at that and there are so many modules that can help - I wouldn&amp;rsquo;t be able to be that productive in other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you used any Perl code analysis tools like Perl::Critic ?&lt;/strong&gt;
 I have used &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; but I don&amp;rsquo;t like it when someone criticizes my code! (even if it&amp;rsquo;s from Damian Conway&amp;rsquo;s Perl best practices book!) I just write sane code and apply most of the best practices. Other people usually don&amp;rsquo;t have problems with my code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have used Perl::Critic but I don&amp;rsquo;t like it when someone criticizes my code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re a real polyglot as apart from Perl, your Github page hosts projects in C++, JavaScript, Python, OCaml, PHP! Are there any features of those languages would you like to see in Perl?&lt;/strong&gt;
 It&amp;rsquo;s hard to take a feature from another language and put it into Perl as it&amp;rsquo;s already very expressive and supports many different programming paradigms. I often get asked this, but I don&amp;rsquo;t have a good answer! I&amp;rsquo;m very productive with Perl as it is, whereas I could definitely name features of Perl that I would like to see in other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about Perl versions, do you keep up to date?&lt;/strong&gt;
 Yeah, right now I&amp;rsquo;m using Perl 5.18 and that&amp;rsquo;s all thanks to &lt;a href=&#34;http://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt;. I remember a few years ago before I knew about Perlbrew it was huge pain to have several different Perl versions and I always had the system Perl and maybe one local version of Perl. Managing packages was a pain, too. Once I found out about Perlbrew, I installed every version of Perl, going back to 5.6. One cool feature is &amp;ldquo;perlbrew exec&amp;rdquo; which I used to test my one liners against every version of Perl to see which ones work and don&amp;rsquo;t.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m using Perl 5.18 and that&amp;rsquo;s all thanks to Perlbrew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What are your favourite Perl modules and tools?&lt;/strong&gt;
 I really like &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; for better exception handling, &lt;a href=&#34;https://metacpan.org/pod/File::Slurp&#34;&gt;File::Slurp&lt;/a&gt; for quickly working with files, &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt; and [](https://metacpan.org/pod/HTML::TreeBuilder)HTML::TreeBuilder for scraping the web.&lt;/p&gt;

&lt;p&gt;Talking about tools I also like &lt;a href=&#34;https://metacpan.org/pod/Regexp::Debugger&#34;&gt;rxrx&lt;/a&gt; by Damian Conway (&lt;a href=&#34;http://www.youtube.com/watch?v=zcSFIUiMgAs&#34;&gt;here&amp;rsquo;s a demo at YAPC&lt;/a&gt;). It&amp;rsquo;s this interactive regexp debugger. Another tool that I use is &lt;a href=&#34;http://beyondgrep.com/&#34;&gt;ack&lt;/a&gt; that&amp;rsquo;s a better version of grep!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And one last final question - what is it that you&amp;rsquo;re doing in your profile picture? Making a cigarette?&lt;/strong&gt;
 Haha, no! I&amp;rsquo;m actually holding a piece of scotch tape. I was making a raft that day from empty bottles so I was taping them together. It turned out to be a really good raft and it worked. &lt;a href=&#34;%0Ahttp://www.flickr.com/photos/pkrumins/11391256906/&#34;&gt;Here&amp;rsquo;s a photo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> An interview with Jeffrey Ryan Thalhammer</title>
      <link>http://localhost:1313/article/51/2013/12/5/-An-interview-with-Jeffrey-Ryan-Thalhammer/</link>
      <pubDate>Thu, 05 Dec 2013 04:55:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/51/2013/12/5/-An-interview-with-Jeffrey-Ryan-Thalhammer/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Jeffrey Ryan Thalhammer is the creator of &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Pinto&#34;&gt;Pinto&lt;/a&gt; and now &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; - a cloud based service that securely hosts custom repositories of Perl modules. We caught up with Jeffrey to get the latest Stratopan news and learn the tools, tricks and techniques he uses to code in Perl.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all how&amp;rsquo;s the Stratopan beta going?&lt;/strong&gt;
 Very, very well it has been up 3 weeks now and we just crossed 500 users, so I&amp;rsquo;m very happy about that. About half of those people have created repositories and are using the tool in a meaningful way, which is about what I would expect. Right now we&amp;rsquo;ve had a lot of good feedback, people have found bugs and requested enhancements so I&amp;rsquo;m sitting back and letting that stuff come in. Once I have a pool of information about what&amp;rsquo;s important to people then we&amp;rsquo;ll start prioritizing and chipping away at it. I want to move the product towards being commercially viable, that&amp;rsquo;s the next big milestone, making &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; something we can charge an enterprise a few bucks a month to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So apart from the feedback you&amp;rsquo;ve received from the beta, do you consider Stratopan feature complete?&lt;/strong&gt;
 Oh definitely not! Right now it&amp;rsquo;s a minimal viable product. It does just enough to be useful - you can create a repository in the cloud, and that&amp;rsquo;s about it (although that is about seventy-five percent of the value). The other twenty-five percent are the features that you need to make it a viable business. This means collaboration features, so you can control who can read and write to the repository rather than it just being controlled by a single owner. We need to have more of the &lt;a href=&#34;https://metacpan.org/pod/Pinto&#34;&gt;Pinto&lt;/a&gt; features exposed: pinning distributions, merging stacks and stuff like that. An API would be a killer feature because people could build their own ideas on top of Stratopan, automating it and interacting with it in clever ways. So there is a long way to go to be feature complete!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have a preferred development methodology?&lt;/strong&gt;
 I aspire to Test Driven Development, but I don&amp;rsquo;t always start out that way. It takes a while for me to build up enough of a framework to where I feel like I know what to test and how to test and the tests are cheap enough to make. Once I get that framework in place, I&amp;rsquo;m fairly good about being test driven and using some kind of test first approach. But until I get to that point I&amp;rsquo;m more exploratory and don&amp;rsquo;t bother with the testing until I have some concrete code to work with. Stratopan is making that transition right now. It&amp;rsquo;s going from an ad hoc test suite to something using &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt; so the tests are very cheap to perform now and I can be more test driven at a lower cost than I would have been 6 months ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about text editor or IDE, what&amp;rsquo;s your tool of choice to code in Perl?&lt;/strong&gt;
 I have become a &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; user in the past couple of years. I really like it. I had been using EMACS for a long time, but I never mastered it. You can spend a lifetime mastering EMACS and Vi. I even went and bought the official GNU manual for EMACS and even that didn&amp;rsquo;t help me much. EMACS is kind of cryptic and I didn&amp;rsquo;t want to bother learning Lisp - I have enough things in my head, I didn&amp;rsquo;t want to bother with that. So I got frustrated with EMACS and switched to &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; and I love it. It does everything I want it to do and for me, extending it with Python is much easier than writing LISP for EMACS ever was.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I didn&amp;rsquo;t want to bother learning Lisp - I have enough things in my head&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Doesn&amp;rsquo;t Sublime Text run as an application? Do you have easy access to the command line from Sublime Text?&lt;/strong&gt;
 You probably do, although my mode of operating is I&amp;rsquo;ll have a terminal window and a text editor on the desktop at all times. So I flip between the two and many of the things I would use the command line for, I do directly in &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. For example there&amp;rsquo;s a hook (in Sublime Text) to do commits with Git, which I could do on the command line but is just a couple of keystrokes in &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. All the other tools (EMACS, Vi etc) will do that too, so I don&amp;rsquo;t mean to suggest that those features aren&amp;rsquo;t there, just that they&amp;rsquo;re more accessible to me in &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What OS do you primarily code in?&lt;/strong&gt;
 I&amp;rsquo;m on a very old Mac laptop running OSX Lion, it&amp;rsquo;s about six years old now, time for me to upgrade. It&amp;rsquo;s quite a bit slower than my wife&amp;rsquo;s machine which is newer. I think &amp;ldquo;Daddy needs a new toy&amp;rdquo; for Christmas!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you find any compatibility issues with using Perl on OSX?&lt;/strong&gt;
 Occasionally I&amp;rsquo;ll find a difference between OSX and a Linux distribution I have to deploy on. Building modules with C dependencies has gotten a lot easier with &lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt; which is a community package manager for OSX. With &lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt; it&amp;rsquo;s easy to go out and get those C libraries. I&amp;rsquo;ve noticed that some CPAN authors are shipping their modules on CPAN with the C libraries wired into them (somehow). The most recent one I noticed was &lt;a href=&#34;https://metacpan.org/pod/Git::Raw&#34;&gt;Git::Raw&lt;/a&gt; which is the Perl bindings on top of the libgit2. So when you install https://metacpan.org/pod/Git::Raw, it builds the libgit2 C libraries for you and you don&amp;#39;t have to go out and fetch anything extra. It&amp;#39;s sort of how I figured things should always have been done, I don&amp;#39;t know how people survived in the old days when you had to go track libraries down and build them by hand. That feels very awkward to me but I guess I&amp;#39;m lazy now. I want to push a button and install a module with the same simplicity with which I would install an app on my phone. I hope [Stratopan](https://stratopan.com/) (in some way) moves us towards that goal; by fixing idiosyncrasies on &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;, a user can just point their installer at their repository and not think about configuration at all.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to push a button and install a module with the same simplicity with which I would install an app on my phone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What tools do you use to create modules?&lt;/strong&gt;
 I used to do it all by hand but about two or three years ago I started using &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;. Before that I had made my own &amp;ldquo;module-starter&amp;rdquo; style kits a couple of times. I absolutely love &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;; you can open up an editor make a few changes and fire it off to CPAN. &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; handles that process beautifully and I don&amp;rsquo;t travel without it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about Perl::Critic, do you integrate that with Dist::Zilla, do you use it much?&lt;/strong&gt;
 I do use &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt;; it has been my bread and butter for so long. I don&amp;rsquo;t use it in quite the same way as I used to though. Earlier I was very hardcore and draconian. I wanted everything to be compliant and follow all of the &lt;a href=&#34;http://shop.oreilly.com/product/9780596001735.do&#34;&gt;best practices&lt;/a&gt; that Damian Conway recommended. I&amp;rsquo;m more relaxed now and prefer a loose configuration and don&amp;rsquo;t require that all the code complies with &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; before I ship it. I do use &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; periodically to make sure that I haven&amp;rsquo;t completely gone off the rails!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you use Perl::Critic when working in teams, or maybe as a requirement for accepting pull requests?&lt;/strong&gt;
 When there&amp;rsquo;s a pull request I&amp;rsquo;ll &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; on it just to see if anything pops out. It&amp;rsquo;s much less of a problem now because I only look for the really egregious problems and don&amp;rsquo;t get caught up on lower-level style issues. I find that over time I tend to transmogrify other people&amp;rsquo;s pull requests into my own interpretation of their code. My brain is already wired to write code the way &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; expects it. I&amp;rsquo;ve been using it for so long that for me, it&amp;rsquo;s automatic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about any other supporting tools, do you tie them into your Dist::Zilla process?&lt;/strong&gt;
 Podchecker is definitely tied in with &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt;, there&amp;rsquo;s a test that verifies all the POD is syntactically correct. For tidying there&amp;rsquo;s a tool that Jonathan Schwartz wrote called &lt;a href=&#34;https://metacpan.org/pod/Code::TidyAll&#34;&gt;Code::TidyAll&lt;/a&gt;. It&amp;rsquo;s kind of a wrapper on Perl::Tidy, &lt;a href=&#34;https://metacpan.org/pod/HTML::Tidy&#34;&gt;HTML::Tidy&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and you can plug in other kinds of linters to it. So for me it&amp;rsquo;s one command to rule them all - it runs all of the pre-commit analysis and tidier tools in one shot. It&amp;rsquo;s also smart - &lt;a href=&#34;https://metacpan.org/pod/Code::TidyAll&#34;&gt;Code::TidyAll&lt;/a&gt; tracks changes and won&amp;rsquo;t re-run a process on a file that hasn&amp;rsquo;t changed since the previous iteration, so that makes it a lot faster. I like it a lot!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code::TidyAll&amp;hellip;for me it&amp;rsquo;s one command to rule them all&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;In a &lt;a href=&#34;http://www.theperlreview.com/Interviews/jeff-thalhammer-201310.html&#34;&gt;previous interview&lt;/a&gt; you mentioned working with Objective-C. Are there any development tools from other languages such as Objective-C that you&amp;rsquo;d like to see incorporated into the Perl toolchain?&lt;/strong&gt;
 What I like about Objective-C is that Apple provides a comprehensive and consistent framework. For example there is a complete and consistent feature set for managing files - a pretty ordinary task. But if you want to do that with Perl, there are 3 or 4 different libraries you have to load in order to create paths, move files recursively, things like that. And the Perl libraries are all written by different authors, with different interfaces and styles. It&amp;rsquo;s bothersome to me that there is this inconsistency. But on the the other hand I have learned to accept it because that is the nature of Perl. It&amp;rsquo;s a conglomeration of different ideas. It&amp;rsquo;s never going to be like Cocoa (an Apple framework), which is mastermind by a single entity with the resources to enforce a consistent API and architecture across all of their libraries. To answer the question, I wish there was more consistency in the standard Perl library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few months back you highlighted a business opportunity (&lt;a href=&#34;http://blogs.perl.org/users/jeff_thalhammer1/2013/07/development-tools-as-services-are-a-cash-crop.html&#34;&gt;&amp;ldquo;Development Tools-As-Services Are A Cash Crop&amp;rdquo;&lt;/a&gt;) - has your view changed since then?&lt;/strong&gt;
 There is a big boom in San Francisco right now in software-as-a-service analytics for web applications. Companies like New Relic and AppDynamics provide these services for monitoring a web application from the browser all the way down to the database. They track how long things take and identify bottlenecks, potential bugs and correlate different types of events so you can track down hard-to-find bugs. None of these types of services exist for Perl right now. You have to hand-roll a solution yourself. These are actually lucrative businesses right and I wish Perl had those things. It&amp;rsquo;s possible if someone had the courage to port those existing frameworks (New Relic and AppDynamics) to Perl but the economics aren&amp;rsquo;t there for the companies running those applications in order for them to do it themselves. I still feel strongly about this. &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; could be a implemented as software-as-a-service. Similar tools have emerged for Ruby and I think we&amp;rsquo;ll see them in other languages. There are tools for analyzing code: static analyis, complexity analysis, security analysis etc. All of these things are valuable services and legitimate businesses. When I put up PerlCritic.com I didn&amp;rsquo;t have the vision to do that. I would love to do it now or see someone else in the community do it because Perl certainly has the tools and capabilities. It&amp;rsquo;s just a matter of taking the risk to try and construct a business around it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s change gears - where do you go for support when you have a thorny Perl problem?&lt;/strong&gt;
 I&amp;rsquo;ve become better at using IRC because like all programmers I&amp;rsquo;m kind of impatient and so when I ask a question I want to get it in front of as many eyeballs as possible. I used to use Perl Monks but although I like writing, I write very slowly. So whenever I want to post something on Perl Monks or in general it takes me a really long time to come up with something that I feel is adequate. Whereas on IRC I can just spout something out - it rolls off the tongue easier and there&amp;rsquo;s no pressure to be grammatically correct so that works for me. Posting things requires more effort and mindfulness on my part (so I don&amp;rsquo;t do it as often). On IRC I am always dialled into the #Moose, #PerlQA and #MetaCPAN channels and I&amp;rsquo;m usually on #Pinto and #PerlHelp channels as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;on IRC I can just spout something out - it rolls off the tongue easier and there&amp;rsquo;s no pressure to be grammatically correct so that works for me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Do you have a favourite trick or code syntax feature in Perl (perhaps that isn&amp;rsquo;t possible in other languages)?&lt;/strong&gt;
 Can&amp;rsquo;t say for sure if this is not available in other languages, but I love the modulino pattern. I think the term was coined by brian d foy. Take what you would normally write as a script for example a utility program. Instead of writing the program procedurally with one statement after the other in a script format you wrap it into a module that you can execute. You can load the module and perform tests on it and at the same time you can execute it as a script and use it for work. I really like that. One-liners in general I think, are lot of fun in Perl. No other language I think has quite as much expressiveness at the command line. There is a twitter feed of perl one liners (&lt;a href=&#34;https://twitter.com/perloneliner&#34;&gt;@perloneliner&lt;/a&gt;) and I subscribe to that. I like to get one or two tweets a week from @perloneliner that give me new ideas and show me things that I didn&amp;rsquo;t even know Perl could do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No other language I think has quite as much expressiveness at the command line&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Were you at that recent Perl event at Craiglist&amp;rsquo;s offices in San Francisco where Larry made an appearance?&lt;/strong&gt;
 I was there and Larry and I had a couple of beers afterwards. He told me all about what&amp;rsquo;s been going on with Perl 6 and I asked him about the grammars as I&amp;rsquo;m interested in Perl 6 from a static analysis perspective. I wanted to know if I was going to write &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; for Perl 6, what would it look like? One of the challenges with Perl 5 is that only Perl 5 could parse Perl 5 and that&amp;rsquo;s still true today. PPI took a long time to develop and it&amp;rsquo;s still only an approximation, a best guess of how to parse Perl 5. So I was hopeful that Perl 6 would have a formal grammar and some kind of abstract syntax tree that can be accessed or manipulated. It sounds like it&amp;rsquo;s mostly going to have that with some things that can only be figured out at runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perl 6 is a next-generation language, it feels like they&amp;rsquo;re aiming to be able to do everything in Perl 6 &amp;hellip;&lt;/strong&gt;
 It&amp;rsquo;s way beyond me. Perl 6 is starting to feel real, much more than it has in past years. I think the Perl 6 team have done a lot of work in the past few years and Rakudo has come a long way. It&amp;rsquo;s possible, I don&amp;rsquo;t want to make any predictions, but it&amp;rsquo;s possible that we&amp;rsquo;re on the cusp of something really wonderful there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry mentioned he was working on a new book, the equivalent of the Camel book but for Perl 6?&lt;/strong&gt;
 Right; I think that will be a big milestone for the language (having a comprehensive manual). It could be a real turning point. Larry and I were talking about whether or not O&amp;rsquo;Reilly would publish it - I think it would be really cool to see O&amp;rsquo;Reilly publish the book.&lt;/p&gt;

&lt;h3 id=&#34;additional-information-and-links&#34;&gt;Additional information and links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jeffrey uses &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; to code in Perl.&lt;/li&gt;
&lt;li&gt;He uses &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; for crafting modules &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; has a &lt;a href=&#34;http://dzil.org/&#34;&gt;website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeffrey relies on &lt;a href=&#34;https://metacpan.org/pod/Code::TidyAll&#34;&gt;Code::TidyAll&lt;/a&gt; to run all his linting processes (&amp;ldquo;one command to rule them all&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt; helps him manage C libraries on OSX.&lt;/li&gt;
&lt;li&gt;He is the author of &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; a static code analysis for Perl. The online version is &lt;a href=&#34;http://perlcritic.com/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeffrey is currently working on &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;; sign up before December 15th to get a free account for life. Stratopan is based on Jeffrey&amp;rsquo;s Perl application, &lt;a href=&#34;https://metacpan.org/pod/release/THALJEF/Pinto-0.092/bin/pinto&#34;&gt;Pinto&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;He follows &lt;a href=&#34;https://twitter.com/perloneliner&#34;&gt;@perloneliner&lt;/a&gt; on Twitter - you should too!&lt;/li&gt;
&lt;li&gt;brian d foy&amp;rsquo;s modulino concept is covered in his book &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001527/ch18.html&#34;&gt;Mastering Perl&lt;/a&gt; (O&amp;rsquo;Reilly preview of the upcoming second edition).&lt;/li&gt;
&lt;li&gt;Larry shows up at the end of Mike Friedman&amp;rsquo;s excellent MongoDB talk at Craiglist (&lt;a href=&#34;https://archive.org/details/mikefriedmanbuildingyourfirstappwithmongodbandperl&#34;&gt;video&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;You can find out more about Perl 6 at their &lt;a href=&#34;http://perl6.org/&#34;&gt;official website&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Carl Mäsak</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</link>
      <pubDate>Tue, 31 Aug 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</guid>
      <description>&lt;p&gt;Carl Mäsak is a developer of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt; and arguably the most dedicated bug wrangler. He&amp;rsquo;s contributed to more bug reports than anyone else. If you find that Rakudo does not do as you expect, you&amp;rsquo;ll likely talk to him on #perl6 for help triaging and categorizing your bug.&lt;/p&gt;

&lt;p&gt;In his own words, here&amp;rsquo;s how he&amp;rsquo;s helped make Perl 6 real.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent my teens learning programming by writing hundreds of small graphical games in BASIC. A combination of university studies and employment has given me a more solid foundation in programming, but I&amp;rsquo;m still catching up on the theory in many places.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helping bring it from the world of ideas into the world of implementations. As part of that, helping build up all the things around the implementations: libraries, tooling, documentation, culture. Making Perl 6 practically usable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got pulled in during the early Pugs days in 2005, but only staying on the outskirts of the community. I saw with regret how the Pugs development slowed and stopped during 2007, and with growing excitement how the Rakudo development got going in 2008. My real entrance as a contributor was that summer, when I secretly co-wrote &lt;a href=&#34;http://november-wiki.org/&#34;&gt;a wiki engine on top of Rakudo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A wiki engine (November), a 3-d connection game (&lt;a href=&#34;http://github.com/masak/druid/&#34;&gt;Druid&lt;/a&gt;), a Perl 6 project installer (&lt;a href=&#34;http://github.com/masak/proto/&#34;&gt;proto&lt;/a&gt;), a set of web development modules (&lt;a href=&#34;http://github.com/masak/web/&#34;&gt;Web.pm&lt;/a&gt;), a grammar engine (&lt;a href=&#34;http://github.com/masak/gge/&#34;&gt;GGE&lt;/a&gt;), and a dozen smaller modules and projects.&lt;/p&gt;

&lt;p&gt;I also occasionally contribute commits to Rakudo, to the Perl 6 specification, and I regularly blog about the progress and culture of Perl 6. My biggest single contribution is probably submitting hundreds of Rakudo bugs that I or others have found in the course of using Rakudo Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just remember being awed by the visionary tone and promise of the Apocalypses as they were rolled out. I no longer have any memory of like one particular feature more than the others. Since I program more in Perl 6 than in any other language nowadays, I tend to take them for granted. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the new regex/grammar features will be so attractive that other languages won&amp;rsquo;t be able to keep their grubby hands off them. Of course, they also won&amp;rsquo;t get the pervasiveness of regexes and grammars just by tacking them onto an existing language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primarily the extremely low amounts of vandalism, considering that hundreds of people have write access to the documents which specify the language itself. Accidental damage is also often quickly corrected, and more subtle errors get discovered and corrected in a wiki-like manner in the long term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also gained a new respect for what a &amp;ldquo;holistic&amp;rdquo; process the design of a language such as Perl 6 can be sometimes. Whether some feature turns out to be a good idea is determined by dozens of minute interactions in the spec, not all of them &amp;ldquo;local&amp;rdquo;, and some of them outright emergent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hard way. :-) By trying to express every new thought I have and seeing what fails: Perl 6, Rakudo, or my thought. I&amp;rsquo;m still learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come to &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt;. Familiarize yourself with &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;. Get a pet project. Experiment. Have fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not qualified to fully answer that. The one piece of the puzzle I do have is that some pieces of software out there are stale and dead, whereas others are limber, extensible and moving. It&amp;rsquo;s important to design for the eventuality that the user of the language knows best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A number of small, sometimes contradictory criteria. It gets the job done. It&amp;rsquo;s down-to-earth rather than abstraction-laden. It&amp;rsquo;s practical rather than orthogonal. It&amp;rsquo;s often consistent in strange and unexpected ways. It favours you rather than the compiler implementor. It goes an extra mile to be user friendly rather than cryptic. It doesn&amp;rsquo;t oversimplify. It encapsulates some linguistic notion. It scales with your needs. It&amp;rsquo;s as much about language culture as it is about language implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sub/method signatures, the type system, grammars, extending the language, the metamodel&amp;hellip; all of these make things that were possible but tricky or ugly before downright easy or beautiful. Perl 5 can do a whole lot of the above things using modules, but with Perl 6 you get them out-of-the-box, and fully integrated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most await before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to more speed and stability in the existing implementations, mostly in Rakudo. I think excellent database and web support will create great changes in the way Perl 6 is used and presented.&lt;/p&gt;

&lt;p&gt;As for actual features, I&amp;rsquo;m excited that &lt;a href=&#34;http://perlcabal.org/syn/S09.html&#34;&gt;Synopsis 9&lt;/a&gt; might be mostly implemented this year—it contains a lot of exciting syntactic sugar.&lt;/p&gt;

&lt;p&gt;Also very much looking forward to playing with macros—I&amp;rsquo;ve been waiting five years for them now! :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m delighted that what drives Rakudo development and makes it efficient is the fact that the group of people organized around it are able to communicate their needs and abilities, able to delegate as well as do large chunks of work in isolation as called for by the situation. I&amp;rsquo;m thinking of Patrick when I say that, but I see those traits in others as well.&lt;/p&gt;

&lt;p&gt;It also doesn&amp;rsquo;t hurt that those of us involved in development form an increasingly knit-together group of people who enjoy each other&amp;rsquo;s company, not only on IRC but away from the keyboard as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the time before it gets the obvious the-more-the-better features— stability and speed—what Rakudo needs most is people who are brave enough to deploy it in new and interesting situations. It is still the case that when we try new things with Rakudo, we discover new bugs and corner cases, and as a result the whole development process benefits. So we need people who want to break new ground.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you mean the name, there&amp;rsquo;s no consensus yet. Suggestions welcome. All we agree on is that Rakudo Nova might not fly, Rakudo Neutron Star sounds a bit heavy, and Rakudo Black Hole would kinda suck.&lt;/p&gt;

&lt;p&gt;As for what features come next after Rakudo Star, I think an important part of the development after the Rakudo Star release will be to get feedback from people who use it, in order to know better what to focus on next. I know the core devs have some ideas, but there&amp;rsquo;s also room for course corrections. Whether the next distribution release will be after half a year, a full year, or some other timespan, depends a lot on that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A future version of Perl 6 the specification? The mind boggles. I think I don&amp;rsquo;t have any further demands on the specification than what we already have in there. I&amp;rsquo;m fully occupied trying to think up ways to abuse the features from the current spec as they come online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to agree that the #perl6 channel on freenode is a generally friendly place. It&amp;rsquo;s at least partly the result of conscious effort. On the &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;perl6-* emailing lists&lt;/a&gt; you will at times see the most informative and friendly RTFM emails you&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s still an open question for me is how these community features will scale, as the ratio of newbies to regulars skyrockets, as the frequently asked questions become more frequent, and as Perl 6 enters an &amp;ldquo;Eternal September&amp;rdquo; phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tend to get involved in the discussion about them. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear in retrospect that we should have started both Rakudo and Pugs in 2001, not years later. Of course, we had neither the knowledge we do today, nor the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being curious about Perl 6, by writing their first little script, by finding a module (new or extant) to work on, by reporting bugs or proposing enchancements in Rakudo or the various projects, by bringing interesting discussions to the channel, by interacting with the community, and by being nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most misconceptions seem to me to be merely the result of a deplorable lack of correct information, mixed with blindly cargo-culted mockery.&lt;/p&gt;

&lt;p&gt;Some people seem to think that working on a language design for ten years, adapting it both to new ideas and to the feedback from implementations, in itself qualifies as a failure of some sort. I see a language growing both more real and more realistic every day.&lt;/p&gt;

&lt;p&gt;Some people haven&amp;rsquo;t been reached by the news that we actually have runnable implementations of Perl 6, and have had so for the past five years. Those people usually become very happy to hear that we do.&lt;/p&gt;

&lt;p&gt;Others consider the Perl 6 effort as &amp;ldquo;merely an academic effort&amp;rdquo;, whose purpose will in the end only be to inform Perl 5 in certain ways, and whose ivory-tower denizens will never truly reconnect with reality. This is the only misconception that I, having written dozens of Perl 6 modules which actually run, and having as my focus making Perl 6 more practically usable, can sometimes feel saddened by.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nearly all of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carl and other Perl 6 developers are hard at work on both the Perl 6 specification as well as the Rakudo Perl 6 implementation. &lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.08&#34;&gt;Rakudo Star 2010.08 is now available&lt;/a&gt;, with better performance, fewer bugs, and more features.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Jonathan Worthington</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</link>
      <pubDate>Wed, 11 Aug 2010 15:29:27 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jnthn.net/&#34;&gt;Jonathan Worthington&lt;/a&gt; is one of the lead developers of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt;. A couple of months before the &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star release&lt;/a&gt;, Perl.com interviewed him about his work on Perl 6 and what the rest of us should expect as we explore this new language. Follow Jonathan&amp;rsquo;s work at &lt;a href=&#34;http://6guts.wordpress.com/&#34;&gt;6guts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered programming when I was about eight years old, and got hooked. It started out with Logo and BBC Micro BASIC on some computers at school. Several years and a couple of PC-based dialects of Basic later, my family got internet access at home, and a couple of years later I ran across Perl.&lt;/p&gt;

&lt;p&gt;I ended up going off to university to do Computer Science. I questioned it a bit—I wasn&amp;rsquo;t certain my childhood hobby would still be interesting as a topic of study and a future career. Happily, it deepened my curiosity rather than bored me. I took a particular interest in languages, compilers and type systems, though the natural language processing courses kind of caught my interest too.&lt;/p&gt;

&lt;p&gt;That all came to an end several years back, when I graduated. Since then, I&amp;rsquo;ve done a few years freelancing and living abroad, and recently joined a startup company in Sweden. Amusingly, it makes the third country starting with an &amp;ldquo;S&amp;rdquo; that I&amp;rsquo;ve lived in since graduating—the other two were sunny Spain and the lesser-known but lovely Slovakia, a place I remain very fond of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the moment, I&amp;rsquo;m primarily interested in writing a good compiler for it. Beyond that, I&amp;rsquo;d like to use it to build more cool things, though I&amp;rsquo;ve little idea what yet. We&amp;rsquo;ll see what comes along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in 2003, a couple of years after discovering Perl, I heard about Perl 6. I found the &lt;a href=&#34;http://dev.perl.org/perl6/apocalypse/&#34;&gt;apocalypses&lt;/a&gt; engaging, and joined a couple of mailing lists. A lot of perl6-language bewildered me. Well, some things never change. :-) I felt way out of my depth on the language design front back then, but then found the &lt;a href=&#34;http://www.parrot.org/&#34;&gt;Parrot&lt;/a&gt; project, which was a little more concrete. I wrote a couple of patches to improve Windows support.&lt;/p&gt;

&lt;p&gt;I did more bits with Parrot over the following years—mostly on the bytecode format and some object orientation bits. I didn&amp;rsquo;t really get involved with the Perl 6 compiler itself until 2007. That summer, I went to OSCON, drank a few beers and then told Larry Wall, of all people, that implementing junctions in the Perl 6 on Parrot compiler sounded interesting.&lt;/p&gt;

&lt;p&gt;Sadly, autumn of 2007 saw me pretty depressed. I withdrew from hacking on just about everything, went to wander around China for a month and hurriedly arranged to move abroad, in hope of putting some distance between myself and things. With the Spanish sun to improve my mood, and noticing that the latest iteration of the Perl 6 compiler—built on the &lt;a href=&#34;http://docs.parrot.org/parrot/devel/html/PCT_Tutorial.html&#34;&gt;Parrot Compiler Toolkit&lt;/a&gt;—had landed, it felt like time to try and make good on my junctions remark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, not long after digging in to junctions, I discovered that doing junctions properly meant doing multiple dispatch&amp;hellip; and doing multiple dispatch meant doing a bunch of the type system stuff&amp;hellip; and doing that meant being able to declare classes and roles. A couple of years of hacking later, and with plenty of input and help from others, we&amp;rsquo;re doing pretty well on all of those areas now in Rakudo. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a hard one. There are many interesting features in Perl 6—some of them big things, some of them much smaller. What I&amp;rsquo;ve really come to admire isn&amp;rsquo;t so much the features themselves, but rather the much smaller number of fundamentals that they&amp;rsquo;re all built on top of, and how they them form a coherent whole that is greater than its parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perl has long been a leader in regexes, and in many senses &lt;a href=&#34;http://perlcabal.org/syn/S05.html&#34;&gt;Perl 6 grammars and its new regex syntax&lt;/a&gt; are a game changer. Parsing problems that are beyond traditional regexes are now often easily expressible. Additionally, the changes in Perl 6 seriously try to address the cultural problems; good software development practices, such as code re-use, should also apply to regexes, and that—amongst other things—is now made easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The willingness to revisit things when an implementation points out issues, and an overriding commitment to get it right, rather than just get it out the door in whatever shape as soon as possible. While it is somewhat frustrating for those waiting to use Perl 6 in production, and to some degree for those of us implementing it too when things get re-hashed, I&amp;rsquo;m also convinced that the Perl 6 we deliver will be better for the time that&amp;rsquo;s been taken over it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By implementing a chunk of it. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Drop along to &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt; for links to the latest and greatest in terms of documentation and tutorials. Some of us are also working on a book (&lt;a href=&#34;http://github.com/perl6/book/&#34;&gt;Using Perl 6&lt;/a&gt;). And of course, don&amp;rsquo;t forget to join the #perl6 IRC channel. It&amp;rsquo;s a friendly place, and a great place to get questions answered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While 20 years sounds a long time, in many senses if a language gets a reasonable level of adoption—which I do hope Perl 6 will—it&amp;rsquo;s easy enough for legacy code to still be in production 20 years on.&lt;/p&gt;

&lt;p&gt;The more interesting challenge is how to make a language that can stay at the forefront for 20 years and still be considered modern. Since what&amp;rsquo;s considered modern will of course mutate, that means the language has to be able to be designed with the ability to mutate too. Handling language mutations sanely, and making sure it&amp;rsquo;s always clear what &amp;ldquo;dialect&amp;rdquo; of Perl 6 is being spoken, has been one of the big challenges in making Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It makes an easy thing easy, or a hard thing possible. The amount of code is proportional to the task at hand. It feels natural. It solves a real, practical problem, so you can get your work done efficiently and have time to go for a beer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d say writing OO code is decidedly easier now, particularly for those coming from other non-Perl language backgrounds. At the same time, so is writing functional code. And writing clean code is most certainly easier. Language extensions are an example of a harder thing that is made much more possible in Perl 6; introducing a new operator isn&amp;rsquo;t that much harder than writing a subroutine, you just have to give it an interesting looking name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature are you most awaiting before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a slightly odd sense, I am using Perl 6 for a serious project; big chunks of Rakudo are actually written in Perl 6. That aside, though, feature wise I think Rakudo is doing pretty well; the things I&amp;rsquo;m most waiting on—and helping us improve on—are issues like performance, stability and having a good range of modules to draw on. If I had to identify the next big features we need, though, it&amp;rsquo;s concurrency support and native type support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The high standards at which it is conducted. For example, we have a lot of effort going in to testing, and test coverage is taken seriously and highly valued by all all of those working on Rakudo. People often code-review each other&amp;rsquo;s patches. Discussion on the channel and on the mailing lists—even in the face of opposing views—is just about always polite and friendly. The Perl 6 team is easily the best I&amp;rsquo;ve ever had the privilege to work with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wider deployment means growing the users base. People should choose a technology primarily on the merits of the technology itself. Therefore, to grow a user base, Rakudo needs to deliver not only the benefits of the Perl 6 language itself, but also a stable and performant implementation of it. It&amp;rsquo;s a wider issue than Rakudo, but we also need lots of good modules and, perhaps, some kind of killer app. Those kinds of things will come from the community at large rather than just the core Rakudo team, however they matter significantly to Rakudo&amp;rsquo;s own success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after Rakudo Star?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I often talk about Rakudo development as being like going for a hike up a mountain. While the most impressive view will be at that top—when we have a complete Perl 6 implementation—at some points along the way there will be good views, and it&amp;rsquo;s good to pause and enjoy them. Rakudo is one of those points on the journey—in fact, the most significant so far.&lt;/p&gt;

&lt;p&gt;Rakudo has caused us to focus for a while on trying to get something useful and usable. That has been valuable, however there are still some big items to take care of on the way to the mountain peak. Those will once again take center stage after Rakudo *.&lt;/p&gt;

&lt;p&gt;Two big areas of focus will be on native type handling and parallelism. Part of the native type handling will involve a re-visit of how objects look internally. Part of this is being able to store native types in them, not just other objects. Additionally, we can actually do the vast majority of object attribute lookups as index offsets instead of hash lookups, which should be a big performance win. Lexical variable access can also be optimized in a similar fashion. We have a lot of statically known information about a Perl 6 program that we pretty much just throw away today.&lt;/p&gt;

&lt;p&gt;We will also be transforming Rakudo from a compiler with one backend—Parrot—into a compiler with multiple backends. We&amp;rsquo;ve had an architecture open to such things for some time now, but getting the core features in place and actually delivering something of note have been far more important goals so far.&lt;/p&gt;

&lt;p&gt;However, at this point, I think some things—especially parallelism, an area where Parrot is currently weak—will be much easier to do an initial implementation of for another backend. It usually takes at least a first cut implementation and some iteration to get the specification solidified and refined, and it will be easier to do that on a base that offers solid concurrency primitives. I also hope that having other backends will help us grow both the user base and the developer base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really looking forward to having good threading and parallel programming support—but perhaps that&amp;rsquo;s mostly because we&amp;rsquo;ll be done with the hard work of making it happen!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The state of the Perl 6 community today is something that is dear to many of us who are a part of it. People frequently comment how the #perl6 IRC channel is somehow different to the norm; it&amp;rsquo;s very open to newcomers and beginners, and people tend to have a very slow burning fuse. The challenge, of course, is scaling that community without losing all of the nice things about it. Significantly, the key players all really want to work out how to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mostly through a very regular presence on #perl6, where a lot of them are thrashed out. I also read the spec change commits as they are reported on the perl6-language list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implementation having been started sooner. Implementations have been the primary driver towards the spec converging on something implementable and sane. That said, the pre-implementation, tossing-about-ideas phase was, of course, important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s so much that needs doing in the Perl 6 world today! Generally, I just advise interested people to take a look around, spot something interesting to help with or something that&amp;rsquo;s missing that they would like to work on, and dig in! Perl 6 is very much about &lt;a href=&#34;http://www.slideshare.net/autang/ofun-optimizing-for-fun&#34;&gt;-Ofun&lt;/a&gt;. For some of us, fun is compiler guts. For others, fun is web frameworks. For others, fun is making awesome documentation. If you want to help, find what&amp;rsquo;s fun for you, do it well, and make your mark on the evolving Perl 6 community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perhaps the biggest one is that some people equate &amp;ldquo;taking a long time&amp;rdquo; with &amp;ldquo;not going to happen&amp;rdquo;. It&amp;rsquo;s an easy enough misconception to form given the project&amp;rsquo;s long time scale, especially for anyone not really following the day-to-day progress. Of course, it&amp;rsquo;s a hard misconception to understand for those who are following it too. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, there&amp;rsquo;s thousands of modules to be written for all kinds of needs from popular to niche. One area that certainly needs more effort, however, is documentation. It&amp;rsquo;s not like there aren&amp;rsquo;t projects started, more just too few hands for the amount of work that needs to be done.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

