<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cron on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/cron/</link>
    <description>Recent content in Cron on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Dec 2013 15:08:51 +0000</lastBuildDate>
    <atom:link href="/tags/cron/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Schedule jobs like a boss with every</title>
      <link>http://localhost:1313/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</link>
      <pubDate>Sun, 22 Dec 2013 15:08:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-every&#34;&gt;Get every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scheduling-jobs-with-every&#34;&gt;Scheduling jobs with every&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#further-info&#34;&gt;Further info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;Scheduling jobs on cron is often a trial-and-error process but every, a command line app written in Perl makes it a lot easier.&lt;/p&gt;

&lt;h6 id=&#34;requirements&#34;&gt;Requirements&lt;/h6&gt;

&lt;p&gt;You need to have cron, which comes with most Unix-based platforms (e.g. Linux, Mac OSX, BSD) and have Perl installed.&lt;/p&gt;

&lt;h6 id=&#34;get-every&#34;&gt;Get every&lt;/h6&gt;

&lt;p&gt;every was developed by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt; and is hosted on her &lt;a href=&#34;https://github.com/iarna/App-Every&#34;&gt;Github&lt;/a&gt; page. You can download it directly from the command line using wget:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wget &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.github.com/iarna/App-Every/master/packed/every&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or curl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ curl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.github.com/iarna/App-Every/master/packed/every&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save every to /usr/bin or add the parent directory to your PATH variable so you can run every from the command line.&lt;/p&gt;

&lt;h6 id=&#34;scheduling-jobs-with-every&#34;&gt;Scheduling jobs with every&lt;/h6&gt;

&lt;p&gt;The command to every to schedule a job takes the form: &amp;ldquo;every [num] unit program&amp;rdquo; (num defaults to one). So for example if you wanted to schedule a shell script to run every minute, type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every minute script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which creates the following crontab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;SHELL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;bash
PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;perl5&lt;span style=&#34;color:#e6db74&#34;&gt;/perlbrew/&lt;/span&gt;perls&lt;span style=&#34;color:#e6db74&#34;&gt;/perl-5.16.3/&lt;/span&gt;bin:&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;bin:&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/sbin:/&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/sbin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;bin:
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/1 * * * * cd &amp;#34;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sillymoose&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;;  script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;every translates the command into a new crontab entry and prints it on the command line. Helpfully it will set the SHELL variable and copy the user&amp;rsquo;s PATH into the crontab. The icing on the cake is that every prepends a change directory command to ensure that cron executes the job from the script&amp;rsquo;s parent directory. By doing these things, every eliminates (probably) the three most common causes of failed cron jobs.&lt;/p&gt;

&lt;p&gt;Other units that every recognizes are: hour, day, week, month and the day of the week (e.g. Wednesday). The following are all valid every commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; hours script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh

$ every mon script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh

$ every &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; months script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One really cool feature of modern cron installs is that you can schedule a job to run on reboot. every also supports this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every @reboot script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;further-info&#34;&gt;Further info&lt;/h3&gt;

&lt;p&gt;every has more options than described above. Run &amp;ldquo;every &amp;ndash;help&amp;rdquo; to see the full panoply of options.&lt;/p&gt;

&lt;p&gt;every was written in Perl by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt;. She is also on twitter (&lt;a href=&#34;https://twitter.com/ReBeccaOrg&#34;&gt;@ReBeccaOrg&lt;/a&gt;). So if you use every and find it useful, maybe reach out and say thank you.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

