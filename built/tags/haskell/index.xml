<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/tags/haskell/</link>
    <description>Recent content in Haskell on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2015 13:52:10 +0000</lastBuildDate>
    <atom:link href="/tags/haskell/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What&#39;s new on CPAN - February 2015</title>
      <link>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</link>
      <pubDate>Mon, 02 Mar 2015 13:52:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/156/2015/3/2/What-s-new-on-CPAN---February-2015/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. February&amp;rsquo;s uploads were a goldmine of new toys. Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-of-the-month&#34;&gt;Module of the month&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Serialize&#34;&gt;File::Serialize&lt;/a&gt; will read from and write to from yaml, json and toml files, seamlessly converting from native Perl data structures into the required format. It just does the right thing, leaving the developer to focus on their code.&lt;/p&gt;

&lt;p&gt;Module author Yanick Champoux also wrote an &lt;a href=&#34;http://techblog.babyl.ca/entry/file-serialize&#34;&gt;article&lt;/a&gt; about it. With so many great new CPAN uploads, it&amp;rsquo;s not easy choosing the module of the month. What I like about File::Serialize is that it solves a common problem conveniently, and I know I&amp;rsquo;ll use it in my code. Check it out!&lt;/p&gt;

&lt;h3 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cloc&#34;&gt;App::cloc&lt;/a&gt; is the a brand new CPAN package for the established &lt;a href=&#34;http://cloc.sourceforge.net/&#34;&gt;cloc&lt;/a&gt; application. Great to see it on CPAN&lt;/p&gt;

&lt;p&gt;Wow. &lt;a href=&#34;https://metacpan.org/pod/Finance::Nadex&#34;&gt;Finance::Nadex&lt;/a&gt; is a full featured API for the North American Derivatives Exchange. Make sure you do your unit testing before selling options on Anacott Steel!&lt;/p&gt;

&lt;p&gt;Automatically spin up surveys with &lt;a href=&#34;https://metacpan.org/pod/Net::Surveymonkey&#34;&gt;Net::Surveymonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Google::SafeBrowsing3&#34;&gt;Net::Google::SafeBrowsing3&lt;/a&gt; provides an interface for the latest version of Google&amp;rsquo;s safe browsing API&lt;/p&gt;

&lt;p&gt;This is interesting: &lt;a href=&#34;https://metacpan.org/pod/WebService::Prismatic::InterestGraph&#34;&gt;WebService::Prismatic::InterestGraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several Amazon AWS goodies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/AWS::IP&#34;&gt;AWS::IP&lt;/a&gt; provides Amazon AWS ip ranges in a searchable, cache-able way (disclosure, I am the module author)&lt;/li&gt;
&lt;li&gt;Verify SNS messages with &lt;a href=&#34;https://metacpan.org/pod/AWS::SNS::Verify&#34;&gt;AWS::SNS::Verify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Amazon::S3::Thin&#34;&gt;Amazon::S3::Thin&lt;/a&gt; is a lightweight, transparent interface for S3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;config-devops&#34;&gt;Config &amp;amp; DevOps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easily parse callgrind output in Perl with &lt;a href=&#34;https://metacpan.org/pod/Callgrind::Parser&#34;&gt;Callgrind::Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Distribution::Metadata&#34;&gt;Distribution::Metadata&lt;/a&gt; assembles distribution metadata&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Chef::Knife::Cmd&#34;&gt;Chef::Knife::Cmd&lt;/a&gt; is a convenience wrapper for the Chef knife command&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data&#34;&gt;Data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BOM::Utils&#34;&gt;File::BOM::Utils&lt;/a&gt; lets you manipulate byte order marks in files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Panda::Time&#34;&gt;Panda::Time&lt;/a&gt; purports to be a super fast time module, looks good.. See also &lt;a href=&#34;https://metacpan.org/pod/Panda::Date&#34;&gt;Panda::Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handle JSON web requests more conveniently with &lt;a href=&#34;https://metacpan.org/pod/LWP::JSON::Tiny&#34;&gt;LWP::JSON::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-and-version-control&#34;&gt;Development and Version Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Call::Haskell&#34;&gt;Call::Haskell&lt;/a&gt; provides a foreign function interface for the functional programming language. See also &lt;a href=&#34;https://metacpan.org/pod/Functional::Types&#34;&gt;Functional::Types&lt;/a&gt; which implements a Haskell-like type system in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Crypt&#34;&gt;Git::Crypt&lt;/a&gt; will encrypt and decrypt files for storing sensitive data in repos. Cleverly the encryption is done line-by-line to reduce version control noise&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GitHub::MergeVelocity&#34;&gt;GitHub::MergeVelocity&lt;/a&gt; produces a neat report on GitHub repos showing how quickly they merge (and close) pull requests. Use it if you&amp;rsquo;re in doubt of whether to contribute to a repo!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Hypnocube&#34;&gt;Device::Hypnocube&lt;/a&gt; lets you control a hypnocube with Perl code - flashing lights!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;science-and-international&#34;&gt;Science and International&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::BitVector&#34;&gt;Algorithm::BitVector&lt;/a&gt; is a port of the popular Python library BitVector, by the original author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FAST&#34;&gt;FAST&lt;/a&gt; provides Unix-like tools for analyzing bioinformatic sequence records&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LWPx::UserAgent::Cached&#34;&gt;LWPx::UserAgent::Cached&lt;/a&gt; caches HTTP get requests and is polite enough to let you use your own cache, with sane defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Articulate&#34;&gt;Articulate&lt;/a&gt; is a lightweight CMS plugin for Dancer&lt;/li&gt;
&lt;li&gt;Lithium::WebDriver is an awesome, full featured library that can create and control webdriver instances in both Selenium and Phantomjs sessions. Module seems more up to date on &lt;a href=&#34;https://github.com/GrayTShirt/Lithium-WebDriver&#34;&gt;GitHub&lt;/a&gt;. Also see &lt;a href=&#34;https://metacpan.org/pod/Test::Lithium&#34;&gt;Test::Lithium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pulp&#34;&gt;Pulp&lt;/a&gt; provides syntactic sugar for the Kelp web framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Internationalization and Haskell: An Interview with Autrijus Tang</title>
      <link>http://localhost:1313/pub/2005/09/08/autrijus-tang.html/</link>
      <pubDate>Thu, 08 Sep 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/09/08/autrijus-tang.html/</guid>
      <description>

&lt;p&gt;Author&amp;rsquo;s note: &lt;a href=&#34;http://conferences.oreillynet.com/cs/eurooscon/view/e_spkr/1249?CMP=ILC-PS2458945551&amp;amp;ATT=%7Bcs.here%7D&#34;&gt;Autrijus Tang&lt;/a&gt; is a speaker at this October&amp;rsquo;s &lt;a href=&#34;http://conferences.oreillynet.com/eurooscon/?CMP=ILC-PS2458945551&amp;amp;ATT=%7Bcs.here%7D&#34;&gt;European Open Source Convention&lt;/a&gt;. In the fine tradition of the OSCON, he is a Perl hacker, entrepreneur, internationalization geek, and self-proclaimed &amp;ldquo;Net activist, artist, and anarchist.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;AT EuroOSCON, Tang will &lt;a href=&#34;http://conferences.oreillynet.com/cs/eurooscon/view/e_sess/7279?CMP=ILC-PS2458945551&amp;amp;ATT=%7Bcs.here%7D&#34;&gt;speak&lt;/a&gt; about &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;Pugs&lt;/a&gt;, a Perl 6 implementation written in Haskell, and he will teach a session on &lt;a href=&#34;http://conferences.oreillynet.com/cs/eurooscon/view/e_sess/7231?CMP=ILC-PS2458945551&amp;amp;ATT=%7Bcs.here%7D&#34;&gt;learning Haskell&lt;/a&gt;. O&amp;rsquo;Reilly Network caught up with him to ask about one of his major endeavors, Perl internationalization and Haskell.&lt;/p&gt;

&lt;h3 id=&#34;on-perl-and-internationalization&#34;&gt;On Perl and Internationalization&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Edd Dumbill:&lt;/strong&gt; Let&amp;rsquo;s talk about Perl and localization. I will admit that when thinking about localized applications, Perl really isn&amp;rsquo;t the first language that comes to mind. How long has Perl had localization capabilities?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus Tang:&lt;/strong&gt; Gettext bindings date back to 1996. In 2002, an I18N/L10N (internationalization/localization) framework was built into the core distribution as part of Perl&amp;rsquo;s 5.8 release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; How easy is it to introduce I18N to an existing Perl application? Or is it best to start localized from the beginning?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; The conversion is straightforward, so I usually recommend starting L10N only after a first working version is ready. However, if the program depends on a specific encoding (say ISO-8859-1) for data storage, then it may take some effort to convert it to use Unicode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; What kind of tools exist to support Perl internationalization?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Lots of tools. The Locale::Maketext family of modules contains various utilities. The application framework may also have built-in support using those modules; for example, the Catalyst::Plugin::I18N component uses my Locale::Maketext::Simple module to work with PO files, as well as lexicons implemented as Perl modules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; Many hackers will be familiar with using GNU Gettext. Is it possible to use that with Perl? Is it preferable?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; There are six Gettext bindings on CPAN; some use the C API, some use XML, and some parse the .mo files in pure perl. Moreover, Locale::Maketext users can use PO files via the ::Lexicon and ::Simple helper modules.&lt;/p&gt;

&lt;p&gt;I think [Gettext] PO files are preferable for the great toolchain and cross-language appeal, although sometimes it&amp;rsquo;s better to manage lexicons in other databases. This is like a common DBI interface with database-dependent DBD drivers; Locale::Maketext::Lexicon is written specifically to address that need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; CPAN is one of Perl&amp;rsquo;s major advantages, but how accessible is it to non-English speakers?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; There are projects like &lt;a href=&#34;http://www.perlchina.org/&#34;&gt;PerlChina&lt;/a&gt; and &lt;a href=&#34;http://perldoc.jp/&#34;&gt;perldoc.jp&lt;/a&gt; to translate articles and documentation, and many Perl Monger groups that hold local meetings. While most mailing lists are in English, non-English speaking people can usually find IRC channels and USENET groups for support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; What percentage of popular modules would you say are localized to a usable degree?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Most modules on CPAN are &amp;ldquo;plumbings&amp;rdquo;; they are not exposed to the user, so there is little need to localize them. If the user might see errors or messages from those modules, it&amp;rsquo;s easy enough to localize those in an ad-hoc fashion with tools such as Locale::Maketext::Fuzzy.&lt;/p&gt;

&lt;p&gt;The important place for I18N is in the templating and application engines; I&amp;rsquo;d say most of them already have suitable plugins for I18N now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; How do you encourage people to write I18N-ized applications? In the GNOME project, for instance, it&amp;rsquo;s thought of pretty much as something to do by default, and there&amp;rsquo;s a keen translation team. Is there a team somewhere localising Perl modules?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Open source is great for I18N: the original author does not need to know anything about it, and people who need I18N capabilities can easily hack them in. Because of this, I18N and L10N tend to happen when there is demand. It&amp;rsquo;s our job to constantly improve the tools, to make the entry barrier to localize somebody else&amp;rsquo;s code as low as possible.&lt;/p&gt;

&lt;h3 id=&#34;on-haskell&#34;&gt;On Haskell&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; One of your other interests is Haskell, which you say is &amp;ldquo;faster than C++, more concise than Perl, more regular than Python, more flexible than Ruby, more typeful than C#, more robust than Java, and has absolutely nothing in common with PHP.&amp;rdquo; Given this build-up, could you explain Haskell in one or two sentences?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Haskell is a pure functional language optimised for conciseness and clarity. It handles infinite data structures natively, and offers rich types and function abstractions that give Haskell programs a strong declarative flavor&amp;ndash;the entire Pugs compiler and runtime is under 3000 lines of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; Could you share a short Haskell program that might illustrate some of its good points?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Sure. The program below prints the first 1000 Hamming numbers: i.e. positive integers whose factors are limited to powers of 2, 3, and 5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    main = print (take 1000 hamming)
    hamming = 1 : map (2*) hamming ~~ map (3*) hamming ~~ map (5*) hamming
        where
        xxs@(x:xs) ~~ yys@(y:ys)    -- To merge two streams:
            | x==y = (x : xs~~ys)   --  if the heads are common, take that
            | x&amp;lt;y  = (x : xs~~yys)  --  otherwise, take the smaller one
            | x&amp;gt;y  = (y : xxs~~ys)  --    and proceed to merge the rest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program is strikingly compact; you can read the algorithm straight off it. Lazy evaluation allows us to define an infinite list with itself. A user-defined lexical operator &amp;ldquo;~~&amp;rdquo; makes it more readable.&lt;/p&gt;

&lt;p&gt;Furthermore, it is all statically typed, but we don&amp;rsquo;t need to write any types explicitly. The compiler correctly inferred &amp;ldquo;hamming&amp;rdquo; is a list of arbitrary-precision integers. If we add a line of type annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    hamming :: [Int]
    hamming = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it will use platform-native &amp;ldquo;int&amp;rdquo; for faster calculation, yielding a performance comparable to C implementations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; What makes Haskell competitive among modern programming languages?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Most languages require you to pay a &amp;ldquo;language tax&amp;rdquo;: code that does nothing with the main algorithm, placed there only to make the computer happy.&lt;/p&gt;

&lt;p&gt;Thus there is a threshold of refactoring: if introducing a new class or a new function costs five lines, programmers are encouraged to copy-and-paste four lines over and over again instead of abstracting them out, even with help from a good refactoring browser.&lt;/p&gt;

&lt;p&gt;On the other end of spectrum, we often shy away from abstracting huge legacy code because we are afraid of breaking the complex interplay of flow control and global and mutable variables. Besides, the paths leading to common targets of refactoring&amp;ndash;those Design Patterns&amp;ndash;are often non-obvious.&lt;/p&gt;

&lt;p&gt;Because Haskell makes all side effects explicit, code can be refactored in a safe and automatic way. Indeed, you can ask a bot on &lt;em&gt;#haskell&lt;/em&gt; to turn programs to its most abstracted form for you. Haskell also encourages you to shape the language to fit your problem domain, so the program often reads out like a runnable specification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; How would people get started writing Haskell?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Learning Haskell requires some brain rewiring, so the best way to learn it is by coding something in it for real. Yuval, a fellow &amp;ldquo;lambdacamel,&amp;rdquo; learned Haskell from scratch by &lt;a href=&#34;http://perlcabal.org/~nothingmuch/harrorth/&#34;&gt;coding up a Forth parser, interpreter, and runtime all within a few days.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are also some excellent online tutorials and books. We maintain a &lt;a href=&#34;http://svn.openfoundry.org/pugs/READTHEM&#34;&gt;list of them&lt;/a&gt; in the Pugs source tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; Are there Haskell communities?&lt;/p&gt;

&lt;p&gt;Yes. &lt;a href=&#34;http://haskell.org/&#34;&gt;Haskell.org&lt;/a&gt; is the main site of Haskell communities. There is a &lt;a href=&#34;http://haskell.org/communities/&#34;&gt;community report published every six months&lt;/a&gt;, and an active wiki containing &lt;a href=&#34;http://haskell.org/hawiki/HaskellCommunities&#34;&gt;additional pointers&lt;/a&gt;. The #haskell channel on irc.freenode.net is particularly helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ED:&lt;/strong&gt; Are there any Haskell jobs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AT:&lt;/strong&gt; Lots of new programming language research is done with (and on) Haskell, so much that I joked that it&amp;rsquo;s &amp;ldquo;Powered by Ph.D.&amp;rdquo; Consequently, there are quite a few jobs available in the academic sector.&lt;/p&gt;

&lt;p&gt;Outside universities, there are &lt;a href=&#34;http://haskell.org/jobs.html&#34;&gt;some places&lt;/a&gt; that look for Haskell programmers explictly. As with other agile technologies, it works best with a small team and a client base that cares about the results, instead of demanding a specific language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Plan for Pugs</title>
      <link>http://localhost:1313/pub/2005/03/03/pugs_interview.html/</link>
      <pubDate>Thu, 03 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/03/pugs_interview.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.autrijus.org/&#34;&gt;Autrijus Tang&lt;/a&gt; is a talented Perl hacker, a &lt;a href=&#34;https://metacpan.org/author/AUTRIJUS&#34;&gt;dedicated CPAN contributor&lt;/a&gt;, and a truly smart man. His announcement of &lt;a href=&#34;http://use.perl.org/~autrijus/journal/22965&#34;&gt;starting an implementation of Perl 6 in Haskell&lt;/a&gt; on February 1, 2005 might have seemed like a joke from almost anyone else. A month later, his little experiment runs more code and has attracted a community larger than anyone could have predicted. Perl.com recently caught up with Autrijus on #Perl6 to discuss his new project: &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;Pugs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ve followed your journal from the beginning, but it didn&amp;rsquo;t start from the start. Where did you come up with this crazy idea?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Ok. The story is that I hacked &lt;a href=&#34;http://svk.elixus.org/&#34;&gt;SVK&lt;/a&gt; for many months with &lt;a href=&#34;https://metacpan.org/author/CLKAO&#34;&gt;clkao&lt;/a&gt;. SVK worked, except it is not very flexible. There is a VCS named &lt;a href=&#34;http://abridgegame.org/darcs/&#34;&gt;darcs&lt;/a&gt;, which is much more flexible, but is specced using quantum physics language and written in a scary language called &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;. So, I spent one month doing nothing but learning Haskell, so I could understand darcs. Which worked well; I convinced a crazy client (who paid me to develop &lt;a href=&#34;https://metacpan.org/pod/Parse::AFP&#34;&gt;Parse::AFP&lt;/a&gt;) that Perl 5 is doomed because it has no COW (which, surprisingly, it now has), and to fund me to develop an alternate library using Haskell.&lt;/p&gt;

&lt;p&gt;(I mean &amp;ldquo;Perl 5 is doomed for that task&amp;rdquo;, not &amp;ldquo;Perl 5 is doomed in general&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Copy-on-Write?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; So that&amp;rsquo;s a &amp;ldquo;sort-of has&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. As in, &lt;a href=&#34;https://metacpan.org/author/ABERGMAN&#34;&gt;sky&lt;/a&gt; suddenly worked on it and claims it mostly works. Haven&amp;rsquo;t checked the code, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s been in the works for years. Or &amp;ldquo;doesn&amp;rsquo;t works&amp;rdquo; perhaps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; But I digress. Using Haskell to develop &lt;em&gt;OpenAFP.hs&lt;/em&gt; led to programs that eat constant 2MB memory, scale linearly, and are generally 2OOM faster than my Perl library.&lt;/p&gt;

&lt;p&gt;Oh, and the code size is &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Okay, so you picked up Haskell to look at darcs to borrow ideas from for svk, then you convinced a client to pay you to write in Haskell and you started to like it. What type of program was this? It sounds like it had a bit of parsing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; AFP is IBM&amp;rsquo;s PDF-like format, born 7 years before PDF. It&amp;rsquo;s unlike PDF in that it&amp;rsquo;s all binary, very bitpacked, and is generally intolerant of errors. There was no free library that parses or munges AFP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Darcs really impressed you then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The algorithm did. The day-to-day slowness and fragility for anything beyond mid-sized projects did not. But darcs is improving. But yeah, I was impressed by the conciseness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is that the implementation of darcs you consider slow or the use of Haskell?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The implementation. It basically caches no info and recalculates all unnecessary information. Can&amp;rsquo;t be fast that way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Hm, it seems like memoization is something you can add to a functional program for free, almost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, and there are people working on that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; But not you, which is good for us Perl people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Not me. Sorry.&lt;/p&gt;

&lt;p&gt;Anyway. So, I ordered a bunch of books online including &lt;a href=&#34;http://www.cis.upenn.edu/~bcpierce/tapl/index.html&#34;&gt;TaPL&lt;/a&gt; and &lt;a href=&#34;http://www.cis.upenn.edu/~bcpierce/attapl/index.html&#34;&gt;ATTaPL&lt;/a&gt; so I could learn more about mysterious things like Category Theory and Type Inference and Curry-Howard Correspondence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How far did you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I think I have a pretty solid idea of the basics now, thanks to my math-minded brother Bestian, but TaPL is a very information-rich book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Me, I&amp;rsquo;m happy just to recognize Haskell Curry&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I read the first two chapters at a relaxed pace. By the end of second chapter it starts to implement languages for real and usually by that time, the profs using TaPL as textbook will tell the students to pick a toy language to implement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I haven&amp;rsquo;t seen you pop up much in Perl 6 land though. You seemed amazingly productive in the Perl 5 world. Where&amp;rsquo;d Perl 6 come in?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; As an exercise. I started using Perl 6 as the exercise. I think that answers the first question.&lt;/p&gt;

&lt;p&gt;Oh. p6 land.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; More of a playground than a full land, but we have a big pit full of colorful plastic balls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, I was not in p6l, p6i or p6c. However, the weekly summary really helped. Well, because I keep hitting the limit of p5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It seems like an odd fit, putting a language with a good static type system to use with a language with a loose, mostly-optional type system though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Most of more useful modules under my name, (including the ones Ingy and I inherited from Damian) were forced to be done in klugy ways because the p5 runtime is a mess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; You should see Attributes::Scary. Total sympathy here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; &lt;a href=&#34;https://metacpan.org/pod/Template::Extract&#34;&gt;Template::Extract&lt;/a&gt; uses &lt;code&gt;(?{})&lt;/code&gt; as a nondet engine; &lt;a href=&#34;https://metacpan.org/pod/PAR&#34;&gt;PAR&lt;/a&gt; comes with its own &lt;em&gt;perlmain.c&lt;/em&gt;; let me not mention source filtering. All these techniques are unmaintainable unless with large dosage of caffeine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Yeah, I fixed some of the startup warnings in &lt;a href=&#34;https://metacpan.org/pod/B::Generate&#34;&gt;B::Generate&lt;/a&gt; a couple of weeks ago&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Cool. Yeah, B::Generate is abstracted klugery and may pave a way for Pugs to produce Perl 5 code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Parrot has the chance to make some of these things a lot nicer. I&amp;rsquo;m looking forward to that. Yet you took off down another road.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Actually, I think Pugs and Parrot will meet in the middle. Where Pugs AST meets Parrot AST and the compiler is written in Perl 6 that can then be run on Parrot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I thought Pugs would get rewritten in C for Parrot?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; No, in Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Can &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; retarget a different AST then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It can, but that&amp;rsquo;s not the easier plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s easy for me. I don&amp;rsquo;t plan to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The easier plan is simply for Pugs to have a &lt;em&gt;Compile.hs&lt;/em&gt; that emits Parrot AST. Which, I&amp;rsquo;m happy to discover yesterday, is painless to write. (&lt;a href=&#34;https://metacpan.org/author/INGY&#34;&gt;Ingy&lt;/a&gt; and I did a KwidAST-&amp;gt;HtmlAST compiler in an hour, together with parser and AST.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Kwid and HTML, the markup languages?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah.&lt;/p&gt;

&lt;p&gt;Ok. So back to p6. P5&amp;rsquo;s limit is apparent and not easily fixable&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It sounds like you wanted something more, and soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Parrot is fine except every time I build it, it fails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Try running Linux PPC sometime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Freebsd may not be a good platform for Parrot, I gathered. Or my CVS luck is really bad. But I&amp;rsquo;m talking about several months ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; 4.x or 5.x?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; 5.x.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Ahh, perhaps it was &lt;a href=&#34;http://www.icu-project.org/&#34;&gt;ICU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Two out of three times is. I think.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I guess it&amp;rsquo;s too late to interest you in a Ponie then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I was very interested in &lt;a href=&#34;http://www.poniecode.org/&#34;&gt;Ponie&lt;/a&gt;. I volunteered to Sky about doing svn and src org and stuff, but svn was not kind for Ponie.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;obra:&lt;/strong&gt;Well, that was before svn 1.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Right. Now it all works just fine, except &lt;em&gt;libsvn_wc&lt;/em&gt;, but we have svk now, and I learned that Sky has been addicted to svk.&lt;/p&gt;

&lt;p&gt;But anyway. And the beginning stage of Ponie is XS hackery which is by far not my forte. I&amp;rsquo;ve read &lt;a href=&#34;https://www.manning.com/jenness/&#34;&gt;Lathos&amp;rsquo; book&lt;/a&gt;, so I can do XS hackery when forced to but not on a volunteer basis. Oh no.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; That&amp;rsquo;s a special kind of pain. It&amp;rsquo;s like doing magic tricks, blindfolded, when you have to say, &amp;ldquo;Watch me push and pop a rabbit out of this stack. By the way, don&amp;rsquo;t make a reference to him yet&amp;hellip;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; So, on February 1, when I had too much caffeine and couldn&amp;rsquo;t sleep, I didn&amp;rsquo;t imagine that Pugs would be anything near a complete implementation of Perl 6. I was just interested in modeling junctions but things quickly went out of control. And some other nifty things like subroutine signatures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; There&amp;rsquo;s a fuzzy connection in the back of my head about Haskell&amp;rsquo;s inferencing and pattern matching being somewhat similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Sure. Haskell has very robust inferencing, pattern matching, and sexy types. Which I&amp;rsquo;m trying to inflict on &lt;a href=&#34;https://www.luqui.org/&#34;&gt;luqui&lt;/a&gt; to improve Perl 6&amp;rsquo;s design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; As long as they do the right thing with regard to roles, go ahead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; They do. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; This was an academic exercise though?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. It stayed as an academic exercise I think for two days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; &amp;ldquo;Hey, this Perl 6 idea is interesting. I wonder how it works in practice? I bet I could do it in Haskell!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. Using it as nothing more than a toy language to experiment with, iitially targeting a reduced set of Perl 6 that is purely functional. But by day three, I found that doing this is much easier than I thought.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Did you say &amp;ldquo;highly reduced&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. Term is &amp;ldquo;featherweight&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; What makes it easier?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; &lt;a href=&#34;http://www.cs.uu.nl/daan/parsec.html&#34;&gt;Parsec&lt;/a&gt; and &lt;a href=&#34;http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html#g:3&#34;&gt;ContT&lt;/a&gt;. Parsec is like Perl 6 rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Parsec&amp;rsquo;s the most popular Haskell parsing library, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Well, Parsec and &lt;a href=&#34;https://www.haskell.org/happy/&#34;&gt;Happy&lt;/a&gt;. Happy is more traditional; you write in a yacc-like grammar thing and it generates a parser in Haskell for you. Parsec is pure Haskell. You just write Haskell code that defines a parser. The term is &amp;ldquo;parser combinator&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Haskell is its own mini-language there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It&amp;rsquo;s a popular approach, yes. When you see &amp;ldquo;blah combinator library&amp;rdquo;, think &amp;ldquo;blah mini-language&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I looked at the parser. It&amp;rsquo;s surprisingly short.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And yet quite complete. Very maintainable, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Now I&amp;rsquo;ve also read the Perl 5 parser, in the sense that I picked out language constructs that I recognized by name. Is it a combination parser/lexer, or how does that work? That&amp;rsquo;s the tricky bit of Perl 5, in that lexing depends on the tokens seen and lots of context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. It does lexing and parsing in one pass, with infinite lookahead and backtracking. Each lexeme can define a new parser that works on the next lexeme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Does that limit what it can do? Is that why it&amp;rsquo;s purely functional Perl 6 so far?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; The purely functional Perl 6 plan stops at day 3. We are now fully IO. Started with &lt;code&gt;say()&lt;/code&gt;, and mutable variables, and &lt;code&gt;return()&lt;/code&gt;, and &lt;code&gt;&amp;amp;?CALLER_CONTINUATION&lt;/code&gt;. So there&amp;rsquo;s nothing functional about the Perl 6 that Pugs targets now :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Does Haskell support continuations and all of those funky things?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yes. And you can pick and match the funky things you want for a scope of your code. &amp;ldquo;In this lexical scope I want continuations&amp;rdquo;; dynamic scope, really. &amp;ldquo;In that scope I want a logger.&amp;rdquo; &amp;ldquo;In that scope I want a pad.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Performance penalty?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Each comes with its own penalty, but is generally small. GHC, again, compiles to very fast C code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Can you instrument scopes at runtime too?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Sure. &lt;code&gt;&amp;amp;?CALLER::SUB&lt;/code&gt; works. And &lt;code&gt;$OUTER::var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Are you compiling it to native code now? I remember that being a suggestion a few days ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Pugs itself is compiled to native code; it is still evaluating Perl 6 AST, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It&amp;rsquo;s like Perl 5 in that sense then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yes, it&amp;rsquo;s exactly like Perl 5. Have you read &lt;a href=&#34;http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html&#34;&gt;PA01&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Cool. So yeah, it&amp;rsquo;s like Perl 5 now. The difference is B::* is trivial to write in Pugs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Except maintainable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And yeah, there&amp;rsquo;s the maintainable bit. Pugs is &amp;lt;4k lines of code. I think porting Pugs to Perl 6 will take about the same number of lines, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; You already have one module, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. And it&amp;rsquo;s your favorite module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ve started a few attempts to write &lt;a href=&#34;https://metacpan.org/pod/Test::Builder&#34;&gt;Test::Builder&lt;/a&gt; in Parrot, but I&amp;rsquo;m missing a few pieces. How far along are classes and objects in Pugs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; They don&amp;rsquo;t exist. 6.2.x will do that, though. But the short term task is to get all the todo_() cleaned. which will give us an interpreter that really agrees with all synopses. At least in the places we have implementation of, that is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I see in the dailies that you are producing boatloads of runnable Perl 6 tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup, thanks to #Perl6. I seldom write tests now :) The helpful committers do that for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How do you know your code works then?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I just look at newest todo_ and start working on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Oh, they write tests for those before you implement them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. It&amp;rsquo;s all test-first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Okay, I&amp;rsquo;ll let you continue then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Ha. So yeah, the cooperation has been wonderful. Camelfolks write tests and libraries, and lambdafolks makes those tests pass. If a camelfolk wants a particular test to pass sooner, then that person can learn from lambdafolk :). Things are easy to fix, and because of the coverage there&amp;rsquo;s little chance of breaking things. If lambdafolks want to implement new things that may or may not agree with synopses or p5 norm, then they learn from camelfolks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Have you started giving Haskell tutorials? I know Larry and Patrick have started to pick up some of it. I&amp;rsquo;m pretty sure Luke and Damian have already explored it (or something from the same family tree).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; I think I&amp;rsquo;ve read a paper from Damian that says he taught Haskell in monash. It&amp;rsquo;s before the monadic revolution though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; If not Haskell, certainly something from the ML family.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Right. So, I&amp;rsquo;ve been pointing people to &lt;a href=&#34;https://www.isi.edu/~hdaume/htut/&#34;&gt;YAHT&lt;/a&gt; and #Haskell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; It sounds like you&amp;rsquo;re attracting people from both sides of the fence then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It indeed is. I get svn/svk patches and darcs patches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is there a lot of overlapping interest? Where does it come from?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Well, ever since the monadic revolution of &amp;lsquo;98 Haskell people have started to do real world apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Now that they can do IO, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah. It&amp;rsquo;s been only 7 years ago. And recently Haskell world has its native version control system; a Perl-review like magazine, cpan/makemaker-like infrastructure, etc. So it&amp;rsquo;s growing fast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; There&amp;rsquo;s still a lot of attraction there for real world applications, of which Pugs is one?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Pugs is a practical project in that working on it has a chance of solving real problems, and is very fun to boot. And although p5 got no respect, in general p6 is very slick. So the mental barrier is lower for lambdafolks to join, I think.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; The lambdafolks like what they see in Perl 6?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yup. I quoted Abigail on #Haskell a while ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I saw something earlier about access to libraries and such. Do you have a plan for the XS-alternative?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Yeah, Ingy is working on it &lt;em&gt;ext/Kwid/&lt;/em&gt; eventually inline Haskell code. And with luck, inline other kinds of code as well through Haskelldirect (the Haskell equiv of Inline).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Is this within Pugs or Perl 6 atop Pugs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; It&amp;rsquo;s within Pugs. The Parrot side had not been well-discussed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Yeah, the Parrot AST needs more documentation.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re devoting a lot of time to it. Obra mentioned that you&amp;rsquo;ve cleared most of your paying projects out of the way for the time being. What&amp;rsquo;s the eventual end?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; And whither then? I cannot say :). As you mentioned, I&amp;rsquo;ve diverted most of my paying projects away so I should have at least 6 months for Pugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; How about in the next month?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; This month should see robust semantics for basic operations, the beginning of classes and objects, and many real modules hooks to Haskell-side libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; I&amp;rsquo;ll do T::B then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Oh and Pugs hands out committer bit liberally so if you want to do T::B, I&amp;rsquo;ll make you a committer :). You can start now actually. Just write imaginary Perl 6 code, and we&amp;rsquo;ll figure out how to make it run. Most of the &lt;em&gt;examples/*&lt;/em&gt; started that way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chromatic:&lt;/strong&gt; Ah, I&amp;rsquo;ll take a look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autrijus:&lt;/strong&gt; Oh. Right. I was quoting Abigail.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Programming in Perl 5 is like exploring a large medieval castle, surrounded by a dark, mysterious forest, with something new and unexpected around each corner. There are dragons to be conquered, maidens to be rescued, and holy grails to be quested for. Lots of fun.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Perl 6 looks like a Louis-XVI castle and garden to me. Straight, symmetric, and bright. There are wigs to be powdered, minuets to be danced, all quite boring.&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I, for one, am happy for Perl to move from the dark age to the age of enlightenment. I think many camelfolks and lambdafolks share the same sentiment :).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic is the author of &lt;a href=&#34;http://onyxneon.com/books/modern_perl/&#34;&gt;Modern Perl&lt;/a&gt;. In his spare time, he has been working on &lt;a href=&#34;https://trendshare.org/how-to-invest/&#34;&gt;helping novices understand stocks and investing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

