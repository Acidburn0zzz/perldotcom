<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perldotcom on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/perldotcom/</link>
    <description>Recent content in Perldotcom on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Apr 2010 06:00:01 -0800</lastBuildDate>
    <atom:link href="/authors/perldotcom/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Website in a Minute Using Dancer, the Effortless Web Framework</title>
      <link>http://localhost:1313/pub/2010/04/a-website-in-a-minute-using-dancer-the-effortless-web-framework.html/</link>
      <pubDate>Tue, 06 Apr 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/04/a-website-in-a-minute-using-dancer-the-effortless-web-framework.html/</guid>
      <description>

&lt;p&gt;While Perl has a few heavy hitters in the web framework world (&lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Jifty&#34;&gt;Jifty&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/CGI::Application&#34;&gt;CGI::App&lt;/a&gt;), sometimes they can seem like overkill. When writing a light web service or a high-end but not-as-complex website, you might want something smaller and simpler. This is where &lt;a href=&#34;http://www.perldancer.org/&#34;&gt;Dancer&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer&lt;/a&gt; is a web framework whose purpose is to let you get a website up and running within a minute, if not sooner. It started as a port of Ruby&amp;rsquo;s &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; but has since took its own path.&lt;/p&gt;

&lt;p&gt;Dancer supports &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt;/&lt;a href=&#34;http://plackperl.org/&#34;&gt;PSGI&lt;/a&gt; from an early version and has a built-in scaffolding script to help you get up and running within seconds. It creates deployment scripts for you, includes a guide for deployment situations to help you configure your webserver (whether &lt;a href=&#34;http://www.danga.com/perlbal&#34;&gt;Perlbal&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt;, &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;Lighttpd&lt;/a&gt; or anything else you might care to use) and has a default clean design to help you prototype your website faster.&lt;/p&gt;

&lt;h2 id=&#34;dancing&#34;&gt;&lt;strong&gt;Dancing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The best way to learn, understand, and fall in love with Dancer is to get on the dance floor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ cpan Dancer # or cpanp, or cpanm
    $ dancer -a MyApp
    + ./MyApp
    + MyApp/views
    + MyApp/views/index.tt
    + MyApp/views/layouts
    + MyApp/views/layouts/main.tt
    + MyApp/environments
    + MyApp/environments/development.yml
    + MyApp/environments/production.yml
    + MyApp/config.yml
    + MyApp/app.psgi
    + MyApp/MyApp.pm
    + MyApp/MyApp.pl
    + MyApp/public
    + MyApp/public/css
    + MyApp/public/css/style.css
    + MyApp/public/css/error.css
    + MyApp/public/images
    + MyApp/public/404.html
    + MyApp/public/dispatch.fcgi
    + MyApp/public/dispatch.cgi
    + MyApp/public/500.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;dancer&lt;/code&gt; application creates a &lt;em&gt;views&lt;/em&gt; folder, which contains layout and templates. It contains sane defaults you can use to start. It also creates a &lt;em&gt;config.yaml&lt;/em&gt; file and an &lt;em&gt;environments&lt;/em&gt; folder for environment-specific configurations. &lt;em&gt;MyApp.pm&lt;/em&gt; and &lt;em&gt;MyApp.pl&lt;/em&gt; are the main application files. &lt;em&gt;MyApp.pl&lt;/em&gt; includes a built-in webserver for the development (or even deployment!) of your application. The &lt;em&gt;public&lt;/em&gt; folder contains default CSS and images.&lt;/p&gt;

&lt;p&gt;This directory tree includes a few other interesting files; these are dispatchers for various backends. The PSGI dispatcher is &lt;em&gt;app.psgi&lt;/em&gt;. The CGI and FCGI dispatchers are &lt;em&gt;public/dispatch.cgi&lt;/em&gt; and &lt;em&gt;public/dispatch.fcgi&lt;/em&gt;, respectively.&lt;/p&gt;

&lt;p&gt;Look in &lt;em&gt;MyApp/MyApp.pm&lt;/em&gt;. Dancing really is this simple!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package MyApp;
    use Dancer;

    get &#39;/&#39; =&amp;gt; sub {
        template &#39;index&#39;;
    };

    true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this all mean?&lt;/p&gt;

&lt;h2 id=&#34;routes&#34;&gt;&lt;strong&gt;Routes&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Dancer uses the notion of &lt;em&gt;routes&lt;/em&gt; to specify the paths your users might take in your website. All you need in order to write a Dancer application is to define routes. Routes are not only simple, but concise and versatile. They support variables (named matching, wildcard matching), regular expressions and even conditional matching.&lt;/p&gt;

&lt;p&gt;Here are a few examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get &#39;/&#39; =&amp;gt; sub {
        return &#39;hello world!&#39;;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This route defines the root path of the application. If someone reaches &lt;a href=&#34;http://example.com/&#34;&gt;http://example.com/&lt;/a&gt;, it will match this route.&lt;/p&gt;

&lt;p&gt;The word &lt;code&gt;get&lt;/code&gt; signifies the HTTP method (GET) for which the path exists. If you use a web form, you need a route for a POST method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    post &#39;/user/add/&#39; =&amp;gt; sub {
        # create a user using the data from the form
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few more methods (&lt;strong&gt;del&lt;/strong&gt; for &lt;em&gt;DELETE&lt;/em&gt;, &lt;strong&gt;put&lt;/strong&gt; for &lt;em&gt;PUT&lt;/em&gt;). You can also use &lt;code&gt;any&lt;/code&gt; to provide a single route for all HTTP methods or for several specific methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    any [&#39;get&#39;, &#39;post&#39;] =&amp;gt; sub {
        # both post and get will reach here!
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables are clean and simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get &#39;/user/view/:username/&#39; =&amp;gt; sub {
        my $username = params-&amp;gt;{username};
        template &#39;users&#39; =&amp;gt; { username =&amp;gt; $username };
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This route matches &lt;a href=&#34;http://example.com/user/view/variable/&#34;&gt;http://example.com/user/view/variable/&lt;/a&gt;, while &lt;em&gt;variable&lt;/em&gt; can be of any type.&lt;/p&gt;

&lt;p&gt;Of course, you can write a more complex wildcard matching:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get &#39;/download/*.*&#39; =&amp;gt; sub {
        # we extract the wild card matching using splat
        my ( $file, $ext ) = splat;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you feel rambunctious, you can define a regular expression:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get r( &#39;/hello/([\w]+)&#39; ) =&amp;gt; sub {
        my ($name) = splat;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in these examples, the &lt;code&gt;splat&lt;/code&gt; keyword returns the values that the wildcards (the &lt;code&gt;*&lt;/code&gt; used in routes) or regular expressions (declared with &lt;code&gt;r()&lt;/code&gt;) match. As a convenience, note also that you do &lt;em&gt;not&lt;/em&gt; have to escape the forward slash regex delimiters used in &lt;code&gt;r()&lt;/code&gt;; Dancer escapes them for you.&lt;/p&gt;

&lt;h2 id=&#34;multiple-routes&#34;&gt;&lt;strong&gt;Multiple Routes&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When writing many routes, you might find it easier to separate them to different files according to their prefixes. Dancer provides &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; to help you with that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # in main Dancer application:
    load &#39;UserRoutes.pm&#39;;

    # in UserRoutes.pm:
    use Dancer &#39;:syntax&#39;; # importing just the syntax to create routes
    prefix &#39;/user&#39;;

    get &#39;/view/&#39;   =&amp;gt; sub { ... };
    get &#39;/edit/&#39;   =&amp;gt; sub { ... };
    get &#39;/delete/&#39; =&amp;gt; sub { ... };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These will match &lt;a href=&#34;http://example.com/user/view/&#34;&gt;http://example.com/user/view/&lt;/a&gt;, &lt;a href=&#34;http://example.com/user/edit/&#34;&gt;http://example.com/user/edit/&lt;/a&gt; and &lt;a href=&#34;http://example.com/user/delete/&#34;&gt;http://example.com/user/delete/&lt;/a&gt;, respectively.&lt;/p&gt;

&lt;h2 id=&#34;built-for-scalability&#34;&gt;&lt;strong&gt;Built for scalability&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Dancer has a built-in route caching mechanism, making sure that even when you have a lot of routes, it will be able to serve them at almost the same speed as though you had only a few routes. This means that even if you have 600 routes, you do not have to worry about your application being slow!&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Dancer supports internal variables. Declare them with &lt;code&gt;var&lt;/code&gt;, and you can later fetch them inside your routes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var waiter =&amp;gt; &#39;sawyer&#39;;

    get &#39;/welcome/&#39; =&amp;gt; sub {
        my $name = vars-&amp;gt;{waiter};
        return &amp;quot;Hi, I&#39;m $name and I&#39;ll be your waiter this evening.&amp;quot;;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filters&#34;&gt;&lt;strong&gt;Filters&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Sometimes you want to be able to specify code to run before any route. &lt;a href=&#34;https://metacpan.org/pod/KiokuDB&#34;&gt;KiokuDB&lt;/a&gt;, for example, requires you to make a scope whenever you want to work with the database. This is easy to automate with the &lt;code&gt;before&lt;/code&gt; filter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    before sub {
        var scope =&amp;gt; $dir-&amp;gt;new_scope;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another common technique is to verify a session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    before sub {
        if ( !session(&#39;user&#39;) &amp;amp;&amp;amp; request-&amp;gt;path_info !~ m{^/login} ) {
            # Pass the original path requested along to the handler:
            var requested_path =&amp;gt; request-&amp;gt;path_info;
            request-&amp;gt;path_info(&#39;/login&#39;);
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;templates&#34;&gt;&lt;strong&gt;Templates&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Dancer will return to the user agent whatever you return from a route, just like PSGI does. &amp;ldquo;Hello, world!&amp;rdquo; in Dancer is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get &#39;/&#39; =&amp;gt; sub { &#39;Hello, world!&#39; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plain text isn&amp;rsquo;t always what you want, so Dancer has powerful support for templates. There are various template engines available (&lt;a href=&#34;https://metacpan.org/pod/Template&#34;&gt;Template::Toolkit&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Template::Tiny&#34;&gt;Template::Tiny&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Tenjin&#34;&gt;Tenjin&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Text::Haml&#34;&gt;Text::Haml&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Mason&#34;&gt;Mason&lt;/a&gt;, to name a few). Dancer also provides a default simple template engine called &lt;a href=&#34;https://metacpan.org/pod/Dancer::Template::Simple&#34;&gt;Dancer::Template::Simple&lt;/a&gt;. This gives you a simple self-contained template engine at no additional cost!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;template&lt;/code&gt; keyword allows you to specify which template to process and which variables to pass to the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    get &#39;/user/view/:name&#39; =&amp;gt; sub {
        my $name = params-&amp;gt;{name};

        # Dancer adds .tt automatically, but this is configurable
        template &#39;show_user&#39; =&amp;gt; {
            name =&amp;gt; $name,
            user =&amp;gt; get_user($name),
        };
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dancer automatically supplies you an encompassing layout for your templates, much like &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template&lt;/a&gt;&amp;rsquo;s &lt;code&gt;WRAPPER&lt;/code&gt; option. This built-in template means you can use the layout with other template engines, such as &lt;a href=&#34;https://metacpan.org/pod/Template::Tiny&#34;&gt;Template::Tiny&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dancer accomplishes this by rendering two templates: the one you provided and a (configurable) layout template. The layout template gets the output of rendering your template as a &lt;code&gt;content&lt;/code&gt; variable, then embeds that content in the general page layout.&lt;/p&gt;

&lt;p&gt;The default templates that come with Dancer demonstrate this point very well. Here&amp;rsquo;s &lt;em&gt;main.tt&lt;/em&gt;, the default layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;!-- some default css --&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;% content %&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serializers-make-resting-easier&#34;&gt;&lt;strong&gt;Serializers make RESTing easier&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Serializers are a new feature in Dancer (available since version 1.170). They allow automatic serialization for your output in various forms (&lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/YAML&#34;&gt;YAML&lt;/a&gt;, or &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt;) to shorten the amount of code you have to write in your application.&lt;/p&gt;

&lt;p&gt;When programming a RESTful service, the JSON serializer cuts down much of your code by automatically serializing your output. This makes your server-side AJAX code much more efficient and less boilerplate code for you to write.&lt;/p&gt;

&lt;h2 id=&#34;file-uploads-are-fun&#34;&gt;&lt;strong&gt;File uploads are fun&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;File uploads exist since version 1.170. Within a route, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # several files
    my @files = request-&amp;gt;upload();

    # single file
    my $file  = request-&amp;gt;upload();

    # then you can do several things with that file
    $file-&amp;gt;copy_to(&#39;/my/upload/folder&#39;);
    my $fh       = $file-&amp;gt;file_handle;
    my $content  = $file-&amp;gt;content;
    my $filename = $file-&amp;gt;filename;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;easy-configuration&#34;&gt;&lt;strong&gt;Easy configuration&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;You can configure everything (logging, session handling, template layout, file locations) in Dancer using the main configuration file (&lt;em&gt;appdir/config.yml&lt;/em&gt;). There are configuration files for your specific environment (&lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt;) and you can provide environment-specific configurations in the corresponding file (&lt;em&gt;appdir/environments/development.yml&lt;/em&gt;, for example).&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;While Dancer is still evolving, it is already a production-ready simple-yet-powerful web framework lets you get from zero to web in record time. Put on your dancing shoes, define your steps, and bust a move!&lt;/p&gt;

&lt;p&gt;Dancer is available on the CPAN (&lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer&lt;/a&gt;), and &lt;a href=&#34;http://github.com/sukria/Dancer&#34;&gt;Dancer development takes place on Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Important Notice for Perl.com Readers About O&#39;Reilly RSS and Atom Feeds</title>
      <link>http://localhost:1313/pub/2005/08/15/syndication_update.html/</link>
      <pubDate>Mon, 15 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/15/syndication_update.html/</guid>
      <description>&lt;p&gt;O&amp;rsquo;Reilly Media, Inc. is rolling out a new syndication mechanism that provides greater control over the content we publish online. You&amp;rsquo;ll notice some improvements immediately, such as better standards compliance, graphical tiles accompanying article descriptions, and enclosure support for podcatching applications. We&amp;rsquo;ve tested the new feeds using a variety of popular newsreaders and aggregators, but we realize that there may be a few bumps along the way. If you experience problems, please don&amp;rsquo;t hesitate to send mail to &lt;a href=&#34;mailto:webmaster@oreilly.com&#34;&gt;webmaster@oreilly.com&lt;/a&gt;. Please include detail about your operating system and reader applications. We also welcome your suggestions. Thank you for your continued support of Perl.com.&lt;/p&gt;

&lt;p&gt;The following URLs represent Perl.com&amp;rsquo;s article and weblog content in a variety of popular formats:&lt;/p&gt;

&lt;p&gt;Atom 1.0&lt;br /&gt;
&lt;a href=&#34;http://www.oreillynet.com/pub/feed/16&#34;&gt;http://www.oreillynet.com/pub/feed/16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RSS 1.0&lt;br /&gt;
&lt;a href=&#34;http://www.oreillynet.com/pub/feed/16?format=rss1&#34;&gt;http://www.oreillynet.com/pub/feed/16?format=rss1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RSS 2.0&lt;br /&gt;
&lt;a href=&#34;http://www.oreillynet.com/pub/feed/16?format=rss2&#34;&gt;http://www.oreillynet.com/pub/feed/16?format=rss2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will begin automatically redirecting the existing feeds to the new feeds above, but we recommend that you update your feedreader&amp;rsquo;s subscription settings to ensure continuous and uninterrupted service.&lt;/p&gt;

&lt;p&gt;Thanks,
O&amp;rsquo;Reilly Media, Inc.&amp;rsquo;s Online Publishing Group&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Return to &lt;a href=&#34;http://localhost:1313/&#34;&gt;Perl.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cooking with Perl, Part 3</title>
      <link>http://localhost:1313/pub/2003/09/17/perlcookbook.html/</link>
      <pubDate>Wed, 17 Sep 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/09/17/perlcookbook.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: In this third and final batch of recipes excerpted from &lt;a href=&#34;http://www.oreilly.com/catalog/perlckbk2/index.html?CMP=IL7015&#34;&gt;Perl Cookbook&lt;/a&gt;, you&amp;rsquo;ll find solutions and code examples for extracting HTML table data, templating with HTML::Mason, and making simple changes to elements or text.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;sample-recipe-extracting-table-data&#34;&gt;Sample Recipe: Extracting Table Data&lt;/h3&gt;

&lt;h4 id=&#34;problem&#34;&gt;Problem&lt;/h4&gt;

&lt;p&gt;You have data in an HTML table, and you would like to turn that into a Perl data structure. For example, you want to monitor changes to an author&amp;rsquo;s CPAN module list.&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;Use the HTML::TableContentParser module from CPAN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use HTML::TableContentParser;
 
$tcp = HTML::TableContentParser-&amp;gt;new;
$tables = $tcp-&amp;gt;parse($HTML);
 
foreach $table (@$tables) {
  @headers = map { $_-&amp;gt;{data} } @{ $table-&amp;gt;{headers} };
  # attributes of table tag available as keys in hash
  $table_width = $table-&amp;gt;{width};
 
  foreach $row (@{ $tables-&amp;gt;{rows} }) {
    # attributes of tr tag available as keys in hash
    foreach $col (@{ $row-&amp;gt;{cols} }) {
      # attributes of td tag available as keys in hash
      $data = $col-&amp;gt;{data};
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;discussion&#34;&gt;Discussion&lt;/h4&gt;

&lt;p&gt;The HTML::TableContentParser module converts all tables in the HTML document into a Perl data structure. As with HTML tables, there are three layers of nesting in the data structure: the table, the row, and the data in that row.&lt;/p&gt;

&lt;p&gt;Each table, row, and data tag is represented as a hash reference. The hash keys correspond to attributes of the tag that defined that table, row, or cell. In addition, the value for a special key gives the contents of the table, row, or cell. In a table, the value for the &lt;code&gt;rows&lt;/code&gt; key is a reference to an array of rows. In a row, the &lt;code&gt;cols&lt;/code&gt; key points to an array of cells. In a cell, the &lt;code&gt;data&lt;/code&gt; key holds the HTML contents of the data tag.&lt;/p&gt;

&lt;p&gt;For example, take the following table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table width=&amp;quot;100%&amp;quot; bgcolor=&amp;quot;#ffffff&amp;quot;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;Larry &amp;amp;amp; Gloria&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Mountain View&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;California&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;b&amp;gt;Tom&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Boulder&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Colorado&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;Nathan &amp;amp;amp; Jenine&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Fort Collins&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Colorado&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;parse&lt;/code&gt; method returns this data structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
  {
    &#39;width&#39; =&amp;gt; &#39;100%&#39;,
    &#39;bgcolor&#39; =&amp;gt; &#39;#ffffff&#39;,
    &#39;rows&#39; =&amp;gt; [
               {
                &#39;cells&#39; =&amp;gt; [
                            { &#39;data&#39; =&amp;gt; &#39;Larry &amp;amp;amp; Gloria&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;Mountain View&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;California&#39; },
                           ],
                &#39;data&#39; =&amp;gt; &amp;quot;\n      &amp;quot;
               },
               {
                &#39;cells&#39; =&amp;gt; [
                            { &#39;data&#39; =&amp;gt; &#39;&amp;lt;b&amp;gt;Tom&amp;lt;/b&amp;gt;&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;Boulder&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;Colorado&#39; },
                           ],
                &#39;data&#39; =&amp;gt; &amp;quot;\n      &amp;quot;
               },
               {
                &#39;cells&#39; =&amp;gt; [
                            { &#39;data&#39; =&amp;gt; &#39;Nathan &amp;amp;amp; Jenine&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;Fort Collins&#39; },
                            { &#39;data&#39; =&amp;gt; &#39;Colorado&#39; },
                           ],
                &#39;data&#39; =&amp;gt; &amp;quot;\n      &amp;quot;
               }
              ]
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data tags still contain tags and entities. If you don&amp;rsquo;t want the tags and entities, remove them by hand using techniques from &amp;ldquo;Extracting or Removing HTML Tags.&amp;rdquo;&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;div class=&#34;secondary&#34;&gt;
&lt;h4 id=&#34;previous-articles-in-this-series&#34;&gt;Previous Articles in this Series&lt;/h4&gt;
&lt;p&gt;• &lt;a href=&#34;http://localhost:1313/pub/2003/08/21/perlcookbook.html&#34;&gt;Cooking with Perl&lt;/a&gt;&lt;br /&gt;
• &lt;a href=&#34;http://localhost:1313/pub/2003/09/03/perlcookbook.html&#34;&gt;Cooking with Perl, Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;http://admin.oreillynet.com/catalog/perlckbk2/excerpts/ch20.html#77026&#34;&gt;Example 20-11&lt;/a&gt; fetches a particular CPAN author&amp;rsquo;s page and displays in plain text the modules they own. You could use this as part of a system that notifies you when your favorite CPAN authors do something new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 20-11:&lt;/strong&gt; &lt;strong&gt;Dump modules for a particular CPAN author&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl -w
  # dump-cpan-modules-for-author - display modules a CPAN author owns
  use LWP::Simple;
  use URI;
  use HTML::TableContentParser;
  use HTML::Entities;
  use strict;
  our $URL = shift || &#39;http://search.cpan.org/author/TOMC/&#39;;
  my $tables = get_tables($URL);
  my $modules = $tables-&amp;gt;[4];    # 5th table holds module data
  foreach my $r (@{ $modules-&amp;gt;{rows} }) {
    my ($module_name, $module_link, $status, $description) =
        parse_module_row($r, $URL);
    print &amp;quot;$module_name &amp;lt;$module_link&amp;gt;\n\t$status\n\t$description\n\n&amp;quot;;
  }
  sub get_tables {
    my $URL = shift;
    my $page = get($URL);
    my $tcp = new HTML::TableContentParser;
    return $tcp-&amp;gt;parse($page);
  }
  sub parse_module_row {
    my ($row, $URL) = @_;
    my ($module_html, $module_link, $module_name, $status, $description);
    # extract cells
    $module_html = $row-&amp;gt;{cells}[0]{data};  # link and name in HTML
    $status      = $row-&amp;gt;{cells}[1]{data};  # status string and link
    $description = $row-&amp;gt;{cells}[2]{data};  # description only
    $status =~ s{&amp;lt;.*?&amp;gt;}{  }g; # naive link removal, works on this simple HTML
    # separate module link and name from html
    ($module_link, $module_name) = $module_html =~ m{href=&amp;quot;(.*?)&amp;quot;.*?&amp;gt;(.*)&amp;lt;}i;
    $module_link = URI-&amp;gt;new_abs($module_link, $URL); # resolve relative links
    # clean up entities and tags
    decode_entities($module_name);
    decode_entities($description);
    return ($module_name, $module_link, $status, $description);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;see-also&#34;&gt;See Also&lt;/h4&gt;

&lt;p&gt;The documentation for the CPAN module &lt;a href=&#34;https://metacpan.org/pod/HTML::TableContentParser&#34;&gt;HTML::TableContentParser&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sample-recipe-templating-with-html-mason&#34;&gt;Sample Recipe: Templating with HTML::Mason&lt;/h3&gt;

&lt;h3 id=&#34;problem-1&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to separate presentation (HTML formatting) from logic (Perl code) in your program. Your web site has a lot of components with only slight variations between them. You&amp;rsquo;d like to abstract out common elements and build your pages from templates without having a lot of &amp;ldquo;if I&amp;rsquo;m in this page, then print this; else if I&amp;rsquo;m in some other page &amp;hellip; &amp;rdquo; conditional statements in a single master template.&lt;/p&gt;

&lt;h4 id=&#34;solution-1&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;Use HTML::Mason components and inheritance.&lt;/p&gt;

&lt;h4 id=&#34;discussion-1&#34;&gt;Discussion&lt;/h4&gt;

&lt;p&gt;HTML::Mason (also simply called Mason) offers the power of Perl in templates. The basic unit of a web site built with Mason is the component&amp;ndash;a file that produces output. The file can be HTML, Perl, or a mixture of both. Components can take arguments and execute arbitrary Perl code. Mason has many features, documented at &lt;a href=&#34;http://masonhq.com/&#34;&gt;http://masonhq.com/&lt;/a&gt; and in Embedding Perl in HTML with Mason by Dave Rolsky and Ken Williams (O&amp;rsquo;Reilly; online at &lt;a href=&#34;http://masonbook.com/&#34;&gt;http://masonbook.com/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Mason works equally well with CGI, mod_perl, and non-web programs. For the purposes of this recipe, however, we look at how to use it with mod_perl. The rest of this recipe contains a few demonstrations to give you a feel for what you can do with Mason and how your site will be constructed. There are more tricks, traps, and techniques for everything we discuss, though, so be sure to visit the web site and read the book for the full story.&lt;/p&gt;

&lt;h5 id=&#34;configuration&#34;&gt;Configuration&lt;/h5&gt;

&lt;p&gt;Install the HTML-Mason distribution from CPAN and add the following to your &lt;em&gt;httpd.conf&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PerlModule HTML::Mason::ApacheHandler
&amp;lt;Location /mason&amp;gt;
  SetHandler perl-script
  PerlHandler HTML::Mason::ApacheHandler
  DefaultType text/html
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells mod_perl that every URL that starts with &lt;code&gt;/mason&lt;/code&gt; is handled by Mason. So if you request &lt;code&gt;/mason/hello.html&lt;/code&gt;, the file &lt;em&gt;mason/hello.html&lt;/em&gt; in your document directory will be compiled and executed as a Mason component. The DefaultType directive lets you omit the &lt;em&gt;.html&lt;/em&gt; from component names.&lt;/p&gt;

&lt;p&gt;Next create a directory for Mason to cache the compiled components in. Mason does this to speed up execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $SERVER_ROOT
mkdir mason
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then make a &lt;em&gt;mason&lt;/em&gt; directory for components to live in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $DOCUMENT_ROOT
mkdir mason
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you&amp;rsquo;re ready for &amp;ldquo;Hello, World&amp;rdquo;. Put this in &lt;em&gt;mason/hello&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, &amp;lt;% (&amp;quot;World&amp;quot;, &amp;quot;Puny Human&amp;quot;)[rand 2] %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Apache and load up the &lt;em&gt;mason/hello&lt;/em&gt; page. If you reload it, you should see &amp;ldquo;Hello, World&amp;rdquo; and &amp;ldquo;Hello, Puny Human&amp;rdquo; randomly. If not, look at the Mason FAQ (&lt;a href=&#34;http://www.masonhq.com/docs/faq/&#34;&gt;http://www.masonhq.com/docs/faq/&lt;/a&gt;), which answers most commonly encountered problems.&lt;/p&gt;

&lt;h5 id=&#34;basic-mason-syntax&#34;&gt;Basic Mason syntax&lt;/h5&gt;

&lt;p&gt;There are four types of new markup in Mason components: substitutions, Perl code, component calls, and block tags. You saw a substitution in the &amp;ldquo;Hello World&amp;rdquo; example: &lt;code&gt;&amp;lt;% ...  %&amp;gt;&lt;/code&gt; evaluates the contents as Perl code and inserts the result into the surrounding text.&lt;/p&gt;

&lt;p&gt;Perl code is marked with a &lt;code&gt;%&lt;/code&gt; at the start of the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% $now = localtime;   # embedded Perl
This page was generated on &amp;lt;% $now %&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because substitutions can be almost any Perl code you like, this could have been written more simply as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This page was generated on &amp;lt;% scalar localtime %&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If either of these variations were saved in &lt;em&gt;footer.mas&lt;/em&gt;, you could include it simply by saying:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;amp; footer.mas &amp;amp;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example of a component call&amp;ndash;Mason runs the component and inserts its result into the document that made the call.&lt;/p&gt;

&lt;p&gt;Block tags define different regions of your component. &lt;code&gt;&amp;lt;%perl&amp;gt; ... &amp;lt;/%perl&amp;gt;&lt;/code&gt; identifies Perl code. While &lt;code&gt;%&lt;/code&gt; at the start of a line indicates that just that line is Perl code, you can have any number of lines in a &lt;code&gt;&amp;lt;%perl&amp;gt;&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;&amp;lt;%init&amp;gt; ... &amp;lt;/%init&amp;gt;&lt;/code&gt; block is like an INIT block in Perl. The code in the block is executed before the main body of code. It lets you store definitions, initialization, database connections, etc. at the bottom of your component, where they&amp;rsquo;re out of the way of the main logic.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;%args&amp;gt; ... &amp;lt;/%args&amp;gt;&lt;/code&gt; block lets you define arguments to your component, optionally with default values. For example, here&amp;rsquo;s &lt;em&gt;greet.mas&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%args&amp;gt;
   $name =&amp;gt; &amp;quot;Larry&amp;quot;
   $town =&amp;gt; &amp;quot;Mountain View&amp;quot;
&amp;lt;/%args&amp;gt;
Hello, &amp;lt;% $name %&amp;gt;.  How&#39;s life in &amp;lt;% $town %&amp;gt;?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;amp; greet.mas &amp;amp;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;emits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, Larry.  How&#39;s life in Mountain View?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can provide options on the component call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;amp; greet.mas, name =&amp;gt; &amp;quot;Nat&amp;quot;, town =&amp;gt; &amp;quot;Fort Collins&amp;quot; &amp;amp;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That emits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, Nat.  How&#39;s life in Fort Collins?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because there are default values, you can supply only some of the arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;amp; greet.mas, name =&amp;gt; &amp;quot;Bob&amp;quot; &amp;amp;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That emits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, Bob.  How&#39;s life in Mountain View?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arguments are also how Mason components access form parameters. Take this form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;compliment&amp;quot;&amp;gt;
  How old are you?  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age&amp;quot;&amp;gt; &amp;lt;br /&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;em&gt;compliment&lt;/em&gt; component that could take that parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%args&amp;gt;
  $age
&amp;lt;/%args&amp;gt;
Hi.  Are you really &amp;lt;% $age %&amp;gt;?  You don&#39;t look it!
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;objects&#34;&gt;Objects&lt;/h5&gt;

&lt;p&gt;All Mason components have access to a &lt;code&gt;$m&lt;/code&gt; variable, which contains an HTML::Mason::Request object. Methods on this object give access to Mason features. For example, you can redirect with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$m-&amp;gt;redirect($URL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$r&lt;/code&gt; variable is the mod_perl request object, so you have access to the information and functions of Apache from your Mason handlers. For example, you can discover the client&amp;rsquo;s IP address with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ip = $r-&amp;gt;connection-&amp;gt;remote_ip;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;autohandlers&#34;&gt;Autohandlers&lt;/h5&gt;

&lt;p&gt;When a page is requested through Mason, Mason can do more than simply execute the code in that page. Mason inspects each directory between the component root and the requested page, looking for components called &lt;em&gt;autohandler&lt;/em&gt;. This forms a &lt;em&gt;wrapping chain&lt;/em&gt;, with the top-level autohandler at the start of the chain and the requested page at the end. Mason then executes the code at the start of the chain. Each autohandler can say &amp;ldquo;insert the output of the next component in the chain here.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Imagine a newspaper site. Some parts don&amp;rsquo;t change, regardless of which article you&amp;rsquo;re looking at: the banner at the top, the random selection of ads, the list of sections down the lefthand side. However, the actual article text varies from article to article. Implement this in Mason with a directory structure like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/sports
/sports/autohandler
/sports/story1
/sports/story2
/sports/story3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The individual story files contain only the text of each story. The autohandler builds the page (the banner, the ads, the navigation bar), and when it wants to insert the content of the story, it says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% $m-&amp;gt;call_next;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Mason to call the next component in the chain (the story) and insert its output here.&lt;/p&gt;

&lt;p&gt;The technique of having a chain of components is called &lt;em&gt;inheritance&lt;/em&gt;, and autohandlers aren&amp;rsquo;t the only way to do it. In a component, you can designate a parent with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%flags&amp;gt;
  inherit = &#39;parent.mas&#39;
&amp;lt;/%flags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This lets you have different types of content in the one directory, and each contained component gets to identify its surrounding page (its parent).&lt;/p&gt;

&lt;h5 id=&#34;dhandlers&#34;&gt;Dhandlers&lt;/h5&gt;

&lt;p&gt;Sometimes it&amp;rsquo;s nice to provide the illusion of a directory full of pages, when in reality they are all dynamically generated. For example, stories kept in a database could be accessed through URLs like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/sports/1
/sports/2
/sports/3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Mason way to dynamically generate the pages at these URLs is with a component called &lt;em&gt;dhandler&lt;/em&gt; in the &lt;em&gt;sports&lt;/em&gt; directory. The &lt;em&gt;dhandler&lt;/em&gt; component accesses the name of the missing page (&lt;em&gt;123&lt;/em&gt; in this case) by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$m-&amp;gt;dhandler_arg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could then use this to retrieve the story from the database and insert it into a page template.&lt;/p&gt;

&lt;h4 id=&#34;see-also-1&#34;&gt;See Also&lt;/h4&gt;

&lt;p&gt;Recipe 15.11 in mod_perl Developer&amp;rsquo;s Cookbook; Embedding Perl in HTML with Mason; &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;http://www.masonhq.com/&lt;/a&gt; and &lt;a href=&#34;http://www.masonbook.com/&#34;&gt;http://www.masonbook.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sample-recipe-making-simple-changes-to-elements-or-text&#34;&gt;Sample Recipe: Making Simple Changes to Elements or Text&lt;/h3&gt;

&lt;h3 id=&#34;problem-2&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to filter some XML. For example, you want to make substitutions in the body of a document, or add a price to every book described in an XML document, or you want to change &lt;code&gt;&amp;lt;book  id=&amp;quot;1&amp;quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;book&amp;gt;  &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;solution-2&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;Use the XML::SAX::Machines module from CPAN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w
 
use MySAXFilter1;
use MySAXFilter2;
use XML::SAX::ParserFactory;
use XML::SAX::Machines qw(Pipeline);
 
my $machine = Pipeline(MySAXFilter1 =&amp;gt; MySAXFilter2); # or more
$machine-&amp;gt;parse_uri($FILENAME);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a handler, inheriting from XML::SAX::Base as in &amp;ldquo;Parsing XML into SAX Events,&amp;rdquo; then whenever you need a SAX event, call the appropriate handler in your superclass. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$self-&amp;gt;SUPER::start_element($tag_struct);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;discussion-2&#34;&gt;Discussion&lt;/h4&gt;

&lt;p&gt;A SAX filter accepts SAX events and triggers new ones. The XML::SAX::Base module detects whether your handler object is called as a filter. If so, the XML::SAX::Base methods pass the SAX events onto the next filter in the chain. If your handler object is not called as a filter, then the XML::SAX::Base methods consume events but do not emit them. This makes it almost as simple to write events as it is to consume them.&lt;/p&gt;

&lt;p&gt;The XML::SAX::Machines module chains the filters for you. Import its &lt;code&gt;Pipeline&lt;/code&gt; function, then say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $machine = Pipeline(Filter1 =&amp;gt; Filter2 =&amp;gt; Filter3 =&amp;gt; Filter4);
$machine-&amp;gt;parse_uri($FILENAME);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SAX events triggered by parsing the XML file go to Filter1, which sends possibly different events to Filter2, which in turn sends events to Filter3, and so on to Filter4. The last filter should print or otherwise do something with the incoming SAX events. If you pass a reference to a typeglob, XML::SAX::Machines writes the XML to the filehandle in that typeglob.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://admin.oreillynet.com/catalog/perlckbk2/excerpts/ch22.html#45625&#34;&gt;Example 22-5&lt;/a&gt; shows a filter that turns the &lt;code&gt;id&lt;/code&gt; attribute in &lt;code&gt;book&lt;/code&gt; elements from the XML document in Example 22-1 into a new &lt;code&gt;id&lt;/code&gt; element. For example, &lt;code&gt;&amp;lt;book id=&amp;quot;1&amp;quot;&amp;gt;&lt;/code&gt; becomes &lt;code&gt;&amp;lt;book&amp;gt;&amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;45625&#34;&gt;Example 22-5:&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;filters-rewriteids&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package RewriteIDs;
# RewriteIDs.pm -- turns &amp;quot;id&amp;quot; attributes into elements
 
use base qw(XML::SAX::Base);
 
my $ID_ATTRIB = &amp;quot;{  }id&amp;quot;;   # the attribute hash entry we&#39;re interested in
 
sub start_element {
    my ($self, $data) = @_;
 
    if ($data-&amp;gt;{Name} eq &#39;book&#39;) {
        my $id = $data-&amp;gt;{Attributes}{$ID_ATTRIB}{Value};
        delete $data-&amp;gt;{Attributes}{$ID_ATTRIB};
        $self-&amp;gt;SUPER::start_element($data);
 
        # make new element parameter data structure for the &amp;lt;id&amp;gt; tag
        my $id_node = {  };
        %$id_node = %$self;
        $id_node-&amp;gt;{Name} = &#39;id&#39;;     # more complex if namespaces involved
        $id_node-&amp;gt;{Attributes} = {  };
 
        # build the &amp;lt;id&amp;gt;$id&amp;lt;/id&amp;gt;
        $self-&amp;gt;SUPER::start_element($id_node);
        $self-&amp;gt;SUPER::characters({ Data =&amp;gt; $id });
        $self-&amp;gt;SUPER::end_element($id_node);
    } else {
        $self-&amp;gt;SUPER::start_element($data);
    }
}
 
1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://admin.oreillynet.com/catalog/perlckbk2/excerpts/ch22.html#15387&#34;&gt;Example 22-6&lt;/a&gt; is the stub that uses XML::SAX::Machines to create the pipeline for processing &lt;em&gt;books.xml&lt;/em&gt; and print the altered XML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;15387&#34;&gt;Example 22-6:&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;filters-rewriteprog&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w
# rewrite-ids -- call RewriteIDs SAX filter to turn id attrs into elements
 
use RewriteIDs;
use XML::SAX::Machines qw(:all);
 
my $machine = Pipeline(RewriteIDs =&amp;gt; *STDOUT);
$machine-&amp;gt;parse_uri(&amp;quot;books.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of &lt;a href=&#34;http://admin.oreillynet.com/catalog/perlckbk2/excerpts/ch22.html#15387&#34;&gt;Example 22-6&lt;/a&gt; is as follows (truncated for brevity):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;book&amp;gt;&amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
    &amp;lt;title&amp;gt;Programming Perl&amp;lt;/title&amp;gt;
 ...
&amp;lt;book&amp;gt;&amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;
    &amp;lt;title&amp;gt;Perl &amp;amp;amp; LWP&amp;lt;/title&amp;gt;
 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save the XML to the file &lt;em&gt;new-books.xml&lt;/em&gt;, use the XML::SAX::Writer module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w
 
use RewriteIDs;
use XML::SAX::Machines qw(:all);
use XML::SAX::Writer;
 
my $writer = XML::SAX::Writer-&amp;gt;new(Output =&amp;gt; &amp;quot;new-books.xml&amp;quot;);
my $machine = Pipeline(RewriteIDs =&amp;gt; $writer);
$machine-&amp;gt;parse_uri(&amp;quot;books.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also pass a scalar reference as the &lt;code&gt;Output&lt;/code&gt; parameter to have the XML appended to the scalar; as an array reference to have the XML appended to the array, one array element per SAX event; or as a filehandle to have the XML printed to that filehandle.&lt;/p&gt;

&lt;h4 id=&#34;see-also-2&#34;&gt;See Also&lt;/h4&gt;

&lt;p&gt;The documentation for the modules XML::SAX::Machines and XML::SAX::Writer&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming GNOME Applications with Perl</title>
      <link>http://localhost:1313/pub/2000/10/gnome.html/</link>
      <pubDate>Mon, 16 Oct 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/10/gnome.html/</guid>
      <description>

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;a href=&#34;#architecture%20introduction&#34;&gt;Architecture Introduction&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#hello,%20world&#34;&gt;Hello, World&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#adding%20a%20menu%20bar&#34;&gt;Adding a Menu Bar&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#adding%20an%20about%20box&#34;&gt;Adding an About Box&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#adding%20more%20chrome&#34;&gt;Adding More Chrome&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#final%20program&#34;&gt;Final Program&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;GNOME is the Unix desktop. It&amp;rsquo;s a framework for writing graphical applications with Unix, providing drag-and-drop, interapplication communication, CORBA components (what&amp;rsquo;s called ``OLE&amp;rdquo; in the Windows world) a standard, good-looking interface, and all the other features that you&amp;rsquo;d expect from modern graphical applications.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s available for Perl, which means Perl programmers can create really neat applications, too. Except there&amp;rsquo;s one slight barrier &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    % perldoc GNOME
    No documentation found for &amp;quot;GNOME&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recently needed to write a GNOME application and hit this barrier, and I had to figure the whole thing out pretty much for myself. So, I decided to write these tutorials so that you, dear reader, don&amp;rsquo;t have to. In this first episode, we&amp;rsquo;ll create an extremely simple application, but one with a full, standard GNOME interface.&lt;/p&gt;

&lt;h3 id=&#34;span-id-architecture-introduction-architecture-introduction-span&#34;&gt;&lt;span id=&#34;architecture introduction&#34;&gt;Architecture Introduction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The GNOME is a complicated beast and made up of many different libraries and components. Thankfully, for the purposes of this tutorial and a reasonable amount of your programming, you only need to know about two parts: GTK+ and GNOME.&lt;/p&gt;

&lt;p&gt;You might have heard about Tk, the ``other&amp;rdquo; graphical toolkit Perl people use. Tk&amp;rsquo;s role in life is to do the laborious job of talking to the X server and telling it how to draw buttons, menus, controls and dialog boxes, and then firing off Perl routines in response to the user&amp;rsquo;s actions. It&amp;rsquo;s an intermediary between the raw power of the X server and the comfort of Perl.&lt;/p&gt;

&lt;p&gt;GTK+ performs a similar job, but it does so with arguably more beauty. GTK+ will be providing all the windows, the buttons, the text labels, the text inputs, all of the graphical elements for our application. It&amp;rsquo;ll also, critically, provide the main event loop that connects the user&amp;rsquo;s actions with our code.&lt;/p&gt;

&lt;p&gt;The Gnome library places another layer of abstraction over GTK+, providing us with higher level graphical objects, such as main application windows, about boxes, button panels, dialog boxes, color and font selection boxes, and it also gives us the ``glue&amp;rdquo; to interact with other parts of the GNOME environment - spelling checkers, calculators and resources from other applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s worth pointing out at this stage that there&amp;rsquo;s a Visual Basic style drag-and-drop IDE for the GNOME, called Glade. It can produce Perl code, and some of you may find it a lot easier to construct applications using that; however, you&amp;rsquo;d be advised to keep reading so that you can understand what the code that Glade produces actually does.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-hello-world-hello-world-span&#34;&gt;&lt;span id=&#34;hello, world&#34;&gt;Hello, World&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll show two versions of the classic ``Hello, World&amp;rdquo; application here: first, a version which just uses GTK+, and then a GNOME version.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the GTK+ version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   1 #!/usr/bin/perl -w
   2
   3 use strict;
   4 use Gnome;
   5 
   6 my $NAME = &#39;Hello World&#39;;
   7
   8 init Gnome $NAME;
   9
  10 my $w = new Gtk::Window -toplevel;
  11
  12 my $label = new Gtk::Label &amp;quot;Hello, world&amp;quot;;
  13 $w-&amp;gt;add($label);
  14
  15 show_all $w;
  16 
  17 main Gtk;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On line 4, we load the main Gnome module; this&amp;rsquo;ll load up the GTK+ module for us. Line 8 sets up everything we need in this session and registers the application. We pass the application&amp;rsquo;s name to the &lt;code&gt;init&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;On line 10, we create our main window. This is a top level window, meaning it&amp;rsquo;s not a sub-window of anything else. Next, we need to create the message label that&amp;rsquo;ll say ``Hello, world&amp;rdquo;; any text we want to place on a window has to be in a &lt;code&gt;Gtk::Label&lt;/code&gt; object, so we create an object, and put it in &lt;code&gt;$label&lt;/code&gt;. Now, as of line 12, this label isn&amp;rsquo;t doing anything - it&amp;rsquo;s created, but it doesn&amp;rsquo;t live anywhere. We want it to appear on our window, so we call the window&amp;rsquo;s &lt;code&gt;add&lt;/code&gt; method and add the label object.&lt;/p&gt;

&lt;p&gt;We next decide what we&amp;rsquo;re going to show at the start of the program. We&amp;rsquo;ll show everything the window and everything attached to it - in our case, the label. So, we call the window&amp;rsquo;s &lt;code&gt;show_all&lt;/code&gt; method. Note that this doesn&amp;rsquo;t actually put the window on the screen yet; it just dictates what gets shown initially.&lt;/p&gt;

&lt;p&gt;Finally, the statement that kicks off the action is &lt;code&gt;main Gtk;&lt;/code&gt; - this passes control over to GTK+&amp;rsquo;s main event loop, which first paints the window and the label on the screen and then waits for something to happen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once we&amp;rsquo;ve said &lt;code&gt;main Gtk;&lt;/code&gt; our program has given up control - everything that happens after that occurs in reaction to the user&amp;rsquo;s actions. Instead of the normal, procedural approach where we, as programmers, have control over what the program does, we now have to take a passive, reactive approach, providing responses to what the user does. The way we do this is through callbacks, and we&amp;rsquo;ll see examples of this later on. But it&amp;rsquo;s important to note that &lt;code&gt;main Gtk;&lt;/code&gt; is where our job finishes and GTK+&amp;rsquo;s job begins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, here&amp;rsquo;s the Gnome version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1  #!/usr/bin/perl -w
     2  
     3  use strict;
     4  use Gnome;
     5  
     6  my $NAME = &#39;Hello World&#39;;
     7  
     8  init Gnome $NAME;
     9  
    10  my $app = new Gnome::App $NAME, $NAME;
    11  
    12  my $label = new Gtk::Label &amp;quot;Hello, world&amp;quot;;
    13  $app-&amp;gt;set_contents($label);
    14  
    15  show_all $app;
    16  
    17  main Gtk;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s the same length, and most of it is the same. This is what we&amp;rsquo;ve changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    10  my $app = new Gnome::App $NAME, $NAME;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of creating a window, we&amp;rsquo;re now shifting up a level and saying that we&amp;rsquo;re creating an entire application. We pass the application&amp;rsquo;s name to the &lt;code&gt;new&lt;/code&gt; method twice - once as the window&amp;rsquo;s title, and once to register it with the GNOME environment.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve also changed the line which adds the label to the window:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    13  $app-&amp;gt;set_contents($label);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is it ``set contents&amp;rdquo; here and not add? The answer lies in the way GTK+ puts graphical elements (``widgets&amp;rdquo;) inside windows, which is based on the idea of containers. Simply put, you can only have one widget in a window; thankfully, some widgets can contain other widgets. What we&amp;rsquo;re saying above is that the main contents of this window, the one widget we&amp;rsquo;re allowed, is the label.&lt;/p&gt;

&lt;p&gt;Now, one thing you may have noticed if you&amp;rsquo;ve been exiting these examples using the ``Close&amp;rdquo; button on your window manager is that the Perl application doesn&amp;rsquo;t finish; we have to break out of it using &lt;code&gt;^C&lt;/code&gt; or similar. When a GNOME application receives notification from the window manager that it is to close, GNOME sends us a signal; not a true Unix signal which is implemented by the kernel, but a GNOME signal which is purely a feature of GNOME. We need to catch this signal and install a signal handler which cleanly shuts down the program. Here&amp;rsquo;s how to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $app = new Gnome::App $NAME, $NAME;
    signal_connect $app &#39;delete_event&#39;,
                         sub { Gtk-&amp;gt;main_quit; return 0 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re connecting a handler to the ``delete event&amp;rdquo; signal, which tells us to clean up and go home, and we catch it with an anonymous subroutine. This subroutine calls the &lt;code&gt;main_quit&lt;/code&gt; method of GTK+, which terminates the main loop.&lt;/p&gt;

&lt;p&gt;Now our application should cleanly close down. But it still doesn&amp;rsquo;t do much.&lt;/p&gt;

&lt;h3 id=&#34;span-id-adding-a-menu-bar-adding-a-menu-bar-span&#34;&gt;&lt;span id=&#34;adding a menu bar&#34;&gt;Adding a Menu Bar&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, the benefits of GNOME over GTK+ are that most of the standard things we expect of an application are ready-made for us. Let&amp;rsquo;s create some standard menus for our application. Add this after the &lt;code&gt;signal_connect&lt;/code&gt; line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $app-&amp;gt;create_menus(
        {type =&amp;gt; &#39;subtree&#39;,
         label =&amp;gt; &#39;_File&#39;,
         subtree =&amp;gt; [
                {type =&amp;gt; &#39;item&#39;,
                 label =&amp;gt; &#39;E_xit&#39;,
                 pixmap_type =&amp;gt; &#39;stock&#39;,
                 pixmap_info =&amp;gt; &#39;Menu_Quit&#39;
                }
                    ]
        },
        {type =&amp;gt; &#39;subtree&#39;,
         label =&amp;gt; &#39;_Help&#39;,
         subtree =&amp;gt; [
                {type =&amp;gt; &#39;item&#39;, 
                 label =&amp;gt; &#39;_About...&#39;,
                 pixmap_type =&amp;gt; &#39;stock&#39;,
                 pixmap_info =&amp;gt; &#39;Menu_About&#39;
                }
                    ]
        }
      );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass to &lt;code&gt;create_menus&lt;/code&gt; a series of anonymous hashes, one for each of the main menu tabs we want to create. The type of &lt;code&gt;subtree&lt;/code&gt; for each tab means that there will be other menus beneath this one. In the &lt;code&gt;label&lt;/code&gt; option, we put an underscore before the character which is to be the key accelerator for the menu item; &lt;code&gt;Alt-F&lt;/code&gt; will open the File menu. The &lt;code&gt;subtree&lt;/code&gt; option is an anonymous array of menu items; here, we only put one item in each of our two &lt;code&gt;subtree&lt;/code&gt; arrays and each item has an anonymous hash.&lt;/p&gt;

&lt;p&gt;For these hashes, the &lt;code&gt;type&lt;/code&gt; this time is &lt;code&gt;item&lt;/code&gt; - an ordinary menu item, rather than the start of a submenu. The menu items have little icons before the names. We use the stock GNOME icon library by saying that &lt;code&gt;pixmap_type&lt;/code&gt; is &lt;code&gt;&#39;stock&#39;&lt;/code&gt;, and we use the &lt;code&gt;Menu_Quit&lt;/code&gt; and &lt;code&gt;Menu_About&lt;/code&gt; to get standard quit and ``about box&amp;rdquo; icons suitable for display in menus.&lt;/p&gt;

&lt;p&gt;If you run your application again, you should see a menu bar. Now, want to see something really impressive? I said GNOME did all the work for you. Try this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   LANG=fr_FR perl hello.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well, the menus should appear - but this time translated into French. Where was the code for that? GNOME did it. Try a few others - &lt;code&gt;pt_PT&lt;/code&gt; for Portuguese, &lt;code&gt;de_DE&lt;/code&gt; for German, &lt;code&gt;el_GR&lt;/code&gt; (if you&amp;rsquo;ve got the fonts for it) for Greek. Magical!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one small problem, though: Our menu doesn&amp;rsquo;t do anything. Let us first fix that &lt;code&gt;Exit&lt;/code&gt; item since we already know how to shut down a GTK+ application. Change the item&amp;rsquo;s hash so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                {type =&amp;gt; &#39;item&#39;,
                 label =&amp;gt; &#39;E_xit&#39;,
                 pixmap_type =&amp;gt; &#39;stock&#39;,
                 pixmap_info =&amp;gt; &#39;Menu_Quit&#39;,
                 callback =&amp;gt; sub {Gtk-&amp;gt;main_quit; return 0 }
                }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;ve said is that when the menu item gets selected, GNOME should ``call us back&amp;rdquo; by executing the code we give it. We specify a subroutine reference to be called when the user selects the item.&lt;/p&gt;

&lt;h3 id=&#34;span-id-adding-an-about-box-adding-an-about-box-span&#34;&gt;&lt;span id=&#34;adding an about box&#34;&gt;Adding an About Box&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s fix up the other menu item by adding an about box. Once again, GNOME has done the work for us. We&amp;rsquo;ll add a callback to the &lt;code&gt;About...&lt;/code&gt; menu option, and we&amp;rsquo;ll make it a subroutine reference:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                {type =&amp;gt; &#39;item&#39;,
                 label =&amp;gt; &#39;_About...&#39;,
                 pixmap_type =&amp;gt; &#39;stock&#39;,
                 pixmap_info =&amp;gt; &#39;Menu_About&#39;,
                 callback =&amp;gt; \&amp;amp;about_box
                }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our subroutine will create and display the box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;           sub about_box {
               my $about = new Gnome::About $NAME, &amp;quot;v1.0&amp;quot;,
                  &amp;quot;(C) Simon Cozens, 2000&amp;quot;, [&amp;quot;Simon Cozens&amp;quot;],
                &amp;quot;This program is released under the same terms as Perl itself&amp;quot;;
             show $about;
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Gnome::About&lt;/code&gt; class gives us a ready-made about box: we just have to supply the name of our application, its version, copyright information, an anonymous array of the authors&amp;rsquo; names and any other comments. Then we &lt;code&gt;show&lt;/code&gt; the box just as we showed the main window before. When we click the ``OK&amp;rdquo; button, the window is automatically removed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-adding-more-chrome-adding-more-chrome-span&#34;&gt;&lt;span id=&#34;adding more chrome&#34;&gt;Adding More Chrome&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;GNOME applications also have two other distinctive interface features: a toolbar and a status bar. We&amp;rsquo;ll first add the toolbar. Put this after the menu code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $app-&amp;gt;create_toolbar(
    {
        type =&amp;gt; &#39;item&#39;,
        label =&amp;gt; &#39;Exit&#39;,
        pixmap_type =&amp;gt; &#39;stock&#39;,
        pixmap_info =&amp;gt; &#39;Quit&#39;,
        hint =&amp;gt; &amp;quot;Click here to quit&amp;quot;,
        callback =&amp;gt; sub { Gtk-&amp;gt;main_quit },
    }, {
        type =&amp;gt; &#39;item&#39;,
        label =&amp;gt; &#39;About...&#39;,
        pixmap_type =&amp;gt; &#39;stock&#39;,
        pixmap_info =&amp;gt; &#39;About&#39;,
        hint =&amp;gt; &amp;quot;More information about this app&amp;quot;,
        callback =&amp;gt; \&amp;amp;about_box
    }
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once more, we&amp;rsquo;re passing a series of anonymous hashes, and most of the entries should be familiar to you now. The &lt;code&gt;hint&lt;/code&gt; is what is displayed when the mouse pointer lingers over the button. Our callbacks and pixmaps are the same as before.&lt;/p&gt;

&lt;p&gt;Next, the status bar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $bar = new Gnome::AppBar 0,1,&amp;quot;user&amp;quot; ;
    $bar-&amp;gt;set_status(&amp;quot;   Welcome   &amp;quot;);

    $app-&amp;gt;set_statusbar( $bar );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we create a new &lt;code&gt;AppBar&lt;/code&gt; object, an application status bar. Then we write our initial status onto it using the &lt;code&gt;set_status&lt;/code&gt; method. Again, this bar now exists but it doesn&amp;rsquo;t appear on the screen as it doesn&amp;rsquo;t have a home. We connect it to the application using the app&amp;rsquo;s &lt;code&gt;set_statusbar&lt;/code&gt; method, and it&amp;rsquo;ll now appear at the bottom of our main window.&lt;/p&gt;

&lt;h3 id=&#34;span-id-final-program-final-program-span&#34;&gt;&lt;span id=&#34;final program&#34;&gt;Final Program&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s what you should have ended up with at the end of this tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/perl -w

    use strict;
    use Gnome;

    my $NAME = &#39;Hello World&#39;;

    init Gnome $NAME;

    my $app = new Gnome::App $NAME, $NAME;

    signal_connect $app &#39;delete_event&#39;, sub { Gtk-&amp;gt;main_quit; return 0 };

    $app-&amp;gt;create_menus(
               {type =&amp;gt; &#39;subtree&#39;,
                label =&amp;gt; &#39;_File&#39;,
                subtree =&amp;gt; [
                    {type =&amp;gt; &#39;item&#39;,
                     label =&amp;gt; &#39;E_xit&#39;,
                     pixmap_type =&amp;gt; &#39;stock&#39;,
                     pixmap_info =&amp;gt; &#39;Menu_Quit&#39;,
                     callback =&amp;gt; sub { Gtk-&amp;gt;main_quit; return 0 }
                    }
                       ]
               },
               {type =&amp;gt; &#39;subtree&#39;,
                label =&amp;gt; &#39;_Help&#39;,
                subtree =&amp;gt; [
                    {type =&amp;gt; &#39;item&#39;, 
                     label =&amp;gt; &#39;_About...&#39;,
                     pixmap_type =&amp;gt; &#39;stock&#39;,
                     pixmap_info =&amp;gt; &#39;Menu_About&#39;,
                     callback =&amp;gt; \&amp;amp;about_box
                    }
                       ]
               }
              );

    $app-&amp;gt;create_toolbar(
                 {
                  type =&amp;gt; &#39;item&#39;, 
                  label =&amp;gt; &#39;Exit&#39;, 
                  pixmap_type =&amp;gt; &#39;stock&#39;, 
                  pixmap_info =&amp;gt; &#39;Quit&#39;, 
                  hint =&amp;gt; &amp;quot;Click here to quit&amp;quot;,
                  callback =&amp;gt; sub { Gtk-&amp;gt;main_quit }, 
                 }, {
                 type =&amp;gt; &#39;item&#39;,
                 label =&amp;gt; &#39;About...&#39;, 
                 pixmap_type =&amp;gt; &#39;stock&#39;,
                 pixmap_info =&amp;gt; &#39;About&#39;,
                 hint =&amp;gt; &amp;quot;More information about this app&amp;quot;,
                 callback =&amp;gt; \&amp;amp;about_box
                }
                );

    my $label = new Gtk::Label &amp;quot;Hello, world&amp;quot;;
    $app-&amp;gt;set_contents($label);

    my $bar = new Gnome::AppBar 0,1,&amp;quot;user&amp;quot; ;
    $bar-&amp;gt;set_status(&amp;quot;   Welcome   &amp;quot;);
    $app-&amp;gt;set_statusbar( $bar );

    show_all $app;

    main Gtk;

    sub about_box {
      my $about = new Gnome::About $NAME, &amp;quot;v1.0&amp;quot;, 
      &amp;quot;(C) Simon Cozens, 2000&amp;quot;, [&amp;quot;Simon Cozens&amp;quot;], 
      &amp;quot;This program is released under the same terms as Perl itself&amp;quot;;
      show $about;
    }


=head1 Summary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we&amp;rsquo;ve now created our first application using GNOME/Perl. It complies with the GNOME interface standards, it&amp;rsquo;s got standard menus, a toolbar, a status bar and an about box. It looks, feels and acts like a real GNOME application, and all in about 70 lines of Perl.&lt;/p&gt;

&lt;p&gt;Next time, we&amp;rsquo;ll start to create a more useful application, a recipe organizer, and we&amp;rsquo;ll use some slightly more sophisticated widgets such as containers, input areas, scroll bars and list boxes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>White Camel Awards to be Presented at O&#39;Reilly&#39;s Perl Conference 3.0</title>
      <link>http://localhost:1313/pub/1999/06/whitecamel.html/</link>
      <pubDate>Mon, 28 Jun 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/06/whitecamel.html/</guid>
      <description>&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Coming soon --&lt;/strong&gt; our nomination form for the first White Camel Awards. Let us know who you think has made outstanding contributions to Perl Advocacy, Perl User Groups, and the Perl Community.&lt;br /&gt;
The White Camel awards will be presented at &lt;a href=&#34;http://conferences.oreilly.com/perl3/&#34;&gt;Perl Conference 3.0&lt;/a&gt; on August 24, 1999, during the Town Meeting.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;SEBASTOPOL, CA&amp;ndash;The rare white camel, prized by desert-dwellers, is the inspiration for a new award recognizing the Perl community&amp;rsquo;s &amp;ldquo;unsung heroes&amp;rdquo;&amp;ndash;those who have devoted extraordinary creativity, energy, and time to the non-technical work that supports Perl&amp;rsquo;s active and loyal user community. The White Camel awards will be presented to individuals who have made outstanding contributions to Perl Advocacy, Perl User Groups, and the Perl Community at O&amp;rsquo;Reilly&amp;rsquo;s Perl Conference 3.0 on August 24, 1999. The camel has come to symbolize Perl since it first appeared on the cover of O&amp;rsquo;Reilly &amp;amp; Associates&amp;rsquo; classic &amp;ldquo;Programming Perl&amp;rdquo; in 1991.&lt;/p&gt;

&lt;p&gt;Perl Mongers (&lt;a href=&#34;http://www.pm.org&#34;&gt;http://www.pm.org&lt;/a&gt;), a not-for-profit organization whose mission is to establish Perl user groups, conceived of and will administer the White Camel awards. Perl users will be able to nominate people for the awards at &lt;a href=&#34;https://web.archive.org/web/19990825110945/http://www.perl.com:80/pace/pub/whitecamel/newindex.html&#34;&gt;http://www.perl.com/whitecamel&lt;/a&gt; after July 8. The awards are sponsored by Perl Mongers, O&amp;rsquo;Reilly &amp;amp; Associates, and sourceXchange (&lt;a href=&#34;http://www.sourceXchange.com&#34;&gt;http://www.sourceXchange.com&lt;/a&gt;), a web-based marketplace for Open Source development.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Perl&amp;rsquo;s user community has had a huge role in its adoption and ongoing development,&amp;rdquo; said Madeline Schnapp, O&amp;rsquo;Reilly&amp;rsquo;s Perl Product Manager. &amp;ldquo;With a marketing budget of zero, the community has championed a technology that has greater market share than its well-funded proprietary competitors. We&amp;rsquo;re delighted that the Perl Mongers initiated the White Camel awards, and we&amp;rsquo;re proud to sponsor them.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;CONTACT: Sara Winge, O&amp;rsquo;Reilly &amp;amp; Associates, &lt;sup&gt;707&lt;/sup&gt;&amp;frasl;&lt;sub&gt;829&lt;/sub&gt;-0515x285, &lt;a href=&#34;mailto:sara@oreilly.com&#34;&gt;sara@oreilly.com&lt;/a&gt;, &lt;a href=&#34;http://www.oreilly.com&#34;&gt;http://www.oreilly.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XML::Parser Module Enables XML Development in Perl</title>
      <link>http://localhost:1313/pub/1998/11/xml.html/</link>
      <pubDate>Wed, 25 Nov 1998 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1998/11/xml.html/</guid>
      <description>&lt;p&gt;XML (Extensible Markup Language) is emerging as a core standard for Web development. Now a new Perl module (or extension) known as XML::Parser allows Perl programmers building applications to use XML, and provides an efficient, easy way to parse XML documents.&lt;/p&gt;

&lt;p&gt;XML::Parser is built upon a C library, expat, that is very fast and robust. Expat was authored by James Clark, a highly respected leader in the SGML/XML community.&lt;/p&gt;

&lt;p&gt;Perl, expat and XML::Parser are all Unicode-aware; that is, they read encoding declarations and perform necessary conversions into Unicode, a system for &amp;ldquo;the interchange, processing, and display of the written texts of the diverse languages of the modern world&amp;rdquo; (&lt;a href=&#34;http://www.unicode.org/&#34;&gt;&lt;strong&gt;http://www.unicode.org&lt;/strong&gt;&lt;/a&gt;). Thus a single XML document written in Perl can now contain Greek, Hebrew, Chinese and Russian in their proper scripts.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;XML::Parser makes it almost trivially easy for Perl programmers to process XML documents,&amp;rdquo; explained Larry Wall, who did the initial work on XML::Parser. Wall is the creator of Perl and Senior Programmer with O&amp;rsquo;Reilly &amp;amp; Associates. &amp;ldquo;More than that, it&amp;rsquo;s actually a repertoire of interfaces, each one optimized for a different style of processing.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The thing that excites me about the module is that it succeeds in combining the strengths of the best text processing language with the best hierarchical text representation,&amp;rdquo; Wall said.&lt;/p&gt;

&lt;p&gt;Tim Bray, one of the designers of XML and co-editor of the XML specification, demonstrated XML::Parser to an enthusiastic gathering during his tutorial at the recent XML conference in Chicago. One feature of the demonstration was how XML::Parser works equally well with both Windows NT and UNIX. The conference, attended by some 1500 people this year, is the central event in the XML calendar.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;XML::Parser insulates Perl programmers, both from the details of XML syntax, and the complexities of managing an XML parser,&amp;rdquo; explained Bray. &amp;ldquo;It allows Perl programmers to create robust, sophisticated XML processing modules while writing a bare minimum of code.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Last spring O&amp;rsquo;Reilly &amp;amp; Associates hosted a face-to-face meeting between Wall and Bray to discuss how Perl could support XML. The meeting resulted in a plan to make Perl the scripting language of choice for processing XML. According to Clark Cooper, who has been heavily involved in the XML::Parser work, &amp;ldquo;XML::Parser is the first milestone in that goal.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;A lot of what has to happen in business and between businesses &amp;ndash; documents, reports, invoices &amp;ndash; is structured information,&amp;rdquo; Dale Dougherty, CEO of O&amp;rsquo;Reilly affiliate Songline Studios, which hosts the xml.com Web site, explained. &amp;ldquo;There&amp;rsquo;s great value in being able to automate and integrate multiple sources of information in an application which still maintains security at the source, and XML::Parser makes these processes easier to implement.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As is usual in open source development efforts, a team of programmers cooperated to create the new module. Among the most involved were Wall; Bray; Dick Hardt, CTO and Founder of ActiveState Tool Corp.; and software engineer Clark Cooper.&lt;/p&gt;

&lt;p&gt;For Windows, XML::Parser is available as part of the ActivePerl package at &lt;a href=&#34;http://www.ActiveState.com&#34;&gt;&lt;strong&gt;ActiveState&lt;/strong&gt;&lt;/a&gt;. The XML::Parser package for Windows will be upgradeable when the next version comes out using Perl Package Manager, also included in ActivePerl. For UNIX, XML::Parser is available from the Comprehensive Perl Archive Network (CPAN) at&lt;/p&gt;

&lt;p&gt;Related information is available at &lt;a href=&#34;http://perl.oreilly.com/&#34;&gt;&lt;strong&gt;perl.oreilly.com&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.xml.com&#34;&gt;&lt;strong&gt;xml.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacPerl Gains Ground</title>
      <link>http://localhost:1313/pub/1998/06/macperl.html/</link>
      <pubDate>Wed, 03 Jun 1998 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1998/06/macperl.html/</guid>
      <description>

&lt;h3 id=&#34;new-macperl-cd-rom-available&#34;&gt;New MacPerl CD-ROM Available&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich Morin (&lt;a href=&#34;mailto:rdm@cfcl.com&#34;&gt;rdm@cfcl.com&lt;/a&gt;) of Prime Time Freeware has produced the &lt;a href=&#34;http://www.ptf.com/macperl/ptf_book/cdrom.html&#34;&gt;MacPerl CD-ROM&lt;/a&gt;, a distribution of the Perl for the Macintosh along with other Mac tools and documentation. I asked him about the MacPerl community and we were soon joined in email by Matthias Ulrich Neeracher (&lt;a href=&#34;mailto:neeri@iis.ee.ethz.ch&#34;&gt;neeri@iis.ee.ethz.ch&lt;/a&gt;), who is the person primarily responsible for porting Perl to the Macintosh.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-s-the-size-of-the-macperl-user-community-and-its-percentage-of-the-whole-perl-community&#34;&gt;What&amp;rsquo;s the size of the MacPerl user community and its percentage of the whole Perl community?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Small, but we&amp;rsquo;re hoping to change that a little! The MacPerl email list numbers under 2000, so the total user population is unlikely to be more than 5000, at present. This is far smaller than the size one might predict, based on the 25 million or so Macintosh users that are out there. Consequently, it is also a small percetage of the total Perl community.
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;MacPerl Resources&lt;/strong&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Prime Time Freeware&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.ptf.com/macperl/&#34;&gt;MacPerl Page&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.ptf.com/MacPerl/ptf_book/cdrom.html/&#34;&gt;MacPerl CD-ROM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Matthias Neeracher&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://www.iis.ee.ethz.ch/~neeri/macintosh/perl.html&#34;&gt;MacPerl Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Perl Reference&lt;/em&gt;&lt;br /&gt;
 &lt;a href=&#34;http://reference.perl.com/query.cgi?mac&#34;&gt;Macintosh Links&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Matthias:&lt;/em&gt; In fact, it&amp;rsquo;s approximately 1000 and remains fairly stable. However, there seems to be a self-limiting effect at work here in that with more then 8-900 users, the list grows too noisy for some and they unsubscribe.&lt;/p&gt;

&lt;p&gt;Counting through mail logs, I found that at least 3500 different e-mail addresses were subscribed to the list at one point, so it&amp;rsquo;s plausible that 2500 to 3000 different people were subscribed to the list over the last 5 years.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very hard to estimate the number of users, since it&amp;rsquo;s impossible to estimate the percentage of them on the list. MacPerl has been distributed on several Mac Magazine CDs, especially in Japanese magazines, so it might have penetration well beyond the internet. My estimate is similar to Rich&amp;rsquo;s, in the 5-10,000 user range.&lt;/p&gt;

&lt;h3 id=&#34;in-some-ways-perl-and-the-mac-seem-to-be-at-opposite-ends-of-the-computing-spectrum&#34;&gt;In some ways, Perl and the Mac seem to be at opposite ends of the computing spectrum.&lt;/h3&gt;

&lt;p&gt;*Rich:*I think that part of the problem is based on the fact that Apple promotes Macs as machines that one does not have to program. The Macintosh audience, therefore, self-selects for non-programmers.
Also, because the Mac does not have a native command-based &amp;ldquo;shell&amp;rdquo; (discounting MPW, which is not a mass-market product), Mac users may not have experience in using textual commands of any sort.&lt;/p&gt;

&lt;p&gt;On the other hand, a great deal of Web development is done on the Mac platform, so MacPerl would seem to be a good fit. Also, many UNIX users keep Macs around for &amp;ldquo;productivity tools&amp;rdquo;. Some of these folks are likely to be interested in having a version of Perl for the Mac.&lt;/p&gt;

&lt;h3 id=&#34;with-macperl-you-can-run-any-perl-script-on-a-mac-this-helps-make-the-mac-more-unix-like-as-a-development-platform&#34;&gt;With MacPerl, you can run any perl script on a Mac. This helps make the Mac more UNIX-like as a development platform.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Well, almost any&amp;hellip; MacPerl does not support some of the Unix- specific features of Perl, such as backquotes (though a few idioms such as `pwd` are emulated). &lt;em&gt;Matthias:&lt;/em&gt; Backquotes themselves work, too, if you have MPW around. This is a real option now that MPW is free.&lt;/p&gt;

&lt;h3 id=&#34;can-you-talk-about-other-ways-mac-developers-are-using-perl&#34;&gt;Can you talk about other ways Mac developers are using Perl?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; MacPerl allows access to Apple Events, the Toolbox, and other Mac-specific capabilities. This lets them build Mac-specific applications to, for instance, grab data from a Mac database and process it for use on a Web page or in another Mac application.
&lt;em&gt;Matthias:&lt;/em&gt; To use one example that struck me as particularly odd, some people are apparently using MacPerl as a frontend to DNA sequence databases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; MacPerl also serves as an administrative scripting language for the Mac. Some tasks do not fit well in the interactive Macintosh paradigm (e.g., copy all the files with the extension &amp;lsquo;.html&amp;rsquo; to another directory); MacPerl makes it trivial to automate these tasks. In fact, MacPerl allows the creation of &amp;ldquo;droplets&amp;rdquo; (Perl scripts, packaged as applications, onto which the user can drag- and-drop files and folders.&lt;/p&gt;

&lt;p&gt;Vicki Brown and I are working, sporadically, on a package called &amp;lsquo;Mop&amp;rsquo; (Mother of perl), which adds Unix-like commands to a Perl- based shell. If we can get it to the point where we&amp;rsquo;re reasonably happy with it, we&amp;rsquo;ll talk about it on the MacPerl Pages and in the MacPerl book.&lt;/p&gt;

&lt;h3 id=&#34;macperl-allows-a-web-developer-to-run-cgi-applications-using-the-mac-as-the-platform-for-the-web-server&#34;&gt;MacPerl allows a Web developer to run CGI applications using the Mac as the platform for the Web server.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Although the Mac has many tools for creating CGI applications, a few grainy tasks will always require programming. MacPerl is a good answer for these. On the other hand, the Mac&amp;rsquo;s multitasking limitations can present performance problems. For instance, if a MacPerl-based CGI script goes off to calculate (or gets lost :-), no other script will be able to run for the duration&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-os-level-differences-between-macperl-and-other-implementations&#34;&gt;What are the OS-level differences between MacPerl and other implementations?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Mac OS does not support pre-emptive multitasking, pipes, fork or exec, hard links, relative symbolic links (read, aliases), really long file names (but see HFS+ in Mac OS 8.1 and Rhapsody!), or the use of devices as files (though MacPerl emulates some of these).&lt;/p&gt;

&lt;h3 id=&#34;isn-t-there-an-effort-underway-to-integrate-macperl-into-the-standard-perl-release-rather-than-having-separate-code-bases&#34;&gt;Isn&amp;rsquo;t there an effort underway to integrate MacPerl into the standard Perl release &amp;ndash; rather than having separate code bases?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rich:&lt;/em&gt; Matthias bases each of his releases off a recent Perl release. The current release of MacPerl (5.1.9r4), for instance, is based on Perl 5.004. (Think of it as the 1.9th version of MacPerl on the 5.004 base.) I know that Matthias works with the other Perl porters, but I don&amp;rsquo;t know how much MacPerl code gets back into standard (read, Unix) Perl. Matthias, can you help clarify this?
&lt;em&gt;Matthias:&lt;/em&gt; On this issue, there is my theoretical position and OTOH the practical implementation.&lt;/p&gt;

&lt;p&gt;The theoretical position is that eventually, I&amp;rsquo;d like to have every file that occurs in both the Mac and standard Perl releases to be identical in both. I will *not* merge Mac specific files into the standard distribution (but will not stop anybody from doing so either), because that would enlarge the standard distribution a lot. The numbers that I came up with:&lt;/p&gt;

&lt;p&gt; 
Source File Size
Lines of Code
Mac specific core files
~20K
~1000
ext/MacPerl and ext/Mac
1M
&amp;gt;40000
MacPerl IDE (Application)
~600K
~23000*
* plus some binary files
(And with those, you&amp;rsquo;d still not have all sources you need to build MacPerl. There are a few non-Perl specific libraries needed in addition).&lt;/p&gt;

&lt;p&gt;Regarding the practical implementation of my theoretical position, I&amp;rsquo;m putting this off for &amp;ldquo;after I finish my PhD thesis&amp;rdquo; which, itself, has been a target far more moving than I&amp;rsquo;d like to admit.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

