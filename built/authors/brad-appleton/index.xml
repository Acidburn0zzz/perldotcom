<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brad Appleton on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/brad-appleton/</link>
    <description>Recent content in Brad Appleton on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 May 2000 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/brad-appleton/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pod::Parser Notes</title>
      <link>http://localhost:1313/pub/2000/05/podparser.html/</link>
      <pubDate>Sat, 20 May 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/05/podparser.html/</guid>
      <description>&lt;p&gt;Some of my co-workers noticed the p5p weekly summary discussing (among other things) &lt;code&gt;Pod::Parser&lt;/code&gt;. They mentioned it to me, and said they thought it cast me in an unfavorable light. So I&amp;rsquo;d like to clear up a few things that may have been missing or misunderstood from the summary&amp;hellip;.&lt;/p&gt;

&lt;p&gt;I freely admit &lt;code&gt;Pod::Parser&lt;/code&gt; has had very little performance optimization optimization attempted. (I&amp;rsquo;ve mentioned this before on p5p and pod-people and have asked for help). I certainly agree with many of the issues of POD format that Mark raised. But I think it is very important to note that most of the slowness of &lt;code&gt;Pod::Parser&lt;/code&gt; has less to do with POD format itself, and more to do with the cost of creating an flexible &amp;amp; extensible O-O framework to meet the needs of pod-parsing in general (not just tasks specific to translating POD to another output format).&lt;/p&gt;

&lt;p&gt;Most of the overhead in &lt;code&gt;Pod::Parser&lt;/code&gt; is from parsing line-by-line (to track line numbers and give better diagnostics) and from providing numerous places in the processing pipeline for callbacks and &amp;ldquo;hook&amp;rdquo; methods. Since &lt;code&gt;Pod::Parser&lt;/code&gt; uses O-O methods to provide lots of pre/post processing hooks at line and file and command/sequence level granularity, the overhead from method-lookup resolution is quite high. (In fact I&amp;rsquo;d lay odds that at least a 10X performance speedup could be had optimizing away the method lookups at run time to precompute them once at the beginning.)&lt;/p&gt;

&lt;p&gt;Regarding the &amp;ldquo;benchmark&amp;rdquo; of 185X as a prospective performance target for podselect (which uses &lt;code&gt;Pod::Select&lt;/code&gt; which uses &lt;code&gt;Pod::Parser&lt;/code&gt; :-), please realize that podselect&amp;rsquo;s purpose in life is to do a whole lot more than what Tom&amp;rsquo;s lean-and-mean POD dumper script does. It so happens that podselect will do this same task if given no arguments. But its &lt;em&gt;real&lt;/em&gt; reason for existence is to select specific sections of the PODs to be spit out based on matching criteria specified by the user. This is what &lt;code&gt;Pod::Usage&lt;/code&gt; employs in order to format only the usage-msg-related sections of a POD.&lt;/p&gt;

&lt;p&gt;When I mentioned podselect in this thread on p5p, I was just pointing out that existing code - which is already designed to have hooks for reuse, can fulfill the same functional task - I didn&amp;rsquo;t intend to claim it was comparable in performance. I don&amp;rsquo;t think that the &amp;ldquo;185X&amp;rdquo; figure is reasonable to achieve for &lt;code&gt;Pod::Parser&lt;/code&gt;. Not only is there imore parsing that &lt;code&gt;Pod::Parser&lt;/code&gt; has to do, but most of that overhead comes from enabling better diagnostics and extensibility for purposes above and beyond what Tom&amp;rsquo;s script implements for one very specific and limited purpose.&lt;/p&gt;

&lt;p&gt;185X may be a fair benchmark for something whose purpose is limited in scope to that particular thing, but I think not so for something with much broader scope and applicability and use like &lt;code&gt;Pod::Parser&lt;/code&gt;. Not that speed improvement still isn&amp;rsquo;t needed - but I think a 50X improvement would a more reasonable benchmark, and IMHO within the realm of what&amp;rsquo;s reasonably possible.&lt;/p&gt;

&lt;p&gt;In another place - I think the summary may have missed a reply I made to p5p about the structure of &lt;code&gt;Pod::Parser&lt;/code&gt; &amp;ldquo;output&amp;rdquo;. Its not just spitting out tags or a linear stream, and it will spit-out parse-trees &lt;em&gt;if&lt;/em&gt; you ask it to.&lt;/p&gt;

&lt;p&gt;I agree that there is a need for a module to impose more structure, but the notion that &lt;code&gt;Pod::Parser&lt;/code&gt; must somehow be the module that does this is a misconception IMHO. &lt;code&gt;Pod::Parser&lt;/code&gt; was deliberately created to be a flexible framework to build on top of and there is nothing to stop someone from creating a module&amp;rdquo; on top of &lt;code&gt;Pod::Parser&lt;/code&gt; to do all the nicer stuff.&lt;/p&gt;

&lt;p&gt;But much of that &amp;ldquo;nicer&amp;rdquo; stuff will break a lot of existing code if its added into &lt;code&gt;Pod::Parser&lt;/code&gt; - because &lt;code&gt;Pod::Parser&lt;/code&gt; is used for more than just translation to another output format. I&amp;rsquo;ve recommended many times on p5p and elsewhere that someone create a &lt;code&gt;Pod::Compiler&lt;/code&gt; or &lt;code&gt;Pod::Translator&lt;/code&gt; to impose this added structure (and the existing &lt;code&gt;Pod::Checker&lt;/code&gt; module might be a good start).&lt;/p&gt;

&lt;p&gt;Also, the summary suggests that &lt;code&gt;Pod::Parser&lt;/code&gt; and Russ&amp;rsquo; POD modules have been &amp;ldquo;under development for years.&amp;rdquo; I think maybe Mark meant to write that various POD-related parsing and translating/formatting modules have been under development for years. In particular, I believe Russ only just started on his &amp;ldquo;pod-lators&amp;rdquo; modules in the past year.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pod::Parser&lt;/code&gt; development started years earlier, but it&amp;rsquo;s &amp;ldquo;gestation period&amp;rdquo; was only about 6 months before a useful and working version was available. Since then, I&amp;rsquo;ve done bugfixes and enhancements over the last 2-3 years. The main addition of significant functionality was adding the capability for parse-trees, (and the development of a test-suite for pod &amp;ldquo;stuff&amp;rdquo;, which was too long in coming :-). It didn&amp;rsquo;t become part of the core perl distribution until v5.6 because it was necessary to wait until some kind folks (like Russ&amp;rsquo;) took the time to re-write the most common &lt;code&gt;pod2xxx&lt;/code&gt; modules to use the same base parsing code provided in &lt;code&gt;Pod::Parser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now - I&amp;rsquo;m not claiming &lt;code&gt;Pod::Parser&lt;/code&gt; is perfect - but I felt the summary left out some important points that add more balance to the discussion. Could &lt;code&gt;Pod::Parser&lt;/code&gt; be faster? You betcha! Could it be lots faster? Sure. Is it unusable for its most common purpose? Not at all IMHO. Is it unusable for processing large numbers of PODs? Quite likely. But as I said, thats not because of POD, thats because of the need for designed in flexibility.&lt;/p&gt;

&lt;p&gt;At least now there is a common base of POD parsing code to focus our collective optimizing efforts upon instead of lots of parsing engines from disparate &lt;code&gt;pod2xxx&lt;/code&gt; modules. Now that it&amp;rsquo;s in the core, maybe it will encourage more people to focus on optimizing the common base parser for POD-stuff (which I&amp;rsquo;ve been wanting help with for years &lt;code&gt;:-)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- 
Brad Appleton &amp;lt;bradapp@enteract.com&amp;gt;  http://www.bradapp.net/
  &amp;quot;And miles to go before I sleep.&amp;quot; -- Robert Frost
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

