<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brian D Foy on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/brian-d-foy/</link>
    <description>Recent content in Brian D Foy on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 09:27:22 +0000</lastBuildDate>
    <atom:link href="/authors/brian-d-foy/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shortcode_test</title>
      <link>http://localhost:1313/article/shortcode_test/</link>
      <pubDate>Sun, 12 Jul 2020 09:27:22 +0000</pubDate>
      
      <guid>http://localhost:1313/article/shortcode_test/</guid>
      <description>&lt;p&gt;The article body goes here. Don&amp;rsquo;t forget to delete this stuff!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::ISBN&#34;&gt;Business::ISBN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlipc.html&#34;&gt;perlipc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlsec.html#Taint-mode-and-%40INC&#34;&gt;with anchor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-write-your-first-article-for-perl-com/&#34;&gt;How to write your first article for Perl.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-find-a-programming-topic-to-write-about/&#34;&gt;How to find a programming topic to write about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Announcing Perl 7</title>
      <link>http://localhost:1313/article/announcing-perl-7/</link>
      <pubDate>Wed, 24 Jun 2020 11:34:35 +0000</pubDate>
      
      <guid>http://localhost:1313/article/announcing-perl-7/</guid>
      <description>

&lt;p&gt;&lt;em&gt;image credit: &lt;a href=&#34;https://www.flickr.com/photos/darren/&#34;&gt;Darren Wood&lt;/a&gt;, &lt;a href=&#34;https://www.flickr.com/photos/darren/3680674672/in/photolist-6Bfqm9-ino1FQ-g9QYp-LBqJ8U-2imZyN9-2g4LBC9-JrtM4R-MsDZU1-MkbMoz-BSxoYD-KHTzJX-JYzksq-G9dfcP-G5Byr3-LrnQMb-6hwfHT-9i4upm-oJfAkJ-8cQQBf-6NVCN1-Ph8487-N1UVUo-mrXQmx-8GoTKf-6fqvZk-Gi1cPH-Mae7Mo-282AxcA-Hvehqx-HbZrvj-YoKVff-H1FRCw-d81uq-jyUXx9-JZGmJj-JTpLp-82ZDob-P19B5f-EQFLnh-aJpXi-LyYS7u-9X3iK-CCTZD-bdCtm-5SGWuB-ET4D6C-9vWh2c-4mieMj-HpYqSw-2iHee4g&#34;&gt;&amp;ldquo;7&amp;rdquo;&lt;/a&gt;, on Flickr.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;This morning at &lt;a href=&#34;https://perlconference.us/tpc-2020-cloud/&#34;&gt;The Perl Conference in the Cloud&lt;/a&gt;, Sawyer X announced that Perl has a new plan moving forward. Work on Perl 7 is already underway, but it&amp;rsquo;s not going to be a huge change in code or syntax. It&amp;rsquo;s Perl 5 with modern defaults and it sets the stage for bigger changes later. My latest book &lt;a href=&#34;https://leanpub.com/preparing_for_perl7&#34;&gt;Preparing for Perl 7&lt;/a&gt; goes into much more detail.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;perl-7-is-going-to-be-perl-5-32-mostly&#34;&gt;Perl 7 is going to be Perl 5.32, mostly&lt;/h2&gt;

&lt;p&gt;Perl 7.0 is going to be v5.32 but with different, saner, more modern defaults. You won&amp;rsquo;t have to enable most of the things you are already doing because they are enabled for you. The major version jump sets the boundary between how we have been doing things and what we can do in the future.&lt;/p&gt;

&lt;p&gt;Remember, Perl was the &amp;ldquo;Do what I mean&amp;rdquo; language where the defaults were probably what you wanted to do. In Perl 4 and the early days of Perl 5, that was easy. But, it&amp;rsquo;s been a couple of decades and the world is more complicated now. We kept adding pragmas, but with Perl&amp;rsquo;s commitment to backward compatibility, we can&amp;rsquo;t change the default settings. Now we&amp;rsquo;re back to the old days of C where we have to include lots of boilerplate before we start doing something:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(signatures)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is slightly better with v5.12 and later because we get &lt;a href=&#34;https://www.effectiveperlprogramming.com/2010/08/implicitly-turn-on-strictures-with-perl-5-12/&#34;&gt;&lt;code&gt;strict&lt;/code&gt; for free&lt;/a&gt; by using setting a minimum version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.32&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(signatures)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl 7 is a chance to make some of these the default even without specifying the version. Perl 5 still has Perl 5&amp;rsquo;s extreme backward compatibility behavior, but Perl 7 gets modern practice with minimal historical baggage. I&amp;rsquo;m personally hoping signatures makes the cut, but there&amp;rsquo;s still much to be done to make Unicode the default, so you&amp;rsquo;ll probably need to keep some of that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might miss some seedier features that you shouldn&amp;rsquo;t be using anyway, such as the indirect object notation. Larry Wall said he had to do something for the C++ programmers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CGI;  &lt;span style=&#34;color:#75715e&#34;&gt;# indirect object, but not in Perl 7&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# direct object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, the feature doesn&amp;rsquo;t really disappear in Perl 7. It&amp;rsquo;s already &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/&#34;&gt;a setting in v5.32&lt;/a&gt;, but now with a different default.&lt;/p&gt;

&lt;h2 id=&#34;what-s-happening-to-perl-5&#34;&gt;What&amp;rsquo;s happening to Perl 5?&lt;/h2&gt;

&lt;p&gt;No one is taking Perl 5 away from you; it goes into long term maintenance mode—a lot longer than the two years of rolling support for the two latest user versions. That might be up to a decade from now (or half the time Perl 5 has already been around).&lt;/p&gt;

&lt;h2 id=&#34;when-is-this-happening&#34;&gt;When is this happening?&lt;/h2&gt;

&lt;p&gt;The work is happening now, but you won&amp;rsquo;t need to worry about it for about six months when the first release candidate should appear. The target for a user release of Perl 7.0 within the next year, with some release candidates along the way.&lt;/p&gt;

&lt;p&gt;This is an easy promise to keep, too, since Perl 7 is mostly v5.32 with different defaults. There&amp;rsquo;s no big rewrite or new features, although some currently experimental features may stabilize (please choose signatures!).&lt;/p&gt;

&lt;h2 id=&#34;what-about-cpan&#34;&gt;What about CPAN?&lt;/h2&gt;

&lt;p&gt;The Comprehensive Perl Archive Network, CPAN, has almost 200,000 modules. The maintained modules that people are using should still work, and for the rest there will be a compatibility mode. Remember  Perl 7 is mostly v5.32 so you shouldn&amp;rsquo;t need to change much.&lt;/p&gt;

&lt;p&gt;You may not know that the &lt;a href=&#34;https://lists.perl.org/list/perl5-porters.html&#34;&gt;Perl5 Porters&lt;/a&gt; tests new versions against almost all of CPAN. There&amp;rsquo;s a long history of tools to check the effect that changes may have on the Perl community. As a module author, I often get messages from various people, mostly Andreas Koenig or Slaven Rezić, about weird things in my modules that may break with new Perls. Usually, it&amp;rsquo;s something I need to update anyway. Tracking down problems with existing code is a solved problem. Fixing code shouldn&amp;rsquo;t be that onerous because it&amp;rsquo;s still Perl 5, but with better practices.&lt;/p&gt;

&lt;p&gt;Will there be a separate CPAN for Perl 7? No one has said there can&amp;rsquo;t be, but in the jump to Perl 7, the developers don&amp;rsquo;t want to redo what&amp;rsquo;s already working. This change should be manageable with as few side quests as possible.&lt;/p&gt;

&lt;p&gt;Also, PAUSE, the Perl Authors Upload Server, has received quite a bit of love in the past couple of years. That makes it easier for them to adapt to future needs. The people working on that are experienced and talented, and they&amp;rsquo;ve made the codebase much more tractable.&lt;/p&gt;

&lt;h2 id=&#34;why-the-jump-to-a-major-version&#34;&gt;Why the jump to a major version?&lt;/h2&gt;

&lt;p&gt;A major version can have a different contract with the user. A major version jump changes that contract with new default behavior, even if that conflicts with the past. There will be a way to reset all of those settings to the old Perl 5 default if you like. Perl 7 code will still be v5.32 code (mostly) in syntax and behavior though.&lt;/p&gt;

&lt;p&gt;Sawyer speaks about three major market segments of Perl users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who are never going to change their code&lt;/li&gt;
&lt;li&gt;People who use new features&lt;/li&gt;
&lt;li&gt;People starting from scratch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perl 5&amp;rsquo;s social contract is extreme backward compatibility, and has been amazingly successful with that. The problem is that the extreme backward compatibility works for those who won&amp;rsquo;t update their code, but doesn&amp;rsquo;t help the two other segments. The new features crowd has to deal with a longer boilerplate section in every program, and newbies wonder why they have to include so much just to create a program so people on StackOverflow won&amp;rsquo;t hector them over missing pragmas.&lt;/p&gt;

&lt;h2 id=&#34;why-7-and-not-6&#34;&gt;Why 7 and not 6?&lt;/h2&gt;

&lt;p&gt;There are two parts to this answer. First, &amp;ldquo;Perl 6&amp;rdquo; was already taken by what is now known as &lt;a href=&#34;https://raku.org&#34;&gt;Raku&lt;/a&gt;. A long time ago, we thought that a very ambitious rewrite effort would replace v5.8. In short, that&amp;rsquo;s not what happened and the language has gone on to live a life of its own.&lt;/p&gt;

&lt;p&gt;So, 7 was the next available number. That&amp;rsquo;s it. It&amp;rsquo;s just the next cardinal number in line. It&amp;rsquo;s not unheard of to make such a jump: PHP went directly from 5 to 7, and isn&amp;rsquo;t it time to steal something from that community? Consider these other weird jumps in history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solaris 2.6 to Solaris 7&lt;/li&gt;
&lt;li&gt;Java 1.4 to Java 5&lt;/li&gt;
&lt;li&gt;Postgres 9.x as the major version to Postgres 10 as the major version&lt;/li&gt;
&lt;li&gt;Windows 3.1 to Windows 95 (98, ME, 2000, XP, Vista, 7, 8, 10)&lt;/li&gt;
&lt;li&gt;TeX (each new version more closely approximates π)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least it&amp;rsquo;s not Perl 34.&lt;/p&gt;

&lt;h2 id=&#34;what-s-disappearing&#34;&gt;What&amp;rsquo;s disappearing?&lt;/h2&gt;

&lt;p&gt;Not much. Some things will be disabled by default, but again, this is essentially Perl 5.32 with the knobs and dials in different places. There are some things you should learn to live without, even in Perl 5 land. These are the likely candidates for the first round of changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;indirect object notation&lt;/li&gt;
&lt;li&gt;bareword filehandles (except maybe the standard filehandles)&lt;/li&gt;
&lt;li&gt;fake multidimensional arrays and hashes (old Perl 4 trick)&lt;/li&gt;
&lt;li&gt;Old-style prototype definitions (use &lt;code&gt;:prototype()&lt;/code&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-appearing&#34;&gt;What&amp;rsquo;s appearing?&lt;/h2&gt;

&lt;p&gt;Not much. Perl 7 is mostly Perl v5.32, but with all of the features enabled by default. You don&amp;rsquo;t have to do anything to get most new features, such as &lt;a href=&#34;https://www.effectiveperlprogramming.com/2014/09/use-postfix-dereferencing/&#34;&gt;postfix dereferencing&lt;/a&gt;, the new &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/01/use-the-infix-class-instance-operator/&#34;&gt;&lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;, or several other features. That&amp;rsquo;s the benefit of the new social contract a major version provides. It&amp;rsquo;s a hard boundary where new features can exist by default on one side without disturbing the other side.&lt;/p&gt;

&lt;h2 id=&#34;what-should-i-do-right-now&#34;&gt;What should I do right now?&lt;/h2&gt;

&lt;p&gt;If you need an older Perl to run your code, you are going to be fine. Those old versions are not going to disappear. Just like Perl 5.6 is still available, if that&amp;rsquo;s the version you wish to run.&lt;/p&gt;

&lt;p&gt;If your code runs without a problem under strictures and warnings, and you are using modern Perl style, you&amp;rsquo;re probably mostly good. If you have some bareword filehandles, start converting those. Same with the indirect object notation.&lt;/p&gt;

&lt;p&gt;With messy code, you aren&amp;rsquo;t out of luck. There will be compatibility modes to assist you in the transition from Perl 5 to 7 (but not Perl 5 to 8). A pragma will set the knobs and dials back to the old settings (but this is more of a one version thing):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; compat::perl5;  &lt;span style=&#34;color:#75715e&#34;&gt;# act like Perl 5&amp;#39;s defaults&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For modules, there are some issues to shake out, but there will be a compatibility mechanism for those too.&lt;/p&gt;

&lt;p&gt;The good news is that these things are already being tested by major Perl stakeholders in production settings. This isn&amp;rsquo;t a paper plan: it&amp;rsquo;s already happening and the rough edges are being sanded out.&lt;/p&gt;

&lt;p&gt;And, v5.32 has one of these knobs and dials in place already. You can &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/&#34;&gt;turn off the indirect object notation&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But expect two more knobs or dials, maybe like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; multidimensional;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; bareword::filehandle;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m collecting all of this information in &lt;a href=&#34;https://leanpub.com/preparing_for_perl7&#34;&gt;Preparing for Perl 7&lt;/a&gt;, my latest offering through &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; and LeanPub.&lt;/p&gt;

&lt;h2 id=&#34;the-bottom-line&#34;&gt;The bottom line&lt;/h2&gt;

&lt;p&gt;Perl 7 is v5.32 with different settings. Your code should work if it&amp;rsquo;s not a mess. Expect a user release within a year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Hacks, Perl School, and the future of Perl publishing</title>
      <link>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</link>
      <pubDate>Thu, 28 May 2020 09:44:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</guid>
      <description>

&lt;p&gt;Dave Cross, long-time Perl user, trainer, and author, recently released &lt;a href=&#34;https://perlhacks.com/2020/04/the-best-of-perl-hacks/&#34;&gt;The Best of Perl Hacks&lt;/a&gt;, a curated collection of his best posts from his &lt;a href=&#34;https://perlhacks.com&#34;&gt;Perl Hacks blog&lt;/a&gt;. His imprint, &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt;, has published six e-books, including two that I wrote.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an unrelated book, &lt;a href=&#34;http://shop.oreilly.com/product/9780596526740.do&#34;&gt;Perl Hacks: Tips &amp;amp; Tools For Programming, Debugging, And Surviving&lt;/a&gt;, by chromatic, Damian Conway, and Curtis &amp;ldquo;Ovid&amp;rdquo; Poe. It&amp;rsquo;s also very good, but completely separate from Dave&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-hacks-when-did-you-start-it-and-what-do-you-like-to-post-there&#34;&gt;What is Perl Hacks? When did you start it and what do you like to post there?&lt;/h4&gt;

&lt;p&gt;Perl Hacks is my Perl blog. It&amp;rsquo;s where I post all my Perl-related articles.&lt;/p&gt;

&lt;p&gt;I started it in May 2009. Before then, pretty much everyone in the
Perl community used to blog on a site called &lt;a href=&#34;https://use-perl.github.io&#34;&gt;Use
Perl&lt;/a&gt;. But that site was starting to look
a bit dated and a number of people moved their blogs to other places
at around the same time. It&amp;rsquo;s no coincidence that the
&lt;a href=&#34;https://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; site also dates from the same
year.&lt;/p&gt;

&lt;p&gt;My rule for choosing what to post on the site is basically &amp;ldquo;is this
about Perl?&amp;rdquo; But looking back over the lifetime of the site (which I
did when compiling the book) I noticed that the type of article had
changed over time. When I first started, there were a lot of &amp;ldquo;newsy&amp;rdquo;
entries—&amp;rdquo;London.pm will be holding these meetings&amp;rdquo;, &amp;ldquo;I&amp;rsquo;m running a
training course&amp;rdquo;, things like that. But later I started posting longer
articles about the Perl community or interesting technical corners of
Perl.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-choose-what-went-into-the-ebook-what-are-some-of-your-favorite-posts-which-ones-got-the-best-responses&#34;&gt;How did you choose what went into the ebook? What are some of your favorite posts? Which ones got the best responses?&lt;/h4&gt;

&lt;p&gt;I basically read through the site over a weekend. I ignored all of the
short articles and anything that was topical and would no longer be
interesting. I then did a second pass, planning to get to about fifty
articles. I think I ended up with fifty-seven.&lt;/p&gt;

&lt;p&gt;There are a couple of technical articles that I&amp;rsquo;m particularly pleased
with. &lt;a href=&#34;https://perlhacks.com/2014/01/dots-perl/&#34;&gt;Dots and Perl&lt;/a&gt;
explains Perl&amp;rsquo;s five operators that are just made of dots. Can you
name them all? Ok, strictly speaking, one of them isn&amp;rsquo;t actually an
operator. And &lt;a href=&#34;https://perlhacks.com/2015/04/subroutines-and-ampersands/&#34;&gt;Subroutines and
Ampersands&lt;/a&gt;
was written so I had somewhere to point people who still insist on
putting ampersands on subroutine calls. It carefully explains why it&amp;rsquo;s
rarely necessary (and hasn&amp;rsquo;t been since Perl 5 was released).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://perlhacks.com/2015/12/long-death-cgi-pm/&#34;&gt;The Long Death of
CGI.pm&lt;/a&gt; which
investigated the effects that removing
&lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI.pm&lt;/a&gt; from the Perl core distribution
would have. I thought there was some nice detective work in there.&lt;/p&gt;

&lt;p&gt;The post that got the most response was called &lt;a href=&#34;https://perlhacks.com/2012/03/you-must-hate-version-control-systems/&#34;&gt;You Must Hate Version
Control
Systems&lt;/a&gt;. The title was taken from a Perl job ad from a company that
no-one seemed to want to work for. The person who posted the ad turned
up in the comments and tried to explain why he wrote that, but I don&amp;rsquo;t
think anyone was convinced. This was the one time that I regretted
that I couldn&amp;rsquo;t use a post&amp;rsquo;s comments in the book.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-school-why-did-you-start-it-what-was-the-first-book&#34;&gt;What is Perl School? Why did you start it? What was the first book?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; was a brand that I started to
use in 2012 for some training I ran in London. I had theory that
people weren&amp;rsquo;t keeping their Perl knowledge up to date and many
employers weren&amp;rsquo;t keen on investing in training about what was &amp;ldquo;just a
scripting language.&amp;rdquo; So, I reasoned, if I ran low-cost training
courses at the weekend, people would come on them and the average
level of Perl knowledge in London would rise.&lt;/p&gt;

&lt;p&gt;I ran these courses for a year before putting them on ice. But I liked
the brand and knew that I wanted to use it again in the future.&lt;/p&gt;

&lt;p&gt;In 2015 I wrote a beginners&amp;rsquo; Perl tutorial for Udemy. They published
it on their site and I often pointed people at it. But a couple of
years later, I checked their site to find that a CSS upgrade had
rendered the page pretty much unreadable. I pointed this out to them
and after a bit of discussion, they told me that they weren&amp;rsquo;t going to
invest the time to fix it but said that I was welcome to publish it
elsewhere.&lt;/p&gt;

&lt;p&gt;At the same time I had been experimenting with building ebooks from
Markdown and had developed the pipeline that I still use today. So the
first Perl School book was the serendipitous meeting between my
experimental ebook pipeline and a long piece of text that I wanted to
get out to as many people as possible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called &lt;a href=&#34;https://perlschool.com/books/perl-taster/&#34;&gt;Perl Taster: Your First Two Hours With
Perl&lt;/a&gt;. I published it just
before the 2017 London Perl Workshop and announced it in a lighting
talk at that workshop. I invited other people to contribute books,
offering to help with the technical parts of getting them published.
John Davies approached me about the book that became &lt;a href=&#34;https://perlschool.com/books/selenium-perl/&#34;&gt;Selenium and
Perl&lt;/a&gt; and it&amp;rsquo;s just grown from there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-was-your-experience-giving-low-cost-and-free-perl-training-in-the-uk&#34;&gt;What was your experience giving low-cost and free Perl training in the UK?&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve run Perl training at all levels in the UK. Five years ago I&amp;rsquo;d
still get two or three enquiries a year from companies who were
interested in training, but that&amp;rsquo;s all dried up. I can&amp;rsquo;t remember the
last time someone asked me about running a course for them.&lt;/p&gt;

&lt;p&gt;The Perl School courses were popular for a while. I&amp;rsquo;d get twenty or so
people giving up their Saturday and paying a small fee to get Perl
training. But after a year, the interest started to wane. I cancelled
the last one because I didn&amp;rsquo;t get enough attendees to make it
worthwhile.&lt;/p&gt;

&lt;p&gt;For many years I&amp;rsquo;ve run a free ninety-minute or two-hour course as
part of the London Perl Workshop. I always get a pretty good turn-out
for those. But, to be honest, that&amp;rsquo;s about the only place I can
guarantee much interest in Perl training in the UK these days.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;you-previously-wrote-the-print-books-data-munging-with-perl-https-www-manning-com-books-data-munging-with-perl-manning-press-and-template-toolkit-http-www-template-toolkit-org-book-html-o-reilly-associates-with-andy-wardley-and-darren-chamberlain-how-is-perl-school-s-process-different-than-what-you-experienced-with-those-publishers&#34;&gt;You previously wrote the print books &lt;a href=&#34;https://www.manning.com/books/data-munging-with-perl&#34;&gt;Data Munging with Perl&lt;/a&gt; (Manning Press) and &lt;a href=&#34;http://www.template-toolkit.org/book.html&#34;&gt;Template Toolkit&lt;/a&gt; (O&amp;rsquo;Reilly &amp;amp; Associates, with Andy Wardley and Darren Chamberlain). How is Perl School&amp;rsquo;s process different than what you experienced with those publishers?&lt;/h4&gt;

&lt;p&gt;I guess the main difference is that there&amp;rsquo;s a lot less process
involved with the Perl School books.&lt;/p&gt;

&lt;p&gt;With a traditional publisher, there are lots of departments involved.
The editor will want to know when the manuscript will be ready because
they will want to book time from technical reviewers and
proof-readers. They&amp;rsquo;ll also need to plan in designers and even book
printing time on the presses. All of that means there&amp;rsquo;s a lot of
pressure on the author to make a plan for getting the book written and
then to stick to that plan.&lt;/p&gt;

&lt;p&gt;With an ebook, it&amp;rsquo;s all a lot less structured. I largely rely on
authors to arrange their own technical reviewers. I&amp;rsquo;ll do a bit of
proof-reading. And we haven&amp;rsquo;t (as yet) used any designers—that
probably shows, to be honest.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m not going to pressure an author to finish a manuscript. When
you&amp;rsquo;re ready, I&amp;rsquo;ll steer you through turning your Markdown into an
ebook and then publishing it on Amazon. If it takes longer than you
expected, then so what?&lt;/p&gt;

&lt;p&gt;In many ways, I see parallels with the &lt;a href=&#34;http://theleanstartup.com&#34;&gt;Lean
Startup&lt;/a&gt; ideas of Eric Ries. We&amp;rsquo;re small
and we&amp;rsquo;re agile. If you come to me with a completed book, we might
well be able to get it on Amazon in a week or two. For a traditional
publisher, that time will be months.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-are-the-biggest-challenges-to-technical-publishing-today-how-does-something-like-perl-school-respond-to-that&#34;&gt;What do you think are the biggest challenges to technical publishing today? How does something like Perl School respond to that?&lt;/h4&gt;

&lt;p&gt;Traditional publishing is an expensive business. Publishers need to
make a lot of money just to break even on a book. I don&amp;rsquo;t know the
details, but they have to sell a certain number of copies in order to
make it worth publishing a book. And that, in turn, means that they
will rarely take a risk. For a technical publisher, that means only
publishing books about technologies that have reached a certain level
of usage.&lt;/p&gt;

&lt;p&gt;People are also buying fewer technical books. Technologies change
quickly and many books will be out of date before they get to the
bookshops. If you want up to date information about your favourite
technologies then you&amp;rsquo;re probably better off going to the developer&amp;rsquo;s
web site.&lt;/p&gt;

&lt;p&gt;For a publisher like Perl School, the economics are different. We have
far smaller costs and (as I mentioned before) we can get books in
customers&amp;rsquo; hands far more quickly.&lt;/p&gt;

&lt;p&gt;Large technical publishers have largely abandoned Perl. They just
don&amp;rsquo;t see that they would get the level of sales needed to justify a
new Perl book. Perl School is happy to take that risk—because, really,
it&amp;rsquo;s a tiny risk for us.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-are-your-personal-reading-preferences-which-device-do-you-like-what-size-screen-do-you-need-and-which-format-works-best-for-you&#34;&gt;What are your personal reading preferences? Which device do you like, what size screen do you need, and which format works best for you?&lt;/h4&gt;

&lt;p&gt;I do like a real book. But they take up too much space, so I&amp;rsquo;ve pretty
much completely stopped buying them over the last five years. I like
being able to access all of the ebook part of my library from a device
that I can carry in my pocket. One thing that would make me really
happy is a device that could rip my existing paper library to ebooks
in the same way that we all ripped our CDs to MP3s.&lt;/p&gt;

&lt;p&gt;Currently, I read ebooks on an 8&amp;rdquo; Amazon Kindle Fire. That&amp;rsquo;s just
bigger than a paperback and fits in a (large) pocket in the same way
that a book would. I also have a 10&amp;rdquo; Pixel Slate which I&amp;rsquo;ll often use
for reading in my house. I&amp;rsquo;m rather firmly locked into the Amazon
ebook ecosystem, so I prefer to find books in Mobi format—but I can
drive Calibre, so I&amp;rsquo;m happy to convert from other formats.&lt;/p&gt;

&lt;p&gt;I get mildly annoyed by web sites that promise me an ebook and then
deliver a PDF. PDFs are made to be read at a certain size and if
you&amp;rsquo;re reading them on a smaller screen it will either be too small to
read or you&amp;rsquo;ll need to scroll back and forth a lot. A proper ebook
format (like Mobi or ePub) will reformat pages for any combination of
screen size and font size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-can-someone-write-a-book-for-perl-school-what-topics-do-you-think-would-be-most-interesting&#34;&gt;How can someone write a book for Perl School? What topics do you think would be most interesting?&lt;/h4&gt;

&lt;p&gt;Simply email me at hello@perlschool.com with your suggestions. I&amp;rsquo;ll
talk you though the technical side of getting the book written and
published on Amazon—it&amp;rsquo;s really not very hard.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d pretty much consider any Perl-related topic. I would never have
thought of publishing books on Selenium or Cucumber, but John Davies
wrote them and I&amp;rsquo;ve published them. And they seem to be selling.&lt;/p&gt;

&lt;p&gt;But there are books I&amp;rsquo;d like to see. I&amp;rsquo;d love to publish books on the
various &amp;ldquo;Modern Perl&amp;rdquo; tools that we all use—Moose, DBIx::Class, things
like that—and all of Perl&amp;rsquo;s popular web frameworks.&lt;/p&gt;

&lt;p&gt;I think the one I&amp;rsquo;d most like to see is one that, in my head, is
called &amp;ldquo;Modern Core Perl&amp;rdquo;. It covers all of the important changes in
the core Perl language back to version 5.10. Basically, it&amp;rsquo;s a
tutorial based on all of the &lt;code&gt;perldelta&lt;/code&gt;s. I&amp;rsquo;ve thought about writing
it myself a few times, but I just don&amp;rsquo;t have the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest 2019</title>
      <link>http://localhost:1313/article/hacktoberfest-2019/</link>
      <pubDate>Thu, 26 Sep 2019 13:56:16 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-2019/</guid>
      <description>

&lt;p&gt;Send some pull requests and get a free t-shirt! Hacktoberfest is back for a seventh year to encourage cross-project participation. &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; wants you to &lt;a href=&#34;https://hacktoberfest.digitalocean.com&#34;&gt;register for Hacktoberfest&lt;/a&gt; (no purchase required) then open five pull requests to public repositories on GitHub. Get your feet wet with open source and git; once you see how easy it is you&amp;rsquo;ll probably come back for more. And you&amp;rsquo;ll get a nice Hacktoberfest t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hacktoberfestswaglist.com&#34;&gt;Other companies have their own swag&lt;/a&gt; to add to your haul when you contribute to their projects. You can even &lt;a href=&#34;https://github.com/crweiner/hacktoberfest-swag-list&#34;&gt;contribute to that list&lt;/a&gt; with a pull request to add your swag.&lt;/p&gt;

&lt;h2 id=&#34;find-something-to-hack&#34;&gt;Find something to hack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tpf/perldotcom&#34;&gt;Perl.com&lt;/a&gt; has some website issues you might consider. Or, you can &lt;a href=&#34;http://localhost:1313/article/how-to-write-your-first-article-for-perl-com/&#34;&gt;write an article for Perl.com&lt;/a&gt; and send that as a pull request. Or, read some of the older articles and edit them to fix typos, new web addresses, and so on. Since Perl.com is its own GitHub project, almost anything you see is updatable. If you don&amp;rsquo;t know where to change something, we&amp;rsquo;ll help you figure it out.&lt;/p&gt;

&lt;p&gt;I maintain the &lt;a href=&#34;https://github.com/briandfoy/PerlPowerTools&#34;&gt;PerlPowerTools&lt;/a&gt; project and there are several niggling style issues that I&amp;rsquo;d like to handle so I can improve PerlPowerTool&amp;rsquo;s score on &lt;a href=&#34;https://kritika.io/users/briandfoy/repos/7253941177493998/&#34;&gt;kritika.io&lt;/a&gt;, which is currently an F based on most of this code being written in a style more palatable 20 years ago.&lt;/p&gt;

&lt;p&gt;Perl.com has a &lt;a href=&#34;https://github.com/tpf/perldotcom/issues/203&#34;&gt;GitHub issue&lt;/a&gt; where some projects have listed their interest (and check for others that might show up after we post this article):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pullrequest.club/&#34;&gt;Pull Request Club&lt;/a&gt; is like the old &lt;a href=&#34;http://cpan-prc.org&#34;&gt;CPAN Pull Request Challenge&lt;/a&gt;, but for everything.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmacdotorg/newsapi-perl&#34;&gt;Web::NewsAPI&lt;/a&gt; is a module for communicating with NewsAPI, letting you fetch and search news headlines and stories from around the world using Perl.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jmacdotorg/sweat&#34;&gt;Sweat&lt;/a&gt; is a fully-featured workout timer that aims to distract you from the pain of exercise by reading mildly interesting stuff from the internet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Difegue/LANraragi&#34;&gt;LANraragi&lt;/a&gt; is a self-hosted comic/manga manager running on &lt;a href=&#34;https://www.mojolicious.org&#34;&gt;Mojo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://exercism.io/&#34;&gt;Exercism.io&lt;/a&gt; has online programming exercises and wants more for &lt;a href=&#34;https://github.com/exercism/perl5&#34;&gt;Perl 5&lt;/a&gt; and &lt;a href=&#34;https://github.com/exercism/perl6&#34;&gt;Perl 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/UPC/ravada&#34;&gt;ravada&lt;/a&gt; is a Perl module for remote virtual desktops managers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EnlightenedPerlOrganisation/task-kensho&#34;&gt;Task::Kensho&lt;/a&gt; is a list of recommended modules for Enlightened Perl development and &lt;a href=&#34;http://blogs.perl.org/users/grinnz/2019/09/taskkensho-needs-your-help.html&#34;&gt;needs some help&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you get your Pull Request accepted, &lt;a href=&#34;https://www.perl.com/article/how-to-get-pull-request-accepted-/#author-bio-mohammad-anwar&#34;&gt;Mohammad S Anwar&lt;/a&gt; has some advice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;How to become a CPAN contributor, Part 1&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor-part-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-get-pull-request-accepted-/&#34;&gt;How to get your Pull Request accepted?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;get-help-with-your-issues&#34;&gt;Get help with your issues&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t have to do anything special to get help, but here are a few tips. Remember, the goal isn&amp;rsquo;t necessarily to convert people to core contributors, so start with something gentle that can draw in the curious.&lt;/p&gt;

&lt;p&gt;When people contribute, be insanely positive–help people learn how to make good pull requests and integrate their work into your project. Remember that successful projects blend all sorts of skills and perspectives, and this is your chance to let other people hack on the stuff you didn&amp;rsquo;t want to do yourself.&lt;/p&gt;

&lt;p&gt;Here are some ways you can encourage that work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create some GitHub issues for small work you&amp;rsquo;d like other people to try. These don&amp;rsquo;t need to be complex and they don&amp;rsquo;t need to be actual code. Something like &amp;ldquo;Update the README&amp;rdquo; or &amp;ldquo;Add the LICENSE file&amp;rdquo; don&amp;rsquo;t require that much knowledge of your core code.&lt;/li&gt;
&lt;li&gt;Label some of your projects GitHub issues with the &amp;ldquo;hacktoberfest&amp;rdquo; or &amp;ldquo;good first issue&amp;rdquo; tags. Make these bite-sized chunks appropriate for beginners.&lt;/li&gt;
&lt;li&gt;Label the issues based on their domain, such as &amp;ldquo;website design&amp;rdquo;, &amp;ldquo;coding&amp;rdquo;, or &amp;ldquo;documentation&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/crweiner/hacktoberfest-swag-list&#34;&gt;Offer some swag&lt;/a&gt;. A $5 t-shirt can get your several hundred dollars worth of work that you&amp;rsquo;ve been putting off.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;follow-hacktoberfest&#34;&gt;Follow hacktoberfest&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/hacktoberfest&#34;&gt;@hacktoberfest&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/hashtag/hacktoberfest&#34;&gt;#hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See Perl.com&amp;rsquo;s &lt;a href=&#34;https://www.perl.com/tags/hacktoberfest/&#34;&gt;earlier articles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Cover image © &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quoting the Shell</title>
      <link>http://localhost:1313/article/quoting-the-shell/</link>
      <pubDate>Mon, 17 Jun 2019 21:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/quoting-the-shell/</guid>
      <description>

&lt;p&gt;By some alignment of the stars, lately I&amp;rsquo;ve run into the same problem in different contexts and in different projects this year. What happens in an external command when an argument has spaces or other special characters?&lt;/p&gt;

&lt;p&gt;Ever wonder why web forms have weird restrictions on whitespace? It&amp;rsquo;s probably because the backend can&amp;rsquo;t deal with values with whitespace or other special characters. Or, at some point the programmer dealt with such a system and it scarred them for life; they are spacephobic. The mechanics of some underlying mechanism leak through and infect the application-level experience.&lt;/p&gt;

&lt;p&gt;We tend to assume that we can interpolate strings into a command line and everything will be fine, even if we actually know how that can be dangerous. I explain some of those dangers in &lt;a href=&#34;https://www.masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt; when I write about Perl&amp;rsquo;s taint checking. You can also read about some of that in &lt;a href=&#34;https://perldoc.perl.org/perlsec.html&#34;&gt;perlsec&lt;/a&gt;. I&amp;rsquo;ll ignore all that for this short article.&lt;/p&gt;

&lt;p&gt;My example here uses a macOS command that I have been playing with, but this applies to just about any Unix-ish external command. On Windows, you have additional concerns because you have to know what &lt;code&gt;cmd&lt;/code&gt; is going to do as well has a particular program will handle its own argument string.&lt;/p&gt;

&lt;h2 id=&#34;doing-it-the-wrong-way&#34;&gt;Doing it the wrong way&lt;/h2&gt;

&lt;p&gt;Consider this slightly contrived snippet. I&amp;rsquo;m using James Berry&amp;rsquo;s &lt;a href=&#34;https://github.com/jdberry/tag&#34;&gt;tag&lt;/a&gt;. It&amp;rsquo;s a command-line tool that can reliably set and retrieve the names of file labels. Run it with a filename and it returns the filename and a list of labels:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tag vicunas.txt
vicunas.txt                    	Orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s what that directory looks like in &lt;a href=&#34;https://cocoatech.com/#/&#34;&gt;Path Finder&lt;/a&gt;, my favorite Finder replacement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/quoting-the-shell/first_finder_window.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My task involved lots of files. Like most people, I&amp;rsquo;d like the capture of text from command-line tools to be effortless. I&amp;rsquo;ll often reach for backticks and a simple construction of a command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag $file`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though I know intellectually that this won&amp;rsquo;t always work, I wrote it that way initially because it&amp;rsquo;s easy. I took a shortcut and it ended up biting. When I run my program, some of the calls have problems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl shellwords.pl *
alpaca.pl
butterfly.p6
camel.txt                      	Green
sh: -c: line 0: syntax error near unexpected token `(&#39;
sh: -c: line 0: `tag has (parens).txt&#39;

tag: The file “has” couldn’t be opened because there is no such file.

llama.pl
shellwords.pl
vicunas.txt                    	Orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We tend to write the easiest thing first even though we know it will have problems later. Some people call this &lt;a href=&#34;https://www.martinfowler.com/bliki/TechnicalDebt.html&#34;&gt;technical debt&lt;/a&gt;; I call it being lazy. And we all do it.&lt;/p&gt;

&lt;p&gt;Consider what those failing commands look like. The &amp;ldquo;weird&amp;rdquo; filenames don&amp;rsquo;t look like a single argument to the command. One of them is even suspicious. And I think I have many more parens in filenames than anyone ever envisioned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tag has spaces.txt
$ has (parens).txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;naive-fixes&#34;&gt;Naive fixes&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s an easy fix; I&amp;rsquo;ll just put quotes around it. That works for a while because I&amp;rsquo;m really just playing the odds that the edge cases will be rare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag &amp;#34;$file&amp;#34;`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it fails again when I have a file with a quote in the filename. That&amp;rsquo;s also much less rare than people imagine. For example, I tend to save webpages in a way where their title becomes the file name. How many times am I going to fix this problem?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/quoting-the-shell/second_finder_window.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alpaca.pl
butterfly.p6
camel.txt                      	Green
sh: -c: line 0: unexpected EOF while looking for matching `&amp;quot;&#39;
sh: -c: line 1: syntax error: unexpected end of file

has (parens).txt
has spaces.txt                 	Blue
llama.pl
shellwords.pl
vicunas.txt                    	Orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At one point I figured that I&amp;rsquo;d just &lt;a href=&#34;https://perldoc.perl.org/functions/quotemeta.html&#34;&gt;quotemeta&lt;/a&gt; the whole thing even though I knew that was designed to protect strings in regular expressions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag &amp;#34;\Q$file\E&amp;#34;`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That doesn&amp;rsquo;t work either. Now none of the files match:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tag: The file “alpaca\.pl” couldn’t be opened because there is no such file.
tag: The file “butterfly\.p6” couldn’t be opened because there is no such file.
tag: The file “camel\.txt” couldn’t be opened because there is no such file.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The better fix is to escape only the delimiter. This uses a separate statement to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $quoted_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/&amp;#34;/\\&amp;#34;/g&lt;/span&gt;r;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag &amp;#34;$quoted_file&amp;#34;`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like it works (although I wouldn&amp;rsquo;t bet my life on it based on my performance with this task so far):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alpaca.pl
butterfly.p6
camel.txt                      	Green
has &amp;quot; quote.txt
has (parens).txt
has spaces.txt                 	Blue
llama.pl
shellwords.pl
vicunas.txt                    	Orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could put that inline with the command, although it&amp;rsquo;s a bit ugly. I get the modified string in an anonymous array reference (the square braces) and dereference that immediately in the string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag &amp;#34;@{[ $file =~ s/&amp;#34;/\\&amp;#34;/gr ]}&amp;#34;`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Blerg. That works in this case but is ugly in the service of keystrokes (but how many actual keystrokes did I use to get to the final result?). And it probably misses some other special cases, such as &lt;code&gt;$&lt;/code&gt; for shell interpolation and shell backticks. Single quotes might fix that in Unix but won&amp;rsquo;t in Windows. I&amp;rsquo;ll show &lt;a href=&#34;https://metacpan.org/pod/String::ShellQuote&#34;&gt;String::ShellQuote&lt;/a&gt; later.&lt;/p&gt;

&lt;p&gt;I can open a pipe to the command and specify the command and its arguments as a list. This requires neither quoting nor escaping anything because each argument in Perl is one argument in the command (like &lt;a href=&#34;https://perldoc.perl.org/functions/system.html&#34;&gt;system&lt;/a&gt; in its list form):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $file;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$fh&amp;gt;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How much work was this to get right? Hardly any. It&amp;rsquo;s annoying to do this little bit more, but it&amp;rsquo;s much less painful than a bunch of support tickets or angry mobs at your desk.&lt;/p&gt;

&lt;p&gt;If I didn&amp;rsquo;t need the output, I could have used &lt;code&gt;system&lt;/code&gt; (or &lt;code&gt;exec&lt;/code&gt;) in  list forms. In that case, the &lt;code&gt;system&lt;/code&gt; completely bypasses the shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $file;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be careful with an array, though! An array of one element is not the list form! There&amp;rsquo;s a slightly weird syntax to get around this. But the first array element in braces followed by the array. I explain this more in the &amp;ldquo;Secure Programming Techniques&amp;rdquo; chapter of &lt;a href=&#34;https://www.masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt;, but the &lt;a href=&#34;https://perldoc.perl.org/functions/exec.html&#34;&gt;exec docs&lt;/a&gt; explain it too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag $file&amp;#34;&lt;/span&gt; );
system @array;  &lt;span style=&#34;color:#75715e&#34;&gt;# not list form!&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $file );
system @array;  &lt;span style=&#34;color:#75715e&#34;&gt;# now it&amp;#39;s the list form!&lt;/span&gt;

system { $array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] } @array&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember, it doesn&amp;rsquo;t matter as much how rare the edge case is; it matters how damaging it is. Some things I can&amp;rsquo;t control, but this situation is not one of those things. A couple minutes here saves lots of time and money later.&lt;/p&gt;

&lt;h2 id=&#34;using-modules&#34;&gt;Using modules&lt;/h2&gt;

&lt;p&gt;There are some modules that can do this sort of stuff for you (with the risk of an additional dependency). Dan Book suggested this example with &lt;a href=&#34;https://metacpan.org/pod/String::ShellQuote&#34;&gt;String::ShellQuote&lt;/a&gt;. which handles Bourne shell issues (sorry zsh):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; String::ShellQuote;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $quoted_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shell_quote $file;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`tag $quoted_file`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;He also suggested &lt;a href=&#34;https://metacpan.org/pod/IPC::ReadpipeX&#34;&gt;IPC::ReadpipeX&lt;/a&gt;. Look under the hood and you&amp;rsquo;ll find that pipe open again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; IPC::ReadpipeX;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  readpipex &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $quoted_file&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;capturing-output-with-modules&#34;&gt;Capturing output with modules&lt;/h2&gt;

&lt;p&gt;I can run external commands with arguments with the core module &lt;a href=&#34;https://metacpan.org/pod/IPC::Open3&#34;&gt;IPC::Open3&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; IPC::Open3;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open3(
		undef, &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $out, &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $err,
		 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $file
		);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$out&amp;gt;&lt;/span&gt;;
	waitpid( $pid, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The CPAN module &lt;a href=&#34;https://metacpan.org/pod/Capture::Tiny&#34;&gt;Capture::Tiny&lt;/a&gt; can do the same thing with a slightly more pleasing interface (at the cost of an external dependency):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Capture::Tiny &lt;span style=&#34;color:#e6db74&#34;&gt;qw(capture_stdout)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ( @ARGV ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; capture_stdout { system &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;, $file };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $result;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;a-dream&#34;&gt;A dream&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve always wanted an even simpler way to construct these strings. I&amp;rsquo;d love to have &lt;a href=&#34;https://perldoc.pl/functions/sprintf&#34;&gt;sprintf&lt;/a&gt;-like syntax to interpolate strings in all sorts of special ways. I even have maintainership of &lt;a href=&#34;https://metacpan.org/pod/String::Sprintf&#34;&gt;String::Sprintf&lt;/a&gt; although I&amp;rsquo;ve done nothing with it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# some fictional world&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%C @a&amp;#39;&lt;/span&gt;, $command, @args;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Cover image © &lt;a href=&#34;https://www.flickr.com/photos/psyberartist/6686826117/in/photolist-bbTJrt-28sUivg-4pmCYD-9mdKd7-7VxQhR-4CVtdx-6vrn8j-4z5Bhr-4z9Nv5-my&#34;&gt;psyberartist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use terminal colors to distinguish information</title>
      <link>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</link>
      <pubDate>Tue, 23 Oct 2018 20:07:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</guid>
      <description>&lt;p&gt;The module &lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; is one of my favorite Perl tools. It doesn&amp;rsquo;t make my program work better but it allows me to quickly identify the output that&amp;rsquo;s important to me without missing out on the other stuff. I recently used it to track the shipments of my latest book.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&#34;https://www.learningperl6.com&#34;&gt;Learning Perl 6&lt;/a&gt; was published and the paper versions were available, I owed about 100 people a signed copy. From my years of publishing a print Perl magazine, I know that physically shipping stuff is an exercise in pain and memory. Did I send the book? When did I send it? I&amp;rsquo;m never quite sure the task is finished because a parcel might go missing without the recipient realizing they are missing something. Months later I get a complaint. No big whoop—that&amp;rsquo;s life in retail.&lt;/p&gt;

&lt;p&gt;I ship these through the US Postal Service and get a tracking number for each parcel. I could check those by hand at the USPS website, but I also wrote the &lt;a href=&#34;https://metacpan.org/pod/Business::US::USPS::WebTools&#34;&gt;Business::US::USPS::WebTools&lt;/a&gt; module to handle that for me. I can use the post office&amp;rsquo;s web API (rudimentary as it is) to get the status of packages.&lt;/p&gt;

&lt;p&gt;Curiously, this summer I had just given up this module because I didn&amp;rsquo;t want to maintain it anymore. I hadn&amp;rsquo;t used it in a couple of years and the web API interfaces had changed slightly. A couple weeks later I had another use for it. Go figure. It now lives in the &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules&#34;&gt;CPAN Adoptable Modules&lt;/a&gt; GitHub organization that I set up. If you have repos for modules that you no longer want, let me know about them. I&amp;rsquo;ll pull them into that organization and you can delete them from your own account. Anyone who wants to maintain them later will still find them. And, there&amp;rsquo;s also &lt;a href=&#34;https://github.com/gitpan&#34;&gt;GitPAN&lt;/a&gt;, but that&amp;rsquo;s not quite the same thing.&lt;/p&gt;

&lt;p&gt;To use this program, grab the module source from &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools&#34;&gt;GitHub&lt;/a&gt;. I had to update a few things to make it work and I might make further changes. &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools/commit/27c9443cc918d67f19f9a3a594e364a22fc5d16f&#34;&gt;Commit 27c9443&lt;/a&gt; from October 2, 2018 should be good. (And yes, it feels very strange not to point to a version on CPAN).&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need credentials from the &lt;a href=&#34;https://www.usps.com/business/web-tools-apis/welcome.htm&#34;&gt;WebTools site&lt;/a&gt;. They make it sound like a government official is going to scrutinize your application but you&amp;rsquo;ll get an email a couple of minutes later. No one from the USPS has ever contacted me to ask me what I was doing with the module. One curiosity of the US Government is that the Post Office has their own police force (mostly for  mail theft or mail fraud). But I don&amp;rsquo;t need to worry about that because my program adheres to the intended use of the service.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with a short program that gets the record for a single tracking number. I have my credentials in the environment so I can easily grab them for any other WebTools program I create. This one  prints a summary of the shipment (although there is a chain of steps from acceptance when I drop off the parcel to when they deliver it):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity)&lt;/span&gt;;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;,
		$tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is serviceable but boring (and I&amp;rsquo;ve mutated the tracking numbers so they aren&amp;rsquo;t valid and don&amp;rsquo;t represent actual shipments):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl track-one.pl 84058036993006920289
84058036993006920289  8:38 am September 14, 2018   Delivered, In/At Mailbox NEW YORK
$ perl track-one.pl CJ6467937US
CJ6467937US           9:38 am September 26, 2018   Departed PARIS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this program is much quicker than me going to the USPS website to paste numbers into their form. It can be better—what I really want to know is if I need to do anything for a shipment. I can read the output to figure that out. If it&amp;rsquo;s &amp;ldquo;Delivered&amp;rdquo; than I should be fine. If not, it can still be lost. But reading is hard! Adding color to that relieves me of the burden of scanning a whole line of text. The program can read the text for me and categorize it with color.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; works by outputting &lt;a href=&#34;http://wiki.bash-hackers.org/scripting/terminalcodes&#34;&gt;special escape sequences&lt;/a&gt; that instruct the (ANSI) terminal to switch colors. The new color is in effect until you output the special reset sequence (or change to another color):&lt;/p&gt;

&lt;pre&gt;$ perl -MTerm::ANSIColor=:constants -e &#39;print RED, &#34;Hello World&#34;, RESET&#39;
&lt;code style=&#34;color:red&#34;&gt;Hello World&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can do that in my tracking program. I&amp;rsquo;ll use green to indicate an outstanding shipment (a brighter color on my dark background) and blue (a darker color that subdues the line) to indicate a delivered shipment. I can know the status just by the color:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
		$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
		);
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s fine, but I don&amp;rsquo;t want to do these individually. I have all the tracking numbers in a file (a spreadsheet really, but that&amp;rsquo;s not important here). I want to check them all at once. I can do that in a &lt;code&gt;while&lt;/code&gt; loop that takes the lines from standard input. Of course the data are a bit dirty so I remove whitespace (the USPS formats it in different ways on different pages) and then skip lines that are empty. I do have some could that checks the validity of tracking numbers but it&amp;rsquo;s a bit old and doesn&amp;rsquo;t cover some of the new (undocumented) numbers they have been giving me. So I&amp;rsquo;m stuck with these simple checks. Otherwise, the program is mostly the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ) {
	chomp;
	&lt;span style=&#34;color:#e6db74&#34;&gt;s/\s+//g&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; length $_;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_ );

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
		warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
		state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
			$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
			);
		printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $_, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
		}

	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the outstanding shipments stand out from the delivered ones. Even with the heavily blurred screenshot I can make out which lines are the ones that I want to investigate. I&amp;rsquo;ve blurred this image a bit to protect personal information but even then I can pick out the shipments that are still out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/use-terminal-colors-to-distinguish-information/blurred-term-ansicolor.png&#34; alt=&#34;blurred output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s amazing that this works. The international cooperation for many countries is pretty good. I can get tracking all the way to the final delivery in many countries.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl foreach loops</title>
      <link>http://localhost:1313/article/perl-foreach-loops/</link>
      <pubDate>Sun, 23 Sep 2018 09:57:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-foreach-loops/</guid>
      <description>

&lt;p&gt;A &lt;a href=&#34;https://perldoc.perl.org/perlsyn.html#Foreach-Loops&#34;&gt;foreach&lt;/a&gt; loop runs a block of code for each element of a list. No big whoop, &amp;ldquo;perl foreach&amp;rdquo; continues to be one of the most popular on Google searches for the language. So we thought we&amp;rsquo;d see what&amp;rsquo;s happened in 20 years. I expand on Tom Christiansen&amp;rsquo;s &lt;a href=&#34;https://www.perl.com/doc/FMTEYEWTK/style/slide22.html/&#34;&gt;slide&lt;/a&gt; that&amp;rsquo;s part of his longer presentation then add a new but experimental feature at the end. If you want more, there&amp;rsquo;s plenty to read in &lt;a href=&#34;https://perldoc.perl.org/perlsyn.html&#34;&gt;perlsyn&lt;/a&gt; or my book &lt;a href=&#34;https://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;going-through-a-list&#34;&gt;Going through a list&lt;/h2&gt;

&lt;p&gt;Unless you say otherwise, &lt;code&gt;foreach&lt;/code&gt; aliases the current element to the topic variable &lt;code&gt;$_&lt;/code&gt;. You can specify that list directly in the parentheses after &lt;code&gt;foreach&lt;/code&gt;, use an array variable, or use the result of a subroutine call (amongst other ways to get a list):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( @numbers ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; ) }
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( numbers() ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;{ keys %some_hash }
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( numbers() ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some people like to use the synonym &lt;code&gt;for&lt;/code&gt;. There&amp;rsquo;s a proper C-style &lt;a href=&#34;https://perldoc.perl.org/perlsyn.html#For-Loops&#34;&gt;for&lt;/a&gt; that has three semicolon-separated parts in the parentheses. If Perl doesn&amp;rsquo;t see the two semicolons it treats &lt;code&gt;for&lt;/code&gt; just like a &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; $i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; $i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; ) {  &lt;span style=&#34;color:#75715e&#34;&gt;# C style&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$i is $i&amp;#34;&lt;/span&gt;;
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; ) {  &lt;span style=&#34;color:#75715e&#34;&gt;# foreach synonym&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;element-source-gotchas&#34;&gt;Element source gotchas&lt;/h2&gt;

&lt;p&gt;The aliasing is only temporary. After the &lt;code&gt;foreach&lt;/code&gt; the topic variable returns to its original value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Original value&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ before: $_\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( @numbers ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_\n&amp;#34;&lt;/span&gt;;
	$_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ after: $_\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that &lt;code&gt;$_&lt;/code&gt; appears unaffected by the &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_ before: Original value
$_ is 1
$_ is 3
$_ is 7
$_ after: Original value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an alias instead of a copy, which is a shortcut that allows your program to be a little faster by not moving data around. If you change the topic you change the original value if the list source is an array (the values are read-only otherwise and you&amp;rsquo;ll get an error):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Before: @numbers\n&amp;#34;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# Before: 1 3 7&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ( @numbers ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$_ is $_\n&amp;#34;&lt;/span&gt;;
	$_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;After: @numbers\n&amp;#34;&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;# After: 2 6 14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not only that, but if you change the source by adding or removing elements you can screw up the &lt;code&gt;foreach&lt;/code&gt;. This loops infinitely processing the same element because each go through the block moves the array elements over one position; when the iterator moves onto the next position it finds the same one it just saw:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number before: $number\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; $number ( @numbers ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number\n&amp;#34;&lt;/span&gt;;
	unshift @numbers, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Added later&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This output will go on forever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$number is 1
$number is 1
$number is 1
$number is 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;naming-your-own-topic-variable&#34;&gt;Naming your own topic variable&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;$_&lt;/code&gt; is often handy because it&amp;rsquo;s the default variable for several Perl functions, such as &lt;a href=&#34;https://perldoc.perl.org/functions/chomp.html&#34;&gt;chomp&lt;/a&gt; or &lt;a href=&#34;https://perldoc.perl.org/functions/split.html&#34;&gt;split&lt;/a&gt;. You can use your own name by specifying a scalar variable between the &lt;code&gt;foreach&lt;/code&gt; and the parentheses. Usually you don&amp;rsquo;t want to use that variable for something other than the loop so the usual style declares it inline with the &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Perl flattens lists into one big list, you can use more than one list source in the parentheses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @more_numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number ( @numbers, @more_numbers ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or a mix of source types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @more_numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number ( @numbers, numbers(), keys %hash ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using your own named topic variable acts just like what you saw with &lt;code&gt;$_&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Original value&amp;#39;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Before: $number&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; $number ( @numbers ) {
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	}
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;After: $number&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows the aliasing effect and that the original value is restored after the &lt;code&gt;foreach&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before: Original value
$number is 1
$number is 3
$number is 7
After: Original value
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;controlling&#34;&gt;Controlling&lt;/h2&gt;

&lt;p&gt;There are three keywords that let you control the operation of the &lt;code&gt;foreach&lt;/code&gt; (and other looping structures): &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, and &lt;code&gt;redo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;last&lt;/code&gt; stops the current iteration. It&amp;rsquo;s as if you immediately go past the last statement in the block then breaks out of the loop. It does not look at the next item. You often use this with a postfix conditional:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; $number ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ) {
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting $number&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ending $number&amp;#34;&lt;/span&gt;;
	}
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Past the loop&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You start the block for element &lt;code&gt;3&lt;/code&gt; but end the loop there and continue the program after the loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Starting 0
$number is 0
Ending 0
Starting 1
$number is 1
Ending 1
Starting 2
$number is 2
Ending 2
Starting 3
Past the loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; stops the current iteration and moves on to the next one. This makes it easy to skip elements that you don&amp;rsquo;t want to process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ) {
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting $number&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $number % 2;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\$number is $number&amp;#34;&lt;/span&gt;;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ending $number&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that you run the block with each element but only the even numbers make it past the &lt;code&gt;next&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Starting 0
$number is 0
Ending 0
Starting 1
Starting 2
$number is 2
Ending 2
Starting 3
Starting 4
$number is 4
Ending 4
Starting 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;redo&lt;/code&gt; restarts the current iteration of a block. You can use it with a &lt;code&gt;foreach&lt;/code&gt; although it&amp;rsquo;s more commonly used with looping structures that aren&amp;rsquo;t meant to go through a list of items.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example where you want to get three &amp;ldquo;good&amp;rdquo; lines of input. You iterate through the number of lines that you want and read standard input each time. If you get a blank line, you restart the same loop with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lines_needed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @lines;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $animal ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; $lines_needed ) {
	chomp( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; );
	&lt;span style=&#34;color:#66d9ef&#34;&gt;redo&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\A \s* \z/x&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# skip &amp;#34;blank&amp;#34; lines&lt;/span&gt;
	push @lines, $line;
	}

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lines are:\n\t&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\t&amp;#34;&lt;/span&gt;, @lines;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that the loop effectively ignore the blank lines and goes back to the top of the loop. It does not use the next item in the list though. After getting a blank line when it tries to read the second line, it tries the second line again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Reading line 1
First line
Reading line 2

Reading line 2

Reading line 2
Second line
Reading line 3

Reading line 3

Reading line 3
Third line
Lines are:
    First line
    Second line
    Third line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not very Perly though but this is an article about &lt;code&gt;foreach&lt;/code&gt;. A better style might be to read lines with &lt;code&gt;while&lt;/code&gt; to the point that &lt;code&gt;@lines&lt;/code&gt; is large enough:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $lines_needed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @lines;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; ) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\A \s* \z/x&lt;/span&gt;;
	chomp;
	push @lines, $_;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @lines &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $lines_needed;
	}
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lines are:\n\t&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\t&amp;#34;&lt;/span&gt;, @lines;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s more that you can do with these. The work with labels and nested loops. You can read more about them in &lt;a href=&#34;https://perldoc.perl.org/perlsyn.html&#34;&gt;perlsyn&lt;/a&gt; or &lt;a href=&#34;https://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-common-file-reading-gotcha&#34;&gt;A common file-reading gotcha&lt;/h2&gt;

&lt;p&gt;Since &lt;code&gt;foreach&lt;/code&gt; goes through each element of a list, some people reach for it when they want to go through each line in a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line ( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; ) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is usually not a good idea. The &lt;code&gt;foreach&lt;/code&gt; needs to have to entire list all at once. This isn&amp;rsquo;t a lazy construct like you&amp;rsquo;d see in some other languages. This means that the &lt;code&gt;foreach&lt;/code&gt; reads in all of standard input before it does anything. And, if standard input doesn&amp;rsquo;t close, the program appears to hang. Or worse, it tries to completely read terabytes of data from that filehandle. Memory is cheap, but not that cheap.&lt;/p&gt;

&lt;p&gt;A suitable replacement is the &lt;code&gt;while&lt;/code&gt; idiom that reads and processes one line at a time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; ) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is really a shortcut for an assignment in scalar context. That reads only one line from the filehandle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( defined( $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; ) ) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;an-experimental-convenience&#34;&gt;An experimental convenience&lt;/h2&gt;

&lt;p&gt;Perl v5.22 added an &lt;a href=&#34;https://www.effectiveperlprogramming.com/2015/08/create-named-variable-aliases-with-ref-aliasing/&#34;&gt;experimental &lt;code&gt;refaliasing&lt;/code&gt; feature&lt;/a&gt;. Assigning to a reference makes the thing on the right an alias for the thing on the left. Here&amp;rsquo;s a small demonstration where you assign an anonymous hash to a reference to a named hash variable. Now &lt;code&gt;%h&lt;/code&gt; is another name (the alias) for that hash reference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(refaliasing)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;

&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;qw(a 1 b 2)&lt;/span&gt; };
say Dumper( &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%h );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is handy in a &lt;code&gt;foreach&lt;/code&gt; where the elements of the list are hash references. First, here&amp;rsquo;s how you might do this without the feature. Inside the block you interact the &lt;code&gt;$hash&lt;/code&gt; as a reference; you must dereference it to get to a value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @mascots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
	{
		type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;camel&amp;#39;&lt;/span&gt;,
		name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Amelia&amp;#39;&lt;/span&gt;,
	},
	{
		type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;butterfly&amp;#39;&lt;/span&gt;,
		name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Camelia&amp;#39;&lt;/span&gt;,
	},
	{
		type  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&amp;#39;&lt;/span&gt;,
		name  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Go Gopher&amp;#39;&lt;/span&gt;,
	},
	{
		type  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;,
		name  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Monty&amp;#39;&lt;/span&gt;,
	},
	);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hash ( @mascots ) {
	say $hash&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With v5.22&amp;rsquo;s &lt;code&gt;refaliasing&lt;/code&gt; feature you can use a named hash variable as the topic. Inside the block you interact with the current element as a named hash. There&amp;rsquo;s no &lt;code&gt;-&amp;gt;&lt;/code&gt; for a dereference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.22&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(refaliasing)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @mascots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
	{
		type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;camel&amp;#39;&lt;/span&gt;,
		name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Amelia&amp;#39;&lt;/span&gt;,
	},
	{
		type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;butterfly&amp;#39;&lt;/span&gt;,
		name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Camelia&amp;#39;&lt;/span&gt;,
	},
	{
		type  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;go&amp;#39;&lt;/span&gt;,
		name  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Go Gopher&amp;#39;&lt;/span&gt;,
	},
	{
		type  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;,
		name  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Monty&amp;#39;&lt;/span&gt;,
	},
	);

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %hash ( @mascots ) {
	say $hash{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;}
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is the same in both programs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Amelia
Camelia
Go Gopher
Monty
Aliasing via reference is experimental at ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a warning from this experimental feature (and, all such features). The feature might change or even disappear according to &lt;a href=&#34;https://perldoc.perl.org/perlpolicy.html&#34;&gt;Perl&amp;rsquo;s feature policy&lt;/a&gt;. Disable the warning if you are comfortable with that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::refaliasing)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt; is a handy way to go through a list an element at a time. Use it when you already have the list completely constructed (and not to process a filehandle). Define your own topic variable to choose a descriptive name.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty Printing Perl 6</title>
      <link>http://localhost:1313/article/pretty-printing-perl-6/</link>
      <pubDate>Wed, 26 Jul 2017 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/pretty-printing-perl-6/</guid>
      <description>&lt;p&gt;As I was working on &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;Learning Perl 6&lt;/a&gt;, I wanted a way to pretty print a hash to show the reader what happened. I didn&amp;rsquo;t want to output from the builtin routines and a module I found was a good start but needed more work. So I created the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I get to my module, Perl 6 already has some nice ways to summarize objects. My first task was to dump a match object to see what it matched. Here&amp;rsquo;s a bit of code that matches a string against a regex and saves the result in &lt;code&gt;$match&lt;/code&gt;. That&amp;rsquo;s a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I output that with &lt;a href=&#34;https://docs.perl6.org/routine/put&#34;&gt;put&lt;/a&gt;, I get the part of the string that matched:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could change the code slightly to use &lt;a href=&#34;https://docs.perl6.org/routine/say&#34;&gt;say&lt;/a&gt;. That&amp;rsquo;s like &lt;code&gt;put&lt;/code&gt; but calls the &lt;a href=&#34;https://docs.perl6.org/routine/gist&#34;&gt;.gist&lt;/a&gt; method on the object first to provide a human-compatible version of the object. Each object can decide on it&amp;rsquo;s own what that means.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match;  &lt;span style=&#34;color:#75715e&#34;&gt;# put $match.gist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the output is almost the same. There are some fancy quotes around it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｢c1｣
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of &lt;code&gt;.gist&lt;/code&gt;, which &lt;code&gt;say&lt;/code&gt; gives me for free, I could call the &lt;a href=&#34;https://docs.perl6.org/routine/perl&#34;&gt;perl&lt;/a&gt; method explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;put $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a string that represents what Perl 6 thinks the data structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;https://docs.perl6.org/programs/01-debugging#Dumper_function_dd&#34;&gt;dd&lt;/a&gt;, a Rakudo-specific dumping feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is similar to the string for &lt;code&gt;.perl&lt;/code&gt;, but also slightly different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match $match = Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t particularly like any of formats because they are squished together and rather ugly to my eyes (but being pleasing to me personally shows up in exactly zero designs). I looked for a module, and even though the Perl 6 module ecosystem is fairly young, I found &lt;a href=&#34;https://github.com/drforr/perl6-pp&#34;&gt;Pretty::Printer&lt;/a&gt; from Jeff Goff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pretty::Printer; &lt;span style=&#34;color:#75715e&#34;&gt;# From Jeff Goff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

Pretty::Printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pp: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, I didn&amp;rsquo;t get anything (or, more exactly, I got literally &amp;ldquo;anything&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Any
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Pretty::Printer&lt;/code&gt; was nice for the few data types that it handled, but not a &lt;code&gt;Match&lt;/code&gt; object. It had some builtin handlers that it selected with a &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth) }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth) }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started to work on &lt;code&gt;Pretty::Printer&lt;/code&gt; to add a &lt;code&gt;Match&lt;/code&gt; handler, and then a few others, but I quickly realized I was getting far away from Jeff&amp;rsquo;s original code. Not only that, but I didn&amp;rsquo;t want to add more and more branches to the &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check more derived types first.&lt;/span&gt;
    when Match   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Match($ds,$depth) }
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth)  }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Map     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Map($ds,$depth) }
    when List    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth)  }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I changed my module name to &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump&lt;/a&gt; and ended up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was much more pleased with the output which allowed me easily pick out the part of the object I wanted to inspect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(
  :from(5),
  :hash(Map.new()),
  :list($()),
  :made(Mu),
  :orig(&amp;quot;:::abc123::&amp;quot;),
  :pos(7),
  :to(7)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solves that problem. But what about all the other types? One of my first improvements was a way to dump a class that my module did not know about. I knew about the &lt;code&gt;TO_JSON&lt;/code&gt; method that the Perl 5 &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; module. With that, a class could decide its own JSON representation. I could do that with &lt;code&gt;PrettyDump&lt;/code&gt;. If a class or object has a &lt;code&gt;PrettyDump&lt;/code&gt; method, my module will use that preferentially:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class SomeClass {
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
    method PrettyDump ( $pretty, $ds, $depth ) {
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
        }
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class doesn&amp;rsquo;t need to define that method. I could decorate an object with a &lt;code&gt;PrettyDump&lt;/code&gt; method through a role. The &lt;a href=&#34;https://docs.perl6.org/language/operators#infix_but&#34;&gt;but&lt;/a&gt; operator can do that for me by creating a new object in a new class that includes that role mixed into the original class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Int $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $a but role {
  method PrettyDump ( $pretty, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({self.^name}) {self}&amp;#34;&lt;/span&gt;;
    }
  };
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $b;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code looks different from Jeff&amp;rsquo;s, but it&amp;rsquo;s not that different. Instead of a &lt;code&gt;given-when&lt;/code&gt;, I have an &lt;code&gt;if&lt;/code&gt; structure. I collapsed Jeff&amp;rsquo;s branches into &lt;code&gt;self.can: $ds.^name&lt;/code&gt; to look for a matching method to the object type (and introduced a bug while doing it. See it?). The first branch looks for the &lt;code&gt;PrettyDump&lt;/code&gt; method. The second does some special handling for numeric things. If none of those work, I &lt;code&gt;die&lt;/code&gt;, which is another stupid thing I did at first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
  put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In dump. Got &amp;#34;&lt;/span&gt;, $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Numeric: $ds, $depth;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not handle &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I kept going. I wanted a way to add (and remove) handlers to a &lt;code&gt;PrettyDump&lt;/code&gt; object. I could add those as roles, but I thought about doing this repeatedly and often and didn&amp;rsquo;t like the idea of the frankenclass that would create. I added a way to do it on my own (although I might change my mind later):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

class SomeClass { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $pretty, $ds, Int $depth = 0 ) {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  }

$pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;handler: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SomeClass&amp;#39;&lt;/span&gt;, $handler;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code added a couple more branches (and some code comments to elucidate the process). First, I&amp;rsquo;d look for a handler. If I&amp;rsquo;d defined one of those, I&amp;rsquo;d use it. Otherwise, I went through the same process. I did add some more checks at the end. If nothing else worked, I try a &lt;code&gt;.Str&lt;/code&gt; method. Instead of &lt;code&gt;die&lt;/code&gt;-ing at the end, I add an &amp;ldquo;unhandled thingy&amp;rdquo; string for that object. That way I know that I didn&amp;rsquo;t handle something and the rest of the program keeps going. That turned out to be more important than I thought. I use this to peek at a program as it executes. It&amp;rsquo;s not part of the program flow and shouldn&amp;rsquo;t interrupt it because my dumping code is incomplete:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, Int $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Str ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the PrettyDump object has a user-defined handler&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for this type, prefer that one&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handles: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;handle: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# The object might have its own method to dump&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# its structure&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
      $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s any sort of Numeric, we&amp;#39;ll handle it&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# and dispatch further&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Numeric: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we have a method name that matches the class, we&amp;#39;ll&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# use that.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
      self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the class inherits from something that we know&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# about, use the most specific one that we know about&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep( { self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $_&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $type {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $type&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can( $what );
        $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;(
         $ds, $depth, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$ds.^name}.new(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
        }
      $str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we&amp;#39;re this far and the object has a .Str method,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# we&amp;#39;ll use that:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Str&amp;#39;&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({$ds.^name}): &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, we&amp;#39;ll put a placeholder method there&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Unhandled {$ds.^name})&amp;#34;&lt;/span&gt;
      }
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I got further into this code, I looked at Perl 5&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;, but discovered that this isn&amp;rsquo;t the same sort of thing. That module outputs Perl code that I could &lt;a href=&#34;https://perldoc.perl.org/functions/eval.html&#34;&gt;eval&lt;/a&gt; to get back the same data structure. I didn&amp;rsquo;t want that &lt;a href=&#34;https://www.masteringperl.org/2012/12/the-storable-security-problem/&#34;&gt;can of worms&lt;/a&gt; in my module.&lt;/p&gt;

&lt;p&gt;Beyond what I&amp;rsquo;ve shown here, I&amp;rsquo;ve been fiddling with formatting and other minor things as I run into problems. If there&amp;rsquo;s something that you&amp;rsquo;d like to do with the code, you can contribute through the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump GitHub repo&lt;/a&gt;, or even fork my code as the basis for your own experiments.&lt;/p&gt;

&lt;p&gt;(Part of this work was supported by a travel grant from &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. I presented talks about my work at &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/pretty-dump-perl-6&#34;&gt;Amsterdam.pm&lt;/a&gt;, &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/dumping-perl-6-french-perl-workshop&#34;&gt;French Perl Workshop 2017&lt;/a&gt;, and &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/prettydump-perl-6-londonpm&#34;&gt;London.pm&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thinking about Perl 6</title>
      <link>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</link>
      <pubDate>Tue, 25 Apr 2017 08:23:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</guid>
      <description>&lt;p&gt;&lt;em&gt;brian d foy interviews Laurent Rosenfeld, whose new book &lt;a href=&#34;http://shop.oreilly.com/product/0636920065883.do&#34;&gt;Think Perl 6&lt;/a&gt; from O&amp;rsquo;Reilly Media, comes out this summer and is available for pre-order. This book joins a series of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think &amp;hellip;&lt;/a&gt; books targeting different subjects and is provided for free under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/3.0/&#34;&gt;Creative Commons license&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was made possible through a reward on brian&amp;rsquo;s &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/learning-perl-6&#34;&gt;Kickstarter project for Learning Perl 6&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your Perl programming background? How did you discover the language, how did it help you solve problems, and what did you like about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Laurent)&lt;/em&gt; I started to program in Perl 5 in 2002. At the time I was using mainly Python (and also a bit of TCL/TK) for my scripting needs.&lt;/p&gt;

&lt;p&gt;The integration and implementation team for which I started to work at the time was using a number of mostly relatively small Perl programs in the context of a data migration suite.&lt;/p&gt;

&lt;p&gt;Although I wasn&amp;rsquo;t working as a developer at the time, I felt it would be good to get to get acquainted to the language. So I picked up a tutorial on the Internet and started to work on it, and I found the language to be quite pleasant.&lt;/p&gt;

&lt;p&gt;At that point, we received some large improperly formatted data files that needed to be pre-processed before we could use them. I first thought about writing quickly a Python script and then changed my mind: since I was trying to learn about Perl, maybe I could try to write that script in Perl. Within a day or so, I had a Perl script doing what was needed. That script was probably quite clumsy, and certainly did not comply with the best practices, but it worked exactly as needed.&lt;/p&gt;

&lt;p&gt;I was quite impressed how easily I had been able to write a script for real professional use with the small subset of Perl that I knew at the time. I continued with Perl. It is really a few years later that I started to really consider Perl as a programming language, rather than simply a scripting language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have made various tests and experiments with Perl 6 in 2012 and early 2013, but I started to work seriously with Perl 6 during the second half of 2013. I started to write about Perl 6 in 2014.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some of your favorite features of the new language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first that it belongs to the Perl family, with the same spirit (TIMTOWTDI, DWIM, etc.). This made it easy for me to learn it, even though Perl 5 and Perl 6 are different languages.&lt;/p&gt;

&lt;p&gt;Then the features I prefer are its powerful object model, the very good support for functional style programming, the enhanced regex features and grammars. I love the built-in possibilities of extending the languages, such as constructing new operators, extending the Perl 6 grammar, etc.&lt;/p&gt;

&lt;p&gt;The support for concurrent programming and parallel processing also seems to be great, but I have only played with that, I haven&amp;rsquo;t done anything serious with it at this point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your new book, &lt;em&gt;Think Perl 6&lt;/em&gt;, is based on a similar Python book. How did you discover that book? Were you doing Python at the time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many years ago I read the first edition of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think Python&lt;/a&gt; and had found it was a great book, because it wasn&amp;rsquo;t teaching Python, but rather teaching computer science and programming, using Python. This is the main idea of &lt;em&gt;Think Perl 6&lt;/em&gt;: teaching computer science using Perl 6.&lt;/p&gt;

&lt;p&gt;I have been using Python in the past, but I don&amp;rsquo;t remember if was using it regularly when I first read &lt;em&gt;Think Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How alike are the two books? Did you have to change much of the book to accommodate Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The early chapters are quite similar (except of course for the code examples and differences in syntactic features).&lt;/p&gt;

&lt;p&gt;As I said, both books are about teaching computer programming more than teaching the specific language. So most of what is about the art of programming is quite similar. But when it comes to the languages&amp;rsquo; features, there are obviously some major differences.&lt;/p&gt;

&lt;p&gt;The chapter on strings, for example, is quite different because there is a long part on regular expressions or regexes in &lt;em&gt;Think Perl 6&lt;/em&gt;, whereas the Python book does not even mention them.&lt;/p&gt;

&lt;p&gt;The later chapters, such as those about object-oriented programming, grammars or functional programming are completely different or even brand new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You started translating &lt;em&gt;Think Python&lt;/em&gt; into French. What motivated you to do that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I said, I had loved the first edition of that book. When friends of mine considered translating that book into French I strongly supported the idea.&lt;/p&gt;

&lt;p&gt;Initially, someone else (whom I knew well for having worked on other projects with her) started to translate the book, and I initially acted as a technical editor of the translation. Then I was dragged more into the project and translated myself the more technical parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What else have you translated?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have translated a number of other things. Concerning items that have the size of a book, I should mention &lt;em&gt;Modern Perl&lt;/em&gt;, the book by chromatic, and I am currently working on the translation of a book about Scala.&lt;/p&gt;

&lt;p&gt;Besides that, I have translated many shorter tutorials and articles on various features of programming languages such as Perl 5, Perl 6, Python, C++, Go, etc., as well as various articles about big data and also some pieces on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you think about the subject differently in French than English? Do these spoken languages affect how you explain things?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, I don&amp;rsquo;t think that the human language I use affects the way I think. Sometimes I think in English when writing something in French, and sometimes the other way around, but, most of the time, I think in the language in which I will try to express myself. I even dream in both languages (although more frequently in French). I think that I am truly bilingual in the sense that I can really think in both languages with no real difference (although, of course, my command of English is less fluent than my command of French, my mother tongue).&lt;/p&gt;

&lt;p&gt;But the language I use does of course change to a certain extent the way to express ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Think Perl 6&lt;/em&gt;&amp;rsquo;s subtitle is &amp;ldquo;Think Like a Computer Scientist&amp;rdquo;. Do you think that the programming world needs more academic rigor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More academic rigor, well, yes, in a certain way, but I am not sure that&amp;rsquo;s really what is lacking. A broader understanding of computer science is certainly needed. Sometimes I see people developing in one language, say PHP, and not really knowing any other language or any other way of doing things; that&amp;rsquo;s not very good. I tend to think you can&amp;rsquo;t really be a good programmer if you know only one language. I personally love programming languages and I have used at least three dozens of them over the last thirty years. I think it opens the mind to other approaches and better ways of doing things.&lt;/p&gt;

&lt;p&gt;I really agree with Tom Christiansen who said that a programmer that hasn&amp;rsquo;t been exposed to imperative or procedural programming, object-oriented programming, functional programming, and logical or declarative programming has some conceptual blindspots.&lt;/p&gt;

&lt;p&gt;And I also don&amp;rsquo;t think you can become a good programmer in just one semester or by simply reading &amp;ldquo;Programming X for Dummies.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What book has most influenced your programming habits?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relatively recently, definitely &lt;em&gt;&lt;a href=&#34;http://hop.perl.plover.com&#34;&gt;Higher Order Perl&lt;/a&gt;&lt;/em&gt;, the book by Mark Jason Dominus about functional programming in Perl 5. It is probably, in my opinion, the best IT/CS book I&amp;rsquo;ve read in the last ten years. It has changed really the way I program not only in Perl, but also how I write code in other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which books using languages other than Perl have made you a better Perl programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is hard to make a list and not to forget some important ones. Just naming a few, in no particular order: &lt;em&gt;The Practice of Programming&lt;/em&gt; (Kernighan and Pike), &lt;em&gt;Structure and Interpretation of Programming Languages&lt;/em&gt; (Abelson and Sussman), &lt;em&gt;Think Python&lt;/em&gt; (A. Downey), &lt;em&gt;Programming Pearls&lt;/em&gt; (Jon Bentley), &lt;em&gt;Mastering Regular Expressions&lt;/em&gt; (Jeffrey Friedl).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even if someone isn&amp;rsquo;t going to work in Perl 6, what lessons from your book can people take to other languages?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, I certainly wish that people that use my book to learn programming will continue to program in Perl 6, but I&amp;rsquo;ll be very happy if they learned programming with my book and become good programmers in another languages.&lt;/p&gt;

&lt;p&gt;Personally, when I was studying, I had to use a number of programming languages that I never or seldom used afterwards for any real-life purpose (Basic, Fortran, Pascal, Lisp, Scheme, Caml, Ada, Prolog, Modula-2, etc.). But I learned quite a bit from them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future do you see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I frankly don&amp;rsquo;t know. I think this language is really very good and efficient, but that&amp;rsquo;s not enough to become the leading language. There is an element of luck: is the language coming at the right time? Let&amp;rsquo;s face it: Perl 6 took way too long to come out. But that&amp;rsquo;s doesn&amp;rsquo;t matter too much if Perl 6 is the good match for today&amp;rsquo;s needs; I think it probably is. The good point about Perl 6 is that it can easily be extended; so, it is likely to satisfy not only current needs, but also tomorrow&amp;rsquo;s needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future would you like to see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I really think it is the greatest programming language I have seen so far. I hope people will start recognizing that.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Track Module Changes While You Sleep</title>
      <link>http://localhost:1313/article/let-perlmodules-net-do-the-work/</link>
      <pubDate>Mon, 27 Mar 2017 08:47:28 +0000</pubDate>
      
      <guid>http://localhost:1313/article/let-perlmodules-net-do-the-work/</guid>
      <description>&lt;p&gt;I created &lt;a href=&#34;https://metacpan.org/pod/Module::Extract::Use&#34;&gt;Module::Extract::Use&lt;/a&gt; as a simple tool to list the modules a program uses, and I recently added some features to make it easier to create some input I could give to &lt;a href=&#34;https://www.perlmodules.net&#34;&gt;Perlmodules.net&lt;/a&gt; to create a feed of changes for those modules.&lt;/p&gt;

&lt;p&gt;Much of my day-to-day work involves helping people turn legacy stuff into something testable, distributable, and installable (I find that special sort of drudgery quite interesting because every mess is different).  Jonathan Yu worked with my &lt;a href=&#34;https://metacpan.org/pod/Module::Extract::Use&#34;&gt;Module::Extract::Use&lt;/a&gt; to create the example program &lt;i&gt;examples/extract_modules&lt;/i&gt; which I extended a bit. Here are some examples using the script on itself. The first example is for human inspection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# print a verbose text listing
$ extract_modules extract_modules
Modules required by examples/extract_modules:
 - Getopt::Std (first released with Perl 5)
 - Module::CoreList (first released with Perl 5.008009)
 - Pod::Usage (first released with Perl 5.006)
 - strict (first released with Perl 5)
 - warnings (first released with Perl 5.006)
5 module(s) in core, 0 external module(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added some options to create an undecorated list of one module per line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# print a succint list, one module per line
$ extract_modules -l extract_modules
Getopt::Std
Module::CoreList
Pod::Usage
open
strict
warnings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And since I like that &lt;code&gt;xargs -0&lt;/code&gt; allows me to represent several lines as a single string with null octets as separators, I added a switch for that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# print a succinct list, modules separated by null bytes
# you might like this with xargs -0
$ extract_modules -l -0 extract_modules
Getopt::StdModule::CoreListPod::Usageopenstrictwarnings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I&amp;rsquo;m in there, I might as well add JSON output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# print the modules list as JSON
$ extract_modules -j extract_modules
[
  &amp;quot;Getopt::Std&amp;quot;,
  &amp;quot;Module::CoreList&amp;quot;,
  &amp;quot;Pod::Usage&amp;quot;,
  &amp;quot;open&amp;quot;,
  &amp;quot;strict&amp;quot;,
  &amp;quot;warnings&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want XML, tough. Well, I&amp;rsquo;ll accept patches, actually, but maybe you could write a JSON-to-XML converter and chain some programs. Remember that Perl is a glue language!&lt;/p&gt;

&lt;p&gt;Note that this program can only detect explicitly declared namespaces in static &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; statements. You don&amp;rsquo;t see the &lt;a href=&#34;https://metacpan.org/pod/Module::Extract::Use&#34;&gt;Module::Extract::Use&lt;/a&gt; in the output because this program uses it implicitly. That&amp;rsquo;s a rare situation that doesn&amp;rsquo;t bother me that much, and it&amp;rsquo;s something that I try to refactor out of code when I can.&lt;/p&gt;

&lt;p&gt;One of my immediate uses is to install all of the dependencies from a standalone program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ extract_modules -l -0 some_program | xargs -0 cpan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is much better than what I use to do: keep trying to run the program until it doesn&amp;rsquo;t complain about missing dependencies. Sometimes that will still happen will implicit dependencies, but as I said, it&amp;rsquo;s rare. From there, I can also use this list to construct the text I need to put into a &lt;em&gt;Makefile.PL&lt;/em&gt;. I&amp;rsquo;ve considered writing a program for that, but I don&amp;rsquo;t think it would save me that much time. I usually want to look at the list, so the no-look automation isn&amp;rsquo;t as compelling.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another thing I like to do with these module lists. Alexander Karelas created the website &lt;a href=&#34;https://www.perlmodules.net&#34;&gt;PerlModules.net&lt;/a&gt; to create feeds of changes to sets of modules. He was kind enough to support my &lt;em&gt;Learning Perl 6&lt;/em&gt; Kickstarter campaign by sponsoring this article on PerlTricks.&lt;/p&gt;

&lt;p&gt;From a list of modules, he figures out which distribution they are in and diff all of those &lt;em&gt;Changes&lt;/em&gt; files so he can present all of those diffs to you. You (and most people) probably don&amp;rsquo;t pay attention to all the changes. Perhaps you look at the &lt;em&gt;Changes&lt;/em&gt; for one of the main modules. You might ignore those other changes because it&amp;rsquo;s a bunch of work to go through all the distributions.&lt;/p&gt;

&lt;p&gt;You create a feed that specifies the modules that you want to track. For each new release, he diffs the Changes file and adds that diff to your feed. If you like, you could have one feed per application. When the module changes, you&amp;rsquo;ll see an entry in your feed and can read the diff without tracking down the module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/perlmodules-net/personal-feeds.png&#34; alt=&#34;Personal Feeds&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To get the list of modules I want to track, I can use &lt;code&gt;extract_modules&lt;/code&gt; with its &lt;code&gt;-l&lt;/code&gt; switch to make a one-namespace-per-line list of the dependencies. Here I use &lt;code&gt;extract_modules&lt;/code&gt; on all of the modules in a project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find lib -name &amp;quot;*.pm&amp;quot; -print0 | xargs -0 extract_modules -l
Archive::Extract
Archive::Tar
Archive::Zip
... # long list elided
YAML::XS
base
parent
strict
subs
vars
warnings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can paste this list directly into the &lt;a href=&#34;https://www.perlmodules.net&#34;&gt;PerlModules.net&lt;/a&gt; feed creator (or the motivated can automate this if they want to create many, many feeds).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/perlmodules-net/upload-list.png&#34; alt=&#34;Upload List&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once I&amp;rsquo;ve created the feed, I can view it in a variety of ways. Although I could visit the website to see what&amp;rsquo;s changed or get email when there&amp;rsquo;s a change. I prefer the RSS feed though. With that feed, a motivated Perler effectively has a way to programmatically get a list of the changes by fetching and parsing that feed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/perlmodules-net/changes-list.png&#34; alt=&#34;Changes List&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But, now comes the hard part: Making good &lt;em&gt;Changes&lt;/em&gt; files in our distributions. That&amp;rsquo;s something I&amp;rsquo;ll save for a different PerlTricks article.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Six more things I like about 6</title>
      <link>http://localhost:1313/article/6-more-things-about-6/</link>
      <pubDate>Tue, 07 Feb 2017 08:26:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/6-more-things-about-6/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.theperlshop.com&#34;&gt;The Perl Shop&lt;/a&gt; recently sponsored me to speak about Perl 6 at a meeting of the &lt;a href=&#34;http://boston.pm.org&#34;&gt;Boston Perl mongers&lt;/a&gt;. They had backed the Kickstarter project for &lt;a href=&#34;https://www.learningperl6.com&#34;&gt;Learning Perl 6&lt;/a&gt;. As part of that, I&amp;rsquo;m giving talks to Perl mongers groups about what I like about the language. These aren&amp;rsquo;t necessarily the most exciting or advanced features or the newest computer science features. They are merely things that I like.&lt;/p&gt;

&lt;p&gt;Many of these features are scattered across the languages landscape, and I&amp;rsquo;ve long said that I&amp;rsquo;d gladly abandon Perl when I found a language I liked better. Now I&amp;rsquo;m getting some of the features I may have coveted in languages that are missing some of the stuff I still enjoy about Perl.&lt;/p&gt;

&lt;h3 id=&#34;rats&#34;&gt;Rats&lt;/h3&gt;

&lt;p&gt;Perl 6 can maintain precision as long as possible by keeping rational numbers as ratios instead of making them native floating points (although you can still do that too). This means that we don&amp;rsquo;t have to deal with the variety of problems that come with relying on the underlying storage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl5 -le &#39;print 0.3 - 0.2 - 0.1&#39;
-2.77555756156289e-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a little off, but we&amp;rsquo;ve come to accept that (for example, multiplying all money amounts so you only deal in integers). Perl 6 however, stores them exactly as long as it can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl6
To exit type &#39;exit&#39; or &#39;^D&#39;
&amp;gt; my $rat = 0.3
0.3
&amp;gt; $rat.numerator
3
&amp;gt; $rat.denominator
10
&amp;gt; 0.3 - 0.2 - 0.1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A repeating decimal is still a rational number, although Perl 6 doesn&amp;rsquo;t yet have a feature to put the overbar on the repeating part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;lt;1/3&amp;gt;
0.333333
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;soft-failures&#34;&gt;Soft Failures&lt;/h3&gt;

&lt;p&gt;Perl 6 has &lt;a href=&#34;https://docs.perl6.org/type/Failure&#34;&gt;Failure&lt;/a&gt; objects, which wrap an exception. Many things may return such an object when something goes wrong. A &lt;a href=&#34;https://docs.perl6.org/type/Failure&#34;&gt;Failure&lt;/a&gt; is always &lt;code&gt;False&lt;/code&gt; in Boolean context, but Perl 6 also marks it as handled when it&amp;rsquo;s checked like that. Otherwise, if I try to use that object as if everything succeeded, it immediately throws its exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open $file {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In unless: exception is {$fh.exception.^name}&amp;#34;&lt;/span&gt;
	}

CATCH {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught {.^name}: {.message}&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that I handled the problem in the &lt;code&gt;unless&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In unless: exception is X::AdHoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare this with code that doesn&amp;rsquo;t check the result of the &lt;code&gt;open&lt;/code&gt; and keep going as if the filehandle is good:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open $file;

$fh&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines;

CATCH {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught {.^name}: {.message}&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the exception takes over and the &lt;code&gt;CATCH&lt;/code&gt; block handles it. There&amp;rsquo;s a strack trace that comes with that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Caught X::AdHoc: Failed to open file not-there: no such file or directory
Failed to open file not-there: no such file or directory
  in any  at ... CORE.setting.moarvm line 1
  in block &amp;lt;unit&amp;gt; at ...

Actually thrown at:
  in block &amp;lt;unit&amp;gt; at ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love that this lets me decide how to check the error. I&amp;rsquo;ve always thought that the various syntaxes for &lt;code&gt;try&lt;/code&gt; (in any language) bullied their ways into the language and took over the source code.&lt;/p&gt;

&lt;p&gt;And, I&amp;rsquo;m sufficiently besotted with this idea of object-oriented programming that I have a Perl 5 module that does a similar thing: &lt;a href=&#34;https://metacpan.org/pod/ReturnValue&#34;&gt;ReturnValue&lt;/a&gt;. I use that to return values where the caller can determine what happened by calling methods on the result.&lt;/p&gt;

&lt;h3 id=&#34;resumable-exceptions&#34;&gt;Resumable Exceptions&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s talk about exceptions. I haven&amp;rsquo;t liked the fake ones people tried to push on me in Perl 5. If I can&amp;rsquo;t actually handle it and continue the program, I don&amp;rsquo;t think it&amp;rsquo;s a proper exception. It&amp;rsquo;s just a different way to return a value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;CATCH {
	default {
		put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Problem with file: {.^name} --&amp;gt; {.message}&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resume
		}
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;-a-line ( $file ) {
	X::AdHoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( :payload&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Oh &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; Mr Bill&lt;span style=&#34;color:#f92672&#34;&gt;!&amp;gt;&lt;/span&gt; )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;throw;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hey, I can keep going!&amp;#34;&lt;/span&gt;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I see that &lt;code&gt;CATCH&lt;/code&gt; handled the exception, but then let the code in the subroutine continue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Problem with file: X::AdHoc --&amp;gt; Oh no Mr Bill!
Hey, I can keep going!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not every exception can resume, but I see a lot of promise in this ability.&lt;/p&gt;

&lt;h3 id=&#34;easier-interpolation&#34;&gt;Easier Interpolation&lt;/h3&gt;

&lt;p&gt;My estimation of a language is mostly based on how easy I can create new strings. Perl 5 was pretty good about that, but Perl 6 is even better.&lt;/p&gt;

&lt;p&gt;Scalars, arrays, and hashes (yes, hashes!) can interpolate directly, although you need to add the subscript characters for the latter two:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This one has a $scalar&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The array needs braces: @array[]&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The hash needs curlies: %hash{}&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better than that, though, is that I can interpolate anything by enclosing it in braces within the string. Perl 6 evaluates the code in the braces and replaces the block with the last evaluated expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are { $scalar.elems } elements&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The object&amp;#39;s name is { $object.^name }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The sum is { 2 + 2 }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lowest is { @array.sort.[1] }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lowest is { @array.min }&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could do this with &lt;code&gt;sprintf&lt;/code&gt;, and sometimes I think that&amp;rsquo;s more appropriate. But I&amp;rsquo;ve often played reference-dereference games in strings to do what I can now do by design. I really like this (and so will Ruby programmers, I think).&lt;/p&gt;

&lt;h3 id=&#34;fmt&#34;&gt;fmt&lt;/h3&gt;

&lt;p&gt;Have something in a scalar that you want to format in a different way? There&amp;rsquo;s a method for that. This isn&amp;rsquo;t one of the exciting new features because &lt;code&gt;printf&lt;/code&gt; has been around forever. Similar to the interpolation, this might seem like a small thing, put in the times I&amp;rsquo;ve used it I&amp;rsquo;ve been quite pleased despite the voice at the back of my head that says &amp;ldquo;It&amp;rsquo;s just &lt;code&gt;sprintf&lt;/code&gt; you idiot!&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; );
@buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map( { &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%02x&amp;#34;&lt;/span&gt; } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I forego the parens there and give the arguments to &lt;code&gt;.fmt&lt;/code&gt; by putting a colon after the method name. Since I didn&amp;rsquo;t specify an object this uses the topic (what you call &lt;code&gt;$_&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For some reason I really like this more than what everyone reading this article is thinking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map( { sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%02x&amp;#34;&lt;/span&gt;, $_ } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;lists-of-lists&#34;&gt;Lists of lists&lt;/h3&gt;

&lt;p&gt;Perl 6 has lists of lists (ever since the &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/14/day-15-2015-the-year-of-the-great-list-refactor/&#34;&gt;Great List Refactor&lt;/a&gt;). This will be a bit disconcerting to those use to the &amp;ldquo;always flat&amp;rdquo; lists of Perl 5, but I think you&amp;rsquo;ll get used to them. This is quite handy for keeping related values together.&lt;/p&gt;

&lt;p&gt;And, a list is an object, and as a single thingy you can store it in a scalar variable. It knows that it is a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scalar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; );
&lt;span style=&#34;color:#75715e&#34;&gt;# my $scalar = 1, 2, 3;  # Nope!&lt;/span&gt;

put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scalar: $scalar&amp;#34;&lt;/span&gt;;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scalar: { $scalar.^name }&amp;#34;&lt;/span&gt;;

scalar: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
scalar: List&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can have literal lists of lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ), &lt;span style=&#34;color:#e6db74&#34;&gt;qw/a b/&lt;/span&gt; );

put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;elems: { @array.elems }&amp;#34;&lt;/span&gt;;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@array[]&amp;#34;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# the whole thing&lt;/span&gt;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@array[0]&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# the first thing&lt;/span&gt;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ @array[0].^name }&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a b
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
List&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But here&amp;rsquo;s something even better. You can go the other way. I go from the flat list of this buffer (list of numbers representing octets in this case) to two-element lists that I can iterate over. This is quite handy for dealing with binary formats:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Buf $buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	Buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotor(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $c {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c is $c&amp;#34;&lt;/span&gt;;
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word is &amp;#34;&lt;/span&gt;,
	( $c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] )
		&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%02X&amp;#39;&lt;/span&gt; );
	}

c is &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;
word is DEAD
c is &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;239&lt;/span&gt;
word is BEEF&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s much more that I can write about lists of lists, but this article is long enough already. I&amp;rsquo;ll save some of that for later articles. You can see more of my Perl 6 stuff at &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;https://www.learningperl6.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacktoberfest is here</title>
      <link>http://localhost:1313/article/hacktoberfest-is-here/</link>
      <pubDate>Sun, 02 Oct 2016 10:51:01 +0000</pubDate>
      
      <guid>http://localhost:1313/article/hacktoberfest-is-here/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;Hacktoberfest&lt;/a&gt; is here, and you can be part of the effort to make Perl the most popular language in the month long festival of patches and pull requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; and &lt;a href=&#34;https://www.github.com/&#34;&gt;GitHub&lt;/a&gt; have teamed up to encourage new users to participate in open source. Make four pull requests to any GitHub project and they&amp;rsquo;ll give you a limited-edition Hacktoberfest t-shirt. It might not sound like much, but consider what you get besides the shirt: you&amp;rsquo;re in the commit logs of four projects and your profile has some history. That&amp;rsquo;s the first step in building your open source résumé.&lt;/p&gt;

&lt;p&gt;The sponsors suggest that projects that want to participate label their issues with &amp;ldquo;Hacktoberfest&amp;rdquo;. That&amp;rsquo;s not strictly necessary, but you can &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;search&lt;/a&gt; for issues that projects think are suitable for new users. I think all of my projects are suitable (I may be optimistic), so I wanted a way to label all of my issues across all of my projects.&lt;/p&gt;

&lt;p&gt;I found out about this as I was building some other GitHub tools. I looked at &lt;a href=&#34;https://metacpan.org/pod/Net::GitHub&#34;&gt;Net::GitHub&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Pithub&#34;&gt;Pithub&lt;/a&gt;, and Marchex&amp;rsquo;s &lt;a href=&#34;https://github.com/marchex/github-api-tools&#34;&gt;github-api-tools&lt;/a&gt; but I wanted to iterate through long lists of paged results and process each item as I received them. The &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub Developer API&lt;/a&gt; is quite nice and even if you are re-inventing the wheel you&amp;rsquo;re learning about wheels, making this a fun night of work.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/examples/hacktoberfest.pl&#34;&gt;hacktoberfest.pl&lt;/a&gt; in my &lt;a href=&#34;https://github.com/briandfoy/ghojo&#34;&gt;ghojo&lt;/a&gt; repo. It will log in, list all of my repos (there are a couple hundred), create the &amp;ldquo;Hacktoberfest&amp;rdquo; label in each, and then apply the label to each open issue.&lt;/p&gt;

&lt;p&gt;The ghojo project is still very much in its infancy (which means there&amp;rsquo;s all sorts of pull request opportunities). But I allow quite a bit of flexibility by accepting a callback for things I expect to return many items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  };

$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each time I find a repo—and you don&amp;rsquo;t have to know how I do that—I run that callback. It&amp;rsquo;s a little bit like &lt;a href=&#34;https://metacpan.org/pod/File::Find&#34;&gt;File::Find&lt;/a&gt;&amp;rsquo;s use of the &lt;code&gt;wanted&lt;/code&gt; coderef. You don&amp;rsquo;t see the very nice API paging going on either; &lt;code&gt;repos&lt;/code&gt; keeps fetching more results as long as there are more results.&lt;/p&gt;

&lt;p&gt;That callback deals with a repo, but each repo has a list of issues. I want to process this list of issues as I run into them. So what I need is a callback to process a repo with a nested callback for the issues:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.24&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Ghojo;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ghojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( { token &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; } );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $label_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hacktoberfest&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $user, $repo ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;m{/}&lt;/span&gt;, $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{full_name};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_repo_object( $owner, $repo );

  &lt;span style=&#34;color:#75715e&#34;&gt;# get the labels for that repo&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{ &lt;span style=&#34;color:#e6db74&#34;&gt;qw(name color)&lt;/span&gt; } } $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;labels&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*;&lt;/span&gt;

  unless( exists $labels{$label_name} ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create_label( $label_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff5500&amp;#39;&lt;/span&gt; );
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\tCreated $label_name label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $rc;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $item ) {
    $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_labels_to_issue( $item&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{number}, $label_name );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $item;
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $issues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $repo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;issues( $callback );

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $repo;
  };


$ghojo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;repos( $repo_callback );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Curiously, within a couple of hours of uploading the program, I received my first Hacktoberfest &lt;a href=&#34;https://github.com/briandfoy/ghojo/pull/14&#34;&gt;pull request&lt;/a&gt;. &lt;a href=&#34;https://github.com/haydenty&#34;&gt;haydenty&lt;/a&gt; added the &lt;a href=&#34;https://github.com/briandfoy/ghojo/blob/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file to my ghojo repo. It&amp;rsquo;s something I&amp;rsquo;ve been meaning to add to all of my repos. Now I&amp;rsquo;m considering adding an issue to each repo to note that and label each one &amp;ldquo;Hacktoberfest&amp;rdquo;. Or someone who wants to get started with something simple can create the issues for me, or send the pull requests right off.&lt;/p&gt;

&lt;p&gt;If you have lots of repos, label your issues to help push Perl up in &lt;a href=&#34;https://github.com/search?q=state%3Aopen+label%3Ahacktoberfest&amp;amp;type=Issues&#34;&gt;the rankings&lt;/a&gt;. By the time we reach the end of the month, I&amp;rsquo;ll have a program to reverse the labeling.&lt;/p&gt;

&lt;p&gt;Some of this I&amp;rsquo;m doing for fun, and some of this I&amp;rsquo;m doing because some organizations want better GitHub tools. Somehow how October is when all of that is coming together. If you&amp;rsquo;d like me to work on this sort of stuff for you, &lt;a href=&#34;mailto:brian.d.foy@gmail.com&#34;&gt;let me know&lt;/a&gt;! But submit those pull requests first so you get that t-shirt.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The History of the Schwartzian Transform</title>
      <link>http://localhost:1313/article/the-history-of-the-schwartzian-transform/</link>
      <pubDate>Fri, 02 Sep 2016 11:18:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-history-of-the-schwartzian-transform/</guid>
      <description>

&lt;p&gt;The history of the Schwartzian Transform is fascinating, full of intrigue, competing philosophies, and cross-language reluctant cooperation. The Schwartzian Transform is the name applied to a particular implementation of a cached-key sorting algorithm.&lt;/p&gt;

&lt;p&gt;The first public appearance is probably Randal Schwartz&amp;rsquo;s Usenet &lt;a href=&#34;https://groups.google.com/d/msg/comp.unix.shell/MdqXDOuzDG0/gcmc1IG9GckJ&#34;&gt;post&lt;/a&gt; on December 16, 1994 in response to Ken Brown&amp;rsquo;s request for help:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m having trouble sorting on the *last* word of the last field in a record&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ken Brown&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Randal included the following code in his reply:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# new features, new bugs!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;
  map { $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] }
  sort { $a&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; $b&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] }
  map { [$_, &lt;span style=&#34;color:#e6db74&#34;&gt;/(\S+)$/&lt;/span&gt;] }
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Randal didn&amp;rsquo;t name it. He wrote the code and essentially dropped the mic. He says that he was on a break from teaching a Perl class, so his response was brief and unexplicated - typical for an experienced Usenet denizen (he said that he was there when you could read all of Usenet in a half hour). I don&amp;rsquo;t think he expected it to be as troublesome as it turned out to be.&lt;/p&gt;

&lt;p&gt;His code isn&amp;rsquo;t that complex. It&amp;rsquo;s a big statement, but when I teach it in Perl classes, I tell people to read it from the end toward the beginning (a handy technique for any list pipeline):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first step computes the key to sort on. It combines that with the original value in a tuple.&lt;/li&gt;
&lt;li&gt;The middle step sorts of the computed element in the tuple.&lt;/li&gt;
&lt;li&gt;The last step extracts the original value from the tuple.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You probably can&amp;rsquo;t imagine how shocking this could be back then. Perl 5 was officially released in October 1994, but the first development versions had been around since the middle of 1993. Randal was surely playing with Perl 5 as soon as it came out. This means that most Perl programmers had not yet seen new features like the &lt;a href=&#34;https://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; function or references. They certainly weren&amp;rsquo;t comfortable with those ideas.&lt;/p&gt;

&lt;p&gt;Randal, however, knew the &lt;em&gt;decorate-sort-undecorate&lt;/em&gt; technique from LISP, especially since he&amp;rsquo;s solidly in the emacs camp in the editor wars. Renzo on &lt;a href=&#34;http://codereview.stackexchange.com/a/138436/13050&#34;&gt;Code Review&lt;/a&gt; fixed up my attempt at a LISP version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;(defun schwartzian&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;transform (list costly&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;function predicate)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sort a list of objects over the value of a function applied to them,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;by applying the Schwartzian Transform (https://en.wikipedia.org/wiki/Schwartzian_transform)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;the parameters are the list, the function, and the predicate for the sort.&amp;#34;&lt;/span&gt;
  (mapcar &lt;span style=&#34;color:#75715e&#34;&gt;#&amp;#39;cdr&lt;/span&gt;
      (stable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sort (mapcar (lambda (x)
                 (cons (funcall costly&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;function x) x))
                 list)
             predicate
             :key &lt;span style=&#34;color:#75715e&#34;&gt;#&amp;#39;car)))&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; :sb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;posix)
(schwartzian&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;transform
 (directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/*&amp;#34;&lt;/span&gt;)
 (lambda (x) (sb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;posix:stat&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mtime (sb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;posix:stat x)))
 &lt;span style=&#34;color:#75715e&#34;&gt;#&amp;#39;&amp;lt;=)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even with a little LISP knowledge you can tease out the same algorithm. You see the &lt;code&gt;mapcar&lt;/code&gt;, &lt;code&gt;stable-sort&lt;/code&gt;, and &lt;code&gt;mapcar&lt;/code&gt;. (I used &lt;a href=&#34;http://www.sbcl.org&#34;&gt;SBCL&lt;/a&gt; for this).&lt;/p&gt;

&lt;p&gt;In 1995 Tom Christiansen wrote &lt;a href=&#34;http://www.perl.com/doc/FMTEYEWTK/sort.html&#34;&gt;Far More Than Everything You&amp;rsquo;ve Ever Wanted to Know About Sorting&lt;/a&gt; and extensively covered Randal&amp;rsquo;s code even though he hadn&amp;rsquo;t labeled yet. He didn&amp;rsquo;t like it that much, but, to be fair, he says at the end:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not ragging on Randal, merely teasing a bit. He&amp;rsquo;s just trying to be clever, and that&amp;rsquo;s what he does. I&amp;rsquo;m just submitting a sample chapter for his perusal for inclusion the mythical Alpaca Book :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tom Christiansen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tom refers to &lt;em&gt;Learning Perl Objects, References, Objects, and Modules&lt;/em&gt;, which wouldn&amp;rsquo;t show up until 2003 (it&amp;rsquo;s now called &lt;a href=&#34;http://www.intermediateperl.com&#34;&gt;Intermediate Perl&lt;/a&gt;). Curiously, in that same year &lt;a href=&#34;https://books.google.com/books?id=GxKWdn7u4w8C&amp;amp;pg=PA113&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwir89e-krvNAhXMdz4KHW4uAqQQ6AEILjAC#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;Text Processing in Python&lt;/a&gt; (Google Books) mentioned it.&lt;/p&gt;

&lt;p&gt;A month after his Usenet posting, Randal wrote about his decorate-sort-undecorate idiom in his &lt;a href=&#34;http://www.stonehenge.com/merlyn/UnixReview/col06.html&#34;&gt;Unix Review column&lt;/a&gt; for January 1996, but he hadn&amp;rsquo;t labeled the technique by then either.&lt;/p&gt;

&lt;h3 id=&#34;getting-the-name&#34;&gt;Getting the name&lt;/h3&gt;

&lt;p&gt;In August 1995, &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!topic/comp.lang.perl.misc/fLo0RNV8oW8&#34;&gt;Bennett Todd answers a sorting question&lt;/a&gt; with a &amp;ldquo;Schwartz transformation&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Or for possibly more efficiency, ensure that the calls only happen once per
record, rather than approximately NlogN times, with the Schwartz
transformation:-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bennett Todd&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;@keys = map { $_-&amp;gt;[0] }
    sort { $a-&amp;gt;[1] &amp;lt;=&amp;gt; $b-&amp;gt;[1] or $a cmp $b }
    map { [ $_, datexform($foo{$_}) ] } keys %foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the first instance I could find where Randal&amp;rsquo;s last name was attached to the technique. People have seen and understood the technique and it has the start of a name, but it&amp;rsquo;s not quite an idiom yet. It also hasn&amp;rsquo;t settled on a name.&lt;/p&gt;

&lt;p&gt;Tom Christiansen&amp;rsquo;s April 1996 post in &lt;em&gt;comp.lang.perl.misc&lt;/em&gt; for &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/pw-Hl4byLnc/yzejRnku3RoJ&#34;&gt;Read directory in timestamp order?&lt;/a&gt; showed some benchmarks for sorting methods. He labeled one the &amp;ldquo;Schwartzian Transform&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In July, Colin Howarth started the thread &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/6NEeX4XJx54/nmpMmReMIbcJ&#34;&gt;&amp;ldquo;Schwartzian transform of %$self &amp;hellip; help?&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In October, Tom posted &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/VIKNMCeNFAM/18UApg1hWy8J&#34;&gt;an expanded draft of perllol&lt;/a&gt; as part of his &lt;a href=&#34;http://www.perl.com/doc/FMTEYEWTK/pdsc/&#34;&gt;Perl Data Structures Cookbook&lt;/a&gt;, which turned into &lt;a href=&#34;https://perldoc.perl.org/perldsc.html&#34;&gt;perldsc&lt;/a&gt; and &lt;a href=&#34;https://perldoc.perl.org/perllol.html&#34;&gt;perllol&lt;/a&gt;. He uses the full term &amp;ldquo;Schwartzian Transform&amp;rdquo;. The term was catching on.&lt;/p&gt;

&lt;h3 id=&#34;gaining-notoriety&#34;&gt;Gaining notoriety&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/cC_6osV70mMJ&#34;&gt;I&amp;rsquo;m still pissed at Randal for having posted it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tom Christiansen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tom wrote that in December and he didn&amp;rsquo;t mince words. It might look catty now, but at the time, Tom was on a mission to make people fall in love with Perl. He evangelized the language and didn&amp;rsquo;t want to scare people off with weird looking code. He was everywhere that people were talking about Perl, and that was good for us. That meant he was effectively supporting code he didn&amp;rsquo;t write, he didn&amp;rsquo;t like, and people didn&amp;rsquo;t understand. In his role of Perl&amp;rsquo;s apostle, he was besieged with people asking about something he wouldn&amp;rsquo;t have written himself.&lt;/p&gt;

&lt;p&gt;Later, in that same thread, he&amp;rsquo;d give it another name, the &lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/cC_6osV70mMJ&#34;&gt;Black Transform&lt;/a&gt;. He played on the translation of Randal&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Schwartz_(surname)&#34;&gt;Germanic surname&lt;/a&gt; that reflected his own opinion. That name didn&amp;rsquo;t stick.&lt;/p&gt;

&lt;p&gt;As with most long Usenet threads, it&amp;rsquo;s not entirely clear what people specifically didn&amp;rsquo;t like about the code, or even that there&amp;rsquo;s a consensus complaint. Some complaints spiral around Randal&amp;rsquo;s lack of comments. Some people want Perl to be accessible at first glance to someone who doesn&amp;rsquo;t know the language. Others who were comfortable with advanced programming skills weren&amp;rsquo;t bothered at all. That&amp;rsquo;s a tension even today.&lt;/p&gt;

&lt;p&gt;Remember, references and method notation were new syntax. People skilled with Perl 4 were still learning Perl 5. Perl hadn&amp;rsquo;t developed idioms for list processing (LISP, natch), so people apparently weren&amp;rsquo;t that comfortable with stacked list operations. Some people merely hated functional programming and LISP.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a segment of people who would rather have programming languages that are easy to learn over more powerful but more opaque.&lt;/p&gt;

&lt;p&gt;Around that time, Joseph Hall wrote &lt;a href=&#34;http://web.archive.org/web/19961228210914/http://www.5sigma.com/perl/schwtr.html&#34;&gt;More about the Schwartzian Transform (Internet Archive)&lt;/a&gt;. It&amp;rsquo;s tough to tell exactly when he wrote this, but the earliest copy in the Internet archive notes it was last modified in January 1997. Joseph used his PeGS (Perl Graphical Structures) to show them in action. This might be the first mention outside of Usenet. It&amp;rsquo;s also the basis for the item that appears in his 1998 book &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, around that time, Joseph was working with Randal at Stonehenge Consulting Services to develop the Perl courses. I&amp;rsquo;m fuzzy on that timeline, but his coursework turned into the book &lt;em&gt;Learning Perl Objects, References, and Modules&lt;/em&gt; (later renamed &lt;a href=&#34;https://www.intermediateperl.com&#34;&gt;Intermediate Perl&lt;/a&gt;). He&amp;rsquo;s the one who came up with the Gilligan&amp;rsquo;s Island as examples, but his handiwork with PeGS and the Schwartzian Transform show up in that book and in the class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;Effective Perl Programming&lt;/a&gt; might be the first book to mention the transform, using what he&amp;rsquo;d already written. Even though I worked on the second edition of that book, I think &lt;a href=&#34;https://www.amazon.com/gp/product/0201419750/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=hashbang09-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201419750&amp;amp;linkId=b8a4558fd65ec4c4bb17add6e194e5e4&#34;&gt;Joseph&amp;rsquo;s original is still worth the $4 on Amazon.com&lt;/a&gt;. It&amp;rsquo;s some of the best Perl writing in the history of Perl.&lt;/p&gt;

&lt;p&gt;In 1998 the transform also showed up in the first edition of &lt;a href=&#34;https://books.google.com/books?id=7q5QAAAAMAAJ&amp;amp;q=schwartzian+transform+%22programming+perl%22&amp;amp;dq=schwartzian+transform+%22programming+perl%22&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjplePak7vNAhWSZj4KHYK9AtUQ6AEINDAD&#34;&gt;The Perl Cookbook&lt;/a&gt;, where Tom called it the Schwartzian Transform. I don&amp;rsquo;t know who first typed it into a manuscript, so perhaps it&amp;rsquo;s a tie. Tom and Joseph might have to figure that out between them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://books.google.com/books?id=4ju67sMPwEkC&amp;amp;pg=PA111&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwir89e-krvNAhXMdz4KHW4uAqQQ6AEIOjAE#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;Mastering Perl Algorithms (Google Books)&lt;/a&gt; covered the transform in 1999 and &lt;a href=&#34;https://books.google.com/books?id=gGNQ-O1WWQAC&amp;amp;pg=PA310&amp;amp;dq=schwartzian+transform&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjo79KEk7vNAhWBMj4KHcBFDEY4ChDoAQhNMAg#v=onepage&amp;amp;q=schwartzian%20transform&amp;amp;f=false&#34;&gt;CGI Programming in Perl (Google Books)&lt;/a&gt; mentioned it in 2000. After that, the term &amp;ldquo;Schwartzian Transform&amp;rdquo; turns up quite a bit, even in some Ruby, Python, the Jython books.&lt;/p&gt;

&lt;p&gt;Some other interesting quotes from that long thread, which seem quaint twenty years later. My favorite was prophetic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/comp.lang.perl.misc/fPx42DB2jd8/CTRmyWyJW6MJ&#34;&gt;I wonder if this chunk of code will haunt us forever.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Eric Arnold&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed it has haunted us since then, but that&amp;rsquo;s not the end of the story.&lt;/p&gt;

&lt;h3 id=&#34;variations&#34;&gt;Variations&lt;/h3&gt;

&lt;p&gt;Randal&amp;rsquo;s use of the anonymous array is interesting, but it&amp;rsquo;s not the only way to decorate the original value. You could compute the values and store them in a hash. Joseph Hall came up with something called the Orcish Maneuver - a clever pun on &lt;a href=&#34;http://lotr.wikia.com/wiki/Orcs&#34;&gt;Orc&lt;/a&gt; (perhaps) and &amp;ldquo;OR Cache&amp;rdquo;. This doesn&amp;rsquo;t use the &lt;a href=&#34;https://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; function  or references:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @sorted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sort {
  ( $times{$a} &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M $a ) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt;
  ( $times{$b} &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M $b )
} @old_array;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Joseph uses a hash to store the potentially expensive sort value. If that key does not yet exist, he calculates and stores it for next time. This idiom relies on the feature that a Perl assignment returns the value assigned.&lt;/p&gt;

&lt;p&gt;Thanks to the &lt;a href=&#34;http://act.yapc.eu/alpineperl2016/&#34;&gt;Alpine Perl Workshop 2016&lt;/a&gt; in Innsbruck for sponsoring the accompanying talk on this history. You can find &lt;a href=&#34;http://bit.ly/2bHNNx4&#34;&gt;the slides for that talk on Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For what it&amp;rsquo;s worth, you&amp;rsquo;ll find plenty more Lord of the Rings references in the perl source.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: April Trolls</title>
      <link>http://localhost:1313/article/april_fools/</link>
      <pubDate>Wed, 04 May 2016 20:37:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/april_fools/</guid>
      <description>

&lt;p&gt;For an April Fool&amp;rsquo;s joke, I wanted to parody the &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Perl Jam circus&lt;/a&gt; where the author has an idea that something is wrong but gets the explanation half-wrong. I wrote &lt;a href=&#34;http://perltricks.com/article/perl-jam-iv-return-of-the-camel/&#34;&gt;Perl Jam VI: The Return of the Camel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought I&amp;rsquo;d catch some people out if I was clever enough with the first example and increasingly lazy. I might have been too clever, but I also think that April Fool&amp;rsquo;s is probably over. Not only that, I still felt guilty about not doing the work to explain things properly or giving you proper pointers where to look for good solutions.&lt;/p&gt;

&lt;h4 id=&#34;perl-s-rounding-problem&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h4&gt;

&lt;p&gt;Rounding is a problem for people who really care about numbers and where slight biases in numeric functions can skew results. Most people will probably never care about this because they don&amp;rsquo;t have to care. However, I used to work with scads of data from nuclear physics experiments where it could have mattered.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s particular issue is its reliance on someone else making the decision. When I first starting teaching Perl, many of my students had experience with C. They knew the issues with their libc. &lt;code&gt;perl&lt;/code&gt; defers many decisions on to that libc. This means that you can get different results with a different &lt;code&gt;perl&lt;/code&gt;s. Perl may run virtually everywhere, but it doesn&amp;rsquo;t guarantee you&amp;rsquo;ll get the same answer everywhere.&lt;/p&gt;

&lt;p&gt;There is plenty of literature out there on different methods, and there are more than several methods. Just that fact shows that people don&amp;rsquo;t agree on how it should work. If rounding might impact your results, you should be aware that you have many ways to deal with it. The &lt;a href=&#34;https://metacpan.org/pod/Math::Round&#34;&gt;Math::Round&lt;/a&gt; handles most of them.&lt;/p&gt;

&lt;h4 id=&#34;the-modulus-of-negative-numbers&#34;&gt;The modulus of negative numbers&lt;/h4&gt;

&lt;p&gt;The modulus operator was a bit more interesting since it actually has some problems and undefined behavior. I presented the table of operand combinations and noted which ones are defined in Perl. Some of the situations don&amp;rsquo;t have defined behavior.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t think that many people would take this section seriously since the modulus operator isn&amp;rsquo;t that popular. The &lt;a href=&#34;https://perldoc.perl.org/integer.html&#34;&gt;integer pragma &lt;/a&gt; may fix the problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internally, native integer arithmetic (as provided by your C compiler) is used. This means that Perl&amp;rsquo;s own semantics for arithmetic operations may not be preserved. One common source of trouble is the modulus of negative numbers, which Perl does one way, but your hardware may do another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The StackOverflow question &lt;a href=&#34;https://stackoverflow.com/a/32090446/2766176&#34;&gt;Perl: understanding modulo operation on negative numbers&lt;/a&gt; goes into more detail about Perl&amp;rsquo;s behavior.&lt;/p&gt;

&lt;p&gt;If this matters for your application, you can implement your own modulo operation (perhaps in &lt;a href=&#34;https://metacpan.org/pod/Inline::C&#34;&gt;Inline::C&lt;/a&gt;?) to do it exactly how you like to get the results you expect no matter where you run your program.&lt;/p&gt;

&lt;h4 id=&#34;fake-random-numbers&#34;&gt;Fake random numbers&lt;/h4&gt;

&lt;p&gt;When we say &amp;ldquo;random numbers&amp;rdquo;, experienced programmers generally understand that they aren&amp;rsquo;t actually using numbers that are random. They are &lt;a href=&#34;https://www.random.org/randomness/&#34;&gt;pseudo-random&lt;/a&gt;, although that&amp;rsquo;s too much to say over and over again. We shorten it to &amp;ldquo;random&amp;rdquo; to keep the sentences short. If you are seeding a random number generator, you&amp;rsquo;re using the fake kind.&lt;/p&gt;

&lt;p&gt;For the odd homework assignment or selecting a unique value you haven&amp;rsquo;t used yet, Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; may be fine. If you are doing something where you want real randomness, you don&amp;rsquo;t want something deterministic. You want &amp;ldquo;true&amp;rdquo; random numbers.&lt;/p&gt;

&lt;p&gt;Several modules provide an interface to better sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Random&#34;&gt;Net::Random&lt;/a&gt; can connect to internet services that send back random numbers. You have to trust the internet though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Crypt::Random&#34;&gt;Crypt::Random&lt;/a&gt; connects to the local &lt;a href=&#34;http://man7.org/linux/man-pages/man4/random.4.html&#34;&gt;/dev/random&lt;/a&gt;. That uses environmental noise to generate bytes. The /dev/urandom device might drop down to pseudo-randomness though. Neither is a good source for long sequences of numbers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;http://www.entropykey.co.uk&#34;&gt;Entropy Key&lt;/a&gt; is a small USB device that helps the &lt;em&gt;/dev/random&lt;/em&gt; device fill up its entropy sink. This allows you to read from the device more frequently without dropping into pseudorandomness.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.random.org/integers/&#34;&gt;Random.org&lt;/a&gt; provides data based on atmospheric noise. In the StackOverflow question &lt;a href=&#34;http://stackoverflow.com/a/4093822/2766176&#34;&gt;How to generate an array with random values, without using a loop?&lt;/a&gt;, I presented a way to override Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; to use this source. Some other answers are illuminating as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with most everything else, there&amp;rsquo;s no answer that covers every use. That you discover other sources is a rite of passage for a programmer.&lt;/p&gt;

&lt;h4 id=&#34;perl-lets-anyone-program&#34;&gt;Perl lets anyone program&lt;/h4&gt;

&lt;p&gt;I joked that Perl&amp;rsquo;s real problem was that it existed, essentially, and that people could use it. It&amp;rsquo;s a variation on the joke about the world&amp;rsquo;s most secure computer is one that&amp;rsquo;s turned off, encased in concrete, and dropped to the bottom of the ocean. And, we&amp;rsquo;re not even sure even then.&lt;/p&gt;

&lt;p&gt;But, I had a more interesting point in mind. Despite any technical limitations or gotchas, documented or not, it&amp;rsquo;s people who make programs and the decisions about what programs will do. Knowing the syntax of a language is a start, but the biggest failures come from human decisions while programming. For entertaining illustrations of this idea, you might like Paul Fenwick&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=73vQglu-4H4&#34;&gt;An Illustrated History of Failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Jam VI: The Return of the Camel</title>
      <link>http://localhost:1313/article/perl-jam-iv-return-of-the-camel/</link>
      <pubDate>Fri, 01 Apr 2016 08:32:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-jam-iv-return-of-the-camel/</guid>
      <description>

&lt;p&gt;A couple of recent presentations about Perl&amp;rsquo;s security have focused on the &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI module&lt;/a&gt; and &lt;a href=&#34;https://www.bugzilla.org&#34;&gt;Bugzilla&lt;/a&gt;. David Farrell responded to these in &lt;a href=&#34;http://perltricks.com/article/netanel-rubins-perljam-circus/&#34;&gt;Netanel Rubin&amp;rsquo;s Perl Jam circus&lt;/a&gt;. There are much worse problems with Perl that we should think about.&lt;/p&gt;

&lt;h3 id=&#34;perl-s-rounding-problem&#34;&gt;Perl&amp;rsquo;s rounding problem&lt;/h3&gt;

&lt;p&gt;Perl&amp;rsquo;s approved way of rounding numbers goes through &lt;code&gt;(s)printf&lt;/code&gt;, but there&amp;rsquo;s a problem. In short, it does the wrong thing.&lt;/p&gt;

&lt;p&gt;Most people were taught the rule that 1, 2, 3, 4 round down to 0, and that 5, 6, 7, 8, and 9 round up to the next 0. That means that more digits round up than round down, introducing a systematic bias into any computations where you might round. You shouldn&amp;rsquo;t have to watch &lt;a href=&#34;http://www.imdb.com/title/tt0086393/&#34;&gt;Superman III&lt;/a&gt; to realize the disasterous global consequences this has.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more than one way to round a number. Most want to get to the nearest number, but if you are half way between, there are options. There are more than two ways. There are more than three. There are, well, a lot of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Round half up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half toward zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half away from zero&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to even&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half to odd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half alternately up and down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Round half stochastically&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use the GNU C compiler (or something based on it), you round half to even as the default. Perl relies on this behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 1.5
2

$ perl -e &#39;printf &amp;quot;%.0f\n&amp;quot;, shift&#39; 2.5
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time you try this you get the same answer (so, no stochastic or alternate rounding). The GNU C compiler can also use floor, ceiling, or truncate, but those have similar problems.&lt;/p&gt;

&lt;p&gt;As you are rounding, you are going to get more even numbers than odd numbers. If you are writing banking software, &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.8055&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;assymetric currency rounding&lt;/a&gt; could destabilize a currency. The Risks Digest has several entries for &lt;a href=&#34;http://catless.ncl.ac.uk/php/risks/search.php?query=rounding&#34;&gt;security problems in rounding&lt;/a&gt;. These issues are much worse than some lame &amp;ldquo;attack&amp;rdquo; on CGI.pm because a programmer can&amp;rsquo;t read.&lt;/p&gt;

&lt;h3 id=&#34;the-modulus-of-negative-numbers&#34;&gt;The modulus of negative numbers&lt;/h3&gt;

&lt;p&gt;Among the heated technical debates, such as vi or emacs, tabs or spaces, or Star Wars or Star Trek (the first answer in each is the right one), the ones that matter, such as the correct value of modulo addition with negative numbers, are overlooked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary &amp;ldquo;%&amp;rdquo; is the modulo operator, which computes the division remainder of its first argument with respect to its second argument. Given integer operands $m and $n : If $n is positive, then $m % $n is $m minus the largest multiple of $n less than or equal to $m. If $n is negative, then $m % $n is $m minus the smallest multiple of $n that is not less than $m (that is, the result will be less than or equal to zero).&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;The perldoc documentation for the % operators&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The modulo operators take two numbers and does something to them. For &lt;code&gt;$m % $n&lt;/code&gt;, you have:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$m&lt;/th&gt;
&lt;th&gt;$n&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;lt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$m - $n * $i ∈ $n * $i &amp;gt;= $m and ($m - $n * $i) &amp;lt; $n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $m, $n ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @ARGV;

$m &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
$n &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m = %d  n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   $m %  $n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -$m %  $n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   $m % -$n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -$m % -$n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;

printf $template,
   $m, $n,
   $m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;$m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
   $m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;$m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this give different results depending on the location of the unary minus operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl modulo.pl 137 12
m = 137  n = 12

   $m %  $n = 5
  -$m %  $n = 7
   $m % -$n = -7
  -$m % -$n = -5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That unary minus operator is two precedence levels above the modulo operator. That Perl makes one operator better than another is a whole other issue, but that&amp;rsquo;s the way it is and we can&amp;rsquo;t fix it now. Try it again. Use the parentheses (a feature Perl stole from LISP, which had some extra to spare) to separate the operators:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $m, $n ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @ARGV;

$m &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
$n &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m = %d  n = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $m %  $n  = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -($m %  $n) = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $m % -$n  = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -($m % -$n) = %d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;HERE&lt;/span&gt;

printf $template,
    $m, $n,
    $m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;($m %  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;n),
    $m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n,
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;($m % &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-$&lt;/span&gt;n);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You get different numbers this time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m = 137  n = 12

    $m %  $n  = 5
  -($m %  $n) = -5
    $m % -$n  = -7
  -($m % -$n) = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;rsquo;s even worse, because those numbers aren&amp;rsquo;t what the documentation says they should be. &amp;ldquo;If &lt;code&gt;$n&lt;/code&gt; is positive, then &lt;code&gt;$m % $n&lt;/code&gt; is &lt;code&gt;$m&lt;/code&gt; minus the largest multiple of &lt;code&gt;$n&lt;/code&gt; less than or equal to &lt;code&gt;$m&lt;/code&gt;&amp;rdquo;. Let&amp;rsquo;s take the case of -137 and 12. There are a couple of ways to look at this. If a &amp;ldquo;multiple&amp;rdquo; we call &lt;code&gt;$i&lt;/code&gt; must be positive, there is no value such that &lt;code&gt;$n * $i&lt;/code&gt; will be less than or equal to any negative value. If that &lt;code&gt;$i&lt;/code&gt; can be negative, the word &amp;ldquo;largest&amp;rdquo;  is a bit troublesome. Wikipedia says &lt;a href=&#34;https://en.wikipedia.org/wiki/Large_numbers&#34;&gt;large numbers are positive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fake-random-numbers&#34;&gt;Fake random numbers&lt;/h3&gt;

&lt;p&gt;Perl has a &lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; function. It claims to return &amp;ldquo;a random fractional number greater than or equal to 0&amp;rdquo;, but it doesn&amp;rsquo;t. It&amp;rsquo;s not random. It&amp;rsquo;s fake random in a way that might work if you only want to use one of them to complete a homework assignment in a beginning programming course in middle school. Although the documentation includes a footnote saying &amp;ldquo;You should not rely on it in security-sensitive situations&amp;rdquo;, it does not say &amp;ldquo;Don&amp;rsquo;t ever use this.&amp;rdquo; like it should. Try this program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -le &#39;srand(137); print rand for 1 .. 10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It outputs some numbers, which might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.470744323291914
0.278795581867115
0.263413724062172
0.646815254210146
0.958771364426031
0.3733677954733
0.561358958619476
0.537256242282716
0.967152799238111
0.846555037715689
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do you get the same numbers, but you get them in the same order. Perl tries to hide this from you by automatically calling &lt;code&gt;srand&lt;/code&gt; and giving it a &amp;ldquo;random&amp;rdquo; number to start the completely repeatable sequence.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only problem with these fake random numbers (which, again, Perl&amp;rsquo;s documentation never calls &amp;ldquo;fake&amp;rdquo;). They can only represent certain discrete values. See, for instance, the thread that &lt;a href=&#34;https://www.quora.com/Why-does-perl-rand-on-Win32-never-generate-a-value-between-0-890655528357032-and-0-890685315537721&#34;&gt;Why does perl rand() on Win32 never generate a value between 0.890655528357032 and 0.890685315537721?&lt;/a&gt;. On Windows, Perl uses 15 bits to represent the range of the fake random numbers instead of the 53 bits Perl could use.&lt;/p&gt;

&lt;p&gt;There are a variety of ways this can screw up if you use it in an application that keeps going and going. Eventually you come back to the beginning of the sequence, perhaps colliding with existing customer data.&lt;/p&gt;

&lt;h3 id=&#34;perl-lets-anyone-program&#34;&gt;Perl lets anyone program&lt;/h3&gt;

&lt;p&gt;Perhaps the biggest problem with Perl is that anyone with a text editor can write a program and upload it to the internet. It&amp;rsquo;s a feature that Perl allows someone to get their work done, but the problem shows up when someone tries to generalize that to other people&amp;rsquo;s work. Projects such as &lt;a href=&#34;http://nms-cgi.sourceforge.net/&#34;&gt;Not Matt&amp;rsquo;s Scripts&lt;/a&gt; try to mitigate this by fixing the problem one script at a time. There are simply too many scripts to get to in the lifetime of the Universe.&lt;/p&gt;

&lt;h3 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve made it this far without complaining on Twitter, Reddit, or Hacker News, congratulations. You know what day of the year it is.&lt;/p&gt;

&lt;p&gt;These are real issues, though, and if your application is senstive to small differences in numbers (such as calculating fundamental constants of the universe or pension fund allocations), you&amp;rsquo;re probably using sophisticated number libraries and have various levels of audits to verify the results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

