<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Shitov on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/andrew-shitov/</link>
    <description>Recent content in Andrew Shitov on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 08:45:00 +0000</lastBuildDate>
    <atom:link href="/authors/andrew-shitov/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Observing Coronavirus Pandemic with Raku</title>
      <link>http://localhost:1313/article/observing-coronavirus-with-raku/</link>
      <pubDate>Thu, 02 Apr 2020 08:45:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/observing-coronavirus-with-raku/</guid>
      <description>

&lt;p&gt;Every few years a new unknown virus pops up and starts spreading around the globe. This year, the situation with COVID-19 is different not only because of the nature of the virus but also because of the Internet. Whilst we have instant access to new information (which is often alarmist in tone) we also have the ability to access data for ourselves.&lt;/p&gt;

&lt;p&gt;Johns Hopkins University Center for Systems Science and Engineering synthesizes COVID-19 data from different sources, and displays it on their &lt;a href=&#34;https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6&#34;&gt;online dashboard&lt;/a&gt;. They also publish daily updates in CSV files on &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to ingest their CSV data and display it using different visualizations to reduce panic and provide a way to quickly see real numbers and trends. The result is the website &lt;a href=&#34;https://covid.observer&#34;&gt;covid.observer&lt;/a&gt;. The source files are available in the GitHub &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For years Perl has been known for BioPerl. Let’s see what Raku can bring to society as its great at manipulating text data. The heart of the site is a Raku program and a few modules that parse data and create static HTML pages.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/observing-coronavirus-with-raku/covid-observer.png&#34; alt=&#34;covid-observer&#34; /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to show you a few of the most useful features that Raku offers to developers.&lt;/p&gt;

&lt;h2 id=&#34;the-main-function&#34;&gt;The &lt;code&gt;MAIN&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;The program works in three modes: parsing population data, getting updates from the COVID raw data, and generating HTML files. Raku gives us a very handy way to process command line arguments by defining different variants of the &lt;code&gt;MAIN&lt;/code&gt; function. Each variant is mapped to different command line parameters, and Raku automatically dispatches to the matched variant, which helps me to run the program in the desired mode.&lt;/p&gt;

&lt;p&gt;Here are the variants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;population&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;generate&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don’t need to parse the command-line options ourselves, nor use any modules such as &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to do it for us. Moreover, Raku emits &amp;ldquo;usage&amp;rdquo; help text if the program is run with incorrect or missing arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./covid.raku
Usage:
  ./covid.raku population
  ./covid.raku fetch
  ./covid.raku generate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Salve J. Nilsen &lt;a href=&#34;https://github.com/ash/covid.observer/pull/5&#34;&gt;proposed to add&lt;/a&gt; another &lt;code&gt;MAIN&lt;/code&gt; function that prints the SQL commands for initializing the database. This example shows how how to define Boolean flags for command line options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;setup&amp;#39;, Bool :$force=False, Bool :$verbose=False) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;code&gt;:&lt;/code&gt; before the parameter name. We’ll see it again later.&lt;/p&gt;

&lt;p&gt;An additional POD comment can be added before each version of the function to print a better usage description, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#| Fetch the latest data and rebuild the database&lt;/span&gt;
multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the program prints a more helpful usage message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Usage:
  ./covid.raku population -- Parse population CSV files
  ./covid.raku fetch -- Fetch the latest data and rebuild the database
  ./covid.raku generate -- Generate the website&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reduction-operators&#34;&gt;Reduction operators&lt;/h2&gt;

&lt;p&gt;Reduction operators are really useful. Let me remind you what a reduction operator is. It&amp;rsquo;s actually a meta-operator: an infix operator surrounded by square brackets.&lt;/p&gt;

&lt;p&gt;In the program the reduction operator is widely used for computing totals across the data sets (e.g. for the World, or across Chinese provinces). Let us examine a few cases of increasing complexity:&lt;/p&gt;

&lt;p&gt;First there’s a simple hash, and we need to add up its values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the classic use case for the reduction operator. What I &lt;a href=&#34;https://andrewshitov.com/2020/03/16/a-couple-of-syntax-sweets-in-raku/&#34;&gt;noticed&lt;/a&gt; during the work is that the &lt;code&gt;[-]&lt;/code&gt; construct helps when you need to reduce some value by a few other values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
    failed    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    recovered &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;confirmed recovered failed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$active active cases&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a hash slice in the form of &lt;code&gt;%h&amp;lt;a b c&amp;gt;&lt;/code&gt; also helps to make the code more compact. Compare this with the straightforward approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;failed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;recovered&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;filtering-data&#34;&gt;Filtering data&lt;/h2&gt;

&lt;p&gt;For our second case, the hash values are not scalars but hashes themselves. The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; hyperoperator can be used to extract deeply located data. Let me demonstrate this on a simplified data fragment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# millions&lt;/span&gt;
    },
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1434&lt;/span&gt;
    },
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,
    };

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An alternative and cleaner way is using the &lt;code&gt;map&lt;/code&gt; method to access the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total2; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to exclude a country from the results, you can &lt;code&gt;grep&lt;/code&gt; the keys in-place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excl2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excl2; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that calling the hash&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt; method is much handier than trying to loop over the keys and filter them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data{%data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hyper-operators&#34;&gt;Hyper operators&lt;/h2&gt;

&lt;p&gt;In the previous section I showed how to apply the same action to each element of a list using &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Now let us take a look at a real example of how I used the hyper operator &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; to compute the deltas of number series:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @confirmed[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/span&gt; @confirmed;
say @delta; &lt;span style=&#34;color:#75715e&#34;&gt;# [10 20 30 80]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The array contains a series of values for the given period of time. The task is to compute how many new cases happen in each day. Instead of using a loop, it is possible to simply ‘subtract‘ an array from itself but shifted by one element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator takes two data series: the slice &lt;code&gt;@confirmed[1..*]&lt;/code&gt; of the original data without the first element, and the original &lt;code&gt;@confirmed&lt;/code&gt; array. For a given binary operator (&lt;code&gt;-&lt;/code&gt; in this example), you can construct four hyper operators: &lt;code&gt;&amp;gt;&amp;gt;-&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;lt;&amp;lt;&lt;/code&gt;. The chosen form allows us to ignore the extra item at the end of &lt;code&gt;@confirmed&lt;/code&gt; when it is applied against &lt;code&gt;@confirmed[1..*]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;junctions&#34;&gt;Junctions&lt;/h2&gt;

&lt;p&gt;Let me demonstrate a way of using the junction operator &lt;code&gt;|&lt;/code&gt; which I discovered recently. It chooses the ending for the given ordinal number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $day {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ending &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; given $day {
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;st&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nd&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;}
        default      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;th&amp;#39;&lt;/span&gt;}
    }

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$day$ending&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; blocks catch the corresponding numbers that need special endings. Junctions such as &lt;code&gt;1|21|31&lt;/code&gt; are more elegant than a regular expression or a chain of comparisons.&lt;/p&gt;

&lt;h2 id=&#34;optional-and-named-parameters&#34;&gt;Optional and named parameters&lt;/h2&gt;

&lt;p&gt;Parameter processing is simple in Raku. This function accepts two positional hash parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can easily add optional named parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals, :$cc?, :$cont?, :$exclude?) {
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A colon before the name makes the parameter named, and the question mark makes it optional. I am using this to modify the behavior of the same statistical function for aggregating data over the whole World, the continents, or to exclude a single country or a region:&lt;/p&gt;

&lt;p&gt;Generating data for the whole World:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a single country:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cc);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a continent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cont &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cont);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;World data excluding China:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting data for China without its most affected province:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, cc &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN/HB&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;a-built-in-template-engine&#34;&gt;A built-in template engine&lt;/h2&gt;

&lt;p&gt;The project generates more than 200 HTML files, so templating is an important part of it. Fortunately Raku has a great out-of-the-box templating mechanism, which is much more powerful than simple variable interpolation.&lt;/p&gt;

&lt;p&gt;A minimal example is substituting variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;countries-list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        $html
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, notice that Raku lets you keep the indentation of a multi-line string by simply indenting its closing symbol. No extra spaces at the beginning of the lines will appear in the result.&lt;/p&gt;

&lt;p&gt;A more exciting thing is that you can embed Raku code blocks into strings, and those blocks can contain any logic you need to make a right decision somewhere in the middle of the template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Coronavirus in {$country&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;affected&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Affected 1 of every &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;
                    fmtnum((&lt;span style=&#34;color:#ae81ff&#34;&gt;1_000_000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $population &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
                        $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round())
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nobody affected&amp;#39;&lt;/span&gt;
            }
        }
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the string builds itself depending on data. For each generated country, the string ’chooses‘ which phrase to embed and how to format the number. The &lt;code&gt;if&lt;/code&gt; block is a relatively big chunk of Raku code that generates a string, which is used in place of the whole block in curly braces. Thus, inside this embedded code block you can freely manipulate data from the outside code.&lt;/p&gt;

&lt;h2 id=&#34;afterword&#34;&gt;Afterword&lt;/h2&gt;

&lt;p&gt;I must say that it is quite exciting to use Raku for a real project. As you can see from the examples, many of its ‘strange‘ features demonstrate how useful they are in different circumstances. Examine the code in the &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;GitHub repository&lt;/a&gt; and follow the updates about the site &lt;a href=&#34;https://andrewshitov.com/category/covid-19/&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl 6 Grammars, Part 1</title>
      <link>http://localhost:1313/article/perl-6-grammers-part-1/</link>
      <pubDate>Tue, 13 Feb 2018 15:22:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-6-grammers-part-1/</guid>
      <description>

&lt;p&gt;The Perl 6 language has builtin support of &lt;a href=&#34;https://docs.perl6.org/language/grammars&#34;&gt;&lt;em&gt;grammars&lt;/em&gt;&lt;/a&gt;. You may consider grammars as a combination of the well known regular expressions and utilities such as &lt;code&gt;yacc&lt;/code&gt; or &lt;code&gt;bison&lt;/code&gt;, or more sophisticated grammar tools such as ANTLR. All that—both lexer, parser, and also semantic processing—which are often separate parts of compilers, is built-in and available out of the box with a &lt;a href=&#34;http://rakudo.org/how-to-get-rakudo/&#34;&gt;fresh Perl 6 installation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To feel the power of grammars, it is enough to say that Perl 6’s own grammar is &lt;a href=&#34;https://perl6.online/2018/01/01/the-start-of-the-grammar/&#34;&gt;written in Perl 6&lt;/a&gt; as a huge grammar class &lt;a href=&#34;https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp&#34;&gt;Perl6::Grammar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I will go through a few examples to illustrate the basics of grammars. All the required language constructions will be explained as we go.&lt;/p&gt;

&lt;h3 id=&#34;parsing-numbers&#34;&gt;Parsing numbers&lt;/h3&gt;

&lt;p&gt;Parsing numbers seems to be a simple task until you start thinking about different formats that the user can use, including negative numbers, floating-point numbers, numbers in scientific notation, special forms of numbers such as C‘s long long integers.&lt;/p&gt;

&lt;p&gt;Let us start with the simplest form: a number as a sequence of digits. For example, 1, 42, 123, or 1000. A grammar in Perl 6 is a special kind of classes with its own keywords. The first rule of the grammar must (by default) be called &lt;code&gt;TOP&lt;/code&gt;, and here is the complete program that parses our first set of numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $n {
    say N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($n) ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK $n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT OK $n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;parse&lt;/code&gt; method of the &lt;code&gt;N&lt;/code&gt; grammar is called, Perl tries to match the given string against the &lt;code&gt;TOP&lt;/code&gt; method. In our case, this is a &lt;code&gt;token&lt;/code&gt;, which means that the string cannot contain any optional spaces between the parts of the token. &lt;code&gt;TOP&lt;/code&gt; is only successful when it consumes the whole string, so there is no need to use explicit anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to tie the edges of the token.&lt;/p&gt;

&lt;p&gt;As with regexes, tokens and rules can include other tokens, rules, or regexes referred by their names. In our first example, the &lt;code&gt;TOP&lt;/code&gt; token needs the &lt;code&gt;digit&lt;/code&gt; built-in method that matches digits. The &lt;code&gt;+&lt;/code&gt; quantifier is the same quantifier as in standard Perl 5 regular expressions: it allows one or more repetitions of the previous atom.&lt;/p&gt;

&lt;p&gt;Our simple grammar can parse only unsigned integers so far. Any negative number cannot be parsed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 1
OK 42
OK 123
OK 1000
NOT OK -3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us update the grammar and introduce the token for the optional sign, which can be either &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;grammar N {
    token TOP {
        [&amp;#39;+&amp;#39; | &amp;#39;-&amp;#39;]?
        &amp;lt;digit&amp;gt;+
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the square brackets group together the two alternatives: &lt;code&gt;&#39;+&#39; | &#39;-&#39;&lt;/code&gt; . The &lt;code&gt;?&lt;/code&gt; quantifier requires that there is only one such character, or there are none. In Perl 6, square brackets only create a group but do not capture its content. Also notice, that both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are quoted, because Perl 6 treats any non-alphanumeric character as a special character unless it is quoted or escaped with &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step is to add support for the floating point. An ad hoc solution can be creating a character class that includes both numbers and the &lt;code&gt;&#39;.&#39;&lt;/code&gt;  character, but that would be completely wrong, as, for example, strings with two dots such as &lt;code&gt;3..14&lt;/code&gt; pass this filter. So, do it differently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;]?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;]?
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This grammar now allows an optional part consisting of the period and another sequence of digits and works well when the number is either an integer or contains an explicit fractional part, for example, &lt;code&gt;3.14&lt;/code&gt;. It fails for those numbers where one of the parts is missing: &lt;code&gt;3.&lt;/code&gt; or &lt;code&gt;.14&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An attempt to make the parts optional by using quantifiers makes the grammar difficult to read and error-prone. For instance, the following token matches all the above numbers but also a single &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;]?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]?
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s time to introduce more tokens. Factor out the sequence of digits to a separate token and list all the variants explicitly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
    }
    token sign {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    }
    token digits {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
    token value {
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; token encapsulates the variants: it contains four alternative representations of accepted numbers. Vertical bars separate them. For the sake of unification, it is allowed to add an additional bar before the first alternative, so that all of them are emphasized with a simple ASCII art.&lt;/p&gt;

&lt;p&gt;This current grammar is already smart enough to reject a single period:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 1
OK 42
OK 123
OK 1000
OK -3
OK 3.14
OK 3.
OK .14
NOT OK .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is to support numbers in scientific notation. Adding another alternative is an easy candidate for this task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;?
        [
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;exp&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        ]
    }
    token sign {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    }
    token exp {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
    }
    token digits {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
    token value {
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test the grammar with the following cases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.14&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10E2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.2e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10e-3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10e-3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10.2e-33&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $n {
    say N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($n) ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK $n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT OK $n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All works fine. But wait, in Perl, underscores are also allowed in numbers! Having a proper grammar, adding support for this is easy; only the &lt;code&gt;digits&lt;/code&gt; token should be modified:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token digits {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;]?
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Strings that do not follow the rules are still ignored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 100_000
NOT OK _1
NOT OK 1_
NOT OK 1__0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With a few simple steps, we made a grammar that understands numbers in different formats. As an exercise, you can add support for prefixes &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0b&lt;/code&gt;, &lt;code&gt;0o&lt;/code&gt; (hex, binary and octal) and suffixes (as in &lt;code&gt;1000L&lt;/code&gt; in C). Grammars were only used to check the validity of the number format, and their power does not end there. In Perl 6, you can add &lt;em&gt;actions&lt;/em&gt; to the grammar; these are code blocks that are executed if the corresponding rule or token has successfully matched. But that&amp;rsquo;s a story for another day.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

