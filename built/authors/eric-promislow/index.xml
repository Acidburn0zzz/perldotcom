<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric Promislow on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/eric-promislow/</link>
    <description>Recent content in Eric Promislow on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/eric-promislow/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Visual Perl</title>
      <link>http://localhost:1313/pub/2002/02/05/visperl.html/</link>
      <pubDate>Wed, 06 Feb 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/02/05/visperl.html/</guid>
      <description>

&lt;p&gt;Jumbo shrimp, military intelligence - Visual Perl? ActiveState built its reputation by bringing Perl to the Windows platform, thereby extending the reach of Perl and the size and nature of the Perl community. However, regardless of the Windows port, many Perl programmers don&amp;rsquo;t hesitate to voice their preference for text-based editors (like vi and emacs) over Windows-based integrated development environments (IDEs). Some Perl gurus find text-based editors the most efficient way to code. But for programmers who are new to Perl, and programmers who primarily work in graphical environments such as Windows, the intuitive, visual nature of IDEs help them to learn languages and produce code more quickly.&lt;/p&gt;

&lt;p&gt;ActiveState&amp;rsquo;s combined expertise in Perl and the Windows platform, and our stated goal of bringing open-source programming languages to a wider developer audience, has led to our interest in developing IDEs. We have three particular goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;to create an intuitive editing environment&lt;/li&gt;
&lt;li&gt;to deliver much of the functionality that powerful text-based editors offer, but without the initial learning curve&lt;/li&gt;
&lt;li&gt;to add language-specific features, such as real-time syntax checking, debugging, colorizing and online help&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, in addition to developing our own &lt;a href=&#34;http://www.ActiveState.com/Products/Komodo&#34;&gt;Komodo&lt;/a&gt; IDE, ActiveState has participated in Microsoft&amp;rsquo;s Visual Studio Integration Program (VSIP) and developed three plug-ins (&lt;a href=&#34;http://www.ActiveState.com/Products/Visual_Perl&#34;&gt;Visual Perl&lt;/a&gt;, &lt;a href=&#34;http://www.ActiveState.com/Products/Visual_Python&#34;&gt;Visual Python&lt;/a&gt; and &lt;a href=&#34;http://www.ActiveState.com/Products/Visual_XSLT&#34;&gt;Visual XSLT&lt;/a&gt;) for Microsoft&amp;rsquo;s &lt;a href=&#34;http://msdn.microsoft.com/vstudio&#34;&gt;Visual Studio .NET&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Integrating Perl support into Visual Studio .NET required extending Visual Studio to provide Perl-specific functionality. For example, Visual Perl includes module-based code completion, pop-up hints for Perl keywords and module functions, a context-sensitive Perl language reference and emacs-like auto-indenting, brace matching, and block selection. Additionally, Visual Perl makes use of standard Visual Studio .NET functionality through the graphical debugger, the class view (for browsing functions), sophisticated project management, etc.&lt;/p&gt;

&lt;h3 id=&#34;visual-perl-and-net&#34;&gt;Visual Perl and .NET&lt;/h3&gt;

&lt;p&gt;In a separate initiative, ActiveState has developed &lt;a href=&#34;http://www.activestate.com/Products/Perl_Dev_Kit/&#34;&gt;PerlNET&lt;/a&gt;, a tool for building .NET-compliant components with Perl. PerlNET is part of ActiveState&amp;rsquo;s Perl Dev Kit 4.0, and Visual Perl integrates with the Perl Dev Kit, allowing developers to create .NET-compliant components (and also Windows applications, services and controls) from within Visual Studio .NET.&lt;/p&gt;

&lt;p&gt;PerlNET and Visual Perl make it easier to build multi-language applications. Previously, the easiest way to build Windows applications quickly was with Visual Basic. However, Visual Basic has drawbacks with regards to the the speed at which the applications run. Also, VB is not the most commodious language for developers accustomed to modern constructs such as associative arrays, dynamic functions, closures, run-time eval and regular expression matching with full backtracking.&lt;/p&gt;

&lt;p&gt;Microsoft has addressed this by creating a modernized &amp;ldquo;.NET&amp;rdquo; version of Visual Basic, and with the creation of C#, which provides a near-functional equivalent to Visual Basic .NET (some would say &amp;ldquo;superior, but functionally close&amp;rdquo;). Additionally, any language that can target the .NET runtime engine can be used to build components, and multilanguage interoperability is transparent. In a nutshell, you can use a high-level language to script the UI, write back-end components in Perl, and tie the two together almost effortlessly. All you have to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tell Visual Perl that a particular Perl project should be converted to a .NET DLL, and add the interface definition for the component in one or more &amp;ldquo;=for interface&amp;rdquo; POD comments&lt;/li&gt;
&lt;li&gt;assign the code in the Perl-sourced DLL a namespace&lt;/li&gt;
&lt;li&gt;point the client application to the Perl-sourced DLL, and use that namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;visual-perl-and-net-making-it-happen&#34;&gt;Visual Perl and .NET: Making it Happen&lt;/h3&gt;

&lt;p&gt;As an example, the process of building a .NET-compliant application goes something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quickly build a front-end in C# or Visual Basic .NET using Win Forms to populate a form with UI widgets. Double-click on the widgets to script common events (&amp;ldquo;&amp;hellip;_Click&amp;rdquo; for buttons, &amp;ldquo;&amp;hellip;_TextChanged&amp;rdquo; for changing text fields).&lt;/li&gt;
&lt;li&gt;When it&amp;rsquo;s time to add more processing to the back end, add a Perl project to the current Visual Studio .NET solution, and treat it like a Perl package. Define the constructor, add methods and fields to the interface definition block, and then define the new methods and fields.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Like other Perl component builders, you should test and debug your Perl code before converting it into a DLL. The simplest way is to put a&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    unless (caller) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;block at the end of your module, before the final &amp;ldquo;1;&amp;rdquo;, and drive your package from that.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the Perl project as the &amp;ldquo;startup&amp;rdquo; project, then run the Perl component straight through, outside Visual Perl&amp;rsquo;s debugger. (You can run programs in a DOS command shell, or in the &amp;ldquo;Run Window&amp;rdquo; within Visual Studio .NET. Both support standard IO, including stdin.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the project type from &amp;ldquo;Standard&amp;rdquo; to &amp;ldquo;Managed DLL,&amp;rdquo; change the &amp;ldquo;startup&amp;rdquo; project to the C# project, then build and run.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;getting-the-job-done-with-visual-perl&#34;&gt;Getting the Job Done with Visual Perl&lt;/h3&gt;

&lt;p&gt;.NET aside, we worked hard to make Visual Perl an attractive alternative to emacs, vim and other editors favored by Perl programmers. Visual Studio .NET provides an editing environment familiar to developers who have always worked in Windows. But many Perl programmers cut their hash variables on emacs and vi, and are wary of giving up the powerful functionality of those editors.&lt;/p&gt;

&lt;p&gt;However, implementing &amp;ldquo;vi&amp;rdquo; and &amp;ldquo;emacs&amp;rdquo; keystroke bindings wasn&amp;rsquo;t the way to go. &amp;ldquo;Ctrl-X&amp;rdquo; has a long-established meaning in the GUI world, and we weren&amp;rsquo;t about to let developers accidentally delete a chunk of selected text when they meant to start a multi-keystroke command.&lt;/p&gt;

&lt;p&gt;So, while we couldn&amp;rsquo;t preserve the keystrokes, we could go some way toward preserving the functionality. Visual Perl features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configurable auto-indenting that provides the ability to set the level of indent, specify whether to insert spaces or tabs, and whether to auto-indent based on nesting constructs&lt;/li&gt;
&lt;li&gt;auto-indenting based on the Camel book style, so it&amp;rsquo;s sensitive to the location of enclosing braces and parentheses&lt;/li&gt;
&lt;li&gt;the ability to show matching bracketing characters&lt;/li&gt;
&lt;li&gt;keyboard shortcuts for moving to matching brackets, or selecting a block within the matching brackets&lt;/li&gt;
&lt;li&gt;keyboard shortcuts for commenting and un-commenting blocks of selected text&lt;/li&gt;
&lt;li&gt;the ability to collapse and expand blocks of code with a single mouse click&lt;/li&gt;
&lt;li&gt;incremental searching, both forward and backward (although we hope to extend this functionality with incremental regular expression searches)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visual Perl&amp;rsquo;s colorizer is aware of some of Perl&amp;rsquo;s more arcane constructs, including here-documents (stacked or plain), regex substitutions with different delimiters on the pattern and replacement, and ?-delimited regular expressions. And Visual Studio .NET&amp;rsquo;s Options dialog lets you assign whatever color combination you want to each style.&lt;/p&gt;

&lt;p&gt;Other features include the class browser, which is used to quickly navigate to the functions in the files loaded in a project. Integrated context-sensitive help provides quick information on Perl keywords. You can right click on a &amp;ldquo;use&amp;rdquo; or &amp;ldquo;require&amp;rdquo; statement, and view help for the imported module within the Visual Studio .NET environment. The debugger supports debugging of remote Perl programs, not just the program loaded in the IDE.&lt;/p&gt;

&lt;p&gt;Visual Perl uses the Visual Studio .NET code completion framework to help walk the user through &amp;ldquo;::&amp;ldquo;-separated names when importing modules. It recognizes when an instance of a package is bound to a variable, and presents available methods when &amp;ldquo;-&amp;gt;&amp;rdquo; is typed after the variable. Visual Perl isn&amp;rsquo;t doing anything fancy here; it&amp;rsquo;s simply assuming that good developers try to maintain a many-to-one relationship between their variable names and the types the variables are labels for. So when Visual Perl sees that a variable called &amp;ldquo;$ua&amp;rdquo; is an instance of LWP::UserAgent, it assumes that other instances of that variable are as well. This definitely isn&amp;rsquo;t thorough, and assumes that a value keeps its name on both sides of a function call, but it works the way that many people work.&lt;/p&gt;

&lt;h3 id=&#34;visual-perl-and-web-services&#34;&gt;Visual Perl and Web Services&lt;/h3&gt;

&lt;p&gt;Visual Perl&amp;rsquo;s code completion is also available for Web services. Once a Web service has been associated with a variable, a list of available methods in the Web service, and their call signatures, will pop up when you type &amp;ldquo;-&amp;gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;ActiveState has participated in the development of a scripting-language-agnostic framework for consuming Web services, called the Simple Web Services API. It works with Python and PHP, as well as Perl. Among other things, it allows you to bind to and call methods on a Web service with a minimal amount of code. For Perl, this line suffices to bind a variable to a Web service:
&lt;code&gt;$var = WebService::ServiceProxy-&amp;gt;new (wsdl string)&lt;/code&gt;
Calling methods off the service is as simple as invoking an object method:
&lt;code&gt;$var-&amp;gt;method(args...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once a variable has been bound to a Web service, typing the &amp;lsquo;-&amp;gt;&amp;rsquo; will drop a list of methods the Web service exports, and typing the &amp;lsquo;(&amp;rsquo; after the method name will raise a call tip that walks through the arguments.&lt;/p&gt;

&lt;p&gt;This is similar to SOAP::Lite, but has the advantage of working in several languages, as well as handling features such as overloaded methods, and supporting method names that contain Unicode characters that can&amp;rsquo;t be used in Perl identifiers.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;ActiveState&amp;rsquo;s work with Visual Studio .NET and the .NET Framework furthers our commitment to expanding the use of Perl. Visual Perl expands the language set available to developers using Microsoft&amp;rsquo;s ubiquitous Visual Studio IDE, and PerlNET extends Perl by providing compliancy with the .NET Framework.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

