<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Farrell on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/david-farrell/</link>
    <description>Recent content in David Farrell on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 09:07:55 +0000</lastBuildDate>
    <atom:link href="/authors/david-farrell/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Listen to Larry Wall&#39;s State of the Onion 2000 on YouTube</title>
      <link>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</link>
      <pubDate>Fri, 10 Jul 2020 09:07:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/TODDR&#34;&gt;Todd Rinaldo&lt;/a&gt; has uploaded Larry&amp;rsquo;s State of the Onion talk from YAPC &lt;del&gt;19100&lt;/del&gt; 2000 to &lt;a href=&#34;https://www.youtube.com/watch?v=a1SEt_-QMDo&#34;&gt;YouTube&lt;/a&gt;. Previously it was available in separate mp3 files, but this is much more accessible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a typical Larry talk filled with quirky, humorous observations about life and programming, and notably he announces the Perl 6 project.&lt;/p&gt;

&lt;p&gt;Unfortunately the audio is low quality (hey it was 20 years ago at a low-budget conference); you can read a transcript of the talk &lt;a href=&#34;http://localhost:1313/pub/2000/10/23/soto2000.html/&#34;&gt;here&lt;/a&gt; (with mp3 download links at the bottom). We also have collection of attendees&amp;rsquo; &lt;a href=&#34;http://localhost:1313/pub/2000/07/yapc19101.html/&#34;&gt;reports&lt;/a&gt; from the conference.&lt;/p&gt;

&lt;p&gt;If you enjoy Larry&amp;rsquo;s talks, you might like some of his other &lt;a href=&#34;http://localhost:1313/authors/larry-wall/&#34;&gt;transcribed talks / articles&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</link>
      <pubDate>Sat, 20 Jun 2020 13:40:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perl Layout Executor with &lt;a href=&#34;https://metacpan.org/pod/App::plx&#34;&gt;App::plx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FIDO::Raw&#34;&gt;FIDO::Raw&lt;/a&gt; provides bindings to the libfido2 library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::LibProj::cs2cs&#34;&gt;Geo::LibProj::cs2cs&lt;/a&gt; is a wrapper for the cs2cs command line client, part of the PROJ coordinate transformation library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Nauty&#34;&gt;Graph::Nauty&lt;/a&gt; provides bindings to Nauty (No AUTomorphisms, Yes?)&lt;/li&gt;
&lt;li&gt;Post OCR requests to ocr.space&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/OCR::OcrSpace&#34;&gt;OCR::OcrSpace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create reciples to declare and resolve dependencies between things with &lt;a href=&#34;https://metacpan.org/pod/Beam::Make&#34;&gt;Beam::Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography Library with &lt;a href=&#34;https://metacpan.org/pod/Crypto::ECC&#34;&gt;Crypto::ECC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::Redis&#34;&gt;HealthCheck::Diagnostic::Redis&lt;/a&gt; provides a healthcheck for Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SMTP&#34;&gt;HealthCheck::Diagnostic::SMTP&lt;/a&gt; performs a connectivity healthcheck to an SMTP mail server&lt;/li&gt;
&lt;li&gt;Show diffs of changes to files managed by Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Hook::File::Diff&#34;&gt;Rex::Hook::File::Diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mask secrets in log files with &lt;a href=&#34;https://metacpan.org/pod/String::Secret&#34;&gt;String::Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Groups&#34;&gt;File::Groups&lt;/a&gt; returns file extensions and media types for different files&lt;/li&gt;
&lt;li&gt;Get Digi-ID implementation with &lt;a href=&#34;https://metacpan.org/pod/DigiByte::DigiID&#34;&gt;DigiByte::DigiID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get elevation data for a given lat/lon using &lt;a href=&#34;https://metacpan.org/pod/Geo::Elevation::HGT&#34;&gt;Geo::Elevation::HGT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Karabiner&#34;&gt;JSON::Karabiner&lt;/a&gt; can easy JSON code generaation for Karabiner-Elements, the macOS keyboard customizer&lt;/li&gt;
&lt;li&gt;Validate JSON against a schema against the latest draft with &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Draft201909&#34;&gt;JSON::Schema::Draft201909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Documentation and tools for using Platypus with Go: &lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus::Lang::Go&#34;&gt;FFI::Platypus::Lang::Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::IO::Impl::Glib&#34;&gt;Future::IO::Impl::Glib&lt;/a&gt; implement Future::IO using Glib&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mu::Tiny&#34;&gt;Mu::Tiny&lt;/a&gt; is an even tinier object system&lt;/li&gt;
&lt;li&gt;Get a Try-Catch block (uses PPI) via &lt;a href=&#34;https://metacpan.org/pod/Nice::Try&#34;&gt;Nice::Try&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Number::Textify&#34;&gt;Number::Textify&lt;/a&gt; turns numbers into human-readable strings (customizable)&lt;/li&gt;
&lt;li&gt;Write composable, reusable tests with roles and Moo using &lt;a href=&#34;https://metacpan.org/pod/Test2::Roo&#34;&gt;Test2::Roo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::BNO055&#34;&gt;Device::Chip::BNO055&lt;/a&gt; provides a chip driver for BNO055&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PINE64::GPIO&#34;&gt;PINE64::GPIO&lt;/a&gt; provides an interface to PineA64 and PineA64+ GPIO pins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MojoTemplate&#34;&gt;Catalyst::View::MojoTemplate&lt;/a&gt;: use Mojolicious templates in Catalyst views&lt;/li&gt;
&lt;li&gt;Store Dancer2 session data in serealized files using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::Sereal&#34;&gt;Dancer2::Session::Sereal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find elements in a HTML::Element DOM using CSS selectors with &lt;a href=&#34;https://metacpan.org/pod/HTML::Selector::Element&#34;&gt;HTML::Selector::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Place a limit on &amp;ldquo;concurrent&amp;rdquo; promises with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Limiter&#34;&gt;Mojo::Promise::Limiter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add role-based access with context to a Mojo app via  &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ContextAuth&#34;&gt;Mojolicious::Plugin::ContextAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/POE::Component::SmokeBox::Recent::HTTP&#34;&gt;POE::Component::SmokeBox::Recent::HTTP&lt;/a&gt; is an extremely minimal HTTP client&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</link>
      <pubDate>Wed, 20 May 2020 01:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the open, decentralizedc Matrix communication network with &lt;a href=&#34;https://metacpan.org/pod/Net::Matrix::Webhook&#34;&gt;Net::Matrix::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Call Docker CLI commands from Perl using &lt;a href=&#34;https://metacpan.org/pod/Docker::CLI::Wrapper&#34;&gt;Docker::CLI::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/InfluxDB::Client::Simple&#34;&gt;InfluxDB::Client::Simple&lt;/a&gt; is a lightweight InfluxDB client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Termux::API&#34;&gt;Termux::API&lt;/a&gt; provides a Perly interface to the popular Android terminal emulator&lt;/li&gt;
&lt;li&gt;Get financial data via Yahoo Finance with &lt;a href=&#34;https://metacpan.org/pod/Yahoo::Finance&#34;&gt;Yahoo::Finance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant Street Group added more healthcheck modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHCheck&#34;&gt;HealthCheck::Diagnostic::DBHCheck&lt;/a&gt; checks a database handle has read/write permissions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SFTP&#34;&gt;HealthCheck::Diagnostic::SFTP&lt;/a&gt; checks secure FTP access&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::WebRequest&#34;&gt;HealthCheck::Diagnostic::WebRequest&lt;/a&gt; checks HTTP/HTTPS connectivity&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Moo-ify DBIx::Class rows using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Moo::ResultClass&#34;&gt;DBIx::Class::Moo::ResultClass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure::UTF8&#34;&gt;Data::Random::Structure::UTF8&lt;/a&gt; can fill a data structure with random UTF-8 data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Generate&#34;&gt;JSON::Schema::Generate&lt;/a&gt; generates JSON schemas from data structures&lt;/li&gt;
&lt;li&gt;Use named (instead of positional) placeholders with SQL queries via &lt;a href=&#34;https://metacpan.org/pod/SQL::Bind&#34;&gt;SQL::Bind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Docker::Names::Random&#34;&gt;Docker::Names::Random&lt;/a&gt; generates random strings like Docker does for container names (e.g. &amp;ldquo;lazy_fermat&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;A class based approach for scripting options: &lt;a href=&#34;https://metacpan.org/pod/Getopt::Class&#34;&gt;Getopt::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get simple, non-blocking IPC with &lt;a href=&#34;https://metacpan.org/pod/IPC::Simple&#34;&gt;IPC::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::amine&#34;&gt;MooseX::amine&lt;/a&gt; ++ for module naming, it let&amp;rsquo;s you examine the methods and properties of Moose objects&lt;/li&gt;
&lt;li&gt;Return from multiple blocks in one go with &lt;a href=&#34;https://metacpan.org/pod/Return::Deep&#34;&gt;Return::Deep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Ability&#34;&gt;Test::Ability&lt;/a&gt; provides property-based testing routines&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/fs::Promises&#34;&gt;fs::Promises&lt;/a&gt; provides a promises interface to non-blocking file system operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage passwords in Dancer2 with Argon2 using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Argon2&#34;&gt;Dancer2::Plugin::Argon2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the Minion job queue in your Dancer2 apps with &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Minion&#34;&gt;Dancer2::Plugin::Minion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Override any method in your Kelp application with &lt;a href=&#34;https://metacpan.org/pod/KelpX::Hooks&#34;&gt;KelpX::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Log::Role::Color&#34;&gt;Mojo::Log::Role::Color&lt;/a&gt; adds color to your interactive mojo logs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::Role::Signature&#34;&gt;Mojo::UserAgent::Role::Signature&lt;/a&gt; automatically signs request transactions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Multipart::Encoder&#34;&gt;Multipart::Encoder&lt;/a&gt; is an encoder for mime-type multipart/form-data.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</link>
      <pubDate>Wed, 29 Apr 2020 01:05:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get a colorful calendar in the terminal with &lt;a href=&#34;https://metacpan.org/pod/week&#34;&gt;App::week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::reCAPTCHA::v3&#34;&gt;Google::reCAPTCHA::v3&lt;/a&gt; is another Google captcha module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GraphQL::Client&#34;&gt;GraphQL::Client&lt;/a&gt; … is a GraphQL client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Masscan::Scanner&#34;&gt;Masscan::Scanner&lt;/a&gt; makes it easy to use the masscan port scanner.&lt;/li&gt;
&lt;li&gt;Make non-blocking requests to LastFM with &lt;a href=&#34;https://metacpan.org/pod/Mojo::WebService::LastFM&#34;&gt;Mojo::WebService::LastFM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Telegram&amp;rsquo;s Bot API with &lt;a href=&#34;https://metacpan.org/pod/Net::API::Telegram&#34;&gt;Net::API::Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::OpenVAS&#34;&gt;Net::OpenVAS&lt;/a&gt; let&amp;rsquo;s you program Greenbone&amp;rsquo;s OpenVAS platform with Perl&lt;/li&gt;
&lt;li&gt;Use Elasticsearch 6.x APIs with &lt;a href=&#34;https://metacpan.org/pod/Search::Elasticsearch::Client::6_0&#34;&gt;Search::Elasticsearch::Client::6_0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Block::NJH&#34;&gt;Block::NJH&lt;/a&gt; is interesting; add it to your CPAN distribution to &amp;ldquo;prevent your tests from running on NJH&amp;rsquo;s broken smokers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Structured&#34;&gt;Config::Structured&lt;/a&gt; provides &amp;ldquo;generalized and structured configuration value access&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Ping a database handle to check its health using &lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHPing&#34;&gt;HealthCheck::Diagnostic::DBHPing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::FilePermissions&#34;&gt;HealthCheck::Diagnostic::FilePermissions&lt;/a&gt; checks filepaths for expected permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DB::Object&#34;&gt;DB::Object&lt;/a&gt; is a database abstraction built on top of DBI&lt;/li&gt;
&lt;li&gt;Inspect DBIC objects in a compact format using &lt;a href=&#34;https://metacpan.org/pod/Data::Tersify::Plugin::DBIx::Class&#34;&gt;Data::Tersify::Plugin::DBIx::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MIME::Base32::XS&#34;&gt;MIME::Base32::XS&lt;/a&gt; is a faster Base32 encoder/decoder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Statistics::Covid&#34;&gt;Statistics::Covid&lt;/a&gt; fetches and manages Covid-19 statistics&lt;/li&gt;
&lt;li&gt;Get a Postgresql mock server for testing via &lt;a href=&#34;https://metacpan.org/pod/Test::PostgreSQL::Docker&#34;&gt;Test::PostgreSQL::Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bind Perl data structures into XML with &lt;a href=&#34;https://metacpan.org/pod/XML::BindData&#34;&gt;XML::BindData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XML::Minifier&#34;&gt;XML::Minifier&lt;/a&gt; is a configurable XML minifier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::Wherefore&#34;&gt;Devel::Wherefore&lt;/a&gt; helps debug Perl: &amp;ldquo;Where the heck did these subroutines come from?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Create relative symbolic links &lt;a href=&#34;https://metacpan.org/pod/File::Symlink::Relative&#34;&gt;File::Symlink::Relative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Generic&#34;&gt;Module::Generic&lt;/a&gt; is another class library, it uses AUTOLOAD for getter/setter methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/new&#34;&gt;new&lt;/a&gt; saves you from typing module names twice in one liners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::DB::Taxonomy::sqlite&#34;&gt;Bio::DB::Taxonomy::sqlite&lt;/a&gt; stores and manages NCBI data using sqlite&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Chebyshev&#34;&gt;Math::Polynomial::Chebyshev&lt;/a&gt; creates Chebyshev polynomials&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Store Catalyst sessions in Redis with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::RedisFast&#34;&gt;Catalyst::Plugin::Session::Store::RedisFast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not a traditional distribution, but &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::AWSLambda&#34;&gt;Mojo::Server::AWSLambda&lt;/a&gt; contains a simple example of how to define an AWS Lambda function which uses Mojo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Sticker&#34;&gt;Mojolicious::Plugin::Sticker&lt;/a&gt; combines Mojo apps into a single app&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</link>
      <pubDate>Thu, 12 Mar 2020 00:46:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::GitForge&#34;&gt;API::GitForge&lt;/a&gt; is a generic interface to APIs of sites like GitHub, GitLab etc.&lt;/li&gt;
&lt;li&gt;Build GIMP from its git repo using &lt;a href=&#34;https://metacpan.org/pod/App::gimpgitbuild&#34;&gt;App::gimpgitbuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use reCAPTCHA API version v3 with &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA::V3&#34;&gt;Captcha::reCAPTCHA::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Work with the Windows Credential Manager using &lt;a href=&#34;https://metacpan.org/pod/credsman&#34;&gt;credsman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send email via the SendGrid v3 Web API with &lt;a href=&#34;https://metacpan.org/pod/Email::SendGrid::V3&#34;&gt;Email::SendGrid::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Annex&#34;&gt;Git::Annex&lt;/a&gt; is a Perl interface for git-annex repositories&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gtk3::WebKit2&#34;&gt;Gtk3::WebKit2&lt;/a&gt; provides WebKit2 bindings for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neo4j::Bolt&#34;&gt;Neo4j::Bolt&lt;/a&gt; can communicate with a Neo4j server agent using Bolt protocol&lt;/li&gt;
&lt;li&gt;Control Windows Notepad++ app with code using &lt;a href=&#34;https://metacpan.org/pod/Win32::Mechanize::NotepadPlusPlus&#34;&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OPCUA::Open62541&#34;&gt;OPCUA::Open62541&lt;/a&gt; is a wrapper for the open62541 &lt;a href=&#34;https://en.wikipedia.org/wiki/OPC_Unified_Architecture&#34;&gt;OPC UA library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query Rundeck&amp;rsquo;s REST API with &lt;a href=&#34;https://metacpan.org/pod/RundeckAPI&#34;&gt;RundeckAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weather::MOSMIX&#34;&gt;Weather::MOSMIX&lt;/a&gt; downloads and parses the German weather service&amp;rsquo;s forecast data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::File::Share&#34;&gt;Mojo::File::Share&lt;/a&gt; aims to provide better local share directory support with Mojo::File&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::DNS::DomainController::Discovery&#34;&gt;Net::DNS::DomainController::Discovery&lt;/a&gt; can discover Microsoft Active Directory domain controllers via DNS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pb&#34;&gt;Pb&lt;/a&gt; is a workflow system made from Perl and bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Jasonify&#34;&gt;Jasonify&lt;/a&gt; is Just Another Serialized Object Notation library&lt;/li&gt;
&lt;li&gt;Create PDFs with &lt;a href=&#34;https://metacpan.org/pod/Mxpress::PDF&#34;&gt;Mxpress::PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set default PerlIO layers with &lt;a href=&#34;https://metacpan.org/pod/open::layers&#34;&gt;open::layers&lt;/a&gt;, an alternative to the open pragma&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repository::Plugin::Diff&#34;&gt;Git::Repository::Plugin::Diff&lt;/a&gt; adds a diff method to Git::Repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LooksLike&#34;&gt;LooksLike&lt;/a&gt; provides more precise alternatives to looks_like_number&lt;/li&gt;
&lt;li&gt;Have a role fire a callback when its applied via &lt;a href=&#34;https://metacpan.org/pod/Role::Hooks&#34;&gt;Role::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Arrow&#34;&gt;Test::Arrow&lt;/a&gt; is an Object-Oriented testing library with a fun syntax&lt;/li&gt;
&lt;li&gt;Mock method behavior with queued subs using &lt;a href=&#34;https://metacpan.org/pod/Test::Ratchet&#34;&gt;Test::Ratchet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Timer::Milestones&#34;&gt;Timer::Milestones&lt;/a&gt; is an easy-to-use code timing module&lt;/li&gt;
&lt;li&gt;Track changes to scalars (in color!) with &lt;a href=&#34;https://metacpan.org/pod/Var::Mystic&#34;&gt;Var::Mystic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Manifesto&#34;&gt;XS::Manifesto&lt;/a&gt; describes an approach for creating shared XS code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Zydeco&#34;&gt;Zydeco&lt;/a&gt; is a new OO framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get Raycast field-of-view and related routines using &lt;a href=&#34;https://metacpan.org/pod/Game::RaycastFOV&#34;&gt;Game::RaycastFOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Spiral&#34;&gt;Math::Spiral&lt;/a&gt; returns an endless stream of X, Y offset coordinates which represent a spiral shape&lt;/li&gt;
&lt;li&gt;Add numbers with fewer numerical errors using &lt;a href=&#34;https://metacpan.org/pod/Math::Summation&#34;&gt;Math::Summation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage an ecosystem of Plack organisms under Kelp with &lt;a href=&#34;https://metacpan.org/pod/Kelp::Module::Symbiosis&#34;&gt;Kelp::Module::Symbiosis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::HealthCheck&#34;&gt;Plack::Middleware::HealthCheck&lt;/a&gt; adds a health check endpoint for your Plack app&lt;/li&gt;
&lt;li&gt;Control an embedded WebKit2 engine with &lt;a href=&#34;https://metacpan.org/pod/WWW::WebKit2&#34;&gt;WWW::WebKit2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---january-2020/</link>
      <pubDate>Mon, 10 Feb 2020 01:28:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---january-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::geoip&#34;&gt;App::geoip&lt;/a&gt; show geological data based on hostname or IP addresses&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::url&#34;&gt;App::url&lt;/a&gt; format a URL according to a sprintf-like template&lt;/li&gt;
&lt;li&gt;Push metrics to prometheus exporter with &lt;a href=&#34;https://metacpan.org/pod/Net::Prometheus::Pushgateway&#34;&gt;Net::Prometheus::Pushgateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Shout&#34;&gt;Shout&lt;/a&gt; is a thin wrapper around libshout, the live streaming library&lt;/li&gt;
&lt;li&gt;Report bad actors to AbuseDB via their v2 API: &lt;a href=&#34;https://metacpan.org/pod/WebService::AbuseIPDB&#34;&gt;WebService::AbuseIPDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Mailgun&#34;&gt;WebService::Mailgun&lt;/a&gt; is an API client for Mailgun&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clear the terminal using &lt;a href=&#34;https://metacpan.org/pod/Term::Clear&#34;&gt;Term::Clear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Return an endless stream of distinct RGB colors with &lt;a href=&#34;https://metacpan.org/pod/Chart::Colors&#34;&gt;Chart::Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BackupCopy&#34;&gt;File::BackupCopy&lt;/a&gt; makes backing up files easier&lt;/li&gt;
&lt;li&gt;Calculate the mean and variance of a set (Welford&amp;rsquo;s algorithm) using &lt;a href=&#34;https://metacpan.org/pod/Math::StdDev&#34;&gt;Math::StdDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;TOML::Tiny&lt;/a&gt; is a minimal, pure perl TOML parser and serializer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Express yourself through moo with &lt;a href=&#34;https://metacpan.org/pod/MooX::Pression&#34;&gt;MooX::Pression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Object::Adhoc&#34;&gt;Object::Adhoc&lt;/a&gt; can mint objects without the hassle of defining a class first&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sub::HandlesVia&#34;&gt;Sub::HandlesVia&lt;/a&gt; provies another way to define &lt;code&gt;handles_via&lt;/code&gt; in Moo/Moose/Mouse&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Detect User-Agents using &lt;a href=&#34;https://metacpan.org/pod/Duadua&#34;&gt;Duadua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FTN::Crypt&#34;&gt;FTN::Crypt&lt;/a&gt; can encrypt/decrypt Fido Technology Nets netmail&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Systemd&#34;&gt;Mojolicious::Plugin::Systemd&lt;/a&gt; lets you configure your mojo app with systemd&lt;/li&gt;
&lt;li&gt;The Mozilla Public Suffix List: &lt;a href=&#34;https://metacpan.org/pod/Net::PublicSuffixList&#34;&gt;Net::PublicSuffixList&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - December 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</link>
      <pubDate>Sun, 05 Jan 2020 20:19:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---december-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create a REST accessible AWS Lambda functions with &lt;a href=&#34;https://metacpan.org/pod/AWS::Lambda::Quick&#34;&gt;AWS::Lambda::Quick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Entry Point (for docker and other containers) &lt;a href=&#34;https://metacpan.org/pod/App::aep&#34;&gt;App::aep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::lrrr&#34;&gt;App::lrrr&lt;/a&gt; watches one or more directories and re-runs a given command when the contents change&lt;/li&gt;
&lt;li&gt;Get an auth token for GitHub with &lt;a href=&#34;https://metacpan.org/pod/GitHub::Apps::Auth&#34;&gt;GitHub::Apps::Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neovim::Ext&#34;&gt;Neovim::Ext&lt;/a&gt; provides Perl bindings for neovim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Thumbalizr&#34;&gt;WebService::Thumbalizr&lt;/a&gt; provides an interface to the web service to create screenshots of web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get the path to the source file or parent directory using &lt;a href=&#34;https://metacpan.org/pod/Path::This&#34;&gt;Path::This&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use libarchive from Perl with &lt;a href=&#34;https://metacpan.org/pod/Archive::Raw&#34;&gt;Archive::Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::NamedParams&#34;&gt;DBIx::NamedParams&lt;/a&gt; let&amp;rsquo;s you use execute SQL queries using named parameters (instead of &amp;lsquo;?&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Read and validate CSVs with &lt;a href=&#34;https://metacpan.org/pod/Data::Validate::CSV&#34;&gt;Data::Validate::CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Nanoid&#34;&gt;Nanoid&lt;/a&gt; is a port of the JavaScript unique string generator library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Validate::Simple&#34;&gt;Validate::Simple&lt;/a&gt; is a generic data validation module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/OSSEC&#34;&gt;OSSEC&lt;/a&gt; (intrusion detection) with Perl&lt;/li&gt;
&lt;li&gt;Faster promises with &lt;a href=&#34;https://metacpan.org/pod/Promise::XS&#34;&gt;Promise::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::CI&#34;&gt;Test::CI&lt;/a&gt;: get details about the current CI environment&lt;/li&gt;
&lt;li&gt;Write object-oriented tests that work with Test2 using &lt;a href=&#34;https://metacpan.org/pod/Test::Class::Tiny&#34;&gt;Test::Class::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::TraceCalls&#34;&gt;Test::TraceCalls&lt;/a&gt; outputs all subroutines called by a test script in JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/overload::open&#34;&gt;overload::open&lt;/a&gt; let&amp;rsquo;s you hook into the &lt;code&gt;open&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/ISAL::Crypto&#34;&gt;ISAL::Crypto&lt;/a&gt; can &amp;ldquo;run multiple hash calculations at the same time on one cpu using vector registers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Cyclotomic&#34;&gt;Math::Polynomial::Cyclotomic&lt;/a&gt; s a &amp;ldquo;cyclotomic polynomials generator&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Throttle::Adaptive&#34;&gt;Throttle::Adaptive&lt;/a&gt; implements the &amp;ldquo;adaptive throttling&amp;rdquo; algorithm described in Google&amp;rsquo;s SRE book&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make a Dancer2 app mobile-aware using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::MobileDevice&#34;&gt;Dancer2::Plugin::MobileDevice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mail::Qmail::Filter&#34;&gt;Mail::Qmail::Filter&lt;/a&gt; filters incoming e-mails when using qmail as an MTA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Results::Role::Struct&#34;&gt;Mojo::DB::Results::Role::Struct&lt;/a&gt; returns database query results as structs&lt;/li&gt;
&lt;li&gt;Apply roles to Mojo database results with &lt;a href=&#34;https://metacpan.org/pod/Mojo::DB::Role::ResultsRoles&#34;&gt;Mojo::DB::Role::ResultsRoles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - November 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---november-2019/</link>
      <pubDate>Wed, 11 Dec 2019 20:31:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---november-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::Greple::subst&#34;&gt;App::Greple::subst&lt;/a&gt; can perform text search and substitution using a dictionary&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::RetroPAN&#34;&gt;App::RetroPAN&lt;/a&gt; returns distribution information for a module on a given date&lt;/li&gt;
&lt;li&gt;Control monitors via DDC/CI protocol using &lt;a href=&#34;https://metacpan.org/pod/DDCCI&#34;&gt;DDCCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Eggdrop::Userfile&#34;&gt;Config::Eggdrop::Userfile&lt;/a&gt; is a parser for userfiles generated by the Eggdrop IRC bot&lt;/li&gt;
&lt;li&gt;Get all the modules that should have been installed with your copy of Perl: &lt;a href=&#34;https://metacpan.org/pod/Task::CoreModules&#34;&gt;Task::CoreModules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parse EXIF timestamps into DateTime objects using &lt;a href=&#34;https://metacpan.org/pod/DateTime::Format::EXIF&#34;&gt;DateTime::Format::EXIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Finance::Salary::Rate&#34;&gt;Finance::Salary::Rate&lt;/a&gt; can calculate hourly rates for small businesses&lt;/li&gt;
&lt;li&gt;Read an X11 PCF font file using &lt;a href=&#34;https://metacpan.org/pod/Font::PCF&#34;&gt;Font::PCF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MsOffice::Word::Surgeon&#34;&gt;MsOffice::Word::Surgeon&lt;/a&gt; (great name!) it operates on the &amp;ldquo;guts&amp;rdquo; of docx files&lt;/li&gt;
&lt;li&gt;Use the msgpack C library for fast data serialization with &lt;a href=&#34;https://metacpan.org/pod/MsgPack::Raw&#34;&gt;MsgPack::Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parse Zeek (network analysis) logfiles with &lt;a href=&#34;https://metacpan.org/pod/Zeek::Log::Parse&#34;&gt;Zeek::Log::Parse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate code coverage in a JSON file for codecov.io &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover::Report::Codecovbash&#34;&gt;Devel::Cover::Report::Codecovbash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add pack and unpack methods to an IO::Handle with &lt;a href=&#34;https://metacpan.org/pod/IO::Handle::Packable&#34;&gt;IO::Handle::Packable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://metacpan.org/pod/Linux::FD::Pid&#34;&gt;Linux::FD::Pid&lt;/a&gt; to create PID file descriptors to await the termination of a process&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Password::OWASP&#34;&gt;Password::OWASP&lt;/a&gt; can manage passwords according to OWASP recommendations&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/portable::loader&#34;&gt;portable::loader&lt;/a&gt; defines and loads classes and roles with no fixed package name for portability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fun&#34;&gt;Fun&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Acme::LSD&#34;&gt;Acme::LSD&lt;/a&gt; is a fun module that colorizes printed output&lt;/li&gt;
&lt;li&gt;Control Minecraft servers using RCON with &lt;a href=&#34;https://metacpan.org/pod/Net::RCON::Minecraft&#34;&gt;Net::RCON::Minecraft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Annotate fragements in metabolomics using &lt;a href=&#34;https://metacpan.org/pod/Metabolomics::Fragment::Annotation&#34;&gt;Metabolomics::Fragment::Annotation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - October 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---october-2019/</link>
      <pubDate>Sat, 16 Nov 2019 00:09:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---october-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Azure::Storage::Blob::Client&#34;&gt;Azure::Storage::Blob::Client&lt;/a&gt; can store blogs via the Azure API&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::RestApi&#34;&gt;Google::RestApi&lt;/a&gt; opens an Oauth2 connection to Google APIs and includes modules for working with Drive and Sheets&lt;/li&gt;
&lt;li&gt;Find corresponding GitHub issues for RT numbers with &lt;a href=&#34;https://metacpan.org/pod/Perl::RT2Github&#34;&gt;Perl::RT2Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Kafka&#34;&gt;Net::Kafka&lt;/a&gt; aims to be a high-performant client for Apache Kafka&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Deduce::Ingest&#34;&gt;WWW::Deduce::Ingest&lt;/a&gt; is an interface to the (undocumented?) Deduce Ingestion API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate bash tools from YAML with &lt;a href=&#34;https://metacpan.org/pod/distribution/App-Spec-Bash/lib/appspec-bash.pod&#34;&gt;appspec-bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dir::Flock&#34;&gt;Dir::Flock&lt;/a&gt; provides a typical file locking mechanism, but on directories. Bonus! it works on NFS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::ParseError&#34;&gt;DBIx::Class::ParseError&lt;/a&gt; parses database errors into DBIx::Class::Exception objects&lt;/li&gt;
&lt;li&gt;Eval(!) Perl code found in JSON using &lt;a href=&#34;https://metacpan.org/pod/JSON::Eval&#34;&gt;JSON::Eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MySQL::Dump::Parser::XS&#34;&gt;MySQL::Dump::Parser::XS&lt;/a&gt; is a fast mysqldump parser&lt;/li&gt;
&lt;li&gt;Parse a typical search engine query string using &lt;a href=&#34;https://metacpan.org/pod/Parqus&#34;&gt;Parqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Escapes strings into RTF with &lt;a href=&#34;https://metacpan.org/pod/RTF::Encode&#34;&gt;RTF::Encode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IIIF Image API implementation - &lt;a href=&#34;https://metacpan.org/pod/IIIF&#34;&gt;IIIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get bindings for librtmidi the Realtime MIDI library with &lt;a href=&#34;https://metacpan.org/pod/MIDI::RtMidi::FFI&#34;&gt;MIDI::RtMidi::FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MP4::LibMP4v2&#34;&gt;MP4::LibMP4v2&lt;/a&gt; provides a Perl interface to libmp4v2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/With::Roles&#34;&gt;With::Roles&lt;/a&gt; can compose roles into classes, objects and compound roles&lt;/li&gt;
&lt;li&gt;Import methods to be used like keywords using &lt;a href=&#34;https://metacpan.org/pod/methods::import&#34;&gt;methods::import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Algorithm::Odometer::Tiny&#34;&gt;Algorithm::Odometer::Tiny&lt;/a&gt; generates &amp;ldquo;base-N odometer&amp;rdquo; permutations&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::DCT&#34;&gt;Math::DCT&lt;/a&gt; can do 1D and NxN 2D Fast Discreet Cosine Transforms (DCT-II)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::HTTPStatus&#34;&gt;Mojo::HTTPStatus&lt;/a&gt; exports readable constants for HTTP response status codes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Role::Repeat&#34;&gt;Mojo::Promise::Role::Repeat&lt;/a&gt; provides a Promise looping construct with break&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::bcrypt&#34;&gt;Mojolicious::Command::bcrypt&lt;/a&gt; bcrypt a password using the settings in your Mojolicious app.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Inspecting Catalyst</title>
      <link>http://localhost:1313/article/inspecting-catalyst/</link>
      <pubDate>Mon, 11 Nov 2019 10:34:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/inspecting-catalyst/</guid>
      <description>

&lt;p&gt;One of the convenient things about &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; is it lets you register controller methods as actions, so you don&amp;rsquo;t need a separate routing table of URIs to controller methods. A consequence of this though, is that when the web app gets large enough it can be tricky to keep track of all the different paths the app is responding to.&lt;/p&gt;

&lt;p&gt;Catalyst&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::DispatchType::Chained&#34;&gt;chained dispatch&lt;/a&gt; promotes code reuse, but exacerbates the issue by obfuscating route matching. Catalyst also permits declaring controller methods which match an unlimited number of paths after a prefix; another recipe for unpredictablity.&lt;/p&gt;

&lt;p&gt;Take a look at the MetaCPAN &lt;a href=&#34;https://github.com/metacpan/metacpan-web&#34;&gt;source code&lt;/a&gt;. Can you tell all of the routes it responds to?&lt;/p&gt;

&lt;p&gt;As far as I know, the only way is to launch the app in debug mode and Catalyst will print a list of all the controller actions and their URIs. I suppose you could try parsing that output, but that feels like a hack. If we&amp;rsquo;re programming a web app, surely we should be able to programmatically retrieve all the routes &lt;em&gt;we&amp;rsquo;ve&lt;/em&gt; created, without having to launch the app.&lt;/p&gt;

&lt;h2 id=&#34;catalyst-plugin-actionpaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/h2&gt;

&lt;p&gt;With that straw man sufficiently propped up, allow me to introduce &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt;. I wrote it a while ago to implement some &lt;a href=&#34;http://localhost:1313/article/208/2016/1/5/Save-time-with-compile-tests/&#34;&gt;axiomatic&lt;/a&gt; tests at work which checked for misconfigured Catalyst routes.&lt;/p&gt;

&lt;p&gt;The plugin adds the &lt;code&gt;get_action_paths&lt;/code&gt; method to the Catalyst context object. The method returns an arrayref of the application&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Action&#34;&gt;Catalyst::Action&lt;/a&gt; objects. The way Catalyst&amp;rsquo;s routing works is it loops through every action object until it finds one that matches the request, or returns in failure.&lt;/p&gt;

&lt;p&gt;To use the ActionPaths plugin on the MetaCPAN app I forked and cloned the &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;repo&lt;/a&gt;, and added the ActionPaths plugin to the application &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After installing &lt;a href=&#34;https://metacpan.org/pod/Carton&#34;&gt;Carton&lt;/a&gt; from the root project directory I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ carton install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which installed of the applications dependencies into the &lt;code&gt;./local&lt;/code&gt; directory. This is a nice way to avoid clobbering your system or user-installed modules with the application&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;I also had to install the libxml2-dev and node-less Ubuntu packages to provide all of the app&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;Finally I wrote this &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/d17066f41945692a960ba80ed1865f22286efb78&#34;&gt;script&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.16&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cwd;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Basename;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Spec;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $root_dir;
&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bin_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::Basename::dirname(__FILE__);
  $root_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cwd::abs_path(File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;catdir($bin_dir, File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;updir));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/local/lib/perl5&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# carton installed deps&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/lib&amp;#34;&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;# root application dir&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst::Test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MetaCPAN::Web&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($res, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ctx_request(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_action_paths}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It begins by figuring out the root application directory, and adding the paths to the local Carton-installed and the MetaCPAN project modules (it uses &lt;a href=&#34;https://metacpan.org/pod/lib&#34;&gt;lib&lt;/a&gt; to catch architecture specific nested paths).&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; to load the MetaCPAN::Web application. Catalyst::Test exports the &lt;code&gt;ctx_request&lt;/code&gt; method, which returns the Catalyst context object &lt;code&gt;$c&lt;/code&gt;. From there I can call &lt;code&gt;get_action_paths&lt;/code&gt; and print out all the routes served by MetaCPAN.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bin/dump-catalyst-paths
MetaCPAN::Web::Controller::Root   index           /
MetaCPAN::Web::Controller::Root   default         /...
MetaCPAN::Web::Controller::About  about           /about/
MetaCPAN::Web::Controller::About  contact         /about/contact/
MetaCPAN::Web::Controller::About  contributors    /about/contributors/
MetaCPAN::Web::Controller::About  development     /about/development/
MetaCPAN::Web::Controller::About  faq             /about/faq/
MetaCPAN::Web::Controller::About  meta_hack       /about/meta_hack/
MetaCPAN::Web::Controller::About  metadata        /about/metadata/
MetaCPAN::Web::Controller::About  missing_modules /about/missing_modules/
MetaCPAN::Web::Controller::About  resources       /about/resources/
MetaCPAN::Web::Controller::About  sponsors        /about/sponsors/
MetaCPAN::Web::Controller::About  stats           /about/stats/
MetaCPAN::Web::Controller::Author index           /author/*
# output truncated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An asterisk in the path is a placeholder. An ellipses means the path accepts unlimited(!) placeholders.&lt;/p&gt;

&lt;p&gt;In this case I&amp;rsquo;m just printing the controller methods and URIs they match, but you could implement all kinds of checks on the Catalyst::Action objects to detect violations of agreed upon development best practices.&lt;/p&gt;

&lt;h2 id=&#34;a-better-way&#34;&gt;A better way&lt;/h2&gt;

&lt;p&gt;The solution above works, but it feels a bit gross. I&amp;rsquo;ve added a plugin to the Catalyst app which the app doesn&amp;rsquo;t actually use. The script fakes a request to the app &lt;em&gt;just&lt;/em&gt; to get &lt;code&gt;$c&lt;/code&gt;. I&amp;rsquo;m using a test module but running no tests. Surely there is a better way.&lt;/p&gt;

&lt;p&gt;Typically, Catalyst applications call the &lt;code&gt;setup&lt;/code&gt; method in the application module (for MetaCPAN that&amp;rsquo;s &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/blob/7866904ca299701bfa850c10a9e0456f73109bc4/lib/MetaCPAN/Web.pm&#34;&gt;MetaCPAN::Web&lt;/a&gt;). The &lt;code&gt;setup&lt;/code&gt; method bootstraps the web application, doing things like configuring directories, initializing the logger, loading plugins and building the request dispatcher. These are stored in the application package which is a singleton.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Catalyst::Plugin::ActionPaths::get_action_paths&lt;/code&gt; uses the Catalyst context to get the dispatcher object, which is all it needs to extract the paths from the Catalyst app. So instead of using &lt;code&gt;request_ctx&lt;/code&gt; to get the context to get the dispatcher, I can just stand up the application myself and pluck the dispatcher out of the application package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; MetaCPAN::Web; &lt;span style=&#34;color:#75715e&#34;&gt;# calls setup()&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dispatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MetaCPAN::Web&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dispatcher;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if I re-write the &lt;code&gt;get_action_paths&lt;/code&gt; method to just use the dispatcher object directly, I can extract all the paths from the app without using &lt;code&gt;request_ctx&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_action_paths($dispatcher);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$actions}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works. Of course if I can dynamically load the MetaCPAN app and extract its routes, then I can do that for any Catalyst app. That&amp;rsquo;s what &lt;a href=&#34;https://gist.github.com/dnmfarrell/cad2c6f6395850cb1ceca48b3ba05b7c&#34;&gt;dump-catalyst-paths&lt;/a&gt; does. To dump a Catalyst app&amp;rsquo;s routes just provide the package name and any additional paths to include:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./dump-catalyst-routes MetaCPAN::Web lib local/lib/perl5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;postscript&#34;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re just a couple of months past the 10th anniversary of the publication of &lt;a href=&#34;https://www.apress.com/gp/book/9781430223658&#34;&gt;Catalyst: The Definitive Guide&lt;/a&gt;. Two of our core applications at work are Catalyst apps. As one of Perl&amp;rsquo;s premier MVC apps, it&amp;rsquo;s remarkable how resilient it&amp;rsquo;s been. That&amp;rsquo;s a testament to the implementation (which got a lot of things right) and more recently the work done by its maintainer &lt;a href=&#34;https://metacpan.org/author/JJNAPIORK&#34;&gt;John Napiorkowski&lt;/a&gt;. Thanks John!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re considering web application programming with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt; frameworks are modern alternatives to Catalyst.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - September 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---september-2019/</link>
      <pubDate>Sat, 12 Oct 2019 15:06:38 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---september-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Turn comments above functions to pod with &lt;a href=&#34;https://metacpan.org/pod/App::CommentToPod&#34;&gt;App::CommentToPod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post messages to Discord chat service using &lt;a href=&#34;https://metacpan.org/pod/WebService::Discord::Webhook&#34;&gt;WebService::Discord::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::IPFinder&#34;&gt;IO::IPFinder&lt;/a&gt; is the official Perl module for ipfinder.io&lt;/li&gt;
&lt;li&gt;Get an interface to VMWare vCloud Directory REST API using &lt;a href=&#34;https://metacpan.org/pod/VMware::vCloudDirector2&#34;&gt;VMware::vCloudDirector2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sys::RunAlone::Flexible2&#34;&gt;Sys::RunAlone::Flexible2&lt;/a&gt; makes sure only one invocation of a script is active at a time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Collector&#34;&gt;File::Collector&lt;/a&gt; aims to be a generic file collection and processing framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Insert::Multi&#34;&gt;DBIx::Insert::Multi&lt;/a&gt; can insert multiple table rows in a single statement&lt;/li&gt;
&lt;li&gt;Get syntactic sugar for &lt;code&gt;select&lt;/code&gt; with &lt;a href=&#34;https://metacpan.org/pod/Data::FDSet&#34;&gt;Data::FDSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get convenient file slurping and spurting of JSOn using &lt;a href=&#34;https://metacpan.org/pod/JSON::Slurper&#34;&gt;JSON::Slurper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UUID4::Tiny&#34;&gt;UUID4::Tiny&lt;/a&gt; provides cryptographically secure v4 UUIDs for Linux x64 systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Class::Accessor::Typed&#34;&gt;Class::Accessor::Typed&lt;/a&gt; is like Class::Accessor::Lite with Moose-style type declarations&lt;/li&gt;
&lt;li&gt;Cache messages to an object using &lt;a href=&#34;https://metacpan.org/pod/Class::Simple::Cached&#34;&gt;Class::Simple::Cached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus::Record::StringArray&#34;&gt;FFI::Platypus::Record::StringArray&lt;/a&gt; provides experimental support for arrays of C strings for FFI record classes&lt;/li&gt;
&lt;li&gt;Get true tail recursion with &lt;a href=&#34;https://metacpan.org/pod/Keyword::TailRecurse&#34;&gt;Keyword::TailRecurse&lt;/a&gt;, wow!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Long::Jump&#34;&gt;Long::Jump&lt;/a&gt; return to a specific point from a deeply nested stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::Role::CliOptions&#34;&gt;MooX::Role::CliOptions&lt;/a&gt; combines Moo classes with &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; for object oriented scripting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Curl::Promiser&#34;&gt;Net::Curl::Promiser&lt;/a&gt; provides a promise-based interface for Net::Curl::Multi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::CC1101&#34;&gt;Device::Chip::CC1101&lt;/a&gt; is a driver for the Texas Instruments CC1101 radio transceiver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::ModInt&#34;&gt;Math::Polynomial::ModInt&lt;/a&gt; is a subclass of Math::Polynomial for &amp;ldquo;modular integer coefficient spaces&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Parse Open Biological and Biomedical Ontology (OBO) and Gene Association File (GAF) files with &lt;a href=&#34;https://metacpan.org/pod/obogaf::parser&#34;&gt;obogaf::parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating IP address tools from scratch</title>
      <link>http://localhost:1313/article/creating-ip-address-tools-from-scratch/</link>
      <pubDate>Thu, 19 Sep 2019 11:00:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/creating-ip-address-tools-from-scratch/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been researching how the Internet is organized, and working with &lt;a href=&#34;https://en.wikipedia.org/wiki/WHOIS&#34;&gt;whois&lt;/a&gt; data. I&amp;rsquo;ve been creating simple tools that process IP addresses without any help from CPAN. At work we tend to use &lt;a href=&#34;https://metacpan.org/pod/Net::IP::XS&#34;&gt;Net::IP::XS&lt;/a&gt; for these tasks, but sometimes it&amp;rsquo;s fun to figure out how things work under the hood.&lt;/p&gt;

&lt;h2 id=&#34;converting-to-decimal&#34;&gt;Converting to decimal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;re familiar with the IPv4 address &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4#Addressing&#34;&gt;format&lt;/a&gt;; the &amp;ldquo;dotted quad&amp;rdquo; consists of four numbers between 0 and 255 separated by periods. Your home wifi network probably starts at 192.168.0.0. The format is just another way of representing a 32-bit integer; here are the numbers and their equivalent in binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     192      168        0        0
11000000 10101000 00000000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To figure out the value of the address in decimal, you need to read all 32 bits in one go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11000000101010000000000000000000
                      3232235520
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I find it useful to convert IPv4 addresses to decimals for storing them in a database; it&amp;rsquo;s much faster to search integers than text. So how would we do that in Perl? Here&amp;rsquo;s one way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.0.0&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $ipv4;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 3232235520&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code splits the IPv4 string &lt;code&gt;192.168.0.0&lt;/code&gt; into an array of 4 numbers (192,168,0,0). I use &lt;a href=&#34;https://perldoc.perl.org/functions/pack.html&#34;&gt;pack&lt;/a&gt; to convert each number from Perl&amp;rsquo;s representation into an unsigned 8-bit integer (the &amp;ldquo;C&amp;rdquo; is for char, the C language type). Then I use &lt;a href=&#34;https://perldoc.perl.org/functions/unpack.html&#34;&gt;unpack&lt;/a&gt; to read all 32 bits at once (the &amp;ldquo;N&amp;rdquo; is for an unsigned long in Network order - i.e. big endian).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; is convenient, but it&amp;rsquo;s not the fastest way to convert those numbers into a single 32-bit integer. We can accomplish the same feat with multiplication and exponentiation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This multiplies each number by 2 raised to the appropriate power (&lt;code&gt;**&lt;/code&gt; is Perl&amp;rsquo;s exponentiation operator): 192 must be multiplied by 2^24 as we want it to be moved 24 bits to the left, 168 should be multiplied by 2^16 and so on. Alternatively I could use bit-shifting to do the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using exponents or bit-shifting are both over 3x faster than my pack-unpack routine. That isn&amp;rsquo;t unusual: aside from avoiding subroutine calls, compilers are optimized for base 2 operations.&lt;/p&gt;

&lt;p&gt;You might be wondering how this would work for an &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv6#Addressing&#34;&gt;IPv6&lt;/a&gt; address. In principle the steps are the same, but it&amp;rsquo;s more complicated: IPv6 addresses are 128-bit integers, which is larger than Perl can natively handle. IPv6 addresses also have more involved representation &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv6_address#Representation&#34;&gt;rules&lt;/a&gt;. I&amp;rsquo;ll tackle IPv6 in a future article.&lt;/p&gt;

&lt;h2 id=&#34;changing-decimal-back-to-dotted-quad&#34;&gt;Changing decimal back to dotted quad&lt;/h2&gt;

&lt;p&gt;To get back from a decimal number to an IPv4 address, just reverse the process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3232235776&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $decimal;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 192.168.1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I&amp;rsquo;ve used the pack-unpack routine again. I&amp;rsquo;m not sure if there&amp;rsquo;s a exponent/bit-shift solution that&amp;rsquo;s faster. I could right shift the decimal 24 bits to get 192, then left shift 192 24 bits and subtract it from the decimal, then shift the decimal 16 bits right and so on. But that seems like a lot of work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Dave Cross posted a &lt;a href=&#34;https://www.reddit.com/r/perl/comments/d6kncb/creating_ip_address_tools_from_scratch/f0vas6d?utm_source=share&amp;amp;utm_medium=web2x&#34;&gt;solution&lt;/a&gt; using bitmaps.&lt;/p&gt;

&lt;h2 id=&#34;extracting-a-range-from-cidr-notation&#34;&gt;Extracting a range from CIDR notation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing&#34;&gt;CIDR&lt;/a&gt; notation is shorthand way of describing a range of contiguous IP addresses belonging to a network. For instance your home network is commonly administered on &lt;code&gt;192.168.0.0/16&lt;/code&gt;. This can be read as &amp;ldquo;the network begins at 192.168.0.0 and the network mask is 16 bits long&amp;rdquo;. In other words the network begins at &lt;code&gt;192.168.0.0&lt;/code&gt; and ends at &lt;code&gt;192.168.255.255&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;CIDR is powerful though because the network mask doesn&amp;rsquo;t have to be a factor of 8; it&amp;rsquo;s harder to read &lt;code&gt;105.201.192.0/19&lt;/code&gt; and know where the network ends. And that&amp;rsquo;s where Perl can help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $prefixlen) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\//&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;105.201.192.0/19&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $prefixlen;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $end_decimal;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 105.201.223.255&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code starts by splitting the network &lt;code&gt;105.201.192.0/19&lt;/code&gt; into its starting IPv4 address and the network mask prefix length. I then use the same routine as before to obtain the decimal starting address. To figure out the last network address, I can use exponentiation again: 2 to the power of the remaining bits, minus 1 tells me how much larger the end address is than the start. To get the dotted quad I use pack-unpack to read the end decimal back into 4 bytes, and join them together again.&lt;/p&gt;

&lt;h2 id=&#34;a-quick-note-on-scripting&#34;&gt;A quick note on scripting&lt;/h2&gt;

&lt;p&gt;All of my code examples so far have used fixed variables to keep things simple. But I don&amp;rsquo;t actually write scripts like this. Text streams are the lingua franca of Unix systems; so it&amp;rsquo;s much more useful to write scripts that read streams of text and print streams of text. Then you can pipe data in and out of the script, chaining programs together to get the transformation you need. Here&amp;rsquo;s an example if what I&amp;rsquo;m talking about:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $prefixlen) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\//&lt;/span&gt;, $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $prefixlen;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $end_decimal) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $start_decimal;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $ipv4, @columns;
    $start_decimal&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script enumerates all the IP addresses in a network. I use the &lt;a href=&#34;https://www.masteringperl.org/2014/10/the-double-diamond-a-more-secure/&#34;&gt;double diamond&lt;/a&gt; operator to read input from STDIN or treat its arguments like filenames automatically opening and streaming them. I expect tab-separated columns of text, and that the first column contains the CIDR to enumerate. It performs the conversion and prints the answer along with the original input in tab-separated form.&lt;/p&gt;

&lt;p&gt;I can run it by piping input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;129.232.156.16/29&#39; | enum-ips
129.232.156.16  129.232.156.16/29
129.232.156.17  129.232.156.16/29
129.232.156.18  129.232.156.16/29
129.232.156.19  129.232.156.16/29
129.232.156.20  129.232.156.16/29
129.232.156.21  129.232.156.16/29
129.232.156.22  129.232.156.16/29
129.232.156.23  129.232.156.16/29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or pass it filenames to read from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ enum-ips cidrs-1.txt cidrs-2.txt | head
102.32.0.0  102.32.0.0/15
102.32.0.1  102.32.0.0/15
102.32.0.2  102.32.0.0/15
102.32.0.3  102.32.0.0/15
102.32.0.4  102.32.0.0/15
102.32.0.5  102.32.0.0/15
102.32.0.6  102.32.0.0/15
102.32.0.7  102.32.0.0/15
102.32.0.8  102.32.0.0/15
102.32.0.9  102.32.0.0/15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;representing-a-range-in-cidr-notation&#34;&gt;Representing a range in CIDR notation&lt;/h2&gt;

&lt;p&gt;CIDR notation is compact and convenient; but the &lt;a href=&#34;https://www.ripe.net/manage-ips-and-asns/db/support/documentation/ripe-database-documentation/rpsl-object-types/4-2-descriptions-of-primary-objects/4-2-4-description-of-the-inetnum-object&#34;&gt;inetnum whois object&lt;/a&gt; defines each netblock by its starting and ending IPv4 address, like this: &amp;ldquo;197.232.80.0 - 197.232.83.255&amp;rdquo;. So I wrote a script to convert that string back into a CIDR:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $end_ipv4) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\s+-\s+/&lt;/span&gt;, $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $end_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $prefixlen     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; length sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%0b&amp;#34;&lt;/span&gt;, $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $start_decimal;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$start_ipv4/$prefixlen&amp;#34;&lt;/span&gt;, @columns;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script reads input one line at a time. It splits the string up into the starting and ending IPv4 addresses, and uses that same pack-unpack routine to convert each to its decimal. It then calculates the prefix length by finding the difference between the start and end addresses, stringifying it to binary with &lt;a href=&#34;https://perldoc.perl.org/functions/sprintf.html&#34;&gt;sprintf&lt;/a&gt; and subtracting the number of bits from 32 (because IPv4 addresses are 32-bit integers).&lt;/p&gt;

&lt;p&gt;The trouble with the prefix length calculation is it uses stringification - sticking with numbers should be faster if there was a way to do it. Let&amp;rsquo;s recap what we know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can calculate the maximum (unsigned) 32-bit integer value using a base of 2: 2&lt;sup&gt;32&lt;/sup&gt; - 1&lt;/li&gt;
&lt;li&gt;IPv4 addresses are just another way of representing unsigned 32-bit integers&lt;/li&gt;
&lt;li&gt;With an input like &lt;code&gt;197.232.80.0 - 197.232.83.255&lt;/code&gt; we can calculate the difference between the two values (1023)&lt;/li&gt;
&lt;li&gt;We know the base is 2 and the result is 1023; we just don&amp;rsquo;t know what the exponent is: 2&lt;sup&gt;x&lt;/sup&gt; - 1 = 1023&lt;/li&gt;
&lt;li&gt;To solve for &lt;code&gt;x&lt;/code&gt;, we can use the logarithm function which is the inverse of exponentiation&lt;/li&gt;
&lt;li&gt;The solution is: x = log&lt;sub&gt;2&lt;/sub&gt; ⋅ (1023 + 1)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the Perl solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $prefixlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $start_decimal) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; log(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It uses the &lt;a href=&#34;https://perldoc.perl.org/functions/log.html&#34;&gt;log&lt;/a&gt; function which uses the natural logarithm base &lt;em&gt;e&lt;/em&gt; (like the &lt;code&gt;ln&lt;/code&gt; button on a calculator), so it must be divided by &lt;code&gt;log(2)&lt;/code&gt; to act like log&lt;sub&gt;2&lt;/sub&gt;. Benchmarking this I was surprised to find that the &lt;code&gt;log&lt;/code&gt; solution is only a few percent faster than using &lt;code&gt;sprintf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Dan Book posted an IP address to decimal &lt;a href=&#34;https://www.reddit.com/r/perl/comments/d6kncb/creating_ip_address_tools_from_scratch/f0u1flu?utm_source=share&amp;amp;utm_medium=web2x&#34;&gt;solution&lt;/a&gt; that uses &lt;a href=&#34;https://metacpan.org/pod/Socket&#34;&gt;Socket&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - August 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</link>
      <pubDate>Tue, 10 Sep 2019 17:18:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---august-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::GoShippo&#34;&gt;WebService::GoShippo&lt;/a&gt; is a simple client for Shippo&amp;rsquo;s shipping and handling API&lt;/li&gt;
&lt;li&gt;Use Google&amp;rsquo;s CloudTasks API to queue up tasks with &lt;a href=&#34;https://metacpan.org/pod/Google::CloudTasks&#34;&gt;Google::CloudTasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manage machines and software using the Puppet Enterprise API with &lt;a href=&#34;https://metacpan.org/pod/Puppet::Classify&#34;&gt;Puppet::Classify&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Puppet::Orchestrator&#34;&gt;Puppet::Orchestrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure 433 MHz HC-12 Radio Frequency serial transceivers with &lt;a href=&#34;https://metacpan.org/pod/RF::HC12&#34;&gt;RF::HC12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::PlantUML&#34;&gt;WWW::PlantUML&lt;/a&gt; is a simple client for retrieving diagram URLs from a plantuml server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parse ldap config files with &lt;a href=&#34;https://metacpan.org/pod/Config::Parser::ldap&#34;&gt;Config::Parser::ldap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use XOAUTH2 authentication with Net::POP3 via &lt;a href=&#34;https://metacpan.org/pod/Net::POP3::XOAuth2&#34;&gt;Net::POP3::XOAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenBSD::Checkpass&#34;&gt;OpenBSD::Checkpass&lt;/a&gt; provides an interface to OpenBSD crypt_checkpass(3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Helper::WindowFunctions&#34;&gt;DBIx::Class::Helper::WindowFunctions&lt;/a&gt; adds basic support for window functions to DBIx::Class&lt;/li&gt;
&lt;li&gt;Clean data so it is safe to output to JSON using &lt;a href=&#34;https://metacpan.org/pod/Data::Clean::ForJSON&#34;&gt;Data::Clean::ForJSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dita::PCD&#34;&gt;Dita::PCD&lt;/a&gt; is an implementation of the Please Change Dita Language&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Puppet::DB&#34;&gt;Puppet::DB&lt;/a&gt; retrieves data (facts, reports) from a Puppet DB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Code::Quality&#34;&gt;Code::Quality&lt;/a&gt; uses static analysis  (clang, lizard) to compute a &amp;ldquo;code quality&amp;rdquo; metric for a program&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Curses::Readline&#34;&gt;Curses::Readline&lt;/a&gt; provides readline for curses&lt;/li&gt;
&lt;li&gt;Perform continuous database migration using &lt;a href=&#34;https://metacpan.org/pod/Geoffrey&#34;&gt;Geoffrey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Partially apply parameters to functions with &lt;a href=&#34;https://metacpan.org/pod/PartialApplication&#34;&gt;PartialApplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profile database queries run during tests using &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::DBIProfile&#34;&gt;Test2::Plugin::DBIProfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Collect and display test memory usage information with &lt;a href=&#34;https://metacpan.org/pod/Test2::Plugin::MemUsage&#34;&gt;Test2::Plugin::MemUsage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/parent::versioned&#34;&gt;parent::versioned&lt;/a&gt; establishes ISA relationships with base classes at compile time, with version checking&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::Layout&#34;&gt;Text::Layout&lt;/a&gt; can create documents/graphics using the Pango style markup formatting (PDFs, cairo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gaming&#34;&gt;Gaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run Conway&amp;rsquo;s Game of Life faster using &lt;a href=&#34;https://metacpan.org/pod/Game::Life::Faster&#34;&gt;Game::Life::Faster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Command::static&#34;&gt;Mojolicious::Command::static&lt;/a&gt; stands up a simple static file server&lt;/li&gt;
&lt;li&gt;Test Mojo under Test2 with &lt;a href=&#34;https://metacpan.org/pod/Test2::MojoX&#34;&gt;Test2::MojoX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weasel::DriverRole&#34;&gt;Weasel::DriverRole&lt;/a&gt; provides an API definition for Weasel&amp;rsquo;s driver wrappers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - July 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---july-2019/</link>
      <pubDate>Tue, 20 Aug 2019 14:03:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---july-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PawsX::Waiter&#34;&gt;PawsX::Waiter&lt;/a&gt; is a Waiter library for Paws&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Web::NewsAPI&#34;&gt;Web::NewsAPI&lt;/a&gt; can fetch and search news headlines and sources from News API&lt;/li&gt;
&lt;li&gt;Use a language detection API with &lt;a href=&#34;https://metacpan.org/pod/WebService::DetectLanguage&#34;&gt;WebService::DetectLanguage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write cpanfiles without XS dependencies using &lt;a href=&#34;https://metacpan.org/pod/Module::CPANfile::Writer&#34;&gt;Module::CPANfile::Writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Symlink::DSL&#34;&gt;Symlink::DSL&lt;/a&gt; provides a domain-specific language for creating symbolic links&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DataLoader&#34;&gt;DataLoader&lt;/a&gt; abstracts data loading, with batching and caching to reduce overhead&lt;/li&gt;
&lt;li&gt;Get pseudo-random distribution functions with &lt;a href=&#34;https://metacpan.org/pod/Game::PseudoRand&#34;&gt;Game::PseudoRand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::IP6&#34;&gt;Geo::IP6&lt;/a&gt; provides country codes for any ipv6 or ipv4 address&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::BlockSync&#34;&gt;IO::BlockSync&lt;/a&gt; syncs data in blocks instead of whole files which can be useful for slow/unreliable destinations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encode/decode text for PDF using &lt;a href=&#34;https://metacpan.org/pod/Encode::PDFDoc&#34;&gt;Encode::PDFDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lib::Log4cplus&#34;&gt;Lib::Log4cplus&lt;/a&gt; provides a Perl interface to Log4cplus&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooX::TO_JSON&#34;&gt;MooX::TO_JSON&lt;/a&gt; saves you having to write a TO_JSON data serializer method for Moo classes&lt;/li&gt;
&lt;li&gt;Check if you are currently in compile time or run time using &lt;a href=&#34;https://metacpan.org/pod/Perl::Phase&#34;&gt;Perl::Phase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::FFI&#34;&gt;Time::FFI&lt;/a&gt; provides an FFI to POSIX date and time functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Time::Moment::Role::Strptime&#34;&gt;Time::Moment::Role::Strptime&lt;/a&gt; strptime constructor for Time::Moment&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XT::Files&#34;&gt;XT::Files&lt;/a&gt; is a standard interface for author tests to find files to check&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::Adapter::UART&#34;&gt;Device::Chip::Adapter::UART&lt;/a&gt; is a Device::Chip::Adapter implementation for serial ports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Base::Tiny&#34;&gt;Mojo::Base::Tiny&lt;/a&gt; is a minimal base class for non-Mojo projects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Promisify&#34;&gt;Mojo::Promisify&lt;/a&gt; converts callback code to promise-based code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Iperf::Parser&#34;&gt;Net::Iperf::Parser&lt;/a&gt; parses lines from iperf, the network bandwidth tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Progressive::Web::Application&#34;&gt;Progressive::Web::Application&lt;/a&gt; is a utility for making an application &amp;lsquo;progressive&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - June 2019</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---june-2019/</link>
      <pubDate>Fri, 26 Jul 2019 00:31:19 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---june-2019/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install all modules under a certain CPAN namespace using &lt;a href=&#34;https://metacpan.org/pod/App::cpanm::namespace&#34;&gt;App::cpanm::namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OpenTracing&#34;&gt;OpenTracing&lt;/a&gt; - application process monitoring as defined by opentracing.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/VoIPms&#34;&gt;VoIPms&lt;/a&gt; is an API wrapper for VoIP.ms&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::WordsAPI&#34;&gt;WebService::WordsAPI&lt;/a&gt; provides a Perly interface for retrieving data about words&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use ChromaPrint with Perl using &lt;a href=&#34;https://metacpan.org/pod/Audio::Chromaprint&#34;&gt;Audio::Chromaprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::Uncompress::Untar&#34;&gt;IO::Uncompress::Untar&lt;/a&gt; is a Pure-perl module for reading tar, tgz, .tar.bz2 etc files/buffers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Linux::PacketFilter&#34;&gt;Linux::PacketFilter&lt;/a&gt; provides a simple interface to Linux packet filtering&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/YAML::Safe&#34;&gt;YAML::Safe&lt;/a&gt; is a refactored version of YAML::XS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dig into the guts of a live Perl program with &lt;a href=&#34;https://metacpan.org/pod/Endoscope&#34;&gt;Endoscope&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;Process a list with callbacks with &lt;a href=&#34;https://metacpan.org/pod/Mojo::AsyncList&#34;&gt;Mojo::AsyncList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get subroutine meta information with &lt;a href=&#34;https://metacpan.org/pod/Sub::Meta&#34;&gt;Sub::Meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Pod::LinkCheck::Lite&#34;&gt;Test::Pod::LinkCheck::Lite&lt;/a&gt; tests non-URL POD links&lt;/li&gt;
&lt;li&gt;Aggregate tests with &lt;a href=&#34;https://metacpan.org/pod/Test2::Aggregate&#34;&gt;Test2::Aggregate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Try::Harder&#34;&gt;Try::Harder&lt;/a&gt; is a pure-Perl, source-filter attempt to get the functionality of Syntax::Keyword::Try compatible with older Perl versions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Web::Solid::Test::Basic&#34;&gt;Web::Solid::Test::Basic&lt;/a&gt; provides reusable tests via RDF&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::AVR::UPDI&#34;&gt;Device::AVR::UPDI&lt;/a&gt; interacts with an AVR microcontroller over UPDI&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::EEPROM::AT24C32&#34;&gt;RPi::EEPROM::AT24C32&lt;/a&gt; reads and writes to the AT24C32 based EEPROM ICs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::OLED::SSD1306::128_64&#34;&gt;RPi::OLED::SSD1306::128_64&lt;/a&gt; is an interface to the SSD1306-esque 128x64 OLED displays&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/RPi::SysInfo&#34;&gt;RPi::SysInfo&lt;/a&gt; retrieves hardware system information from a Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Game::LevelMap&#34;&gt;Game::LevelMap&lt;/a&gt; is a module for representing game level maps&lt;/li&gt;
&lt;li&gt;Play the Platforms of Peril game: &lt;a href=&#34;https://metacpan.org/pod/Game::PlatformsOfPeril&#34;&gt;Game::PlatformsOfPeril&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Z3::FFI&#34;&gt;Z3::FFI&lt;/a&gt; provides an FFI to the Z3 solver/prover&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mozilla::IntermediateCerts&#34;&gt;Mozilla::IntermediateCerts&lt;/a&gt; can download and parse Mozilla intermediate certificates&lt;/li&gt;
&lt;li&gt;Serve GraphQL from Plack / PSGI with &lt;a href=&#34;https://metacpan.org/pod/Plack::App::GraphQL&#34;&gt;Plack::App::GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Search::QS&#34;&gt;Search::QS&lt;/a&gt; parses a query string DSL into a search query&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/URI::Pure&#34;&gt;URI::Pure&lt;/a&gt; adds support to URI for Internationalized Domain Names (IDN) and Internationalized Resource Identifiers (IRI)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

