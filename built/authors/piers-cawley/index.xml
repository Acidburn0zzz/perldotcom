<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Piers Cawley on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/piers-cawley/</link>
    <description>Recent content in Piers Cawley on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/piers-cawley/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week in Perl 6, Through August 14, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</link>
      <pubDate>Thu, 18 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050818.html/</guid>
      <description>

&lt;p&gt;As you will note from the date in the title, it&amp;rsquo;s been a short week. We&amp;rsquo;re switching back to a midnight Sunday/Monday rollover in order to make life easier for the Perl.com types. So, if I can avoid being distracted too much by the second Ashes test, I&amp;rsquo;ll try to get the summary finished before Monday is out, which should please chromatic.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Another low-volume week in &lt;em&gt;perl6-compiler&lt;/em&gt;; probably because, with the high speed of Pugs development, most of the discussion happens on IRC.&lt;/p&gt;

&lt;h4 id=&#34;container-model-pictures-and-questions-http-groups-google-com-groups-threadm-20050806162158-gb2263-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050806162158.GB2263@aut.dyndns.org&#34;&gt;Container Model, Pictures, and Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus fielded some questions about, and updated the pictures of, the container model.&lt;/p&gt;

&lt;h4 id=&#34;why-pxperl-http-groups-google-com-groups-threadm-20050808125840-22956-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050808125840.22956.qmail@lists.develooper.com&#34;&gt;Why PXPerl?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert (No Surname) asked what were the benefits of PXPerl over the ActiveState distribution. In short, PXPerl comes with Parrot and Pugs, which ActiveState doesn&amp;rsquo;t. If you set your path appropriately, you can continue to use the ActiveState Perl and just rely on PXPerl for Parrot and Pugs.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-lexical-declarations-http-groups-google-com-groups-threadm-20050809193348-ga27323-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050809193348.GA27323@wall.org&#34;&gt;Hoisting Lexical Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry answered some of Autrijus&amp;rsquo;s questions about Perl 6&amp;rsquo;s lexical scoping rules. Apparently what Pugs currently does is close enough to sane to be going on with.&lt;/p&gt;

&lt;h4 id=&#34;warnock-in-pugsland-http-groups-google-com-groups-threadm-20050811040041-gb56898-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050811040041.GB56898@aut.dyndns.org&#34;&gt;Warnock in Pugsland&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, in Pugsland, a Warnocked patch usually means that the person who posted the patch simply received a committer bit and didn&amp;rsquo;t mention the fact on the list.&lt;/p&gt;

&lt;h4 id=&#34;metamodel-notes-http-pugscode-org-images-metamodel-png&#34;&gt;&lt;a href=&#34;http://pugscode.org/images/metamodel.png&#34;&gt;Metamodel Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray posted some &lt;a href=&#34;http://groups.google.com/groups?threadm=20050811193918.GB12852@vs2.capwiz.com&#34;&gt;notes&lt;/a&gt; and &lt;a href=&#34;http://groups.google.com/groups?threadm=20050812170838.GA820@aut.dyndns.org&#34;&gt;ASCII art&lt;/a&gt; about the metamodel. Autrijus added pointers to further pictures.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;updated-intro-pod-http-groups-google-com-groups-threadm-01bf01c59ba4-384dc5d0-0200a8c0-server&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=01bf01c59ba4$384dc5d0$0200a8c0@SERVER&#34;&gt;Updated &lt;em&gt;intro.pod&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington posted a rewrite of Parrot&amp;rsquo;s &lt;em&gt;intro.pod&lt;/em&gt; document, now with a discussion of PIR. Huzzah!&lt;/p&gt;

&lt;h4 id=&#34;test-builder-and-friends-on-parrot-http-groups-google-com-groups-threadm-1123570251-22403-70-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123570251.22403.70.camel@localhost&#34;&gt;Test::Builder and Friends on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Following prompting from Geoff Young and Jeff Horwitz, chromatic has implemented Test::Builder and Test::Builder::Tester in pure Parrot. For his next trick, he intends to port Test::More and Parrot::Test.&lt;/p&gt;

&lt;p&gt;Tests are good, m&amp;rsquo;kay?&lt;/p&gt;

&lt;h4 id=&#34;how-to-add-a-new-opcode-http-groups-google-com-groups-threadm-1123573276-8867-6-camel-lgerd-hrz-uni-siegen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1123573276.8867.6.camel@lgerd.hrz.uni-siegen.de&#34;&gt;How to Add a New Opcode?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra asked how to add an opcode to Parrot. Klaas-Jan Stol and Leo gave the answers.&lt;/p&gt;

&lt;h4 id=&#34;cleaning-up-the-call-opcodes-http-groups-google-com-groups-threadm-42fa0ffb-6090605-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FA0FFB.6090605@toetsch.at&#34;&gt;Cleaning Up the Call Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo reposted about cleaning up the various function-calling opcodes to take account of the fact that the calling conventions have changed. He asked for opinions and actually received a couple, which is handy, since he ended up Warnocked last time.&lt;/p&gt;

&lt;h4 id=&#34;parrot-i-http-groups-google-com-groups-threadm-d113603e0508101127396ed8c7-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=d113603e0508101127396ed8c7@mail.gmail.com&#34;&gt;&lt;code&gt;parrot -I&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger wondered if there was some way of telling Parrot to add directories to its load path. Leo seemed to think it was not that good an idea, and proposed using a relative path in a &lt;code&gt;.include&lt;/code&gt; directive.&lt;/p&gt;

&lt;h4 id=&#34;dominance-frontiers-http-groups-google-com-groups-threadm-45ec99fc050810182530001652-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050810182530001652@mail.gmail.com&#34;&gt;Dominance Frontiers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls continued his work on dominance frontiers to improve Parrot&amp;rsquo;s optimizer.&lt;/p&gt;

&lt;h4 id=&#34;pge-globber-empty-strings-http-groups-google-com-groups-threadm-rt-3-0-11-36882-119083-2-43242787217334-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36882-119083.2.43242787217334@perl.org&#34;&gt;PGE Globber, Empty Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda reported on trying to match empty strings with PGE&amp;rsquo;s &lt;code&gt;glob&lt;/code&gt; implementation. It turned out to be a problem with &lt;code&gt;Data::Escape&lt;/code&gt;. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;deprecated-opcodes-http-groups-google-com-groups-threadm-42fdf124-2090502-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42FDF124.2090502@toetsch.at&#34;&gt;Deprecated Opcodes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a list of opcodes that are due for the chop (or alteration) soon. If you&amp;rsquo;re doing anything with Parrot, it&amp;rsquo;s probably a good idea to take a look at this list. One of those who did was chromatic, who asked if Leo could give some examples of translating code so as not to use the old forms.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. Eight balls to go with one wicket needed. I think I&amp;rsquo;ll pause for a while.&lt;/p&gt;

&lt;p&gt;Damn. Australia have saved the game.&lt;/p&gt;

&lt;h4 id=&#34;translating-or-at-least-parsing-java-interface-definitions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4554&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4554&#34;&gt;Translating (Or at Least Parsing) Java Interface Definitions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if anyone had done any work on parsing Java interface declarations and (ideally) translating them to roughly equivalent Perl 6. Apparently, Gaal Yahas has done something along these lines (with Parse::RecDescent for Perl 5), but doesn&amp;rsquo;t own the code. He outlined the approach he took.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-meta-object-protocols-and-object-meta-isa-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4558&#34;&gt;Perl 6 Meta Object Protocols and &lt;code&gt;$object.meta.isa(?)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little is busy documenting the Perl 6 metamodel that he&amp;rsquo;s implemented in Perl 5 and that Autrijus is busy porting to Haskell. He posted an overview to the list and asked for comment. There then followed lots of discussion. I think I understood some of it.&lt;/p&gt;

&lt;h4 id=&#34;object-meta-isa-redux-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4574&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4574&#34;&gt;&lt;code&gt;$object.meta.isa(?)&lt;/code&gt; Redux&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan split the discussion of &lt;code&gt;$object.meta.isa(?)&lt;/code&gt; off from the earlier metamodel thread into a thread of its own and asked for comments once more. Larry commented that &amp;ldquo;the Apocalypses are primarily intended to be entertaining rather than factual.&amp;rdquo; Also in this thread, Luke let slip that there&amp;rsquo;s now a &lt;code&gt;Set&lt;/code&gt; role in Perl 6, which has the enormous advantage of letting us specify argument types in a sensible way without having to overload the junctions.&lt;/p&gt;

&lt;h4 id=&#34;obj-meta-add-method-foo-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4576&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4576&#34;&gt;&lt;code&gt;$obj.meta.add_method(&#39;foo&#39; =&amp;gt; ???)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan continued discussing the metamodel with a thread about the &lt;code&gt;add_method&lt;/code&gt; method. Autrijus was the only person with comments.&lt;/p&gt;

&lt;h4 id=&#34;proposed-new-traits-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4588&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4588&#34;&gt;Proposed New Traits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus said that he&amp;rsquo;d started to write the inferencer and had immediately run into the problem that every type can potentially contain &lt;code&gt;undef&lt;/code&gt;. He proposed adding an &lt;code&gt;is defined&lt;/code&gt; trait, which would cause a variable to immediately throw an exception if anyone attempted to assign it an undefined value. He also proposed a &lt;code&gt;typed&lt;/code&gt; trait, but I was a little less clear on why this would be a good idea. I have to confess that I didn&amp;rsquo;t understand what Larry&amp;rsquo;s reply was driving at, but that&amp;rsquo;s okay, because Autrijus did seem to understand it.&lt;/p&gt;

&lt;h4 id=&#34;my-pi-is-constant-3-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4600&#34;&gt;&lt;code&gt;my $pi is constant = 3&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if an example of the &lt;code&gt;is constant&lt;/code&gt; trait shown in Synopsis 6 was a special form or a typo. At least, I think that&amp;rsquo;s what he was asking; I may be wearing my stupid head today, though. Larry thought it was neither. I think. It seems there&amp;rsquo;s more to constancy than meets the eye. (Just ask any married couple.)&lt;/p&gt;

&lt;h4 id=&#34;typed-type-variables-my-foo-x-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4625&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4625&#34;&gt;Typed Type Variables (&lt;code&gt;my Foo ::x&lt;/code&gt;)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stuart Cook asked about the meaning of type annotations on type variables. Autrijus answered and Thomas Sandlaß agreed with him.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-www-mail-archive-com-perl6-language-perl-org-msg21349-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language@perl.org/msg21349.html&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark commented on an earlier discussion of using IO in &lt;code&gt;BEGIN&lt;/code&gt; blocks, pointing out that this was just a specific case of the more general problem of attempting to serialize things to bytecodes that were simply unserializable. I reckon the trick of it will be to do such things in &lt;code&gt;INIT&lt;/code&gt; or possibly &lt;code&gt;CHECK&lt;/code&gt; blocks (I can never remember which way round those two go).&lt;/p&gt;

&lt;h4 id=&#34;generic-classes-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-4658&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4658&#34;&gt;Generic Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked about generic classes, but nobody answered before the end of the summary week. Expect Matt to address this one in the next summary.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m sorry to have to say this, but I don&amp;rsquo;t think I have to apologize for anything this week. WorldCon was fun.&lt;/p&gt;

&lt;h4 id=&#34;everything-else&#34;&gt;Everything Else&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.geeksunite.net/&#34;&gt;Help Chip!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, through August 2, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</link>
      <pubDate>Mon, 08 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050804.html/</guid>
      <description>

&lt;p&gt;In case you were wondering, Darwin ports didn&amp;rsquo;t work its magic and I still don&amp;rsquo;t have a working Haskell compiler. Thank Juerd for feather, even if I did have to turn my laptop upside down to read the MOTD. Rot-180: oN hes +snf&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;There were 12 messages in the compiler list this week. Either everyone has decamped to IRC or OSCON, or the compiler&amp;rsquo;s getting mature enough that most of the interesting discussion about it happens in &lt;em&gt;perl6-language&lt;/em&gt; as Autrijus and others seek clarification.&lt;/p&gt;

&lt;h4 id=&#34;some-thoughts-on-pil-complete-type-inferencing-http-groups-google-com-groups-threadm-20050728205921-ga61292-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050728205921.GA61292@aut.dyndns.org&#34;&gt;Some Thoughts on PIL/Complete Type Inferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus has been doing some thinking on the next version of PIL (The Pugs Intermediate Language), which will be a little less tightly coupled with PIR/Parrot. He outlined his thinking (which he seems to have directed towards being able to do useful things and optimizations with Type information) in this thread.&lt;/p&gt;

&lt;h4 id=&#34;definition-of-containers-http-groups-google-com-groups-threadm-20050730224910-gb5372-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050730224910.GB5372@aut.dyndns.org&#34;&gt;Definition of Containers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that he&amp;rsquo;d checked in the first part of the new PIL run core. In case you were wondering, containers are the things that Perl variables have as values. They&amp;rsquo;re where things like &lt;code&gt;tie&lt;/code&gt; magic happens.&lt;/p&gt;

&lt;h4 id=&#34;hoisting-variable-declarations-http-groups-google-com-groups-threadm-20050731180628-gc15882-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050731180628.GC15882@aut.dyndns.org&#34;&gt;Hoisting Variable Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Hands up! How does the scoping of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $x = $x + my $x if $x;
   #1   #2      #3    #4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;work in Perl 6?&lt;/p&gt;

&lt;p&gt;In Perl 5, all those &lt;code&gt;$x&lt;/code&gt;s refer to the same thing. In Perl 6, #1 and #2 refer to &lt;code&gt;$OUTER::x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This behavior (lexical scopes really are lexical) makes a compiler writer&amp;rsquo;s head hurt. Autrijus outlined a plan for making it work.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;dominance-frontier-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d69e4b22417d1c7-4ed1469ec095319d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d69e4b22417d1c7/4ed1469ec095319d&#34;&gt;Dominance Frontier&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls had posted a patch adding &amp;ldquo;dominance frontiers&amp;rdquo; to IMCC. (I&amp;rsquo;m afraid I don&amp;rsquo;t know what a dominance frontier is, but it sounds like it might be fun.) This week, he wondered if someone could apply it any time soon, because he had another patch that depended on it.&lt;/p&gt;

&lt;p&gt;It turned out that the patch broke a test or two, and Will Coleda, Andy Dougherty, Patrick, and Leo set about helping to track it down. It looks like they have found the issues, and work continues to fix them.&lt;/p&gt;

&lt;h4 id=&#34;make-languages-should-continue-after-building-a-language-failed-http-groups-google-com-groups-threadm-rt-3-0-11-36647-118350-14-1074362091832-perl-org&#34;&gt;&lt;code&gt;make languages&lt;/code&gt; Should Continue After Building a Language &lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36647-118350.14.1074362091832@perl.org&#34;&gt;Failed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever looked through the Parrot Makefiles and wondered what the deal is with &lt;code&gt;.dummy&lt;/code&gt;? If so, this thread explains everything.&lt;/p&gt;

&lt;h4 id=&#34;pmc-syntax-http-groups-google-com-groups-threadm-42e7e7ec-1040907-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E7E7EC.1040907@home.nl&#34;&gt;PMC Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked if there&amp;rsquo;s any documentation on the complete syntax for &lt;em&gt;.pmc&lt;/em&gt; files when writing PMCs. Apparently there isn&amp;rsquo;t, apart from the source of &lt;em&gt;pmc2c.pl&lt;/em&gt;, but Will Coleda and Leo helped Klaas-Jan out.&lt;/p&gt;

&lt;h4 id=&#34;embedding-partcl-http-groups-google-com-groups-threadm-42e838dc-9080804-web-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E838DC.9080804@web.de&#34;&gt;Embedding ParTcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thilo Planz had some problems embedding ParTcl into a PIR application. It mostly worked, but he had a few questions. Will Coleda helped out again.&lt;/p&gt;

&lt;h4 id=&#34;compiling-dynamic-pmcs-http-groups-google-com-groups-threadm-42e8a3a2-5010100-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E8A3A2.5010100@home.nl&#34;&gt;Compiling Dynamic PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan had more questions about compiling PMCs&amp;ndash;dynamic ones, this time. It appears that the docs he was following didn&amp;rsquo;t quite reflect reality. Leo solved the problem and Klaas-Jan sent in a doc patch. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;parrot-cannot-start-up-if-stderr-or-stdout-is-closed-http-groups-google-com-groups-threadm-rt-3-0-11-36677-118403-17-3306028943918-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36677-118403.17.3306028943918@perl.org&#34;&gt;Parrot Cannot Start up if &lt;code&gt;STDERR&lt;/code&gt; or &lt;code&gt;STDOUT&lt;/code&gt; is Closed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael Schwern pointed out that Parrot won&amp;rsquo;t start if you close either &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt;, eschewing the standard joke response (&amp;ldquo;Doctor, it hurts when I do this.&amp;rdquo; &amp;ldquo;Well don&amp;rsquo;t do that, then.&amp;rdquo;) Jerry Gay wrote a test and Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;accessing-hash-with-strings-keys-http-groups-google-com-groups-threadm-42e9eaf7-1050509-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42E9EAF7.1050509@home.nl&#34;&gt;Accessing Hash with Strings/Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apparently, Klaas-Jan is working on writing a Lua compiler to target Parrot. He&amp;rsquo;s obviously working on it a good deal at the moment. :)&lt;/p&gt;

&lt;p&gt;He wanted to know how he could extend the standard Hash PMC to return &lt;code&gt;None&lt;/code&gt; if there is no key found. As is traditional in these cases, Leo helped him out. It turns out that part of the problem is that &lt;em&gt;pmc2c.pl&lt;/em&gt; isn&amp;rsquo;t that strict in its syntax checking. If anyone reading this has the tuits &amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;does-it-cost-anything-to-use-a-big-pmc-everywhere-http-groups-google-com-groups-threadm-20050729165847-70341-qmail-web51110-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050729165847.70341.qmail@web51110.mail.yahoo.com&#34;&gt;Does It Cost Anything to Use a Big PMC Everywhere?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a move guaranteed to gladden at least Dan Sugalski&amp;rsquo;s heart, Amir Karger popped up to say that he&amp;rsquo;s working getting the Z-machine interpreter working. He wondered if there was any way of dedicating a register to a particular constant in order to avoid copying a global every time he called a sub. Leo helped out.&lt;/p&gt;

&lt;h4 id=&#34;super-http-groups-google-com-groups-threadm-42ecde37-2010308-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ECDE37.2010308@toetsch.at&#34;&gt;Super!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;d added a new &lt;code&gt;Super&lt;/code&gt; PMC which will make it easier to call superclass methods.&lt;/p&gt;

&lt;h4 id=&#34;lua-project-http-groups-google-com-groups-threadm-42ef7e8f-9010304-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42EF7E8F.9010304@home.nl&#34;&gt;Lua Project&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan unveiled his project to get the &lt;a href=&#34;http://members.home.nl/joeijoei/parrot&#34;&gt;Lua compiler targeting Parrot&lt;/a&gt;. It&amp;rsquo;s apparently &amp;ldquo;far from complete,&amp;rdquo; but hey, it&amp;rsquo;s good to welcome yet another language to the Parrot cage.&lt;/p&gt;

&lt;h4 id=&#34;announcing-mod-parrot-0-3-http-groups-google-com-groups-threadm-pine-lnx-4-44-0508021908110-3368-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0508021908110.3368-100000@booger.sixgeeks.org&#34;&gt;Announcing &lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced the release of &lt;a href=&#34;http://www.smashing.org/mod_parrot&#34;&gt;&lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;, complete with support for all Apache hooks, autogeneration of &lt;code&gt;request_rec&lt;/code&gt; methods, and a &lt;code&gt;mod_pugs&lt;/code&gt; proof of concept. Crumbs. And there&amp;rsquo;s more. Check out the announcement, download the code, and start making Apache do weird things. Go on, you know you want to.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-use-and-abuse-of-liskov-http-www-mail-archive-com-perl6-language-40perl-org-msg20981-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20981.html&#34;&gt;The Use and Abuse of Liskov&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Damian and Luke&amp;rsquo;s discussion of the right way to do MMD looks to be finally winding down. It seems Luke&amp;rsquo;s convinced Damian of the righteousness of his cause. (Or at least, if he&amp;rsquo;s wrong, he&amp;rsquo;s wrong in a subtler way than Damian realized.) I don&amp;rsquo;t think there&amp;rsquo;s been a final decision as yet, but we&amp;rsquo;re definitely moving forward.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-parameters-and-auto-flattening-http-www-mail-archive-com-perl6-language-40perl-org-msg21085-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21085.html&#34;&gt;Slurpy Parameters and Auto-Flattening&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt asked for some clarification of the behavior of slurpy parameters. It&amp;rsquo;s not often I hope that Luke is wrong, but I really hope the answer he gave Ingo isn&amp;rsquo;t the true state of things.&lt;/p&gt;

&lt;h4 id=&#34;exposing-the-garbage-collector-http-www-mail-archive-com-perl6-language-40perl-org-msg21067-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21067.html&#34;&gt;Exposing the Garbage Collector&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bah! I propose a simple, slow, yet powerful feature that is useful to implement a whole bunch of other possible APIs for getting at stuff, and people go and suggest making any one of various heavier APIs the One True API. It&amp;rsquo;s enough to make a person despair.&lt;/p&gt;

&lt;p&gt;Ah, apologies, I&amp;rsquo;m letting personal concerns get in the way of the summary, but what the hell, I&amp;rsquo;m leaving it.&lt;/p&gt;

&lt;h4 id=&#34;messing-with-the-type-hierarchy-http-www-mail-archive-com-perl6-language-40perl-org-msg21092-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21092.html&#34;&gt;Messing with the Type Hierarchy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke had a few things to say about what happens when you monkey with the type hierarchy, so he said them. The usual suspects joined in, most of them addressing the particular instance that Luke had chosen to illustrate his point, rather than discussing the broader point, but hey, this is &lt;em&gt;perl6-language&lt;/em&gt;. That&amp;rsquo;s what happens.&lt;/p&gt;

&lt;p&gt;Luke&amp;rsquo;s broader question was, &amp;ldquo;Should it be possible to write a class that isn&amp;rsquo;t a leaf in the existing hierarchy?&amp;rdquo; The example that everyone addressed was the idea of writing a &lt;code&gt;Complex&lt;/code&gt; class that wedged in between &lt;code&gt;Real&lt;/code&gt; and &lt;code&gt;Num&lt;/code&gt; in the hierarchy (which, as several people pointed out, isn&amp;rsquo;t necessarily the right way to think about it anyway, hence the discussion).&lt;/p&gt;

&lt;p&gt;My gut feeling was that the answer to the general question should be &amp;ldquo;Yes, but be very, very careful, and don&amp;rsquo;t be surprise if it bites you later.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;elimination-of-item-pair-and-any-junction-http-www-mail-archive-com-perl6-language-40perl-org-msg21094-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21094.html&#34;&gt;Elimination of &lt;code&gt;Item|Pair&lt;/code&gt; and &lt;code&gt;Any|Junction&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The discussion of appropriate default prototypes and the like continued. Autrijus proposed a way of rejigging the type hierarchy to make default argument types a little clearer. I found things getting a little weird, to be honest&amp;ndash;there&amp;rsquo;s even talk of eliminating &lt;code&gt;Object&lt;/code&gt; as a type name, which seems a little strange.&lt;/p&gt;

&lt;h4 id=&#34;execution-platform-object-gestalt-http-www-mail-archive-com-perl6-language-40perl-org-msg21098-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21098.html&#34;&gt;Execution Platform Object? Gestalt?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Randal proposed that, as the number of possible platforms that Perl 6 can run on proliferates, it&amp;rsquo;d be really handy if there were some useful global that held knowledge about the platform and its capabilities. He proposed &lt;code&gt;$*OS&lt;/code&gt; as a decent place to put it. Larry thought we probably would have something like that, but thought that there might end up being two globals: &lt;code&gt;$*OS&lt;/code&gt; and &lt;code&gt;$*VM&lt;/code&gt;. The usual &amp;ldquo;Why don&amp;rsquo;t we call it&amp;rdquo; thread sprang up, but it seems that the most important upshot is that this particular bike shed will definitely be painted.&lt;/p&gt;

&lt;h4 id=&#34;the-meaning-of-returns-http-www-mail-archive-com-perl6-language-40perl-org-msg21114-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21114.html&#34;&gt;The Meaning of &lt;code&gt;returns&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The continuing invasion by the rampaging hordes from &lt;em&gt;p6c&lt;/em&gt; continued apace. This time, Autrijus had a discussion on the implications of &lt;code&gt;returns&lt;/code&gt; and its implications for type inferencing.&lt;/p&gt;

&lt;h4 id=&#34;lazy-list-syntax-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;Lazy List Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Flavio S. Glock wondered how to go about creating a lazy list from an object. Apparently the magic he was missing was &lt;code&gt;prefix:=&lt;/code&gt;, which is syntactic sugar for calling the &lt;code&gt;.next&lt;/code&gt; method on anything that supports iteration, which is nice.&lt;/p&gt;

&lt;h4 id=&#34;an-idea-for-doing-pack-http-www-mail-archive-com-perl6-language-40perl-org-msg21121-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21121.html&#34;&gt;An Idea for Doing &lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa had an idea about a possible &lt;code&gt;pack&lt;/code&gt; API; he outlined it on the list. Yuval Kogman seemed to like it, but there&amp;rsquo;s been nothing from anyone else on the list.&lt;/p&gt;

&lt;h4 id=&#34;inferring-foo-of-int-does-foo-of-any-http-www-mail-archive-com-perl6-language-40perl-org-msg21124-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21124.html&#34;&gt;Inferring &lt;code&gt;(Foo of Int).does(Foo of Any)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus again, this time thinking about the kind of type inferences that Perl aggregate types allow. Once I had my head in the right space, it made a great deal of sense, even if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array of Item).does(Array of Int); # false
Array of Int).does(Array of Item); # also false!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;made my head hurt the first time I read it.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collector-api-http-www-mail-archive-com-perl6-language-40perl-org-msg21081-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21081.html&#34;&gt;Garbage Collector API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Various people proposed additions to the proposed Garbage Collector API.&lt;/p&gt;

&lt;h4 id=&#34;value-confess-http-www-mail-archive-com-perl6-language-40perl-org-msg21140-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21140.html&#34;&gt;&lt;code&gt;$value.confess()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent Royal-Gordon had a cunning idea for debugging: having Perl 6 capture the call stack at its point of creation and stashing that in a property called &lt;code&gt;confess&lt;/code&gt;, which he could examine in a debugging context to find out where a value came from. As he pointed out, this would be expensive, but useful. He&amp;rsquo;s currently Warnocked, but I get the feeling it should be possible to write an extension to do what he wants without adding anything extra to Perl 6 itself. It might be a little tricky if he wants the call stack to change on mutation, though.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-is-rw-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21148-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21148.html&#34;&gt;Slurpy &lt;code&gt;is rw&lt;/code&gt; Arrays&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Having received clarification of the behavior of normal slurpy arrays, Ingo Blechschmidt asked for clarification of the behavior of Slurp &lt;code&gt;is rw&lt;/code&gt; arrays. Adriano Ferreira and Thomas Sandlaß seemed to talk sense in reply.&lt;/p&gt;

&lt;h4 id=&#34;curious-use-of-assuming-in-s06-http-www-mail-archive-com-perl6-language-40perl-org-msg21154-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21154.html&#34;&gt;Curious Use of &lt;code&gt;.assuming&lt;/code&gt; in S06&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;textfrom := &amp;amp;substr.assuming(:str($text) :len(Inf))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;found in Synopsis 6 was a mistake, or if the syntax should be like that. It turns out that the syntax is supposed to be like that. Apparently being able to do without the commas was one of the reasons for making colon pair syntax look like that.&lt;/p&gt;

&lt;h4 id=&#34;laziness-and-io-http-www-mail-archive-com-perl6-language-40perl-org-msg21158-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21158.html&#34;&gt;Laziness and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a currently Warnocked post, David Formosa outlined a potential problem with lazy IO.&lt;/p&gt;

&lt;h4 id=&#34;sub-foo-x-returns-ref-x-http-www-mail-archive-com-perl6-language-40perl-org-msg21159-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21159.html&#34;&gt;&lt;code&gt;sub foo ($x) returns ref($x)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In his continuing discussion of the Perl 6 type system and the inferences that you can draw about it, Autrijus posted a discussion of how to declare that a function that returns a value with the same type as its argument. He suggested that the best way forward would be to declare something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub identity ($x) returns ref($x) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and asked for better suggestions. Thomas Sandlaß had suggestions.&lt;/p&gt;

&lt;h4 id=&#34;say-s-return-value-http-www-mail-archive-com-perl6-language-40perl-org-msg21160-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21160.html&#34;&gt;&lt;code&gt;&amp;amp;say&lt;/code&gt;&amp;rsquo;s Return Value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas thought that &lt;code&gt;&amp;amp;print&lt;/code&gt; and &lt;code&gt;&amp;amp;say&lt;/code&gt; should &lt;code&gt;fail&lt;/code&gt; on errors and return the printed string on success (but true). Larry thought not. It looks like they&amp;rsquo;ll end up returning a Boolean or throwing an exception.&lt;/p&gt;

&lt;h4 id=&#34;arrayref-ref-http-www-mail-archive-com-perl6-language-40perl-org-msg21161-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21161.html&#34;&gt;&lt;code&gt;$arrayref.ref&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo continues his ongoing task of getting clarification of the semantics of a whole host of things. This time he wanted to know about the behavior of references. Larry clarified.&lt;/p&gt;

&lt;h4 id=&#34;binding-scalars-to-aggregates-http-www-mail-archive-com-perl6-language-40perl-org-msg21162-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21162.html&#34;&gt;Binding Scalars to Aggregates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Next up in Ingo&amp;rsquo;s clarification project was binding scalars to aggregates. (Or did he mean binding aggregates to scalars?) Again, Larry came through with answers. It turns out that there&amp;rsquo;s more to this than meets the eye at first glance. Autrijus&amp;rsquo;s post on containers over in &lt;em&gt;perl6-compiler&lt;/em&gt; addresses some of these issues, as well.&lt;/p&gt;

&lt;h4 id=&#34;binding-hashes-to-arrays-http-www-mail-archive-com-perl6-language-40perl-org-msg21163-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21163.html&#34;&gt;Binding Hashes to Arrays?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo asks, &amp;ldquo;Is it legal to bind a hash to an array, or vice versa?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Larry answers, &amp;ldquo;Not at the moment.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;module-init-hooks-and-pragmas-http-www-mail-archive-com-perl6-language-40perl-org-msg21175-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21175.html&#34;&gt;Module Init Hooks and Pragmas&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered what function in a module to call when you &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;eliminating-and-http-www-mail-archive-com-perl6-language-40perl-org-msg21178-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21178.html&#34;&gt;Eliminating &lt;code&gt;&amp;amp;{}&lt;/code&gt; and &lt;code&gt;*{}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if we really need the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;stringification-of-pairs-http-www-mail-archive-com-perl6-language-40perl-org-msg21179-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21179.html&#34;&gt;Stringification of Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;For some reason, Ingo&amp;rsquo;s shortest question (&amp;ldquo;How do pairs stringify?&amp;rdquo;) attracted the largest response. Well, at first blush it looks like it did. What actually happened was that Warnock claimed it, but the &lt;code&gt;References:&lt;/code&gt; header in Andrew Shitov&amp;rsquo;s posed discussed below was a little broken.&lt;/p&gt;

&lt;h4 id=&#34;zip-with-http-www-mail-archive-com-perl6-language-40perl-org-msg21182-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21182.html&#34;&gt;&lt;code&gt;zip&lt;/code&gt; with ()&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some strange behavior of &lt;code&gt;zip&lt;/code&gt; caught out Andrew Shitov. Ingo explained the problem. There was quite a bit of discussion of the various subtleties exposed.&lt;/p&gt;

&lt;p&gt;Sometimes I pity the poor swine who&amp;rsquo;s going to have to write &lt;em&gt;Programming Perl 6&lt;/em&gt;. It&amp;rsquo;s going to make the current camel look like a slim volume, if we&amp;rsquo;re not careful.&lt;/p&gt;

&lt;h4 id=&#34;mutating-map-and-grep-http-www-mail-archive-com-perl6-language-40perl-org-msg21185-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21185.html&#34;&gt;Mutating &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if it was true that Perl 6&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc., wouldn&amp;rsquo;t allow mutating values in their source array. He wondered if it would be possible to use a pragma to get the old, Perl-5-ish, behavior back. Thomas Sandlaß wondered if simply explicitly declaring the given block&amp;rsquo;s argument as &lt;code&gt;rw&lt;/code&gt; wouldn&amp;rsquo;t do the job. There is no word from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;acknowledgements-adverts-apologies-alliteration-and-conference-envy&#34;&gt;Acknowledgements, Adverts, Apologies, Alliteration, and Conference Envy&lt;/h4&gt;

&lt;p&gt;Damn. Couldn&amp;rsquo;t think of a word beginning with &amp;ldquo;a&amp;rdquo; that means &amp;ldquo;conference.&amp;rdquo; [&lt;em&gt;Editor&amp;rsquo;s note: attendance?&lt;/em&gt;] To all you lucky people in Portland at OSCON, I wish I was there and am a seething mass of envy. Well, not that seething: I&amp;rsquo;m consoling myself by going to the WorldCon in Glasgow, instead.&lt;/p&gt;

&lt;h4 id=&#34;help-chip&#34;&gt;Help Chip&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;geeksunite.org&lt;/a&gt;: tell all your friends; this cannot stand.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;, now running on a new engine. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 13-19, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</link>
      <pubDate>Thu, 21 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050721.html/</guid>
      <description>

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by the words &amp;ldquo;displacement&amp;rdquo; and &amp;ldquo;activity.&amp;rdquo; So far today, I&amp;rsquo;ve caught up with everything unread in NetNewsWire, my Flickr groups, every other mailing list I&amp;rsquo;m subscribed to, and completed about five Sudoku. Now I&amp;rsquo;m dragging out this introduction and I don&amp;rsquo;t know why; I enjoy writing these things.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This was another quiet week on the list. However, you only have to watch the SVN commit log and the other stuff on &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;PlanetSix&lt;/a&gt; to know that things are still proceeding apace. Last time I looked, it seemed that Stevan Little was working on bootstrapping the Perl 5 implementation of the Perl 6 MetaModel to implement it in terms of itself.&lt;/p&gt;

&lt;p&gt;Rather mind-bogglingly, Pugs is now targeting JavaScript as well.&lt;/p&gt;

&lt;p&gt;The current Pugs release is 6.2.8.&lt;/p&gt;

&lt;h4 id=&#34;creating-threads-in-begin-http-groups-google-com-groups-threadm-20050714153213-gb73297-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050714153213.GB73297@plum.flirble.org&#34;&gt;Creating Threads in &lt;code&gt;BEGIN&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted what he described as a &amp;ldquo;note to collective self&amp;rdquo; wondering about how Perl 6 will cope with people creating threads inside of &lt;code&gt;BEGIN&lt;/code&gt; blocks. According to Luke, &amp;ldquo;it won&amp;rsquo;t.&amp;rdquo; Larry thought that it might be okay to create threads at &lt;code&gt;CHECK&lt;/code&gt; time, so long as any spawned threads didn&amp;rsquo;t do any real work later than &lt;code&gt;CHECK&lt;/code&gt; time.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-modules-http-groups-google-com-groups-threadm-002a01c58944-c9231c30-0200a8c0-madaboutipv6&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=002a01c58944$c9231c30$0200a8c0@madaboutipv6&#34;&gt;Perl 6 Modules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gav&amp;hellip; (I presume the ellipsis is important to someone) wondered what he needed to do to write Perl 6 modules. Nathan Gray pointed him at the &lt;a href=&#34;http://svn.openfoundry.org/pugs/docs/other/porting_howto&#34;&gt;porting how-to&lt;/a&gt; in the Pugs distribution.&lt;/p&gt;

&lt;h4 id=&#34;is-namespace-qualification-really-required-http-groups-google-com-groups-threadm-200507151916-j6fjgm18017026-webmail-sunflower-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200507151916.j6FJGm18017026@webmail.sunflower.com&#34;&gt;Is Namespace Qualification Really Required?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Phil Crow came across some weirdness with namespace resolution. It seems that you have to qualify function names explicitly in signatures. Autrijus agreed that it was a bug and asked for Phil to write a TODO test. Discussion ensued&amp;ndash;I think the fix is in SVN now.&lt;/p&gt;

&lt;h4 id=&#34;parsing-perl-6-grammars-http-groups-google-com-groups-threadm-20050719180105-ga30311-vs2-capwiz-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050719180105.GA30311@vs2.capwiz.com&#34;&gt;Parsing Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered about the state of Jeff &amp;ldquo;Japhy&amp;rdquo; Pinyan&amp;rsquo;s effort to implement a Perl 6 rules parser. Japhy said that it&amp;rsquo;s been on hold for a while, but that he&amp;rsquo;d started to work on it again, basing it on his earlier &lt;a href=&#34;https://metacpan.org/pod/Regexp::Parser&#34;&gt;Regexp::Parser&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;pmc-changes-http-groups-google-com-groups-threadm-20050713142025-gr73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713142025.GR73056@plum.flirble.org&#34;&gt;PMC Changes?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if the PMC layout is likely to remain stable, or if there might be changes in relation to the generational garbage collector. In particular, he wanted to know if the API would remain stable. Leo thought that there might be changes in the layout, but the API shouldn&amp;rsquo;t change.&lt;/p&gt;

&lt;h4 id=&#34;partcl-accelerator-http-groups-google-com-groups-threadm-643ed742-47aa-4d16-8a8a-bb956f020e90-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=643ED742-47AA-4D16-8A8A-BB956F020E90@coleda.com&#34;&gt;ParTcl Accelerator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda showed some timings for ParTcl, the Parrot implementation of Tcl, and made a few suggestions about how to get things going faster. Patrick and Leo mused on the issues involved.&lt;/p&gt;

&lt;h4 id=&#34;partitioning-pmcs-http-groups-google-com-groups-threadm-20050713140849-gp73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713140849.GP73056@plum.flirble.org&#34;&gt;Partitioning PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had some questions about making PMCs and Ponie play well together, with particular reference to using &lt;code&gt;SvFLAGS()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;embedding-extending-interface-http-groups-google-com-groups-threadm-20050713144138-gt73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144138.GT73056@plum.flirble.org&#34;&gt;Embedding/Extending Interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered if Chromatic was still waiting for confirmation that his automated embedding tools were the Right Thing. Apparently, Chromatic is waiting for confirmation, but offered to send his existing patch, if only to force the discussion.&lt;/p&gt;

&lt;h4 id=&#34;ponie-questions-http-groups-google-com-groups-threadm-20050713144716-gu73056-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050713144716.GU73056@plum.flirble.org&#34;&gt;Ponie Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had a bunch of questions about various subsystems, mostly in relation to Ponie. Leo came good with answers.&lt;/p&gt;

&lt;h4 id=&#34;parrot-project-management-http-groups-google-com-groups-threadm-cff4c4c41b42a1f39d7d4fe68f914841-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=cff4c4c41b42a1f39d7d4fe68f914841@perl.org&#34;&gt;Parrot Project Management&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure if Will Coleda&amp;rsquo;s suffering culture shock about the way Parrot project management happens, or if we&amp;rsquo;re really not doing it right. The first rule of Parrot/Perl 6 development is that if you really want something, then the only way to guarantee that it gets done is to do it yourself. It&amp;rsquo;s certainly worked for me over the years.&lt;/p&gt;

&lt;h4 id=&#34;tcl-gc-issues-solved-http-groups-google-com-groups-threadm-198c87380507140823527d4165-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c87380507140823527d4165@mail.gmail.com&#34;&gt;Tcl GC Issues&amp;ndash;Solved&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse announced that as of r8617 in SVN, the longstanding GC bug that ParTcl occasionally tickled has been fixed. There was no rejoicing on the list, but at least one summarizer was really pleased to hear it.&lt;/p&gt;

&lt;h4 id=&#34;gmc-for-dummies-http-groups-google-com-groups-threadm-42d853a9-8060902-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42D853A9.8060902@gmail.com&#34;&gt;GMC for Dummies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Summer of Code intern Alexandre Buisse, who is working on a new GC system for Parrot, pointed us all at &lt;a href=&#34;http://perso.ens-lyon.fr/alexandre.buisse/divers/gmc_for_dummies.pod&#34;&gt;an introduction to the Generational Mark and Compact scheme&lt;/a&gt; that he&amp;rsquo;s working to implement. He and Leo had a discussion about implications, assumptions, and other stuff.&lt;/p&gt;

&lt;p&gt;Bob Rogers asked some tricky questions relating to circular structures and timely destruction. Discussion of this continues.&lt;/p&gt;

&lt;h4 id=&#34;register-allocation-fun&#34;&gt;Register Allocation Fun&lt;/h4&gt;

&lt;p&gt;There was a flurry of patches from Curtis Rawls, who appears to be working on refactoring and (one hopes) fixing the IMCC register allocator. Way to go, Curtis.&lt;/p&gt;

&lt;h4 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h4&gt;

&lt;h4 id=&#34;mml-dispatch-http-www-mail-archive-com-perl6-language-40perl-org-msg20826-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20826.html&#34;&gt;MML Dispatch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The ongoing discussion of the right way to dispatch multimethods is still, um, going on. Damian and Luke appear to have a fundamental disagreement about what the Right Thing is. &amp;ldquo;Manhattan!&amp;rdquo; &amp;ldquo;Pure!&amp;rdquo; &amp;ldquo;Manhattan!&amp;rdquo;&amp;ndash;it&amp;rsquo;s not quite that bad, but they seem to have entrenched positions. Elsewhere in the thread, Larry mused on which was more general, classes or roles. Thomas Sandlaß wondered how they stood in relation to types.&lt;/p&gt;

&lt;p&gt;Your summarizer wondered how he was ever going to explain all this and punted.&lt;/p&gt;

&lt;h4 id=&#34;method-calls-on-self-http-www-mail-archive-com-perl6-language-40perl-org-msg20769-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20769.html&#34;&gt;Method Calls on &lt;code&gt;$self&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;My eyes, they burn! At this rate, I&amp;rsquo;m simply going to use &lt;code&gt;$?SELF&lt;/code&gt; in all my Perl 6 classes. Larry&amp;rsquo;s latest suggestion seems to please even fewer people than &lt;code&gt;./method&lt;/code&gt;, which is really saying something. As someone who&amp;rsquo;s not a fan of &lt;code&gt;./&lt;/code&gt;, I found myself slightly surprised to agree with Autrijus, who reckons you get used to it really quickly.&lt;/p&gt;

&lt;h4 id=&#34;the-perl-6-library-system-http-www-mail-archive-com-perl6-language-40perl-org-msg20944-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20944.html&#34;&gt;The Perl 6 Library System&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In response to a question from Autrijus about coderefs in &lt;code&gt;@INC&lt;/code&gt;, or whatever Perl 6 is going to call it, Larry mused on the possible eventual design of Perl 6&amp;rsquo;s library system. It seemed to me that he was dropping a rather heavy hint to any interested readers who might like to come up with a first cut of Perl 6&amp;rsquo;s library system.&lt;/p&gt;

&lt;p&gt;Later, he did some thinking aloud about treating strings as arrays, or vice versa.&lt;/p&gt;

&lt;h4 id=&#34;method-resolution-order-http-www-mail-archive-com-perl6-language-40perl-org-msg20913-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20913.html&#34;&gt;Method Resolution Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan &amp;ldquo;MetaModel&amp;rdquo; Little cheered Larry&amp;rsquo;s statement that methods, subs, submethods, and &amp;ldquo;anything in between&amp;rdquo; all live in the same namespace. If you want to give two code-like things the same name, then you must explicitly declare them as multi.&lt;/p&gt;

&lt;p&gt;Stevan went on to ask a bunch of questions about the semantics of method resolution, so as to get the Perl 6 MetaModel working right. Discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;type-class-haskell-does-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20958-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20958.html&#34;&gt;&lt;code&gt;Type::Class::Haskell&lt;/code&gt; Does Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I haven&amp;rsquo;t the faintest idea what Yuval Kogman is talking about. Dammit, I need to learn Haskell now. Luckily, Autrijus, Luke, David Formosa, and Damian did seem to understand it. There was ASCII art and everything. Sadly, there&amp;rsquo;s no Unicode art, but it&amp;rsquo;s only a matter of time.&lt;/p&gt;

&lt;h4 id=&#34;optimization-pipeline-http-www-mail-archive-com-perl6-language-40perl-org-msg20959-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20959.html&#34;&gt;Optimization Pipeline&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted an outline of the optimization pipeline idea that he&amp;rsquo;d brought up in a Hackathon. If confess that it looks rather like something discussed a few months (years?) ago that Chip shot down rather convincingly. (I remember this because I took pretty much the same position as Yuval, and I really didn&amp;rsquo;t want to be convinced.)&lt;/p&gt;

&lt;h4 id=&#34;stm-semantics-the-transactional-role-http-www-mail-archive-com-perl6-language-40perl-org-msg20971-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20971.html&#34;&gt;STM Semantics, the Transactional Role&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman discussed some issues with Software Transactional Memory (STM). A short discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;more-method-resolution-order-questions-http-www-mail-archive-com-perl6-language-40perl-org-msg20976-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20976.html&#34;&gt;More Method Resolution Order Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Returning from reading up on method resolution orders and class precedence lists, Stevan Little had a pile of questions and suggestions about Perl 6&amp;rsquo;s method resolution semantics. He pushed for using &amp;ldquo;C3&amp;rdquo; as Perl&amp;rsquo;s algorithm of choice and is implementing it in Perl6::MetaModel until and unless @Larry decides differently. He&amp;rsquo;s off to a flying start in that the One True Larry thinks it&amp;rsquo;s a good idea.&lt;/p&gt;

&lt;h4 id=&#34;accessor-only-virtual-attributes-http-www-mail-archive-com-perl6-language-40perl-org-msg20983-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20983.html&#34;&gt;Accessor-Only Virtual Attributes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered what would happen if he made an &amp;ldquo;accessor&amp;rdquo; for an attribute that didn&amp;rsquo;t really exist. He wanted to be able to disguise accessor methods as attributes within class and subclass scope (at least, I think that&amp;rsquo;s what he wants). Larry seemed to think he was barking up the wrong tree&amp;ndash;class attributes are only likely to be accessible using the &lt;code&gt;$.whatever&lt;/code&gt; form within their declaring class and not any subclasses. Larry&amp;rsquo;s &amp;ldquo;got some driving to do&amp;rdquo; so expect some more thoughts about this in the next summary.&lt;/p&gt;

&lt;h4 id=&#34;strange-interaction-between-pairs-and-named-binding-http-www-mail-archive-com-perl6-language-40perl-org-msg20985-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20985.html&#34;&gt;Strange Interaction Between Pairs and Named Binding&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that, although&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt; Pair $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;works,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for [1..10].pairs -&amp;gt;      $x { say $x.value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;doesn&amp;rsquo;t, which is somewhat counter-intuitive. The problem is, the second cas treats the pair as a named argument specifier. After discussion, Autrijus suggested that the best thing might be to specify that the &lt;code&gt;Bare&lt;/code&gt; code object (which includes pointy and non-pointy blocks) have &lt;code&gt;Any&lt;/code&gt; as a default parameter type&amp;ndash;essentially turning off the special behavior of pairs when calling named blocks. I&amp;rsquo;m all for this myself, but Larry has yet to speak.&lt;/p&gt;

&lt;h4 id=&#34;how-do-subroutines-check-types-http-www-mail-archive-com-perl6-language-40perl-org-msg20997-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg20997.html&#34;&gt;How Do Subroutines Check Types?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some questions about specifying types in subroutine definitions. Specifically, he wanted to be able to specify that a sub only take instances of a class &lt;code&gt;Foo&lt;/code&gt; and its subclasses but not the class &lt;code&gt;Foo&lt;/code&gt; (or its subclasses) itself. Thomas Sandlaß thought that what Ingo wanted is the default behavior and you actually have to do some work to get it to behave any other way.&lt;/p&gt;

&lt;h4 id=&#34;referring-to-package-variables-in-the-default-namespace-http-www-mail-archive-com-perl6-language-40perl-org-msg21001-html&#34;&gt;&lt;a href=&#34;http://www.mail-archive.com/perl6-language%40perl.org/msg21001.html&#34;&gt;Referring to Package Variables in the Default Namespace&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matthew Hodgson asked for some clarification of how the default package namespace works. Apparently, Pugs and Synopsis 10 are slightly at odds. Larry had some answers. Matthew probably has some more questions.&lt;/p&gt;

&lt;h3 id=&#34;crikey-that-went-quickly&#34;&gt;Crikey! That Went Quickly&lt;/h3&gt;

&lt;p&gt;Or, for the traditionalists among you:&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies and Alliteration&lt;/h3&gt;

&lt;h4 id=&#34;hunting-the-perfect-archive&#34;&gt;Hunting the Perfect Archive&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m still on the lookout for a replacement for Google groups for my message links. I need an archive that&amp;rsquo;s up to date with the lists, and has URLs that are easy to derive from &lt;code&gt;Message-ID&lt;/code&gt;s. Bonus points for good thread handling.&lt;/p&gt;

&lt;h4 id=&#34;help-chip-http-geeksunite-org&#34;&gt;&lt;a href=&#34;http://geeksunite.org/&#34;&gt;Help Chip&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tell all your friends, this cannot stand.&lt;/p&gt;

&lt;h4 id=&#34;the-usual-coda&#34;&gt;The Usual Coda&lt;/h4&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 29-July 5, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</link>
      <pubDate>Thu, 07 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050707.html/</guid>
      <description>

&lt;p&gt;My, doesn&amp;rsquo;t time fly? Another fortnight gone and another summary to write. It&amp;rsquo;s a hard life, I tell you!&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;where-s-everyone-gone&#34;&gt;Where&amp;rsquo;s Everyone Gone?&lt;/h4&gt;

&lt;p&gt;It seems that most of the Perl 6 compiler development discussions occur at Hackathons and on IRC, with summaries appearing in developers&amp;rsquo; weblogs. What&amp;rsquo;s a summarizer to do? For now, I&amp;rsquo;ll point you at &lt;a href=&#34;http://planetsix.perl-foundation.org/&#34;&gt;Planet Perl 6&lt;/a&gt;, which aggregates a bunch of relevant blogs.&lt;/p&gt;

&lt;h4 id=&#34;pge-now-supports-grammars-built-in-rules-http-groups-google-com-groups-threadm-b7a12d0375515a6b4381efe3d71ef61e-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=b7a12d0375515a6b4381efe3d71ef61e@perl.org&#34;&gt;PGE Now Supports Grammars, Built-In Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal raved about the &amp;ldquo;totally awesome&amp;rdquo; PGE grammar support. I doubt she&amp;rsquo;s alone in her enthusiasm.&lt;/p&gt;

&lt;h4 id=&#34;multiple-implementations-are-good-m-kay-http-groups-google-com-groups-threadm-20050702165140-gh5089-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702165140.GH5089@pmichaud.com&#34;&gt;Multiple Implementations Are Good, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick discussed the idea of a &amp;ldquo;final&amp;rdquo; Perl 6 compiler, pointing out that it isn&amp;rsquo;t clear that there needs to be a &amp;ldquo;final&amp;rdquo; compiler. As long as multiple implementations are compatible.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;new-calling-conventions-http-groups-google-com-groups-threadm-42c16b5a-7040101-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C16B5A.7040101@home.nl&#34;&gt;New Calling Conventions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked a bunch of questions about the new calling conventions and Leo answered them.&lt;/p&gt;

&lt;h4 id=&#34;parrot-segfaults-http-groups-google-com-groups-threadm-200506291354-19610-parrot-jensbeimsurfen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200506291354.19610.parrot@jensbeimsurfen.de&#34;&gt;Parrot Segfaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;What&amp;rsquo;s a tester to do? You find a bug that makes Parrot dump core, so you write a test to document the bug and make sure it gets fixed. But the test leaves core files lying about. It goes without saying that Parrot should never dump core without the active assistance of an NCI call or some other unsafe call blowing up in its face.&lt;/p&gt;

&lt;p&gt;This makes it a little embarrassing that PIR code generated by Pugs can cause a Parrot segfault, though the cause appears be mixed up calling convention style in the generated call.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1120142239.14968.20.camel@wombat%0A.dlib.indiana.edu&#34;&gt;Brian Wheeler&amp;rsquo;s segfaulting Pugs script&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;python-pmcs-http-groups-google-com-groups-threadm-42c395fe-7010701-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C395FE.7010701@toetsch.at&#34;&gt;Python PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that the various &lt;em&gt;dynclasses/py*.pmc&lt;/em&gt; Parrot support PMCs don&amp;rsquo;t yet support all the semantics that Python needs. He outlined some outstanding issues and announced that, as calling conventions and context handling were changing, he&amp;rsquo;d be turning off compiling &lt;em&gt;py*.pmc&lt;/em&gt; for the time being.&lt;/p&gt;

&lt;h4 id=&#34;pge-bug-http-groups-google-com-groups-threadm-42c40534-1000102-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C40534.1000102@toetsch.at&#34;&gt;PGE Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It appears that the upcoming changes in Parrot&amp;rsquo;s context handling tweak a bug in PGE. The discussion moved onto a discussion of PGE&amp;rsquo;s implementation strategy; Nicholas Clark was keen to make sure it didn&amp;rsquo;t repeat some of the Perl 5&amp;rsquo;s regex engine&amp;rsquo;s infelicities. While this discussion continued, Leo spent half a day with &lt;code&gt;gdb&lt;/code&gt; and tracked down the problem, which turned out to be that a register wasn&amp;rsquo;t getting initialized in the right place.&lt;/p&gt;

&lt;h4 id=&#34;left-recursive-grammars-are-bad-m-kay-http-groups-google-com-groups-threadm-rt-3-0-11-36437-116436-17-8864180085717-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36437-116436.17.8864180085717@perl.org&#34;&gt;Left-Recursive Grammars Are Bad, M&amp;rsquo;kay?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While experimenting with PGE grammars, Will Coleda managed to write a left-recursive grammar that blew Parrot&amp;rsquo;s call stack with impressive ease. Luke apologized for things blowing up so spectacularly, but pointed out that PGE didn&amp;rsquo;t support left-recursive grammars and showed a rewritten grammar that didn&amp;rsquo;t have the same problem (but which doesn&amp;rsquo;t appear to match the same expressions).&lt;/p&gt;

&lt;h4 id=&#34;coroutines-http-groups-google-com-groups-threadm-ebb4ed649916ee6a195be937c1921d48-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ebb4ed649916ee6a195be937c1921d48@toetsch.at&#34;&gt;Coroutines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed to &lt;a href=&#34;ftp://ftp.inf.puc-rio.br/pub/docs/techreports/04_15_moura.pdf&#34;&gt;a summary of coroutines&lt;/a&gt; (PDF), and noted that we still hadn&amp;rsquo;t defined the syntax of Parrot coroutines, especially with respect to argument passing. He discussed it with Matt Fowles and solicited a set of tests that expressed the semantics they came up with.&lt;/p&gt;

&lt;h4 id=&#34;partcl-perl-6-grammars-http-groups-google-com-groups-threadm-d1e396f5-6ae6-43d3-b0a0-08cc710dba6c-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=D1E396F5-6AE6-43D3-B0A0-08CC710DBA6C@coleda.com&#34;&gt;ParTcl, Perl 6 Grammars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda announced that, thanks to Matt Diephouse&amp;rsquo;s work, ParTcl (Tcl on Parrot) is now able to run part of Tcl&amp;rsquo;s cvs-latest test suite. The tests aren&amp;rsquo;t fully native yet, being currently driven through a Perl test harness and only passing ten percent of the tests, but hopefully the situation will improve and ParTcl will end up able to run the tests completely natively (while passing far more of them). Congratulations on the work so far, though.&lt;/p&gt;

&lt;h4 id=&#34;python-and-parrot-http-groups-google-com-groups-threadm-42c51ccb-7010008-tewk-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C51CCB.7010008@tewk.com&#34;&gt;Python and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew popped up to say that he too is working on a Python compiler targeting Parrot and wondered how to handle things like Python&amp;rsquo;s &lt;code&gt;self&lt;/code&gt; parameter. Michal Wallace and Leo chipped in with suggestions.&lt;/p&gt;

&lt;h4 id=&#34;another-month-another-release-http-groups-google-com-groups-threadm-42c7c447-8000302-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42C7C447.8000302@toetsch.at&#34;&gt;Another Month, Another Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Has it really been a month? Seems so. Parrot walked through the traditional feature freeze and code freeze before being released on Sunday. The latest release is &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;, referencing the website that discusses Chip&amp;rsquo;s problems with his former employer. You should definitely visit the Geeksunite site&amp;ndash;Chip needs our help.&lt;/p&gt;

&lt;h4 id=&#34;lower-in-default-find-name-scope-http-groups-google-com-groups-threadm-20050702012449-ga25256-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050702012449.GA25256@pmichaud.com&#34;&gt;&lt;code&gt;lower&lt;/code&gt; in Default &lt;code&gt;find_name&lt;/code&gt; Scope&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick posted a code fragment whose output surprised him&amp;ndash;it turned out that looking up &lt;code&gt;lower&lt;/code&gt; as a name in the default scope returns an NCI object. Leo explained why this was so, prompting Patrick to suggest that it would be useful if, somewhere in the Parrot documentation, there were some descriptions of Parrot&amp;rsquo;s built-in namespace. Leo encourage others to comment on namespace issues, and hoped for some decisions as well.&lt;/p&gt;

&lt;h4 id=&#34;copyrights-http-groups-google-com-groups-threadm-fecf197f-def8-4e4f-8fe9-ee0b2036516e-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=FECF197F-DEF8-4E4F-8FE9-EE0B2036516E@coleda.com&#34;&gt;Copyrights&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re like me, discussion of copyrights and licenses is the sort of thing that either really winds you up or induces serious drowsiness, depending on your mood as you read the thread. It&amp;rsquo;s one of those &amp;ldquo;too important not to think about, but too tedious to think about any more than is absolutely necessary&amp;rdquo; topics. That said, Will Coleda said that he had thought that all of Parrot&amp;rsquo;s code should to have its copyright assigned to the Perl Foundation. However, on inspection, he noticed a multiplicity of copyright notices in the actual code, including one file in the repository with a Microsoft copyright.&lt;/p&gt;

&lt;h4 id=&#34;pge-code-blocks-http-groups-google-com-groups-threadm-198c873805070414191b878a4d-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873805070414191b878a4d@mail.gmail.com&#34;&gt;PGE: Code Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wondered about the plan for integrating code blocks into PGE. He thought it&amp;rsquo;d be nice to be able to specify a compiler to use along with the code block (or, for the time being, just to be able to use PIR code). Patrick said that there is a plan (or several) for handling this, but getting blocks to work well needs coordination between PGE and the compiler language. In essence, when PGE encounters a code block, it needs to hand off to the target language&amp;rsquo;s compiler to parse to the end of the code block, and get back from the compiler the length of the block thus parsed.&lt;/p&gt;

&lt;h4 id=&#34;possible-bug-calculating-denominators-http-groups-google-com-groups-threadm-45ec99fc05070423504732f4fd-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc05070423504732f4fd@mail.gmail.com&#34;&gt;Possible Bug Calculating Denominators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls posted a fragment of code that seems to break Inc&amp;rsquo;s &lt;code&gt;computed_denominators&lt;/code&gt; algorithm. Leo wasn&amp;rsquo;t surprised that there were probably bugs in that part of IMCC, which was contributed by Angel Faus, who no longer seems to be participating in Parrot development. Which means it&amp;rsquo;s not been maintained for a while for lack of tuits. Anyone with an appropriate supply of tuits is welcome (nay, encouraged) to take it on.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;type-variables-vs-type-literals-http-www-nntp-perl-org-group-perl-perl6-language-22041&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22041&#34;&gt;Type Variables Vs. Type Literals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus had a question about the difference between&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (::T $x, ::T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub (T $x, T $y) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Larry answered about four times, mulling over various options. It&amp;rsquo;s times like that remind me why it&amp;rsquo;s worth following the list in detail rather than reading the summaries&amp;ndash;it&amp;rsquo;s good to see Larry thinking aloud, considering all sorts of (seemingly) wacky options and getting feedback.&lt;/p&gt;

&lt;h4 id=&#34;mr-clean-vs-perl-6-http-www-nntp-perl-org-group-perl-perl6-language-22042&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22042&#34;&gt;Mr. Clean Vs. Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman had some comments about fascism, strong (but I think he meant static) typing, cleaning products, Perl 6, and type inferencing. Stephane Payrard hoped that &amp;ldquo;Perl6 could become the playground of type theory searchers.&amp;rdquo; (To which I can only respond with a highly personal &amp;ldquo;Ick!&amp;rdquo;)&lt;/p&gt;

&lt;h4 id=&#34;documentation-trait-docstring-equivalent-http-www-nntp-perl-org-group-perl-perl6-language-22044&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22044&#34;&gt;Documentation Trait/Docstring Equivalent&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The Platypus (AKA David Formosa) wondered if documentation traits on subs would be useful. The first to hope that it would be was Chromatic, commenting that it&amp;rsquo;s a shame for Perl 6 to throw away potentially useful data recklessly. Larry commented that he always cringes when he hears &amp;ldquo;the documentation&amp;rdquo; as if it&amp;rsquo;s the only thing. Again, Larry&amp;rsquo;s thinking aloud on this subject is well worth your time.&lt;/p&gt;

&lt;h4 id=&#34;smd-is-for-weenies-http-www-nntp-perl-org-group-perl-perl6-language-22045&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22045&#34;&gt;SMD Is for Weenies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;So says Yuval Kogman, and who are we to doubt him? Yuval wanted to make multimethods the default type. Sam Vilain disagreed, pointing up the usefulness of warnings like &amp;ldquo;method foo redefined at &amp;hellip;.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;dbi-v2-the-plan-and-how-you-can-help-http-www-nntp-perl-org-group-perl-perl6-language-22054&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22054&#34;&gt;DBI v2: The Plan and How You Can Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce outlined his current thinking on how DBI v2 will work (DBI v2&amp;rsquo;s going to be Perl-6-only) and a local roadmap for the first things that need doing. He then opened the floor for detailed proposals for what a Perl 6 DBI API should look like. (I wonder if DBI v2&amp;rsquo;s going to be an important enough tool that it&amp;rsquo;ll want an RFC type process.)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m glossing over &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22058&#34;&gt;the ensuing discussion&lt;/a&gt;&amp;ndash;it&amp;rsquo;s at the stage where, if you&amp;rsquo;re interested, you&amp;rsquo;re better off joining in directly.&lt;/p&gt;

&lt;h4 id=&#34;should-assuming-always-be-non-mutating-http-www-nntp-perl-org-group-perl-perl6-language-22060&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22060&#34;&gt;Should &lt;code&gt;.assuming&lt;/code&gt; Always Be Non-Mutating?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt had some suggestions about the behavior of the currying method &lt;code&gt;.assuming&lt;/code&gt;, arguing that it should always return a new thing and not alter the state of the underlying object. Larry agreed.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-www-nntp-perl-org-group-perl-perl6-language-22061&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22061&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Coo. The pointy block thread returns. The question is, where to?&lt;/p&gt;

&lt;h4 id=&#34;time-local-http-www-nntp-perl-org-group-perl-perl6-language-22076&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22076&#34;&gt;Time::Local&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas announced that he&amp;rsquo;d added &lt;code&gt;localtime&lt;/code&gt; to Pugs in order to address Dave Rolsky&amp;rsquo;s needs when porting the very lovely and worthwhile DateTime family of modules. He noted that Perl 6&amp;rsquo;s final time-related interfaces were rather underspecified and had a bunch of questions. The one thing that&amp;rsquo;s absolutely certain is that the default Perl time API will use subsecond resolution by default.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that, every time you start to discuss how computers handle &amp;ldquo;human&amp;rdquo; things such as time, dates, or writing systems, people often seem to have very strong and deeply held ideas of the Right Way of doing things, and those Right Ways are almost all different. Larry&amp;rsquo;s job is probably going to be to work out the Least Wrong Way. (If you&amp;rsquo;ve not heard &lt;a href=&#34;http://perlcast.com/audio/Perlcast_015.mp3&#34;&gt;Dave Rolsky&amp;rsquo;s talks about the underlying reasons for writing DateTime&lt;/a&gt; (MP3) and the headaches it gave him, then I suggest you seek it out.)&lt;/p&gt;

&lt;h4 id=&#34;autogenerated-attribute-accessor-names-http-www-nntp-perl-org-group-perl-perl6-language-22097&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/22097&#34;&gt;Autogenerated Attribute Accessor Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;MetaModel maker Stevan Little wondered what to do when attribute names clashed, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo { has @.bar; has $.bar; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No answers yet.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements-adverts-apologies-and-alliteration&#34;&gt;Acknowledgements, Adverts, Apologies, and Alliteration&lt;/h3&gt;

&lt;p&gt;Summarizing a week is definitely way easier than summarizing a fortnight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m apologizing in advance for the fact that, for those of you who read this via the mailing list, some of the links probably don&amp;rsquo;t work yet. The thing is, the thread links are generated directly from the &lt;code&gt;message-id&lt;/code&gt;s because that&amp;rsquo;s the information I have access to and, so far as I know, Google Groups is the only archive that has a RESTful search interface that lets me use &lt;code&gt;message-id&lt;/code&gt;s as my key. If you know of an archive site that does this, but is more timely in its archiving of &lt;em&gt;perl6-language&lt;/em&gt; in particular, then please let me know and I&amp;rsquo;ll start using that instead. Ideally, it should allow me to directly address a message complete with its thread context.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, you really should pay a visit to &lt;a href=&#34;http://geeksunite.org/&#34;&gt;Geeksunite&lt;/a&gt;. For the life of me, I can&amp;rsquo;t see what I would have done differently in Chip&amp;rsquo;s situation, and I&amp;rsquo;m staggered by what&amp;rsquo;s happened to him.&lt;/p&gt;

&lt;p&gt;Right, back to our standard coda:&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 8-21, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</link>
      <pubDate>Thu, 23 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050623.html/</guid>
      <description>

&lt;p&gt;Surprise! It&amp;rsquo;s me again. You may be wondering what happened to last week&amp;rsquo;s summary (I know I was) and where Matt had gone. Well, I&amp;rsquo;m not entirely sure where exactly he is now, but last week was moving week for him.&lt;/p&gt;

&lt;p&gt;Those of you reading this on the mailing lists may also be wondering why this summary is so late. Um &amp;hellip; three words: &lt;em&gt;World of Warcraft&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As a summarizer, when you see the &amp;ldquo;last fortnight&amp;rdquo; view of a mailing list containing 21 messages, several thoughts spring, unbidden, to your mind: &amp;ldquo;Is my mail broken again?&amp;rdquo; &amp;ldquo;Has everyone given up?&amp;rdquo; &amp;ldquo;Phew, this group won&amp;rsquo;t take long to do.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It turns out that the answer to both of those questions is &amp;ldquo;No.&amp;rdquo; What actually happened was that most of the stuff that normally happens in mail happened at the Austrian Perl Workshop and Leo Tötsch&amp;rsquo;s house, with a side order of IRC conversation and a bunch of spinoff threads in &lt;em&gt;p6l&lt;/em&gt; and &lt;em&gt;p6i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the last fortnight, &lt;a href=&#34;http://use.perl.org/~autrijus/journal/&#34;&gt;Pugs reached the point where it has a (mostly) working Parrot back end, and&lt;/a&gt; BÁRTHAZI Andras wondered if we shouldn&amp;rsquo;t &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622861&#34;&gt;start a &lt;em&gt;perl6-general&lt;/em&gt; mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;140 messages in this one. &lt;em&gt;p6c&lt;/em&gt; lulled me into a false sense of security. Again, you may notice a bewilderingly fast rate of change this summary. It turns out that they weren&amp;rsquo;t just working on Pugs at Leo&amp;rsquo;s house. Perl 6 Hackathons give great productivity.&lt;/p&gt;

&lt;h4 id=&#34;this-is-not-your-father-s-parrot&#34;&gt;This Is Not Your Father&amp;rsquo;s Parrot&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s been some serious work going on under the Parrot hood in the last two weeks. Leo and Chip have drastically reworked the calling conventions, which now use four new opcodes: &lt;code&gt;set_args&lt;/code&gt;, &lt;code&gt;set_returns&lt;/code&gt;, &lt;code&gt;get_params&lt;/code&gt;, and &lt;code&gt;get_results&lt;/code&gt;. At the time of writing, IMCC doesn&amp;rsquo;t give you full syntactic help with them, but they&amp;rsquo;re easy enough to use explicitly for the time being and the help is getting there. Check out the &lt;a href=&#34;http://svn.perl.org/parrot/trunk/docs/pdds/pdd03_calling_conventions.pod&#34;&gt;Parrot Calling Conventions PDD&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Also getting rejigged is the continuation/register frame architecture. Taking advantage of the fact that this is a &lt;em&gt;virtual&lt;/em&gt; machine, we now have an unlimited number of registers per register frame. Combine this with the new calling conventions, in which arguments are passed outside of the register frame, and all of a sudden a full continuation becomes a simple pointer to the register frame and everything gets saved as if by magic, which opens up a whole bunch of possibilities, which has interesting implications for the register allocator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://use.perl.org/~chip/journal/&#34;&gt;Chip&amp;rsquo;s design notes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;new-generational-gc-scheme-http-groups-google-com-groups-threadm-41b037ed050608072845298c13-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41b037ed050608072845298c13@mail.gmail.com&#34;&gt;New Generational GC Scheme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alexandre Buisse posted his outline for a Google Summer of Code project to implement a shiny new Generational Garbage Collection scheme. Discussion of tunability and threading issues followed.&lt;/p&gt;

&lt;h4 id=&#34;ordered-hashes-more-thoughts-http-groups-google-com-groups-threadm-493a37523a8d17448240da1ddde924b4044d9040-msgboscld2win-dmn1-fmr-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=493A37523A8D17448240DA1DDDE924B4044D9040@MSGBOSCLD2WIN.DMN1.FMR.COM&#34;&gt;Ordered Hashes: More Thoughts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Tolkin helpfully provided a summary of his thoughts about ordered hashes: &amp;ldquo;An ordered hash that does not support deletes could cause a user-visible bug. At a minimum, it should support the special case of delete that is supported by the Perl &lt;code&gt;each()&lt;/code&gt; operator.&amp;rdquo; Dan pointed out that reusing the ordered hash code for anything other than the lexical pad it was specifically implemented for was just looking for trouble.&lt;/p&gt;

&lt;h4 id=&#34;the-thread-that-i-really-hoped-matt-would-be-summarizing-http-groups-google-com-groups-threadm-20050612111515-ga19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612111515.GA19372@tytlal.topaz.cx&#34;&gt;The Thread That I Really Hoped Matt Would Be Summarizing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;AKA &amp;ldquo;Attack of the 50-foot register allocator vs. the undead continuation monster.&amp;rdquo; Piers Cawley and Chip had something of a disagreement about interactions between continuations and the register allocator. After discussion on IRC, it became apparent that they were talking past each other. The new &amp;ldquo;the register frame is the continuation&amp;rdquo; means that yes, the register allocator definitely can&amp;rsquo;t rely on being able to reuse registers that persist over function calls, but that&amp;rsquo;s all right because you can always grab more registers.&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-20050612113805-gc19372-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612113805.GC19372@tytlal.topaz.cx&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember the missing multimethod functions I mentioned last time? At the time, Chip hadn&amp;rsquo;t ruled on whether taking them out was the Right Thing or not. He has since ruled that it was.&lt;/p&gt;

&lt;p&gt;This is probably not quite the right place to suggest this, but what the heck. Maybe in future when planning user visible changes of this sort, they should spend at least one release period deprecated and throwing warnings when used.&lt;/p&gt;

&lt;h4 id=&#34;pge-namespaced-rules-http-groups-google-com-groups-threadm-42aa039b-8030000-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA039B.8030000@coleda.com&#34;&gt;PGE, Namespaced Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda worried that PGE subrules appear to be globally scoped. It turns out that Patrick worries, too, but is currently in the process of thrashing out how to scope them. He outlined his current thinking.&lt;/p&gt;

&lt;h4 id=&#34;pmcs-and-objects-question-http-groups-google-com-groups-threadm-42aa13d4-1010201-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AA13D4.1010201@home.nl&#34;&gt;PMCs and Objects Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol wondered about the possibilities of overriding PMC behavior with Parrot classes. He outlined possibilities and wondered if he was correct. Chip thought that it should be possible to implement (for instance) Perl&amp;rsquo;s datatypes in pure PIR, if only for debugging and fun. I&amp;rsquo;m still not entirely sure if it&amp;rsquo;s possible to make a &lt;code&gt;ParrotClass&lt;/code&gt; that inherits from a PMC, though.&lt;/p&gt;

&lt;h4 id=&#34;software-transactional-memory-http-groups-google-com-groups-threadm-rt-3-0-11-36250-115576-12-1956142453591-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-36250-115576.12.1956142453591@perl.org&#34;&gt;Software Transactional Memory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It seems the design team have drunk deeply of the Software Transaction Memory (STM) Kool Aid. STM is, to quote Chip, a &amp;ldquo;wicked cool&amp;rdquo; way of doing threading. Expect a more-fleshed-out design document eventually.&lt;/p&gt;

&lt;h4 id=&#34;parrot-bc-http-groups-google-com-groups-threadm-1579101353-20050611234913-rblasch-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1579101353.20050611234913@rblasch.org&#34;&gt;Parrot &lt;code&gt;bc&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;According to the configuration scripts, Parrot looks for the GNU version of &lt;code&gt;bc&lt;/code&gt; solely for checking that Parrot &lt;code&gt;bc&lt;/code&gt; is working. This is all very well, but there is no Parrot implementation of &lt;code&gt;bc&lt;/code&gt; in the SVN repository. Apparently, there&amp;rsquo;s a broken version of it sitting on Bernhard Schmalhofer&amp;rsquo;s local hard disk.&lt;/p&gt;

&lt;p&gt;None of which addressed the issue of why, even with a &amp;ldquo;working&amp;rdquo; version, the tests need to access GNU &lt;code&gt;bc&lt;/code&gt;. Surely it&amp;rsquo;s possible to write tests statically. The only time you&amp;rsquo;d need an authoritative version would be when you were adding tests. Oops, editorializing again.&lt;/p&gt;

&lt;h4 id=&#34;substituting-for-pge-http-groups-google-com-groups-threadm-42abb476-3030109-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42ABB476.3030109@coleda.com&#34;&gt;Substituting for PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if it was possible to do substitutions with PGE yet. &amp;ldquo;Yes, sort of,&amp;rdquo; Patrick replied. You can substitute the first occurrence by grabbing the match data and using &lt;code&gt;substr&lt;/code&gt;. Everything else is for another day.&lt;/p&gt;

&lt;h4 id=&#34;unexpected-behavior-calling-method-http-groups-google-com-groups-threadm-42ac11c4-9000501-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42AC11C4.9000501@home.nl&#34;&gt;Unexpected Behavior Calling Method&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol had some problems implementing delegated addition. Apparently it&amp;rsquo;s because the signatures of the &lt;code&gt;__add&lt;/code&gt; methods caught him out. Also, it&amp;rsquo;s a really bad idea to delegate to a method called &lt;code&gt;__add&lt;/code&gt;, because Parrot expects some very particular behavior from it. Think about calling it &lt;code&gt;add&lt;/code&gt; instead.&lt;/p&gt;

&lt;h4 id=&#34;parrot-goals-and-priorities-http-groups-google-com-groups-threadm-20050612103228-gi4954-tytlal-topaz-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050612103228.GI4954@tytlal.topaz.cx&#34;&gt;Parrot Goals and Priorities&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip&amp;rsquo;s put the slides of his Austrian Perl Workshop talk on &lt;a href=&#34;http://feather.perl6.nl/~chip/Chip_APW.pdf&#34;&gt;the Parrot project and its priorities&lt;/a&gt; up on feather. Check them out; they&amp;rsquo;re good.&lt;/p&gt;

&lt;h4 id=&#34;new-todos-http-rt-perl-org-rt3-search-listing-html-bookmark-frt-3b-404-7c-258-7c-242-7c10-242-7c11-241-7c7-241-7c9-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20resolved-246-7cstatus-242-7c-21-3d-248-7cresolved-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2418-7cstatus-20-21-3d-20rejected-246-7cstatus-242-7c-21-3d-248-7crejected-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2414-7cqueue-20-3d-20parrot-245-7cqueue-241-7c-3d-246-7cparrot-258-7c-2411-7cdescription-245-7cfield-248-7coperator-245-7cvalue-2417-7csubject-20like-20todo-247-7csubject-244-7clike-244-7ctodo-242-7c12-241-7c0-241-7c0-ticketssortby-created-ticketssortorder-desc-rowsperpage-50&#34;&gt;&lt;a href=&#34;http://rt.perl.org/rt3/Search/Listing.html?Bookmark=FrT%3B%404%7C%258%7C%242%7C10%242%7C11%241%7C7%241%7C9%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20resolved%246%7CStatus%242%7C%21%3D%248%7Cresolved%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2418%7CStatus%20%21%3D%20rejected%246%7CStatus%242%7C%21%3D%248%7Crejected%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2414%7CQueue%20%3D%20parrot%245%7CQueue%241%7C%3D%246%7Cparrot%258%7C%2411%7CDESCRIPTION%245%7CFIELD%248%7COPERATOR%245%7CVALUE%2417%7CSubject%20LIKE%20TODO%247%7CSubject%244%7CLIKE%244%7CTODO%242%7C12%241%7C0%241%7C0&amp;amp;TicketsSortBy=Created&amp;amp;TicketsSortOrder=DESC&amp;amp;RowsPerPage=50&#34;&gt;New TODOs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda&amp;rsquo;s been busy injecting a bunch of handy TODO items in the Parrot RT system. Check &amp;lsquo;em out, you might be able to do some of them.&lt;/p&gt;

&lt;h4 id=&#34;new-list-for-pirate-http-groups-google-com-groups-threadm-pine-lnx-4-62-0506122306160-11002-hydrogen-sabren-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.62.0506122306160.11002@hydrogen.sabren.com&#34;&gt;New List for Pirate&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace announced the creation of &lt;a href=&#34;http://cornerhost.com/mailman/listinfo/pirate&#34;&gt;a new list for work on Pirate&lt;/a&gt;, a Python compiler for Parrot. If Python on Parrot is your bag, I suggest you sign up.&lt;/p&gt;

&lt;h4 id=&#34;adding-methods-to-existing-classes-http-groups-google-com-groups-threadm-20050615203833-gc7329-pmichaud-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050615203833.GC7329@pmichaud.com&#34;&gt;Adding Methods to Existing Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick wondered how to add methods to existing classes. It turns out that the trick is to use &lt;code&gt;find_type&lt;/code&gt; instead of &lt;code&gt;findclass&lt;/code&gt;. According to Leo, &lt;code&gt;findclass&lt;/code&gt; is deprecated.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Hmm. 1242 GMT+1 on Thursday as I write this, and there are, oh, 246 messages in &lt;em&gt;perl6-language&lt;/em&gt;. This could get sketchy.&lt;/p&gt;

&lt;h4 id=&#34;reduce-metaoperator-on-an-empty-list&#34;&gt;Reduce Metaoperator on an Empty List&lt;/h4&gt;

&lt;p&gt;Wow! The &amp;ldquo;Reduce metaoperator on an empty list&amp;rdquo; discussion is still going.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-type-blocks-http-aspn-activestate-com-aspn-mail-message-perl6-language-2617767&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2617767&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Type Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Much to my personal chagrin, it looks like &lt;code&gt;return()&lt;/code&gt; inside a of pointy block will use an escape continuation and will probably be picky about making sure that you can only invoke the pointy block from somewhere dynamically &amp;ldquo;below&amp;rdquo; the block in which it was created. This means no cunning tricks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub call_with_current_continuation(Code $code) {
  $code({ return $^cc })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is probably a good thing.&lt;/p&gt;

&lt;h4 id=&#34;caller-and-want-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619348&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619348&#34;&gt;&lt;code&gt;caller&lt;/code&gt; and &lt;code&gt;want&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas asked for clarification about the behavior of the &lt;code&gt;caller&lt;/code&gt; builtin. Larry provided it.&lt;/p&gt;

&lt;h4 id=&#34;musing-on-registerable-event-handlers-for-some-specific-events-http-aspn-activestate-com-aspn-mail-message-perl6-language-2619327&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2619327&#34;&gt;Musing on Registerable Event Handlers for Some Specific Events&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy hoped that Perl 6 would have some sort of minimal set of hooks for handling events. (Personally, I&amp;rsquo;d like a maximal set of hooks for anything that changes the runtime structure of Perl, but I&amp;rsquo;m greedy like that.) Larry said that there would be such a thing, but that it wasn&amp;rsquo;t designed yet. He appeared to volunteer Adam as an initial designer. Discussion ensued, but there&amp;rsquo;s no concrete design yet. Slightly tangentially, Dan discussed his &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000414.html&#34;&gt;thoughts about a Parrot notifications manager&lt;/a&gt; on his blog, which might be useful to some.&lt;/p&gt;

&lt;h4 id=&#34;speed-bump-placement-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621258&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621258&#34;&gt;Speed Bump Placement&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a thread discussing adding an &lt;code&gt;eval STRING&lt;/code&gt;-type behavior to the right-hand side of a substitution, Larry said that &amp;ldquo;Deciding where (and where not) to put the speed bumps is a pretty good description of my job. It&amp;rsquo;s impossible to have a language without bumps, so I reserve the right to put the necessary bumps where I think they&amp;rsquo;ll do the most good and/or least harm.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I thought that was worth reading by more than just the list subscribers.&lt;/p&gt;

&lt;h4 id=&#34;mmd-vs-anonymous-parameter-types-referencing-early-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622814&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622814&#34;&gt;MMD Vs. Anonymous Parameter Types Referencing Early Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip threw up his hands and despaired of ever efficiently implementing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  multi sub is_equal(Integer $a, Integer where { $_ == $a } $b: ) { 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is cute, but Chip claims you need Jedi mind powers if you want to make it work.&lt;/p&gt;

&lt;p&gt;Then Thomas Sandlaß popped up to say that actually, there was already a language called Cecil that allowed you to do precisely that sort of thing (called Predicate Dispatch) and there were several efficient implementation strategies. After a nudge from Chip, he even provided a link. Larry thought it eminently doable, too, and sketched out a strategy.&lt;/p&gt;

&lt;p&gt;That strategy (which applies almost everywhere in Perl, when you think about) boils down to &amp;ldquo;If you can&amp;rsquo;t do it at compile time, do it at runtime (and pretend you did it at runtime).&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;state-of-the-design-documents-http-aspn-activestate-com-aspn-mail-message-perl6-language-2620863&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2620863&#34;&gt;State of the Design Documents&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb worries about the state of the synopses. He argued (quite persuasively) that the thing to do would be to put the synopses into public change control with global read access, but with write access limited to @Larry. The community could then provide new documentation in the form of patches, which @Larry would approve, reject, or modify as appropriate, which all hangs on whether @Larry has sufficient tuits.&lt;/p&gt;

&lt;p&gt;Patrick pointed out that this already exists and that he had volunteered as gatekeeper and patch dispatcher, but that there were very few patches so far. But now you all know about it, right?&lt;/p&gt;

&lt;p&gt;Some discussion followed about how to flesh out things, but the important thing is the &lt;a href=&#34;http://svn.perl.org/perl6/doc/trunk&#34;&gt;Perl 6 design document repository&lt;/a&gt; URL.&lt;/p&gt;

&lt;h4 id=&#34;how-much-do-we-close-over-http-aspn-activestate-com-aspn-mail-message-perl6-language-2621742&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2621742&#34;&gt;How Much Do We Close Over?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley wants to be able to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo { my $x = 1; return sub { eval $^codestring } }
say foo().(&#39;$x&#39;); # 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 5, this gives warnings about an undeclared variable. Chip maintained that this is actually the Right Thing. Piers understood that it may not be the right thing in all cases, but he wanted to be able to make it work when needed, if necessarily, with predeclaration. There was some discussion, but nothing from @Larry yet.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-io-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622126&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622126&#34;&gt;&lt;code&gt;BEGIN {...}&lt;/code&gt; and IO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt noted that that &lt;code&gt;BEGIN {...}&lt;/code&gt; can be a little scary when you want to compile to bytecode. Consider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = BEGIN { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is okay, until you have a version of Perl that compiles that to bytecode. The response ran along the lines of &amp;ldquo;Don&amp;rsquo;t do that, then!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Personally I&amp;rsquo;d write that as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $fh = INIT { open &amp;quot;some_file&amp;quot; err ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that my recollection that &lt;code&gt;INIT&lt;/code&gt; blocks happen after the code is compiled but before it starts to run&amp;ndash;or do I mean a &lt;code&gt;CHECK&lt;/code&gt; block?&lt;/p&gt;

&lt;h4 id=&#34;anonymous-macros-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622133&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622133&#34;&gt;Anonymous Macros&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo also wondered if anonymous macros (at compile time) were allowed. Larry had no problem with macros being first-class objects during the compile. He also went on to wonder if they should be multidispatch, too.&lt;/p&gt;

&lt;h4 id=&#34;perl-defined-object-array-hash-classes-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622337&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622337&#34;&gt;Perl Defined &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt; Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While toying with Pugs, Eric Hodges managed to overwrite the internal definition of the &lt;code&gt;Object&lt;/code&gt; class, which obviously caused him pain. Larry reckons we&amp;rsquo;ll have constructs like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Object is augmented { ... };
class Object is replaced { ... };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(names up for grabs). My personal preference is for making &lt;code&gt;augmented&lt;/code&gt; the default behavior, but I&amp;rsquo;ll live if I can have a pragma that makes it that way.&lt;/p&gt;

&lt;h4 id=&#34;hash1-hash2&#34;&gt;&lt;code&gt;%hash1 »...« %hash2&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa wondered about the behavior of hyperops when applied to a pair of hashes. He wanted things arranged so that if you had a hash with keys in common, then the hypering process would keep them together. Luke agreed that it would be useful (so do I, for that matter) and then everyone started talking about inner and outer joins and my database comprehension head swapped out for the moment.&lt;/p&gt;

&lt;h4 id=&#34;binding-slices&#34;&gt;Binding Slices&lt;/h4&gt;

&lt;p&gt;With a small correction for syntactical niceness, Piers wondered if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @y := @foo[0...][1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would bind &lt;code&gt;@y&lt;/code&gt; to a column of the two-dimensional matrix represented by &lt;code&gt;@foo[][]&lt;/code&gt;, so that writing to &lt;code&gt;@y&lt;/code&gt; would affect &lt;code&gt;@foo&lt;/code&gt; and vice versa. @Larry hasn&amp;rsquo;t said anything yet.&lt;/p&gt;

&lt;h4 id=&#34;alias-the-rubymeter-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622775&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622775&#34;&gt;&lt;code&gt;alias&lt;/code&gt; the RubyMeter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI Andras wondered if Perl 6 would have something like Ruby&amp;rsquo;s rather lovely &lt;code&gt;alias&lt;/code&gt;. Larry thought you should be able to write a macro to do the job, but wasn&amp;rsquo;t entirely sure how exactly it would be done. Further discussion centered on whether the feature was a good idea and whether it had the right name. One school of thought thinks it already exists as &lt;code&gt;:=&lt;/code&gt;, but I&amp;rsquo;m not quite so sure.&lt;/p&gt;

&lt;h4 id=&#34;caller-block-vs-any-hope-of-efficiency-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622877&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622877&#34;&gt;&lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; Vs. Any Hope of Efficiency&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip hopes that using &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; as a general-purpose block promoter will be disallowed unless the calling block has already marked itself as callable. Larry thought that this would be okay, noting that he saw &lt;code&gt;&amp;amp;?CALLER::BLOCK&lt;/code&gt; being mostly used for introspective purposes.&lt;/p&gt;

&lt;h4 id=&#34;creating-a-web-templating-engine-http-aspn-activestate-com-aspn-mail-message-perl6-language-2622993&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2622993&#34;&gt;Creating a Web Templating Engine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wow! Perl 6 isn&amp;rsquo;t even finished, and already Andras is talking about writing a web templating engine for it. He outlined his plan and wondered how to go about implementing it. He and Ingo discussed it.&lt;/p&gt;

&lt;h4 id=&#34;hyper-concat-http-aspn-activestate-com-aspn-mail-message-perl6-language-2630895&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2630895&#34;&gt;Hyper Concat&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Klausner has been playing with &lt;code&gt;»~«&lt;/code&gt; and uncovered some weirdness. Said weirdness lead to a discussion of &lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2658196&#34;&gt;the default strings/patterns in &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;sub-my-zip-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710261&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710261&#34;&gt;&lt;code&gt;sub my_zip (...?) {}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus worried that the current Pugs implementation of &lt;code&gt;zip&lt;/code&gt; was signatureless, which, among other things, makes it uncompilable to Parrot. He wondered what its function signature should be. Larry came up with the (admittedly slightly weird) goods.&lt;/p&gt;

&lt;h4 id=&#34;ignoring-parameters-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710606&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710606&#34;&gt;Ignoring Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered if he&amp;rsquo;d be able to write a class method as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(Class undef:) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when his class methods made no references to the class object itself. Damian thought that the syntax should actually be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method greet(FooClass ::class) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that subs and methods should complain about unused non-optional non-invocant parameters. There&amp;rsquo;s more; see the sub for details.&lt;/p&gt;

&lt;h4 id=&#34;scalar-dereferencing-http-aspn-activestate-com-aspn-mail-message-perl6-language-2710912&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2710912&#34;&gt;Scalar Dereferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered about the semantics of a scalar reference in the face of stringification and numification. He provided an example of Pugs&amp;rsquo; current behavior that may or may not be correct. Larry described broken behavior before thinking again and describing the really correct behavior, along with a summary of his raccoon problems.&lt;/p&gt;

&lt;h4 id=&#34;taking-given-as-read-http-aspn-activestate-com-aspn-mail-message-perl6-language-2711310&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2711310&#34;&gt;Taking &lt;code&gt;given&lt;/code&gt; as Read&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wondered how to write a function that would look like a &lt;code&gt;given&lt;/code&gt; block to any &lt;code&gt;when&lt;/code&gt;s inside of it. It turns out that you can&amp;rsquo;t, yet. Damian thought that the right way to do it would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub factorial (Int $n is topic) {
  return 1 when 0;
  $n * factorial($n - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading this again, I find myself wondering if the &lt;code&gt;return&lt;/code&gt; is really necessary.&lt;/p&gt;

&lt;h4 id=&#34;method&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;People don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;. Other people don&amp;rsquo;t like &lt;code&gt;.method&lt;/code&gt; in methods. I think we have what we have on the &amp;ldquo;least worst option&amp;rdquo; principle&amp;ndash;but I would say that I don&amp;rsquo;t like &lt;code&gt;./method&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;autoload-and-http-aspn-activestate-com-aspn-mail-message-perl6-language-2713984&#34;&gt;&lt;a href=&#34;http://aspn.activestate.com/ASPN/Mail/Message/perl6-language/2713984&#34;&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; and &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered about the prototype of &lt;code&gt;AUTOLOAD&lt;/code&gt;. In the discussion that ensued, some people felt that whatever happened, &lt;code&gt;AUTOLOAD&lt;/code&gt; should return a code ref that &lt;em&gt;perl&lt;/em&gt; would call.&lt;/p&gt;

&lt;h3 id=&#34;th-th-the-that-s-all-folks&#34;&gt;Th-Th-The-That&amp;rsquo;s All, Folks!&lt;/h3&gt;

&lt;p&gt;I remember now why I gave up writing summaries in the first place. First, I started missing weeks, which meant that there was so much to write up in the fortnightly summaries, and then discussions grew interesting, which meant writing them took so much longer because there were hard things to understand first.&lt;/p&gt;

&lt;p&gt;Still, once in a while is refreshing, but I really should stop putting things off until the last minute.&lt;/p&gt;

&lt;p&gt;Ahem.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 1-7, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</link>
      <pubDate>Thu, 09 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050608.html/</guid>
      <description>

&lt;p&gt;Crumbs. I&amp;rsquo;ve remembered to write the summary this week. Now if I can just remember to bill O&amp;rsquo;Reilly for, err, 2003&amp;rsquo;s summaries. Heck, it&amp;rsquo;s not like waiting for the dollar to get stronger has paid off.&lt;/p&gt;

&lt;p&gt;Ah well, no use crying over spilled milk. On with the show. Maybe, just maybe, &lt;code&gt;darwinports&lt;/code&gt; will work its magic and I&amp;rsquo;ll have a working Haskell compiler by the time I&amp;rsquo;ve finished writing.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;undef-issues-http-groups-google-com-groups-threadm-20050601002444-gb32060-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601002444.GB32060@wall.org&#34;&gt;&lt;code&gt;undef&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;d probably forgotten this, but Larry pointed out that in Perl 6 there will no longer be a function &lt;code&gt;undef()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;. Instead there&amp;rsquo;ll be a function &lt;code&gt;undefine()&lt;/code&gt; and a value &lt;code&gt;undef&lt;/code&gt;, but he thinks that we should usually &lt;code&gt;fail()&lt;/code&gt; to construct our undefined values.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-internals&#34;&gt;This Week in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;keys-http-groups-google-com-groups-threadm-20050601021042-22209-qmail-web32914-mail-mud-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601021042.22209.qmail@web32914.mail.mud.yahoo.com&#34;&gt;Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not sure I understood what TOGoS was driving at with a suggestion about keys and properties. Luckily Leo, Dan, and Chip all seemed to. The discussion continued through the week.&lt;/p&gt;

&lt;h4 id=&#34;loop-improvements-http-groups-google-com-groups-threadm-45ec99fc050531202812aa4da9-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=45ec99fc050531202812aa4da9@mail.gmail.com&#34;&gt;Loop Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh no! It&amp;rsquo;s the register allocator problems again. One of these days, I swear I&amp;rsquo;m going to swot up on this stuff properly, work out whether it&amp;rsquo;s really the case that full continuations break any conceivable register allocator, and summarize all of the issues for everyone in a nice white paper/summary.&lt;/p&gt;

&lt;h4 id=&#34;hp-ux-build-notes-http-groups-google-com-groups-threadm-20050601114223-30367-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050601114223.30367.qmail@lists.develooper.com&#34;&gt;HP-UX Build Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross posted some of his issues with getting Parrot up on an HP-UX machine. After a good deal of discussion and tool-chain fettling, he made things build and posted a patch to fix the knowledge, which was promptly applied (r8280, for those of you with the &lt;code&gt;svn&lt;/code&gt; chops to know how to take advantage of that).&lt;/p&gt;

&lt;h4 id=&#34;mod-pugs-status-http-groups-google-com-groups-threadm-pine-lnx-4-44-0506011358160-20203-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0506011358160.20203-100000@booger.sixgeeks.org&#34;&gt;&lt;code&gt;mod_pugs&lt;/code&gt; Status&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz announced that &lt;code&gt;mod_parrot&lt;/code&gt; now comes bundled with &lt;code&gt;mod_pugs&lt;/code&gt;, which means that you can now write Apache extensions in Perl 6. I don&amp;rsquo;t know about you, but my mind is still boggling.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-1-http-groups-google-com-groups-threadm-42a18449-3060709-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A18449.3060709@toetsch.at&#34;&gt;Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Parrot spent most of the week in a feature freeze for the release of Parrot 0.2.1 &amp;ldquo;APW,&amp;rdquo; which went ahead as planned on the 4th of June.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-solaris-http-groups-google-com-groups-threadm-8c73533bea34422-bd4-27eb1-mblk-r28-sysops-aol-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=8C73533BEA34422-BD4-27EB1@mblk-r28.sysops.aol.com&#34;&gt;Parrot on Solaris&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Peter Sinnott reported problems with Parrot on Solaris. It turns out that different implementations of &lt;code&gt;atan&lt;/code&gt; behave slightly differently, which isn&amp;rsquo;t good. I believe the problem remains unresolved.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-the-mac-os-http-groups-google-com-groups-threadm-ffcb1edd23308e83c738cd420c94e7c1-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ffcb1edd23308e83c738cd420c94e7c1@gmail.com&#34;&gt;Parrot on the Mac OS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Juran&amp;rsquo;s questions about getting Parrot running on Mac OS Classic went Warnocked.&lt;/p&gt;

&lt;h4 id=&#34;parrot-tests-get-todo-http-groups-google-com-groups-threadm-1117736102-12568-25-camel-localhost&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1117736102.12568.25.camel@localhost&#34;&gt;Parrot Tests Get TODO&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Continuing the drive for consistent testing structures everywhere in Perl land, Chromatic applied a patch to &lt;code&gt;Parrot::Test&lt;/code&gt; that makes TODO tests work in a way that &lt;code&gt;Test::Builder&lt;/code&gt; understands. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;missing-mmd-default-functions-http-groups-google-com-groups-threadm-a06210200bec56c538a32-5b192-168-0-8-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06210200bec56c538a32@%5B192.168.0.8%5D&#34;&gt;Missing MMD Default Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan was somewhat bemused to find that the MMD functions&amp;rsquo; defaults had disappeared when he did a sync with &lt;code&gt;subversion&lt;/code&gt;. He wondered whether this was deliberate. Turns out that it was. I&amp;rsquo;m not sure whether Chip&amp;rsquo;s ruled that it was right, though.&lt;/p&gt;

&lt;h4 id=&#34;google-s-summer-of-code-2005-http-groups-google-com-groups-threadm-bbfd0f3e0506030500752b4585-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=bbfd0f3e0506030500752b4585@mail.gmail.com&#34;&gt;Google&amp;rsquo;s Summer of Code 2005&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember earlier when I talked about IMCC&amp;rsquo;s register allocation? Well, Dheeraj Khumar Arora is looking at working on improving IMCC&amp;rsquo;s optimizations as part of Google&amp;rsquo;s Summer of Code 2005. The usual thread ensued.&lt;/p&gt;

&lt;h4 id=&#34;building-nci-dynclasses-on-hp-ux-http-groups-google-com-groups-threadm-20050603120906-10247-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050603120906.10247.qmail@lists.develooper.com&#34;&gt;Building &lt;em&gt;nci/dynclasses&lt;/em&gt; on HP-UX&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Not content with getting Parrot to build on HP-UX, Nick Glencross next set his sights on making &lt;em&gt;nci/dynclasses&lt;/em&gt; work on HP-UX. It sounds like there&amp;rsquo;ll be a patch forthcoming some time next week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050605160218.31074.qmail@lists.develooper.com&#34;&gt;Nick Paints the Big HP-UX Picture&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;announcing-amber-for-parrot-0-2-1-http-groups-google-com-groups-threadm-1118002708-9863-14-camel-eden&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=1118002708.9863.14.camel@eden&#34;&gt;Announcing Amber for Parrot 0.2.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne announced another new language that targets Parrot: &lt;a href=&#34;http://xamber.org/&#34;&gt;Amber&lt;/a&gt;. It borrows a good deal of syntax and semantics from Eiffel, with a large sprinkling of Ruby for good measure.&lt;/p&gt;

&lt;h4 id=&#34;a-note-wrt-exception-handlers-http-groups-google-com-groups-threadm-42a3f803-6040406-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42A3F803.6040406@toetsch.at&#34;&gt;A note WRT exception handlers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a quick discussion of the correct use of exception handlers in Parrot. Essentially, the rule is that your exception handler should jump back to the point just after the exception handler block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    push_eh except_N
    # Code that might fail
    clear_eh
resume_N:
    ...
except_N:
    ...
    goto resume_N
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy, eh?&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;the-reduce-metaoperator-thread&#34;&gt;The Reduce Metaoperator Thread&lt;/h4&gt;

&lt;p&gt;Remember when I discussed this thread two weeks ago? It&amp;rsquo;s still going strong.&lt;/p&gt;

&lt;p&gt;Larry ended up stating that there will be an optional property, &lt;code&gt;identval&lt;/code&gt;, on operators which will be set by default on all operators with obvious identity values. Or it might be called &lt;code&gt;initvalue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3684&#34;&gt;Larry Makes Up His Mind&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;construction-clarification-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3551&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3551&#34;&gt;Construction Clarification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wondered about how object constructors will work. It turned out that the code he&amp;rsquo;d carefully written by hand pretty much described the default behavior. Damian and Larry provided details. Hopefully, some keen p6porter has already incorporated any new information into the appropriate Synopses.&lt;/p&gt;

&lt;h4 id=&#34;a-comprehensive-list-of-perl-6-rule-tokens-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3577&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3577&#34;&gt;A Comprehensive List of Perl 6 Rule Tokens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick responded to his own post last week to clarify some things about the capturing behavior of various rule types. He, Japhy, and Thomas Sandlaß thrashed out the gory details.&lt;/p&gt;

&lt;h4 id=&#34;default-invocant-of-methods-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3578&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3578&#34;&gt;Default Invocant of Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry addressed Ingo Blechschmidt&amp;rsquo;s questions about class methods.&lt;/p&gt;

&lt;p&gt;Class is a role? My head hurts.&lt;/p&gt;

&lt;h4 id=&#34;returns-and-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3579&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3579&#34;&gt;&lt;code&gt;returns&lt;/code&gt; and Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered how to specify the signature of a context-sensitive function. The consensus seems to be to use a junction, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo() returns Str|Int {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;declarations-of-constants-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3556&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3556&#34;&gt;Declarations of Constants&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy had wondered how much compile-time optimization of constants would happen. Damian thought not as much as Adam thought, but suggested that he could use macros to get more optimization if he needed it.&lt;/p&gt;

&lt;h4 id=&#34;time-functions-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3558&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3558&#34;&gt;Time Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The good thing about &lt;code&gt;localtime&lt;/code&gt; et al. is that everyone knows them. The bad thing about them is that they&amp;rsquo;re at such a low level that you either end up reinventing wheels, getting it wrong, or boggling at the size of the library you need to install to get access to good time manipulation. I wonder what Perl 6 will end up with.&lt;/p&gt;

&lt;h4 id=&#34;empty-hash-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3600&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3600&#34;&gt;Empty Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke wondered if &lt;code&gt;{}&lt;/code&gt; should be an empty hash rather than empty code, and why &lt;code&gt;{ %hash }&lt;/code&gt; no longer makes a shallow copy of the hash, but code that returns &lt;code&gt;%hash&lt;/code&gt;. There was some discussion, but no answers came from anyone else on the design team.&lt;/p&gt;

&lt;h4 id=&#34;chars-in-a-list-context-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3631&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3631&#34;&gt;&lt;code&gt;chars&lt;/code&gt; in a List Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb revisited a long-Warnocked subject. He wants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@chars = &#39;hello&#39;.chars; # &amp;lt;h e l l o&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, in a list context, &lt;code&gt;chars&lt;/code&gt; should return a list of the characters in the string. Stuart Cook thought it was a good idea.&lt;/p&gt;

&lt;h4 id=&#34;transparent-opaque-references-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3517&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3517&#34;&gt;Transparent/Opaque References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Um &amp;hellip; I&amp;rsquo;m not sure what Thomas Sandlaß and Juerd were talking about. I&amp;rsquo;ll tell you what, let&amp;rsquo;s swap places: you read the thread and write me a summary of it.&lt;/p&gt;

&lt;h4 id=&#34;idea-for-making-and-optional-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3645&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3645&#34;&gt;Idea for Making &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, and &lt;code&gt;$&lt;/code&gt; Optional&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas wondered if it would be possible to make variable sigils optional. The short answer is yes, with a pragma, and probably left for CP6AN.&lt;/p&gt;

&lt;h4 id=&#34;using-rules-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3647&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3647&#34;&gt;Using Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about using rules in a web templating system he was working on. Aankhen supplied an answer.&lt;/p&gt;

&lt;p&gt;(Look, it&amp;rsquo;s two messages. Any summary I wrote that told you more than the above sentence would be about as long as the original messages.)&lt;/p&gt;

&lt;h4 id=&#34;multi-subroutine-names-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3657&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3657&#34;&gt;(Multi)Subroutine Names&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dakkar wondered how he could get at the long name of a multi sub. Rod Adams thought it&amp;rsquo;d be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo&amp;lt;Array, Int&amp;gt;
&amp;amp;foo&amp;lt;Hash, Int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but also thought it might been changed. Thomas Sandlaß agreed that it had changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;foo:(Array, Int)
&amp;amp;foo:(Hash, Int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy.&lt;/p&gt;

&lt;h4 id=&#34;flattening-arguments-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3665&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3665&#34;&gt;Flattening Arguments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHAZI András wondered about the behavior of flattening arguments in Pugs when compared to that described in &lt;em&gt;Perl 6 and Parrot Essentials&lt;/em&gt;. Answer: The book&amp;rsquo;s right, they&amp;rsquo;re just not implemented in Pugs. Yet.&lt;/p&gt;

&lt;h4 id=&#34;return-in-pointy-blocks-http-article-gmane-org-gmane-comp-lang-perl-perl6-language-3685&#34;&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.perl.perl6.language/3685&#34;&gt;&lt;code&gt;return()&lt;/code&gt; in Pointy Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Oh boy. Ingo Blechschmidt opened a can of worms when he asked about &lt;code&gt;return&lt;/code&gt; within pointy subs. However, because the worms were slow in starting, you&amp;rsquo;ll have to wait for Matt&amp;rsquo;s summary next week when he explains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub callcc (Code $code) { $code(-&amp;gt; $r {return $r}) }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;meanwhile-in-another-place&#34;&gt;Meanwhile, in Another Place&lt;/h3&gt;

&lt;p&gt;Once upon a long time ago, Jon Orwant threw coffee cups and swore and Perl 6 was born. Later that afternoon, Dan Sugalski started doodling design sketches for what was to become Parrot. Parrot&amp;rsquo;s first &lt;em&gt;README&lt;/em&gt; in CVS dates from August 11th, 2001, and the first archived mailing list post is from August 1st, 2000, but that&amp;rsquo;s a reply.&lt;/p&gt;

&lt;p&gt;As well as being Parrot&amp;rsquo;s original developer, Dan is also Parrot&amp;rsquo;s first commercial user.&lt;/p&gt;

&lt;p&gt;Last week, he announced in his blog that, having already given up his designer&amp;rsquo;s hat earlier this year, &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000400.html&#34;&gt;he&amp;rsquo;s stopped doing any Parrot development&lt;/a&gt;. The plan is that he&amp;rsquo;ll be publishing a few design documents and historical explanations of various bits of Parrot design on his blog, but otherwise, that&amp;rsquo;s all he wrote.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the first, and I&amp;rsquo;m sure I won&amp;rsquo;t be the last to say this. Dan, thank you very much for all the work you&amp;rsquo;ve put into Parrot over the years. Good luck with whatever you do next.&lt;/p&gt;

&lt;h3 id=&#34;the-end-for-now&#34;&gt;The End &amp;hellip; for Now&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 18 - 24, 2005</title>
      <link>http://localhost:1313/pub/2005/05/p6pdigest/20050526.html/</link>
      <pubDate>Fri, 27 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/05/p6pdigest/20050526.html/</guid>
      <description>

&lt;p&gt;Note to self: It&amp;rsquo;s generally not a good idea to go installing Tiger on the day you return from holiday. It&amp;rsquo;s especially not a good idea to fail to check that it didn&amp;rsquo;t completely and utterly radish your Postfix configuration. And your Emacs. And the backing store for your website. And a bunch of other stuff. It&amp;rsquo;s an especially bad idea not to have backups of things like your aliases file&amp;hellip;&lt;/p&gt;

&lt;p&gt;Nor is it a good idea to get preoccupied with all these joys and completely forget that you should be writing the Perl 6 summary.&lt;/p&gt;

&lt;p&gt;Ahem.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very, very sorry.&lt;/p&gt;

&lt;p&gt;So, on with the show.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in perl6-compiler&lt;/h3&gt;

&lt;h4 id=&#34;inline-pugs-http-groups-google-com-groups-threadm-20050518205201-ga70318-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050518205201.GA70318@aut.dyndns.org&#34;&gt;&lt;code&gt;Inline::Pugs&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the availability of &lt;a href=&#34;https://metacpan.org/pod/Inline::Pugs&#34;&gt;Inline::Pugs&lt;/a&gt;. If you&amp;rsquo;ve ever wanted to mix up Perl&amp;rsquo;s 5 and 6 in one program, your prayers have been answered. Just grab Pugs and Inline and you&amp;rsquo;re set. Brian Ingerson made things even more delightfully evil:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!perl
use pugs;
sub postfix:&amp;lt;!&amp;gt; { [*] 1..$_ }
sub sum_factorial { [+] 0..$_! }
no pugs;
print sum_factorial(3); # 21
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;experimental-coroutine-support-http-groups-google-com-groups-threadm-20050520154253-ga3870-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050520154253.GA3870@aut.dyndns.org&#34;&gt;Experimental Coroutine Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that Pugs now has an experimental implementation of coroutines. It&amp;rsquo;s almost certainly not final, but it&amp;rsquo;s good enough for exploration and feedback purposes.&lt;/p&gt;

&lt;h4 id=&#34;graphing-tool-for-perlguts-illustrated-http-groups-google-com-groups-threadm-20050520190606-gb16763-woobling-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050520190606.GB16763@woobling.org&#34;&gt;Graphing Tool for PerlGuts Illustrated&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman asked what tool generated the &amp;ldquo;pretty diagrams&amp;rdquo; in PerlGuts Illustrated because he wanted to use it for diagrams in a forthcoming PugsGuts Illustrated. Ingy said that Gisle had hand hacked PostScript based on initial diagrams drawn on graph paper. After some discussion, the plan seems to be that Yuval will just draw diagrams, scan them, and bung them into the Pugs repository. He&amp;rsquo;ll rely on the &lt;a href=&#34;http://www.lazyweb.org/&#34;&gt;LazyWeb&lt;/a&gt; to turn them into beautiful scalable graphics.&lt;/p&gt;

&lt;h4 id=&#34;perl-development-server-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-d6c1550edc339757-53af7c2c05de2e04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/d6c1550edc339757/53af7c2c05de2e04&#34;&gt;Perl Development Server&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Okay everyone, repeat after me: &amp;ldquo;Juerd is a star!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You may ask me why, and I shall tell you.&lt;/p&gt;

&lt;p&gt;Juerd and his cosponsors, Twistspace, will make a Perl 6 development server available over the internet to any Perl 6 developers who are working on &amp;ldquo;everything that improves Perl 6 development&amp;rdquo;. If you&amp;rsquo;ve been put off working on Pugs by the hassles of getting Haskell working on your machine, or if you have the kind of bandwidth that makes svn updates a painful prospect, worry no longer. Just sign up for a development account.&lt;/p&gt;

&lt;p&gt;There was much rejoicing and suggesting of hostnames. Rather bizarrely, there was also discussion of the etymology of &amp;ldquo;sipuli&amp;rdquo; (Finnish for &amp;ldquo;onion&amp;rdquo;, in case you were wondering).&lt;/p&gt;

&lt;h4 id=&#34;two-releases-in-one-day-http-groups-google-com-groups-threadm-20050523214341-ga27266-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050523214341.GA27266@aut.dyndns.org&#34;&gt;Two Releases in One Day&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the release of Pugs 6.2.4. About half an hour later he announced the release of Pugs 6.2.5.&lt;/p&gt;

&lt;h4 id=&#34;undef-issues-http-groups-google-com-groups-threadm-42931d93-4020304-hohum-me-uk&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42931D93.4020304@hohum.me.uk&#34;&gt;&lt;code&gt;Undef&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Taylor thought he&amp;rsquo;d found some issues with Perl 6&amp;rsquo;s understanding of &lt;code&gt;undef&lt;/code&gt;. It turned out that he&amp;rsquo;d found some issues with his own understanding of same.&lt;/p&gt;

&lt;h4 id=&#34;method-attribute-chaining-http-groups-google-com-groups-threadm-198c085f-4f22-4848-9620-1b3bc4ec0428-ebi-ac-uk&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198C085F-4F22-4848-9620-1B3BC4EC0428@ebi.ac.uk&#34;&gt;Method/Attribute Chaining&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alex Gutteridge found some weirdness with the chaining of autogenerated attribute methods (I wonder if the same weirdness occurs with hand rolled attribute methods). So far it remains unfixed, but given the speed of Pugs development I doubt it&amp;rsquo;ll stay that way for long.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in perl6-internals&lt;/h3&gt;

&lt;h4 id=&#34;parrot-as-an-extension-language-http-groups-google-com-groups-threadm-20050517141532-ga35977-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050517141532.GA35977@aut.dyndns.org&#34;&gt;Parrot as an Extension Language&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Colin Adams continued to have problems using Parrot as an extension language for Eiffel. It turns out that interfacing between statically strongly typed languages and Parrot isn&amp;rsquo;t easy.&lt;/p&gt;

&lt;h4 id=&#34;fixing-t-src-manifest-t-http-groups-google-com-groups-threadm-pine-lnx-4-58-0505172312220-4578-localhost-localdomain&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.58.0505172312220.4578@localhost.localdomain&#34;&gt;Fixing &lt;em&gt;t/src/manifest.t&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli reported problems with &lt;em&gt;t/src/manifest.t&lt;/em&gt; and wondered how some of the failures came about. Jürgen Bömmels thought that the problem was an overzealous test&amp;ndash;the original version of which simply ensured that version control and the &lt;em&gt;MANIFEST&lt;/em&gt; were in sync. He provided his suggested version of a less eager, but still svn compatible test. Further discussion thrashed out the various different use cases for manifest checking.&lt;/p&gt;

&lt;h4 id=&#34;more-t-p6rules-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-af56efd05563633c-7dcb91f0f59f5772&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/af56efd05563633c/7dcb91f0f59f5772&#34;&gt;More &lt;em&gt;t/p6rules&lt;/em&gt; Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli posted a bunch of tests for the Perl 6 rules. Well, he did once he&amp;rsquo;d done battling his mailer&amp;rsquo;s somewhat bizarre choice of MIME type for his test files. Remember, if you&amp;rsquo;re about to attach a &lt;em&gt;.t&lt;/em&gt; file to a message you send to the list, make sure your mailer doesn&amp;rsquo;t declare it to be an &lt;code&gt;application/x-troff&lt;/code&gt; file&amp;ndash;&lt;code&gt;text/plain&lt;/code&gt; is your friend.&lt;/p&gt;

&lt;p&gt;Then someone applied his patches.&lt;/p&gt;

&lt;h4 id=&#34;stressing-the-hash-http-groups-google-com-groups-threadm-428def0e-3040304-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=428DEF0E.3040304@toetsch.at&#34;&gt;Stressing the Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo asked for some stress and bench mark tests for hashes because he was in the process of redoing &lt;em&gt;src/hash.c&lt;/em&gt;. Bob Rogers provided one.&lt;/p&gt;

&lt;h4 id=&#34;in-other-news-pypy-gets-an-initial-release-http-groups-google-com-groups-threadm-428f0933-8060200-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=428F0933.8060200@toetsch.at&#34;&gt;In Other News, PyPy Gets an Initial Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo crossposted the announcement of PyPy 0.6, a Python implementation written in Python. It&amp;rsquo;s not bootstrapping yet, but it&amp;rsquo;s getting there&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;pir-compilers-broken-http-groups-google-com-groups-threadm-rt-3-0-11-35944-113457-6-35375312685319-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-35944-113457.6.35375312685319@perl.org&#34;&gt;PIR Compilers Broken&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda had some problems with his TCL in PIR implementation. It turns Nick Glencross helped to track down the problems with the snippet he posted. I&amp;rsquo;m not sure whether his fix is extendable to work with the real ParTCL.&lt;/p&gt;

&lt;h4 id=&#34;mmd-http-groups-google-com-groups-threadm-pine-lnx-4-44-0505241423110-17298-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0505241423110.17298-100000@booger.sixgeeks.org&#34;&gt;MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While working on mod_parrot, Jeff Horwitz ran into an issue with Multi Method Dispatch (MMD). In particularly he didn&amp;rsquo;t seem to be able to declare a multimethod that accepted an arbitrary PMC. Leo asked for a &lt;em&gt;.t&lt;/em&gt; file so he could explore the issue further, which Jeff provided.&lt;/p&gt;

&lt;h4 id=&#34;state-of-partcl-http-groups-google-com-groups-threadm-4292895c-5000301-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4292895C.5000301@coleda.com&#34;&gt;State of ParTCL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda posted a summary of the current state of ParTCL. By the sound of things, it&amp;rsquo;s getting there.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;virtual-methods-http-www-nntp-perl-org-group-perl-perl6-language-21315&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21315&#34;&gt;Virtual Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Whilst noting that Perl 6 doesn&amp;rsquo;t really need to be able to declare methods as virtual in the same way as C++, since one can simply use the handy &lt;code&gt;...&lt;/code&gt; to do the job, Aaron Sherman noted that there was a case for something similar when declaring &amp;ldquo;stub&amp;rdquo; methods that Roles could override. The idea being that you would implement an initial behaviour that you could further decorate by a Role. Except, as Luke pointed out, the Roles system as currently defined treats all such methods as overridable.&lt;/p&gt;

&lt;p&gt;Aaron wasn&amp;rsquo;t sure that this was such a good idea and produced code to illustrate why.&lt;/p&gt;

&lt;h4 id=&#34;default-precedence-of-user-defined-infix-ops-http-www-nntp-perl-org-group-perl-perl6-language-21316&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21316&#34;&gt;Default Precedence of User-Defined infix ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt pointed out that user defined infix operators work in Pugs now. He wondered what their default precedence should be and how to define the precedence explicitly. Luke came forth with an answer, Sam Vilain asked an evil question, and Damian Conway suggested that, given how drastically precedence weirdness can mess with a programmer&amp;rsquo;s head, there shouldn&amp;rsquo;t be a default precedence at all, and if there were, it should be looser than &lt;code&gt;infix:&amp;lt;+&amp;gt;&lt;/code&gt;. I agree with Damian.&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-4-2-http-www-nntp-perl-org-group-perl-perl6-language-21323&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21323&#34;&gt;&lt;code&gt;1,(2,3),4)[2]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Argh! My head hurts!&lt;/p&gt;

&lt;p&gt;However, if you&amp;rsquo;re not sure &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21377&#34;&gt;how context works in Perl 6&lt;/a&gt;, Juerd provided a really good summary later in the thread&lt;/p&gt;

&lt;h4 id=&#34;reduce-metaoperator-on-an-empty-list-http-www-nntp-perl-org-group-perl-perl6-language-21330&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21330&#34;&gt;Reduce Metaoperator on an Empty List&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles wondered how the shiny new reduce metaoperator worked given an empty list. Various suggestions were forthcoming, but I lean towards Randal&amp;rsquo;s &lt;code&gt;inject&lt;/code&gt; solution&amp;ndash;but I&amp;rsquo;m a Smalltalk fan, so there&amp;rsquo;s no surprise there. Personally, I reckon that the metaoperator version should just return undef given an empty list. If you want anything clever you should eschew the syntactic sugar and use &lt;code&gt;inject&lt;/code&gt; or something like it. It seems that the consensus leans towards using an &lt;code&gt;identity&lt;/code&gt; attribute on the infix operator.&lt;/p&gt;

&lt;p&gt;BTW, what happens when you apply &lt;code&gt;[/]&lt;/code&gt; to a list with one element?&lt;/p&gt;

&lt;h4 id=&#34;complex-arithmetic-http-www-nntp-perl-org-group-perl-perl6-language-21347&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21347&#34;&gt;Complex Arithmetic&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Doing complex arithmetic right in a programming language is tricky. Edward Cherlin wondered if Perl 6 should follow what seems to be the consensus among programming languages that care about this sort of thing and use the shared definitions used by APL, Common LISP, and Ada. Luke thought it might be better to leave this to C6PAN. (This is the discerning language designer&amp;rsquo;s equivalent to paying no attention to the man behind the curtain methinks).&lt;/p&gt;

&lt;h4 id=&#34;syntax-for-specifying-role-parameters-http-www-nntp-perl-org-group-perl-perl6-language-21350&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21350&#34;&gt;Syntax for Specifying Role Parameters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if the syntax for specifying role parameters should be the same as the standard subroutine signature syntax (with a slightly modified proposed meaning for &lt;code&gt;:&lt;/code&gt;). Thomas Sandlaß had some related suggestions to add. Nothing from any of the design team yet.&lt;/p&gt;

&lt;h4 id=&#34;method-http-www-nntp-perl-org-group-perl-perl6-language-21351&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21351&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Martin Kuel can&amp;rsquo;t make himself like &lt;code&gt;./method&lt;/code&gt; as a shortcut for &lt;code&gt;$whatever_you_call_self_this_week.method&lt;/code&gt;. Frankly, I can&amp;rsquo;t blame him, but then I continue to think that the originally specified semantics of &lt;code&gt;.method&lt;/code&gt; (calls method on &lt;code&gt;$_&lt;/code&gt;, whether in a method or a sub, or anywhere else for that matter) are fine.&lt;/p&gt;

&lt;h4 id=&#34;uniq-http-www-nntp-perl-org-group-perl-perl6-language-21355&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21355&#34;&gt;&lt;code&gt;uniq&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo wondered why &lt;code&gt;uniq&lt;/code&gt; wasn&amp;rsquo;t in the current draft of Synopsis 29. He also wondered if its default comparator should be &lt;code&gt;=:=&lt;/code&gt;. It turns out that there&amp;rsquo;s rather more to the semantics of &lt;code&gt;uniq&lt;/code&gt; than you&amp;rsquo;d expect; Damian&amp;rsquo;s &amp;ldquo;hyper correct&amp;rdquo; implementation blew my mind.&lt;/p&gt;

&lt;h4 id=&#34;s-junction-http-www-nntp-perl-org-group-perl-perl6-language-21363&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21363&#34;&gt;&lt;code&gt;s/.../{ $junction }/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Junctions? In substitutions? What is Ingo thinking? Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;argument-type-checking-http-www-nntp-perl-org-group-perl-perl6-language-21371&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21371&#34;&gt;Argument Type Checking&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb sought reassurance that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub foo (Int $bar) { say $bar }
foo &#39;hello&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would do the right thing, namely throw an exception. Luke reassured him.&lt;/p&gt;

&lt;h4 id=&#34;how-to-create-a-new-meta-operator-http-www-nntp-perl-org-group-perl-perl6-language-21375&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21375&#34;&gt;How to Create a New Meta Operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo&amp;rsquo;s obviously been in a very wondering mood this week. This time he wondered if he could create a new meta operator in the obvious (to anyone who&amp;rsquo;s read Apocalypse 12 carefully) way. What? You&amp;rsquo;ve not read Apocalypse 12 carefully? Shame on you! Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub infix_circumfix_meta_operator:{&#39;-&amp;gt;&#39;, &#39;&amp;lt;-&#39;} (Code &amp;amp;op, $left, $right)
{ op $left + 1, $right + 1 }

say 2 -&amp;gt;+&amp;lt;- 3; # 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke thought so, but threw in his own question about how we&amp;rsquo;d specify meta operators that only work on particular classes of operators.&lt;/p&gt;

&lt;h4 id=&#34;how-to-invoke-a-method-reference-http-www-nntp-perl-org-group-perl-perl6-language-21376&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21376&#34;&gt;How to Invoke a Method Reference&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Continuing to mine his wondering vein, Ingo asked how to invoke method references. Juerd thought it&amp;rsquo;d work pretty much as it does in Perl 5.&lt;/p&gt;

&lt;h4 id=&#34;junctive-and-higher-order-types-http-www-nntp-perl-org-group-perl-perl6-language-21392&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21392&#34;&gt;Junctive and Higher-Order Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain&amp;rsquo;s question about converting a Haskellish chunk of code into Perl 6 went Warnocked.&lt;/p&gt;

&lt;h4 id=&#34;foo-1-2-3-4-http-www-nntp-perl-org-group-perl-perl6-language-21393&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21393&#34;&gt;&lt;code&gt;foo(1: 2: 3: 4:)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was &lt;em&gt;so&lt;/em&gt; tempted to use &amp;ldquo;Multimethod colonoscopy&amp;rdquo; as the heading for this section. Aren&amp;rsquo;t you glad I resisted?&lt;/p&gt;

&lt;p&gt;Autrijus has started to implement multi-level invocants in MMDs. He asked a bunch of sanity check questions before proceeding. Luke and Damian provided the sanity.&lt;/p&gt;

&lt;h4 id=&#34;lazy-context-http-www-nntp-perl-org-group-perl-perl6-language-21402&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21402&#34;&gt;Lazy Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Borrowing Ingo&amp;rsquo;s wondering hat, Yuval Kogman had questions about the semantics of laziness. Laziness is one of many features of Perl 6 that&amp;rsquo;s reasonably easy to understand from the point of view of the user, but which is a big old can of worms from the point of view of the implementer. I think I understood Yuval&amp;rsquo;s proposed semantics/implementation, but it stumps me when it comes to summarizing it. People seemed to like it though.&lt;/p&gt;

&lt;h4 id=&#34;declaration-of-my-variables-using-symbolic-referentiation-http-www-nntp-perl-org-group-perl-perl6-language-21412&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21412&#34;&gt;Declaration of &lt;code&gt;my()&lt;/code&gt; Variables Using Symbolic Referentiation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Snatching back his wondering hat, Ingo asked a question I didn&amp;rsquo;t understand about declaring &lt;code&gt;my&lt;/code&gt; variables using symbolic referentiation. Frankly, I don&amp;rsquo;t even understand the subject. The consensus of those responding seemed to be that what Ingo wanted to do was pretty silly in the first place.&lt;/p&gt;

&lt;h4 id=&#34;explicit-laws-about-whitespace-in-rules-http-www-nntp-perl-org-group-perl-perl6-language-21425&#34;&gt;&lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.language/21425&#34;&gt;Explicit Laws about Whitespace in Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff &amp;ldquo;japhy&amp;rdquo; Pinyan wanted to know what the rules were about permitting whitespace in rules. In particular, was it legal to write &lt;code&gt;\c [CHARACTER NAME]&lt;/code&gt;, or must he write &lt;code&gt;\c[CHARACTER NAME]&lt;/code&gt;. Damian reckons only the second is legal.&lt;/p&gt;

&lt;h3 id=&#34;and-we-re-done&#34;&gt;And We&amp;rsquo;re Done&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s it for another week. Tune in at the same time next week when Mr. Fowles will entertain you all with his interpretation of the coming week&amp;rsquo;s events. I&amp;rsquo;ll be back here the week after that.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now that I&amp;rsquo;m back writing stuff I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, April 20 - 26, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050428.html/</link>
      <pubDate>Mon, 02 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050428.html/</guid>
      <description>

&lt;h3 id=&#34;the-perl-6-summary-for-the-week-ending-2005-04-26&#34;&gt;The Perl 6 Summary for the Week Ending 2005-04-26&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s my turn again. What fun.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;What,&amp;rdquo; I hear you all ask, &amp;ldquo;has been going on in the crazy, mixed-up world of Perl 6 design and development?&amp;rdquo; Read this summary and, beginning with perl6-compiler, I shall tell you.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week In perl6-compiler&lt;/h3&gt;

&lt;h4 id=&#34;refactoring-test-pm-http-groups-google-com-groups-threadm-ffec23e5c25f0424eb0e39e9005d8169-iinteractive-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=ffec23e5c25f0424eb0e39e9005d8169@iinteractive.com&#34;&gt;Refactoring &lt;em&gt;Test.pm&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little had an idea while he was refactoring &lt;em&gt;Test.pm&lt;/em&gt;. He wondered whether to get rid of the various &lt;code&gt;todo_*&lt;/code&gt; functions in favour of just using a &lt;em&gt;t/force_todo&lt;/em&gt; file. This led him to wonder about doing away with &lt;em&gt;t/force_todo&lt;/em&gt; in favour of a &lt;code&gt;force_todo()&lt;/code&gt; function. He asked for opinions before he started making the change (which isn&amp;rsquo;t exactly a refactoring).&lt;/p&gt;

&lt;p&gt;General opinion seemed favorable, though I confess to feeling perturbed by the proposed release trick of proclaiming all failures, whether expected or not, to be TODOs. The current system generates an explicit list of tests that fail on &amp;ldquo;core&amp;rdquo; systems. The proposed solution seems to make all failures equal, so as not to catch even unexpected &amp;ldquo;platform&amp;rdquo; failures.&lt;/p&gt;

&lt;h4 id=&#34;weird-thing-with-say-http-groups-google-com-groups-threadm-20050421083227-27464-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050421083227.27464.qmail@lists.develooper.com&#34;&gt;Weird Thing with &lt;code&gt;say ++$&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;What do you know, &lt;code&gt;say $i++, ++$i&lt;/code&gt; behaves weirdly.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-1-released-http-groups-google-com-groups-threadm-20050423225546-ga26560-aut-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050423225546.GA26560@aut.dyndns.org&#34;&gt;Pugs 6.2.1 Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the availability of Pugs 6.2.1 which comes complete with much shininess.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-language&#34;&gt;This Week in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;parrot-common-lisp-http-groups-google-com-groups-threadm-pine-lnx-4-62-0504141459030-32167-okcomputer-antiflux-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.62.0504141459030.32167@okcomputer.antiflux.org&#34;&gt;Parrot Common Lisp&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer&amp;rsquo;s port of Common Lisp to Parrot received much admiration (it has some way to go before it&amp;rsquo;s &lt;em&gt;really&lt;/em&gt; Common Lisp, but it&amp;rsquo;s a cracking start). Uwe Volker suggested porting Emacs to it, and Lars Balker Rasmussen promptly accused him of being Erik Naggum.&lt;/p&gt;

&lt;p&gt;Cory acquired (or is acquiring) a committer bit.&lt;/p&gt;

&lt;h4 id=&#34;state-of-the-tcl-http-groups-google-com-groups-threadm-4265dcd4-5060708-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4265DCD4.5060708@coleda.com&#34;&gt;State of the Tcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda gave the list a heads up on the state of ParTCL, the Parrot TCL port. It still fails some tests, apparently because of GC issues.&lt;/p&gt;

&lt;p&gt;A few days later, &lt;a href=&#34;http://groups.google.com/groups?threadm=426D8EFD.1020201@coleda.com&#34;&gt;these problems went away&lt;/a&gt;. We&amp;rsquo;re not quite sure how, though.&lt;/p&gt;

&lt;h4 id=&#34;alarm-and-later-http-groups-google-com-groups-threadm-200504200620-j3k6k4t02837-thu8-leo-home&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200504200620.j3K6K4T02837@thu8.leo.home&#34;&gt;&lt;code&gt;alarm()&lt;/code&gt; and &lt;code&gt;later()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo stated that Parrot provides subsecond timer resolution as well as alarm callbacks and multiple timers. Hurrah!&lt;/p&gt;

&lt;h4 id=&#34;rfc-assign-px-py-http-groups-google-com-groups-threadm-4268ad4f-2030708-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4268AD4F.2030708@toetsch.at&#34;&gt;RFC &lt;code&gt;assign Px, Py&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a discussion of the semantics of &lt;code&gt;assign&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, with a proposed change to PIR syntax. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;rfc-unary-operations-http-groups-google-com-groups-threadm-42691d77-6060808-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42691D77.6060808@toetsch.at&#34;&gt;RFC Unary Operations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In another RFC, Leo discussed changes to Parrot&amp;rsquo;s unary operators and proposed other changes.&lt;/p&gt;

&lt;h4 id=&#34;one-more-mmd-assignment-http-groups-google-com-groups-threadm-a06210215be8ed35f7f36-5b172-24-18-155-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06210215be8ed35f7f36@%5B172.24.18.155%5D&#34;&gt;One More MMD: Assignment&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan noted that he was writing a great deal of code in his &lt;code&gt;set_pmc&lt;/code&gt; vtable methods that looked very MMD-like. He suggested that adding assignment to the list of MMD functions might be a good idea. Leo pointed him at his assignment RFC.&lt;/p&gt;

&lt;h4 id=&#34;fun-with-morph-http-groups-google-com-groups-threadm-20050423220805-gq57402-plum-flirble-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050423220805.GQ57402@plum.flirble.org&#34;&gt;Fun with &lt;code&gt;morph()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered about the responsibilities of the &lt;code&gt;morph&lt;/code&gt; method with respect to handling &lt;code&gt;PMC_struct_val&lt;/code&gt;. In the subsequent discussion it became apparent that &lt;code&gt;morph&lt;/code&gt; can grow complicated. Bob Rogers supplied a bunch of extra complications and wondered about the feasibility of making Parrot morph-free. Leo agreed that it seemed feasible and is probably a good idea. Another subthread made my head hurt; I can understand this stuff much better when I sit &amp;lsquo;round a table with people and we have a plentiful supply of drinks, notepaper and, in Leo&amp;rsquo;s case, industrial quantities of tobacco. (Ah&amp;hellip; YAPC::Paris!)&lt;/p&gt;

&lt;h4 id=&#34;building-an-incomplete-code-generator-into-parrot-http-groups-google-com-groups-threadm-20050424011934-ey5ch49tavo08k0o-www-adampreble-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050424011934.ey5ch49tavo08k0o@www.adampreble.com&#34;&gt;Building An Incomplete Code Generator into Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;rocko@adampreble.com (that&amp;rsquo;s the only name I have) has started work on implementing a JIT backend for the AMD64 processor. He asked a few questions and Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;calling-convention-abstraction-http-groups-google-com-groups-threadm-426b5794-9010101-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=426B5794.9010101@toetsch.at&#34;&gt;Calling Convention Abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This thread continues to rumble on. Leo said that what he wants is for the HLL folks to create a workable scheme for abstract and extendable calling conventions that could express all the various HLL-specific semantics of function calling. He pointed out that unless we have this we can forget interoperability (or at least easy interoperability).&lt;/p&gt;

&lt;h4 id=&#34;alpha-development-box-http-groups-google-com-groups-threadm-17004-19419-780341-502435-rgrjr-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=17004.19419.780341.502435@rgrjr.dyndns.org&#34;&gt;Alpha Development Box&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers &amp;ldquo;has&amp;rdquo; an Alpha development box that open source projects can use. He wondered if the Parrot project could make use of it, and if so what was the best way of doing this. Some discussion occurred on the list, but I assume (hope) more happened offline.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&amp;hellip;&lt;/h3&gt;

&lt;h4 id=&#34;calling-junctions-of-closures-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-6062c2be978f857c-2b9510e197f06510-2b9510e197f06510&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/6062c2be978f857c/2b9510e197f06510#2b9510e197f06510&#34;&gt;Calling Junctions of Closures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman wondered about calling junctions of closures. He guessed that the rule is &amp;ldquo;call &amp;lsquo;em all and return a similarly structured junction&amp;rdquo;, but wasn&amp;rsquo;t sure. Thomas Sandlaß wasn&amp;rsquo;t so sure.&lt;/p&gt;

&lt;p&gt;My head hurts.&lt;/p&gt;

&lt;h4 id=&#34;autocomposition-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-28e2cc6fca25de34-8b4fdd6e574cc4f7-8b4fdd6e574cc4f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/28e2cc6fca25de34/8b4fdd6e574cc4f7#8b4fdd6e574cc4f7&#34;&gt;&lt;code&gt;{ =&amp;gt; }&lt;/code&gt; Autocomposition&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked about the following fragment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%ret = map { $_ =&amp;gt; uc $_ }, split &#39;&#39;, $text;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which give Pugs a massive headache.&lt;/p&gt;

&lt;p&gt;From the ensuing discussion, it appears to cause Larry and Autrijus headaches, too. Also, it turns out that Larry&amp;rsquo;s Perl 5 to Perl 5 translator has both madprops and madskills. Hurrah! Darren Duncan suggested that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%ret = map:{ $_ =&amp;gt; uc $_ }, split &#39;&#39;, $text;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should serve to say that the block is a block rather than a hash constructor. He thought that this came from one of the synopses, but couldn&amp;rsquo;t remember which.&lt;/p&gt;

&lt;p&gt;I wonder if:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%ret = map -&amp;gt; {$_ =&amp;gt; uc $_}, split &#39;&#39;, $text; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wouldn&amp;rsquo;t do the job. (Or did the syntax change on me when I wasn&amp;rsquo;t looking?)&lt;/p&gt;

&lt;h4 id=&#34;embedding-languages-in-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-e853d32e4575cf8d-52ba4d2059e88f36-52ba4d2059e88f36&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/e853d32e4575cf8d/52ba4d2059e88f36#52ba4d2059e88f36&#34;&gt;Embedding Languages in Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András had some questions about introducing different parsing rules in the middle of a Perl 6 program. Larry&amp;rsquo;s answer was essentially, &amp;ldquo;All&amp;rsquo;s fair if you predeclare&amp;rdquo;, but with an interesting idea about using &lt;code&gt;`&lt;/code&gt; as a way of introducing a &amp;ldquo;self-terminating construct&amp;rdquo;. So one could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use XML;

$a = `&amp;lt;elems&amp;gt;&amp;lt;elem&amp;gt;Content #1&amp;lt;/elem&amp;gt;&amp;lt;elem&amp;gt;Content #2&amp;lt;/elem&amp;gt;&amp;lt;/elems&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use SQL;

$a = `select * from table`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Various possibilities came up, but nothing set in stone.&lt;/p&gt;

&lt;h4 id=&#34;closure-block-sub-multiplier-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-0c06c8f07c23cab9-418c87f274eb32d2-418c87f274eb32d2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/0c06c8f07c23cab9/418c87f274eb32d2#418c87f274eb32d2&#34;&gt;Closure/Block/Sub Multiplier&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Creenan wondered about doing &lt;code&gt;@names = &amp;amp;get_next(...) XX 5;&lt;/code&gt; (which, obviously, would call &lt;code&gt;&amp;amp;get_next&lt;/code&gt; five times and shove the results into &lt;code&gt;@names&lt;/code&gt;). Juerd pointed out some subtleties to do with functions that return closures. Later in the thread he decided that he controlled both the horizontal and the vertical, with particular reference to redefining true, false, and undef.&lt;/p&gt;

&lt;h4 id=&#34;alarm-and-later-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-5ef4b7c6b01cd63a-79771d86e62deab4-79771d86e62deab4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/5ef4b7c6b01cd63a/79771d86e62deab4#79771d86e62deab4&#34;&gt;&lt;code&gt;alarm()&lt;/code&gt; and &lt;code&gt;later()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Remember the discussion of &lt;code&gt;alarm&lt;/code&gt; and &lt;code&gt;later&lt;/code&gt; in perl6-internals? It moved over to perl6-language. Larry agreed that Perl 6&amp;rsquo;s time interfaces will favor floating point time values, but he wasn&amp;rsquo;t quite sure if any of them will have the name &lt;code&gt;alarm&lt;/code&gt;. Discussion ensued, both on the topic and on matters of naming style.&lt;/p&gt;

&lt;h4 id=&#34;os-globals-etc-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-80ae35425a822162-56f8e74954c602af-56f8e74954c602af&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/80ae35425a822162/56f8e74954c602af#56f8e74954c602af&#34;&gt;&lt;code&gt;$?OS&lt;/code&gt; Globals, Etc.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Scott McWhirter proposed making the various &lt;code&gt;$?OS&lt;/code&gt;, etc. variables into attributes of some &lt;code&gt;GLOBAL&lt;/code&gt; class. Larry thought it was a good idea, but wasn&amp;rsquo;t sure it was entirely right as proposed. This area is still under design.&lt;/p&gt;

&lt;h4 id=&#34;parens-v-subroutine-parameter-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-10e17e64680febd3-78fc2e5d04f78df4-78fc2e5d04f78df4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/10e17e64680febd3/78fc2e5d04f78df4#78fc2e5d04f78df4&#34;&gt;Parens v. Subroutine Parameter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus had a question about how function signatures and various forms of paren magic interacted. He, Juerd, and Larry thrashed things out.&lt;/p&gt;

&lt;h4 id=&#34;x-s-auto-un-quoting-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-778dca4cf38a52d8-e4c3ebbcbd211977-e4c3ebbcbd211977&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/778dca4cf38a52d8/e4c3ebbcbd211977#e4c3ebbcbd211977&#34;&gt;&lt;code&gt;-X&lt;/code&gt;s Auto-(Un)quoting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi had some questions/suggestions about the various file test operators. Larry answered and the thread spun off into a discussion of all sorts of aspects of these handy operators. Well, that was before it turned into a discussion of the semantics of &lt;code&gt;&amp;lt;.foo&amp;gt;&lt;/code&gt;, or &lt;code&gt;^foo&lt;/code&gt;, or maybe &lt;code&gt;_foo&lt;/code&gt;, or possibly &lt;code&gt;....foo&lt;/code&gt;. At this point, things grew a little heated. There&amp;rsquo;s no decision yet. (Personally, I&amp;rsquo;m a fan of the scheme as originally proposed; &lt;code&gt;.foo&lt;/code&gt; calls the method foo on the current topic, whatever that may be. If you need to hang on to old topics, give them a name. I appear to be in something of a minority on this.)&lt;/p&gt;

&lt;h4 id=&#34;unify-cwd-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-c1ff319f1cf023f5-0b8ed8e97e51750a-0b8ed8e97e51750a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/c1ff319f1cf023f5/0b8ed8e97e51750a#0b8ed8e97e51750a&#34;&gt;Unify &lt;code&gt;cwd&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It turns out that the &amp;ldquo;current working directory&amp;rdquo; isn&amp;rsquo;t as obvious as it sounds. It also turns out that Larry would like to be able to pretend that it is until it turns out not to be.&lt;/p&gt;

&lt;h4 id=&#34;blocks-continuations-and-eval-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-28162cd4f259743f-62bfd7a95b2ea891-62bfd7a95b2ea891&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/28162cd4f259743f/62bfd7a95b2ea891#62bfd7a95b2ea891&#34;&gt;Blocks, Continuations, and &lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;When last we saw this thread, Larry had said that continuations would be available in Perl for people who ask specially, but that he wouldn&amp;rsquo;t leave them lying around in the open where &amp;ldquo;some poor benighted pilgrim might trip over them, unaware.&amp;rdquo; Wolverian asked what the interface would be. Larry thought it would probably start &lt;code&gt;use Continuations;&lt;/code&gt;, or possibly &lt;code&gt;use CONTINUATIONS;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The thread prompted Stéphane Payrard to ask about the possibility of some of the more &amp;ldquo;out there&amp;rdquo; functional programming tricks making it into Perl 6. Once again, all&amp;rsquo;s fair if you predeclare, but it looks like Perl 6 already has core access to some pretty &amp;ldquo;out there&amp;rdquo; stuff.&lt;/p&gt;

&lt;h4 id=&#34;accepted-abbreviations-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-cf451fce64f5edab-3287e24605f226ee-3287e24605f226ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/cf451fce64f5edab/3287e24605f226ee#3287e24605f226ee&#34;&gt;Accepted Abbreviations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if we could compile a list of standard abbreviations for various terms so as to apply them consistently. He kicked off with a list of his own. There was some discussion, but I somehow doubt that people will use his list rigorously.&lt;/p&gt;

&lt;h4 id=&#34;thunking-semantics-of-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-49ea270756fc9d7e-a78fa00a63a5c83a-a78fa00a63a5c83a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/49ea270756fc9d7e/a78fa00a63a5c83a#a78fa00a63a5c83a&#34;&gt;Thunking Semantics of &lt;code&gt;:=&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Once someone starts to implement a language, you have a wonderful driver for design decisions that need to be made and for finding ambiguities that need to be ironed out. On this occasion, Autrijus needed some clarification of the semantics of the binding operator, &lt;code&gt;:=&lt;/code&gt;. Now we have ironed out ambiguities and written implementations (and yes, I &lt;em&gt;do&lt;/em&gt; mean implementations.)&lt;/p&gt;

&lt;h4 id=&#34;for-all-foo-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-7b3afb5a9c87e76c-9b7675e43936ebd9-9b7675e43936ebd9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/7b3afb5a9c87e76c/9b7675e43936ebd9#9b7675e43936ebd9&#34;&gt;&lt;code&gt;for all(@foo) {...}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman had questions about the workings of &lt;code&gt;for all(@foo) {...}&lt;/code&gt; based on S03. It turns out that the Synopsis is wrong. Larry explained how it really should work (which is how it already works in Pugs).&lt;/p&gt;

&lt;h4 id=&#34;lazy-lists-mutable-arrays-garbage-collection-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-6fe93d9d27f26708-46b2356c2fc35b43-46b2356c2fc35b43&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/6fe93d9d27f26708/46b2356c2fc35b43#46b2356c2fc35b43&#34;&gt;Lazy Lists + Mutable Arrays + Garbage Collection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad also had questions about the workings of lazy lists. In particular, he wondered about treating streams as mutable arrays. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;map-uc-foo-again-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-abe0f2ac4794231e-677f8877530c2aee-677f8877530c2aee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/abe0f2ac4794231e/677f8877530c2aee#677f8877530c2aee&#34;&gt;&lt;code&gt;map { $_ =&amp;gt; uc $_ }, @foo&lt;/code&gt; Again&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus proposed a cunning plan to deal with the ambiguities inherent in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map { $_ =&amp;gt; uc $_ }, @foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by suggesting that using a block without the comma should force the interpretation of said block as a block rather than as a hash constructor. Larry wasn&amp;rsquo;t sure, arguing that it was best to disambiguate with something just before or just inside the block (in the same way that pattern modifiers now go before the pattern.)&lt;/p&gt;

&lt;h4 id=&#34;passing-hash-to-a-sub-expecting-named-params-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-b510cce894d07d9c-8a5a8d51f3dc378d-8a5a8d51f3dc378d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/b510cce894d07d9c/8a5a8d51f3dc378d#8a5a8d51f3dc378d&#34;&gt;Passing Hash to a Sub Expecting Named Params&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wondered if he could pass a splatted hash (&lt;code&gt;*%hash&lt;/code&gt;) to a function that expects named arguments. Answer: yep.&lt;/p&gt;

&lt;h4 id=&#34;turning-off-warnings-for-a-function-s-params-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-c9a4e0927b5c253c-643d8ed5c45ed6ab-643d8ed5c45ed6ab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/c9a4e0927b5c253c/643d8ed5c45ed6ab#643d8ed5c45ed6ab&#34;&gt;Turning Off Warnings For a Function&amp;rsquo;s Params?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Storrs wanted to be able to selectively turn off some warnings when he&amp;rsquo;s testing. He asked how to go about doing it. Luke and Juerd provided some answers.&lt;/p&gt;

&lt;h4 id=&#34;how-do-i-tie-hashes-arrays-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-4bf493833cdb0e0b-c6002e47cb602efa-c6002e47cb602efa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/4bf493833cdb0e0b/c6002e47cb602efa#c6002e47cb602efa&#34;&gt;How do I Tie Hashes/Arrays?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of how to tie hashes and arrays continued.&lt;/p&gt;

&lt;h4 id=&#34;surprising-consequences-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-a6c71df5881d333e-9b3f8e517837391f-9b3f8e517837391f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/a6c71df5881d333e/9b3f8e517837391f#9b3f8e517837391f&#34;&gt;Surprising consequences&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd worried that code like &lt;code&gt;if($foo) { say &#39;foo&#39;}&lt;/code&gt; would throw syntax errors. It turns out that one of his givens wasn&amp;rsquo;t quite as given as he thought, so it&amp;rsquo;s not a syntax error.&lt;/p&gt;

&lt;h4 id=&#34;calls-and-parens-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-fde913c5d15a013c-c01f77f5caa72bf1-c01f77f5caa72bf1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/fde913c5d15a013c/c01f77f5caa72bf1#c01f77f5caa72bf1&#34;&gt;Calls and Parens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd posted a set of examples of the new rules for parsing parentheses in function calls and asked which of his assumptions were wrong. Luke Palmer reassured him.&lt;/p&gt;

&lt;h4 id=&#34;context-and-index-expressions-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-c96c85ea8f511acc-c1f3e4b3bd643ee9-c1f3e4b3bd643ee9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/c96c85ea8f511acc/c1f3e4b3bd643ee9#c1f3e4b3bd643ee9&#34;&gt;Context and Index Expressions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a set of examples of array indexes and asked if he had all the contexts right. There was no answer at the time of this writing.&lt;/p&gt;

&lt;h3 id=&#34;hmm-still-fun-i-could-get-used-to-this&#34;&gt;Hmm&amp;hellip;still fun. I could get used to this.&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now that I&amp;rsquo;m back to writing stuff I&amp;rsquo;ll start updating it.&lt;/p&gt;

&lt;p&gt;There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos&lt;/a&gt; by me.&lt;/p&gt;

&lt;p&gt;See you all in a fortnight.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, April 4-11, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050410.html/</link>
      <pubDate>Thu, 14 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050410.html/</guid>
      <description>

&lt;p&gt;Whoa! Deja vu! Where&amp;rsquo;d Matt go?&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry, Matt&amp;rsquo;s still writing summaries. As you may have noticed, Matt&amp;rsquo;s been writing summaries every two weeks. Now so am I. Because we love you, we&amp;rsquo;ve decided to arrange things so I write summaries in the weeks when Matt doesn&amp;rsquo;t. We could do it the other way, but that some could see as self-defeating. Heck, when I say &amp;ldquo;some&amp;rdquo; I probably mean &amp;ldquo;all.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So bear with me while I remember how to type all those accented characters and get back into the swing of writing these things (and of reading everything in the mailing lists once more&amp;ndash;someone should write a summary for us summarizers).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be sticking to my old &amp;ldquo;lists in alphabetical order&amp;rdquo; scheme of writing summaries. Let&amp;rsquo;s get going.&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This Week in &lt;em&gt;perl6-compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;array-of-arrays-hash-of-hashes-elems-last-http-groups-google-com-groups-threadm-6-2-0-14-2-20050405083226-02fbc8a8-pop-pipeline-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=6.2.0.14.2.20050405083226.02fbc8a8@pop.pipeline.com&#34;&gt;Array of Arrays, Hash of Hashes, Elems, Last&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Lev Selector asked for confirmation that Pugs didn&amp;rsquo;t support compound data structures, &lt;code&gt;@ar.elems&lt;/code&gt;, or &lt;code&gt;@ar.last&lt;/code&gt;. Autrijus and others confirmed that they didn&amp;rsquo;t then, but they do now.&lt;/p&gt;

&lt;h4 id=&#34;makemaker6-stalls-on-takeoff-http-groups-google-com-groups-threadm-p06210202be7926b05de8-5b192-168-1-102-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=p06210202be7926b05de8@%5B192.168.1.102%5D&#34;&gt;MakeMaker6 Stalls on Takeoff&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan pointed out that while last week&amp;rsquo;s summary had claimed he was working on implementing MakeMaker in Perl 6, this is, sadly, not the case. He reckoned he&amp;rsquo;d possibly look into it again when he had tuits and Pugs was more complete (supporting objects, for instance).&lt;/p&gt;

&lt;h4 id=&#34;declaration-oddness-http-groups-google-com-groups-threadm-200504072344-18631-roiem-actcom-co-il&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200504072344.18631.roiem@actcom.co.il&#34;&gt;Declaration Oddness&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roie Marianer pointed out what looks like some weirdness in Pugs&amp;rsquo; parsing of lexically scoped subroutines. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;toronto-pugs-hackathon-http-groups-google-com-groups-threadm-20050407174040-ga26479-lupus-perlwolf-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050407174040.GA26479@lupus.perlwolf.com&#34;&gt;Toronto Pugs Hackathon&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;John Macdonald asked for people who wanted to come to the YAPC::NA Pugs hackathon to get in touch with him beforehand, as there is limited space. If you&amp;rsquo;re interested, drop him a line.&lt;/p&gt;

&lt;h4 id=&#34;pugs-slice-oddities-http-groups-google-com-groups-threadm-20050409104859-63926-qmail-web50803-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050409104859.63926.qmail@web50803.mail.yahoo.com&#34;&gt;Pugs Slice Oddities&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige noticed some weirdness in Pugs&amp;rsquo;s slicing behavior. He posted some example code showing the problem. Autrijus agreed that there was a problem and explained that he was in the process of rewriting all the variable types, symbol tables, and casting rules to agree with the Perl 5 model as described in &lt;em&gt;perltie.pod&lt;/em&gt;. The rewrite is currently failing tests, so he posted a patch for people who want to play. On Sunday, he bit the bullet and committed the entire 2500-line patch which &amp;ldquo;touches pretty much all evaluator code.&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://autrijus.org/tmp/itype.patch&#34;&gt;Autrijus&amp;rsquo;s Patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://use.perl.org/~autrijus/journal&#34;&gt;Autrijus on the patch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in &lt;em&gt;perl6-internals&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;tcl-unicode-http-groups-google-com-groups-threadm-42534227-7000005-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42534227.7000005@coleda.com&#34;&gt;Tcl, Unicode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda has been trying to add Unicode support to his Tcl implementation and he fell across issues with missing methods in &lt;em&gt;charset/unicode.h&lt;/em&gt;. Leo waved a magic wand and checked in an implementation that he fenced around with disclaimers.&lt;/p&gt;

&lt;h4 id=&#34;the-status-of-ponie-http-groups-google-com-groups-threadm-cdcef3714478b9d9e45d6571b17ce460-fotango-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=cdcef3714478b9d9e45d6571b17ce460@fotango.com&#34;&gt;The Status of Ponie&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark confessed that Ponie had stalled for some time, but sweetened the pill by announcing that it&amp;rsquo;s about to restart and that he will be able to allocate at least one day a week to the project. He pointed people at the &lt;a href=&#34;http://opensource.fotango.com/software/ponie/plan&#34;&gt;Ponie intro/roadmap&lt;/a&gt; that breaks down the required tasks between here and a first release, complete with time estimates. If you&amp;rsquo;re interested in getting Ponie to a ridable state, this is a good place to start.&lt;/p&gt;

&lt;p&gt;People were pleased.&lt;/p&gt;

&lt;h4 id=&#34;monthly-release-schedule-http-groups-google-com-groups-threadm-20050406222449-gs12946-perlsupport-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050406222449.GS12946@perlsupport.com&#34;&gt;Monthly Release Schedule&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip donned his &amp;ldquo;Fearless Leader&amp;rdquo; hat and announced that Parrot will move to a monthly release schedule (with an initial three-week &amp;ldquo;month&amp;rdquo; to get things into sync). There was some debate about whether Solaris/SPARC should be one of the officially required monthly release platforms (Darwin, &lt;code&gt;linux-x86-gcc3.*&lt;/code&gt;, and &lt;code&gt;win32-ms-cl&lt;/code&gt; were Chip&amp;rsquo;s initial blessed three). This morphed into a discussion of Tinderbox; apparently there are cool things happening behind the scenes.&lt;/p&gt;

&lt;h4 id=&#34;calling-convention-abstraction-http-groups-google-com-groups-threadm-20050407082131-24711-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050407082131.24711.qmail@lists.develooper.com&#34;&gt;Calling Convention Abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;What do you know? You go away for &lt;em&gt;n&lt;/em&gt; months and when you come back people are &lt;em&gt;still&lt;/em&gt; talking about calling conventions.&lt;/p&gt;

&lt;h4 id=&#34;dynamic-perl-part-1-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-54bef4c32fea8d8f-222d23c8b8d1f347&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/54bef4c32fea8d8f/222d23c8b8d1f347&#34;&gt;Dynamic Perl, Part 1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda announced that he was starting work on removing the core&amp;rsquo;s dependence on &lt;code&gt;Perl*&lt;/code&gt; PMCs in favor of using language-agnostic PMCs internally and loading the Perl ones dynamically as required. He dealt with everything but &lt;code&gt;PerlArray&lt;/code&gt; quickly and the list discussed names and ways forward with that tricky case. It looks like someone with tuits needs to add and write tests for some &lt;code&gt;vtable&lt;/code&gt; methods for &lt;code&gt;ResizablePMCArray&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;subversion-http-groups-google-com-groups-threadm-m3oecqrlm4-wl-rs-pobox-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=m3oecqrlm4.wl_rs@pobox.com&#34;&gt;Subversion&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Another discussion that wouldn&amp;rsquo;t go away back when I was last writing summaries has come to a head. Parrot&amp;rsquo;s finally migrating from CVS to Subversion. By the time you read this, Parrot&amp;rsquo;s main repository should be at &lt;a href=&#34;http://svn.perl.org/parrot&#34;&gt;svn.perl.org/parrot&lt;/a&gt;. Hurrah!&lt;/p&gt;

&lt;p&gt;There were, of course, &lt;a href=&#34;http://groups.google.com/groups?threadm=m34qeeqzzm.wl_rs@pobox.com&#34;&gt;wrinkles to iron out&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.parrotcode.org/source.html&#34;&gt;Getting started with subverted Parrot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;the-imcc-subdirectory-http-groups-google-com-groups-threadm-198c873805041115575359f54c-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873805041115575359f54c@mail.gmail.com&#34;&gt;The &lt;em&gt;imcc/&lt;/em&gt; Subdirectory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wondered if, now that IMCC has been integrated with Parrot, we really need the &lt;em&gt;imcc/&lt;/em&gt; subdirectory. He suggested that maybe its contents should be distributed about the rest of the Parrot directory structure. MrJoltCola (Melvin Smith?) thought it was best kept separate and thought of as a front end. Bernhard Schmalhofer pointed out PAST, another Parrot front end, and suggested that it may make sense to refactor &lt;em&gt;imcc/main.c&lt;/em&gt; into (he suggests) &lt;em&gt;src/main.c&lt;/em&gt; and &lt;em&gt;imcc/frontend.c&lt;/em&gt;, which would make the distinction rather clearer and provide an opportunity to clean up the exported symbols. Leo pretty much agreed with Melvin (no comment on Bernhard&amp;rsquo;s suggestions yet, though).&lt;/p&gt;

&lt;h4 id=&#34;perl-jobs-for-the-willing-http-groups-google-com-groups-threadm-425b900e-6050409-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=425B900E.6050409@toetsch.at&#34;&gt;Perl Jobs for the Willing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo looked for volunteers to rejig &lt;em&gt;t/src/manifest.t&lt;/em&gt; to use &lt;em&gt;.svn/Entries&lt;/em&gt; instead of &lt;em&gt;CVS/Entries&lt;/em&gt; when checking the &lt;em&gt;MANIFEST&lt;/em&gt;. Michael Schwern (possibly accidentally) volunteered.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in &lt;em&gt;perl6-language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A quick note about notation: I&amp;rsquo;ve started borrowing notation from Ruby/Smalltalk to discuss methods. Where I write &lt;code&gt;SomeClass#method&lt;/code&gt;, then I am referring to an instance method of &lt;code&gt;SomeClass&lt;/code&gt; and where I write &lt;code&gt;SomeClass.method&lt;/code&gt;, I am referring to a class method.&lt;/p&gt;

&lt;h4 id=&#34;identity-tests-and-comparing-two-references-http-groups-google-com-groups-threadm-42517043-1080204-orthogon-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=42517043.1080204@orthogon.com&#34;&gt;Identity Tests and Comparing Two References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;By heck, but I&amp;rsquo;ve not been keeping up.&lt;/p&gt;

&lt;p&gt;I started understanding what was going on when people started talking about implicit dereferencing of long chains of references. Larry&amp;rsquo;s saying that even if &lt;code&gt;$foo&lt;/code&gt; is a reference to a reference to a reference to a &amp;hellip; to &amp;ldquo;10,&amp;rdquo; then &lt;code&gt;$$foo&lt;/code&gt; will chase all the way along the reference chain and evaluate to &amp;ldquo;10.&amp;rdquo; The general response seemed to be, &amp;ldquo;Wah! How do I make it not do that?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050406183035.GB20211@wall.org&#34;&gt;How to help Larry&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;say-what-http-groups-google-com-groups-threadm-20050408060706-8683-qmail-web60801-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050408060706.8683.qmail@web60801.mail.yahoo.com&#34;&gt;&lt;code&gt;say&lt;/code&gt; What?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ovid wondered if &lt;code&gt;say&lt;/code&gt; (and &lt;code&gt;print&lt;/code&gt;, come to that) should default to printing the current topic. An initial hunt through the Perl 6 documents proved to be &amp;ldquo;like trying to sip through a firehose,&amp;rdquo; so he asked the list (and dropped a heavy hint about indexing the docs).&lt;/p&gt;

&lt;p&gt;According to Luke, it should default to the current topic.&lt;/p&gt;

&lt;h4 id=&#34;blocks-continuations-and-eval-http-groups-google-com-groups-threadm-20050408140311-gd21475-sci-fi&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050408140311.GD21475@sci.fi&#34;&gt;Blocks, Continuations, and &lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian&amp;rsquo;s been looking at the Perl 5 debugger and wondered if it would be possible to add an &lt;code&gt;eval&lt;/code&gt; method to objects that represent scopes. The idea is that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.eval &#39;say $foo&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would evaluate &lt;code&gt;say $foo&lt;/code&gt; with all of &lt;code&gt;$scope&lt;/code&gt;&amp;rsquo;s bindings, etc. in place. (I wonder what &lt;code&gt;$scope.eval &#39;return&#39;&lt;/code&gt; would do.) At least, that&amp;rsquo;s what &lt;em&gt;I&lt;/em&gt; think he meant. Others asked for clarification. Wolverian also wanted to know how to get hold of a scope&amp;rsquo;s continuation (or at least the current continuation). Larry has in the past said that he wouldn&amp;rsquo;t expose continuations in the core language. Others have noted that it wouldn&amp;rsquo;t be beyond the bounds of possibility to write a Parrot-level module which would expose them, though.&lt;/p&gt;

&lt;h4 id=&#34;questions-on-pair-kv-http-groups-google-com-groups-threadm-f773baa01367af7f6305d2d9624ae684-iinteractive-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=f773baa01367af7f6305d2d9624ae684@iinteractive.com&#34;&gt;Questions on &lt;code&gt;$pair.kv&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little had some questions about the behavior of the &lt;code&gt;Pair#kv&lt;/code&gt; method. Luke came through with the answer (&amp;ldquo;when all else fails, consider the pair to be a one-element hash&amp;rdquo;).&lt;/p&gt;

&lt;h4 id=&#34;managing-pleac-http-groups-google-com-groups-threadm-20050410030004-16112-qmail-web60805-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050410030004.16112.qmail@web60805.mail.yahoo.com&#34;&gt;Managing PLEAC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Prompted by a suggestion from Tim Bunce, Ovid started porting the examples in the Perl Cookbook into &lt;a href=&#34;http://svn.openfoundry.org/pugs/examples/cookbook/&#34;&gt;idiomatic Perl 6&lt;/a&gt;. He asked for comments and suggestions on how to proceed.&lt;/p&gt;

&lt;p&gt;Marcus Adair proposed, and Luke Palmer strongly seconded, moving the development of the code onto a mediawiki (wikipedia)-style Wiki that has good support for &amp;ldquo;offline&amp;rdquo; discussion of code as it develops. Autrijus reckoned that his current practice of handing out SVN committer bits to anyone who expressed an interest and leaving discussion in the files themselves seems to be working pretty well so far. He pointed at &lt;a href=&#34;http://pugs.kwiki.org/&#34;&gt;pugs.kwiki.org&lt;/a&gt;, though.&lt;/p&gt;

&lt;h4 id=&#34;collaborative-synopses-http-groups-google-com-groups-threadm-20050410104626-ga11509-ttul-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050410104626.GA11509@ttul.org&#34;&gt;Collaborative Synopses&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bryan Ingerson posted a preliminary cut of Synopsis 26 and asked for comments. Yuval Kogman pointed out that the &lt;a href=&#34;http://svn.openfoundry.org/pugs/docs/&#34;&gt;&lt;em&gt;docs/&lt;/em&gt; subdirectory of the Pugs distribution&lt;/a&gt; is filled with documentation that needed proofreading and nitpicking. Go to it, people.&lt;/p&gt;

&lt;h4 id=&#34;aliasing-swapped-values-http-groups-google-com-groups-threadm-20050410174751-88219-qmail-web60805-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050410174751.88219.qmail@web60805.mail.yahoo.com&#34;&gt;Aliasing Swapped Values&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ovid wondered what:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;($x,$y) := ($y, $x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would do.&lt;/p&gt;

&lt;p&gt;Juerd reckoned the answer is straightforward, and I must say I agree with him.&lt;/p&gt;

&lt;h4 id=&#34;string-chars-in-a-list-context-http-groups-google-com-groups-threadm-fb07797705041111035357ff89-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=fb07797705041111035357ff89@mail.gmail.com&#34;&gt;&lt;code&gt;String#chars&lt;/code&gt; in a List Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Marcus Adair argued that it seems natural that &lt;code&gt;String#chars&lt;/code&gt;, when used in a list context, should return a list of the Unicode chars in the string. Opinion seemed to favor the idea, but there&amp;rsquo;s been no ruling from Larry (or anyone else on the Design Team).&lt;/p&gt;

&lt;h4 id=&#34;whither-use-english-http-groups-google-com-groups-threadm-200541194433-231936-gatewaym275&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200541194433.231936@GatewayM275&#34;&gt;Whither &lt;code&gt;use English&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Vergin wondered if Perl 6 would have an equivalent of &lt;code&gt;use English&lt;/code&gt;, which will give sensible names to the various magic globals (those that still exist, least). The answer: yes and no. There will be no &lt;em&gt;English.pm&lt;/em&gt; module, but the magic globals will all have English names by default.&lt;/p&gt;

&lt;h4 id=&#34;heredocs-and-their-workings-http-groups-google-com-groups-threadm-fb07797705041117364d084d8e-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=fb07797705041117364d084d8e@mail.gmail.com&#34;&gt;Heredocs and Their Workings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Marcus Adair wondered about the use of Heredocs as positional parameters. Luke confirmed that they should work just like they do in Perl 5, modulo minor matters of spelling (now &lt;code&gt;qq::to/END/&lt;/code&gt;, etc.) and whitespace removal.&lt;/p&gt;

&lt;h4 id=&#34;slicing-conflict-http-groups-google-com-groups-threadm-20050412063042-ga29831-navi-cx&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20050412063042.GA29831@navi.cx&#34;&gt;Slicing Conflict&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke pointed out that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @a = (1,2,3,4);
my @b = @a[1...];
say +@b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is potentially problematic (he argues it should print &amp;ldquo;3&amp;rdquo;, but Perl 5 semantics imply that it should print &amp;ldquo;Inf&amp;rdquo;). He proposed breaking with the Perl 5 way. Autrijus agreed with him and has implemented his proposal in Pugs.&lt;/p&gt;

&lt;h3 id=&#34;coo-that-was-fun-i-think-i-ll-do-it-again-some-time&#34;&gt;Coo&amp;ndash;That Was Fun, I Think I&amp;rsquo;ll Do It Again Some Time&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;. Maybe now that I&amp;rsquo;m back writing stuff, I&amp;rsquo;ll start updating it. There are also &lt;a href=&#34;http://www.flickr.com/photos/pdcawley&#34;&gt;vaguely pretty photos by me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s quite enough shameless self-promotion. See you in two weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-09-24</title>
      <link>http://localhost:1313/pub/2004/09/p6pdigest/20040926.html/</link>
      <pubDate>Tue, 28 Sep 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/09/p6pdigest/20040926.html/</guid>
      <description>

&lt;h2 id=&#34;the-perl-6-summary-for-the-week-ending-2004-09-24&#34;&gt;The Perl 6 Summary for the week ending 2004-09-24&lt;/h2&gt;

&lt;p&gt;This is my last summary before I start my teaching practice. Hopefully I&amp;rsquo;ve things set up so writing the summary isn&amp;rsquo;t going to interfere with that, and vice versa.&lt;/p&gt;

&lt;h2 id=&#34;this-week-in-perl6-compiler&#34;&gt;This week in perl6-compiler&lt;/h2&gt;

&lt;h3 id=&#34;state-of-rules&#34;&gt;State of Rules&lt;/h3&gt;

&lt;p&gt;Discussion of the state of the Perl 6 compiler (with particular reference to the rules engine) continued. People wanted to make sure that the rules engine that Luke and Patrick are working on would be flexible enough to cope with different languages in closures.&lt;/p&gt;

&lt;h3 id=&#34;synopsis-5-updated-http-groups-google-com-groups-threadm-20040920215812-ga9454-mdssdev05&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040920215812.GA9454@mdssdev05&#34;&gt;Synopsis 5 updated&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ed Peschko asked that there be some way of &amp;ldquo;turning the rules engine inside out&amp;rdquo; to make something which, given a rule, would generate strings that could match against it. Actually, this is the second time Ed asked for this, as Luke reminded him. Luke went on to implement a generator in hypothetical perl 6, which seemed to please everyone but Ed.&lt;/p&gt;

&lt;p&gt;Rod Adams wins the &amp;ldquo;making the summarizer smile wryly&amp;rdquo; occasional prize.&lt;/p&gt;

&lt;h2 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in perl6-internals&lt;/h2&gt;

&lt;h3 id=&#34;problems-reimplementing-parrot-forth-http-groups-google-com-groups-threadm-198c873804091714515c11197d-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873804091714515c11197d@mail.gmail.com&#34;&gt;Problems Reimplementing Parrot Forth&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Matt Diephouse fell afoul of problems with the &lt;code&gt;compile&lt;/code&gt; and &lt;code&gt;compreg&lt;/code&gt; opcodes in his efforts to reimplement Parrot Forth in PIR. Steve Fink made some suggestions for workarounds based on his work on writing a regular expression compiler.&lt;/p&gt;

&lt;p&gt;From further discussion, it seems that, if you&amp;rsquo;re implementing a stack based language, you&amp;rsquo;d do well to manage the language&amp;rsquo;s stack yourself rather than using Parrot&amp;rsquo;s User stack which is interestingly scoped.&lt;/p&gt;

&lt;h3 id=&#34;init-not-being-magically-called-http-groups-google-com-groups-threadm-414d3726-1070103-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=414D3726.1070103@coleda.com&#34;&gt;&lt;code&gt;__init&lt;/code&gt; not being magically called&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Will Coleda had some problems with a class&amp;rsquo;s &lt;code&gt;__init&lt;/code&gt; function not being called magically. Nobody else could reproduce the problem. After a certain amount of confusion, Will did &lt;code&gt;make realclean; perl Configure.pl; make; make test&lt;/code&gt; and all was well again.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re experiencing a weird problem, it&amp;rsquo;s probably best to do the rebuild before posting to the list. Or you could fix the build system to have more accurate dependencies&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;incremental-collector-and-finalization-http-groups-google-com-groups-threadm-002f1a0f-0ac3-11d9-8600-000393a6b9da-mac-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=002F1A0F-0AC3-11D9-8600-000393A6B9DA@mac.com&#34;&gt;Incremental collector and finalization&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Clites had some questions about how finalizers interact with the work that Leo&amp;rsquo;s done while implementing an incremental garbage collector for Parrot. Leo had some thoughts, but noted that there&amp;rsquo;s still a problem with ordered finalization and destruction.&lt;/p&gt;

&lt;p&gt;[Your summarizer is really starting to understand why old school GC types really don&amp;rsquo;t like finalizers&amp;hellip;]&lt;/p&gt;

&lt;h3 id=&#34;python-bytecode-volunteers-http-groups-google-com-groups-threadm-a06110401bd74d011bd71-5b10-0-1-5-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110401bd74d011bd71@%5B10.0.1.5%5D&#34;&gt;Python bytecode volunteers&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Dan asked for volunteers to finish the task of getting Python bytecode working on Parrot; he reckoned that the work was mostly done, but that neither he nor Leo have the time to go the last couple of yards.&lt;/p&gt;

&lt;p&gt;Come on people, this would definitely be a cool thing to have.&lt;/p&gt;

&lt;h3 id=&#34;mod-parrot-0-0-http-groups-google-com-groups-threadm-pine-lnx-4-44-0409201512210-7974-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0409201512210.7974-100000@booger.sixgeeks.org&#34;&gt;mod_parrot 0.0&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Horwitz announced the release of version 0.0 of his mod_parrot Apache module. It&amp;rsquo;s remarkably powerful for version 0.0.&lt;/p&gt;

&lt;h3 id=&#34;the-compile-op-and-building-compilers-http-groups-google-com-groups-threadm-a06110405bd750b80ab4a-5b10-0-1-5-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110405bd750b80ab4a@%5B10.0.1.5%5D&#34;&gt;The &lt;code&gt;compile&lt;/code&gt; op and building compilers&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Dan had some thoughts on tidying up the spec for the &lt;code&gt;compreg&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt; operators and asked for comments before he nailed the spec down. Steve Fink and Leo had comments.&lt;/p&gt;

&lt;h3 id=&#34;misc-remarks-about-yapc-eu-http-groups-google-com-groups-threadm-4150301e-7050409-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4150301E.7050409@toetsch.at&#34;&gt;Misc. remarks about YAPC::EU&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Leo popped up to thank everyone who&amp;rsquo;d donated to The Perl Foundation and thus supported the purchase of shiny new Apple Powerbook G4 that he&amp;rsquo;d used to run his presentation at YAPC Europe in Belfast.&lt;/p&gt;

&lt;p&gt;He went on to outline some of the things he&amp;rsquo;d done and heard in Belfast, including the fact that one French teacher is using Parrot for teaching assembly language.&lt;/p&gt;

&lt;h3 id=&#34;parrot-m4-0-0-8-http-groups-google-com-groups-threadm-rt-3-0-11-31659-96593-15-6775143505678-perl-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-31659-96593.15.6775143505678@perl.org&#34;&gt;Parrot m4 0.0.8&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Bernhard Schmalhofer announced version 0.0.8 of Parrot m4. There&amp;rsquo;s no new functionality, &amp;ldquo;just&amp;rdquo; some structural improvement and tidying.&lt;/p&gt;

&lt;h3 id=&#34;parrot-tcl-http-groups-google-com-groups-threadm-41517393-30204-coleda-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41517393.30204@coleda.com&#34;&gt;Parrot TCL&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Will Coleda posted a progress report on his Parrot TCL implementation which is progressing gradually towards being a full blown TCL implementation; he&amp;rsquo;s working towards using special Tcl* PMCs with real TCL semantics instead of the current scheme which uses Perl PMCs.&lt;/p&gt;

&lt;h3 id=&#34;namespaces-part-1&#34;&gt;Namespaces, Part 1&lt;/h3&gt;

&lt;p&gt;Dan posted the first part of his Namespaces spec. There was, of course, much discussion. Inevitably, there was another revision, and further discussion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110415bd77687142d1@%5B10.0.1.5%5D&#34;&gt;Dan&amp;rsquo;s initial post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040fbd7a051cf273@%5B172.24.18%0A.155%5D&#34;&gt;The revised version&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;towards-a-new-call-scheme-http-groups-google-com-groups-threadm-4152da7e-1050603-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4152DA7E.1050603@toetsch.at&#34;&gt;Towards a new call scheme&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Leo posted an overview of the work he was doing on Parrot&amp;rsquo;s internals to put a faster calling scheme in place (as discussed endlessly). The usual perl6-internals discussion and revision process swung into action.&lt;/p&gt;

&lt;h3 id=&#34;hello-everybody-http-groups-google-com-groups-threadm-25961bc4-0df4-11d9-bef3-000393bbda08-dil-univ-mrs-fr&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=25961BC4-0DF4-11D9-BEF3-000393BBDA08@dil.univ-mrs.fr&#34;&gt;Hello everybody&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Remember the French teacher that Leo mentioned? Well, the man himself, Christian Aperghis-Tramoni, popped up on the list and pointed everyone at his work so far, and asked for help in finding more information.&lt;/p&gt;

&lt;p&gt;If anyone would like to translate Christian&amp;rsquo;s work from French to English&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;bits-of-introspection-http-groups-google-com-groups-threadm-41540125-3070401-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41540125.3070401@toetsch.at&#34;&gt;Bits of introspection&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Leo announced that he&amp;rsquo;d started work on adding more introspection features to Parrot, accessible through the &lt;code&gt;interpinfo&lt;/code&gt; op. This looks very cool.&lt;/p&gt;

&lt;h3 id=&#34;why-lexical-pads-http-groups-google-com-groups-threadm-41542942-5080304-home-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41542942.5080304@home.nl&#34;&gt;Why lexical pads&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Klaas-Jan wondered why Parrot had support for lexical pads, as he thought that PIR&amp;rsquo;s &lt;code&gt;.local&lt;/code&gt; syntax was good enough.&lt;/p&gt;

&lt;p&gt;Several people explained. Essentially, lexical pads are &lt;code&gt;really&lt;/code&gt; handy, bordering on the essential, when you&amp;rsquo;re implementing a language with closures.&lt;/p&gt;

&lt;h2 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h2&gt;

&lt;h3 id=&#34;in-brief&#34;&gt;In Brief&lt;/h3&gt;

&lt;p&gt;Discussion of various synopses continued.&lt;/p&gt;

&lt;p&gt;Larry can be very persuasive when he&amp;rsquo;s right.&lt;/p&gt;

&lt;p&gt;Michele Dondi is a chap. (See last week&amp;rsquo;s question.)&lt;/p&gt;

&lt;p&gt;Trying to run a thread across multiple mailing lists is the sort of thing that annoys a summarizer.&lt;/p&gt;

&lt;p&gt;You have to write something before it goes in the core.&lt;/p&gt;

&lt;p&gt;Patrick hopes to have a first cut at the Perl 6 rules engine available within a couple of weeks.&lt;/p&gt;

&lt;h3 id=&#34;pipeline-performance-http-groups-google-com-groups-threadm-d60j42vy-fsf-jonadab-homeip-net&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=d60j42vy.fsf@jonadab.homeip.net&#34;&gt;Pipeline Performance&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Luke showed off Perl 6&amp;rsquo;s little known &lt;code&gt;gather {...; take ... }&lt;/code&gt; construct in some example code. People were impressed.&lt;/p&gt;

&lt;h3 id=&#34;unary-dot-and-custom-control-http-groups-google-com-groups-threadm-20040920132514-ga11388-babylonia-flatirons-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040920132514.GA11388@babylonia.flatirons.org&#34;&gt;Unary dot and custom control&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Luke Palmer wondered about topicalization and scope in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    method foo () {
        preserve {
            .bar;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In particular, he hoped that the topic that &lt;code&gt;.bar&lt;/code&gt; sees is the topic that&amp;rsquo;s lexically current.&lt;/p&gt;

&lt;p&gt;Larry set his mind to rest. (Well, he set my mind to rest).&lt;/p&gt;

&lt;h3 id=&#34;attributes-methods-on-sigils-http-groups-google-com-groups-threadm-pine-lnx-4-60-0409211313430-18712-q-pcteor1-mi-infn-it&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.60.0409211313430.18712@q.pcteor1.mi.infn.it&#34;&gt;attributes/methods on sigils&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Michele Dondi wondered if sigils could be &amp;ldquo;(sort of special) operators &amp;hellip; thus allowing attributes/methods or even adverbs&amp;rdquo;. Larry&amp;rsquo;s response was superbly deadpan.&lt;/p&gt;

&lt;h2 id=&#34;the-usual-footer&#34;&gt;The usual footer&lt;/h2&gt;

&lt;p&gt;Hmm&amp;hellip; maybe I should trying doing the perl6-language summary like that every week; it&amp;rsquo;s certainly quicker to write like that. Let me know what you think.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a &lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;getting Piers to OSCON 2005 fund&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-09-17</title>
      <link>http://localhost:1313/pub/2004/09/p6pdigest/20040917.html/</link>
      <pubDate>Thu, 23 Sep 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/09/p6pdigest/20040917.html/</guid>
      <description>

&lt;p&gt;Another week, another summary, and I&amp;rsquo;m running late. So:&lt;/p&gt;

&lt;h3 id=&#34;this-week-in-perl6-compiler&#34;&gt;This week in perl6-compiler&lt;/h3&gt;

&lt;h4 id=&#34;the-current-state-of-the-compiler&#34;&gt;The current state of the compiler&lt;/h4&gt;

&lt;p&gt;Discussion of the current state of the nascent perl 6 compiler and how best to contribute to its development even before code has been released continued. The best way to contribute right now is &amp;ldquo;Write tests&amp;rdquo;. Don&amp;rsquo;t worry about what the test harness should look like; simple tables of rules, test strings and expected matches will be very welcome.&lt;/p&gt;

&lt;p&gt;The status discussion also touched on how to handle different languages in the closures embedded in rules.&lt;/p&gt;

&lt;h4 id=&#34;bootstrapping-the-grammar-http-groups-google-com-groups-threadm-x7u0u0yfpr-fsf-mail-sysarch-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=x7u0u0yfpr.fsf@mail.sysarch.com&#34;&gt;Bootstrapping the grammar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Uri Guttman had some thoughts on bootstrapping Perl 6&amp;rsquo;s grammar. He hoped that his suggested approach would enable lots of people to work on the thing at once without necessarily getting in each other&amp;rsquo;s way. Adam Turoff pointed everyone at a detailed description of how Squeak (a free Smalltalk) got bootstrapped.&lt;/p&gt;

&lt;h4 id=&#34;synopsis-5-updated-http-groups-google-com-groups-threadm-20040915062208-ga22692-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040915062208.GA22692@wall.org&#34;&gt;Synopsis 5 updated&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry announced that he has updated &lt;a href=&#34;http://dev.perl.org/perl6/synopsis/S05.html&#34;&gt;Synopsis 5&lt;/a&gt;, which covers Grammars, rules and all that good stuff. It&amp;rsquo;s now only a week out of date instead of two years and counting.&lt;/p&gt;

&lt;h3 id=&#34;this-week-on-perl6-internals&#34;&gt;This week on perl6-internals&lt;/h3&gt;

&lt;h4 id=&#34;namespaces-http-groups-google-com-groups-threadm-a06110405bd636771e587-5b10-0-1-2-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110405bd636771e587@%5B10.0.1.2%5D&#34;&gt;Namespaces&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Discussion of Dan&amp;rsquo;s namespace proposal really got going this week.&lt;/p&gt;

&lt;h4 id=&#34;buffered-io-and-parrot-forth-http-groups-google-com-groups-threadm-198c873804091021003cd8d12e-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873804091021003cd8d12e@mail.gmail.com&#34;&gt;Buffered IO and Parrot Forth&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse fell afoul of a problem with IO buffering when he was taking a look at Parrot Forth, so he asked the list for help. Leo supplied the help, so Matt supplied a patch to Parrot Forth which made it print its prompts correctly when run under modern (CVS) Parrot.&lt;/p&gt;

&lt;h4 id=&#34;pragma-load-is-not-always-honoured-http-groups-google-com-groups-threadm-20040913003027-ga29524-stefp-dyndns-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040913003027.GA29524@stefp.dyndns.org&#34;&gt;Pragma &lt;code&gt;@LOAD&lt;/code&gt; is not always honoured&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stéphane Payrard was bemused to discovered that parrot routines declared with the &lt;code&gt;@LOAD&lt;/code&gt; pragma don&amp;rsquo;t automatically execute if they&amp;rsquo;re in the main segment. He suggested that the issue be either fixed or documented.&lt;/p&gt;

&lt;p&gt;Leo documented it.&lt;/p&gt;

&lt;h4 id=&#34;nci-basics&#34;&gt;NCI basics&lt;/h4&gt;

&lt;p&gt;Charles Somebody tried to crash the monomonikered big leagues by failing to vouchsafe his surname when he posted a question about &lt;a href=&#34;http://groups.google.com/groups?threadm=20040915082722.C5B2F17856F@mail.t0c.de&#34;&gt;getting NCI to work with wxWindows&lt;/a&gt;. For reasons that escape me, the answers (and, indeed, Charles&amp;rsquo;s surname — Lowell) appeared in a different thread.&lt;/p&gt;

&lt;p&gt;Sadly the answers were more along the lines of &amp;ldquo;&lt;a href=&#34;http://groups.google.com/groups?threadm=200409151417.48823.parrot@jensbeimsurfen.de&#34;&gt;Oops, that&amp;rsquo;s a bug that is, we&amp;rsquo;ll add it to the RT queue&lt;/a&gt;&amp;rdquo;. Still, better to have it identified than festering away undiscovered.&lt;/p&gt;

&lt;h4 id=&#34;language-zcode-http-groups-google-com-groups-threadm-20040915044057-68837-qmail-web40702-mail-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040915044057.68837.qmail@web40702.mail.yahoo.com&#34;&gt;Language::Zcode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Who says Perl 6 is the only language that&amp;rsquo;s taking a long time to appear on Parrot? Amir Karger posted his first annual update on his attempt to get Parrot to emulate the Z-machine. Hopefully subsequent updates will be more frequent.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;ordinals-hashes-and-arrays-oh-my-http-groups-google-com-groups-threadm-plato-a8e818-17472910092004-x6-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=plato-A8E818.17472910092004@x6.develooper.com&#34;&gt;Ordinals, Hashes and Arrays, oh my!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Green had some thoughts on Perl 6&amp;rsquo;s compound data structures. Larry didn&amp;rsquo;t sound convinced.&lt;/p&gt;

&lt;h4 id=&#34;writing-pack-or-something-like-it-http-groups-google-com-groups-threadm-pine-lnx-4-58-0409141202210-23717-q-pcteor1-mi-infn-it&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.58.0409141202210.23717@q.pcteor1.mi.infn.it&#34;&gt;Writing &lt;code&gt;pack&lt;/code&gt;, or something like it&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi wondered how to write &lt;code&gt;pack&lt;/code&gt;-like functions in Perl 6, where the first argument is a string which specifies the signature of the rest of the function call. The proposal stumped me, but maybe you all can make something of it.&lt;/p&gt;

&lt;h4 id=&#34;but-is-it-intuitive-http-groups-google-com-groups-threadm-4146e6d7-1020102-yahoo-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4146E6D7.1020102@Yahoo.com&#34;&gt;But is it intuitive?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;No it isn&amp;rsquo;t.&lt;/p&gt;

&lt;h4 id=&#34;s5-grammar-compositions-http-groups-google-com-groups-threadm-20040915175111-10763-qmail-lists-develooper-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040915175111.10763.qmail@lists.develooper.com&#34;&gt;S5 Grammar compositions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;While peacefully reading Synopsis 5 (Rules &amp;amp; Grammars), Dave Whipp noticed that grammatical inheritance wasn&amp;rsquo;t as flexible as the Role based compositions that can be used when working with classes. Larry wondered allowed about having grammar roles, but I don&amp;rsquo;t think they&amp;rsquo;ve been officially mandated yet&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;still-about-subroutines-http-groups-google-com-groups-threadm-pine-lnx-4-58-0409161635210-24252-leia-pcteor1-mi-infn-it&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.58.0409161635210.24252@leia.pcteor1.mi.infn.it&#34;&gt;Still about subroutines&amp;hellip;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi continues to make my head hurt with zir proposals. In part it&amp;rsquo;s because I&amp;rsquo;ve still not worked out whether zie is male or female, and in part because, well, zir proposals are challenging. In this particular proposal zie wondered if there would be a way to magically write recursive anonymous functions without having to introduce a new symbol of some sort.&lt;/p&gt;

&lt;p&gt;Luke and Larry think there will be such a way, but the precise syntax hasn&amp;rsquo;t settled just yet.&lt;/p&gt;

&lt;h4 id=&#34;range-quantifier-woes-http-groups-google-com-groups-threadm-20040917145714-gb9174-pobox-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040917145714.GB9174@pobox.com&#34;&gt;Range quantifier woes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Scott Duff wasn&amp;rsquo;t happy with the new range quantifier syntax in Synopsis 5. He posted a bunch of questions that were nagging at him. Larry had some good answers (if you&amp;rsquo;re interested in contributing to the design of Perl 6 you should &lt;em&gt;really&lt;/em&gt; read Larry&amp;rsquo;s replies).&lt;/p&gt;

&lt;h3 id=&#34;announcements-apologies-acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/h3&gt;

&lt;p&gt;And so ends another summary. I hope you liked it. Sorry for the delay if you&amp;rsquo;re reading this on the mailing list; this teacher training malarkey is remarkably tiring.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a getting &lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;Piers to OSCON 2005 fund&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my web site&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-09-10</title>
      <link>http://localhost:1313/pub/2004/09/p6pdigest/20040910.html/</link>
      <pubDate>Thu, 16 Sep 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/09/p6pdigest/20040910.html/</guid>
      <description>

&lt;h3 id=&#34;this-week-on-perl6-compiler&#34;&gt;This week on perl6-compiler&lt;/h3&gt;

&lt;p&gt;Yes you read that right; development of the Perl 6 compiler now has its own mailing list. Hopefully, in the coming weeks, the current perl6-internals list will get renamed parrot-internals to reflect that split.&lt;/p&gt;

&lt;p&gt;As I write this, groups.google.com hasn&amp;rsquo;t picked up the new list, but I&amp;rsquo;m sure it will do eventually, so I&amp;rsquo;m going to continue to use Google URLs here on the theory that they&amp;rsquo;ll work eventually. If you&amp;rsquo;re desperate to read the whole threads before then, start at &lt;a href=&#34;http://www.nntp.perl.org/group/perl.perl6.compiler/&#34;&gt;perl6-compiler on Perl.org&lt;/a&gt; — there&amp;rsquo;s all of 35 messages there as I type this&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;bundles-http-groups-google-com-groups-threadm-413e2ab4-2070107-lmco-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=413E2AB4.2070107@lmco.com&#34;&gt;Bundles&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a thread that migrated over from perl6-language Gregory Keeney continued discussion of whether Perl 6 will/should have an officially blessed bundling system, or whether it should simply have good enough hooks that someone could write one. There was some discussion about whether perl6-compiler is actually the correct list for the discussion&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;current-state-http-groups-google-com-groups-threadm-c1b5821504090803483f528a3d-mail-gmail-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=c1b5821504090803483f528a3d@mail.gmail.com&#34;&gt;Current state?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Herbert Snorrason wondered what state the Perl 6 compiler was in. (I think we all did to be honest, but Herbert got to ask the question.)&lt;/p&gt;

&lt;p&gt;Patrick said that he and Luke (I think) are at the beginning stages of building a basic perl 6 grammar engine that compiles to parrot and handles some basic optimizations. In tandem with that, Patrick was also working on writing a Perl 6 grammar. The plan is (and no plan survives contact with the enemy) to get a working basic grammar engine up in the next month or so then use that to build the Perl 6 parser.&lt;/p&gt;

&lt;p&gt;As soon as there&amp;rsquo;s code, announcements will be made in all the right places (and who knows? maybe even on Slashdot).&lt;/p&gt;

&lt;p&gt;If you want to help with the process of writing the grammar engine, your best bet (at least until there&amp;rsquo;s some running code) is to snag the appropriate apocalypse and use that to write tests and post &amp;lsquo;em to the list.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-internals&#34;&gt;Meanwhile, in perl6-internals&lt;/h3&gt;

&lt;h4 id=&#34;fix-ops-http-groups-google-com-groups-threadm-4137507f-5010606-toetsch-at&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4137507F.5010606@toetsch.at&#34;&gt;Fix ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week Leo had discussed unhooked ops without definite opcode numbers and asked for comments on what to do with them. Apparently Dan finds many of the boolean functions useful, so they&amp;rsquo;re going to be kept, probably hidden behind a namespace, once we know how namespaces work.&lt;/p&gt;

&lt;h4 id=&#34;perl-free-configuration-http-groups-google-com-groups-threadm-a06110402bd6243597a07-5b10-0-1-2-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110402bd6243597a07@%5B10.0.1.2%5D&#34;&gt;Perl free configuration&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Right now, Parrot&amp;rsquo;s configuration system palms off a lot of the work to the local Perl installation by querying the perl config. Which isn&amp;rsquo;t ideal in the long run. So Dan suggested that now&amp;rsquo;s the time to make a list of what info configure.pl grabs from the perl installation and instead to write(appropriate) probing code ourselves so we can do perl-free configuration. The usual &amp;ldquo;autoconf!&amp;rdquo; &amp;ldquo;No! Metaconfig!&amp;rdquo; &amp;ldquo;No! Something else entirely!&amp;rdquo; discussion occurred. (For the record, Dan seems to favour the &amp;ldquo;something else entirely&amp;rdquo; option).&lt;/p&gt;

&lt;p&gt;The bike shed remains unpainted.&lt;/p&gt;

&lt;h4 id=&#34;oh-my-minesweeper-http-groups-google-com-groups-threadm-200409061855-51395-parrot-jensbeimsurfen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200409061855.51395.parrot@jensbeimsurfen.de&#34;&gt;Oh My. Minesweeper!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks pointed everyone at the shiny new &lt;em&gt;examples/sdl/minesweeper/mines.imc&lt;/em&gt;. Speaking as a compulsive Minesweeper in recovery, this is a bad, bad thing.&lt;/p&gt;

&lt;h4 id=&#34;dynamic-pmc-libraries-http-groups-google-com-groups-threadm-20040907034002-ga22076-kevin-fink-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040907034002.GA22076@kevin.fink.com&#34;&gt;Dynamic PMC libraries&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Fink posted a patch to Parrot&amp;rsquo;s build system to make the process of building libraries of dynamic PMCs rather less platform specific. After a sanity check from Leo it got committed.&lt;/p&gt;

&lt;h4 id=&#34;semantics-for-regexes-http-groups-google-com-groups-threadm-20040907025916-ga13372-perlsupport-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040907025916.GA13372@perlsupport.com&#34;&gt;Semantics for regexes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The discussion of required semantics to implement a regular expression engine continued. Chip Salzenberg chipped in with some experience from the Topaz project (a brave project to reimplement Perl 5 in C++ that, sadly failed whilst teaching Chip a great deal). I confess that the thought of an &lt;code&gt;open_up_and_say_aaah&lt;/code&gt; method on Perl Scalars delighted your summarizer.&lt;/p&gt;

&lt;h4 id=&#34;namespaces-http-groups-google-com-groups-threadm-a06110405bd636771e587-5b10-0-1-2-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110405bd636771e587@%5B10.0.1.2%5D&#34;&gt;Namespaces&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;(Am I the only person who wants to repeat Namespaces! with the same intonation used for &amp;ldquo;Monorail!&amp;rdquo; in the Simpsons?)&lt;/p&gt;

&lt;p&gt;As Dan pointed out, Parrot needs namespaces, more than that, it needs them to be designed. So, like the excellent designer he is, he laid out his plan for namespaces and invited comments. And comments there were. We can probably expect a PDD soon. Ish.&lt;/p&gt;

&lt;h4 id=&#34;patrick-r-michaud-speaks-http-groups-google-com-groups-threadm-20040907171607-gd23808-contra-vosn-net&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040907171607.GD23808@contra.vosn.net&#34;&gt;Patrick R. Michaud Speaks!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Mark Patrick&amp;rsquo;s words: There will be a Perl 6.&lt;/p&gt;

&lt;p&gt;Now all that remains is to find out when.&lt;/p&gt;

&lt;h4 id=&#34;mod-parrot-progress-http-groups-google-com-groups-threadm-pine-lnx-4-44-0409071154400-6586-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0409071154400.6586-100000@booger.sixgeeks.org&#34;&gt;mod_parrot progress&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz updated everyone on his progress with updating (rewriting) a mod_parrot plugin for Apache 2.&lt;/p&gt;

&lt;h4 id=&#34;continuations-and-gc-continued-http-groups-google-com-groups-threadm-200409072222-23542-parrot-jensbeimsurfen-de&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200409072222.23542.parrot@jensbeimsurfen.de&#34;&gt;Continuations and GC. Continued&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;They&amp;rsquo;re baack! Just when you thought return continuations had been sorted, they&amp;rsquo;re back and causing memory leaks.&lt;/p&gt;

&lt;h4 id=&#34;no-autoconf-dammit-http-groups-google-com-groups-threadm-a06110414bd63e3cc0af3-5b10-0-1-2-5d&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110414bd63e3cc0af3@%5B10.0.1.2%5D&#34;&gt;No Autoconf, dammit!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan restated his position on using Autoconf in the parrot build system. It&amp;rsquo;s really rather simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not using autoconf. Period.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the discussion, Herbert Snorrason suggested we institute a &amp;ldquo;Rule One&amp;rdquo; for Dan. In other words, Dan is always right. Unless he changes his mind (&amp;ldquo;Rule Two&amp;rdquo;). Or is overridden by Larry (&amp;ldquo;The One True Rule One&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;It works for me.&lt;/p&gt;

&lt;h4 id=&#34;constant-strings&#34;&gt;Constant strings&lt;/h4&gt;

&lt;p&gt;Dan posted a discussion of &lt;code&gt;const_string&lt;/code&gt;, a Parrot function for making use of string constants from C. It&amp;rsquo;s very useful, but it doesn&amp;rsquo;t seem to be as useful as Dan would like it to be, so he&amp;rsquo;s extended the API.&lt;/p&gt;

&lt;p&gt;Personally, I&amp;rsquo;d like Symbols as first class data structures in Parrot, but not enough that I&amp;rsquo;m likely to implement the darned things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110416bd63ed1036ea@%5B10.0.1.2%5D&#34;&gt;Constant strings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110420bd64c13aad60@%5B10.0.1.2%5D&#34;&gt;Part two&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;multiple-languages-clarification-http-groups-google-com-groups-threadm-cac60d5c-01e2-11d9-8eab-003065ae00b6-mac-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=CAC60D5C-01E2-11D9-8EAB-003065AE00B6@mac.com&#34;&gt;Multiple languages clarification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Self-described newbie Richard Jolly asked for clarification on what mixing languages will look like. Dan pointed out that it hadn&amp;rsquo;t actually been specified yet. Besides, the internals list didn&amp;rsquo;t do syntax.&lt;/p&gt;

&lt;p&gt;He then outlined what he thought the syntax would look like. He doubts that people will end up mixing languages in single source files though. Further discussion pretty much agreed with Dan, generally arguing that most uses of multiple languages would come from using other languages&amp;rsquo; libraries.&lt;/p&gt;

&lt;h4 id=&#34;nci-and-the-running-process-image-http-groups-google-com-groups-threadm-pine-lnx-4-44-0409091048070-30590-100000-booger-sixgeeks-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.LNX.4.44.0409091048070.30590-100000@booger.sixgeeks.org&#34;&gt;NCI and the running process image&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff &amp;ldquo;&lt;code&gt;mod_parrot&lt;/code&gt;&amp;rdquo; Horwitz revived a thread from a year ago. He wanted to be able to use the running process image (say httpd) and grab its various API functions using &lt;code&gt;dlfunc&lt;/code&gt;. Sadly, although this works for functions that Apache uses from shared libraries, it doesn&amp;rsquo;t work for those functions that are statically linked into the binary. He wondered if this was a bug, or if he was going to have to stick to using the workaround he&amp;rsquo;d come up with.&lt;/p&gt;

&lt;p&gt;It turns out that it isn&amp;rsquo;t a bug, but it can be done by passing a NULL as the filename from which you&amp;rsquo;re dynamically loading a function. Thanks Leo.&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;synopsis-9-the-discussion-continues-http-groups-google-com-groups-threadm-20040902234740-ga29156-wall-org&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040902234740.GA29156@wall.org&#34;&gt;Synopsis 9, the discussion continues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Synopsis 9 covers Perl&amp;rsquo;s data types. And, from such a small acorn grows one might oak of a thread. Some of the discussion was even about Perl&amp;rsquo;s data types. There was also a snide remark about summaries and the correct pronunciation of &amp;ldquo;Z&amp;rdquo; — in revenge for which I plan to make sure that David Green is never mentioned in a Perl 6 Summary.&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;h4 id=&#34;sub-signatures-without-parens-http-groups-google-com-groups-threadm-20040904133421-gn759-c4-convolution-nl&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040904133421.GN759@c4.convolution.nl&#34;&gt;Sub signatures without parens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if the parentheses around the signatures of function/method were still strictly necessary. Larry explained that they were and why.&lt;/p&gt;

&lt;h4 id=&#34;the-reach-of-macros-http-groups-google-com-groups-threadm-m21xhhkfn3-fsf-obelisk-bofh-org-uk&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=m21xhhkfn3.fsf@obelisk.bofh.org.uk&#34;&gt;The reach of macros&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Larry pointed out that even existing keywords could be overridden with macros. Piers Cawley pointed out that they&amp;rsquo;d be no fun if they didn&amp;rsquo;t. Larry added the caveat that macros couldn&amp;rsquo;t work with precompiled library code (which is a shame, but understandable). This thread developed into the (occasionally intemperate) discussion of Bundles that later migrated to perl6-compiler.&lt;/p&gt;

&lt;h4 id=&#34;iterators-and-for-http-groups-google-com-groups-threadm-2921f1d6-027d-11d9-93dc-000a95b9602e-kineticode-com&#34;&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=2921F1D6-027D-11D9-93DC-000A95B9602E@kineticode.com&#34;&gt;Iterators and for&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Wheeler wondered if the (Smalltalk by way of) Rubyish style of eschewing &lt;code&gt;for&lt;/code&gt; in favour appropriate iterators and code blocks would eventually become good Perl 6 style. (I expect it will in my code). Larry didn&amp;rsquo;t think it would, but pointed out that the syntax had been modified recently to make it relatively easy to work that way if you wanted to. Instead of writing, say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@foo.each({...})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we&amp;rsquo;ll be able to write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@foo.each:{...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;announcements-apologies-acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/h3&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a &lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;getting Piers to OSCON 2005 fund&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-09-03</title>
      <link>http://localhost:1313/pub/2004/09/p6pdigest/20040903.html/</link>
      <pubDate>Thu, 09 Sep 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/09/p6pdigest/20040903.html/</guid>
      <description>

&lt;p&gt;Another week, a free weekend, and still I haven&amp;rsquo;t started writing the summary until Monday. Still, I don&amp;rsquo;t actually start at college &amp;lsquo;til next week, so that&amp;rsquo;s all right then.&lt;/p&gt;

&lt;p&gt;We start with perl6-internals.&lt;/p&gt;

&lt;h4 id=&#34;compile-op-with-return-values&#34;&gt;Compile op with return values&lt;/h4&gt;

&lt;p&gt;The discussion of how to return something from dynamically compiled code continued with Leo, Dan and Steve Fink all working to clarify and address the issues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040828065049.GC12318@kevin.fink.com&#34;&gt;Compile op with return values&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;library-loading&#34;&gt;Library loading&lt;/h4&gt;

&lt;p&gt;Dan started the process of nailing down Parrot&amp;rsquo;s dynamic loading API so that it can be added to the embedding interface. Steve Fink and Aaron Sherman had suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110410bd568c66e647@%5B10.0.1.2%5D&#34;&gt;Library loading&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;pathological-register-allocation-scenarios&#34;&gt;Pathological register allocation scenarios&lt;/h4&gt;

&lt;p&gt;Gregor N Purdy had asked Dan if his work compiler could be made to spit out structurally equivalent C code to the Parrot code that was breaking IMCC. His idea being that we could then see how C compilers dealt with such nastiness. Dan thought that, whilst this was a good idea, it would be too much work to implement. Gregor wasn&amp;rsquo;t so sure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611041abd58ca5c3463@%5B10.0.1.2%5D&#34;&gt;Pathological Register Allocation Scenarios&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;dan-and-leo-demonstrate-comic-timing-again&#34;&gt;Dan and Leo demonstrate comic timing. Again.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;14:17:09 GMT Dan: PerlHash test 20 is failing? Anyone know what&#39;s up
so we can fix it?
15:30:41 GMT Leo: It stopped failing at 15:55 CEST (13:55 GMT)
16:32:29 GMT Dan: D&#39;oh!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We love it when a patch comes together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110422bd58e6de10f8@%5B10.0.1.2%5D&#34;&gt;Failing perlhash test&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;pmc-instantiation&#34;&gt;PMC Instantiation&lt;/h4&gt;

&lt;p&gt;Leo had raised issues with the current scheme for PMC instantiation. This week Dan came through with some design which got discussed and (I think) implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110427bd590a576148@%5B10.0.1.2%5D&#34;&gt;PMC Instantiation&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;last-bits-of-the-basic-math-semantics&#34;&gt;Last bits of the basic math semantics&lt;/h4&gt;

&lt;p&gt;If you believe Barbie, &amp;ldquo;Math is hard&amp;rdquo;. She&amp;rsquo;s right, up to a point. The list&amp;rsquo;s spent a couple of weeks now sorting out the design of Parrots underlying mathematical and numeric systems to make sure that maths works right (for sufficiently useful values of &amp;ldquo;right&amp;rdquo;). This particular line of discussion covers rotations and stuff, where you&amp;rsquo;re actually treating a number as a bit field.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200408310958.i7V9wN909589@thu8.leo.home&#34;&gt;Last bits of the basic math semantics&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;cross-compiling-parrot&#34;&gt;Cross-compiling parrot&lt;/h4&gt;

&lt;p&gt;And you thought compiling Parrot on a Win32 box was hard. Robert Schwebel wants to cross compile Parrot and isn&amp;rsquo;t having a good time. Dan wasn&amp;rsquo;t surprised because the Parrot build process still gets most of its information from the local perl installation which will generally be wrong when you&amp;rsquo;re cross compiling.&lt;/p&gt;

&lt;p&gt;Dan noted that part of the problem is that we don&amp;rsquo;t have people on the team with a need or the experience of doing cross compilation and added that he&amp;rsquo;d be thrilled if this were to change. Any patches to make things better for cross compilers will, of course, be gratefully received.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040901173244.GE1369@pengutronix.de&#34;&gt;Cross-compiling Parrot?&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;proposal-for-a-new-pmc-layout-and-more&#34;&gt;Proposal for a new PMC layout and more&lt;/h4&gt;

&lt;p&gt;Leo&amp;rsquo;s concerned that the current PMC layout isn&amp;rsquo;t the Right Thing, and laid out a proposal describing some changes he thinks would be worthwhile. In essence, he argues for removing the requirement for fixed sized PMC headers and separate variable sized buffers in favour of unifying buffers and PMCs so that PMCs become variable sized, thus eliminating some time consuming indirection, and space consuming overheads.&lt;/p&gt;

&lt;p&gt;Nicholas Clark thought the proposal was interesting, but said that, since the proposed changes would be invisible to the user, he&amp;rsquo;d be far happier with a functionally complete implementation of parrot with stable, useful APIs.&lt;/p&gt;

&lt;p&gt;Dan rejected the proposal (both for technical reasons and because he agreed with Nicholas). I don&amp;rsquo;t think Leo was convinced by the technical reasons, but the &amp;ldquo;Let&amp;rsquo;s get the interfaces finished!&amp;rdquo; argument clinched it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4135E823.7070902@toetsch.at&#34;&gt;Leo&amp;rsquo;s layout proposal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040bbd5bb29d2c15@%5B172.24.18.155%5D&#34;&gt;Dan explains why not&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;semantics-for-regexes&#34;&gt;Semantics for regexes&lt;/h4&gt;

&lt;p&gt;Dan appears to have opened an entertaining can of worms when he outlined his view of the minimum string semantics required to support a regular expression engine and asked for comments. Boy did he get them. And boy did they run off in all sorts of strange directions. Interesting directions mind. Anyway, further down the thread, Dan, Chip Salzenburg and Patrick Michaud seemed to reach something approximating agreement about the low level semantics required.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040ebd5bbe03d7e1@%5B172.24.18.155%5D&#34;&gt;Semantics for regexes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;todos-and-calls-for-volunteers&#34;&gt;TODOs and calls for volunteers&lt;/h4&gt;

&lt;p&gt;Leo came up with a list of things that need fixing/implementing and asked for volunteers. These include sorting out what happens with the experimental ops, implementing &lt;code&gt;new_extended&lt;/code&gt; for every PMC class and finishing up BigInt&amp;rsquo;s MMD and vtable functions.&lt;/p&gt;

&lt;p&gt;He also had some proposals for how we should get the Integer classes properly implemented now we know what the semantics will be.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4137507F.5010606@toetsch.at&#34;&gt;TODOish fix ops&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41385717.90803@toetsch.at&#34;&gt;Takers wanted: new_extended&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41385937.7020708@toetsch.at&#34;&gt;Takers wanted - BigInt/BigNum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200409031221.i83CLUv13413@thu8.leo.home&#34;&gt;Integer PMCs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;meanwhile-in-perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/h3&gt;

&lt;h4 id=&#34;roles-trying-to-be-nice&#34;&gt;Roles trying to be nice&lt;/h4&gt;

&lt;p&gt;Abhijit Mahabal had some questions about making roles work. Luke, Patrick, and Jonathan Scott Duff set about answering them. I&amp;rsquo;m not entirely sure that any of the answers so far are enough for Abhijit, but then I&amp;rsquo;m not entirely sure that any answer could be enough. At some point you have to take things on trust and hope that nothing breaks at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=Pine.GSO.4.58.0408292126230.10203@prickly.cs.indiana.edu&#34;&gt;Roles trying to be nice&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;pipeline-performance&#34;&gt;Pipeline performance&lt;/h4&gt;

&lt;p&gt;Rod Adams brought up some issues with the performance of &amp;ldquo;pipelining&amp;rdquo; arrays in Perl 5 — in general doing say &lt;code&gt;grep {...} map {...} @ary&lt;/code&gt; is rather slower than writing an explicit loop. He wondered if Perl 6 would be faster. Larry&amp;rsquo;s answer that all lists function lazily if they can in Perl 6 seems to imply that yes, Perl 6 will be faster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41338F4C.2090300@rodadams.net&#34;&gt;Pipeline performance&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;synopsis-9-draft-1&#34;&gt;Synopsis 9 draft 1&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Synopsis 9?&amp;rdquo; I hear you ask &amp;ldquo;But we haven&amp;rsquo;t seen Apocalypse 9 yet!&amp;rdquo;. Indeed we haven&amp;rsquo;t, but that&amp;rsquo;s not stopped Larry writing it. Synopsis 9 gives an overview of Perl 6&amp;rsquo;s data structures (hopefully enough for anyone who happens to be starting work on a rough cut of a Perl 6 implementation) which will be covered in more detail when the Apocalypse itself comes out.&lt;/p&gt;

&lt;p&gt;The usual storm of discussion and general proofreading goodness went on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040902234740.GA29156@wall.org&#34;&gt;Synopsis 9 draft 1&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-range-operator&#34;&gt;The range operator&lt;/h4&gt;

&lt;p&gt;Joe Gottman wondered if there would be sufficiently lazy way to generate ranges. In particular, he wanted to know if he&amp;rsquo;d be able to write &lt;code&gt;reverse (1..5)&lt;/code&gt; and have Perl handle that lazily, or if he could do &lt;code&gt;5 .. 1 :by(-1)&lt;/code&gt;. Larry thought that, if range objects were made sufficiently smart, there would be no reason why the &lt;code&gt;reverse&lt;/code&gt; approach couldn&amp;rsquo;t be lazy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=200409030034.i830YESH008947@ms-smtp-04-eri0.southeast.rr.com&#34;&gt;Reverse .. operator&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;can-pre-and-post-be-removed-from-program-flow&#34;&gt;Can PRE and POST be removed from program flow?&lt;/h4&gt;

&lt;p&gt;John Siracusa wondered if it would be possible to turn off the PRE and POST Design By Contract hooks in production code to improve performance. (Leaving aside arguments about whether this is sensible; personally I reckon that a production environment is where you should be most worried about values that might fail the PRE/POST hooks). Larry reckoned it would be possible to simply clobber the global definitions of PRE and POST to make them no ops. This wasn&amp;rsquo;t enough for John, who wanted to be able to get rid of them entirely so even the call to the no op didn&amp;rsquo;t happen. So Damian showed him the obvious macros&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=BD5E4DEC.1CB3A%siracusa@mindspring.com&#34;&gt;S4: Can PRE and POST be removed from program flow?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;announcements-apologies-acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/h3&gt;

&lt;p&gt;It looks like the Google groups gateway is working again, so I&amp;rsquo;ll keep with the Google style linking.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a &lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;getting Piers to OSCON 2005&lt;/a&gt; fund.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, you can check out &lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;my website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-08-20</title>
      <link>http://localhost:1313/pub/2004/08/p6pdigest/20040820.html/</link>
      <pubDate>Thu, 26 Aug 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/08/p6pdigest/20040820.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-the-perl-6-summary-for-the-fortnight-ending-2004-08-20-the-perl-6-summary-for-the-fortnight-ending-2004-08-20-span&#34;&gt;&lt;span id=&#34;The_Perl_6_Summary_for_the_fortnight_ending_2004-08-20&#34;&gt;The Perl 6 Summary for the fortnight ending 2004-08-20&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Harrumph. Note to self; never miss a week when you could actually have written the summary. I lulled myself into a false sense of security with the quiet week for the last summary. The last two weeks have been rather more busy and I&amp;rsquo;ve been away at EuroFoo over the weekend.&lt;/p&gt;

&lt;p&gt;So, this fortnight&amp;rsquo;s summary might be a bit sketchy.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re back with starting with perl6-internals this time as it continues to comfortably out traffic perl6-language (message count was running about 3:1 in favour of p6i).&lt;/p&gt;

&lt;h4 id=&#34;span-id-register-allocation-register-allocation-span&#34;&gt;&lt;span id=&#34;Register_allocation&#34;&gt;Register allocation&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Work continued apace on adding a bullet proof failsafe register spilling algorithm so that Dan&amp;rsquo;s work project could be made to at least compile. There was much discussion of what was actually causing the problem and several attempts to fix it. Work is ongoing.&lt;/p&gt;

&lt;p&gt;Melvin Smith coined a new acronym: DSWEPIC, which stands for Dan Stop Writing Evil Pathological Intermediate Code though, as chromatic pointed out, it&amp;rsquo;s actually Dan&amp;rsquo;s compiler that&amp;rsquo;s generating Evil Pathological code and Dan claimed that that&amp;rsquo;s because he&amp;rsquo;s writing a compiler for an Evil Pathological language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41133881.5050009@toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=41133881.5050009@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-cvs-mirrored-with-svk-parrot-cvs-mirrored-with-svk-span&#34;&gt;&lt;span id=&#34;Parrot_cvs_mirrored_with_svk&#34;&gt;Parrot cvs mirrored with svk&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Chia-liang Kao announced that he (I&amp;rsquo;m guessing, I&amp;rsquo;m not very good at divining the gender of none western names. Sadly &amp;lsquo;he&amp;rsquo; is usually a safe bet in this field though) was mirroring the Parrot CVS repository in a Subversion repository for those who didn&amp;rsquo;t like CVS. There was a certain amount of chuntering but most people seemed pleased by this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040807085230.GA33705@portege.clkao.org&#34;&gt;http://groups.google.com/groups?threadm=20040807085230.GA33705@portege.clkao.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-pie-thon-post-mortem-the-pie-thon-post-mortem-span&#34;&gt;&lt;span id=&#34;The_Pie-thon_post-mortem&#34;&gt;The Pie-thon post-mortem&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted his notes on the aftermath of the pie-thon push. Next time we do this, we&amp;rsquo;ll start earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611042dbd3acdf97ef5@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?threadm=a0611042dbd3acdf97ef5@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-an-alternate-call-scheme-an-alternate-call-scheme-span&#34;&gt;&lt;span id=&#34;An_alternate_call_scheme&#34;&gt;An alternate call scheme&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan ruled on Leo&amp;rsquo;s alternate call scheme proposal, but wasn&amp;rsquo;t entirely comfortable with it. However, he sketched out another idea inspired by it. Leo didn&amp;rsquo;t sound convinced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110418bd397f6e35e5@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110418bd397f6e35e5@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-source-mangling-slides-source-mangling-slides-span&#34;&gt;&lt;span id=&#34;Source_mangling_slides&#34;&gt;Source mangling slides&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted a link to an abortive talk on some of the cunning tricks we do with source mangling in Parrot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110404bd3d23cf4f7b@%5B10.0.1.3%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110404bd3d23cf4f7b@%5B10.0.1.3%5D&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sidhe.org/~dan/presentations/Parrot_Implementation.pdf&#34;&gt;http://www.sidhe.org/~dan/presentations/Parrot_Implementation.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-making-nci-work-with-a-nasty-library-making-nci-work-with-a-nasty-library-span&#34;&gt;&lt;span id=&#34;Making_NCI_work_with_a_nasty_library&#34;&gt;Making NCI work with a nasty library&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Hildo Biersma is trying to write parrot support for IBM&amp;rsquo;s MQ library. He had a couple of questions about the best way to go about it. Leo and chromatic had some suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=16663.29639.371953.272205@saimq5.ms.com&#34;&gt;http://groups.google.com/groups?threadm=16663.29639.371953.272205@saimq5.ms.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-functions-for-embedders-to-override-functions-for-embedders-to-override-span&#34;&gt;&lt;span id=&#34;Functions_for_embedders_to_override&#34;&gt;Functions for embedders to override&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Noting that Ponie was already have problems, Dan outlined those functions that embedding environments may need to override to get things working. He asked for help and comments in getting a system in place to allow overriding functions to be registered in order to give embedders control over parrot&amp;rsquo;s interface to the real world. This is something which needs doing sooner rather than later so as to avoid storing up pain.&lt;/p&gt;

&lt;p&gt;This triggered a fairly wide ranging discussion, but progress is being made.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040cbd3d4f989298@%5B10.0.1.3%5D&#34;&gt;http://groups.google.com/groups?threadm=a0611040cbd3d4f989298@%5B10.0.1.3%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-what-unicode-means-to-us-what-unicode-means-to-us-span&#34;&gt;&lt;span id=&#34;What_Unicode_means_to_us&#34;&gt;What Unicode means to us&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mmm&amp;hellip; Unicode. Dan outlined what need to deal with to do Unicode sufficiently well. Discussion ensued.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040ebd3d6a1ac8fe@%5B10.0.1.3%5D&#34;&gt;http://groups.google.com/groups?threadm=a0611040ebd3d6a1ac8fe@%5B10.0.1.3%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-fix-generation-of-src-nci-c-to-be-more-efficient-fix-generation-of-src-nci-c-to-be-more-efficient-span&#34;&gt;&lt;span id=&#34;Fix_generation_of_src/nci.c_to_be_more_efficient&#34;&gt;Fix generation of &lt;em&gt;src/nci.c&lt;/em&gt; to be more efficient&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;I don&amp;rsquo;t normally point out patches, but Dan&amp;rsquo;s patch to improve the generation of &lt;em&gt;src/nci.c&lt;/em&gt; spawned a longish thread with commentary from Nicholas Clark and chromatic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-31026-93446.17.5789743157492@perl.org&#34;&gt;http://groups.google.com/groups?threadm=rt-3.0.11-31026-93446.17.5789743157492@perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-a-small-task-for-the-interested-a-small-task-for-the-interested-span&#34;&gt;&lt;span id=&#34;A_small_task_for_the_interested&#34;&gt;A small task for the interested&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted another of his small tasks for the interested (maybe we should start calling them STFTIs?). This time he&amp;rsquo;s after source tests to test the embedding interface and some fixing of the auto-prefix scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040cbd3da10ca9c3@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?threadm=a0611040cbd3da10ca9c3@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-encoding-api-the-encoding-api-span&#34;&gt;&lt;span id=&#34;The_encoding_API&#34;&gt;The encoding API&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan detailed the encoding API, the layer that mediates between Parrot, which sees strings as a sequence of codepoints and the underlying buffer full of bytes. Gopal V and Michael Stone had questions and suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110400bd3daa20ca5a@%5B172.24.18.98%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110400bd3daa20ca5a@%5B172.24.18.98%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-cobol-on-parrot-cobol-on-parrot-span&#34;&gt;&lt;span id=&#34;COBOL_on_Parrot?&#34;&gt;COBOL on Parrot?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Remember Dan pointed everyone at a GPL&amp;rsquo;d COBOL compiler and suggested that a Parrot backend would be cool? David Essex (if that&amp;rsquo;s the British singer from the 70s then I&amp;rsquo;ll be boggling like a good &amp;lsquo;un) pointed everyone at a couple of others. He and Uri Guttman discussed runtime libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41182276.2080908@arvotek.net&#34;&gt;http://groups.google.com/groups?threadm=41182276.2080908@arvotek.net&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-the-perl-6-compiler-pumpking-the-perl-6-compiler-pumpking-span&#34;&gt;&lt;span id=&#34;The_Perl_6_compiler_pumpking&#34;&gt;The Perl 6 compiler pumpking&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Patrick Michaud, Perl 6 compiler pumpking, outlined his plan for getting us to a working Perl 6 compiler.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040809192444.GH18480@contra.vosn.net&#34;&gt;http://groups.google.com/groups?threadm=20040809192444.GH18480@contra.vosn.net&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-pmc-semantics-pmc-semantics-span&#34;&gt;&lt;span id=&#34;PMC_semantics&#34;&gt;PMC semantics&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo kicked off what looks like being a long running thread when he opened discussion of the semantics of the various integerish PMCs in Parrot. Larry and Dan both pitched in with discussion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4118B4E9.9070906@toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=4118B4E9.9070906@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-charset-api-charset-api-span&#34;&gt;&lt;span id=&#34;Charset_API&#34;&gt;Charset API&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted part two of the charset API, which confused me slightly by arriving on my computer before Part 1.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110410bd4148de4d94@%5B172.24.18.155%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110410bd4148de4d94@%5B172.24.18.155%5D&lt;/a&gt; &amp;ndash; Part 1&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110400bd416568fe25@%5B172.24.10.164%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110400bd416568fe25@%5B172.24.10.164%5D&lt;/a&gt; &amp;ndash; Part 2&lt;/p&gt;

&lt;h4 id=&#34;span-id-handling-block-parameters-in-ruby-handling-block-parameters-in-ruby-span&#34;&gt;&lt;span id=&#34;Handling_block_parameters_in_Ruby&#34;&gt;Handling block parameters in Ruby&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Mark Sparshatt asked for advice on how to handle method invocations that include special block parameters like Ruby&amp;rsquo;s. Leo thought that handling it in the parser/compiler and simply passing the block in as an extra parameter was the best way forward. Larry and Dan discussed complications associated with that idea.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=411A83D9.1060502@yahoo.co.uk&#34;&gt;http://groups.google.com/groups?threadm=411A83D9.1060502@yahoo.co.uk&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parakeet-breaks-and-recovers-parakeet-breaks-and-recovers-span&#34;&gt;&lt;span id=&#34;Parakeet_breaks_and_recovers&#34;&gt;Parakeet breaks and recovers&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michel Pelletier updated his Parrot distribution and managed to kill his Parakeet language. Dan and Leo set about trying to track the underlying bug down. I presume it got fixed because Michel posted a new version of Parakeet soon after.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040813112456.1bc2ec2f.michel@dialnetwork.com&#34;&gt;http://groups.google.com/groups?threadm=20040813112456.1bc2ec2f.michel@dialnetwork.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040815133243.20f37973.michel@dialnetwork.com&#34;&gt;http://groups.google.com/groups?threadm=20040815133243.20f37973.michel@dialnetwork.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-nci-and-callback-functions-nci-and-callback-functions-span&#34;&gt;&lt;span id=&#34;NCI_and_callback_functions&#34;&gt;NCI and callback functions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Stephane Peiry had some problems getting NCI callbacks working with GTK. He and Leo went tried the debugging by email trick, but with little joy before the end of the week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040815205143.GA12992@pittypanda&#34;&gt;http://groups.google.com/groups?threadm=20040815205143.GA12992@pittypanda&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-todos-added-todos-added-span&#34;&gt;&lt;span id=&#34;TODOs_added&#34;&gt;TODOs added&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda added a vast number of TODO items to Parrot&amp;rsquo;s RT queue.&lt;/p&gt;

&lt;p&gt;His TODO about the configuration system sparked a good deal of discussion. At least one person suggested ditching &lt;code&gt;make&lt;/code&gt;, which seems to be par for the course in these kinds of discussions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.parrotcode.org/todo.html&#34;&gt;http://www.parrotcode.org/todo.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-3.0.11-31138-93745.19.5978270633675@perl.org&#34;&gt;http://groups.google.com/groups?threadm=rt-3.0.11-31138-93745.19.5978270633675@perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-popping-an-empty-array-popping-an-empty-array-span&#34;&gt;&lt;span id=&#34;Popping_an_empty_array&#34;&gt;Popping an empty array&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Michel Pelletier wondered how to generate a catchable exception when he tried to &lt;code&gt;pop&lt;/code&gt; from an empty PerlArray. Larry reckoned that, if it&amp;rsquo;s really a PerlArray it should return an undef containing an unthrown exception. Which sparked a longish discussion&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040816050945.63280604.michel@dialnetwork.com&#34;&gt;http://groups.google.com/groups?threadm=20040816050945.63280604.michel@dialnetwork.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-parrot-interfaces-parrot-interfaces-span&#34;&gt;&lt;span id=&#34;Parrot_interfaces&#34;&gt;Parrot interfaces&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Noticing that there appeared to be ops for handling interfaces, Michel Pelletier wondered when we might see an implementation or PDD covering their semantics. Our resident roles guy, chromatic, pointed out that Parrot will actually have roles, which can look like interfaces in the right light and pointed at Apocalypse 12 for more in the way of detail.&lt;/p&gt;

&lt;p&gt;Later on, Dan sketched out an initial interface spec. Parrot level interfaces are very simple indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040816113022.2941e76f.michel@dialnetwork.com&#34;&gt;http://groups.google.com/groups?threadm=20040816113022.2941e76f.michel@dialnetwork.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110403bd47c07ce518@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110403bd47c07ce518@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-interpreter-permissioning-interpreter-permissioning-span&#34;&gt;&lt;span id=&#34;Interpreter_permissioning&#34;&gt;Interpreter permissioning&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Felix Gallo sought input on the problem of interpreter permissioning. He got lots.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040817161114.GA47639@amse.pair.com&#34;&gt;http://groups.google.com/groups?threadm=20040817161114.GA47639@amse.pair.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-what-what-span&#34;&gt;&lt;span id=&#34;What?&#34;&gt;What?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan Sugalski is a very, very bad man. Sure, he gets a good deal of mitigation from Parrot working as well as it does, but&amp;hellip; well&amp;hellip; Multi Method Dispatch on return continuations is sick, evil, and a strangely fascinating idea.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110409bd4815efebe7@%5B172.24.10.164%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110409bd4815efebe7@%5B172.24.10.164%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-span-praise-span-praise-span&#34;&gt;&lt;span id=&#34;Span_praise&#34;&gt;Span praise&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Dan&amp;rsquo;s been catching up with his mail and popped his head up to say nice things about Span, a very pleasant looking OO language based around Parrot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a06110407bd4a7b7edc43@%5B172.24.10.164%5D&#34;&gt;http://groups.google.com/groups?threadm=a06110407bd4a7b7edc43@%5B172.24.10.164%5D&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-incremental-garbage-collection-incremental-garbage-collection-span&#34;&gt;&lt;span id=&#34;Incremental_garbage_collection&#34;&gt;Incremental garbage collection&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Leo&amp;rsquo;s working on implementing an incremental garbage collector for Parrot. The idea behind it is to reduce the amount of time the GC system spends with the world stopped. The response was generally positive, with discussion of potential edge cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4126558A.8000803@toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=4126558A.8000803@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=4125B668.2070400@toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=4125B668.2070400@toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-gc-dod-api-gc-dod-api-span&#34;&gt;&lt;span id=&#34;GC/DOD_API&#34;&gt;GC/DOD API&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Whee, a subject that&amp;rsquo;s all acronym. That&amp;rsquo;s Garbage Collection/Dead Object Detection Application Programming Interface for those of you who are bemused by the alphabet soup.&lt;/p&gt;

&lt;p&gt;Dan pointed out that, before we get a fully reworked garbage collection system in place, it would be a good idea to get the API designed and documented.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=a0611040dbd4bfbdcca85@%5B10.0.1.2%5D&#34;&gt;http://groups.google.com/groups?threadm=a0611040dbd4bfbdcca85@%5B10.0.1.2%5D&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-revision-of-apocalypse-12-s-lookahead-notions-revision-of-apocalypse-12-s-lookahead-notions-span&#34;&gt;&lt;span id=&#34;Revision_of_Apocalypse_12&#39;s_lookahead_notions&#34;&gt;Revision of Apocalypse 12&amp;rsquo;s lookahead notions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Larry posted a a message resolving issues with method lookahead and adverb parsing. And there was much discussion and clarification. Expect to see the results in Synopsis 12 when it gets written.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040810180759.GA16766@wall.org&#34;&gt;http://groups.google.com/groups?threadm=20040810180759.GA16766@wall.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-handling-block-parameters-in-ruby-handling-block-parameters-in-ruby-span-1&#34;&gt;&lt;span id=&#34;Handling_block_parameters_in_Ruby&#34;&gt;Handling block parameters in Ruby&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse spawned a subthread from the A12 lookahead discussion by wondering how Perl 6 will handle multiple blocks as arguments. Larry had some thoughts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873804081311217628470@mail.gmail.com&#34;&gt;http://groups.google.com/groups?threadm=198c873804081311217628470@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-precedence-table-update-precedence-table-update-span&#34;&gt;&lt;span id=&#34;Precedence_table_update&#34;&gt;Precedence table update&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Larry posted a newly tweaked Perl 6 operator precedence table. If you&amp;rsquo;re one of those chaps who thinks Perl has too much syntax look away (or point and laugh depending on your persuasion) now.&lt;/p&gt;

&lt;p&gt;Various oversights were quickly spotted and fixed up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040814071716.GB11366@wall.org&#34;&gt;http://groups.google.com/groups?threadm=20040814071716.GB11366@wall.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-synopses-drafts-synopses-drafts-span&#34;&gt;&lt;span id=&#34;Synopses_drafts&#34;&gt;Synopses drafts&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Larry posted the first draft of Synopses 1, 2 and 4 the condensed, updated, versions of their respective apocalypses. The list did the usual proofreading/patching thing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040814183225.GB2827@wall.org&#34;&gt;http://groups.google.com/groups?threadm=20040814183225.GB2827@wall.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040814183149.GA2827@wall.org&#34;&gt;http://groups.google.com/groups?threadm=20040814183149.GA2827@wall.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040820024536.GA28138@wall.org&#34;&gt;http://groups.google.com/groups?threadm=20040820024536.GA28138@wall.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-return-with-no-expression-return-with-no-expression-span&#34;&gt;&lt;span id=&#34;Return_with_no_expression&#34;&gt;Return with no expression&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse found something surprising in Perl 5&amp;rsquo;s handling of a return with no arguments and wondered if Perl 6 would magically solve his problem. Luke thinks it&amp;rsquo;ll do the right thing by making the right hand side of a &lt;code&gt;=&amp;gt;&lt;/code&gt; evaluate in a scalar context.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=198c873804081906351aebc796@mail.gmail.com&#34;&gt;http://groups.google.com/groups?threadm=198c873804081906351aebc796@mail.gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-as-with-automatic-is-rw-as-with-automatic-is-rw-span&#34;&gt;&lt;span id=&#34;&lt;-&gt;&lt;em&gt;as&lt;/em&gt;-&amp;gt;_with_automatic_is_rw&amp;rdquo;&amp;gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; as &lt;code&gt;-&amp;gt;&lt;/code&gt; with automatic &lt;code&gt;is rw&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Juerd scared me by proposing that &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; be the equivalent of &lt;code&gt;-&amp;gt;&lt;/code&gt; with an implicit &lt;code&gt;is rw&lt;/code&gt;. Larry declared &amp;ldquo;It&amp;rsquo;s really sick, and cute, and I love it.&amp;rdquo; but thought that there might already be too many ways to declare a sub.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040820200702.GK17296@c4.convolution.nl&#34;&gt;http://groups.google.com/groups?threadm=20040820200702.GK17296@c4.convolution.nl&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Phew! I think I got this finished just before &amp;lsquo;press&amp;rsquo; time for perl.com. Or maybe not.&lt;/p&gt;

&lt;p&gt;If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a &amp;lsquo;getting Piers to OSCON 2005&amp;rsquo; fund to &lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;mailto:pdcawley@bofh.org.uk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; &amp;ndash; The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; &amp;ndash; Perl 6 Development site&lt;/p&gt;

&lt;p&gt;Oh yes, there&amp;rsquo;s new content on my website for the first time in an age. Enjoy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bofh.org.uk/&#34;&gt;http://www.bofh.org.uk/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6, Week Ending 2004-07-31</title>
      <link>http://localhost:1313/pub/2004/07/p6pdigest/20040731.html/</link>
      <pubDate>Fri, 06 Aug 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/07/p6pdigest/20040731.html/</guid>
      <description>

&lt;p&gt;As I threatened last week, I&amp;rsquo;m moving the rollover point for these summaries from midnight on Sunday/Monday to midnight on Friday/Saturday, but rather than do it in one swell foop, I&amp;rsquo;m doing a couple of six-day weeks. The theory is that once I become a student teacher, I&amp;rsquo;ll be rather busy during the week, but I should still be able to make time to write the summaries on the weekend.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the theory, at least; you&amp;rsquo;ll note that this didn&amp;rsquo;t get posted to the mailing lists on a Sunday. Blame my cousin for getting married. It won&amp;rsquo;t happen again.&lt;/p&gt;

&lt;h4 id=&#34;span-id-pie-thon-pie-thon-span&#34;&gt;&lt;span id=&#34;Pie-thon&#34;&gt;Pie-thon&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Good news! Guido is a gentleman and declined to throw a pie at Dan.&lt;/p&gt;

&lt;p&gt;Bad news! The Perl community is a bunch of savages, and they paid $520 to be able to throw pie at Dan.&lt;/p&gt;

&lt;p&gt;Good news! There are photos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000372.html&#34;&gt;http://www.sidhe.org/~dan/blog/archives/000372.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.oreillynet.com/pub/oscon2004/friday/&#34;&gt;http://www.oreillynet.com/pub/oscon2004/friday/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-notes-to-self-notes-to-self-span&#34;&gt;&lt;span id=&#34;Notes_to_self&#34;&gt;Notes to Self&lt;/span&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;American&amp;rsquo;s pronounce &amp;ldquo;maths&amp;rdquo; as &amp;ldquo;math.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t make silly cracks about American rectitude.&lt;/li&gt;
&lt;li&gt;Oops.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;span-id-leo-s-proposed-calling-conventions-leo-s-proposed-calling-conventions-span&#34;&gt;&lt;span id=&#34;Leo&#39;s_proposed_calling_conventions&#34;&gt;Leo&amp;rsquo;s Proposed Calling Conventions&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s been apparent for a while now that Leo Tötsch isn&amp;rsquo;t happy with Parrot&amp;rsquo;s current calling conventions. This week, he posted a proof-of-concept patch implementing a proposed new scheme. Luke Palmer agreed that it was probably worth consideration. We&amp;rsquo;ll see what Dan has to say when he gets back from OSCON.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=41063ACB.2040208%40toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=41063ACB.2040208%40toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-stack-based-language-stack-based-language-span&#34;&gt;&lt;span id=&#34;Stack_based_language&#34;&gt;Stack-Based Language&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;RaghavendraK asked about the difference between stack- and register- based virtual machines. Brent Royal-Gordon gave good advice.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=13d2515bd8.15bd813d25%40huawei.com&#34;&gt;http://groups.google.com/groups?threadm=13d2515bd8.15bd813d25%40huawei.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-icu-outdated-icu-outdated-span&#34;&gt;&lt;span id=&#34;ICU_outdated&#34;&gt;ICU Outdated&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb noted that the ICU that comes with Parrot is, not to put too fine a point on it, old and buggy. The ICU developers have suggested that Parrot move to version 3.0. Josh proposed various ways of doing this. Leo wants ICU out of the Parrot CVS, but Dan&amp;rsquo;s argued in the past that it should be in there because he doesn&amp;rsquo;t want to force people to chase around fetching a raft of required libraries before they can build Parrot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040730183121.54027.qmail%40web60804.mail.yahoo.com&#34;&gt;http://groups.google.com/groups?threadm=20040730183121.54027.qmail%40web60804.mail.yahoo.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-jarkko-proposed-for-a-cvs-checkin-rights-jarkko-proposed-for-cvs-check-in-rights-span&#34;&gt;&lt;span id=&#34;Jarkko_proposed_for_a_CVS_checkin_rights&#34;&gt;Jarkko Proposed for CVS Check-In Rights&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Following a raft of high-quality patches from Jarkko Hietaniemi, Leo proposed him for membership of the &lt;code&gt;cvs ci&lt;/code&gt; club.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=410BE8B4.7030103%40toetsch.at&#34;&gt;http://groups.google.com/groups?threadm=410BE8B4.7030103%40toetsch.at&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-meanwhile-in-perl6-language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;Meanwhile,_in_perl6-language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-what-s-core-what-s-core-span&#34;&gt;&lt;span id=&#34;What&#39;s_core?&#34;&gt;What&amp;rsquo;s Core?&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Larry and Dan Hursh discussed what would be going into the standard Perl 6 distribution. Dan argued that we should be concentrating on producing a distribution akin to the current Perl 5 distribution, but with a few fewer kitchen sinks. Larry argued that we should concentrate on two distributions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Bare bones&lt;/strong&gt;: just able to build itself and with enough capability to bootstrap everything else.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extended&lt;/strong&gt;: The barebones system plus a set of libraries fetchable from CP6AN that constitute the Perl 6 &amp;ldquo;supported&amp;rdquo; library; modules that are maintained by the Perl 6 equivalent of perl5-porters, and which will be supported over a long timeframe.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don&amp;rsquo;t think Dan&amp;rsquo;s been convinced yet. Elsewhere in the thread, Luke Palmer coined the delightful acronym EYEWTIBWATA &amp;ndash; Everything You Ever Wanted To Install But Were Afraid To Ask &amp;ndash; or &amp;ldquo;eye-witty-bwattle.&amp;rdquo; I&amp;rsquo;m unsure about whether it&amp;rsquo;s going to rank up there with &amp;ldquo;tim-toe-tidy,&amp;rdquo; though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20040725063231.33578.qmail%40onion.perl.org&#34;&gt;http://groups.google.com/groups?threadm=20040725063231.33578.qmail%40onion.perl.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-announcements-apologies-acknowledgements-announcements-apologies-acknowledgements-span&#34;&gt;&lt;span id=&#34;Announcements,_Apologies,_Acknowledgements&#34;&gt;Announcements, Apologies, Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m getting bored of typing &amp;ldquo;Palmer&amp;rdquo; and &amp;ldquo;Tötsch&amp;rdquo; once a week, so I&amp;rsquo;m considering treating Luke and Leo like Larry, Dan, Damian, and, if you insist, chromatic.&lt;/p&gt;

&lt;p&gt;So, if you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback or contributions to a &amp;ldquo;getting Piers to OSCON 2005&amp;rdquo; fund to&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;http://donate.perl-foundation.org/&lt;/a&gt; : The Perl Foundation&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;http://dev.perl.org/perl6/&lt;/a&gt; : Perl 6 development site&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

