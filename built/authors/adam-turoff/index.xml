<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Turoff on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/adam-turoff/</link>
    <description>Recent content in Adam Turoff on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jan 2004 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/adam-turoff/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The State of Perl</title>
      <link>http://localhost:1313/pub/2004/01/09/survey.html/</link>
      <pubDate>Fri, 09 Jan 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/01/09/survey.html/</guid>
      <description>

&lt;p&gt;A colleague of mine recently asked me about Perl&amp;rsquo;s future. Specifically, he wondered if we have any tricks up our sleeves to compete against today&amp;rsquo;s two most popular platforms: .NET and Java. Without a second&amp;rsquo;s hesitation, I repeated the same answer I&amp;rsquo;ve used for years when people ask me if Perl has a future:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Perl certainly is alive and well.  The Perl 6 development team is
        working very hard to define the next version of the Perl language.
        Another team of developers is working hard on Parrot, the next-
        generation runtime engine for Perl 6.  Parrot is being designed to
        support dynamic languages like Perl 6, but also Python, Ruby and
        others.  Perl 6 will also support a transparent migration of
        existing Perl 5 code.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I cheerfully continued with this addendum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Fotango is sponsoring one of their developers, Arthur Bergman, to
        work on Ponie, the reimplementation of Perl 5.10 on top of Parrot.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is often a sufficient answer to the question, &amp;ldquo;Does Perl have a future?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;However, my colleague already knew about Perl 6 and Parrot. Perl 6 was announced with a great deal of fanfare about three and a half years ago. The Parrot project, announced as an April Fool&amp;rsquo;s joke in 2001, is now over two years old as a real open source project. While Parrot has made some amazing progress, it is not yet ready for production usage, and will not be for some time to come. The big near-term goal for Parrot is to execute Python bytecode faster than the standard CPython implementation, and to do so by the Open Source Convention in July 2004. There&amp;rsquo;s a fair amount of work to do between now and then, and even more work necessary to take Parrot from that milestone to something you can use as a replacement for something like, say, Perl.&lt;/p&gt;

&lt;p&gt;So, aside from the grand plans of Perl 6 and Parrot, does Perl &lt;em&gt;really&lt;/em&gt; have a future?&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-state-of-perl-development-the-state-of-perl-development-span&#34;&gt;&lt;span id=&#34;The_State_of_Perl_Development&#34;&gt;The State of Perl Development&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl 6 and Parrot do not represent our future, but rather our long-term insurance policy. When Perl 6 was announced, the Perl 5 implementation was already about seven years old. Core developers were leaving perl5-porters and not being replaced. (We didn&amp;rsquo;t know it at the time, but this turned out to be a temporary lull. Thankfully.) The source code is quite complex, and very daunting to new developers. It was and remains unclear whether Perl can sustain itself as an open source project for another ten or twenty years if virtually no one can hack on the core interpreter.&lt;/p&gt;

&lt;p&gt;In 2000, Larry Wall saw Perl 6 as a means to keep Perl relevant, and to keep the ideas flowing within the Perl world. The fear at the time was quite palpable: if enough alpha hackers develop in Java or Python and not Perl, the skills we have spent years acquiring and honing will soon become useless and literally worthless. Furthermore, backwards compatibility with thirteen years (now sixteen years) of working Perl code was starting to limit the ease with which Perl can adapt to new demands. Taken to a logical extreme, all of these factors could work against Perl, rendering it yesterday&amp;rsquo;s language, incapable of effectively solving tomorrow&amp;rsquo;s problems.&lt;/p&gt;

&lt;p&gt;The plan for Perl 6 was to provide not only a new implementation of the language, but also a new language design that could be extended by mere mortals. This could increase the number of people who would be both capable and interested in maintaining and extending Perl, both as a language and as a compiler/interpreter. A fresh start would help Perl developers take Perl into bold new directions that were simply not practical with the then-current Perl 5 implementation.&lt;/p&gt;

&lt;p&gt;Today, over three years later, the Perl development community is quite active writing innovative software that solves the problems real people and businesses face today. However, the innovation and inspiration is not entirely where we thought it would be. Instead of seeing the new language and implementation driving a new wave of creativity, we are seeing innovation in the libraries and modules available on CPAN &amp;ndash; code you can use right now with Perl 5, a language we all know and love.&lt;/p&gt;

&lt;p&gt;In a very real sense, the Perl 6 project has already achieved its true goals: to keep Perl relevant and interesting, and to keep the creativity flowing within the Perl community.&lt;/p&gt;

&lt;p&gt;What does this mean for Perl&amp;rsquo;s future? First of all, Perl 5 development continues alongside Perl 6 and Parrot. There are currently &lt;strong&gt;five&lt;/strong&gt; active development branches for Perl 5. The main branch, Perl 5.8.x, is alive and well. Jarkko Hietaniemi released Perl 5.8.1 earlier this year as a maintenance upgrade to Perl 5.8.0, and turned over the patch pumpkin to Nick Clark, who is presently working on building Perl 5.8.3. In October, Hugo van der Sanden released the initial snapshot of Perl 5.9.0, the development branch that will lead to Perl 5.10. And this summer, Fotango announced that Arthur Bergman is working on Ponie, a port of Perl 5.10 to run on top of Parrot, instead of the current Perl 5 engine. Perl 5.12 may be the first production release to run on top of the new implementation.&lt;/p&gt;

&lt;p&gt;For developers who are using older versions of Perl for compatibility reasons, Rafael Garcia-Suarez is working on Perl 5.6.2, an update to Perl 5.6.1 that adds support for recent operating-system and compiler releases. Leon Brocard is working on making the same kinds of updates for Perl 5.005_04.&lt;/p&gt;

&lt;p&gt;Where is Perl going? Perl is moving forward, and in a number of parallel directions. For workaday developers, three releases of Perl will help you get your job done: 5.8.x, 5.6.x and, when absolutely necessary, 5.005_0x. For the perl5-porters who develop Perl itself, fixes are being accepted in 5.8.x and 5.9.x. For bleeding-edge developers, there&amp;rsquo;s plenty of work to do on with Parrot. For the truly bleeding edge, Larry and his lieutenants are hashing out the finer points of the design of the Perl 6 language.&lt;/p&gt;

&lt;p&gt;That describes where development of Perl as a language and as a platform is going. But the truly interesting things about Perl aren&amp;rsquo;t language issues, but how Perl is &lt;em&gt;used&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-state-of-perl-usage-the-state-of-perl-usage-span&#34;&gt;&lt;span id=&#34;The_State_of_Perl_Usage&#34;&gt;The State of Perl Usage&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;One way to get a glimpse how Perl is used in the wild is to look at CPAN. I recently took a look at the modules list (&lt;a href=&#34;http://www.cpan.org/modules/01modules.index.html&#34;&gt;www.cpan.org/modules/01modules.index.html&lt;/a&gt;) and counted module distributions by the year of their most recent release. These statistics are not perfect, but they do give a reasonable first approximation of the age of CPAN distributions currently available.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        1995:   30 ( 0.51%)
        1996:   35 ( 0.59%)
        1997:   68 ( 1.16%)
        1998:  189 ( 3.21%)
        1999:  287 ( 4.88%)
        2000:  387 ( 6.58%)
        2001:  708 (12.03%)
        2002: 1268 (21.55%)
        2003: 2907 (49.40%)
        cpan: 5885 (100.00%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, about half of the distributions on CPAN were created or updated in 2003. A little further analysis shows that nearly 85% of these distributions were created or updated since the Perl 6 announcement in July 2000. Clearly, interest in developing in Perl is not on the wane. If anything, Perl development, as measured by CPAN activity, is quite healthy.&lt;/p&gt;

&lt;p&gt;Looking at the &amp;ldquo;freshness&amp;rdquo; of CPAN doesn&amp;rsquo;t tell the whole story about Perl. It merely indicates that Perl developers are actively releasing code on CPAN. Many of these uploads are new and interesting modules, or updates that add new features or fix bugs in modules that we use every day. Some modules are quite stable and very useful, even though they have not been updated in years. But many modules are old, outdated, joke modules, or abandoned.&lt;/p&gt;

&lt;p&gt;A pessimist looks at CPAN and sees abandoned distributions, buggy software, joke modules and packages in the early stage of development (certainly not ready for &amp;ldquo;prime time&amp;rdquo; use). An optimist looks at CPAN and sees some amazingly useful modules (DBI, LWP, Apache::*, and so on), and ignores the less useful modules lurking in the far corners of CPAN.&lt;/p&gt;

&lt;p&gt;Which view is correct? Looking over the module list, only a very small number of modules are jokes registered in the &lt;code&gt;Acme&lt;/code&gt; namespace: about 85 of over 5800 distributions, or less than 2% of the modules on CPAN. Of course, there are joke modules that are not in the &lt;code&gt;Acme&lt;/code&gt; namespace, like &lt;code&gt;Lingua::Perligata::Romana&lt;/code&gt; and &lt;code&gt;Lingua::Atinlay::Igpay&lt;/code&gt;. Yet the number of jokes released as CPAN modules remains quite small when compared to CPAN as a whole.&lt;/p&gt;

&lt;p&gt;But how much of CPAN is actually &lt;em&gt;useful&lt;/em&gt;? It depends on what kind of problems you&amp;rsquo;re solving. Let&amp;rsquo;s assume that only the code released within the last three years, or roughly 82% of CPAN, is worth investigating. Let&amp;rsquo;s further assume that everything in the &lt;code&gt;Acme&lt;/code&gt; namespace can be safely ignored, and that the total number of joke modules is no more than twice the number of &lt;code&gt;Acme&lt;/code&gt; modules. Ignoring a further 3-4% of CPAN leaves us with about 78%, or over 4,000 distributions, to examine.&lt;/p&gt;

&lt;p&gt;How much of this code is production-quality? It&amp;rsquo;s quite difficult to say, actually. These modules cover a stunningly diverse range of problem domains, including, but not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application servers&lt;/li&gt;
&lt;li&gt;Artificial intelligence algorithms&lt;/li&gt;
&lt;li&gt;Astronomy&lt;/li&gt;
&lt;li&gt;Audio&lt;/li&gt;
&lt;li&gt;Bioinformatics&lt;/li&gt;
&lt;li&gt;Compression and encryption&lt;/li&gt;
&lt;li&gt;Content management systems (for both small and large scale web sites)&lt;/li&gt;
&lt;li&gt;Database interfaces&lt;/li&gt;
&lt;li&gt;Date/Time Processing&lt;/li&gt;
&lt;li&gt;eCommerce&lt;/li&gt;
&lt;li&gt;Email processing&lt;/li&gt;
&lt;li&gt;GUI development&lt;/li&gt;
&lt;li&gt;Generic algorithms from computer science&lt;/li&gt;
&lt;li&gt;Graphing and charting&lt;/li&gt;
&lt;li&gt;Image processing&lt;/li&gt;
&lt;li&gt;Mathematical and statistical programming&lt;/li&gt;
&lt;li&gt;Natural language processing (in English, Chinese, Japanese, and Finnish, among others)&lt;/li&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;Operating-system integration with Windows, Solaris, Linux, Mac OS, etc.&lt;/li&gt;
&lt;li&gt;Perl development support&lt;/li&gt;
&lt;li&gt;Perl/Apache integration&lt;/li&gt;
&lt;li&gt;Spam identification&lt;/li&gt;
&lt;li&gt;Software testing&lt;/li&gt;
&lt;li&gt;Templating systems&lt;/li&gt;
&lt;li&gt;Text processing&lt;/li&gt;
&lt;li&gt;Web services, web clients, and web servers&lt;/li&gt;
&lt;li&gt;XML/HTML processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;and that&amp;rsquo;s a very incomplete sample of the kinds of distributions available on CPAN today. Suffice it to say that hundreds, if not thousands, of CPAN modules are actively used on a daily basis to solve the kinds problems that we regularly face.&lt;/p&gt;

&lt;p&gt;And isn&amp;rsquo;t that the &lt;strong&gt;real&lt;/strong&gt; definition of production quality, anyway?&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-other-state-of-perl-usage-the-other-state-of-perl-usage-span&#34;&gt;&lt;span id=&#34;The_Other_State_of_Perl_Usage&#34;&gt;The Other State of Perl Usage&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As Larry mentioned in his second keynote address to the Perl Conference in 1998 (&lt;a href=&#34;http://localhost:1313/pub/1998/08/show/onion.html&#34;&gt;www.perl.com/pub/1998/08/show/onion.html&lt;/a&gt;), the Perl community is like an onion. The important part isn&amp;rsquo;t the small core, but rather the larger outer layers where most of the mass and all of the growth are found. Therefore, the true state of Perl isn&amp;rsquo;t about interpreter development or CPAN growth, but in how we all use Perl every day.&lt;/p&gt;

&lt;p&gt;Why do we use Perl &lt;em&gt;every day&lt;/em&gt;? Because Perl scales to solve both small and large problems. Unlike languages like C, C++, and Java, Perl allows us to write small, trivial programs quickly and easily, without sacrificing the ability to build large applications and systems. The skills and tools we use on large projects are also available when we write small programs.&lt;/p&gt;

&lt;h4 id=&#34;span-id-programming-in-the-small-programming-in-the-small-span&#34;&gt;&lt;span id=&#34;Programming_in_the_Small&#34;&gt;Programming in the Small&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a common example. Suppose I want to look at the O&amp;rsquo;Reilly Perl resource page and find all links off of that page. My program starts out by loading two modules, &lt;code&gt;LWP::Simple&lt;/code&gt; to fetch the page, and &lt;code&gt;HTML::LinkExtor&lt;/code&gt; to extract all of the links:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/bin/perl -w

        use strict;
        use LWP::Simple;
        use HTML::LinkExtor;

        my $ext = new HTML::LinkExtor;
        $ext-&amp;gt;parse(get(&amp;quot;http://perl.oreilly.com/&amp;quot;));
        my @links = $ext-&amp;gt;links();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, I have the beginnings of a web spider or possibly a screen scraper. With a few regular expressions and a couple of list operations like &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, or &lt;code&gt;foreach&lt;/code&gt;, I can whittle this list of links down to a list of links to Safari, the O&amp;rsquo;Reilly&amp;rsquo;s book catalog, or new articles on Perl.com. A couple of lines more, and I could store these links in a database (using &lt;code&gt;DBI&lt;/code&gt;, &lt;code&gt;DB_File&lt;/code&gt;, &lt;code&gt;GDBM&lt;/code&gt;, or some other persistent store).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve written (and thrown away) many programs like this over the years. They are consistently easy to write, and typically less than one page of code. That says a lot about the capabilities Perl and CPAN provide. It also says a lot about how much a single programmer can accomplish in a few minutes with a small amount of effort.&lt;/p&gt;

&lt;p&gt;Yet the most important lesson is this: Perl allows us to use the same tools we use to write applications and large systems to write small scripts and little hacks. Not only are we able to solve mundane problems quickly and easily, but we can use one set of tools and one set of skills to solve a wide range of problems. Furthermore, because we use the same tools, our quick hacks can work alongside larger systems.&lt;/p&gt;

&lt;h4 id=&#34;span-id-programming-in-the-large-programming-in-the-large-span&#34;&gt;&lt;span id=&#34;Programming_in_the_Large&#34;&gt;Programming in the Large&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Of course, it&amp;rsquo;s one thing to assert that Perl programs can scale up beyond the quick hack. It&amp;rsquo;s another thing to actually build large systems with Perl. The Perl Success Stories Archive (&lt;a href=&#34;http://perl.oreilly.com/news/success_stories.html&#34;&gt;perl.oreilly.com/news/success_stories.html&lt;/a&gt;) details many such efforts, including many large systems, high-volume systems, and critical applications.&lt;/p&gt;

&lt;p&gt;Then there are the high-profile systems that get a lot of attention at Perl conferences and on various Perl-related mailing lists. For example, Amazon.com, the Internet&amp;rsquo;s largest retailer, uses &lt;code&gt;HTML::Mason&lt;/code&gt; for portions of their web site. Another fifty-odd Mason sites are profiled (&lt;a href=&#34;http://www.masonhq.com/about/sites.html&#34;&gt;www.masonhq.com/about/sites.html&lt;/a&gt;) at &lt;a href=&#34;http://www.masonhq.org/&#34;&gt;www.masonhq.org&lt;/a&gt;, including Salon.com, AvantGo, and DynDNS.&lt;/p&gt;

&lt;p&gt;Morgan Stanley is another big user of Perl. As far back as 2001, W. Phillip Moore talked about where Perl and Linux fit into the technology infrastructure at Morgan Stanley. More recently, Merijn Broeren detailed (&lt;a href=&#34;http://conferences.oreillynet.com/cs/os2003/view/e_sess/4293&#34;&gt;conferences.oreillynet.com/cs/os2003/view/e_sess/4293&lt;/a&gt;) how Morgan Stanley relies on Perl to keep 9,000 of its computers up and running non-stop, and how Perl is used for a wide variety of applications used worldwide.&lt;/p&gt;

&lt;p&gt;ValueClick, a provider of high-performance Internet advertising, pushes Perl in a different direction. Each day, ValueClick serves up over 100 million targeted banner ads on publisher web sites. The process of choosing which ad to send where is very precise, and handled by some sophisticated Perl code. Analyzing how effective these ads are requires munging through huge amounts of logging data. Unsurprisingly, ValueClick uses Perl here, too.&lt;/p&gt;

&lt;p&gt;Ticketmaster sells tickets to sporting and entertainment events in at least twenty countries around the world. In a year, Ticketmaster sells over 80 million tickets worldwide. Recently, Ticketmaster sold one million tickets in a single day, and about half of those tickets were sold over the Web. And the Ticketmaster web site is almost entirely written in Perl.&lt;/p&gt;

&lt;p&gt;These are only some of the companies that use Perl for large, important products. Ask around and you&amp;rsquo;ll hear many, many more stories like these. Over the years, I&amp;rsquo;ve worked with more than a few companies who created some web-based product or service that was built entirely with Perl. Some of these products were responsible for bringing in tens of millions of dollars in annual revenue.&lt;/p&gt;

&lt;p&gt;Clearly, Perl is for more than just simple hacks.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-new-state-of-perl-usage-the-new-state-of-perl-usage-span&#34;&gt;&lt;span id=&#34;The_New_State_of_Perl_Usage&#34;&gt;The New State of Perl Usage&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Many companies use Perl to build proprietary products and Internet-based services they can sell to their customers. Still more companies use Perl to keep internal systems running, and save money through automating mundane processes.&lt;/p&gt;

&lt;p&gt;A new way people are using Perl today is the open source business. Companies like Best Practical and Kineticode are building products with Perl, and earning money from training, support contracts, and custom development. Their products are open source, freely available, and easy to extend. Yet there is enough demand for add-on services that these companies are profitable and sustain development of these open source products.&lt;/p&gt;

&lt;p&gt;Best Practical Solutions (&lt;a href=&#34;http://www.bestpractical.com/&#34;&gt;www.bestpractical.com&lt;/a&gt;) develops Request Tracker, more commonly known as RT (&lt;a href=&#34;http://www.bestpractical.com/rt/&#34;&gt;www.bestpractical.com/rt&lt;/a&gt;). RT is an issue-tracking system that allows teams to coordinate their activities to manage user requests, fix bugs, and track actions taken on each task. As an open source project, RT has been under development since 1996, and has thousands of corporate users, including those listed on the testimonials page (&lt;a href=&#34;http://www.bestpractical.com/rt/praise.html&#34;&gt;www.bestpractical.com/rt/praise.html&lt;/a&gt;). Today, RT powers bug tracking for Perl development (&lt;a href=&#34;http://rt.perl.org/perlbug&#34;&gt;rt.perl.org/perlbug&lt;/a&gt;), and for CPAN module development (&lt;a href=&#34;http://rt.cpan.org&#34;&gt;rt.cpan.org&lt;/a&gt;). Many organizations rely on the information they keep in RT, sometimes upwards of 1000 issues per day, or 300,000 issues that must be tracked and resolved each year.&lt;/p&gt;

&lt;p&gt;Kineticode (&lt;a href=&#34;http://www.kineticode.com/&#34;&gt;www.kineticode.com&lt;/a&gt;)is another successful open source business built around a Perl product, the Bricolage content management system (&lt;a href=&#34;http://www.bricolage.cc/&#34;&gt;www.bricolage.cc&lt;/a&gt;). Bricolage is used by some rather large web sites, including ETOnline (&lt;a href=&#34;http://www.etonline.com/&#34;&gt;www.etonline.com&lt;/a&gt;) and the World Health Organization (&lt;a href=&#34;http://www.who.int/&#34;&gt;www.who.int&lt;/a&gt;). Recently, the Howard Dean campaign (&lt;a href=&#34;http://www.deanforamerica.com/&#34;&gt;www.deanforamerica.com&lt;/a&gt;) adopted Bricolage as its content management system to handle the site&amp;rsquo;s frequent updates in the presence of millions of pageviews per day, with peak demand more than ten times that rate.&lt;/p&gt;

&lt;p&gt;A somewhat related business is SixApart (&lt;a href=&#34;http://www.sixapart.com/&#34;&gt;www.sixapart.com&lt;/a&gt;), makers of the ever-popular MovableType (&lt;a href=&#34;http://www.movabletype.org/&#34;&gt;www.movabletype.org&lt;/a&gt;). SixApart offers MovableType with a free license for personal and non-commercial use, but charges a licensing fee for corporate and commercial use. Make no mistake, MovableType &lt;strong&gt;is&lt;/strong&gt; proprietary software, even though it is implemented in Perl. Nevertheless, SixApart has managed to build a profitable business around their Perl-based product.&lt;/p&gt;

&lt;p&gt;Surely these are the early days for businesses selling or supporting software written in Perl. These three companies are not the only ones forging this path, although they are certainly three of the most visible.&lt;/p&gt;

&lt;h3 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;Conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I started looking into the state of Perl today when my colleague asked me if Perl has a future. He challenged me to look past my knee-jerk answers, &amp;ldquo;&lt;em&gt;Of course Perl has a future!&lt;/em&gt;&amp;rdquo; and &amp;ldquo;&lt;em&gt;Perl&amp;rsquo;s future is in Perl 6 and Parrot!&lt;/em&gt;&amp;rdquo; I&amp;rsquo;m glad he did.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot of activity in the Perl world today, and much of it quite easily overlooked. Core development is moving along at a respectable pace; CPAN activity is quite healthy; and Perl remains a capable environment for solving problems, whether they need a quick hack, a large system, or a Perl-based product. Even if we don&amp;rsquo;t see Perl 6 in 2004, there&amp;rsquo;s a lot of work to be done in Perl 5, and a lot of work Perl 5 is still quite capable of doing.&lt;/p&gt;

&lt;p&gt;Then there&amp;rsquo;s the original question that started this investigation rolling: &amp;ldquo;&lt;em&gt;Can Perl compete with Java and .NET?&lt;/em&gt;&amp;rdquo; Clearly, when it comes to solving problems, Perl is at least as capable a tool as Java and .NET today. When it comes to evangelizing one platform to the exclusion of all others, then perhaps Perl can&amp;rsquo;t compete with .NET or Java. Then again, when did evangelism ever solve a problem that involved sitting down and writing code?&lt;/p&gt;

&lt;p&gt;Of course, if Java or .NET is more your speed, by all means use those environments. Perl&amp;rsquo;s success is not predicated on some other language&amp;rsquo;s failure. Perl&amp;rsquo;s success hinges upon helping you get &lt;em&gt;your&lt;/em&gt; job done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures on Perl Whirl 2000</title>
      <link>http://localhost:1313/pub/2000/06/perlwhirl.html/</link>
      <pubDate>Tue, 13 Jun 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/06/perlwhirl.html/</guid>
      <description>&lt;p&gt;Can a tech conference on a luxury cruise boat possibly be legitimate? Sure it is, and then some.&lt;/p&gt;

&lt;p&gt;This past Memorial Day, I joined about 200 attendees on Perl Whirl 2000, the inaugural Geek Cruise. All in all, we found that not only was there a mind-blowingly good set of tutorials available, but there was more time to meet and chat with fellow Perl hackers than there is at most conferences.&lt;/p&gt;

&lt;p&gt;Honestly, I knew I was going on the Perl Whirl, but the idea took a while to set in. When I received my tickets, it still seemed unreal. When I started packing my bags, it seemed like just another conference. When I boarded the plane, it was just another trip. When I arrived at my hotel in Vancouver, reality began to set in: I&amp;rsquo;m going on a Cruise. To Alaska. Talking about Perl all along the way. Soon, we would board Holland America&amp;rsquo;s m.s. Volendam and kick off Perl Whirl 2000.&lt;/p&gt;

&lt;p&gt;From the very beginning, the cruise exuded a palpable air of calm. Gone was the normal harried conference mentality where every minute is either spent agonizing over which great presentation to attend or which great conversation to continue in the hall. From the moment we left the harbor, everyone had a laid-back attitude, as if to say ``I can find you later, we have a week together and plenty of time to talk&amp;rdquo;. And that made all the difference.&lt;/p&gt;

&lt;p&gt;Anyone who thought this wasn&amp;rsquo;t a serious conference was in for a big surprise. Although there were many social events, sometimes starting at 10 or 11 PM, the tutorials started at 8:30am and continued until 5 PM. (The schedule was just packed, and I&amp;rsquo;m not the only one who was hurting around 8am, especially when we had to adjust our clocks into and out of Alaska Time.) Three full days of tutorials were offered across three to five tracks, with the middle day being split into two half-day chunks. Ten extra hours of conference programming were available in roughly ninety-minute chunks before dinner on some nights. Then there was the B-Movie marathon. Then there were the cocktail parties. Then there were all of the other events organized by the ship&amp;rsquo;s cruise director. Yes, the schedule was truly packed.&lt;/p&gt;

&lt;p&gt;Even with such a dense schedule, there was plenty of time to unwind. We could all eat a nice long, lingering dinner in the main dining room (or take dinner on the Lido deck in shorts and T-shirts, or just order room service), and gradually reconvene in the Crow&amp;rsquo;s Nest after dinner for a few drinks (or not), and lots of after-dinner conversation until the dusk finally gave way to pre-dawn twilight around 3am.&lt;/p&gt;

&lt;p&gt;What were the seminars themselves like? Some of the presenters were incredibly popular, like Mark-Jason Dominus, Tom Christiansen, Tim Bray and Lincoln Stein. The bits and pieces I sat through were simply stellar, without exception. Many people I talked to echoed the common conference complaint, ``there&amp;rsquo;s too much good stuff to see, and too many great presentations conflict with each other&amp;rdquo;. Sadly, every conference organizer heard this before, and such conflicts are bound to appear as soon as a schedule is produced.&lt;/p&gt;

&lt;p&gt;While I didn&amp;rsquo;t sit through most of the seminar program, I did sit through the entire pre-dinner program. Here attendees got to hear some great things people are doing with Perl. The first pre-dinner talk was by Steven Roberts who talked about his Microship project. Some people may remember Steve as the man behind Behemoth, the recumbent bicycle and trailer with more computing power than an average dentist&amp;rsquo;s office. Steve&amp;rsquo;s current project is a pair of boats with similar amounts of computing power that will soon travel the inland and coastal waters of the United States. Steve&amp;rsquo;s team recently realized that projects such as this live and die on volunteer effort, and while it is quite easy to find Perl hackers to write and upgrade Perl CGI programs, it is quite difficult to find NewtonScript programmers willing to donate their time to a project like this. This observation drove Steve and his team to replace a Newton-based management console with a simple web browser running against an on-board linux-based web server.&lt;/p&gt;

&lt;p&gt;Steve&amp;rsquo;s talk went over incredibly well, and I was among a small group of people on the boat who couldn&amp;rsquo;t stop talking about it all week. The enthusiasm behind this ninety minute presentation was so much more than expected that it helped everyone involved with GeekCruises realize that we never set aside any time for BOFs (``birds of a feather&amp;rdquo; sessions). Once again, the unharried, laid-back atmosphere came back to help us, and we found a block of time that didn&amp;rsquo;t conflict with any other programming and just met beside the pool (conveniently placed near a totally unhealthy amount of dessert).&lt;/p&gt;

&lt;p&gt;Two nights later, we were privileged to hear John Clutterbuck discuss how Perl saved the Land Registry System in Scotland, displacing Java, cross-platform toolkits and 4GL environments in the process. The crux of John&amp;rsquo;s talk was about implementing a typical n-tier client-server system. Instead of using a more ``traditional&amp;rdquo; tool like Java, Visual Basic or other such environments, John&amp;rsquo;s team used Perl/TK to create graphical client programs. One of the major reasons why Perl was a good choice for this project was that Perl was already in use internally to munge incoming data feeds. When it was time to implement this project, Perl/TK was not another new skill requiring downtime and retraining; it was just another library to use alongside the DBI.&lt;/p&gt;

&lt;p&gt;There were other great non-seminar presentations. Tim Bray talked about standards, standards organizations, and encouraged everyone to complain loudly when our vendors don&amp;rsquo;t implement standards that matter to us, implement them poorly, or misimplement them intentionally. The next night, Larry Wall guest-hosted Jon Orwant&amp;rsquo;s Internet Quiz show, which was quite fun. The cruise program wound up about a day later, when Larry was available for an open-ended question and answer session. This Q&amp;amp;A was quite refreshing, because the questions were frequently deep, often thought-provoking, and always brought out an honest, uncensored answer from Larry (unless his wife Gloria pre-empted him).&lt;/p&gt;

&lt;p&gt;Oh, did I mention that this was a cruise? With all these Perl-ish events all week, it was easy to forget at times that we were in the midst of some of the most beautiful parts of North America. While we were cruising north, we witnessed an endless parade of tree-lined mountains of British Columbia and Alaska. Our itinerary also brought us into Glacier Bay, where we saw the big ice break apart in the morning and watched for whales in the afternoon.&lt;/p&gt;

&lt;p&gt;And what&amp;rsquo;s the point of cruising to Alaska if you&amp;rsquo;re not going to get off the boat and actually see Alaska? Our itinerary offered three ports of call. Our first port was Juneau, the largest city in southeast Alaska. Although Juneau may be too small to have a Kinko&amp;rsquo;s, it is plenty large enough to have one of the finest breweries in North America. Around forty Perl Whirl passengers gathered together to go on a Pub Crawl over Juneau while we were docked. Our first stop was the Alaska Brewing Company, voted best brewery in America three years running at the Great American Beer Festival (they are now enshrined in the GABF&amp;rsquo;s ``Hall of Foam&amp;rdquo;). After leaving the brewery, we visited some other local watering holes and passed by the wondrous Mendenhall Glacier. Our crawl ended up near the dock at the Mt. Roberts tram. At the top of Mt. Roberts, we found ourselves in bright sunlight at 9 PM on the last day in May, making snowballs behind the observation deck. When life gives you a chance to make snowballs in Alaska when it&amp;rsquo;s warm enough to wear shorts and sandals, it&amp;rsquo;s best to take advantage of the opportunity.&lt;/p&gt;

&lt;p&gt;The next day, we found ourselves in Skagway, a small town north of Juneau where the main industry is obviously tourism. The helicopter pad at the end of the dock says so loud and clear. At this point in our travels, I must admit that I welcomed a quiet day wandering through this small town, perhaps reading a bit of the Cryptonomicon on a sunny patch of turf. After a quick stroll, I bumped into Tom Christiansen, who asked me if I was up for a little walk. I briefly forgot that Tom lives in Boulder, Colorado; when he says ``little walk&amp;rdquo;, most other people interpret that as ``a hike in the woods&amp;rdquo;. I joined Tom, and we had a wonderful afternoon wandering through a lush green trail that started at the edge of Skagway. When we reached our destination, we were surrounded by on all sides by the largest fjord in North America. All in all, it was the most enjoyable day I spent on the cruise.&lt;/p&gt;

&lt;p&gt;After our wanderings through Glacier Bay, we wound up in Ketchikan, our last port of call. I decided it was time wander aimlessly with my friends Monty and Julie Taylor. Julie peeled off early that morning and would later catch a 34-inch salmon on a fishing excursion. Monty and I were up for some local flavor and eventually found Anabelle&amp;rsquo;s, a great little restaurant that serves a stunningly good seafood chowder and beer-battered halibut and chips. Paired with a fresh pint or two of Alaskan Amber, and this is easily the best meal I had all week, and the chefs on board the Volendam provided some stiff competition. If I ever return to Ketchikan, you can find me at Anabelle&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Speaking of excursions, I didn&amp;rsquo;t sign up for any mountain bike rides, helicopter rides, sea-plane tours, hikes or fishing. Lots of people did, but I&amp;rsquo;m a city boy who likes meandering through town, and the occasional hike in the woods. And I had a great time doing just that.&lt;/p&gt;

&lt;p&gt;All in all, I had a wonderful time on Perl Whirl 2000. The Perl was great and Alaska was too (or maybe the other way around). Will I return to Alaska again? Perhaps. Will I return to Alaska on a future Perl Whirl? Just try and stop me.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;If you haven&amp;rsquo;t seen it already, you might want to check out &lt;a href=&#34;http://www.oreillynet.com/pub/network/2000/06/06/geekcruise.html&#34;&gt;the 31 things Tim Bray learned on the cruise&lt;/a&gt;. It has pictures, including one of Larry in one of his many tuxedos.&lt;/li&gt;
&lt;li&gt;It turns out to be surprisingly easy to keep up an 8 AM - 11 PM schedule when the sun doesn&amp;rsquo;t start setting until 9 PM and then comes up again at 3 AM.&lt;/li&gt;
&lt;li&gt;I can attest to the laid-back attitude on the cruise. Everyone I met was kind and friendly, which isn&amp;rsquo;t always the case at shorter conferences in less delightful venues.&lt;/li&gt;
&lt;li&gt;In Glacier Bay, if you were quiet, you could hear the glacier creaking and popping as it slid into the sea. I had heard stories of glaciers calving, which is when a piece breaks off and falls into the water. (This is where icebergs come from.) I had always imagined that this was a comparatively rare event, that if you watched the glacier every moment for a whole day, you might, if you were lucky, see a piece break off. Wrong! Stuff is breaking off the glacier all the time and you only have to watch for a few minutes before something happens.&lt;/li&gt;
&lt;li&gt;Downsides of the cruise ship: Sometimes other cruise activities interfered with the conference. For example, Dori Smith&amp;rsquo;s Javascript class was held in a small room just off the main dining room, where a wine-tasting session was in progress, and it was hard to hear Dori over the amplified voice of the wine expert. Similarly, one of my classes was in the room immediately adjacent to the casino&amp;mdash;fortunately there was a door I could use to shut out the slot machine racket.&lt;/li&gt;
&lt;li&gt;My favorite cruise story: I got to interrupt my regex class so that we could rush over to the windows and look at the whales off the side of the ship.&lt;/li&gt;
&lt;li&gt;Finally: Adam says it was easy to forget that we were in the midst of some of the most beautiful parts of North America. It wasn&amp;rsquo;t easy for me to forget, and I spent most of my free time just staring out of various windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;Mark Dominus&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual Presentations with Perl</title>
      <link>http://localhost:1313/pub/1999/12/virtual-presentations.html/</link>
      <pubDate>Mon, 20 Dec 1999 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/1999/12/virtual-presentations.html/</guid>
      <description>&lt;p&gt;This summer, at yapc in Pittsburgh and again at the third Perl Conference, I was very fortunate to meet with a lot of friends from other regional Perl Monger groups. A lot of our groups have similar problems and frustrations. While larger groups like &lt;code&gt;phl.pm&lt;/code&gt;, &lt;code&gt;ny.pm&lt;/code&gt;, &lt;code&gt;boston.pm&lt;/code&gt; and others do have many active members who meet frequently, other groups have fewer than 5 or 10 members and don&amp;rsquo;t get together for a variety of reasons - geography, time constraints, projects at work, and so on.&lt;/p&gt;

&lt;p&gt;Talking about this problem with Sarah Burcham of &lt;code&gt;St.Louis.pm&lt;/code&gt;, we hit upon the idea of starting &amp;ldquo;virtual presentations&amp;rdquo;. If an active group like &lt;code&gt;phl.pm&lt;/code&gt; can have regular technical meetings, why can&amp;rsquo;t we host them live on the web, so a small, far-flung group in Missouri or Nebraska can join in?&lt;/p&gt;

&lt;p&gt;So Sarah and I started to talk about this idea some more, and we started to understand how these &amp;ldquo;virtual presentations&amp;rdquo; needed to work. Cumbersome Java and proprietary clients were right out - we wanted to be promoting Perl, after all, and we needed this to be easy to use, easy to setup and easy to promote. We needed some way to synchronize the speaker&amp;rsquo;s slides to his presentation, and we needed some way for the remote group to ask questions and give feedback. So we immediately reduced the problem to the bare essentials. This got rid of all of the needless complexity that is the source of both great demos and countless headaches.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;phl.pm&lt;/code&gt; had a technical meeting scheduled a month after the Perl Conference, we started talking about how we could broadcast that presentation to the mongers in St. Louis.&lt;/p&gt;

&lt;p&gt;We thought about RealAudio/RealVideo broadcasting to bring a presentation to a remote location. Neither RealAudio nor RealVideo require a large investment in hardware or software to capture and broadcast a presentation in real time. This approach, while perfectly valid, didn&amp;rsquo;t work for us, since the Philly side of the presentation was taking place behind a firewall. Assuming that we had the resources to transmit in real time, we couldn&amp;rsquo;t get the packets out of the building. There was also the problem of bandwidth utilization - ISI, The Institute for Scientific Information, was kind enough to host the meeting, and we didn&amp;rsquo;t want to overload the network by providing dozens of RealVideo feeds.&lt;/p&gt;

&lt;p&gt;So, rather than trying to solve this problem with too many layers of technology, we just routed around it and used speaker phones. After all, if we are targeting small, far-flung groups, it should be easier to find a location with a speaker phone and a slow net connection than it is to find a location with sufficient unused bandwidth on a T1 line for realtime audio/video. A good host site can also use three-way calling to bring in two remote sites instead of one. While this technique may be much more limiting than using RealAudio or other internet audio broadcast, it is also much more accessible.&lt;/p&gt;

&lt;p&gt;Now that we had the two-way communication problem solved, all that was left was synchronizing the audio presentation to the slides. Luckily, Kevin Lenzo had already solved this exact problem already with his two &amp;lsquo;SlideShow&amp;rsquo; scripts (&lt;a href=&#34;http://www.cs.cmu.edu/~lenzo/SlideShow/&#34;&gt;http://www.cs.cmu.edu/~lenzo/SlideShow/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Kevin&amp;rsquo;s scripts are actually quite crafty. &amp;lsquo;SlideShow&amp;rsquo; is actually a pair of scripts: one used in the presenter&amp;rsquo;s browser, and one used in each participant&amp;rsquo;s browser. The idea is very simple &amp;ndash; whatever the presenter sees in his browser, the participants see in their browsers. When the presenter follows a link to a new web page, the presenter and all particiapnts should see the new page. (This includes pages that are part of the slide show as well as any other web page, such as www.perl.com.)&lt;/p&gt;

&lt;p&gt;The first of these two scripts, &lt;code&gt;master.cgi&lt;/code&gt; is used by the person giving the presentation. This is the script which fetches web pages and keeps everyone synchronized. After fetching a URL, &lt;code&gt;master.cgi&lt;/code&gt; rewrites all HREF attributes in the page it fetches so that all links appear as HTTP GET requests to &lt;code&gt;master.cgi&lt;/code&gt;. The rewritten links contain the original target URL as a parameter. The new version of the page is returned to the presenter&amp;rsquo;s browser, so that once he starts using &lt;code&gt;master.cgi&lt;/code&gt;, all links followed are part of the presentation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;master.cgi&lt;/code&gt; script also saves a version of each page to a shared file for the second script, &lt;code&gt;nph-view.cgi&lt;/code&gt; to use. The &lt;code&gt;nph-view.cgi&lt;/code&gt; is a server-push script which can send a multiple distinct web pages back in a single, long-lived response. Every time &lt;code&gt;master.cgi&lt;/code&gt; updates the shared file, each &lt;code&gt;nph-view.cgi&lt;/code&gt; instance sends another part in it&amp;rsquo;s multipart response to one participant&amp;rsquo;s browser. There is no limit to the number of users of &lt;code&gt;nph-view.cgi&lt;/code&gt;, so long as the web server has enough resources to process one instance of this script for every participant. To avoid complications, &lt;code&gt;master.cgi&lt;/code&gt; removes all hyperlinks before saving a page to the shared file, so that participants don&amp;rsquo;t inadvertantly stop &lt;code&gt;nph-view.cgi&lt;/code&gt; from doing it&amp;rsquo;s job.&lt;/p&gt;

&lt;p&gt;At this point, we have all the tools we need for a virtual presentation. We have a host site, with conference phone (or RealAudio/RealVideo server) a web server configured with the SlideShow scripts, and a network connection for the presenter to display his slides. All the remote users need is a speaker phone (or a high bandwidth connection for realtime audio) and a simple network connection. We can continue down this path and decorate this setup with an IRC channel, a perl/tk whiteboard and so forth. Here, we&amp;rsquo;ve used Perl where appropriate to make the simple things simple, and other techniques to make the hard things possible.&lt;/p&gt;

&lt;p&gt;Since August, when Kevin, Sarah and I started discussing this idea, phl.pm has hosted two of these virtual presentations. In September, we hosted Mark-Jason Dominus&amp;rsquo; presentation on &lt;a href=&#34;http://www.plover.com/~mjd/perl/yak/#typing&#34;&gt;Strong Typing and Perl&lt;/a&gt;, with St. Louis.pm. In October, we hosted Abigail&amp;rsquo;s presentation on Damian Conway&amp;rsquo;s &lt;code&gt;Parse::RecDescent&lt;/code&gt; with both St. Louis.pm and Boston.pm.&lt;/p&gt;

&lt;p&gt;Both of these talks worked reasonably well. Many of the problems we encountered were not technical in nature. For example, when presenting dry material in front of a live audience, a good presenter can see the audience start to lose interest. When making the same presentation over a long-distance connection, it is difficult to discern whether the silence on the other end of the line means that the remote audience is rivited to their seats or asleep.&lt;/p&gt;

&lt;p&gt;When presenting to both live and remote audiences simultaneously, it is more important for a speaker to project his voice in a manner so that everyone can hear him clearly. This is different from presenting unamplified to a small group, or using a microphone in front of a live audience.&lt;/p&gt;

&lt;p&gt;Here are some other lessons we learned from our presentations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Test the audio connection early and often.&lt;/p&gt;

&lt;p&gt;This means getting the remote phone numbers as soon as possible. If using a conference phone, make sure that there are no long distance blocking issues to overcome. Test three way calling, if necessary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test the SlideShow CGI scripts on your webserver.&lt;/p&gt;

&lt;p&gt;Make sure that you have the CGI scripts configured so that any change made in the &amp;lsquo;master&amp;rsquo; window comes up in the &amp;lsquo;remote&amp;rsquo; window. This testing can be done with two browser windows on one computer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have a backup webserver configured and ready to use.&lt;/p&gt;

&lt;p&gt;Nothing is worse than starting a presentation and finding &amp;lsquo;no route to host&amp;rsquo; to your shared server. Having a backup server on another host (on another network, if possible) can overcome some of these problems.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make many small HTML pages. Avoid scrolling.&lt;/p&gt;

&lt;p&gt;While a speaker standing in the front of a room can scroll down the page to show an example, remote sites do not have the same cues and cannot see the presenter scroll down the page. Try and rework the content so that you can click to the next point or example instead of scrolling down to it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Be clear on what you are highlighting.&lt;/p&gt;

&lt;p&gt;When making a point in view of your audience, moving the mouse around to highlight or underscore a point works nicely. Since remote viewers cannot see what you are doing with your mouse, be clear on what points you are highlighting. If possible, rework your slides to make the important points more obvious.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A lot of Perl Mongers are interested in sharing what they know, and many groups are active enough to hold regular technical meetings. If you are interested in spreading your knowledge around, consider inviting a remote group of mongers to your technical meeting. It&amp;rsquo;s not too difficult, and it&amp;rsquo;s actually easier if you use Perl!&lt;/p&gt;

&lt;p&gt;Happy Mongering!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

