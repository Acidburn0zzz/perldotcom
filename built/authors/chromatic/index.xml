<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chromatic on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/chromatic/</link>
    <description>Recent content in Chromatic on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2014 06:00:01 -0800</lastBuildDate>
    <atom:link href="/authors/chromatic/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Year in Perl 2013 Retrospective</title>
      <link>http://localhost:1313/pub/2014/01/the-year-in-perl-2013-retrospective.html/</link>
      <pubDate>Wed, 01 Jan 2014 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2014/01/the-year-in-perl-2013-retrospective.html/</guid>
      <description>

&lt;h2 id=&#34;the-year-in-perl-2013&#34;&gt;The Year in Perl 2013&lt;/h2&gt;

&lt;p&gt;Welcome to 2014, Perl mongers, fans, hackers, and dabblers. It&amp;rsquo;s been a big year in our quirky little language. The community has grown. The CPAN has expanded. Bugs have been squashed, conferences attended, and projects released. Here&amp;rsquo;s a cross-section of what happened that you may have missed.&lt;/p&gt;

&lt;h3 id=&#34;january-2013&#34;&gt;January 2013&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.perloasis.info/opw2013/&#34;&gt;2013 Perl Oasis conference&lt;/a&gt; took place in Orlando, Florida, US.&lt;/p&gt;

&lt;p&gt;At the Perl Oasis conference, Stevan Little gave a talk entitled &lt;a href=&#34;https://speakerdeck.com/stevan_little/perl-is-not-dead-it-is-a-dead-end&#34;&gt;Perl is not Dead, it is a Dead End&lt;/a&gt; about forking Perl to experiment with new design and implementation ideas. The talk included an announcement of &lt;a href=&#34;http://moeorganization.github.io/moe-web/&#34;&gt;Moe&lt;/a&gt;, a reimplementation of parts of Perl. By September, Moe would go dormant.&lt;/p&gt;

&lt;p&gt;Shawn Moore formally deprecated &lt;a href=&#34;https://metacpan.org/pod/Any::Moose&#34;&gt;Any::Moose&lt;/a&gt;. If you need a lightweight OO system which can upgrade to Moose when you use Moose features, use &lt;a href=&#34;https://metacpan.org/pod/Moo&#34;&gt;Moo&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;Nick Perez wrote an article about &lt;a href=&#34;http://perl-yarg.blogspot.ca/2013/01/cloudpan.html&#34;&gt;CloudPAN, a way to use modules locally without installing them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dan Write of &lt;a href=&#34;http://perlfoundation.org/&#34;&gt;TP&lt;em&gt;/a&lt;/em&gt; published a&lt;/a&gt;&lt;a href=&#34;http://news.perlfoundation.org/2013/01/perl-5-core-maintenance-fund-s.html&#34;&gt;report on the Perl 5 Core Maintenance Fund&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Matsuno Tokuhiro announced &lt;a href=&#34;http://blog.64p.org/entry/2013/01/21/134639&#34;&gt;plenv, a Pler installation management tool&lt;/a&gt;. Compare it to &lt;a href=&#34;http://perlbrew.pl/&#34;&gt;perlbrew&lt;/a&gt; and Ruby&amp;rsquo;s rbenv.&lt;/p&gt;

&lt;p&gt;The Perl 5 Porters announced &lt;a href=&#34;https://rt.perl.org/rt3//Public/Bug/Display.html?id=116491&#34;&gt;core modules scheduled for removal in Perl 5.20&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;VM Brasseur tackled the problem of recruiting new programmers to Perl in &lt;a href=&#34;http://anonymoushash.vmbrasseur.com/2013/01/22/improving-perls-new-programmer-outreach/&#34;&gt;Improving Perl&amp;rsquo;s New Programmer Outreach&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.perl.org/users/ovid/2013/01/testclassmoose-on-the-cpan.html&#34;&gt;Ovid announced the release of Test::Class::Moose&lt;/a&gt; to the CPAN. Since then, he&amp;rsquo;s expanded the combination of &lt;a href=&#34;https://metacpan.org/pod/Test::Class&#34;&gt;Test::Class&lt;/a&gt; with &lt;a href=&#34;http://moose.perl.org/&#34;&gt;Moosey goodness&lt;/a&gt; to create the ultimate testing tool. See the &lt;a href=&#34;http://blogs.perl.org/users/ovid/2013/09/testclassmoose-introductory-video.html&#34;&gt;Test::Class::Moose introduction video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dagolden.com/index.php/1838/goodbye-path-class-hello-path-tiny/&#34;&gt;David Golden announced Path::Tiny, the successor to Path::Class&lt;/a&gt;. If you&amp;rsquo;re still using &lt;a href=&#34;https://metacpan.org/pod/File::Spec&#34;&gt;File::Spec&lt;/a&gt;, try &lt;a href=&#34;https://metacpan.org/pod/Path::Tiny&#34;&gt;Path::Tiny&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;february-2013&#34;&gt;February 2013&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.perl.org/users/vyacheslav_matjukhin/2013/02/play-perl-is-online.html&#34;&gt;Vyacheslav Matjukhin announced Play Perl&lt;/a&gt;. This is a public system for announcing and accepting quests to accomplish Perl-related tasks. Play Perl has become &lt;a href=&#34;http://questhub.io/&#34;&gt;Questhub&lt;/a&gt;, but it is still powered by Perl. Ruslan Zakirov quickly added &lt;a href=&#34;http://cubloid.blogspot.co.il/2013/02/my-play-perl-and-perl5-core-quests_21.html&#34;&gt;quests for Perl core development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sawyer X and the &lt;a href=&#34;http://perldancer.org/&#34;&gt;Dancer&lt;/a&gt; team released Dancer2, the new version of the powerful Dancer micro web framework. Dancer 1 is still maintained.&lt;/p&gt;

&lt;p&gt;Kartik Thakore and &lt;a href=&#34;http://yapgh.blogspot.ca/2013/03/sdl2-api-stabilization-and-new-work.html&#34;&gt;the Perl SDL team announced bindings to SDL2&lt;/a&gt;, the update to the cross-platform graphic, sound, and input libraries.&lt;/p&gt;

&lt;p&gt;Perl pumpking &lt;a href=&#34;http://rjbs.manxome.org/rubric/entry/1986&#34;&gt;RJBS converted Email::Sender to Moo&lt;/a&gt; and saw tremendous test suite time savings. (See also the deprecation of &lt;code&gt;Any::Moose&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lists.scsys.co.uk/pipermail/dbix-class/2013-February/011109.html&#34;&gt;Peter Rabbitson announced a faster DBIx::Class&lt;/a&gt;, with many impressive speed improvements. The 0.08250 release in late April would prove to be the fastest stable release yet. (See &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/05/perl-dbixclass-an-awesome-orm-now-with-super-speed.html&#34;&gt;John Napiorkowski&amp;rsquo;s post on the 20% speed improvements in the new DBIC release&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;PAUSE administrator and Perl guru &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2013/02/mark-your-modules-as-adoptable-if-you-dont-want-them.html&#34;&gt;brian d foy reminded CPAN authors to set their modules free&lt;/a&gt; when the time has come to hand over maintenance.&lt;/p&gt;

&lt;p&gt;Rob Hammond explained &lt;a href=&#34;http://blogs.perl.org/users/robhammond/2013/02/web-scraping-with-perl-phantomjs.html&#34;&gt;how to use Perl and PhantomJS to scrape the JavaScript web&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Paul Fenwick wowed the crowd, as always, with his talk &lt;a href=&#34;http://www.youtube.com/watch?v=oZ5xTI1QRTA&#34;&gt;The Perl Renaissance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.perl.org.il/ilpw2013/&#34;&gt;Israeli Perl Workshop&lt;/a&gt; took place in Tel Aviv, Israel.&lt;/p&gt;

&lt;h3 id=&#34;march-2013&#34;&gt;March 2013&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perlnews.org/2013/03/rehashing-flaw/&#34;&gt;A flaw in Perl&amp;rsquo;s rehashing mechanism&lt;/a&gt; (resizing hash tables when adding new keys) was corrected in the five most recent stable releases of Perl. Perl 5.18 would make hash key order slightly more random, exposing long-standing bugs in several programs. 5.18 also introduced &lt;a href=&#34;http://rjbs.manxome.org/rubric/entry/2016&#34;&gt;lexical subroutines&lt;/a&gt;, which will be very useful.&lt;/p&gt;

&lt;p&gt;A project called &lt;a href=&#34;http://prepan.org/&#34;&gt;PrePA (footnote: /a) emerged. PrePAN is a place where you can discuss modules before you decide to upload them to the CPAN. In March 2013,&lt;/a&gt;&lt;a href=&#34;http://blogs.perl.org/users/kentaro/2013/03/joined-cpan-api-metacpan-team.html&#34;&gt;PrePAN joined the CPAN-API organization&lt;/a&gt;. (You may know CPAN-API better as &lt;a href=&#34;http://metacpan.org/&#34;&gt;MetaCPA (footnote: /a).&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Michael Schwern announced &lt;a href=&#34;https://github.com/schwern/perl5i/wiki/Quickstart-Guide&#34;&gt;a quick start guide for perl5i&lt;/a&gt;. perl5i is an experimental distribution of Perl which includes a lot of syntax-warping modules that may or may not influence core development in the future.&lt;/p&gt;

&lt;p&gt;brian d foy experimented with &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2013/03/my-catincan-funded-cpan1-fastest-mirror-enhancement.html&#34;&gt;a small community-funded CPAN project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neil Bowers began experimenting with &lt;a href=&#34;http://theperlhub.com/&#34;&gt;The Perl Hub&lt;/a&gt;, a sort of dashboard to the Perl community. It includes links to blog posts, CPAN reviews, talks, events, and quests.&lt;/p&gt;

&lt;p&gt;Giel Goudsmit wrote &lt;a href=&#34;http://blog.booking.com/the-little-script-that-could.html&#34;&gt;a decade retrospective of Booking.com&lt;/a&gt;, the Perl powerhouse in the Netherlands.&lt;/p&gt;

&lt;p&gt;Perhaps drawing from Play Perl (or perhaps from his relentless research into psychology, motivation, and fun), Paul Fenwick announced &lt;a href=&#34;http://privacygeek.blogspot.com.au/2013/03/gamifiy-your-command-line-with-habitrpg.html&#34;&gt;a CLI tool for HabitRPG&lt;/a&gt;, a todo app in a fantasy setting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pragmaticperl.com/&#34;&gt;Pragmatic Perl&lt;/a&gt;, a Russian web newsletter, published its first issue. The newsletter interviews Perl developers and the English translations of its interviews are often full of insights.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://perltricks.com/&#34;&gt;Perl Tricks&lt;/a&gt; web site launched to promote Perl with short articles.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.yapc.eu/gpw2013/&#34;&gt;German Perl Workshop&lt;/a&gt; took place in Berlin, Germany.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.perl-workshop.ch/spw2013/&#34;&gt;Swiss Perl Workshop&lt;/a&gt; took place in Bern, Switzerland.&lt;/p&gt;

&lt;h3 id=&#34;april-2013&#34;&gt;April 2013&lt;/h3&gt;

&lt;p&gt;Perl.org&amp;rsquo;s Subversion hosting service ended. &lt;a href=&#34;http://log.perl.org/2013/03/svnperlorg-shutdown-in-one-month.html&#34;&gt;svn.perl.org shutdown announced on log.per.org&lt;/a&gt;. Github, Bitbucket, and other free DVCS hosting are great alternatives.&lt;/p&gt;

&lt;p&gt;Best Practical updated &lt;a href=&#34;http://rt.cpan.org/&#34;&gt;rt.cpan.org&lt;/a&gt;, the bug tracker for CPAN and the Perl core, to RT 4. The &lt;a href=&#34;http://blog.bestpractical.com/2013/04/rt-cpan-upgrade.html&#34;&gt;rt.cpan.org 4 upgrade announcement&lt;/a&gt; has more details about what this means for CPAN authors and Perl hackers. In September, Best Practical would announce &lt;a href=&#34;http://blog.bestpractical.com/2013/10/rt-420-released.html&#34;&gt;the release of RT 4.2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tim Bunce announced &lt;a href=&#34;http://blog.timbunce.org/2013/04/08/nytprof-v5-flaming-precision/&#34;&gt;the release of Devel::NYTProf 5&lt;/a&gt;, which includes a flame graph in the profile. This is a great visualization of where your program spends its time.&lt;/p&gt;

&lt;p&gt;Andy Lester and the ack developers announced &lt;a href=&#34;http://perlbuzz.com/2013/04/ack-20-has-been-released.html&#34;&gt;the release of ack 2.0&lt;/a&gt;. ack&amp;rsquo;s selling point is &amp;ldquo;better than grep&amp;rdquo;, and it certainly is.&lt;/p&gt;

&lt;p&gt;The 2013 Perl QA hackathon took place. David Golden summarized &lt;a href=&#34;http://www.dagolden.com/index.php/2098/the-annotated-lancaster-consensus/&#34;&gt;the Lancaster Consensus&lt;/a&gt;, the latest guideline for toolchain support when managing CPAN distributions.&lt;/p&gt;

&lt;p&gt;Fred Moyer announced &lt;a href=&#34;http://blogs.perl.org/users/phred/2013/04/mod-perl-208-has-been-released.html&#34;&gt;the release of mod_perl 2.08&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.osdc.tw/2013/&#34;&gt;Open Source Developers Conference Taiwan&lt;/a&gt; took place in Taipei, Taiwan.&lt;/p&gt;

&lt;p&gt;Daisuke Maki published &lt;a href=&#34;http://blogs.perl.org/users/lestrrat/2013/04/perl5-census-japan-2013.html&#34;&gt;results of the 2013 Perl 5 Census Japan&lt;/a&gt;. Perl in Japan looks very different from Perl in the US or EU.&lt;/p&gt;

&lt;p&gt;Gabor Szabo linked to &lt;a href=&#34;http://blogs.perl.org/users/gabor_szabo/2013/05/pinto-tutorial-in-8-languages.html&#34;&gt;Pinto tutorials in multiple languages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.perlworkshop.nl/nlpw2013/&#34;&gt;Dutch Perl Workshop&lt;/a&gt; took place in Arnhem, The Netherlands.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://dcbpw.org/&#34;&gt;DC Baltimore Perl Workshop&lt;/a&gt; took place in Baltimore, Maryland, USA.&lt;/p&gt;

&lt;h3 id=&#34;may-2013&#34;&gt;May 2013&lt;/h3&gt;

&lt;p&gt;In sad news, CPAN developer AMORETTE—Hojung Yoon—passed away on May 8, 2013. South Korea and Perl lost a valued member of the community. &lt;a href=&#34;https://twitter.com/aer0/status/333229465293443072&#34;&gt;C.H. Kang posted a small tribute to Hojung Yoon on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Perl 5 Porters announced &lt;a href=&#34;http://perlnews.org/2013/05/perl-5-18-0-released/&#34;&gt;the release of Perl 5.18&lt;/a&gt;. This yearly release added a couple of nice new features, fixed a slew of bugs, updated some core modules, and updated plans to continue Perl&amp;rsquo;s evolution to 5.20 and beyond. See the &lt;a href=&#34;https://perldoc.perl.org/perl5180delta.html&#34;&gt;Perl 5.18 delta&lt;/a&gt; documentation for more details. CPAN developers had some work to do; see David Oswald&amp;rsquo;s &lt;a href=&#34;http://blogs.perl.org/users/david_oswald/2013/05/a-call-to-action-for-cpan-authors.html&#34;&gt;A call to action for CPAN authors&lt;/a&gt; about finding and fixing hash order bugs in library code as well as Mark Fowler&amp;rsquo;s &lt;a href=&#34;http://blog.twoshortplanks.com/2013/05/20/5-18-hash-keys/&#34;&gt;explanation of hash key ordering changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Mojolicious team started beating the drum about the upcoming Mojolicious 4.0 release. &lt;a href=&#34;http://blogs.perl.org/users/joel_berger/2013/05/mojolicious-40-is-coming-soon.html&#34;&gt;Joel Berger introduced some new features of Mojolicious 4.0&lt;/a&gt;. Mojolicious creator Sebastian Riedel provided the &lt;a href=&#34;http://blog.kraih.com/post/50517069291/mojolicious-4-0-released-perl-real-time-web-framework&#34;&gt;Mojolicious 4.0 release announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Bugzilla developers announced &lt;a href=&#34;http://www.bugzilla.org/news/#release44&#34;&gt;the releases of Bugzilla 4.4 and 4.2.6&lt;/a&gt;. The code in this long-lived project keeps getting better and better as development continues.&lt;/p&gt;

&lt;p&gt;Joel Berger also finished a TPF grant. His &lt;a href=&#34;http://news.perlfoundation.org/2013/05/alienbase-grant---report-9-fin.html&#34;&gt;report at the completion of the Alien::Base grant&lt;/a&gt; gives a retrospective of the project.&lt;/p&gt;

&lt;p&gt;Toby Inkster continued making things smaller, faster, and easier to use in isolation. While his &lt;a href=&#34;https://metacpan.org/pod/Moops&#34;&gt;Moops&lt;/a&gt; module is your editor&amp;rsquo;s favorite, his &lt;a href=&#34;http://blogs.perl.org/users/toby_inkster/2013/05/typetiny---not-just-for-attributes.html&#34;&gt;Type::Tiny constraint system&lt;/a&gt; has a lot of potential.&lt;/p&gt;

&lt;p&gt;Timm Murray announced &lt;a href=&#34;http://blogs.perl.org/users/timm_murray/2013/05/announcing-uavpilot-v01.html&#34;&gt;Perl modules for controlling unmanned drones&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tokuhiro Matsuno received far too little attention for his work with &lt;a href=&#34;https://metacpan.org/pod/Compiler::Lexer&#34;&gt;Compiler::Lexer&lt;/a&gt;. See his &lt;a href=&#34;http://blog.64p.org/entry/2013/05/25/085607&#34;&gt;CLI for Compiler::Lexer&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;VM Brasseur and Jeffrey Thalhammer (the man who was approximately everywhere in Perl in 2013) announced &lt;a href=&#34;http://anonymoushash.vmbrasseur.com/2013/05/29/announcing-the-perl-companies-project/&#34;&gt;the Perl Companies Project&lt;/a&gt;, a single place to list all of the companies using Perl.&lt;/p&gt;

&lt;p&gt;Testing guru and frustrated economist Ovid explained &lt;a href=&#34;http://blogs.perl.org/users/ovid/2013/05/if-theres-a-shortage-of-programmers-why-arent-wages-up.html&#34;&gt;the lack of good developers and the surprising lack of rise in programmer wages&lt;/a&gt;. Programmers need to learn more practical math.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://lists.parrot.org/pipermail/parrot-members/Week-of-Mon-20130520/000069.html&#34;&gt;members of the Parrot Foundation voted to dissolve the foundation and let TPF take over&lt;/a&gt;. This puts the copyrights, governance, and other artifacts of the Parrot VM and its projects under the supervision of the Perl Foundation.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.yapc.eu/plpw2013/&#34;&gt;Polish Perl Workshop 2013&lt;/a&gt; took place in Warsaw, Poland. &lt;a href=&#34;http://www.youtube.com/user/polishperl/videos&#34;&gt;Videos of the Polish Perl Workshop 2013&lt;/a&gt; are available online.&lt;/p&gt;

&lt;h3 id=&#34;june-2013&#34;&gt;June 2013&lt;/h3&gt;

&lt;p&gt;Stevan Little announced &lt;a href=&#34;http://blogs.perl.org/users/stevan_little/2013/06/once-more-unto-the-breach.html&#34;&gt;the resurrection of his efforts to add a proper MOP to Perl&lt;/a&gt;. The code progressed throughout the year, as did Peter Martini&amp;rsquo;s &lt;a href=&#34;http://www.yapcna.org/yn2013/talk/4556&#34;&gt;patch for proper function parameters in Perl&lt;/a&gt;. While neither one is yet suitable for either inclusion in the core or general deployment to production, their progress is heartening. In particular, &lt;a href=&#34;http://damien.krotkine.com/2013/09/17/p5-mop.html&#34;&gt;Damien Krotkine&amp;rsquo;s exploration of p5-mop as a user&lt;/a&gt; is a great example of what will soon be possible in Perl. (Stevan Little&amp;rsquo;s &lt;a href=&#34;http://blogs.perl.org/users/stevan_little/2013/09/on-porting-a-moose-module.html&#34;&gt;porting a Moose module to p5-mop&lt;/a&gt; is also interesting, if a little more esoteric.)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://journeesperl.fr/fpw2013/&#34;&gt;French Perl Workshop 2013&lt;/a&gt; took place in Nancy, France.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yapcna.org/yn2013/&#34;&gt;YAPC::NA 2013&lt;/a&gt; took place in Austin, Texas, USA. Brian Wisti gathered &lt;a href=&#34;http://randomgeekery.org/wp/2013/06/yapcna-2013-links-from-a-non-attendee/&#34;&gt;links to YAPC::NA 2013 slides and videos&lt;/a&gt;. Todd Rinaldo uploaded &lt;a href=&#34;http://www.youtube.com/yapcna&#34;&gt;YAPC::NA talks on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aristotle Pagaltzis reflected on &lt;a href=&#34;http://blogs.perl.org/users/aristotle/2013/06/toolchain-decade.html&#34;&gt;a decade of Module::Build in the Perl core&lt;/a&gt;. Module::Build will likely leave the core by 5.22.&lt;/p&gt;

&lt;h3 id=&#34;july-2013&#34;&gt;July 2013&lt;/h3&gt;

&lt;p&gt;Fred Moyer announced &lt;a href=&#34;http://blogs.perl.org/users/phred/2013/07/the-state-of-soaplite---here-comes-10.html&#34;&gt;the imminent release of SOAP::Lite 1.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Chad Granum released &lt;a href=&#34;http://blogs.perl.org/users/chad_exodist_granum/2013/07/fennec-v2x---testing-made-better.html&#34;&gt;Fennec v2, an advanced testing system for Perl&lt;/a&gt;. &lt;a href=&#34;http://perlmaven.com/chad-granum&#34;&gt;Perl Maven interviewed Granum about Fennec&lt;/a&gt;. Between his work and Ovid&amp;rsquo;s on Moose-based testing, the time may be ripe for a new testing book.&lt;/p&gt;

&lt;p&gt;Jessy Shy published &lt;a href=&#34;http://blogs.perl.org/users/jesse_shy/2013/07/announce-classmithcom.html&#34;&gt;an announcement about Classsmith.com&lt;/a&gt;, an app for home schoolers.&lt;/p&gt;

&lt;p&gt;Tatsuhiko Miyagawa&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Carton&#34;&gt;Carton&lt;/a&gt; tool for managing CPAN dependencies reached 1.0 status. Miyagawa published his &lt;a href=&#34;https://speakerdeck.com/miyagawa/carton-1-dot-0-at-oscon-2013&#34;&gt;Carton slides from OSCON 2013&lt;/a&gt; and &lt;a href=&#34;http://weblog.bulknews.net/post/57356232719/carton-1-0-is-released&#34;&gt;the Carton 1.0 release announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The music fan and hacker known as Barbie addressed &lt;a href=&#34;http://blog.cpantesters.org/diary/164&#34;&gt;frequently asked questions about CPANTS and CPAN Testers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Brian Medley announced &lt;a href=&#34;http://closebargains.com/&#34;&gt;CloseBargains.com&lt;/a&gt;, a startup site written in Perl.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://patch.pm/p0/&#34;&gt;patch -p0 hackathon&lt;/a&gt; took place in Paris, France.&lt;/p&gt;

&lt;h3 id=&#34;august-2013&#34;&gt;August 2013&lt;/h3&gt;

&lt;p&gt;Perl 5.18.1 was released.&lt;/p&gt;

&lt;p&gt;Yuki Kimoto published the &lt;a href=&#34;http://blogs.perl.org/users/yuki_kimoto/2013/08/released-gitprep-12---add-import-repositories-feature-blame-feature.html&#34;&gt;release announcement of GitPrep 1.2&lt;/a&gt;, a free software replacement for Github.&lt;/p&gt;

&lt;p&gt;The Perl Foundation accepted &lt;a href=&#34;http://news.perlfoundation.org/2013/08/improving-perl-5-grant-extende-3.html&#34;&gt;Nicholas Clark&amp;rsquo;s grant to improve the Perl core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://act.yapc.eu/ye2013/&#34;&gt;YAPC::EU 2013&lt;/a&gt; took place in Kiev, Ukraine. &lt;a href=&#34;http://act.yapc.eu/ye2013/slides&#34;&gt;All of the slides of YAPC::EU 2013 are available online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://conference.perlchina.org/bjpw2013/&#34;&gt;Beijing Perl Workshop 2013&lt;/a&gt; took place in Beijing, China.&lt;/p&gt;

&lt;h3 id=&#34;september-2013&#34;&gt;September 2013&lt;/h3&gt;

&lt;p&gt;Toby Inkster announced &lt;a href=&#34;http://blogs.perl.org/users/toby_inkster/2013/09/-welcome-to-the-first.html&#34;&gt;the inagural monthly Planet Moose roundup&lt;/a&gt; of the news in the Moose/Mouse/Moo/Mo/M/whatever worlds.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://brainturk.com/&#34;&gt;Brainturk.com&lt;/a&gt; went live with a new version. Of course it uses Perl and the CPAN. The &lt;a href=&#34;http://blogs.perl.org/users/kiran/2013/09/brainturkcom-is-live.html&#34;&gt;rainturk release announcement&lt;/a&gt; included a sizable discount for Perl community members.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://helios.logicalhelion.org/&#34;&gt;Helios&lt;/a&gt; distributed job processing system &lt;a href=&#34;http://blogs.perl.org/users/lajandy/2013/09/helios-261-released.html&#34;&gt;announced the Helios 2.61 release&lt;/a&gt;. This software is available from the CPAN, of course.&lt;/p&gt;

&lt;p&gt;Dave Cross released &lt;a href=&#34;http://perlhacks.com/2013/09/perl-search-revisited/&#34;&gt;a new version of his Perl-specific search engine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yapcasia.org/2013/&#34;&gt;YAPC::Asia 2013&lt;/a&gt; took place in Tokyo, Japan. The &lt;a href=&#34;http://blogs.perl.org/users/lestrrat/2013/09/a-lookback-of-yapcasia-tokyo-2013.html&#34;&gt;YAPC::Asia 2013 recap&lt;/a&gt; is worth reading.&lt;/p&gt;

&lt;h3 id=&#34;october-2013&#34;&gt;October 2013&lt;/h3&gt;

&lt;p&gt;Tom Christiansen and brian d foy spent time &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2013/10/perlcritic-for-the-camel.html&#34;&gt;working on Perl::Critic policies based on recommendations from the 4th edition of Programming Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltv.org/&#34;&gt;Perl TV&lt;/a&gt; published &lt;a href=&#34;http://perltv.org/v/why-is-perl-like-a-human-language&#34;&gt;Larry Wall&amp;rsquo;s talk on Why Perl Is Like a Human Language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Joel Berger announced &lt;a href=&#34;http://blogs.perl.org/users/joel_berger/2013/10/pdl-2007-released.html&#34;&gt;the release of PDL 2.007&lt;/a&gt;. This release adds 64-bit support. David Mertens gave &lt;a href=&#34;http://perltv.org/v/introduction-to-the-perl-data-language&#34;&gt;an introduction to the Perl Data Language&lt;/a&gt; and PerlTV posted it.&lt;/p&gt;

&lt;p&gt;Shawn Moore mentored the incredible Upasana Shukla in &lt;a href=&#34;http://blogs.perl.org/users/upasana/2013/10/yay-moose-is-free-from-stringy-exceptions.html&#34;&gt;removing string exceptions from Moose&lt;/a&gt;. This is a great achievement. Shawn&amp;rsquo;s &lt;a href=&#34;http://sartak.org/2013/10/structured-exceptions-in-moose-mentorship.html&#34;&gt;retrospective of the structured exceptions project&lt;/a&gt; is also worth reading.&lt;/p&gt;

&lt;p&gt;The DadaMail Project (a modern mailing list manager written in Perl and released under the GNU GPL) &lt;a href=&#34;http://dadamailproject.com/cgi-bin/dada/mail.cgi/archive/dada_announce/20131001183416/&#34;&gt;released DadaMail 6.7.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The TWiki project announced the &lt;a href=&#34;http://twiki.org/cgi-bin/view/Blog/BlogEntry201310x1&#34;&gt;TWiki 6.0.0 release&lt;/a&gt;. This is a venerable Perl project.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.osdc.fr/osdc2013fr/&#34;&gt;Open Source Development Conference France 2013&lt;/a&gt; took place in Paris, France.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://osdc.org.nz/&#34;&gt;Open Source Developers Conference New Zealand&lt;/a&gt; took place in Auckland, New Zealand.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://pghpw.org/&#34;&gt;Pittsburgh Perl Workshop&lt;/a&gt; 2013 took place in Pittsburgh, Pennsylvania, USA.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://reneeb-perlblog.blogspot.hu/2013/09/frankfurter-perl-community-workshop-2013.html&#34;&gt;Perl Community Workshop 2013&lt;/a&gt; took place in Frankfurt, Germany.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://workshop.perl.pt/ptpw2013/&#34;&gt;Portugese Perl Workshop 2013&lt;/a&gt; took place in Lisbon, Portugal.&lt;/p&gt;

&lt;h3 id=&#34;november-2013&#34;&gt;November 2013&lt;/h3&gt;

&lt;p&gt;Jeffrey Thalhammer (the creator of &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; launched a public beta of his &lt;a href=&#34;http://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; service. Stratopan lets you freeze a stack of CPAN modules as development and deployment targets.&lt;/p&gt;

&lt;p&gt;John Napiorkowski announced &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/11/perl-catalyst-hamburg-is-now-stable-version-590050-is-now-on-cpan.html&#34;&gt;the Catalyst 5.90050 stable release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The team behind Padre, a Perl IDE, announced &lt;a href=&#34;http://blogs.perl.org/users/peter_lavender/2013/11/padre-100-has-been-released.html&#34;&gt;the release of Padre 1.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Foswiki announced &lt;a href=&#34;http://foswiki.org/Download/FoswikiRelease01x01x09&#34;&gt;the release of Foswiki 1.1.9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tudor Constantin announced &lt;a href=&#34;http://www.builtinperl.com/&#34;&gt;Built in Perl&lt;/a&gt;, a web site listing companies that rely on Perl. Add your own company!&lt;/p&gt;

&lt;p&gt;Peteris Krumins announced that &lt;a href=&#34;http://www.catonmat.net/blog/perl-one-liners-no-starch-press/&#34;&gt;No Starch Press has published Perl One-Liners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl TV posted Larry Wall&amp;rsquo;s &lt;a href=&#34;http://perltv.org/v/5-programming-languages-everyone-should-know&#34;&gt;5 Programming Languages Everyone Should Know&lt;/a&gt; video.&lt;/p&gt;

&lt;p&gt;Core hacker Yves Orton posted &lt;a href=&#34;http://blog.booking.com/hardening-perls-hash-function.html&#34;&gt;a technical explanation of the hash security changes in Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2013.yapcbrasil.org.br/&#34;&gt;YAPC::Brazil 2013&lt;/a&gt; took place in Curitiba, Brazil.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.useperl.at/apw2013/&#34;&gt;Austrian Perl Workshop 2013&lt;/a&gt; took place in Salzburg, Austria.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.yapc.eu/npw2013/&#34;&gt;Nordic Perl Workshop 2013&lt;/a&gt; took place in Copenhagen, Denmark.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://act.yapc.eu/lpw2013/&#34;&gt;London Perl Workshop 2013&lt;/a&gt; took place in London, UK.&lt;/p&gt;

&lt;h3 id=&#34;december-2013&#34;&gt;December 2013&lt;/h3&gt;

&lt;p&gt;December is Advent season in the Perl world. That means lots of Advent calendars, with a post a day for 24 (or 25) days. Some of these calendars include the &lt;a href=&#34;http://perladvent.org/2013/&#34;&gt;Perl Advent calendar&lt;/a&gt;, the &lt;a href=&#34;http://www.catalystframework.org/calendar/&#34;&gt;Catalyst Advent calendar&lt;/a&gt;, and (new this year) the &lt;a href=&#34;http://leonerds-code.blogspot.com/2013/12/futures-advent-day-1.html&#34;&gt;Futures Advent calendar&lt;/a&gt;. Even though Advent season is over, that&amp;rsquo;s still enough articles to fill the rest of the month with good reading.&lt;/p&gt;

&lt;p&gt;The Dancer developers sadly couldn&amp;rsquo;t get their Advent calendar going (for happy, family reasons, so they get a pass this year), but they did announce &lt;a href=&#34;http://blogs.perl.org/users/sawyer_x/2013/12/new-dancer-2-release-011.html&#34;&gt;the Dancer 2 0.11 release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.modernperlbooks.com/mt/2013/12/perl-is-26-today.html&#34;&gt;Perl turned 26 years old.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;brian d foy announced the &lt;a href=&#34;http://blogs.perl.org/users/brian_d_foy/2013/12/the-2013-white-camels.html&#34;&gt;2013 White Camel winners&lt;/a&gt;. Congratulations to Thaigo Rondon, Fred Moyer, and Dijkmat&amp;rsquo;s Wendy and Liz. All of these winners have deserved this award for many years.&lt;/p&gt;

&lt;p&gt;The Perl Foundation accepted &lt;a href=&#34;http://news.perlfoundation.org/2013/09/grant-application-maintaining-1.html&#34;&gt;Dave Mitchell&amp;rsquo;s grant to maintain the Perl core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Steffen Mueller announced &lt;a href=&#34;http://blogs.perl.org/users/steffen_mueller/2013/12/sereal-v2-finally-released-as-stable.html&#34;&gt;the release of Sereal v2&lt;/a&gt;. Sereal is a serialization mechanism for data that&amp;rsquo;s much faster than Data::Dumper and Storable, not to mention much safer.&lt;/p&gt;

&lt;p&gt;Neil Bowers compiled &lt;a href=&#34;http://blogs.perl.org/users/neilb/2014/01/the-cpan-report-2013.html&#34;&gt;The CPAN Report 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://patch.pm/p1/&#34;&gt;patch -p1&lt;/a&gt; took place in Paris, France.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://event.yapcrussia.org/saintperl5/&#34;&gt;Saint Perl 2013 workshop&lt;/a&gt; took place in Saint Petersburg, Russia.&lt;/p&gt;

&lt;p&gt;The Perl NOC (Ask and Robert) announced &lt;a href=&#34;http://log.perl.org/2013/12/2013-year-end-maintenance.html&#34;&gt;year end maintenance for perl.org services&lt;/a&gt;. Usually you don&amp;rsquo;t notice when they do their (unsung and impressive) work.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it for a great year in Perl!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enable Backtraces with Carp::Always (Modern Perl Tips)</title>
      <link>http://localhost:1313/pub/2013/10/enable-backtraces-with-carpalways-modern-perl-tips.html/</link>
      <pubDate>Mon, 28 Oct 2013 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2013/10/enable-backtraces-with-carpalways-modern-perl-tips.html/</guid>
      <description>&lt;p&gt;Suppose you&amp;rsquo;re working on a large application in Perl. Your code is in multiple files with multiple packages, and you&amp;rsquo;ve built your application in layers. You have a data storage layer, a framework to manage control flow, a layer for business rules, and at least one form of user interface.&lt;/p&gt;

&lt;p&gt;Imagine someone discovers a bug. When a user attempts to log in but mistypes her email address—using a comma instead of dot, for example—the web site crashes. She sees a nearly empty &amp;ldquo;500 Server Error&amp;rdquo; page instead of the attractive error pages the designer created and the logs show only that &lt;em&gt;something&lt;/em&gt; went wrong. Your custom error handler didn&amp;rsquo;t even get called.&lt;/p&gt;

&lt;p&gt;If that sounds familiar, you may have had a week like I did.&lt;/p&gt;

&lt;p&gt;Back when Perl and Java seemed like two poles of the professional software development axis, we Perl programmers often teased Java programmers about Java&amp;rsquo;s propensity to emit page long backtraces whenever anything somewhere went wrong. Over a decade later, my views have grown to include a little more nuance. The problem isn&amp;rsquo;t backtraces &lt;em&gt;per se&lt;/em&gt;; the problem is Java&amp;rsquo;s call stacks are so deep and the stack traces so verbose that real problems may be obscured in irrelevant details.&lt;/p&gt;

&lt;p&gt;Perl code sometimes goes too far the other direction. It makes sense to use &lt;a href=&#34;https://metacpan.org/pod/Carp&#34;&gt;Carp&lt;/a&gt;&amp;rsquo;s &lt;code&gt;carp()&lt;/code&gt; to warn about the dubious use of code in libraries from the point of view of the caller, but modern Perl applications tend to grow beyond a single program calling to a few libraries. Our libraries depend on other libraries and something can go wrong in one layer but only produce an error in another layer. Sometimes it&amp;rsquo;s nice to have the option to enable verbose backtraces for warnings and errors only temporarily, during debugging, without modifying any of your code.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what &lt;a href=&#34;https://metacpan.org/pod/Carp::Always&#34;&gt;Carp::Always&lt;/a&gt; does. If you can reproduce the error in a test case (whether a formal test script or a small, standalone program), launch the program with the command line option &lt;code&gt;-MCarp::Always&lt;/code&gt; to get a verbose backtrace on warnings or errors.&lt;/p&gt;

&lt;p&gt;(The &lt;code&gt;-M&lt;/code&gt; flag tells &lt;code&gt;perl&lt;/code&gt; to load a named module, just as if you&amp;rsquo;d written &lt;code&gt;use Carp::Always;&lt;/code&gt; in your program.)&lt;/p&gt;

&lt;p&gt;For bonus debugging powers, I like to use command lines of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MCarp::Always my_test_case.pl 2&amp;gt; log; less log; rm log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; so that the backtrace goes to the &lt;code&gt;less&lt;/code&gt; pager, where I can scroll up and down and search. When I quit the pager, the temporary file goes away so it doesn&amp;rsquo;t clutter up my directory.&lt;/p&gt;

&lt;p&gt;By tracking all control flow to the point of the error, I found the problem more quickly. You can, of course, solve this problem in multiple ways, including attaching a debugger to a running process, but when that&amp;rsquo;s not an option and when you can reproduce the exception or warning in a small test file, forcing a full backtrace can be very helpful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic is the author of &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl/&#34;&gt;Modern Perl: the book&lt;/a&gt;. His non-programming hobbies include gradually curating a list of &lt;a href=&#34;https://blenderrecipereviews.com/recipes/smoothies/how-to-make-a-smoothie&#34;&gt;smoothie&lt;/a&gt; recipes and &lt;a href=&#34;https://trendshare.org/how-to-invest/&#34;&gt;value investing&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show off Perl in Plat_Forms 2012</title>
      <link>http://localhost:1313/pub/2012/08/show-off-perl-in-plat-forms-2012.html/</link>
      <pubDate>Wed, 29 Aug 2012 13:21:52 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/08/show-off-perl-in-plat-forms-2012.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&#34;https://raudss.us/&#34;&gt;Torsten Raudssus&lt;/a&gt;, who wrote in with this announcement.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-plat-forms&#34;&gt;What is Plat_Forms?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.plat-forms.org/&#34;&gt;Plat_Forms&lt;/a&gt; is a contest and competition in which top-class teams of three programmers compete to implement the same requirements for a web-based system within two days, using different technology platforms (e.g. Java, .NET, Perl, PHP, Python, Ruby, Scala, Smalltalk, JavaScript or what-have-you).&lt;/p&gt;

&lt;p&gt;Its purpose is not to determine &amp;ldquo;the&amp;rdquo; best platform, but rather to provide new insights into the real (rather than purported) pros, cons, and emergent properties of each platform. The evaluation will analyze many aspects of each solution, both external (scalability, functionality, reliability, security, performance, etc.) and internal (structure, modularity, understandability, flexibility, etc.). &lt;a href=&#34;#fn:footnote1&#34; class=&#34;footnote&#34;&gt;1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In just two days, the teams will implement as much of the requested functionality as they can and at the same time optimize the usefulness of the resulting system (functionality, usability, reliability, etc.), the understandability of the code, the modifiability of the system design, the efficiency and scalability.&lt;/p&gt;

&lt;p&gt;The contest will be conducted on October, 9-10, 2012. At the end of the 2 days, the teams hand over their source code and a turnkey-runnable VMware configuration of their system. &lt;a href=&#34;#fn:footnote2&#34; class=&#34;footnote&#34;&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The event is at the &lt;a href=&#34;https://maps.google.com/maps?q=Freie+Universit%C3%83%C2%A4t+Berlin,+Berlin,+Germany&amp;amp;hl=en&amp;amp;ie=UTF8&amp;amp;ll=52.456009,13.293457&amp;amp;spn=22.652618,17.995605&amp;amp;sll=52.446685,13.285786&amp;amp;sspn=0.005509,0.004393&amp;amp;oq=Freie+Universit%C3%83%C2%A4t+berlin&amp;amp;t=h&amp;amp;hq=Freie+Universit%C3%83%C2%A4t+Berlin,+Berlin,+Germany&amp;amp;z=6&#34;&gt;Freie Universität Berlin in Berlin, Germany&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;perl-and-plat-forms&#34;&gt;Perl and Plat_Forms&lt;/h1&gt;

&lt;p&gt;We, of course, want to represent Perl at this event. But we need teams and sponsorships to make this happen. Sadly the end of the registration is very near, but I think that we still have a chance to gather some productive and business effective working teams. A team has 3 people. We can register a maximum of 4 teams.&lt;/p&gt;

&lt;p&gt;Companies may wish to enter a team of their own developers, as this gives them a chance to perform in a new and different environment, test themselves as a team against others, and see how other teams work together. As well as these opportunities, companies should also consider just sponsoring your most famous web framework to help send a team to show that it IS the best web framework! :-) Please help us make this a representative event for the modern Perl world. Sadly the &lt;a href=&#34;https://www.plat-forms.org/results-2011&#34;&gt;results&lt;/a&gt; of last year weren&amp;rsquo;t that good, and we think, we can do better ;).&lt;/p&gt;

&lt;p&gt;If you want to participate you must give us your details &lt;strong&gt;before Fri 2012-09-07&lt;/strong&gt;, as then the registration for the event closes. Our contact email is at the end. If you want to sponsor the event, you can also contact us after the registration end date, but please &lt;strong&gt;ASAP&lt;/strong&gt; :).&lt;/p&gt;

&lt;h1 id=&#34;contact-and-more-info&#34;&gt;Contact and More Info&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://raudss.us/&#34;&gt;Torsten Raudssus&lt;/a&gt; organizes the team and the sponsorships this year, so if you want to see your team here or would like to sponsor, please contact him (&lt;strong&gt;ASAP&lt;/strong&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;mailto:getty@cpan.org&#34;&gt;getty@cpan.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;#Plat_Forms on irc.perl.org&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://wiki.enlightenedperl.org/platforms2012&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Taken from &lt;a href=&#34;https://www.plat-forms.org/&#34;&gt;Plat_Forms homepage&lt;/a&gt;&lt;a href=&#34;#fnref:footnote1&#34; class=&#34;reversefootnote&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Taken from &lt;a href=&#34;https://www.plat-forms.org/platforms-2012-rev-2-announcement&#34;&gt;Plat_Forms 2012 rev2 homepage&lt;/a&gt;&lt;a href=&#34;#fnref:footnote2&#34; class=&#34;reversefootnote&#34;&gt; ↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Embrace the Reluctant Perl Programmer</title>
      <link>http://localhost:1313/pub/2012/08/embrace-the-reluctant-perl-programmer.html/</link>
      <pubDate>Mon, 27 Aug 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/08/embrace-the-reluctant-perl-programmer.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;editor&amp;rsquo;s note: an earlier version of this article appeared at &lt;a href=&#34;http://www.modernperlbooks.com/mt/2012/06/the-reluctant-perl-programmer.html&#34;&gt;The Reluctant Perl Programmer&lt;/a&gt;. Per the suggestion of &lt;a href=&#34;http://www.askbjoernhansen.com/&#34;&gt;Ask Bjørn Hansen&lt;/a&gt;, this revision appears on Perl.com.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;who-we-are&#34;&gt;Who We Are&lt;/h2&gt;

&lt;p&gt;We all love Perl for different reasons.&lt;/p&gt;

&lt;p&gt;Some of us are programmers at heart. We love writing code. We love solving problems. We love that the distance between a problem and its solution is often a few lines of Perl which flow almost effortlessly from our minds through our fingers to our screens.&lt;/p&gt;

&lt;p&gt;Some of us are administrators. We love order. We love consistency. We love knowing that the scripts we wrote in 2008 or 1998 or 1988 run unmodified on every system we touch and we don&amp;rsquo;t have to think about it. We love that Perl doesn&amp;rsquo;t get in the way of our solving problems, whether we have a few minutes to fight a fire or a few weeks to plan something big.&lt;/p&gt;

&lt;p&gt;Some of us are artists. We tinker. We play. We experiment. We write poems and steal features from wherever we can find them. We color outside the lines, and we love the flexibility we have to let our muses take us where they will, because we know that Perl will stay out of our way.&lt;/p&gt;

&lt;p&gt;Some of us are engineers. We love reliability. We love working software. We love when an upgrade is boring, when there are no unpleasant surprises. We love having the CPAN always within reach, with far more great software than we can ever use there for us whenever we want it.&lt;/p&gt;

&lt;p&gt;We are many and we are varied. We build great things, and we collectively make up something even greater.&lt;/p&gt;

&lt;p&gt;We started with the vision of one man far too lazy and hubristic to solve a simple problem of cross-continent communication in the easy way. We grew as system administrators acknowledged that something more powerful and consistent than shell but simpler and more forgiving than C occupied an enormous ecological niche. Then we grew again as we realized that a web server could do more than just serve a plain static page, and that wrangling text was a job for a powerful, malleable language.&lt;/p&gt;

&lt;p&gt;Along the way we built something grand.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re pragmatic. We&amp;rsquo;re relentlessly pragmatic. We get things done. We iterate and improve and refine. We&amp;rsquo;ve stolen the Unix ethos (build many small tools, loosely coupled) and turned it into the CPAN and the ecosystem around the CPAN such that, at times, the CPAN is our language far more than Perl is, and many of us are all the better for it.&lt;/p&gt;

&lt;p&gt;Yet not everyone can benefit from that.&lt;/p&gt;

&lt;h2 id=&#34;who-they-are&#34;&gt;Who They Are&lt;/h2&gt;

&lt;p&gt;We stand on little ceremony, but we do stand on ceremony. Some say the &amp;ldquo;right&amp;rdquo; way to write Perl is a thin layer of glue connecting as much of the CPAN as you need. Others suggest that the &amp;ldquo;right&amp;rdquo; way to write Perl is the code they wrote in 1987 when Larry first introduced his work to the world. Most of us are somewhere in between.&lt;/p&gt;

&lt;p&gt;Most of us are somewhat wrong.&lt;/p&gt;

&lt;p&gt;Consider the plight of the reluctant programmer who faces a problem. He or she may pick up Perl, and what then?&lt;/p&gt;

&lt;p&gt;Where does this reluctant programmer go for information? Where does this reluctant programmer go for help?&lt;/p&gt;

&lt;p&gt;Where can you learn that the first dozen Perl tutorials easily found with a search engine are out of date or even wrong? Where can you learn that any of a dozen good text editors or IDEs are available and are better than &lt;code&gt;notepad.exe&lt;/code&gt;? Where can you learn how to install CPAN modules on ActivePerl (or that Strawberry Perl exists)—and more importantly, why?&lt;/p&gt;

&lt;p&gt;Where can you go from &amp;ldquo;I need to process this report by the end of the day, and I have this text file, and I heard PERL was good for that?&amp;rdquo; to &amp;ldquo;&lt;em&gt;I&lt;/em&gt; can solve my problems with this language, and I never considered myself a programmer before!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Those of us who&amp;rsquo;ve already undergone that transition may find it difficult to remember the days gone by. We&amp;rsquo;ve spent so long shaping the language, our tools, and our community to fit our problems, perhaps we&amp;rsquo;ve forgotten both the energy of promise and the growing pains of our youths.&lt;/p&gt;

&lt;p&gt;Once upon a time, we all just wanted to get something done. There is much to admire in that approach. By all means, let us continue solving problems. Let us encourage people to solve their problems. Let us solve problems so well we never encounter them again.&lt;/p&gt;

&lt;p&gt;Let us not forget, however, to let reluctant programmers solve their problems immediately, however poorly, and only then help them open their eyes to the new possibilities their successes now afford them.&lt;/p&gt;

&lt;h2 id=&#34;who-we-may-be&#34;&gt;Who We May Be&lt;/h2&gt;

&lt;p&gt;This change is a change of mindset, not of technology nor tools.&lt;/p&gt;

&lt;p&gt;With few exceptions, our growth will not come from those who already know the beauty of programming and the freedom of Perl. It will come from those who merely (as if it were a mere thing!) wish to solve a problem. If and when they succeed, they will need guidance to understand the new powers they possess, and we can be there.&lt;/p&gt;

&lt;p&gt;Yet first, we must accept that their goals are not our goals—not yet anyhow, and perhaps not never. Their goals may be strange to us, but they are no less valuable for their peculiarities. In truth, that makes them more valuable. These are more problems for us to solve, more ideas for us to adopt, and more people to welcome into our community.&lt;/p&gt;

&lt;p&gt;By all means, let us help them write great code and let us teach them the value of working with the community in the structures and per the techniques we have developed to harness our powers. Let us mentor them so that we may welcome them as peers and equals in ability (even as we acknowledge them as worthy of respect and praise from the start). Yet let us first welcome them into the greater Perl community with all of the pragmatism we embrace.&lt;/p&gt;

&lt;h2 id=&#34;all-are-welcome&#34;&gt;All are Welcome&lt;/h2&gt;

&lt;p&gt;Reluctant programmers, come solve your problems with us. We are proud of what we have built together, but we build beautiful things and share them with you because in their &lt;em&gt;use&lt;/em&gt; we find the greatest beauty.&lt;/p&gt;

&lt;p&gt;You are welcome here.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;chromatic is the author of &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl/&#34;&gt;Modern Perl: the book&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl in Plat_Forms 2012 Web Development Contest</title>
      <link>http://localhost:1313/pub/2012/02/perl-in-plat-forms-2012-web-development-contest.html/</link>
      <pubDate>Thu, 02 Feb 2012 17:33:35 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/02/perl-in-plat-forms-2012-web-development-contest.html/</guid>
      <description>&lt;p&gt;Thanks to &lt;a href=&#34;https://metacpan.org/author/DAXIM&#34;&gt;Lars Dɪᴇᴄᴋᴏᴡ&lt;/a&gt; for coordinating entries into the &lt;a href=&#34;https://www.plat-forms.org/platforms-2012-announcement#overview&#34;&gt;Plat_Forms 2012&lt;/a&gt; web development contest. This annual contest pits some of the best developers of frameworks and languages against each other to solve real problems. Perl developers have participated for several years. Teams using Catalyst, Dancer, and Mojolicious have all demonstrated their platform strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;No Perl team has won the contest—yet. With the rise of modern Perl 5, the extra energy from competition between all of the great platforms, and (of course) the power of the CPAN, we all expect great things. Consider entering and showing what we can do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using CPAN on Win32 ActivePerl</title>
      <link>http://localhost:1313/pub/2011/08/using-cpan-on-win32-activeperl.html/</link>
      <pubDate>Wed, 03 Aug 2011 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/08/using-cpan-on-win32-activeperl.html/</guid>
      <description>&lt;p&gt;or &lt;em&gt;easier than tying your shoelaces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of you know &lt;a href=&#34;http://www.activestate.com/activeperl&#34;&gt;ActivePerl&lt;/a&gt;, the commercial Perl distribution provided to the community for free by &lt;a href=&#34;http://www.activestate.com/&#34;&gt;ActiveState&lt;/a&gt;. In the beginning, ActivePerl did not bundle a C compiler. As Windows does not include a compiler, much of the CPAN was inaccessible to Windows users—any dependency on an XS module would fail. ActiveState instead provided a repository of binary PPM packages so that users could avoid the need to install and configure a C compiler.&lt;/p&gt;

&lt;p&gt;So began a rumor, and so the rumor became lore, that &amp;ldquo;ActivePerl Does Not Do CPAN.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As wrong as that preconception had been (and a clever hacker could use MSVC or MinGW with ActivePerl), that rumor became even more wrong on 26 August 2009, when ActiveState delivered Perl 5.10.1 with a bundled C compiler. Even though Windows does not support &lt;em&gt;all&lt;/em&gt; POSIX features, using CPAN with ActivePerl on Windows is almost as nice as using CPAN on a Unix-like system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and install &lt;a href=&#34;http://www.activestate.com/activeperl/downloads&#34;&gt;ActivePerl&lt;/a&gt; (5.12.4 and 5.14.1 are available at the time of this writing) with the default options&lt;/li&gt;
&lt;li&gt;Open a command line window ( Start &amp;gt; Run &amp;gt; cmd )&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;cpan&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it. That&amp;rsquo;s only one extra step over running on Linux. For proof, here&amp;rsquo;s the output of my first run of the &lt;code&gt;cpan&lt;/code&gt; command (edited for brevity) and an installation of &lt;a href=&#34;https://metacpan.org/pod/local::lib&#34;&gt;local::lib&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; (yes, they work too):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\&amp;gt;cpan

It looks like you don&#39;t have a C compiler and make utility installed.  Trying
to install dmake and the MinGW gcc compiler using the Perl Package Manager.
This may take a a few minutes...

Downloading MinGW-5.1.4.1...done
Downloading dmake-4.11.20080107...done
Unpacking MinGW-5.1.4.1...done
Unpacking dmake-4.11.20080107...done
Generating HTML for MinGW-5.1.4.1...done
Generating HTML for dmake-4.11.20080107...done
Updating files in site area...done
1070 files installed

Please use the `dmake` program to run commands from a Makefile!


cpan shell -- CPAN exploration and modules installation (v1.9600)
Enter &#39;h&#39; for help.

cpan&amp;gt; install local::lib
Fetching with LWP:
...
Running install for module &#39;local::lib&#39;
Running make for A/AP/APEIRON/local-lib-1.008004.tar.gz
Fetching with LWP:
http://ppm.activestate.com/CPAN/authors/id/A/AP/APEIRON/local-lib-1.008004.tar.gz
Fetching with LWP:
http://ppm.activestate.com/CPAN/authors/id/A/AP/APEIRON/CHECKSUMS
Checksum for C:\Perl14\cpan\sources\authors\id\A\AP\APEIRON\local-lib-1.008004.tar.gz ok
...

  CPAN.pm: Going to build A/AP/APEIRON/local-lib-1.008004.tar.gz


*** Module::AutoInstall version 1.03
*** Checking for Perl dependencies...
*** Since we&#39;re running under CPAN, I&#39;ll just let it take care
    of the dependency&#39;s installation later.
[Core Features]
- ExtUtils::MakeMaker ...loaded. (6.57_05 &amp;gt;= 6.31)
- ExtUtils::Install   ...loaded. (1.56 &amp;gt;= 1.43)
- Module::Build       ...loaded. (0.38 &amp;gt;= 0.36)
- CPAN                ...loaded. (1.9600 &amp;gt;= 1.82)
*** Module::AutoInstall configuration finished.
Checking if your kit is complete...
Looks good
Writing Makefile for local::lib
...
Running make test
All tests successful.
Files=7, Tests=29,  1 wallclock secs ( 0.06 usr +  0.08 sys =  0.14 CPU)
Result: PASS
  APEIRON/local-lib-1.008004.tar.gz
  C:\Perl14\site\bin\dmake.exe test -- OK
Running make install
...

cpan&amp;gt; install App::cpanminus
Running install for module &#39;App::cpanminus&#39;
Running make for M/MI/MIYAGAWA/App-cpanminus-1.4008.tar.gz
...
Running make test
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.03 usr +  0.03 sys =  0.06 CPU)
Result: PASS
  MIYAGAWA/App-cpanminus-1.4008.tar.gz
  C:\Perl14\site\bin\dmake.exe test -- OK
Running make install
...
cpan&amp;gt; exit
Lockfile removed.

D:\&amp;gt;cpanm
Usage: cpanm [options] Module [...]

Try `cpanm --help` or `man cpanm` for more options.

D:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features of Perl 5.14: unicode_strings</title>
      <link>http://localhost:1313/pub/2011/06/new-features-of-perl-514-unicode-strings.html/</link>
      <pubDate>Wed, 08 Jun 2011 11:12:39 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/06/new-features-of-perl-514-unicode-strings.html/</guid>
      <description>&lt;p&gt;Perl 5.14 is now available. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features.&lt;/p&gt;

&lt;p&gt;One such feature is the new &lt;code&gt;unicode_strings&lt;/code&gt; feature, enabled with &lt;code&gt;use feature &#39;unicode_strings&#39;;&lt;/code&gt; or &lt;code&gt;use feature &#39;:5.14&#39;;&lt;/code&gt;. (Perl 5.12 first introduced this feature, though it remained incomplete until the development of 5.14. Fortunately, you can write &lt;code&gt;use feature &#39;:5.12&#39;;&lt;/code&gt; while running with 5.14 and still get all of the benefits of the improved form in Perl 5.14.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unicode_strings&lt;/code&gt; tells the Perl 5 compiler to assume Unicode semantics for all string operations within the enclosing lexical scope. In other words, Perl will treat all strings as if they contain Unicode characters and not merely bytes. This fixes an issue when your code handles text outside of the strict ASCII range.&lt;/p&gt;

&lt;p&gt;For example, what should Perl assume if you read a character with a code point between 128 and 255? It&amp;rsquo;s obviously not ASCII text. Is it Latin-1? Is it a raw byte? What should happen?&lt;/p&gt;

&lt;p&gt;If you intend it as a Latin-1 character (Ö, for example), then the regular expression metacharacter &lt;code&gt;\w&lt;/code&gt; should match it, because an O even with a diaresis is still a letter. The Perl 5 documentation refers to this as &amp;ldquo;character semantics&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you intend it as the byte value 214, then &lt;code&gt;\w&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; match it (though why are you using a regular expression against it?). The Perl 5 documentation refers to this as &amp;ldquo;byte semantics&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now assume you have several strings from several places and you don&amp;rsquo;t know the exact encodings of all of those sources and you want to concatenate two strings or interpolate them into a third string. What happens?&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;unicode_strings&lt;/code&gt; in effect, Perl 5 prefers to use character semantics for all string operations. You can override this lexically with &lt;code&gt;no feature &#39;unicode_strings&#39;;&lt;/code&gt; or &lt;code&gt;use locale;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more information, see  &lt;a href=&#34;https://perldoc.perl.org/feature.html#the-%27unicode_strings%27-feature&#34;&gt;feature&lt;/a&gt; and especially &lt;a href=&#34;https://perldoc.perl.org/perlunicode.html#The-%22Unicode-Bug%22&#34;&gt;The Unicode Bug&amp;rdquo; in perlunicode&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features of Perl 5.14: IO::File on Demand</title>
      <link>http://localhost:1313/pub/2011/05/new-features-of-perl-514-iofile-on-demand.html/</link>
      <pubDate>Tue, 24 May 2011 13:45:15 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/05/new-features-of-perl-514-iofile-on-demand.html/</guid>
      <description>&lt;p&gt;Perl 5.14 is now available. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features.&lt;/p&gt;

&lt;p&gt;One such feature is loading &lt;a href=&#34;https://metacpan.org/pod/IO::File&#34;&gt;IO::File&lt;/a&gt; on demand.&lt;/p&gt;

&lt;p&gt;Autovivification of filehandles (colloquially known as &amp;ldquo;lexical filehandles&amp;rdquo;) has been in Perl 5 since the release of Perl 5.6.0:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    open my $fh, &#39;&amp;gt;&#39;, $filename
        or die &amp;quot;Cannot write to &#39;$filename&#39;: $!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These filehandles behaved something like objects &lt;em&gt;if&lt;/em&gt; you loaded &lt;code&gt;IO::File&lt;/code&gt; or &lt;a href=&#34;https://metacpan.org/pod/IO::Handle&#34;&gt;IO::Handle&lt;/a&gt;, in that you could call methods on them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use IO::File;
    $fh-&amp;gt;autoflush(1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though the Perl 5 core performed the appropriate gyrations to produce these filehandles associated with the proper class, you had to remember to &lt;code&gt;use&lt;/code&gt; the appropriate module manually.&lt;/p&gt;

&lt;p&gt;Perl 5.14 now &lt;code&gt;require&lt;/code&gt;s &lt;code&gt;IO::File&lt;/code&gt; if necessary for you. This is a small feature, but it smooths out a confusing wrinkle in an important feature of modern Perl 5.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features of Perl 5.14: Non-destructive Substitution</title>
      <link>http://localhost:1313/pub/2011/05/new-features-of-perl-514-non-destructive-substitution.html/</link>
      <pubDate>Wed, 18 May 2011 15:08:19 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/05/new-features-of-perl-514-non-destructive-substitution.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://news.perlfoundation.org/2011/05/perl-514.html&#34;&gt;Perl 5.14 is now available&lt;/a&gt;. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features.&lt;/p&gt;

&lt;p&gt;One such feature is non-destructive substitution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use 5.014;

    my $greeting  = &#39;Hello, world!&#39;;

    # be more elite
    say $greeting =~ tr/aeiou/4310V/r;

    # then run away
    say $greeting =~ s/Hello/Goodbye/r;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new &lt;code&gt;/r&lt;/code&gt; modifier to the substitution and transliteration operators causes Perl to return the modified string, rather than modifying the original string in place. This replaces the idiomatic but unwieldy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my  $greeting  = &#39;Hello, world!&#39;;
    my ($leetgreet = $greeting) =~ tr/aeiou/4310V/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature is even more useful for avoiding two common problems with substitutions in &lt;code&gt;map&lt;/code&gt; expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { s/foo/BAR/ } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only does the substitution modify the values of &lt;code&gt;@original&lt;/code&gt; in place, but the substitution returns a true value if the substitution succeeded and a false value otherwise. While that code &lt;em&gt;looks&lt;/em&gt; correct, it&amp;rsquo;s very subtly wrong. The corrected version of this code in Perl 5.12 or earlier is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { my $copy = $_; $copy =~ s/foo/BAR/; $copy } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.14 requires the addition of a single character to produce the intended behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @modified = map { s/foo/BAR/r } @original;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;code&gt;perldoc perlop&lt;/code&gt; for documentation of the &lt;code&gt;/r&lt;/code&gt; modifier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features of Perl 5.14: package BLOCK</title>
      <link>http://localhost:1313/pub/2011/05/new-features-of-perl-514-package-block.html/</link>
      <pubDate>Mon, 16 May 2011 11:31:25 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/05/new-features-of-perl-514-package-block.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://news.perlfoundation.org/2011/05/perl-514.html&#34;&gt;Perl 5.14 is now available&lt;/a&gt;. While this latest major release of Perl 5 brings with it many bugfixes, updates to the core libraries, and the usual performance improvements, it also includes a few nice new features. This series of articles provides a quick introduction to several of these features.&lt;/p&gt;

&lt;p&gt;One such feature is the package BLOCK syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package My::Class
    {
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you declare a package, you may now provide a block at the end of the declaration. Within that block, the current namespace will be the provided package name. Outside of that block, the previously effective namespace will be in effect. The block provides normal lexical scoping, so that any lexical variables declared within the block will be visible only inside the block. As well, any lexical pragmas will respect the block&amp;rsquo;s scoping.&lt;/p&gt;

&lt;p&gt;You do not need a trailing semicolon after the closing curly brace.&lt;/p&gt;

&lt;p&gt;You may combine this with the package VERSION syntax introduced in Perl 5.12:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package My::Class v2011.05.16
    {
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VERSION must be an integer, a real number (with a single decimal), or a dotted-decimal v-string as shown in the previous example. When present, the VERSION declaration sets the package-scoped &lt;code&gt;$VERSION&lt;/code&gt; variable within the given namespace to the provided value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc -f package&lt;/code&gt; documents this syntax.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl QA Hackathon 2011: Call to Attention</title>
      <link>http://localhost:1313/pub/2011/02/perl-qa-hackathon-2011-call-to-attention.html/</link>
      <pubDate>Wed, 02 Feb 2011 11:32:47 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2011/02/perl-qa-hackathon-2011-call-to-attention.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/DAXIM&#34;&gt;Lars Dɪᴇᴄᴋᴏᴡ&lt;/a&gt; has sent out a call for attention for the &lt;a href=&#34;http://2011.qa-hackathon.org/qa2011/&#34;&gt;2011 Perl QA Hackathon&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Perl QA hackathon 2011 is taking place from Saturday, April 16th to Monday, April 18th 2011 in Amsterdam, The Netherlands. Attendance is gratis. We would like to know if you are interested in coming and participating. You can also propose other people who should be invited. As with the hackathons in the past years, we aim to fund the travel and accommodation costs for those who cannot get funding otherwise.&lt;/p&gt;

&lt;p&gt;We would like to hear about your topics and ideas. Please find further information at the &lt;a href=&#34;http://2011.qa-hackathon.org/qa2011/wiki&#34;&gt;Perl QA Hackathon 2011 Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Perl in Plat_Forms 2011</title>
      <link>http://localhost:1313/pub/2010/10/perl-in-plat-forms-2011.html/</link>
      <pubDate>Fri, 29 Oct 2010 14:25:51 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/10/perl-in-plat-forms-2011.html/</guid>
      <description>&lt;p&gt;Thanks to &lt;a href=&#34;https://metacpan.org/author/DAXIM&#34;&gt;Lars Dɪᴇᴄᴋᴏᴡ&lt;/a&gt; for sending along this notice about the &lt;a href=&#34;https://www.plat-forms.org/&#34;&gt;Plat_Forms 2011 web development contest&lt;/a&gt;. Unlike other comparisons of programming languages (such as &lt;a href=&#34;https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame&#34;&gt;the great unmaintainable speed-tweakers micromeasurement contest&lt;/a&gt; and This Is Odiously Bad Empiricism), Plat_Forms features real teams of real programmers performing real work.&lt;/p&gt;

&lt;p&gt;Perl 5 can compete very well in this contest, with great web frameworks such as (but not limited to) Catalyst, Dancer, Mojolicious, and Jifty. See the &lt;a href=&#34;https://www.plat-forms.org/platforms-announcement#overview&#34;&gt;Plat_Forms 2011 overview&lt;/a&gt; and &lt;a href=&#34;https://www.socialtext.net/perl5/events_2011_plat_forms&#34;&gt;Plat_Forms 2011 on the Perl 5 Wiki&lt;/a&gt; for more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Colonizing the Lacuna Expanse with Perl</title>
      <link>http://localhost:1313/pub/2010/10/colonizing-the-lacuna-expanse-with-perl.html/</link>
      <pubDate>Fri, 22 Oct 2010 10:42:40 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/10/colonizing-the-lacuna-expanse-with-perl.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;Perl productivity has suffered this month with JT Smith&amp;rsquo;s announcement of &lt;a href=&#34;http://lacunaexpanse.com/&#34;&gt;The Lacuna Expanse&lt;/a&gt;, a web-based space empire strategy game. As with most of Smith&amp;rsquo;s projects, TLE uses Perl extensively. Perl.com recently conducted an email interview to explore the world behind the game world.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re a successful serial entrepreneur. How&amp;rsquo;d you get into Perl?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started my professional career as an Engineer at a TV station. As the web started to get popular in the early 90&amp;rsquo;s I started picking up web development for the TV station, and then eventually went to work at an ISP as a web developer and system administrator. That&amp;rsquo;s when I first picked up Perl, as it was already installed on the DEC Unix boxes they were running. I realized how easy it was to use it to automate a lot of my job (deploying sites, running backups, collecting statistics, munging logs), and a little web stuff here and there too (processing forms, writing message boards and polls). Since then I&amp;rsquo;ve used several other languages (PHP, Java, and Ruby mostly), but I always come back to Perl because it solves the most problems for me with the littlest amount of fuss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your business background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have no formal business training, but I&amp;rsquo;ve worked at lots of companies big and small, and either started or helped start about a dozen companies now, four of which I still own. So I&amp;rsquo;ve really picked up a lot of my business expertise through trial and error, and through watching the successes and failures of other businesses.&lt;/p&gt;

&lt;p&gt;Some people follow sports and can quote you the scores and statistics of their favorite teams. For me, I prefer to watch businesses and business leaders. And when I read for entertainment, it&amp;rsquo;s almost never fiction. Instead I like to read about things that can give me ideas to apply. For instance, I just finished &amp;ldquo;The Viral Loop,&amp;rdquo; which covers viral marketing history from Tupperware through Facebook. I know all this sounds pretty nerdy/geeky/dorky, but so be it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you decide to do a browser-based game?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Actually long before I built &lt;a href=&#34;http://webgui.org/&#34;&gt;WebGUI&lt;/a&gt;, in the CGI era, I built one of the very first web-based RPG systems. It was called Survival of the Fittest. And back about that time I had the idea for The Lacuna Expanse (it was called Star Games back then), but the technology wasn&amp;rsquo;t there to pull off what I really wanted to do.&lt;/p&gt;

&lt;p&gt;Then last year (released July 14, 2009) I built a new business called &lt;a href=&#34;http://thegamecrafter.com/&#34;&gt;The Game Crafter&lt;/a&gt;. It is a web to print company, where people design board games and card games using their web browser (plus some offline image editing) and when they&amp;rsquo;re done, they can order a copy for themselves, or put it up in our online store to sell to potential customers. It&amp;rsquo;s sort of like &lt;a href=&#34;http://lulu.com/&#34;&gt;Lulu&lt;/a&gt; or &lt;a href=&#34;http://cafepress.com&#34;&gt;CafePress&lt;/a&gt;, but for traditional board and card games. Here we are just over a year later and that business has really taken off, with over 1,500 people making custom games, and 70% of customers returning for more than one order. I should mention that TGC is built with 100% pure Perl as well.&lt;/p&gt;

&lt;p&gt;About the time that The Game Crafter launched, another business that I had created four years earlier started actually making some good money. That business is &lt;a href=&#34;http://cmsmatrix.org/&#34;&gt;CMS Matrix&lt;/a&gt;, and yes it&amp;rsquo;s 100% pure Perl as well.&lt;/p&gt;

&lt;p&gt;After about 6 months of seeing how well The Game Crafter and CMS Matrix were doing, and knowing that I had a solid team in place to keep WebGUI marching forward, my business partners and I decided we should take a chance with yet another business. But this time we decided we wanted to tackle something much more ambitious and risky.&lt;/p&gt;

&lt;p&gt;One of my business partners reminded me of the Star Games idea. And there&amp;rsquo;s hardly anything more risky than making a video game. It has a large up front cost of both time and money, and video games pretty much either make a lot of money, or none at all. There&amp;rsquo;s not much of a middle of the road. With Star Games as our foundation, we started designing game mechanics. We didn&amp;rsquo;t want to build yet another war game (too many of those) so we settled on espionage as our conflict mechanism. And until WoW and The Sims came around, there was one game that dominated the landscape as far as revenue goes, SimCity. So we knew the game had to have a city building element. And everything else was stuff we either made up, or ideas we borrowed from our favorite games.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What did you have to invent and what did you reuse?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Luckily CPAN came to the rescue as it has on basically every Perl project I&amp;rsquo;ve ever tackled. So I was able to not have to reinvent the wheel on basically any foundational level. Here&amp;rsquo;s the list of Perl modules I used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Validate::Email&#34;&gt;Data::Validate::Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Text::CSV_XS&#34;&gt;Text::CSV_XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Log4perl&#34;&gt;Log::Log4perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/UUID::Tiny&#34;&gt;UUID::Tiny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DateTime::Format::MySQL&#34;&gt;DateTime::Format::MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::TimeStamp&#34;&gt;DBIx::Class::TimeStamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::XS&#34;&gt;JSON::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::JSON&#34;&gt;Config::JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Starman&#34;&gt;Starman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::RPC::Dispatcher&#34;&gt;JSON::RPC::Dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Any::Adapter&#34;&gt;Log::Any::Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Log::Any::Adapter::Log4perl&#34;&gt;Log::Any::Adapter::Log4perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/String::Random&#34;&gt;String::Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Util::WeightedChoice&#34;&gt;List::Util::WeightedChoice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/List::MoreUtils&#34;&gt;List::MoreUtils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DateTime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Regexp::Common&#34;&gt;Regexp::Common&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pod::Simple::HTML&#34;&gt;Pod::Simple::HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Copy&#34;&gt;File::Copy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DateTime::Format::Duration&#34;&gt;DateTime::Format::Duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XML::FeedPP&#34;&gt;XML::FeedPP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/SOAP::Amazon::S3&#34;&gt;SOAP::Amazon::S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBD::mysql&#34;&gt;DBD::mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Any&#34;&gt;JSON::Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::InflateColumn::Serializer&#34;&gt;DBIx::Class::InflateColumn::Serializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::DynamicSubclass&#34;&gt;DBIx::Class::DynamicSubclass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Memcached::libmemcached&#34;&gt;Memcached::libmemcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Server::Starter&#34;&gt;Server::Starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/IO::Socket::SSL&#34;&gt;IO::Socket::SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Server::SS::PreFork&#34;&gt;Net::Server::SS::PreFork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Email::Stuff&#34;&gt;Email::Stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Facebook::Graph&#34;&gt;Facebook::Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Path&#34;&gt;File::Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/namespace::autoclean&#34;&gt;namespace::autoclean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Clone&#34;&gt;Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::CrossOrigin&#34;&gt;Plack::Middleware::CrossOrigin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::S3&#34;&gt;Net::Amazon::S3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I first started development I was convinced that to be massively parallel I was going to have to go with an async server like Coro or POE, and a NoSQL database.&lt;/p&gt;

&lt;p&gt;I quickly realized that writing this system to be completely async was going to be a nightmare that would take more than double the time. Part of the problem was that while I was familiar with developing async applications, I had only done it on a small scale in the past. The other problem was that I kept running into modules I wanted to use that weren&amp;rsquo;t async compatible. Ultimately I ditched the idea of going async within the first month.&lt;/p&gt;

&lt;p&gt;Unfortunately I wasn&amp;rsquo;t so quick to ditch the idea of NoSQL. I started with MongoDB and CouchDB, but had trouble compiling them with the Perl bindings. I planned on hosting on &lt;a href=&#34;http://aws.amazon.com./&#34;&gt;Amazon&lt;/a&gt; at that point, so I decided to give SimpleDB a go. The downside there was that there were no decent Perl bindings for SimpleDB, that weren&amp;rsquo;t entirely bare bones. So with that I created &lt;a href=&#34;https://metacpan.org/pod/SimpleDB::Class&#34;&gt;SimpleDB::Class&lt;/a&gt; (based loosely on &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt;). The module works great. Unfortunately SimpleDB doesn&amp;rsquo;t. It&amp;rsquo;s super slow. So four months into development, with a whimper, I had to ditch my beloved &lt;a href=&#34;https://metacpan.org/pod/SimpleDB::Class&#34;&gt;SimpleDB::Class&lt;/a&gt; module. I&amp;rsquo;m glad I did. Development has been much faster and easier since then, and a good amount of thanks goes to &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/WWW::Facebook::API&#34;&gt;WWW::Facebook::API&lt;/a&gt; has been largely abandoned by its author. He told me he doesn&amp;rsquo;t have time to maintain it anymore. And I was having a hard time getting it to work anyway. As luck would have it Facebook just announced their Graph API, so I decided to take on that project, and build a Perl wrapper around it. And &lt;a href=&#34;https://metacpan.org/pod/Facebook::Graph&#34;&gt;Facebook::Graph&lt;/a&gt; was born. This enabled me to allow Facebook users to Single Sign On into the web site, the game, and also interact with their accounts.&lt;/p&gt;

&lt;p&gt;About the only other non-game piece that I had to invent of any consequence was &lt;a href=&#34;https://metacpan.org/pod/JSON::RPC::Dispatcher&#34;&gt;JSON::RPC::Dispatcher&lt;/a&gt;, which is a Plack enabled web service generator. There are some other JSON-RPC modules on CPAN, but for one reason or another I found them all completely insufficient. Mostly because of one or more of four reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It didn&amp;rsquo;t support JSON-RPC 2.0.&lt;/li&gt;
&lt;li&gt;Its documentation was so poor that I couldn&amp;rsquo;t make it work.&lt;/li&gt;
&lt;li&gt;It made me write a ton of code to simply expose a web service.&lt;/li&gt;
&lt;li&gt;It wasn&amp;rsquo;t PSGI/Plack compatible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With &lt;a href=&#34;https://metacpan.org/pod/JSON::RPC::Dispatcher&#34;&gt;JSON::RPC::Dispatcher&lt;/a&gt;, I can expose object-oriented code as web services with a single line of code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not very happy with the Perl modules that are out there for S3 right now. Right now we&amp;rsquo;re using a combination of &lt;a href=&#34;https://metacpan.org/pod/SOAP::Amazon::S3&#34;&gt;SOAP::Amazon::S3&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Net::Amazon::S3&#34;&gt;Net::Amazon::S3&lt;/a&gt;, and neither are particularly good, at least for our purposes. They both work, but only for fairly basic purposes. Sometime in the near future I&amp;rsquo;ll either take on a massive overhaul of one of those modules, or write my own from scratch. Which remains to be seen depending on how open the authors of those modules are to patches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What did you need from SimpleDB besides more speed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What I was hoping I&amp;rsquo;d get out of SimpleDB was three things: massive parallelism, hierarchical data structure storage, and schema-less storage to make my upgrade path easier. It provided all of those things.&lt;/p&gt;

&lt;p&gt;What I hadn&amp;rsquo;t anticipated was all the limitations it would place on me. Speed was just the nail in the coffin. It also puts pretty harsh limits on the amount of data per record, the amount of data returned per result set, and the complexity of queries. In addition, like most NoSQL databases it&amp;rsquo;s eventually consistent, which provides its own host of problems. I had worked my way around pretty much all that, and then finally hit the performance bottleneck.&lt;/p&gt;

&lt;p&gt;At that point I knew I had to make a change, because I wouldn&amp;rsquo;t be able to make up the difference in parallelism. For example, in order to process functions on a building, I would need planet data, and empire data in addition to the building data. But I wouldn&amp;rsquo;t know what empire or planet to fetch until I fetched the building, which meant I&amp;rsquo;d have to do serial processing. And I couldn&amp;rsquo;t cache all the data for the empire and the planet in the building (or vice versa) because of the limits on the amount of data allowed to be stored per record. My two options were: 1) Bring everything forward into memcached, which has its own problems because I&amp;rsquo;d have to create an indexing system; 2) Move to a relational database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start using &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I first heard about Plack late last year when one of the contributors to WebGUI did an initial test implementation (&lt;a href=&#34;http://blog.patspam.com/2009/plebgui-webgui-meets-plack&#34;&gt;PlebGUI&lt;/a&gt;) to see if we could use it in WebGUI. After seeing how cool it was I knew that WebGUI 8 had to have it, and all my future projects would also use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s been the biggest benefit for you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The benefits are so huge that they are hard to enumerate, so I&amp;rsquo;ll pick the top 3 or 4. For the Lacuna Expanse, the main benefit was ease of development. There were no longer any hoops to jump through (the mod_perl landscape can be tricky to navigate). Sometime later Starman came out and that gave me an instant boost to performance, which was also nice. For WebGUI the middleware components were instrumental. They allowed us to eliminate a lot of code we previously had to write ourselves rather than using shared libraries. In addition, just switching from mod_perl 2 to Starman (no other changes), gave us a 300% performance boost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You seem to be comfortable using a lot of new technologies with a reasonable amount of traffic. How do you see the risks and the rewards?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First and foremost Miyagawa, who wrote Starman and much of Plack, is my personal Perl hero. It seems like everything he writes is absolute gold. So the fact that he wrote it adds some confidence.&lt;/p&gt;

&lt;p&gt;But you&amp;rsquo;re right, in general I&amp;rsquo;m not averse to using new technologies. The problem with &amp;ldquo;tried and true&amp;rdquo; is that it&amp;rsquo;s often &amp;ldquo;old and stale&amp;rdquo;. So from my perspective, there are just as many risks choosing proven technologies as there are new ones. That doesn&amp;rsquo;t mean you can blindly adopt new technologies, but you should be on the lookout for them. The rest of the risk/reward decision comes from my business experience: Change is inevitable. If you try something and it doesn&amp;rsquo;t work out, so what? Sure it&amp;rsquo;s going to cost you some time/money, but maintaining antiquated systems costs a lot of money too. These days the pace of technology moves too quickly to rest on tried and true alone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you comfortable with the risk that you&amp;rsquo;ll run into maturity problems and can patch them or work around them, or do you think that despite their relative youth, they&amp;rsquo;re very capable for your purposes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing. When you&amp;rsquo;re running a technology based business, the only thing you can plan for is that things will change.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use scalability as an example. If you try to build a system that will infinitely scale before you have any users then you&amp;rsquo;ll spend a lot of time and money on something that may never get any users. At the same time, if you put no time into planning for some amount of scaling, then you won&amp;rsquo;t have enough breathing room to keep your users happy while you refactor.&lt;/p&gt;

&lt;p&gt;Likewise you can&amp;rsquo;t anticipate all the features you&amp;rsquo;ll ever need, because user&amp;rsquo;s desires are hard to predict. And because of this, at some point you&amp;rsquo;ll likely make a fundamental flaw in your architecture that will require at least a partial rewrite of your software. This is very much a business decision. Most developers I know cry when I say that, because most believe that it&amp;rsquo;s both possible and desirable to reach design/implementation nirvana. The fact is that users don&amp;rsquo;t care if your APIs are perfect. They care if your software does what they need it to do. From a business perspective it&amp;rsquo;s often more profitable to build something quickly and then continually refactor or even rewrite it to match demand.&lt;/p&gt;

&lt;p&gt;I say all of this to make the point that if a particular new technology doesn&amp;rsquo;t work out like we expected it to, then we&amp;rsquo;ll simply replace it in the next iteration. If you go into the project with that mentality you&amp;rsquo;ll likely be more successful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s the basic architecture of The Lacuna Expanse?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The basic software architecture looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2010_10_colonizing-the-lacuna-expanse-with-perl/arch.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2010_10_colonizing-the-lacuna-expanse-with-perl/arch_small.png&#34; alt=&#34;basic architecture of The Lacuna Expanse&#34; /&gt;&lt;/a&gt;
Basically per server configurable game rules go into various &lt;a href=&#34;https://metacpan.org/pod/Config::JSON&#34;&gt;Config::JSON&lt;/a&gt; config files. &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; and MySQL handle all of the game data storage and querying. Memcached sits off to the side and handles lock contentions, limit contentions, session management, and other server coordination communication. Unfortunately, not much can actually be cached due to the dynamic nature of the game, unless I was willing to cache basically everything, which I&amp;rsquo;m not. And all the static stuff, like images, JavaScript, and CSS files get served up from CloudFront. We also push our RSS feeds and other semi-static game content out to S3.&lt;/p&gt;

&lt;p&gt;The game engine itself is basically an MVC setup built with Moose. &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class&#34;&gt;DBIx::Class&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Config::JSON&#34;&gt;Config::JSON&lt;/a&gt; act as the model. Some custom Moose objects tied to &lt;a href=&#34;https://metacpan.org/pod/Memcached::libmemcached&#34;&gt;Memcached::libmemcached&lt;/a&gt; act as the controller handling session management, privileges, etc. And &lt;a href=&#34;https://metacpan.org/pod/JSON::RPC::Dispatcher&#34;&gt;JSON::RPC::Dispatcher&lt;/a&gt; acts as the view.&lt;/p&gt;

&lt;p&gt;The basic server architecture looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2010_10_colonizing-the-lacuna-expanse-with-perl/server.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2010_10_colonizing-the-lacuna-expanse-with-perl/server_small.png&#34; alt=&#34;server architecture of The Lacuna Expanse&#34; /&gt;&lt;/a&gt;
Any of the server nodes can be set up in either a clustered or load balanced formation to handle traffic growth.&lt;/p&gt;

&lt;p&gt;And finally we use &lt;a href=&#34;http://github.com/&#34;&gt;Github&lt;/a&gt; as our deployment system. We use its service hooks feature to trigger pushing new content to S3/Cloudfront and code to the game servers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many people are working on this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Six, plus a bunch of play testers. One artist named &lt;a href=&#34;http://ryanknope.com/&#34;&gt;Ryan Knope&lt;/a&gt;; plus a part time helper, Keegan Runde, who is the son of one of the other developers. One on iPhone development, named Kevin Runde. Two on Web Client development John Rozeske and Graham Knop. Myself on server development. And myself and my business partner Jamie Vrbsky on game mechanics development.&lt;/p&gt;

&lt;p&gt;We started development in January 2010, and officially launched the game on October 4, 2010. Now that we&amp;rsquo;ve launched, I&amp;rsquo;ve brought in one of my other business partners, Tavis Parker, to help out with marketing the game. And we&amp;rsquo;re still pushing forward on new releases. We hope to have our first expansion for the game, called &amp;ldquo;Enemy Within&amp;rdquo;, out sometime in Q1 2011.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you manage your development process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re very loose on management.&lt;/p&gt;

&lt;p&gt;We basically have a strategy meeting every 2 weeks at a local pub, where we discuss whatever needs to be discussed in person. Beyond that we have a play testers mailing list, a developers mailing list, and a defect tracking system that we use internally. And other than that communicate through Skype and email.&lt;/p&gt;

&lt;p&gt;We manage all of our code and content through various public and private github repositories. We share documents and art mockups using &lt;a href=&#34;http://dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I publish all the JSON-RPC APIs out using POD (nicely formatted using &lt;a href=&#34;https://metacpan.org/pod/Pod::Simple::HTML&#34;&gt;Pod::Simple::HTML&lt;/a&gt;) to our play testers server, which is what the client guys develop against. And then ultimately once vetted and implemented by our client guys, the APIs are pushed out to the public server here at &lt;a href=&#34;http://us1.lacunaexpanse.com/api/&#34;&gt;http://us1.lacunaexpanse.com/api/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What little project management and coordination we need is handled by me emailing back and forth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How often are your releases? What&amp;rsquo;s the breakdown between bugfixes and new development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the Lacuna Expanse we&amp;rsquo;re doing releases about 4 or 5 times a week. 1 or 2 of them contain some new features, and the rest are bug fixes. However, TLE is very new. In the beginning it&amp;rsquo;s very important to react quickly to your users needs because they often find bugs you didn&amp;rsquo;t, or have feature ideas that are almost fundamental after you hear them, but you never thought of them during the development process. By the end of the year our development cycle will slow down quite a bit, probably to once per week.&lt;/p&gt;

&lt;p&gt;For WebGUI we release approximately once per week, and those releases are primarily bug fixes. We generally do about 2 major releases per year that are primarily new features.&lt;/p&gt;

&lt;p&gt;For The Game Crafter we&amp;rsquo;ve stopped doing releases, except for the occasional bug fix because we&amp;rsquo;re coming into the holiday season. Starting in January we&amp;rsquo;re going to get going on a complete rewrite (about a six month process), which will quadruple our feature set, give us about a 700% performance gain, and allow us to scale with the growing demands our customers are placing on us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recruit existing Perl developers in your area, work with people you&amp;rsquo;ve worked with before, or hire good people and train them?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of the above. When you&amp;rsquo;re looking to hire someone you should hire the best person you can afford to hire. In our case this means we&amp;rsquo;ve decided to design our businesses around telecommuting. We still maintain a small office, and still hire locally when we can, and we even provide incentives for our employees to move to Madison if they so desire, but we never throw out a resume based upon location, what schools they attended, or whether or not they&amp;rsquo;ve happened to work with the particular modules and technologies we&amp;rsquo;re working with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I keep an eye on one of the alliances in the game populated by a lot of well- known Perl developers, and they seem to be pushing the limits of the public API. I know you made this API public for a reason (and increased the call limit)&amp;ndash;but do you foresee an endgame where the best client automation wins, or do you expect that the game strategy will be malleable such that clever players have an edge over automation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Automation has its advantages certainly. It&amp;rsquo;s great for getting the mundane crap out of the way.&lt;/p&gt;

&lt;p&gt;Most games spend a lot of time and effort doing everything they can to prevent people from automating their game. The trouble is that you end up wasting a lot of effort trying to stop smart people from being smart. If they really want to automate something they will find a way around your restrictions. It&amp;rsquo;s a never ending arms race.&lt;/p&gt;

&lt;p&gt;In our case we decided to embrace these people. Better and better tools will come along and ultimately that means these people are adding features to our game that we didn&amp;rsquo;t have to write. Because eventually the tools will get simple enough that your average Joe can run them.&lt;/p&gt;

&lt;p&gt;As far as the game is concerned it doesn&amp;rsquo;t make a bit of difference that you can use a tool to push a button in the game, rather than pushing the button yourself. You still have to follow the same rules. It takes a certain amount of time to happen, you have to spend a certain amount of resources, etc. When it comes right down to it, someone still has to make all of the important decisions, and that&amp;rsquo;s not likely going to be a tool anytime soon. You have to decide what buildings to upgrade in what order, what ships to build, who to attack, how to defend, etc. And once the next expansion comes out, you&amp;rsquo;ll have to work with your team mates to build a space station, enact laws, and defend your federation of planets. It will be very much a social endeavor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Moritz Lenz</title>
      <link>http://localhost:1313/pub/2010/09/people-of-perl-6-moritz-lenz.html/</link>
      <pubDate>Mon, 13 Sep 2010 17:04:35 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/09/people-of-perl-6-moritz-lenz.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://perlgeek.de/&#34;&gt;Moritz Lenz&lt;/a&gt; is a contributor to Perl 6 and &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt;. You may know him as the writer of the popular &lt;a href=&#34;http://perlgeek.de/blog-en/perl-6/&#34;&gt;Perlgeek.de Perl 6 blog&lt;/a&gt; or a chief wrangler of the Perl 6 test suite. Here are his own words on Perl 6 and Rakudo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a physicist by education and profession. Programming is my hobby, and occasionally I earn a small bit of money with it. I started programming at the age of 15 or so, and was very impressed by Perl 5&amp;rsquo;s expressiveness when I eventually learned about Perl.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was most fascinated by the community, and found it such a friendly and open place that I stayed. I also find it a technically very interesting project. So it&amp;rsquo;s a very nice hobby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I joined the #perl6 IRC channel in February 2007 to tell the people about a broken link on a website; I got a commit bit and stayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I began with the test suite, which is still my largest area of expertise. I also contributed to Rakudo, documentation efforts, a book, various Perl 6 modules and finally I blog about Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The regexes and grammars. Also Perl 6 is designed to be extensible, which manifests in many features; designing for extensions and grows is something that more programming languages should and will embrace&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The openness. Basically everyone can get write access to the synopsis, and improve what they want to. So far we [have] had no single case of vandalism.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some through a document describing the differences between Perl 5 and Perl 6, some through reading tests and the specification, and much by following the discussions on the mailings list and IRC channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I generally point novices to &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;, which contains pointers to multiple resources. For Perl 5 programmers I wrote a series of blog posts documenting &lt;a href=&#34;http://perlgeek.de/blog-en/perl-5-to-6/&#34;&gt;differences to Perl 6&lt;/a&gt;, for programmers of other languages a book is being written. There are already some chapters online, and we are always keen on feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You take a language designer who has experience with such a language; you let him go crazy, try to implement what he comes up with, and then negotiate compromises between what he envisions and what can be done. You make the language mutable and design it for growth: the syntax can be modified with macros and grammar changes, the object system can be extended by the meta object protocol and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, &amp;ldquo;Perlish&amp;rdquo; means to work towards human intuition, not against it. A feature should do what the user expects, instead of sticking to the smallest possible set of rules to deduce the behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Perl 6 it is much easier to do proper object orientation than in Perl 5: You just use the &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; keywords; you get a constructor for free, you have syntactic sugar for attribute defaults. So you need to understand less of the object system to work with it, and you need less boilerplate code. Also working with references is much easier. All builtins are available as methods, and can be called directly without any dereferencing, so most cases of explicit dereferencing can go away. Parsing is often considered a hard task, but with Perl 6 grammars it is a piece of cake.&lt;/p&gt;

&lt;p&gt;With representation polymorphism it will be possible to write an object-relation matter for a database without any changes to the objects themselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature are you most awaiting before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rakudo needs to become faster and less memory hungry; apart from that it is mostly missing IO and modules, like database access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An infrastructure for deploying and installing modules; there are also some seemingly small features which would make a huge difference, like reliable line numbers in error messages (&lt;em&gt;editor&amp;rsquo;s note: recent changes to Rakudo after the interview took place have improved this&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after Rakudo Star?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hopefully the release of our &lt;a href=&#34;http://github.com/perl6/book&#34;&gt;Perl 6 book&lt;/a&gt;; then the next monthly release, and after that another one. Development will go on, we just hope to increase public interest in Rakudo and Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Concurrency and object pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I read the perl6-language mailing list, where all changes are sent to as diffs, and all major changes are discussed. Most of the time there is also a discussion on our IRC channel, which usually gives more background informations on the reasoning behind the changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many things to do, and not all of them are directly related to programming. The obvious things are helping to write a compiler, tests, documentation and books. Other important tasks are related to the infrastructure: keep the websites up to date, administer the servers and services. Then we need marketing, funding, conferences and hackathons, designers and people who just spread the word. Most importantly we need users and module authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some people think that Perl 6 is killing Perl 5. Fact is that development of both languages is mostly independent these days. Other people think that it&amp;rsquo;s hopeless because it&amp;rsquo;s been 10 years in the making, and there is still no version 1.0 (or 6.0) released. They don&amp;rsquo;t realize that the difference between Perl 5 and Perl 6 is much larger than a difference of 1 in the version number suggests—they should think of Perl 6 as Perl 12 or so, and ask how much time you should allocate for 7 major versions in one—probably much more than 10 years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Projects that encourage contributions from women.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Carl Mäsak</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</link>
      <pubDate>Tue, 31 Aug 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</guid>
      <description>&lt;p&gt;Carl Mäsak is a developer of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt; and arguably the most dedicated bug wrangler. He&amp;rsquo;s contributed to more bug reports than anyone else. If you find that Rakudo does not do as you expect, you&amp;rsquo;ll likely talk to him on #perl6 for help triaging and categorizing your bug.&lt;/p&gt;

&lt;p&gt;In his own words, here&amp;rsquo;s how he&amp;rsquo;s helped make Perl 6 real.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent my teens learning programming by writing hundreds of small graphical games in BASIC. A combination of university studies and employment has given me a more solid foundation in programming, but I&amp;rsquo;m still catching up on the theory in many places.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helping bring it from the world of ideas into the world of implementations. As part of that, helping build up all the things around the implementations: libraries, tooling, documentation, culture. Making Perl 6 practically usable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got pulled in during the early Pugs days in 2005, but only staying on the outskirts of the community. I saw with regret how the Pugs development slowed and stopped during 2007, and with growing excitement how the Rakudo development got going in 2008. My real entrance as a contributor was that summer, when I secretly co-wrote &lt;a href=&#34;http://november-wiki.org/&#34;&gt;a wiki engine on top of Rakudo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A wiki engine (November), a 3-d connection game (&lt;a href=&#34;http://github.com/masak/druid/&#34;&gt;Druid&lt;/a&gt;), a Perl 6 project installer (&lt;a href=&#34;http://github.com/masak/proto/&#34;&gt;proto&lt;/a&gt;), a set of web development modules (&lt;a href=&#34;http://github.com/masak/web/&#34;&gt;Web.pm&lt;/a&gt;), a grammar engine (&lt;a href=&#34;http://github.com/masak/gge/&#34;&gt;GGE&lt;/a&gt;), and a dozen smaller modules and projects.&lt;/p&gt;

&lt;p&gt;I also occasionally contribute commits to Rakudo, to the Perl 6 specification, and I regularly blog about the progress and culture of Perl 6. My biggest single contribution is probably submitting hundreds of Rakudo bugs that I or others have found in the course of using Rakudo Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just remember being awed by the visionary tone and promise of the Apocalypses as they were rolled out. I no longer have any memory of like one particular feature more than the others. Since I program more in Perl 6 than in any other language nowadays, I tend to take them for granted. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the new regex/grammar features will be so attractive that other languages won&amp;rsquo;t be able to keep their grubby hands off them. Of course, they also won&amp;rsquo;t get the pervasiveness of regexes and grammars just by tacking them onto an existing language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primarily the extremely low amounts of vandalism, considering that hundreds of people have write access to the documents which specify the language itself. Accidental damage is also often quickly corrected, and more subtle errors get discovered and corrected in a wiki-like manner in the long term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also gained a new respect for what a &amp;ldquo;holistic&amp;rdquo; process the design of a language such as Perl 6 can be sometimes. Whether some feature turns out to be a good idea is determined by dozens of minute interactions in the spec, not all of them &amp;ldquo;local&amp;rdquo;, and some of them outright emergent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hard way. :-) By trying to express every new thought I have and seeing what fails: Perl 6, Rakudo, or my thought. I&amp;rsquo;m still learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come to &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt;. Familiarize yourself with &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;. Get a pet project. Experiment. Have fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not qualified to fully answer that. The one piece of the puzzle I do have is that some pieces of software out there are stale and dead, whereas others are limber, extensible and moving. It&amp;rsquo;s important to design for the eventuality that the user of the language knows best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A number of small, sometimes contradictory criteria. It gets the job done. It&amp;rsquo;s down-to-earth rather than abstraction-laden. It&amp;rsquo;s practical rather than orthogonal. It&amp;rsquo;s often consistent in strange and unexpected ways. It favours you rather than the compiler implementor. It goes an extra mile to be user friendly rather than cryptic. It doesn&amp;rsquo;t oversimplify. It encapsulates some linguistic notion. It scales with your needs. It&amp;rsquo;s as much about language culture as it is about language implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sub/method signatures, the type system, grammars, extending the language, the metamodel&amp;hellip; all of these make things that were possible but tricky or ugly before downright easy or beautiful. Perl 5 can do a whole lot of the above things using modules, but with Perl 6 you get them out-of-the-box, and fully integrated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most await before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to more speed and stability in the existing implementations, mostly in Rakudo. I think excellent database and web support will create great changes in the way Perl 6 is used and presented.&lt;/p&gt;

&lt;p&gt;As for actual features, I&amp;rsquo;m excited that &lt;a href=&#34;http://perlcabal.org/syn/S09.html&#34;&gt;Synopsis 9&lt;/a&gt; might be mostly implemented this year—it contains a lot of exciting syntactic sugar.&lt;/p&gt;

&lt;p&gt;Also very much looking forward to playing with macros—I&amp;rsquo;ve been waiting five years for them now! :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m delighted that what drives Rakudo development and makes it efficient is the fact that the group of people organized around it are able to communicate their needs and abilities, able to delegate as well as do large chunks of work in isolation as called for by the situation. I&amp;rsquo;m thinking of Patrick when I say that, but I see those traits in others as well.&lt;/p&gt;

&lt;p&gt;It also doesn&amp;rsquo;t hurt that those of us involved in development form an increasingly knit-together group of people who enjoy each other&amp;rsquo;s company, not only on IRC but away from the keyboard as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the time before it gets the obvious the-more-the-better features— stability and speed—what Rakudo needs most is people who are brave enough to deploy it in new and interesting situations. It is still the case that when we try new things with Rakudo, we discover new bugs and corner cases, and as a result the whole development process benefits. So we need people who want to break new ground.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you mean the name, there&amp;rsquo;s no consensus yet. Suggestions welcome. All we agree on is that Rakudo Nova might not fly, Rakudo Neutron Star sounds a bit heavy, and Rakudo Black Hole would kinda suck.&lt;/p&gt;

&lt;p&gt;As for what features come next after Rakudo Star, I think an important part of the development after the Rakudo Star release will be to get feedback from people who use it, in order to know better what to focus on next. I know the core devs have some ideas, but there&amp;rsquo;s also room for course corrections. Whether the next distribution release will be after half a year, a full year, or some other timespan, depends a lot on that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A future version of Perl 6 the specification? The mind boggles. I think I don&amp;rsquo;t have any further demands on the specification than what we already have in there. I&amp;rsquo;m fully occupied trying to think up ways to abuse the features from the current spec as they come online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to agree that the #perl6 channel on freenode is a generally friendly place. It&amp;rsquo;s at least partly the result of conscious effort. On the &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;perl6-* emailing lists&lt;/a&gt; you will at times see the most informative and friendly RTFM emails you&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s still an open question for me is how these community features will scale, as the ratio of newbies to regulars skyrockets, as the frequently asked questions become more frequent, and as Perl 6 enters an &amp;ldquo;Eternal September&amp;rdquo; phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tend to get involved in the discussion about them. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear in retrospect that we should have started both Rakudo and Pugs in 2001, not years later. Of course, we had neither the knowledge we do today, nor the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being curious about Perl 6, by writing their first little script, by finding a module (new or extant) to work on, by reporting bugs or proposing enchancements in Rakudo or the various projects, by bringing interesting discussions to the channel, by interacting with the community, and by being nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most misconceptions seem to me to be merely the result of a deplorable lack of correct information, mixed with blindly cargo-culted mockery.&lt;/p&gt;

&lt;p&gt;Some people seem to think that working on a language design for ten years, adapting it both to new ideas and to the feedback from implementations, in itself qualifies as a failure of some sort. I see a language growing both more real and more realistic every day.&lt;/p&gt;

&lt;p&gt;Some people haven&amp;rsquo;t been reached by the news that we actually have runnable implementations of Perl 6, and have had so for the past five years. Those people usually become very happy to hear that we do.&lt;/p&gt;

&lt;p&gt;Others consider the Perl 6 effort as &amp;ldquo;merely an academic effort&amp;rdquo;, whose purpose will in the end only be to inform Perl 5 in certain ways, and whose ivory-tower denizens will never truly reconnect with reality. This is the only misconception that I, having written dozens of Perl 6 modules which actually run, and having as my focus making Perl 6 more practically usable, can sometimes feel saddened by.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nearly all of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carl and other Perl 6 developers are hard at work on both the Perl 6 specification as well as the Rakudo Perl 6 implementation. &lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.08&#34;&gt;Rakudo Star 2010.08 is now available&lt;/a&gt;, with better performance, fewer bugs, and more features.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

