<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mark Jason Dominus on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/mark-jason-dominus/</link>
    <description>Recent content in Mark Jason Dominus on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jun 2001 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/mark-jason-dominus/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why Not Translate Perl to C?</title>
      <link>http://localhost:1313/pub/2001/06/27/ctoperl.html/</link>
      <pubDate>Wed, 27 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/27/ctoperl.html/</guid>
      <description>

&lt;p&gt;People often have the idea that automatically translating Perl to C and then compiling the C will make their Perl programs run faster, because &amp;ldquo;C is much faster than Perl.&amp;rdquo; This article explains why this strategy is unlikely to work.&lt;/p&gt;

&lt;h3 id=&#34;short-summary&#34;&gt;Short Summary&lt;/h3&gt;

&lt;p&gt;Your Perl program is being run by the Perl interpreter. You want a C program that does the same thing that your Perl program does. A C program to do what your Perl program does would have to do most of the same things that the Perl interpreter does when it runs your Perl program. There is no reason to think that the C program could do those things faster than the Perl interpreter does them, because the Perl interpreter itself is written in very fast C.&lt;/p&gt;

&lt;p&gt;Some detailed case studies follow.&lt;/p&gt;

&lt;h3 id=&#34;built-in-functions&#34;&gt;Built-In Functions&lt;/h3&gt;

&lt;p&gt;Suppose your program needs to split a line into fields, and uses the Perl &lt;code&gt;split&lt;/code&gt; function to do so. You want to compile this to C so it will be faster.&lt;/p&gt;

&lt;p&gt;This is obviously not going to work, because the &lt;code&gt;split&lt;/code&gt; function is already implemented in C. If you have the Perl source code, you can see the implementation of &lt;code&gt;split&lt;/code&gt; in the file &lt;code&gt;pp.c&lt;/code&gt;; it is in the function named &lt;code&gt;pp_split&lt;/code&gt;. When your Perl program uses &lt;code&gt;split&lt;/code&gt;, Perl calls this &lt;code&gt;pp_split&lt;/code&gt; function to do the splitting. &lt;code&gt;pp_split&lt;/code&gt; is written in C, and it has already been compiled to native machine code.&lt;/p&gt;

&lt;p&gt;Now, suppose you want to translate your Perl program to C. How will you translate your &lt;code&gt;split&lt;/code&gt; call? The only thing you can do is translate it to a call to the C &lt;code&gt;pp_split&lt;/code&gt; function, or some other equivalent function that splits. There is no reason to believe that any C implementation of &lt;code&gt;split&lt;/code&gt; will be faster than the &lt;code&gt;pp_split&lt;/code&gt; that Perl already has. Years of work have gone into making &lt;code&gt;pp_split&lt;/code&gt; as fast as possible.&lt;/p&gt;

&lt;p&gt;You can make the same argument for all of Perl&amp;rsquo;s other built-in functions, such as &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;readdir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So much for built-in functions.&lt;/p&gt;

&lt;h3 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h3&gt;

&lt;p&gt;Why is Perl slow to begin with? One major reason is that its data structures are extremely flexible, and this flexibility imposes a speed penalty.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look in detail at an important example: strings. Consider this Perl code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $x = &#39;foo&#39;;     
        $y = &#39;bar&#39;;
        $x .= $y;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, we want to append &lt;code&gt;$y&lt;/code&gt; to the end of &lt;code&gt;$x&lt;/code&gt;. In C, this is extremely tricky. In C, you would start by doing something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        char *x = &amp;quot;foo&amp;quot;;
        char *y = &amp;quot;bar&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have a problem. You would like to insert &lt;code&gt;bar&lt;/code&gt; at the end of the buffer pointed to by &lt;code&gt;x&lt;/code&gt;. But you can&amp;rsquo;t, because there is not enough room; &lt;code&gt;x&lt;/code&gt; only points to enough space for four characters, and you need space for seven. (C strings always have an extra &lt;code&gt;nul&lt;/code&gt; character on the end.) To append &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;, you must allocate a new buffer, and then arrange for &lt;code&gt;x&lt;/code&gt; to point to the new buffer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        char *tmp = malloc(strlen(x) + strlen(y) + 1);
        strcpy(tmp, x);
        strcat(tmp, y);
        x = tmp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works fine if &lt;code&gt;x&lt;/code&gt; is the only pointer to that particular buffer. But if some other part of the program also had a pointer to the buffer, this code does not work. Why not? Here&amp;rsquo;s the picture of what we did:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEFORE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2001_06_27_ctoperl/cbef.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are two variables that both contain pointers to the same buffer. We want to append &lt;code&gt;bar&lt;/code&gt; to the end of the string. But the C code we used above doesn&amp;rsquo;t quite work, because we allocated a new region of memory to hold the result, and then pointed &lt;code&gt;x&lt;/code&gt; to it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AFTER &lt;code&gt;x = tmp&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2001_06_27_ctoperl/caft.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s tempting to think that we should just point &lt;code&gt;z&lt;/code&gt; to the new buffer also, but in practice this is impossible. The function that is doing the appending cannot know whether there is such a &lt;code&gt;z&lt;/code&gt;, or where it may be. There might be 100 variables like &lt;code&gt;z&lt;/code&gt; all pointing to the old buffer, and there is no good way to keep track of them so that they can all be changed when the array moves.&lt;/p&gt;

&lt;p&gt;Perl does support a transparent string append operation. Let&amp;rsquo;s see how this works. In Perl, a variable like &lt;code&gt;$x&lt;/code&gt; does not point directly at the buffer. Instead, it points at a structure called an SV. (&amp;lsquo;Scalar Value&amp;rsquo;) The SV has the pointer to the buffer, and also some other things that I do not show:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEFORE &lt;code&gt;$x .= $y&lt;/code&gt;&lt;/strong&gt;
&lt;img src=&#34;http://localhost:1313/images/_pub_2001_06_27_ctoperl/pbef.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you ask Perl to append &lt;code&gt;bar&lt;/code&gt; to &lt;code&gt;$x&lt;/code&gt;, it follows the pointers and finds that there is not enough space in the buffer. So, just as in C, it allocates a new buffer and stores the result in the new buffer. Then it fixes the pointer in the SV to point to the new buffer, and it throws away the old buffer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2001_06_27_ctoperl/paft.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$z&lt;/code&gt; have both changed. If there were any other variables sharing the SV, their values would have changed also. This technique is called &amp;ldquo;double indirection,&amp;lsquo;&amp;rdquo; and it is how Perl can support operations like &lt;code&gt;.=&lt;/code&gt;. A similar principle applies for arrays; this is how Perl can support the &lt;code&gt;push&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The flexibility comes at a price: Whenever you want to use the value of &lt;code&gt;$x&lt;/code&gt;, Perl must follow two pointers to get the value: The first to find the SV structure, and the second to get to the buffer with the character data. This means that using a string in Perl takes at least twice as long as in C. In C, you follow just one pointer.&lt;/p&gt;

&lt;p&gt;If you want to compile Perl to C, you have a big problem. You would like to support operations like &lt;code&gt;.=&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;, but C does not support these very well. There are only three solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t support &lt;code&gt;.=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a bad solution, because after you disallow all the Perl operations like &lt;code&gt;.=&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; what you have left is not very much like Perl; it is much more like C, and then you might as well just write the program in C in the first place.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do something extremely clever&lt;/p&gt;

&lt;p&gt;Cleverness is in short supply this month. &lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use a double-indirection technique in the compiled C code&lt;/p&gt;

&lt;p&gt;This works, but the resulting C code will be slow, because you will have to traverse twice as many pointers each time you want to look up the value of a variable. But that is why Perl is slow! Perl is already doing the double-indirection lookup in C, and the code to do this has already been compiled to native machine code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So again, it&amp;rsquo;s not clear that you are going to get any benefit from translating Perl to C. The slowness of Perl comes from the flexibility of the data structures. The code to manipulate these structures is already written in C. If you translate a Perl program to C, you have the choice of throwing away the flexibility of the data structure, in which case you are now writing C programs with C structures, or keeping the flexibility with the same speed penalty. You probably cannot speed up the data structures, because if anyone knew how to make the structures faster and still keep them flexible, they would already have made those changes in the C code for Perl itself.&lt;/p&gt;

&lt;h3 id=&#34;possible-future-work&#34;&gt;Possible Future Work&lt;/h3&gt;

&lt;p&gt;It should now be clear that although it might not be hard to translate Perl to C, programs probably will not be faster as a result.&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s possible that a sufficiently clever person could make a Perl-to-C translator that produced faster C code. The programmer would need to give hints to the translator to say how the variables were being used. For example, suppose you have an array &lt;code&gt;@a&lt;/code&gt;. With such an array, Perl is ready for anything. You might do &lt;code&gt;$a[1000000] = &#39;hello&#39;;&lt;/code&gt; or &lt;code&gt;$a[500] .= &#39;foo&#39;;&lt;/code&gt; or &lt;code&gt;$a[500] /= 17;&lt;/code&gt;. This flexibility is expensive. But suppose you know that this array will only hold integers and there will never be more than 1,000 integers. You might tell the translator that, and then instead of producing C code to manage a slow Perl array, the translator can produce&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;int a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and use a fast C array of machine integers.&lt;/p&gt;

&lt;p&gt;To do this, you have to be very clever and you have to think of a way of explaining to the translator that &lt;code&gt;@a&lt;/code&gt; will never be bigger than 1,000 elements and will only contain integers, or a way for the translator to guess that just from looking at the Perl program.&lt;/p&gt;

&lt;p&gt;People are planning these features for Perl 6 right now. For example, Larry Wall, the author of Perl, plans that you will be able to declare a Perl array as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; int @a is dim(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then a Perl-to-C translator (or Perl itself) might be able to use a fast C array of machine integers rather than a slow Perl array of SVs. If you are interested, you may want to join the perl6-internals mailing list.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/06/17</title>
      <link>http://localhost:1313/pub/2001/06/p5pdigest/20010617.html/</link>
      <pubDate>Tue, 19 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/p5pdigest/20010617.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Please send corrections and additions to perl-thisweek-YYYYMM@simon-cozens.org where YYYYMM is the current year and month. Changes and additions to the perl5-porters biographies are particularly welcome.&lt;/p&gt;

&lt;p&gt;This was a reasonably busy week, seeing just over 400 messages.&lt;/p&gt;

&lt;p&gt;Many thanks to Leon for taking over these summaries in my absence.&lt;/p&gt;

&lt;h3 id=&#34;span-id-more-wall-fixes-more-wall-fixes-span&#34;&gt;&lt;span id=&#34;More__Wall_fixes&#34;&gt;More -Wall fixes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug MacEachern has been furiously fixing up compiler warnings this week, tidying up &lt;code&gt;ext/&lt;/code&gt; so that it is less noisy under &lt;code&gt;-Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One major problem was that if an XSUB has no arguments and all the work is done in PP code, the helper variable &lt;code&gt;ax&lt;/code&gt; is likely to be unused; Doug added a macro, &lt;code&gt;PERL_UNUSED_VAR&lt;/code&gt;, to wrap around &lt;code&gt;ax&lt;/code&gt; in such cases to prevent &lt;code&gt;xsubpp&lt;/code&gt; creating code that produced warnings.&lt;/p&gt;

&lt;p&gt;Nick Clark also produced a mega (141K) warning-satisfying patch.&lt;/p&gt;

&lt;p&gt;Dough also fixed up some missing &lt;code&gt;dTHX&lt;/code&gt;es in some of the extensions. This led to an associated change in &lt;code&gt;ExtUtil/Constant.pm&lt;/code&gt;, Nick Clark&amp;rsquo;s helper module for creating the &lt;code&gt;constant&lt;/code&gt; subroutine in XS modules. It took a while for people to get their heads around the idea that this was a Perl module that spat out XS code - unfortunately, MakeMaker doesn&amp;rsquo;t like the idea of having two &lt;code&gt;.xs&lt;/code&gt; files in a module, so you can&amp;rsquo;t have a separate file for constants; hence, you have to do evil things like modifying the XS code produced by &lt;code&gt;h2xs&lt;/code&gt; in place. Urgh.&lt;/p&gt;

&lt;h3 id=&#34;span-id-miscellaneous-darwin-updates-miscellaneous-darwin-updates-span&#34;&gt;&lt;span id=&#34;Miscellaneous_Darwin_Updates&#34;&gt;Miscellaneous Darwin Updates&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Wilfredo Sanchez and Larry Schatzer have been our Mac OS X heroes this week. They uncovered a bunch of problems, some of which have even been fixed. Firstly, PerlIO was intercepting a warning from the locale system before it had been properly initialized, and was causing segfaults. There were also some numeric problems with &lt;code&gt;INT32_MIN&lt;/code&gt; - Apple&amp;rsquo;s &lt;code&gt;stdin.h&lt;/code&gt; defines it as being -2147483648 instead of the more gcc-friendly -2147483647-1. As Jarkko said, the real long-term fix would be to fix Apple&amp;rsquo;s header files; unfortunately, we can&amp;rsquo;t do that very easily, so we have to work around to redefining &lt;code&gt;INT32_MIN&lt;/code&gt; on Darwin ourselves.&lt;/p&gt;

&lt;h3 id=&#34;span-id-hash-accessor-macros-hash-accessor-macros-span&#34;&gt;&lt;span id=&#34;Hash_accessor_macros&#34;&gt;Hash accessor macros&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Abhijit Menon-Sen asked why &lt;code&gt;hv.c&lt;/code&gt; does things like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    register XPVHV* xhv;
    ...
    xhv = (XPVHV*)SvANY(hv);

    ... use of xhv-&amp;gt;xhv_* ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of simply&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SvFOO(hv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is considerably easier to grep for. He then sent seven large patches which revert to the macro behaviour. Jarkko applied the patches, but then found that this generated a bunch of new warnings, and some nasty errors on HPUX.&lt;/p&gt;

&lt;p&gt;Doug MacEachern piped up, saying that the original code was there for reasons of performance; direct access saves a couple of indirections every time one of the &lt;code&gt;xhv_&lt;/code&gt; fields is accessed. He also said that the first&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    xhv = (XPVHV*)SvANY(hv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;might be stored in a register, optimising further accesses. Both Mike Guy and Ilmari Karonen suggested reverting to the previous optimised format, but putting in the macro version as comments so that they can be grepped for. Spider was called in to fix up the HPUX indigestion.&lt;/p&gt;

&lt;p&gt;Abhijit also threw in some updates to &lt;code&gt;dump.c&lt;/code&gt;, and removed the tests in the core for &amp;ldquo;anonymous stashes&amp;rdquo; - a concept which didn&amp;rsquo;t even appear to exist&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;span-id-ithreads-development-ithreads-development-span&#34;&gt;&lt;span id=&#34;iThreads_development&#34;&gt;iThreads development&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Artur&amp;rsquo;s been busy this week with iThreads support; he&amp;rsquo;s working on a number of different areas. Firstly, the continuing conversion of the &lt;code&gt;Threads.pm&lt;/code&gt; module for iThreads. His new module will be called &lt;code&gt;threads.pm&lt;/code&gt; and will soon appear on CPAN once he&amp;rsquo;s finished writing test cases. Another tack was to make regular expressions safe in threaded environments, but that seems to have temporarily ground to a halt.&lt;/p&gt;

&lt;p&gt;His big achievement this week was the implementation and documenting of the &lt;code&gt;CLONE&lt;/code&gt; method, a callback like &lt;code&gt;DESTROY&lt;/code&gt; called on all objects when a thread is cloned. This caused some brief problems on Win32 because of the way it was detecting stashes. Stashes are, of course, normal hashes, so you have to be careful to call the &lt;code&gt;CLONE&lt;/code&gt; method from a stash, rather than do something horrible like attempt to call the &lt;code&gt;CLONE&lt;/code&gt; entry from a hash. Nick added&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     if (gv_stashpv(HvNAME(hv),0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as a guard, and it all worked again.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cross-compilation-cross-compilation-span&#34;&gt;&lt;span id=&#34;Cross_compilation&#34;&gt;Cross-compilation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jarkko has reported that the basics of cross-compilation support are working; he built miniperl for iPAQ by constructing an SSH tunnel, sending the binaries produced by Configure across and reading back the results. &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-06/msg00737.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-sv-documentation-sv-documentation-span&#34;&gt;&lt;span id=&#34;SV_Documentation&#34;&gt;SV Documentation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;God of the week award goes to Dave Mitchell. Over on the Perl 6 lists, I&amp;rsquo;d asked for people to look through the Perl 5 sources and see what sort of things happen to SVs, so that I could see what needed to happen for Perl 6. In doing so, he produced 800 lines of documentation and comments for &lt;code&gt;sv.c&lt;/code&gt;. Wow.&lt;/p&gt;

&lt;p&gt;On his travels, he asked some questions about SV macros; the answers may be interesting. &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-06/msg00586.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Ilya put in a couple of scary patches for OS/2, including one which made Configure self-modifying. This was considered to be a Bad Thing.&lt;/p&gt;

&lt;p&gt;Jarkko integrated the NetWare modifications to Perl, and the &lt;code&gt;Memoize&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Sean Teague announced that the &lt;a href=&#34;http://language.perl.com/ppt/&#34;&gt;Perl Power Tools&lt;/a&gt; can be downloaded from CPAN as &lt;code&gt;Bundle::PPT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chris Nandor updated &lt;code&gt;File::Find&lt;/code&gt; and its tests to cope with MacOS; however, this consisted mainly of several iterations of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (macos) {
        A
    } else {
        B
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which Jarkko balked at. Thomas Wegner rewrote the test suite to be much more maintainable.&lt;/p&gt;

&lt;p&gt;Mike Guy noticed that many of the internal functions don&amp;rsquo;t support UTF8 strings properly; an important culprit is &lt;code&gt;Perl_warner&lt;/code&gt;, which means every warning or error message containing UTF8 data gets mangled. He wants something which sanitizes a string for display. Any takers?&lt;/p&gt;

&lt;p&gt;Peter Prymmer hacked &lt;code&gt;h2ph&lt;/code&gt; to deal with C trigraphs - you remember them, the evil convention of using, say, &amp;ldquo;??=&amp;rdquo; instead of &amp;ldquo;#&amp;rdquo;. Urgh. He also fixed up some of the extensions to build more happily under VMS. Craig Berry also chipped in some extension patches for VMS.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200106+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;
-   &lt;a href=&#34;#This_week_on_perl5_porters_10_June__17_June_2001&#34;&gt;This week on perl5-porters (10 June&amp;ndash;17 June 2001)&lt;/a&gt;
-   &lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;
-   &lt;a href=&#34;#More__Wall_fixes&#34;&gt;More -Wall fixes&lt;/a&gt;
-   &lt;a href=&#34;#Miscellaneous_Darwin_Updates&#34;&gt;Miscellaneous Darwin Updates&lt;/a&gt;
-   &lt;a href=&#34;#Hash_accessor_macros&#34;&gt;Hash accessor macros&lt;/a&gt;
-   &lt;a href=&#34;#iThreads_development&#34;&gt;iThreads development&lt;/a&gt;
-   &lt;a href=&#34;#Cross_compilation&#34;&gt;Cross-compilation&lt;/a&gt;
-   &lt;a href=&#34;#SV_Documentation&#34;&gt;SV Documentation&lt;/a&gt;
-   &lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Hate Advocacy</title>
      <link>http://localhost:1313/pub/2000/12/advocacy.html/</link>
      <pubDate>Tue, 12 Dec 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/12/advocacy.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#why%20i%20hate%20advocacy&#34;&gt;Why I Hate Advocacy&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what%20does%20this%20have%20to%20do%20with%20programming%20languages&#34;&gt;What Does this Have to Do With Programming Languages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#my%20country%20right%20or%20wrong&#34;&gt;&amp;ldquo;My Country Right or Wrong&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#you%20know%20we%20do%20this%20too!&#34;&gt;You know we do this too!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more%20stories&#34;&gt;More Stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#drink%20the%20koolaid&#34;&gt;Drink the Kool-Aid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#so%20what%20is%20the%20problem&#34;&gt;So What is the Problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perl%20programmers&#34;&gt;Perl Programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#it%20gets%20worse&#34;&gt;It Gets Worse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#any%20other%20problems&#34;&gt;Any Other Problems?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-why-i-hate-advocacy-why-i-hate-advocacy-span&#34;&gt;&lt;span id=&#34;why i hate advocacy&#34;&gt;Why I Hate Advocacy&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;I think programming language advocacy is a big problem, not just for the Perl community, but for the larger programming community.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to start with an example of the same phenomenon in a different community, then work around to programming languages. In his Baseball Abstract 1985, Bill James wrote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why are our information systems about managers so backward? Because we have gotten trapped in an unresolvable issue about whether a manager is &amp;ldquo;good&amp;rdquo; or is &amp;ldquo;bad.&amp;rdquo; The fan, beginning with a position on the goodness or the badness of the manager in question, interprets each action in the light of that reference and makes every question about him an extension of the first principle&amp;hellip; . Beginning with the premise that Bill Virdon stinks, every other question becomes a sub-heading of why Bill Virdon stinks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;James tried to make a beginning on the problem of evaluating baseball managers by making a simple, qualitative assessment of different managers&amp;rsquo; styles. He put together a questionnaire with questions like &amp;ldquo;Does he stay with the starter, or go to the bullpen quickly?&amp;rdquo; and &amp;ldquo;Does he pinch-hit much, and if so when?&amp;rdquo; Then he circulated the questionnaire, asking baseball fans to describe the managers with whom they were most familiar.&lt;/p&gt;

&lt;p&gt;James got a surprise: Questionnaires came back with vituperative complaints about managerial behavior: &amp;ldquo;This is where we see Bill Virdon&amp;rsquo;s real preference: go with the starter &amp;lsquo;til he drops. Hell, Virdon makes Billy Martin look like a wimp, Simon Legree like a quiche-eater.&amp;rdquo; How long will he stay with a starter who is struggling? &amp;ldquo;Exactly one batter too long, or until he faints, whichever comes first.&amp;rdquo; And so on.&lt;/p&gt;

&lt;p&gt;This didn&amp;rsquo;t help James at all. He was trying to understand baseball managers qualitatively, without judging in advance whether they were &amp;lsquo;good&amp;rsquo; or &amp;lsquo;bad&amp;rsquo;. &amp;ldquo;What Stan has done with the form of the managerial box,&amp;rdquo; wrote James, &amp;ldquo;is precisely what I designed the thing to try to lead the discussion away from.&amp;rdquo; But baseball fans had so many years of experience in making these judgments that they no longer knew how to talk about managers in any other terms. Even when the fans made simple, descriptive statements, other fans inevitably understood these as either indictments or praises. Discourse about managerial style was essentially impossible, except at this very low level of &amp;ldquo;Bill Virdon is a great manager!&amp;rdquo; &amp;ldquo;No he isn&amp;rsquo;t!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think this same thing has happened to programming language discussions. Advocacy has become so natural to us that we forget there is any other way to discuss programming languages. Even if we don&amp;rsquo;t forget, other people can&amp;rsquo;t understand us because they &lt;em&gt;hear&lt;/em&gt; advocacy whether we want them to or not.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example, parallel to the baseball example. About two years ago I was giving a talk to the local Perl user group about strong typing semantics. (I can&amp;rsquo;t get into details here, but the complete talk is available: &lt;a href=&#34;http://perl.plover.com/yak/typing/&#34;&gt;Strong Typing and Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I explained what types were, and said that a lot of people had concluded that strong typing was a failed experiment, based in part on the success of weakly typed languages like Perl and in part on an idea of the state of the art that was twenty-five years out of date.&lt;/p&gt;

&lt;p&gt;Then I gave a counterexample: I discussed the typing system in Standard ML, which is more recent, and showed how it fixed many of the big problems of other typing systems and also provided a lot of unexpected advantages. Part way through the explanation, one of the audience members raised his hand and asked &amp;ldquo;But what&amp;rsquo;s wrong with the way Perl does it?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was taken aback. I hadn&amp;rsquo;t said anything was wrong with the way Perl did it. In fact, I&amp;rsquo;d specifically said that Perl&amp;rsquo;s approach had been a big success. But somehow, people in my audience had gotten the idea that because I was pointing out benefits of Standard ML, I must be saying that Standard ML was good and Perl was bad. Apparently it was inconceivable that there might be &lt;em&gt;two&lt;/em&gt; right ways to do something.&lt;/p&gt;

&lt;p&gt;In that talk I discussed the Pascal type system at some length. There was only one reason that I brought up Pascal. I needed to convince people that type systems have moved forward a little since the invention of Pascal in 1968. I had found from many years of experience that when I mentioned strong typing, people would frequently say &amp;ldquo;You must be kidding. Pascal sucks.&amp;rdquo; I knew that if I did not address Pascal, people would be unpersuaded by my talk—they might go home thinking I was advocating Pascal as soon as I mentioned strong typing. So I spent a lot of time discussing the particular failures of the Pascal type system so that I could show how these problems are surmountable—Pascal is not the be-all and end-all of strong typing, as many people think. I discussed C at the same time, because the C and Pascal type systems are so similar, and I did not want people to think I was singling out Pascal.&lt;/p&gt;

&lt;p&gt;Nevertheless, several people have written to me to complain that my talk was &amp;lsquo;unfair to Pascal&amp;rsquo;. They saw the talk as an attack on their favorite language. I don&amp;rsquo;t understand this. Even if the talk had been about Pascal, which it wasn&amp;rsquo;t, it couldn&amp;rsquo;t have been an attack, because I only told the truth about Pascal. The Pascal type system &lt;em&gt;does&lt;/em&gt; have big problems, many of which were corrected in various incompatible ways by various vendors, and many of which were corrected by Wirth, the inventor of Pascal, in his later languages.&lt;/p&gt;

&lt;p&gt;You can be &amp;lsquo;unfair&amp;rsquo; to a person, and you can hurt their feelings, even if you tell only the truth. But Pascal is a programming language, not a person. It has no feelings to hurt. Criticizing Pascal&amp;rsquo;s type system is like complaining that your hammer has a scratched face. There is no use getting upset about it. You just have to get a new hammer or make do. Saying that the criticism is unfair to the hammer, for whatever reason, is just silly.&lt;/p&gt;

&lt;p&gt;I think I know what happened here, but I&amp;rsquo;d like to discuss it a little later.&lt;/p&gt;

&lt;p&gt;I got mail a couple of days ago from Jasmine Merced-Ownby, who runs the &lt;a href=&#34;http://www.perlarchive.com/&#34;&gt;Perl Archive&lt;/a&gt; web site. Part of the site had been implemented with PHP, and she was getting letters from people who were concerned that this &amp;lsquo;made Perl look bad&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;I guess an implicit admission that Perl might not be the very best tool for every possible job could be construed as making Perl look bad, but it seems like an awfully peculiar response, unless you imagine Perl and PHP engaged in a war from which there can be only one victor, and unless you think that if PHP is good for something, anything at all, then Perl must be bad.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recall that Perl has ever been advertised as the One Tool for Every Job. Perl came into a world full of other tools and made a name for itself as a &amp;lsquo;glue language&amp;rsquo; that can help a lot of other tools inter-operate. Perl fills in the spaces between the other tools. That alone is impressive and useful. In the past ten years, more and more, Perl has worked well in place of the other tools; that&amp;rsquo;s even better. But Perl&amp;rsquo;s motto is &amp;ldquo;There&amp;rsquo;s More Than One Way To Do It&amp;rdquo;, and sometimes that means that one of the ways is to use PHP. If PHP comes up a little short for some reason, maybe Perl can fill in the gap. I understand that PHP can call out to a Perl program for help. If that&amp;rsquo;s true, it&amp;rsquo;s not an admission of failure; it&amp;rsquo;s because Rasmus Lerdorf, the author, was smart. Perl can call out to C for help, and that&amp;rsquo;s not an admission of failure either. The best glues can stick to everything.&lt;/p&gt;

&lt;p&gt;In my world, PHP can be a good solution, and Perl can be a good solution, because maybe a problem can have more than one good solution. In my world you use what works, and using PHP can&amp;rsquo;t possibly reflect badly on Perl.&lt;/p&gt;

&lt;h2 id=&#34;span-id-more-stories-more-stories-span&#34;&gt;&lt;span id=&#34;more stories&#34;&gt;More Stories&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another example, I think of the same thing. If you look in perlfaq4, you&amp;rsquo;ll see a question that says &lt;a href=&#34;https://perldoc.perl.org/perlfaq4.html#How-do-I-handle-linked-lists%3f&#34;&gt;How do I handle linked lists?&lt;/a&gt; The answer begins by saying &amp;ldquo;In general, you usually don&amp;rsquo;t need a linked list in Perl,&amp;rdquo; which is exactly the right answer, and then goes on to explain how Perl arrays serve most of the purposes of linked lists. For example, people like to use linked lists to represent stacks in C; in Perl, the right approach is to use the &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt; functions on an array instead.&lt;/p&gt;

&lt;p&gt;But after explaining that linked lists are rarely useful in Perl, the manual goes on to show an implementation of linked lists: &amp;ldquo;If you really, really wanted, you could use structures&amp;hellip;&amp;rdquo; and then the code follows. Avi recently asked me why it bothers to show an implementation, when it says before and after that the implementation is not useful for anything.&lt;/p&gt;

&lt;p&gt;I tried to put myself in the position of the FAQ authors, and ask why I would do such a thing. The first answer I thought of was that I might do it to show off my erudition. But then a better answer came to mind.&lt;/p&gt;

&lt;p&gt;Of course, this is just a guess, but if I had been writing the FAQ, I would have been afraid to say &amp;ldquo;You don&amp;rsquo;t need linked lists in Perl&amp;rdquo; and leave it at that, because I would have imagined someone reading that answer and concluding that it was an evasion and that linked lists couldn&amp;rsquo;t be done at all in Perl. Avi seemed shocked that I could be so cynical, but I think a lot of people do think that way. Why might someone conclude that the answer was an evasion? If your belief is that the author of the Perl manual will never say anything bad about even the worst parts of Perl, then you will try to read between the lines.&lt;/p&gt;

&lt;h2 id=&#34;span-id-drink-the-koolaid-drink-the-kool-aid-span&#34;&gt;&lt;span id=&#34;drink the koolaid&#34;&gt;Drink the Kool-Aid&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I think the root of the problem is that we tend to organize ourselves into tribes. Then people in the tribe are our friends, and people outside are our enemies. I think it happens like this: Someone uses Perl, and likes it, and then they use it some more. But then something strange happens. They start to identify themselves with Perl, as if Perl were part of their body, or vice versa. They&amp;rsquo;re part of the Big Perl Tribe. They want other people to join the Tribe. If they meet someone who doesn&amp;rsquo;t like Perl, it&amp;rsquo;s an insult to the Tribe and a personal affront to them.&lt;/p&gt;

&lt;p&gt;I think that explains the reaction of the folks who wrote to me to complain about my unfairness to Pascal. I think maybe they took it personally, and felt that I was being unfair to &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Getting yourself confused with a programming language isn&amp;rsquo;t a sane thing to do, but a lot of people do it, including people from our community.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the only person who suspects this. This section&amp;rsquo;s title, &amp;ldquo;Drink the Kool-Aid,&amp;rdquo; comes from a great talk by Nat Torkington from last year&amp;rsquo;s YAPC. The title of Nat&amp;rsquo;s talk was &amp;ldquo;&lt;a href=&#34;http://prometheus.frii.com/~gnat/yapc/2000-advocacy/&#34;&gt;Be an advocate, not an asshole.&lt;/a&gt;&amp;rdquo; Nat&amp;rsquo;s talk has a slide on why people do advocacy. People he asked gave a few different answers, which he mentions. But then he says: &amp;ldquo;My secret suspicion is that a lot of third-party advocacy is just: Perl is the way and the light, man, so drink the Kool-Aid and ascend to programmer heaven.&amp;rdquo; I wouldn&amp;rsquo;t have put it that way, but I have the same suspicion.&lt;/p&gt;

&lt;h2 id=&#34;span-id-so-what-is-the-problem-so-what-is-the-problem-span&#34;&gt;&lt;span id=&#34;so what is the problem&#34;&gt;So What is the Problem?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Why should we try to get out of this mentality? What&amp;rsquo;s the big deal?&lt;/p&gt;

&lt;p&gt;One big problem with thinking and talking like this is that it means we can&amp;rsquo;t learn anything new. Suppose that PHP has some advantage over Perl that would lead Jasmine to use it in place of Perl on her web site. If that&amp;rsquo;s true, wouldn&amp;rsquo;t it be cool if Perl could copy that advantage in the next version?&lt;/p&gt;

&lt;p&gt;If you approach PHP with the idea that it has to be destroyed or shut out, that Perl is Right and Everything Else is Messed Up, you aren&amp;rsquo;t going to find out what PHP&amp;rsquo;s advantages are. You aren&amp;rsquo;t going to be in a state of mind that can recognize that PHP has something good that Perl doesn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Maybe there are ideas in modern strong typing systems that would improve Perl in the future; maybe not. But if you approach the strong typing discussion with a fixed notion that there must be something wrong with it just because it&amp;rsquo;s different from the way Perl works now, you&amp;rsquo;re not going to learn anything.&lt;/p&gt;

&lt;p&gt;Perl got where it is today by copying a lot of stuff from a lot of other languages. Perl&amp;rsquo;s most famous features, hashes and regexes, are copied from Unix utilities like AWK, grep, and sed. Perl&amp;rsquo;s statement modifiers are borrowed from BASIC-plus, of all places. Perl even has features that are borrowed from Ada, including one feature you use every day.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s growth won&amp;rsquo;t stop if Perl stops copying stuff from other languages, but it will slow down. Drastically. And Perl might stop being Perl. I&amp;rsquo;m glad I wasn&amp;rsquo;t stuck with Perl 4.036 for the last seven years, and I don&amp;rsquo;t want to be stuck with Perl 5.6.0 for the next ten years either. Borrowing from other languages has been good for Perl. To keep doing it, we have to be able to look at other languages and we have to be in a frame of mind to recognize the good stuff when we see it.&lt;/p&gt;

&lt;p&gt;One of the things I found most dismaying about the Perl 6 RFC process was the parochialism of many of the submissions. The submitter would be trying to solve some problem, and would come up with a crappy solution. And meanwhile, there would be a perfectly serviceable solution in the language next door, just waiting to be reused. But it seemed as though a lot of the people making proposals only knew Perl, and not any other languages.&lt;/p&gt;

&lt;h2 id=&#34;span-id-perl-programmers-perl-programmers-span&#34;&gt;&lt;span id=&#34;perl programmers&#34;&gt;Perl Programmers&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another problem with this us-versus-them discourse. People now identify me as a &amp;lsquo;Perl Programmer&amp;rsquo;. They automatically assume that everything that comes out of my mouth will be colored by that, that I&amp;rsquo;m going to love everything about Perl and hate everything else. If I do say anything negative about Perl, some people assume that the real truth must be ten times worse than what I would admit to. It can be hard for me to make myself understood. Tribal assumptions are impeding communication. I can&amp;rsquo;t be the only one with this problem.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think of myself as a Perl Programmer. I program in maybe half a dozen languages regularly, whatever&amp;rsquo;s convenient. I&amp;rsquo;ve been a programmer since about 1978. When folks call me a Perl Programmer, it never seems to occur to them that ten years ago they would have thought I was &amp;ldquo;C Programmer&amp;rdquo; and twenty years ago I would have been a &amp;ldquo;Fortran Programmer&amp;rdquo;. But they still won&amp;rsquo;t take me seriously when I talk about strong typing systems, because what does a Perl Programmer know about strong typing? If I make a simple factual statement, like &amp;ldquo;Standard ML has strong static typing&amp;rdquo;, people are apt to conclude from that that I think strong static typing is a bad idea, just because I said that Standard ML has it, and Mark Dominus is a Perl Programmer, not a Standard ML Programmer.&lt;/p&gt;

&lt;p&gt;Bill James complained about almost the same thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facing the question of &amp;ldquo;what is his strongest point as a manager,&amp;rdquo; I wrote for Sparky Anderson &amp;ldquo;His record.&amp;rdquo; I thought that this was rather complimentary&amp;hellip; But if you start with the assumption that I&amp;rsquo;m going to be ripping Sparky, then innocent comments become loaded with double meanings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;span-id-it-gets-worse-it-gets-worse-span&#34;&gt;&lt;span id=&#34;it gets worse&#34;&gt;It Gets Worse&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Maybe the biggest problem with the &amp;ldquo;Perl good, others bad&amp;rdquo; rut is that it&amp;rsquo;s going to impede our ability to communicate with &lt;em&gt;ourselves&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we decide that the Perl Way is the One True Way, then when someone appears and asks why &lt;code&gt;length(@a)&lt;/code&gt; does the wrong thing, we&amp;rsquo;re not going to have an intelligent answer. We&amp;rsquo;re going to come up with a lot of blather about &lt;code&gt;length()&lt;/code&gt;&amp;rsquo;s argument always being in a scalar context, yak yak yak. Listen, bub, I know all about scalar context, and I still think &lt;code&gt;length(@a)&lt;/code&gt; is a rotten idea and &lt;code&gt;length(%h)&lt;/code&gt; is even worse. Perl won big because it does what you mean, even when that isn&amp;rsquo;t orthogonal. There&amp;rsquo;s no way that &lt;code&gt;length(@a)&lt;/code&gt; is doing what you mean.&lt;/p&gt;

&lt;p&gt;Someone showed up in &lt;code&gt;comp.lang.perl.misc&lt;/code&gt; this week asking why &lt;code&gt;length(@a)&lt;/code&gt; does the Wrong Thing, and nobody gave any indication that anyone agreed with him. I guess they were all too busy defending Tribal Turf or something. &lt;a href=&#34;http://dev.perl.org/rfc/212.pod&#34;&gt;RFC 212&lt;/a&gt; proves that &lt;em&gt;someone&lt;/em&gt; out there agrees with this guy. But nobody would admit it.&lt;/p&gt;

&lt;h2 id=&#34;span-id-any-other-problems-any-other-problems-span&#34;&gt;&lt;span id=&#34;any other problems&#34;&gt;Any Other Problems?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m glad you asked. Us-versus-them is not a way to be an effective advocate. Says Nat: &amp;ldquo;Passion doesn&amp;rsquo;t convince. Passion makes you look like an idiot or an asshole.&amp;rdquo; Telling someone that Perl is great and their thing sucks isn&amp;rsquo;t going to persuade anyone of anything. This style of advocacy may be fun and easy, but it isn&amp;rsquo;t effective. You have to lead people, not drive them before you.&lt;/p&gt;

&lt;h2 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t really hate advocacy. I just hate the way we do it most of the time. We do it in a dumb way. And I think the discoursive habits we pick up as a result are going to impede the progress of programming languages for a long time.&lt;/p&gt;

&lt;p&gt;Perl has a strong tradition of getting along with (and borrowing from) other languages and other systems. That&amp;rsquo;s one of its greatest strengths. Let&amp;rsquo;s not throw that away.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have a book on my bookshelf that I&amp;rsquo;ve never read, but that has a great title. It says, &amp;ldquo;All Truth is God&amp;rsquo;s Truth.&amp;rdquo; And I believe that. The most viable belief systems are those that can reach out and incorporate new ideas, new memes, new metaphors, new interfaces, new extensions, new ways of doing things. My goal this year is to try to get Perl to reach out and cooperate with Java. I know it may be difficult for some of you to swallow, but Java is not the enemy. Nor is Lisp, or Python, or Tcl. That is not to say that these languages don&amp;rsquo;t have good and bad points. I am not a cultural relativist. Nor am I a linguistic relativist. In case you hadn&amp;rsquo;t noticed. :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two points if you can guess who said that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Red Flags Return</title>
      <link>http://localhost:1313/pub/2000/11/repair3x.html/</link>
      <pubDate>Tue, 28 Nov 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/11/repair3x.html/</guid>
      <description>

&lt;p&gt;Astute readers had a number of comments about last week&amp;rsquo;s &lt;a href=&#34;http://localhost:1313/pub/2000/11/repair3.html&#34;&gt;Program Repair Shop and Red Flags&lt;/a&gt; article.&lt;/p&gt;

&lt;h3 id=&#34;span-id-control-flow-puzzle-control-flow-puzzle-span&#34;&gt;&lt;span id=&#34;control flow puzzle&#34;&gt;Control Flow Puzzle&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In the article, I had a section of code that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       $_ = &amp;lt;INFO&amp;gt; until !defined($_) || /^(\* Menu:|\037)/;
       return @header if !defined($_) || /^\037/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I disliked the structure and especially the repeated tests. I played with it, changing it to&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;a href=&#34;#control%20flow%20puzzle&#34;&gt;Control Flow Puzzle&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#pattern%20matching&#34;&gt;Pattern Matching&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#synthetic%20variables&#34;&gt;Synthetic Variables&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#send%20more%20code&#34;&gt;Send More Code&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;        while (&amp;lt;INFO&amp;gt;) {
          last if /^\* Menu:/;
          return @header if /^\037/;
        }
        return @header unless defined $_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then used Simon Cozens&amp;rsquo; suggestion of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        do { 
          $_ = &amp;lt;INFO&amp;gt;; 
          return @header if /^\037/ || ! defined $_ 
        } until /^\* Menu:/ ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This still bothered me, because &lt;code&gt;do...until&lt;/code&gt; is unusual. But I was out of time, so that&amp;rsquo;s what I used.&lt;/p&gt;

&lt;p&gt;Readers came up with two interesting alternatives. Jeff Pinyan suggested:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (&amp;lt;INFO&amp;gt;) {
          last if /^\* Menu:/;
          return %header if /^\037/ or eof(INFO);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is perfectly straightforward, and the only reason I didn&amp;rsquo;t think of it was because of my prejudice against &lt;code&gt;eof()&lt;/code&gt;. In the article, I recommended avoiding &lt;code&gt;eof()&lt;/code&gt;, and that&amp;rsquo;s a good rule of thumb. But in this case, I think it was probably the wrong way to go.&lt;/p&gt;

&lt;p&gt;After I saw Jeff&amp;rsquo;s solution, I thought more about &lt;code&gt;eof()&lt;/code&gt; and tried to remember what its real problems are. The conclusion I came to is that the big problem with &lt;code&gt;eof()&lt;/code&gt; occurs when you use it on a filehandle that is involved in an interactive dialogue, such as a terminal.&lt;/p&gt;

&lt;p&gt;Consider code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my ($name, $fav_color);
        print &amp;quot;Enter your name: &amp;quot;;
        chomp($name = &amp;lt;STDIN&amp;gt;);
        unless (eof(STDIN)) {
          print &amp;quot;Enter your favorite color: &amp;quot;;
          chomp($fav_color = &amp;lt;STDIN&amp;gt;);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems straightforward, but it doesn&amp;rsquo;t work. (Try it!) After user enters their name, we ask for &lt;code&gt;eof()&lt;/code&gt;. This tries to read another character from &lt;code&gt;STDIN&lt;/code&gt;, which means that the program is waiting for user input &lt;em&gt;before&lt;/em&gt; printing the second prompt! The program hangs forever at the &lt;code&gt;eof&lt;/code&gt; test, and the only way it can continue is if the user clairvoyantly guesses that they are supposed to enter their favorite color. If they do that, then the program will print the prompt and immediately continue. Not very useful behavior! And under some circumstances, this can cause deadlock.&lt;/p&gt;

&lt;p&gt;However, in the example program I was discussing, no deadlock is possible because the information flows in only one direction - from a file into the program. So the use of &lt;code&gt;eof()&lt;/code&gt; would have been safe.&lt;/p&gt;

&lt;p&gt;Ilya Zakharevich suggested a solution that I like even better:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      while (&amp;lt;INFO&amp;gt;) {
          return do_menu() if /^\* Menu:/;
          last if /^\037/;
      }
      return %header;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, instead of requiring the loop to fall through to process the menu, we simply put the menu-processing code into a subroutine and process it inside the loop.&lt;/p&gt;

&lt;p&gt;Ilya also pointed out that the order of the tests in the original code is backward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    return @header if /^\037/ || ! defined $_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should have looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    return @header if ! defined $_  || /^\037/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, we&amp;rsquo;re trying to do a pattern-match operation on a possibly undefined value.&lt;/p&gt;

&lt;p&gt;Ilya also suggested another alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    READ_A_LINE: {
      return %header if not defined ($_ = &amp;lt;INFO&amp;gt;) or /^\037/;
      redo READ_A_LINE unless /^\* Menu:/;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Randal Schwartz suggested something similar. This points out a possible rule of thumb: When Perl&amp;rsquo;s control-flow constructions don&amp;rsquo;t seem to be what you want, try decorating a bare block.&lt;/p&gt;

&lt;h3 id=&#34;span-id-oops-oops-span&#34;&gt;&lt;span id=&#34;oops!&#34;&gt;Oops!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;now invoke the function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $object = Info_File-&amp;gt;new(&#39;camel.info&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, the function in question was named &lt;code&gt;open_info_file&lt;/code&gt;, not &lt;code&gt;new&lt;/code&gt;. The call should have been&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $object = Info_File-&amp;gt;open_info_file(&#39;camel.info&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got the call right in my test program (of &lt;em&gt;course&lt;/em&gt; I had a test program!) but then mixed up the name when I wrote the article. Thanks to Adam Turoff for spotting this.&lt;/p&gt;

&lt;h3 id=&#34;span-id-pattern-matching-pattern-matching-span&#34;&gt;&lt;span id=&#34;pattern matching&#34;&gt;Pattern Matching&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In the article, I replaced this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ($info_file) = /File:\s*([^,]*)/;
        ($info_node) = /Node:\s*([^,]*)/;
        ($info_prev) = /Prev:\s*([^,]*)/;
        ($info_next) = /Next:\s*([^,]*)/;
        ($info_up)   = /Up:\s*([^,]*)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for my $label (qw(File Node Prev Next Up)) {
          ($header{$label}) = /$label:\s*([^,]*)/;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I complained that Perl must recompile the regex each time through the loop, five times per node. Ilya pointed out the obvious solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $header{$1} = $2 
         while /(File|Node|Prev|Next|Up):\s*([^,]*)/g;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wish I had thought of this, because you can produce it almost mechanically. In fact, I think my original code betrays a red flag itself. Whenever you have something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for $item (LIST) {
          something involving m/$item/;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this is a red flag, and you should consider trying to replace it with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $pat = join &#39;|&#39;, LIST;
        Something involving m/$pat/o;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a simple example, consider this common construction:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @states = (&#39;Alabama&#39;, &#39;Alaska&#39;, ..., 
               &#39;West Virginia&#39;, &#39;Wyoming&#39;);
        $matched = 0;
        for $state (@states) {
          if ($input =~ /$state/) { 
            $matched = 1; last;
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s more efficient to use this instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $pat = join &#39;|&#39;, @states;
        $matched = ($input =~ /$pat/o);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying this same transformation to the code in my original program yields Ilya&amp;rsquo;s suggestion.&lt;/p&gt;

&lt;h3 id=&#34;span-id-synthetic-variables-synthetic-variables-span&#34;&gt;&lt;span id=&#34;synthetic variables&#34;&gt;Synthetic Variables&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;My code looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    while (&amp;lt;INFO&amp;gt;) {
          return 1 if /^\037/;    # end of node, success.
          next unless /^\* \S/;   # skip non-menu-items
          if (/^\* ([^:]*)::/) {  # menu item ends with ::
              $key = $ref = $1;
          } elsif (/^\* ([^:]*):\s*([^.]*)[.]/) {
              ($key, $ref) = ($1, $2);
          } else {
              print STDERR &amp;quot;Couldn&#39;t parse menu item\n\t$_&amp;quot;;
              next;
          }
          $info_menu{$key} = $ref;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ilya pointed out that in this code, &lt;code&gt;$key&lt;/code&gt; and &lt;code&gt;$ref&lt;/code&gt; may be synthetic variables. A synthetic variable isn&amp;rsquo;t intrinsic to the problem you&amp;rsquo;re trying to solve; rather, they&amp;rsquo;re an artifact of the way the problem is expressed in a programming language. I think &lt;code&gt;$key&lt;/code&gt; and &lt;code&gt;$ref&lt;/code&gt; are at least somewhat natural, because the problem statement &lt;em&gt;does&lt;/em&gt; include menu items with names that refer to nodes, and &lt;code&gt;$key&lt;/code&gt; is the name of a menu item and &lt;code&gt;$ref&lt;/code&gt; is the node it refers to. But some people might prefer Ilya&amp;rsquo;s version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       while (&amp;lt;INFO&amp;gt;) {
           return 1 if /^\037/;        # end of node, success.
           next unless s/^\* (?=\S)//; # skip non-menu-items
           $info_menu{$1} = $1, next if /^([^:]*)::/; 
           $info_menu{$1} = $2, next if /^([^:]*):\s*(.*?)\./;
           print STDERR &amp;quot;Couldn&#39;t parse menu item\n\t* $_&amp;quot;;
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whatever else you say about it, this reduces the code from eleven lines to six, which is good.&lt;/p&gt;

&lt;h3 id=&#34;span-id-old-news-old-news-span&#34;&gt;&lt;span id=&#34;old news&#34;&gt;Old News&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Finally, a belated correction. In the &lt;em&gt;second&lt;/em&gt; &lt;a href=&#34;http://localhost:1313/pub/2000/06/commify.html&#34;&gt;Repair Shop and Red Flags Article&lt;/a&gt; way back in June, I got the notion that you shouldn&amp;rsquo;t use string operations on numbers. While I still think this is good advice, I then tried to apply it outside of the domain in which it made sense.&lt;/p&gt;

&lt;p&gt;I was trying to transform a number like 12345678 into an array like &lt;code&gt;(&#39;12&#39;, &#39;,&#39;, &#39;345&#39;, &#39;,&#39;, &#39;678&#39;)&lt;/code&gt;. After discussing several strategies, all of which worked, I ended with the following nonworking code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub convert {
          my ($number) = shift;
          my @result;
          while ($number) {
            push @result, ($number % 1000) , &#39;,&#39;;
            $number = int($number/1000);
          }
          pop @result;      # Remove trailing comma
          return reverse @result;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you ask this subroutine to convert the number 1009, you get &lt;code&gt;(&#39;1&#39;, &#39;,&#39;, &#39;9&#39;)&lt;/code&gt;, which is wrong; it should have been &lt;code&gt;(1, &#39;,&#39;, &#39;009&#39;)&lt;/code&gt;. Many people wrote to point this out; I think Mark Lybrand was the first. Oops! Of course, you can fix this with &lt;code&gt;sprintf&lt;/code&gt;, but really the solutions I showed earlier in the article are better.&lt;/p&gt;

&lt;p&gt;The problem here is that I became too excited about my new idea. I still think it&amp;rsquo;s usually a red flag to treat a number like a string. But there&amp;rsquo;s an exception: When you are formatting a number for output, you &lt;em&gt;have&lt;/em&gt; to treat it like a string, because output is always a string. I think Charles Knell hit the nail on the head here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By inserting commas into the returned value, you ultimately treat the number as a string. Why not just give in and admit you&amp;rsquo;re working with a string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks, Charles.&lt;/p&gt;

&lt;p&gt;People also complained that the subroutine returns a rather peculiar list instead of a single scalar, but that was the original author&amp;rsquo;s decision and I didn&amp;rsquo;t want to tamper with it without being sure why he had done it that way. People also took advantage of the opportunity to send in every bizarre, convoluted way they would think of to accomplish the same thing (or even a similar thing), often saying something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are doing way too much work! Why don&amp;rsquo;t you simply use this, like everyone else does?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub commify {
          $_ = shift . &#39;*&#39;;
          &amp;quot;nosehair&amp;quot; while s/(.{1,3})\*/*,$1/;
          substr($_,2);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think this just shows that all code is really simple if you already happen to understand it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-send-more-code-send-more-code-span&#34;&gt;&lt;span id=&#34;send more code&#34;&gt;Send More Code&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Finally, thanks to everyone who wrote in, especially the people I didn&amp;rsquo;t mention. These articles have been quite popular, and I&amp;rsquo;d like to continue them. But that can&amp;rsquo;t happen unless I have code to discuss. So if you&amp;rsquo;d like to see another ``Red Flags&amp;rdquo; article, please consider sending me a 20- to 50-line section of your own code. If you do, I won&amp;rsquo;t publish the article without showing it to you beforehand.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Program Repair Shop and Red Flags</title>
      <link>http://localhost:1313/pub/2000/11/repair3.html/</link>
      <pubDate>Tue, 14 Nov 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/11/repair3.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;
&lt;a href=&#34;#what&#39;s%20wrong%20with%20this%20picture&#34;&gt;What&amp;rsquo;s wrong with this picture?&lt;/a&gt;
&lt;a href=&#34;#the%20interface&#34;&gt;The Interface&lt;/a&gt;
&lt;a href=&#34;#the%20code&#34;&gt;The Code&lt;/a&gt;
-   &lt;a href=&#34;#open_info_file&#34;&gt;&lt;code&gt;open_info_file&lt;/code&gt;&lt;/a&gt;
-   &lt;a href=&#34;#start_info_file&#34;&gt;&lt;code&gt;start_info_file&lt;/code&gt;&lt;/a&gt;
-   &lt;a href=&#34;#start_next_part&#34;&gt;&lt;code&gt;start_next_part&lt;/code&gt;&lt;/a&gt;
-   &lt;a href=&#34;#read_next_node&#34;&gt;&lt;code&gt;read_next_node&lt;/code&gt;&lt;/a&gt;
-   &lt;a href=&#34;#looking%20for%20the%20menu&#34;&gt;Looking for the menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#putting%20it%20all%20together&#34;&gt;Putting It All Together&lt;/a&gt;
&lt;a href=&#34;#red%20flags&#34;&gt;Red Flags&lt;/a&gt;
-   &lt;a href=&#34;#don&#39;t%20repeat%20code&#34;&gt;Don&amp;rsquo;t Repeat Code&lt;/a&gt;
-   &lt;a href=&#34;#eof()&#34;&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/a&gt;
-   &lt;a href=&#34;#return%200%20and%20return%20undef&#34;&gt;&lt;code&gt;return 0&lt;/code&gt; and &lt;code&gt;return undef&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#brief%20confession&#34;&gt;Brief Confession&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-what-s-wrong-with-this-picture-what-s-wrong-with-this-picture-span&#34;&gt;&lt;span id=&#34;what&#39;s wrong with this picture&#34;&gt;What&amp;rsquo;s wrong with this picture?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Once again I&amp;rsquo;m going to have a look at a program written by a Perl beginner and see what I can do to improve it.&lt;/p&gt;

&lt;p&gt;This month&amp;rsquo;s program comes from a very old Usenet post. It was posted seven years ago - on Nov. 12, 1993, to be exact - on the &lt;code&gt;comp.lang.perl&lt;/code&gt; newsgroup. (At that time &lt;code&gt;comp.lang.perl.misc&lt;/code&gt; had not yet been created.)&lt;/p&gt;

&lt;p&gt;The program is a library of code for reading GNU ``info&amp;rdquo; files. Info files are a form of structured documentation used by the GNU project. If you use the emacs editor, you can browse info files by using the &lt;code&gt;C-h i&lt;/code&gt; command, for example. An info file is made up of many &lt;em&gt;nodes&lt;/em&gt;, each containing information about a certain topic. The nodes are arranged in a tree structure. Each node has a header with some meta-information; one item recorded in the header of each node is the name of that node&amp;rsquo;s parent in the documentation tree. Most nodes also have a menu of their child nodes. Each node also has pointers to the following and preceding nodes so that you can read through all the nodes in order.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-the-interface-the-interface-span&#34;&gt;&lt;span id=&#34;the interface&#34;&gt;The Interface&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The code we&amp;rsquo;ll see has functions for opening info files and for reading in nodes and parsing the information in their headers and menus. But before I start discussing the code, I&amp;rsquo;ll show the documentation. Here it is, copied directly from that 7-year-old Usenet posting, typos and all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    To use the functions:  Call



            &amp;amp;open_info_file(INFO_FILENAME);


    to open the filehandle `INFO&#39; to the named info file.
    Then call


            &amp;amp;get_next_node;


    repeatedly to read the next node in the info file; variables
            $info_file
            $info_node
            $info_prev
            $info_next
            $info_up


    are set if the corresponding fields appear in the node&#39;s
    header, and if the node has a menu, it is loaded into
    %info_menu.  When `get_next-node&#39; returns false, you have
    reached end-of-file or there has been an error.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right away, we can see a major problem. The code is supposed to be a library of utility functions. But the only communication between the library and the main program is through a series of global variables with names like &lt;code&gt;$info_up&lt;/code&gt;. This, of course, is terrible style. The functions cannot be used in any program that happens to have a variable named &lt;code&gt;$info_up&lt;/code&gt;, and if you do use it in such a program, you can introduce bizarre, hard-to-find bugs that result from the way the library smashes whatever value that variable had before. The library might even interfere with itself! If you had something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;amp;get_next_node;
        foo();
        print $info_node;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you might not get the results you expect. If &lt;code&gt;foo()&lt;/code&gt; happens to &lt;em&gt;also&lt;/em&gt; call &lt;code&gt;get_next_node&lt;/code&gt;, it will discard the value of &lt;code&gt;$info_node&lt;/code&gt; that the main code was planning to print.&lt;/p&gt;

&lt;p&gt;These are the types of problems that functions and local variables were intended to solve. In this case, it&amp;rsquo;s easy to solve the problems: Just have &lt;code&gt;get_next_node&lt;/code&gt; return a list of the node information, instead of setting a bunch of hardwired global variables. If the caller of the function wants to set the variables itself, it is still free to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        %next_node = &amp;amp;get_next_node;
        ($info_file, $info_node, $info_prev, $info_next, $info_up)
            = @next_node{qw(File Node Prev Next Up)};
        %info_menu = %{$next_node{Menu}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or not:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my (%node) = &amp;amp;get_next_node;
        my ($next) = $node{Next};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If for some reason the caller of &lt;code&gt;get_next_node&lt;/code&gt; &lt;em&gt;likes&lt;/em&gt; the global variables, they can still have the original interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub get_next_node_orig {
          my %next_node = &amp;amp;get_next_node;
          ($info_file, $info_node, $info_prev, $info_next, $info_up)
              = @next_node{qw(File Node Prev Next Up)};
          %info_menu = %{$next_node{Menu}}
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that no functionality has been lost; it is just as powerful to return a list of values as it is to set the global variables directly.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-the-code-the-code-span&#34;&gt;&lt;span id=&#34;the code&#34;&gt;The Code&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;ll see the code itself. &lt;a href=&#34;http://localhost:1313/media/_pub_2000_11_repair3/info.pl&#34;&gt;The entire program is available here&lt;/a&gt;. We will be looking at one part at a time.&lt;/p&gt;

&lt;h4 id=&#34;span-id-open-info-file-open-info-file-span&#34;&gt;&lt;span id=&#34;open_info_file&#34;&gt;&lt;code&gt;open_info_file&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The first function that the user calls is the &lt;code&gt;open_info_file&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    83  sub open_info_file {
    84      ($info_filename) = @_;
    85      (open(INFO, &amp;quot;$info_filename&amp;quot;)) 
          || die &amp;quot;Couldn&#39;t open $info_filename: $!&amp;quot;;
    86      return &amp;amp;start_info_file;
    87  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before I discuss the design problems here, there&amp;rsquo;s a minor syntactic issue: The quotation marks around &lt;code&gt;&amp;quot;$info_filename&amp;quot;&lt;/code&gt; are useless. Perl uses the &lt;code&gt;&amp;quot;...&amp;quot;&lt;/code&gt; notation to say ``Construct a string.&amp;rdquo; But &lt;code&gt;$info_filename&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; a string, so making it into a string is at best a waste of time. Moreover, the extra quotation marks can sometimes cause subtle bugs. Consider this innocuous-looking code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my ($x) = @_;
        do_something(&amp;quot;$x&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;$x&lt;/code&gt; was a string, this still works. But if &lt;code&gt;$x&lt;/code&gt; was a &lt;em&gt;reference&lt;/em&gt;, it probably fails. Why? Because &lt;code&gt;&amp;quot;$x&amp;quot;&lt;/code&gt; constructs a string that looks like a reference but isn&amp;rsquo;t, and if &lt;code&gt;do_something&lt;/code&gt; is expecting a reference, it will be disappointed. Such errors can be hard to debug, because the string that &lt;code&gt;do_something&lt;/code&gt; gets looks like a reference when you print it out. The &lt;code&gt;use strict &#39;refs&#39;&lt;/code&gt; pragma was designed to catch exactly this error. With &lt;code&gt;use strict &#39;refs&#39;&lt;/code&gt; in scope, &lt;code&gt;do_something&lt;/code&gt; will probably raise an error like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Can&#39;t use string (&amp;quot;SCALAR(0x8149bbc)&amp;quot;) as an ARRAY ref...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without &lt;code&gt;use strict &#39;refs&#39;&lt;/code&gt;, you get a subtle and silent bug.&lt;/p&gt;

&lt;p&gt;But back to the code. &lt;code&gt;open_info_file&lt;/code&gt; calls &lt;code&gt;die&lt;/code&gt; if it can&amp;rsquo;t open the specified file for any reason. It would probably be more convenient and consistent to have it simply return a failure code in this case; this is what it does if the &lt;code&gt;open&lt;/code&gt; succeeds, but then &lt;code&gt;start_next_part&lt;/code&gt; fails. It&amp;rsquo;s usually easier for the calling code to deal with a simple error return than with an exception, all the more so in 1993, when Perl didn&amp;rsquo;t have exception handling. I would rewrite the function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub open_info_file {
            ($info_filename) = @_;
            open(INFO, $info_filename) || return;
            return start_info_file();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also got rid of some superfluous parentheses and changed the 1993 &lt;code&gt;&amp;amp;function&lt;/code&gt; syntax to a more modern &lt;code&gt;function()&lt;/code&gt; syntax. It&amp;rsquo;s tempting to try to make &lt;code&gt;$info_filename&lt;/code&gt; into a private variable, but it turns out that other functions need to see it later, so the best we can do is make it a file-scoped lexical, private to the library, but shared among all the functions in the library.&lt;/p&gt;

&lt;p&gt;Finally, a design issue: The filehandle name &lt;code&gt;INFO&lt;/code&gt; is hard-wired into the function. Since filehandle names are global variables, this is best avoided for the same reason that we wanted to get rid of the &lt;code&gt;$info_node&lt;/code&gt; variable earlier: If some other part of the program happens to have a filehandle named &lt;code&gt;INFO&lt;/code&gt;, it&amp;rsquo;s going to be very surprised to find it suddenly attached to a new file.&lt;/p&gt;

&lt;p&gt;There are a number of ways to solve this. The best one available in Perl 4 is to have the caller pass in the filehandle it wants to use, as an argument to &lt;code&gt;open_info_file&lt;/code&gt;. Then the call is effectively using the filehandle as an object. In this case, however, this doesn&amp;rsquo;t work as well as we&amp;rsquo;d like, because, as we&amp;rsquo;ll see later, the library needs to be able to associate the name of the file with the filehandle. In the original library, this was easy, because the filename was always stored in the global variable &lt;code&gt;$info_filename&lt;/code&gt; and the filehandle was always &lt;code&gt;INFO&lt;/code&gt;. The downside of this simple solution is the library couldn&amp;rsquo;t have two info files open at once. There are solutions to this in Perl 4, but they&amp;rsquo;re only of interest to Perl 4 programmers, so I won&amp;rsquo;t go into detail.&lt;/p&gt;

&lt;p&gt;The solution in Perl 5 is to use an &lt;em&gt;object&lt;/em&gt; to represent an open info file. Whenever the caller wants to operate on the file, it passes the object into the library as an argument. The object can carry around the open filehandle and the filename. Since the data inside the object is private, it doesn&amp;rsquo;t interfere with any other data in the program. The caller can have several files open at once, and distinguish between them because each file is represented by its own object.&lt;/p&gt;

&lt;p&gt;To make this library into an object-oriented class only requires a few small changes. We add&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        package Info_File;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;at the top, and rewrite &lt;code&gt;open_info_file&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub open_info_file {
        my ($class, $info_filename) = @_;
        my $fh = new FileHandle;        
        open($fh, $info_filename) || return;
        my $object = { FH =&amp;gt; $fh, NAME =&amp;gt; $info_filename };
        bless $object =&amp;gt; $class;
        return unless $object-&amp;gt;start_info_file;            
        return $object;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now invoke the function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $object = Info_File-&amp;gt;new(&#39;camel.info&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;new FileHandle&lt;/code&gt; line constructs a fresh new filehandle. The next line opens the filehandle, as usual. The line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     my $object = { FH =&amp;gt; $fh, NAME =&amp;gt; $info_filename };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;constructs the object, which is simply a hash. The object contains all the information that the library will need to use in order to deal with the info file - in this case, the open filehandle and the original filename. The &lt;code&gt;bless&lt;/code&gt; function converts the hash into a full-fledged object of the &lt;code&gt;Info_File&lt;/code&gt; class. Finally, the&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $object-&amp;gt;start_info_file;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;invokes the &lt;code&gt;start_info_file&lt;/code&gt; function with &lt;code&gt;$object&lt;/code&gt; as its argument, just like calling &lt;code&gt;start_info_file($object)&lt;/code&gt;. The special ``arrow&amp;rdquo; syntax for objects is enabled by the &lt;code&gt;bless&lt;/code&gt; on the previous line. This notation indicates a &lt;em&gt;method call&lt;/em&gt; on the object; &lt;code&gt;start_info_file&lt;/code&gt; is the &lt;em&gt;method&lt;/em&gt;. A method is just an ordinary subroutine. A method call on an object is like any other subroutine call, except that the object itself is passed as an argument to the subroutine.&lt;/p&gt;

&lt;p&gt;That was a lot of space to spend on one three-line function, but many of the same issues are going to pop up over and over, and it&amp;rsquo;s good to see them in a simple context.&lt;/p&gt;

&lt;h3 id=&#34;span-id-start-info-file-start-info-file-span&#34;&gt;&lt;span id=&#34;start_info_file&#34;&gt;&lt;code&gt;start_info_file&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    47  # Discard commentary before first node of info file
    48  sub start_info_file {
    49      $_ = &amp;lt;INFO&amp;gt; until (/^\037/ || eof(INFO));
    50      return &amp;amp;start_next_part if (eof(INFO)) ;
    51      return 1;
    52  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An info file typically has a preamble before the first node, usually containing a copyright notice and a license. When the user opens an info file, the library needs to skip this preamble to get to the nodes, which are the parts of interest. That is what &lt;code&gt;start_info_file&lt;/code&gt; does. The preamble is separated from the first node by a line that begins with the obscure &lt;code&gt;\037&lt;/code&gt; character, which is control-underscore. The function will read through the file line by line, looking for the first line that begins with the obscure character. If it finds such a line, it immediately returns success. Otherwise, it moves on to the next ``part,&amp;rdquo; which I&amp;rsquo;ll explain later.&lt;/p&gt;

&lt;p&gt;As I explained in earlier articles, a ``red flag&amp;rdquo; is an immediate warning sign that you have done something wrong. Use of the &lt;code&gt;eof()&lt;/code&gt; function is one of the clearest and brightest red flags in Perl. It is almost always a mistake to use &lt;code&gt;eof()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with &lt;code&gt;eof()&lt;/code&gt; is that it tries to see into the future, whether the &lt;em&gt;next&lt;/em&gt; read from the filehandle will return an end-of-file condition. It&amp;rsquo;s impossible to actually see the future, so what it really does is try to read some data. If there isn&amp;rsquo;t any, it reports that the next read will also report end-of-file. If not, it has to put back the data that it just read. This can cause weird problems, because &lt;code&gt;eof()&lt;/code&gt; is reading extra data that you might not have meant to read.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eof()&lt;/code&gt; is one of those functions like &lt;code&gt;goto&lt;/code&gt; that looks useful at first, but then it turns out that there is almost always a better way to accomplish the same thing. In this case, the code is more straightforward and idiomatic like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_info_file {
        while (&amp;lt;INFO&amp;gt;) {
          return 1  if /^\037/;
        }
        &amp;amp;start_next_part;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl will automatically exit the &lt;code&gt;while&lt;/code&gt; loop when it reaches the end of the file, and in that case we can unconditionally call &lt;code&gt;start_next_part&lt;/code&gt;. Inside the loop, we examine the current line to see whether it is the separator, and return success if it is. The assignment to &lt;code&gt;$_&lt;/code&gt; and the check for end-of-file are now all implicit.&lt;/p&gt;

&lt;p&gt;In the object-oriented style, &lt;code&gt;start_info_file&lt;/code&gt; expects to get an object, originally constructed by &lt;code&gt;open_info_file&lt;/code&gt;, as its argument. This object will contain the filehandle that the function will read from in place of &lt;code&gt;INFO&lt;/code&gt;. The rewriting into OO style is straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_info_file {
        my ($object) = @_;
        my $fh = $object-&amp;gt;{FH};
        while (&amp;lt;$fh&amp;gt;) {
          return 1 if /^\037/;
        }
        $object-&amp;gt;start_next_part;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we extract the filehandle from the object by asking for &lt;code&gt;$object-&amp;gt;{$fh}&lt;/code&gt;, and then use the filehandle &lt;code&gt;$fh&lt;/code&gt; in place of &lt;code&gt;INFO&lt;/code&gt;. The call to &lt;code&gt;start_next_part&lt;/code&gt; changes into a method call on the object, which means that the object is implicitly passed to the &lt;code&gt;start_next_part&lt;/code&gt; function so that &lt;code&gt;start_next_part&lt;/code&gt; &lt;em&gt;also&lt;/em&gt; has access to the object, including the filehandle buried inside it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-start-next-part-start-next-part-span&#34;&gt;&lt;span id=&#34;start_next_part&#34;&gt;&lt;code&gt;start_next_part&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I promised to explain what &lt;code&gt;start_next_part&lt;/code&gt; does, and now we&amp;rsquo;re there. An info file is not a single file; it might be split into several separate files, each containing some of the nodes. If the main info file is named &lt;code&gt;camel.info&lt;/code&gt;, there might be additional nodes in the files &lt;code&gt;camel.info-1&lt;/code&gt;, &lt;code&gt;camel.info-2&lt;/code&gt; and so on. This means that when we get to the end of an info file we are not finished; we have to check to see whether it continues in a different file. &lt;code&gt;start_next_part&lt;/code&gt; does this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    54  # Look for next part of multi-part info file.  Return 0
    55  # (normal failure) if it isn&#39;t there---that just means
    56  # we ran out of parts.  die on some other kind of failure.
    57  sub start_next_part {
    58      local($path, $basename, $ext);
    59      if ($info_filename =~ /\//) {
    60          ($path, $basename) 
            = ( $info_filename =~ /^(.*)\/(.*)$/ );
    61      } else {
    62          $basename = $info_filename;
    63          $path = &amp;quot;&amp;quot;;
    64      }
    65      if ($basename =~ /-\d*$/) {
    66          ($basename, $ext) 
            = ($basename =~ /^([^-]*)-(\d*)$/);
    67      } else {
    68          $ext = 0;
    69      }
    70      $ext++;
    71      $info_filename = &amp;quot;$path/$basename-$ext&amp;quot;;
    72      close(INFO);
    73      if (! (open(INFO, &amp;quot;$info_filename&amp;quot;)) ) {
    74          if ($! eq &amp;quot;No such file or directory&amp;quot;) {
    75              return 0;
    76          } else {
    77              die &amp;quot;Couldn&#39;t open $info_filename: $!&amp;quot;;
    78          }
    79      }
    80      return &amp;amp;start_info_file;
    81  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main point of this code is to take a filename like &lt;code&gt;/usr/info/camel.info-3&lt;/code&gt; and change it into &lt;code&gt;/usr/info/camel.info-4&lt;/code&gt;. It has to handle a special case: &lt;code&gt;/usr/info/camel.info&lt;/code&gt; must become &lt;code&gt;/usr/info/camel.info-1&lt;/code&gt;. After computing the new filename, it tries to open the next part of the info file. If successful, it calls &lt;code&gt;start_info_file&lt;/code&gt; to skip the preamble in the new part.&lt;/p&gt;

&lt;p&gt;The first thing to notice here is that the function is performing more work than it needs to. It carefully separates the filename into a directory name and a base name, typically &lt;code&gt;/usr/info&lt;/code&gt; and &lt;code&gt;camel.info-3&lt;/code&gt;. But this step is unnecessary, so let&amp;rsquo;s eliminate it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        local($name, $ext);
        if ($info_filename =~ /-\d*$/) {
            ($name, $ext) 
                = ($info_filename =~ /^([^-]*)-(\d*)$/);
        } else {
            $ext = 0;
        }
        $ext++;
        $info_filename = &amp;quot;$name-$ext&amp;quot;;
        # ... no more changes ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This immediately reduces the size of the function by 25 percent. Now we notice that the two pattern matches that remain are almost the same. This is the red flag of all red flags: Any time a program does something twice, look to see whether you can get away with doing it only once. Sometimes you can&amp;rsquo;t. This time, we can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        local($name, $ext);
        if ($info_filename =~ /^([^-]*)-(\d*)$/) {
            ($name, $ext) = ($1, $2);
        } else {
            $name = $info_filename; $ext = 0;
        }
        $ext++;
        $info_filename = &amp;quot;$name-$ext&amp;quot;;
        # ... no more changes ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is somewhat simpler, and it paves the way for a big improvement: The &lt;code&gt;$name&lt;/code&gt; variable is superfluous, because its only purpose is to hold an intermediate result. The real variable of interest is &lt;code&gt;$info_filename&lt;/code&gt;. &lt;code&gt;$name&lt;/code&gt; is what I call a &lt;em&gt;synthetic variable&lt;/em&gt;: It&amp;rsquo;s an artifact of the way we solve the problem, and is inessential to the problem itself. In this case, it&amp;rsquo;s easy to eliminate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        if ($info_filename =~ /^([^-]*)-(\d*)$/) {
            $info_filename = $1 . &#39;-&#39; . ($2 + 1);
        } else {
            $info_filename .= &#39;-1&#39;;
        }
        # ... no more changes ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the pattern matches, then &lt;code&gt;$1&lt;/code&gt; contains the base name, typically &lt;code&gt;/usr/info/camel.info&lt;/code&gt;, and &lt;code&gt;$2&lt;/code&gt; contains the numeric suffix, typically &lt;code&gt;3&lt;/code&gt;. There is no need to copy these into named variables before using them; we can construct the new filename, &lt;code&gt;/usr/info/camel.info-4&lt;/code&gt; directly from &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt;. If the pattern doesn&amp;rsquo;t match, we construct the new file name by appending &lt;code&gt;-1&lt;/code&gt; to the old file name; this turns &lt;code&gt;/usr/info/camel.info&lt;/code&gt; into &lt;code&gt;/usr/info/camel.info-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That takes care of the top half of the function; now let&amp;rsquo;s look at the bottom half:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        if ($info_filename =~ /^([^-]*)-(\d*)$/) {
            $info_filename = $1 . &#39;-&#39; . ($2 + 1);
        } else {
            $info_filename .= &#39;-1&#39;;
        }
        close(INFO);
        if (! (open(INFO, &amp;quot;$info_filename&amp;quot;)) ) {
            if ($! eq &amp;quot;No such file or directory&amp;quot;) {
                return 0;
            } else {
                die &amp;quot;Couldn&#39;t open $info_filename: $!&amp;quot;;
            }
        }
        return &amp;amp;start_info_file;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;close(INFO)&lt;/code&gt; is unnecessary, because the &lt;code&gt;open&lt;/code&gt; on the following line will perform an implicit close. If the file can&amp;rsquo;t be opened the function looks to find out why. If the reason is that the next part doesn&amp;rsquo;t exist, then we&amp;rsquo;re really at the end, and it quietly returns failure, but if there was some other sort of error, it aborts. In keeping with our change to &lt;code&gt;open_info_file&lt;/code&gt;, we will eliminate the &lt;code&gt;die&lt;/code&gt; and let the caller die itself, if that is desirable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        if ($info_filename =~ /^([^-]*)-(\d*)$/) {
            $info_filename = $1 . &#39;-&#39; . ($2 + 1);
        } else {
            $info_filename .= &#39;-1&#39;;
        }
        return unless open(INFO, $info_filename);
        return &amp;amp;start_info_file;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I made a few other minor changes here: Superfluous quotation marks around &lt;code&gt;$info_filename&lt;/code&gt; are gone, and &lt;code&gt;if !&lt;/code&gt; has turned into &lt;code&gt;unless&lt;/code&gt;. Also, I replaced &lt;code&gt;return 0&lt;/code&gt; with &lt;code&gt;return&lt;/code&gt;. &lt;code&gt;return 0&lt;/code&gt; and &lt;code&gt;return undef&lt;/code&gt; are red flags: They are attempts to make a function that returns a false value. But if the function is invoked in a list context, return values of &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;undef&lt;/code&gt; are interpreted as true, not false, because they are one-element lists, and the only false lists are empty ones:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub false {
      return 0;
    }

    @a = false();
    if (@a) {          
      print &amp;quot;ooops!\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The correct way for a function to return a boolean false value in Perl is almost always a simple &lt;code&gt;return&lt;/code&gt; as we have here. In scalar context, this returns an undefined value; in list context, it returns an empty list.&lt;/p&gt;

&lt;p&gt;The function has gone from 20 lines to 7. Refitting it for object-oriented style does not make it much bigger:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub start_next_part {
        my ($object) = @_;
        my $info_filename = $object-&amp;gt;{NAME};
        if ($info_filename =~ /^([^-]*)-(\d*)$/) {
            $info_filename = $1 . &#39;-&#39; . ($2 + 1);
        } else {
            $info_filename .= &#39;-1&#39;;
        }
        my $fh = $object-&amp;gt;{FH};
        return unless open($fh, $info_filename);
        $object-&amp;gt;{NAME} = $info_filename;         # ***
        return $object-&amp;gt;start_info_file;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we extract the info file&amp;rsquo;s filename from the object using &lt;code&gt;$object-&amp;gt;{NAME}&lt;/code&gt;, which we originally set up back in &lt;code&gt;open_info_file&lt;/code&gt;. We also extract the filehandle from the object using &lt;code&gt;$object-&amp;gt;{FH}&lt;/code&gt; as we did in &lt;code&gt;start_info_file&lt;/code&gt;. If we successfully open the new file, we store the changed filename back into the object, for next time; this occurs on the line marked &lt;code&gt;***&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-read-next-node-read-next-node-span&#34;&gt;&lt;span id=&#34;read_next_node&#34;&gt;&lt;code&gt;read_next_node&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Finally, we get to the heart of the library. &lt;code&gt;read_next_node&lt;/code&gt; actually reads a nodeful of information and returns it to the caller. (The first thing to notice is that the documentation calls this function &lt;code&gt;get_next_node&lt;/code&gt;, which is wrong. But that&amp;rsquo;s an easy fix.)&lt;/p&gt;

&lt;p&gt;As far as this function is concerned, the node has three parts. The first line is the header of the node, which contains the name of the node; pointers to the previous and next nodes; and other metainformation. Then there&amp;rsquo;s a long stretch of text, which is the documentation that the node was intended to contain. Somewhere near the bottom of the text is a menu of pointers to other nodes. &lt;code&gt;read_next_node&lt;/code&gt; is interested in the header line and the menu. It has three sections: One section to handle the header line, one section to skip the following text until it sees the menu and one section to parse the menu. We&amp;rsquo;ll deal with these one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1  # Read next node into global variables.  Assumes that file 
     2  # pointer is positioned at the header line that starts a 
     3  # node.  Leaves file pointer positioned at header line of 
     4  # next node. Programmer: note that nodes are separated by 
     5  # a &amp;quot;\n\037\n&amp;quot; sequence.  Reutrn true on 
      success, false on failure
     6  sub read_next_node {
     7      undef %info_menu;
     8      $_ = &amp;lt;INFO&amp;gt;;                # Header line
     9      if (eof(INFO)) {
    10          return &amp;amp;start_next_part &amp;amp;&amp;amp; &amp;amp;read_next_node;
    11      }
    12  
    13      ($info_file) = /File:\s*([^,]*)/;
    14      ($info_node) = /Node:\s*([^,]*)/;
    15      ($info_prev) = /Prev:\s*([^,]*)/;
    16      ($info_next) = /Next:\s*([^,]*)/;
    17      ($info_up)   = /Up:\s*([^,]*)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not much needs to change here. The &lt;code&gt;undef %info_menu&lt;/code&gt; was an appropriate initialization when &lt;code&gt;%info_menu&lt;/code&gt; was a global variable, but our function isn&amp;rsquo;t going to use global variables; it&amp;rsquo;s going to return the menu information as part of its return list, so we replace this line with &lt;code&gt;my %info_menu&lt;/code&gt;. The &lt;code&gt;eof()&lt;/code&gt; test is a red flag again; it&amp;rsquo;s probably more straightforward to simply check whether &lt;code&gt;$_&lt;/code&gt; is defined. If it&amp;rsquo;s undefined, then the function has reached the end of the file, and needs to try to open the next part. If that succeeds, then it calls itself recursively to read the first node from the new part. The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; used here to sequence those two operations is concise, if a little peculiar. Unfortunately, it won&amp;rsquo;t work any more now that &lt;code&gt;read_next_node&lt;/code&gt; returns a list of data, because &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; always evaluates its arguments in scalar context. This section of the code needs to change to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $_ = &amp;lt;INFO&amp;gt;;                # Header line
        if (! defined $_) {
            return unless  &amp;amp;start_next_part;      
            return &amp;amp;read_next_node;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The recursive call might be considered a little strange, because it&amp;rsquo;s essentially performing a &lt;code&gt;goto&lt;/code&gt; back up to the top of the function, and some people might express that with a simple &lt;code&gt;while&lt;/code&gt; loop. But it&amp;rsquo;s not really obvious that that would be clearer, so I decided to leave the recursive call in.&lt;/p&gt;

&lt;p&gt;The subsequent lines extract parts of the header into the global variables &lt;code&gt;$info_file&lt;/code&gt;, &lt;code&gt;$info_node&lt;/code&gt; and so on. Since we need to make these items into a data structure to be returned from the function, rather than a set of global variables, it&amp;rsquo;s natural to try this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        ($header{File}) = /File:\s*([^,]*)/;
        ($header{Node}) = /Node:\s*([^,]*)/;
        ($header{Prev}) = /Prev:\s*([^,]*)/;
        ($header{Next}) = /Next:\s*([^,]*)/;
        ($header{Up})   =   /Up:\s*([^,]*)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but as I mentioned before, repeated code is the biggest red flag of all. The similarity of these five lines suggests that we should try a loop instead:
            for my $label (qw(File Node Prev Next Up)) {
              ($header{$label}) = /$label:\s&lt;em&gt;([^,]&lt;/em&gt;)/;
            }&lt;/p&gt;

&lt;p&gt;Here five lines have become two. The downside, however, is that Perl has to recompile the pattern five times for each node, because the value of &lt;code&gt;$label&lt;/code&gt; keeps changing. There are three things we can do to deal with this. We can ignore it, we can apply the &lt;code&gt;qr//&lt;/code&gt; operator to precompile the patterns, or we can try to make the five variable patterns into a single constant pattern. My vote here, as for most questions of micro-optimization, is to ignore it unless it proves to be a real problem. The &lt;code&gt;qr//&lt;/code&gt; solution will be an adequate fallback in that case.&lt;/p&gt;

&lt;p&gt;I did also consider combining them into one pattern, but that turns into a disaster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ($file, $node, $prev, $next, $up) = 
      /File:\s*([^,]*),\s*Node:\s*([^,]*),\s*
       Next:\s*([^,]*),\s*Prev:\s*([^,]*),\s*
       Up:\s*([^,]*)/x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually, it&amp;rsquo;s worse than that, because some of the five items might be missing from the header line, so we must make each part optional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ($file, $node, $prev, $next, $up) = 
      /(?:File:\s*([^,]*),)?\s*(?:Node:\s*([^,]*),)?\s*
       (?:Next:\s*([^,]*),)?\s*(?:Prev:\s*([^,]*),)?\s*
       (?:Up:\s*([^,]*))?/x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually, it&amp;rsquo;s even worse, because the original author was programming in Perl 4 and didn&amp;rsquo;t have &lt;code&gt;(?:...)&lt;/code&gt; or &lt;code&gt;/x&lt;/code&gt;. So that tactic really didn&amp;rsquo;t work out.&lt;/p&gt;

&lt;p&gt;This brings up an important point that I don&amp;rsquo;t always emphasize as much as I should: It&amp;rsquo;s not always obvious what tactics are best until you have tried them. When I write these articles, I make false starts. I rewrite the code one way, and discover that there are unexpected problems and the gains aren&amp;rsquo;t as big as I thought they were. Then, I try another way and see if it looks better. Sometimes it turns out I was wrong, and the original code wins, as it did in this case.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re writing your own code, it won&amp;rsquo;t always be clear how best to proceed. Try it both ways and see which looks better, then throw away the one you don&amp;rsquo;t like as much.&lt;/p&gt;

&lt;p&gt;In this article, I had originally planned to rework the library into something that would still have functioned under Perl 4. I wrote a lot of text explaining how to do this. But it turned out that the only good solution was objects, so I did it over, and that&amp;rsquo;s what you see.&lt;/p&gt;

&lt;p&gt;The moral: Never be afraid to do it over.&lt;/p&gt;

&lt;h3 id=&#34;span-id-looking-for-the-menu-looking-for-the-menu-span&#34;&gt;&lt;span id=&#34;looking for the menu&#34;&gt;Looking for the menu&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;OK, end of digression. The function has processed the header line; now it needs to skip the intervening text until it finds the menu part of the node:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    19      $_ = &amp;lt;INFO&amp;gt; until /^(\* Menu:|\037)/ || eof(INFO);
    20      if (eof(INFO)) {
    21          return &amp;amp;start_next_part;
    22      } elsif (/^\037/) { 
    23          return 1; # end of node, so return success.
    24      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The menu follows a line labeled &lt;code&gt;* Menu:&lt;/code&gt;. If the function sees the end of the node or the end of the file before it sees &lt;code&gt;* Menu&lt;/code&gt;, then the node has no menu. There&amp;rsquo;s a bug here: The function should return immediately at the end of the node, regardless of whether it is also the end of the file. As originally written, it calls &lt;code&gt;start_next_part&lt;/code&gt; at the end of the file, which might fail (if the current node was the last one) and reports the failure back to the caller when it should have reported success. Fixing the bug and eliminating &lt;code&gt;eof()&lt;/code&gt; yields this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $_ = &amp;lt;INFO&amp;gt; until !defined($_) || /^(\* Menu:|\037)/;
    return @header if !defined($_) || /^\037/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repeated tests bothered me there, but the best alternative formulation I could come up with was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    while (&amp;lt;INFO&amp;gt;) {
      last if /^\* Menu:/;
      return %header if /^\037/;
    }
    return %header unless defined $_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I asked around, and Simon Cozens suggested&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    do { 
      $_ = &amp;lt;INFO&amp;gt;; 
      return %header if /^\037/ || ! defined $_ 
    } until /^\* Menu:/ ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think I like this best, because it makes the &lt;code&gt;/^\* Menu:/&lt;/code&gt; into the main termination condition, which is as it should be. On the other hand, &lt;code&gt;do...until&lt;/code&gt; is unusual, and you don&amp;rsquo;t get the implicit read into &lt;code&gt;$_&lt;/code&gt;. But four versions of the same code is plenty, so let&amp;rsquo;s move on.&lt;/p&gt;

&lt;p&gt;Finally our function is ready to read the menu. A typical menu looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        * Menu:

        * Numerical types::
        * Exactness::
        * Implementation restrictions::
        * Syntax of numerical constants::
        * Numerical operations::
        * Numerical input and output::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each item has a title (which is displayed to the user) and a node name (which is the node that the user visits next if they select that menu item). If the title and node name are different, the menu item looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        * The title:       The node name.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If they&amp;rsquo;re the same (as is often the case) the menu item ends in &lt;code&gt;::&lt;/code&gt; as in the examples above. The menu-reading code has to handle both cases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    27      local($key, $ref);
    28      while (&amp;lt;INFO&amp;gt;) {    
    29          return 1 if /^\037/;    # end of node, success.
    30          next unless /^\* \S/;   # skip non-menu-items
    31          if (/^\* ([^:]*)::/) {  # menu item ends with ::
    32              $key = $ref = $1;
    33          } elsif (/^\* ([^:]*):\s*([^.]*)[.]/) {
    34              ($key, $ref) = ($1, $2);
    35          } else {
    36              print STDERR &amp;quot;Couldn&#39;t parse menu item\n\t$_&amp;quot;;
    37              next;
    38          }
    39          $info_menu{$key} = $ref;
    40      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think this code is lovely. I would do only two things differently. First, I would change the error message to include the filename and line number of the malformed menu entry. Perl&amp;rsquo;s built-in &lt;code&gt;$.&lt;/code&gt; variable makes this easy, and the current behavior makes it too difficult for the programmer to locate the source of the problem. And second, instead of &lt;code&gt;return&lt;/code&gt;ing directly out of the loop, I would use &lt;code&gt;last&lt;/code&gt;, because the return value &lt;code&gt;(%header, Menu =&amp;gt; \%menu)&lt;/code&gt; is rather complicated and the code below the loop will have to return the same thing anyway.&lt;/p&gt;

&lt;p&gt;In the original prgram, that &lt;code&gt;return&lt;/code&gt; line calls &lt;code&gt;start_info_file&lt;/code&gt; again if the function reads to the end of the current part while still reading the menu. This isn&amp;rsquo;t correct; it should simply return success and let the next call to &lt;code&gt;read_next_node&lt;/code&gt; worry about opening the new part.&lt;/p&gt;

&lt;p&gt;The rewritten version of &lt;code&gt;read_next_node&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub read_next_node {
        $_ = &amp;lt;INFO&amp;gt;;                # Header line
        if (! defined $_) {
            return unless  &amp;amp;start_next_part;      
            return &amp;amp;read_next_node;
        }

        my (%header, %menu);
        for my $label (qw(File Node Prev Next Up)) {
          ($header{$label}) = /$label:\s*([^,]*)/;
        }

        do { 
          $_ = &amp;lt;INFO&amp;gt;; 
          return %header if /^\037/ || ! defined $_ 
        } until /^\* Menu:/ ;



        while (&amp;lt;INFO&amp;gt;) {    
            my ($key, $ref);
            last if /^\037/;        # end of node
            next unless /^\* \S/;   # skip non-menu-items
            if (/^\* ([^:]*)::/) {  # menu item ends with ::
                $key = $ref = $1;
            } elsif (/^\* ([^:]*):\s*([^.]*)[.]/) {
                ($key, $ref) = ($1, $2);
            } else {
                warn &amp;quot;Couldn&#39;t parse menu item at line $. 
                      of file $info_file_name&amp;quot;;
                next;
            }
            $menu{$key} = $ref;
        }

        return (%header, Menu =&amp;gt; \%menu);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code didn&amp;rsquo;t get shorter this time, but that&amp;rsquo;s because it was pretty good to begin with. After making a few straightforward changes to convert it to object-oriented style, we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub read_next_node {
        my ($object) = @_;
        my ($fh) = $object-&amp;gt;{FH};
        local $_ = &amp;lt;$fh&amp;gt;;           # Header line
        if (! defined $_) {
            return unless  $object-&amp;gt;start_next_part;      
            return $object-&amp;gt;read_next_node;
        }

        my (%header, %menu);
        for my $label (qw(File Node Prev Next Up)) {
          ($header{$label}) = /$label:\s*([^,]*)/;
        }

        do { 
          $_ = &amp;lt;$fh&amp;gt;; 
          return %header if /^\037/ || ! defined $_ 
        } until /^\* Menu:/ ;

        while (&amp;lt;$fh&amp;gt;) {    
            my ($key, $ref);
            last if /^\037/;        # end of node
            next unless /^\* \S/;   # skip non-menu-items
            if (/^\* ([^:]*)::/) {  # menu item ends with ::
                $key = $ref = $1;
            } elsif (/^\* ([^:]*):\s*([^.]*)[.]/) {
                ($key, $ref) = ($1, $2);
            } else {
                warn &amp;quot;Couldn&#39;t parse menu item at line $. 
                      of file $object-&amp;gt;{NAME}&amp;quot;;
                next;
            }
            $menu{$key} = $ref;
        }

        return (%header, Menu =&amp;gt; \%menu);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/media/_pub_2000_11_repair3/Info_File.pm&#34;&gt;The entire object-oriented module is available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple example program that demonstrates the use of the library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Info_File;
    my $file = shift;
    my $info = Info_File-&amp;gt;open_info_file($file)
      or die &amp;quot;Couldn&#39;t open $file: $!; aborting&amp;quot;;
    while (my %node = $info-&amp;gt;read_next_node) {
      print $node{Node},&amp;quot;\n&amp;quot;;  # print the node name
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-putting-it-all-together-putting-it-all-together-span&#34;&gt;&lt;span id=&#34;putting it all together&#34;&gt;Putting It All Together&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This time the code hasn&amp;rsquo;t gotten any smaller; it&amp;rsquo;s the same size as it was before. Some parts got smaller, but there was some overhead associated with the conversion to object-oriented style that made the code bigger again.&lt;/p&gt;

&lt;p&gt;But the OO style got us several big wins. The interface got better; the library no longer communicates through global variables and no longer smashes &lt;code&gt;INFO&lt;/code&gt;. It also gained the capability to process two or more info files simultaneously, or the same info file more than once, which is essential if it&amp;rsquo;s to be useful in any large project. Flexibility has increased also: It would require only a few extra lines to provide the ability to search for any node or to seek back to a node by name.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-red-flags-red-flags-span&#34;&gt;&lt;span id=&#34;red flags&#34;&gt;Red Flags&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A summary of the red flags we saw this time:&lt;/p&gt;

&lt;p&gt;The Cardinal Rule of Computer Programming is that if you wrote the same code twice, you probably did something wrong. At the very least, you may be setting yourself up for a maintenance problem later on when someone changes the code in one place and not in another.&lt;/p&gt;

&lt;p&gt;Programming languages are chock-full of features designed to prevent code duplication from the very lowest levels (features such as &lt;code&gt;$a[3] += $b&lt;/code&gt; instead of &lt;code&gt;$a[3] = $a[3] + $b&lt;/code&gt; to the very highest (features such as DLLs and pipes.) In between these levels are essential features such as subroutines and modules.&lt;/p&gt;

&lt;p&gt;Each time you see you have written the same code more than once, give serious thought to how you might eliminate all but one instance.&lt;/p&gt;

&lt;h4 id=&#34;span-id-eof-eof-span&#34;&gt;&lt;span id=&#34;eof()&#34;&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The Perl &lt;code&gt;eof()&lt;/code&gt; function is almost always a bad choice. It&amp;rsquo;s typically overused by beginners and by people who have been programming in Pascal for too long.&lt;/p&gt;

&lt;p&gt;Perl returns an unambiguous end-of-file condition by yielding an undefined value. Perl&amp;rsquo;s I/O operators are designed to make it convenient to check for this. The &lt;code&gt;while(&amp;lt;FH&amp;gt;)&lt;/code&gt; construction even does so automatically. Explicit checking of &lt;code&gt;eof()&lt;/code&gt; is almost never required or desirable.&lt;/p&gt;

&lt;h4 id=&#34;span-id-return-0-and-return-undef-return-0-and-return-undef-span&#34;&gt;&lt;span id=&#34;return 0 and return undef&#34;&gt;&lt;code&gt;return 0&lt;/code&gt; and &lt;code&gt;return undef&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This is often an attempt to return a value that will be perceived by the caller as a Boolean false. But in list context, it will test as true, not false. Unless the function &lt;em&gt;always&lt;/em&gt; returns a single scalar, even in list context, it is usually a better choice to use plain &lt;code&gt;return;&lt;/code&gt; to yield a false value.&lt;/p&gt;

&lt;p&gt;Some programmers write &lt;code&gt;wantarray() ? () : undef&lt;/code&gt;, which does the same thing but is more verbose and confusing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;span-id-brief-confession-brief-confession-span&#34;&gt;&lt;span id=&#34;brief confession&#34;&gt;Brief Confession&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The program discussed in this article was indeed written by a Perl beginner. I wrote it in 1993 when I had only been programming in Perl for a few months. I must have been pleased with it, because it was the first Perl program that I posted in a public forum.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Critique of the Perl 6 RFC Process</title>
      <link>http://localhost:1313/pub/2000/11/perl6rfc.html/</link>
      <pubDate>Tue, 31 Oct 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/11/perl6rfc.html/</guid>
      <description>

&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;•&lt;a href=&#34;#problems%20with%20proposals%20of%20major%20changes&#34;&gt;Problems with Proposals of Major Changes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#problems%20with%20proposals%20of%20minor%20changes&#34;&gt;Problems with Proposals of Minor Changes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#miscellaneous%20problems&#34;&gt;Miscellaneous Problems&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#overall%20problems&#34;&gt;Overall Problems&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#bottom%20line&#34;&gt;Bottom Line&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;span-id-a-very-brief-summary-a-very-brief-summary-span&#34;&gt;&lt;span id=&#34;a very brief summary&#34;&gt;A Very Brief Summary&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Discussion of major changes is pointless in the absence of a familiarity with internals and implementations.&lt;/p&gt;

&lt;p&gt;Discussion of minor changes leads to a whole bunch of minor changes which don&amp;rsquo;t end up signifying a whole lot.&lt;/p&gt;

&lt;p&gt;Discussion was frequently disregarded by proposal authors.&lt;/p&gt;

&lt;h3 id=&#34;span-id-problems-with-proposals-of-major-changes-problems-with-proposals-of-major-changes-span&#34;&gt;&lt;span id=&#34;problems with proposals of major changes&#34;&gt;Problems with Proposals of Major Changes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Somewhere in the middle of the RFC process, I posted a satirical RFC proposing that cars should get 200 miles per gallon of gasoline. I earnestly enumerated all the reasons why this would be a good idea. Then I finished by saying&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I confess that I&amp;rsquo;m not an expert in how cars work. Nevertheless, I&amp;rsquo;ll go out on a limb and assert that this will be relatively easy to implement, with relatively few entangling side-issues.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This characterizes a common problem with many of the RFCs. Alan Perlis, a famous wizard, once said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;When someone says ``I want a programming language in which I need only say what I wish done,&amp;rdquo; give him a lollipop.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although it may sometimes seem that when we program a computer we are playing with the purest and most perfectly malleable idea-stuff, bending it into whatever shape we desire, it isn&amp;rsquo;t really so. Code is a very forgiving medium, much easier to work than metal or stone. But it still has its limitations. When someone says that they want hashes to carry a sorting order, and to always produce items in sorted order, they have failed to understand those limitations. Yes, it would be fabulous to have a hash which preserves order and has fast lookup and fast insert and delete and which will also fry eggs for you, but we don&amp;rsquo;t know how to do that. We have to settle for the things that we &lt;em&gt;do&lt;/em&gt; know how to do. Many proposals were totally out of line with reality. It didn&amp;rsquo;t matter how pretty such a proposal sounds, or even if Larry accepts it. If nobody knows how to do it, it is not going to go in.&lt;/p&gt;

&lt;p&gt;Back in August I read the IMPLEMENTATION section of the 166s RFC that were then extant.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;15&lt;/sup&gt;&amp;frasl;&lt;sub&gt;166&lt;/sub&gt; had no implementation section at all. &lt;sup&gt;14&lt;/sup&gt;&amp;frasl;&lt;sub&gt;166&lt;/sub&gt; had an extensive implementation section that neglected to discuss the implementation at all, and instead discussed the programming language interface. &lt;sup&gt;16&lt;/sup&gt;&amp;frasl;&lt;sub&gt;166&lt;/sub&gt; contained a very brief remark to the effect that the implementation would be simple, which might or might not have been true.&lt;/p&gt;

&lt;p&gt;34 of 166 RFCs had a very brief section with no substantive discussion or a protestation of ignorance:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;``Dammit, Jim, I&amp;rsquo;m a doctor, not an engineer!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;``I&amp;rsquo;ll leave that to the internals guys. :-) &amp;ldquo;&lt;/p&gt;

&lt;p&gt;``I&amp;rsquo;ve no real concrete ideas on this, sorry.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RFC 128 proposed a major extension of subroutine prototypes, and then, in the implementation section, said only ``Definitely S.E.P.&amp;ldquo;. (``Someone Else&amp;rsquo;s Problem&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;I think this flippant attitude to implementation was a big problem in the RFC process for several reasons.&lt;/p&gt;

&lt;p&gt;It leads to a who-will-bell-the-cat syndrome, in which people propose all sorts of impossible features and then have extensive discussions about the minutiae of these things that will never be implemented in any form. You can waste an awful lot of time discussing whether you want your skyhooks painted blue or red, and in the RFC mailing lists, people did exactly this.&lt;/p&gt;

&lt;p&gt;It distracts attention from concrete implementation discussion about the real possible tradeoffs. In my opinion, it was not very smart to start a &lt;code&gt;perl6-internals&lt;/code&gt; list so soon, because that suggested that the &lt;em&gt;other&lt;/em&gt; lists were &lt;em&gt;not&lt;/em&gt; for discussion of internals. As a result, a lot of the discussion that went on on the &lt;code&gt;perl6-language-*&lt;/code&gt; lists bore no apparent relation to any known universe. One way to fix this might have been to require every &lt;code&gt;language&lt;/code&gt; list to have at least one liaison with the &lt;code&gt;internals&lt;/code&gt; list, someone who had actually done some implementation work and had at least a vague sense of what was possible.&lt;/p&gt;

&lt;p&gt;Finally, on a personal note, I found this flippancy annoying. There are a lot of people around who do have some understanding of the Perl internals. An RFC author who knows that he does not understand the internals should not have a lot of trouble finding someone to consult with, to ask basic questions like ``Do you think this could be made to work?&amp;rdquo; As regex group chair, I offered more than once to hook up RFC authors with experienced Perl developers. RFC authors did not bother to do this themselves, preferring to write ``S.E.P.&amp;rdquo; and ``I have no idea how difficult this would be to implement&amp;rdquo; and ``Dunno&amp;rdquo;. We could have done better here, but we were too lazy to bother.&lt;/p&gt;

&lt;h3 id=&#34;span-id-problems-with-proposals-of-minor-changes-problems-with-proposals-of-minor-changes-span&#34;&gt;&lt;span id=&#34;problems with proposals of minor changes&#34;&gt;Problems with Proposals of Minor Changes&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-translation-issues-ignored-or-disregarded-translation-issues-ignored-or-disregarded-span&#34;&gt;&lt;span id=&#34;translation issues ignored or disregarded&#34;&gt;Translation Issues Ignored or Disregarded&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Translation issues were frequently ignored. Larry has promised that 80% of Perl 5 programs would be translatable to Perl 6 with 100% compatibility, and 95% with 95% compatibility. Several proposals were advanced which would have changed Perl so as to render many programs essentially untranslatable. If the authors considered such programs to be in the missing 5%, they never said so.&lt;/p&gt;

&lt;p&gt;Even when the translation issues were not entirely ignored, they were almost invariably incomplete. For example, RFC 74 proposed a simple change: Rename &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;unimport&lt;/code&gt; to be &lt;code&gt;IMPORT&lt;/code&gt; and &lt;code&gt;UNIMPORT&lt;/code&gt;, to make them consistent with the other all-capitals subroutine names that are reserved to Perl. It&amp;rsquo;s not clear what the benefit of this is, since as far as I know nobody has ever reported that they tried to write an &lt;code&gt;import&lt;/code&gt; subroutine and then were bitten by the special meaning that Perl attaches to this name, but let&amp;rsquo;s ignore this and suppose that the change is actually useful.&lt;/p&gt;

&lt;p&gt;The MIGRATION section of this RFC says, in full:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Perl5 -&amp;gt; Perl6 translator should provide a &lt;code&gt;import&lt;/code&gt; alias for the &lt;code&gt;IMPORT&lt;/code&gt; routine to ease migration. Likewise for &lt;code&gt;unimport&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s not really clear what that means, unless you suppose that the author got it backwards. A Perl 5 module being translated already has an &lt;code&gt;import&lt;/code&gt; routine, so it does not need an &lt;code&gt;import&lt;/code&gt; alias. Instead, it needs an &lt;code&gt;IMPORT&lt;/code&gt; alias that points at &lt;code&gt;import&lt;/code&gt;, which it already has. Then when it is run under perl6, Perl will try to call the &lt;code&gt;IMPORT&lt;/code&gt; routine, and, because of the alias, it will get the &lt;code&gt;import&lt;/code&gt; routine that is actually there.&lt;/p&gt;

&lt;p&gt;Now, what if this perl5 module already has an &lt;code&gt;IMPORT&lt;/code&gt; subroutine also? Then you can&amp;rsquo;t make &lt;code&gt;IMPORT&lt;/code&gt; an alias for &lt;code&gt;import&lt;/code&gt; because you must clobber the real &lt;code&gt;IMPORT&lt;/code&gt; to do so. Maybe you can rename the original &lt;code&gt;IMPORT&lt;/code&gt; and call it &lt;code&gt;_perl5_IMPORT&lt;/code&gt;. Now you have broken the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $x = &#39;IMPORT&#39;;
        &amp;amp;$x(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because now the code calls &lt;code&gt;import&lt;/code&gt; instead of the thing you now call &lt;code&gt;_perl5_IMPORT&lt;/code&gt;. It&amp;rsquo;s easy to construct many cases that are similarly untranslatable.&lt;/p&gt;

&lt;p&gt;None of these cases are likely to be common. That is not the point. The point is that the author apparently didn&amp;rsquo;t give any thought to whether they were common or not; it seems that he didn&amp;rsquo;t get that far. Lest anyone think that I&amp;rsquo;m picking on this author in particular (and I&amp;rsquo;m really not, because the problem was nearly universal) I&amp;rsquo;ll just point out that a well-known Perl expert had the same problem in RFC 271. As I said in email to this person, the rule of thumb for the MIGRATION ISSUES section is that &amp;lsquo;None&amp;rsquo; is &lt;em&gt;always&lt;/em&gt; the wrong answer.&lt;/p&gt;

&lt;h4 id=&#34;span-id-an-anecdote-about-translation-issues-an-anecdote-about-translation-issues-span&#34;&gt;&lt;span id=&#34;an anecdote about translation issues&#34;&gt;An Anecdote About Translation Issues&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a related issue, which is somewhat involved, but which I think perfectly demonstrates the unrealistic attitudes and poor understanding of translation issues and Larry&amp;rsquo;s compatibility promises.&lt;/p&gt;

&lt;p&gt;Perl 5 has an &lt;code&gt;eval&lt;/code&gt; function which takes a string argument, compiles the string as Perl code, and executes it. I pointed out that if you want a Perl 5 program to have the same behavior after it is translated, &lt;code&gt;eval&lt;/code&gt;&amp;lsquo;ed code will have to be executed with Perl 5 semantics, not Perl 6 semantics. Presumably the Perl 6 &lt;code&gt;eval&lt;/code&gt; will interpret its argument as a Perl 6 program, not a Perl 5 program.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;Memoize&lt;/code&gt; module constructs an anonymous subroutine like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $wrapper = eval &amp;quot;sub $proto { unshift \@_, qq{$cref}; 
                                     goto &amp;amp;_memoizer; }&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose hypothetically that the &lt;code&gt;unshift&lt;/code&gt; function has been eliminated from Perl 6, and that Perl 5 programs that use &lt;code&gt;unshift&lt;/code&gt; are translated so that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        unshift @array, LIST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        splice @array, 0, 0, LIST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead. Suppose that &lt;code&gt;Memoize.pm&lt;/code&gt; has been translated similarly, but the &lt;code&gt;unshift&lt;/code&gt; in the statement above cannot be translated because it is part of a string. If &lt;code&gt;Memoize.pm&lt;/code&gt; is going to continue working, the &lt;code&gt;unshift&lt;/code&gt; in the string above will need to be interpreted as a Perl 5 &lt;code&gt;unshift&lt;/code&gt; (which modifies an array) instead of as a Perl 6 &lt;code&gt;unshift&lt;/code&gt; (which generates a compile-time error.)&lt;/p&gt;

&lt;p&gt;The easy solution to this is that when the translator sees &lt;code&gt;eval&lt;/code&gt; in a Perl 5 program, it should not translate it to &lt;code&gt;eval&lt;/code&gt;, but instead to &lt;code&gt;perl5_eval&lt;/code&gt;. &lt;code&gt;perl5_eval&lt;/code&gt; would be a subroutine that would call the Perl5-to-Perl6 translator on the argument string, and then the built-in (Perl 6) &lt;code&gt;eval&lt;/code&gt; function on the result.&lt;/p&gt;

&lt;p&gt;A number of people objected to this, and see if you can guess why: Performance!&lt;/p&gt;

&lt;p&gt;I found this incredible. Apparently these people all come from the planet where it is more important for the program to finish as quickly as possible than for it to do what it was intended to do.&lt;/p&gt;

&lt;h4 id=&#34;span-id-tunnel-vision-tunnel-vision-span&#34;&gt;&lt;span id=&#34;tunnel vision&#34;&gt;Tunnel Vision&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Probably the largest and most general problem with the proposals themselves was a lack of overall focus in the ideas put forward. Here is a summary of a typical RFC:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feature XYZ of Perl has always bothered me. I do task xyzpdq all the time and XYZ is not quite right for it; I have to use two lines of code instead of only one. So I propose that XYZ change to XY&amp;rsquo;Z instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RFCs 148 and 272 are a really excellent example of this. They propose two versions of the same thing, each author having apparently solved his little piece of the problem without considering that the Right Thing is to aim for a little more generality. RFC 262 is also a good example, and there are many, many others.&lt;/p&gt;

&lt;p&gt;Now, fixing minor problems with feature XYZ, whatever it is, is not necessarily a bad idea. The problem is that so many of the solutions for these problems were so out of proportion to the size of the problem that they were trying to solve. Usually the solution was abetted by some syntactic enormity.&lt;/p&gt;

&lt;p&gt;The subsequent discussions would usually discover weird cases of tunnel vision. One might say to the author that the solution they proposed seemed too heavyweight to suit the problem, like squashing a mosquito with a sledgehammer. But often the proponent wouldn&amp;rsquo;t be able to see that, because for them, this was an unusually annoying mosquito. People would point out that with a few changes, the proposal could also be extended to cover a slightly different task, xyz&amp;rsquo;pdq, also, and the proponent would sometimes reply that they doesn&amp;rsquo;t consider that to be an important problem to solve.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s all right to be so short-sighted when you&amp;rsquo;re designing software for yourself, but when you design a language that will be used by thousands or millions of people, you have to have more economy. Every feature has a cost in implementation and maintenance and documentation and education, so the language designer has to make every feature count. If a feature isn&amp;rsquo;t widely useful to many people for many different kinds of tasks, it has negative value. In the limit, to accomplish all the things that people want from a language, unless most of your features are powerful and flexible, you have to include so very many of them that the language becomes an impossible morass. (Of course, there is another theory which states that this has already happened.)&lt;/p&gt;

&lt;p&gt;This came as no surprise to me. I maintain the &lt;code&gt;Memoize&lt;/code&gt; module, which is fairly popular. People would frequently send me mail asking me to add a certain feature, such as timed expiration of cached data. I would reply that I didn&amp;rsquo;t want to do that, because it would slow down the module for everyone, and it would not help the next time I got a similar but slightly different request, such as a request for data that expires when it has been used a fixed number of times. The response was invariably along the lines of ``But what would anyone want to do that for?&amp;rdquo; And then the following week I would get mail from someone else asking for expiration of data after it had been used a fixed number of times, and I would say that I didn&amp;rsquo;t want to put this in because it wouldn&amp;rsquo;t help people with the problem of timed expiration &lt;em&gt;and the response would be exactly the same&lt;/em&gt;. A module author must be good at foreseeing this sort of thing, and good at finding the best compromise solution for everyone&amp;rsquo;s problems, not just the butt-pimple of the week. A language designer must be even better at doing this, because many, many people will be stuck with the language for years. Many of the people producing RFCs were really, really bad at it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-miscellaneous-problems-miscellaneous-problems-span&#34;&gt;&lt;span id=&#34;miscellaneous problems&#34;&gt;Miscellaneous Problems&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-lack-of-familiarity-with-prior-art-lack-of-familiarity-with-prior-art-span&#34;&gt;&lt;span id=&#34;lack of familiarity with prior art&#34;&gt;Lack of Familiarity with Prior Art&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Many of the people proposing features had apparently never worked in any language other than Perl. Many features were proposed that had been tried in other language and found deficient in one way or another. (For example, the Ruby language has a feature similar to that proposed in RFC 162.) Of course, not everyone knows a lot of other languages, and one has to expect that. It wouldn&amp;rsquo;t have been so bad if the proponents had been more willing to revise their ideas in light of the evidence.&lt;/p&gt;

&lt;p&gt;Worse, many of the people proposing new features appeared not to be familiar with &lt;em&gt;Perl&lt;/em&gt;. RFC 105 proposed a change that had already been applied to Perl 5.6. RFC 158 proposed semantics for &lt;code&gt;$&amp;amp;&lt;/code&gt; that had already been introduced in Perl &lt;em&gt;5.000&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;span-id-too-much-syntax-too-much-syntax-span&#34;&gt;&lt;span id=&#34;too much syntax&#34;&gt;Too Much Syntax&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Too many of the proposals focused on trivial syntactic issues. This isn&amp;rsquo;t to suggest that all the syntactic RFCs were trivial. I particularly appreciated RFC 9&amp;rsquo;s heroic attempt to solve the reference syntax mess.&lt;/p&gt;

&lt;p&gt;An outstanding example of this type of RFC: The author of RFC 274 apparently didn&amp;rsquo;t like the &lt;code&gt;/${foo}bar/&lt;/code&gt; syntax for separating a variable interpolation from a literal string in a regex, because he proposed a new syntax, &lt;code&gt;/$foo(?)bar/&lt;/code&gt;. Wonderful, because then when Perl 7 comes along we can have an RFC that complains that &lt;code&gt;&amp;quot;${foo}bar&amp;quot;&lt;/code&gt; works in double-quoted strings but &lt;code&gt;&amp;quot;$foo(?)bar&amp;quot;&lt;/code&gt; does not, points out that beginners are frequently confused by this exception, and proposes to fix it by making &lt;code&gt;&amp;quot;(?)&amp;quot;&lt;/code&gt; special in double-quoted strings as well.&lt;/p&gt;

&lt;p&gt;This also stands out as a particularly bad example of the problem of the previous section, in which the author is apparently unfamiliar with Perl. Why? Because the syntaxes &lt;code&gt;/$foo(?:)bar/&lt;/code&gt; and &lt;code&gt;/$foo(?=)bar/&lt;/code&gt; both work today and do what RFC 274 wanted to do, at the cost of one extra character. (This part of the proposal was later withdrawn.)&lt;/p&gt;

&lt;h4 id=&#34;span-id-working-group-chairs-useless-working-group-chairs-useless-span&#34;&gt;&lt;span id=&#34;working group chairs useless&#34;&gt;Working Group Chairs Useless&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Maybe &amp;lsquo;regex language working group chair&amp;rsquo; is a good thing to put on your résumé, but I don&amp;rsquo;t think I&amp;rsquo;ll be doing that soon, because when you put something like that on your résumé, you always run the risk that an interviewer will ask what it actually means, and if that happened to me I would have to say that I didn&amp;rsquo;t know. I asked on the &lt;code&gt;perl6-meta&lt;/code&gt; list what the working group chair&amp;rsquo;s duties were, and it turned out that nobody else knew, either.&lt;/p&gt;

&lt;p&gt;Working group chairs are an interesting idea. Some effort was made to chose experienced people to fill the positions. This effort was wasted because there was nothing for these people to do once they were appointed. They participated in the discussions, which was valuable, but calling them &amp;lsquo;working group chairs&amp;rsquo; did not add anything.&lt;/p&gt;

&lt;h3 id=&#34;span-id-overall-problems-overall-problems-span&#34;&gt;&lt;span id=&#34;overall problems&#34;&gt;Overall Problems&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-discussion-was-of-unnecessarily-low-quality-discussion-was-of-unnecessarily-low-quality-span&#34;&gt;&lt;span id=&#34;discussion was of unnecessarily low quality&#34;&gt;Discussion was of Unnecessarily Low Quality&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;The biggest problem with the discussion process was that it was essentially pointless, except perhaps insofar as it may have amused a lot of people for a few weeks. What I mean by &amp;lsquo;pointless&amp;rsquo; is that I think the same outcome would have been achieved more quickly and less wastefully by having everyone mail their proposals directly to Larry.&lt;/p&gt;

&lt;p&gt;Much of the discussion that I saw was of poor quality because of lack of familiarity with other languages, with Perl, with basic data structures, and so forth.&lt;/p&gt;

&lt;p&gt;But I should not complain too much about this because many ill-informed people were still trying in good faith to have a reasonable discussion of the issues involved. That is all we can really ask for. Much worse offenses were committed regularly.&lt;/p&gt;

&lt;p&gt;I got really tired of seeing people&amp;rsquo;s suggestions answered with &amp;lsquo;Blecch&amp;rsquo;. Even the silliest proposal does not deserve to be answered with &amp;lsquo;Blecch&amp;rsquo;. No matter how persuasive or pleasing to the ear, it&amp;rsquo;s hard to see &amp;lsquo;Blecch&amp;rsquo; as anything except a crutch for someone who&amp;rsquo;s too lazy to think of a serious technical criticism.&lt;/p&gt;

&lt;p&gt;The RFC author&amp;rsquo;s counterpart of this tactic was to describe their own proposal as &amp;lsquo;more intuitive&amp;rsquo; and &amp;lsquo;elegant&amp;rsquo; and everything else as &amp;lsquo;counter-intuitive&amp;rsquo; and &amp;lsquo;ugly&amp;rsquo;. &amp;lsquo;Elegant&amp;rsquo; appears to be RFCese for &amp;lsquo;I don&amp;rsquo;t have any concrete reason for believing that this would be better, but I like it anyway.&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Several times I saw people respond to technical criticism of their proposals by saying something like ``It is just a proposal&amp;rdquo; or ``It is only a request for comments&amp;rdquo;. Perhaps I am reading too much into it, but that sounds to me like an RFC author who is becoming defensive, and who is not going to listen to anyone else&amp;rsquo;s advice.&lt;/p&gt;

&lt;p&gt;One pleasant surprise is that the RFCs were mostly free of references to the &amp;lsquo;beginners&amp;rsquo;; I only wish it had been as rare in the following discussion. One exasperated poster said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;``Beginners are confused by X&amp;rdquo; is a decent bolstering argument as to why X should be changed, but it&amp;rsquo;s a lousy primary argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A final bright point: I don&amp;rsquo;t think Hitler was invoked at any point in the discussion.&lt;/p&gt;

&lt;h4 id=&#34;span-id-too-much-criticism-and-discussion-was-ignored-by-rfc-authors-too-much-criticism-and-discussion-was-ignored-by-rfc-authors-span&#34;&gt;&lt;span id=&#34;too much criticism and discussion was ignored by rfc authors&#34;&gt;Too Much Criticism and Discussion was Ignored by RFC Authors&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s probably the most serious problem of the whole discussion process: Much of the criticism that wasn&amp;rsquo;t low-quality was ignored anyway; it was not even incorporated into subsequent revisions of the RFCs. And why should it have been? No RFC proponent stood to derive any benefit from incorporating criticism, or even reading it.&lt;/p&gt;

&lt;p&gt;Suppose you had a nifty idea for Perl 6, and you wrote an RFC. Then three people pointed out problems with your proposal. You might withdraw the RFC, or try to fix the problem, and a few people did actually do these things. But most people did not, or tried for a while and then stopped. Why bother? There was no point to withdrawing an RFC, because if you left it in, Larry might accept it anyway. Kill &amp;lsquo;em all and Larry sort &amp;lsquo;em out!&lt;/p&gt;

&lt;p&gt;As a thought experiment, let&amp;rsquo;s try to give the working group chairs some meaning by giving them the power to order the withdrawal of a proposal. Now the chair can tell a recalcitrant proposer that their precious RFC will be withdrawn if they don&amp;rsquo;t update it, or if they don&amp;rsquo;t answer the objections that were raised, or if they don&amp;rsquo;t do some research into feasible implementations. Very good. The proposal is forcibly withdrawn? So what? It is still on the web site. Larry will probably look at it anyway, whether or not it is labeled &amp;lsquo;withdrawn&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;So we ended up with 360 RFCs, some contradictory, some overlapping, just what you would expect to come out of a group of several hundred people who had their fingers stuck in their ears shouting LA LA LA I CAN&amp;rsquo;T HEAR YOU.&lt;/p&gt;

&lt;h3 id=&#34;span-id-bottom-line-bottom-line-span&#34;&gt;&lt;span id=&#34;bottom line&#34;&gt;Bottom Line&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I almost didn&amp;rsquo;t write this article, for several reasons: I didn&amp;rsquo;t have anything good to say about the process, and I didn&amp;rsquo;t have much constructive advice to offer either. I was afraid that it wouldn&amp;rsquo;t be useful without examples, but I didn&amp;rsquo;t want to have to select examples because I didn&amp;rsquo;t want people to feel like I was picking on them.&lt;/p&gt;

&lt;p&gt;However, my discussions with other people who had been involved in the process revealed that many other people had been troubled by the same problems that I had. They seemed to harbor the same doubts that I did about whether anything useful was being accomplished, and sometimes asked me what I thought.&lt;/p&gt;

&lt;p&gt;I always said (with considerable regret) that I did not think it was useful, but that Larry might yet prove me wrong and salvage something worthwhile from the whole mess. Larry&amp;rsquo;s past track record at figuring out what Perl should be like has been fabulous, and I trust his judgment. If anyone is well-qualified to distill something of value from the 360 RFCs and ensuing discussion, it is Larry Wall.&lt;/p&gt;

&lt;p&gt;That is the other reason to skip writing the article: My feelings about the usefulness of the process are ultimately unimportant. If Larry feels that the exercise was worthwhile and produced useful material for him to sort through, then it was a success, no matter how annoying it was to me or anyone else.&lt;/p&gt;

&lt;p&gt;Nevertheless, we might one day do it all over again for Perl 7. I would like to think that if that day comes we would be able to serve Larry a little better than we did this time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to the Perl 6 Working Groups</title>
      <link>http://localhost:1313/pub/2000/09/perl6mail.html/</link>
      <pubDate>Tue, 05 Sep 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/09/perl6mail.html/</guid>
      <description>

&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;•&lt;a href=&#34;#announcements%20and%20overviews&#34;&gt;Announcements and Overviews&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#internals&#34;&gt;Internals&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#language&#34;&gt;Language&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagedata&#34;&gt;perl6-language-data&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagedatetime&#34;&gt;perl6-language-datetime&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageerrors&#34;&gt;perl6-language-errors&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageflow&#34;&gt;perl6-language-flow&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageio&#34;&gt;perl6-language-io&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagemlc&#34;&gt;perl6-language-mlc&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageobjects&#34;&gt;perl6-language-objects&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageregex&#34;&gt;perl6-language-regex&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagestrict&#34;&gt;perl6-language-strict&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languagesubs&#34;&gt;perl6-language-subs&lt;/a&gt;&lt;br /&gt;
  •&lt;a href=&#34;#perl6languageunlink&#34;&gt;perl6-language-unlink&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Larry said at the Perl conference this summer that the old model of Perl development was not working well any more. That model had one giant mailing list, &lt;code&gt;perl5-porters&lt;/code&gt;, on which everything pertaining to Perl 5 was discussed.&lt;/p&gt;

&lt;p&gt;After the conference, a new mailing list, called &lt;code&gt;bootstrap&lt;/code&gt;, was set up to discuss how Perl 6 design and development should be organized. The &lt;code&gt;bootstrap&lt;/code&gt; discussion set up a number of &amp;ldquo;working groups,&amp;rdquo; each with its own mailing list, and each with a chairperson charged with maintaining order on their mailing list, promoting discussion, and producing weekly activity reports.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bootstrap&lt;/code&gt; list also set up a &amp;ldquo;request for comments&amp;rdquo; process. Anyone who wants to make a proposal about what Perl 6 should become is required to write up a formal proposal, called an &lt;code&gt;RFC&lt;/code&gt;, and submit it to the Perl 6 librarian. The RFC is then discussed by the appropriate working group. The idea is that this will discourage people from floating quarter-baked ideas &amp;ndash; having to write up an RFC will motivate people to think through their ideas a little better so that they are at least half-baked.&lt;/p&gt;

&lt;p&gt;One problem with the &lt;code&gt;perl5-porters&lt;/code&gt; model was that the same topics would come up over and over every few months. The hope is that a repository of old proposals will make it easier to recognize when a topic has come up before.&lt;/p&gt;

&lt;p&gt;The Perl 6 development site at &lt;a href=&#34;http://dev.perl.org/&#34;&gt;http://dev.perl.org/&lt;/a&gt; has information about the RFCs and the working groups.&lt;/p&gt;

&lt;p&gt;All the mailing lists are hosted on &lt;code&gt;perl.org&lt;/code&gt;. Most are archived at &lt;code&gt;www.mail-archive.com&lt;/code&gt;. For example, the &lt;code&gt;perl6-announce&lt;/code&gt; list is archived at &lt;a href=&#34;http://www.mail-archive.com/perl6-announce@perl.org/&#34;&gt;http://www.mail-archive.com/perl6-announce@perl.org/&lt;/a&gt; . Summaries of some mailing lists are available at &lt;a href=&#34;http://dev.perl.org/summary/&#34;&gt;http://dev.perl.org/summary/&lt;/a&gt;. A description of the main Perl 6 mailing lists and working groups follows:&lt;/p&gt;

&lt;p&gt;Until this week, &lt;code&gt;perl6-announce&lt;/code&gt; received announcements of new Perl 6 mailing lists, working group weekly summaries, and new RFCs. But nobody expected that so many RFCs would be posted so quickly. In the past few days, the RFC traffic has been moved to a secondary list, &lt;code&gt;perl6-annnounce-rfc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-meta&lt;/code&gt; replaced the old &lt;code&gt;bootstrap&lt;/code&gt; list. Discussion concerns how mailing lists are run, RFC formatting issues, and other meta-topics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-all&lt;/code&gt; is supposed to carry &lt;em&gt;every&lt;/em&gt; message from &lt;em&gt;every&lt;/em&gt; list, so don&amp;rsquo;t subscribe unless you want a &lt;em&gt;lot&lt;/em&gt; of mail.&lt;/p&gt;

&lt;p&gt;The main internals mailing list is &lt;code&gt;perl6-internals&lt;/code&gt;, which is chaired by Dan Sugalski. This is the only list seriously discussing implementation instead of interface issues, so it is probably more worthy of attention. (Discussion on the other lists often gets rather pie-in-the-sky because the participants are not constrained by the limitations of reality.)&lt;/p&gt;

&lt;p&gt;Topics interest include alternative garbage collection methods and a &lt;code&gt;vtable&lt;/code&gt; structure for Perl variables. The hope is that if you don&amp;rsquo;t like the way Perl hashes work, you will be able to plug in your own implementation, which is presently impossible. (This was also one of the major goals of Topaz.) There have also been a lot of flames about whether to take the socket functions out of the core, whether to take the trigonometry functions out of the core, etc.&lt;/p&gt;

&lt;h2 id=&#34;span-id-language-language-span&#34;&gt;&lt;span id=&#34;language&#34;&gt;Language&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This large family of mailing lists is the repository for everyone&amp;rsquo;s half-baked ideas about what Perl 6 should look like to the Perl 6 programmer. Traffic on &lt;code&gt;perl6-language&lt;/code&gt; itself is high, and would be enormous, except that much of the traffic has been spun off to a dozen or so sublists. The remaining topics are miscellaneous. Recent highlights include ``Perl should support an interactive mode&amp;rdquo; and ``&lt;code&gt;chop()&lt;/code&gt; should be dropped.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The sublists of &lt;code&gt;perl6-language&lt;/code&gt; include:&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagedata-perl6-language-data-span&#34;&gt;&lt;span id=&#34;perl6languagedata&#34;&gt;perl6-language-data&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Data and data types. Much of the discussion here has concerned matrices and the best way to express matrix operations in Perl. The PDL (Perl Data Language) group has a number of RFCs out asking for Perl to provide better support for true, C-style arrays.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagedatetime-perl6-language-datetime-span&#34;&gt;&lt;span id=&#34;perl6languagedatetime&#34;&gt;perl6-language-datetime&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Date and time representations and other issues. This list has carried very little traffic.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageerrors-perl6-language-errors-span&#34;&gt;&lt;span id=&#34;perl6languageerrors&#34;&gt;perl6-language-errors&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Error handling and exceptions. Most of the traffic on this list has concerned built-in exception objects for Perl.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageflow-perl6-language-flow-span&#34;&gt;&lt;span id=&#34;perl6languageflow&#34;&gt;perl6-language-flow&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Flow control syntax. Most of the discussion on this list has been about the language interface to threads, but there have been some other conversations. One suggestion is to add an automatic loop counter to Perl, so that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        for (@array) {

          print &amp;quot;$_ is element number $COUNTER\n&amp;quot;

        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would print each element of the array with its index. Part of the discussion from &lt;code&gt;perl6-language-errors&lt;/code&gt; about exception handling has found its way over here.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageio-perl6-language-io-span&#34;&gt;&lt;span id=&#34;perl6languageio&#34;&gt;perl6-language-io&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Input and output. Surprisingly, this list seems to be discussing mostly trivia. One proposal removes the &lt;code&gt;format&lt;/code&gt; feature from the core, placing it into a module. Another proposal wants to make &lt;code&gt;&amp;gt;blah blah blah&amp;lt;&lt;/code&gt; synonymous with &lt;code&gt;print  &amp;quot;blah blah blah&amp;quot;&lt;/code&gt;. Another wants to rename &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, and &lt;code&gt;STDERR&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagemlc-perl6-language-mlc-span&#34;&gt;&lt;span id=&#34;perl6languagemlc&#34;&gt;perl6-language-mlc&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was created with a specific mandate to discuss the issue of multi-line comments for two weeks and to report back with the results. The results: No consensus was reached. The list is now closed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageobjects-perl6-language-objects-span&#34;&gt;&lt;span id=&#34;perl6languageobjects&#34;&gt;perl6-language-objects&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Object-oriented programming features. Some of the more interesting proposals: constructor and destructor methods should be called hierarchically. (This means that if class &lt;code&gt;A&lt;/code&gt; inherits from &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;B&lt;/code&gt;&amp;rsquo;s constructor should automatically call &lt;code&gt;A&lt;/code&gt;&amp;rsquo;s before it runs itself.) Private keys and methods for objects.&lt;/p&gt;

&lt;p&gt;The point of many of the proposals seems to be to make Perl look more like C++ or like Java.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languageregex-perl6-language-regex-span&#34;&gt;&lt;span id=&#34;perl6languageregex&#34;&gt;perl6-language-regex&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Regexes and matching syntax and the &lt;code&gt;tr///&lt;/code&gt; operator. A number of threads here have focused on getting rid of the &lt;code&gt;=~&lt;/code&gt; operator and making pattern matching and replacement syntax more normal. Other proposals have tried to clean up some of Perl&amp;rsquo;s less felicitous regex features, such as &lt;code&gt;$&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagestrict-perl6-language-strict-span&#34;&gt;&lt;span id=&#34;perl6languagestrict&#34;&gt;perl6-language-strict&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was set up to discuss the relationship of Perl 6 to the &lt;code&gt;use strict&lt;/code&gt; pragma. Some of the issues it discussed were whether &lt;code&gt;strict &#39;vars&#39;&lt;/code&gt; should be the default and whether variables could be lexical by default. The list is now closed. There was supposed to be a summary, but I didn&amp;rsquo;t see it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6languagesubs-perl6-language-subs-span&#34;&gt;&lt;span id=&#34;perl6languagesubs&#34;&gt;perl6-language-subs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Issues related to subroutines and subroutine calls and return values. There has been a lot of discussion of lvalue subroutines. An lvalue subroutine is one that can be placed on the left-hand side of an &lt;code&gt;=&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        mysub(...) = ... ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is frequently useful in connection with object-oriented styles, where you might like to write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $car-&amp;gt;color = &#39;red&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-perl6languageunlink-perl6-language-unlink-span&#34;&gt;&lt;span id=&#34;perl6languageunlink&#34;&gt;perl6-language-unlink&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This list was given a fixed amount of time to determine whether the &lt;code&gt;unlink&lt;/code&gt; function should be renamed to something more intuitive. The list is closed.&lt;/p&gt;

&lt;h2 id=&#34;span-id-miscellaneous-miscellaneous-span&#34;&gt;&lt;span id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;perl6-build&lt;/code&gt; discusses the configuration and build process.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl-qa&lt;/code&gt;, led by Michael Schwern, concerns quality assurance, bug tracking, and testing. Note that unlike the others, the mailing list name has no &lt;code&gt;6&lt;/code&gt; in it. Many of Michael&amp;rsquo;s ideas about how to find and track bugs can be implemented for Perl 5 regardless of what happens to Perl 6, so if you&amp;rsquo;re looking for some real work to do right away, this would be a good list to join.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-stdlib&lt;/code&gt; is supposed to carry proposals relating to Perl&amp;rsquo;s standard modules, but it has had very little traffic.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl6-licenses&lt;/code&gt; is carrying discussion about licensing and free software issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Report on the Perl 6 Announcement</title>
      <link>http://localhost:1313/pub/2000/07/perl6.html/</link>
      <pubDate>Tue, 25 Jul 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/07/perl6.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;
&lt;a href=&#34;#the%20effort%20to%20write%20perl%206%20has%20begun%20in%20earnest&#34;&gt;&amp;ldquo;The Effort to Write Perl 6 Has Begin In Earnest&amp;rdquo;&lt;/a&gt;
-   &lt;a href=&#34;#before&#34;&gt;Before&lt;/a&gt;
-   &lt;a href=&#34;#stuck%20how&#34;&gt;Stuck How?&lt;/a&gt;
-   &lt;a href=&#34;#tuesday&#34;&gt;Tuesday&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#what%20about%20perl%206&#34;&gt;What About Perl 6?&lt;/a&gt;
-   &lt;a href=&#34;#questions&#34;&gt;Questions&lt;/a&gt;
-   &lt;a href=&#34;#will%20perl%206%20be%20in%20c++&#34;&gt;Will Perl 6 be in C++?&lt;/a&gt;
-   &lt;a href=&#34;#when%20can%20we%20expect%20the%20grand%20plan&#34;&gt;When can we expect the grand plan?&lt;/a&gt;
-   &lt;a href=&#34;#will%20perl%206%20have%20a%20spec&#34;&gt;Will Perl 6 have a spec?&lt;/a&gt;
-   &lt;a href=&#34;#will%20you%20look%20into%20technical%20infrastructure%20to%20support%20more%20constructive%20discussion%20than%20mailing%20lists%20can&#34;&gt;Will you look into technical infrastructure to support more constructive discussion than mailing lists can?&lt;/a&gt;
-   &lt;a href=&#34;#can%20you%20hint%20at%20some%20of%20the%20language%20changes&#34;&gt;Can you hint at some of the language changes?&lt;/a&gt;
-   &lt;a href=&#34;#one%20problem%20of%20language%20translation%20is%20that%20you%20lose%20comments%20and%20formatting.&#34;&gt;One problem of language translation is that you lose comments and formatting.&lt;/a&gt;
-   &lt;a href=&#34;#is%20there%20a%20possibility%20of%20getting%20a%20switch%20construction&#34;&gt;Is there a possibility of getting a &lt;code&gt;switch&lt;/code&gt; construction?&lt;/a&gt;
-   &lt;a href=&#34;#will%20there%20be%20an%20iso%20or%20ansi%20standard%20for%20perl&#34;&gt;Will there be an ISO or ANSI standard for Perl?&lt;/a&gt;
-   &lt;a href=&#34;#how%20long%20have%20you%20been%20thinking%20about%20this&#34;&gt;How long have you been thinking about this?&lt;/a&gt;
-   &lt;a href=&#34;#what%20about%20pod&#34;&gt;What about POD?&lt;/a&gt;
-   &lt;a href=&#34;#which%20languages%20will%20you%20borrow%20from%20this%20time&#34;&gt;Which languages will you borrow from this time?&lt;/a&gt;
-   &lt;a href=&#34;#some%20people%20using%20perl%20to%20develop%20large%20software%20want%20features%20like%20strong%20typechecking.%20is%20there%20a%20possibility%20of%20providing%20this&#34;&gt;Some people using Perl to develop large software want features like strong type checking. Is there a possibility of providing this?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#other%20resources&#34;&gt;Other Resources&lt;/a&gt;
&lt;a href=&#34;#editorial%20conclusion&#34;&gt;Editorial Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Last Monday, nobody knew that anything unusual was about to happen. On Tuesday, the Perl 6 project started. On Wednesday, Larry announced it at his &amp;ldquo;State of the Onion&amp;rdquo; address at the Perl conference.&lt;/p&gt;

&lt;p&gt;Yes, it all really did happen that fast.&lt;/p&gt;

&lt;p&gt;Several problems have seemed to beset Perl in the past year:&lt;/p&gt;

&lt;p&gt;Infighting on p5p, the main Perl developers&amp;rsquo; list, seemed out of control for a while, and, although the problems seem to have been solved by the addition of refereeing (See &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00574.html&#34;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00574.html&lt;/a&gt; for details), several important developers had quit the list already.&lt;/p&gt;

&lt;p&gt;But not a lot seems to have happened to Perl in the last year. The last really interesting Perl development was probably POE, which won the &amp;ldquo;Best New Module&amp;rdquo; award at &lt;em&gt;last&lt;/em&gt; year&amp;rsquo;s Perl conference. There was a Perl 5.6 release, but most of the changes were not user-visible. There was better support for threads (including support for &lt;code&gt;fork()&lt;/code&gt; on Windows systems, which is very impressive) and Unicode. But it&amp;rsquo;s hard to get excited about this, and it was really hard to put in, and incomplete.&lt;/p&gt;

&lt;p&gt;Perl development was stuck.&lt;/p&gt;

&lt;h2 id=&#34;span-id-stuck-how-stuck-how-span&#34;&gt;&lt;span id=&#34;stuck how&#34;&gt;Stuck How?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There are two big problems with Perl 5.&lt;/p&gt;

&lt;p&gt;First, the internals are extremely convoluted. It&amp;rsquo;s &lt;em&gt;hard&lt;/em&gt; to hack on Perl&amp;rsquo;s internals. There&amp;rsquo;s a lot of accumulated cruft, and Perl 5 has reached that stage of maturity in which it&amp;rsquo;s difficult to make a change or fix a bug without introducing some new bug. The excellent test suite prevents the new bugs from getting into the release, of course, but it also prevents the new feature from getting into the release.&lt;/p&gt;

&lt;p&gt;The addition of threads, the compiler, bytecode generation, and Unicode support is still incomplete, because none of those things were designed into Perl 5; they are all being bolted on afterwards, and it shows.&lt;/p&gt;

&lt;p&gt;The other big problem is thirteen years of backward compatibility history. The porters might like to rationalize the syntax a little, or clean up Perl&amp;rsquo;s semantics, but that might break old code, and Perl is committed to not breaking old code. We can&amp;rsquo;t add a new built-in function because it might break old code. It&amp;rsquo;s extremely difficult to remove even the most bizarre and little-used old features, because it might break old code. Every few months, someone suggests replacing Perl&amp;rsquo;s garbage collector with a more modern one, but there are always objections from people who have written code that assumes that the garbage collector will always be reference-count based and that it can control when objects will be destructed.&lt;/p&gt;

&lt;p&gt;Technically, there&amp;rsquo;s not very much &amp;ldquo;wiggle room&amp;rdquo; in the source code, because the internals are so convoluted and difficult. And there&amp;rsquo;s not much &amp;ldquo;wiggle room&amp;rdquo; in the language itself, because of the need to support ten-year-old Perl 2 code.&lt;/p&gt;

&lt;h2 id=&#34;span-id-tuesday-tuesday-span&#34;&gt;&lt;span id=&#34;tuesday&#34;&gt;Tuesday&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I had to miss the Tuesday meetings, because I was teaching classes. So this part of the report is hearsay.&lt;/p&gt;

&lt;p&gt;A meeting of the Perl 5 Porters was scheduled to take place in the afternoon. In the morning, Chip Salzenberg held a pre-meeting for discussion of &amp;ldquo;constitutional issues,&amp;rdquo; to change the way Perl development was run. But after a while, according to Larry, &amp;ldquo;Jon Orwant &amp;hellip; pointed out that it was going to be useless to invent a new constitution if everyone was just going to say, &amp;lsquo;Ho, hum.&amp;rsquo;&amp;rdquo; Jon suggested that Perl try to go in a new direction, and do something new and big; he used Napster as an example of a new, big idea. This was the catalyst for the discussion to go in a new direction. At the end of the the morning, the decision was made to start working on Perl 6.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-what-about-perl-6-what-about-perl-6-span&#34;&gt;&lt;span id=&#34;what about perl 6&#34;&gt;What About Perl 6?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Perl 6 will be a complete rewrite of Perl, starting from scratch. The internals will be redesigned. Threading, Unicode, and reliable signal handling will be designed in from the bottom up. The external API will be cleaned up; the core will be smaller and faster, and the XS system for extension modules will be scrapped in favor of something simpler and cleaner. One perennial problem has been that installing a new version of Perl has frequently broken binary compatibility with older versions and required that all of Perl&amp;rsquo;s unbundled extension modules be recompiled; this may be fixed in Perl 6.&lt;/p&gt;

&lt;p&gt;At the same time, the social structure behind Perl will also be redesigned. Larry said that the perl5-porters model was not working well any more, and led to too much talk and too little action. Perl is too big for one person to manage, and the pumpkings burn out quickly. The new model will probably be several separate working groups, each charged with the design and implementation of one aspect of Perl. Larry said that Perl 6 would be designed by the community, and not by one person, and that with the new organization, Perl would be able to evolve into the language that we need in 2020.&lt;/p&gt;

&lt;p&gt;Probably most amazing was that the Porters agreed to break backwards compatibility. As Larry said on Wednesday, the language itself needs revision. On Wednesday, Larry mentioned several small, specific changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;system()&lt;/code&gt; function will return true on success and false on failure.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;localtime()&lt;/code&gt; function will return the four-digit year.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The notion of &amp;ldquo;currently selected filehandle&amp;rdquo; will probably go away.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Typeglobs may be eliminated.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But these are just by way of example. Larry said &amp;ldquo;We&amp;rsquo;re really serious about reinventing everything that needs reinventing.&amp;rdquo; Everything is up for discussion, and the suggestions so far have even included giving Perl a pattern-matching system more like the one in SNOBOL.
It seems that the big technical inspiration that came out of the Tuesday afternoon meeting was that it doesn&amp;rsquo;t &lt;code&gt;have&lt;/code&gt; to be backward compatible. Perl 5, right now, can compile a Perl program into its internal syntax tree and then uncompile the tree back into source code, using the &lt;code&gt;B::Deparse&lt;/code&gt; module. But you don&amp;rsquo;t necessarily have to produce the same source code you took in; you could instead rearrange the code to produce a Perl 6 program to do the same thing. So the upward migration path from Perl 5 to Perl 6 will probably be to run your code through a translator.&lt;/p&gt;

&lt;p&gt;Larry promised not to abandon Perl 5. The 5.6 maintenance track will continue as planned, and the 5.7 development track will eventually yield Perl 5.8, as planned. 5.8 will be the final release of Perl 5, but it will continue to be maintained and stable. Larry pointed out that Perl 4 had not yet gone away, and there was no reason to expect Perl 5 to go away either. CPAN itself can serve as a test suite for Perl 6: When it can run most of the things in CPAN, either directly or post-translation, it&amp;rsquo;s ready.&lt;/p&gt;

&lt;p&gt;Larry said that easy things should stay easy, hard things should get easier, and impossible things should get hard. He promised code in one year: alpha code, but well-designed alpha code, and he called on each person to play their part.&lt;/p&gt;

&lt;h2 id=&#34;span-id-questions-questions-span&#34;&gt;&lt;span id=&#34;questions&#34;&gt;Questions&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;At the end of Larry&amp;rsquo;s announcement, Jon Orwant graciously offered to cancel his talk on &amp;ldquo;Rebuilding Postapocalyptic Civilization with Perl&amp;rdquo; so that Larry could have a question and answer session. These are the questions that people asked, with Larry&amp;rsquo;s answers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;will perl 6 be in c++&#34;&gt;Will Perl 6 be in C++?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Maybe.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;when can we expect the grand plan&#34;&gt;When can we expect the grand plan?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said that culturally, it has started already, and that we should expect a roadmap this month. His personal goal as language designer was to have something substantial to say by the time of his Linux Expo keynote speech in October. But the schedule is not yet nailed down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;will perl 6 have a spec&#34;&gt;Will Perl 6 have a spec?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said he did not know how strict it would be, and that he was not big on specs. He likes the reference implementation approach. He said he wanted to particularly stress not a spec, but the development of acceptance tests into regression and validation tests that would say &amp;ldquo;This is Perl; this isn&amp;rsquo;t.&amp;rdquo; He said that this was more important than mere verbiage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;will you look into technical infrastructure to support more constructive discussion than mailing lists can&#34;&gt;Will you look into technical infrastructure to support more constructive discussion than mailing lists can?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said that the Porters were thinking about 2-tier mailing lists that each have a person in charge, and an RFC-like mechanism. He said that we would be paying less attention to the &amp;ldquo;Wouldn&amp;rsquo;t it be nice if&amp;hellip;&amp;rdquo; type of proposals, and that proposals would need to be more formal and official.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;can you hint at some of the language changes&#34;&gt;Can you hint at some of the language changes?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said that everything was negotiable. He specifically mentioned that Perl&amp;rsquo;s old &amp;ldquo;formats&amp;rdquo; feature should probably be in a module instead of in the core, and that he wanted to clean up ambiguities in the indirect object syntax. (This question concerns whether the notation&lt;/p&gt;

&lt;p&gt;``
            my $x = new Carrot (&amp;hellip;);&lt;/p&gt;

&lt;p&gt;parses as if you had written&lt;/p&gt;

&lt;p&gt;``
            my $x = new(Carrot(&amp;hellip;));&lt;/p&gt;

&lt;p&gt;or as if you had written&lt;/p&gt;

&lt;p&gt;``
            my $x = &amp;lsquo;Carrot&amp;rsquo;-&amp;gt;new(&amp;hellip;);&lt;/p&gt;

&lt;p&gt;instead. At present, this construction is rather fragile.)
Larry said that since the Porters had decided to bite the bullet of backward incompatibility anyway and require translation of Perl 5 to Perl 6 code, they would consider any change at all, as long as it could be translated. He said that if 95% of all scripts could be translated 95% accurately, and if 80% of scripts could be translated 100% accurately, that was probably good enough.&lt;/p&gt;

&lt;p&gt;He said that the Porters wanted Perl to have all the features that other languages say &amp;ldquo;nyah nyah&amp;rdquo; about, such as byte-compilation. He suggested that Perl&amp;rsquo;s garbage collector might be replaced with a more modern mark-sweep garbage collector, and that object finalization might be separated from destruction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;one problem of language translation is that you lose comments and formatting.&#34;&gt;One problem of language translation is that you lose comments and formatting.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry replied that &lt;code&gt;a2p&lt;/code&gt;, the AWK-to-Perl translator that is bundled with Perl, which he wrote, doesn&amp;rsquo;t have this problem, and that he didn&amp;rsquo;t think that the person asking the question would need to worry about this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;is there a possibility of getting a switch construction&#34;&gt;Is there a possibility of getting a &lt;code&gt;switch&lt;/code&gt; construction?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(At this point Damian Conway shouted &amp;ldquo;I have a paper on that!&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Larry said, &amp;ldquo;Certainly.&amp;rdquo; (Meaning that there certainly was a possibility, not that there certainly would be one.) Then he said that he would not promise one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;will there be an iso or ansi standard for perl&#34;&gt;Will there be an ISO or ANSI standard for Perl?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;We will be our own standards body.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;how long have you been thinking about this&#34;&gt;How long have you been thinking about this?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Since yesterday.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;what about pod&#34;&gt;What about POD?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said it was all negotiable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;which languages will you borrow from this time&#34;&gt;Which languages will you borrow from this time?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;All of them.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(Then Larry said that they probably wouldn&amp;rsquo;t borrow COBOL&amp;rsquo;s &lt;code&gt;IDENTIFICATION DIVISION&lt;/code&gt; syntax, and that part of the reason there was so little COBOL poetry is because it&amp;rsquo;s hard to write a poem that begins &lt;code&gt;IDENTIFICATION DIVISION&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;He also mentioned the bytecode issue again, and said that it would be nice to have a cleaner object-oriented interface to I/O.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;some people using perl to develop large software want features like strong typechecking. is there a possibility of providing this&#34;&gt;Some people using Perl to develop large software want features like strong type checking. Is there a possibility of providing this?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Larry said there was, and suggested a &lt;code&gt;use strict &#39;typechecking&#39;&lt;/code&gt; directive, or maybe &lt;code&gt;use stricter&lt;/code&gt;. He also said that perl 6 should get rid of many of the stranger global variables, such as &lt;code&gt;$#&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-other-resources-other-resources-span&#34;&gt;&lt;span id=&#34;other resources&#34;&gt;Other Resources&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The official web site for Perl 6 right now is &lt;a href=&#34;http://www.perl.org/perl6/.&#34;&gt;http://www.perl.org/perl6/.&lt;/a&gt; The site has a list of short-term goals, a list of the roles that have been assigned to various people, the notes from the Tuesday afternoon meeting, and press releases concerning Perl 5 maintenance and Perl 6 development.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;span-id-editorial-conclusion-editorial-conclusion-span&#34;&gt;&lt;span id=&#34;editorial conclusion&#34;&gt;Editorial Conclusion&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Perl is interesting again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reports from YAPC 19100</title>
      <link>http://localhost:1313/pub/2000/07/yapc19101.html/</link>
      <pubDate>Tue, 11 Jul 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/07/yapc19101.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Reports from:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;•&lt;a href=&#34;#schuyler%20d.%20erle&#34;&gt;Schuyler D. Erle&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#avi&#34;&gt;Avi&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#gene%20boggs:%20day%202&#34;&gt;Gene Boggs: Day 2&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#sean%20m.%20burke&#34;&gt;Sean M. Burke&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#uri%20guttman&#34;&gt;Uri Guttman&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#brad%20murray&#34;&gt;Brad Murray&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#lisa%20nyman:%20report%20from%20a%20firsttime%20presenter&#34;&gt;Lisa Nyman: Report from a First-time Presenter&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#clinton%20pierce&#34;&gt;Clinton Pierce&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#nathan%20torkington&#34;&gt;Nathan Torkington&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#adam%20turoff&#34;&gt;Adam Turoff&lt;/a&gt;&lt;br /&gt;
•&lt;a href=&#34;#markjason%20dominus&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Last month Yet Another Perl Conference 19100 was held at Carnegie-Mellon University in Pittsburgh, Pennsylvania. I promised a conference report when I got back, but once again found that I couldn&amp;rsquo;t really write it myself, because I had been a speaker and so had missed a lot of the things that went on outside of my own events.&lt;/p&gt;

&lt;p&gt;While trying to decide whom to get to write the report instead, I realized that I was tired of conference reports written by one person. Instead, I followed the pattern of one of the conference&amp;rsquo;s big successes, the Lightning Talks, and asked about twenty people to each contribute a very short report on one or two aspects of the conference.&lt;/p&gt;

&lt;p&gt;The reports follow. For more information about YAPC, visit &lt;a href=&#34;http://www.yapc.org/.&#34;&gt;http://www.yapc.org/.&lt;/a&gt; Also note that the first YAPC::Europe conference is coming up in London in September.&lt;/p&gt;

&lt;h3 id=&#34;span-id-schuyler-d-erle-schuyler-d-erle-span&#34;&gt;&lt;span id=&#34;schuyler d. erle&#34;&gt;Schuyler D. Erle&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The first big highlight was probably Larry Wall&amp;rsquo;s opening speech on Bunyan&amp;rsquo;s &lt;em&gt;The Pilgrim&amp;rsquo;s Progress&lt;/em&gt; and the development of perl, but I found the talk&amp;rsquo;s concluding Q&amp;amp;A portion really unforgettable. Someone asked Larry what the first thing was that he would go back and change about perl, given the chance. His answer was succinct: The return value of &lt;code&gt;system()&lt;/code&gt;. `&amp;ldquo;Obviously,&amp;rdquo; he announced, &amp;ldquo;If you want to succeed, be true.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Friday&amp;rsquo;s big excitement was mjd&amp;rsquo;s Lightning Talks, a sort of Conference Proceedings for the Attention Span Impaired. A lot of people turned out to see the five-minute talks, most of which were really well delivered. Amazingly, all of the speakers kept to their allotted time, as marked by Dominus with a gong he seemed to have mysteriously acquired for that purpose. The highlights of the Talks were universally accorded to be Nat Torkington&amp;rsquo;s twin discourses on &amp;ldquo;A Day in the Life of p5p&amp;rdquo; and &amp;ldquo;What is it with those Python fucks, anyway?&amp;rdquo;, the latter of which was thoroughly tongue-in-cheek, absolutely hilarious, and it&amp;rsquo;s too damn bad for you if you missed it because Nat has, apparently in the interests of peace, refused to make the text of the speech public. &amp;ldquo;Of course our wheel is square. It&amp;rsquo;s easier to measure that way.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;But, as always, the best part about YAPC is the people. After Friday&amp;rsquo;s proceedings, I, with every intention of going down to Forbes Av. and getting too drunk to walk back to the dorms, instead happened upon what apparently started out as an idle chat with Larry and Sean Burke and mjd and a few others, and became this mad informal panel discussion in the lounge that started with the genus of shellfish the Phoenician used for dye and somehow ended up moving from there to the philology of Lisp and Cobol to the decipherment of the &lt;em&gt;Codex Seraphinianus&lt;/em&gt; and beyond, digressing continually for all kinds of other esoteric insanity. I mostly sat and listened, utterly fascinated. I never did make it out to the bars. I swear, the perl community is a bright lot, and, boy, YAPC is a great place to get a healthy dose of humility. Thank God it only happens once a year.&lt;/p&gt;

&lt;p&gt;[ Details about the Lightning Talks are available at &lt;a href=&#34;http://www.plover.com/~mjd/perl/lightning-talks.html&#34;&gt;http://www.plover.com/~mjd/perl/lightning-talks.html&lt;/a&gt; &amp;ndash;D. ]&lt;/p&gt;

&lt;h3 id=&#34;span-id-avi-avi-span&#34;&gt;&lt;span id=&#34;avi&#34;&gt;Avi&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;For me, YAPC started around 9:00 on Wednesday, June 22nd. I showed up a bit too late to catch Kevin Lenzo&amp;rsquo;s introductory talk, but just in time to catch Mark-Jason Dominus&amp;rsquo; talk on strong typing, an interesting talk about the pitfalls and triumphs of typing systems in various programming languages. Mr. Dominus is an incredible speaker, and even while he was clearly quite exhausted, the talk was very interesting.&lt;/p&gt;

&lt;p&gt;After this talk, I hopped over the Randal Schwartz&amp;rsquo;s &amp;ldquo;Learning Perl&amp;rdquo; room for about an hour. Now I can&amp;rsquo;t say how good this talk is for perl beginners, not having been one myself for quite a while, but I always like to go see Randal speak for at least a little while at these conferences. Every time I go, I learn something new about perl that I just hadn&amp;rsquo;t noticed before. For example, at YAPC I learned about the return value of &lt;code&gt;print&lt;/code&gt; and the behaviour of &lt;code&gt;reverse(@)&lt;/code&gt;. However, I can only last about an hour before the dreadful jokes and auctioneer-style patter start to really get to me.&lt;/p&gt;

&lt;p&gt;After lunch I returned to the Dominus room where the famed &amp;ldquo;Wizards&amp;rdquo; talk was getting under way. In just under an hour and a half, I learned an immense amount about globs, knobs, references and other sundries that go on under the cover of the stash. Unfortunately, shortly after the final break for the day had begun, I was again overcome by anxiety and had to leave. I spent the rest of YAPC at home and at work, but I hear it was also very cool.&lt;/p&gt;

&lt;h3 id=&#34;span-id-gene-boggs-day-2-gene-boggs-day-2-span&#34;&gt;&lt;span id=&#34;gene boggs: day 2&#34;&gt;Gene Boggs: Day 2&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Woke up and made for the shower to catch Larry Wall&amp;rsquo;s opening talk, stopping only to smile as Larry and backpack walked silently by.&lt;/p&gt;

&lt;p&gt;Got to the auditorium (after wolfing down excellent catered YAPC breakfast of fresh fruit and bagels), sat by mjd, and listened to Larry speak through the allegorical adventures of Christian in the book, &amp;ldquo;Pilgrims Progress.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;span-id-sean-m-burke-sean-m-burke-span&#34;&gt;&lt;span id=&#34;sean m. burke&#34;&gt;Sean M. Burke&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Listening to a Damian Conway talk (whether about OOP, or about quantum programming) is like going to an old-time Grateful Dead show: it goes on hours longer than expected, but by even halfway through you&amp;rsquo;re tripping too hard to care.&lt;/p&gt;

&lt;p&gt;John Orwant&amp;rsquo;s talk discussed concepts of copyright by pointing out design features of things (an ashtray, an ice bucket, a lamp!) that he snuck out of his hotel room &amp;ndash; using stolen property to explain intellectual property.&lt;/p&gt;

&lt;p&gt;As to the post-talk festivities: There&amp;rsquo;s not many conferences you can go to where people, once a bit drunk, will declare how delicious the word &amp;ldquo;ontogenesis&amp;rdquo; is, swap tips on where to get a copy of the &lt;em&gt;Codex Seraphinianus&lt;/em&gt;, and then go make fun of whatever&amp;rsquo;s on ESPN.&lt;/p&gt;

&lt;h3 id=&#34;span-id-uri-guttman-uri-guttman-span&#34;&gt;&lt;span id=&#34;uri guttman&#34;&gt;Uri Guttman&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;highlight: quiet dinner with 2 friends on saturday night after it was all over in a very nice place overlooking pittsburgh.&lt;/li&gt;
&lt;li&gt;lowlight: seeing bill in a hooters top.&lt;/li&gt;
&lt;li&gt;in between light: picture of me and hooter girl&lt;/li&gt;
&lt;li&gt;fun moment: wading in hotel lobby fountain at 3am.&lt;/li&gt;
&lt;li&gt;best talk no one understood: damian&amp;rsquo;s quantum superposition.&lt;/li&gt;
&lt;li&gt;best bof no one came to: dual giant screens of the marx brothers&amp;rsquo; horsefeathers.&lt;/li&gt;
&lt;li&gt;nicest ending: lightning talks that were cut off before you got bored or too much information.&lt;/li&gt;
&lt;li&gt;best new friend: jasmine.&lt;/li&gt;
&lt;li&gt;best previous friend: damian.&lt;/li&gt;
&lt;li&gt;most rigged raffle: perl mongers (dha won the cpu).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#perl&lt;/code&gt; moments: getting to know faces and voices to attach to all those nicks.&lt;/li&gt;
&lt;li&gt;most violent talk: damian&amp;rsquo;s advanced klingon objects&lt;/li&gt;
&lt;li&gt;cool thing: logging in to home box via ssh and reading mail in emacs.&lt;/li&gt;
&lt;li&gt;best drink: mad mex fresh raspberry margarita&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-brad-murray-brad-murray-span&#34;&gt;&lt;span id=&#34;brad murray&#34;&gt;Brad Murray&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;YAPC was an interesting mix of brilliant, delightful, vulgar, pompous, engaging, boring, and fun people. I say people, because the people eclipsed the event proper. When I think about what talks I went to see and why, I realize that I went to see a certain person speak and not to see a certain topic elaborated. So what we had was essentially a huge multi-day all-night technical bull-session with a wide variety of people, led by the cream of the crop. Well, frankly, what could be more fun for a crowd of geeks?&lt;/p&gt;

&lt;p&gt;Yes, fun. Sure, I justified all my expenses as training costs to my employer, but at the end of the day we had a lot of fun. Certainly some great things were learned, but mostly contact was made with plenty of smart people and we had a good time doing it. What I remember most vividly, for example, are events that happened far from the conference schedule:&lt;/p&gt;

&lt;p&gt;Discussing the autism and language with Larry Wall, Sean Burke, and Mark-Jason Dominus at some terrible hour in the crossroads of the dormitory.&lt;/p&gt;

&lt;p&gt;Having my room invaded by several luminaries for an impromptu discussion on Perl, the universe, and Space Ghost at 3am while trying to prepare slides for my talk the next day.&lt;/p&gt;

&lt;p&gt;Being discretely offered computing services in the wee hours by folks who should know better but feel that getting Larry on-line at 4am is more important than the rules.&lt;/p&gt;

&lt;p&gt;Being offered long distance cell phone time from a large number of caring #perl folks so that I could call home and talk to the sweetheart we had to leave behind for the week.&lt;/p&gt;

&lt;p&gt;Throwing a frisbee on the lawn with Perl people when it was so dark that the disk could not be seen until it was 2 meters from your face.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d chew off my own leg before missing the next one.&lt;/p&gt;

&lt;h3 id=&#34;span-id-lisa-nyman-report-from-a-firsttime-presenter-lisa-nyman-report-from-a-first-time-presenter-span&#34;&gt;&lt;span id=&#34;lisa nyman: report from a firsttime presenter&#34;&gt;Lisa Nyman: Report from a First-time Presenter&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;While I have presented papers at other conferences in the past, I have always been nervous about presenting at a Perl conference. I thought no one would find my work interesting or innovative. I was wrong.&lt;/p&gt;

&lt;p&gt;YAPC was the ideal venue to discuss my latest project (the Census 2000 Internet Form) and all the open source issues related to its development. Being a speaker opened up a lot of conversations with people who, in their search for advocacy support, were curious about my agency&amp;rsquo;s work with Perl and open source. Someone asked me optimistically &amp;ldquo;But is open source part of your agency&amp;rsquo;s &lt;em&gt;strategic plan?&lt;/em&gt;&amp;rdquo; Well, it isn&amp;rsquo;t, but that hasn&amp;rsquo;t stopped us from depending on it.&lt;/p&gt;

&lt;p&gt;So gather your ideas and start putting together your presentations for next year. Use your local PerlMongers meetings as a proving ground. Take advantage of the small crowds and congenial atmosphere of YAPC to get your feet wet in the waters of the Perl conference circuit.&lt;/p&gt;

&lt;h3 id=&#34;span-id-clinton-pierce-clinton-pierce-span&#34;&gt;&lt;span id=&#34;clinton pierce&#34;&gt;Clinton Pierce&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Initially, I had two goals for YAPC. The first was to get in touch with some of the Perl Culture that I&amp;rsquo;ve been missing out on. Second was to learn some things about Perl that I really didn&amp;rsquo;t know.&lt;/p&gt;

&lt;p&gt;I attended Dick Hardt&amp;rsquo;s &amp;ldquo;Programming for the People,&amp;rdquo; and the talk itself wasn&amp;rsquo;t the part I found fascinating &amp;ndash; it was the audience. The surprising thing was how heavily they (and Activestate!) rely on the Perl Culture as a backbone. They want someone like Activestate to give them polished tools. They need the gurus and &amp;ldquo;heavies&amp;rdquo; of the Perl culture, if for nothing else to tell them where to go. For them, it&amp;rsquo;s not important that Perl is a swiss army chainsaw &amp;ndash; they&amp;rsquo;re interested in the service department, sales staff, and the user groups. They can&amp;rsquo;t get this level of support from any other toolset. And I agree completely.&lt;/p&gt;

&lt;p&gt;A lot of the new Perl I learned wasn&amp;rsquo;t perl. First was MJD&amp;rsquo;s talk on why a strongly typed Perl doesn&amp;rsquo;t have to suck. A lot of the talk was about ML! It may seem out of place, but learning just enough ML to really see the benefits of strong typing kind of makes me hope that Perl 6 has some of that as an option. (I feel so dirty!) The JAPH talk that I went to wasn&amp;rsquo;t really Perl either. It was terribly perverse laughing at how Perl can be molded to even the most twisted of minds (Hi Abigail!). If you&amp;rsquo;ve never been able to decode a JAPH before, find Abigail&amp;rsquo;s slides on the Web and learn frightening things about the language you THOUGHT you knew.&lt;/p&gt;

&lt;p&gt;[Abigail&amp;rsquo;s JAPH talk slides are available at &lt;a href=&#34;http://ucan.foad.org/~abigail/Perl/Talks/Japhs/&#34;&gt;http://ucan.foad.org/~abigail/Perl/Talks/Japhs/&lt;/a&gt; &amp;ndash;D.]&lt;/p&gt;

&lt;h3 id=&#34;span-id-nathan-torkington-nathan-torkington-span&#34;&gt;&lt;span id=&#34;nathan torkington&#34;&gt;Nathan Torkington&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Getting to YAPC was miserable. United screwed me over a ticket change, so I had to pay $700 at the last minute for tickets on Vanguard. They ran late, I missed my bus on the return trip, and so on. Bah.&lt;/p&gt;

&lt;p&gt;I had a great time at the conference proper, oh yes. I got to see all my friends, catch some great talks, and have some fun giving talks.&lt;/p&gt;

&lt;p&gt;Friends. Standout evening: getting toasted at the church brewpub (&lt;a href=&#34;http://www.churchbrew.com/&#34;&gt;http://www.churchbrew.com/&lt;/a&gt;) on Saturday night. Other highlights: discussing the philosophy of OO and teaching OO with Damian Conway and Joseph Hall; sitting around the hotel bar in the evenings with Jarkko Hietaniemi, Elaine Ashton, Sean Burke, Jon Orwant, and Mik Firestone, yammering about everything until the wee hours; Mik&amp;rsquo;s killer hooch (home-aged lemon and vodka); Elaine&amp;rsquo;s whiskey; the trip to Falling Water on Saturday with Jon and Damian.&lt;/p&gt;

&lt;p&gt;Other people&amp;rsquo;s talks. Damian&amp;rsquo;s Quantum Superpositions talk was stellar, even if it did lead to tedious repetition of the phrase &amp;ldquo;in constant time&amp;rdquo; afterward. Jon&amp;rsquo;s Apocalypse talk was a fine continuation from last year&amp;rsquo;s. Adam Turoff&amp;rsquo;s Quizzo was a lot of fun (I&amp;rsquo;m not just saying that because our fabulous team placed) and I hope we see it again next year. The lightning talks were cosmic and I liked them so much I&amp;rsquo;m going to beg Mark-Jason to do them next year at TPC.&lt;/p&gt;

&lt;p&gt;My talks. My three hour tutorial on &amp;ldquo;The Seven Stages of a Perl Programmer,&amp;rdquo; based on a great post Tom Christiansen made to perl5-porters in 1997 was fun. I gave two 20-minute talks on advocacy and the uniqueness of Perl, while my head spun from cold medicine. And I gave two five-minute lightning talks, one satirizing the perl5-porters mailing list, and the other a Dennis Miller-style rant against the over-zealous Python advocacy I&amp;rsquo;ve seen lately. Notes for all my talks, except the Python rant, are at &lt;a href=&#34;http://prometheus.frii.com/~gnat/yapc/&#34;&gt;http://prometheus.frii.com/~gnat/yapc/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Summary: a blast. Can&amp;rsquo;t wait to do it again. Great job, Kevin!&lt;/p&gt;

&lt;h3 id=&#34;span-id-adam-turoff-adam-turoff-span&#34;&gt;&lt;span id=&#34;adam turoff&#34;&gt;Adam Turoff&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;While at YAPC this year, I would look around every so often and wonder if the conference program was an elaborate ruse to get nearly 400 Perl programmers together to sit and chat.&lt;/p&gt;

&lt;p&gt;One discussion I had on the way to dinner was about what&amp;rsquo;s broken with CPAN. One of the points mentioned was that Perl in general and CPAN in particular does not accept multiple competing implementations of modules. On the one hand, it sounds like a violation of TMTOWTDI, but on the other hand, CPAN symbolizes The Perl Way. Playing with this idea in detail, I began to realize that there&amp;rsquo;s a zeroth law that supercedes TMTOWTDI: Perl encourages sharing and collaboration over standardization and competition.&lt;/p&gt;

&lt;p&gt;Over another chat, I met Ranga Nathan, a Perl programmer who spends a lot of time with COBOL code. We talked about a decent number of issues, and found an example of a point Nat Torkington made during one of his talks. When Perl doesn&amp;rsquo;t go whole-hog into OOP or CORBA, it could be a sign that these bloated technologies are really unnecessary for solving real-world problems. People like Ranga who are coming out of the glass house of mainframes are coming into Perl and skipping pass objects and multithreading, and finding themselves happy and productive using Perl, ignoring all of the hype that comes with other languages.&lt;/p&gt;

&lt;h3 id=&#34;span-id-markjason-dominus-mark-jason-dominus-span&#34;&gt;&lt;span id=&#34;markjason dominus&#34;&gt;Mark-Jason Dominus&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t really remember much of what happened at YAPC. I took the redeye in from San Diego and arrived at about 6 AM the morning that the conference began. Kevin told me that Joe had been delayed, and asked if I would fill in for him, and for some reason I said &amp;ldquo;yes.&amp;rdquo; I suppose part of the reason is that I don&amp;rsquo;t get very many opportunities to give my talk on how &lt;em&gt;Strong Typing Doesn&amp;rsquo;t Have to Suck&lt;/em&gt;. I think the talk went really well, because it requires that I jump up and down and froth at the mouth and scream about how awful the type checking in Pascal is, and it turns out that it&amp;rsquo;s a lot easier to do that when I&amp;rsquo;ve just come in on the redeye from San Diego.&lt;/p&gt;

&lt;p&gt;The rest of the conference was a big blur for me. I gave twelve hours of talks in two days, and then I made a midnight excursion with Abigail to obtain the gong for the Lightning Talks. The next day I was signed up for paintball, and as we were waiting for people to finish assembling so we could leave, I suddenly realized that it just wasn&amp;rsquo;t going to happen, and I got my money back.&lt;/p&gt;

&lt;p&gt;One of the paintballers took this picture just before they left:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2000_07_yapc19101/zzz.jpg&#34; alt=&#34;Picture credit: Paul Blair&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2000/07/09</title>
      <link>http://localhost:1313/pub/2000/07/p5pdigest/THISWEEK-20000709.html/</link>
      <pubDate>Sun, 09 Jul 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/07/p5pdigest/THISWEEK-20000709.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#NEW__RDF_Available&#34;&gt;NEW! RDF Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Bug_Database&#34;&gt;Bug Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buildtoc&#34;&gt;&lt;code&gt;buildtoc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#use_namespace&#34;&gt;&lt;code&gt;use namespace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Unicode_Input_Solution&#34;&gt;Unicode Input Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tra_z_0&#34;&gt;&lt;code&gt;tr/a-z-0//&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Mutual_use&#34;&gt;Mutual &lt;code&gt;use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sprintf_tests&#34;&gt;&lt;code&gt;sprintf&lt;/code&gt; tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Complex_Expressions_in_Formats&#34;&gt;Complex Expressions in Formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Threading_Failure_Test_Case&#34;&gt;Threading Failure Test Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#What_does_changing_PL_sh_path_do&#34;&gt;What does changing &lt;code&gt;PL_sh_path&lt;/code&gt; do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#UNTIE_Method&#34;&gt;&lt;code&gt;UNTIE&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Sarathy_Fixes_a_Bug_that_Nobody_Knew_Existed&#34;&gt;Sarathy Fixes a Bug that Nobody Knew Existed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;span-id-new-rdf-available-new-rdf-available-span&#34;&gt;&lt;span id=&#34;NEW__RDF_Available&#34;&gt;NEW! RDF Available&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Starting with last week&amp;rsquo;s report, you can get an RDF for each report by replacing the &lt;code&gt;.html&lt;/code&gt; in the filename with &lt;code&gt;.rdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:p5p-digest-subscribe@plover.com&#34;&gt;&lt;code&gt;p5p-digest-subscribe@plover.com&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;mjd-perl-thisweek-YYYYMM@plover.com&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;p&gt;Next week&amp;rsquo;s report will be a little early, because I&amp;rsquo;m going to try to get it out before the big Perl conference. Then the following report will be a little late, because I will have just gotten back from the big Perl conference.&lt;/p&gt;

&lt;h3 id=&#34;span-id-bug-database-bug-database-span&#34;&gt;&lt;span id=&#34;Bug_Database&#34;&gt;Bug Database&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Alan Burlison reporterd a minor bug in &lt;code&gt;h2xs&lt;/code&gt;, and pointed out that it had been fixed betwen 5.005_03 and 5.6.0, and also that there were at least three open tickets in the bug database that appear to have been resolved by this fix. He suggested that the database support an interest list for each bug, and send mail to everyone on the interest list when there was a status change for their bug. Richard Foley said he would look into this.&lt;/p&gt;

&lt;p&gt;This led to a large discussion about the bug database and bug tracking generally. Simon said that he thought the entire bug system needed a complete overhaul. Specifically, he said he wanted to see the two (or three) bug databases replaced by a single database; ownership of tickets by people who are addressing the bugs, with automatic reversion to the `unowned&amp;rsquo; pile if the owner doesn&amp;rsquo;t take some periodic action such as responding to an automatic email; weekly automatic reports to p5p on outstanding tickets and to ticket owners.&lt;/p&gt;

&lt;p&gt;Richard Foley replied that some of this is in progress, or is easy. For example, other bug databases can send email into his perlbugtron to enter their bugs there. Also he can set up a cron job to sent p5p a weekly status report. But it&amp;rsquo;s not clear that such a report would be useful unless someone cleas up the existing database, checking over all the outstanding bugs, closing the ones that are fixed in 5.6.0, weeding out the non-bugs, merging reports that appear to be the same bug, and soforth. Nat Torkington mentioned that he had started to do this a few months ago, but stopped, because the job is so big.&lt;/p&gt;

&lt;p&gt;Nat then pointed out that this would be a good way for beginning p5p people to gain expertise. Sarathy agreed that the biggest problems appeared not to be technical, but that there is no bug champion who has taken responsibility for taking care of the database. I mentioned that I had been planning to take this up after the conference this month, and had been moving into the job stealthily by reportong on open bugs in these reports, and encouraging people to try to fix them. Several people volunteered to help categorize bugs and close tickets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00205.html&#34;&gt;Alan Burlison described his imagined bug lifecycle.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Summary of Alan&amp;rsquo;s ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The bug is reported.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The bug is routed to the &amp;lsquo;triage&amp;rsquo; person for its category.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A registered bugfixer is assigned the bug from a queue or unassigned bugs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The bugfixer fixes the bug and mails in a patch.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Simon suggested that one way to prevent the problem from getting worse is to let people close tickets by email. If a bug fixer cc&amp;rsquo;s their patch to an address like &lt;code&gt;close-##bugid##@bugs.perl.org&lt;/code&gt;, that could automatically close the ticket. Richard appeared to be willing to support this.&lt;/p&gt;

&lt;p&gt;Simon also mentioned that he is starting up a &lt;a href=&#34;http://sourcetalk.perlhacker.org/&#34;&gt;web site&lt;/a&gt; for discussion of the Perl source code and internals and nurturing of new Perl core hackers.&lt;/p&gt;

&lt;p&gt;There was some discussion of alternate bug tracking systems, including Debian&amp;rsquo;s, which is reputed to be good, but the consensus seemed to be that it was not appropriate for Perl.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00108.html&#34;&gt;Root of this thread.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-buildtoc-buildtoc-span&#34;&gt;&lt;span id=&#34;buildtoc&#34;&gt;&lt;code&gt;buildtoc&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jarkko did some work on &lt;code&gt;pod/buildtoc&lt;/code&gt;, which is the program that constructs the &lt;code&gt;perltoc&lt;/code&gt; man page. He made a long list of pods that had been added but which were not in &lt;code&gt;buildtoc&lt;/code&gt;&amp;rsquo;s list of files to include. Jesús Quiroga sent his list of pods that are in the 5.6.0 distribution&amp;mdash;there are 326 of them. There was some discussion about what to do with the many miscellaneous and platform-specific items, but no clear conclusion.&lt;/p&gt;

&lt;p&gt;Jarkko also reordered the brief table of contents that is in &lt;code&gt;perl.pod&lt;/code&gt;. I am glad; it was always embarassing to be teaching a class of Perl beginners, to proudly say &amp;ldquo;Look, if you do &lt;code&gt;man perl&lt;/code&gt; you get a list of the other manuals,&amp;rdquo; and then to see three different versions of &lt;code&gt;perldelta&lt;/code&gt; there at the top of the list. There was a little discussion about how to order the items, and about whether or not &lt;code&gt;perlbook.pod&lt;/code&gt; should remain in the distribtution.&lt;/p&gt;

&lt;h3 id=&#34;span-id-use-namespace-use-namespace-span&#34;&gt;&lt;span id=&#34;use_namespace&#34;&gt;&lt;code&gt;use namespace&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Alan Burlison wants to be able to say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use namespace Sun::Solaris;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $obj = Foo::Bar-&amp;gt;new(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;be interpreted as if he had written&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $obj = Sun::Solaris::Foo::Bar-&amp;gt;new(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead. This is very similar to a suggestion that Michael King made last year, except that Michael also had some other ideas that were unpalatable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/1999/10/p5pdigest/THISWEEK-19991017.html#bundling&#34;&gt;Previous discussion.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alan said he would be willing to try to implement this, but first he wanted to hear people&amp;rsquo;s comments about whether it was advisable.&lt;/p&gt;

&lt;p&gt;Graham suggested that the &lt;code&gt;namespace&lt;/code&gt; pragma would not modify the meaning of constructions like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $obj = Foo::Bar-&amp;gt;new(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but rather, only those that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $obj = ::Foo::Bar-&amp;gt;new(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you would still be able to use other modules, even in the scope of &lt;code&gt;use namespace&lt;/code&gt;. He also pointed out that to work properly it would have to have a lexical scope. A bunch of other possible semantics were discussed, all of which seemed to me to be obviously The Wrong Thing.&lt;/p&gt;

&lt;p&gt;There was a tangent discussion about the uses of &lt;code&gt;__PACKAGE__&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-unicode-input-solution-unicode-input-solution-span&#34;&gt;&lt;span id=&#34;Unicode_Input_Solution&#34;&gt;Unicode Input Solution&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon reported a clever suggestion from the Perl-Unicode mailing list. Some systems, such as Windows, store system data like directory entries in unicode. You&amp;rsquo;d like to flag such inputs as UTF8 when they are read in. The suggestion was to piggyback this atop the tainting mechanism. At present, there&amp;rsquo;s a macro which, if taint mode is on, turns on the taint flag on the input scalar for every input Perl reads from any source. Simon posted a patch which extends the macro so that if &lt;code&gt;use utf8&lt;/code&gt; is in scope, and the string is a valid UTF8 string, Perl will also set the &lt;code&gt;UTF8&lt;/code&gt; flag on the scalar. Since presumably everything is already checked for taintedness when it&amp;rsquo;s read in, this automatically puts the check for UTF8-ness everywhere also. &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00026.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-tra-z-0-tr-a-z-0-span&#34;&gt;&lt;span id=&#34;tra_z_0&#34;&gt;&lt;code&gt;tr/a-z-0//&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I reported that this is equivalent to &lt;code&gt;tr/a-y//&lt;/code&gt;, because the ranges are expanded inline from left to right, so the original &lt;code&gt;tr&lt;/code&gt; becomes &lt;code&gt;tr/abcdefghijklmnopqrstuvwxyz-0//&lt;/code&gt;, and then the &lt;code&gt;z-0&lt;/code&gt; is discarded (because there are no characters between &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;. Sometime later, I sent a patch, and also sent a patch that forbids &lt;code&gt;X-Y&lt;/code&gt; when &lt;code&gt;X&lt;/code&gt; occurs after &lt;code&gt;Y&lt;/code&gt;. The latter was already a fatal error in a regex character class; it turns out that the code for range parsing in &lt;code&gt;tr&lt;/code&gt; is totally separate from the analogous range parsing code for regexes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00054.html&#34;&gt;Patch #1.&lt;/a&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00095.html&#34;&gt;Patch #2.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-mutual-use-mutual-use-span&#34;&gt;&lt;span id=&#34;Mutual_use&#34;&gt;Mutual &lt;code&gt;use&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Alan Burlison wanted to know what to do when he needs to have two modules, each of which &lt;code&gt;use&lt;/code&gt;s the other. Various solutions were proposed, mostly of the form &amp;lsquo;Don&amp;rsquo;t do that&amp;rsquo;. THe currect answer in Alan&amp;rsquo;s case was to factor out the part of B that was needed by A into a separate module, C, and have A &lt;code&gt;use&lt;/code&gt; C and B &lt;code&gt;use&lt;/code&gt; A.&lt;/p&gt;

&lt;h3 id=&#34;span-id-sprintf-tests-sprintf-tests-span&#34;&gt;&lt;span id=&#34;sprintf_tests&#34;&gt;&lt;code&gt;sprintf&lt;/code&gt; tests&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Sarathy pointed out a problem with Dominic Dunlop&amp;rsquo;s excellent &lt;code&gt;sprintf&lt;/code&gt; tests: Not all systems produce output with exactly two digits of exponent information, so many tests fail on Windows systems, for example. (The C standard only requires that there be at least two digits.) Dominic said he would think about what to do about this, but has not said anything about it since then.&lt;/p&gt;

&lt;h3 id=&#34;span-id-complex-expressions-in-formats-complex-expressions-in-formats-span&#34;&gt;&lt;span id=&#34;Complex_Expressions_in_Formats&#34;&gt;Complex Expressions in Formats&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;H. Merijn Brand fixed a bug that he reported last month: Complex expressions like &lt;code&gt;$h{foo}[1]&lt;/code&gt; were misparsed when they appeared in &lt;code&gt;format&lt;/code&gt; lines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00194.html&#34;&gt;Original bug report&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00084.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much, Merijn!&lt;/p&gt;

&lt;h3 id=&#34;span-id-threading-failure-test-case-threading-failure-test-case-span&#34;&gt;&lt;span id=&#34;Threading_Failure_Test_Case&#34;&gt;Threading Failure Test Case&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Lincoln Stein sent a smallish program that hangs inside the thread library. Persons wishing to be deemed heroic should investigate this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00099.html&#34;&gt;Test case.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-what-does-changing-pl-sh-path-do-what-does-changing-pl-sh-path-do-span&#34;&gt;&lt;span id=&#34;What_does_changing_PL_sh_path_do&#34;&gt;What does changing &lt;code&gt;PL_sh_path&lt;/code&gt; do?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Bryan C. Warnock asked what would happen if he were to change &lt;code&gt;PL_shell_path&lt;/code&gt; to point to some shell that was not Bourne-compatible. Nobody answered, possibly because nobody has tried before.&lt;/p&gt;

&lt;p&gt;If Bryan reports back later I will mention it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-untie-method-untie-method-span&#34;&gt;&lt;span id=&#34;UNTIE_Method&#34;&gt;&lt;code&gt;UNTIE&lt;/code&gt; Method&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Brian S. Julin expressed a wish for an &lt;code&gt;UNTIE&lt;/code&gt; method which would be called automatically when you untie a tied variable. I said I had wanted such a thing for a long time (since at least early 1998, apparently) but I did not provide a patch.&lt;/p&gt;

&lt;h3 id=&#34;span-id-sarathy-fixes-a-bug-that-nobody-knew-existed-sarathy-fixes-a-bug-that-nobody-knew-existed-span&#34;&gt;&lt;span id=&#34;Sarathy_Fixes_a_Bug_that_Nobody_Knew_Existed&#34;&gt;Sarathy Fixes a Bug that Nobody Knew Existed&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Several, actually. Mostly memory leaks.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A large collection of bug reports, bug fixes, non-bug reports, questions, answers, and a small amount of spam. The only flames were from that idiot who can&amp;rsquo;t figure out how to unsubscribe. I&amp;rsquo;m sure you&amp;rsquo;ve met him before.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200007+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2000/07/02</title>
      <link>http://localhost:1313/pub/2000/07/p5pdigest/THISWEEK-20000702.html/</link>
      <pubDate>Sun, 02 Jul 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/07/p5pdigest/THISWEEK-20000702.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#More_Unicode_&#34;&gt;More Unicode&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Unicode_Handling_HOWTO&#34;&gt;Unicode Handling HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Unicode_Regex_Matching&#34;&gt;Unicode Regex Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#I18N_FAQ&#34;&gt;I18N FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Normalization&#34;&gt;Normalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Simon_Stops_Working_on_Unicode&#34;&gt;Simon Stops Working on Unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Speeding_up_method_lookups&#34;&gt;Speeding up method lookups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#my___PACKAGE___foo&#34;&gt;&lt;code&gt;my __PACKAGE__ $foo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cfgperl&#34;&gt;&lt;code&gt;cfgperl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Missing_Methods&#34;&gt;Missing Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Signals_on_Windows&#34;&gt;Signals on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#New_File::Spec&#34;&gt;New &lt;code&gt;File::Spec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Another_depressing_regex_engine_bug&#34;&gt;Another depressing regex engine bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#s_Appears_to_be_Slower&#34;&gt;&lt;code&gt;s///&lt;/code&gt; Appears to be Slower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perlforcepod&#34;&gt;&lt;code&gt;perlforce.pod&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_prototype_now_works&#34;&gt;&lt;code&gt;\&amp;amp;&lt;/code&gt; prototype now works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Call_for_Short_Doc_Patch&#34;&gt;Call for Short Doc Patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#More_Bug_Bounty&#34;&gt;More Bug Bounty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sprintf_tests&#34;&gt;&lt;code&gt;sprintf&lt;/code&gt; tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Regression_Tests_and_@INC_setting&#34;&gt;Regression Tests and &lt;code&gt;@INC&lt;/code&gt; setting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asdgdasfasdgasdf;jklaskldhgauklhc_dhacb;dh&#34;&gt;&lt;code&gt;asdgdasfasdgasdf;jklaskldhgauklhc dhacb;dh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:p5p-digest-subscribe@plover.com&#34;&gt;&lt;code&gt;p5p-digest-subscribe@plover.com&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;mjd-perl-thisweek-YYYYMM@plover.com&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;h3 id=&#34;span-id-more-unicode-more-unicode-span&#34;&gt;&lt;span id=&#34;More_Unicode_&#34;&gt;More Unicode&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon continues to generate Unicode patches.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00634.html&#34;&gt;Patch.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00650.html&#34;&gt;More tests.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00696.html&#34;&gt;Patch and request for help.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00747.html&#34;&gt;Patch that fixes concatenation operator.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00023.html&#34;&gt;Torture tests.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-unicode-handling-howto-unicode-handling-howto-span&#34;&gt;&lt;span id=&#34;Unicode_Handling_HOWTO&#34;&gt;Unicode Handling HOWTO&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon wrote a clear and amusing summary of what Unicode is and how to deal with it. If you&amp;rsquo;ve been puzzled by all this unicode stuff, you should certainly &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00004.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-unicode-regex-matching-unicode-regex-matching-span&#34;&gt;&lt;span id=&#34;Unicode_Regex_Matching&#34;&gt;Unicode Regex Matching&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon also asked what would happen if you did this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $b = v300
        v196.172.200 =~ /^$b/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This is an issue because the UTF8 representation of &lt;code&gt;$b&lt;/code&gt; is actually the two bytes with values 196 and 172.) But Gisle said that of course it should not match, because the target string does not in fact contain character #300.&lt;/p&gt;

&lt;p&gt;This led to a brief discussion of what the regex engine should do with UTF8 strings. The problem here goes back to the roots of the UTF8 implementation.&lt;/p&gt;

&lt;p&gt;Larry&amp;rsquo;s original idea was that if &lt;code&gt;use utf8&lt;/code&gt; was in scope, operation would assume that all data was UTF8 strings, and if not, they would assume byte strings. This puts a lot of burden on the programmer and especially on the module writer. For example, suppose you had wanted to write a function that would return true if its argument were longer than 6 characters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub is_long {
          my ($s) = @_;
          length($s) &amp;gt; 6;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No, that would not work, because if the caller had passed in a UTF8 string, then your answer ouwld be whether the string was longer than six &lt;em&gt;bytes&lt;/em&gt;, not six characters. (Remember characters in a UTF8 may be longer than one byte each.) You would have had to write something like this instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub is_long {
          my ($s) = @_;
          if (is_utf8($s)) {
            use utf8;
            length($s) &amp;gt; 6;
          } else {
            length($s) &amp;gt; 6;
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach was abandoned several versions ago, and you can see why. The current approach is that every scalar carries around a flag that says whether it is a UTF8 string or a plain byte string, and operations like &lt;code&gt;length()&lt;/code&gt; are overloaded to work on both kinds of strings; &lt;code&gt;length()&lt;/code&gt; returns the number of characters in the string whether or not the string is UTF8.&lt;/p&gt;

&lt;p&gt;Now here&amp;rsquo;s a dirty secret: Overloading the regex engine this way is difficult, and hasn&amp;rsquo;t been done yet. Regex matching ignores the UTF8 flag in its target. Instead, it uses the old method that was abandoned: if it was compiled with &lt;code&gt;use utf8&lt;/code&gt; in scope, it assumes that its argument is in UTF8 format, and if not, it assumes its argument is a byte string.&lt;/p&gt;

&lt;p&gt;The right thing to do here is to fix the regex engine so that its behavior depends on whether the UTF8 flag in the target. The hard way (but the right way) is to really fix the regex engine. The easier way is to have the regex engine compile everything as if &lt;code&gt;use utf8&lt;/code&gt; was not in scope, and then later on if it is called on to match a UTF8 string, it should recompile the regex as if &lt;code&gt;use utf8&lt;/code&gt; had been enabled, and stash that new compiled regex alongside the original one for use with UTF8 strings.&lt;/p&gt;

&lt;h4 id=&#34;span-id-i18n-faq-i18n-faq-span&#34;&gt;&lt;span id=&#34;I18N_FAQ&#34;&gt;I18N FAQ&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Jarkko posted a link to an excellent Perl I18N/L10N FAQ written by James.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rf.net/~james/perli18n.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-normalization-normalization-span&#34;&gt;&lt;span id=&#34;Normalization&#34;&gt;Normalization&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;This led Simon to ask if Perl should have support for normalization. What is normalization? Unicode has a character for the letter &amp;lsquo;e&amp;rsquo; (U+0065), and a character for an acute accent (U+00B4), which looks something like ´ and is called a &amp;lsquo;combining character&amp;rsquo; because it combines with the following character to yield an accented character; when the string containing an acute accent is displayed, the accent should be superimposed on the previous character. But Unicode also has a character for the letter e &lt;em&gt;with&lt;/em&gt; an acute accent (U+00E9), as é. This should be displayed the same way as the two character sequence U+00B4 U+0065.&lt;/p&gt;

&lt;p&gt;Perl does not presently do this, and if you have two strings, produced by &lt;code&gt;pack &amp;quot;U*&amp;quot;, 0xB4, 0x65&lt;/code&gt; and by &lt;code&gt;pack &amp;quot;U*&amp;quot;, 0xE9&lt;/code&gt; it reports them as different, which they certainly are. But clearly, for some applications, you would like them to be considered equivalent, and Perl presently has no built-in function to recognize this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.unicode.org/unicode/reports/tr15/&#34;&gt;More complete explanation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sarathy said yes, we do want this, but not until the basic stuff is working.&lt;/p&gt;

&lt;h4 id=&#34;span-id-simon-stops-working-on-unicode-simon-stops-working-on-unicode-span&#34;&gt;&lt;span id=&#34;Simon_Stops_Working_on_Unicode&#34;&gt;Simon Stops Working on Unicode&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Simon announced a temporary halt to his Unicode activities; he is going to work on the line disciplines feature next.&lt;/p&gt;

&lt;p&gt;He also said that he would be happy if someone would help him with both Unicode and line disciplines.&lt;/p&gt;

&lt;h3 id=&#34;span-id-speeding-up-method-lookups-speeding-up-method-lookups-span&#34;&gt;&lt;span id=&#34;Speeding_up_method_lookups&#34;&gt;Speeding up method lookups&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000625.html#Method_Lookup_Speedup_&#34;&gt;Previous summary.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Method_Call_Speedups&#34;&gt;More previous summary.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fergal Daly pointed out that Doug&amp;rsquo;s patch will break abstract base classes, because it extends the semnatics of &lt;code&gt;use Dog $spot&lt;/code&gt; to mean something new. Formerly, it meant that &lt;code&gt;$spot&lt;/code&gt; was guaranteed to be implemented with a pseudohash, and that the fields in &lt;code&gt;$spot&lt;/code&gt; were guaranteed to be a subset of those specified in &lt;code&gt;%Dog::FIELDS&lt;/code&gt;. Doug&amp;rsquo;s patch now adds the meaning that method calls on &lt;code&gt;$spot&lt;/code&gt; will be resolved at compile time by looking for them in class &lt;code&gt;Dog&lt;/code&gt;. This is a change, because it used to be that it was permissble to assign &lt;code&gt;$spot&lt;/code&gt; with an object from some subclass of &lt;code&gt;Dog&lt;/code&gt;, say &lt;code&gt;Schnauzer&lt;/code&gt;, as long as its fields were laid out in a way that was compatible with &lt;code&gt;%Dog::FIELDS&lt;/code&gt;. But now you cannot do that, because when you call &lt;code&gt;$spot-&amp;gt;meth&lt;/code&gt; you get &lt;code&gt;Dog::meth&lt;/code&gt; instead of &lt;code&gt;Schnauzer::meth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;

&lt;p&gt;Some discussion ensued. Sarathy suggested that the optimization only be enabled if, at the end of compilation, &lt;code&gt;Dog&lt;/code&gt; has no subclasses. Fergal said it would be a shame to limit it to such cases, and it would not be much harder to enable the optimization for any method that was not overridden in any subclass.&lt;/p&gt;

&lt;p&gt;Discussion is ongoing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-my-package-foo-my-package-foo-span&#34;&gt;&lt;span id=&#34;my___PACKAGE___foo&#34;&gt;&lt;code&gt;my __PACKAGE__ $foo&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug MacEachern contributed a patch that allows &lt;code&gt;my __PACKAGE__ $foo&lt;/code&gt;, where &lt;code&gt;__PACKAGE__&lt;/code&gt; represents the current package name. There was some discussion about whether the benefit was worth ths cost of the code bloat. Doug said that it was useful for the same reasons that &lt;code&gt;__PACKAGE__&lt;/code&gt; is useful anywhere else. (As a side note, why is it that the word &amp;lsquo;bloat&amp;rsquo; is never used except in connection with three-line patches?)&lt;/p&gt;

&lt;p&gt;Andreas Koenig said that it would be even better to allow &lt;code&gt;my CONSTANT $foo&lt;/code&gt; where &lt;code&gt;CONSTANT&lt;/code&gt; is any compile-time constant at all, such as one that was created by &lt;code&gt;use constant&lt;/code&gt;. Doug provided an amended patch to do that also.&lt;/p&gt;

&lt;p&gt;Jan Dubois pointed out that this will break existing code that has a compile-time constant that is of the same name as an existing patch. Andreas did not care.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Andreas Koenig:&lt;/strong&gt; Who uses constants that have the same name as existing and actually used classes isn&amp;rsquo;t coding cleanly and should be shot anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More persuasively, he pointed out that under such a circumstance, &lt;code&gt;my Foo $x = Foo-&amp;gt;new&lt;/code&gt; would not work either, because the &lt;code&gt;Foo&lt;/code&gt; on the right would be interpreted as a constant instead of as a class name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00668.html&#34;&gt;Andreas&amp;rsquo; explanation of why he wants this feature&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doug then submitted an updated updated patch that enables &lt;code&gt;my Foo:: $x&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00687.html&#34;&gt;Final patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-cfgperl-cfgperl-span&#34;&gt;&lt;span id=&#34;cfgperl&#34;&gt;&lt;code&gt;cfgperl&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last week I sent aggrieved email to a number of people asking what &lt;code&gt;cfgperl&lt;/code&gt; was and why there appeared to be a secret source repository on Jarkko&amp;rsquo;s web site that was more up-to-date than the documented source repository. I was concerned that there was in inner circle of development going on with a hidden development branch that was not accessible to the rest of the world.&lt;/p&gt;

&lt;p&gt;Jarkko answered me in some detail in email, and then posted to p5p to explain the real situation. &lt;code&gt;cfgperl&lt;/code&gt; is simply the name for Jarkko&amp;rsquo;s &lt;em&gt;private&lt;/em&gt; copy of the source, to which he applies patches that he deems worthy. It got ahead of the main repository because Sarathy was resting last month.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00742.html&#34;&gt;Jarkko&amp;rsquo;s full details.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-missing-methods-missing-methods-span&#34;&gt;&lt;span id=&#34;Missing_Methods&#34;&gt;Missing Methods&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Richard Soderberg responded to my call for a patch for this (see &lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000625.html#Missing_Methods&#34;&gt;last week&amp;rsquo;s discussion&lt;/a&gt;) and produced one. Thank you very much, Richard!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00009.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-signals-on-windows-signals-on-windows-span&#34;&gt;&lt;span id=&#34;Signals_on_Windows&#34;&gt;Signals on Windows&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Sarathy said that signals really couldn&amp;rsquo;t be emulated properly under Windows, but that people keep complaining about it anyway. So he put in a patch that tries to register the signal handler anyway, I guess in hopes of stopping them from complaining.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00740.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-new-file-spec-new-file-spec-span&#34;&gt;&lt;span id=&#34;New_File::Spec&#34;&gt;New &lt;code&gt;File::Spec&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Barrie Slaymaker submitted a set of changes to the &lt;code&gt;File::Spec&lt;/code&gt; suite.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00700.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00007.html&#34;&gt;More patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-another-depressing-regex-engine-bug-another-depressing-regex-engine-bug-span&#34;&gt;&lt;span id=&#34;Another_depressing_regex_engine_bug&#34;&gt;Another depressing regex engine bug&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This can result in backreference variables being set incorrectly when they should be undef. Apparently state is not always restored properly on backtracking.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00012.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-s-appears-to-be-slower-s-appears-to-be-slower-span&#34;&gt;&lt;span id=&#34;s_Appears_to_be_Slower&#34;&gt;&lt;code&gt;s///&lt;/code&gt; Appears to be Slower&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl Lindquist reported an example of &lt;code&gt;s///&lt;/code&gt; that runs much slower in 5.6.0 than in 5.004_03. The regex is bad, so that you would expect a quadratic search, but Mike Guy reported that in fact Perl was doing a cubic search.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00702.html&#34;&gt;Mike&amp;rsquo;s analysis and shorter test case&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-perlforcepod-perlforce-pod-span&#34;&gt;&lt;span id=&#34;perlforcepod&#34;&gt;&lt;code&gt;perlforce.pod&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon claims that this document is three years old and that he was only sending a minor update, but I don&amp;rsquo;t find it in my copy of the development sources.&lt;/p&gt;

&lt;p&gt;It is a document about how to use the Perforce repository in which the master copies of the Perl sources reside.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00022.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-prototype-now-works-prototype-now-works-span&#34;&gt;&lt;span id=&#34;\_prototype_now_works&#34;&gt;&lt;code&gt;\&amp;amp;&lt;/code&gt; prototype now works&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Larry sent a patch that permits a function to have &lt;code&gt;\&amp;amp;&lt;/code&gt; in its prototype. It appears to be synonymous with &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-call-for-short-doc-patch-call-for-short-doc-patch-span&#34;&gt;&lt;span id=&#34;Call_for_Short_Doc_Patch&#34;&gt;Call for Short Doc Patch&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The sequence &lt;code&gt;\_&lt;/code&gt; in a regex now elicits a warning where it didn&amp;rsquo;t before. Dominic Dunlop tracked down the patch that introduced this and pointed out that it needs to be documented (in &lt;code&gt;perldelta&lt;/code&gt; and possibly &lt;code&gt;perldiag&lt;/code&gt;) and probably also needs a test case. But nobody stepped up. Here&amp;rsquo;s an easy opportunity for someone to contribute a doc patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00667.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-more-bug-bounty-more-bug-bounty-span&#34;&gt;&lt;span id=&#34;More_Bug_Bounty&#34;&gt;More Bug Bounty&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dominic Dunlop reported an interesting bug in the new &lt;code&gt;printf &amp;quot;%v&amp;quot;&lt;/code&gt; specifier. The bug is probably not too difficult to investigate and fix, because it is probably localized to a small part of Perl that does not deal woo much with Perl&amp;rsquo;s special data structures. So it is a good thing for a beginner to work on. Drop me a note if you are interested and if you need help figuring out where to start.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00721.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-sprintf-tests-sprintf-tests-span&#34;&gt;&lt;span id=&#34;sprintf_tests&#34;&gt;&lt;code&gt;sprintf&lt;/code&gt; tests&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dominic also sent a patch that added 188 new tests to &lt;code&gt;t/op/sprintf.t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00720.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-regression-tests-and-inc-setting-regression-tests-and-inc-setting-span&#34;&gt;&lt;span id=&#34;Regression_Tests_and_@INC_setting&#34;&gt;Regression Tests and &lt;code&gt;@INC&lt;/code&gt; setting&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Some time ago, Nicholas Clark pointed out that many regression tests will fail if you opt not to build all of Perl&amp;rsquo;s standard extension modules, such as &lt;code&gt;Fcntl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Extensions_required_for_regression_tests&#34;&gt;Previous discussion.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sidetrack developed out of Nicholas&amp;rsquo; patch to fix this, discussing the best way to make sure that tests get the test version of the library, and not the previously installed version of the library. Nicholas was using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        unshift &#39;../lib&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a common idiom in the test files. What&amp;rsquo;s wrong with it? It leaves the standard directories in &lt;code&gt;@INC&lt;/code&gt;, which may not be appropriate, and it assumes that the library is in a sibling directory, so you cannot run the test without being in the &lt;code&gt;t/&lt;/code&gt; directory itself.&lt;/p&gt;

&lt;p&gt;There was a little discussion of the right thing to do here. Mike Guy suggested that one solution would be to have the test harness set up the environment properly in the first place. The problem with that is that then you can&amp;rsquo;t run the tests without the harness. (For example, you might want to run a single test file; at present you can just say &lt;code&gt;perl t/op/dog.t&lt;/code&gt; or whatever.)&lt;/p&gt;

&lt;p&gt;Sarathy pointed out that having each test file begin with something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        BEGIN { @INC = split(&#39;|&#39;,$ENV{PERL_TEST_LIB_PATH}
                                          || &#39;../lib&#39;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;might solve the problem. Then the harness can set &lt;code&gt;PERL_TEST_LIB_PATH&lt;/code&gt; but you can still run a single test manually if you are in the right place.&lt;/p&gt;

&lt;h3 id=&#34;span-id-asdgdasfasdgasdf-jklaskldhgauklhc-dhacb-dh-asdgdasfasdgasdf-jklaskldhgauklhc-dhacb-dh-span&#34;&gt;&lt;span id=&#34;asdgdasfasdgasdf;jklaskldhgauklhc_dhacb;dh&#34;&gt;&lt;code&gt;asdgdasfasdgasdf;jklaskldhgauklhc dhacb;dh&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Another garbage bug report from the Czech republic. It was funny the first time; this time it is substantially less amusing.&lt;/p&gt;

&lt;p&gt;Hey, Czech dude! Stop using &lt;code&gt;perlbug&lt;/code&gt; to test your keyboard cables, or I will come to your house and chop off all eight of your fingers.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A large collection of bug reports, bug fixes, non-bug reports (you can use a number as a reference!) questions, answers, and a small amount of spam. No flames.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200007+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2000/06/25</title>
      <link>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000625.html/</link>
      <pubDate>Sun, 25 Jun 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000625.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Method_Lookup_Speedup_&#34;&gt;Method Lookup Speedup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trCU_and_trUC_Removed&#34;&gt;&lt;code&gt;tr///CU&lt;/code&gt; and &lt;code&gt;tr///UC&lt;/code&gt; Removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#is_utf8_string&#34;&gt;&lt;code&gt;is_utf8_string&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Byte_Order_Marks_Return&#34;&gt;Byte-Order Marks Return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#packU&#34;&gt;&lt;code&gt;pack(&amp;quot;U&amp;quot;)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Lexical_variables_and_eval&#34;&gt;Lexical variables and &lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#FILEGV&#34;&gt;&lt;code&gt;FILEGV&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perlhacktut&#34;&gt;&lt;code&gt;perlhacktut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perlutilpod&#34;&gt;&lt;code&gt;perlutil.pod&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Missing_Methods&#34;&gt;Missing Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Suppress_prototype_mismatch_warnings&#34;&gt;Suppress prototype mismatch warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Autoloaded_Constants_not_Inlined&#34;&gt;Autoloaded Constants not Inlined&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#libpm&#34;&gt;&lt;code&gt;lib.pm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#use_English&#34;&gt;&lt;code&gt;use English&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Numeric_opens_in_IPC::Open3&#34;&gt;Numeric opens in &lt;code&gt;IPC::Open3&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Regex_Bug&#34;&gt;Regex Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Foo_isa_Foo&#34;&gt;&lt;code&gt;Foo isa Foo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#READMEhpux&#34;&gt;&lt;code&gt;README.hpux&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#my___PACKAGE___obj_&#34;&gt;&lt;code&gt;my __PACKAGE__ $obj&lt;/code&gt; &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asdgasdfasd&#34;&gt;asdgasdfasd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:p5p-digest-subscribe@plover.com&#34;&gt;&lt;code&gt;p5p-digest-subscribe@plover.com&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;mjd-perl-thisweek-YYYYMM@plover.com&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;p&gt;This week&amp;rsquo;s report is a little late because I went to San Diego Usenix, and then I went to YAPC in Pittsburgh (probably the only person on the continent stupid enough to try to do both) and then I went back to Philadelphia and was driven to Washington DC for a party and came back on the train.&lt;/p&gt;

&lt;p&gt;I was going to say it was a quiet week on the list. But it wasn&amp;rsquo;t. It was merely a low-traffic week. It wasn&amp;rsquo;t quiet at all; all sort of useful and interesting stuff was posted, and there was an unusually high signal-to-noise ratio.&lt;/p&gt;

&lt;p&gt;This week has been named &amp;lsquo;Doug MacEachern and Simon Cozens&amp;rsquo; week. Thank you Doug and Simon, and also everyone else who contributed to the unusually high signal-to-noise ratio this week.&lt;/p&gt;

&lt;h3 id=&#34;span-id-method-lookup-speedup-method-lookup-speedup-span&#34;&gt;&lt;span id=&#34;Method_Lookup_Speedup_&#34;&gt;Method Lookup Speedup&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;More discussion of Doug&amp;rsquo;s patch of last week.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Method_Call_Speedups&#34;&gt;Previous summary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week, some people pointed out that it would fail in the presence of code that modifies &lt;code&gt;@ISA&lt;/code&gt; at runtime; Sarathy suggested a pragma that would promise that this would not happen. Nick suggested that &lt;code&gt;use base&lt;/code&gt; could do that.&lt;/p&gt;

&lt;p&gt;Doug submitted an updated patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00491.html&#34;&gt;Updated patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For your delectation, Simon Cozens wrote up an extensive explanation of the patch and how it works, including many details about the Perl internals. If you are interested in the Perl internals (and you should be) then this is strongly recommended reading.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/dougpatch.html&#34;&gt;The explanation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would like very much to run other articles of the same type in the future. This should be construed as a request for people to contribute them. They don&amp;rsquo;t have to be as complete or detailed as Simon&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Thank you very much, Simon.&lt;/p&gt;

&lt;h3 id=&#34;span-id-trcu-and-truc-removed-tr-cu-and-tr-uc-removed-span&#34;&gt;&lt;span id=&#34;trCU_and_trUC_Removed&#34;&gt;&lt;code&gt;tr///CU&lt;/code&gt; and &lt;code&gt;tr///UC&lt;/code&gt; Removed&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon, who has been working on the line discipline feature, got rid of the nasty &lt;code&gt;tr///CU&lt;/code&gt; feature, which Larry had already decided was a bad idea and should be eliminated.&lt;/p&gt;

&lt;h3 id=&#34;span-id-is-utf8-string-is-utf8-string-span&#34;&gt;&lt;span id=&#34;is_utf8_string&#34;&gt;&lt;code&gt;is_utf8_string&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon also added a function named &lt;code&gt;is_utf8_string&lt;/code&gt; that checks a string to make sure it is valid UTF8. The plan is that if Perl is reading a putatively UTF8 file, it can check the input before setting the UTF8 flag on the resulting scalar.&lt;/p&gt;

&lt;h3 id=&#34;span-id-byte-order-marks-return-byte-order-marks-return-span&#34;&gt;&lt;span id=&#34;Byte_Order_Marks_Return&#34;&gt;Byte-Order Marks Return&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon submitted an improved patch for this. This one just has the lexer use &lt;code&gt;tell()&lt;/code&gt; to see if the putative byte-order mark is at the very beginning of the file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00466.html&#34;&gt;The new patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Byte_Order_Marks_Continue&#34;&gt;Previous summary&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-packu-pack-u-span&#34;&gt;&lt;span id=&#34;packU&#34;&gt;&lt;code&gt;pack(&amp;quot;U&amp;quot;)&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A few weeks ago there was discussion of what this should do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/05/p5pdigest/THISWEEK-20000528.html#packU&#34;&gt;Previous summary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simon submitted a patch that implemented an idea of Larry&amp;rsquo;s: That a &lt;code&gt;U&lt;/code&gt; at the beginning of the pack template indicates that the result of &lt;code&gt;pack&lt;/code&gt; will be a UTF8 string; anything else indicates a byte string. THis means (for example) that you can put &lt;code&gt;U0&lt;/code&gt; at the beginning of any pattern to force it to produce UTF8; if you want to start with &lt;code&gt;U&lt;/code&gt; but have the result be bytes, add a do-nothing &lt;code&gt;C0&lt;/code&gt; at the beginning instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00467.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-lexical-variables-and-eval-lexical-variables-and-eval-span&#34;&gt;&lt;span id=&#34;Lexical_variables_and_eval&#34;&gt;Lexical variables and &lt;code&gt;eval()&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Yitzchak Scott-Thoennes reported on a number of puzzles related to the interaction of these features, including:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        { my $x; sub incx { eval &#39;++$x&#39; } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;incx&lt;/code&gt; apparently increments the lexical variable; he expected it to increment the global variable. (Rationale: The lexical variable should be optimized away.)&lt;/p&gt;

&lt;p&gt;Rick Delaney referred to &lt;a href=&#34;http://www.deja.com/%5BST_rn=ps%5D/getdoc.xp?AN=545654855&amp;amp;fmt=text&#34;&gt;a relevant article by Ilya in clp.misc.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yitzchak says that code in a subroutine should not be able to alter lexical variables in a more outer scope, unless it is a closure, which &lt;code&gt;incx&lt;/code&gt; here is not. Rick presents the following counterexample:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $Pseudo_global = 2;

        sub double {
          my ($x) = @_;
          eval &#39;$x * $Pseudo_global&#39;;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Discussion seemed inconclusive. No patches were offered.&lt;/p&gt;

&lt;p&gt;I said that I had done some research a while back about what Scheme and Common Lisp do in this sort of case, and that I would report back with a summary, but I have not done so.&lt;/p&gt;

&lt;h3 id=&#34;span-id-filegv-filegv-span&#34;&gt;&lt;span id=&#34;FILEGV&#34;&gt;&lt;code&gt;FILEGV&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There was some discussion about the &lt;code&gt;FILEGV&lt;/code&gt; macro. When Perl compiles the op tree, the line and file information is stored in a GV. Or rather, it used to be so; now, if you compile with ithreads, it just uses strings. There were some macros, &lt;code&gt;*FILEGV&lt;/code&gt;, to access this GV, but according to Sarathy, they was mostly used to get at the filename, and there is a more straightforward macro family, &lt;code&gt;*FILE&lt;/code&gt;, which gets the filename directly. Doug MacEachern wanted to use the original macro in &lt;code&gt;B::Graph&lt;/code&gt;, although I was not sure why; Sarathy said that probably &lt;code&gt;B::Graph&lt;/code&gt; needed to be fixed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perlhacktut-perlhacktut-span&#34;&gt;&lt;span id=&#34;perlhacktut&#34;&gt;&lt;code&gt;perlhacktut&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon contributed the first half of a document titled &lt;code&gt;perlhacktut&lt;/code&gt;, a tutorial on hacking the Perl core. It talks about how to get started and what to read, provides an overview of Perl&amp;rsquo;s large subsystems, and the begining of a discussions of Perl&amp;rsquo;s basic data types and op trees.&lt;/p&gt;

&lt;p&gt;If you are interested in the Perl internals (and you should be) then this is strongly recommended reading. (Gosh, that sounds familiar.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00577.html&#34;&gt;First draft.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-perlutilpod-perlutil-pod-span&#34;&gt;&lt;span id=&#34;perlutilpod&#34;&gt;&lt;code&gt;perlutil.pod&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon also contributed a document describing the utility programs that cmoe packaged with Perl, such as &lt;code&gt;perldoc&lt;/code&gt;, &lt;code&gt;pod2html&lt;/code&gt;, &lt;code&gt;roffitall&lt;/code&gt;, and &lt;code&gt;a2p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quite a busy week for Simon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00505.html&#34;&gt;&lt;code&gt;perlutil&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-missing-methods-missing-methods-span&#34;&gt;&lt;span id=&#34;Missing_Methods&#34;&gt;Missing Methods&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Martyn Pierce pointed out that if you have code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Foo-&amp;gt;new(&#39;...&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it might fail for two reasons: because the &lt;code&gt;Foo&lt;/code&gt; class does not define that method, or because you forgot to put &lt;code&gt;use Foo&lt;/code&gt; in your program. In both cases the message is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Can&#39;t locate object method &amp;quot;new&amp;quot; via package &amp;quot;Foo&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Martyn suggested that in the second case, it could add a remark like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        (perhaps you forgot to load module &amp;quot;Foo&amp;quot;?)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, he did not provide a patch.&lt;/p&gt;

&lt;p&gt;I also wonder why it says &amp;lsquo;object method&amp;rsquo; when it is clearly a class method. I did not provide a patch either. This would be an excellent first patch for someone who wanted to get started patching. Write to me if you are interested in looking into it but do not know where to begin.&lt;/p&gt;

&lt;h3 id=&#34;span-id-suppress-prototype-mismatch-warnings-suppress-prototype-mismatch-warnings-span&#34;&gt;&lt;span id=&#34;Suppress_prototype_mismatch_warnings&#34;&gt;Suppress prototype mismatch warnings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug MacEachern discovered lots and lots of subroutine declarations in &lt;code&gt;Socket.pm&lt;/code&gt; that were there only to predeclare a bunch of autoloaded constants like &lt;code&gt;AF_INET&lt;/code&gt;. The only purpose for the declarations was to prevent &amp;lsquo;prototype mismatch&amp;rsquo; warnings from occurring when the constants were actually autoloaded at run time. He then put in a patch to suppress the warning, if it appears that the subroutine will be autoloaded later, and removed the 20K of constant sub declarations in &lt;code&gt;Socket.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-autoloaded-constants-not-inlined-autoloaded-constants-not-inlined-span&#34;&gt;&lt;span id=&#34;Autoloaded_Constants_not_Inlined&#34;&gt;Autoloaded Constants not Inlined&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug also discovered that these autoloaded constants&amp;rsquo; values are not inlined, because the code that uses them is compiled before the subroutine is loaded. Doug produced a patch to &lt;code&gt;Exporter.pm&lt;/code&gt; that lets you specify a name with a leading &lt;code&gt;+&lt;/code&gt; sign in the &lt;code&gt;use&lt;/code&gt; line to indicate that the subroutine should be invoked once (and hence autoloaded) immediately, when the module is loaded, so that they can be inlined into the following code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00573.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-libpm-lib-pm-span&#34;&gt;&lt;span id=&#34;libpm&#34;&gt;&lt;code&gt;lib.pm&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug MacEachern decided that it was a shame that &lt;code&gt;lib.pm&lt;/code&gt; has to pull in all of &lt;code&gt;Config.pm&lt;/code&gt;, so he recast &lt;code&gt;lib.pm&lt;/code&gt; as a script, &lt;code&gt;lib.pm.PL&lt;/code&gt;, which generates the real &lt;code&gt;lib.pm&lt;/code&gt; at install time, inserting the appropriate values of &lt;code&gt;$CONFIG&lt;/code&gt; variables inline.&lt;/p&gt;

&lt;p&gt;(Many other utilities, such as &lt;code&gt;perlcc&lt;/code&gt; and &lt;code&gt;pod2html&lt;/code&gt;, are generated this way at present. Do &lt;code&gt;ls */*.PL&lt;/code&gt; in the source directory to see a list.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-use-english-use-english-span&#34;&gt;&lt;span id=&#34;use_English&#34;&gt;&lt;code&gt;use English&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Barrie Slaymaker contributed a patch so that you can now say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use English &#39;-no_match_english&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it will import all the usual long names for the punctuation variables, &lt;em&gt;except&lt;/em&gt; for &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt;, and &lt;code&gt;$&#39;&lt;/code&gt;, which slow down your regexes. If you don&amp;rsquo;t supply this flag, then those variables are separately aliased via an &lt;code&gt;eval&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;This has been a long time coming&amp;mdash;I thought it had been done already.&lt;/p&gt;

&lt;p&gt;There was a long sidetrack from having to do with some unimportant style issue, which should have been carried out in private email, or not at all.&lt;/p&gt;

&lt;h3 id=&#34;span-id-numeric-opens-in-ipc-open3-numeric-opens-in-ipc-open3-span&#34;&gt;&lt;span id=&#34;Numeric_opens_in_IPC::Open3&#34;&gt;Numeric opens in &lt;code&gt;IPC::Open3&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Frank Tobin submitted a patch that allows the user of &lt;code&gt;IPC::Open3&lt;/code&gt; to request that any of the &amp;lsquo;files&amp;rsquo; to be opened be an already open file descriptor, analogous to the way &lt;code&gt;open FH, &amp;quot;&amp;lt;&amp;amp;=3&amp;quot;&lt;/code&gt; works with regular &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-regex-bug-regex-bug-span&#34;&gt;&lt;span id=&#34;Regex_Bug&#34;&gt;Regex Bug&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Ian Flanigan found a very upsetting bug in the regex engine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00627.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-foo-isa-foo-foo-isa-foo-span&#34;&gt;&lt;span id=&#34;Foo_isa_Foo&#34;&gt;&lt;code&gt;Foo isa Foo&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Johan Vromans complained that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $r = &amp;quot;Foo&amp;quot;;
        UNIVERSAL::isa($r, &amp;quot;Foo::&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;returns true. Johan does not like that &lt;code&gt;$r&lt;/code&gt; (which is a string) is reported to be a member of class &lt;code&gt;Foo&lt;/code&gt;. It was pointed out that the manual explicitly says that &lt;code&gt;UNIVERSAL::isa]&lt;/code&gt; may be called as a class method, to determine whether one class was a subclass of another, in which case it could be invoked as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        Foo-&amp;gt;isa(&#39;Foo&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is essentially the same as Johan&amp;rsquo;s example, and which returns true because the class &lt;code&gt;Foo&lt;/code&gt; is (trivially) a subclass of itself.&lt;/p&gt;

&lt;p&gt;Johan said &amp;lsquo;Yuck.&amp;rsquo;&lt;/p&gt;

&lt;h3 id=&#34;span-id-readmehpux-readme-hpux-span&#34;&gt;&lt;span id=&#34;READMEhpux&#34;&gt;&lt;code&gt;README.hpux&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Okamoto updated it again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00531.html&#34;&gt;Here it is.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-my-package-obj-my-package-obj-span&#34;&gt;&lt;span id=&#34;my___PACKAGE___obj_&#34;&gt;&lt;code&gt;my __PACKAGE__ $obj&lt;/code&gt; &amp;hellip;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug MacEachern submitted a patch to enable this. The patch came in just barely before the end-of-the week cutoff, and has already been a lot of discussion of it in the past two days, so I am going to defer talking about it any more until my next report.&lt;/p&gt;

&lt;p&gt;Should you want to look at it before then, &lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00628.html&#34;&gt;here it is.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-asdgasdfasd-asdgasdfasd-span&#34;&gt;&lt;span id=&#34;asdgasdfasd&#34;&gt;asdgasdfasd&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Some anonymous person running as root submitted a bug report (with &lt;code&gt;perlbug&lt;/code&gt;) that only said &amp;lsquo;asdgasdfasd&amp;rsquo;. Martyn Pearce replied that it was not a bug, but a feature.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A large collection of bug reports, bug fixes, non-bug reports, questions, answers, and a very small amount and spam. No serious flamage however.&lt;/p&gt;

&lt;p&gt;This is the end of the month, so I will summarize: I filed 97 messages in the &lt;code&gt;junk&lt;/code&gt; folder, 311 in the &lt;code&gt;misc&lt;/code&gt; folder, and 329 messages in 45 various other folders pertaining to particular topics.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200006+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Return of Program Repair Shop and Red Flags</title>
      <link>http://localhost:1313/pub/2000/06/commify.html/</link>
      <pubDate>Sat, 17 Jun 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/06/commify.html/</guid>
      <description>

&lt;p&gt;&lt;span id=&#34;__index__&#34;&gt;&lt;/span&gt;
&lt;a href=&#34;#unprogramming&#34;&gt;Unprogramming&lt;/a&gt;
-   &lt;a href=&#34;#computing%20the%20remainder&#34;&gt;Computing the remainder&lt;/a&gt;
-   &lt;a href=&#34;#splitting%20the%20input%20into%20chunks&#34;&gt;Splitting the Input Into Chunks&lt;/a&gt;
-   &lt;a href=&#34;#assembling%20the%20result&#34;&gt;Assembling the Result&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#red%20flags&#34;&gt;Red Flags&lt;/a&gt;
-   &lt;a href=&#34;#eliminate%20synthetic%20code&#34;&gt;Eliminate synthetic code&lt;/a&gt;
-   &lt;a href=&#34;#beware%20of%20special%20cases%20in%20loops&#34;&gt;Beware of special cases in loops&lt;/a&gt;
-   &lt;a href=&#34;#don&#39;t%20apply%20string%20operations%20to%20numbers&#34;&gt;Don&amp;rsquo;t apply string operations to numbers&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-unprogramming-unprogramming-span&#34;&gt;&lt;span id=&#34;unprogramming&#34;&gt;Unprogramming&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;A few weeks ago I got mail from Bruce, a former student who wanted to take a number like &lt;code&gt;12345678&lt;/code&gt; that had come out of a database, and to format it with commas for printing in a report, as &lt;code&gt;12,345,678&lt;/code&gt;. I referred him to the solution in the &lt;code&gt;perlfaq5&lt;/code&gt; man page, but the solution there uses a rather bizarre repeated regex, and perhaps that&amp;rsquo;s why he decided to do it himself. Here&amp;rsquo;s the code he showed me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1  sub conversion
     2  {
     3     $number = shift;
     4     $size = length($number);
     5     $result = ($size / 3);
     6     @commas = split (/\./, $result);
     7     $remain = ($size - ($commas[0] * 3));
     8     $pos = 0;
     9     $next = 0;
    10     $loop = ($size - $remain);
    11     while ($next &amp;lt; $loop)
    12     {
    13        if ($remain &amp;gt; 0)
    14        {
    15           $section[$pos] = substr($number, 0, $remain);
    16           $next = $remain++;
    17           $remain = 0;
    18           $pos++;
    19        }
    20        $section[$pos] = substr($number, $next, 3);
    21        $next = ($next + 3);
    22        $pos++;
    23     } 
    24     $loop = 0;
    25     @con = ();
    26     foreach (@section) 
    27     {
    28        $loop++;
    29        $cell++;
    30        @tens = split (/:/, $_);
    31        $con[$cell] = $tens[0];
    32        if ($loop == $pos)
    33        {
    34           last;
    35        }
    36        $cell++;
    37        $con[$cell] = &amp;quot;,&amp;quot;;
    38     }
    39     return @con;
    40  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bruce described this as &amp;ldquo;Probably pretty crude and bulky.&amp;rdquo; I&amp;rsquo;d have to agree. 40 lines is pushing the limit for a readable function, and there&amp;rsquo;s no reason why something this simple should have to be so large. Bruce has done a lot of programming work here and produced a lot of code; let&amp;rsquo;s see if we can unprogram some of this and end up with less code than we started with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    5      $result = ($size / 3);
    6      @commas = split (/\./, $result);
    7      $remain = ($size - ($commas[0] * 3));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right up front is probably the single weirdest piece of code in the whole program. I know it&amp;rsquo;s weird because the first time I saw it I realized what it did right away, but when I revisited the program a couple of weeks later, I couldn&amp;rsquo;t figure it out at all. Bruce knows that the digits in the original number will be divided into groups of three, with a group of leftover digits at the beginning. He wants to know how many digits, possibly zero, will be in that first group. To do that, he needs to divide by three and find the remainder.&lt;/p&gt;

&lt;p&gt;Bruce has done something ingenious here: The code here divides &lt;code&gt;$size&lt;/code&gt; by 3, and supposes that the result will be a decimal number. Then it gets the integer part with &lt;code&gt;split&lt;/code&gt;, splitting on the decimal point character!&lt;/p&gt;

&lt;p&gt;Perl already has a much simpler way to get the remainder: The &lt;code&gt;%&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $remain = $size % 3;   # This gets the remainder after division.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also worth remembering that Perl has an &lt;code&gt;int()&lt;/code&gt; function which throws away the fractional part of a number and returns the integer part . This is essentially what the &lt;code&gt;split&lt;/code&gt; was doing here.&lt;/p&gt;

&lt;p&gt;A useful rule of thumb is that it&amp;rsquo;s peculiar to treat a number like a string, and whenever you do pattern matching on a number, you should be suspicious. There&amp;rsquo;s almost always a more natural way to get the same result. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if ($num =~ /^-/) { it is less than zero }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is bizarre and obfuscatory; it should be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if ($num &amp;lt; 0) { it is less than zero }

     8     $pos = 0;
     9     $next = 0;
    10     $loop = ($size - $remain);
    11     while ($next &amp;lt; $loop)
    12     {
    13        if ($remain &amp;gt; 0)
    14        {
    15           $section[$pos] = substr($number, 0, $remain);
    16           $next = $remain++;
    17           $remain = 0;
    18           $pos++;
    19        }
    20        $section[$pos] = substr($number, $next, 3);
    21        $next = ($next + 3);
    22        $pos++;
    23     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now here we have a &lt;code&gt;while&lt;/code&gt; loop with an &lt;code&gt;if&lt;/code&gt; condition inside it. The &lt;code&gt;if&lt;/code&gt; condition is that &lt;code&gt;$remain&lt;/code&gt; be positive. Inside the &lt;code&gt;if&lt;/code&gt; block, &lt;code&gt;$remain&lt;/code&gt; is set to 0, and it doesn&amp;rsquo;t change anywhere else in this section of code. So we can deduce that the `if&amp;rsquo; block will only be executed on the first trip through the loop, because after that, &lt;code&gt;$remain&lt;/code&gt; will be 0.&lt;/p&gt;

&lt;p&gt;That suggests that we should do the &lt;code&gt;if&lt;/code&gt; part &lt;em&gt;before&lt;/em&gt; we start the loop, because then we won&amp;rsquo;t have to test &lt;code&gt;$remain&lt;/code&gt; every time. Then the structure is simpler, because we can move the &lt;code&gt;if&lt;/code&gt; block out of the &lt;code&gt;while&lt;/code&gt; block, and even a little shorter because we don&amp;rsquo;t need the code that manages &lt;code&gt;$remain&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $next = 0;
    $pos = 0;
    if ($remain &amp;gt; 0)
    {
       $section[$pos] = substr($number, 0, $remain);
       $next = $remain + 1;
       $pos++;
    }

    $loop = ($size - $remain);
    while ($next &amp;lt; $loop)
    {
       $section[$pos] = substr($number, $next, 3);
       $next = ($next + 3);
       $pos++;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;while&lt;/code&gt; loop we see another case of a common beginner error I pointed out in the last article. Whenever you have a variable like &lt;code&gt;$pos&lt;/code&gt; that only exists to keep track of where the end of an array is, you should get rid of it. Here, for example, the only use for &lt;code&gt;$pos&lt;/code&gt; is to add a new element to the end of &lt;code&gt;@section&lt;/code&gt;. But the &lt;code&gt;push&lt;/code&gt; function does that already, without needing &lt;code&gt;$pos&lt;/code&gt;. Whenever you have code that looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $array[$pos] = SOMETHING;
        $pos++;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you should see if it can be replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        push @array, SOMETHING;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;97% of the time, it &lt;em&gt;can&lt;/em&gt; be replaced. Here, the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $next = 0;
    if ($remain &amp;gt; 0)
    {
       push @section, substr($number, 0, $remain);
       $next = $remain + 1;
    }

    $loop = ($size - $remain);
    while ($next &amp;lt; $loop)
    {
       push @section, substr($number, $next, 3);
       $next = ($next + 3);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point in the code, I had an inspiration. &lt;code&gt;$pos&lt;/code&gt; was just a special case of a more general principle at work. In every program, there are two kinds of code. Every bit of code is either naturally related to the problem at hand, or else it&amp;rsquo;s an accidental side effect of the fact that you happened to solve the problem using a digital computer. This second kind of code is just scaffolding. The goal of all programming is to reduce this accidental, synthetic code so that the natural, essential code is more visible.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$pos&lt;/code&gt; is a perfect example of synthetic code. It has nothing to do with adding commas to an input. It&amp;rsquo;s only there because we happened to use an array to hold the chunks of the original input, and arrays are indexed by numbers. Array index variables are almost always synthetic.&lt;/p&gt;

&lt;p&gt;Good languages provide many ways to reduce synthetic code. Here&amp;rsquo;s an example. Suppose you have two variables, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and you want to switch their values. In C, you would have to declare a third variable, and then do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        c = b;
        b = a;
        a = c;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extra variable here is totally synthetic. It has nothing at all to do with what you really want to do, which is switch the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. In Perl, you can say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        ($a, $b) = ($b, $a);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and omit the synthetic variable.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s funny how sometimes it can be so much easier to think about something once you have a name for it. Once I had this inspiration about synthetic code, I suddenly started seeing it everywhere. I noticed right away that &lt;code&gt;$next&lt;/code&gt; and &lt;code&gt;$loop&lt;/code&gt; were synthetic, and I started to wonder if I couldn&amp;rsquo;t get rid of them. Not only are they both synthetic, but they&amp;rsquo;re used for the same purpose, namely to control the exiting of the &lt;code&gt;while&lt;/code&gt; loop. Two variables to control one loop is excessive; in most cases you only need one variable to control one loop. If there are two, as in this case, it&amp;rsquo;s almost always possible to eliminate one or combine them. Here it turns out that &lt;code&gt;$loop&lt;/code&gt; is just useless, and we could have been using &lt;code&gt;$size&lt;/code&gt; instead. &lt;code&gt;$size&lt;/code&gt; is rather natural, because it&amp;rsquo;s simply the length of the input, and using &lt;code&gt;length($number)&lt;/code&gt; is more natural still.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if ($remain &amp;gt; 0)
    {
       push @section, substr($number, 0, $remain);
    }
    $next = $remain;

    while ($next &amp;lt; length($number))
    {
       push @section, substr($number, $next, 3);
       $next += 3;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the condition on the while loop is much easier to understand, because there&amp;rsquo;s no peculiar and meaningless &lt;code&gt;$loop&lt;/code&gt; variable: ``While the current position in the string is not past the end, get another section.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I also changed &lt;code&gt;$next = $next + 3&lt;/code&gt; to &lt;code&gt;$next += 3&lt;/code&gt; which is more concise.&lt;/p&gt;

&lt;p&gt;Now we have two variables, &lt;code&gt;$next&lt;/code&gt; and &lt;code&gt;$remain&lt;/code&gt;, which only overlap at once place, and at that one place (the assignment) they mean the same thing. So let&amp;rsquo;s let one variable do the work of two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if ($remain &amp;gt; 0)
    {
       push @section, substr($number, 0, $remain);
    }

    while ($remain &amp;lt; length($number))
    {
       push @section, substr($number, $remain, 3);
       $remain += 3;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is not going to get much simpler than this. We have turned twelve lines into five.&lt;/p&gt;

&lt;h2 id=&#34;span-id-assembling-the-result-assembling-the-result-span&#34;&gt;&lt;span id=&#34;assembling the result&#34;&gt;Assembling the Result&lt;/span&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    24     $loop = 0;
    25     @con = ();
    26     foreach (@section) 
    27     {
    28        $loop++;
    29        $cell++;
    30        @tens = split (/:/, $_);
    31        $con[$cell] = $tens[0];
    32        if ($loop == $pos)
    33        {
    34           last;
    35        }
    36        $cell++;
    37        $con[$cell] = &amp;quot;,&amp;quot;;
    38     }
    39     return @con;
    40  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we want to construct the result list, &lt;code&gt;@con&lt;/code&gt;, from the list that has the sections in it. I couldn&amp;rsquo;t understand what the &lt;code&gt;@tens&lt;/code&gt; array is for, or why the code is looking for &lt;code&gt;:&lt;/code&gt; characters, which don&amp;rsquo;t normally appear in numerals. The original program turns &lt;code&gt;1234:5678&lt;/code&gt; into &lt;code&gt;123,4,678&lt;/code&gt;, which I can&amp;rsquo;t believe was what was wanted. I asked Bruce what he was up to here, but I didn&amp;rsquo;t have enough context to understand his response&amp;mdash;I had the impression that it was an incompletely implemented feature. So I took it out and left behind a comment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$cell&lt;/code&gt; is another variable whose only purpose is to track the length of an array, so we can eliminate it by using &lt;code&gt;push&lt;/code&gt; the same way we did before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    foreach (@section) 
    {
       $loop++;
       push @con, $_;
       # Warning: no longer handles &#39;:&#39; characters

       if ($loop == $pos)
       {
          last;
       }
       push @con, &#39;,&#39; ;
    }
    return @con;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the only use of the &lt;code&gt;$loop&lt;/code&gt; variable is to escape the loop before adding a comma to the last element. Let&amp;rsquo;s simply get rid of it. Then when we leave the loop, there is an extra comma at the end of the array, but it&amp;rsquo;s easier to clean up the extra comma afterwards than it was to keep track of the loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    foreach (@section) 
    {
       push @con, $_, &#39;,&#39;;
    }
    pop @con;
    return @con;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, I don&amp;rsquo;t think this loop is going to get much smaller.&lt;/p&gt;

&lt;p&gt;What we have now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Warning: No longer handles &#39;:&#39; characters
    sub conversion 
    { 
      my ($number) = @_;
      my $remain = length($number) % 3;

      if ($remain &amp;gt; 0)
      {
         @section = (substr($number, 0, $remain));
      }

      while ($remain &amp;lt; length $number)
      {
         push @section, substr($number, $remain, 3);
         $remain += 3;
      }

      foreach (@section) 
      {
         push @con, $_, &#39;,&#39;;
      }
      pop @con;
      return @con;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a big improvement already, but more improvement is possible. &lt;code&gt;@section&lt;/code&gt; is a synthetic variable; it&amp;rsquo;s only there so we can loop over it, and then we throw it away at the end. It would be better to construct &lt;code&gt;@con&lt;/code&gt; directly, without having to build &lt;code&gt;@section&lt;/code&gt; first. Now that the code is so simple, it&amp;rsquo;s much easier to see how to do this. In the original program, one loop breaks the input into chunks, and the other loop inserts commas. We can replace these two loops with a single loop that does both tasks, so that this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      while ($remain &amp;lt; $size)
      {
         push @section, substr($number, $remain, 3);
         $remain += 3;
      } 

      foreach (@section) 
      {
         push @con, $_, &#39;,&#39;;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      while ($remain &amp;lt; $size)
      {
         push @con, substr($number, $remain, 3), &#39;,&#39;;
         $remain += 3;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eliminating the second loop means that the special case &lt;code&gt;if&lt;/code&gt; block at the beginning must insert its own comma if it is exercised:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      if ($remain &amp;gt; 0)
      {
         push @con, substr($number, 0, $remain), &#39;,&#39;;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eliminating the second loop also has the pleasant side effect of making the function faster, since it no longer has to make two passes over the input. The finished version of the function looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Warning: No longer handles &#39;:&#39; characters
    sub conversion 
    { 
      my ($number) = @_;
      my $size = length($number);
      my $remain = $size % 3;
      my @con = ();

      if ($remain &amp;gt; 0)
      {
         push @con, substr($number, 0, $remain), &#39;,&#39;;
      }

      while ($remain &amp;lt; $size)
      {
         push @con, substr($number, $remain, 3), &#39;,&#39;;
         $remain += 3;
      }

      pop @con;
      return @con;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a big win. A 30-line function has turned into a 12-line function. Formerly, it had nine scalar variables and four arrays; now it has three scalars and one array. If we wanted, we could reduce it more by eliminating &lt;code&gt;$size&lt;/code&gt;, which is somewhat synthetic, and using &lt;code&gt;length($number)&lt;/code&gt; in the rest of the function instead. The gain seemed smaller, so I didn&amp;rsquo;t choose to do it.&lt;/p&gt;

&lt;p&gt;In good code, the structure of the program is in harmony with the structure of the data. Here the structure of the code corresponds directly to the structure of the result we are trying to produce. We wanted to turn an input like &lt;code&gt;12345678&lt;/code&gt; into an output like &lt;code&gt;12 , 345 , 678&lt;/code&gt;. There is a single &lt;code&gt;if&lt;/code&gt; block up front to handle the special case of the initial digit group, which might be different from the other groups, and then there is a single &lt;code&gt;while&lt;/code&gt; loop to handle the rest of the groups.&lt;/p&gt;

&lt;p&gt;The really funny thing about this code is that I hardly had to use any of Perl&amp;rsquo;s special features at all. The cleanup came entirely from reorganizing the existing code and removing unnecessary items. Of course, Perl features like &lt;code&gt;push&lt;/code&gt; made it easy to eliminate synthetic variables and other code that would have been necessary in other languages.&lt;/p&gt;

&lt;p&gt;For a more &amp;lsquo;Perlish&amp;rsquo; (and unfortunately obfuscated) solution to this problem see the FAQ.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;span-id-red-flags-red-flags-span&#34;&gt;&lt;span id=&#34;red flags&#34;&gt;Red Flags&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;A red flag is a warning sign that something is wrong. When you see a red flag, you should immediately consider whether you have an opportunity to make the code cleaner. I liked this program because it raised many red flags.&lt;/p&gt;

&lt;h2 id=&#34;span-id-eliminate-synthetic-code-eliminate-synthetic-code-span&#34;&gt;&lt;span id=&#34;eliminate synthetic code&#34;&gt;Eliminate synthetic code&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Some parts of your program relate directly to the problem you are trying to solve. This is natural code. But some parts of the program relate only to other parts of the program; this is synthetic code. An example is a loop control variable. You can tell from its name that it&amp;rsquo;s synthetic. It&amp;rsquo;s not there to solve your problem; it&amp;rsquo;s there to control a loop, and the &lt;em&gt;loop&lt;/em&gt; is there to help solve the problem. You might care about the loop, but the control variable is an inconvenience, only there for bookkeeping.&lt;/p&gt;

&lt;h2 id=&#34;span-id-beware-of-special-cases-in-loops-beware-of-special-cases-in-loops-span&#34;&gt;&lt;span id=&#34;beware of special cases in loops&#34;&gt;Beware of special cases in loops&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;If you have a loop with a special test to do something on the first or last iteration, you may be able to get rid of it. First-iteration code can often be hoisted out of the loop into a separate initialization section. Last-iteration code can often be hoisted down and performed after the loop is finished. If the loop runs a little too much code, undoing the extra is often simpler than trying to escape the loop prematurely.&lt;/p&gt;

&lt;h2 id=&#34;span-id-don-t-apply-string-operations-to-numbers-don-t-apply-string-operations-to-numbers-span&#34;&gt;&lt;span id=&#34;don&#39;t apply string operations to numbers&#34;&gt;Don&amp;rsquo;t apply string operations to numbers&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Treating a number as a string of digits is a bizarre thing to do, because the digits themselves don&amp;rsquo;t really have much to do with the value of the number. Doing so creates a string version of the numeric quantity, which usually means you went down the wrong path, because Perl numbers are stored internally in a numeric form that should support all the numeric operations you should want.&lt;/p&gt;

&lt;p&gt;If you used a regex, or &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;substr&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, or any other string function on a number, that is a red flag. Stop and consider whether there might be a more natural and robust way to do the same thing using only numeric operations. For example, this is bizarre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if (length($number) &amp;gt; 3) { large number }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is more natural to write this instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if ($number &amp;gt;= 1000)      { large number }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An exception to this is when you really are treating a number as a string, such as when you&amp;rsquo;re writing it into a fixed-width field. Examples of both cases occur in the program in this article. In the original, using &lt;code&gt;split&lt;/code&gt; to compute the modulus operator was unnatural. In the final version, we do indeed apply &lt;code&gt;length()&lt;/code&gt; and &lt;code&gt;substr()&lt;/code&gt; to &lt;code&gt;$number&lt;/code&gt;, but that&amp;rsquo;s because we really do want to treat the number as a digit string, splitting it up into groups of three digits and inserting commas.&lt;/p&gt;

&lt;p&gt;Still, the red flag is there, and so we should see what happens if we heed it, and try to replace &lt;code&gt;length()&lt;/code&gt; and &lt;code&gt;substr()&lt;/code&gt; with truly numeric operations. The result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        # Warning: No longer handles &#39;:&#39; characters.
        sub convert {
          my ($number) = shift;
          my @result;
          while ($number) {
            push @result, ($number % 1000) , &#39;,&#39;;
            $number = int($number/1000);
          }
          pop @result;      # Remove trailing comma
          return reverse @result;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice again how it&amp;rsquo;s easier to pop an extra comma off the end of &lt;code&gt;@result&lt;/code&gt; afterwards than it is to special-case the first iteration of the loop to avoid adding the comma in the first place. The code now has eight lines, one scalar, and one array. I think this qualifies as a win! The lesson to learn here is: When in doubt, try writing it both ways!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2000/06/18</title>
      <link>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html/</link>
      <pubDate>Sat, 17 Jun 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000618.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Method_Call_Speedups&#34;&gt;Method Call Speedups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#More_Attempts_to_Make_B::Bytecode_Faster&#34;&gt;More Attempts to Make &lt;code&gt;B::Bytecode&lt;/code&gt; Faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Byte_Order_Marks_Continue&#34;&gt;Byte-Order Marks Continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Slurp_Bug&#34;&gt;Slurp Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#EPOC_Port&#34;&gt;EPOC Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#READMEhpux&#34;&gt;&lt;code&gt;README.hpux&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Paths_in_MacPerl&#34;&gt;Paths in MacPerl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Non_destructed_anonymous_functions&#34;&gt;Non-destructed anonymous functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Extensions_required_for_regression_tests&#34;&gt;Extensions required for regression tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Eudora_Problem&#34;&gt;Eudora Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#crypt_docs&#34;&gt;&lt;code&gt;crypt&lt;/code&gt; docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Magic_Auto_Decrement&#34;&gt;Magic Auto-Decrement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:p5p-digest-subscribe@plover.com&#34;&gt;&lt;code&gt;p5p-digest-subscribe@plover.com&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;mjd-perl-thisweek-YYYYMM@plover.com&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;p&gt;This week&amp;rsquo;s report is a little early, because I am going to San Diego Usenix tomorrow. Next week&amp;rsquo;s report will cover anything I missed this week, and may be late, since I will just have gotten back from YAPC.&lt;/p&gt;

&lt;p&gt;A really mixed bag this week. Great work from Doug McEachern, Nicholas Clark, and Simon Cozens, and a lot of wasted yakkity yak from some other people.&lt;/p&gt;

&lt;h3 id=&#34;span-id-method-call-speedups-method-call-speedups-span&#34;&gt;&lt;span id=&#34;Method_Call_Speedups&#34;&gt;Method Call Speedups&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Doug McEachern wrote a patch to implement a compile-time optimization: Class method calls, and method calls on variables that have a declared class (as with &lt;code&gt;my Dog $spot&lt;/code&gt;) have the code for the method call rewritten as if you had requested an ordinary subroutine call. For example, if you have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my Class $obj = ...;
        $obj-&amp;gt;method(...);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;code&gt;method&lt;/code&gt; that gets called is actually &lt;code&gt;Parent::method&lt;/code&gt;, then Perl will pretend that you actually wrote&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my Class $obj = ...;
        Parent::method($obj, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead. Doug found that the method calls did get much faster&amp;mdash;in some cases faster than regular subroutine calls. (I don&amp;rsquo;t understand how this can possibly be the case, however.) One side benefit (or maybe it&amp;rsquo;s a malefit?) of Doug&amp;rsquo;s approach is that you can now enable prototype checking on method calls.&lt;/p&gt;

&lt;p&gt;A lot of work remains to be done here. Doug&amp;rsquo;s patch does not actually speed up method calls; it replaces method calls with regular subroutine calls. It would be good to see some work done on actually making method calls faster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00441.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-more-attempts-to-make-b-bytecode-faster-more-attempts-to-make-b-bytecode-faster-span&#34;&gt;&lt;span id=&#34;More_Attempts_to_Make_B::Bytecode_Faster&#34;&gt;More Attempts to Make &lt;code&gt;B::Bytecode&lt;/code&gt; Faster&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The whole point of &lt;code&gt;B::Bytecode&lt;/code&gt; is to speed up the startup time of Perl programs. Two weeks ago Benjamin Stuhl reported that bytecoded files are actually &lt;em&gt;slower&lt;/em&gt; than regular source files, probably because the bytecoded files are so big that it takes a lot of time to read them in.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000604.html#B::Bytecode_is_Ineffective&#34;&gt;Previous Summary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nicholas Clark looked into compressing the bytecode files. He fixed [Byteloader.xs] so that it was a true filter, and could be installed atop another filter; in this case one that decompressed gzipped data.&lt;/p&gt;

&lt;p&gt;It didn&amp;rsquo;t work; the decompression overhead made the compressed bytecode files even slower than the uncompressed byecode files. Time Bunce pointed out that this is a bad test, since a lot of the modules that the byte compiler and byte loader will load are things that a larger script would have needed anyway, but that were not present at all in Nicholas&amp;rsquo; &lt;code&gt;hello.pl&lt;/code&gt; test.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nickolas Clark:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Currently byte code is far to large compared with its script. (I think someone else mailed the list with improvements that reducethe amount of op tree information saved as bytecode, which should help)&lt;/li&gt;
&lt;li&gt;For a simple script bytecode is slower than pure perl.&lt;/li&gt;
&lt;li&gt;Using a general purpose data compression algorithm (zipdeflation) Bytecode only compresses by a factor of 3, which still leaves it much larger than its script.&lt;/li&gt;
&lt;li&gt;Decompression filters written in perl run very slowly. (butare much easier to write than those in C)&lt;/li&gt;
&lt;li&gt;Although a decompression filter written in C is much faster, it still doesn&amp;rsquo;t quite match the speed of reading and parsing thebytecode, let alone the original script (for this example). However, it&amp;rsquo;sclose to uncompressed bytecode.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nicholas&amp;rsquo; message contained many other interesting details about bytecodes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00403.html&#34;&gt;Read about it.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-byte-order-marks-continue-byte-order-marks-continue-span&#34;&gt;&lt;span id=&#34;Byte_Order_Marks_Continue&#34;&gt;Byte-Order Marks Continue&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon produced another revision to his patch to make Perl automatically handle source code written in various flavors of Unicodings. He went to a lot of work to get the lexer to recognize the BOMs only at the very beginning of the file. (One startling trivium here: If you have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        ...some code here...
        #line 1
        #!/usr/bin/perl -wT
        ...more code...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;#line 1&lt;/code&gt; fools the lexer into thinking that what follows is the first line, and then Perl interprets the `command-line&amp;rsquo; options on the following comment even though they&amp;rsquo;re not really on the first line of the file.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Simon:&lt;/strong&gt;Yes, the part in pp_ctl &lt;em&gt;does&lt;/em&gt; have to be this complicated and order is important. If you&amp;rsquo;re going to lie to the lexer, you have to be pretty damned convincing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apparently Simon later posted a different revision that was simpler and used &lt;code&gt;tell&lt;/code&gt; to see if the BOM was really at the beginning of the file, but it didn&amp;rsquo;t appear on p5p.&lt;/p&gt;

&lt;h3 id=&#34;span-id-slurp-bug-slurp-bug-span&#34;&gt;&lt;span id=&#34;Slurp_Bug&#34;&gt;Slurp Bug&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last month Joey Hess reported a bug in Perl&amp;rsquo;s slurping; it was reading line by line and it shouldn&amp;rsquo;t have been.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00746.html&#34;&gt;Original report and test case.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nobody has investigated this yet, and Sarathy said that was a pity, which I think whould be interpreted as a hint that someone should have a look at it.&lt;/p&gt;

&lt;h3 id=&#34;span-id-epoc-port-epoc-port-span&#34;&gt;&lt;span id=&#34;EPOC_Port&#34;&gt;EPOC Port&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Olaf Flebbe posted some enhancements to his port for EPOC, which is an OS for palmtops and mobile phones. (See &lt;code&gt;README.epoc&lt;/code&gt; in the Perl distribution for more details.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00364.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-readmehpux-readme-hpux-span&#34;&gt;&lt;span id=&#34;READMEhpux&#34;&gt;&lt;code&gt;README.hpux&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Okamoto contributed a new one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00381.html&#34;&gt;Here it is.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-paths-in-macperl-paths-in-macperl-span&#34;&gt;&lt;span id=&#34;Paths_in_MacPerl&#34;&gt;Paths in MacPerl&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last week Peter Prymmer contributed a large patch that attempts to make the test suite work better on Macintoshes by replacing a lot of Unix-style pathnames like &lt;code&gt;&#39;../lib&#39;&lt;/code&gt; with constructions of the form &lt;code&gt;($^O eq &#39;MacOS&#39;) ? &#39;::lib:&#39; : &#39;../lib&#39;&lt;/code&gt;. This sparked a discussion about better ways to approach this problem. Chris Nandor suggested a &lt;code&gt;paths.pl&lt;/code&gt; file which the suite could retquire that would set up the path strings correctly. He pointed out that if this library were in the same directory as the script that required it, the &lt;code&gt;require&lt;/code&gt; would work on any platform. He also said that having native support for path translations was probably a bad idea. (This would mean that &lt;code&gt;require &#39;foo/bar.pm&#39;&lt;/code&gt; would actually load &lt;code&gt;foo:bar.pm&lt;/code&gt;, which is the &amp;lsquo;right thing&amp;rsquo; unless what you actually wanted was to require a file named &lt;code&gt;foo/bar.pm&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00325.html&#34;&gt;Matthias reported on what he actually does do in MacPerl.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It appeared that the issue about what to do about the test suite went unresolved. I do not know yet if Peter&amp;rsquo;s big patch went in.&lt;/p&gt;

&lt;h3 id=&#34;span-id-non-destructed-anonymous-functions-non-destructed-anonymous-functions-span&#34;&gt;&lt;span id=&#34;Non_destructed_anonymous_functions&#34;&gt;Non-destructed anonymous functions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last week Rocco Caputo reported that his blessed coderefs were not being &lt;code&gt;DESTROY&lt;/code&gt;ed, even at interpreter shutdown time. Nick Ing-Simmons produced an explanation. I suppose it could be called a feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00340.html&#34;&gt;The explanation.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-extensions-required-for-regression-tests-extensions-required-for-regression-tests-span&#34;&gt;&lt;span id=&#34;Extensions_required_for_regression_tests&#34;&gt;Extensions required for regression tests&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Nicholas Clark pointed out that if you don&amp;rsquo;t build all the Perl standard extension modules, some of the regression tests fail, and that the regression tests shouldn&amp;rsquo;t depend on the extension modules unless they are explicitly testing the extension modules.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;io/openpid.t&lt;/code&gt; test file wants to use the &lt;code&gt;Fcntl&lt;/code&gt; module; if you decided not to build &lt;code&gt;Fcntl&lt;/code&gt;, it barfs. Nick offered to make a patch, and Sarathy agreed it owuld be a good idea. I have not seen the patch appear yet.&lt;/p&gt;

&lt;h3 id=&#34;span-id-eudora-problem-eudora-problem-span&#34;&gt;&lt;span id=&#34;Eudora_Problem&#34;&gt;Eudora Problem&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The problem with Eudora mangling patch files turns out to be more complicated than I originally reported. If you use Eudora, you should probably read the following discussion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00290.html&#34;&gt;Eudora discussion.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-crypt-docs-crypt-docs-span&#34;&gt;&lt;span id=&#34;crypt_docs&#34;&gt;&lt;code&gt;crypt&lt;/code&gt; docs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Ben Tilly made a trivial change to the documentation for the &lt;code&gt;crypt&lt;/code&gt; function that sparked a long and irrelevant discussion about password security policy.&lt;/p&gt;

&lt;h3 id=&#34;span-id-magic-auto-decrement-magic-auto-decrement-span&#34;&gt;&lt;span id=&#34;Magic_Auto_Decrement&#34;&gt;Magic Auto-Decrement&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The idle and pointless magic decrement discussion continued.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A large collection of bug reports, bug fixes, non-bug reports, questions, answers, and a small amount and spam. I think there was flamage, but it was in the thread I skipped.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200006+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2000/06/11</title>
      <link>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000611.html/</link>
      <pubDate>Tue, 13 Jun 2000 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2000/06/p5pdigest/THISWEEK-20000611.html/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Byte_Order_Marks&#34;&gt;Byte-Order Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Magic_Auto_Decrement&#34;&gt;Magic Auto-Decrement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Bug_Reports&#34;&gt;Bug Reports&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Core_Dump_I&#34;&gt;Core Dump I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Core_Dump_II&#34;&gt;Core Dump II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Class::Struct_objects_misbehave_with__gt;isa&#34;&gt;&lt;code&gt;Class::Struct&lt;/code&gt; objects misbehave with -&amp;gt;isa()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Data::Dumper_Weirdness&#34;&gt;&lt;code&gt;Data::Dumper&lt;/code&gt; Weirdness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Blessed_coderefs_never_DESTROYed&#34;&gt;Blessed coderefs never &lt;code&gt;DESTROY&lt;/code&gt;ed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Code_compiled_incorrectly&#34;&gt;Code compiled incorrectly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MacPerl_Test_Suite_Patches&#34;&gt;MacPerl Test Suite Patches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Why__is_not_ignored_in_comments_in_x_constructions&#34;&gt;Why &lt;code&gt;/&lt;/code&gt; is not ignored in comments in &lt;code&gt;/.../x&lt;/code&gt; constructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:p5p-digest-subscribe@plover.com&#34;&gt;&lt;code&gt;p5p-digest-subscribe@plover.com&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;mjd-perl-thisweek-YYYYMM@plover.com&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;p&gt;Next week&amp;rsquo;s report will be late, since I will be bending space and time to attend both San Diego Usenix &lt;em&gt;and&lt;/em&gt; YAPC. If the fabric of the universe survives my ill-advised meddling, the reports should resume the following week.&lt;/p&gt;

&lt;p&gt;This was the quietest week I can remember. Very little seemed to happen.&lt;/p&gt;

&lt;h3 id=&#34;span-id-byte-order-marks-byte-order-marks-span&#34;&gt;&lt;span id=&#34;Byte_Order_Marks&#34;&gt;Byte-Order Marks&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Unicode files may begin with the special Unicode character U+FEFF. That is so that if the byte order gets reversed somehow (as with a big-endian to little-endian transformation) you can recognize that that has happened because the initial character will be U+FFFE, which is guaranteed to never be assigned.&lt;/p&gt;

&lt;p&gt;Tim Burlowski saved a Perl program file with the UTF8 encoding under windows, and when he tried to run the script, Perl complained about the initial U+FEFF. ( &lt;code&gt;Unrecognized character \xEF...&lt;/code&gt;, because U+FEFF encodes to &lt;code&gt;&amp;quot;\xEF\xBB\xBF&amp;quot;&lt;/code&gt; under UTF-8.) Tim asked if Perl shouldn&amp;rsquo;t know to ignore this. Sarathy agreed, and Simon provided a patch, which also enables Perl to read a UTF-16-encoded source code file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00193.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-magic-auto-decrement-magic-auto-decrement-span&#34;&gt;&lt;span id=&#34;Magic_Auto_Decrement&#34;&gt;Magic Auto-Decrement&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Someone asked why there isn&amp;rsquo;t one. This sparked a long discussion of how it might work. (What is &lt;code&gt;&#39;a&#39;--&lt;/code&gt;? What is &lt;code&gt;&#39;aAa00&#39;--&lt;/code&gt;?)&lt;/p&gt;

&lt;p&gt;There was a lot of idle discussion, and no patch, so probably nobody really cares.&lt;/p&gt;

&lt;h3 id=&#34;span-id-bug-reports-bug-reports-span&#34;&gt;&lt;span id=&#34;Bug_Reports&#34;&gt;Bug Reports&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Richard Foley coughed up a lot of bug reports that had gotten lost somehow. So there was a lot of miscellaneous stuff. Some of the bug reports related to configuration errors, and some were genuine. Some attracted patches, others did not. It seemed to me that this batch of bug reoprts contained more than the usual number of weird oddities. For example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00182.html&#34;&gt;Weird oddity.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the non-oddities that remain unfixed follow. In an attempt to encourage more people to try to fix bugs, I tried here to select some bugs that seemed not too difficult to solve. So if you have ever wanted to become a Perl core hacker and you wanted a not-too-hard task to start on, the following bugs might be good things to work on.&lt;/p&gt;

&lt;p&gt;If you are interested in trying to fix one of these, and you need help, or you don&amp;rsquo;t know how to start, please do send me email and I will try to assist you.&lt;/p&gt;

&lt;h4 id=&#34;span-id-core-dump-i-core-dump-i-span&#34;&gt;&lt;span id=&#34;Core_Dump_I&#34;&gt;Core Dump I&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Here is a bug that makes Perl dump core. Sarathy reduced Wolfgang Laun&amp;rsquo;s small test case to a very small test case.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00145.html&#34;&gt;Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00262.html&#34;&gt;Another Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-core-dump-ii-core-dump-ii-span&#34;&gt;&lt;span id=&#34;Core_Dump_II&#34;&gt;Core Dump II&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Here is another core dump, this one on an improper pseudohash reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00126.html&#34;&gt;Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-class-struct-objects-misbehave-with-gt-isa-class-struct-objects-misbehave-with-gt-isa-span&#34;&gt;&lt;span id=&#34;Class::Struct_objects_misbehave_with__gt;isa&#34;&gt;&lt;code&gt;Class::Struct&lt;/code&gt; objects misbehave with -&amp;gt;isa()&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;If &lt;code&gt;$foo&lt;/code&gt; is a &lt;code&gt;Class:Struct&lt;/code&gt; object, and you call &lt;code&gt;-&amp;gt;isa(&#39;UNIVERSAL&#39;)&lt;/code&gt; on it, you get the correct answer (true) the first time, and the wrong answer (false) on subsequent calls.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00191.html&#34;&gt;Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-data-dumper-weirdness-data-dumper-weirdness-span&#34;&gt;&lt;span id=&#34;Data::Dumper_Weirdness&#34;&gt;&lt;code&gt;Data::Dumper&lt;/code&gt; Weirdness&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Victor Insogna got weird output from &lt;code&gt;Data::Dumper&lt;/code&gt;. The test cae is very simple but it&amp;rsquo;s not entirely clear to me whether the bug is in &lt;code&gt;Data::Dumper&lt;/code&gt; itself or if Perl is actually constructing a bizarre value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00214.html&#34;&gt;Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-blessed-coderefs-never-destroyed-blessed-coderefs-never-destroy-ed-span&#34;&gt;&lt;span id=&#34;Blessed_coderefs_never_DESTROYed&#34;&gt;Blessed coderefs never &lt;code&gt;DESTROY&lt;/code&gt;ed&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Rocco Caputo reported that if you bless a coderef into a package with a destructor function, the destructor is never called, not even at program termination.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00276.html&#34;&gt;Test Case.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;span-id-code-compiled-incorrectly-code-compiled-incorrectly-span&#34;&gt;&lt;span id=&#34;Code_compiled_incorrectly&#34;&gt;Code compiled incorrectly&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Barrie Slaymaker reported that in 5.6.0,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        1 while ( $a = ( $b ? 1 : 0 ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;appears to be compiled as if you had written&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &#39;???&#39; while defined($a = $b ? 1 : 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;apparently as an incorrect application of the same transformation that makes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (readdir D) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        while (defined(readdir D))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-macperl-test-suite-patches-macperl-test-suite-patches-span&#34;&gt;&lt;span id=&#34;MacPerl_Test_Suite_Patches&#34;&gt;MacPerl Test Suite Patches&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Peter Prymmer sent a big patch that attempts to make the test suite work better on Macintoshes by replacing a lot of Unix-style pathnames like &lt;code&gt;&#39;../lib&#39;&lt;/code&gt; with constructions of the form &lt;code&gt;($^O eq &#39;MacOS&#39;) ? &#39;::lib:&#39; : &#39;../lib&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00258.html&#34;&gt;The patch.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-why-is-not-ignored-in-comments-in-x-constructions-why-is-not-ignored-in-comments-in-x-constructions-span&#34;&gt;&lt;span id=&#34;Why__is_not_ignored_in_comments_in_x_constructions&#34;&gt;Why &lt;code&gt;/&lt;/code&gt; is not ignored in comments in &lt;code&gt;/.../x&lt;/code&gt; constructions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;People are often surprised that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $string =~ m/a+
                     foo  # some comment here that mentions /
                     w{3}
                    /x;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a syntax error; the &lt;code&gt;/&lt;/code&gt; in the &amp;lsquo;comment&amp;rsquo; terminates the regex prematurely. They expected it to be ignored, since it is in a comment.&lt;/p&gt;

&lt;p&gt;The way Perl handles &lt;code&gt;/.../x&lt;/code&gt; is that it parses the regex as usual, and locates the terminating slash as usual, and then hands off the regex to the regex engine for parsing, with a flag saying &amp;lsquo;by the way, this regex was marked with the &lt;code&gt;/x&lt;/code&gt; modifier. The regex is then parsed accordingly. But The main Perl parser is totally unaware of the meaning of &lt;code&gt;/x&lt;/code&gt; and in particular it uses the same old logic to determine where the end of the regex is, and doesn&amp;rsquo;t realize that it is supposed to ignore the &amp;lsquo;comment&amp;rsquo;. In other words, the comment is a comment for the regex compiler, but not for the Perl parser.&lt;/p&gt;

&lt;p&gt;This is well-known to many people, and I mention it here because Ben Tilly came up with a really nice example of why this problem can&amp;rsquo;t be &amp;lsquo;fixed&amp;rsquo;. Here it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if ($foo =~ /#/) {
          # Do something
        }
        # Time passes
        print &amp;quot;eg.  In DOS you would use /x instead of -x\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, where does that regex end?&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A large collection of bug reports, and a small collection of bug fixes, non-bug reports, questions, answers, and spam. No flames and little discussion.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:mjd-perl-thisweek-200006+@plover.com&#34;&gt;Mark-Jason Dominus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

