<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schuyler Erle on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/schuyler-erle/</link>
    <description>Recent content in Schuyler Erle on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jun 2001 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/schuyler-erle/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Yet Another YAPC Report: Montreal</title>
      <link>http://localhost:1313/pub/2001/06/21/yapcreport.html/</link>
      <pubDate>Thu, 21 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/21/yapcreport.html/</guid>
      <description>&lt;p&gt;A year ago, at Yet Another Perl Conference North America 19100, both Perl-the-language and Perl-the-community seemed to be headed for trouble. Longtime Perl hackers spoke openly with concern at the apparent stagnation of Perl 5 development, and how the community seemed to be increasingly bogged down by acrimony and bickering. Now, a year later, the tide has already turned and the evidence is nowhere more apparent than at this year&amp;rsquo;s YAPC::NA in Montreal.&lt;/p&gt;

&lt;p&gt;The conference, produced by Yet Another Society, was a smashing success. More than 350 Perl Mongers converged from all across North America and Europe on McGill University for the three-day event. Rich Lafferty and Luc St. Louis, key organizers from the Montreal.pm group, did a brilliant job of lining everything up; and Kevin Lenzo, YAS president, once again did the crucial fund raising and promotional work to make the conference a reality.&lt;/p&gt;

&lt;p&gt;Certain familiar faces were missing from this year&amp;rsquo;s conference, including Larry himself, who was scheduled to deliver the keynote but was absent due to illness. (Get well soon, Larry!) The unenviable task of filling Larry Wall&amp;rsquo;s shoes for the highly anticipated opening talk fell to the infamous Dr. Damian Conway, indentured servant to the Perl community and lecturer extraordinaire. Those of you who have seen Damian in action will have probably guessed that his presentation did not disappoint. The topic was, of course, a tour of the past and future of the Perl language &amp;ndash; where we have come (a long way from Perl 1 in 1987) and where are going (a long way yet to Perl 6).&lt;/p&gt;

&lt;p&gt;To hear Damian tell it, Perl 6 looks like it&amp;rsquo;s going to be awesome. While many details are still sketchy, the intention from all quarters is to preserve all the things we like about Perl today, especially its tendency to be eclectic in its incorporation of ideas and features from other languages. Larry, Damian and others have carefully studied the lessons of such languages as Java, Python, Ruby, and even the infant C#, in the hopes of applying those lessons to Perl 6.&lt;/p&gt;

&lt;p&gt;Damian&amp;rsquo;s keynote also focused on how Perl 6 will attempt to correct some of the flaws and deficiencies of Perl 5, the details of which can be found elsewhere, so I won&amp;rsquo;t reiterate them here. Additionally, he emphasized that, due to the unexpected quantity and scope of the Perl 6 RFCs, the final language design will take Larry far longer than anyone originally imagined. Damian went on to predict a usable alpha version of Perl 6 being ready by May 2002, with a full release perhaps available by October 2002. However, as pieces of the Perl 6 design stabilize, Damian and others (including our own Simon Cozens) will be implementing them in Perl 5, so that we can start playing with Perl 6 today, rather than next year.&lt;/p&gt;

&lt;p&gt;Meanwhile, the continued enthusiasm and energy being devoted to Perl 6 has had a profound impact on the community at large that is hard to overstate. YAPC::NA 2001 was marked not merely by much discussion and speculation on Perl 6, but also by fascinating new developments in Perl. One of the downright niftiest of these new directions is Brian Ingerson&amp;rsquo;s Inline.pm, which he presented in a 90-minute talk Wednesday. Inline.pm uses a form of plug-in architecture to allow seamless embedding of other languages like C, C++, Java, and, yes, Python, right into ordinary Perl scripts. Brian, who works at ActiveState, has already written a &lt;a href=&#34;http://localhost:1313/pub/2001/02/inline.html&#34;&gt;www.perl.com feature on Inline.pm&lt;/a&gt;, so I&amp;rsquo;ll merely mention here that the module hides away the frighteningly ugly details of gluing disparate languages together, in the most intuitive way possible. This kind of development is really exciting for the ways in which it opens new doors and breeds new ideas on the many, many different kinds of intriguing things that can still be done with Perl 5. Incidentally, Brian&amp;rsquo;s midlecture sing-a-longs about Perl internals and so forth were also quite well regarded.&lt;/p&gt;

&lt;p&gt;The hubbub around Inline.pm was just one thread in the theme of &amp;ldquo;Perl as glue language for the 21st Century,&amp;rdquo; a theme visited and revisited at many times and places throughout the conference. The notion was raised again by Perl 6 project manager Nathan Torkington in his presentation at Adam &amp;ldquo;Ziggy&amp;rdquo; Turoff&amp;rsquo;s Perl Apprenticeship Workshop on Wednesday. Amidst the announcement of many interesting and valuable projects in need of Perl hackers, Gnat issued a call to &amp;ldquo;make a Python friend&amp;rdquo; and collaborate with them on a development project. &amp;ldquo;Show them we&amp;rsquo;re not *all* evil!&amp;rdquo; he insisted, in marked contrast to his howlingly funny diatribe on Python at the previous year&amp;rsquo;s Lightning Talks.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I was surprised that Gnat took that approach, because I thought I would be left this year to argue the other side,&amp;rdquo; ActiveState&amp;rsquo;s Neil Kandalgaonkar observed, after giving his Friday morning talk on &amp;ldquo;Programming Parrot,&amp;rdquo; so named for its case study in getting Perl and Python applications to work in concert. Part of Neil&amp;rsquo;s tale of success lay in using Web services to get different processes running in different languages on different machines to exchange data reliably. &amp;ldquo;All it took was an extra four lines of scripting in each language, and I was done,&amp;rdquo; he noted, driving home the importance of using and extending Perl&amp;rsquo;s ability to talk to other languages and applications.&lt;/p&gt;

&lt;p&gt;Meanwhile, YAPC North America 2001 also showed growth in the depth and scope of the conference&amp;rsquo;s offerings. In contrast to previous years, where talks were largely aimed at beginner and intermediate Perl hackers, this year&amp;rsquo;s presentations covered some more advanced topics, such as Nat Torkington&amp;rsquo;s three-hour lesson on the Perl internals that he delivered to a packed house Thursday. Originally written by Simon Cozens (who was unable to attend), the Perl internals class presented a concise introduction to some of Perl&amp;rsquo;s inner workings, furthering the Perl community&amp;rsquo;s expressed goal of lowering the barrier of entry to internals hacking and encouraging wider participation in Perl core development. Later in the day, Michael Schwern addressed the ever-present tendency of Perl hackers to rely on Perl&amp;rsquo;s forgiving nature in his rather well-attended talk on &amp;ldquo;Disciplined Programming, or, How to Be Lazy without Trying.&amp;rdquo; &amp;ldquo;Always code Perl as if you were writing for CPAN,&amp;rdquo; Schwern urged his audience. &amp;ldquo;Document and test as you go, and release working versions often.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Speaking of which, the Comprehensive Perl Archive Network was also a major topic of discussion at YAPC. &amp;ldquo;The CPAN is Perl&amp;rsquo;s killer app,&amp;rdquo; Gnat said at one point. &amp;ldquo;No other language has anything like it.&amp;rdquo; Neil and Brian gave a short presentation on their experiences building and maintaining ActiveState&amp;rsquo;s PPM repository, a collection of binary distributions of CPAN modules. The dynamic duo from Vancouver yielded some of their time to Schwern to allow him to discuss his proposed CPANTS project, intended to automate testing and quality verification of modules in the repository. Metadata, rating systems, trust metrics and peer-to-peer distribution models were all touched on. Based on the buzz this year, it seems reasonable to predict that many new and exciting things are likely to grow up around the CPAN, and around the possibilities inherent in the distribution of Perl modules, in the not-too-distant future.&lt;/p&gt;

&lt;p&gt;The final talk Thursday was once more delivered by Damian Conway, and curiosity had spread far and wide on how he might top last year&amp;rsquo;s now-legendary presentation on Quantum::Superpositions. This year&amp;rsquo;s Thursday afternoon plenary lecture was merely titled, &amp;ldquo;Life, the Universe, and Everything,&amp;rdquo; in homage to the late Mr. Adams; and, true to his word, Damian delivered just that. Swooping from Conway&amp;rsquo;s Game of Life (no relation), to a source filter for programming Perl in Klingon (a la Perligata), to the paradox of Maxwell&amp;rsquo;s Demon (conveniently dispelled with a little help from Quantum::Superpositions), Damian&amp;rsquo;s talk was a masterful reflection of all the things we love about Perl: It was clever, complex, elegant, and, most of all, it was fun.&lt;/p&gt;

&lt;p&gt;(Parenthetically, among the modules that Damian introduced at this talk was a little number called Sub::Junctive. As a linguist, I must confess it scares the living heck outta me. Look for it on the CPAN.)&lt;/p&gt;

&lt;p&gt;Friday featured more of this year&amp;rsquo;s theme of Perl as glue-language-for-the-21st-Century in two talks on Web services by Adam &amp;ldquo;Ziggy&amp;rdquo; Turoff and Nat Torkington, in which Nat issued an impassioned plea for a Perl implementation of Freenet. However, the morning&amp;rsquo;s highlight was without a doubt the much-anticipated Lightning Talks. Hosted once again by the irrepressible Mark-Jason Dominus, the 90-minute series of five-minute short talks went over quite well, featuring topics ranging from how hacking Perl is like Japanese food and the graphing of IRC conversations to a call for more political action from within hackerdom and an overview of the Everything Engine. The showstopper, however, was once again Damian, who is generally reputed to be unable to hold forth on any topic for anything *less* than an hour and a half. To everyone&amp;rsquo;s surprise, the Lightning Talk consisted of a hilarious argument in the grand Shakespearean style between Damian and Brian Ingerson, over the disputed authorship of Inline::Files, a nifty new module for extending the capabilities of the old DATA filehandle. Their invective-laden dialogue was the most brilliantly humorous five minutes of the entire conference, and, yes, Damian even managed to finished on time. :) If you had the misfortune not to be present, you might be lucky enough to see them have at each other again at &lt;a href=&#34;http://conferences.oreilly.com/perl/&#34;&gt;this year&amp;rsquo;s Perl Conference 5 in San Diego.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later in the day, Nat and Damian chaired a Perl 6 status meeting, reviewing the major events in Perl 6 starting with the announcement at TPC4, and working forward to the present language design phase. &amp;ldquo;This is a fresh rebirth for Perl AND for the community,&amp;rdquo; Gnat said at one point. &amp;ldquo;Everything changes.&amp;rdquo; The sometimes fractious attitudes encountered on the various Perl mailing lists were discussed. &amp;ldquo;In some ways this is a meritocracy,&amp;rdquo; Gnat confessed. &amp;ldquo;Write good patches and we will love you.&amp;rdquo; Kirrily &amp;ldquo;Skud&amp;rdquo; Robert then spoke at length on the future of the core Perl modules, and on the need to develop guidelines to direct the process of porting them to Perl 6.&lt;/p&gt;

&lt;p&gt;Finally, the plenary session Friday afternoon closed the conference with another presentation from, you guessed it, Damian Conway. Our Mr. Conway took the opportunity to thank Yet Another Society and its sponsors for all of the contributions that permitted him to take a year off from academia to work exclusively on Perl. He then reviewed some of the fruits of that labor to date, including NEXT.pm, Inline::Files and the brilliant Filter::Simple, all of which, it should be pointed out, are now freely available to the community.&lt;/p&gt;

&lt;p&gt;It has been nearly a year since Jon Orwant&amp;rsquo;s now-legendary coffee-mug-tossing tantrum at TPC4 touched off the decision to begin work on Perl 6. After the grueling RFC process, the endless mailing list discussions and the breathless wait to see what Larry would come through with, Perl 6 the language and Perl 6 the community finally appear to be taking shape right before our eyes. New innovations are coming along more and more often, including &lt;a href=&#34;http://localhost:1313/pub/2001/05/03/wall.html&#34;&gt;Larry&amp;rsquo;s Apocalypses&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/pub/2001/02/inline.html&#34;&gt;Brian&amp;rsquo;s Inline modules&lt;/a&gt;, all of the potential emerging from the Web services meme, the future of the CPAN, new projects like Reefknot &amp;ndash; including continuing projects such as POE and Mason &amp;ndash; and, last but not least, whatever the heck it is that Damian is working on this week.&lt;/p&gt;

&lt;p&gt;The Yet Another Perl Conferences are evolving, as well. Although neither Larry nor Randal nor Orwant could make it this year, the turnout was nevertheless such that, no matter where you looked at the conference, there you might find someone you knew from IRC, from the mailing lists, from previous conferences or for the great work that person had done for Perl. Although I&amp;rsquo;ve only touched on some highlights, there were dozens of presenters at this year&amp;rsquo;s conference, practically all of them had something fascinating to say, and I really wish I had more time and space to cover them all.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s safe to say that YAPC::NA clearly defined its own existence as a growing concern of the community this year, having at last separated from its birthplace at Carnegie Mellon in Pittsburgh. Montreal, as it turns out, is a fantastic, vibrant place to hold a summer conference, with countless magnificent restaurants and bars suitable for hosting the heady after-hours carousings of the Perl community. From every report, a good time was had by nearly all, and I think we all eagerly await the next YAPC::America::North, wherever it may be held.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl 6 Alive and Well! Introducing the perl6-mailing-lists Digest</title>
      <link>http://localhost:1313/pub/2001/02/14/p6p.html/</link>
      <pubDate>Wed, 14 Feb 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/02/14/p6p.html/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;What *is* going on over there, anyway? It is unfortunately true that the effort looks stalled from the outside.&amp;rdquo;&lt;/em&gt;
    - Eric S. Raymond, to the &lt;a href=&#34;http://www.mail-archive.com/perl6-meta@perl.org/msg00622.html&#34;&gt;perl6-meta&lt;/a&gt; mailing list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The push towards the next major version of perl started with a bang &amp;ndash; literally, thanks to Jon Orwant and his &lt;a href=&#34;http://www.mail-archive.com/perl6-meta@perl.org/msg00409.html&#34;&gt;now-infamous&lt;/a&gt; coffee-mug-tossing act. Mailing lists were set up, a flurry of RFCs were submitted, and now, almost five months since the RFC process ended&amp;hellip; Quiet. What *is* going on with perl6, anyway?&lt;/p&gt;

&lt;p&gt;As it stands now, the silence is mostly due to the fact a lot of the work has gone underground. First, of course, we continue to wait eagerly for Larry&amp;rsquo;s language design, although as Larry himself &lt;a href=&#34;http://lwn.net/2001/features/LarryWall/&#34;&gt;points out&lt;/a&gt;, he&amp;rsquo;s got his hands full with the 361 RFCs submitted last fall. Elsewhere, work continues at a steady murmur, especially on the &lt;code&gt;perl6-language&lt;/code&gt; and &lt;code&gt;perl6-internals&lt;/code&gt; lists. In particular, the &lt;code&gt;perl6-internals&lt;/code&gt; group, led by the redoubtable Dan Sugalski, has borne some recent fruits, as discussions have started to coalesce into &amp;ldquo;Perl Design Documents,&amp;rdquo; or PDDs.&lt;/p&gt;

&lt;p&gt;PDDs are detailed white papers that will hopefully serve as guides when people actually sit down to write code. So far, PDDs have been submitted to &lt;code&gt;perl6-internals&lt;/code&gt; relating to the structures of the interpreter itself, and of &lt;code&gt;vtables&lt;/code&gt;, which will be used to implement primitive variables, like scalars. More PDDs are expected on other language-independent features, like garbage collection and I/O abstraction, which will need to be implemented somehow, regardless of what Larry&amp;rsquo;s final language design looks like. Some preliminary code for the perl6 interpreter might even be written in the next month or so, once the existing PDDs are finalized.&lt;/p&gt;

&lt;p&gt;So, contrary to all outward appearances, perl6 is indeed alive and well! In order to remedy this information deficit, Simon Cozens has stepped forward, and volunteered a companion to his perl5-porters digest. As such, the O&amp;rsquo;Reilly Network is pleased to introduce the first edition of the &lt;strong&gt;perl6 mailing lists digest&lt;/strong&gt;. Simon plans to set up e-mail distribution (analogous to the p5p digest), so we&amp;rsquo;ll be sure to let you know when that happens. Meanwhile, the perl6 digest will become a regular weekly feature of www.perl.com, hot off the mailing lists to you. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;this-week-on-perl6-04-11-feb-2001&#34;&gt;This week on perl6 (04&amp;ndash;11 Feb 2001)&lt;/h2&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;perl6-thisweek-YYYYMM@simon-cozens.org&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month.&lt;/p&gt;

&lt;p&gt;This week was reasonably quiet, seeing around 350 messages in all the groups. For a change, most of the traffic was on &lt;code&gt;perl6-language&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-autoloading-modules-autoloading-modules-span&#34;&gt;&lt;span id=&#34;Autoloading_Modules&#34;&gt;Autoloading Modules&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last week, Dan asked people to think about ways to autoload modules when a function was used; the idea being that you&amp;rsquo;d be able to say, for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    socket(SOCK, PF_INET, SOCK_STREAM, $proto);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(or moral equivalent) and Perl would load in all the socket functions. This is actually what Perl 5 already does for &lt;code&gt;glob&lt;/code&gt; and some of the Unicode functionality. Some people went off on a bit of a tangent and started discussing ways to autoload modules more generally, by having modules declare what functionality they&amp;rsquo;re providing.&lt;/p&gt;

&lt;p&gt;One big question for both sub-discussions was how we key the functions to code. Jarkko said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A gut feeling that I have is we can&amp;rsquo;t simply go by interface &amp;lsquo;names&amp;rsquo;, be they just simple names of funtions/methods or their full &amp;lsquo;signatures&amp;rsquo; (let us not even start on (1) how difficult with Perl&amp;rsquo;s type system and functions it is to define signatures (2) the difficulty in defining an ontology/vocabulary), either would not really be enough.&lt;/p&gt;

&lt;p&gt;What I think is needed is some sort of opaque tag: the name of the &amp;lsquo;contract&amp;rsquo; the API claims to fulfill. The name can be the name of the standard, the name of the company, the name of the individual.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Branden suggested that a URI should be used, leading to the inevitable but still horribly scary notion of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use autoload { Bar =&amp;gt; &#39;http://www.cpan.org/modules/Bar&#39; },
                 { Baz =&amp;gt; &#39;ftp://my.local.domain/perl-modules/Baz&#39;, VERSION
                 =&amp;gt; 2 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Various people pointed out that this might not be secure.&lt;/p&gt;

&lt;h3 id=&#34;span-id-packaging-packaging-span&#34;&gt;&lt;span id=&#34;Packaging&#34;&gt;Packaging&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The autoloaded core functions idea got slightly left by the wayside, as the discussion finally veered off onto how to package up modules and programs to satisfy dependencies and make things easy for the user. A setup similar to Java&amp;rsquo;s &amp;ldquo;jar&amp;rdquo;s was suggested. Dan came up with the very simple and neat idea of simply shipping a bytecode compiled version of a program instead. Schwern was a bit concerned that this would lose source code and would separate out documentation; Dan&amp;rsquo;s brilliant answer was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not unless you strip the bytecode. I want to optionally package the source in the bytecode, since otherwise you can&amp;rsquo;t do some optimizations after the fact on the generated bytecode stream.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also suggested a text segment in bytecode so that, for instance, you can still get POD embedded in code.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s something that may well happen anyway, but Branden came back on the packaging issue. He noted that Dan&amp;rsquo;s suggestion wouldn&amp;rsquo;t help for modules with C extensions, and also said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Actually, I think the archive approach is more general, because it wouldn&amp;rsquo;t have this kind of problems and would allow other resources to be deployed together with the code, like documentation, perhaps even text files and images used by a Perl/Tk application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comparisons were made between this and the currently-existing PPM. Branden produced a &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg05694.html&#34;&gt;draft PDD&lt;/a&gt; for his ideas.&lt;/p&gt;

&lt;h3 id=&#34;span-id-vtables-vtables-span&#34;&gt;&lt;span id=&#34;Vtables&#34;&gt;Vtables&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;At long last, Dan produced the second PDD, specifying &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg02305.html&#34;&gt;the vtable API&lt;/a&gt;. As expected, this exposed a lot of hidden confusion about what vtables are for and how they&amp;rsquo;re going to be handled. Tim piped up with a few questions and corrections, including a discussion about how string handling is going to work, especially string encoding. Dan said he deliberately left UTF8 off, because dealing with variable-length data is horrid. Most people disagreed, saying that UTF32 was too big for most people, and UTF8 was a good compromise for most data. It was generally agreed that an abstracted string handling layer would make most of the problem go away.&lt;/p&gt;

&lt;p&gt;Edwin Steiner asked whether the vtable API should be made up of macros; I pointed out that this was the road that Perl 5 went down, and look what happened to that. Dan also said that there wouldn&amp;rsquo;t be an &amp;ldquo;API&amp;rdquo; for vtables - they&amp;rsquo;re to be used by the Perl guts only.&lt;/p&gt;

&lt;p&gt;There was still a lot of confusion as to how overloading and aliasing would be accomplished. Branden came up with an alternative suggestion for how to handle vtables, which seemed to be rather more high-level. The current vtable PDD wants to make many core ops a single vtable call if possible. There seemed to be much confusion about how the &lt;code&gt;key&lt;/code&gt; field worked, and what operation was being carried out on what. No doubt further revisions of the PDD will clear this up. Dan also said that once the PDD has matured a little more, he wants to start writing code for the base classes. We&amp;rsquo;re nearly there, guys&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-subroutine-return-values-subroutine-return-values-span&#34;&gt;&lt;span id=&#34;Subroutine_return_values&#34;&gt;Subroutine return values&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There was a lot of light but very little heat in the continuing saga of assigning to a magic return value variable. Some people seem to want to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub foo {
        foo = 10;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;instead of &lt;code&gt;return 10&lt;/code&gt;, just like Pascal, Algol and all those other failed, now-dead languages.&lt;/p&gt;

&lt;p&gt;A (slightly) better suggestion was a magic variable to hold the return value, similar to what &lt;code&gt;Parse::RecDescent&lt;/code&gt; (and of course, &lt;code&gt;yacc&lt;/code&gt;) does. The names &lt;code&gt;$__&lt;/code&gt; and &lt;code&gt;$^R&lt;/code&gt; were suggested, but there was no consensus on whether or not it would even be a good idea.&lt;/p&gt;

&lt;h3 id=&#34;span-id-end-of-scope-actions-end-of-scope-actions-span&#34;&gt;&lt;span id=&#34;End_of_Scope_Actions&#34;&gt;End of Scope Actions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A far better idea came out when people stopped looking at what they wanted and started looking at why they wanted it. A lot of the value in having a assignable return value is in the situation of subroutines which set something up, compute, and then turn it down again. Another way of looking at that was to stipulate a block executed at the end of the scope, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sub lines {
        open IN, $_ or die $!;
        return scalar(&amp;lt;in&amp;gt;);
    }
    post lines { # This is executed on return
        close IN;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damian had, of course, thought ahead, and this is covered by his &lt;a href=&#34;http://dev.perl.org/rfc/271.html&#34;&gt;RFC 271&lt;/a&gt;. However, he agreed that post-block actions should be allowed everywhere, not just on subroutines. The &lt;code&gt;always&lt;/code&gt; keyword was agreed upon as a good way of doing this, although &lt;code&gt;POST&lt;/code&gt; was also suggested. This lead to the semi-inevitable rehash of the &lt;code&gt;try&lt;/code&gt;- &lt;code&gt;catch&lt;/code&gt; exception handling debate. According to John Porter,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is no &lt;code&gt;try&lt;/code&gt;, there is only &lt;code&gt;do&lt;/code&gt;. :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-garbage-collection-garbage-collection-span&#34;&gt;&lt;span id=&#34;Garbage_Collection&#34;&gt;Garbage Collection&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jamie Zawinski published his &lt;a href=&#34;http://www.jwz.org/doc/java.html&#34;&gt;rant about Java&lt;/a&gt;, which caused certain sensible people to ponder how to make sure Perl avoids the same mistakes. A few of the things mentioned included platform independence, the size of SVs, locking, but the discussion settled down to garbage collection, as rather a lot of discussions on &lt;code&gt;perl6-internals&lt;/code&gt; are wont to do. (Oh, this was on &lt;code&gt;perl6-language&lt;/code&gt;. Ho hum.)&lt;/p&gt;

&lt;p&gt;The trigger was a question from Branden:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I actually don&amp;rsquo;t understand how traversing a graph can be faster than incrementing/decrementing/testing for zero on a refcount. I believe you, but I just don&amp;rsquo;t understand. Could you point me to some URLs that talk about this?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and a masterful answer from Piers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a jolly good book on this called (would you believe) &amp;lsquo;Garbage Collection&amp;rsquo;. The crux of the matter would appear to be that with refcounts you have to do a pretty small amount of work very, very often. With a well designed GC system you do a largish amount of work much less frequently. The total amount of work done tends to come out higher in the refcounting scenario.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was coupled with a &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg05693.html&#34;&gt;more comprehensive answer&lt;/a&gt; from Ken Fox. Dan said he wanted to put GC-related data at the end of a variable, so that it didn&amp;rsquo;t always get loaded into memory. He also pointed out that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The less memory you chew through the faster your code will probably be (or at least you&amp;rsquo;ll have less overhead). Reuse is generally faster and less resource-intensive than recycling. What&amp;rsquo;s true for tin cans is true for memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and hinted that Perl 6 is likely to be using a generational semi-space garbage collection scheme.&lt;/p&gt;

&lt;h3 id=&#34;span-id-kdb-kdb-span&#34;&gt;&lt;span id=&#34;kdb&#34;&gt;kdb&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Joshua Pritikin mentioned &lt;a href=&#34;http://www.kx.com/&#34;&gt;kdb&lt;/a&gt;, but had to be tortured before he would explain why. It eventually became clear he was talking about the K language and its interesting data model; he says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whether K is ultimately a failure or not, i find it to be an interesting mix of design trade-offs. Of course i&amp;rsquo;d have to use it in a real project to offer a detailed report of its weaknesses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-esr-on-perl-6-esr-on-perl-6-span&#34;&gt;&lt;span id=&#34;ESR_on_Perl_6&#34;&gt;ESR on Perl 6&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Eric Raymond released two more chapters of his on-line book &lt;a href=&#34;http://www.tuxedo.org/~esr/writings/taoup&#34;&gt;The Art of Unix Programming&lt;/a&gt;, something Perl 6 people would do well to read. Unfortunately, he wasn&amp;rsquo;t particularly complimentary about Perl, claiming that both Perl 5 and Perl 6 are currently stagnant and stalled. This led to a rather acrimonious discussion about our public image, and it was resolved that these summaries might help us let the public know what&amp;rsquo;s going on. So here we are.&lt;/p&gt;

&lt;p&gt;And there we were. Until next week I remain, your humble and obedient servant,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:simon@brecon.co.uk&#34;&gt;Simon Cozens&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

