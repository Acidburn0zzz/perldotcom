<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casey West on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/casey-west/</link>
    <description>Recent content in Casey West on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 May 2004 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/casey-west/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building Testing Libraries</title>
      <link>http://localhost:1313/pub/2004/05/07/testing.html/</link>
      <pubDate>Fri, 07 May 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/05/07/testing.html/</guid>
      <description>

&lt;p&gt;Testing is an important step in developing any important body of work. In today&amp;rsquo;s pragmatic culture, we&amp;rsquo;re taught to test first, test often, and design with tests. The expectation is that chanting &amp;ldquo;test test test&amp;rdquo; forgives all sins. To a large extent, this is true. Testing helps us produce quality software at all scales.&lt;/p&gt;

&lt;p&gt;The extreme code produced by this extreme lifestyle hides in the test suite itself. Often the ugliest code we write resides in files with a .t extension. Riddled with redundant, ghastly expressions, the test suite is the collateral damage on our road to beautiful production code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s review some common pitfalls made when testing. Many of these testing procedures may be new to you. Serious headway has been made in recent history with the testing libraries on the CPAN.&lt;/p&gt;

&lt;h3 id=&#34;span-id-a-test-file-is-just-a-program-a-test-file-is-just-a-program-span&#34;&gt;&lt;span id=&#34;A_Test_File_is_Just_a_Program&#34;&gt;A Test File is Just a Program&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Each test file is a program, just as important as any other program you&amp;rsquo;d write that uses software being tested. It must be treated with the same care. If you plan to use &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; in a program related to the code you&amp;rsquo;re testing, be sure to do the same in your tests.&lt;/p&gt;

&lt;p&gt;Each test file should start with these three lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/path/to/perl
  use strict;
  use warnings;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you plan to run your software in a taint-checked environment, which is considered a good idea, then supply the &lt;code&gt;-T&lt;/code&gt; command-line option to the &lt;code&gt;#!&lt;/code&gt; line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/path/to/perl -T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ensure that you won&amp;rsquo;t make syntactic mistakes in your test files. It will also require your software to work correctly in a restricted environment.&lt;/p&gt;

&lt;h3 id=&#34;span-id-be-compatible-with-test-harness-be-compatible-with-test-harness-span&#34;&gt;&lt;span id=&#34;Be_Compatible_with_Test::Harness&#34;&gt;Be Compatible with &lt;code&gt;Test::Harness&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Test::Harness&lt;/code&gt; is a very useful Perl module for running test suites. If you are building a Perl module yourself, and using &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; or &lt;code&gt;Module::Build&lt;/code&gt; for the build process, you&amp;rsquo;re using &lt;code&gt;Test::Harness&lt;/code&gt;. If you aren&amp;rsquo;t using any of these mechanisms, do try to be compatible with it. This will help other users and developers of your software who are used to dealing with &lt;code&gt;Test::Harness&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Compatibility comes in the form of the test file&amp;rsquo;s output. &lt;code&gt;Test::Harness&lt;/code&gt; will run your program and record its output to &lt;code&gt;STDOUT&lt;/code&gt;. Anything sent to &lt;code&gt;STDERR&lt;/code&gt; is ignored, silently passed on to the user. There are particulars about testing under the harness that should be observed. The basics are simple.&lt;/p&gt;

&lt;p&gt;When a test passes, it outputs a line containing &lt;code&gt;ok $N&lt;/code&gt;, where &lt;code&gt;$N&lt;/code&gt; is the test number. When a test fails, the line contains &lt;code&gt;not ok $N&lt;/code&gt;. Test numbers are optional but recommended. Tests may be named. Anything after the number, &lt;code&gt;$N&lt;/code&gt;, is considered the test name, up to a hash (&lt;code&gt;#&lt;/code&gt;). Anything following the hash is a comment.&lt;/p&gt;

&lt;p&gt;Furthermore, you are encouraged to supply a header. The header tells &lt;code&gt;Test::Harness&lt;/code&gt; how many tests you expect to run and should be the first thing you output. If you&amp;rsquo;re unsure of the number of tests, the header may be the very last thing output. Its format is also simple: &lt;code&gt;1..$M&lt;/code&gt;, where &lt;code&gt;$M&lt;/code&gt; is the total number of tests to run. The header helps the harness figure out how well your tests did.&lt;/p&gt;

&lt;p&gt;Any other output should be commented on lines beginning with a hash (&lt;code&gt;#&lt;/code&gt;). Here is an example of prototypical output understood by &lt;code&gt;Test::Harness&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1..4
  ok 1 - use Software::Module
  ok 2 - object isa Software::Module
  not ok 3 - $object-&amp;gt;true() should return true
  #     Failed test (test.t)
  #          got: undef
  #     expected: 1
  ok 4 # skip Net::DNS required for this test
  # Looks like you failed 1 tests of 4.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-use-a-testing-module-use-a-testing-module-span&#34;&gt;&lt;span id=&#34;Use_a_Testing_Module&#34;&gt;Use a Testing Module&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A simple way to achieve &lt;code&gt;Test::Harness&lt;/code&gt; compatibility is to use a testing module from the CPAN. Many test suites over the years have reinvented the &lt;code&gt;ok()&lt;/code&gt; function, for example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
    my $N = 1;
    sub ok($;$) {
        my ($test, $name) = @_;
        print &amp;quot;not &amp;quot; unless $test;
        print &amp;quot;ok $N - $name\n&amp;quot;;
        $N++;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no need to do this, however. The standard Perl distribution comes with testing modules. Two great options are &lt;code&gt;Test::Simple&lt;/code&gt; and &lt;code&gt;Test::More&lt;/code&gt;. &lt;code&gt;Test::Simple&lt;/code&gt; is a great way to get your feet wet; it implements only the &lt;code&gt;ok()&lt;/code&gt; function. &lt;code&gt;Test::More&lt;/code&gt; has more features and is recommended when you write your test suites.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;Test::More&lt;/code&gt; is very simple; many have written on the subject. This is how you would achieve the output described in the previous section.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl -T
  use strict;
  use warnings;
  use Test::More tests =&amp;gt; 4;

  use_ok &#39;Software::Module&#39;;
  my $object = Software::Module-&amp;gt;new;
  isa_ok $object, &#39;Software::Module&#39;, &#39;object&#39;;
  cmp_ok $object-&amp;gt;true, 1, &#39;$object-&amp;gt;true() should return true&#39;;

  SKIP: {
      skip 1, &amp;quot;Net::DNS required for this test&amp;quot;
        unless eval &#39;require Net::DNS&#39;;

      ok $object-&amp;gt;network(), &amp;quot;run over network&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-don-t-iterate-compare-don-t-iterate-compare-span&#34;&gt;&lt;span id=&#34;Don&#39;t_Iterate,_Compare&#34;&gt;Don&amp;rsquo;t Iterate, Compare&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve often seen tests that loop over a list and check each item to be sure the list is correct. While this approach makes you feel good, artificially adding to the number of tests you&amp;rsquo;ve written, it can be sloppy and long-winded. Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my @fruits = qw[apples oranges grapes];
  my @result = get_fruits();
  foreach my $n ( 0 .. $#fruits ) {
      is $result[$n], $fruits[$n], &amp;quot;$fruits[$n] in slot $n&amp;quot;;
  }
  is scalar(@result), scalar(@fruits), &amp;quot;fruits the same size&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks like four tests were written; the reality is that one test was written poorly. &lt;code&gt;Test::More&lt;/code&gt; has several utility functions to get the job done. In this test, &lt;code&gt;@fruits&lt;/code&gt; represents a set of non-repeatable &lt;code&gt;fruits&lt;/code&gt; I expect to get back from &lt;code&gt;get_fruits()&lt;/code&gt;. As such, I can use &lt;code&gt;eq_set()&lt;/code&gt; to test this function in one quick try.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my @fruits = qw[apples oranges grapes];
  my @result = get_fruits();
  ok eq_set(\@result, \@fruits), &amp;quot;got [@fruits]&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was easy and short. But what happens when you have a deep data structure that you&amp;rsquo;re dying to test? That&amp;rsquo;s where &lt;code&gt;Test::Deep&lt;/code&gt; comes in. Downloadable from the CPAN, this module provides the &lt;code&gt;cmp_deeply()&lt;/code&gt; function. Here is a simple example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Test::Deep;
  my $people = [
    {
      name     =&amp;gt; &amp;quot;Casey West&amp;quot;,
      employer =&amp;gt; &amp;quot;pair Networks&amp;quot;,
    },
    {
      name     =&amp;gt; &amp;quot;Larry Wall&amp;quot;,
      employer =&amp;gt; &amp;quot;The Perl Foundation&amp;quot;,
    },
  ];

  my $result = $dude-&amp;gt;contacts-&amp;gt;retrieve_all;

  cmp_deeply $result, $people, &#39;contacts match&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example scratched the surface of what &lt;code&gt;Test::Deep&lt;/code&gt; is capable of. When you&amp;rsquo;ve got to test a complex data structure, especially in a complex way, use this module. Here is a more difficult example made testable by this module. In this example, &lt;code&gt;$dude-&amp;gt;contacts-&amp;gt;retrieve_all&lt;/code&gt; returns an unordered list of contacts with various bits of information associated with each of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Test::Deep;
  my $person = {
    name     =&amp;gt; re(&amp;quot;^[\w\s]+$&amp;quot;),
    employer =&amp;gt; ignore(),
    age      =&amp;gt; code(sub { shift &amp;gt; 18 }),
  };
  my $people = array_each($person);
  my $result = $dude-&amp;gt;contacts-&amp;gt;retrieve_all;

  cmp_deeply $result, $people, &#39;contacts match&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code, using only functions exported by &lt;code&gt;Test::Deep&lt;/code&gt;, does a lot of work. Each person has a definition that should match &lt;code&gt;$person&lt;/code&gt;. Every person in the &lt;code&gt;$result&lt;/code&gt; list is a hash reference containing three elements. &lt;code&gt;name&lt;/code&gt; must match the regular expression &lt;code&gt;/^[\w\s]+$/&lt;/code&gt;, &lt;code&gt;employer&lt;/code&gt; must exist and its value is ignored, and &lt;code&gt;age&lt;/code&gt; should be over &lt;code&gt;18&lt;/code&gt; or it will fail. &lt;code&gt;array_each()&lt;/code&gt; returns an object that instructs &lt;code&gt;cmp_deeply&lt;/code&gt; that every value in a list must match the definition provided.&lt;/p&gt;

&lt;p&gt;This small amount of code accomplishes quite a lot. &lt;code&gt;Test::Deep&lt;/code&gt; has saved us from wasting time and working hard to solve a difficult problem. It has made the hard things possible.&lt;/p&gt;

&lt;h3 id=&#34;span-id-don-t-let-pod-go-unchecked-don-t-let-pod-go-unchecked-span&#34;&gt;&lt;span id=&#34;Don&#39;t_Let_POD_go_Unchecked&#34;&gt;Don&amp;rsquo;t Let POD go Unchecked&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Documentation is just as important as code, or tests. There are several ways to care for POD in your test suite. First, it&amp;rsquo;s important to keep it well-formed. For this, we turn to &lt;code&gt;Test::Pod&lt;/code&gt;. This Perl module takes all the work out of testing POD with a useful function &lt;code&gt;all_pod_files_ok()&lt;/code&gt;. Simply create a new test program with the following contents.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Test::More;
  plan skip_all =&amp;gt; &amp;quot;Test::Pod 1.00 required for testing POD&amp;quot;
    unless eval &amp;quot;use Test::Pod 1.00&amp;quot;;
  all_pod_files_ok();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it really is that simple. When you run this program, it will test all the POD it finds in your &lt;em&gt;blib&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;Another simple test we can run on the documentation is coverage analysis. What good is documentation if it doesn&amp;rsquo;t document completely? &lt;code&gt;Test::Pod::Coverage&lt;/code&gt; is the right module for the job, yet another gem that hides all the hard work from us with a simple function, &lt;code&gt;all_pod_coverage_ok()&lt;/code&gt;. Again, we&amp;rsquo;ll create a new test program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Test::More;
  plan skip_all =&amp;gt; &amp;quot;Test::Pod::Coverage 1.08 required for testing POD coverage&amp;quot;
    unless eval &amp;quot;use Test::Pod::Coverage 1.08&amp;quot;;
  all_pod_coverage_ok();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Coverage is only half of the battle. Remember, &lt;code&gt;Test::Pod::Coverage&lt;/code&gt; can&amp;rsquo;t tell you if your documentation is actually correct and thorough.&lt;/p&gt;

&lt;p&gt;In both of these examples, we use the &lt;code&gt;plan&lt;/code&gt; function exported from &lt;code&gt;Test::More&lt;/code&gt; to allow us to &amp;ldquo;bail out&amp;rdquo; of our tests if the appropriate Perl module isn&amp;rsquo;t installed. This makes our POD tests optional. If you don&amp;rsquo;t want them to be optional, remove that line and be sure to list them as prerequisites for building and installing your software.&lt;/p&gt;

&lt;h3 id=&#34;span-id-know-what-you-re-testing-know-what-you-re-testing-span&#34;&gt;&lt;span id=&#34;Know_What_You&#39;re_Testing&#34;&gt;Know What You&amp;rsquo;re Testing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;One of the biggest testing mistakes is to assume that you know what you&amp;rsquo;re testing. Tests are designed to exercise your software. Let your test exercise the good and bad portions of your software. Make it succeed and, most importantly, make it fail. Superior test coverage digs deep into every line of code you&amp;rsquo;ve written. How do you know if your tests are amazing? Coverage analysis.&lt;/p&gt;

&lt;p&gt;Code coverage isn&amp;rsquo;t something you can guess; you need good tools. Perl has a good tool: &lt;code&gt;Devel::Cover&lt;/code&gt;. This module creates a database that maps actual execution to your source code. It analyzes statements, branches, conditions, subroutines, and even POD and execution time. It then provides a total for all of these areas, as well as a total for each Perl module. It&amp;rsquo;s very simple to use, adding just a little to your &lt;code&gt;make test&lt;/code&gt; process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;gt; cover -delete
  &amp;gt; HARNESS_PERL_SWITCHES=-MDevel::Cover make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first command deletes any existing coverage database. On the second line we set an environment variable for &lt;code&gt;Test::Harness&lt;/code&gt;, &lt;code&gt;HARNESS_PERL_SWITCHES&lt;/code&gt; to a Perl command-line switch that imports &lt;code&gt;Devel::Caller&lt;/code&gt;. This is all that&amp;rsquo;s required of you. Each of your test programs will now run with &lt;code&gt;Devel::Caller&lt;/code&gt; loaded and analyzing execution in the background.&lt;/p&gt;

&lt;p&gt;To see your coverage database on the command line, issue one command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;gt; cover
  ---------------------------- ------ ------ ------ ------ ------ ------ ------
  File                           stmt branch   cond    sub    pod   time  total
  ---------------------------- ------ ------ ------ ------ ------ ------ ------
  blib/lib/List/Group.pm         94.7   66.7   33.3  100.0  100.0  100.0   81.6
  Total                          94.7   66.7   33.3  100.0  100.0  100.0   81.6
  ---------------------------- ------ ------ ------ ------ ------ ------ ------

  Writing HTML output to ~/cvs/perl/modules/List-Group/cover_db/coverage.html ...
  done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I could&amp;rsquo;ve done better. But what did I fail to test? Notice that &lt;code&gt;cover&lt;/code&gt; wrote some HTML output. That is the diamond in the rough; the HTML output details everything. Each module has its own series of web pages detailing each of the coverage groups. I did particularly poorly on the conditional coverage &amp;ndash; let&amp;rsquo;s see how.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_05_07_testing/figure1.jpg&#34; width=&#34;405&#34; height=&#34;290&#34; /&gt;
Now it&amp;rsquo;s become clear. My tests never allow either of the two statements in this condition to succeed. All of my tests make the first statement fail; the second is never executed. I need to update my tests with at least two more for &lt;code&gt;100.0&lt;/code&gt; conditional coverage. The first test will supply a non-number for the &lt;code&gt;$number&lt;/code&gt; variable. The second will supply a value for the &lt;code&gt;$group_by&lt;/code&gt; variable that doesn&amp;rsquo;t exist in the list for which &lt;code&gt;grep&lt;/code&gt; is looking.&lt;/p&gt;

&lt;p&gt;Testing for coverage is a noble goal. I find this method very useful when writing tests for existing software. There are many situations you may think you&amp;rsquo;re testing well. Don&amp;rsquo;t guess; know. Coverage analysis is equally useful for new development. If you&amp;rsquo;ve adopted the &amp;ldquo;test first&amp;rdquo; method and your coverage isn&amp;rsquo;t 100 percent, something is wrong. Either your tests need help, or you&amp;rsquo;ve written more code than originally required.&lt;/p&gt;

&lt;h3 id=&#34;span-id-keep-test-files-organized-keep-test-files-organized-span&#34;&gt;&lt;span id=&#34;Keep_Test_Files_Organized&#34;&gt;Keep Test Files Organized&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl software distributions follow several widely adopted guidelines concerning tests. The rules are simple: test files should reside in a &lt;em&gt;t/&lt;/em&gt; directory, and each test file ends in a .t extension. &lt;code&gt;Test::Harness&lt;/code&gt; understands these rules and &lt;code&gt;make test&lt;/code&gt; will run every file that abides by them.&lt;/p&gt;

&lt;p&gt;The filename can be anything you like. It&amp;rsquo;s a good idea to use descriptive filenames instead of just digits or numerical words. Good examples are &lt;em&gt;pod-coverage.t&lt;/em&gt;, &lt;em&gt;software-class-api.t&lt;/em&gt;, and &lt;em&gt;compile.t&lt;/em&gt;. Sometimes it&amp;rsquo;s desirable to determine the order in which your test files will be run. In these cases, prefix the filename with a number. If you want compilation tests to run first and POD tests last, name them accordingly as &lt;em&gt;00-compile.t&lt;/em&gt; and &lt;em&gt;99-pod-coverage.t&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-looking-ahead-looking-ahead-span&#34;&gt;&lt;span id=&#34;Looking_Ahead&#34;&gt;Looking Ahead&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Testing can be a tedious, difficult job. By this point, you have a number of helpful tools to make the task easier. There are many more testing modules on the CPAN that could have been covered here; I encourage you to explore them all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Photo Galleries with Mason and Imager</title>
      <link>http://localhost:1313/pub/2004/04/01/masongal.html/</link>
      <pubDate>Thu, 01 Apr 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/04/01/masongal.html/</guid>
      <description>

&lt;p&gt;Creating a photo gallery is usually considered a daunting task. Lots of people have tried it, not many have succeeded. One of the reasons for so many similar projects is that they don&amp;rsquo;t often integrate well into an existing web site. In this article we&amp;rsquo;re going to build a photo gallery using two important components, Mason and Imager. Writing our gallery in Mason will make it much easier to integrate into an existing web site.&lt;/p&gt;

&lt;p&gt;Mason, also known as &lt;a href=&#34;https://metacpan.org/pod/HTML::Mason&#34;&gt;&lt;code&gt;HTML::Mason&lt;/code&gt;&lt;/a&gt;, is a web application framework written in Perl. Mason can run in any environment, but is tuned to work best with mod_perl. We will be using a number of Mason features in this article. If you&amp;rsquo;re not familiar with Mason I suggest you &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;get the book&lt;/a&gt; or &lt;a href=&#34;http://masonbook.com&#34;&gt;browse&lt;/a&gt; before you buy. This article is not meant to be an introduction to Mason, so some experience will definitely help when reading this. Mason idioms will be briefly reviewed when they come up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Imager&#34;&gt;&lt;code&gt;Imager&lt;/code&gt;&lt;/a&gt; is a Perl module for dealing with images. It has mechanisms to manipulate an image, and read and write various formats. It&amp;rsquo;s rather lightweight and has a clean interface in comparison to the alternative, &lt;a href=&#34;https://metacpan.org/pod/Image::Magick&#34;&gt;&lt;code&gt;Image::Magick&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Combining these two Perl modules, and adding a few others, allows us to write a feature-full photo gallery in just 200 lines. Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h3 id=&#34;span-id-apache-configuration-apache-configuration-span&#34;&gt;&lt;span id=&#34;Apache_Configuration&#34;&gt;Apache Configuration&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to use Mason from mod_perl for our gallery. This requires an Apache built with mod_perl, and bit of web server configuration.&lt;/p&gt;

&lt;p&gt;First, Mason&amp;rsquo;s Apache handler must be pre-loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  PerlModule HTML::Mason::ApacheHandler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to tell Apache to let Mason handle any requests that it gets for resources within our gallery.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;Location /gallery&amp;gt;
    SetHandler perl-script
    PerlHandler HTML::Mason::ApacheHandler
  &amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to keep special Mason files secret from the general public. If they&amp;rsquo;re requested, Apache should always return a &lt;code&gt;404&lt;/code&gt; HTTP status code, for &lt;em&gt;Not Found&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;LocationMatch &amp;quot;(dhandler|autohandler)$&amp;quot;&amp;gt;
    SetHandler perl-script
    PerlInitHandler Apache::Constants::NOT_FOUND
  &amp;lt;/LocationMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, every file inside the gallery will be considered a Mason component. If you enjoy paying for lots of bandwidth and you want the full-size images to be viewable by the public, one last configuration step must occur. The raw images are not Mason components so Apache should handle those in the default way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;Location /gallery/images&amp;gt;
    SetHandler default
  &amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-directory-structure-directory-structure-span&#34;&gt;&lt;span id=&#34;Directory_Structure&#34;&gt;Directory Structure&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;For this article we&amp;rsquo;ll use the following directory structure, in a directory called &lt;em&gt;gallery&lt;/em&gt;, inside our site &lt;code&gt;DocumentRoot&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .
  |-- autohandler
  |-- dhandler
  |-- images
  |   `-- dhandler
  |-- index.html
  `-- pictures
      `-- [lots of images and sub-directories]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all the actual photos will be uploaded to the &lt;em&gt;gallery/pictures&lt;/em&gt; directory. Our code will recognize sub-galleries and allow for infinite nesting. We can keep our photos very neatly organized this way.&lt;/p&gt;

&lt;p&gt;As for the rest, it&amp;rsquo;s all code. &lt;em&gt;autohandler&lt;/em&gt; and &lt;em&gt;dhandler&lt;/em&gt; are special Mason files, and &lt;em&gt;index.html&lt;/em&gt; is just a wrapper around the top level &lt;em&gt;dhandler&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-autohandler-the-autohandler-span&#34;&gt;&lt;span id=&#34;The_autohandler&#34;&gt;The &lt;em&gt;autohandler&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;For this example, our &lt;em&gt;autohandler&lt;/em&gt; is extremely simple. I&amp;rsquo;m going to assume that you already have a Mason site running with your own &lt;em&gt;autohandler&lt;/em&gt; wrappers in place. If you don&amp;rsquo;t, you can use this one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .title&amp;gt;My Website&amp;lt;/%method&amp;gt;

  &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;&amp;lt;&amp;amp; SELF:.title &amp;amp;&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;% $m-&amp;gt;call_next %&amp;gt;
    &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing our &lt;em&gt;autohandler&lt;/em&gt; does is define a subcomponent called &lt;code&gt;.title&lt;/code&gt;. Mason subcomponents are wrapped in &lt;code&gt;&amp;lt;%method&amp;gt;&lt;/code&gt; blocks. They are templates just like files; the only difference is they live inside the files. This is analogous to Perl files and subroutines.&lt;/p&gt;

&lt;p&gt;Next we define the skeleton of the web page. The &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag&amp;rsquo;s content is dynamically generated by the output of the &lt;code&gt;SELF:.title&lt;/code&gt; subcomponent. Any time you want to call a subcomponent, the call is wrapped in &lt;code&gt;&amp;lt;&amp;amp; &amp;amp;&amp;gt;&lt;/code&gt; delimiters.&lt;/p&gt;

&lt;p&gt;The body, or content, of our web page will be provided by whatever component is next in the call stack. Using the global variable to access Mason object, &lt;code&gt;$m&lt;/code&gt;, the &lt;code&gt;call_next()&lt;/code&gt; method is executed to do just that.&lt;/p&gt;

&lt;p&gt;In our gallery the next component in the call stack will be one of two files. If we&amp;rsquo;re at the topmost level, &lt;code&gt;http://example.com/gallery/&lt;/code&gt;, for example, &lt;em&gt;index.html&lt;/em&gt; will be called. Everywhere else &lt;em&gt;dhandler&lt;/em&gt; will be called. This is because no files exist for Mason to map to, and when that happens, Mason looks for a &lt;em&gt;dhandler&lt;/em&gt; to execute.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-invisible-index-the-invisible-index-span&#34;&gt;&lt;span id=&#34;The_Invisible_Index&#34;&gt;The Invisible Index&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dhandlers&lt;/code&gt; are default handlers for files inside a directory, and not that directory itself. Because of this we are required to provide an &lt;em&gt;index.html&lt;/em&gt; file or Apache will attempt to display a directory listing, or possibly return a &lt;em&gt;forbidden&lt;/em&gt; status code, if directory listings are not allowed. In reality, our &lt;em&gt;index.html&lt;/em&gt; doesn&amp;rsquo;t do anything at all.&lt;/p&gt;

&lt;p&gt;In its entirety, &lt;em&gt;index.html&lt;/em&gt; simply states that it inherits from &lt;em&gt;dhandler&lt;/em&gt;. Now &lt;em&gt;dhandler&lt;/em&gt; will be executed for all non-image access to our photo gallery.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%flags&amp;gt;
    inherit =&amp;gt; &#39;dhandler&#39;
  &amp;lt;/%flags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uncovers a portion of Mason&amp;rsquo;s object-like component inheritance. By default, all components inherit from &lt;em&gt;autohandler&lt;/em&gt;. For &lt;em&gt;index.html&lt;/em&gt; we&amp;rsquo;ve changed that. &lt;em&gt;dhandler&lt;/em&gt; still inherits from &lt;em&gt;autohandler&lt;/em&gt;, so anytime a request is sent to &lt;em&gt;index.html&lt;/em&gt;, &lt;em&gt;dhandler&lt;/em&gt; is first called, which calls &lt;em&gt;autohandler&lt;/em&gt; first. Then &lt;em&gt;autohandler&lt;/em&gt; does its thing and moves down the call stack to &lt;em&gt;dhandler&lt;/em&gt;. &lt;em&gt;dhandler&lt;/em&gt;, as we&amp;rsquo;ll see, is not configured to call down the stack to &lt;em&gt;index.html&lt;/em&gt;, because it doesn&amp;rsquo;t need to. Thus ends the very high-level overview of Mason inheritance.&lt;/p&gt;

&lt;h3 id=&#34;span-id-displaying-gallery-pages-displaying-gallery-pages-span&#34;&gt;&lt;span id=&#34;Displaying_Gallery_Pages&#34;&gt;Displaying Gallery Pages&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Moving on to the meat of our application, the top-level &lt;em&gt;dhandler&lt;/em&gt;. This file has the bulk of our code, roughly 150 lines. The code is neatly organized into subcomponents, so we&amp;rsquo;ll start by discussing the high-level code. And from that we&amp;rsquo;ll work in order of execution.&lt;/p&gt;

&lt;p&gt;Each page in our photo gallery has just one optional argument, a page number. By default we always start on page one (&lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
    $page =&amp;gt; 1
  &amp;lt;/%args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the &lt;code&gt;&amp;lt;%shared&amp;gt;&lt;/code&gt; block is executed. It does a lot, so we&amp;rsquo;ll look at it in great detail. We&amp;rsquo;re using a &lt;code&gt;&amp;lt;%shared&amp;gt;&lt;/code&gt; block instead of an &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block because some of the variables defined here need to be used within multiple subcomponents. As the name suggests, &lt;code&gt;&amp;lt;%shared&amp;gt;&lt;/code&gt; blocks allow just that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%shared&amp;gt;
    use List::Group qw[group];
    use HTML::Table;
    use File::Spec::Functions qw[:ALL];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first step is to load the Perl modules this component will be using. &lt;a href=&#34;https://metacpan.org/pod/List::Group&#34;&gt;&lt;code&gt;List::Group&lt;/code&gt;&lt;/a&gt; turns a flat list into a List-of-Lists (LoL) based on specific grouping options, &lt;a href=&#34;https://metacpan.org/pod/HTML::Table&#34;&gt;&lt;code&gt;HTML::Table&lt;/code&gt;&lt;/a&gt; turns such an LoL into an HTML table structure, and &lt;a href=&#34;https://metacpan.org/pod/File::Spec::Functions&#34;&gt;&lt;code&gt;File::Spec::Functions&lt;/code&gt;&lt;/a&gt; provides a number of portable file and directory operations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $GALLERY_ROOT = $r-&amp;gt;document_root . &amp;quot;/gallery/pictures&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we define the first shared variable. &lt;code&gt;$GALLERY_ROOT&lt;/code&gt; is the absolute path to the location of the gallery pictures on the file system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    (my $path_from_uri = $m-&amp;gt;dhandler_arg) =~ s!(?:(?:/index)?\.html|/)$!!;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to determine the relative path to the resource being requested. Because we&amp;rsquo;re inside a &lt;em&gt;dhandler&lt;/em&gt;, Mason provides the &lt;code&gt;dhandler_arg()&lt;/code&gt; method, which is similar in purpose to Apache&amp;rsquo;s &lt;code&gt;uri()&lt;/code&gt; method. It returns the portion of a URI that is relative to the directory containing the &lt;em&gt;dhandler&lt;/em&gt;. If we request &lt;code&gt;/gallery/Family/IMG_0001.JPG.html&lt;/code&gt;, &lt;code&gt;$m-&amp;gt;dhandler_arg()&lt;/code&gt; will return &lt;code&gt;/Family/IMG_0001.JPG.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we&amp;rsquo;re looking for the path to an actual photo or gallery directory, there is some information to be removed from the end of our relative path. So our regex removes useless information such as index files, HTML extensions, and extra backslashes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $file = catdir $GALLERY_ROOT, $path_from_uri;
    $m-&amp;gt;clear_buffer and $m-&amp;gt;abort(404) unless -e $file;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From these two variables we can construct the absolute path to the file we&amp;rsquo;re interested in using &lt;code&gt;catdir()&lt;/code&gt;, from &lt;code&gt;File::Spec::Functions&lt;/code&gt;. If this file doesn&amp;rsquo;t exist, we don&amp;rsquo;t want to go any further, so Mason&amp;rsquo;s output buffer is cleared and the request is aborted immediately with a &lt;code&gt;404&lt;/code&gt; HTTP status code, meaning &lt;em&gt;Not Found&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If a gallery is being requested, not a specific photo, we must get the contents of that gallery. If a photo is being requested, we must get the contents of the gallery that photo belongs to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $dir = -d $file ? $file : (splitpath $file)[1];
    opendir DIR, $dir or die $!;
    my $dir_list = [ map &amp;quot;$dir/$_&amp;quot;, grep { ! /^\./ } readdir DIR ];
    closedir DIR;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a file test operator, we can determine if the current request is for a file or a directory. If a directory we simply assign &lt;code&gt;$file&lt;/code&gt; to &lt;code&gt;$dir&lt;/code&gt;. If a file, we use &lt;code&gt;splitpath()&lt;/code&gt; from &lt;code&gt;File::Spec::Functions&lt;/code&gt;. &lt;code&gt;splitpath()&lt;/code&gt; returns three elements, the volume, directory tree, and filename. We&amp;rsquo;re after the directory tree, or second element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$dir_list&lt;/code&gt; array reference is populated with a list of absolute paths to each file in &lt;code&gt;$dir&lt;/code&gt;, excluding files that begin with a dot (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to move on to building the breadcrumbs for navigation. This method of navigating &amp;ldquo;up&amp;rdquo; the photo gallery is important because we can have infinite levels of sub-galleries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @bread_crumb = (&#39;Gallery&#39;, splitdir $path_from_uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we define our plain-text list of crumbs in &lt;code&gt;@bread_crumb&lt;/code&gt;. The first element is the name of our photo gallery, which I imaginatively named &lt;em&gt;Gallery&lt;/em&gt;. The rest of our breadcrumbs come from &lt;code&gt;$path_from_uri&lt;/code&gt; by calling &lt;code&gt;splitpath()&lt;/code&gt; to get the list of elements.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;@bread_crumb&lt;/code&gt; list is great for the title of the page, but it doesn&amp;rsquo;t contain any links for use inside the page for navigation. A new list of breadcrumbs will be created with correct linking.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @bread_crumb_href;
    push @bread_crumb_href, sprintf &#39;&amp;lt;a href=&amp;quot;/gallery/%s&amp;quot;&amp;gt;%s&amp;lt;/a&amp;gt;&#39;,
      join(&#39;/&#39;,@bread_crumb[1..$_]), $bread_crumb[$_]
        for 0 .. $#bread_crumb - 1;
    push @bread_crumb_href, $bread_crumb[-1];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each breadcrumb except the very last, we create an HTML link. The reference location for each link, from left to right, needs to cumulatively add directories from the links before it. That&amp;rsquo;s what &lt;code&gt;join(&#39;/&#39;,@bread_crumb[1..$_])&lt;/code&gt; does. Finally we tack on the last element of the breadcrumb, unlinked, because it is the currently requested resource.&lt;/p&gt;

&lt;p&gt;To illustrate, if a request is made to &lt;code&gt;/gallery/Backgrounds/Nature%20Backgrounds/ICmiddleFalls1280x1024.jpg.html&lt;/code&gt;, the following list is in &lt;code&gt;@bread_crumb_href&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (
   &#39;&amp;lt;a href=&amp;quot;/gallery/&amp;quot;&amp;gt;Gallery&amp;lt;/a&amp;gt;&#39;,
   &#39;&amp;lt;a href=&amp;quot;/gallery/Backgrounds&amp;quot;&amp;gt;Backgrounds&amp;lt;/a&amp;gt;&#39;,
   &#39;&amp;lt;a href=&amp;quot;/gallery/Backgrounds/Nature Backgrounds&amp;quot;&amp;gt;Nature Backgrounds&amp;lt;/a&amp;gt;&#39;,
   &#39;ICmiddleFalls1280x1024.jpg&#39;
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we construct two scalars to hold the contents of our breadcrumbs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $bread_crumb      = join &#39; &amp;amp;middot; &#39;, @bread_crumb;
    my $bread_crumb_href = join &#39; &amp;amp;middot; &#39;, @bread_crumb_href;
  &amp;lt;/%shared&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we can define the &lt;code&gt;.title&lt;/code&gt; subcomponent, using the &lt;code&gt;$bread_crumb&lt;/code&gt; shared variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .title&amp;gt;&amp;lt;&amp;amp; PARENT:.title &amp;amp;&amp;gt; &amp;amp;middot; &amp;lt;% $bread_crumb %&amp;gt;&amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there is a subcomponent call to &lt;code&gt;PARENT:.title&lt;/code&gt;. This is another illustration of Mason&amp;rsquo;s inheritance model. Because &lt;em&gt;dhandler&lt;/em&gt; &lt;strong&gt;inherits&lt;/strong&gt; from &lt;em&gt;autohandler&lt;/em&gt;, the &lt;code&gt;.title&lt;/code&gt; subcomponent in &lt;em&gt;dhandler&lt;/em&gt; is overriding the &lt;code&gt;.title&lt;/code&gt; method in &lt;em&gt;autohandler&lt;/em&gt;. That is to say, &lt;em&gt;dhandler&lt;/em&gt; is &lt;strong&gt;subclassing&lt;/strong&gt; &lt;em&gt;autohandler&lt;/em&gt;. For this reason, if we don&amp;rsquo;t want to clobber the &lt;code&gt;.title&lt;/code&gt; subcomponent declared in &lt;em&gt;autohandler&lt;/em&gt; we must be sure to call our parent. This is very similar to invoking a &lt;code&gt;SUPER::&lt;/code&gt; method in Perl.&lt;/p&gt;

&lt;p&gt;Now we can move on to the actual gallery display.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;h1&amp;gt;Photo Gallery&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;% $bread_crumb_href %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using another shared variable, &lt;code&gt;$bread_crumb_href&lt;/code&gt;, we construct our backward navigation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td valign=&amp;quot;top&amp;quot; width=&amp;quot;15%&amp;quot;&amp;gt;
        &amp;lt;&amp;amp; SELF:.sub_gal_list, dir_list =&amp;gt; $dir_list &amp;amp;&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td valign=&amp;quot;top&amp;quot; width=&amp;quot;35%&amp;quot;&amp;gt;
        &amp;lt;&amp;amp; SELF:.photo_list, dir_list =&amp;gt; $dir_list, page =&amp;gt; $page &amp;amp;&amp;gt;
      &amp;lt;/td&amp;gt;
      &amp;lt;td valign=&amp;quot;top&amp;quot; width=&amp;quot;50%&amp;quot;&amp;gt;
  % if ( -f $file ) {
        &amp;lt;&amp;amp; SELF:.photo_view, file =&amp;gt; $file &amp;amp;&amp;gt;
  % }
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have three columns of information to display at any one time &amp;ndash; an HTML table is a good way to do that. (Some standards purists and XHTML masochists will disagree with me on this point. I&amp;rsquo;m interested in keeping the examples simple, not pure.) Each of the table cells calls a subcomponent with the appropriate arguments. Those subcomponents are discussed in detail later in this article. Notice that before we call &lt;code&gt;SELF:.photo_view&lt;/code&gt; we check to see if the request is currently for a file. This can save us from calling that subcomponent if we currently don&amp;rsquo;t want to look at a photo.&lt;/p&gt;

&lt;p&gt;The first subcomponent called is &lt;code&gt;SELF:.sub_gal_list&lt;/code&gt;. As the name suggests, it will list sub-galleries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .sub_gal_list&amp;gt;
    &amp;lt;%args&amp;gt;
      @dir_list
      $wrap =&amp;gt; 1
    &amp;lt;/%args&amp;gt;

    &amp;lt;h3&amp;gt;Sub &amp;lt;% @dir_list == 1 ? &amp;quot;Gallery&amp;quot; : &amp;quot;Galleries&amp;quot; %&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;% $table %&amp;gt;

    &amp;lt;%init&amp;gt;
      @dir_list = grep { -d $_ } @dir_list;
      return unless @dir_list;
      $_ = $m-&amp;gt;scomp(&#39;SELF:.sub_gal_view&#39;,dir =&amp;gt; $_) for @dir_list;
      my $table = HTML::Table-&amp;gt;new(-data =&amp;gt; [ group \@dir_list, cols =&amp;gt; $wrap ]);
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.sub_gal_list&lt;/code&gt; accepts a directory listing argument. It also optionally accepts an argument detailing after how many entries in the list should be in each row.&lt;/p&gt;

&lt;p&gt;Jumping to the &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block (remember the order of execution?), we filter the directory listing to exclude any entries that are not directories themselves. If that produces an empty list, there&amp;rsquo;s no need to continue processing this subcomponent, so just &lt;code&gt;return&lt;/code&gt;. Next, each of the entries are reformatted by passing them to the &lt;code&gt;SELF:.sub_gal_view&lt;/code&gt; method. This is where it gets fun.&lt;/p&gt;

&lt;p&gt;When a subcomponent is called, it&amp;rsquo;s really just syntactic sugar to call &lt;code&gt;$m-&amp;gt;comp()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;&amp;amp; SELF:.sub_gal_view, dir =&amp;gt; $_ &amp;amp;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous statement is exactly equivalent to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  % $m-&amp;gt;comp( &#39;SELF:.sub_gal_view&#39;, dir =&amp;gt; $_ );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mason also defines the &lt;code&gt;scomp()&lt;/code&gt; method, which compiles a subcomponent but returns its output as a string, just like Perl&amp;rsquo;s &lt;code&gt;sprintf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After reformatting the entries, we group the flat list into a List-of-Lists containing just one column. That list is used as the value of the &lt;code&gt;-data&lt;/code&gt; parameter to &lt;code&gt;HTML::Table-&lt;/code&gt;new()&amp;gt;, which returns a table object.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to process the template portion. First a heading is created. It&amp;rsquo;s only plural if we have more than one sub-gallery. After the heading the sub-gallery table is displayed. Because an &lt;code&gt;HTML::Table&lt;/code&gt; object overloads stringify, there&amp;rsquo;s no need to call a method on it to get the HTML output.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s quickly look at the &lt;code&gt;.sub_gal_view&lt;/code&gt; subcomponent used to reformat each directory listing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .sub_gal_view&amp;gt;
    &amp;lt;%args&amp;gt;
      $dir
    &amp;lt;/%args&amp;gt;
    &amp;lt;a href=&amp;quot;/gallery/&amp;lt;% $rel_dir %&amp;gt;&amp;quot;&amp;gt;&amp;lt;% $label %&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;%init&amp;gt;
      my $rel_dir = abs2rel $dir, $GALLERY_ROOT;
      my $label   = (splitpath $rel_dir)[-1];
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This subcomponent is extremely straightforward. It accepts a directory. Inside &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt;, &lt;code&gt;$rel_dir&lt;/code&gt; is set to the relative directory path in relation to the &lt;code&gt;$GALLERY_ROOT&lt;/code&gt;, which will give us a proper URL for the link. Finding the label for the link is simple, it is the real directory name, which is the last element of the list returned by &lt;code&gt;splitpath()&lt;/code&gt;, from &lt;code&gt;File::Spec::Functions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This subcomponent finally generates the proper link for navigating to sub-galleries.&lt;/p&gt;

&lt;p&gt;The next subcomponent called by our top-level component is &lt;code&gt;.photo_list&lt;/code&gt;, which generates the thumbnail view of our images.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .photo_list&amp;gt;
    &amp;lt;%args&amp;gt;
      @dir_list
      $wrap =&amp;gt; 5
      $rows =&amp;gt; 7
      $page =&amp;gt; 1
    &amp;lt;/%args&amp;gt;

    &amp;lt;h3&amp;gt;&amp;lt;% @dir_list == 1 ? &amp;quot;Photo&amp;quot; : &amp;quot;Photos&amp;quot; %&amp;gt;
        &amp;lt;&amp;amp; SELF:.photo_pager, page =&amp;gt; $page, pages =&amp;gt; $pages &amp;amp;&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;% $table %&amp;gt;

    &amp;lt;%init&amp;gt;
      @dir_list = grep { -f $_ } @dir_list;
      return unless @dir_list;
      $_ = $m-&amp;gt;scomp(&#39;SELF:.thumb_view&#39;,file =&amp;gt; $_, page =&amp;gt; $page)
        for @dir_list;
      my @files = group \@dir_list, cols =&amp;gt; $wrap;

      my $pages  = int( @files / $rows );
         $pages += 1 if $pages &amp;lt; ( @files / $rows );
      @files = splice @files, $rows * ($page - 1), $rows;

      my $table = HTML::Table-&amp;gt;new(-data =&amp;gt; \@files);
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like &lt;code&gt;.sub_gal_list&lt;/code&gt;, the only required argument to this component is the directory listing. The other optional arguments correspond to how many images should be in each row (&lt;code&gt;$wrap&lt;/code&gt;), how many rows to show on a page (&lt;code&gt;$rows&lt;/code&gt;), and what page we&amp;rsquo;re currently on (&lt;code&gt;$page&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once again we jump to the &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block where the directory listing is filtered to only include files. If there are no files, there&amp;rsquo;s no reason to go any further, so just &lt;code&gt;return&lt;/code&gt; from this subcomponent. Just as we did with sub-gallery listings, we reformat the remaining list of files by calling a subcomponent and storing its output. Next, we group the list of files into a List-of-Lists (LoL), each row containing &lt;code&gt;$wrap&lt;/code&gt; entries.&lt;/p&gt;

&lt;p&gt;Photo galleries may contain any number of photos, so it&amp;rsquo;s essential to support paging for thumbnails. First we need to determine how many pages this gallery will have in total. To do that we divide the total number of rows by the number of rows we want on each page. That could return a fractional number that will be cut off to the nearest decimal by &lt;code&gt;int&lt;/code&gt;. If that&amp;rsquo;s the case then we want to increment the number of pages by one (&lt;code&gt;1&lt;/code&gt;). Next we can extract the rows for our current page from all the rows currently in &lt;code&gt;@files&lt;/code&gt; using a &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, a new &lt;code&gt;HTML::Table&lt;/code&gt; object is created, and populated with &lt;code&gt;@files&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the template portion a header is output, again only using the plural if we have more than one photo. Our header also contains paging information, provided by the &lt;code&gt;.photo_pager&lt;/code&gt; subcomponent. Lastly, the HTML table full of thumbnails is displayed.&lt;/p&gt;

&lt;p&gt;Speaking of thumbnails, it&amp;rsquo;s time to look at the code in the &lt;code&gt;.thumb_view&lt;/code&gt; subcomponent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .thumb_view&amp;gt;
    &amp;lt;%args&amp;gt;
      $file
      $page
    &amp;lt;/%args&amp;gt;
      &amp;lt;a href=&amp;quot;/gallery/&amp;lt;% $rel_img %&amp;gt;.html?page=&amp;lt;% $page %&amp;gt;&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;/gallery/images/&amp;lt;% $rel_img %&amp;gt;?xsize=50;ysize=40&amp;quot; border=&amp;quot;0&amp;quot; /&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;%init&amp;gt;
      my $rel_img = abs2rel $file, $GALLERY_ROOT;
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component takes two arguments. &lt;code&gt;$file&lt;/code&gt; is the image to be turned into a thumbnail, and &lt;code&gt;$page&lt;/code&gt; is the current page of this gallery. The &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block just finds the relative path of this image from the &lt;code&gt;$GALLERY_ROOT&lt;/code&gt;. In the template the thumbnail is linked to the HTML file that this image would be displayed on, and includes the current page information as a means of saving that state.&lt;/p&gt;

&lt;p&gt;The source of the image points to a file under &lt;em&gt;/gallery/images&lt;/em&gt;, and includes query parameters for maximum width (&lt;code&gt;xsize&lt;/code&gt;) and height (&lt;code&gt;ysize&lt;/code&gt;). This is interesting because the pictures don&amp;rsquo;t live there at all. If you recall, the only thing inside the &lt;em&gt;images&lt;/em&gt; directory was a &lt;em&gt;dhandler&lt;/em&gt;. More on that later.&lt;/p&gt;

&lt;p&gt;The other subcomponent that &lt;code&gt;.photo_list&lt;/code&gt; called was &lt;code&gt;.photo_pager&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .photo_pager&amp;gt;
    &amp;lt;%args&amp;gt;
      $page
      $pages
    &amp;lt;/%args&amp;gt;
    (
  % for ( 1 .. $pages ) {
  %   if ( $_ == $page ) {
        &amp;lt;strong&amp;gt;&amp;lt;% $page %&amp;gt;&amp;lt;/strong&amp;gt;
  %   } else {
        &amp;lt;a href=&amp;quot;?page=&amp;lt;% $_ %&amp;gt;&amp;quot;&amp;gt;&amp;lt;% $_ %&amp;gt;&amp;lt;/a&amp;gt;
  %   }
      &amp;lt;% $_ != $pages ? &amp;quot;&amp;amp;middot;&amp;quot; : &amp;quot;&amp;quot; %&amp;gt;
  % }
    )
    &amp;lt;%init&amp;gt;
      return if $pages == 1;
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This subcomponent takes two arguments, the current page and the total number of pages. Before anything is output, the &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block checks to make sure we have more than one page. If not, no sense in going on. Looping through all the page numbers, we link all the numbers except our current page. After every number except the last one, we output a stylish separator. This subcomponent is very simple, but big enough that it&amp;rsquo;s worth abstracting from the &lt;code&gt;.photo_list&lt;/code&gt; subcomponent.&lt;/p&gt;

&lt;p&gt;The final subcomponent in the top-level &lt;em&gt;dhandler&lt;/em&gt; is &lt;code&gt;.photo_view&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%method .photo_view&amp;gt;
    &amp;lt;%args&amp;gt;
      $file
    &amp;lt;/%args&amp;gt;
    &amp;lt;h3&amp;gt;Photo&amp;lt;/h3&amp;gt;
    &amp;lt;img src=&amp;quot;/gallery/images/&amp;lt;% $rel_image %&amp;gt;?xsize=400x;ysize=300&amp;quot; /&amp;gt;
    &amp;lt;%init&amp;gt;
      my $rel_image = abs2rel $file, $GALLERY_ROOT;
    &amp;lt;/%init&amp;gt;
  &amp;lt;/%method&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component does things that we&amp;rsquo;ve already seen done in &lt;code&gt;.thumb_view&lt;/code&gt;, so there&amp;rsquo;s no need to expound upon it here.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-images-dhandler-the-images-dhandler-span&#34;&gt;&lt;span id=&#34;The_Images_dhandler&#34;&gt;The Images &lt;em&gt;dhandler&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve probably guessed by now that we intend to use Mason to process images. Mason is well suited to outputting many forms of data, not just text, and we&amp;rsquo;ll be exploiting that fact for our image gallery.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
    $xsize =&amp;gt; undef
    $ysize =&amp;gt; undef
  &amp;lt;/%args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component accepts two parameters that we&amp;rsquo;ve already described. &lt;code&gt;$xsize&lt;/code&gt; is the maximum width an image can be, and &lt;code&gt;$ysize&lt;/code&gt; is the maximum height an image can be.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%flags&amp;gt;
    inherit =&amp;gt; undef
  &amp;lt;/%flags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the important part. Because components have inheritance, the &lt;em&gt;dhandler&lt;/em&gt; would normally inherit from the &lt;em&gt;autohandler&lt;/em&gt;. That&amp;rsquo;s bad news when the &lt;em&gt;autohandler&lt;/em&gt; is tuned to sending out HTML and our &lt;em&gt;dhandler&lt;/em&gt; is trying to send binary image data. Setting the &lt;code&gt;inherit&lt;/code&gt; flag to &lt;code&gt;undef&lt;/code&gt; tells Mason that the &lt;em&gt;dhandler&lt;/em&gt; doesn&amp;rsquo;t inherit anything, that it&amp;rsquo;s responsible for its own output.&lt;/p&gt;

&lt;p&gt;The only code remaining in this template resides in the &lt;code&gt;&amp;lt;%init&amp;gt;&lt;/code&gt; block, so let&amp;rsquo;s step through that now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%init&amp;gt;
    $m-&amp;gt;clear_buffer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The very first thing we do is clear Mason&amp;rsquo;s output buffer. This clears any headers that have already been built up in the buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Imager;
    use File::Type;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we use the modules that will help scale the images, &lt;code&gt;Imager&lt;/code&gt; and &lt;code&gt;File::Type&lt;/code&gt;. &lt;code&gt;Imager&lt;/code&gt; has already been discussed. &lt;code&gt;File::Type&lt;/code&gt; uses magic to discover the type of files, and does so in a very memory-sensitive way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $send_img = sub {
      $r-&amp;gt;content_type( &amp;quot;image/$_[0]&amp;quot; );
      $r-&amp;gt;send_http_header;
      $m-&amp;gt;print($_[1]);
      $m-&amp;gt;abort(200);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This anonymous subroutine just encapsulates code being executed twice, as a means to remove duplication. It sets the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header to the image type passed as the first argument. Next it sends the HTTP header out. Then it sends the image data out, which is the second argument passed to this subroutine. Finally, it aborts execution with an HTTP &lt;code&gt;200&lt;/code&gt; status code, everything is &lt;em&gt;OK&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ( my $file = $r-&amp;gt;document_root . $r-&amp;gt;uri ) =~ s/images/pictures/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Discovering the proper file name for the image takes just a little work. After concatenating the &lt;code&gt;document_root()&lt;/code&gt; with the &lt;code&gt;uri()&lt;/code&gt;, we replace the &lt;em&gt;images&lt;/em&gt; portion of the file path with &lt;em&gt;pictures&lt;/em&gt;. Remember, none of the images are actually in the &lt;em&gt;images&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my ($image, $type) = split /\//, File::Type-&amp;gt;checktype_filename($file);
    $type = &#39;png&#39; if $type eq &#39;x-png&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the knowledge of the proper file name, &lt;code&gt;File::Type&lt;/code&gt; can figure out what type of file we have. This is more foolproof than attempting a guess based on filename extensions. As a minor oddity, &lt;code&gt;File::Type&lt;/code&gt; returns a non-HTTP friendly &lt;code&gt;$type&lt;/code&gt; for PNG images, so we need to fix that problem if it exists.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $key = &amp;quot;$file|$xsize|$ysize&amp;quot;;
    if ( my $data = $m-&amp;gt;cache-&amp;gt;get( $key ) ) {
      $send_img-&amp;gt;($type, $data);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generating scaled images from huge photos is a time-consuming function. It also has the potential to eat memory like a sieve. As a result, it&amp;rsquo;s imperative that we take advantage of Mason&amp;rsquo;s built-in caching functionality. The key for each entry in our cache must be unique for each file, and the dimensions we&amp;rsquo;re trying to scale it to. Those three pieces of data will make up our &lt;code&gt;$key&lt;/code&gt;. If data is returned from the cache using the &lt;code&gt;$key&lt;/code&gt;, then the image data is sent and the request is immediately aborted. This is a quick short-circuit that allows us to grab an image from the cache and return it at the earliest possible moment. Later in the article you&amp;rsquo;ll see how to set the data into the cache.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $m-&amp;gt;abort(500) if $image ne &#39;image&#39; || ! exists $Imager::formats{$type};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible that the file being requested isn&amp;rsquo;t an image. It&amp;rsquo;s also possible that our installation of &lt;code&gt;Imager&lt;/code&gt; doesn&amp;rsquo;t support this type of image. If either of these conditions are true, we should abort immediately with a &lt;code&gt;500&lt;/code&gt; HTTP status code, &lt;em&gt;Internal Server Error&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $img  = Imager-&amp;gt;new;
    if ( $img-&amp;gt;open(file =&amp;gt; $file, type =&amp;gt; $type) ) {
        if ( $xsize ) {
          $img = $img-&amp;gt;scale( xpixels =&amp;gt; $xsize )
            unless $img-&amp;gt;getwidth &amp;lt; $xsize;
        }
        if ( $ysize ) {
          $img = $img-&amp;gt;scale( ypixels =&amp;gt; $ysize )
            unless $img-&amp;gt;getheight &amp;lt; $ysize;
        }

        my $img_data;
        $img-&amp;gt;write(data =&amp;gt; \$img_data, type =&amp;gt; $type);
        $m-&amp;gt;cache-&amp;gt;set( $key =&amp;gt; $img_data );
        $send_img-&amp;gt;($type, $img_data);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the heart and soul of image manipulation. The first step is to create a new &lt;code&gt;Imager&lt;/code&gt; object. Next we try to open the image &lt;code&gt;$file&lt;/code&gt;. If that succeeds, we can proceed to scaling the image.&lt;/p&gt;

&lt;p&gt;When scaling, it&amp;rsquo;s more important (to me) that the height of the image is exactly how I want it, so width is scaled first. Before the image is scaled its size is tested against the size of the image to be created. No scaling should occur if the image is smaller than the preferred size.&lt;/p&gt;

&lt;p&gt;Once scaling has finished the image data can be extracted from the &lt;code&gt;Imager&lt;/code&gt; object. When calling &lt;code&gt;write()&lt;/code&gt; on the object we can pass a &lt;code&gt;data&lt;/code&gt; option to let &lt;code&gt;Imager&lt;/code&gt; write to a scalar reference. After the image data has been retrieved it is placed in the cache using the same &lt;code&gt;$key&lt;/code&gt; that we first used when attempting to get information out of the cache. Finally, the image is sent out and the request is aborted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    warn &amp;quot;[$file] [$image/$type] &amp;quot; . $img-&amp;gt;errstr;
    $m-&amp;gt;abort(500);
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the event that &lt;code&gt;Imager&lt;/code&gt; wasn&amp;rsquo;t able to open the &lt;code&gt;$file&lt;/code&gt;, the request should be aborted with a &lt;code&gt;500&lt;/code&gt; HTTP status code, &lt;em&gt;Internal Server Error&lt;/em&gt;. Before abortion, however, it would be useful to get some information in the &lt;em&gt;error_log&lt;/em&gt;. The requested &lt;code&gt;$file&lt;/code&gt;, its type information, and the error produced by &lt;code&gt;Imager&lt;/code&gt; are all printed to &lt;code&gt;STDOUT&lt;/code&gt; via &lt;code&gt;warn&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-what-it-looks-like-what-it-looks-like-span&#34;&gt;&lt;span id=&#34;What_It_Looks_Like&#34;&gt;What It Looks Like&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;For the less adventurous, yet overly curious members of the audience, a screenshot of our photo gallery follows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/_pub_2004_04_01_masongal/figure_0.jpg&#34; alt=&#34;Photo Gallery Screenshot&#34; width=&#34;450&#34; height=&#34;285&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As an aside, that image was originally much larger, but I really wanted it to be just &lt;code&gt;450&lt;/code&gt; pixels wide. I don&amp;rsquo;t have any image manipulation tools to do that job, but I do have &lt;code&gt;Imager&lt;/code&gt;. Thanks to &lt;code&gt;Imager&lt;/code&gt;, it took me 30 seconds to whip up the following command line snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MImager -le&#39;Imager-&amp;gt;new-&amp;gt;open(file=&amp;gt;shift,type=&amp;gt;&amp;quot;jpeg&amp;quot;)
    -&amp;gt;scale(xpixels=&amp;gt;450)
    -&amp;gt;write(file=&amp;gt;shift,type=&amp;gt;&amp;quot;jpeg&amp;quot;)&#39; figure_0.jpg figure_0_0.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;Conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve just created a photo gallery that takes all the hard work out of maintaining photo galleries. There&amp;rsquo;s no need to pre-generate HTML or thumbnails. There&amp;rsquo;s no web application interface so you don&amp;rsquo;t have to change ownership of your gallery directory to the same user that Apache runs as. Using Mason&amp;rsquo;s built-in caching, photo galleries are nearly as fast as accessing the data directly from the file system. Well, at least on the second request. Our galleries have paging and infinite sub-galleries. Most importantly, using Mason to its full potential has given us a fully customizable, very tiny web application that can be dropped into any existing web site or framework.&lt;/p&gt;

&lt;p&gt;In fact, this code is the majority of the &lt;em&gt;faceplant&lt;/em&gt; project. The source code can be downloaded from &lt;a href=&#34;https://metacpan.org/pod/faceplant&#34;&gt;faceplant on MetaCPAN&lt;/a&gt;. &lt;em&gt;faceplant&lt;/em&gt; implements a few more features and is a bit more customizable. As such, its code is an excellent follow-up to this article. Go forth, now, and plant thy face on the Internet!
&amp;ldquo; &amp;gt;}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hidden Treasures of the Perl Core, part II</title>
      <link>http://localhost:1313/pub/2003/06/19/treasures.html/</link>
      <pubDate>Thu, 19 Jun 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/06/19/treasures.html/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;http://localhost:1313/pub/2003/05/29/treasures.html&#34;&gt;previous hidden treasures article&lt;/a&gt;, we looked at some easy-to-use (but not well-known) modules in the Perl Core. In this article, we dig deeper to uncover some of the truly precious and unique gems in the Perl Core.&lt;/p&gt;

&lt;h2 id=&#34;span-id-constant-constant-span&#34;&gt;&lt;span id=&#34;constant&#34;&gt;&lt;code&gt;constant&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;constant&lt;/code&gt; pragma is not new or unknown, but it is a nice feature enhancement. Many people have used constant. Here is a standard example of using the constant for π.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use constant PI =&amp;gt; 22/7;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;constant&lt;/code&gt;s are used in programs or modules, they are often used in a set. Older versions of Perl shipped with a &lt;code&gt;constant&lt;/code&gt; pragma that required a high level of work to produce a set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use constant SUNDAY  =&amp;gt; 0;
        use constant MONDAY  =&amp;gt; 1;
        use constnat TUESDAY =&amp;gt; 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow, that&amp;rsquo;s a lot of work! I&amp;rsquo;ve already given up on my program, not to mention the syntax error in the declaration of &lt;code&gt;TUESDAY&lt;/code&gt;. Now let&amp;rsquo;s try this again using the multiple declaration syntax, new to the &lt;code&gt;constant&lt;/code&gt; pragma for Perl 5.8.0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use constant {
                SUNDAY    =&amp;gt; 0,
                MONDAY    =&amp;gt; 1,
                TUESDAY   =&amp;gt; 2,
                WEDNESDAY =&amp;gt; 3,
                THURSDAY  =&amp;gt; 4,
                FRIDAY    =&amp;gt; 5,
                SATURDAY  =&amp;gt; 6,
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only warning here is that this syntax is new to Perl 5.8.0. If you intend to distribute a program using multiple constant declarations, then remember the limitations of the program. You may want to specify what version of Perl is required for your program to work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use 5.8.0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perl will throw a fatal error if the version is anything less than &lt;code&gt;5.8.0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-attribute-handlers-attribute-handlers-span&#34;&gt;&lt;span id=&#34;attribute::handlers&#34;&gt;&lt;code&gt;Attribute::Handlers&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This module allows us to play with Perl&amp;rsquo;s subroutine attribute syntax by defining our attributes. This is a powerful module with a rich feature set. Here I&amp;rsquo;ll give you an example of writing a minimal debugger using subroutine attributes.&lt;/p&gt;

&lt;p&gt;First, we need to create an attribute. An attribute is any subroutine that has an attribute of &lt;code&gt;:ATTR&lt;/code&gt;. Setting up our &lt;code&gt;debug&lt;/code&gt; attribute is easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Attribute::Handlers;

        sub debug :ATTR {
                my (@args) = @_;
                warn &amp;quot;DEBUG: @args\n&amp;quot;;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a simple debug attribute named &lt;code&gt;:debug&lt;/code&gt;. Using our attribute is also easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub table :debug {
                # ...
        }
        table(%data);
        table(%other_data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, since attributes are compiled just before runtime, in the &lt;code&gt;CHECK&lt;/code&gt; phase, our debugging output will only be sent to &lt;code&gt;STDERR&lt;/code&gt; once. For the code above, we might get output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DEBUG: main GLOB(0x523d8) CODE(0x2e758) debug  CHECK
           Casey  Dad
        Chastity  Mom
         Evelina  Kid
        Coffee  Oily
          Cola  Fizzy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That debug string represents some of the information we get in an attribute subroutine. The first argument is the name of the package the attribute was declared in. Next is a reference to the symbol table entry for the subroutine, followed by a reference to the subroutine itself. Next comes the name of the attribute, followed by any data associated with the attribute (none in this case). Finally, the name of the phase that invoked the handler passed.&lt;/p&gt;

&lt;p&gt;At this point, our debugging attribute isn&amp;rsquo;t useful, but the parameters we are given to work with are promising. We can use them to invoke debugging output each time the subroutine is called. Put on your hard hat, this is where things get interesting.&lt;/p&gt;

&lt;p&gt;First, let us take a look at how we want to debug our subroutine. I think we&amp;rsquo;d like different levels of debugging output. At the lowest level (&lt;code&gt;1&lt;/code&gt;), the name of the subroutine being invoked should be sent to &lt;code&gt;STDERR&lt;/code&gt;. At the next level (&lt;code&gt;2&lt;/code&gt;), it would be nice to be notified of entry and exit of the subroutine. Going further (level &lt;code&gt;3&lt;/code&gt;), we might want to see the arguments passed to the subroutine. Even more detail can be done, but we&amp;rsquo;ll save that for later and stop at three debug levels.&lt;/p&gt;

&lt;p&gt;In order to do this voodoo, we need to replace our subroutine with one doing the debugging for us. The subroutine doing the debugging must then invoke our original code with the parameters passed to it, and return the proper output from it. Here is the implementation for debug level one (&lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Attribute::Handlers;
        use constant {
                PKG    =&amp;gt; 0,
                SYMBOL =&amp;gt; 1,
                CODE   =&amp;gt; 2,
                ATTR   =&amp;gt; 3,
                DATA   =&amp;gt; 4,
                PHASE  =&amp;gt; 5,
        };
        sub debug :ATTR {
                my ($symbol, $code, $level) = @_[SYMBOL, CODE, DATA];
                $level ||= 1;

                my $name = join &#39;::&#39;, *{$symbol}{PACKAGE}, *{$symbol}{NAME};

                no warnings &#39;redefine&#39;;
                *{$symbol} = sub {
                        warn &amp;quot;DEBUG: entering $name\n&amp;quot;;
                        return $code-&amp;gt;(@_);
                };
        }
        sub table :debug {
                # ...
        }
        table(%data);
        table(%other_data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some sticky bits in the debug subroutine that I need to explain in more detail.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $name = join &#39;::&#39;, *{$symbol}{PACKAGE}, *{$symbol}{NAME};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line is used to find the name and package of the subroutine we&amp;rsquo;re debugging. We do the lookups from the symbol table, using the reference to the symbol that our attribute is given.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        no warnings &#39;redefine&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we turn off warnings about redefining a subroutine, because we&amp;rsquo;re going to redefine a subroutine on purpose.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        *{$symbol} = sub { ... };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This construct simply replaces the code section in the symbol table with this anonymous subroutine (which is a code reference).&lt;/p&gt;

&lt;p&gt;In this example, we set the default log level to one (&lt;code&gt;1&lt;/code&gt;), set up some helper variables, and replace our &lt;code&gt;table()&lt;/code&gt; subroutine with a debugging closure. I call the anonymous subroutine a closure because we are reusing some variables that are defined in the &lt;code&gt;debug()&lt;/code&gt; subroutine. Closures are explained in greater detail in &lt;em&gt;perlref&lt;/em&gt; (&lt;code&gt;perldoc perlref&lt;/code&gt; from the command line).&lt;/p&gt;

&lt;p&gt;To set the debug level for a subroutine, just a number the &lt;code&gt;:debug&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub table :debug(1) {
                # ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DEBUG: entering main::table
           Casey  Dad
        Chastity  Mom
         Evelina  Kid
        DEBUG: entering main::table
        Coffee  Oily
          Cola  Fizzy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating debug level two (&lt;code&gt;2&lt;/code&gt;) is pretty easy from here. Time stamps will also be added to the output, which are useful for calculating how long your subroutine takes to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        *{$symbol} = sub {
                warn sprintf &amp;quot;DEBUG[%s]: entering %s\n&amp;quot;,
                        scalar(localtime), $name;
                my @output = $code-&amp;gt;(@_);
                if ( $level &amp;gt;= 2 ) {
                        warn sprintf &amp;quot;DEBUG[%s]: leaving %s\n&amp;quot;,
                                scalar(localtime), $name;
                }
                return @output;
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we use &lt;code&gt;sprintf&lt;/code&gt; to make out debugging statements a little more readable as complexity grows. This time, we cannot return directly from the original code reference. Instead, we have to capture the output and return it at the end of the routine. When the &lt;code&gt;table()&lt;/code&gt; subroutine defines its debug level as &lt;code&gt;:debug(2)&lt;/code&gt; the output is thus.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DEBUG[Wed Jun 18 12:18:44 2003]: entering main::table
           Casey  Dad
        Chastity  Mom
         Evelina  Kid
        DEBUG[Wed Jun 18 12:18:44 2003]: leaving main::table
        DEBUG[Wed Jun 18 12:18:44 2003]: entering main::table
        Coffee  Oily
          Cola  Fizzy
        DEBUG[Wed Jun 18 12:18:44 2003]: leaving main::table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, debug level three (&lt;code&gt;3&lt;/code&gt;) should also print the arguments passed to the subroutine. This is a simple modification to the first debugging statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        warn sprintf &amp;quot;DEBUG[%s]: entering %s(%s)\n&amp;quot;,
                scalar(localtime), $name, ($level &amp;gt;= 3 ? &amp;quot;@_&amp;quot; : &#39;&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DEBUG[Wed Jun 18 12:21:06 2003]: entering main::table(Chastity Mom Casey Dad Evelina Kid)
           Casey  Dad
        Chastity  Mom
         Evelina  Kid
        DEBUG[Wed Jun 18 12:21:06 2003]: leaving main::table
        DEBUG[Wed Jun 18 12:21:06 2003]: entering main::table(Coffee Oily Cola Fizzy)
        Coffee  Oily
          Cola  Fizzy
        DEBUG[Wed Jun 18 12:21:06 2003]: leaving main::table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Attribute::Handlers&lt;/code&gt; can do quite a lot more than what I&amp;rsquo;ve shown you already. If you like what you see, then you may want to add attributes to variables or worse. Please read the thorough documentation provided with the module.&lt;/p&gt;

&lt;h2 id=&#34;span-id-b-deparse-b-deparse-span&#34;&gt;&lt;span id=&#34;b::deparse&#34;&gt;&lt;code&gt;B::Deparse&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This module is a well-known Perl debugging module. It generates Perl source code from Perl source code provided to it. This may seem useless to some, but to the aspiring obfuscator, it&amp;rsquo;s useful in understanding odd code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        perl -snle&#39;$w=($b=&amp;quot;bottles of beer&amp;quot;).&amp;quot; on the wall&amp;quot;;$i&amp;gt;=0?print:last
        LINE for(map &amp;quot;$i $_&amp;quot;,$w,$b),&amp;quot;take one down, pass it around&amp;quot;,
        do{$i--;&amp;quot;$i $w!&amp;quot;}&#39; -- -i=100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is an example of an obfuscated program. It could be worse, but it&amp;rsquo;s pretty bad already. Understanding this gem is as simple as adding &lt;code&gt;-MO=Deparse&lt;/code&gt; to the command line. This will use &lt;code&gt;B::Deparse&lt;/code&gt; to turn that mess into more readable Perl source code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        LINE: while (defined($_ = &amp;lt;ARGV&amp;gt;)) {
                chomp $_;
                $w = ($b = &#39;bottles of beer&#39;) . &#39; on the wall&#39;;
                foreach $_ (
                         map(&amp;quot;$i $_&amp;quot;, $w, $b),
                         &#39;take one down, pass it around&#39;,
                         do { --$i; &amp;quot;$i $w!&amp;quot; }
                       ) {
                        $i &amp;gt;= 0 ? print($_) : last LINE;
                }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use &lt;code&gt;B::Deparse&lt;/code&gt; in the everyday example, just run your program using it on the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        perl -MO=Deparse prog.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you want to have some real fun, then dig into the object-oriented interface for &lt;code&gt;B::Deparse&lt;/code&gt;. There you will find an amazing method called &lt;code&gt;coderef2text()&lt;/code&gt;. This method turns any code reference to text, just like the command line trick does for an entire program. Here is a short example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use B::Deparse;

        my $deparser = B::Deparse-&amp;gt;new;

        print $deparser-&amp;gt;coderef2text(
                sub { print &amp;quot;Hello, world!&amp;quot; }
        );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will be the code block, after it&amp;rsquo;s been deparsed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        {
        print &#39;Hello, world!&#39;;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this to add another debug level to our &lt;code&gt;Attribute::Handlers&lt;/code&gt; example. Here, debug level four (&lt;code&gt;4&lt;/code&gt;) will print out the source of our subroutine.&lt;/p&gt;

&lt;p&gt;Before our &lt;code&gt;debug()&lt;/code&gt; subroutine declaration we add the following lines of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use B::Deparse;
        my $deparser = B::Deparse-&amp;gt;new;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, our debugging closure declaration is updated to print out the full subroutine with the &lt;code&gt;DEBUG:&lt;/code&gt; prefix on each line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        *{$symbol} = sub {
                warn sprintf &amp;quot;DEBUG[%s]: entering %s(%s)\n&amp;quot;,
                        scalar(localtime), $name, ($level &amp;gt;= 3 ? &amp;quot;@_&amp;quot; : &#39;&#39; );
                if ( $level &amp;gt;= 4 ) {
                        my $sub = sprintf &amp;quot;sub %s %s&amp;quot;,
                                $name, $deparser-&amp;gt;coderef2text( $code );
                        $sub =~ s/\n/\nDEBUG: /g;
                        warn &amp;quot;DEBUG: $sub\n&amp;quot;;
                }
                my @output = $code-&amp;gt;(@_);
                if ( $level &amp;gt;= 2 ) {
                        warn sprintf &amp;quot;DEBUG[%s]: leaving %s\n&amp;quot;,
                                scalar(localtime), $name;
                }
                return @output;
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The verbose debugging output looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        DEBUG[Wed Jun 18 12:47:22 2003]: entering main::table(Chastity Mom Casey Dad Evelina Kid)
        DEBUG: sub main::table {
        DEBUG:    BEGIN {${^WARNING_BITS} = &amp;quot;UUUUUUUUUUUU&amp;quot;}
        DEBUG:    use strict &#39;refs&#39;;
        DEBUG:    my(%data) = @_;
        DEBUG:    my $length = 0;
        DEBUG:    foreach $_ (keys %data) {
        DEBUG:        $length = length $_ if length $_ &amp;gt; $length;
        DEBUG:    }
        DEBUG:    my $output = &#39;&#39;;
        DEBUG:    while (my($k, $v) = each %data) {
        DEBUG:        $output .= sprintf(&amp;quot;%${length}s  %s\n&amp;quot;, $k, $v);
        DEBUG:    }
        DEBUG:    print &amp;quot;\n$output&amp;quot;;
        DEBUG:}
           Casey  Dad
        Chastity  Mom
         Evelina  Kid
        DEBUG[Wed Jun 18 12:47:22 2003]: leaving main::table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are more methods in the &lt;code&gt;B::Deparse&lt;/code&gt; class that you can use to muck around with the results of &lt;code&gt;coderef2text()&lt;/code&gt;. This module is powerful and useful for debugging. I suggest you at least use the simple version if code becomes ambiguous and incomprehensible.&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;B::Deparse&lt;/code&gt; is good at what it does, it&amp;rsquo;s not complete. Each version of Perl has made it better, and it&amp;rsquo;s good in Perl 5.8.0. Don&amp;rsquo;t trust &lt;code&gt;B::Deparse&lt;/code&gt; to get everything right, though. For instance, I wouldn&amp;rsquo;t trust it to serialize code for later use.&lt;/p&gt;

&lt;h2 id=&#34;span-id-class-struct-class-struct-span&#34;&gt;&lt;span id=&#34;class::struct&#34;&gt;&lt;code&gt;Class::Struct&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This module, just like the &lt;code&gt;constant&lt;/code&gt; pragma, is well-known. The difference is that &lt;code&gt;Class::Struct&lt;/code&gt; is not often used. For many programs, setting up a class to represent data would be ideal, but overkill. &lt;code&gt;Class::Struct&lt;/code&gt; gives us the opportunity to live in our ideal world without the pain of setting up any classes by hand. Here is an example of creating a class with &lt;code&gt;Class::Struct&lt;/code&gt;. In this example, we&amp;rsquo;re going to use compile time-class declarations, a new feature in Perl 5.8.0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Class::Struct Person =&amp;gt; {
                name =&amp;gt; &#39;$&#39;,
                mom  =&amp;gt; &#39;Person&#39;,
                dad  =&amp;gt; &#39;Person&#39;,
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;rsquo;ve created a class called &lt;code&gt;Person&lt;/code&gt; with three attributes. &lt;code&gt;name&lt;/code&gt; can contain a simple scalar value, represented by the dollar sign (&lt;code&gt;$&lt;/code&gt;). &lt;code&gt;mom&lt;/code&gt; and &lt;code&gt;dad&lt;/code&gt; are both objects of type &lt;code&gt;Person&lt;/code&gt;. Using our class within the same program is the same as using any other class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $self = Person-&amp;gt;new( name =&amp;gt; &#39;Casey West&#39; );
        my $wife = Person-&amp;gt;new( name =&amp;gt; &#39;Chastity West&#39; );
        my $baby = Person-&amp;gt;new(
                name =&amp;gt; &#39;Evelina West&#39;,
                mom  =&amp;gt; $wife,
                dad  =&amp;gt; $self,
        );
        printf &amp;lt;&amp;lt;__FORMAT__, $baby-&amp;gt;name, $baby-&amp;gt;mom-&amp;gt;name;
        %s, daughter of %s,
        went on to cure cancer and disprove Fermat&#39;s Theorem.
        __FORMAT__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Class::Struct&lt;/code&gt; classes are simple by design, and can get more complex with further creativity. For instance, to add a method to the &lt;code&gt;Person&lt;/code&gt; class you can simply declare it in the &lt;code&gt;Person&lt;/code&gt; package. Here is a method named &lt;code&gt;birth()&lt;/code&gt; which should be called on a Person object. It takes the name of the baby as an argument, and optionally the father (a &lt;code&gt;Person&lt;/code&gt; object). Returned is a new &lt;code&gt;Person&lt;/code&gt; object representing the baby.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub Person::birth {
                my ($self, $name, $dad) = @_;
                return Person-&amp;gt;new(
                        name =&amp;gt; $name,
                        mom  =&amp;gt; $self,
                        dad  =&amp;gt; ( $dad || undef ),
                );
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These object are not meant to be persistent. If you want persistent objects, then you need to look elsewhere, perhaps &lt;code&gt;Class::DBI&lt;/code&gt; or any other implementation, of which there are many.&lt;/p&gt;

&lt;p&gt;These in-memory objects can help to clean up your code, but they add a bit of overhead. You have to decide where the balance in your program is. In most cases, using &lt;code&gt;Class::Struct&lt;/code&gt; is going to be OK.&lt;/p&gt;

&lt;h2 id=&#34;span-id-encode-encode-span&#34;&gt;&lt;span id=&#34;encode&#34;&gt;&lt;code&gt;Encode&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Encode&lt;/code&gt; is Perl&amp;rsquo;s interface to Unicode. An explanation of Unicode itself is far beyond the scope of this article. In fact, it&amp;rsquo;s far beyond the scope of most of us. This module is powerful. I&amp;rsquo;m going to provide some examples and lots of pointers to the appropriate documentation.&lt;/p&gt;

&lt;p&gt;The first function of the API to learn is &lt;code&gt;encode()&lt;/code&gt;. &lt;code&gt;encode()&lt;/code&gt; will convert a string for Perl&amp;rsquo;s internal format to a series of octets in the encoding you choose. Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Encode;
        my $octets = encode( &amp;quot;utf8&amp;quot;, &amp;quot;Hello, world!&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have turned the string &lt;em&gt;Hello, world!&lt;/em&gt; into a &lt;code&gt;utf8&lt;/code&gt; string, which is now in &lt;code&gt;$octets&lt;/code&gt;. We can also decode strings using the &lt;code&gt;decode()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $string = decode( &amp;quot;utf8&amp;quot;, $utf8_string );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ve decoded a &lt;code&gt;utf8&lt;/code&gt; string into Perl&amp;rsquo;s internal string representation. Since &lt;code&gt;utf8&lt;/code&gt; is a common encoding to deal with, there are two helper functions: &lt;code&gt;encode_utf8()&lt;/code&gt;, and &lt;code&gt;decode_utf8&lt;/code&gt;. Both of these function take a string as the argument.&lt;/p&gt;

&lt;p&gt;A list of supported encodings can be found in &lt;code&gt;Encode::Supported&lt;/code&gt;, or by using the &lt;code&gt;encodings()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my @encodings = Encode-&amp;gt;encodings;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For even more Unicode fun, dive into the documentation in &lt;code&gt;Encode&lt;/code&gt; (&lt;code&gt;perldoc Encode&lt;/code&gt; on the command line).&lt;/p&gt;

&lt;h2 id=&#34;span-id-filter-simple-filter-simple-span&#34;&gt;&lt;span id=&#34;filter::simple&#34;&gt;&lt;code&gt;Filter::Simple&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This module gives us an easy way to write source-code filters. These filters may change the behavior of calling Perl code, or implement new features of Perl, or do anything else they want. Some of the more infamous source-filter modules on the CPAN include &lt;code&gt;Acme::Bleach&lt;/code&gt;, &lt;code&gt;Semi::Semicolons&lt;/code&gt;, and even &lt;code&gt;Switch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;m going to implement a new comment syntax for Perl. Using the following source-filter package will allow you to comment your code using SQL comments. SQL comments begin with two consecutive dashes (&lt;code&gt;--&lt;/code&gt;). For our purposes, these dashes cannot be directly followed by a semicolon (&lt;code&gt;;&lt;/code&gt;) or be preceded by something other than whitespace or a the beginning of a line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        package SQLComments;
        use Filter::Simple sub {
                s/(?:^|\s)--(?!;)/#/g;
        };
        1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we create an anonymous subroutine that is passed on to &lt;code&gt;Filter::Simple&lt;/code&gt;. The entire source of the calling program is in &lt;code&gt;$_&lt;/code&gt;, and we use a regular expression to search for our SQL comments and change them to Perl comments.&lt;/p&gt;

&lt;p&gt;Using our new source filter works like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use SQLComments;
        -- Here is some code that decrements a variable.
        my $i = 100; -- start at 100.
        while ( $i ) {
                $i--; -- decrement
        }
        -- That&#39;s it!.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;B::Deparse&lt;/code&gt; on the command line, we can see what the code looks like after it&amp;rsquo;s filtered. Just remember that &lt;code&gt;B::Deparse&lt;/code&gt; doesn&amp;rsquo;t preserve comments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use SQLComments;

        my $i = 100;
        while ($i) {
            --$i;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is exactly as we expect. Filtering source code is a complex art. If your filters are not perfect, then you can break code in unexpected ways. Our &lt;code&gt;SQLComments&lt;/code&gt; filter will break the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        print &amp;quot;This is nice -- I mean really nice!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will turn into this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        print &amp;quot;This is nice# I mean really nice!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not exactly the results we want. This particular problem can be avoided, however, using &lt;code&gt;Filter::Simple&lt;/code&gt; in a slightly different way. You can specify filters for different sections of the source code, here is how we can limit our &lt;code&gt;SQLComments&lt;/code&gt; filter to just code and not quote-like constructs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        package SQLComments;

        use Filter::Simple;

        FILTER_ONLY code =&amp;gt; sub { s/(?:^|\s)--(?!;)/#/g };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about source filters, then read the documentation provided in &lt;code&gt;Filter::Simple&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-variable-utility-modules-variable-utility-modules-span&#34;&gt;&lt;span id=&#34;variable_utility_modules&#34;&gt;Variable Utility Modules&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There are some functions that are repeated in hundreds (probably thousands) of programs. Think of all the sorting functions written in C programs. Perl programs have them, too, and the following utility modules try to clean up our code, eliminating duplication is simple routines.&lt;/p&gt;

&lt;p&gt;There are a number of useful functions in each of these modules. I&amp;rsquo;m going to highlight a few, but be sure to read the documentation provided with each of them for a full list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_scalar%3a%3autil&#34;&gt;&lt;code&gt;Scalar::Util&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blessed()&lt;/code&gt; will return the package name that the variable is blessed into, or &lt;code&gt;undef&lt;/code&gt; if the variable isn&amp;rsquo;t blessed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $baby  = Person-&amp;gt;new;
        my $class = blessed $baby;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$class&lt;/code&gt; will hold the string &lt;em&gt;Person&lt;/em&gt;. &lt;code&gt;weaken&lt;/code&gt; is a function that takes a reference and makes it weak. This means that the variable will not hold a reference count on the thing it references. This is useful for objects, where you want to keep a copy but you don&amp;rsquo;t want to stop the object from being &lt;code&gt;DESTROY&lt;/code&gt;-ed at the right time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_list%3a%3autil&#34;&gt;&lt;code&gt;List::Util&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;first()&lt;/code&gt; function returns the first element in the list for which the block returns true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $person = first { $_-&amp;gt;age &amp;lt; 18 } @people;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;shuffle()&lt;/code&gt; will return the elements of the list in random order. Here is an example of breaking a group of people into teams.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my @people = shuffle @people;

        my @team1  = splice @people,  0, (@people/2);
        my @team2  = @people;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;code&gt;sum&lt;/code&gt; returns the sum of all the elements in a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $sum = sum 1 .. 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_hash%3a%3autil&#34;&gt;&lt;code&gt;Hash::Util&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#item_hash%3a%3autil&#34;&gt;&lt;code&gt;Hash::Util&lt;/code&gt;&lt;/a&gt; has a slightly different function than the previously discussed variable utility modules. This module implements restricted hashes, which are the predecessor to the undesirable (and now obsolete) pseudo-hashes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lock_keys()&lt;/code&gt; is a function that will restrict the allowed keys of a hash. If a list of keys is given, the hash will be restricted to that set, otherwise the hash is locked down to the currently existing keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Hash::Util qw[lock_keys];

        my %person = (
                name =&amp;gt; &amp;quot;Casey West&amp;quot;,
                dad  =&amp;gt; $dad,
                mom  =&amp;gt; $mom,
        );

        lock_keys( %person );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;%person&lt;/code&gt; hash is now restricted. Any keys currently in the hash may be modified, but no keys may be added. The following code will result in a fatal error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $person{wife} = $wife;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;unlock_keys()&lt;/code&gt; function to release your restricted hash.&lt;/p&gt;

&lt;p&gt;You can also lock (or unlock) a value in the hash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        lock_value( %person, &amp;quot;name&amp;quot; );
        $person{name} = &amp;quot;Bozo&amp;quot;; # Fatal error!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you can lock and unlock an entire hash, making it read only in the first case.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        lock_hash( %person );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our &lt;code&gt;%person&lt;/code&gt; hash is really restricted. No keys can be added or deleted, and no values can be changed. I know all those OO folks out there wishing Perl made it easy to keep class and instance data private are smiling.&lt;/p&gt;

&lt;h2 id=&#34;span-id-locale-modules-locale-modules-span&#34;&gt;&lt;span id=&#34;locale_modules&#34;&gt;&lt;code&gt;Locale&lt;/code&gt; Modules&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen these modules implemented time and time again. Perl 5.8.0 introduced them. Each of them implements a set of functions that handle locale issues for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_locale%3a%3alanguage&#34;&gt;&lt;code&gt;Locale::Language&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module will translate language codes to names, and vice-versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $lang = code2language( &#39;es&#39; );      # Spanish
        my $code = language2code( &#39;English&#39; ); # en
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also get a full list of supported language names and codes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my @codes = all_language_codes();
        my @names = all_language_names();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_locale%3a%3acountry&#34;&gt;&lt;code&gt;Locale::Country&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Convert country names to codes, and vice-versa. By default country codes are represented in two character codes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $code = country2code( &#39;Finland&#39; ); # fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the default behavior to get three character codes, or the numeric country codes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $code = country2code( &#39;Russia&#39;, LOCALE_CODE_ALPHA_3 ); # rus
        my $num  = country2code( &#39;Australia&#39;, LOCALE_CODE_NUMERIC ); # 036
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also go from any code type to country name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $name = code2country( &#39;jp&#39; ); # Japan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify any type of code, but if it&amp;rsquo;s not the default two character representation you must supply the extra argument to define what type it is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $name = code2country( &amp;quot;120&amp;quot;, LOCALE_CODE_NUMERIC ); # Cameroon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just as before, you can get a full list of codes and countries using the two query functions: &lt;code&gt;all_country_codes()&lt;/code&gt;, and &lt;code&gt;all_country_names()&lt;/code&gt;. Both of these functions accept an optional argument specifying the code set to use for the resulting list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_locale%3a%3acurrency&#34;&gt;&lt;code&gt;Locale::Currency&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module has the same properties as the other locale modules. You can convert currency codes into full names, and vice-versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $curr = code2currency( &#39;jpy&#39; ); # Yen
        my $code = currency2code( &#39;US Dollar&#39; ); # usd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query functions are: &lt;code&gt;all_currency_codes()&lt;/code&gt;, and &lt;code&gt;all_currency_names()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-memoize-memoize-span&#34;&gt;&lt;span id=&#34;memoize&#34;&gt;&lt;code&gt;Memoize&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Memoize&lt;/code&gt; is a module that performs code optimization for you. In a general sense, when you &lt;em&gt;memoize&lt;/em&gt; a function, it is replaced by a &lt;em&gt;memoized&lt;/em&gt; version of the same function. OK, that was too general. More specifically, every time your memoized function is called, the calling arguments are cached and anything the function returns is cached as well. If the function is called with a set of arguments that has been seen before, then the cached return value is sent back and the actual function is never called. This makes the function faster.&lt;/p&gt;

&lt;p&gt;Not all functions can be memoized. For instance, if your function would return a different value on two calls, even for the exact same set of calling arguments, then it will be broken. Only the first sets return values will be returned for every call. Many function do not act this way, and that&amp;rsquo;s what makes &lt;code&gt;Memoize&lt;/code&gt; so useful.&lt;/p&gt;

&lt;p&gt;Here is an example of a *memoize*able function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        sub add {
                my ($x, $y) = @_;
                return $x + $y;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For every time this function is called as &lt;code&gt;add( 2, 2 )&lt;/code&gt;, the result will be &lt;code&gt;4&lt;/code&gt;. Rather than compute the value of &lt;code&gt;4&lt;/code&gt; in every case, we can cache it away the first time and retrieve it from the cache every other time we need to compute &lt;code&gt;2 + 2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Memoize;

        memoize( &#39;add&#39; );

        sub add {
                my ($x, $y) = @_;
                return $x + $y;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve just made &lt;code&gt;add()&lt;/code&gt; faster, without any work. Of course, our addition function isn&amp;rsquo;t slow to begin with. The documentation of &lt;code&gt;Memoize&lt;/code&gt; gives a much more details look into this algorithm. I highly suggest you invest time in learning about &lt;code&gt;Memoize&lt;/code&gt;, it can give you wonderful speed increases if you know how and when to use it.&lt;/p&gt;

&lt;h2 id=&#34;span-id-win32-win32-span&#34;&gt;&lt;span id=&#34;win32&#34;&gt;&lt;code&gt;Win32&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;I currently don&amp;rsquo;t have a Microsoft operating system running on any of my networks, but when perusing the Perl core, I happened upon the &lt;code&gt;Win32&lt;/code&gt; module. I wanted to bring it up because if I were using a Microsoft OS, then I would find the functions in his module invaluable. Please, if you are running in that environment, then look at the documentation for &lt;code&gt;Win32&lt;/code&gt; for dozens of helpful functions (&lt;code&gt;perldoc Win32&lt;/code&gt; on the command line).&lt;/p&gt;

&lt;h2 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Just as before, I&amp;rsquo;ve still not covered all of the Perl core. There is much more to explore and a full list can be found by reading &lt;em&gt;perlmodlib&lt;/em&gt;. The benefit of having these modules in the core is great. Lots of environments require programmers to be bound to using only code that is distributed with Perl. I hope I&amp;rsquo;ve been able to lighten the load for anyone who has been put in that position (even by choice).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hidden Treasures of the Perl Core</title>
      <link>http://localhost:1313/pub/2003/05/29/treasures.html/</link>
      <pubDate>Thu, 29 May 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/05/29/treasures.html/</guid>
      <description>

&lt;p&gt;The Perl Core comes with a lot of little modules to help you get thejob done. Many of these modules are not well-known. Even some of the well-known modules have some nice features that are often overlooked. In this article, we&amp;rsquo;ll dive into many of these hidden treasures of the Perl Core.&lt;/p&gt;

&lt;h3 id=&#34;span-id-blib-blib-span&#34;&gt;&lt;span id=&#34;blib&#34;&gt;&lt;code&gt;blib&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This module allows you to use &lt;code&gt;MakeMaker&lt;/code&gt;s to-be-installed version of a package. Most of the distributions on the CPAN conform to &lt;code&gt;MakeMaker&lt;/code&gt;s building techniques. If you are writing a Perl module that has a build system, then there would be a good chance &lt;code&gt;MakeMaker&lt;/code&gt; is involved. Testing on the command line is common; I know I find myself doing it often. This is one of the places that &lt;code&gt;blib&lt;/code&gt; comes in handy. When running my test suite (you all have test suites, right?) on the command line, I&amp;rsquo;m able to execute individual tests easily.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -Mblib t/deepmagic.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are building someone elses module and find yourself debugging a testing failure, then &lt;code&gt;blib&lt;/code&gt; could be used the same way.&lt;/p&gt;

&lt;h3 id=&#34;span-id-diagnostics-diagnostics-span&#34;&gt;&lt;span id=&#34;diagnostics&#34;&gt;&lt;code&gt;diagnostics&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;PC Load Letter, what the frell does that mean?!&lt;/em&gt; &amp;ndash; Micheal Bolton&lt;/p&gt;

&lt;p&gt;When pushed hard enough, the Perl interpreter can spew out hundreds of error messages. Some of them can be quite cryptic. Running the following code snippet under the &lt;code&gt;warnings&lt;/code&gt; pragma yields the warning &lt;em&gt;Unterminated &amp;lt;&amp;gt; operator at program.perl line 11&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $i &amp;lt;&amp;lt;&amp;lt; $j;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, &lt;code&gt;diagnostics&lt;/code&gt; is an easy way to get a better explanation from Perl. Since we&amp;rsquo;re all running our important programs under the &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; pragmas, it&amp;rsquo;s easy to add &lt;code&gt;diagnostics&lt;/code&gt; to the mix.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use strict;
  use warnings;
  use diagnostics;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous code snippet now yields the following warning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Unterminated &amp;lt;&amp;gt; operator at -e line 1 (#1)
    (F) The lexer saw a left-angle bracket in a place where it was expecting
    a term, so it&#39;s looking for the corresponding right-angle bracket, and
    not finding it.  Chances are you left some needed parentheses out
    earlier in the line, and you really meant a &amp;quot;less than&amp;quot;.

  Uncaught exception from user code:
        Unterminated &amp;lt;&amp;gt; operator at program.perl line 11.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use of the &lt;code&gt;diagnostics&lt;/code&gt; pragma should be kept to development only (where it&amp;rsquo;s truly useful).&lt;/p&gt;

&lt;h3 id=&#34;span-id-benchmark-benchmark-span&#34;&gt;&lt;span id=&#34;benchmark&#34;&gt;&lt;code&gt;Benchmark&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It can be difficult to benchmark code. When trying to optimise a program or routine, you want to try several approaches and see which comes out faster. That&amp;rsquo;s what the &lt;code&gt;Benchmark&lt;/code&gt; module is for. This way, you don&amp;rsquo;t have to calculate start and stop times yourself, and in general you can do high-level profiling quickly. Here is an example that tries to determine which is faster, literal hash slices or retrieving hash values one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Benchmark;

  sub literal_slice {
    my %family = (
      Daughter =&amp;gt; &#39;Evilina&#39;,
      Father =&amp;gt; &#39;Casey&#39;,
      Mother =&amp;gt; &#39;Chastity&#39;,
    );
    my ($mom, $dad) = @family{qw[Mother Father]};
  }

  sub one_at_a_time {
    my %family = (
      Daughter =&amp;gt; &#39;Evelina&#39;,
      Father =&amp;gt; &#39;Casey&#39;,
      Mother =&amp;gt; &#39;Chastity&#39;,
    );
    my $mom = $family{Mother};
    my $dad = $family{Father};
  }

  timethese(
    5_000_000 =&amp;gt; {
      slice       =&amp;gt; \&amp;amp;literal_slice,
      one_at_time =&amp;gt; \&amp;amp;one_at_a_time,
    },
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the hardware I have at work, a dual G4 PowerMac, the answer seems obvious. Being cute and clever doesn&amp;rsquo;t hurt us too badly. Here is the output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Benchmark: timing 5000000 iterations of one_at_time, slice...
  one_at_time: 53 wallclock secs (53.63 usr +  0.00 sys = 53.63 CPU) 
         @ 93231.40/s (n=5000000)
        slice: 56 wallclock secs (56.72 usr +  0.00 sys = 56.72 CPU) 
         @ 88152.33/s (n=5000000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-cgi-pretty-cgi-pretty-span&#34;&gt;&lt;span id=&#34;cgi::pretty&#34;&gt;&lt;code&gt;CGI::Pretty&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Many of you know you can use Perl to write your HTML, in fact, this trick is often used in CGI programs. If you have used the &lt;code&gt;CGI&lt;/code&gt; module to create HTML, then it would be obvious that the output is not intended for humans to parse. The ``browser only&amp;rdquo; nature of the output makes debugging nearly impossible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use CGI qw[:standard];

  print header,
    start_html( &#39;HTML from Perl&#39; ),
    h2(&#39;Writiing HTML using Perl&#39; ),
    hr,
    p( &#39;Writing HTML with Perl is simple with the CGI module.&#39; ),
    end_html;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous program produces the following incomprehensible output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Content-Type: text/html; charset=ISO-8859-1

  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
  &amp;lt;!DOCTYPE html
          PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
           &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;;
  &amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;; lang=&amp;quot;en-US&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;HTML from Perl&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Writing 
  HTML using Perl&amp;lt;/h2&amp;gt;&amp;lt;hr /&amp;gt;&amp;lt;p&amp;gt;Writing HTML with Perl is simple with the 
  CGI module.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By changing the first line to &lt;code&gt;use CGI::Pretty qw[:standard];&lt;/code&gt;, our output is now manageable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Content-Type: text/html; charset=ISO-8859-1

  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
  &amp;lt;!DOCTYPE html
          PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;
           &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;;
  &amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;; lang=&amp;quot;en-US&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;HTML from Perl&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
  &amp;lt;h2&amp;gt;
          Writing HTML using Perl
  &amp;lt;/h2&amp;gt;
  &amp;lt;hr&amp;gt;&amp;lt;p&amp;gt;
          Writing HTML with Perl is simple with the CGI module.
  &amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While not as attractive as I&amp;rsquo;d like, there are lots of customizations to be made, all outlined in the &lt;code&gt;CGI::Pretty&lt;/code&gt; documentation.&lt;/p&gt;

&lt;h3 id=&#34;span-id-class-isa-class-isa-span&#34;&gt;&lt;span id=&#34;class::isa&#34;&gt;&lt;code&gt;Class::ISA&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The world of class inheritance is a complex and twisting maze. This module provides some functions to help us navigate the maze. The most common need is for the function &lt;code&gt;super_path()&lt;/code&gt;. When dealing with complex OO hierarchies, &lt;code&gt;super_path()&lt;/code&gt; can help us know which classes we&amp;rsquo;re inheriting from (it isn&amp;rsquo;t always obvious), and find method declarations.&lt;/p&gt;

&lt;p&gt;I have a little project that requires &lt;code&gt;Class::DBI&lt;/code&gt;, so I ran &lt;code&gt;super_path()&lt;/code&gt; on one of the classes to determine how Perl would search the inheritance tree for a method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MJobSearch -MClass::ISA -le&#39;print for 
      Class::ISA::super_path( &amp;quot;JobSearch::Job&amp;quot; )&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following list of classes is in the order Perl would search to find a method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  JobSearch::Object
  Class::DBI::mysql
  Class::DBI
  Class::DBI::__::Base
  Class::Data::Inheritable
  Class::Accessor
  Ima::DBI
  Class::WhiteHole
  DBI
  Exporter
  DynaLoader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if I have a question about a method implementation, or where methods are coming from, I have a nice list to look through. &lt;code&gt;Class::ISA&lt;/code&gt; intentionally leaves out the current class (in this case &lt;code&gt;JobSearch::Job&lt;/code&gt;), and &lt;code&gt;UNIVERSAL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a little trick that allows me to find out which classes &lt;em&gt;may&lt;/em&gt; implement the &lt;code&gt;mk_accessors&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MJobSearch -MClass::ISA -le \
    &#39;for (Class::ISA::super_path( &amp;quot;JobSearch::Job&amp;quot; )) { 
        print if $_-&amp;gt;can(&amp;quot;mk_accessors&amp;quot;) }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of inheritance, all of the classes listed can invoke &lt;code&gt;mk_accessors&lt;/code&gt;, but not all of them actually define &lt;code&gt;mk_accessors&lt;/code&gt;. It still manages to narrow the list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Class::ISA&lt;/code&gt; was introduced to the Perl Core in release &lt;strong&gt;5.8.0&lt;/strong&gt;. If you&amp;rsquo;re using an older Perl, you can download it from the CPAN.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cwd-cwd-span&#34;&gt;&lt;span id=&#34;cwd&#34;&gt;&lt;code&gt;Cwd&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This module makes it simple to find the current working directory. There is no need to go to the shell, as so many of us do. Instead, use &lt;code&gt;Cwd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Cwd;
  my $path = cwd;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-env-env-span&#34;&gt;&lt;span id=&#34;env&#34;&gt;&lt;code&gt;Env&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl provides access to environment variables via the global &lt;code&gt;%ENV&lt;/code&gt; hash. For many applications, this is fine. Other times it can get in the way. Enter the &lt;code&gt;Env&lt;/code&gt; module. By default, this module will create global scalars for all the variables in your environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Env;
  print &amp;quot;$USER uses $SHELL&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some variables are of better use as a list. You can alter the behavior of &lt;code&gt;Env&lt;/code&gt; by specifying an import list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Env qw[@PATH $USER];
  print &amp;quot;$USER&#39;s  path is @PATH&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yet another module to save time and energy when writing programs.&lt;/p&gt;

&lt;h3 id=&#34;span-id-file-path-file-path-span&#34;&gt;&lt;span id=&#34;file::path&#34;&gt;&lt;code&gt;File::Path&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This module has a useful function called &lt;code&gt;mkpath&lt;/code&gt;. With &lt;code&gt;mkpath&lt;/code&gt; you can create more than one level of directory at a time. In some cases, this could reduce a recursive function or a loop construct to a simple function call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use File::Path;
  mkpath &amp;quot;/usr/local/apache/htdocs/articles/2003&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;mkpath&lt;/code&gt; will create any directory it needs to in order to finally create the &lt;code&gt;2003&lt;/code&gt; directory, a tremendous amount of code is no longer needed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-file-spec-functions-file-spec-functions-span&#34;&gt;&lt;span id=&#34;file::spec::functions&#34;&gt;&lt;code&gt;File::Spec::Functions&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This module implements a sane and useful interface over the &lt;code&gt;File::Spec&lt;/code&gt; module. &lt;code&gt;File::Spec&lt;/code&gt; must be used by calling class methods, while &lt;code&gt;File::Spec::Functions&lt;/code&gt; turns those methods into functions. There are many functions that are all useful (and fully documented in &lt;code&gt;File::Spec::Unix&lt;/code&gt;). Here are a few examples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use File::Spec::Functions qw[splitpath canonpath splitdir abs2rel];

  # split a path into logical pieces
  my ($volume, $dir_path, $file) = splitpath( $path );

  # clean up directory path
  $dir_path = canonpath $dir_path;

  # split the directories into a list
  my @dirs = splitdir $dir_path;

  # turn the full path into a relative path
  my $rel_path = abs2rel $path;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, there are plenty of ways to save yourself coding time by using &lt;code&gt;File::Spec::Functions&lt;/code&gt;. Don&amp;rsquo;t forget, these functions are portable because they use different symantecs behind the senses for the operating system Perl is running on.&lt;/p&gt;

&lt;h3 id=&#34;span-id-file-temp-file-temp-span&#34;&gt;&lt;span id=&#34;file::temp&#34;&gt;&lt;code&gt;File::Temp&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;If you need a temporary file, then use &lt;code&gt;File::Temp&lt;/code&gt;. This module will find a temporary directory that is suitable for the operating system Perl is running on and open a temporary file in that location. This is yet another example of the Perl Core saving you time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use File::Temp;
  my $fh = tempfile;

  print $fh &amp;quot;temp data&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will open a temporary file for you and return the filehandle for you to write to. When your program exits, the temporary file will be deleted.&lt;/p&gt;

&lt;h3 id=&#34;span-id-findbin-findbin-span&#34;&gt;&lt;span id=&#34;findbin&#34;&gt;&lt;code&gt;FindBin&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;FindBin&lt;/code&gt; has a small but useful purpose: to find the original directory of the Perl script being run. When a program is invoked, it can be hard to determine this directory. If a program is calling &lt;code&gt;chdir&lt;/code&gt;, then it can be even more difficult. &lt;code&gt;FindBin&lt;/code&gt; makes it easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use FindBin;
  my $program_dir = $FindBin::Bin;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-shell-shell-span&#34;&gt;&lt;span id=&#34;shell&#34;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Shell&lt;/code&gt; takes the ugliness of dealing with the command line and wraps it up in pretty functions. The effect here is prettier programs. Here is a simple demonstration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Shell qw[ls du];
  use File::Spec::Functions qw[rel2abs];

  chomp( my @files = ls );
  foreach ( @files ) {
        print du &amp;quot;-sk&amp;quot;, rel2abs $_;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-time-localtime-time-localtime-span&#34;&gt;&lt;span id=&#34;time::localtime&#34;&gt;&lt;code&gt;Time::localtime&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This module allows &lt;code&gt;localtime&lt;/code&gt; to return an object. The object gives you by-name access to the individual elements returned by &lt;code&gt;localtime&lt;/code&gt; in list context. This doesn&amp;rsquo;t save us much coding time, but is can save us a trip to the documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Time::localtime;
  my $time = localtime;
  print $time-&amp;gt;year += 1900;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a similar module called &lt;code&gt;Time::gmtime&lt;/code&gt;, which provides the same functionality for the &lt;code&gt;gmtime&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&#34;span-id-universal-universal-span&#34;&gt;&lt;span id=&#34;universal&#34;&gt;&lt;code&gt;UNIVERSAL&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;UNIVERSAL&lt;/code&gt; module is handy. Two of its most common functions, &lt;code&gt;isa&lt;/code&gt; and &lt;code&gt;can&lt;/code&gt; are almost always used in OO programming as methods. &lt;code&gt;isa&lt;/code&gt; is used to determine what class an object belongs to, and &lt;code&gt;can&lt;/code&gt; will tell us whether an object supports a method. This is useful for testing. For example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Time::localtime;
  my $time = localtime;

  if ( $time-&amp;gt;isa( &#39;Time::localtime&#39; ) ) {
    print &amp;quot;We have a Time::localtime object&amp;quot;;
  }

  if ( $time-&amp;gt;can( &amp;quot;year&amp;quot; ) ) {
    print &amp;quot;We can get the year from our object&amp;quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another less-known function in &lt;code&gt;UNIVERSAL&lt;/code&gt; is &lt;code&gt;VERSION&lt;/code&gt;. I often need to know the version of an installed module and I find myself writing a one-liner like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MTest::More -le&#39;print $Test::More::VERSION&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s just not as pretty as this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl -MTest::More -le&#39;print Test::More-&amp;gt;VERSION&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;span-id-conclusion-conclusion-span&#34;&gt;&lt;span id=&#34;conclusion&#34;&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Perl Core has many hidden wonders, and I&amp;rsquo;ve just laid out a few here. Trolling the Core for interesting functions and modules has saved me a lot of work over the years. If you would like to look further, then browse the &lt;code&gt;perlmodlib&lt;/code&gt; manpage for a list of the core modules. Whether your interest is CGI, I18N, Locale, or Math, you can find something there that saves a few hours of work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turning the Tides on Perl&#39;s Attitude Toward Beginners</title>
      <link>http://localhost:1313/pub/2001/05/29/tides.html/</link>
      <pubDate>Mon, 28 May 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/05/29/tides.html/</guid>
      <description>

&lt;p&gt;The Perl community has held tight to a &amp;ldquo;zero tolerance&amp;rdquo; policy for beginners. The transition to a more accepting, responsible community has begun. The past is behind us and the future looks brighter.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-way-we-were-the-way-we-were-span&#34;&gt;&lt;span id=&#34;The_Way_We_Were&#34;&gt;The Way We Were&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;As far back as I can remember, asking a question that has been answered before is one of the many deadly sins of the Perl community. The general attitude revolved around, &amp;ldquo;If the docs are good enough for me, they&amp;rsquo;re good enough for you. RTFM.&amp;rdquo; One first-time programmer could easily accumulate 10 flames in his inbox after asking a question about why this code didn&amp;rsquo;t print anything out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $input    = &amp;lt;STDIN&amp;gt;;
  my $username = chop( $input );
  print &amp;quot;$username&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After said programmer has been flambe&amp;rsquo;ed to perfection they have to endure five more messages concerning the use of &lt;code&gt;chop()&lt;/code&gt; and its evils, not to mention a handful of warnings about why putting double quotes around &lt;code&gt;$username&lt;/code&gt; will cause famine in the land. Granted, these last few messages contain good information, but it&amp;rsquo;s unlikely the beginner will even read these messages. Why would anyone want to subject themselves to more abuse when it&amp;rsquo;s easier to delete the messages and move on to another programming language?&lt;/p&gt;

&lt;p&gt;It seems that the very thing we want to have happen, adding number to our ranks, is the first thing we fight against when beginners show their faces. Wielding our swords of &amp;ldquo;RTFM&amp;rdquo; and shields of &amp;ldquo;killfile&amp;rdquo; we smite the very programmers that will carry this language into the future. I have a co-worker who is known for saying, &amp;ldquo;It&amp;rsquo;s a good thing Perl is so powerful and cool, it barely makes up for the collective, childish &amp;lsquo;elitism&amp;rsquo; displayed by its community.&amp;rdquo; Collectively, this is a sad truth.&lt;/p&gt;

&lt;p&gt;Many programmers end up turning to alternate languages and communities, ones that don&amp;rsquo;t require them to carry fire trucks in their back pocket. For instance, Python has a mailing list designed to be a &amp;ldquo;Help Desk.&amp;rdquo; It doesn&amp;rsquo;t get much better than that for a beginner.&lt;/p&gt;

&lt;p&gt;Another path to travel is the pay software route. If I pay Microsoft for their software, developer resources and customer support, they&amp;rsquo;ll be nice to me. They won&amp;rsquo;t call me a newbie. They won&amp;rsquo;t prepare the clue stick, they&amp;rsquo;ll give me all the answers I need. Believe it or not, folks, this is our competition, too. Forget about a single programmer turned away, this affects whole companies. A corporation has the wallet to turn away from Perl if it feels the support is &amp;ldquo;lacking.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;One would figure that, with Perl&amp;rsquo;s age, the community would have fostered a powerful, useful medium to ease the newcomer into our world. When a child is born, it requires extreme amounts of care, attention and guidance for several years. Most children aren&amp;rsquo;t told to sit in the corner and RTFM until they get it; that&amp;rsquo;s cruel and unusual punishment. Why then, must we be any different? We all have the ability to help programmers grow and mature, to shape their views and opinions. It&amp;rsquo;s time for us to open up and give back to our trade. All of us have received gentle guidance; we are all capable of giving some back.&lt;/p&gt;

&lt;p&gt;In short, no good has come of this.&lt;/p&gt;

&lt;h3 id=&#34;span-id-a-step-in-the-right-direction-a-step-in-the-right-direction-span&#34;&gt;&lt;span id=&#34;A_Step_In_the_Right_Direction&#34;&gt;A Step in the Right Direction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Last month, a few folks on the Perl Porters list decided enough was enough. Casey West set out in search of a new mailing list for Perl beginners. Some concerns were raised regarding the validity of the list but, overall, there was acceptance. Out of the blue, Ask Bjoern Hansen came barreling through the crowd announcing that the list had been created &amp;ndash; three days before. &lt;code&gt;;-)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It was time to find out if the Perl community needed a friendly, fire-free environment to foster growth and knowledge in the masses. It was time to find out if there &lt;em&gt;were&lt;/em&gt; any masses. It was also time to find out if the Perl community would be willing to jump in and help. Don&amp;rsquo;t you just love the suspense? On with the show!&lt;/p&gt;

&lt;h3 id=&#34;span-id-beginners-perl-org-beginners-perl-org-span&#34;&gt;&lt;span id=&#34;beginners_perl_org&#34;&gt;beginners@perl.org&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It has been one month and statistics speak for themselves. Thirteen hundred messages were sent last month, sending my mbox to more than 3.5 MB. As far as Perl lists are concerned, this is near the highest-trafficked list. Of course, the Python &amp;ldquo;Help Desk&amp;rdquo; list generates a solid 4000+ messages a month, with excellence.&lt;/p&gt;

&lt;p&gt;Under normal circumstances, generating that much beginner traffic would cause the list to combust, sending fireballs as far as the eye can see. Not this time. Established folks in the Perl community have made an effort to put the gloves on and play nice. As list baby-sitter, I have only had to slap a handful of wrists, and the people attached to them have responded honorably. Nearly all questions have been answered at least once and every customer seems to be satisfied.&lt;/p&gt;

&lt;h2 id=&#34;span-id-beginnerscgi-perl-org-span-beginners-cgi-perl-org&#34;&gt;&lt;span id=&#34;beginnerscgi@perl.org&#34;&gt;&lt;/span&gt;&lt;a href=&#34;mailto:beginners-cgi@perl.org&#34;&gt;beginners-cgi@perl.org&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;beginners&lt;/code&gt; list recently split in two. The &lt;code&gt;beginners-cgi&lt;/code&gt; list was created as a means to cut back on the amount of traffic. Many people were finding it hard to keep up with the flow of just one list. This is understandable considering we have over 1000 subscribers to the &lt;code&gt;beginners&lt;/code&gt; list.&lt;/p&gt;

&lt;h2 id=&#34;span-id-dailytips-perl-org-span-daily-tips-perl-org&#34;&gt;&lt;span id=&#34;dailytips@perl.org&#34;&gt;&lt;/span&gt;&lt;a href=&#34;mailto:daily-tips@perl.org&#34;&gt;daily-tips@perl.org&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ask and I started the &lt;code&gt;daily-tips&lt;/code&gt; mailing list. This list will be sending our daily mailings with simple tips for beginners. The tips will cover a wide range of topics, in the form of ``Questions and Answer&amp;rdquo;. We won&amp;rsquo;t be mailing from the standard Perl FAQ, there&amp;rsquo;s already a list for that. Instead, we&amp;rsquo;ll be taking submissions from the community and mailing them (That means you!). More information on this list can be found at &lt;a href=&#34;http://learn.perl.org/&#34;&gt;http://learn.perl.org/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-beginnersworkers-perl-org-beginners-workers-span&#34;&gt;&lt;span id=&#34;beginnersworkers@perl.org&#34;&gt;beginners-workers&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;beginners-workers&lt;/code&gt; mailing list is the place to send your &lt;code&gt;daily-tips&lt;/code&gt; submissions, as well as your thoughts on how the Perl community should be helping beginners. Ask, Adam Turoff, Kevin Meltzer and I (and others) will be reading this list and responding if necessary. The Beginners Team is working hard on this list to get a number of initiatives rolling. Thanks to the people mentioned above, and many other folks for your continued help and support.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-help-perl-help-span&#34;&gt;&lt;span id=&#34;_perl_help&#34;&gt;#perl-help&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Another fine member of the Perl community, Kevin Lenzo, followed up the mailing list announcement with one of his own. He created an IRC channel named &lt;code&gt;#perl-help&lt;/code&gt; on &lt;code&gt;irc.rhizomatic.net&lt;/code&gt; and even attached the lovable purl bot to it. Kevin reports moderate and friendly traffic on this channel.&lt;/p&gt;

&lt;p&gt;This is an exciting move, because it provides real-time results. The ability to interact with someone in real time makes this a complete win. Believe me, you won&amp;rsquo;t go away disappointed from this channel: the people there are fast and fun to work with.&lt;/p&gt;

&lt;h3 id=&#34;span-id-code-review-bof-at-the-perl-conf-code-review-bof-at-the-perl-conference-span&#34;&gt;&lt;span id=&#34;Code_Review_BOF_at_The_Perl_Conf&#34;&gt;Code Review BOF at the Perl Conference&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Peter Scott and I have teamed up to make the second TPC Code Review bigger and better than ever. A number of the top Perl people have volunteered to review code, free of charge. The format will be similar to last years BOF. This is your opportunity to get advice from Perl&amp;rsquo;s best without having to pay their rates.&lt;/p&gt;

&lt;p&gt;If you are attending this year&amp;rsquo;s TPC and you have some questions about your code, please stop by. It doesn&amp;rsquo;t matter what your question is, all subjects are open. We are putting an emphasis on answering beginners&amp;rsquo; questions but, please, don&amp;rsquo;t hesitate to bring your latest regex engine patch for review, we have people who can do that, too.&lt;/p&gt;

&lt;h3 id=&#34;span-id-onward-and-upward-onward-and-upward-span&#34;&gt;&lt;span id=&#34;Onward_and_Upward&#34;&gt;Onward and Upward&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Perl community has had a taste of success with the beginners list and IRC channels. We will hopefully solidify our new found stance at the Perl Conference with the Code Review BOF. So what happens next? Are we finished? Not by a long shot.&lt;/p&gt;

&lt;p&gt;Ask and I have begun work on &lt;em&gt;http:&lt;/em&gt;, a modest site dedicated to helping people learn Perl. At the moment it is slightly bare, hosting only the beginners list FAQ, which is maintained by Kevin Meltzer. This is all about to change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;learn.perl.org&lt;/em&gt; will become a beginners documentation project. We are asking for contributions from the Perl community for tutorials. The topics of these tutorials may be broad, covering everything from text editors with Perl syntax highlighting to in-depth research on why one should use &lt;code&gt;while&lt;/code&gt; to loop over files. We hope, with time, that &lt;em&gt;learn.perl.org&lt;/em&gt; can mature into a central, community-lead documentation project: the Perl Documentation Project.&lt;/p&gt;

&lt;h3 id=&#34;span-id-pioneering-the-status-quo-revolu-pioneering-the-status-quo-revolution-span&#34;&gt;&lt;span id=&#34;Pioneering_the_Status_Quo_Revolu&#34;&gt;Pioneering the Status Quo Revolution&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It has been the general opinion of the open-source community that, if you can&amp;rsquo;t find the answers yourself, you&amp;rsquo;re lost. Read the documentation, if there is no documentation, read the source. If there is no source, you&amp;rsquo;ve stepped out of the world as we know it. If you&amp;rsquo;re a greenhorn and you can&amp;rsquo;t figure it out from the docs or the source, goodbye. And not just goodbye, but a plague on your house as well.&lt;/p&gt;

&lt;p&gt;This attitude is just not good enough any more. Frankly, it&amp;rsquo;s a terrible way to behave. Any child can play the &amp;ldquo;I&amp;rsquo;m not telling you, figure it out yourself&amp;rdquo; game, complete with fingers wiggling from the ears and a stuck out tongue. It&amp;rsquo;s time for us to collectively grow up. As a community, we need to mature. We need to get up and help each other.&lt;/p&gt;

&lt;p&gt;I admit, I have been on the giving end of the flamethrower serveral times in the past. It seemed like a fun idea at first, but it really isn&amp;rsquo;t. After I sent flames, I felt terrible, often going back to the recipient and asking forgiveness. That&amp;rsquo;s just what it did to me, I hate to think about how it made the other guy feel. What kind of impression did I give him about me, about the Perl community, about open source? What we do in public really does reach that far: We are responsible for the people we represent, like it or not. So let&amp;rsquo;s all grow up and represent them well.&lt;/p&gt;

&lt;p&gt;This reaches far beyond the walls of Perl ( no pun&amp;hellip; ). I am beginning to see the awareness all around the open-source community. We are in need of a change and the challenge is here. The Perl community has begun its journey, let&amp;rsquo;s be the ones to carry it through the rest of open source, and beyond.&lt;/p&gt;

&lt;h3 id=&#34;span-id-closing-thoughts-closing-thoughts-span&#34;&gt;&lt;span id=&#34;Closing_Thoughts&#34;&gt;Closing Thoughts&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;My dream is for a Perl community that stands together with kindess and open arms. Many may feel this is a goal too lofty for us. I couldn&amp;rsquo;t disagree more. We have shown the world that we can do just about anything; this should be easy. I know I&amp;rsquo;m not the only one who shares this opinion.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;But, paradoxically, the way in which Perl helps you the most has almost nothing to do with Perl, and everything to do with the people who use Perl. Perl folks are, frankly, some of the most helpful folks on earth. If there&amp;rsquo;s a religious quality to the Perl movement, then this is at the heart of it. Larry wanted the Perl community to function like a little bit of heaven, and he seems to have gotten his wish, so far. Please do your part to keep it that way.&amp;rdquo;&lt;/em&gt; &amp;ndash; Preface, Programming Perl 2nd Edition&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

