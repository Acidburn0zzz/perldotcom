<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dave Rolsky on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/dave-rolsky/</link>
    <description>Recent content in Dave Rolsky on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Mar 2003 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/dave-rolsky/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Many Dates and Times of Perl</title>
      <link>http://localhost:1313/pub/2003/03/13/datetime.html/</link>
      <pubDate>Thu, 13 Mar 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/03/13/datetime.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-some-basic-concepts-some-basic-concepts-span&#34;&gt;&lt;span id=&#34;some_basic_concepts&#34;&gt;Some Basic Concepts&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;In order to understand what you might want to do with dates and times, it&amp;rsquo;s good to have a handle on some basic concepts. Here are some terms that I&amp;rsquo;ll be using in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span id=&#34;item_datetime&#34;&gt;datetime&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_utc&#34;&gt;UTC (also GMT and Zulu)&lt;/span&gt;&lt;/strong&gt;
UTC stands for &amp;ldquo;Coordinated Universal Time&amp;rdquo;. It is an international standard which is kept using atomic clocks, and is kept to within 0.9 seconds of the rotation of the earth on its axis in order to work well with traditional standards of time-keeping. UTC time is measured at the prime meridian (O degrees longitude).&lt;/p&gt;

&lt;p&gt;Time zones around the world are specified as an offset from UTC. The widely used term GMT (Greenwich Mean Time) refers to a time zone that is equivalent to UTC. In other words, it has no offset.&lt;/p&gt;

&lt;p&gt;The US military has a set of terms used for time zones around the world based on the alphabet (A-Z). In this system UTC is Z, sometimes called &amp;ldquo;Zulu&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;UTC is a good standard for the &lt;em&gt;internal&lt;/em&gt; representation of dates and times, as it makes comparing datetimes or doing datetime math much easier.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time_zones_and_daylight_saving_time&#34;&gt;Time zones and Daylight Saving Time&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time zones, as mentioned above, are defined as an offset from UTC. Most, but &lt;em&gt;not&lt;/em&gt; all, time zones are in offsets of whole hours. Adelaide, Australia has an offset of nine and a half hours ahead of UTC, and Nepal has an offset five hours and forty-five minutes ahead of UTC.&lt;/p&gt;

&lt;p&gt;Time zones are complicated by the use of Daylight Saving Time, which changes the actual offset of a given location to vary over the course of the year. The eastern US has an offset of -0500 from UTC, five hours behind UTC. This means that 12:00 (noon) UTC becomes 07:00 (AM). However, when Daylight Saving Time is in effect, the offset becomes -0400, four hours behind UTC. Because time zones are determined by governments, use of Daylight Saving Time, and the base offsets, have changed over time, and may change again in the future.&lt;/p&gt;

&lt;p&gt;This greatly complicates math when dealing with non-UTC datetimes. If I have a local datetime for the Eastern US of 2002-10-25 14:15:00 and I add six months to that datetime, then I will have crossed a DST change.&lt;/p&gt;

&lt;p&gt;The upshot of all this is that any code that represents time zones as &lt;em&gt;fixed&lt;/em&gt; offset will probably start producing errors once date math gets involved.&lt;/p&gt;

&lt;p&gt;The definitive source of time zone offsets and rules is the Olson time zone database. It defines zones according to names like &amp;ldquo;America/New_York&amp;rdquo;, as opposed to &amp;ldquo;EST&amp;rdquo;. The latter shorthand is commonly used, but it should probably be avoided because these short names are not unique or definitive. For example, there is an &amp;ldquo;EST&amp;rdquo; at -0500 and +1000.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_local_time&#34;&gt;Local time&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The local time is UTC plus the local time zone offset. While UTC is great for internal use, most people want to see datetimes in terms of &lt;em&gt;their&lt;/em&gt; location. In a sense, local time is the &lt;em&gt;display&lt;/em&gt; format, while UTC is the &lt;em&gt;storage&lt;/em&gt; format.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_the_epoch&#34;&gt;The epoch&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Epoch is a generic term referring to the &amp;ldquo;start&amp;rdquo; of any particular system. For example, the Gregorian calendar&amp;rsquo;s epoch is January 1, 1 CE.&lt;/p&gt;

&lt;p&gt;The epoch system, as used most operating systems, represents a datetime as the number of seconds after a specific date and time. For Unix systems, the epoch began on January 1, 1970 at midnight GMT (UTC). Other systems have different epochs. Because of this, you cannot assume that an epoch time of 2,003,131 means the same thing from system to system, because different systems have a different &amp;ldquo;second 0&amp;rdquo;. Storing a datetime as its epoch is not portable.&lt;/p&gt;

&lt;p&gt;Even worse, on most current systems, epochs are represented by a 32 bit signed integer, which only lets you represent datetimes with a range of about 136 years. On most UNIX systems currently in use, this means that the latest date you can represent right now is sometime in the year 2038, and the earliest is around 1902. This doesn&amp;rsquo;t work very well if you&amp;rsquo;re trying to represent the birth date of your great-great-grandmother.&lt;/p&gt;

&lt;p&gt;The upshot of all this is I would strongly recommend &lt;em&gt;not&lt;/em&gt; using epochs except when you have no other choice. Of course, you&amp;rsquo;ll often have no choice, so it&amp;rsquo;s important to know how this system works.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_the_gregorian_calendar&#34;&gt;The Gregorian Calendar&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There have been many different calendar systems in use throughout history. The Gregorian calendar is the current generally agreed upon international standard for representing dates, and is what you are using when you say &amp;ldquo;August 8, 1999&amp;rdquo;. Other calendars that are still in use include the Hebrew calendar, the Islamic calendar, and the Chinese calendar.&lt;/p&gt;

&lt;p&gt;Even though the Gregorian calendar wasn&amp;rsquo;t created until 1582, and it wasn&amp;rsquo;t adopted world wide until this century, we can still extrapolate backwards in time using the Gregorian calendar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-what-needs-doing-with-dates-and-times-what-needs-doing-with-dates-and-times-span&#34;&gt;&lt;span id=&#34;what_needs_doing_with_dates_and_times&#34;&gt;What Needs Doing with Dates and Times?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There are a lot of things you can do with dates and times, and different modules/distributions provide different types of functionality. Broadly speaking, we can consider the following areas of functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_parsing%2fformatting&#34;&gt;Parsing/Formatting&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are more datetime formats in use in the computing world than you can shake a stick at. You&amp;rsquo;ll often have to parse a datetime in one format in order to turn it into something you can work with internally, like a bunch of integers or an epoch time.&lt;/p&gt;

&lt;p&gt;On the flip side, you&amp;rsquo;ll often have to take some standard representation, like an epoch, and convert it to some other format.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_basic_representation&#34;&gt;Basic representation&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A nice datetime object can be quite handy. These range from lightweight wrappers around Perl&amp;rsquo;s &lt;a href=&#34;#item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to objects that try to provide methods for all possible datetime operations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_math_and_calculations&#34;&gt;Math and calculations&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll often want to answer questions like &amp;ldquo;what day is seven days after today&amp;rdquo; or &amp;ldquo;how much time is there between now and midnight?&amp;rdquo; This is closely related to the task of figuring out the date Easter falls on in a given year, or what day of the week Martin Luther King&amp;rsquo;s birthday falls on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are plenty of other things we can do with datetimes, but these are largely elaborations of the above areas of functionality.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-s-builtin-date-time-functionality-perl-s-built-in-date-time-functionality-span&#34;&gt;&lt;span id=&#34;perl&#39;s_builtin_date/time_functionality&#34;&gt;Perl&amp;rsquo;s Built-in Date/Time Functionality&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl has some built-in functionality for handling dates and times. This functionality includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time&#34;&gt;&lt;code&gt;time()&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A function that returns the current epoch time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt; and &lt;code&gt;gmtime()&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These functions convert an epoch time into a set of components representing the local time. They both return arrays containing things like the hour, minute, month, etc., though some of the values returned are awkward to use. For example, the year is the actual year minus 1900.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;#item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; function returns the datetime of your current location, based on your system&amp;rsquo;s time zone setting, while the gmtime function returns the current UTC datetime.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Time::localtime&lt;/code&gt; and &lt;code&gt;Time::gmtime&lt;/code&gt; modules provide a thin object layer around &lt;code&gt;gmtime()&lt;/code&gt; and &lt;a href=&#34;#item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; respectively, so you can do things like &lt;code&gt;print gmtime()-&amp;gt;year&lt;/code&gt;. Of course, that &lt;em&gt;still&lt;/em&gt; prints the year minus 1900.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time%3a%3alocal&#34;&gt;Time::Local&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This core module provide functions that translate from the array of components returned by &lt;a href=&#34;#item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;gmtime()&lt;/code&gt; back to an epoch time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_posix%2epm&#34;&gt;POSIX.pm&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;POSIX&lt;/code&gt; module included with Perl provides interfaces to several common C library functions for datetimes, such as &lt;code&gt;strftime()&lt;/code&gt;. I consider this the last refuge for the desperate, because the &lt;a href=&#34;#item_posix%2epm&#34;&gt;&lt;code&gt;POSIX.pm&lt;/code&gt;&lt;/a&gt; module is a memory hog, and the C library interface is rather un-Perlish.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-the-big-stars-the-big-stars-span&#34;&gt;&lt;span id=&#34;the_big_stars&#34;&gt;The Big Stars&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;These are the modules that have the longest history, and are the most widely used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_timedate_distribution&#34;&gt;TimeDate distribution&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This distribution, maintained and mostly written by Graham Barr, includes three modules. &lt;code&gt;Date::Format&lt;/code&gt; module provides a few functions for formatting datetime output, including a &lt;code&gt;strftime()&lt;/code&gt; similar to the one in the standard C library. It can work with either epoch times, or the array of components returned by Perl&amp;rsquo;s &lt;a href=&#34;#item_localtime&#34;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Date::Parse&lt;/code&gt; parses a limited set of common datetime formats, returning either an epoch time or an array of components.&lt;/p&gt;

&lt;p&gt;The distribution also includes a number of language modules which can be used to localize both parsing and formatting.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;Time::Zone&lt;/code&gt; provides an interface to time zone offsets, based on short time zone names like &amp;ldquo;EST&amp;rdquo; or &amp;ldquo;GMT&amp;rdquo;. As was mentioned before, these names are not official or standardized, so they are of limited usefulness.&lt;/p&gt;

&lt;p&gt;All of these modules are limited by their use of epoch time internally, but they are fairly quick and light weight. For complex datetime problems, these modules probably don&amp;rsquo;t automate enough of the dirty work.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time%3a%3apiece&#34;&gt;Time::Piece&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Written and maintained by Matt Sergeant, this module is based on an interface designed by Larry Wall. It provides a convenient object API for datetimes, though the API is a bit confusing. For example, &lt;code&gt;$time-&amp;gt;mon&lt;/code&gt; returns the month number (1-12) while &lt;code&gt;$time-&amp;gt;month&lt;/code&gt; returns the abbreviated name of the month.&lt;/p&gt;

&lt;p&gt;It also implements basic parsing and formatting via the use of the C-level &lt;code&gt;strptime()&lt;/code&gt; and &lt;code&gt;strftime()&lt;/code&gt; functions. The included &lt;code&gt;Time::Seconds&lt;/code&gt; module allows for basic date math, such as &lt;code&gt;$tomorrow = $time + ONE_DAY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The implementation is fairly lightweight, but is limited by its use of epoch time as the internal representation. It is certainly useful, but like the TimeDate modules, it doesn&amp;rsquo;t go far enough for more complex uses.&lt;/p&gt;

&lt;p&gt;As of this writing, Matt Sergeant has released an experimental version of &lt;a href=&#34;#item_time%3a%3apiece&#34;&gt;&lt;code&gt;Time::Piece&lt;/code&gt;&lt;/a&gt; based on my &lt;code&gt;DateTime.pm&lt;/code&gt; module. This leaves the &lt;a href=&#34;#item_time%3a%3apiece&#34;&gt;&lt;code&gt;Time::Piece&lt;/code&gt;&lt;/a&gt; API unchanged, but allows it to handle dates that cannot be represented by a given system&amp;rsquo;s epoch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3amanip&#34;&gt;Date::Manip&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sullivan Beck&amp;rsquo;s &lt;a href=&#34;#item_date%3a%3amanip&#34;&gt;&lt;code&gt;Date::Manip&lt;/code&gt;&lt;/a&gt; is really huge, weighing in at about 3,000 lines of code. As might be expected of that much code, there is something for everyone here. It handles parsing, formatting, date math, as well as more esoteric things like recurring datetimes and business day calculations. It should be noted that it&amp;rsquo;s time zone support is pretty much the same that provided by &lt;code&gt;Time::Zone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This module&amp;rsquo;s most unique feature is its very flexible parser, which is capable of handling things like &amp;ldquo;3 weeks ago Monday&amp;rdquo; or &amp;ldquo;next Sunday&amp;rdquo;. It also provides some parsing for specifying recurrences, like &amp;ldquo;every 3rd Monday in 2003&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Unlike everything else we&amp;rsquo;ve covered so far, this module is not limited to epoch times. It has an entirely functional interface, and in my opinion the API could be cleaner. I dislike the fact that some functions do many different things, with the output depending either on the argument type(s), explicit flags, or both.&lt;/p&gt;

&lt;p&gt;But the biggest problem with this module, which is acknowledged by its author, is its size. It uses lots of memory (about 3MB on my system), and is fairly slow to load. The former makes it problematic for mod_perl, and the latter causes problems with CGI scripts. You can find most of its features elsewhere, in slimmer modules, but if size and speed are not an issue, this module almost certainly does everything you want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3acalc&#34;&gt;Date::Calc&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Steffen Beyer&amp;rsquo;s &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt; distribution is where you go when you need functionality combined with speed. This modules offers much of the functionality provided by &lt;a href=&#34;#item_date%3a%3amanip&#34;&gt;&lt;code&gt;Date::Manip&lt;/code&gt;&lt;/a&gt;, but the core &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt; module has a much smaller memory footprint than &lt;a href=&#34;#item_date%3a%3amanip&#34;&gt;&lt;code&gt;Date::Manip&lt;/code&gt;&lt;/a&gt; (about 1MB on my box), and much greater speed. This is because its core implementation is in C.&lt;/p&gt;

&lt;p&gt;This module provides functions for calculating all sorts of date-related information, as well some minimal parsing and formatting operations. The interface requires some hand-holding to use, as every function returns one or more elements, never a data structure such as a hash, so you have to constantly deal with passing and receiving arrays of values.&lt;/p&gt;

&lt;p&gt;The distribution also includes a class called &lt;code&gt;Date::Calc::Object&lt;/code&gt;, which can represent either a datetime &lt;em&gt;or&lt;/em&gt; a &amp;ldquo;delta&amp;rdquo;, the difference between two datetimes. This dual nature is odd, since many of the methods applicable to one will not work for the other. The class supports overloading for date math and comparison, so you can do things like &lt;code&gt;$date + [1, 2, 3]&lt;/code&gt;, which adds one year, two months, and three days to the given date.&lt;/p&gt;

&lt;p&gt;Finally, there is a &lt;code&gt;Date::Calendar&lt;/code&gt; object, which can be used to set up a calendar &amp;ldquo;profile&amp;rdquo; defining holidays, work days, and partial work days in a variety of ways. This is quite useful if you need to calculate a day X business days in the future, while taking account of a particular organization&amp;rsquo;s holidays.&lt;/p&gt;

&lt;p&gt;None of the modules in this distribution rely on epoch time, though they only support positive-numbered years. Time zone support is extremely minimal, and is done only as offsets, without support for daylight saving rules. Localization for a variety of languages is implemented for parsing and formatting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-and-a-cast-of-thousands-and-a-cast-of-thousands-span&#34;&gt;&lt;span id=&#34;and_a_cast_of_thousands_...&#34;&gt;And a Cast of Thousands &amp;hellip;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It wouldn&amp;rsquo;t be Perl if there weren&amp;rsquo;t at least a dozen other modules with overlapping functionality, right? In this case, there&amp;rsquo;s more than two dozen! For sanity&amp;rsquo;s sake, I&amp;rsquo;ve excluded more than a few modules, in particular those that either appeared to be unmaintained, or those without enough comprehensible documentation for me to figure out what the heck they do. In alphabetical order, those remaining are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_astro%3a%3asunrise_%2d_ron_hill&#34;&gt;Astro::Sunrise - Ron Hill&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module provides sunrise and sunset times, given a specific date and place.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_astro%3a%3atime_%2d_chris_phillips&#34;&gt;Astro::Time - Chris Phillips&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contains a number of functions useful when dealing with datetimes as they are used in astronomy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_class%3a%3adate_%2d_balzs_szab&#34;&gt;Class::Date - Balázs Szabó&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is basically the &lt;a href=&#34;#item_time%3a%3apiece&#34;&gt;&lt;code&gt;Time::Piece&lt;/code&gt;&lt;/a&gt; API plus more stuff. It appears to provide complete time zone support based on the Olson database, by way of &lt;a href=&#34;#item_posix%2epm&#34;&gt;&lt;code&gt;POSIX.pm&lt;/code&gt;&lt;/a&gt;. It is epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3abusiness_%2d_richard_desimine&#34;&gt;Date::Business - Richard DeSimine&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A simple interface for doing date math with business dates. In other words, weekends don&amp;rsquo;t count, and you can define your own holidays. This module is epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aconvert_%2d_mordechai_abzug&#34;&gt;Date::Convert - Mordechai Abzug&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts dates between the Gregorian, Hebrew, and Julian calendars.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aconvert%3a%3afrench_rev_%2d_jean_forget&#34;&gt;Date::Convert::French_Rev - Jean Forget&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts to and from the French Revolutionary calendar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aday_%2d_john_von_essen&#34;&gt;Date::Day - John Von Essen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you the day of the week for a given date.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3adayofweek_%2d_rich_bowen&#34;&gt;Date::DayofWeek - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Does exactly the same thing as &lt;code&gt;Date::Day&lt;/code&gt; but only for years 1500-2699. On the flip side, it uses a cuter algorithm.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3adecade_%2d_michael_diekmann&#34;&gt;Date::Decade - Michael Diekmann&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Provides three decade calculation functions with an API similar to that of &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3adiscordian_%2d_rich_bowen&#34;&gt;Date::Discordian - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts to and from the Discordian calendar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aeaster_%2d_rich_bowen&#34;&gt;Date::Easter - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calculates the date Easter falls on in a given year.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3ahandler_%2d_benoit_beausejour&#34;&gt;Date::Handler - Benoit Beausejour&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A date object comparable to &lt;a href=&#34;#item_time%3a%3apiece&#34;&gt;&lt;code&gt;Time::Piece&lt;/code&gt;&lt;/a&gt;, but with a more consistent interface. It implements localization, a variety of date math operations, and includes an object for representing datetime spans. It provides time zone support based on the native OS implementation, which on some systems means support for the Olson database. It is epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aical_%2d_rich_bowen&#34;&gt;Date::ICal - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A date object that provides a simple API, date math, and iCal formatting and parsing (see RFC 2445). It only support time zones as offsets, but it is not epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aiso_%2d_rich_bowen&#34;&gt;Date::ISO - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A subclass of Date::ICal that adds ISO 8601 format parsing and formatting.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3ajapanese%3a%3aera_%2d_tatsuhiko_miyagawa&#34;&gt;Date::Japanese::Era - Tatsuhiko Miyagawa&lt;/span&gt;&lt;/strong&gt;
C&lt;/p&gt;

&lt;p&gt;onverts to and from Japanese Era dates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3ajapanese%3a%3aholiday_%2d_tomohiro_ikebe&#34;&gt;Date::Japanese::Holiday - Tomohiro Ikebe&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you whether or not a given date is a Japanese holiday.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aleapsecond_%2d_flvio_soibelmann_glock&#34;&gt;Date::Leapsecond - Flávio Soibelmann Glock&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts between UT1 and UTC times.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aleapyear_%2d_rich_bowen&#34;&gt;Date::Leapyear - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One function to tell you whether or not a given year is a leap year.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3amaya_%2d_abigail&#34;&gt;Date::Maya - Abigail&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Converts between Julian days and the Mayan calendar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3apassover_%2d_rich_bowen&#34;&gt;Date::Passover - Rich Bowen&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calculates the dates of Passover and Rosh Hashanah for a given year.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aperiodparser_%2d_simon_cozens&#34;&gt;Date::PeriodParser - Simon Cozens&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parses English descriptions of time periods like &amp;ldquo;this morning&amp;rdquo; or &amp;ldquo;around two weeks ago&amp;rdquo; and turns them into pairs of epoch times representing the beginning and end of the period.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3arange_%2d_tony_bowden&#34;&gt;Date::Range - Tony Bowden&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An object for representing a range of dates. Lets you figure out whether two ranges overlap, whether a date is included in a given range, and a few other useful things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aroman_%2d_leo_cacciari&#34;&gt;Date::Roman - Leo Cacciari&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An object for representing dates according to the Roman calendar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3aset_%2d_flvio_soibelmann_glock&#34;&gt;Date::Set - Flávio Soibelmann Glock&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An object that represents sets of datetimes. A set can be either a datetime span, a recurring set of dates, or a fixed set of specific datetimes. It provides set math operations for all of these, as well as allowing you to iterate across the members of the set. Also see &lt;code&gt;Date::Set::Timezone&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3asimple_%2d_john_tobey&#34;&gt;Date::Simple - John Tobey&lt;/span&gt;&lt;/strong&gt;
A&lt;/p&gt;

&lt;p&gt;date object that represents dates only, without a time component. It provides date math. It is not epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_date%3a%3atie_%2d_flvio_soibelmann_glock&#34;&gt;Date::Tie - Flávio Soibelmann Glock&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A basic date object with date math. Its functionality is implemented via a tied hash interface. It supports fixed offset time zones, and it is epoch-limited.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_http%3a%3adate_%2d_gisle_aas&#34;&gt;HTTP::Date - Gisle Aas&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module is part of the LWP distribution. It parses many common datetime formats, including all of those that are used by the HTTP protocol. If &lt;code&gt;Date::Parse&lt;/code&gt; doesn&amp;rsquo;t understand all the formats you need to deal with, this module provides a good alternative.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time%3a%3aduration_%2d_sean_burke&#34;&gt;Time::Duration - Sean Burke&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given a number of seconds, this module return a human language description of the duration. For example, 3660 seconds would be &amp;ldquo;1 hour and 1 minute&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time%3a%3ahuman_%2d_simon_cozens&#34;&gt;Time::Human - Simon Cozens&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given an epoch time, this module can return a string describing that time in colloquial terms, such as &amp;ldquo;half past nine&amp;rdquo;. It has hooks for localization.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time%3a%3aunix_%2d_nathan_wiger&#34;&gt;Time::Unix - Nathan Wiger&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Loading this module forces Perl&amp;rsquo;s &lt;a href=&#34;#item_time&#34;&gt;&lt;code&gt;time()&lt;/code&gt;&lt;/a&gt; function to use the Unix epoch system, regardless of the OS on which the code is running.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_time_modules_%2d_david_muir_sharnoff&#34;&gt;Time modules - David Muir Sharnoff&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This distribution includes &lt;code&gt;Time::CTime&lt;/code&gt;, &lt;code&gt;Time::ParseDate&lt;/code&gt;, and &lt;code&gt;Time::Timezone&lt;/code&gt;, which are slightly more powerful versions of Graham Barr&amp;rsquo;s &lt;code&gt;Date::Format&lt;/code&gt;, &lt;code&gt;Date::Parse&lt;/code&gt;, and &lt;code&gt;Time::Zone&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-but-wait-there-s-more-but-wait-there-s-more-span&#34;&gt;&lt;span id=&#34;but_wait,_there&#39;s_more!&#34;&gt;But Wait, There&amp;rsquo;s More!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Not content to leave well enough alone, I&amp;rsquo;ve recently started a project to fix what I see as the fundamental problem with the state of Perl datetime modules. That fundamental problem is that despite the fact that almost all the possible functionality you could want exists, it is scattered over a large number of incompatible modules.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt; provides good functionality for various datetime calculations and date math, but the values it returns are not well suited for being passed to &lt;code&gt;Date::Format&lt;/code&gt;. And while &lt;a href=&#34;#item_date%3a%3amanip&#34;&gt;&lt;code&gt;Date::Manip&lt;/code&gt;&lt;/a&gt; has powerful parsing, the return value from its parsing routine cannot be passed to any other module without further massaging. And so and so on.&lt;/p&gt;

&lt;p&gt;For example, if I wanted to parse a date with &lt;code&gt;Date::Parse&lt;/code&gt; and then calculate the date one week later with &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt;, and then format it with &lt;code&gt;Date::Format&lt;/code&gt;, I&amp;rsquo;d have to do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $time1 = str2time($date_string); # Date::Parse

# Today() from Date::Calc returns
# date information for an epoch time
my ($y1, $m1, $d1) = Today($time);

my ($y2, $m2, $d2) = Add_Delta_Days($y1, $m1, $d1, 7);

my $time2 = Date_to_Time($y2, $m2, $d2);

print strftime(&#39;%B %d, %Y&#39;, $time2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, I didn&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to use the &lt;code&gt;strftime()&lt;/code&gt; function for formatting a date. I could have done it with just &lt;a href=&#34;#item_date%3a%3acalc&#34;&gt;&lt;code&gt;Date::Calc&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print sprintf(&#39;%s %02d %04d&#39;,
Month_to_Text($m2), $d2, $y2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I want convenience. If I&amp;rsquo;m dealing with many datetimes and I need to parse various inputs, generate different formats, and do lots of calculations, then a convenient and uniform API can go a long way towards code maintainability. The extra glue code needed to make different modules cooperate can quickly obscure the actual intent of the program.&lt;/p&gt;

&lt;p&gt;Efforts in the past to herd all the existing module authors towards a common API have failed, so rather than try that again, I decided to just write even more datetime code. As we all know, the best way to put out a fire is to pour copious amounts of gasoline on it. In order to make my project sound cool, I&amp;rsquo;m calling it the &amp;ldquo;Perl DateTime Suite&amp;rdquo;, which sounds much better than &amp;ldquo;more date and time modules&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The goal for this project is to produce a suite of datetime modules that do everything you&amp;rsquo;d ever need related to dates and times. The modules in this suite will cooperate with each other, which means that a module that parses datetimes will return a standard object, and a module for formatting datetimes will accept that standard object.&lt;/p&gt;

&lt;p&gt;So far, this project has attracted interest from a number of people, and discussions on the &lt;a href=&#34;mailto:datetime@perl.org&#34;&gt;datetime@perl.org&lt;/a&gt; list have gone well. Recently, I released alpha versions of the core object, &lt;code&gt;DateTime.pm&lt;/code&gt;, as well as &lt;code&gt;DateTime::TimeZone&lt;/code&gt;, which provides complete time zone support based on the Olson database. There is also an alpha of &lt;code&gt;DateTime::Format::ICal&lt;/code&gt; on CPAN, a module for parsing and formatting iCal datetimes and durations. In the future, look for more modules in the suite, all of which will begin with &amp;ldquo;DateTime::&amp;ldquo;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-further-resources-and-reading-further-resources-and-reading-span&#34;&gt;&lt;span id=&#34;further_resources_and_reading&#34;&gt;Further Resources and Reading&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Some excellent online resources include Claus Tondering&amp;rsquo;s Calendar FAQ at &lt;a href=&#34;http://www.tondering.dk/claus/calendar.html,&#34;&gt;http://www.tondering.dk/claus/calendar.html,&lt;/a&gt; as well as the US Naval Observatory Time Service site at &lt;a href=&#34;http://tycho.usno.navy.mil/.&#34;&gt;http://tycho.usno.navy.mil/.&lt;/a&gt; For more information on time zones and the Olson database, see &lt;a href=&#34;http://www.twinsun.com/tz/tz-link.htm.&#34;&gt;http://www.twinsun.com/tz/tz-link.htm.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in discussing anything related to Perl and datetimes, check out the &lt;a href=&#34;mailto:datetime@perl.org&#34;&gt;datetime@perl.org&lt;/a&gt; list. You can subscribe by sending a message to &lt;a href=&#34;mailto:datetime-subscribe@perl.org.&#34;&gt;datetime-subscribe@perl.org.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-thanks-thanks-span&#34;&gt;&lt;span id=&#34;thanks&#34;&gt;Thanks&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thanks to Jonathan Scott Duff, Nick Tonkin, and Iain Truskett for reviewing this article before publication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Module::Build</title>
      <link>http://localhost:1313/pub/2003/02/12/module1.html/</link>
      <pubDate>Wed, 12 Feb 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/02/12/module1.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Dave Rolsky is a co-author of the recently released &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was originally published in February of 2003, and was updated by Dave Rolsky and Michael Schwern in January, 2008.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever created a Perl module for distribution on CPAN, you&amp;rsquo;ve used the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; module. This venerable module goes back to the dawn of modern Perl, which began with the release of Perl 5.000.&lt;/p&gt;

&lt;p&gt;Recently, Ken Williams has created a potential replacement for &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; called &lt;code&gt;Module::Build&lt;/code&gt;, which was first released in August of 2002. Hugo van der Sanden, the pumpking for the current development version of Perl, has expressed interest in replacing &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; with &lt;code&gt;Module::Build&lt;/code&gt; for the 5.10 release of Perl, and Michael Schwern, the current &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; maintainer, agrees with him. &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; won&amp;rsquo;t go away any time soon, but we can hope for a gradual transition to a new and improved build system.&lt;/p&gt;

&lt;h2 id=&#34;span-id-why-extutils-makemaker-is-important-why-extutils-makemaker-is-important-span&#34;&gt;&lt;span id=&#34;why_extutils::makemaker_is_important&#34;&gt;Why ExtUtils::MakeMaker is Important&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; module, along with the &lt;code&gt;h2xs&lt;/code&gt; script, has been a huge boon to the Perl community, as it makes it possible to have a &lt;em&gt;standard&lt;/em&gt; way to distribute and install Perl modules. It automates many tasks that module authors would otherwise have to to implement by hand, such as turning XS into C, compiling that C code, generating man pages from POD, running a module&amp;rsquo;s test suite, and of course, installing the module.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is a huge part of what makes PAUSE and CPAN possible, and it is quite a programming feat. Python did not have a similar utility until the September, 1999 release of distutils, PHP&amp;rsquo;s PEAR didn&amp;rsquo;t begin until mid-2000, and Ruby is just beginning to work on a standard library distribution mechanism.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-scary-guts-of-extutils-makemaker-the-scary-guts-of-extutils-makemaker-span&#34;&gt;&lt;span id=&#34;the_scary_guts_of_extutils::makemaker&#34;&gt;The Scary Guts of ExtUtils::MakeMaker&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; works by generating a makefile that contains targets for the various tasks needed when maintaining or installing a module. Here&amp;rsquo;s an example target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  install :: all pure_install doc_install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with makefile syntax, you&amp;rsquo;ll realize that all this target does is call three other targets, which are named &amp;ldquo;all&amp;rdquo;, &amp;ldquo;pure_install&amp;rdquo;, and &amp;ldquo;doc_install&amp;rdquo;. These targets in turn may call other targets, or use system commands to do whatever action is needed, in this case installing the module and its associated documentation.&lt;/p&gt;

&lt;p&gt;The makefiles generated by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; are fairly complex. For example, using version 6.05 of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; to install my &lt;code&gt;Exception::Class&lt;/code&gt; module, a pure Perl distribution containing just one module, creates a makefile with about 390 lines of makefile code. Figuring out what this makefile actually does is no simple feat, because it consists of a maze of twisty macros, all alike, many of which simply call Perl one-liners from the command line to perform some task.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; code itself is extremely complicated, as it works on many operating systems (almost as many as Perl itself), and needs to accommodate their file systems, command line shells, different versions of make, and so on. And this is all done with an extra layer of indirection in place, because it is generating a makefile which does all the work.&lt;/p&gt;

&lt;p&gt;If you want to customize the module build or installation process, good luck. To do this, you must subclass &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, override methods that generate specific makefile targets, and then tweak the generated text to include your custom behavior, all the while preserving the basic behavior of the target. Considering that there is no documentation describing what to expect from these targets, and that the actual target text may change between releases of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; or between different OS&amp;rsquo;s, this can be quite painful to implement and maintain.&lt;/p&gt;

&lt;p&gt;And by the way, you can&amp;rsquo;t really subclass &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, instead you are subclassing the &lt;code&gt;MY&lt;/code&gt; package. This is a deeply strange hack, but the end result is that you can only override certain pre-defined methods in &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;HTML::Mason&lt;/code&gt; module includes this snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package MY;

  sub test {
      my $self = shift;

      my $test = $self-&amp;gt;SUPER::test(@_);

      # %MY::APACHE is set in makeconfig.pl.
      # If we are not going to test with Apache there is no harm in
      # setting this anyway.

      # The PORT env var is used by Apache::test.  Don&#39;t delete it!
      my $port = $MY::APACHE{port} || 8228;
      $MY::APACHE{apache_dir} ||= &amp;quot;;

      my $is_maintainer = main::is_maintainer();

      # This works for older MakeMakers
      $test =~ s/(runtests \@ARGV;)/\$\$ENV{MASON_VERBOSE} ==
      \$(TEST_VERBOSE) ? \$(TEST_VERBOSE) : \$\$ENV{MASON_VERBOSE};
      \$\$ENV{PORT}=$port;
      \$\$ENV{APACHE_DIR}=q^$MY::APACHE{apache_dir}^;
      \$\$ENV{MASON_MAINTAINER}=$is_maintainer; $1/;

      my $bs = $^O =~ /Win32/i ? &amp;quot; : &#39;\\&#39;;

      # This works for newer MakeMakers (5.48_01 +)
      $test =~ s/(&amp;quot;-MExtUtils::Command::MM&amp;quot; &amp;quot;-e&amp;quot; &amp;quot;)
      (test_harness\(\$\(TEST_VERBOSE\).*?\)&amp;quot;
      \$\(TEST_FILES\))/$1 $bs\$\$ENV{MASON_VERBOSE} == \$(TEST_VERBOSE) ?
      \$(TEST_VERBOSE) : $bs\$\$ENV{MASON_VERBOSE}; $bs\$\$ENV{PORT}=$port;
      $bs\$\$ENV{APACHE_DIR}=q^$MY::APACHE{apache_dir}^;
      $bs\$\$ENV{MASON_MAINTAINER}=$is_maintainer; $2/;

      return $test;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal of all this code is to pass some additional environment information to the test scripts when they are run, so we can do tests with a live Apache server. It accommodates several versions of &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and attempts to work properly on multiple operating systems (at least Win32 and *nix), and it has to be careful about escaping things properly so that it executes properly from the shell.&lt;/p&gt;

&lt;h2 id=&#34;span-id-why-not-perl-why-not-perl-span&#34;&gt;&lt;span id=&#34;why_not_perl&#34;&gt;Why not Perl?&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;All of this prompts the question of &amp;ldquo;why not just use Perl itself for all of this?&amp;rdquo; That&amp;rsquo;s exactly the question that Ken Williams answered with &lt;code&gt;Module::Build&lt;/code&gt;. The goal of &lt;code&gt;Module::Build&lt;/code&gt; is to do everything useful that &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; does, but to do this all with pure Perl wherever possible.&lt;/p&gt;

&lt;p&gt;This greatly simplifies the build system code, and &lt;code&gt;Module::Build&lt;/code&gt; works on systems which don&amp;rsquo;t normally include make, like Win32 and Mac OS. Of course, if a module installation requires the compilation of C code, you&amp;rsquo;ll still need an external C compiler.&lt;/p&gt;

&lt;p&gt;Additionally, customizing &lt;code&gt;Module::Build&lt;/code&gt;&amp;rsquo;s behavior is often quite trivial, and only requires that you know Perl, as opposed to knowing make syntax and possibly having to learn about multiple command line environments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; also aims to improve on some of the features provided by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;. One example is its prerequisite-checking system, which provides much more flexibility than what &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; allows. While these features could be added to &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, it&amp;rsquo;s risky to make major changes to such an important module, especially one with such complex internals.&lt;/p&gt;

&lt;h2 id=&#34;span-id-using-module-build-using-module-build-span&#34;&gt;&lt;span id=&#34;using_module::build&#34;&gt;Using Module::Build&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;From an end-user perspective, a module that uses &lt;code&gt;Module::Build&lt;/code&gt; looks quite a bit like one using &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and intentionally so. So to install a module using &lt;code&gt;Module::Build&lt;/code&gt; you&amp;rsquo;d type the following lines from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  perl Build.PL
  ./Build
  ./Build test
  ./Build install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;Build.PL&lt;/em&gt; script tells &lt;code&gt;Module::Build&lt;/code&gt; to create a &lt;em&gt;Build&lt;/em&gt; script. During this process, &lt;code&gt;Module::Build&lt;/code&gt; also writes some files to a &lt;em&gt;_build/&lt;/em&gt; directory. These files are used to store the build system&amp;rsquo;s state between invocations of the &lt;em&gt;Build&lt;/em&gt; script. This script, when invoked, simply loads up &lt;code&gt;Module::Build&lt;/code&gt; again, and tells it to perform the specified action. An action is the &lt;code&gt;Module::Build&lt;/code&gt; version of a makefile target, and actions are implemented in pure Perl whenever possible.&lt;/p&gt;

&lt;p&gt;A bare bones &lt;em&gt;Build.PL&lt;/em&gt; script might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Module::Build;

  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;module_name&amp;rdquo; parameter is like the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; &amp;ldquo;NAME&amp;rdquo; parameter.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;license&amp;rdquo; parameter is new with &lt;code&gt;Module::Build&lt;/code&gt;, and its intended use it allow automated tools to determine under which license your module is distributed.&lt;/p&gt;

&lt;p&gt;To determine your module&amp;rsquo;s version, &lt;code&gt;Module::Build&lt;/code&gt; looks in the module specified by the &amp;ldquo;module_name&amp;rdquo; parameter, though this can be overridden either by specifying a different module to look in, or by providing the version number directly.&lt;/p&gt;

&lt;p&gt;Of course, there are more options than those. For example, &lt;code&gt;Module::Build&lt;/code&gt; implements a prerequisite feature similar to that implemented by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, so we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; 2.1013,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have any experience with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, you can probably figure out that this says that our module requires any version of &lt;code&gt;CGI&lt;/code&gt;, and version 2.1013 or greater of &lt;code&gt;DBD::mysql&lt;/code&gt;. So far, this looks just like what &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; provides, but &lt;code&gt;Module::Build&lt;/code&gt; goes further.&lt;/p&gt;

&lt;p&gt;Consider what happens if we know that we need some piece of functionality first present in &lt;code&gt;DBD::mysql&lt;/code&gt; 2.1013. But perhaps a release after this, 2.1014, introduced a new bug that breaks our application. If this bug is fixed in version 2.1015, we &lt;em&gt;could&lt;/em&gt; simply require version 2.1015, but this is not ideal. There&amp;rsquo;s no reason to force someone who already has 2.1013 to upgrade because of a bug in a version they don&amp;rsquo;t have.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code&gt;Module::Build&lt;/code&gt; provides a more flexible version specification option that handles exactly this situation, so we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; &#39;&amp;gt;= 2.1013, != 2.1014&#39;,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says that we need a version greater than 2.1013 that &lt;strong&gt;is not&lt;/strong&gt; version 2.1014. Users who have version 2.1013 or version 2.1015 or greater are not forced to upgrade, but anyone with 2.1014 will be.&lt;/p&gt;

&lt;p&gt;If we knew that version 3.0 didn&amp;rsquo;t work with your module, we could change our specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Module::Build-&amp;gt;new
      ( module_name =&amp;gt; &#39;My::Module&#39;,
        license =&amp;gt; &#39;perl&#39;,
        requires =&amp;gt; { &#39;CGI&#39; =&amp;gt; 0,
                      &#39;DBD::mysql&#39; =&amp;gt; &#39;&amp;gt;= 2.1013, != 2.1014, &amp;lt; 3.0&#39;,
                    },
      )-&amp;gt;create_build_script;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user does have version 3.0 or greater installed, it will at least let them know that it won&amp;rsquo;t work with our module. Unfortunately, the only possible way to use our module at this point is for the end user to manually downgrade their installation of &lt;code&gt;DBD::mysql&lt;/code&gt;, since Perl does not allow multiple versions of a module to co-exist peacefully. Still, this is better than letting the module be installed, only to fail at runtime when it tries to use an outdated API for &lt;code&gt;DBD::mysql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also other options related to prerequisites, such as &amp;ldquo;recommends&amp;rdquo; and &amp;ldquo;build_requires&amp;rdquo;, which can be helpful for prerequisites that are required to build the module but don&amp;rsquo;t need to be present after installation. There is also a &amp;ldquo;conflicts&amp;rdquo; option which can be used to warn a user about potential conflicts between the module they are installing and one they already have.&lt;/p&gt;

&lt;h2 id=&#34;span-id-action-action-span&#34;&gt;&lt;span id=&#34;action!&#34;&gt;Action!&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;As of release 1.15, Module::Build implements the following actions, most of which are based on existing &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_build&#34;&gt;build&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the default action, and is what happens if you run &lt;em&gt;./Build&lt;/em&gt; without any additional arguments. It is responsible for creating the &lt;em&gt;blib/&lt;/em&gt; directory and copying files into it, as well as compiling XS and C files. If you have any scripts like &lt;em&gt;lib/My/Module.pm.PL&lt;/em&gt;, these are also run during this action.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_test%2c_testdb&#34;&gt;test, testdb&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Runs the module&amp;rsquo;s tests using the &lt;code&gt;Test::Harness&lt;/code&gt; module. The &amp;ldquo;testdb&amp;rdquo; action can be used to run the tests under Perl&amp;rsquo;s debugger. Equivalently, a &amp;ldquo;debugger&amp;rdquo; parameter can be passed to the &amp;ldquo;test&amp;rdquo; action to get the same effect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_clean%2c_realclean&#34;&gt;clean, realclean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both actions delete any files created by the &amp;ldquo;build&amp;rdquo; action. The &amp;ldquo;realclean&amp;rdquo; action also deletes the existing &lt;em&gt;Build&lt;/em&gt; script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_diff&#34;&gt;diff&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This action is used to compare the files about to be installed with any corresponding files that already exist. This feature is unique to &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_install&#34;&gt;install&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installs the module files. As of version 0.15, this doesn&amp;rsquo;t yet create or install any man pages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_fakeinstall&#34;&gt;fakeinstall&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what the &amp;ldquo;install&amp;rdquo; would do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_dist&#34;&gt;dist&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creates a gzip&amp;rsquo;d tarball of your distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_manifest&#34;&gt;manifest&lt;/span&gt;&lt;/strong&gt;
Creates a &lt;em&gt;MANIFEST&lt;/em&gt; file for your distribution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distcheck&#34;&gt;distcheck&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what files are in the build directory but not in the &lt;em&gt;MANIFEST&lt;/em&gt; file, and vice versa.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_skipcheck&#34;&gt;skipcheck&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what files will not be added to the &lt;em&gt;MANIFEST&lt;/em&gt; by the &amp;ldquo;manifest&amp;rdquo; action, based on the contents of your &lt;em&gt;MANIFEST.SKIP&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distclean&#34;&gt;distclean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a shortcut for &amp;ldquo;realclean&amp;rdquo; followed by &amp;ldquo;distcheck&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_distdir&#34;&gt;distdir&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creates a directory based on your distribution name and version, and then copies all the files listed in &lt;em&gt;MANIFEST&lt;/em&gt; to that directory. This directory is what people will see when they download and unpack your distribution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; also creates a file called &lt;em&gt;META.yaml&lt;/em&gt; which contains meta-data about your distribution. In the future, it may be possible to use a command line tool (written in Perl, of course) to read this file and use its contents to install your distribution, without running the &lt;em&gt;Build.PL&lt;/em&gt; script. It also makes the meta-data more readily available to tools like MetaCPAN or the CPAN shell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_disttest&#34;&gt;disttest&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This performs the &amp;ldquo;distdir&amp;rdquo; action, switches to the newly created directory, and then runs &lt;code&gt;perl Build.PL&lt;/code&gt;, &lt;code&gt;./Build&lt;/code&gt;, and &lt;code&gt;./Build test&lt;/code&gt;. This lets you make sure that your distribution is actually installable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_help&#34;&gt;help&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tells you what actions are available. If additional actions are implemented in a distribution, then these are listed here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any of these options can be overridden through straightforward subclassing, so our &lt;code&gt;HTML::Mason&lt;/code&gt; example from earlier in this article might be written something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package MyFancyBuilder;

  use base &#39;Module::Build&#39;;

  sub ACTION_test {
      my $self = shift;

      # %MY::APACHE is set in makeconfig.pl.

      $ENV{PORT}             = $MY::APACHE{port}       || 8228;
      $ENV{APACHE_DIR}       = $MY::APACHE{apache_dir} || &amp;quot;;
      $ENV{MASON_VERBOSE}  ||= $self-&amp;gt;{properties}{verbose};
      # _is_maintainer_mode would be another method of our subclass
      $ENV{MASON_MAINTAINER} = $self-&amp;gt;_is_maintainer_mode();

      return $self-&amp;gt;SUPER::ACTION_test(@_);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version is actually readable, and is unlikely to break regardless of changes in the &lt;code&gt;Module::Build&lt;/code&gt; internals. This highlights just how difficult it was to accomplish a simple task using &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, and how natural the pure-Perl solution can be.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-larger-picture-and-backwards-compatibility-the-larger-picture-and-backwards-compatibility-span&#34;&gt;&lt;span id=&#34;the_larger_picture_and_backwards_compatibility&#34;&gt;The Larger Picture and Backwards Compatibility&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;One difficulty in getting &lt;code&gt;Module::Build&lt;/code&gt; into widespread use is the fact that support for &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is so tightly integrated into CPAN installers.&lt;/p&gt;

&lt;p&gt;While the version of &lt;code&gt;CPAN.pm&lt;/code&gt; which ships with 5.8 does not know how to deal with Build.PL, the latest version available from CPAN does. It will even install &lt;code&gt;Module::Build&lt;/code&gt; for you. As of January 2008, &lt;code&gt;CPANPLUS&lt;/code&gt;, another CPAN shell, understands &lt;em&gt;Build.PL&lt;/em&gt; but will not install &lt;code&gt;Module::Build&lt;/code&gt; for you, but this will be remedied in a future release.&lt;/p&gt;

&lt;p&gt;However, old versions of &lt;code&gt;CPAN.pm&lt;/code&gt; are still in extremely widespread use, and users won&amp;rsquo;t necessarily upgrade &lt;code&gt;CPAN.pm&lt;/code&gt; before attempting to install a distribution that relies on &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple workarounds for this problem. The simplest is to just include a &lt;em&gt;Build.PL&lt;/em&gt; script and document this in the &lt;em&gt;README&lt;/em&gt; or &lt;em&gt;INSTALL&lt;/em&gt; files included with your distribution. This has the appeal of requiring of very little work to implement, but the downside is that people who expect things to just work with a CPAN shell will give up when your distribution doesn&amp;rsquo;t install properly.&lt;/p&gt;

&lt;p&gt;Another possibility is to create functionally equivalent &lt;em&gt;Build.PL&lt;/em&gt; and &lt;em&gt;Makefile.PL&lt;/em&gt; scripts. If you&amp;rsquo;re using &lt;code&gt;Module::Build&lt;/code&gt; because you need to customize installation behavior in a way that is difficult to do with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;, this pretty much defeats the purpose of using &lt;code&gt;Module::Build&lt;/code&gt; at all, and in any case having two separate pieces of code that do the same thing is always unappealing.&lt;/p&gt;

&lt;p&gt;Then there&amp;rsquo;s the approach which involves using a &lt;em&gt;Makefile.PL&lt;/em&gt; script that simply installs &lt;code&gt;Module::Build&lt;/code&gt; if needed, and then generates a &lt;em&gt;Makefile&lt;/em&gt; that passes everything through to the &lt;em&gt;./Build&lt;/em&gt; script. This is known as the &amp;ldquo;passthrough&amp;rdquo; method.&lt;/p&gt;

&lt;p&gt;I think this approach gives the best result for the effort involved, and is the method I prefer. The &lt;code&gt;Module::Build&lt;/code&gt; distribution includes a &lt;code&gt;Module::Build::Compat&lt;/code&gt; module, which does the dirty work needed for this approach.&lt;/p&gt;

&lt;p&gt;Simply add &lt;code&gt;create_makefile_pl =&amp;gt; &#39;passthrough&#39;&lt;/code&gt; to the &lt;em&gt;Build.PL&lt;/em&gt; parameters and a &lt;em&gt;Makefile.PL&lt;/em&gt; will be created as part of the &lt;code&gt;Build dist&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of such a &lt;em&gt;Makefile.PL&lt;/em&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Note: this file was auto-generated by Module::Build::Compat version 0.03

    unless (eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; ) {
      print &amp;quot;This module requires Module::Build to install itself.\n&amp;quot;;

      require ExtUtils::MakeMaker;
      my $yn = ExtUtils::MakeMaker::prompt
        (&#39;  Install Module::Build now from CPAN?&#39;, &#39;y&#39;);

      unless ($yn =~ /^y/i) {
        die &amp;quot; *** Cannot install without Module::Build.  Exiting ...\n&amp;quot;;
      }

      require Cwd;
      require File::Spec;
      require CPAN;

      # Save this &#39;cause CPAN will chdir all over the place.
      my $cwd = Cwd::cwd();

      CPAN::Shell-&amp;gt;install(&#39;Module::Build::Compat&#39;);
      CPAN::Shell-&amp;gt;expand(&amp;quot;Module&amp;quot;, &amp;quot;Module::Build::Compat&amp;quot;)-&amp;gt;uptodate
        or die &amp;quot;Couldn&#39;t install Module::Build, giving up.\n&amp;quot;;

      chdir $cwd or die &amp;quot;Cannot chdir() back to $cwd: $!&amp;quot;;
    }
    eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; or die $@;

    Module::Build::Compat-&amp;gt;run_build_pl(args =&amp;gt; \@ARGV);
    require Module::Build;
    Module::Build::Compat-&amp;gt;write_makefile(build_class =&amp;gt; &#39;Module::Build&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what exactly is going on here? A good question indeed. Let&amp;rsquo;s walk through some of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    unless (eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; ) {
      print &amp;quot;This module requires Module::Build to install itself.\n&amp;quot;;

      require ExtUtils::MakeMaker;
      my $yn = ExtUtils::MakeMaker::prompt
        (&#39;  Install Module::Build now from CPAN?&#39;, &#39;y&#39;);

      unless ($yn =~ /^y/i) {
        die &amp;quot; *** Cannot install without Module::Build.  Exiting ...\n&amp;quot;;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This first attempts to load version 0.02 or greater of the &lt;code&gt;Module::Build::Compat&lt;/code&gt; module. If it isn&amp;rsquo;t installed we know we need to install &lt;code&gt;Module::Build&lt;/code&gt;. Because we&amp;rsquo;re polite, we ask the user if they would like to install &lt;code&gt;Module::Build&lt;/code&gt; before going further. Some people dislike interactive installations, but fortunately the promp() command is pretty smart about detecting if there&amp;rsquo;s a user at the end of the line.&lt;/p&gt;

&lt;p&gt;Assuming that the user agrees to install &lt;code&gt;Module::Build&lt;/code&gt; (if they don&amp;rsquo;t the installer has to give up) this is what comes next:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      # Save this &#39;cause CPAN will chdir all over the place.
      my $cwd = Cwd::cwd();

      CPAN::Shell-&amp;gt;install(&#39;Module::Build::Compat&#39;);
      CPAN::Shell-&amp;gt;expand(&amp;quot;Module&amp;quot;, &amp;quot;Module::Build::Compat&amp;quot;)-&amp;gt;uptodate
        or die &amp;quot;Couldn&#39;t install Module::Build, giving up.\n&amp;quot;;

      chdir $cwd or die &amp;quot;Cannot chdir() back to $cwd: $!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to use &lt;code&gt;CPAN.pm&lt;/code&gt; to actually install &lt;code&gt;Module::Build&lt;/code&gt;, but we need to first save our current directory, because &lt;code&gt;CPAN.pm&lt;/code&gt; calls &lt;code&gt;chdir()&lt;/code&gt; quite a bit, and we&amp;rsquo;ll need to be in the same directory as we started in after installing &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we load &lt;code&gt;CPAN.pm&lt;/code&gt; and tell it to install &lt;code&gt;Module::Build&lt;/code&gt;. After that, we &lt;code&gt;chdir()&lt;/code&gt; back to our original directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    eval &amp;quot;use Module::Build::Compat 0.02; 1&amp;quot; or die $@;

    Module::Build::Compat-&amp;gt;run_build_pl(args =&amp;gt; \@ARGV);
    require Module::Build;
    Module::Build::Compat-&amp;gt;write_makefile(build_class =&amp;gt; &#39;Module::Build&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First it checks that the &lt;code&gt;Module::Build&lt;/code&gt; install worked. Then it simply tells &lt;code&gt;Module::Build::Compat&lt;/code&gt; to run the &lt;em&gt;Build.PL&lt;/em&gt; script, and to write out a &amp;ldquo;passthrough&amp;rdquo; &lt;em&gt;Makefile&lt;/em&gt;. &lt;code&gt;Module::Build::Compat&lt;/code&gt; will attempt to convert &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; style arguments, like &amp;ldquo;PREFIX&amp;rdquo;, to arguments that &lt;code&gt;Module::Build&lt;/code&gt; can understand, like &amp;ldquo;&amp;ndash;prefix&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;passthrough&amp;rdquo; &lt;em&gt;Makefile&lt;/em&gt; that &lt;code&gt;Module::Build::Compat&lt;/code&gt; generates looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  all :
          ./Build
  realclean :
          ./Build realclean
          rm -f \$(THISFILE)
  .DEFAULT :
          ./Build \$@
  .PHONY   : install manifest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;.DEFAULT&amp;rdquo; target is called when there is no matching make target for the one given on the command line. It uses the &amp;ldquo;$@&amp;rdquo; make variable, which will contain the name of the target that was passed to make. So if &amp;ldquo;make install&amp;rdquo; is called, then &amp;ldquo;$@&amp;rdquo; contains &amp;ldquo;install&amp;rdquo;, and it ends up running &amp;ldquo;./Build install&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The generated Makefile also contains a comment which specifies the module&amp;rsquo;s prerequisites, because this is how &lt;code&gt;CPAN.pm&lt;/code&gt; figures out what a module&amp;rsquo;s prerequisites are (scary but true).&lt;/p&gt;

&lt;p&gt;This approach is the most elegant of all, but the code that translates &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; arguments to something &lt;code&gt;Module::Build&lt;/code&gt; understands is quite minimal and won&amp;rsquo;t handle all possibilities.&lt;/p&gt;

&lt;p&gt;I have used this approach for one CPAN module, &lt;code&gt;Thesaurus.pm&lt;/code&gt;, and in my limited testing it did work. If you are inclined to try installing this module, please send bug reports to me or the &lt;code&gt;Module::Build&lt;/code&gt; users list, &lt;code&gt;module-build-general@lists.sf.net&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recently, Autrijus Tang submitted a more complex &lt;em&gt;Makefile.PL&lt;/em&gt; script which implements several pieces of additional functionality. First of all, it makes sure that the script is running as a user that can actually install &lt;code&gt;Module::Build&lt;/code&gt;. Second, it prefers &lt;code&gt;CPANPLUS.pm&lt;/code&gt; to &lt;code&gt;CPAN.pm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Autrijus&amp;rsquo; script looks promising, but since it hasn&amp;rsquo;t yet been tested, I&amp;rsquo;ve chosen not to include it here. It&amp;rsquo;s quite likely that some version of his script will be documented in future versions of &lt;code&gt;Module::Build&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-custom-behavior-custom-behavior-span&#34;&gt;&lt;span id=&#34;custom_behavior&#34;&gt;Custom Behavior&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;As was hinted at earlier, you can directly subclass &lt;code&gt;Module::Build&lt;/code&gt; in order to implement custom behavior. This is a big topic unto itself, and will be the topic of a future article here on perl.com.&lt;/p&gt;

&lt;h2 id=&#34;span-id-the-future-the-future-span&#34;&gt;&lt;span id=&#34;the_future&#34;&gt;The Future&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There is plenty of work left to be done on &lt;code&gt;Module::Build&lt;/code&gt;. Off the top of my head, here are some things that still need to be done:&lt;/p&gt;

&lt;p&gt;The installation phase does not yet create man pages based on POD included in the distribution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; needs to implement a &amp;ldquo;local install&amp;rdquo; feature like the one provided by the &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; &amp;ldquo;PREFIX&amp;rdquo; argument. The logic that implements this in &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; is Byzantine, but only because doing this correctly is quite complicated. This logic needs to be implemented for &lt;code&gt;Module::Build&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Module::Build&lt;/code&gt; needs better backwards compatibility with &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;. The argument translation in &lt;code&gt;Module::Build::Compat&lt;/code&gt; is currently just a placeholder. Things like &amp;ldquo;PREFIX&amp;rdquo;, &amp;ldquo;LIB&amp;rdquo;, and &amp;ldquo;UNINST=1&amp;rdquo; all need to be translated by &lt;code&gt;Module::Build::Compat&lt;/code&gt;, and the equivalent functionality needs to be implemented for &lt;code&gt;Module::Build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CPANPLUS.pm&lt;/code&gt; could take advantage of more &lt;code&gt;Module::Build&lt;/code&gt; features. For example, it currently ignores the &amp;ldquo;conflict&amp;rdquo; information that &lt;code&gt;Module::Build&lt;/code&gt; makes available, and it doesn&amp;rsquo;t attempt to distinguish between &amp;ldquo;build_requires&amp;rdquo;, &amp;ldquo;requires&amp;rdquo;, or &amp;ldquo;recommends&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Some of what &lt;code&gt;Module::Build&lt;/code&gt; provides is intended for use by external tools, such as the meta-data provided by the &lt;em&gt;META.yaml&lt;/em&gt; file. &lt;code&gt;CPANPLUS.pm&lt;/code&gt; could use this to avoid having to run the &lt;em&gt;Build.PL&lt;/em&gt; and &lt;em&gt;Build&lt;/em&gt; scripts, thus avoiding the need to install any of the &amp;ldquo;build_requires&amp;rdquo; modules. Package managers like &lt;code&gt;rpm&lt;/code&gt; or the Debian tools could also use it to construct installable packages for Perl modules more easily.&lt;/p&gt;

&lt;p&gt;Adding at least basic support for &lt;code&gt;Module::Build&lt;/code&gt; to &lt;code&gt;CPAN.pm&lt;/code&gt; would be nice. If anyone is interested in pursuing this, I have an old patch that may provide a decent start on this. Contact me if you&amp;rsquo;re interested.&lt;/p&gt;

&lt;h2 id=&#34;span-id-more-information-more-information-span&#34;&gt;&lt;span id=&#34;more_information&#34;&gt;More Information&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;If you want to learn more about &lt;code&gt;Module::Build&lt;/code&gt;, the first thing you should do is install it (it will install itself just fine under &lt;code&gt;CPAN.pm&lt;/code&gt;) and read the docs for the &lt;code&gt;Module::Build&lt;/code&gt; and &lt;code&gt;Module::Build::Compat&lt;/code&gt; modules. The &lt;a href=&#34;https://github.com/Perl-Toolchain-Gang/Module-Build&#34;&gt;source is on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;span-id-thanks-thanks-span&#34;&gt;&lt;span id=&#34;thanks&#34;&gt;Thanks&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Thanks to Ken Williams for reviewing this article before publication, and for writing &lt;code&gt;Module::Build&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming with Mason</title>
      <link>http://localhost:1313/pub/2002/12/11/mason.html/</link>
      <pubDate>Wed, 11 Dec 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/12/11/mason.html/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Dave Rolsky and Ken Williams are the authors of &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mason is a powerful framework for generating dynamic text, and is especially useful when creating complex, featureful Web sites. For those (hopefully few) folks who haven&amp;rsquo;t yet heard of Mason, it is a Perl-based templating framework comparable to frameworks such as Apache::ASP, Embperl, and Template Toolkit. Like the first two, and unlike the latter, Mason operates by embedding Perl in text.&lt;/p&gt;

&lt;p&gt;Mason is based around the idea of a &lt;em&gt;component&lt;/em&gt;. A component is roughly equivalent to a Perl subroutine, and can contain text and/or code. Here is a &lt;em&gt;very&lt;/em&gt; simple, but complete component that has both text and code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; % my $planet = &amp;quot;World&amp;quot;;
 Hello, &amp;lt;% $planet %&amp;gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When Mason runs this code, the output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of this article assumes at least a minimal familiarity with Mason, though if you&amp;rsquo;re at all familiar with other templating systems, you&amp;rsquo;ll probably be able to grok the code we show. For more details, I would of course recommend &lt;em&gt;Embedding Perl in HTML with Mason&lt;/em&gt;, written by Ken Williams and myself. Mason also comes with its own documentation, which can be seen online at &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;www.masonhq.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with any powerful and flexible system, Mason is applicable to a lot of problems, and there is always more than one way to do it. It is a &lt;em&gt;Perl&lt;/em&gt;-based system, after all!&lt;/p&gt;

&lt;p&gt;Below you&amp;rsquo;ll find some cookbook recipes for solving a few typical Web application problems. All the recipes assume that you are using the latest version of Mason, which at the time of this writing is 1.15, though most of them will work untouched with older versions.&lt;/p&gt;

&lt;h3 id=&#34;putting-a-session-id-in-all-urls&#34;&gt;Putting a Session ID in All URLs&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve ever written a dynamic Web application, then it&amp;rsquo;s likely that you&amp;rsquo;ve used sessions to store data as the user moves through the application. Typically, sessions are identified by session IDs that are stored in a cookie.&lt;/p&gt;

&lt;p&gt;If you cannot use cookies, then you can store the session ID in the URL. There are security and application problems with this approach (as well as with the user of cookies), but those are outside the scope of this article. The mod_perl user list archives at &lt;a href=&#34;http://marc.theaimsgroup.com/?l=apache-modperl&#34;&gt;marc.theaimsgroup.com/?l=apache-modperl&lt;/a&gt; contain a number of discussions related to this topic.&lt;/p&gt;

&lt;p&gt;Putting the session ID in the URL can be a hassle, because it means that you have to somehow process all the URLs you generate. Using Mason, this isn&amp;rsquo;t as difficult as it would be otherwise. There are at least two ways to do this.&lt;/p&gt;

&lt;p&gt;The first would be to put a filter in your top level &lt;code&gt;autohandler&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%filter&amp;gt;
   s/href=&amp;quot;([^&amp;quot;])+&amp;quot;/&#39;href=&amp;quot;&#39; . add_session_id($1) . &#39;&amp;quot;&#39;/eg;
   s/action=&amp;quot;([^&amp;quot;])+&amp;quot;/&#39;href=&amp;quot;&#39; . add_session_id($1) . &#39;&amp;quot;&#39;/eg;
  &amp;lt;/%filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;add_session_id()&lt;/code&gt; subroutine, which should be defined in a module, might look something like this:
      sub add_session_id {
          my $url = shift;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      return $url if $url =~ m{^\w+://}; # Don&#39;t alter external URLs

      if ($url =~ /\?/) {
      $url =~ s/\?/?session_id=$MasonBook::Session{_session_id}&amp;amp;/;
      } else {
          $url .= &amp;quot;?session_id=$MasonBook::Session{_session_id}&amp;quot;;
      }

      return $url;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This routine accounts for external links as well as links with or without an existing query string.&lt;/p&gt;

&lt;p&gt;The drawback to putting this in a &lt;code&gt;&amp;lt;%filter&amp;gt;&lt;/code&gt; section is that it only filters URLs in the content generated by components, and misses any URLs that might be in headers, such as in a redirect. Therefore, you&amp;rsquo;d need to handle those cases separately with this solution.&lt;/p&gt;

&lt;p&gt;Another solution would be to create all URLs (including those intended for redirects) via a dedicated component or subroutine that adds the session id. This latter solution is probably a better idea, as it handles redirects properly. The drawback with this strategy is that you&amp;rsquo;ll have a Mason component call for every link, instead of just regular HTML.&lt;/p&gt;

&lt;p&gt;Here is just such a component:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $scheme   =&amp;gt; &#39;http&#39;
   $username =&amp;gt; undef
   $password =&amp;gt; &#39;&#39;
   $host     =&amp;gt; undef
   $port     =&amp;gt; undef
   $path
   %query    =&amp;gt; ()
   $fragment =&amp;gt; undef
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   my $uri = URI-&amp;gt;new;

   if ($host) {
       $uri-&amp;gt;scheme($scheme);

       if (defined $username) {
           $uri-&amp;gt;authority( &amp;quot;$username:$password&amp;quot; );
       }

       $uri-&amp;gt;host($host);
       $uri-&amp;gt;port($port) if $port;
   }

   # Sometimes we may want to include a path in a query string as part
   # of the path but the URI module will escape the question mark.
   my $q;

   if ( $path =~ s/\?(.*)$// ) {
       $q = $1;
   }

   $uri-&amp;gt;path($path);

   # If there was a query string, we integrate it into the query
   # parameter.
   if ($q) {
       %query = ( %query, split /[&amp;amp;=]/, $q );
   }

   $query{session_id} = $UserSession{session_id};

   # $uri-&amp;gt;query_form doesn&#39;t handle hash ref values properly
   while ( my ( $key, $value ) = each %query ) {
       $query{$key} = ref $value eq &#39;HASH&#39; ? [ %$value ] : $value;
   }

   $uri-&amp;gt;query_form(%query) if %query;

   $uri-&amp;gt;fragment($fragment) if $fragment;
  &amp;lt;/%init&amp;gt;
  &amp;lt;% $uri-&amp;gt;canonical | n %&amp;gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you didn&amp;rsquo;t want to put the session ID in the query string, then you might instead make it part of the URL path. The application could retrieve the session id from incoming requests by using a mod_perl handler during the URL translation stage of request handling.&lt;/p&gt;

&lt;p&gt;This component provides a programmatic interface to URL generation. Here is an example of how to use it, assuming that you&amp;rsquo;ve saved it as a component called &lt;code&gt;/url&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ... some HTML ...
   Look at &amp;lt;a href=&amp;quot;&amp;lt;&amp;amp; /url, path =&amp;gt; &amp;quot;books.html&amp;quot; &amp;amp;&amp;gt;&amp;quot;&amp;gt;our books&amp;lt;/a&amp;gt;
   or &amp;lt;a href=&amp;quot;&amp;lt;&amp;amp; /url, host =&amp;gt; &amp;quot;www.oreilly.com&amp;quot;
                        path =&amp;gt; &amp;quot;/catalog&amp;quot; &amp;amp;&amp;gt;&amp;quot;&amp;gt;O&#39;Reilly&#39;s&amp;lt;/a&amp;gt;.
   ... some HTML ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;making-use-of-autoflush&#34;&gt;Making Use of Autoflush&lt;/h3&gt;

&lt;p&gt;Every once in a while, you may have to output a very large component or a file to the client. If you simply let this accumulate in the output buffer, you could use up a lot of memory. Furthermore, the slow response time may make the user think that the site has stalled.&lt;/p&gt;

&lt;p&gt;Here is an example that sends out the contents of a potentially large file without sucking up lots of memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $filename
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   local *FILE;
   open FILE, &amp;quot;&amp;lt; $filename&amp;quot; or die &amp;quot;Cannot open $filename: $!&amp;quot;;
   $m-&amp;gt;autoflush(1);
   while (&amp;lt;FILE&amp;gt;) {
       $m-&amp;gt;print($_);
   }
   $m-&amp;gt;autoflush(0);
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If each line wasn&amp;rsquo;t too huge, then you might just flush the buffer every once in a while:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $filename
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   local *FILE;
   open FILE, &amp;quot;&amp;lt; $filename&amp;quot; or die &amp;quot;Cannot open $filename: $!&amp;quot;;
   while (&amp;lt;FILE&amp;gt;) {
       $m-&amp;gt;print($_);
       $m-&amp;gt;flush_buffer unless $. % 10;
   }
   $m-&amp;gt;flush_buffer;
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unless $. % 10&lt;/code&gt; bit makes use of the special Perl variable &lt;code&gt;$.&lt;/code&gt;, which is the current line number of the file being read. If this number modulo 10 is equal to zero, then we flush the buffer. This means that we flush the buffer every 10 lines. (Replace the number 10 with any desired value.)&lt;/p&gt;

&lt;h3 id=&#34;user-authentication-and-authorization&#34;&gt;User Authentication and Authorization&lt;/h3&gt;

&lt;p&gt;One problem that Web sites have to solve over and over again is user authentication and authorization. These two topics are related but not the same, as some might think. Authentication is the process of figuring out if someone is who they say they are, and usually involves checking passwords or keys. Authorization comes after this, when we want to determine whether a particular person is allowed to perform a certain action.&lt;/p&gt;

&lt;p&gt;There are a number of modules on CPAN that are intended to help do these things under &lt;code&gt;mod_perl&lt;/code&gt;. In fact, Apache has separate request-handling phases for both authentication and authorization that &lt;code&gt;mod_perl&lt;/code&gt; can handle. It is certainly possible to use these modules with Mason.&lt;/p&gt;

&lt;p&gt;You can also do authentication and authorization using Mason components. Authentication will usually involve some sort of request for a login and a password, after which you give the user some sort of token (either in a cookie or a session) that indicates that they have been authenticated. You can then check the validity of this token for each request.&lt;/p&gt;

&lt;p&gt;If you have such a token, then authorization simply consists of checking that the user to whom the token belongs is allowed to perform a given action.&lt;/p&gt;

&lt;h3 id=&#34;using-apache-authcookie&#34;&gt;Using Apache::AuthCookie&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Apache::AuthCookie&lt;/code&gt; module, available from CPAN, is a module that handles both authentication and authorization via &lt;code&gt;mod_perl&lt;/code&gt; and can be easily hooked into Mason. Rather than go through all the details of configuring &lt;code&gt;Apache::AuthCookie&lt;/code&gt;, which requires various settings in your server config file, let&amp;rsquo;s just skip all that and show you how you&amp;rsquo;d make the interface to Mason.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Apache::AuthCookie&lt;/code&gt; requires that you create a &amp;ldquo;login script&amp;rdquo; that will be executed the first time a browser tries to access a protected area. Calling this a script is actually somewhat misleading since it is really a page rather than a script (though it could be a script that generates a page). Regardless, using a Mason component for your &amp;ldquo;login script&amp;rdquo; merely requires that you specify the path to your Mason component for the login script parameter.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll call this &amp;ldquo;script&amp;rdquo; &lt;code&gt;AuthCookieLoginForm.comp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Mason Book AuthCookie Login Form&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;
  Your attempt to access this document was denied
  (&amp;lt;% $r-&amp;gt;prev-&amp;gt;subprocess_env(&amp;quot;AuthCookieReason&amp;quot;) %&amp;gt;).  Please enter
  your username and password.
  &amp;lt;/p&amp;gt;

  &amp;lt;form action=&amp;quot;/AuthCookieLoginSubmit&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;destination&amp;quot; value=&amp;quot;&amp;lt;% $r-&amp;gt;prev-&amp;gt;uri %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;table align=&amp;quot;left&amp;quot;&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Username:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;credential_0&amp;quot; size=&amp;quot;10&amp;quot; maxlength=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Password:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;credential_1&amp;quot; size=&amp;quot;8&amp;quot; maxlength=&amp;quot;8&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td colspan=&amp;quot;2&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;/form&amp;gt;

  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component is modified version of the example login script included with the &lt;code&gt;Apache::AuthCookie&lt;/code&gt; distribution.&lt;/p&gt;

&lt;p&gt;The action used for this form, `&lt;code&gt;, is configured as part of your AuthCookie configuration in your&lt;/code&gt;httpd.conf` file.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about all it takes to glue &lt;code&gt;Apache::AuthCookie&lt;/code&gt; and Mason together. The rest of authentication and authorization is handled by configuring &lt;code&gt;mod_perl&lt;/code&gt; to use &lt;code&gt;Apache::AuthCookie&lt;/code&gt; to protect anything on your site that needs authorization. A very simple configuration might include the following directives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  PerlSetVar MasonBookLoginScript /AuthCookieLoginForm.comp

  &amp;lt;location /authcookieloginsubmit&amp;gt;
    AuthType MasonBook::AuthCookieHandler
    AuthName MasonBook
    SetHandler  perl-script
    PerlHandler MasonBook::AuthCookieHandler-&amp;gt;login
  &amp;lt;/location&amp;gt;

  &amp;lt;location /protected&amp;gt;
    AuthType MasonBook::AuthCookieHandler
    AuthName MasonBook
    PerlAuthenHandler MasonBook::AuthCookieHandler-&amp;gt;authenticate
    PerlAuthzHandler  MasonBook::AuthCookieHandler-&amp;gt;authorize
    require valid-user
  &amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MasonBook::AuthCookieHandler&lt;/code&gt; module would look like this:
      package MasonBook::AuthCookieHandler;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use strict;

  use base qw(Apache::AuthCookie);

  use Digest::SHA1;

  my $secret = &amp;quot;You think I&#39;d tell you?  Hah!&amp;quot;;

  sub authen_cred {
      my $self = shift;
      my $r = shift;
      my ($username, $password) = @_;

      # implementing _is_valid_user() is out of the scope of this chapter
      if ( _is_valid_user($username, $password) ) {
          my $session_key =
            $username . &#39;::&#39; . Digest::SHA1::sha1_hex( $username, $secret );
          return $session_key;
      }
  }

  sub authen_ses_key {
      my $self = shift;
      my $r = shift;
      my $session_key = shift;

      my ($username, $mac) = split /::/, $session_key;

      if ( Digest::SHA1::sha1_hex( $username, $secret ) eq $mac ) {
          return $session_key;
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This provides the minimal interface an &lt;code&gt;Apache::AuthCookie&lt;/code&gt; subclass needs to provide to get authentication working.&lt;/p&gt;

&lt;h3 id=&#34;doing-it-my-way-thanks-frank&#34;&gt;Doing It My Way (Thanks Frank)&lt;/h3&gt;

&lt;p&gt;But what if you don&amp;rsquo;t want to use &lt;code&gt;Apache::AuthCookie&lt;/code&gt;? For example, your site may need to work without using cookies. No doubt this was exactly what Frank Sinatra was thinking about when he sang &amp;ldquo;My Way,&amp;rdquo; so let&amp;rsquo;s do it our way.&lt;/p&gt;

&lt;p&gt;First, we will show an example authentication system that only uses Mason and passes the authentication token around via the URL (actually, via a session).&lt;/p&gt;

&lt;p&gt;This example assumes that we already have some sort of session system that passes the session id around as part of the URL, as discussed previously.&lt;/p&gt;

&lt;p&gt;We start with a quick login form. We will call this component &lt;code&gt;login_form.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $username =&amp;gt; &#39;&#39;
   $password =&amp;gt; &#39;&#39;
   $redirect_to =&amp;gt; &#39;&#39;
   @errors =&amp;gt; ()
  &amp;lt;/%args&amp;gt;
  &amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Mason Book Login&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;

  % if (@errors) {
  &amp;lt;h2&amp;gt;Errors&amp;lt;/h2&amp;gt;
  %   foreach (@errors) {
  &amp;lt;b&amp;gt;&amp;lt;% $_ | h %&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;
  %   }
  % }

  &amp;lt;form action=&amp;quot;login_submit.html&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;redirect_to&amp;quot; value=&amp;quot;&amp;lt;% $redirect_to %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;table align=&amp;quot;left&amp;quot;&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Login:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; value=&amp;quot;&amp;lt;% $username %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td align=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Password:&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; value=&amp;quot;&amp;lt;% $password %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
    &amp;lt;td colspan=&amp;quot;2&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Login&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
  &amp;lt;/form&amp;gt;

  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This form uses some of the same techniques we show in Chapter 8 (&amp;ldquo;Building a Mason Site&amp;rdquo;) to pre-populate the form and to handle errors.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s make the component that handles the form submission. This component, called &lt;code&gt;login_submit.html&lt;/code&gt;, will check the username and password and, if they are valid, place an authentication token into the user&amp;rsquo;s session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%args&amp;gt;
   $username
   $password
   $redirect_to
  &amp;lt;/%args&amp;gt;
  &amp;lt;%init&amp;gt;
   if (my @errors = check_login($username, $password) {
       $m-&amp;gt;comp( &#39;redirect.mas&#39;,
                  path =&amp;gt; &#39;login_form.html&#39;,
                  query =&amp;gt; { errors =&amp;gt; \@errors,
                             username =&amp;gt; $username,
                             password =&amp;gt; $password,
                             redirect_to =&amp;gt; $redirect_to } );
   }

   $MasonBook::Session{username} = $username;
   $MasonBook::Session{token} =
       Digest::SHA1::sha1_hex( &#39;My secret phrase&#39;, $username );

   $m-&amp;gt;comp( &#39;redirect.mas&#39;,
             path =&amp;gt; $redirect_to );
  &amp;lt;/%init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This component simply checks (via magic hand waving) that the username and password are valid and if they are, it generates an authentication token, which is added to the user&amp;rsquo;s session. To generate this token, we take the username, which is also in the session, and combine it with a secret phrase. We then generate a MAC from those two things.&lt;/p&gt;

&lt;p&gt;The authentication and authorization check looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if ( $MasonBook::Session{token} ) {
      if ( $MasonBook::Session{token} eq
           Digest::SHA1::sha1_hex( &#39;My secret phrase&#39;,
                                   $MasonBook::Session{username} ) {

          # R&amp;lt;... valid login, do something here&amp;gt;
      } else {
          # R&amp;lt;... someone is trying to be sneaky!&amp;gt;
      }
  } else { # no token
       my $wanted_page = $r-&amp;gt;uri;

       # Append query string if we have one.
       $wanted_page .= &#39;?&#39; . $r-&amp;gt;args if $r-&amp;gt;args;

       $m-&amp;gt;comp( &#39;redirect.mas&#39;,
                  path =&amp;gt; &#39;/login/login_form.html&#39;,
                  query =&amp;gt; { redirect_to =&amp;gt; $wanted_page } );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could put all the pages that require authorization in a single directory tree and have a top-level autohandler in that tree do the check. If there is no token to check, then we redirect the browser to the login page, and after a successful login they&amp;rsquo;ll return, assuming that they submit valid login credentials.&lt;/p&gt;

&lt;h3 id=&#34;access-controls-with-attributes&#34;&gt;Access Controls With Attributes&lt;/h3&gt;

&lt;p&gt;The components we saw previously assumed that there are only two access levels, unauthenticated and authenticated. A more complicated version of this code might involve checking that the user has a certain access level or role.&lt;/p&gt;

&lt;p&gt;In that case, we&amp;rsquo;d first check that we had a valid authentication token and then go on to check that the user actually had the appropriate access rights. This is simply an extra step in the authorization process.&lt;/p&gt;

&lt;p&gt;Using attributes, we can easily define access controls for different portions of our site. Let&amp;rsquo;s assume that we have four access levels, &amp;ldquo;Guest,&amp;rdquo; &amp;ldquo;User,&amp;rdquo; &amp;ldquo;Editor&amp;rdquo; and &amp;ldquo;Admin.&amp;rdquo; Most of the site is public, and viewable by anyone. Some parts of the site require a valid login, while some require a higher level of privilege.&lt;/p&gt;

&lt;p&gt;We implement our access check in our top-level autohandler, ``, from which all other components &lt;em&gt;must&lt;/em&gt; inherit in order for the access control code to be effective.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%init&amp;gt;
   my $user = get_user();  # again, hand waving

   my $required_access = $m-&amp;gt;base_comp-&amp;gt;attr(&#39;required_access&#39;);

   unless ( $user-&amp;gt;has_access_level($required_access) ) {
      # R&amp;lt;... do something like send them to another page&amp;gt;
   }

   $m-&amp;gt;call_next;
  &amp;lt;/%init&amp;gt;
  &amp;lt;%attr&amp;gt;
   required_access =&amp;gt; &#39;Guest&#39;
  &amp;lt;/%attr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is crucial that we set a default access level in this autohandler. By doing this, we are saying that by default, all components are accessible by all people, since every visitor will have at least &amp;ldquo;Guest&amp;rdquo; access.&lt;/p&gt;

&lt;p&gt;We can override this default elsewhere. For example, in a component called &lt;code&gt;/admin/autohandler&lt;/code&gt;, we might have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;%attr&amp;gt;
   required_access =&amp;gt; &#39;Admin&#39;
  &amp;lt;/%attr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as all the components in the &lt;code&gt;directory inherit from the&lt;/code&gt; component and don&amp;rsquo;t override the &lt;code&gt;required_access&lt;/code&gt; attribute, we have effectively limited that directory (and its subdirectories) to administration users only. If we, for some reason, had an individual component in the `` directory that we wanted editors to be able to see, we could simply set the &amp;ldquo;required_access&amp;rdquo; attribute for that component to &amp;ldquo;Editor.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;managing-dbi-connections&#34;&gt;Managing DBI Connections&lt;/h3&gt;

&lt;p&gt;Not infrequently, we see people on the Mason users list asking questions about how to handle caching DBI connections.&lt;/p&gt;

&lt;p&gt;Our recipe for this is really simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Apache::DBI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than reinventing the wheel, use &lt;code&gt;Apache::DBI&lt;/code&gt;, which provides the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is completely transparent to use. Once you&amp;rsquo;ve used it, you simply call &lt;code&gt;DBI-&amp;gt;connect()&lt;/code&gt; as always and &lt;code&gt;Apache::DBI&lt;/code&gt; gives you an existing handle if one is available.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It makes sure that the handle is live, so that if your RDBMS goes down and then back up, your connections still work just fine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It does not cache handles made before Apache forks, as many DBI drivers do not support using a handle after a fork.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;generating-config-files&#34;&gt;Generating Config Files&lt;/h3&gt;

&lt;p&gt;Config files are a good candidate for generation by Mason. For example, your production and staging Web server config files might differ in only a few areas. Changes to one usually will need to be propagated to another. This is especially true with &lt;code&gt;mod_perl&lt;/code&gt;, where Web server configuration can basically be part of a Web-based application.&lt;/p&gt;

&lt;p&gt;On top of this, you may decide to set up a per-developer environment, either by having each developer run the necessary software on their own machine, or by starting Web servers on many different ports on a single development server. In this scenario, a template-driven config file generator becomes even more appealing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple script to drive this generation. This script assumes that all the processes are running on one shared development machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl -w

  use strict;

  use Cwd;
  use File::Spec;
  use HTML::Mason;
  use User::pwent;

  my $comp_root =
      File::Spec-&amp;gt;rel2abs( File::Spec-&amp;gt;catfile( cwd(), &#39;config&#39; ) );

  my $output;
  my $interp =
      HTML::Mason::Interp-&amp;gt;new( comp_root  =&amp;gt; $comp_root,
                out_method =&amp;gt; \$output,
                  );

  my $user = getpwuid($&amp;lt;);

  $interp-&amp;gt;exec( &#39;/httpd.conf.mas&#39;, user =&amp;gt; $user );

  my $file =  File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;etc&#39;, &#39;httpd.conf&#39; );
  open FILE, &amp;quot;&amp;gt;$file&amp;quot; or die &amp;quot;Cannot open $file: $!&amp;quot;;
  print FILE $output;
  close FILE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;httpd.conf.mas&lt;/code&gt; component might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ServerRoot &amp;lt;% $user-&amp;gt;dir %&amp;gt;

  PidFile &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;logs&#39;, &#39;httpd.pid&#39; ) %&amp;gt;

  LockFile &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;logs&#39;, &#39;httpd.lock&#39; ) %&amp;gt;

  Port &amp;lt;% $user-&amp;gt;uid + 5000 %&amp;gt;

  # loads Apache modules, defines content type handling, etc.
  &amp;lt;&amp;amp; standard_apache_config.mas &amp;amp;&amp;gt;

  &amp;lt;perl&amp;gt;
   use lib &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;lib&#39; ) %&amp;gt;;
  &amp;lt;/perl&amp;gt;

  DocumentRoot &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;htdocs&#39; ) %&amp;gt;

  PerlSetVar MasonCompRoot &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;project&#39;, &#39;htdocs&#39; ) %&amp;gt;
  PerlSetVar MasonDataDir &amp;lt;% File::Spec-&amp;gt;catfile( $user-&amp;gt;dir, &#39;mason&#39; ) %&amp;gt;

  PerlModule HTML::Mason::ApacheHandler

  &amp;lt;filesmatch &amp;quot;\.html$&amp;quot;&amp;gt;
   SetHandler perl-script
   PerlHandler HTML::Mason::ApacheHandler
  &amp;lt;/filesmatch&amp;gt;

  &amp;lt;%args&amp;gt;
  $user
  &amp;lt;/%args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This points the server&amp;rsquo;s document root to the developer&amp;rsquo;s working directory. Similarly, it adds the &lt;code&gt;project/lib&lt;/code&gt; directory to Perl&amp;rsquo;s &lt;code&gt;@INC&lt;/code&gt; via &lt;code&gt;use lib&lt;/code&gt; so that the user&amp;rsquo;s working copy of the project&amp;rsquo;s modules are seen first. The server will listen on a port equal to the user&amp;rsquo;s user ID, plus 5,000.&lt;/p&gt;

&lt;p&gt;Obviously, this is an incomplete example. It doesn&amp;rsquo;t specify where logs will go, or other necessary config items. It also doesn&amp;rsquo;t handle generating the config file for a server intended to be run by the root user on a standard port.&lt;/p&gt;

&lt;h3 id=&#34;if-you-want-more&#34;&gt;If You Want More &amp;hellip;&lt;/h3&gt;

&lt;p&gt;These recipes were adapted from Chapter 11, &amp;ldquo;Recipes,&amp;rdquo; of &lt;em&gt;Embedding Perl in HTML With Mason&lt;/em&gt;. And, of course, the book contains a lot more than just recipes. If you&amp;rsquo;re interested in learning more about Mason, the book is a great place to start.&lt;/p&gt;

&lt;p&gt;Also, don&amp;rsquo;t forget to check out the Mason HQ site at &lt;a href=&#34;http://www.masonhq.com/&#34;&gt;www.masonhq.com/&lt;/a&gt;, which contains online documentation, user-contributed code and docs, and links to the Mason users mailing list, which is another great resource for developers using Mason.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O&amp;rsquo;Reilly &amp;amp; Associates recently released (October 2002) &lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/&#34;&gt;Embedding Perl in HTML with Mason&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.oreilly.com/catalog/perlhtmlmason/chapter/index.html&#34;&gt;Sample Chapter 5, Advanced Features&lt;/a&gt;, is available free online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also look at the [Table of Contents](), the [Index](), and the [Full Description]() of the book.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more information, or to order the book, [click here]().&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

