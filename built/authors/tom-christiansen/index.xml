<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tom Christiansen on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/tom-christiansen/</link>
    <description>Recent content in Tom Christiansen on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jun 2012 06:00:01 -0800</lastBuildDate>
    <atom:link href="/authors/tom-christiansen/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl Unicode Cookbook: Further Resources</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-further-resources.html/</link>
      <pubDate>Fri, 29 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-further-resources.html/</guid>
      <description>&lt;p&gt;This series has shown you several features of Unicode by example, as well as several techniques for working with Unicode correctly and easily with recent releases of Perl 5. By now you know more than many programmers do about Unicode, but your journey to mastery continues.&lt;/p&gt;

&lt;p&gt;Perl 5 includes several pieces of documentation which explain Unicode and Perl&amp;rsquo;s Unicode support. See &lt;a href=&#34;https://metacpan.org/pod/perlunicode&#34;&gt;perlunicode&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/perluniprops&#34;&gt;perluniprops&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/perlre&#34;&gt;perlre&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/perlrecharclass&#34;&gt;perlrecharclass&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/perluniintro&#34;&gt;perluniintro&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/perlunitut&#34;&gt;perlunitut&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/perlunifaq&#34;&gt;perlunifaq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl 5 and the CPAN provide several modules and distributions to allow the effective use of Unicode. As of Perl 5.16, many of these are in the core library. Many of them work just as well with earlier versions of Perl 5, though for the best and most correct support for Unicode as a whole, consider using Perl 5.14 or 5.16.&lt;/p&gt;

&lt;p&gt;These modules include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PerlIO&#34;&gt;PerlIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DB_File&#34;&gt;DB_File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBM_Filter&#34;&gt;DBM_Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DBM_Filter::utf8&#34;&gt;DBM_Filter::utf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Encode&#34;&gt;Encode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Encode::Locale&#34;&gt;Encode::Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::UCD&#34;&gt;Unicode::UCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Normalize&#34;&gt;Unicode::Normalize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::GCString&#34;&gt;Unicode::GCString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::LineBreak&#34;&gt;Unicode::LineBreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate::Locale&#34;&gt;Unicode::Collate::Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Unihan&#34;&gt;Unicode::Unihan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::CaseFold&#34;&gt;Unicode::CaseFold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Unicode::Tussle&#34;&gt;Unicode::Tussle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::JA::Romanize::Japanese&#34;&gt;Lingua::JA::Romanize::Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::ZH::Romanize::Pinyin&#34;&gt;Lingua::ZH::Romanize::Pinyin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::KO::Romanize::Hangul&#34;&gt;Lingua::KO::Romanize::Hangul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The CPAN distribution &lt;a href=&#34;https://metacpan.org/pod/Unicode::Tussle&#34;&gt;&lt;code&gt;Unicode::Tussle&lt;/code&gt;&lt;/a&gt; module includes many command-line programs to help with working with Unicode, including these programs to fully or partly replace standard utilities: &lt;em&gt;tcgrep&lt;/em&gt; instead of &lt;em&gt;egrep&lt;/em&gt;, &lt;em&gt;uniquote&lt;/em&gt; instead of &lt;em&gt;cat -v&lt;/em&gt; or &lt;em&gt;hexdump&lt;/em&gt;, &lt;em&gt;uniwc&lt;/em&gt; instead of &lt;em&gt;wc&lt;/em&gt;, &lt;em&gt;unilook&lt;/em&gt; instead of &lt;em&gt;look&lt;/em&gt;, &lt;em&gt;unifmt&lt;/em&gt; instead of &lt;em&gt;fmt&lt;/em&gt;, and &lt;em&gt;ucsort&lt;/em&gt; instead of &lt;em&gt;sort&lt;/em&gt;. For exploring Unicode character names and character properties, see its &lt;em&gt;uniprops&lt;/em&gt;, &lt;em&gt;unichars&lt;/em&gt;, and &lt;em&gt;uninames&lt;/em&gt; programs. It also supplies these programs, all of which are general ﬁlters that do Unicode-y things: &lt;em&gt;unititle&lt;/em&gt; and &lt;em&gt;unicaps&lt;/em&gt;; &lt;em&gt;uniwide&lt;/em&gt; and &lt;em&gt;uninarrow&lt;/em&gt;; &lt;em&gt;unisupers&lt;/em&gt; and &lt;em&gt;unisubs&lt;/em&gt;; &lt;em&gt;nfd&lt;/em&gt;, &lt;em&gt;nfc&lt;/em&gt;, &lt;em&gt;nfkd&lt;/em&gt;, and &lt;em&gt;nfkc&lt;/em&gt;; and &lt;em&gt;uc&lt;/em&gt;, &lt;em&gt;lc&lt;/em&gt;, and &lt;em&gt;tc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, see &lt;a href=&#34;http://unicode.org/standard/standard.html&#34;&gt;the published Unicode Standard&lt;/a&gt; (page numbers are from version 6.0.0), including these speciﬁc annexes and technical reports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;§3.13 Default Case Algorithms, page 113&lt;/li&gt;
&lt;li&gt;§4.2 Case, pages 120-122&lt;/li&gt;
&lt;li&gt;Case Mappings, page 166-172, especially Caseless Matching starting on page 170&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr44/&#34;&gt;UAX #44: Unicode Character Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr18/&#34;&gt;UTS #18: Unicode Regular Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr15/&#34;&gt;UAX #15: Unicode Normalization Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr10/&#34;&gt;UTS #10: Unicode Collation Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr29/&#34;&gt;UAX #29: Unicode Text Segmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr14/&#34;&gt;UAX #14: Unicode Line Breaking Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/reports/tr11/&#34;&gt;UAX #11: East Asian Width&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt; wrote this series, with occasional kibbitzing from Larry Wall and Jeﬀrey Friedl in the background.&lt;/p&gt;

&lt;p&gt;Most of these examples came from the current edition of the &amp;ldquo;Camel Book&amp;rdquo;; that is, from the &lt;a href=&#34;http://http://shop.oreilly.com/product/9780596004927.do&#34;&gt;4&lt;sup&gt;th&lt;/sup&gt; Edition of &lt;em&gt;Programming Perl&lt;/em&gt;&lt;/a&gt;, Copyright © 2012 Tom Christiansen &lt;em&gt;et al.&lt;/em&gt;, 2012-02-13 by O&amp;rsquo;Reilly Media. The code itself is freely redistributable, and you are encouraged to transplant, fold, spindle, and mutilate any of the examples in this series however you please for inclusion into your own programs without any encumbrance whatsoever. Acknowledgement via code comment is polite but not required.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-demo-of-unicode-collation-and-printing.html&#34;&gt;℞ 44: Demo of Unicode Collation and Printing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Demo of Unicode Collation and Printing</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-demo-of-unicode-collation-and-printing.html/</link>
      <pubDate>Fri, 22 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-demo-of-unicode-collation-and-printing.html/</guid>
      <description>

&lt;h2 id=&#34;44-program-demo-of-unicode-collation-and-printing&#34;&gt;℞ 44: PROGRAM: Demo of Unicode collation and printing&lt;/h2&gt;

&lt;p&gt;The past several weeks of Unicode recipes have explained how Unicode works and shown how to use it in your programs. If you&amp;rsquo;ve gone through those recipes, you now understand more than most programmers.&lt;/p&gt;

&lt;p&gt;How about putting everything together?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a full program showing how to make use of locale-sensitive sorting, Unicode casing, and managing print widths when some of the characters take up zero or two columns, not just one column each time. When run, the following program produces this nicely aligned output (though the quality of the alignment depends on the quality of your Unicode font, of course):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Crème Brûlée....... €2.00
    Éclair............. €1.60
    Fideuà............. €4.20
    Hamburger.......... €6.00
    Jamón Serrano...... €4.45
    Linguiça........... €7.00
    Pâté............... €4.15
    Pears.............. €2.00
    Pêches............. €2.25
    Smørbrød........... €5.75
    Spätzle............ €5.50
    Xoriço............. €3.00
    Γύρος.............. €6.50
    막걸리............. €4.00
    おもち............. €2.65
    お好み焼き......... €8.00
    シュークリーム..... €1.85
    寿司............... €9.99
    包子............... €7.50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s that program; tested on v5.14.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; #!/usr/bin/env perl
 # umenu - demo sorting and printing of Unicode food
 #
 # (obligatory and increasingly long preamble)
 #
 use utf8;
 use v5.14;                       # for locale sorting and unicode_strings
 use strict;
 use warnings;
 use warnings  qw(FATAL utf8);    # fatalize encoding faults
 use open      qw(:std :utf8);    # undeclared streams in UTF-8
 use charnames qw(:full :short);  # unneeded in v5.16

 # std modules
 use Unicode::Normalize;          # std perl distro as of v5.8
 use List::Util qw(max);          # std perl distro as of v5.10
 use Unicode::Collate::Locale;    # std perl distro as of v5.14

 # cpan modules
 use Unicode::GCString;           # from CPAN

 # forward defs
 sub pad($$$);
 sub colwidth(_);
 sub entitle(_);

 my %price = (
     &amp;quot;γύρος&amp;quot;             =&amp;gt; 6.50, # gyros, Greek
     &amp;quot;pears&amp;quot;             =&amp;gt; 2.00, # like um, pears
     &amp;quot;linguiça&amp;quot;          =&amp;gt; 7.00, # spicy sausage, Portuguese
     &amp;quot;xoriço&amp;quot;            =&amp;gt; 3.00, # chorizo sausage, Catalan
     &amp;quot;hamburger&amp;quot;         =&amp;gt; 6.00, # burgermeister meisterburger
     &amp;quot;éclair&amp;quot;            =&amp;gt; 1.60, # dessert, French
     &amp;quot;smørbrød&amp;quot;          =&amp;gt; 5.75, # sandwiches, Norwegian
     &amp;quot;spätzle&amp;quot;           =&amp;gt; 5.50, # Bayerisch noodles, little sparrows
     &amp;quot;包子&amp;quot;              =&amp;gt; 7.50, # bao1 zi5, steamed pork buns, Mandarin
     &amp;quot;jamón serrano&amp;quot;     =&amp;gt; 4.45, # country ham, Spanish
     &amp;quot;pêches&amp;quot;            =&amp;gt; 2.25, # peaches, French
     &amp;quot;シュークリーム&amp;quot;    =&amp;gt; 1.85, # cream-filled pastry like éclair, Japanese
     &amp;quot;막걸리&amp;quot;            =&amp;gt; 4.00, # makgeolli, Korean rice wine
     &amp;quot;寿司&amp;quot;              =&amp;gt; 9.99, # sushi, Japanese
     &amp;quot;おもち&amp;quot;            =&amp;gt; 2.65, # omochi, rice cakes, Japanese
     &amp;quot;crème brûlée&amp;quot;      =&amp;gt; 2.00, # tasty broiled cream, French
     &amp;quot;fideuà&amp;quot;            =&amp;gt; 4.20, # more noodles, Valencian (Catalan=fideuada)
     &amp;quot;pâté&amp;quot;              =&amp;gt; 4.15, # gooseliver paste, French
     &amp;quot;お好み焼き&amp;quot;        =&amp;gt; 8.00, # okonomiyaki, Japanese
 );

 # find the widest allowed width for the name column
 my $width = 5 + max map { colwidth } keys %price;

 # So the Asian stuff comes out in an order that someone
 # who reads those scripts won&#39;t freak out over; the
 # CJK stuff will be in JIS X 0208 order that way.
 my $coll  = Unicode::Collate::Locale-&amp;gt;new( locale =&amp;gt; &amp;quot;ja&amp;quot; );

 for my $item ($coll-&amp;gt;sort(keys %price)) {
     print pad(entitle($item), $width, &amp;quot;.&amp;quot;);
     printf &amp;quot; €%.2f\n&amp;quot;, $price{$item};
 }

 sub pad($$$) {
     my($str, $width, $padchar) = @_;
     return $str . ($padchar x ($width - colwidth($str)));
 }

 sub colwidth(_) {
     my($str) = @_;
     return Unicode::GCString-&amp;gt;new($str)-&amp;gt;columns;
 }

 sub entitle(_) {
     my($str) = @_;
     $str     =~ s{ (?=\pL)(\S)     (\S*) }
              { ucfirst($1) . lc($2)  }xge;
     return $str;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough, isn&amp;rsquo;t it? Put together, everything just works nicely.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-dbm-files-the-easy-way.html&#34;&gt;℞ 43: Unicode Text in DBM Files (the easy way)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-further-resources.html&#34;&gt;℞ 45: Further Resources&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Text in DBM Files (the easy way)</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-dbm-files-the-easy-way.html/</link>
      <pubDate>Wed, 20 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-dbm-files-the-easy-way.html/</guid>
      <description>

&lt;h2 id=&#34;43-unicode-text-in-dbm-hashes-the-easy-way&#34;&gt;℞ 43: Unicode text in DBM hashes, the easy way&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-stubborn-libraries.html&#34;&gt;Some Perl libraries require you to jump through hoops to handle Unicode data&lt;/a&gt;. Would that everything worked as easily as Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/open.html&#34;&gt;open&lt;/a&gt; pragma!&lt;/p&gt;

&lt;p&gt;For DBM files, here&amp;rsquo;s how to implicitly manage the translation; all encoding and decoding is done automatically, just as with streams that have a particular encoding attached to them. The &lt;a href=&#34;https://metacpan.org/pod/DBM_Filter&#34;&gt;DBM_Filter&lt;/a&gt; module allows you to apply filters to keys and values to manipulate their contents before storing or fetching. The module includes a &amp;ldquo;utf8&amp;rdquo; filter. Use it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use DB_File;
    use DBM_Filter;

    my $dbobj = tie %dbhash, &amp;quot;DB_File&amp;quot;, &amp;quot;pathname&amp;quot;;
    $dbobj-&amp;gt;Filter_Value_Push(&amp;quot;utf8&amp;quot;);  # this is the magic bit

 # ST

    # assume $uni_key and $uni_value are abstract Unicode strings
    $dbhash{$uni_key} = $uni_value;

  # FETCH

    # $uni_key holds a normal Perl string (abstract Unicode)
    my $uni_value = $dbhash{$uni_key};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-stubborn-libraries.html&#34;&gt;℞ 42: Unicode Text in Stubborn Libraries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-demo-of-unicode-collation-and-printing.html&#34;&gt;℞ 44: Demo of Unicode Collation and Printing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Text in Stubborn Libraries</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-stubborn-libraries.html/</link>
      <pubDate>Mon, 18 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-stubborn-libraries.html/</guid>
      <description>

&lt;h2 id=&#34;42-unicode-text-in-dbm-hashes-the-tedious-way&#34;&gt;℞ 42: Unicode text in DBM hashes, the tedious way&lt;/h2&gt;

&lt;p&gt;While Perl 5 has long been very careful about handling Unicode correctly inside the world of Perl itself, every time you leave the Perl internals, you cross a boundary at which &lt;em&gt;something&lt;/em&gt; may need to handle decoding and encoding. This happens when performing IO across a network or to files, when speaking to a database, or even when using XS to use a shared library from Perl.&lt;/p&gt;

&lt;p&gt;For example, consider the core module &lt;a href=&#34;https://metacpan.org/pod/DB_File&#34;&gt;DB_File&lt;/a&gt;, which allows you to use Berkeley DB files from Perl—persistent storage for key/value pairs.&lt;/p&gt;

&lt;p&gt;Using a regular Perl string as a key or value for a DBM hash will trigger a wide character exception if any codepoints won&amp;rsquo;t ﬁt into a byte. Here&amp;rsquo;s how to manually manage the translation:
        use DB_File;
        use Encode qw(encode decode);
        tie %dbhash, &amp;ldquo;DB_File&amp;rdquo;, &amp;ldquo;pathname&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # STORE

    # assume $uni_key and $uni_value are abstract Unicode strings
    my $enc_key   = encode(&amp;quot;UTF-8&amp;quot;, $uni_key, 1);
    my $enc_value = encode(&amp;quot;UTF-8&amp;quot;, $uni_value, 1);
    $dbhash{$enc_key} = $enc_value;

 # FETCH

    # assume $uni_key holds a normal Perl string (abstract Unicode)
    my $enc_key   = encode(&amp;quot;UTF-8&amp;quot;, $uni_key, 1);
    my $enc_value = $dbhash{$enc_key};
    my $uni_value = decode(&amp;quot;UTF-8&amp;quot;, $enc_key, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By performing this manual encoding and decoding yourself, you know that your storage file will have a consistent representation of your data. The correct encoding depends on the type of data you store and the capabilities of the external code, of course.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-linebreaking.html&#34;&gt;℞ 41: Unicode Linebreaking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-dbm-files-the-easy-way.html&#34;&gt;℞ 43: Unicode Text in DBM Files (the easy way)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Linebreaking</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-unicode-linebreaking.html/</link>
      <pubDate>Tue, 12 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-unicode-linebreaking.html/</guid>
      <description>

&lt;h2 id=&#34;41-unicode-linebreaking&#34;&gt;℞ 41: Unicode linebreaking&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve ever tried to fit a large amount of text into a display area too narrow for the full width of the text, you&amp;rsquo;ve dealt with the joy of linebreaking (or word wrapping). As you may have come to expect from Unicode now, the specification provides a &lt;a href=&#34;http://www.unicode.org/reports/tr14/&#34;&gt;Unicode Line Breaking Algorithm&lt;/a&gt; which respects the available line breaking opportunities provided by Unicode text.&lt;/p&gt;

&lt;p&gt;Unicode characters, of course, may have properties which influence these rules.&lt;/p&gt;

&lt;p&gt;As you have come to expect from Perl, a module implements the Unicode Line Breaking Algorithm. Install &lt;a href=&#34;https://metacpan.org/pod/Unicode::LineBreak&#34;&gt;Unicode::LineBreak&lt;/a&gt;. This module respects direct and indirect break points as well as the grapheme width of the string. Its basic use is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::LineBreak;
 use charnames qw(:full);

 my $para = &amp;quot;This is a super\N{HYPHEN}long string. &amp;quot; x 20;
 my $fmt  = Unicode::LineBreak-&amp;gt;new;
 print $fmt-&amp;gt;break($para), &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of its &lt;code&gt;break()&lt;/code&gt; method is an array of lines broken at valid points. (The default maximum number of columns is 76, so this example works well for email and console use. See the module&amp;rsquo;s documentation for other configuration options.)&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-locale-comparison.html&#34;&gt;℞ 40: Case- and Accent-insensitive Locale Comparisons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-text-in-stubborn-libraries.html&#34;&gt;℞ 42: Unicode Text in Stubborn Libraries&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Case- and Accent-insensitive Locale Comparisons</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-locale-comparison.html/</link>
      <pubDate>Mon, 11 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-locale-comparison.html/</guid>
      <description>

&lt;h2 id=&#34;40-case-and-accent-insensitive-locale-comparisons&#34;&gt;℞ 40: Case- &lt;em&gt;and&lt;/em&gt; accent-insensitive locale comparisons&lt;/h2&gt;

&lt;p&gt;You now know how to &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-comparison.html&#34;&gt;compare Unicode strings while ignoring case and accent differences&lt;/a&gt;. This approach uses the standard Unicode collation algorithm. To perform a similar comparison while respecting a speciﬁc locale&amp;rsquo;s rules, use &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate::Locale&#34;&gt;Unicode::Collate::Locale&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my $de = Unicode::Collate::Locale-&amp;gt;new(
            locale =&amp;gt; &amp;quot;de__phonebook&amp;quot;,
          );

 # now this is true:
 $de-&amp;gt;eq(&amp;quot;tschüß&amp;quot;, &amp;quot;TSCHUESS&amp;quot;);  # notice ü =&amp;gt; UE, ß =&amp;gt; SS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-comparison.html&#34;&gt;℞ 39: Case- and Accent-insensitive Comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-linebreaking.html&#34;&gt;℞ 41: Unicode Linebreaking&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Case- and Accent-insensitive Comparison</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-comparison.html/</link>
      <pubDate>Fri, 08 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-comparison.html/</guid>
      <description>

&lt;h2 id=&#34;39-case-and-accent-insensitive-comparisons&#34;&gt;℞ 39: Case- &lt;em&gt;and&lt;/em&gt; accent-insensitive comparisons&lt;/h2&gt;

&lt;p&gt;As you&amp;rsquo;ve noticed by now, many Unicode strings have multiple possible representations. Comparing two Unicode strings for equality requires far more than merely comparing their codepoints. Not only must you account for multiple representations, you must decide which types of differences are significant: do you care about the case of individual characters? How about the presence or absence of accents?&lt;/p&gt;

&lt;p&gt;Use a collator object to compare Unicode text by character instead of by codepoint. To perform comparisions without regard for case or accent differences, choose the appropriate comparison level. &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt;&amp;rsquo;s &lt;code&gt;eq()&lt;/code&gt; method offers customizable Unicode-aware equality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::Collate;
 my $es = Unicode::Collate-&amp;gt;new(
     level         =&amp;gt; 1,
     normalization =&amp;gt; undef
 );

  # now both are true:
 $es-&amp;gt;eq(&amp;quot;García&amp;quot;,  &amp;quot;GARCIA&amp;quot; );
 $es-&amp;gt;eq(&amp;quot;Márquez&amp;quot;, &amp;quot;MARQUEZ&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-make-cmp-work-on-text-instead-of-codepoints.html&#34;&gt;℞ 38: Make cmp Work on Text instead of Codepoints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-locale-comparison.html&#34;&gt;℞ 40: Case- and Accent-insensitive Locale Comparisons&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Make cmp Work on Text instead of Codepoints</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-make-cmp-work-on-text-instead-of-codepoints.html/</link>
      <pubDate>Thu, 07 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-make-cmp-work-on-text-instead-of-codepoints.html/</guid>
      <description>

&lt;h2 id=&#34;38-making-cmp-work-on-text-instead-of-codepoints&#34;&gt;℞ 38: Making &lt;code&gt;cmp&lt;/code&gt; work on text instead of codepoints&lt;/h2&gt;

&lt;p&gt;Even with Perl 5.12&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/feature.html#The-%27unicode_strings%27-feature&#34;&gt;&amp;ldquo;unicode_strings&amp;rdquo; feature&lt;/a&gt;, some of Perl&amp;rsquo;s core operations do not perform as expected on Unicode strings by default. For example, how is the &lt;code&gt;cmp&lt;/code&gt; operator to know whether its arguments are octets, larger codepoints, or graphemes, or whether a specific collation should be in effect?&lt;/p&gt;

&lt;p&gt;Where you might write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; @srecs = sort {
     $b-&amp;gt;{AGE}   &amp;lt;=&amp;gt;  $a-&amp;gt;{AGE}
                 ||
     $a-&amp;gt;{NAME}  cmp  $b-&amp;gt;{NAME}
 } @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; a Unicode-aware comparison should instead use &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my $coll = Unicode::Collate-&amp;gt;new();
 for my $rec (@recs) {
     $rec-&amp;gt;{NAME_key} = $coll-&amp;gt;getSortKey( $rec-&amp;gt;{NAME} );
 }
 @srecs = sort {
     $b-&amp;gt;{AGE}       &amp;lt;=&amp;gt;  $a-&amp;gt;{AGE}
                     ||
     $a-&amp;gt;{NAME_key}  cmp  $b-&amp;gt;{NAME_key}
 } @recs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module&amp;rsquo;s &lt;code&gt;getSortKey()&lt;/code&gt; method returns an appropriate &lt;a href=&#34;http://www.unicode.org/reports/tr10/#Step_3&#34;&gt;form sort key&lt;/a&gt; respecting the appropriate collation (and collation level) for a given Unicode string. &lt;code&gt;cmp&lt;/code&gt; can handle these keys effectively.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-locale-collation.html&#34;&gt;℞ 37: Unicode Locale Collation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-comparison.html&#34;&gt;℞ 39: Case- and Accent-insensitive Comparison&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Locale Collation</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-unicode-locale-collation.html/</link>
      <pubDate>Tue, 05 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-unicode-locale-collation.html/</guid>
      <description>

&lt;h2 id=&#34;37-unicode-locale-collation&#34;&gt;℞ 37: Unicode locale collation&lt;/h2&gt;

&lt;p&gt;As you&amp;rsquo;ve already seen, &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html&#34;&gt;Unicode-aware sorting&lt;/a&gt; respects Unicode character properties. You can&amp;rsquo;t sort by codepoint and expect to get accurate results, not even if you stick with pure ASCII.&lt;/p&gt;

&lt;p&gt;The world is a complicated place. Some locales have their own special sorting rules.&lt;/p&gt;

&lt;p&gt;The module &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate::Locale&#34;&gt;Unicode::Collate::Locale&lt;/a&gt; provides a &lt;code&gt;sort()&lt;/code&gt; method which supports locale-specific rules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::Collate::Locale;

 my $col  = Unicode::Collate::Locale-&amp;gt;new(locale =&amp;gt; &amp;quot;de__phonebook&amp;quot;);
 my @list = $col-&amp;gt;sort(@old_list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module is part of the Perl 5 core distribution as of Perl 5.12. If you&amp;rsquo;re using an older version of Perl, install the &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt; distribution to take advantage of it.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ucsort&lt;/em&gt; program mentioned in &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html&#34;&gt;Perl Unicode recipe 35&lt;/a&gt; accepts a &lt;code&gt;--locale&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-sorting.html&#34;&gt;℞ 36: Case- and Accent-insensitive Sorting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-make-cmp-work-on-text-instead-of-codepoints.html&#34;&gt;℞ 38: Make cmp Work on Text instead of Codepoints&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Case- and Accent-insensitive Sorting</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-sorting.html/</link>
      <pubDate>Mon, 04 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-sorting.html/</guid>
      <description>

&lt;h2 id=&#34;36-case-and-accent-insensitive-unicode-sort&#34;&gt;℞ 36: Case- &lt;em&gt;and&lt;/em&gt; accent-insensitive Unicode sort&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.unicode.org/reports/tr10/&#34;&gt;Unicode Collation Algorithm&lt;/a&gt; defines several levels of collation strength by which you can specify certain character properties as relevant or irrelevant to the collation ordering. In simple terms, you can use collation strength to tell a UCA-aware sort to ignore case or diacritics.&lt;/p&gt;

&lt;p&gt;In Perl, use the &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt; module to perform your sorting. To sort Unicode strings while ignoring case and diacritics—to examine only the basic characters— use a collation strength of level 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::Collate;
 my $col = Unicode::Collate-&amp;gt;new(level =&amp;gt; 1);
 my @list = $col-&amp;gt;sort(@old_list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level 2 adds diacritic comparisons to the ordering algorithm. Level 3 adds case ordering. Level 4 adds a tiebreaking comparison of probably more detail than most people will ever care to know. Level 4 is the default.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html&#34;&gt;℞ 35: Unicode Collation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-locale-collation.html&#34;&gt;℞ 37: Unicode Locale Collation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Collation</title>
      <link>http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html/</link>
      <pubDate>Fri, 01 Jun 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html/</guid>
      <description>

&lt;h2 id=&#34;35-unicode-collation&#34;&gt;℞ 35: Unicode collation&lt;/h2&gt;

&lt;p&gt;Sorting—even pure ASCII—seems easy, at least if you know the alphabet song. Yet even something this simple gets complicated if you sort merely by codepoint. You get numbers coming in the midst of letters. You get &amp;ldquo;ZZZ&amp;rdquo; coming before &amp;ldquo;aaa&amp;rdquo;. You get much worse problems, too. (How do you sort puncutation, for example?)&lt;/p&gt;

&lt;p&gt;Sorting Unicode data &lt;em&gt;seems&lt;/em&gt; much more difficult: the rules for each character specify its relationship to other characters. These &lt;em&gt;collation&lt;/em&gt; rules guide the sorting and comparison of data with respect to case sensitivity, accent marks, character width, and other Unicode properties.&lt;/p&gt;

&lt;p&gt;A simple sort of Unicode data—based on codepoint—produces nothing in a sensible alphabetic order. A sensible sorting must respect the &lt;a href=&#34;http://www.unicode.org/reports/tr10/&#34;&gt;Unicode Collation Algorithm&lt;/a&gt; (UCA) instead. The CPAN module &lt;a href=&#34;https://metacpan.org/pod/Unicode::Collate&#34;&gt;Unicode::Collate&lt;/a&gt; implements UCA. Its simple use is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::Collate;
 my $col  = Unicode::Collate-&amp;gt;new();
 my @list = $col-&amp;gt;sort(@old_list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also the &lt;em&gt;ucsort&lt;/em&gt; program from the &lt;a href=&#34;https://metacpan.org/pod/Unicode::Tussle&#34;&gt;&lt;code&gt;Unicode::Tussle&lt;/code&gt;&lt;/a&gt; CPAN module for a convenient command-line interface to this module.&lt;/p&gt;

&lt;p&gt;In fact, sort aware of UCA sorts ASCII text better than simple ASCII sorts sort ASCII text, because UCA accounts for numbers, punctuation, and other non-alphanumerics.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-unicode-column-width-for-printing.html&#34;&gt;℞ 34: Unicode Column Width for Printing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-case--and-accent-insensitive-sorting.html&#34;&gt;℞ 36: Case- and Accent-insensitive Sorting&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Unicode Column Width for Printing</title>
      <link>http://localhost:1313/pub/2012/05/perlunicook-unicode-column-width-for-printing.html/</link>
      <pubDate>Thu, 31 May 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/05/perlunicook-unicode-column-width-for-printing.html/</guid>
      <description>

&lt;h2 id=&#34;34-unicode-column-width-for-printing&#34;&gt;℞ 34: Unicode column-width for printing&lt;/h2&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, and &lt;code&gt;format&lt;/code&gt; think all codepoints take up 1 print column, but many codepoints take 0 or 2. If you use any of these builtins to align text, you may find that Perl&amp;rsquo;s idea of the width of any codepoint doesn&amp;rsquo;t match what you think it ought to.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Unicode::GCString&#34;&gt;Unicode::GCString&lt;/a&gt; module&amp;rsquo;s &lt;code&gt;columns()&lt;/code&gt; method considers the width of each codepoint and returns the number of columns the string will occupy. Use this to determine the display width of a Unicode string.&lt;/p&gt;

&lt;p&gt;To show that normalization makes no diﬀerence to the number of columns of a string, we print out both forms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # cpan -i Unicode::GCString
 use Unicode::GCString;
 use Unicode::Normalize;

 my @words = qw/crème brûlée/;
 @words    = map { NFC($_), NFD($_) } @words;

 for my $str (@words) {
     my $gcs  = Unicode::GCString-&amp;gt;new($str);
     my $cols = $gcs-&amp;gt;columns;
     my $pad  = &amp;quot; &amp;quot; x (10 - $cols);
     say str, $pad, &amp;quot; |&amp;quot;;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; generates this to show that it pads correctly no matter the normalization:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; crème      |
 crème      |
 brûlée     |
 brûlée     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-string-length-in-graphemes.html&#34;&gt;℞ 33: String Length in Graphemes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/06/perlunicook-unicode-collation.html&#34;&gt;℞ 35: Unicode Collation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: String Length in Graphemes</title>
      <link>http://localhost:1313/pub/2012/05/perlunicook-string-length-in-graphemes.html/</link>
      <pubDate>Wed, 30 May 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/05/perlunicook-string-length-in-graphemes.html/</guid>
      <description>

&lt;h2 id=&#34;33-string-length-in-graphemes&#34;&gt;℞ 33: String length in graphemes&lt;/h2&gt;

&lt;p&gt;If you learn nothing else about Unicode, remember this: characters are not bytes are not graphemes are not codepoints. A user-visible symbol (a &lt;em&gt;grapheme&lt;/em&gt;) may be composed of multiple &lt;em&gt;codepoints&lt;/em&gt;. Multiple combinations of codepoints may produce the same user-visible graphemes.&lt;/p&gt;

&lt;p&gt;To keep all of these entities clear in your mind, be careful and specific about what you&amp;rsquo;re trying to do at which level.&lt;/p&gt;

&lt;p&gt;As a concrete example, the string &lt;code&gt;brûlée&lt;/code&gt; has six graphemes but up to eight codepoints. Now suppose you want to get its length. What does length mean? If your string has been normalized to a one-grapheme-per-codepoint form, &lt;code&gt;length()&lt;/code&gt; is one and the same, but consider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::Normalize;
 my $str = &amp;quot;brûlée&amp;quot;;
 say length $str;
 say length NFD( $str );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To measure the length of a string by counts by grapheme, not by codepoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my $str   = &amp;quot;brûlée&amp;quot;;
 my $count = 0;
 while ($str =~ /\X/g) { $count++ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternately (or on older versions of Perl), the CPAN module &lt;a href=&#34;https://metacpan.org/pod/Unicode::GCString&#34;&gt;Unicode::GCString&lt;/a&gt; is useful:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::GCString;
 my $gcs   = Unicode::GCString-&amp;gt;new($str);
 my $count = $gcs-&amp;gt;length;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-reverse-string-by-grapheme.html&#34;&gt;℞ 32: Reverse String by Grapheme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-unicode-column-width-for-printing.html&#34;&gt;℞ 34: Unicode Column Width for Printing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Reverse String by Grapheme</title>
      <link>http://localhost:1313/pub/2012/05/perlunicook-reverse-string-by-grapheme.html/</link>
      <pubDate>Tue, 29 May 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/05/perlunicook-reverse-string-by-grapheme.html/</guid>
      <description>

&lt;h2 id=&#34;32-reverse-string-by-grapheme&#34;&gt;℞ 32: Reverse string by grapheme&lt;/h2&gt;

&lt;p&gt;Because bytes and characters are not isomorphic in Unicode—and what you may see as a user-visible character (a &lt;em&gt;grapheme&lt;/em&gt;) is not necessarily a single codepoint in a Unicode string—every string operation must be aware of the difference between codepoints and graphemes.&lt;/p&gt;

&lt;p&gt;Consider the Perl builtin &lt;code&gt;reverse&lt;/code&gt;. Reversing a string by codepoints messes up diacritics, mistakenly converting &lt;em&gt;crème brûlée&lt;/em&gt; into &lt;em&gt;éel̂urb em̀erc&lt;/em&gt; instead of into &lt;em&gt;eélûrb emèrc&lt;/em&gt;; so reverse by grapheme instead.&lt;/p&gt;

&lt;p&gt;As one option, use &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-match-unicode-grapheme-cluster-in-regex.html&#34;&gt;Perl&amp;rsquo;s &lt;code&gt;\X&lt;/code&gt; regex metacharacter&lt;/a&gt; to extract graphemes from a string, then reverse that list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $str = join(&amp;quot;&amp;quot;, reverse $str =~ /\X/g);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As another option, use &lt;a href=&#34;https://metacpan.org/pod/Unicode::GCString&#34;&gt;Unicode::GCString&lt;/a&gt; to treat a string as a sequence of graphemes, not codepoints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; use Unicode::GCString;
 $str = reverse Unicode::GCString-&amp;gt;new($str);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both these approaches work correctly no matter what normalization the string is in. Remember that &lt;code&gt;\X&lt;/code&gt; is most reliable only as of and after Perl 5.12.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-extract-by-grapheme-instead-of-codepoint-substr.html&#34;&gt;℞ 31: Extract by Grapheme Instead of Codepoint (substr)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-string-length-in-graphemes.html&#34;&gt;℞ 33: String Length in Graphemes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Unicode Cookbook: Extract by Grapheme Instead of Codepoint (substr)</title>
      <link>http://localhost:1313/pub/2012/05/perlunicook-extract-by-grapheme-instead-of-codepoint-substr.html/</link>
      <pubDate>Fri, 25 May 2012 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2012/05/perlunicook-extract-by-grapheme-instead-of-codepoint-substr.html/</guid>
      <description>

&lt;h2 id=&#34;31-extract-by-grapheme-instead-of-by-codepoint-substr&#34;&gt;℞ 31: Extract by grapheme instead of by codepoint (substr)&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.unicode.org/reports/tr29/&#34;&gt;Unicode Standard Annex #29&lt;/a&gt; discusses the boundaries between grapheme clusters—what users might perceive as &amp;ldquo;characters&amp;rdquo;. The CPAN module &lt;a href=&#34;https://metacpan.org/pod/Unicode::GCString&#34;&gt;Unicode::GCString&lt;/a&gt; allows you to treat a Unicode string as a sequence of these grapheme clusters.&lt;/p&gt;

&lt;p&gt;While you may &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicookbook-extract-by-grapheme-instead-of-codepoint-regex.html&#34;&gt;use &lt;code&gt;\X&lt;/code&gt; to extract graphemes within a regex&lt;/a&gt;, &lt;code&gt;Unicode::GCString&lt;/code&gt; provides a &lt;code&gt;substr()&lt;/code&gt; method to extract a series of grapheme clusters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # cpan -i Unicode::GCString
 use Unicode::GCString;

 my $gcs        = Unicode::GCString-&amp;gt;new($str);
 my $first_five = $gcs-&amp;gt;substr(0, 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The module also provides an iterator interface to grapheme clusters within a string.&lt;/p&gt;

&lt;p&gt;Previous: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicookbook-extract-by-grapheme-instead-of-codepoint-regex.html&#34;&gt;℞ 30: Extract by Grapheme Instead of Codepoint (regex)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Series Index: &lt;a href=&#34;http://localhost:1313/pub/2012/04/perlunicook-standard-preamble.html&#34;&gt;The Standard Preamble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next: &lt;a href=&#34;http://localhost:1313/pub/2012/05/perlunicook-reverse-string-by-grapheme.html&#34;&gt;℞ 32: Reverse String by Grapheme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

