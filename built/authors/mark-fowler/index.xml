<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mark Fowler on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/mark-fowler/</link>
    <description>Recent content in Mark Fowler on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Sep 2004 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/mark-fowler/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lightning Articles</title>
      <link>http://localhost:1313/pub/2004/09/09/lightning.html/</link>
      <pubDate>Thu, 09 Sep 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/09/09/lightning.html/</guid>
      <description>

&lt;h4 id=&#34;simon-cozens&#34;&gt;Simon Cozens&lt;/h4&gt;

&lt;p&gt;Serendipity &amp;ndash; it means those occasions when things come together to give you moments of inspiration. While preparing perl.com one week, I was editing an article on how to give lightning talks by Mark Fowler and at the same time I was dealing with another author who said he was having difficulty stretching out an article &amp;ndash; a very good article, on a topic I wanted to see covered &amp;ndash; to a full 2,500-words-or-so length.&lt;/p&gt;

&lt;p&gt;I then realized there were probably a load of people out there with interesting things to say about what they&amp;rsquo;re doing with Perl, but who couldn&amp;rsquo;t or didn&amp;rsquo;t want to write a full-sized article. This is, after all, the principle that makes lightning talks so popular. Maybe we could create a forum where people could have short, informal articles published on an interesting Perl topic of their choice &amp;ndash; lightning articles.&lt;/p&gt;

&lt;p&gt;In the same vein as lightning talks, they can be both about an interesting use of the technology, or social commentary on Perl and its community, or just a bit of fun. If you&amp;rsquo;ve got something you want to get off your chest, or you&amp;rsquo;ve got an interesting new idea you want to talk about, but don&amp;rsquo;t think you could fill 2,500 words, try writing a lightning article. You have an absolute maximum of 500 words &amp;ndash; as measured by &lt;code&gt;wc -w&lt;/code&gt; (or &lt;code&gt;perl -0lne    &#39;print scalar split/\s+/&#39;&lt;/code&gt;) on your POD or plain text file &amp;ndash; to say what you need to say.&lt;/p&gt;

&lt;p&gt;Send them to &lt;code&gt;chromatic@oreilly.com&lt;/code&gt;, and when we&amp;rsquo;ve got a good batch of five or six together, we&amp;rsquo;ll publish them here.&lt;/p&gt;

&lt;h3 id=&#34;span-id-detecting-problem-automatically-detecting-problems-automatically-span&#34;&gt;&lt;span id=&#34;detecting_problem_automatically&#34;&gt;Detecting Problems Automatically&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;mark-fowler&#34;&gt;Mark Fowler&lt;/h4&gt;

&lt;p&gt;How many times have you shipped something, and then as soon as it&amp;rsquo;s gone live you&amp;rsquo;ve spotted a glaring mistake that, despite staring you in the face the entire time you were developing the code, you&amp;rsquo;ve somehow overlooked?&lt;/p&gt;

&lt;p&gt;One thing we have problems with at work is double-encoded HTML entities in our web pages. We often use HTML entities to encode letters that aren&amp;rsquo;t ASCII, since this way we then don&amp;rsquo;t have to worry about the text encoding we&amp;rsquo;re using.&lt;/p&gt;

&lt;p&gt;For example, we want to render the string &lt;code&gt;Hello Léon&lt;/code&gt;&amp;gt; into our HTML document. So, instead of including the é into our document directly we transform it into its entity form, replacing it with &lt;code&gt;&amp;amp;eacute;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;Hello L&amp;amp;eacute;on&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be done automatically by Perl in numerous ways, e.g. with &lt;strong&gt;HTML::Entities&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use HTML::Entities;

  my $string = &amp;quot;Hello $name&amp;quot;;
  encode_entity($string);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you&amp;rsquo;re using the Template Toolkit through the &lt;code&gt;html_entity&lt;/code&gt; filter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;Hello [% name | html_entity %]&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The root of the troubles we were experiencing was that entity encoding could occur in our code in multiple, different places depending on where the string we were about to render came from. And if we accidentally did it more than once then we ended up with HTML that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;p&amp;gt;Hello L&amp;amp;amp;eactue;on&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means the web browser sees the &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and converts it to an ampersand and then renders the rest of the &lt;code&gt;eacute;&lt;/code&gt; as normal text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Hello L&amp;amp;eacute;on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not exactly what we wanted. Of course, these things are fairly trivial to fix once you spot them. The real problem we were having is that these errors kept repeatedly popping up, and having our testing department coming back to us every release with another one of these errors was getting embarrassing. We&amp;rsquo;d gone blind to the errors &amp;ndash; working so closely with the web site we&amp;rsquo;d glance at the page and not notice what should have been staring us in the face.&lt;/p&gt;

&lt;p&gt;So we decided to automatically test for the problem.&lt;/p&gt;

&lt;p&gt;In the end I decided to write &lt;strong&gt;Test::DoubleEncodedEntities&lt;/strong&gt;, a &lt;strong&gt;Test::Builder&lt;/strong&gt; module that would test for these errors and run under &lt;strong&gt;Test::Harness&lt;/strong&gt; like all our other tests. The &lt;code&gt;ok_dee&lt;/code&gt; function relies on the fact that none of our web sites would ever use strings like &lt;code&gt;&amp;amp;amp;eacute;&lt;/code&gt; (this is true of most web sites - the only web sites that do are ones like this that feature articles on how to encode HTML).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use LWP::Simple qw(get);
  use Test::More tests =&amp;gt; 2;
  use Test::DoubleEncodedEntities;

  my $page = get &amp;quot;http://testserver/index.html&amp;quot;;
  ok($page, &amp;quot;got page okay&amp;quot;);
  ok_dee($page, &amp;quot;check for double encoded entities&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the test fails then we get some useful diagnostic output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1..2
  ok 1 - got page okay
  not ok 2 - check for double encoded entities
  #     Failed test (t/website.t at line 7)
  # Found 1 &amp;quot;&amp;amp;amp;eacute;&amp;quot;
  # Looks like you failed 1 test of 2.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we don&amp;rsquo;t even have to look for these things. Our test suite catches double-encoded entities for us and brings them to our attention. Problem solved.&lt;/p&gt;

&lt;h3 id=&#34;span-id-cpan-miniaturized-cpan-miniaturized-span&#34;&gt;&lt;span id=&#34;cpan_miniaturized&#34;&gt;CPAN, Miniaturized&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;ricardo-signes&#34;&gt;Ricardo Signes&lt;/h4&gt;

&lt;p&gt;Everyone has seen a problem too boring to solve. Rather than keep a stiff upper lip and trudge forward, you head to the CPAN and find the pre-packaged solution that probably already exists. It&amp;rsquo;s just another display of your complete impatience and laziness, and that&amp;rsquo;s great: with the CPAN at your side, you can solve boring problems effortlessly.&lt;/p&gt;

&lt;p&gt;The problem, of course, is that CPAN isn&amp;rsquo;t always at your side. Sure, a simple &lt;code&gt;install Class::DBI&lt;/code&gt; might be enough to implement half of your project, but when you&amp;rsquo;re offline and stuck on the plane, good luck getting to your usual mirror. I&amp;rsquo;ve found myself in that position a number of times, and usually when I&amp;rsquo;ve most wanted to get some work done. On the way home from conventions, I&amp;rsquo;ve sat in cars and planes, wishing I&amp;rsquo;d remembered to install &lt;code&gt;Test::Smoke&lt;/code&gt; or &lt;code&gt;DBD::SQLite&lt;/code&gt; before leaving home.&lt;/p&gt;

&lt;p&gt;The solution, of course, is to just mirror the whole CPAN. It&amp;rsquo;s only three gigs, and if you&amp;rsquo;ve got a week to spare on your dial-up, that&amp;rsquo;s just fine. After all, later rsyncs are just a few hours a week!&lt;/p&gt;

&lt;p&gt;Other problems loom, not the least of which is the possibility of losing those three gigs when your drive crashes on the road. You can always back up the mirror to a DVD in case you need to re-mirror it quickly&amp;hellip; but by this point the solution to your problem has become tedious, and I know how you feel about solving tedious problems.&lt;/p&gt;

&lt;p&gt;A better solution to this problem was published a few years ago by Randal Schwartz: mini-CPAN. Its guiding principle is an old programmer standard: &amp;ldquo;You aren&amp;rsquo;t going to need 90 percent of that crap.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Randal&amp;rsquo;s script only retrieves the CPAN indices, and then the modules listed in the package index &amp;ndash; basically, only the newest version of every distribution &amp;ndash; the only files ever used by CPAN.pm and CPANPLUS to install modules. On subsequent runs, only those distributions that have changed are updated.&lt;/p&gt;

&lt;p&gt;With this miniature CPAN, you&amp;rsquo;ve cut CPAN down to about 400 MB. Not only does it take a fraction of the time to mirror, but it fits nicely onto a CD. You can stick it in your bag, right behind your rescue disk, and know that no matter what happens, the CPAN will be right by your side.&lt;/p&gt;

&lt;p&gt;With the script configured and run, you&amp;rsquo;ll have your own personal CPAN sitting on your machine, ready to be used. Pointing CPAN.pm at it is easy as can be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        cpan&amp;gt; o conf urllist unshift file:///home/japh/minicpan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternately, just edit your CPAN::Config or CPANPLUS::Config.&lt;/p&gt;

&lt;p&gt;The only problem left with mini-CPAN is that it was so hard to find. It&amp;rsquo;s been such a fantastic addition to my toolbox that I feel slighted, having spent two years oblivious to its existence. To help others avoid this pain, I&amp;rsquo;ve tweaked the script, shoved its guts into a module, and stuck it onto CPAN. Just by installing &lt;a href=&#34;https://metacpan.org/pod/CPAN::Mini&#34;&gt;CPAN::Mini&lt;/a&gt;, you can have &lt;code&gt;minicpan&lt;/code&gt; dropped into place and ready to go:
&amp;ldquo; &amp;gt;}}
     minicpan -r &lt;a href=&#34;http://your.favorite.mirror/of/cpan&#34;&gt;http://your.favorite.mirror/of/cpan&lt;/a&gt; -l /home/japh/minicpan&lt;/p&gt;

&lt;p&gt;&amp;hellip;and your personal CPAN is waiting.&lt;/p&gt;

&lt;h3 id=&#34;span-id-database-bittwiddling-bit-twiddling-in-your-database-span&#34;&gt;&lt;span id=&#34;database_bittwiddling&#34;&gt;Bit-twiddling in your Database&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;aaron-trevena&#34;&gt;Aaron Trevena&lt;/h4&gt;

&lt;p&gt;Why would you use a bit mask in your database ?&lt;/p&gt;

&lt;p&gt;They can be useful where you have a many-to-many relationship where one side changes rarely and the other frequently. A good example is facilities provided by a Tourist Resort, where the actual amenities change rarely but resorts are added and updated often.&lt;/p&gt;

&lt;p&gt;Normalization would add an intermediate table between them, but that can be painfully slow if you have a significant number of amenities and frequently queried records about many of them.&lt;/p&gt;

&lt;p&gt;The same problem can occur to a lesser degree within a single table; perhaps you are doing some statistical analysis on demographics with columns representing gender, marital status, etc. For more than a few thousand records, querying subsets of the table based on these criteria can become expensive very quickly.&lt;/p&gt;

&lt;p&gt;How would you use bit masks?&lt;/p&gt;

&lt;p&gt;Instead of holding information in a separate table or a group of columns, use a bit mask with each bit representing a column in the table or a record in a second table. For example, use 8 bits to represent gender, marital status, employment status, smoker, drinker, driver, car-owner, and house-owner. A query to find drivers under 25 who don&amp;rsquo;t drink or smoke and own their own car contains six conditions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    select id, age from people where age &amp;lt; 25 and employment_status =
    &#39;employed&#39; and smoker = &#39;N&#39; and drinker = &#39;N&#39; and car_owner = &#39;Y&#39;
    and driver = &#39;Y&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While a bitmap would use two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    select id, age from people where age &amp;lt; 25 where bitmap_col &amp;amp; 00000110
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To allow employment status to have values for child, student, unemployed, employed, and retired, you would add extra bits representing each value. This applies to any column with a low number of potential values.&lt;/p&gt;

&lt;p&gt;This is a simple bitmap index, and you can use all kinds of bitwise operations on your queries against it. Complex queries can be simplified to a couple of binary operations. Of course, there is a downside. It&amp;rsquo;s harder to maintain, and if mapping a many-to-many relationship, you need to ensure consistency between the bit mask order and the contents of the other table. This can be enforced using a trigger or within the application.&lt;/p&gt;

&lt;p&gt;If you split the bitmap into individual columns and rotate it you can make a compressed bitmap index that only stores ranges of records that are true for each column or value of a column. Oracle provides this feature.&lt;/p&gt;

&lt;p&gt;These compressed bitmap indexes are even faster to query when used together in combination, and take up very little space. However, as multiple records&amp;rsquo; values can be held in a single entry in the index, updates to indexed columns can be slower and suffer from excessive locking on the index itself.&lt;/p&gt;

&lt;p&gt;Well-designed bitmap indices can have a huge impact on the performance of queries, as they are much smaller than standard b-tree indices and much faster on queries where a large proportion of that dataset is being queried.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jlcomp.demon.co.uk/bitmaps.doc&#34; class=&#34;uri&#34; class=&#34;podlinkurl&#34;&gt;&lt;a href=&#34;http://www.jlcomp.demon.co.uk/bitmaps.doc&#34;&gt;http://www.jlcomp.demon.co.uk/bitmaps.doc&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dbazine.com/jlewis3.shtml&#34; class=&#34;uri&#34; class=&#34;podlinkurl&#34;&gt;&lt;a href=&#34;http://www.dbazine.com/jlewis3.shtml&#34;&gt;http://www.dbazine.com/jlewis3.shtml&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technology/oramag/oracle/02-may/o32expert.html&#34; class=&#34;uri&#34; class=&#34;podlinkurl&#34;&gt;&lt;a href=&#34;http://www.oracle.com/technology/oramag/oracle/02-may/o32expert.html&#34;&gt;http://www.oracle.com/technology/oramag/oracle/02-may/o32expert.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-goodbye-farewell-amen-goodbye-farewell-amen-span&#34;&gt;&lt;span id=&#34;goodbye_farewell_amen&#34;&gt;Goodbye, Farewell, Amen&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;simon-cozens-1&#34;&gt;Simon Cozens&lt;/h4&gt;

&lt;p&gt;Let me first apologize for this personal note; I won&amp;rsquo;t do it again.&lt;/p&gt;

&lt;p&gt;Around the time I was busy being born, or maybe just a little after, Larry Wall was planning to be a missionary with the Wycliffe Bible Translators. Working on a degree in &amp;ldquo;Natural and Artificial Languages,&amp;rdquo; and then in linguistics graduate school, he learned about the ideas of tagmemics, semantics, and the cultural and anthropological concepts that have found their expression in the Perl language and culture. Unfortunately due to health problems, Larry couldn&amp;rsquo;t do the missionary thing, so he invented Perl. That&amp;rsquo;s why we&amp;rsquo;re all here.&lt;/p&gt;

&lt;p&gt;It was the beginning of May 2001 when Mark Dominus asked me if I&amp;rsquo;d be interesting in taking over the job of managing editor here at perl.com. I was delighted, and excited about the thought of working with the Perl community and hopefully producing and publishing some great resources for Perl programmers. I hope I&amp;rsquo;ve done a fair bit of that over the last three years, but now my time is up. I&amp;rsquo;m moving on, and starting next week the man simply known as &amp;ldquo;chromatic&amp;rdquo; will become Mr. Perl.com. Please treat him as well as you&amp;rsquo;ve treated me!&lt;/p&gt;

&lt;p&gt;I need to thank a bunch of people, who&amp;rsquo;ve done all the hard work behind the scenes that you don&amp;rsquo;t hear about: Mark, of course, for getting me involved here; Chris Coleman and Bruce Stewart from the O&amp;rsquo;Reilly Network who&amp;rsquo;ve had the curious experience of trying to manage me; Steve McCannell and Chris Valdez have been the producers of perl.com, and worked incessantly to get articles up on the site, often on shockingly short notice; Tara McGoldrick and others have been the copy editors; and of course, I&amp;rsquo;ve worked with a wide range of great authors and contributors. Thank you all. And thanks, of course, to the Perl community &amp;ndash; that&amp;rsquo;s &lt;strong&gt;you&lt;/strong&gt; &amp;ndash; without whom this wouldn&amp;rsquo;t be half as much fun.&lt;/p&gt;

&lt;p&gt;And about that missionary thing? Well, if Larry&amp;rsquo;s not going to be able to do it, someone has to. Like many Perl programmers, and indeed Larry himself, I&amp;rsquo;ve been interested in Japan for a very long time. In fact, I lived in Japan for a year, and was studying Japanese for my university major back when I started at perl.com; last year I decided that the time was right to prepare to move back to Japan, as a fulltime missionary.&lt;/p&gt;

&lt;p&gt;So in two weeks I&amp;rsquo;ll be going to All Nations University here in England for a two-year course to get me ready, and then I shall be off! I&amp;rsquo;m sure you won&amp;rsquo;t have heard the last of me, though, and I certainly won&amp;rsquo;t be stopping programming &amp;ndash; missionaries have things they need to automate too&amp;hellip; But for now, farewell! It&amp;rsquo;s been fun, and now it&amp;rsquo;s going to be fun in a different way.&lt;/p&gt;

&lt;p&gt;Take care out there, and happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Giving Lightning Talks</title>
      <link>http://localhost:1313/pub/2004/07/30/lightningtalk.html/</link>
      <pubDate>Fri, 30 Jul 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/07/30/lightningtalk.html/</guid>
      <description>

&lt;p&gt;After the keynotes, the most popular sessions at most Perl conferences tend to be the lightning talks. Each session consists of about 10 to 15 lightning talks — talks typically lasting individually no more than five minutes — back to back. As well as being tremendously interesting and entertaining for attendees, the conference organizers recognize that they offer an unequalled opportunity for new speakers to present for the first time without going to the lengths required for a longer talk.&lt;/p&gt;

&lt;p&gt;Which is why I was surprised that at this year&amp;rsquo;s YAPC someone raised the point in the town hall meeting that there&amp;rsquo;s no document that stands as a basic guide for pointing out the common pitfalls to new speakers. Armed with my experiences of YAPCs and organizing many, many London Perl Monger tech meets I thought I&amp;rsquo;d have a go at explaining what you need to know.&lt;/p&gt;

&lt;p&gt;Lightning talks are a great way to start speaking, but they do come with their own potential problems. Even the seasoned presenter makes mistakes when presenting and has had lightning talks go horribly, horribly wrong. Luckily, Perl audiences are very forgiving when this happens — after all, it&amp;rsquo;s happened to half the audience at sometime too, so it&amp;rsquo;s nothing to get too worked up about. However, there are a few things you can consider when writing your talk that will prevent you from sabotaging your own talk before it even begins.&lt;/p&gt;

&lt;h3 id=&#34;make-your-point&#34;&gt;Make your Point&lt;/h3&gt;

&lt;p&gt;First of all, let&amp;rsquo;s look at the point of a lightning talk. The point is to make a point, and explain it as quickly as possible. That&amp;rsquo;s it. Understand?&lt;/p&gt;

&lt;p&gt;Too many lightning talks forget this. They get caught up in the whole idea of providing background information or explaining other issues. They&amp;rsquo;ve got a full five minutes, damn it, and they&amp;rsquo;re gonna &lt;em&gt;use&lt;/em&gt; them.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the secret; No one cares if your lightning talk only lasts four minutes. No one cares if it lasts three. I&amp;rsquo;ve seen talks that last two minutes and the crowd loved it. But &lt;em&gt;everyone&lt;/em&gt; cares if it lasts six — especially if the important point you need to make happens at five minutes and 10 seconds. At a YAPC or other event with strict time keeping you&amp;rsquo;ll be cut off at five, and no one will hear what you were actually trying to say.&lt;/p&gt;

&lt;p&gt;One of the best tactics is to make your point as early in the talk as humanly possible. You might need to set up the problem space, explain why you were doing what you were doing before you can explain your point. Fine, but do it quickly. You really shouldn&amp;rsquo;t spend more than a minute explaining the background before you make your first point. If you haven&amp;rsquo;t explained the main point by minute three you&amp;rsquo;re probably up the proverbial creek without the paddle.&lt;/p&gt;

&lt;p&gt;Actually, that bit about not explaining much before your first point isn&amp;rsquo;t really true. You see, if you&amp;rsquo;re explaining the background to the problem, that &lt;em&gt;itself&lt;/em&gt; has to be your first point. You must carry your audience along, keeping them interested until you hit what you consider to be the &lt;em&gt;actual&lt;/em&gt; point of the presentation. You know how to do this — you know to generalize your problem into the larger problem that everyone has and therefore cares about, right?&lt;/p&gt;

&lt;h3 id=&#34;most-details-don-t-matter&#34;&gt;Most Details Don&amp;rsquo;t Matter&lt;/h3&gt;

&lt;p&gt;This brings me nicely to the bane of most lightning talks. The details. Here&amp;rsquo;s the rub; No one cares, and even if they do, certainly no one will remember the little details 10 minutes after your talk has ended. This means that unless those details are absolutely necessary to explain the point you&amp;rsquo;re trying to make, then they&amp;rsquo;re just sucking up time. Even if they&amp;rsquo;re necessary, stop and think, can you replace these with a shorter summary, something that you can explain easier? Remember, you&amp;rsquo;re talking to an intelligent crowd here who can normally move from A to B without having to be handled through each and every step.&lt;/p&gt;

&lt;p&gt;One of the biggest mistakes people make about the details is misunderstanding that just because they&amp;rsquo;ve put something on the slides it means that they have to explain it. For example, you might need to show slides to demonstrate that one of the things your spiffy new function allows you to do is rewrite a huge chunk of code into a much smaller piece of code. This means that you probably need a before and after slide with one slide containing a mountain of code and one containing very little, but it doesn&amp;rsquo;t mean you &lt;em&gt;have&lt;/em&gt; to explain &lt;em&gt;how&lt;/em&gt; they&amp;rsquo;re different in great detail. That should be self-evident (or if it&amp;rsquo;s not, your new function isn&amp;rsquo;t nearly spiffy enough.) Someone can always download your slides later if they really want to read the example carefully.&lt;/p&gt;

&lt;h3 id=&#34;practice&#34;&gt;Practice&lt;/h3&gt;

&lt;p&gt;When it comes down to it there&amp;rsquo;s only one way to make sure that your talk will fit in the time-slot, and that&amp;rsquo;s to practice it. Read it out aloud several times. Present it to the cat. Try to convince your colleague/flatmate/significant other to listen to it. If you&amp;rsquo;re presenting at a conference, see if you can present it at your local Perl Monger meeting beforehand as a dry run. Not only will this give you the most accurate understanding of how long it&amp;rsquo;ll take to say everything (and believe me, you&amp;rsquo;ll be surprised at what bits go quickly and what bits drag), but it&amp;rsquo;ll also help you realize what bits can be cut and replaced. It&amp;rsquo;ll also give you confidence and experience in the talk, so you can actually present it slightly quicker.&lt;/p&gt;

&lt;p&gt;Having covered the contents of your talk, let&amp;rsquo;s move onto the practicalities of &lt;em&gt;how&lt;/em&gt; you&amp;rsquo;ll do it.&lt;/p&gt;

&lt;h3 id=&#34;slides&#34;&gt;Slides&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s talk about slides. Firstly, do you actually need slides at all? You&amp;rsquo;ll only talk for five minutes. Crib notes on paper work well. One of my favorite lightning talks had someone just talking from a bunch of index cards, each with one word on it to remind him what he was going to talk about next,. And each one he&amp;rsquo;d theatrically throw over his shoulder after he was done with it. Remember, the slides are to show things to the audience, not to help you remember what you&amp;rsquo;re talking about. Think of the lightning talk as a narrative with visual aids — someone once told me presenting a lightning talk is just like having a conversation with the audience where they don&amp;rsquo;t speak for five minutes.&lt;/p&gt;

&lt;h3 id=&#34;prepare-your-slides&#34;&gt;Prepare your Slides&lt;/h3&gt;

&lt;p&gt;All this said, let&amp;rsquo;s assume you&amp;rsquo;ve decided that you need slides. Remember, you have five minutes. This means that you have zero time to faff about with your slides, setting up your computer, or otherwise doing anything that isn&amp;rsquo;t entertaining your audience. Preparation is everything.&lt;/p&gt;

&lt;p&gt;The audience bores easily so it&amp;rsquo;s important that you don&amp;rsquo;t keep them waiting before you start speaking. If you have your slides on your laptop make sure everything is set up so you can start talking as soon as it&amp;rsquo;s plugged in. Set up and load all the apps you&amp;rsquo;re going to use first — no one wants to be caught on stage in an awkward silence with nothing to say while they wait the 20 seconds it takes Mozilla to load. While you&amp;rsquo;re at it don&amp;rsquo;t forget to close down instant-messenger clients, calendaring apps, and anything else that might randomly pop up dialogs when you&amp;rsquo;re trying to speak.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s absolutely critical that you take the time to check that your laptop works with the projector before the lightning talk session. Make sure that you don&amp;rsquo;t have to do anything other than plug the projector in, that you don&amp;rsquo;t have to remember some weird key combo to make the external display work, and that you have enough power to last the entire talk (including the time your laptop will be switched on while you&amp;rsquo;re waiting your turn).&lt;/p&gt;

&lt;p&gt;Of course, the best way to get around this faffing about with switching laptops is to work out who&amp;rsquo;s talking before you and arrange to use their computer. One of the major drawbacks to this is, of course, that you might not be familiar with their setup. This means that you should, at the very least, run through your presentation. Don&amp;rsquo;t assume that one web browser is like any other — they all have slightly different ways of laying out pages and having plugins installed. Try it first to find problems while no one is watching, rather than trying to debug your presentation setup on stage. Have your own laptop ready in case theirs suddenly fails for some unknown reason.&lt;/p&gt;

&lt;h3 id=&#34;presentation-software&#34;&gt;Presentation Software&lt;/h3&gt;

&lt;p&gt;When it comes to actually writing a lightning talk, there are many choices of presentation software. Although there isn&amp;rsquo;t one right piece of software for everyone, there are definitely wrong choices. That wrong choice is anything that requires any thought on your part while you&amp;rsquo;re presenting. It&amp;rsquo;s stupidly hard to operate a computer and talk at the same time — especially when you&amp;rsquo;re not sitting in front of the machine but standing at a weird angle that makes it almost impossible to operate a mouse or track pad. During a lightning talk it&amp;rsquo;s vital that you keep your rapport with the audience, rather than diverting your attention to the computer every slide change. Unlike a 40-minute talk, you don&amp;rsquo;t have time to take breaks between slides.&lt;/p&gt;

&lt;p&gt;For this reason I prefer software that you just hit one key or click the mouse to go to the next slide — I follow the rule that anything that requires you to move the mouse is probably a failure. So if you &lt;em&gt;must&lt;/em&gt; present from a web browser make sure that the links to move between places are in the same physical location on the page, preferably in the top left corner. And make sure that you don&amp;rsquo;t have to scroll your slides. Remember kids, HTML isn&amp;rsquo;t a presentation language so the only way to ensure that it doesn&amp;rsquo;t give you unexpected surprises — suddenly scrolling, missing graphics, crazy fonts — is to run through the presentation with the web browser you&amp;rsquo;ll use on the machine you want to use beforehand. All web browsers do &lt;em&gt;not&lt;/em&gt; render the same.&lt;/p&gt;

&lt;h3 id=&#34;unexpected-problems&#34;&gt;Unexpected Problems&lt;/h3&gt;

&lt;p&gt;Even when you take every precaution, you&amp;rsquo;ll still encounter unexpected problems. Your demo won&amp;rsquo;t work. You&amp;rsquo;ll discover you&amp;rsquo;re using a slightly older version of the slides. Your software will use the wrong font. The computer will burst into flames and burn down the venue. Remember that you don&amp;rsquo;t have time to recover from any of these problems. Even if it takes you 30 seconds to locate a new version of the slides and remember where you were, that&amp;rsquo;s a tenth of your talk gone. More importantly, the audience has lost interest while you&amp;rsquo;re doing this and has slipped into their daydream world where you&amp;rsquo;ll have to work really hard to reacquire their attention.&lt;/p&gt;

&lt;p&gt;If something goes wrong, you really have no choice but to move on and skip over it. As I said, the audience is normally a forgiving bunch so tell them something has gone wrong and take them into your confidence; explain what the demo would have shown and press on regardless.&lt;/p&gt;

&lt;h3 id=&#34;concluding-your-talk&#34;&gt;Concluding your Talk&lt;/h3&gt;

&lt;p&gt;In an ideal world you&amp;rsquo;d be able to complete your lightning talk with time to spare, take a few questions, and clear up anything you didn&amp;rsquo;t manage to cover. In reality, that&amp;rsquo;s probably won&amp;rsquo;t happen. So it&amp;rsquo;s important to put something in your slide to allow people to find out more about what you&amp;rsquo;re talking about and provide a way of contacting you once you&amp;rsquo;re done speaking. The biggest mistake I&amp;rsquo;ve made in my talks in the past is putting this information on the last slide, which of course only appears for 10 seconds and no one has time to copy down. Now I place a simple URL in the bottom corner of every slide.&lt;/p&gt;

&lt;p&gt;This just goes to show that I&amp;rsquo;m still learning and finding ways of improving my lightning talks. Remember that in the end, it doesn&amp;rsquo;t really matter if it all goes well or not; it&amp;rsquo;s all a learning experience. Good luck with your talk.&lt;/p&gt;

&lt;h3 id=&#34;span-id-see-also-see-also-span&#34;&gt;&lt;span id=&#34;see_also&#34;&gt;See Also&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://perl.plover.com/yak/presentation/&#34;&gt;Conference Presentation Judo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

