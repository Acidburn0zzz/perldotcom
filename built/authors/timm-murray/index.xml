<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timm Murray on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/timm-murray/</link>
    <description>Recent content in Timm Murray on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2020 10:39:00 +0000</lastBuildDate>
    <atom:link href="/authors/timm-murray/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Rock Pi S Review</title>
      <link>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</link>
      <pubDate>Thu, 23 Jan 2020 10:39:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</guid>
      <description>&lt;p&gt;When writing articles like these, there is an inevitable comparison to the
Raspberry Pi series. There is no way to fight this,
and for good reason. The first Raspberry Pi ushered in a slew of Single
Board Computers (SBCs), and one of them is the Rock Pi S, a new board from Seeed
Studio.&lt;/p&gt;

&lt;p&gt;In the interest of full disclosure, the Rock Pi S was provided by Seeed
Studio for this review. Specifically, it&amp;rsquo;s the model with 512MB of RAM and
4Gb of built-in flash.&lt;/p&gt;

&lt;p&gt;The Rock Pi S competes in the same segment as the Raspberry Pi Zero, particularly the Zero W
with built-in WiFi. Its form factor is different; where the Zero is
shaped like a stick of gum, the Rock Pi S is closer to a square. The Rock
also has USB-C for power, an ethernet jack, and a USB-A port. Depending on the
project, it can end up being cheaper than the Zero, since you don&amp;rsquo;t have to
buy a micro-USB to USB-A adapter to hook up most other devices.&lt;/p&gt;

&lt;p&gt;You do still need a micro SD card. While there are versions of the Rock with
built-in flash, it&amp;rsquo;s small and not meant for booting an OS. Note that the size of the built-in flash
is listed in giga&lt;em&gt;bits&lt;/em&gt;. The 4Gb version is actually 512 mega&lt;em&gt;bytes&lt;/em&gt;. So get an
SD card.&lt;/p&gt;

&lt;p&gt;Which leaves us the question of which SD card. Some people automatically
reach for a class 10 or UHS-I card, since those have the highest performance on
the box. Trouble is, the traditional class ratings on SD cards only tell you
the sequential read and write performance. That&amp;rsquo;s fine for cameras, but
running an operating system means lots of random reads. Testing often showed
that a good class 4 card was better than a lot of the class 10 cards out there.&lt;/p&gt;

&lt;p&gt;These days, we don&amp;rsquo;t have to worry about that, because the SD Association
came up with the &lt;a href=&#34;https://www.sdcard.org/developers/overview/application/index.html&#34;&gt;Application Performance Classes&lt;/a&gt;
of A1 and A2. These set a minimum of random IO operations per second, which
is just what we want. So get an A1 card and you&amp;rsquo;ll be happy with the results.&lt;/p&gt;

&lt;p&gt;The big thing in the Rock&amp;rsquo;s favor is a quad core ARM processor. While it&amp;rsquo;s not
going to set any Bitcoin mining records, I&amp;rsquo;ve found multicore
processors are handy for hardware projects. On a single core processor running
Linux, your program can get interrupted by something else at any time. This
means that a program running on a mere 16MHz Arduino may run better than a
1GHz Raspberry Pi. A quad core processor mitigates this, since secondary
programs have 3 other cores to work with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/rockpi2.jpg&#34; alt=&#34;The Rock Pi S&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Rock is powered over its USB-C port. I found attaching it to a
laptop USB port provided enough power to get going. This is also handy because
you can run &lt;code&gt;adb shell&lt;/code&gt; to connect to the Rock&amp;rsquo;s OS. &amp;ldquo;ADB&amp;rdquo; is the
Android Debug Bridge, and while the Rock does support running Android, I used
a Ubuntu Bionic image. Yes, &lt;code&gt;adb&lt;/code&gt; did still work with Ubuntu installed. This is great for
headless installs, since you won&amp;rsquo;t have networking available at first boot.&lt;/p&gt;

&lt;p&gt;Since it&amp;rsquo;s running Ubuntu, we have &lt;code&gt;perl&lt;/code&gt; from the start:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v:

This is perl 5, version 26, subversion 1 (v5.26.1) built for aarch64-linux-gnu-thread-multi
(with 67 registered patches, see perl -V for more detail)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you won&amp;rsquo;t have is an equivalent to &lt;a href=&#34;https://metacpan.org/pod/RPi::WiringPi&#34;&gt;RPi::WiringPi&lt;/a&gt;
to control GPIO (&amp;ldquo;General Purpose Input/Output&amp;rdquo;). GPIO is the most basic
building block for hardware programming. We&amp;rsquo;re either controlling the output
voltage to cause something to happen, like blinking an LED, or we&amp;rsquo;re taking
input to see if something happened, like hitting a switch. It&amp;rsquo;s simple, but
very useful. Tons of hardware projects come down to just seeing if something
is on, or turning something on.&lt;/p&gt;

&lt;p&gt;What we lack is a library to do that on the Rock Pi S. That&amp;rsquo;s OK, because it&amp;rsquo;s
Linux, and Linux provides a simple sysfs interface to access GPIO pins. As long
as there&amp;rsquo;s a GPIO driver for the board, you can control the pins.&lt;/p&gt;

&lt;p&gt;The Rock has two headers, one of which is color coded and has the main pins you want to work with in most projects. Note
that there are a few variations of the pinout depending on the version of
the board you get. The version should be printed on the board (I received a
V12 board), so make sure you&amp;rsquo;re looking at the right pinout for your board.
See the &lt;a href=&#34;https://wiki.radxa.com/RockpiS/hardware/rockpiS#gpio&#34;&gt;GPIO header documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that the pins are specified as 3.3V input. That means you don&amp;rsquo;t want to put 5V
into them. Feeding it 5V might cause glitches, or could break the board
completely.&lt;/p&gt;

&lt;p&gt;To get at the pins, we can use the &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/gpio/sysfs.html&#34;&gt;Linux sysfs interface&lt;/a&gt;.
You will note a big fat deprecation warning at the top. The new way to do it
is with gpio-cdev, which requires some &lt;code&gt;ioctl()&lt;/code&gt; calls. Since this is
more difficult to handle&amp;ndash;it requires importing some constants from the
kernel headers, instead of just accessing files&amp;ndash;we&amp;rsquo;ll stick with the sysfs
interface for now. That said, if someone would like to make a CPAN module
that provides those kernel symbols (and maybe the ones for I2C and SPI, as
well), I would welcome that.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what we need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the pin accessible by writing the pin number to &lt;code&gt;/sys/class/gpio/export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the pin as an input pin by writing &amp;ldquo;in&amp;rdquo; to &lt;code&gt;/sys/class/gpioN/direction&lt;/code&gt; (where N is the pin number)&lt;/li&gt;
&lt;li&gt;Read the current value from &lt;code&gt;/sys/class/gpioN/value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since pullups are active, a pin not connected to anything will output a 1, and connecting it to ground will give you a 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can connect a wire from a ground pin to the pin you select, and the value
output should go from 1 to 0.&lt;/p&gt;

&lt;p&gt;You may be wondering why this is backwards; don&amp;rsquo;t you want to see a 1 when
something is connected? The reason is pullup resistors. If a pin is
disconnected, it will tend to &amp;ldquo;float&amp;rdquo;, picking up interference from the
electronics around it. That results in getting random 0&amp;rsquo;s and 1&amp;rsquo;s. If you
instead connect a resistor tied to high voltage, 1 is what you consistently get
on the pin.
If you then connect that pin to ground, it will see a 0 instead. We
just have to remember that the whole thing is backwards from what we normally
expect&amp;ndash;1 for disconnected, 0 for connected.&lt;/p&gt;

&lt;p&gt;The full program is at the end of the article. The &lt;code&gt;export_pin&lt;/code&gt; and &lt;code&gt;set_input&lt;/code&gt;
functions both take a pin number and ask the kernel to export it for
use or set it as input (respectively).  The &lt;code&gt;read_pin&lt;/code&gt; function takes a pin
and returns its current value (either 1 or 0). The &lt;code&gt;write_pin&lt;/code&gt; function is
just a helper function for doing the file IO for other functions.&lt;/p&gt;

&lt;p&gt;At the very bottom is the code to wrap all this together. We export the pin
passed in from the command line, set it as input, and then read the pin in a
loop. By outputting &amp;ldquo;\r&amp;rdquo;, the previously printed value is overwritten in the
terminal, rather than having one long string of values. Since we&amp;rsquo;re using
the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; version of &lt;code&gt;sleep&lt;/code&gt;, we can use
seconds in floating point to slow the output down without being too slow.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been waiting for a board like this for a while, packing in a multicore
processor, networking, a full sized USB jack, and running on Linux in a sub $20
price range. This might be a new favorite.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.26&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sys/class/gpio&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant SLEEP_TIME &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();
$GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\A\d+\z/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();



&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_input&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;export_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/export&amp;#39;&lt;/span&gt;, $pin );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/value&amp;#39;&lt;/span&gt;;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t read from $full_path: $!\n&amp;#34;&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$in&amp;gt;&lt;/span&gt; ) {
        $data &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $line;
    }

    close( $in );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $data;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($path, $data) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $path;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t write to $full_path: $!\n&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$data&amp;#34;&lt;/span&gt;;
    close $out;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;usage&lt;/span&gt;
{
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: rockpi_gpio.pl &amp;lt;pin number&amp;gt;\n&amp;#34;&lt;/span&gt;;
}


export_pin( $GPIO );
set_input( $GPIO );
$| &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# Autoflush output&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_pin( $GPIO );
    chomp $in;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$in\r&amp;#34;&lt;/span&gt;;
    sleep SLEEP_TIME;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Controlling insanity by parsing IR codes with Linux::IRPulses</title>
      <link>http://localhost:1313/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/</link>
      <pubDate>Tue, 08 Mar 2016 08:37:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/controlling-insanity-by-parsing-ir-codes-with-linux--irpulses/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Sending information with pulsing invisible light can be surprisingly complex.
Disentangle the problem with LIRC and Linux::IRPulses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Infrared remotes are one of those things where every manufacturer thinks they have the
One True Way&amp;trade; of doing it. You would think that there&amp;rsquo;s only one or two straightforward
ways to pulse a little IR light. Clearly, we&amp;rsquo;re all wrong, because the home entertainment
industry invents new ones all the time. That&amp;rsquo;s not even counting the other sectors and
hobbyist projects that come up with entirely different methods.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.lirc.org&#34;&gt;Linux Infrared Remote Control&lt;/a&gt; (LIRC) project has
produced mappings for a lot of remotes out there. That doesn&amp;rsquo;t help
with some of the more fringe devices. Also, some of the components at the top of the stack
are geared towards executing a program after detecting a valid series of pulses.&lt;/p&gt;

&lt;p&gt;If we would rather take the pulses and handle them within our own program, then
we need to ignore the top layers of LIRC and parse the pulse data directly. That is
what &lt;a href=&#34;https://metacpan.org/pod/Linux::IRPulses&#34;&gt;Linux::IRPulses&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;We first need the hardware to detect the pulses. On a regular computer, there are many
modules available which can be plugged in to a USB port. On a single board
computer like the Raspberry Pi, we have General Purpose Input/Output (GPIO) pins,
which can read the timing of the pulses.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-the-raspberry-pi&#34;&gt;Setting up the Raspberry Pi&lt;/h3&gt;

&lt;p&gt;Skip this section if you&amp;rsquo;re using a regular IR device. If you want to set up a
module on the Raspberry Pi&amp;rsquo;s GPIO pins, then read on.&lt;/p&gt;

&lt;p&gt;First, you need a module of the right frequency for the IR data you&amp;rsquo;re trying to
receive. If you&amp;rsquo;re using a remote from an old TV, then searching around for
&amp;ldquo;&lt;manufacturer&gt; IR protocol&amp;rdquo; should get you the right answer. 38 KHz is a common
frequency, but this is just the first thing that manufacturers all did differently.&lt;/p&gt;

&lt;p&gt;The TSOP38138 is an IR remote receiver that runs at 38KHz. It&amp;rsquo;s part of a family of
devices that run at different frequencies, any of which are likely adequate.&lt;/p&gt;

&lt;p&gt;IR receivers for picking up remote data have three pins: power, ground, and data.
Connect power to a +3.3V pin on the Raspberry Pi, ground to ground, and data to
GPIO 23. See &lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/&#34;&gt;the Raspberry Pi GPIO documentation&lt;/a&gt; for the location of the pins.&lt;/p&gt;

&lt;p&gt;Now we need to configure LIRC. Start with a simple installation of the package with
&lt;code&gt;apt-get install lirc&lt;/code&gt;. Next, we need to load the kernel module,
tell LIRC where to find the pin, and also configure some Raspberry Pi boot options.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/modules-load.d/modules.conf&lt;/code&gt;, put:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;lirc_dev
lirc_rpi gpio_in_pin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; gpio_out_pin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That will make GPIO 23 as your input pin. LIRC can also be setup to send IR data, so
we set GPIO 22 for that as long as we&amp;rsquo;re here. Next, modify &lt;code&gt;/etc/lirc/hardware.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# /etc/lirc/hardware.conf&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Arguments which will be used when launching lircd&lt;/span&gt;
LIRCD_ARGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--uinput&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#Don&amp;#39;t start lircmd even if there seems to be a good config file&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#START_LIRCMD=false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#Don&amp;#39;t start irexec, even if a good config file seems to exist.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#START_IREXEC=false&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#Try to load appropriate kernel modules&lt;/span&gt;
LOAD_MODULES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true

&lt;span style=&#34;color:#75715e&#34;&gt;# Run &amp;#34;lircd --driver=help&amp;#34; for a list of supported drivers.&lt;/span&gt;
DRIVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# usually /dev/lirc0 is the correct setting for systems using udev&lt;/span&gt;
DEVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/lirc0&amp;#34;&lt;/span&gt;
MODULES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lirc_rpi&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Default configuration files for your hardware if any&lt;/span&gt;
LIRCD_CONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
LIRCMD_CONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The particularly important things to note here are &lt;code&gt;DEVICE&lt;/code&gt; for the
device path, and &lt;code&gt;MODULES&lt;/code&gt; for the Raspberry Pi GPIO driver.&lt;/p&gt;

&lt;p&gt;Finally, edit &lt;code&gt;/boot/config.txt&lt;/code&gt; and add this somewhere in the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dtoverlay&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lirc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rpi,gpio_in_pin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,gpio_out_pin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then reboot. Once you&amp;rsquo;re back up, you can test it by plugging in your IR module
to the right pins and pointing a remote at it. Using &lt;code&gt;mode2 -d /dev/lirc0&lt;/code&gt;,
you should see the &lt;code&gt;pulse&lt;/code&gt; and &lt;code&gt;space&lt;/code&gt; data being sent.&lt;/p&gt;

&lt;h3 id=&#34;decoding-the-undecodable&#34;&gt;Decoding the undecodable&lt;/h3&gt;

&lt;p&gt;Sony runs their remotes at 40KHz. It starts by sending a header of a 2400μs pulse and
600μs space. After the header, a 1 bit is sent by a 1200μs pulse, and a zero with a
600μs. Between those ones and zeros are 600μs spaces. Codes could be 12, 15, or 20
bits long depending on the remote. This is about as straightforward as things get.&lt;/p&gt;

&lt;p&gt;NEC uses a 38KHz carrier frequency. There&amp;rsquo;s a 9000μs header followed by a 4500μs space.
A 1 bit is sent by a 562.5μs pulse. A 0 bit is sent by a 562.5μs pulse. Wait, what? No,
that&amp;rsquo;s not a typo. NEC differentiates ones and zeros by the length of the space that
comes after the pulse: 1687.5μs for 1, and 562.5μs for 0.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.easyracelaptimer.com&#34;&gt;EasyRaceLapTimer&lt;/a&gt; (an Open Source
quadcopter race timer system) is on a 38KHz frequency. It sends a 300μs pulse followed
by a 300μs space. It then alternates sending pulses and spaces, with a 1 bit being
600μs, and a 0 bit being 300μs.&lt;/p&gt;

&lt;p&gt;All the timing numbers above are big fat lies. The noisy, analog nature of the world
means the actual values coming from the IR receiver will be different from the
specified values, perhaps by as much as 15%. It&amp;rsquo;s safe to assume that reverse
engineered specifications are only guessing at the actual values that the manufacturer
intended.&lt;/p&gt;

&lt;p&gt;All that is to say that we have a complicated job on our hands, and the above only
covers a few of the examples out there.&lt;/p&gt;

&lt;h3 id=&#34;linux-irpulses&#34;&gt;Linux::IRPulses&lt;/h3&gt;

&lt;p&gt;The goal of this module is to simplify the process reading these pulses and spaces
while tolerating the numbers being off.&lt;/p&gt;

&lt;p&gt;At present, the module works by parsing the output of LIRC&amp;rsquo;s &lt;code&gt;mode2&lt;/code&gt;
program. This may change to reading directly from &lt;code&gt;/dev/lirc0&lt;/code&gt; in the future.
For now, we&amp;rsquo;ll start by opening a pipe to &lt;code&gt;mode2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mode2 -d /dev/lirc0&amp;#39;&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t exec mode2: $!\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now need to define the protocol to Linux::IRPluses&amp;rsquo;s constructor. To help with this,
adding a &lt;code&gt;use Linux::IRPulses&lt;/code&gt; will export the subroutines &lt;code&gt;pulse()&lt;/code&gt;,
&lt;code&gt;space()&lt;/code&gt;, and &lt;code&gt;pulse_or_space()&lt;/code&gt;.  These are used to specify what you
expect to come in for pulses or spaces.&lt;/p&gt;

&lt;p&gt;For instance, we know that NEC sends a 9000μs pulse and 4500μs space for its header.
We tell the constructor this with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Linux::IRPulses&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
    header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ pulse &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, space &lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt; ],
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parser goes through each entry in the array, checking off that the given pulse or
space data is what we expect. Once it reaches the end of the header array, it marks the
header as good and then looks for valid data for ones and zeros. We specify those in
much the same way. We&amp;rsquo;ll add in the other constructor parameters here, as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Linux::IRPulses&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
    header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ pulse &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;, space &lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt; ],
    zero &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ pulse &lt;span style=&#34;color:#ae81ff&#34;&gt;563&lt;/span&gt;, space &lt;span style=&#34;color:#ae81ff&#34;&gt;563&lt;/span&gt; ],
    one &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ pulse &lt;span style=&#34;color:#ae81ff&#34;&gt;563&lt;/span&gt;, space &lt;span style=&#34;color:#ae81ff&#34;&gt;1688&lt;/span&gt; ],
    bit_count &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,
    callback &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($args) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $args&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{code};
        say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received code $code&amp;#34;&lt;/span&gt;;
    },
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parser will continue looking for ones and zeros until it&amp;rsquo;s collected enough for the
given &lt;code&gt;bit_count&lt;/code&gt;. Once the right number has been met, it calls the subref
specified in &lt;code&gt;callback&lt;/code&gt; with a hashref. The hashref contains keys for
&lt;code&gt;code&lt;/code&gt; (the IR code that was detected) and &lt;code&gt;pulse_obj&lt;/code&gt; (the
Linux::IRPulses object). All the length numbers are checked with a tolerance of 20%.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t promise you will keep your sanity after working with IR data, but hopefully
&lt;code&gt;Linux::IRPulses&lt;/code&gt; can help you go mad with dignity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Original photo CC-BY 2.0 by Stefanus Ming at &lt;a href=&#34;https://flic.kr/p/7djHYP&#34;&gt;https://flic.kr/p/7djHYP&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accelerating Perl</title>
      <link>http://localhost:1313/article/159/2015/3/16/Accelerating-Perl/</link>
      <pubDate>Mon, 16 Mar 2015 10:04:29 +0000</pubDate>
      
      <guid>http://localhost:1313/article/159/2015/3/16/Accelerating-Perl/</guid>
      <description>&lt;p&gt;Accelerometers have exploded in popularity since the introduction of the Nintendo Wii&amp;rsquo;s motion controls. They&amp;rsquo;re also common in cars and smartphones. Until recently, Perl has not been in places where interfacing directly with accelerometers made sense. With the Raspberry Pi and other SoC (System on a Chip) devices, it&amp;rsquo;s now time to fix this oversight.&lt;/p&gt;

&lt;p&gt;There are many accelerometers on the market, which are broadly divided into four interface types: analog, SPI, I2C, and serial. Analog is very simple to read with any device that has an Analog-to-digital converter, but is also subject to electrical noise. SPI and I2C are the most common types.&lt;/p&gt;

&lt;p&gt;An accelerometer can be combined with a gyroscope to produce more accurate readings than either one alone. This is what the Wii Motion Plus did for Nintendo. There are algorithms to combine their data, which can be tricky to write by hand. Fortunately, there are devices called an &amp;ldquo;Inertial Measurement Unit&amp;rdquo; (IMU) which combine the data for you and present an interface similar to a straight accelerometer. Unfortunately, these tend to be quite a bit more expensive.&lt;/p&gt;

&lt;p&gt;As you may recall from High School Physics, the Earth is pulling us all down at an acceleration of about 9.81 m/s&lt;sup&gt;2&lt;/sup&gt;. An accelerometer sitting on a flat table will measure this acceleration straight down towards the Earth&amp;rsquo;s center (more accurately, its center of gravity). Keep this in mind when taking readings.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s common for accelerometers to have several configurable ranges of measurement. If you set the device to read +/- 2g (that is, 2 * 9.81 m/s&lt;sup&gt;2&lt;/sup&gt;), and it gives data back in a 16-bit integer, then it will give readings over that entire 16-bit range. If you set it for +/- 10g, then it will still give readings over the entire 16-bit range. This means that higher settings will lose precision.&lt;/p&gt;

&lt;p&gt;Be sure, then, to set the measurement range to just a little more than what you expect. A sportscar on a track would have a hard time doing 2g&amp;rsquo;s in any direction. Most rollercoasters max at around 4g&amp;rsquo;s, maybe 6. Fighter jets can exceed 10g&amp;rsquo;s, which is about the limit of human ability for any sustainable period. Also note that instantaneous acceleration can be extremely high for any of these cases; a sportscar hitting a brick wall will easily exceed 10g&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Every chip defines its own interface protocol. This means a new interface driver needs to be written for each chip, and unfortunately, there aren&amp;rsquo;t a lot of CPAN modules out there for individual devices. One that does exist is &lt;a href=&#34;https://metacpan.org/pod/Device::LSM303DLHC&#34;&gt;Device::LSM303DLHC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The LSM303DLHC chip in question also contains a magnetometer, and is available on a breakout board from Adafruit Industries.&lt;/p&gt;

&lt;p&gt;Device::LSM303DLHC uses the Linux scheme of accessing I2C devices under &lt;code&gt;/dev/i2c-*&lt;/code&gt;. On the Raspberry Pi, the I2C pins on the GPIO header are available at &lt;code&gt;/dev/i2c-1&lt;/code&gt;. Device::LSM303DLHC divides the two functions of this chip into two objects. You start by initializing the main object with the I2C path, fetching the accelerometer object, and enabling it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Device::LSM303DLHC&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({
    I2CBusDevicePath &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/i2c-1&amp;#39;&lt;/span&gt;,
});
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $accel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dev&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Accelerometer;
$accel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enable;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$accel&lt;/code&gt; object gives us convenience methods for returning the acceleration vector in different units. With &lt;code&gt;getAccelerationVectorInG()&lt;/code&gt;, we get the g rating, while &lt;code&gt;getAccelerationVecotrInMSS()&lt;/code&gt; gives us m/s&lt;sup&gt;2&lt;/sup&gt;, among a few others. I like to use the g rating:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $acc_angle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $accel&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;getAccelerationVectorInG;
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accel: $$acc_angle{x}, $$acc_angle{y}, $$acc_angle{z}&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will repeatedly dump the acceleration vector to STDOUT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Accel: -0.0234375, -0.0078125, -0.9453125
Accel: -0.0234375, -0.0078125, -0.9453125
Accel: -0.015625, -0.01171875, -0.9453125
Accel: -0.015625, -0.01171875, -0.9453125
Accel: -0.015625, -0.00390625, -0.9453125
Accel: -0.015625, -0.00390625, -0.9453125
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the flat side of an LSM303 chip on the table, you should see the Z output be approximately 1g, or maybe -1g if you turn it upside down. The other outputs should be about zero. Pick it up and turn it around, and you should see the Z output head towards zero, with the X and Y outputs adding up the 1g vector towards the center of the Earth (plus or minus some shakiness from your hand).&lt;/p&gt;

&lt;p&gt;Accelerometers are one of those things that once you start using them, you find a million fun things to do with them. So go forth and have fun!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPS and Perl</title>
      <link>http://localhost:1313/article/158/2015/3/10/GPS-and-Perl/</link>
      <pubDate>Tue, 10 Mar 2015 12:43:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/158/2015/3/10/GPS-and-Perl/</guid>
      <description>&lt;p&gt;Since the beginning of the human race, people have needed to know where they are. If you&amp;rsquo;re dragging a dead antelope back to the rest of the tribe, knowing where you are and where you&amp;rsquo;re going is very important. At some point, one of them must have said &amp;ldquo;I sure hope my ancestors put a bunch of satellites into orbit to make this easier&amp;rdquo;. That person probably should have focused on inventing the wheel, forging metal, and combining chocolate with peanut butter, but let&amp;rsquo;s face it: some of humanity&amp;rsquo;s best inventions came from people who tend to get ahead of themselves from time to time. Which means that today, we have just such a satellite system in orbit to help you get around.&lt;/p&gt;

&lt;p&gt;The Global Positioning System (GPS) was originally invented by the American Department of Defense to guide missiles onto targets. It was later opened to civilian use, and the nature of satellites means that you can pick up their signal from around the world. Not wanting to be tied to a system ultimately controlled by the US military, the European Union has been launching the Galileo system, and Russia has launched GLONASS. These systems are likewise available worldwide, and some receivers can pick up multiple types. Good thing, because sometimes GPS alone doesn&amp;rsquo;t give you the fix you need.&lt;/p&gt;

&lt;p&gt;GPS requires you to have a good signal from at least 4 satellites to pinpoint your location. GPS breakout boards often have a small antenna built into their PCB traces, but this won&amp;rsquo;t pick up much signal, especially indoors. The &lt;a href=&#34;https://www.adafruit.com/products/746&#34;&gt;Adafruit Ultimate GPS Breakout&lt;/a&gt; from Adafruit Industries has a trace antenna to get you started. It also has a u.FL plug on board, which can plug into most external antennas out there with a u.FL to SMA adapter.&lt;/p&gt;

&lt;p&gt;Most GPS modules attach using a simple serial connection. On older PCs, you could access them with the &lt;a href=&#34;https://en.wikipedia.org/wiki/RS-232&#34;&gt;RS232 port&lt;/a&gt;, but few modern computers come with them. A USB FTDI cable &lt;a href=&#34;http://www.ftdichip.com/Products/Cables/USBRS232.htm&#34;&gt;adapter&lt;/a&gt; can fix this.&lt;/p&gt;

&lt;p&gt;On the Raspberry Pi, there are a few pins on the GPIO header that can be used with serial devices. It&amp;rsquo;s accessible via &lt;code&gt;/dev/ttyAMA0&lt;/code&gt;. There&amp;rsquo;s a slight hiccup with this: the Pi uses this serial device for console output. This is handy if you wanted to run the Pi headless with no network, but it will get in the way of interfacing with our GPS device.&lt;/p&gt;

&lt;p&gt;To fix this, there are two files to edit. The first is &lt;code&gt;/etc/inittab&lt;/code&gt;, which contains an entry to attach &lt;code&gt;getty&lt;/code&gt; to the device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comment this out by putting a &lt;code&gt;#&lt;/code&gt; at the start of the line.&lt;/p&gt;

&lt;p&gt;The second file is &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;, which contains arguments that are passed to the Linux kernel at boot. This causes kernel boot messages to be passed to the device. It will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete any parameters that reference &lt;code&gt;ttyAMA0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that our Raspberry Pi is ready, connect up the GPS device. Note that you have to cross the receive and transmit lines. The GPS Tx line goes to the Pi&amp;rsquo;s Rx line, and vice versa.&lt;/p&gt;

&lt;p&gt;Once connected, you should be able to run &lt;code&gt;screen&lt;/code&gt; against the terminal (yes, you can use &lt;code&gt;screen&lt;/code&gt; against serial terminals):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen /dev/ttyAMA0 9600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should spit data at you that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$GPGGA,235119.315,,,,,0,00,,,M,,M,,*72
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPGSV,1,1,03,10,,,21,16,,,30,07,,,26*7F
$GPRMC,235119.315,V,,,,,0.00,0.00,060315,,,N*46
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.091,,,,,0,00,,,M,,M,,*77
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.091,V,,,,,0.00,0.00,060315,,,N*43
$GPVTG,0.00,T,,M,0.00,N,0.00,K,N*32
$GPGGA,235120.310,,,,,0,00,,,M,,M,,*7D
$GPGSA,A,1,,,,,,,,,,,,,,,*1E
$GPRMC,235120.310,V,,,,,0.00,0.00,060315,,,N*49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data here is part of a standard under the &lt;a href=&#34;http://www.nmea.org/&#34;&gt;National Marine Electronics Association&lt;/a&gt; (NMEA). Most GPS receivers give data in this format. Notice all the commas? That indicates that the receiver doesn&amp;rsquo;t have a good fix yet, probably because I took them indoors. The receiver will always try to send data, even if it&amp;rsquo;s crummy data.&lt;/p&gt;

&lt;p&gt;This being Perl, there is already a CPAN module that knows how to parse that data: &lt;a href=&#34;https://metacpan.org/pod/GPS::NMEA&#34;&gt;GPS::NMEA&lt;/a&gt;. Here it is in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; GPS::NMEA;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $gps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GPS::NMEA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
    Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/ttyAMA0&amp;#39;&lt;/span&gt;,
    Baud &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9600&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($ns,$lat,$ew,$lon) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $gps&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_position;
    &lt;span style=&#34;color:#75715e&#34;&gt;# decimal portion is arcminutes, so convert to degrees&lt;/span&gt;
    $lat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int($lat) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($lat &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int($lat)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.66666667&lt;/span&gt;;
    $lon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int($lon) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($lon &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int($lon)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.66666667&lt;/span&gt;;

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;($ns,$lat,$ew,$lon)&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will continuously print out the location data coming from the GPS receiver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(N,43.052243,W,89.217520)
(N,43.052240,W,89.217519)
(N,43.052237,W,89.217518)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t know how people got around before GPS. Rather poorly, in all likelihood. I&amp;rsquo;m glad that Perl can help do it today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; &lt;em&gt;Arcminutes to degrees conversion added. Thanks to Jonathan Coop for pointing this out. 2015-04-04&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Perl Review of the ODROID-C1</title>
      <link>http://localhost:1313/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</link>
      <pubDate>Wed, 11 Feb 2015 13:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/152/2015/2/11/A-Perl-Review-of-the-ODROID-C1/</guid>
      <description>&lt;p&gt;The success of the Raspberry Pi has opened up a whole new market of System on a Chip devices, where a single chip integrates most of the basic functions of a computer. Many of these systems run some kind of Linux distribution. Naturally, Perl comes along for the ride.&lt;/p&gt;

&lt;p&gt;The last year saw the emergence of several competitors to the Raspberry Pi, though few have managed to hit the same formula - just enough RAM, just enough CPU, Ethernet, USB, and cheap. Some have been faster or have more RAM, but miss that $35 price point of the Model B+. One that has done it is the &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php&#34;&gt;ODROID-C1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a Cortex-A5 processor running at 1.5GHz, and 1GB of RAM, it&amp;rsquo;s ahead of the Raspberry Pi version 1, and may still keep ahead of the recently released Pi version 2. In addition to booting off a MicroSD card, it can instead take an eMMC module, which promises to be much faster.&lt;/p&gt;

&lt;p&gt;SD card quality can vary, even when buying Class 6 or Class 10 cards, which can affect your program&amp;rsquo;s performance if it does a lot of I/O. I bought an 8GB SD card from the ODROID store preloaded with Xubuntu. From a subjective standpoint, I found it quite peppy compared to the random SD cards I usually use with my Raspberry Pi&amp;rsquo;s. If you need something extra, the eMMC are about twice the cost for the same size, but may be a worthwhile option.&lt;/p&gt;

&lt;p&gt;Since installing CPAN modules (especially ones that don&amp;rsquo;t have official OS packages) involves a lot of downloading, unpacking, reading, and copying, the process can be harsh on cheap SD cards. Even worse (in my experience) is the PCDuino v3&amp;rsquo;s built-in flash, which is glacially slow. Too bad, because it otherwise could have been an interesting alternative to the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent entire evenings waiting for layers of CPAN dependencies to install on a Raspberry Pi&amp;rsquo;s SD card. Using &lt;a href=&#34;https://vonbienenstock.de/hiveberry/&#34;&gt;Hiveberry&amp;rsquo;s images&lt;/a&gt; can certainly help here. Of course, most people will be starting from the official OS images, and may hesitate to use a third-party; understandably so.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick-and-dirty benchmark of installing &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO&#34;&gt;Device::WebIO&lt;/a&gt; from a fresh deployment on an SD card bought directly from the ODROID store:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ time sudo cpanm Device::WebIO
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
real    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;m0&lt;span style=&#34;color:#ae81ff&#34;&gt;.980&lt;/span&gt;s
user    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;m46&lt;span style=&#34;color:#ae81ff&#34;&gt;.290&lt;/span&gt;s
sys     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;m18&lt;span style=&#34;color:#ae81ff&#34;&gt;.780&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer&lt;/a&gt; immediately after that (which has quite the dependency list):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ time sudo cpanm Dancer
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
real    &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;m40&lt;span style=&#34;color:#ae81ff&#34;&gt;.347&lt;/span&gt;s
user    &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;m53&lt;span style=&#34;color:#ae81ff&#34;&gt;.190&lt;/span&gt;s
sys     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;m32&lt;span style=&#34;color:#ae81ff&#34;&gt;.360&lt;/span&gt;s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to what I&amp;rsquo;ve seen on random SD cards, this is nice and quick!&lt;/p&gt;

&lt;p&gt;Power comes from a 5V/2A adapter with a 2.5mm plug, which deviates from the micro USB plugs that have become common with SoC devices. I consider this a good thing; people would often use old cellphone chargers with inadequate amp ratings and tons of noise in the signal. It might boot the board up fine, but things would go wrong at random, and they&amp;rsquo;d get frustrated and give up. In retrospect, micro USB on these boards might have been a bad idea. Encouraging a specific, vetted power source with a less ubiquitous kind of plug is something I hope other boards will copy, provided that it doesn&amp;rsquo;t lead to gouging on proprietary plugs.&lt;/p&gt;

&lt;p&gt;You will also want to be sure to have an adapter for the HDMI Micro Type-D port. This is even smaller than the HDMI Mini found on some similar boards, such as the BeagleBone Black.&lt;/p&gt;

&lt;p&gt;Booting the board up, using a random monitor laying around the hackerspace, it showed only a blank screen, flickering with the occasional noisy image. The reason is that the boot.ini file on the first partition of the SD card has a hardcoded resolution for the HDMI output. This partition is a simple FAT32 format, so you can mount it on just about any computer and edit the file to choose the right resolution.&lt;/p&gt;

&lt;p&gt;The preinstalled perl is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v

This is perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, version &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, subversion &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.18.2&lt;/span&gt;) built &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnueabihf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;thread&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;int
(with &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; registered patches, see perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;V &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more detail)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is more up to date than the 5.14 that comes on Raspbian images. Note the enabling of threads and 64-bit integers on this build, which is also the case on Raspbian. No doubt this is because perls built for a default system installation need to be compatible with every Perl script in existence (or as much as possible, anyway). Most Linux-based Perl applications don&amp;rsquo;t use threads, and can usually get away with native 32-bit integers. Threads, in particular, give a noticeable slowdown to every execution, even in apps that don&amp;rsquo;t use them. If you need to get a little extra speed out of your app, go for a custom Perl compile without these features.&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;m liking this little board. Once past the screen resolution issues, setup is a breeze. It&amp;rsquo;s nice and fast, with a reasonably up to date Perl. On the downside, the community is smaller, and so you&amp;rsquo;ll often be on your own to figure things out. Recommended for any trailblazers in the Perl community.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Hackerspace Webcam</title>
      <link>http://localhost:1313/article/140/2014/12/15/A-Hackerspace-Webcam/</link>
      <pubDate>Mon, 15 Dec 2014 13:58:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/140/2014/12/15/A-Hackerspace-Webcam/</guid>
      <description>&lt;p&gt;Nearly every hackerspace has some kind of live camera on their website, and every one of them solves it in their own way. If you want to visit the shop, it&amp;rsquo;s nice to know if someone else is hanging around. At &lt;a href=&#34;http://thebodgery.org&#34;&gt;The Bodgery&lt;/a&gt;, it was decided to base one on a Raspberry Pi that would upload a picture every 30 seconds whenever an open switch is set. When a member opens the space, the switch activates one of the Pi&amp;rsquo;s &amp;ldquo;General Purpose Input/Output&amp;rdquo; (GPIO) pins, which causes the Pi to start taking pictures. When shut off, a default picture is thrown up, declaring us closed.&lt;/p&gt;

&lt;p&gt;The first task was to make a box. The Bodgery has a 50W laser cutter, so I started with a design created with &lt;a href=&#34;http://www.makercase.com/&#34;&gt;MakerCase&lt;/a&gt;. After measuring the Pi and putting in the dimensions, MakerCase created a box with &amp;ldquo;finger joints&amp;rdquo; (tabs that fit the edges together). Using &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt; and some more measuring, a hole was made in the front panel for the Pi&amp;rsquo;s camera. Unfortunately, I didn&amp;rsquo;t take into account the length of the Pi&amp;rsquo;s SD card on one side and the WiFi adaptor on the other, so my original design was a little short. No matter-the backend of the case could be left open for this project.&lt;/p&gt;

&lt;p&gt;On the web server side, an account was created that had write access to a specific file. An ssh key was created and added to this account&amp;rsquo;s &lt;code&gt;~/.ssh/authroized_keys&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;https://metacpan.org/pod/Device::WebIO::RaspberryPi&#34;&gt;Device::WebIO::RaspberryPi&lt;/a&gt;, you can query the status of GPIO pins, and also get a filehandle for reading the picture from the camera. The camera is implemented using &amp;ldquo;&lt;a href=&#34;https://github.com/thaytan/gst-rpicamsrc&#34;&gt;rpicamsrc&lt;/a&gt;&amp;rdquo;, a plugin for &lt;a href=&#34;http://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; that accesses the Raspberry Pi&amp;rsquo;s camera module directly - which is great, because my previous attempts at getting the data using GStreamer&amp;rsquo;s &lt;code&gt;v4lsrc&lt;/code&gt; or other methods usually ended in frustration.&lt;/p&gt;

&lt;p&gt;The basic boilerplate sets up pin 17 as input, and then sets the image width, height, and JPEG quality (between 0 and 100, higher is better quality, but larger file size).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rpi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Device::WebIO::RaspberryPi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;set_as_input( &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_width( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_height( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; );
$rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_set_quality( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to have something that polls the input pin on a regular basis (once a second will do). There are many ways to do this, and I choose an &lt;a href=&#34;https://metacpan.org/pod/AnyEvent&#34;&gt;AnyEvent&lt;/a&gt; timer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $condvar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AnyEvent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;condvar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input_timer; $input_timer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AnyEvent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;timer(
    after    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    interval &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    cb       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        $INPUT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;input_pin( &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; );
        $input_timer;
    },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets an global var &lt;code&gt;$INPUT&lt;/code&gt;. That gets picked up by another timer, which takes the picture and uploads when &lt;code&gt;$INPUT&lt;/code&gt; is set. In a more sophisticated program, I&amp;rsquo;d probably have this activate another timer directly for sending a picture. For such a simple program though, I&amp;rsquo;m not too worried about it.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;img_stream()&lt;/code&gt; will return a filehandle for reading the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $rpi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;img_stream( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method takes a channel number for the camera (if you have one camera, you have one channel) and a desired MIME type. The &lt;code&gt;img_allowed_content_types()&lt;/code&gt; method will return a list of supported MIME types. On Device::WebIO::RaspberryPi, only &lt;code&gt;image/jpeg&lt;/code&gt; is currently supported.&lt;/p&gt;

&lt;p&gt;Once you have the filehandle, use &lt;code&gt;scp&lt;/code&gt; to upload it. A simple but crude method is to create a temporary file (with &lt;a href=&#34;https://metacpan.org/pod/File::Temp&#34;&gt;File::Temp&lt;/a&gt;) and then call &lt;code&gt;scp&lt;/code&gt; as an external program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Temp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tempdir&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tmp_fh, $tmp_filename) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tempfile();

&lt;span style=&#34;color:#75715e&#34;&gt;# Write to a temporary file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( read( $fh, $buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; ) ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $tmp_fh $buffer;
}
close $tmp_fh;
close $fh;

&lt;span style=&#34;color:#75715e&#34;&gt;# Upload to server using scp&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @scp_command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scp&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;, PRIVATE_KEY_FILE,
    $tmp_filename,
    SERVER_USERNAME &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; SERVER_HOST &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; SERVER_UPLOAD_PATH,
);
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Executing: @scp_command&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; DEBUG;
(system( @scp_command ) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not exec &amp;#39;@scp_command&amp;#39;: $!\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# Delete temp file&lt;/span&gt;
unlink $tmp_filename;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::SCP&#34;&gt;Net::SCP&lt;/a&gt; is another way of going about this, although that just wraps the external command like is done above.&lt;/p&gt;

&lt;p&gt;As an exercise to the reader, create a &lt;code&gt;tmpfs&lt;/code&gt; (RAM disk) on your Raspberry Pi and have the temp file written there. 10MB should be enough. &lt;code&gt;File::Temp::tempfile()&lt;/code&gt; can be passed a &lt;code&gt;DIR&lt;/code&gt; parameter to write a file there. This avoids writing to the SD card, which is both slow and tends to wear it out prematurely.&lt;/p&gt;

&lt;p&gt;The complete code is on &lt;a href=&#34;https://github.com/frezik/bodgery_cam&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

