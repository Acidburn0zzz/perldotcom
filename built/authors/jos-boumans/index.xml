<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jos Boumans on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/jos-boumans/</link>
    <description>Recent content in Jos Boumans on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Aug 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/jos-boumans/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Acme::Comment</title>
      <link>http://localhost:1313/pub/2002/08/13/comment.html/</link>
      <pubDate>Tue, 13 Aug 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/08/13/comment.html/</guid>
      <description>

&lt;p&gt;/*
        This is a Perl comment
    */&lt;/p&gt;

&lt;h3 id=&#34;commenting-in-perl&#34;&gt;Commenting in Perl&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;But what?&amp;rdquo;, I hear you think, &amp;ldquo;Perl doesn&amp;rsquo;t have multi-line comments!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s true. Perl doesn&amp;rsquo;t have multiline comments. But why is that? What is wrong with them? Mostly, it is because &lt;a href=&#34;http://www.Perl.com/pub/2001/05/03/wall.html#rfc%20005:%20multiline%20comments%20for%20Perl&#34;&gt;Larry doesn&amp;rsquo;t like them&lt;/a&gt;, and reasons that we can have the same effect with POD and Perl doesn&amp;rsquo;t need Yet Another Comment Marker.&lt;/p&gt;

&lt;p&gt;To illustrate, here we are at YAPC::America::North 2002, held in beautiful St. Louis. The weather is warm, the sun is shining, the sights are pretty and the beer is cold. In short, it&amp;rsquo;s all things we&amp;rsquo;ve come to love and expect of a Perl conference. It&amp;rsquo;s thursday, the conference is winding down and &lt;a href=&#34;http://www.Perlguy.net/images/kernel.jpg&#34;&gt;Siv&lt;/a&gt; is having a barbeque at his house. So a few of us end up in a car, headed to the barbeque. Uri Guttman is driving &amp;ndash; you know, the &lt;a href=&#34;http://stemsystems.com&#34;&gt;Stem guy&lt;/a&gt; &amp;ndash; with myself riding shotgun, and Ann and Larry in the backseat.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a friendly chatter and from one topic, it goes on to another. And at one point, Perl6 is being discussed. Ann is asking questions about the new operators, techniques and generally how shiny Perl6 will be. And there, Larry explains us new and wonderous things. Some already mentioned in &lt;a href=&#34;http://www.Perl.com/authors/larry-wall&#34;&gt;the apocalypses&lt;/a&gt;, some still ideas waiting to become firm concepts. And granted it does sound good, very good&amp;hellip; even if they are &lt;a href=&#34;http://www.Perl.com/pub/2001/05/03/wall.html#rfc%20009:%20highlander%20variable%20types&#34;&gt;taking away my beloved arrow operator&lt;/a&gt;. Then, a question comes to mind, and I ask: &amp;ldquo;So Larry, tell me, does Perl 6 have multiline comments?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;All I hear from the backseat is some grumbling and the 2 words: &amp;ldquo;use POD!&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;Needless to say, the tone was set, and I didn&amp;rsquo;t see nor speak to Larry all evening.&lt;/p&gt;

&lt;h3 id=&#34;multi-line-comments-emulation-in-perl&#34;&gt;Multi-line comments emulation in Perl&lt;/h3&gt;

&lt;p&gt;But I disagree. I think multiline comments are good.&lt;/p&gt;

&lt;p&gt;I hate tinkering with the # sign and the 80 character-per-line limit; I write a comment over a few lines and prefix each with a #. Which of course means inserting a newline.&lt;/p&gt;

&lt;p&gt;Then I need to add a few words in the comments. The line becomes longer than 80 characters. I need to add another newline. And add a new # sign. Remove the former # sign. And now nothing is aligned anymore and I need to redo it. &lt;strong&gt;*sigh*&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And apparently I&amp;rsquo;m not the only one who has had a gripe with this. It&amp;rsquo;s been a consistent request for change through out the development of Perl 5, and here&amp;rsquo;s a post on Perlmonks &lt;a href=&#34;http://Perlmonks.org/index.pl?node_id=100344&#34;&gt;discussing exactly this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is to find a way of doing multi-line comments in Perl, without breaking things. These are the four solutions they came up with to do multi-line comments, and why I think they are bad:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Use POD&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, you could use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=for comment
  Commented text
=cut
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s POD. POD is documentation for users of your program. Pod is not meant to display things like &amp;lsquo;here i change &lt;code&gt;$var&lt;/code&gt;&amp;rsquo; or &amp;lsquo;this part will only be executed if &lt;code&gt;$foo&lt;/code&gt; is true, which is determined by some_method()&amp;lsquo;; More over since the part you are commenting &lt;strong&gt;on&lt;/strong&gt; is not in POD format, it won&amp;rsquo;t be displayed in the first place. This will mean that the comments would be displayed in the POD, but the piece of code they refer to, will not be. Granted, most POD parsers are smart enough (or dumb, depending on how you look at it) that they see that the &lt;code&gt;=for&lt;/code&gt; is not something valid and ignore it, whilst the Perl interpreter will say &amp;lsquo;hey, it starts with &lt;code&gt;=&lt;/code&gt;, so it must be POD&amp;rsquo;; In the end, if you have the &amp;lsquo;proper&amp;rsquo; POD parser, you will get sort of what you want.&lt;/p&gt;

&lt;p&gt;But you are really circumventing the problem here, since you are relying on the way any given POD parser parses POD; some might &amp;lsquo;use warnings&amp;rsquo; and report an invalid &lt;code&gt;=for&lt;/code&gt; tag on some lines. Others will just display them.&lt;/p&gt;

&lt;p&gt;And what we wanted was a way that would allow multi-line comments without possibly breaking things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Any decent editor should allow you to put a # in front of n lines easily&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not an answer. We wanted multi-line comments, not an editor trick that allows me to do multiple single-line comments. That and I&amp;rsquo;d rather not get into the &amp;lsquo;vi is better than emacs&amp;rsquo; flamewar ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. use HERE-docs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&#39;#&#39;;
this is a
multiline
comment
#

&amp;lt;&amp;lt; &#39;*/&#39;;
this is a
multiline
comment
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, if you remembered to put a newline directly after the end marker. Well, more accurately: it parses correctly. It&amp;rsquo;s a here doc, that means that variables WILL get interpolated if you use a double quoted string.&lt;/p&gt;

&lt;p&gt;Meaning if you do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use strict;
&amp;lt;&amp;lt;&amp;quot;#&amp;quot;;
this is a
multiline
comment
about $foo
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will blow up right in your face with a compile time error. Also, when running under &amp;lsquo;use warnings&amp;rsquo; &amp;ndash;which you &lt;strong&gt;should&lt;/strong&gt;&amp;ndash; this will generate a &amp;lsquo;&lt;code&gt;Useless use of a constant in void context at foo.pl line X&lt;/code&gt;&amp;rsquo; warning.&lt;/p&gt;

&lt;p&gt;So not completely foolproof. Plus it looks ugly ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. use quote operators&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;q{
    some
    comment
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, a much more rigid solution and much more elegant. Does it work? Yes.&lt;/p&gt;

&lt;p&gt;Well, almost. It runs under strict. But I didn&amp;rsquo;t expect anything else, since the guy who posted this (&lt;a href=&#34;http://juerd.nl&#34;&gt;juerd&lt;/a&gt;) is an experienced Perl hacker and probably knows what he&amp;rsquo;s doing. &lt;strong&gt;But&lt;/strong&gt; it does cast warnings, just like the previous HERE-doc solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;Useless use of a constant in void context at foo.pl line X&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, your comment is supposed to be there to help other coders, not to be generating warnings. It&amp;rsquo;s a &lt;strong&gt;NO OP&lt;/strong&gt;! It shouldn&amp;rsquo;t make them think things are going wrong!&lt;/p&gt;

&lt;h3 id=&#34;true-multi-line-comments-acme-comment&#34;&gt;True multi-line comments: Acme::Comment&lt;/h3&gt;

&lt;p&gt;So is there an answer to this?&lt;/p&gt;

&lt;p&gt;Well, when Ann pointed this out, I began to think there must be some way to do multiline comments. I mean, many languages support it, why not Perl? We claim to make everything as easy as possible, yet the easy things aren&amp;rsquo;t possible? That struck me as odd.&lt;/p&gt;

&lt;p&gt;This is where the writing of &lt;code&gt;Acme::Comment&lt;/code&gt; began. First to provide a more usable solution to multi-line commenting than the four mentioned above, and secondly to just prove Perl doesn&amp;rsquo;t have to suffer from lack of multi-line comments.&lt;/p&gt;

&lt;p&gt;And this is how you use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Acme::Comment type =&amp;gt; &#39;C++&#39;;

/*
    This is a comment ...

    ... C++ style!
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s as simple as that. Now, to just do one language seemed a waste of this idea. Many languages have nice multiline comments or even single line comments. So, we decided to support a few more languages - in fact, &lt;a href=&#34;https://metacpan.org/pod/Acme::Comment&#34;&gt;44 in total right now&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below are 5 styles of doing multi- or single-line comments in a language that &lt;code&gt;Acme::Comment&lt;/code&gt; supports. So let&amp;rsquo;s play a game of &amp;lsquo;Name That Language&amp;rsquo;! (answers at the bottom)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This language uses &lt;code&gt;(*&lt;/code&gt; and &lt;code&gt;*)&lt;/code&gt; as delimiters for its multiline comments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt; is used to denote a single line comment in this programming language&lt;/li&gt;
&lt;li&gt;Simply the word &amp;lsquo;&lt;code&gt;comment&lt;/code&gt;&amp;rsquo; indicates a one line comment in this language&lt;/li&gt;
&lt;li&gt;A single line comment is indicated by preceding it with: &lt;code&gt;DO NOTE      THAT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\/\/&lt;/code&gt; is the way to do a one line comment in this language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contestants who answered all questions correct won a free subscription to the &lt;a href=&#34;http://localhost:1313/pub/2001/05/29/tides.html&#34;&gt;Perl beginners mailing list&lt;/a&gt; at &lt;a href=&#34;http://learn.perl.org&#34;&gt;http://learn.perl.org&lt;/a&gt;, where they can share their knowledge with others!&lt;/p&gt;

&lt;p&gt;Also, did you know, there were programming languages called: Hugo, Joy, Elastic, Clean and Parrot?&lt;/p&gt;

&lt;p&gt;You can of course also create your own commenting style if you&amp;rsquo;d so desire, by saying:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Acme::Comment start =&amp;gt; &#39;[[&#39;, end =&amp;gt; &#39;]]&#39;;

[[
    This is a comment ...
    ... made by me!
]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting the comment markers on their own line is always safest, since that reduces the possible ambiguity, but this is totally left up to the user. By default, you must put the comment markers on their own line (only whitespace may also be on the same line) and you may not end a comment marker on the line it begins.&lt;/p&gt;

&lt;p&gt;But if you were so inclined, you could also do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Acme::Comment type =&amp;gt; &#39;C++&#39;, one_line =&amp;gt; 1, own_line =&amp;gt; 0;

/* my comment */

/*  my
    other
    comment
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-technology-behind-this&#34;&gt;The technology behind this&lt;/h3&gt;

&lt;p&gt;So how does this all work anyway?&lt;/p&gt;

&lt;p&gt;Basically, &lt;code&gt;Acme::Comment&lt;/code&gt; is a source filter. This means that BEFORE the Perl interpreter gets to look at the source code, &lt;code&gt;Acme::Comment&lt;/code&gt; is given the chance to modify it.&lt;/p&gt;

&lt;p&gt;That means you can change &lt;strong&gt;any&lt;/strong&gt; part of a source file into anything else. In &lt;code&gt;Acme::Comment&lt;/code&gt;&amp;rsquo;s case, it removes the comments from the source, so they&amp;rsquo;ll never be there when trying to compile.&lt;/p&gt;

&lt;p&gt;This is not something to be scared of, since comments are optimized away during compile time anyway (the interpreter has no need for your comments, why keep them?).&lt;/p&gt;

&lt;p&gt;Now, source filtering is not something that&amp;rsquo;s terribly complicated and is one of the immensely powerful features of recent versions of Perl. It allows you to extend the language, simplify it it or even completely recast it.&lt;/p&gt;

&lt;p&gt;As an example, here are two other (famous) uses of source filters in Perl:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Lingua::Romana::Perligata&#34;&gt;Lingua::Romana::Perligata&lt;/a&gt;
Which allows you to program in latin&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Switch&#34;&gt;Switch&lt;/a&gt;
An extension to the Perl language, allowing you to use switch statements&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;Acme::Comment&lt;/code&gt; has a spiffy import routine that determines what it needs to do with the options you passed it, and one big subroutine that parses out comments (the largest part of the code is spent on determining nested comments).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Acme::Comment&lt;/code&gt; uses, indirectly, the original source filter module called &lt;code&gt;Filter::Util::Call&lt;/code&gt;. This module provides a Perl interface to source filtering. It is very powerful, but not as simple as it could be. It works roughly like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download, build, and install the &lt;code&gt;Filter::Util::Call&lt;/code&gt; module. (It comes standard with Perl 5.8.0)&lt;/li&gt;
&lt;li&gt;Then, set up a module that does a use &lt;code&gt;Filter::Util::Call&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Within that module, create an &lt;code&gt;import&lt;/code&gt; subroutine.&lt;/li&gt;
&lt;li&gt;Within the &lt;code&gt;import&lt;/code&gt; subroutine do a call to &lt;code&gt;filter_add&lt;/code&gt;, passing it a subroutine reference.&lt;/li&gt;
&lt;li&gt;Within the subroutine reference, call &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; to &amp;ldquo;prime&amp;rdquo; &lt;code&gt;$_&lt;/code&gt; with source code data from the source file that will use your module.&lt;/li&gt;
&lt;li&gt;Check the status value returned to see if any source code was actually read in.&lt;/li&gt;
&lt;li&gt;Then, process the contents of &lt;code&gt;$_&lt;/code&gt; to change the source code in the desired manner.&lt;/li&gt;
&lt;li&gt;Return the status value.&lt;/li&gt;
&lt;li&gt;If the act of unimporting your module (via a &lt;code&gt;no&lt;/code&gt;) should cause source code filtering to cease, create an &lt;code&gt;unimport&lt;/code&gt; subroutine, and have it call &lt;code&gt;filter_del&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make sure that the call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; in step 5 will not accidentally read past the &lt;code&gt;no&lt;/code&gt;. Effectively this limits source code filters to line-by-line operation, unless the &lt;code&gt;import&lt;/code&gt; subroutine does some fancy pre-pre-parsing of the source code it&amp;rsquo;s filtering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, that&amp;rsquo;s quite a few steps and things to think of when writing your source filter module. Of course, to make everyone&amp;rsquo;s life easier when source filtering, &lt;a href=&#34;http://conway.org&#34;&gt;Damian&lt;/a&gt; wrote a wrapper around the &lt;code&gt;Filter::Util::Call&lt;/code&gt; module, called &lt;code&gt;Filter::Simple&lt;/code&gt;. And although that limits the power you have somewhat, the interface is much nicer. Here&amp;rsquo;s what you need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download and install the &lt;code&gt;Filter::Simple&lt;/code&gt; module. (It comes standard with Perl 5.8.0)&lt;/li&gt;
&lt;li&gt;Set up a module that does a &lt;code&gt;use Filter::Simple&lt;/code&gt; and then calls &lt;code&gt;FILTER { ... }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Within the anonymous subroutine or block that is passed to &lt;code&gt;FILTER&lt;/code&gt;, process the contents of &lt;code&gt;$_&lt;/code&gt; to change the source code in the desired manner.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;There is just one caveat to be mentioned: Due to the nature of source filters, they will not work if you &lt;code&gt;eval&lt;/code&gt; the file the code is in.&lt;/p&gt;

&lt;h3 id=&#34;how-to-make-your-own-source-filters&#34;&gt;How to make your own source filters&lt;/h3&gt;

&lt;p&gt;Finally, I&amp;rsquo;ll discuss some examples on how to set up your own source filters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package My::Filter;
use Filter::Simple;

### remove all that pesky &#39;use strict&#39; and &#39;use warnings&#39; ###
FILTER {
        s|^\s*use strict.+$||g;
        s|^\s*use warnings.+$||g;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if a module uses your My::Filter module, all mentions of &amp;lsquo;use strict&amp;rsquo; and &amp;lsquo;use warnings&amp;rsquo; will be removed, allowing for much easier compiling and running!&lt;/p&gt;

&lt;p&gt;Of course, &lt;code&gt;Filter::Simple&lt;/code&gt; can do many more things. It can discriminate between different kinds of things it might find in source code. For example,&lt;/p&gt;

&lt;p&gt;It can filter based on whether a part of text is:
-   code (sections of source that are not quotelike, POD or __DATA__)
-   executable (sections of source that are not POD or __DATA__)
-   quotelike (sections that are Perl quotelikes as interpreted by Text::Balanced)
-   string (string literal parts of a Perl quotelike, like either half of tr///)
-   regex (sections of source that are regexes, like qr// and m//)
-   all (the default, behaves the same as the FILTER block)&lt;/p&gt;

&lt;p&gt;Also, you can apply the same filter multiple times, and it will be checked in order. For example, here&amp;rsquo;s a simple macro-preprocessor that is only applied within regexes, with a final debugging pass that prints the resulting source code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use Regexp::Common;
    FILTER_ONLY
        regex =&amp;gt; sub { s/!\[/[^/g },
        regex =&amp;gt; sub { s/%d/$RE{num}{int}/g },
        regex =&amp;gt; sub { s/%f/$RE{num}{real}/g },
        all   =&amp;gt; sub { print if $::DEBUG };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It understands the &amp;lsquo;no My::Filter&amp;rsquo; directive and does not filter that part of the source.&lt;/p&gt;

&lt;p&gt;So you can say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use My::Filter;

        { .. this code is filtered .. }

    no My::Filter

        { .. this code is not .. }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about source filtering, take a look at the &lt;a href=&#34;https://metacpan.org/pod/Filter::Simple&#34;&gt;&lt;code&gt;Filter::Simple&lt;/code&gt; manpage&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;answers-to-the-comment-game&#34;&gt;Answers to the comment game&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bliss&lt;/li&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Focal&lt;/li&gt;
&lt;li&gt;Intercal&lt;/li&gt;
&lt;li&gt;Pilot&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>CPAN PLUS</title>
      <link>http://localhost:1313/pub/2002/03/26/cpanplus.html/</link>
      <pubDate>Tue, 26 Mar 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/03/26/cpanplus.html/</guid>
      <description>

&lt;p&gt;Setting: A warm August day, somewhere in Amsterdam. In the bar of Yet Another Hotel. A large number of people are gathered. Judging by their attire, they&amp;rsquo;re not here for business &amp;ndash; or at least not the business of selling vacuum cleaners. They notice the sun and appreciate it, but it is the shining light of their laptops that captivates them.&lt;/p&gt;

&lt;p&gt;A man with long dark hair stands up &amp;ndash; he appears to be the leader of this unusal congregation. He&amp;rsquo;s wearing overalls and is barefoot.&lt;/p&gt;

&lt;p&gt;He begins to speak of something called &amp;ldquo;see pants,&amp;rdquo; which has the potential to change the world of the laptop-people. It would alter the way free software is distributed. It would receive a mark of quality; it would be tested and reviewed. And gosh darnit, it would be good.&lt;/p&gt;

&lt;p&gt;That man was Michael Schwern. His idea was CPANTS, the &amp;ldquo;CPAN Testing Service,&amp;rdquo; and the occasion was YAPC::Europe 2001. But CPANTS required work. Each of us set off with our own little part, trying to make the world a better place.&lt;/p&gt;

&lt;p&gt;Being a novice to the Perl community and eager for a challenging project to sink my teeth into, I offered to patch &lt;code&gt;CPAN.pm&lt;/code&gt; so that CPANTS could automatically build modules and test them. I imagined this would be a simple role.&lt;/p&gt;

&lt;p&gt;I started looking through the sources of &lt;code&gt;CPAN.pm&lt;/code&gt;. Although in my experience as a user, &lt;code&gt;CPAN.pm&lt;/code&gt; had always worked as advertised, as a developer I was confronted with its limitations: It was not very modular, allowing few additions to its functionality; it had a limited programming interface, being basically designed for interactive use.&lt;/p&gt;

&lt;p&gt;So there I stood, having made a commitment to ameliorate the CPAN-interface and lacking the code base to do so, with two choices: Complain or Fix. Since complaining wouldn&amp;rsquo;t give the desired result, the only remaining option was to start anew.&lt;/p&gt;

&lt;p&gt;Thus CPANPLUS was born. Its objective is simple: do what &lt;code&gt;CPAN.pm&lt;/code&gt; does, but do it better. We&amp;rsquo;d start with a clean code base designed to accommodate different types of use. But at the same time, this code should be a starting point, not the end point.&lt;/p&gt;

&lt;p&gt;So is CPANPLUS better? That&amp;rsquo;s for you to decide. The project began in October 2001, and late March 2002 marks the first official release on CPAN, timed to accompany this article.&lt;/p&gt;

&lt;h4 id=&#34;setting-up-cpanplus&#34;&gt;Setting Up CPANPLUS&lt;/h4&gt;

&lt;p&gt;Setting up CPANPLUS should be simple. It is installed like any other Perl module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    perl Makefile.PL
    make
    make test
    make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The setup of CPANPLUS happens with &amp;ldquo;perl Makefile.PL.&amp;rdquo; CPANPLUS will attempt to do two things at this point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;write an appropriate configuration for your system; and&lt;/li&gt;
&lt;li&gt;probe for modules CPANPLUS would like to have, but which are not required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, the configuration is not automatic, so you will be prompted to answer some questions about your system, although in many cases the default values are acceptable. CPANPLUS will then fetch the index files for the first time and ask you to choose your favorite CPAN mirrors. You can pick from a list, or specify your own.&lt;/p&gt;

&lt;p&gt;One question remains: Should we probe for missing modules? It is recommended that you do so, because CPANPLUS is faster and better with those modules installed. It&amp;rsquo;s up to you, however: CPANPLUS does not require any noncore modules to run.&lt;/p&gt;

&lt;p&gt;Continue with &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make test&lt;/code&gt;. All tests should pass &amp;ndash; if they don&amp;rsquo;t, something is wrong. A list of tested platforms is available at &lt;a href=&#34;http://cpanplus.sourceforge.net/faq.html&#34;&gt;the CPANPLUS FAQ site&lt;/a&gt;. Finally, run &amp;ldquo;make install&amp;rdquo; and CPANPLUS will be installed on your system!&lt;/p&gt;

&lt;h4 id=&#34;the-structure-of-cpanplus&#34;&gt;The Structure of CPANPLUS&lt;/h4&gt;

&lt;p&gt;As you may have noticed if you&amp;rsquo;ve looked at the sources, CPANPLUS is spread out over many modules. This is because of heavy subclassing: We believe that each specific task should have its own space in the CPANPLUS library. This modular build allows for extensions to the library and many plugins.&lt;/p&gt;

&lt;p&gt;There are two modules that are of particular interest to users of CPANPLUS. One is the user-interface &lt;code&gt;CPANPLUS::Shell&lt;/code&gt;, and the other is the programming-interface &lt;code&gt;CPANPLUS::Backend&lt;/code&gt;. Both modules will be explained in more depth later. Two other modules allow you to alter the behavior of the library at run time. These are &lt;code&gt;CPANPLUS::Error&lt;/code&gt;, which allows you to manipulate error messages to and from CPANPLUS; and &lt;code&gt;CPANPLUS::Configure&lt;/code&gt;, which allows you to change the configuration at runtime. They&amp;rsquo;re definately worth looking at if you are a developer using CPANPLUS.&lt;/p&gt;

&lt;h3 id=&#34;the-user-s-interface-shell&#34;&gt;The User&amp;rsquo;s Interface: &amp;lsquo;&lt;code&gt;Shell&lt;/code&gt;&amp;lsquo;&lt;/h3&gt;

&lt;p&gt;In truth, it isn&amp;rsquo;t fair to say that &amp;ldquo;Shell&amp;rdquo; is &lt;em&gt;the&lt;/em&gt; user&amp;rsquo;s interface; CPANPLUS is designed to work with any number of shells. In fact, if you want to write your own shell, then that&amp;rsquo;s possible. At the moment, only the default shell exists, but Jouke Visser is at work on a &lt;code&gt;wxPerl&lt;/code&gt; shell.&lt;/p&gt;

&lt;p&gt;You can specify which shell you wish to run in your configuration file. The default is &lt;code&gt;CPANPLUS::Shell::Default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two ways to invoke the shell. One is the familiar way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl -MCPANPLUS -eshell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is also an executable in your Perl bin directory:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cpanp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-M&lt;/code&gt; syntax also accepts a few flags that allow you to install modules from the command line. See the perldoc for CPANPLUS for details.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at using the default shell.&lt;/p&gt;

&lt;p&gt;One of its features is that each command works with a single letter. This could be called the &amp;ldquo;compact shell&amp;rdquo; as it is designed to be small, but still provide all the basic commands you need.&lt;/p&gt;

&lt;p&gt;Here is a short summary of the command options available, which can also be seen by typing &amp;ldquo;h&amp;rdquo; or &amp;ldquo;?&amp;rdquo; at the shell prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    a AUTHOR [ AUTHOR]    Search by author or authors
    m MODULE [ MODULE]    Search by module or modules
    i MODULE | NUMBER     Install a module by name or previous result
    d MODULE | NUMBER     Download a module to the current directory
    l MODULE [ MODULE]    Display detailed information about a module
    e DIR    [ DIR]       Add directories to your @INC
    f AUTHOR [ AUTHOR]    List all distributions by an author
    s OPTION VALUE        Set configuration options for this session
    p [ FILE]             Print the error stack (optionally to a file)
    h | ?                 Display help
    q                     Exit the shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s assume you want to see whether you can install a module in the &lt;code&gt;Acme::&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;First, you&amp;rsquo;d look for modules that match your criteria with a module search:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m ^acme::&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a search can take a regular expression. It&amp;rsquo;s a feature of the default shell that all searches are case-insensitive.&lt;/p&gt;

&lt;p&gt;This search will return a result like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    0001  Acme::Bleach          1.12    DCONWAY
    0002  Acme::Buffy           undef   LBROCARD
    0003  Acme::Colour          0.16    LBROCARD
    0004  Acme::ComeFrom        0.05    AUTRIJUS
    0005  Acme::DWIM            1.05    DCONWAY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first number is simply the ID for this search, which can be used as a shortcut for subsequent commands. The next column is the name of the module, followed by a version number. The last is the CPAN id of the author.&lt;/p&gt;

&lt;p&gt;Imagine you&amp;rsquo;d like to get more information about &lt;code&gt;Acme::Buffy&lt;/code&gt;. Simply type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; l Acme::Buffy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, to save effort, the ID from the most recent search can be used:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;l 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will give results like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Details for Acme::Buffy:
  Description               An encoding scheme for Buffy fans
  Development Stage         Released
  Interface Style           hybrid, object and function interfaces available
  Language Used             Perl-only, no compiler needed, should be platform independent
  Package                 Acme-Buffy-1.2.tar.gz
  Support Level             Developer
  Version                   undef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &amp;ldquo;Acme::Buffy&amp;rdquo; looks appealing, then you can install it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all you need to install modules with CPANPLUS.&lt;/p&gt;

&lt;h3 id=&#34;the-programmer-s-interface-backend&#34;&gt;The Programmer&amp;rsquo;s Interface: &amp;lsquo;&lt;code&gt;Backend&lt;/code&gt;&amp;lsquo;&lt;/h3&gt;

&lt;p&gt;CPANPLUS shells are built upon the CPANPLUS::Backend module. Backend provides generic functions for module management tasks. It is suitable for creating not only shells, but also autonomous programs.&lt;/p&gt;

&lt;p&gt;Rather than describe in detail all the available methods, which are documented in the CPANPLUS::Backend pod, I will give a few bits of sample code to show what you can do with Backend.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ### Install all modules in the POE:: namespace ###
    my $cb = new CPANPLUS::Backend;
    my $hr = $cb-&amp;gt;search( type =&amp;gt; &#39;module&#39;, list =&amp;gt; [qw|^POE$ ^POE::.*|] );
    my $rv = $cb-&amp;gt;install( modules =&amp;gt; [ keys %$hr ] );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variable &lt;code&gt;$rv&lt;/code&gt; is a hash reference where the keys are the names of the modules and the values are exit states. This allows you to check how the installation went for each module. You can also get an error object from &lt;code&gt;Backend&lt;/code&gt; with a complete history of what CPANPLUS did while installing these modules.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ### Fetch a certain version of LWP ###
    my $cb = new CPANPLUS::Backend;
    my $rv = $cb-&amp;gt;fetch( modules =&amp;gt; [&#39;/G/GA/GAAS/libwww-perl-5.62.tar.gz&#39;] );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, &lt;code&gt;$rv&lt;/code&gt; is a hash reference, where the key is the module you tried to fetch and the value is the location on your disk where it was stored. Some people might not care for the way searches are handled and would rather roll their own. &lt;code&gt;Backend&lt;/code&gt; allows you to take matters into your own hands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ### Do your own thing ###
    my $cb = new CPANPLUS::Backend;
    my $mt = $cb-&amp;gt;module_tree();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$mt&lt;/code&gt; now holds the complete module tree, which is the same tree CPANPLUS uses internally. For this hash reference, the keys are the names of modules, and values are &lt;code&gt;CPANPLUS::Internals::Module&lt;/code&gt; objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for my $name ( keys %$mt ) {
        if ($name =~ /^Acme/) {
            my $href = $mt-&amp;gt;{$name}-&amp;gt;modules();

            while ( my ($mod,$obj) = each %$href ) {
                print $obj-&amp;gt;install()
                    ? &amp;quot;$mod installed succesfully\n&amp;quot;
                    : &amp;quot;$mod installation failed!\n&amp;quot;;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This traverses the module tree, looking for module names that match the regular expression &lt;code&gt;&#39;/^Acme/&#39;&lt;/code&gt; and installing all modules by the same author.&lt;/p&gt;

&lt;p&gt;Why would you want to do this? We all have our reasons, and mine is that the &lt;code&gt;Acme::&lt;/code&gt; namespace is CPAN&amp;rsquo;s bleeding edge codebase. Authors who have modules there must be trustworthy!&lt;/p&gt;

&lt;h3 id=&#34;merits-of-the-interfaces&#34;&gt;Merits of the Interfaces&lt;/h3&gt;

&lt;p&gt;In addition to the modules I&amp;rsquo;ve mentioned, there are plenty more: CPANPLUS currently contains 17 modules. These modules are part of a three-tiered approach. Underneath everything sits &lt;code&gt;Internals&lt;/code&gt;, which performs the nitty-gritty work; &lt;code&gt;Backend&lt;/code&gt; rests on top of it; and finally &lt;code&gt;Shell&lt;/code&gt; provides a user interface.&lt;/p&gt;

&lt;p&gt;The logic beyond the layered structure is that everyone wants something different from CPANPLUS. Some people just want a working shell like &lt;code&gt;CPAN.pm&lt;/code&gt; provided. Others need a way to write applications that manage Perl installations. Still others dream of more elaborate plugins, like CPANTS or an automatic bug ticketing with RT &amp;ndash; something which is already planned.&lt;/p&gt;

&lt;p&gt;The division allows us to stay flexible. There is something for everyone in CPANPLUS &amp;ndash; and if it&amp;rsquo;s not there yet, it can probably be built upon the existing codebase.&lt;/p&gt;

&lt;h3 id=&#34;current-and-future-developments&#34;&gt;Current and Future Developments&lt;/h3&gt;

&lt;p&gt;CPANPLUS was just released, but we&amp;rsquo;re not resting. There&amp;rsquo;s still a lot of functionality we want to provide.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s high priority to create backward compatibility with the current &lt;code&gt;CPAN.pm&lt;/code&gt; so CPANPLUS can eventually be released as &lt;code&gt;CPAN.pm&lt;/code&gt;, possibly taking over its place in the core Perl distribution.&lt;/p&gt;

&lt;p&gt;Another development that was already mentioned is automatic bug reporting, which would give authors of modules feedback on the performance of their modules on varying platforms, under various configurations. Of course, there&amp;rsquo;s also CPANTS, the idea that sparked the entire CPANPLUS project. CPANTS is intended to provide automated testing of CPAN modules to make certain they meet minimal standards.&lt;/p&gt;

&lt;p&gt;We have thoughts about integrating with known package managers like &lt;code&gt;PPM&lt;/code&gt;, &lt;code&gt;RPM&lt;/code&gt; and &lt;code&gt;dpkg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also plan to develop more shells, both for the command-line and for the Windows and X environments.&lt;/p&gt;

&lt;p&gt;Naturally, we don&amp;rsquo;t want to stop there. There are a million possibilities with CPANPLUS, and hopefully they&amp;rsquo;ll all be explored and developed.&lt;/p&gt;

&lt;p&gt;If you have a good idea, then mail us your suggestion; or better yet, join as a developer and contribute!&lt;/p&gt;

&lt;h4 id=&#34;support-and-contributing&#34;&gt;Support and Contributing&lt;/h4&gt;

&lt;p&gt;If you have questions or suggestions, or want to join up as a developer, then send mail to: &lt;a href=&#34;mailto:cpanplus-info@lists.sourceforge.net&#34;&gt;cpanplus-info@lists.sourceforge.net&lt;/a&gt;. This is the general mailing list.&lt;/p&gt;

&lt;p&gt;Reports of bugs should be sent to: &lt;a href=&#34;mailto:cpanplus-bugs@lists.sourceforge.net&#34;&gt;cpanplus-bugs@lists.sourceforge.net&lt;/a&gt; Some of the developers are also regulars on the IRC channel #CP on magnet.&lt;/p&gt;

&lt;h3 id=&#34;where-to-get-cpanplus&#34;&gt;Where to Get CPANPLUS&lt;/h3&gt;

&lt;p&gt;There are two places where you can obtain CPANPLUS. The first is, of course, to check your local CPAN mirror (or look it up on &lt;a href=&#34;http://search.mcpan.org/&#34;&gt;search.mcpan.org&lt;/a&gt;). The latest stable release will always be there.&lt;/p&gt;

&lt;p&gt;If you are interested in development versions, then look at &lt;a href=&#34;http://github.com/jib/cpanplus-devel&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;more-information&#34;&gt;More Information&lt;/h4&gt;

&lt;p&gt;In addition to the documents that come with CPANPLUS, information is available on our &lt;a href=&#34;http://cpanplus.sourceforge.net&#34;&gt;Web site&lt;/a&gt;. All good things stem from there.&lt;/p&gt;

&lt;p&gt;On a side note, I will be giving speeches and tutorials on CPANPLUS at both &lt;a href=&#34;http://www.yapc.org/America/&#34;&gt;YAPC::America::North&lt;/a&gt; and &lt;a href=&#34;http://www.yapc.org/Europe&#34;&gt;YAPC::Europe&lt;/a&gt;, as well as &lt;a href=&#34;http://conferences.oreillynet.com/os2002/&#34;&gt;TPC&lt;/a&gt;. Come by and share your ideas!&lt;/p&gt;

&lt;h4 id=&#34;credits&#34;&gt;Credits&lt;/h4&gt;

&lt;p&gt;Of course, I couldn&amp;rsquo;t end without giving credit to the other developers. Although I started CPANPLUS, it would never have become what it is now without Joshua Boschert and Autrijus Tang. Ann Barcomb wrote all the documentation and Michael Schwern provided tests and just general good ideas. Thanks also goes to everyone who contributed with posts to the development and bug mailing lists.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;So here we are, eight months after that first magical gathering. One step closer to the goal. And one step closer to Yet Another Venue. And perhaps there, I&amp;rsquo;ll be standing up, talking about new things, or at least CPANPLUS.&lt;/p&gt;

&lt;p&gt;Hopefully I&amp;rsquo;ll be able to meet you there, in a circle of laptops, and we&amp;rsquo;ll continue to make our world a better place!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

