<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leon Brocard on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/leon-brocard/</link>
    <description>Recent content in Leon Brocard on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/leon-brocard/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This week on Perl 6 (10/7-14, 2002)</title>
      <link>http://localhost:1313/pub/2002/10/p6pdigest/20021016.html/</link>
      <pubDate>Wed, 16 Oct 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/10/p6pdigest/20021016.html/</guid>
      <description>

&lt;p&gt;This is yet another Perl 6 summary documenting what has happened over on the perl6-internals (where Parrot, the virtual machine that will run Perl 6 is discussed) and perl6-language (where Perl 6 language design is discussed) mailing lists. Piers is still on vacation (bungee jumping and motocrossing, no doubt), so I&amp;rsquo;m still your host this week. A fairly quiet week, so let&amp;rsquo;s start with the perl6-internals list as usual.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-pumpking-is-dead-long-live-the-pumpking-the-pumpking-is-dead-long-live-the-pumpking-span&#34;&gt;&lt;span id=&#34;the pumpking is dead, long live the pumpking!&#34;&gt;The Pumpking Is Dead, Long Live the Pumpking!&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;I am happy to report that we have a new Parrot pumpking. Jeff Goff has done great work in the past, but taking over is Steve Fink, who has been active in Parrot since near the beginning. He&amp;rsquo;s been extremely active this week, participating in almost all of the discussions and accepting patches left, right and center.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?as_umsgid=a05111b0eb9c788d82e71%40%5B63.120.19.221%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-variables-have-three-parts-variables-have-three-parts-span&#34;&gt;&lt;span id=&#34;variables have three parts&#34;&gt;Variables Have Three Parts&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski decreed that vtables were about to get more complicated. Variables and values used to be simple, but now we need to have three parts for each ``thing:&amp;rdquo; an optional name, a container and the contents of the container. There wasn&amp;rsquo;t any discussion, but I expect Dan will rejig vtables some more.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?as_umsgid=a05111b07b9c6cdf2da21@%5B63.120.19.221%5D&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-line-number-metadata-line-number-metadata-span&#34;&gt;&lt;span id=&#34;line number metadata&#34;&gt;Line Number Metadata&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Juergen Boemmels explained that the line number information given by the &lt;code&gt;setline&lt;/code&gt; opcode was quite verbose in the source and suggested adding line number metadata into Parrot bytecode. He proposed using the DWARF-2 debugging format (as used by the Mono project) so as not to reinvent the wheel. Dan promised some specs for moving this information out of band.&lt;/p&gt;

&lt;p&gt;This thread quickly got out of hand, with Nicholas Clark noticing that having column number information magically built in full debugging support for Befunge (a two-dimensional language) and Sean O&amp;rsquo;Rouke wishing to make ``source position&amp;rdquo; a vector, thus generalizing to scripting languages of any dimension.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?as_umsgid=m2bs66hzou.fsf@helium.physik.uni-kl.de&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-new-array-base-new-array-base-span&#34;&gt;&lt;span id=&#34;new array base&#34;&gt;New Array Base&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Leopold Toetsch continued in his attempt to confuse the summarizer with thousands of patches. He had rewritten the base routines from the array PMC as a working engine for list operations. It should be fast and simple, being based on chunks with fast index get and set. He committed this as list.c, and commented that most of the other array-style PMCs will start to use it as a base, and that it may replace the intlist PMC (and other typed array PMCs).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?as_umsgid=3DA1FBCB.3030001@toetsch.at&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-sprintf-parrot-sprintf-span&#34;&gt;&lt;span id=&#34;parrot_sprintf&#34;&gt;Parrot_sprintf&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Continuing last week&amp;rsquo;s ``sprintf in Parrot&amp;rdquo; mention, Brent Dax committed a huge patch completing the feature set of Parrot_sprintf, including width and precision for ints and strings, and modified many little bits of code to use it.&lt;/p&gt;

&lt;p&gt;Inspiration then struck him, or rather, vtables did. He&amp;rsquo;s rewritten it to use vtables, and split some of the code out of &lt;code&gt;misc.c&lt;/code&gt; and into the new &lt;code&gt;spf_render.c&lt;/code&gt; and &lt;code&gt;spf_vtable.c&lt;/code&gt;, which managed to turn into another huge patch. Looks like there is a portability issue on PPC systems with &lt;code&gt;va_copy&lt;/code&gt; however.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bugs6.perl.org/rt2/Ticket/Display.html?id=17791&#34;&gt;http://bugs6.perl.org/rt2/Ticket/Display.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bugs6.perl.org/rt2/Ticket/Display.html?id=17817&#34;&gt;http://bugs6.perl.org/rt2/Ticket/Display.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-nuke-dem-opcodes-nuke-dem-opcodes-span&#34;&gt;&lt;span id=&#34;nuke dem opcodes&#34;&gt;Nuke dem opcodes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Glover proposed a patch to get rid of the 2-element ``ne&amp;rdquo; opcode, which at a first glance should be optimizable at compiler time and hence should not be in Parrot &amp;ndash; barring complicated number precision issues. After a little discussion, Nicholas Clark pointed out that maybe we should do as C99 and state that constant folding will be done at compile time and at the precision of the compiling Parrot. Some of the opcodes where nuked, but it&amp;rsquo;s important to keep some opcodes just in case of overloading.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?as_umsgid=Pine.GSO.4.43.0210101155360.17996-100000@egg.amnh.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-getting-started-guide-getting-started-guide-span&#34;&gt;&lt;span id=&#34;getting started guide&#34;&gt;Getting Started Guide&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Cast your minds back, dear readers, if you will, to last week, when Erik Lechak proposed writing a getting-started guide. Well, he did just that, starting from the beginning with the configure system and then all the way out. There were many comments and suggestions, and it would be great to see this as POD and in the repository soon. Unfortunately, it is not in the archive.&lt;/p&gt;

&lt;h3 id=&#34;span-id-larry-explains-all-larry-explains-all-span&#34;&gt;&lt;span id=&#34;larry explains all&#34;&gt;Larry Explains All&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Perl6-language had very few new threads this week. Instead, there were mostly little updates to previous threads, which makes it somewhat tricky to summarize. However, Larry Wall was everywhere this week, giving us detailed insights into the Perl 6 language.&lt;/p&gt;

&lt;p&gt;Larry clarified that to remove ambiguity, variable properties will surrounded in brackets and have repetitions of ``is&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # instead of this:
  my $foo is rw cmp &amp;quot;&amp;quot;;
  # we would have:
  my ($foo is foo is bar, $bar is baz) = (1,2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, it looked like class attributes had changed name from &lt;code&gt;attr&lt;/code&gt; to &lt;code&gt;has&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There was also some talk on the module versioning system, which could be done with a slice-like notation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  use Acme[1.0];                  # like so
  use Acme[ (1;17..) | (2;0..) ]; # or perhaps
  use Acme[1;17..] | Acme[2;0..]; # or even
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m pretty sure he was joking, but Larry considered alternatives to the &lt;code&gt;...&lt;/code&gt;, which issues a warning (or maybe an exception) if you try to execute it. &lt;code&gt;???&lt;/code&gt; would never complain and &lt;code&gt;!!!&lt;/code&gt; would always throw an exception. Or the other way around. Or one is fatal. Or more likely, stick with &lt;code&gt;...&lt;/code&gt; and make its behaviour pragmatically controllable. &lt;code&gt;...&lt;/code&gt; is useful for abstract method declaration.&lt;/p&gt;

&lt;p&gt;There definitely wasn&amp;rsquo;t any talk about &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;|||&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl6-oo-cookbook-perl6-oo-cookbook-span&#34;&gt;&lt;span id=&#34;perl6 oo cookbook&#34;&gt;Perl6 OO Cookbook&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Lazzaro made good on his promise last week and produced a comprehensive Perl 6 OO cookbook describing ``stuff that hasn&amp;rsquo;t yet been designed, for a language that doesn&amp;rsquo;t yet exist.&amp;rdquo; It is a great piece of work and tries to examine real-life Perl 6 examples.&lt;/p&gt;

&lt;p&gt;There was some discussion of the recipes and the Michael announced that he wanted to work on an online system for adding new data and many other changes. Worried about Perl 6 OO? Then check this out:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cog.cognitivity.com/perl6/&#34;&gt;http://cog.cognitivity.com/perl6/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-in-brief-in-brief-span&#34;&gt;&lt;span id=&#34;in brief&#34;&gt;In Brief&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Some of the Parrot tests still don&amp;rsquo;t work under Win32.&lt;/p&gt;

&lt;p&gt;Some bugs in various bits of the Parrot JITs were found, and some fixed.&lt;/p&gt;

&lt;p&gt;Dakkar found a bug in the Perl 6 compiler that basically boiled down to checking for truth instead of definedness. Hopefully, Perl 6 will remove this particular problem for us ;-)&lt;/p&gt;

&lt;p&gt;We probably need more tinderboxes.&lt;/p&gt;

&lt;p&gt;Brent Dax promises to fit a pony into his next patch.&lt;/p&gt;

&lt;p&gt;Simon Glover added quite a few tests and pieces of documentation.&lt;/p&gt;

&lt;p&gt;C structs need to be padded for the more exotic architectures and compilers.&lt;/p&gt;

&lt;p&gt;There are still some DOD / GC bugs.&lt;/p&gt;

&lt;h3 id=&#34;span-id-who-s-who-in-perl6-who-s-who-in-perl6-span&#34;&gt;&lt;span id=&#34;who&#39;s who in perl6&#34;&gt;Who&amp;rsquo;s Who in Perl6&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Once more we get to meet people involved in the development of Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Who_are_you%3F&#34;&gt;Who are you?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Jérôme Quelin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_What_do_you_do_for%2Fwith_Perl_6%3F&#34;&gt;What do you do for/with Perl 6?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
I wrote a Befunge interpreter in Parrot assembly. Now I&amp;rsquo;m waiting for Parrot to handle multi-arrays and objects in order to implement the Befunge-98 specs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Where_are_you_coming_from%3F&#34;&gt;Where are you coming from?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Some Perl Golf rumors have said that I&amp;rsquo;m an alien coming from Mars.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_When_do_you_think_Perl_6_will_be_released%3F&#34;&gt;When do you think Perl 6 will be released?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Some day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Why_are_you_doing_this%3F&#34;&gt;Why are you doing this?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
In order to have a chance to understand Perl 6 sources. And because Befunge is a fun language, that deserves to be supported by Parrot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_You_have_5_words%2E_Describe_yourself%2E&#34;&gt;You have five words. Describe yourself.&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Perl Golf and Befunge addicted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_Do_you_have_anything_to_declare%3F&#34;&gt;Do you have anything to declare?&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;
Befunge rocks.&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-acknowledgements-span&#34;&gt;&lt;span id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This summary was brought to you with slightly less distraction from Super Mario Sunshine and more recognition of the sterling work that Piers does every week.&lt;/p&gt;

&lt;p&gt;As Piers says: One more, if you think this summary has value send money to the Perl Foundation &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;http://donate.perl-foundation.org&lt;/a&gt; and feed back and/or T?iBooks to me, &lt;em&gt;&lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;pdcawley@bofh.org.uk&lt;/a&gt;&lt;/em&gt;. As usual, the fee paid for publication of this summary on perl.com has been donated directly to the Perl Foundation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6 (9/30 - 10/6, 2002)</title>
      <link>http://localhost:1313/pub/2002/10/p6pdigest/20021006.html/</link>
      <pubDate>Sun, 06 Oct 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/10/p6pdigest/20021006.html/</guid>
      <description>

&lt;p&gt;This is yet another Perl 6 summary, documenting what has happened over on the perl6-internals (where Parrot, the virtual machine that will run Perl 6, is discussed) and perl6-language (where Perl 6 language design is discussed) mailing lists. Piers is off on holiday (snowboarding and parachuting, no doubt), so I will be your host for the next two weeks. A particularly average week, so let&amp;rsquo;s start off with the perl6-internals list as usual.&lt;/p&gt;

&lt;h3 id=&#34;span-id-getting-started-guide-getting-started-guide-span&#34;&gt;&lt;span id=&#34;getting_started_guide&#34;&gt;Getting started guide&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Erik Lechak offered to help write a getting started guide to Parrot - he thought (correctly) that there may be &amp;ldquo;a pressing need for a document helping newbie developers figure out how to get started&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Unfortunately, Erik isn&amp;rsquo;t a big fan of POD and attempted to code up a better replacement. While POD may not be perfect, an awful lot of Parrot developers are also Perl developers and POD is simple and good enough for Parrot for now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=3D96698C.4080602%40the-small-print.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-debugger-debugged-debugger-debugged-span&#34;&gt;&lt;span id=&#34;debugger_debugged&#34;&gt;Debugger debugged&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Juergen Boemmels noticed that hitting the Enter key in the Parrot debugger (pdb) caused a segfault and that this wasn&amp;rsquo;t quite ideal behaviour. He provided a patch which ignored empty lines, and after a nudge from Aldo Calpini provided another patch which followed the suggested behaviour in &lt;code&gt;docs/debugger.pod&lt;/code&gt;, instead repeating the last command entered.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=rt-17683-38900.14.1279881352507%40bugs6.perl.org&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-patch-master-patch-master-span&#34;&gt;&lt;span id=&#34;patch_master&#34;&gt;Patch Master&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The main patcher these recent weeks has been Leopold Toetsch, and he kept it up this week as well. He provided patches to stop Parrot permanently allocating increasing amounts of memory, fix a parser error in imcc, add stats to life.p6 and more. In fact, so many patches that I have a feeling he&amp;rsquo;ll get CVS write access soon ;-)&lt;/p&gt;

&lt;h3 id=&#34;span-id-new-allocator-new-allocator-span&#34;&gt;&lt;span id=&#34;new_allocator&#34;&gt;New allocator&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Leopold had a play with plugging in the Doug Lea memory allocator, providing a patch to configure in support for the current Parrot malloc, the Doug Lea malloc, or ptmalloc in libc. He also attempted to plug in Perl 5&amp;rsquo;s malloc and found similar speed results. Later on, he created a document to explain memory internals, continuing the recent trend for more docs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gee.cs.oswego.edu/dl/html/malloc.html&#34;&gt;http://gee.cs.oswego.edu/dl/html/malloc.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rt.perl.org/rt2/Ticket/Display.html?id=17731&#34;&gt;http://rt.perl.org/rt2/Ticket/Display.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rt.perl.org/rt2/Ticket/Display.html?id=17766&#34;&gt;http://rt.perl.org/rt2/Ticket/Display.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-patches-patches-everywhere-patches-patches-everywhere-span&#34;&gt;&lt;span id=&#34;patches,_patches_everywhere&#34;&gt;Patches, patches everywhere&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There have been a lot of pending patches recently, and Robert Spier prodded us about them and hopes to have an automated weekly email nudge too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.parrotcode.org/openpatches&#34;&gt;http://www.parrotcode.org/openpatches&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-library-name-collisions-library-name-collisions-span&#34;&gt;&lt;span id=&#34;library_name_collisions&#34;&gt;Library name collisions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Steve Fink reported a problem with library name collisions. For example, having &lt;code&gt;intlist.c&lt;/code&gt; as well as &lt;code&gt;classes/intlist.c&lt;/code&gt; and &lt;code&gt;key.c&lt;/code&gt; as well as &lt;code&gt;classes/key.c&lt;/code&gt;. Dan proposed a naming convention where classes start with a CL_prefix, encodings with an EN_ prefix and character set stuff with a CS_prefix, although it looks like a simpler solution may be taken.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20020929230154.GF2030%40foxglove.digital-integrity.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-core-ops-ate-my-miniscule-ram-core-ops-ate-my-miniscule-ram-span&#34;&gt;&lt;span id=&#34;core.ops_ate_my_(miniscule)_ram&#34;&gt;core.ops ate my (miniscule) RAM&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;David Chan is using an itty bitty box (Cyrix with 32 MB of RAM) and found that compiling Parrot failed due to lack of memory. Nicholas Clark reminded us that you can disable the (faster, but needs more memory to compile) computed goto core at configure time using &lt;code&gt;./Configure.pl --cgoto=0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20021002070022.GA7669%40virtuosi.fsnet.co.uk&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-file-list-parrot-file-list-span&#34;&gt;&lt;span id=&#34;parrot_file_list&#34;&gt;Parrot file list&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There are a great number of source files in the Parrot distribution and Mark Sparshatt gathered ideas for how to have a file list which explained what each actually does.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=E17xRrm-0007H8-00.2002-10-04-13-47-39%40tmailb1.svr.pol.co.uk&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-interfaces-interfaces-span&#34;&gt;&lt;span id=&#34;interfaces&#34;&gt;Interfaces&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Over in perl6-language, Michael Schwern was asked at a recent Java conference whether Perl 6 will support interfaces. He tried to describe a likely interface and raised some problems with interfaces. This spawned a huge thread about OO, interfaces, and some of the weirder OO languages. Do we enforce strict interfaces? Are some methods allowed to be optional?&lt;/p&gt;

&lt;p&gt;One of the more interesting ideas would be to move from just using prototypes to using Design-By-Contract features: pre- and post-conditions and invariants. Dave Whipp seemed a big fan of the Eiffel model, where it is possible to rename methods in a derived class. There was lots of scary Perl 6 pseudocode including cars, MP3 players, birds, and wings.&lt;/p&gt;

&lt;p&gt;A little later, Schwern came back and worried about enforcing interfaces on subclasses. One interesting approach is to follow Eiffel and only allow subclasses to weaken the preconditions or strengthen the postconditions of the parent. Weakening involves adding ORs, strengthening ANDs. (More Foo and Bar pseudocode. Oh, and apparently Schwern only has 2 toes).&lt;/p&gt;

&lt;p&gt;There was a short sidetrack on having multiple versions of modules running at the same time, and Allison Randal informed us that it looks like the full name of classes will include their version number, ie &lt;code&gt;Acme::N-1.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In fact, a lot of the discussion is a bit in the air: as Dan Sugalski pointed out, things like object attributes aren&amp;rsquo;t until Apocalypse 12 and it may be a little early to worry about such things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20020930001137.GN3858%40ool-18b93024.dyn.optonline.net&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20021003184638.GN3858%40ool-18b93024.dyn.optonline.net&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-subjectoriented-programming-subject-oriented-programming-span&#34;&gt;&lt;span id=&#34;subjectoriented_programming&#34;&gt;Subject-Oriented Programming&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Schwern also asked about subject-oriented programming, which looked interesting but which he couldn&amp;rsquo;t quite understand. Andy Wardley explained that all these &amp;ldquo;advanced&amp;rdquo; programming techniques are all attempting a clear separation of concerns, and went on to describe and give pointers to more info.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20021001032202.GX3858%40ool-18b93024.dyn.optonline.net&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-matching-matching-span&#34;&gt;&lt;span id=&#34;matching&#34;&gt;Matching&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Someone mysteriously known only as &amp;ldquo;Ed&amp;rdquo; &lt;em&gt;[ Ed Pescho - Ed.]&lt;/em&gt; asked what the favoured syntax would be to match negative multi-byte strings in Perl 6. It wasn&amp;rsquo;t entirely clear what the question was, but one thing is sure: the Perl 6 pattern matching engine will have a lot of scope for optimisation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/groups?threadm=20021001122724.A18606%40rama.comp.pge.com&#34;&gt;http://groups.google.com/groups&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;span-id-in-brief-in-brief-span&#34;&gt;&lt;span id=&#34;in_brief&#34;&gt;In brief&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Tim Bunce asked if there were any good tools for static code analysis around. None, apparently.&lt;/p&gt;

&lt;p&gt;Brent Dax reminded Andy Dougherty and others about &lt;code&gt;/Parrot_v?sn?printf(_[sc])?/&lt;/code&gt; in &lt;code&gt;misc.c&lt;/code&gt; - a reimplementation of the printf functions for portability reasons.&lt;/p&gt;

&lt;p&gt;Simon Glover added tests for the assign opcode.&lt;/p&gt;

&lt;p&gt;It looks like Michael Lazzaro will be writing a list of issues with OO as well as a tutorial so that everyone is clear what exactly we are talking about.&lt;/p&gt;

&lt;p&gt;Larry cringes every time someone says &amp;ldquo;Parens construct lists in Perl 6&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-who-s-who-in-perl6-who-s-who-in-perl6-span&#34;&gt;&lt;span id=&#34;who&#39;s_who_in_perl6&#34;&gt;Who&amp;rsquo;s Who in Perl6&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Once more we get to meet people involved in the development of Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_who_are_you%3f&#34;&gt;Who are you?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simon Cozens&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_what_do_you_do_for%2fwith_perl_6%3f&#34;&gt;What do you do for/with Perl 6?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was the Parrot pumpking up until 0.0.4, and wrote much of the PMC and string infrastructure. I then escaped to get a life, play more Go and be a nicer person.&lt;/p&gt;

&lt;p&gt;As perl.com editor and occasional author, I pop in from time to time just to check on the correctness of things I&amp;rsquo;m writing about and make sure Parrot compiles on at least one platform I possess so I can test code for articles. Rumours of my return to development have been greatly exaggerated. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_where_are_you_coming_from%3f&#34;&gt;Where are you coming from?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not, I&amp;rsquo;m already here!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_when_do_you_think_perl_6_will_be_released%3f&#34;&gt;When do you think Perl 6 will be released?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think Perl 6 - as we understand it - ever will be released. How&amp;rsquo;s that for a Delphic pronouncement?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_why_are_you_doing_this%3f&#34;&gt;Why are you doing this?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because I like food.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_you_have_5_words%2e_describe_yourself%2e&#34;&gt;You have 5 words. Describe yourself.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Less vehemently obnoxious than before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span id=&#34;item_do_you_have_anything_to_declare%3f&#34;&gt;Do you have anything to declare?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Watch out for some surprises in the near future.&lt;/p&gt;

&lt;h3 id=&#34;span-id-acknowledgements-acknowledgements-span&#34;&gt;&lt;span id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This summary was brought to you with much distraction indeed from Super Mario Sunshine. Thanks to Kate Pugh and #london.pm for proofreading.&lt;/p&gt;

&lt;p&gt;As Piers says: One more, if you think this summary has value send money to the Perl Foundation &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;http://donate.perl-foundation.org&lt;/a&gt; and feed back and/or T?iBooks to me, &lt;em&gt;&lt;a href=&#34;mailto:pdcawley@bofh.org.uk&#34;&gt;pdcawley@bofh.org.uk&lt;/a&gt;&lt;/em&gt;. As usual, the fee paid for publication of this summary on perl.com has been donated directly to the Perl Foundation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This week on Perl 6 (week ending 2002-07-21)</title>
      <link>http://localhost:1313/pub/2002/07/p6pdigest/20020723.html/</link>
      <pubDate>Tue, 23 Jul 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/07/p6pdigest/20020723.html/</guid>
      <description>

&lt;p&gt;Another week, another Perl 6 summary. Cunningly this week I have taken over the summary from Piers in order to make it easier for me to namecheck myself. It&amp;rsquo;s been a good week too, with more happening in perl6-internals than perl6-language. So that&amp;rsquo;s where I&amp;rsquo;ll start&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;span-id-parrot-0-0-7-parrot-0-0-7-span&#34;&gt;&lt;span id=&#34;parrot_0.0.7&#34;&gt;Parrot 0.0.7&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The big news for this week is that DrForr has released Parrot 0.0.7 to the world (strange that lots of open source projects are releasing code just before the O&amp;rsquo;Reilly Open Source conference&amp;hellip;). This release contains a Perl 6 grammar (with small, partial compiler!), functional subroutine, coroutine and continuation PMCs, global variables, an intermediate code compiler (imcc), a pure-Perl assembler and working garbage collection. &amp;ldquo;The name is Parrot. Percy Parrot.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg11090.html&#34;&gt;http://archive.develooper.com/perl6-internals@perl.org/msg11090.html&lt;/a&gt;
&lt;a href=&#34;http://www.cpan.org/modules/by-authors/id/J/JG/JGOFF/parrot-0.0.7.tgz&#34;&gt;http://www.cpan.org/modules/by-authors/id/J/JG/JGOFF/parrot-0_0_7.tgz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the really cool Perl 6 compiler needs at least Perl 5.6. Oh, and check out imcc if you haven&amp;rsquo;t looked at it yet.&lt;/p&gt;

&lt;h2 id=&#34;span-id-retro-perl-retro-perl-span&#34;&gt;&lt;span id=&#34;retro_perl&#34;&gt;Retro Perl&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Nicholas Clark stated that &amp;ldquo;In October 2000 I believed that 5.005 maintenance *is* important for the acceptance of perl6, and I still do now&amp;rdquo;. A first patch to the preliminary Perl 6 compiler was sent by Leopold Toetsch to make it work on 5.005_03 and seeing as Chip Salzenberg has restarted work on a new maintenance release of Perl 5.005 it&amp;rsquo;s probably good for various parts of Parrot to run on retro perls. Shouldn&amp;rsquo;t be a major problem.&lt;/p&gt;

&lt;h2 id=&#34;span-id-parrot-docs-parrot-docs-span&#34;&gt;&lt;span id=&#34;parrot_docs&#34;&gt;Parrot docs&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;One of the big pushes last week was for more documentation inside Parrot. Writing documentation is always a problem for an open source project and it hit the wall last week. The good news is that lots of new documentation has been added to Parrot.&lt;/p&gt;

&lt;p&gt;There was some discussion on the nature of documentation. The result is that inline C documention should write up API details and that longer discussions (say, the choice of algorithms, how to avoid overflows in unsigned arithmetic, the pros and cons of differing hash algorithms) would end up as .dev files inside the docs/dev/ directory, much as PDD07 &amp;ldquo;Conventions and Guidelines for Perl Source Code&amp;rdquo; says. A few more documentation patches followed.&lt;/p&gt;

&lt;p&gt;Recently the mailing list and IRC channel have been quite busy and it seems like the new push for more documentation has attracted new people. Bonus!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg11080.html&#34;&gt;http://archive.develooper.com/perl6-internals@perl.org/msg11080.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;span-id-manifestations-manifestations-span&#34;&gt;&lt;span id=&#34;manifestations&#34;&gt;MANIFESTations&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;The Parrot MANIFEST file tends not to be kept up-to-date with recent additions. Andy Dougherty produced a patch to do this. Nicholas Clark asked: &amp;ldquo;Is CVS flexible enough to let us run a manifest check on each commit and generate warnings that get sent somewhere useful if it fails?&amp;rdquo;. Robert Spier answered that it could and with any luck he&amp;rsquo;ll get it in soon&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;span-id-recall-recall-span&#34;&gt;&lt;span id=&#34;recall&#34;&gt;RECALL&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Tanton Gibbs posted a patch to clean up a problem with our Copy on Write strategy. He kindly explained it for me: &amp;ldquo;The basic problem is that in perlint.pmc we have something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  void set_string( PMC* value ) {
    CHANGE_TYPE( SELF, PerlString );
    SELF-&amp;gt;data = value-&amp;gt;data
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words implement a COW strategy after being changed into a PerlString. However, in perlstring.pmc the following is performed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  void set_string( PMC* value ) {
    SELF-&amp;gt;data = string_copy( INTERP, value-&amp;gt;data );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The RECALL command automates that so that set_string now looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  void set_string( PMC* value ) {
    CHANGE_TYPE( pmc, PerlString );
    RECALL;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Tanton for explaining.&lt;/p&gt;

&lt;h2 id=&#34;span-id-internals-misc-internals-misc-span&#34;&gt;&lt;span id=&#34;internals_misc&#34;&gt;Internals misc&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There were also lots of other small patches and discussions. It looks like the push for this week is to make it easier to add new PMCs to Parrot.&lt;/p&gt;

&lt;h2 id=&#34;span-id-meanwhile-in-perl6language-meanwhile-in-perl6-language-span&#34;&gt;&lt;span id=&#34;meanwhile,_in_perl6language&#34;&gt;Meanwhile, in perl6-language&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;It was a quiet week in the perl6-language list, which is probably a good thing as thinking too much about hyper operators makes my head hurt.&lt;/p&gt;

&lt;h2 id=&#34;span-id-hyper-operators-hyper-operators-span&#34;&gt;&lt;span id=&#34;hyper_operators&#34;&gt;Hyper operators&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;There was some discussion on hyper operators this week. It didn&amp;rsquo;t go anywhere in particular, but discussed lots of syntax. Objections such as &amp;ldquo;this code looks ugly!&amp;rdquo; came up regularly when talking about code such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @solution =  (^-@b + sqrt(@b^**2 ^+ 4^*@a^*@c) ) ^/ (2^*@a);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke Palmer pointed out that it might be better expressed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for @a; @b; @c; @s is rw -&amp;gt;
    $a; $b; $c; $s {
      $s = (-$b + sqrt($b**2 - 4*$a*$c)) / (2*$a)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karl Glazebrook explained that PDL keeps everything as objects and does hyper operator magic without additional syntax. So Perl 6 &amp;ldquo;@y = $a ^* @x ^+ @b&amp;rdquo; happens in PDL with the clearer &amp;ldquo;$y = $a * $x + $b&amp;rdquo;. Isn&amp;rsquo;t PDL shiny?&lt;/p&gt;

&lt;h1 id=&#34;span-id-whitespace-whitespace-span&#34;&gt;&lt;span id=&#34;whitespace&#34;&gt;Whitespace?&lt;/span&gt;&lt;/h1&gt;

&lt;p&gt;Brent Dax noticed that there might be a problem with the regular expression modifier &amp;ldquo;:w&amp;rdquo;. The words modifier, according to Apocalypse 5 , &amp;ldquo;causes an implicit match of whitespace wherever there&amp;rsquo;s literal whitespace in a pattern&amp;rdquo;. He asked what the following expand to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  m:w/foo [~|bar]/
  m:w/[~|bar] foo/
  m:w/[~|bar] [^|baz]/
  m:w/@foo @bar/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke Palmer expanded that &amp;ldquo;In other words, it replaces every sequence of actual whitespace in the pattern with a \s+ (between two identifiers) or a \s* (between anything else)&amp;ldquo;. Thus, the first would expand to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  m/ foo \s* [~ | bar] /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it&amp;rsquo;s not easy to represent, as the later cases point out. He continues: &amp;ldquo;Perhaps :w wouldn&amp;rsquo;t transform the rexex, but keep &amp;lsquo;markers&amp;rsquo; on where there was whitespace in the regex&amp;rdquo;. Nevertheless, it&amp;rsquo;s a very useful feature.&lt;/p&gt;

&lt;h2 id=&#34;span-id-acknowledgements-acknowledgements-span&#34;&gt;&lt;span id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;This summary was brought to you from the O&amp;rsquo;Reilly Open Source conference and with the music from the intro to Buffy the Vampire Slayer.&lt;/p&gt;

&lt;p&gt;As Piers says: Once again, if you liked this, then give money to YAS, if you didn&amp;rsquo;t like it, well, then you can still give them money; maybe they&amp;rsquo;ll use it to hire a better writer. Or maybe you could write a competing summary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/06/25</title>
      <link>http://localhost:1313/pub/2001/06/p5pdigest/20010625.html/</link>
      <pubDate>Mon, 25 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/p5pdigest/20010625.html/</guid>
      <description>

&lt;h2 id=&#34;this-week-on-perl5-porters-18-june-25-june-2001&#34;&gt;This week on perl5-porters (18 June&amp;ndash;25 June 2001)&lt;/h2&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl5-porters-digest-subscribe@netthink.co.uk&#34;&gt;&lt;code&gt;perl5-porters-digest-subscribe@netthink.co.uk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;perl-thisweek-YYYYMM@simon-cozens.org&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month. Changes and additions to the &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html&#34;&gt;perl5-porters biographies&lt;/a&gt; are particularly welcome.&lt;/p&gt;

&lt;p&gt;This was a fairly busy week, seeing just under 500 messages.&lt;/p&gt;

&lt;h3 id=&#34;regular-expressions&#34;&gt;Regular expressions&lt;/h3&gt;

&lt;p&gt;There were a couple of regular expression threads this week.&lt;/p&gt;

&lt;p&gt;Heikki Lehvaslaiho found a bug with some end-anchored regular expressions when using &lt;code&gt;study&lt;/code&gt;, which involved the regular rexpression engine looping. The problem was quickly found and patched by Hugo.&lt;/p&gt;

&lt;p&gt;Jeff Pinyan almost presented a patch for regex negation, before being kindly asked not to forget Unicode.&lt;/p&gt;

&lt;p&gt;Artur Bergman and Richard Soderberg started to move regular expressions from the optree to the pad so that they can be redefined under &lt;code&gt;USEITHREADS&lt;/code&gt;. They also patched perl to allow &lt;code&gt;/o&lt;/code&gt; to work under ithreads.&lt;/p&gt;

&lt;p&gt;Jeffrey Friedl asked about applying regular expressions backwards (from right to left):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $text =~ s/^\s+//;  # strip leading whitespace
    $text =~ s/^\s+//r; # strip trailing whitespace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and Jeff Pinyan plugged his &lt;a href=&#34;http://localhost:1313/pub/2001/05/01/expressions.html&#34;&gt;sexeger research&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;5-7-2-in-sight&#34;&gt;5.7.2 in sight&lt;/h3&gt;

&lt;p&gt;Jarkko informed us that the latest snapshot, perl@10825, would be the last snapshot before the next Perl development release of 5.7.2. Snapshots after that would be release candidates, leading on to the next Perl stable release of 5.8.0:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So now it&amp;rsquo;s definitely time to remind me of any patches that I might have missed. If you have a bug fixing going on please inform your loved ones that you&amp;rsquo;ll camp at the office / by the computer for coming few weeks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rsync-able-snapshots&#34;&gt;rsync-able snapshots&lt;/h3&gt;

&lt;p&gt;Jarkko also announced availability of a way to rsync his development snapshots, staying away from the bleading-edge part of bleadperl, so that you don&amp;rsquo;t report a bug which is in the midst of getting patched (or created), available via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir -p perl;cd perl &amp;amp;&amp;amp; rsync -av ftp.funet.fi::perlsnap .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;overloading-s-printf&#34;&gt;overloading s?printf&lt;/h3&gt;

&lt;p&gt;Jarkko Hietaniemi asked for opinions on a way to use formatted printing for objects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, it would be nice to able to use, say, %Z, to format both the real and imaginary part of Math::Complex objects at the same time, say %7.3Z &amp;ndash;or even tamper with %f %g %e so that they would recognize their arguments being Math::Complexes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some options are: using overload to pass formats via coderefs, or inventing a whole new mini language.&lt;/p&gt;

&lt;h3 id=&#34;various&#34;&gt;Various&lt;/h3&gt;

&lt;p&gt;Nicholas Clark reported a problem with 64 bit int support under x86 FreeBSD and with gcc&amp;rsquo;s optimiser enabled. This was tracked down to a patch (10417), but no solution was offered other than patch retraction.&lt;/p&gt;

&lt;p&gt;Mike Guy commented that &lt;code&gt;not_a_number&lt;/code&gt; in &lt;code&gt;sv.c&lt;/code&gt; didn&amp;rsquo;t grok UTF8. This got added to the UTF8 TODO list, as a request for a function &lt;code&gt;sv_printify&lt;/code&gt; for displaying PVs with control characters, embedded nulls, and Unicode.&lt;/p&gt;

&lt;p&gt;Spider Boardman was awarded the nightship of the Wielder of the Holy Cast, for fixing casting warnings under HP-UX cc.&lt;/p&gt;

&lt;p&gt;There was some talk about compiling Perl with the new, pickier &lt;code&gt;-Wall&lt;/code&gt; that comes with the new gcc 3.0.&lt;/p&gt;

&lt;p&gt;Artur Bergman asked an interesting problem about what to do with the seed for rand when threads are involved. Do we want &lt;code&gt;srand()&lt;/code&gt; and &lt;code&gt;rand()&lt;/code&gt; to be performed on a single global seen variable or a &amp;ldquo;per-thread&amp;rdquo; seed variable? Jarkko suggested that maybe it wouldn&amp;rsquo;t be such a bad idea to have our own PRNG implementation.&lt;/p&gt;

&lt;p&gt;Nikola Knezevic asked about &lt;code&gt;configure.com&lt;/code&gt; not working under DOS, which is in fact the configure script for VMS. It now sports a comment reflecting this.&lt;/p&gt;

&lt;p&gt;Abhijit Menon-Sen&amp;rsquo;s macro cleanups last week were backed out for performance reasons, but with the macros left in as comments to aid grepping.&lt;/p&gt;

&lt;p&gt;Doug MacEachern, amongst other sterling patches, offered a patch to make &lt;code&gt;make Foo.s&lt;/code&gt; add -S to cc flags, which outputs the assembly code to &lt;code&gt;Foo.s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Laszlo Molnar provided some patched to get bleadperl working under djgpp.&lt;/p&gt;

&lt;p&gt;Abhijit Menon-Sen patch a problem spoted by Harmon S. Nine about &lt;code&gt;=&amp;gt;&lt;/code&gt; turning ANY bareword before it into a quoted string. The documentation is somewhat vague about what exactly is quoted by &lt;code&gt;=&amp;gt;&lt;/code&gt; but this is a change in behaviour since 5.6.0. The patch reverted the behaviour so that function calls that are used as hash key-values in the construction of a hash are still called.&lt;/p&gt;

&lt;p&gt;Spider Boardman reported that &lt;code&gt;PERLIO=unix&lt;/code&gt; broke many tests and offered some patches. Nick Ing-Simmons countered that it always has, as it makes the &amp;ldquo;stream&amp;rdquo; completely unbuffered and that isn&amp;rsquo;t really very perlish. However, he fixed a reported bug in &lt;code&gt;PerlIOBase_unread&lt;/code&gt;, which was messing with &lt;code&gt;b-&amp;gt;posn&lt;/code&gt; after the &lt;code&gt;unread()&lt;/code&gt;, rather than setting it before the unread.&lt;/p&gt;

&lt;p&gt;Peter Prymmer worried about floating point representations of numbers under OS/390 with exponents over +63.&lt;/p&gt;

&lt;p&gt;Marcel Grunauer produced some patches for Darwin.&lt;/p&gt;

&lt;p&gt;Ilya Zakharevich provided a slew of OS/2 patches.&lt;/p&gt;

&lt;p&gt;There were also some minor documentation patches (some very pedantic).&lt;/p&gt;

&lt;p&gt;Oh, and Jarkko had an off-by-one error.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your temporarily-replacing humble and obedient servant,&lt;/p&gt;

&lt;p&gt;Leon Brocard, &lt;a href=&#34;mailto:leon@iterative-software.com&#34;&gt;leon@iterative-software.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/06/09</title>
      <link>http://localhost:1313/pub/2001/06/p5pdigest/THISWEEK-20010612.html/</link>
      <pubDate>Tue, 12 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/p5pdigest/THISWEEK-20010612.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl5-porters-digest-subscribe@netthink.co.uk&#34;&gt;&lt;code&gt;perl5-porters-digest-subscribe@netthink.co.uk&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;perl-thisweek-YYYYMM@simon-cozens.org&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month. Changes and additions to the &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html&#34;&gt;perl5-porters&lt;/a&gt; biographies are particularly welcome.&lt;/p&gt;

&lt;p&gt;This was a fairly quiet week with 240 messages.&lt;/p&gt;

&lt;h3 id=&#34;span-id-removing-dependence-on-strtol-removing-dependence-on-strtol-span&#34;&gt;&lt;span id=&#34;Removing_dependence_on_strtol&#34;&gt;Removing dependence on strtol&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#CLARK&#34;&gt;Nicholas Clark&lt;/a&gt; provided a patch to replace a call to &lt;code&gt;strtol&lt;/code&gt;, a C library function convert a string to a long integer which (as luck would have it, turns out to have bugs in certain implementations). As Nicholas puts it: &amp;ldquo;No falling over because of other people&amp;rsquo;s libraries&amp;rsquo; bugs&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This has cropped up again recently, so it&amp;rsquo;s worth explaining. Perl is a very portable language: it is expected to compile under many different operating systems and under even more libraries. Occasionally some of these platforms have buggy implementations of functions: it is often easier to re-implement the buggy function inside Perl (correctly, using Perl internals and optimisations) than to code around that particular bug.&lt;/p&gt;

&lt;p&gt;In this case, the problem was with UTS Amdahl&amp;rsquo;s &lt;code&gt;strtol&lt;/code&gt; not always setting &lt;code&gt;errno&lt;/code&gt; when appropriate in certain &amp;ldquo;out of bounds&amp;rdquo; cases.&lt;/p&gt;

&lt;h3 id=&#34;span-id-more-committers-more-committers-span&#34;&gt;&lt;span id=&#34;More_committers&#34;&gt;More committers&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#HIETANIEMI&#34;&gt;Jarkko Hietaniemi&lt;/a&gt; proposed that there be more Perl committers (people able to add patches directly to the main Perl repository, which is held under Perforce):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it&amp;rsquo;s time we nudge the development model of Perl to be a bit more open by extending the group of people having commit rights to the Perl repository.&lt;/p&gt;

&lt;p&gt;There are many active perl5-porters that submit a lot of patches, both code (both C and Perl) and documentation patches, and I feel somewhat silly being a bottleneck. Some people (including me) could argue that having a single point of quality control is a good thing, but I think opening up access to the code would outweigh the potential downsides.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rest of the &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg58581.html&#34;&gt;proposal&lt;/a&gt; is worth reading, as it nicely sums up the situation. While it is good to have one central master control point for quality control, hopefully this change will free Jarkko up and increase the speed of development on Perl.&lt;/p&gt;

&lt;p&gt;So far Jarkko has taken the Configure subpumpkin, and Simon Cozens is the Unicode subpumpkin. In addition, a changes mailing list will be set up so that interested parties can read the patches without any discussions.&lt;/p&gt;

&lt;p&gt;Note that at the moment a few people already have Perforce access, such as Gurusamy Sarathy (5.6.x pumpkin), Nick-Ing Simmons (Perl IO pumpkin), and Charles Bailey (VMS pumpkin).&lt;/p&gt;

&lt;h3 id=&#34;span-id-regex-negation-regex-negation-span&#34;&gt;&lt;span id=&#34;Regex_Negation&#34;&gt;Regex Negation&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Pinyan noted that a new Java regex package contained support for the following regular expression negation: &lt;code&gt;[\w&#39;\-[^\d]]&lt;/code&gt;, which matches any word character, apostrophe, or hyphen, EXCEPT digits, and asked whether support was planned for Perl. He was pointed to the &lt;a href=&#34;http://www.unicode.org/unicode/reports/tr18/&#34;&gt;Unicode Regular Expression Guidelines&lt;/a&gt;, which proposed a syntax: &lt;code&gt;[AEIOU[^A]]&lt;/code&gt;, but was rather unclear on many points. The backwards compatibility police made an appearance, but otherwise nothing was resolved.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#GURUSAMY&#34;&gt;Gurusamy Sarathy&lt;/a&gt; fixed an as-old-as-the-hills bug to do with lexical lookups within eval EXPR.&lt;/p&gt;

&lt;p&gt;Some minor documentation patches.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#COZENS&#34;&gt;Simon Cozens&lt;/a&gt; re-announced the &lt;a href=&#34;http://public.activestate.com/cgi-bin/perlbrowse&#34;&gt;Perl Repository Browser&lt;/a&gt;. He also reworked and added many comments to &lt;code&gt;perly.y&lt;/code&gt; (the Perl parser, which is now much easier to understand), and posted a &lt;a href=&#34;http://simon-cozens.org/hacks/grammar.pdf&#34;&gt;hypertext representation&lt;/a&gt; of the Perl grammar.&lt;/p&gt;

&lt;p&gt;David Nicol proposed a (broken, buggy, overworked) patch to Perl containing an new operator &lt;code&gt;it&lt;/code&gt;, which would allow the following code to print &amp;ldquo;5&amp;rdquo;: &lt;code&gt;$a{foo} = 5; defined $a{foo}; print it&lt;/code&gt;. It was not liked by the backwards compatibility police.&lt;/p&gt;

&lt;p&gt;There was some IThreads discussion on the naming of modules, from &lt;code&gt;IThreads&lt;/code&gt; to &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;threads&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chris Nandor submitted some Mac OS compatibility patches.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your temporarily-replacing humble and obedient servant,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:leon@iterative-software.com&#34;&gt;Leon Brocard&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Removing_dependence_on_strtol&#34;&gt;Removing dependence on strtol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#More_committers&#34;&gt;More committers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Regex_Negation&#34;&gt;Regex Negation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/06/03</title>
      <link>http://localhost:1313/pub/2001/06/p5pdigest/THISWEEK-20010604.html/</link>
      <pubDate>Mon, 04 Jun 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/06/p5pdigest/THISWEEK-20010604.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl5-porters-digest-subscribe@netthink.co.uk&#34;&gt;&lt;code&gt;perl5-porters-digest-subscribe@netthink.co.uk&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;perl-thisweek-YYYYMM@simon-cozens.org&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month. Changes and additions to the &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html&#34;&gt;perl5-porters&lt;/a&gt; biographies are particularly welcome.&lt;/p&gt;

&lt;p&gt;This was a faily active week with 700 messages.&lt;/p&gt;

&lt;h3 id=&#34;span-id-testing-testing-testing-testing-span&#34;&gt;&lt;span id=&#34;Testing_testing&#34;&gt;Testing, testing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#SCHWERN&#34;&gt;Michael Schwern&lt;/a&gt; was on a rampage this week attempting to improve the Perl test suite. The current test suite is quite extensive, but maintenance (or even finding which test failed) is currently tricky due to them being numbered. &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#SANDEN&#34;&gt;Hugo&lt;/a&gt; sums it up very nicely:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As someone who regularly tries to put in the effort to add test cases, I find there is little difference in the effort involved in adding a test case whether or not I have to encode the test number in the test case.&lt;/p&gt;

&lt;p&gt;As someone who regularly tries to investigate test failures, the lack of test numbers makes life _much_ more difficult. It isn&amp;rsquo;t just the time it takes to discover which test failed, but also the fact that it diverts my concentration from the code I want to be thinking about, so that the debugging process becomes that much more difficult.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rest of his &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg58351.html&#34;&gt;post&lt;/a&gt; is also interesting.&lt;/p&gt;

&lt;p&gt;Schwern (in his role as Perl Quality Assurance pumpkin) has been slowly improving the available testing tools, such as the &lt;code&gt;Test::Simple&lt;/code&gt; module on CPAN, &amp;ldquo;an extremely simple, extremely basic module for writing tests suitable for CPAN modules and other pursuits&amp;rdquo;. Instead of simply numbering the tests, it allows tests to be named. From its documentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # This produces &amp;quot;ok 1 - Hell not yet frozen over&amp;quot; (or not ok)
 ok( get_temperature($hell) &amp;gt; 0, &#39;Hell not yet frozen over&#39; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Schwern is currently holding off integrating the module into the core until he gets the interface just right. Tony Bowden &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg58427.html&#34;&gt;dreamt&lt;/a&gt; about a world of testing and psychology, with convincing arguments about the module.&lt;/p&gt;

&lt;p&gt;Schwern also submitted quite a few patches to the test suite to sync the latest version of the &lt;code&gt;Test&lt;/code&gt; and &lt;code&gt;Test::Harness&lt;/code&gt; modules from CPAN into the core and to improve the test suite.&lt;/p&gt;

&lt;h3 id=&#34;span-id-libnet-in-the-core-libnet-in-the-core-span&#34;&gt;&lt;span id=&#34;libnet_in_the_core&#34;&gt;libnet in the core&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#HIETANIEMI&#34;&gt;Jarkko&lt;/a&gt; introduced us to his evil plan to integrate all of CPAN into the Perl core, assimilating libnet this week. libnet contains various client side networking modules, such as Net::FTP, Net::NNTP, Net::POP3, Net::Time and Net::SMTP, but unfortunately requires some initial configuration. The idea was that libnet could be told only once which POP3 server to use, which it would then use by default in future.&lt;/p&gt;

&lt;p&gt;Jarkko asked whether configuration could be delayed. There followed some discussion about providing a seperate configuration utility which could be run after configuration-time, some talk (and flames) about a &lt;code&gt;.perlrc&lt;/code&gt; per-user configuration file, and testing the modules by shipping small fake servers. No concensus was reached.&lt;/p&gt;

&lt;h3 id=&#34;span-id-warnings-crusade-warnings-crusade-span&#34;&gt;&lt;span id=&#34;Warnings_crusade&#34;&gt;Warnings crusade&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;It was very much a week of patches from Schwern, who continued on his crusade to make Perl compile cleanly under &lt;code&gt;-Wall&lt;/code&gt;, jumping over hoops sometimes to get rid of warnings.&lt;/p&gt;

&lt;p&gt;After a slew of patches, Schwern suggested making &lt;code&gt;-Wall&lt;/code&gt; the default to stop new patches containing warnings. Jarkko made it so, with the slightly suprising problem that Perl no longer compiled on Solaris with gcc. The culprit turned out to be &lt;code&gt;-ansi&lt;/code&gt;, which has been temporarily removed.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Hugo posted a &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg57821.html&#34;&gt;wonderful comparison&lt;/a&gt; of various benchmarks containing the experimental &lt;code&gt;?&amp;gt;&lt;/code&gt; regular expression feature, along with a small discussion of the regular expression optimiser.&lt;/p&gt;

&lt;p&gt;Tye McQueen posted a small patch attempting to make pathological hash keys much more unlikely.&lt;/p&gt;

&lt;p&gt;H.Merijn Brand posted some patches to get Perl running on AIX and gcc.&lt;/p&gt;

&lt;p&gt;There was some more talk on documenting &lt;code&gt;sort&lt;/code&gt; as stable, with perhaps having a pragma such as &lt;code&gt;use sort qw( stable unique );&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Jarkko submitted some UTF bug reports and proceeded to fix some.&lt;/p&gt;

&lt;p&gt;Ilya provided some more OS/2 patches.&lt;/p&gt;

&lt;p&gt;Ilmari Karonen provided an interesting bug report which was produced by his Markov chain random input tester.&lt;/p&gt;

&lt;p&gt;Hugo provided a patch to stop &lt;code&gt;Atof&lt;/code&gt; numifying &amp;ldquo;0xa&amp;rdquo; to 10. At the moment Perl was relying on the system&amp;rsquo;s &lt;code&gt;atof&lt;/code&gt; which turns out to be different on different platforms, so we now have an implementation in Perl.&lt;/p&gt;

&lt;p&gt;Jarkko attempted to make &lt;code&gt;use utf8&lt;/code&gt; the default, allowing us to write our scripts in UTF-8. It was shot down very rapidly by the backwards-compatibility police due to no longer allowing naked bytes with the eight bit, such as the pound character.&lt;/p&gt;

&lt;p&gt;Doug MacEachern posted some patches to clean up and optimise &lt;code&gt;Cwd.pm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Until next week I remain, your temporarily-replaced humble and obedient servant,&lt;/p&gt;

&lt;p&gt;Leon Brocard, &lt;a href=&#34;mailto:leon@iterative-software.com%0A&#34;&gt;leon@iterative-software.com&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Testing_testing&#34;&gt;Testing, testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#libnet_in_the_core&#34;&gt;libnet in the core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Warnings_crusade&#34;&gt;Warnings crusade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week on p5p 2001/05/27</title>
      <link>http://localhost:1313/pub/2001/05/p5pdigest/THISWEEK-20010527.html/</link>
      <pubDate>Sun, 27 May 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/05/p5pdigest/THISWEEK-20010527.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl5-porters-digest-subscribe@netthink.co.uk&#34;&gt;&lt;code&gt;perl5-porters-digest-subscribe@netthink.co.uk&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;code&gt;perl-thisweek-YYYYMM@simon-cozens.org&lt;/code&gt; where &lt;code&gt;YYYYMM&lt;/code&gt; is the current year and month. Changes and additions to the &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html&#34;&gt;perl5-porters&lt;/a&gt; biographies are particularly welcome.&lt;/p&gt;

&lt;p&gt;This was a week of many little threads consisting of bug reports and fixes, with 360 messages.&lt;/p&gt;

&lt;h3 id=&#34;span-id-attribute-tieing-attribute-tieing-span&#34;&gt;&lt;span id=&#34;Attribute_tieing&#34;&gt;Attribute tieing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Artur Bergman, while working on the new iThreads threading model, has reported that variable attributes are not usable for &lt;code&gt;tie&lt;/code&gt;ing.&lt;/p&gt;

&lt;p&gt;Variable attributes are an experimental feature of Perl that are a means of associating &amp;ldquo;out of band&amp;rdquo; information with a variable. The problem is that, as &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#ING-SIMMONS&#34;&gt;Nick Ing-Simmons&lt;/a&gt; pointed out, in the current implementation, the attribute code is called at compile time (this is also where the &lt;code&gt;tie&lt;/code&gt; happens), but that the scope cleanup removes the &amp;ldquo;magic&amp;rdquo; from the variable.&lt;/p&gt;

&lt;p&gt;Some discussion ensued on the fact that the code was working as designed, but that the design needed to be expanded slightly, by removing the restriction that the attribute callbacks were designed to be called at compile time. &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#GURUSAMY&#34;&gt;Gurusamy Sarathy&lt;/a&gt; provided a possible solution by adding another hook, and I documented the brokeness.&lt;/p&gt;

&lt;h3 id=&#34;span-id-when-is-a-bug-a-bug-when-is-a-bug-a-bug-span&#34;&gt;&lt;span id=&#34;When_is_a_bug_a_bug&#34;&gt;When is a bug a bug?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Stevens and Larry Virden submitted bug reports via the perlbug interface for a bug which was only present in perl-current. Perl-current (also known as bleadperl) is the absolute latest development version of Perl, and (as &lt;code&gt;perlhack&lt;/code&gt; mentions, &amp;ldquo;is usually in a perpetual state of evolution. You should expect it to be very buggy&amp;rdquo;. &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#HIETANIEMI&#34;&gt;Jarkko&lt;/a&gt; mentioned that he didn&amp;rsquo;t think submitting perlbugs on bleadperl was a good idea:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, I don&amp;rsquo;t think submitting perlbugs on rsynced snapshots is a good plan. If one is playing with the snapshots, one is playing with the bleeding edge, and one should directly send a report to p5p, not as a full perlbug report.&lt;/p&gt;

&lt;p&gt;The rationale: the perlbug database is already working &amp;ldquo;too well&amp;rdquo; :-) by being too full of bugs that strictly speaking aren&amp;rsquo;t. I don&amp;rsquo;t want the database to clutter up with noise from volatile snapshots. I cannot and will not guarantee that every check-in I make is free from test failures. For the announced snapshots I try harder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#NEWTON&#34;&gt;Philip Newton&lt;/a&gt; reminded us that the point of development releases is to find and fix bugs. &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#BRAND&#34;&gt;Merijn Brand&lt;/a&gt; provided a patch to include the patch snapshot level into perlbug reports. Jarkko releases snapshots of bleadperl a couple of times a week, the latest being called 10210, and including the level will help find the bug being reported.&lt;/p&gt;

&lt;h3 id=&#34;span-id-testharness-cleanup-test-harness-cleanup-span&#34;&gt;&lt;span id=&#34;TestHarness_cleanup&#34;&gt;Test::Harness cleanup&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#ZAKHAREVICH&#34;&gt;Ilya Zakharevich&lt;/a&gt; provided a patch to clean up output of the test harness, fixing the alignment of the fields making it easier to read reports with failures. Michael Schwern disagreed on the patches necessary, leading to a small tug of war. As Jarkko pointed out &amp;ldquo;the suggested patches are not converging&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-timelocal-time-local-span&#34;&gt;&lt;span id=&#34;TimeLocal&#34;&gt;Time::Local&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Uros Juvan reported a bug about &lt;code&gt;Time::Local&lt;/code&gt; and invalid dates: it would return different dates in that case. For example, asking for February 30th would return March 2nd without giving a warning. It contains tests which are a little too primitive, and a patch was supplied by Stephen Potter.&lt;/p&gt;

&lt;h3 id=&#34;span-id-various-various-span&#34;&gt;&lt;span id=&#34;Various&#34;&gt;Various&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;John Peacock submitted a patch to make sure magic is removed at scope exit. &lt;a href=&#34;http://simon-cozens.org/writings/whos-who.html#GUY&#34;&gt;Mike Guy&lt;/a&gt; supplied a patch to support qualified variables in &amp;ldquo;use vars&amp;rdquo;, somewhat controversially (a similar patch for &lt;code&gt;our&lt;/code&gt; by Mark-Jason Dominus last year was rejected). He also supplied a patch to remove the long deprecated uppercase aliases for the string comparison operators EQ, NE, LT, LE, GE, GT etc. This led to the most amusing idea of the week: Jarkko suggested testing the Perl parser with some some Markov chain (n-characters) generated Perl-like gibberish: &amp;ldquo;That way we get a lot of data that constantly begins to look like valid Perl but then switches back to not being Perl&amp;rdquo;. No-one provided such a Markov chain, unfortunately.&lt;/p&gt;

&lt;p&gt;Michael Schwern submitted some more minor patches, including trying to get Perl to compile cleanly under &lt;code&gt;-Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hugo proposed removing [$*] ( &lt;code&gt;PL_multiline&lt;/code&gt;), which has been deprecated since at least as far back as 5.003_97.&lt;/p&gt;

&lt;p&gt;Gisle Aas patched Perl to allow overriding of &lt;code&gt;require&lt;/code&gt; to be delayed slightly to increase its usefulness.&lt;/p&gt;

&lt;p&gt;Colin P McMillen asked if Perl&amp;rsquo;s &lt;code&gt;sort&lt;/code&gt; function was intended to be stable, which resulted in a documentation patch by John P. Linderman stating &amp;ldquo;Perl does not guarantee that sort is stable&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Richard Soderberg patched a bug found by Mark-Jason Dominus where a localized glob loses its value when it is assigned to.&lt;/p&gt;

&lt;p&gt;There were various other minor patches, but I think most people have been relaxing in the sun this week. Until next week I remain, your temporarily-replaced humble and obedient servant,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:leon@iterative-software.com&#34;&gt;Leon Brocard&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Attribute_tieing&#34;&gt;Attribute tieing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#When_is_a_bug_a_bug&#34;&gt;When is a bug a bug?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TestHarness_cleanup&#34;&gt;Test::Harness cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#TimeLocal&#34;&gt;Time::Local&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Various&#34;&gt;Various&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

