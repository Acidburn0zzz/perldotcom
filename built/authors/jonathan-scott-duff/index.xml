<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jonathan Scott Duff on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/jonathan-scott-duff/</link>
    <description>Recent content in Jonathan Scott Duff on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 May 2007 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/jonathan-scott-duff/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Everyday Perl 6</title>
      <link>http://localhost:1313/pub/2007/05/10/everyday-perl-6.html/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/05/10/everyday-perl-6.html/</guid>
      <description>

&lt;p&gt;Perl 6 will soon be here. How will programming in Perl 6 be different from programming in Perl 5 for your average Perl programmer? The answer is: very different yet very much the same. A Perl 6 program viewed at arm&amp;rsquo;s length will look much like a Perl 5 program viewed at arm&amp;rsquo;s length. Programming in Perl 6 will still feel like programming in Perl. What will change however, is that Perl 6 will enable programmers to be more expressive by giving them more tools to work with (making easy things easy) and allowing them to be more precise in their expressions.&lt;/p&gt;

&lt;p&gt;While many of the changes in Perl 6 make it easier for people new to programming or coming from other programming languages to understand the language, none of the changes were made solely on those grounds. If your favorite part of Perl 5 syntax is that it uses an arrow for method dispatch on objects, don&amp;rsquo;t be dismayed that Perl 6 uses a dot instead. The designers carefully considered each syntactic change to ensure that Perl 6 still has the Perlish nature &lt;em&gt;and&lt;/em&gt; that the change was an overall improvement. Some Perl programmers delight in the syntactic differences of the language, but some of those differences aren&amp;rsquo;t that important when compared to the big picture of Perl&amp;rsquo;s culture (which includes the language, CPAN, and the community of programmers).&lt;/p&gt;

&lt;h3 id=&#34;sigil-invariance&#34;&gt;Sigil Invariance&lt;/h3&gt;

&lt;p&gt;One of the fundamental changes is that whenever you refer to individual elements of an aggregate (an array or hash), rather than changing the sigil to denote the type of thing you get back, the sigil remains the same.&lt;/p&gt;

&lt;p&gt;For example, in both Perl 5 and Perl 6 you can create and initialize aggregates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @array = (1,3,5,12,37,42);
    my %hash  = ( alpha =&amp;gt; 4, beta =&amp;gt; 6 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How you access the individual elements of those aggregates looks just a little different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                            # Perl 5
    my $third = @array[2];              my $third = $array[2];
    my $beta  = %hash{&#39;beta&#39;};          my $beta = $hash{&#39;beta&#39;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Long-time Perl 5 programmers might wonder how slices work in Perl 6. The answer is: the same way as in Perl 5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @odds = @array[1,3,5];           # array slice
    my @bets = %hash{&#39;alpha&#39;,&#39;beta&#39;};   # hash slice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference is that in Perl 5 the hash slice would have started with a &lt;code&gt;@&lt;/code&gt; sigil.&lt;/p&gt;

&lt;h3 id=&#34;new-brackets&#34;&gt;New Brackets&lt;/h3&gt;

&lt;p&gt;In these hash examples, it&amp;rsquo;s awkward quoting the indexes into the hash. Perl 5 allows a syntactic shortcut where &lt;code&gt;$hash{word}&lt;/code&gt; works as if you had written &lt;code&gt;$hash{&#39;word&#39;}&lt;/code&gt;. A problem with that is that it can cause confusion when your &lt;code&gt;word&lt;/code&gt; happens to be the name of a subroutine and you really want Perl to execute that subroutine.&lt;/p&gt;

&lt;p&gt;In Perl 6, a syntactic shortcut for accessing hash elements takes advantage of a name change of the &amp;ldquo;quote word&amp;rdquo; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    my @array = &amp;lt;foo bar baz&amp;gt;;      my @array = qw(foo bar baz);
    my %hash  = &amp;lt;a b c d e f g h&amp;gt;;  my %hash = qw(a b c d e f g h);
    my $queue = %hash&amp;lt;q&amp;gt;;           my $queue = $hash{&#39;q&#39;};
    my @vows  = %hash&amp;lt;c a g e&amp;gt;;     my @vows = @hash{qw(c a g e)};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, just as double-quoted strings interpolate while single-quoted strings do not, double-bracketed &amp;ldquo;quote word&amp;rdquo; constructs also interpolate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $foo  = &amp;quot;This is&amp;quot;;
    my $bar  = &amp;quot;the end&amp;quot;;
    my @blah = &amp;lt;&amp;lt; $foo $bar &amp;gt;&amp;gt;;     # (&#39;This&#39;,&#39;is&#39;,&#39;the&#39;,&#39;end&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the interpolation happens &lt;em&gt;before&lt;/em&gt; the &amp;ldquo;quote word&amp;rdquo; aspect of this operator.&lt;/p&gt;

&lt;p&gt;Speaking of interpolation, interpolating into double-quoted strings has changed slightly. Now to interpolate an array into a string, you must provide a set of empty brackets at the end of the array name. This has the side benefit of eliminating the ambiguity of whether you meant interpolation if you happen to include (for instance) an email address in your double-quoted string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @items = &amp;lt;names addresses email&amp;gt;;
    say &amp;quot;Send @items[] to test@foo.com&amp;quot;;
    # Send names addresses email to test@foo.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also interpolate more things into your double-quoted strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    say &amp;quot;Send me $person.name()&amp;quot;;         # results of a method call
    say &amp;quot;2 + 2 = { 2+2 }&amp;quot;;                # any bit of perl code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That second one means that you&amp;rsquo;ll have to be careful about inserting curly braces in your double-quoted strings, but that&amp;rsquo;s a small price to pay for the ability to interpolate the results of arbitrary Perl code.&lt;/p&gt;

&lt;p&gt;By the way, get used to the &lt;code&gt;say&lt;/code&gt; subroutine. It&amp;rsquo;s the same as &lt;code&gt;print&lt;/code&gt;, but it appends a newline to the end. Quite useful, that.&lt;/p&gt;

&lt;h3 id=&#34;fewer-parentheses&#34;&gt;Fewer Parentheses&lt;/h3&gt;

&lt;p&gt;The usual places in Perl 5 that require parentheses no longer do in Perl 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
        if $cond  { ... }                if ($cond)  { ... }
    unless $cond  { ... }            unless ($cond)  { ... }
     while $cond  { ... }             while ($cond)  { ... }
       for @array { ... }               for (@array) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Perl 6, parentheses are now only necessary for grouping.&lt;/p&gt;

&lt;h3 id=&#34;idioms&#34;&gt;Idioms&lt;/h3&gt;

&lt;p&gt;Another big change is that some of the standard Perl 5 idioms look different in Perl 6. In particular, the standard idiom for reading lines from a file involves a &lt;code&gt;for&lt;/code&gt; loop rather than a &lt;code&gt;while&lt;/code&gt; loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    for =$fh { ... }                while (&amp;lt;$fh&amp;gt;) { ... }
    for =&amp;lt;&amp;gt;  { ... }                while (&amp;lt;&amp;gt;)    { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Perl 5 programmers are probably thinking, &amp;ldquo;but doesn&amp;rsquo;t that put the part that reads the filehandle in list context, causing the entire file to be slurped into memory?&amp;rdquo; The answer is both yes and no. Yes, it&amp;rsquo;s in list context, but in Perl 6, by default all lists are lazy so they aren&amp;rsquo;t read until necessary.&lt;/p&gt;

&lt;p&gt;In this example, unary &lt;code&gt;=&lt;/code&gt; is the operator that causes an iterator to, well&amp;hellip;iterate. If &lt;code&gt;$fh&lt;/code&gt; is a filehandle, &lt;code&gt;=$fh&lt;/code&gt; iterates over that file by reading one line at a time. In scalar context &lt;code&gt;=$fh&lt;/code&gt; will read one line, and in list context it will read one line at a time as many times as necessary to get to the end of the file. Iterating over the empty string (remember the new role of the angle brackets) is equivalent to Perl 5&amp;rsquo;s reading files from the command line.&lt;/p&gt;

&lt;h3 id=&#34;operator-rename&#34;&gt;Operator Rename&lt;/h3&gt;

&lt;p&gt;Several common operators have new symbols in Perl 6. These symbol changes make the overall language more regular so that it&amp;rsquo;s easier to parse, but most importantly so that it&amp;rsquo;s easier for humans to remember:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    $object.method(@args);          $obj-&amp;gt;method(@args);
    $x = $cond ?? $true !! $false;  $x = $cond ? $true : $false;
    $s = &amp;quot;con&amp;quot; ~ &amp;quot;cat&amp;quot; ~ &amp;quot;enate&amp;quot;;   $s = &amp;quot;con&amp;quot; . &amp;quot;cat&amp;quot; . &amp;quot;enate&amp;quot;;
    $str ~~ /$pattern/;             $str =~ /$pattern/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any time you see a &lt;code&gt;~&lt;/code&gt; in Perl 6, it has something to do with strings. A unary &lt;code&gt;~&lt;/code&gt; puts its rvalue in a string context, binary &lt;code&gt;~&lt;/code&gt; is string concatenation, and a doubled &lt;code&gt;~&lt;/code&gt; lets you match a regular expression against a string (actually, it does more than that, but from a perspective of not knowing the language at all or from knowing Perl 5, it&amp;rsquo;s enough to know initially that &lt;code&gt;~~&lt;/code&gt; will pattern match on strings).&lt;/p&gt;

&lt;h3 id=&#34;new-perl-6-syntax&#34;&gt;New Perl 6 Syntax&lt;/h3&gt;

&lt;p&gt;Perl 6 also has some brand-new syntax.&lt;/p&gt;

&lt;h4 id=&#34;long-comments&#34;&gt;Long Comments&lt;/h4&gt;

&lt;p&gt;Many people always gripe about the fact that Perl 5 lacks a lightweight multi-line comment mechanism (POD is apparently too verbose). Perl 6 solves this one quite nicely. If a bracketing character immediately follows the comment character (&lt;code&gt;#&lt;/code&gt;), the comment extends to the corresponding closing bracket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #[  This is a
        multi-line comment
        that ends here ----&amp;gt;  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S02.html#Whitespace_and_Comments&#34;&gt;Whitespace and Comments in Synopsis 02&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h4 id=&#34;switch-statement&#34;&gt;switch Statement&lt;/h4&gt;

&lt;p&gt;For those of you who have forever wished for a switch statement in Perl, Perl 6 will have it (only by another name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    given $thing {
        when 3      { say &amp;quot;three&amp;quot;; }
        when 5      { say &amp;quot;five&amp;quot;;  }
        when 9      { say &amp;quot;nine&amp;quot;;  }
        when &amp;quot;a&amp;quot;    { say &amp;quot;what?&amp;quot;; }
        default     { say &amp;quot;none&amp;quot;;  }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This construct is much more powerful than I&amp;rsquo;ve outlined here, however, as it takes advantage of the smart match operator to do the right thing when the given &lt;code&gt;$thing&lt;/code&gt; (or the thing it&amp;rsquo;s being &amp;ldquo;compared&amp;rdquo; against in the &lt;code&gt;when&lt;/code&gt; clause) is an object or an array or hash, or code, etc.&lt;/p&gt;

&lt;h4 id=&#34;new-loops&#34;&gt;New Loops&lt;/h4&gt;

&lt;p&gt;The C-style &lt;code&gt;for&lt;/code&gt; loop operator has become &lt;code&gt;loop&lt;/code&gt;. But you can omit the parenthetical portion to write an infinite loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    loop { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another new looping construct is the &lt;code&gt;repeat&lt;/code&gt; loop, which occupies the same niche as Perl 5&amp;rsquo;s &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt; pseudoloop. The big difference is that unlike &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt; is a real loop and as such, you are free to use &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt; and it does the right thing.&lt;/p&gt;

&lt;p&gt;For more information see &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S04.html&#34;&gt;Synopsis 04&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;parameterized-blocks&#34;&gt;Parameterized Blocks&lt;/h4&gt;

&lt;p&gt;Essentially, every block in a Perl 6 program is a subroutine. Some blocks, like those used in an &lt;code&gt;if&lt;/code&gt; statement, have no parameters; but others do, such as the body of a &lt;code&gt;for&lt;/code&gt; loop. But any block may be parameterized. This is especially useful for doing things that aren&amp;rsquo;t easy in Perl 5 but should be &amp;ndash; like examining values three at a time with &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @trimults = map -&amp;gt; $a,$b,$c { $a * $b * $c }, @numbers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example where Perl 6 co-opts the arrow notation for a higher purpose. The arrow now introduces parameters to a block. You are most likely to see this in &lt;code&gt;for&lt;/code&gt; loops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Perl 6                        # Perl 5
    for @array -&amp;gt; $a     { ... }    for my $a (@array) { ... }
    for @array -&amp;gt; $a, $b { ... }    # too complex :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second &lt;code&gt;for&lt;/code&gt; loop will take items from &lt;code&gt;@array&lt;/code&gt; two at a time and lexically assign them to &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; for the duration of the block. The same behavior is not so easy to accomplish in Perl 5.&lt;/p&gt;

&lt;p&gt;Another way to write the &lt;code&gt;@trimults&lt;/code&gt; example, but slightly less verbose, is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my @trimults = map { $^a * $^b * $^c }, @numbers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables with a caret (&lt;code&gt;^&lt;/code&gt;) immediately after the sigil are implicit parameters to the block, and Perl 6 assigns them in Unicode-order. That is, &lt;code&gt;$^a&lt;/code&gt; is the first parameter, &lt;code&gt;$^b&lt;/code&gt; the second, and &lt;code&gt;$^c&lt;/code&gt; the third.&lt;/p&gt;

&lt;p&gt;There is yet a third way to write a parameterized block that&amp;rsquo;s more verbose but more also powerful. It allows the programmer to take full advantage of subroutine signatures. Yes, TMTOWTDI, is still alive and well :-)&lt;/p&gt;

&lt;h4 id=&#34;subroutine-signatures&#34;&gt;Subroutine Signatures&lt;/h4&gt;

&lt;p&gt;You can still write subroutines the way you always have in Perl 5, but Perl 6 allows you to specify a &amp;ldquo;signature&amp;rdquo; that describes how many parameters to pass to the subroutine, which parameters are optional, which parameters are positional, which are named, what the default values are for unpassed parameters, which parameters copy the value that is passed, which parameters alias the variable, etc.&lt;/p&gt;

&lt;p&gt;For more information on subroutines in Perl 6, see &lt;a href=&#34;http://dev.perl.org/perl6/doc/design/syn/S06.html&#34;&gt;Synopsis 06&lt;/a&gt; and Phil Crow&amp;rsquo;s recent article &lt;a href=&#34;http://localhost:1313/pub/2007/03/01/perl-6-parameter-passing.html&#34;&gt;The Beauty of Perl 6 Parameter Passing&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;variable-typing&#34;&gt;Variable Typing&lt;/h4&gt;

&lt;p&gt;In the interest of allowing programmers to be precise in their expressions, Perl 6 allows for optional variable typing. That is, the programmer can not only say, &amp;ldquo;this variable is a scalar&amp;rdquo; but can also say &amp;ldquo;this scalar conforms to the expectation of items in this particular class.&amp;rdquo; In other words, you can say things such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my Dog  $spot;
    my Fish $wanda;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and it means something useful to Perl as well as the programmer. The variable &lt;code&gt;$spot&lt;/code&gt; is only usable in a place where Perl expects a &lt;code&gt;Dog&lt;/code&gt;, and the variable &lt;code&gt;$wanda&lt;/code&gt; only works in places where Perl expects a &lt;code&gt;Fish&lt;/code&gt;. However, the Perl 5-ish code will work perfectly fine, too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my Dog  $spot;
    my Fish $wanda;
    my $x;
    $x = $spot;
    $x = $wanda;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;because &lt;code&gt;$x&lt;/code&gt; is sufficiently &amp;ldquo;untyped&amp;rdquo; that it can accept a &lt;code&gt;Dog&lt;/code&gt; or a &lt;code&gt;Fish&lt;/code&gt;, or any scalar thing.&lt;/p&gt;

&lt;h4 id=&#34;multiple-dispatch&#34;&gt;Multiple Dispatch&lt;/h4&gt;

&lt;p&gt;Variable typing coupled with subroutine signatures gives the benefit of multiple dispatch. What that means is that you can declare two subroutines with the same name but different signatures, and Perl will select which subroutine to invoke at runtime based on the parameters sent to the subroutine. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    multi sub feed(Dog  $spot)  { say &amp;quot;dog food!&amp;quot;;  }
    multi sub feed(Fish $wanda) { say &amp;quot;fish food!&amp;quot;;  }

    my Fish $nemo;
    my Dog  $rover;

    feed($nemo);                 # fish food!
    feed($rover);                # dog food!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;multi&lt;/code&gt; keyword tells Perl that you intend to declare multiple subroutines with the same name, and it should use the name and the parameters and whatever other distinguishing characteristics it can to decide which one to actually invoke.&lt;/p&gt;

&lt;h3 id=&#34;the-end&#34;&gt;The End&lt;/h3&gt;

&lt;p&gt;I hope this introduction gives you a feel for some of the changes in Perl 6 and shows how these changes are good and useful.&lt;/p&gt;

&lt;p&gt;A prototype implementation of Perl 6 called &lt;a href=&#34;http://www.pugscode.org/&#34;&gt;&lt;em&gt;pugs&lt;/em&gt;&lt;/a&gt; should be able to execute all of the examples I&amp;rsquo;ve given in this article. If not, get on the freenode IRC network, join #perl6, ask for a commit bit, and submit a test to the Pugs repository, and one of the pugs Developers will probably update Pugs to run it soon enough :-)&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;Special thanks to all of the people on IRC (#perl and #perl6) who looked over this article and gave their input and commentary.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

