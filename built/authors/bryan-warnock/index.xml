<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bryan Warnock on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/bryan-warnock/</link>
    <description>Recent content in Bryan Warnock on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Mar 2002 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/bryan-warnock/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week on Perl 6 (3 -9 Mar 2002)</title>
      <link>http://localhost:1313/pub/2002/03/p6pdigest/20020309.html/</link>
      <pubDate>Tue, 12 Mar 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/03/p6pdigest/20020309.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Both the email subscription and the web archive are temporarily offline. This should be remedied shortly. In the meantime, please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl 6 is the major redesign and rewrite of the Perl language. Parrot is the virtual machine that Perl 6 (and other languages) will be written for. For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last week was extremely light, with just 70 messages across 34 threads, and 29 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-printf-printf-span&#34;&gt;&lt;span id=&#34;printf&#34;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Uri Guttman &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09215.html&#34;&gt;cross-posted&lt;/a&gt; a thread discussing redesigning &lt;code&gt;printf&lt;/code&gt;. Since &lt;code&gt;%&lt;/code&gt; will now be used for all hash accesses, there&amp;rsquo;s a potential ambiguity between interpolating a hash key, and a format specifier. Several solutions were presented, including requiring &lt;code&gt;$()&lt;/code&gt; for interpolation, a new quote operator, and replacing the &lt;code&gt;%&lt;/code&gt; with something else. The discussion continues.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-004-parrot-0-0-4-span&#34;&gt;&lt;span id=&#34;Parrot_004&#34;&gt;Parrot 0.0.4&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The latest version of Parrot is being wrapped up. The big feature of this release is the foundation of the garbage collector. A formal release announcement will be made, well, when this version is formally released.&lt;/p&gt;

&lt;h3 id=&#34;span-id-multimethod-dispatch-multimethod-dispatch-span&#34;&gt;&lt;span id=&#34;Multimethod_Dispatch&#34;&gt;Multimethod Dispatch&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Michael Lambert &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08793.html&#34;&gt;asked&lt;/a&gt; whether Parrot itself should support multimethod dispatch. Internals head Dan Sugalski affirmed that it &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08795.html&#34;&gt;would&lt;/a&gt;, but only for method and subroutine dispatch. (As with most design decisions, it&amp;rsquo;s a speed thing.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-assembler-pdd-the-assembler-pdd-span&#34;&gt;&lt;span id=&#34;The_Assembler_PDD&#34;&gt;The Assembler PDD&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08803.html&#34;&gt;released&lt;/a&gt; version 1 of the proposed Assembler PDD.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-parrot-spotlight-the-parrot-spotlight-span&#34;&gt;&lt;span id=&#34;The_Parrot_Spotlight&#34;&gt;The Parrot Spotlight&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://users.ox.ac.uk/~shug0957/&#34;&gt;Alex Gough&lt;/a&gt; is a physics student at Oxford with interests ranging from quantum computing to DNA simulation. He uses perl to do more in less time and hopes Parrot and Perl 6 will allow cheaper, shorter, one-line solutions to troublesome but otherwise irrelevant problems. He works on the big number and testing framework of Parrot.&lt;/p&gt;

&lt;p&gt;When not at his computer, Alex canoes on foamy rivers, teaches basic lifeguarding, and helps mentally disabled children exercise.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>These Weeks on Perl 6 (10 Feb - 2 Mar 2002)</title>
      <link>http://localhost:1313/pub/2002/03/p6pdigest/20020302.html/</link>
      <pubDate>Wed, 06 Mar 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/03/p6pdigest/20020302.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Both the email subscription and the web archive are temporarily offline. This should be remedied shortly. In the meantime, please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl 6 is the major redesign and rewrite of the Perl language. Parrot is the virtual machine that Perl 6 (and other languages) will be written for. For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the three week period, there were 423 messages across 128 threads, with 61 authors contributing. About half the threads were patch related. Few of the remaining threads have little meaning outside the active development circle, so there&amp;rsquo;s little of interest to report on.&lt;/p&gt;

&lt;h3 id=&#34;span-id-topicalizers-topicalizers-span&#34;&gt;&lt;span id=&#34;Topicalizers&#34;&gt;Topicalizers&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There was a fair amount of discussion, however, on &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org&#34;&gt;perl6-language&lt;/a&gt; about topicalizers in Perl 6. (Topicalizers are the lexically scoped aliases in &lt;code&gt;foreach&lt;/code&gt; iterators and the new &lt;code&gt;given&lt;/code&gt; block.)&lt;/p&gt;

&lt;p&gt;Allison Randal &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09165.html&#34;&gt;asked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What would be the cost (performance, design or dwim) of making all the defaulting constructs pay attention to the current topicalizer in preference to $_?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Larry Wall &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09170.html&#34;&gt;replied&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s been thought about, but neither accepted nor rejected yet. It&amp;rsquo;s one of those things that depends on future decisions. Certainly Hugo and Dan will vouch for the fact that I was ruminating about similar issues last Wednesday, though in this case I was thinking about how a topic could supply a default to identical parameters of different subroutine or method calls, and not just as the object of the call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Much of the subsequent thread discussed whether &lt;code&gt;when&lt;/code&gt; should refer to &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09200.html&#34;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; or the topicalizer bound to by &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09202.html&#34;&gt;&lt;code&gt;given&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-garbage-collecting-garbage-collecting-span&#34;&gt;&lt;span id=&#34;Garbage_Collecting&#34;&gt;Garbage Collecting&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski committed his garbage collector framework, including &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08741.html&#34;&gt;built-in&lt;/a&gt; statistical generation. (As inspired by some &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08723.html&#34;&gt;horrendous performance&lt;/a&gt; early on.) The good news is that the performance problems have been cleared up. The bad news is that the garbage collector still doesn&amp;rsquo;t collect garbage.&lt;/p&gt;

&lt;h3 id=&#34;span-id-net-clr-and-parrot-net-clr-and-parrot-span&#34;&gt;&lt;span id=&#34;NET_CLR_and_Parrot&#34;&gt;.NET CLR and Parrot&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08641.html&#34;&gt;submitted&lt;/a&gt; a lot of information on .NET. Even for the non-Parroteers, this is a good read.&lt;/p&gt;

&lt;h3 id=&#34;span-id-pdds-pdds-span&#34;&gt;&lt;span id=&#34;PDDs&#34;&gt;PDDs&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon also &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08519.html&#34;&gt;reminded&lt;/a&gt; folks that there are Design Documents to write. He then submitted the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08523.html&#34;&gt;Keys and Indices&lt;/a&gt; PDD. Brent Dax followed up with the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08528.html&#34;&gt;Regular Expression&lt;/a&gt; PDD, and Dave Mitchell&amp;rsquo;s &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08555.html&#34;&gt;Coding Standards&lt;/a&gt; PDD was finally committed. Alex Gough contributed a &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08618.html&#34;&gt;Big Number&lt;/a&gt; PDD, while Bryan Warnock fixed some gaping holes in the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08677.html&#34;&gt;PDD&lt;/a&gt; PDD. There&amp;rsquo;s also a PDD for the assembler and the bytecode format on the way.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-magic-cookie-assignments-parrot-magic-cookie-assignments-span&#34;&gt;&lt;span id=&#34;Parrot_Magic_Cookie_Assignments&#34;&gt;Parrot Magic Cookie Assignments&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08446.html&#34;&gt;clarified&lt;/a&gt; how PMC assignments should work. Most of the subsequent discussion was attempting to mesh Dan&amp;rsquo;s answers with typing, both weak and strong.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-parrot-spotlight-the-parrot-spotlight-span&#34;&gt;&lt;span id=&#34;The_Parrot_Spotlight&#34;&gt;The Parrot Spotlight&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://brentdax.perlmonk.org&#34;&gt;Brent Dax&lt;/a&gt; is a sixteen-year-old high school junior. He lives in Southern California with his parents, a brother and sister, and a pet cat.&lt;/p&gt;

&lt;p&gt;Brent works on a lot of stuff within Parrot. He has worked on the Configure system, the regular expression engine, the embedding interface, warnings, and formatted printing. He has two modules on the CPAN, both related to Perl 6. When he&amp;rsquo;s not hacking on Parrot, a Perl script, or some other little project, he&amp;rsquo;s probably handling &lt;a href=&#34;mailto:brentdax@cpan.org&#34;&gt;e-mail&lt;/a&gt;, reading a book, doing homework, or watching CNN. He&amp;rsquo;s sometimes on PerlMonks, and can usually be found on the developer&amp;rsquo;s IRC channel &lt;code&gt;#parrot&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight on Perl 6 (27 Jan - 9 Feb 2002)</title>
      <link>http://localhost:1313/pub/2002/02/p6pdigest/20020209.html/</link>
      <pubDate>Tue, 12 Feb 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/02/p6pdigest/20020209.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. (Note that this is an @Home address, and will change sometime this month.) Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl 6 is the major redesign and rewrite of the Perl language. Parrot is the virtual machine that Perl 6 (and other languages) will be written for. For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the two week period, there were 410 messages across 110 threads, with 64 authors contributing. Quite a few patches.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-is-broken-parrot-is-broken-span&#34;&gt;&lt;span id=&#34;Parrot_Is_Broken&#34;&gt;Parrot Is Broken&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Parrot is &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08358.html&#34;&gt;broken&lt;/a&gt; until the keyed access interface to arrays and hashes are fixed. This shouldn&amp;rsquo;t take long, but be warned if you decide to play with Parrot.&lt;/p&gt;

&lt;h3 id=&#34;span-id-speed-speed-span&#34;&gt;&lt;span id=&#34;Speed&#34;&gt;Speed&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Raptor &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08274.html&#34;&gt;was impressed&lt;/a&gt; with the speed that Parrot is running through code, and asked if the numbers were true. Sadly, &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08285.html&#34;&gt;not really&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-unicode-strings-unicode-strings-span&#34;&gt;&lt;span id=&#34;Unicode_Strings&#34;&gt;Unicode Strings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Larry Wall gave &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08156.html&#34;&gt;his input&lt;/a&gt; on how Unicode and Strings should interrelate in Perl 6.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But within Perl, character strings are simply sequences of integers. The internal representation must be optimized for this concept, not for any particular Unicode representation, whether UTF-8 or UTF-16 or UTF-32. Any of these could be used as underlying representations, but the abstraction of sequences of integers must be there explicitly in the internal high-level string API. To oversimplify, the high-level API must not have any parameters whose type contains the string &amp;ldquo;UTF&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-the-regex-engine-the-regex-engine-span&#34;&gt;&lt;span id=&#34;The_Regex_Engine&#34;&gt;The Regex Engine&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Ashley Winters &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08143.html&#34;&gt;had a beef&lt;/a&gt; with the current regex engine, and how it&amp;rsquo;s not being written in pure Parrot opcodes. These replies from &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08147.html&#34;&gt;Brent Dax&lt;/a&gt;, &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08179.html&#34;&gt;Bryan Warnock&lt;/a&gt;, and &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg08146.html&#34;&gt;Angel Faus&lt;/a&gt; respond to Ashley&amp;rsquo;s concerns.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-on-mono-perl-6-on-mono-span&#34;&gt;&lt;span id=&#34;Perl_6_On_Mono&#34;&gt;Perl 6 On Mono&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Aaron Sherman &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09130.html&#34;&gt;asked&lt;/a&gt; whether targeting Mono&amp;rsquo;s CIL wasn&amp;rsquo;t a better idea than writing our own VM. Brent Dax &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09131.html&#34;&gt;quoted&lt;/a&gt; the &lt;a href=&#34;http://www.parrotcode.org/faq/&#34;&gt;FAQ&lt;/a&gt;, but Paolo Molaro &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09134.html&#34;&gt;wasn&amp;rsquo;t so sure&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-is-perl-6-perl-is-perl-6-perl-span&#34;&gt;&lt;span id=&#34;Is_Perl_6_Perl&#34;&gt;Is Perl 6 Perl?&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Aaron Sherman also &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09089.html&#34;&gt;asked&lt;/a&gt; whether Perl 6 should, in fact, be called Perl. Here&amp;rsquo;s &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg09112.html&#34;&gt;one particular response&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-parrot-spotlight-the-parrot-spotlight-span&#34;&gt;&lt;span id=&#34;The_Parrot_Spotlight&#34;&gt;The Parrot Spotlight&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Goff has been programming in Perl since roughly 1994, and designing Parrot since November 2001. He&amp;rsquo;s the author of the PMC base types, the miniperl and Scheme compilers, and is currently redesigning the PMC classes and working on Unicode support.&lt;/p&gt;

&lt;p&gt;Aside from Perl, Parrot, compilers, neural networks and genetic algorithms, his non-computer interests include origami, juggling, voracious reading, and playing guitar (seven notes and holding). He&amp;rsquo;s owned by the unofficial Parrot mascot, a precocious baby African Grey named &lt;a href=&#34;http://members.home.net/bcwarno/Perl6/percy.jpg&#34;&gt;Percy&lt;/a&gt;, who he&amp;rsquo;s been known to speak to in Japanese. Percy usually gives him blank stares, but was once heard to mutter &amp;lsquo;Speak English, idiot.&amp;rsquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (13 - 19 Jan 2002)</title>
      <link>http://localhost:1313/pub/2002/01/p6pdigest/20020119.html/</link>
      <pubDate>Wed, 23 Jan 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/01/p6pdigest/20020119.html/</guid>
      <description>

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. (Note that this is an @Home address, and will change sometime in the next two months.) Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl 6 is the major redesign and rewrite of the Perl language. Parrot is the virtual machine that Perl 6 (and other languages) will be written for. For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 166 messages across 69 threads, with 38 authors contributing. Again, most of the messages were patches.&lt;/p&gt;

&lt;h3 id=&#34;span-id-apocalypse-4-apocalypse-4-span&#34;&gt;&lt;span id=&#34;Apocalypse_4&#34;&gt;Apocalypse 4&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Larry Wall released &lt;a href=&#34;http://localhost:1313/pub/2002/01/15/apo4.html&#34;&gt;Apocalypse 4&lt;/a&gt;, covering blocks (and scopes and statements). It&amp;rsquo;s quite weighty, particularly up front, but here&amp;rsquo;s a quick glossy on what&amp;rsquo;s covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the new &lt;code&gt;given&lt;/code&gt; / &lt;code&gt;when&lt;/code&gt; switch block&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exceptions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;scope changes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no more required parentheses for expressions in block constructs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a lot more flow-control blocks&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multiple iterators in looping blocks&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are quite a few other tidbits inside. The Apocalypse was released late Thursday night, so little feedback, and no Damian Conway&amp;rsquo;s Exegesis, have been processed yet. I&amp;rsquo;ll pick up community reaction next week.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-strings-parrot-strings-span&#34;&gt;&lt;span id=&#34;Parrot_Strings&#34;&gt;Parrot Strings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jarkko Hietaniemi, the Perl 5.8.0 pumpking, &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07856.html&#34;&gt;posted&lt;/a&gt; a developing PDD on string handling in Parrot, largely based on his experience providing Unicode support for Perl 5. The main tenets of the proposal are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;separate binary data and its API from textual data and its API - at both the language and internals level&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;convert all text - string constants, source code, input data - to the internal representation: UTF-16, or a UCS-2 (non-surrogate) and UTF-16 (surrogate) hybrid&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;handle localization as a separate layer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the following discussion centered around regular expression character classes, and how to best implement them. Brent Dax is currently using UTF-32 within the regex engine, with a &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07859.html&#34;&gt;hybrid&lt;/a&gt; bitmap, binary lookup scheme for character classes, similar to the way that Perl 5 does. Jarkko suggested using an &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07884.html&#34;&gt;inversion list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This discussion is ongoing, so there&amp;rsquo;ll be more to report next week with this, too.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-parrot-spotlight-the-parrot-spotlight-span&#34;&gt;&lt;span id=&#34;The_Parrot_Spotlight&#34;&gt;The Parrot Spotlight&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Most folks already have an &lt;a href=&#34;http://dev.perl.org/perl6/people&#34;&gt;inkling&lt;/a&gt; of what Larry Wall, &lt;a href=&#34;http://www.yetanother.org/damian/&#34;&gt;Damian Conway&lt;/a&gt;, &lt;a href=&#34;http://www.yetanother.org/dan/&#34;&gt;Dan Sugalski&lt;/a&gt;, and Simon Cozens have been doing for Perl 6 and Parrot, so we&amp;rsquo;re going to pad space with some brief introductions to some of the other Parrot Troopers getting things done.&lt;/p&gt;

&lt;p&gt;Daniel Grunblatt is a 21 year old university student in Argentina. He&amp;rsquo;s been working in Perl for several years, but Parrot is his first time working on Perl internals. He&amp;rsquo;s the creator of Parrot&amp;rsquo;s JIT compiler, and also plays basketball and role-playing games.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;Perl Development Grant Fund&lt;/a&gt; exceeded $80,000, thanks to sizable contributions from &lt;a href=&#34;http://www.dyndns.org&#34;&gt;DynDNS&lt;/a&gt;, &lt;a href=&#34;http://pair.com&#34;&gt;pair Networks&lt;/a&gt;, and &lt;a href=&#34;http://www.usenix.org/sage/&#34;&gt;SAGE&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (6 - 12 Jan 2002)</title>
      <link>http://localhost:1313/pub/2002/01/p6pdigest/20020112.html/</link>
      <pubDate>Thu, 17 Jan 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/01/p6pdigest/20020112.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. (Note that this is an @Home address, and will change sometime in the next two months.) Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 224 messages across 114 threads, with 39 authors contributing. Most of the messages were patches.&lt;/p&gt;

&lt;h3 id=&#34;span-id-regexes-regexes-span&#34;&gt;&lt;span id=&#34;Regexes&#34;&gt;Regexes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Parrot now has &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07641.html&#34;&gt;primitive regex support&lt;/a&gt;, courtesy of Brent Dax. It includes a set of regex op primitives, including hooks for a &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07767.html&#34;&gt;generic regex compiler&lt;/a&gt;. Currently, however, there&amp;rsquo;s some &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07738.html&#34;&gt;debate&lt;/a&gt; over where &lt;code&gt;match&lt;/code&gt; should be implemented.&lt;/p&gt;

&lt;h3 id=&#34;span-id-naming-conventions-naming-conventions-span&#34;&gt;&lt;span id=&#34;Naming_Conventions&#34;&gt;Naming Conventions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;One of the larger threads discussed getting a handle on the current naming convention. Or, more accurately, the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07696.html&#34;&gt;lack of one&lt;/a&gt;. No consensus has been reached.&lt;/p&gt;

&lt;h3 id=&#34;span-id-warnings-warnings-span&#34;&gt;&lt;span id=&#34;Warnings&#34;&gt;Warnings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Parrot community received a well-deserved &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07756.html&#34;&gt;slap on the wrist&lt;/a&gt; from Parrot hacker Nicholas Clark. A common complaint on checking out our code is the incessant stream of warnings when compiling. You&amp;rsquo;re not alone.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07627.html&#34;&gt;posted&lt;/a&gt; some more random thoughts on Parrot&amp;rsquo;s implementation direction. He also started on the new &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07729.html&#34;&gt;memory allocator&lt;/a&gt;, and modified &lt;code&gt;life.pasm&lt;/code&gt; to be a new &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07703.html&#34;&gt;benchmark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;David M. Lloyd fixed a some problems that exist when the size of an opcode is smaller than the configured size of an integer value. (A perfectly legal scenario in Parrot.)&lt;/p&gt;

&lt;p&gt;Simon Glover also did significant hacking on arrays and hashes.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;Perl Development Grant Fund&lt;/a&gt; is holding steady at 26% (and change).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;
-   &lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;
-   &lt;a href=&#34;#Regexes&#34;&gt;Regexes&lt;/a&gt;
-   &lt;a href=&#34;#Naming_Conventions&#34;&gt;Naming Conventions&lt;/a&gt;
-   &lt;a href=&#34;#Warnings&#34;&gt;Warnings&lt;/a&gt;
-   &lt;a href=&#34;#Parroty_Bits&#34;&gt;Parroty Bits&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (30 December 2001 - 5 Jan 2002)</title>
      <link>http://localhost:1313/pub/2002/01/p6pdigest/20020105.html/</link>
      <pubDate>Sat, 05 Jan 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/01/p6pdigest/20020105.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 373 messages across 112 threads, with 50 authors contributing. Most of the messages were patches. For 2001, about 340 folks submitted over 9000 messages across 1300 or so threads.&lt;/p&gt;

&lt;h3 id=&#34;span-id-generators-generators-span&#34;&gt;&lt;span id=&#34;Generators&#34;&gt;Generators&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(8 posts) Clark C. Evans &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07228.html&#34;&gt;asked&lt;/a&gt; whether Parrot will support generators, a cousin to continuations. Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07241.html&#34;&gt;says&lt;/a&gt; coroutines and continuations are in, but didn&amp;rsquo;t really answer about generators. (As a sidebar, the rest of the thread was an interesting discussion about Python&amp;rsquo;s recent addition of generators and &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07246.html&#34;&gt;how they work&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-platform-fixes-platform-fixes-span&#34;&gt;&lt;span id=&#34;Platform_Fixes&#34;&gt;Platform Fixes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Win32 has had more work done on it; in particular, the continual makefile problems. LP64 environments, such as 64-bit Solaris and Tru64, also received a much-needed fix, allowing them to finally work.&lt;/p&gt;

&lt;h3 id=&#34;span-id-signed-vs-unsigned-signed-vs-unsigned-span&#34;&gt;&lt;span id=&#34;Signed_vs_Unsigned&#34;&gt;Signed vs. Unsigned&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;A huge signed-to-unsigned migration was finally begun. Somewhere between the original design and the initial code, the use of an unsigned partner to INTVAL (The Type Formerly Known As IV) was dropped. It&amp;rsquo;s now been reintroduced, and implicitly unsigned values are slowly being converted.&lt;/p&gt;

&lt;h3 id=&#34;span-id-strings-strings-span&#34;&gt;&lt;span id=&#34;Strings&#34;&gt;Strings&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There were a lot of cleanup and additions made to string support in Parrot. There was a mild discussion on being able to &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07307.html&#34;&gt;dereference&lt;/a&gt; a stringified address.&lt;/p&gt;

&lt;h3 id=&#34;span-id-fixed-sized-output-records-fixed-sized-output-records-span&#34;&gt;&lt;span id=&#34;Fixed_sized_Output_Records&#34;&gt;Fixed-sized Output Records&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The language list received a &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08840.html&#34;&gt;question&lt;/a&gt; from Tzadik Vanderhood, asking if a fixed-sized output record will be allowed, in line with its input record counterpart: &lt;code&gt;$/ =\80;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aaron Sherman gave a &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08841.html&#34;&gt;good response&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;Perl Development Grant Fund&lt;/a&gt; creeped up to 26%.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (16 - 22 December 2001)</title>
      <link>http://localhost:1313/pub/2001/12/p6pdigest/20011222.html/</link>
      <pubDate>Sat, 29 Dec 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/12/p6pdigest/20011222.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 110 messages across 32 threads, with 32 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-perl-development-grant-fund-the-perl-development-grant-fund-span&#34;&gt;&lt;span id=&#34;The_Perl_Development_Grant_Fund&#34;&gt;The Perl Development Grant Fund&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.perl-foundation.org/&#34;&gt;Perl Foundation&lt;/a&gt; is raising money to sponsor Damian &amp;ldquo;Mr. Language&amp;rdquo; Conway and Dan &amp;ldquo;Mr. Internals&amp;rdquo; Sugalski. We&amp;rsquo;re about a &lt;a href=&#34;https://donate.perl-foundation.org/index.pl?node_id=305&#34;&gt;quarter of the way&lt;/a&gt; there, so if you don&amp;rsquo;t know what to do with the $25 you received from Aunt Bertha for Christmas, now you do.&lt;/p&gt;

&lt;h3 id=&#34;span-id-a-jit-compiler-for-parrot-a-jit-compiler-for-parrot-span&#34;&gt;&lt;span id=&#34;A_JIT_Compiler_for_Parrot&#34;&gt;A JIT Compiler for Parrot&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Daniel Grunblatt has an &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07089.html&#34;&gt;early JIT compiler&lt;/a&gt; in CVS now. Although it currently works only under Linux x86, it&amp;rsquo;s certainly an impressive demonstration.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-io-perl-i-o-span&#34;&gt;&lt;span id=&#34;Perl_IO&#34;&gt;Perl I/O&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Melvin Smith &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07060.html&#34;&gt;asked&lt;/a&gt; whether Nick Ing-Simmons Perl I/O layer was going to be used for Parrot. Given Dan&amp;rsquo;s desire to support asynchronous I/O, there were several conflicting opinions. The final result, however, was that Melvin was going to &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07081.html&#34;&gt;start from scratch&lt;/a&gt;, using Nick&amp;rsquo;s Perl I/O code as a basis.&lt;/p&gt;

&lt;h3 id=&#34;span-id-miniperl-miniperl-span&#34;&gt;&lt;span id=&#34;MiniPerl&#34;&gt;MiniPerl&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Jeff Goff has been &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07048.html&#34;&gt;busy&lt;/a&gt; with MiniPerl, one of the languages distributed with Parrot.&lt;/p&gt;

&lt;h3 id=&#34;span-id-setline-setline-span&#34;&gt;&lt;span id=&#34;Setline&#34;&gt;Setline&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There was a brief &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07083.html&#34;&gt;debate&lt;/a&gt; about whether to inline or offline &lt;code&gt;setline&lt;/code&gt; operations . An out-of-band index seems to be the current direction.&lt;/p&gt;

&lt;h3 id=&#34;span-id-exporter-exporter-span&#34;&gt;&lt;span id=&#34;Exporter&#34;&gt;Exporter&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Brent Dax &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08824.html&#34;&gt;posted&lt;/a&gt; his thoughts on Perl 6&amp;rsquo;s &lt;code&gt;Exporter&lt;/code&gt; module. Michael Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08831.html&#34;&gt;pitched in&lt;/a&gt; his objections.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The Perl and Parrot communities wish you and yours a happy and safe holiday season.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (23 - 29 December 2001)</title>
      <link>http://localhost:1313/pub/2001/12/p6pdigest/20011229.html/</link>
      <pubDate>Sat, 29 Dec 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/12/p6pdigest/20011229.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a light week due to the holidays. There were 52 messages across 26 threads, with 14 authors contributing. About half were directly related to patch submission.&lt;/p&gt;

&lt;h3 id=&#34;span-id-jit-jit-span&#34;&gt;&lt;span id=&#34;JIT&#34;&gt;JIT&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The bulk of the non-patch postings this week centered around the JIT. Nothing earth-shattering, although problems with gcc 2.96 under Red Hat Linux have &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07165.html&#34;&gt;shut things down&lt;/a&gt; for that configuration.&lt;/p&gt;

&lt;h3 id=&#34;span-id-output-output-span&#34;&gt;&lt;span id=&#34;Output&#34;&gt;Output&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07164.html&#34;&gt;provided&lt;/a&gt; primitives for output.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://donate.perl-foundation.org&#34;&gt;Perl Development Grant Fund&lt;/a&gt; crested 25%.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (9 - 15 December 2001)</title>
      <link>http://localhost:1313/pub/2001/12/p6pdigest/20011215.html/</link>
      <pubDate>Wed, 19 Dec 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/12/p6pdigest/20011215.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information on the Perl 6 and Parrot development efforts, visit &lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;dev.perl.org&lt;/a&gt; and &lt;a href=&#34;http://www.parrotcode.org/&#34;&gt;parrotcode.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 137 messages across 44 threads, with 41 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-slice-context-slice-context-span&#34;&gt;&lt;span id=&#34;Slice_Context&#34;&gt;Slice Context&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(10 posts) Piers Cawley &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08814.html&#34;&gt;gave&lt;/a&gt; a huge list of slice examples, wondering what the expected context would be.&lt;/p&gt;

&lt;p&gt;Damian Conway&amp;rsquo;s &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08815.html&#34;&gt;first&lt;/a&gt;, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08810.html&#34;&gt;second&lt;/a&gt;, and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08813.html&#34;&gt;third&lt;/a&gt; answers and explanations.&lt;/p&gt;

&lt;h3 id=&#34;span-id-make-make-make-make-make-make-span&#34;&gt;&lt;span id=&#34;Make_make_Make&#34;&gt;Make &lt;code&gt;make&lt;/code&gt; Make&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(33 posts) There were several threads centered around getting &lt;code&gt;make&lt;/code&gt; to work everywhere - with &lt;code&gt;nmake&lt;/code&gt; being the most problematic.&lt;/p&gt;

&lt;p&gt;Jaen Saul had not &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06952.html&#34;&gt;one&lt;/a&gt;, but &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06969.html&#34;&gt;two&lt;/a&gt; major threads on &lt;code&gt;nmake&lt;/code&gt; incompatibilities in the Parrot makefile, causing a failed build on Win32. Both Jeff Goff and Robert Spier are working on a complete Perl replacement for the build process. (With Jeff having already committed a &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06989.html&#34;&gt;preliminary&lt;/a&gt; one.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jaen Saul &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06966.html&#34;&gt;provided&lt;/a&gt; a temporary solution one of his problems.&lt;/li&gt;
&lt;li&gt;Andy Dougherty and Garrett Goebel both tentatively &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07006.html&#34;&gt;fixed&lt;/a&gt; some of the other Win32 problems.&lt;/li&gt;
&lt;li&gt;Robert Spier &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07039.html&#34;&gt;patched&lt;/a&gt;&lt;code&gt;distclean&lt;/code&gt; to keep any CVS-related files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-performance-patches-performance-patches-span&#34;&gt;&lt;span id=&#34;Performance_Patches&#34;&gt;Performance Patches&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(5 posts) Jeff Goff &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg07017.html&#34;&gt;committed&lt;/a&gt; an early version of a Parrot optimizer, while Gregor Purdy &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06941.html&#34;&gt;submitted&lt;/a&gt; a simple JIT runtime loop for experimentation.&lt;/p&gt;

&lt;h3 id=&#34;span-id-aggregates-aggregates-span&#34;&gt;&lt;span id=&#34;Aggregates&#34;&gt;Aggregates&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(1 post) Jeff Goff also &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06939.html&#34;&gt;turned in&lt;/a&gt; the aggregate keys code, leading the way for development on arrays and hashes.&lt;/p&gt;

&lt;h3 id=&#34;span-id-bytecode-portability-bytecode-portability-span&#34;&gt;&lt;span id=&#34;Bytecode_Portability&#34;&gt;Bytecode Portability&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(7 posts) Bryan C. Warnock &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06918.html&#34;&gt;posted&lt;/a&gt; his thoughts on Parrot bytecode.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Dave Mitchell has finally been given a PDD number (7) for the coding standards, so they should be up on &lt;a href=&#34;http://dev.perl.org/perl6/pdd/&#34;&gt;dev.perl.org&lt;/a&gt; soon.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (2 - 8 December 2001)</title>
      <link>http://localhost:1313/pub/2001/12/p6pdigest/20011208.html/</link>
      <pubDate>Mon, 10 Dec 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/12/p6pdigest/20011208.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summary, as with past summaries, can be found in &lt;a href=&#34;http://members.home.com/bcwarno/Perl6/digests/&#34;&gt;here&lt;/a&gt;. Please send additions, submissions, corrections, kudos, and complaints to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 203 messages across 51 threads, with 46 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-003-parrot-0-03-span&#34;&gt;&lt;span id=&#34;Parrot_003&#34;&gt;Parrot 0.03&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Parrot 0.03 should now be available. From the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06916.html&#34;&gt;release notes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What have we unleashed? As promised, the latest release of Parrot, 0.0.3, contains support for complex, language-specific data types to be created. PMCs, or Parrot Magic Cookies, are abstract object data types, with class libraries written in C specifying their behaviour.&lt;/p&gt;

&lt;p&gt;To start you off, we have implemented nice, happy, polymorphic Perl undef, Perl Integer, Perl String and Perl Number classes. There&amp;rsquo;s also a default class you can inherit from if you&amp;rsquo;re rolling your own data types. See docs/vtables.pod for all the juicy details.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not all, however&amp;hellip; We&amp;rsquo;ve more documentation, examples, a minature Scheme implementation, support for pushing and popping onto register and global user stacks, subroutine support for Jako, better platform support, and a whole lot more. See the NEWS and ChangeLog files for the rest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cpan.org/authors/id/S/SI/SIMON/parrot-0.0.3.tar.gz&#34;&gt;Download&lt;/a&gt; it and give it a try.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parrot-faq-02-parrot-faq-0-2-span&#34;&gt;&lt;span id=&#34;Parrot_FAQ_02&#34;&gt;Parrot FAQ 0.2&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Adam Turoff has coalesced many of the common questions on Parrot and Perl 6 into the &lt;a href=&#34;http://www.panix.com/~ziggy/parrot.html&#34;&gt;Parrot FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-gcc-register-transfer-language-the-gcc-register-transfer-language-span&#34;&gt;&lt;span id=&#34;The_GCC_Register_Transfer_Language&#34;&gt;The GCC Register Transfer Language&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(17 posts) Terrence Brannon &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06739.html&#34;&gt;asked&lt;/a&gt; why Parrot wasn&amp;rsquo;t simply compiling to GCC&amp;rsquo;s RTL, instead of having to invent a brand new pseudo-architecture.&lt;/p&gt;

&lt;p&gt;Dan Sugalski:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because there are platforms where GCC doesn&amp;rsquo;t run.&lt;/li&gt;
&lt;li&gt;Because GCC&amp;rsquo;s licensing is onerously restrictive for our purposes.&lt;/li&gt;
&lt;li&gt;Because it makes embedding an interpreter a pain.&lt;/li&gt;
&lt;li&gt;Because we dynamically recompile and redefine ourselves, which makes this difficult.&lt;/li&gt;
&lt;li&gt;Because GCC&amp;rsquo;s codegen is pretty bad.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;span-id-parrot-execution-environment-parrot-execution-environment-span&#34;&gt;&lt;span id=&#34;Parrot_Execution_Environment&#34;&gt;Parrot Execution Environment&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(14 posts) Nguon Hao Ching &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06766.html&#34;&gt;wondered&lt;/a&gt; how external arguments - via the command line, although the environment was quickly added to the discussion - were going to work in Parrot.&lt;/p&gt;

&lt;p&gt;Weighing particularly heavy on Dan&amp;rsquo;s mind - embedded interpreters and multi-threaded applications:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Who has control over the environment? The primary thread? All the threads? Should some have access and others not? Is there read-only access, or access to some but not all of the variables? Can an interpreter create or delete entries, and if so which ones? How much control does an embedder have, anyway? Should we call a separate function when getting/setting/querying/deleting? Do we even know which variables exist, or do we have to ask? Is it even thread-safe?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kinda messy, and since we can put it off for a bit, I&amp;rsquo;d as soon do that. We may have a half-kludge solution, but since that&amp;rsquo;s all we have at the moment I&amp;rsquo;d rather wait and maybe a stroke of genius will occur. Or maybe not, in which case we&amp;rsquo;re not really worse off than we are now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-string-to-number-conversions-string-to-number-conversions-span&#34;&gt;&lt;span id=&#34;String_to_Number_Conversions&#34;&gt;String-to-Number Conversions&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) Alex Gough &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06748.html&#34;&gt;submitted&lt;/a&gt;, then &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06755.html&#34;&gt;withdrew&lt;/a&gt;, a patch to move string-to-number conversions to the encoding layer. (Alex discovered, as Tom Hughes pointed out, that the encoding layer is character agnostic, and that digit determination needs to occur at the character set layer.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-aggregate-keys-aggregate-keys-span&#34;&gt;&lt;span id=&#34;Aggregate_Keys&#34;&gt;Aggregate Keys&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) Dan Sugalski posted &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg06760.html&#34;&gt;his thoughts&lt;/a&gt; on aggregate keys. Jeff Goff is currently working on implementation.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Currently, Parrot is being developed without a license. Inside sources indicate that Larry is coming to a final decision on this, and Parrot should have one soon.&lt;/p&gt;

&lt;p&gt;Parrot now has an IRC channel on &lt;code&gt;irc.rhizomatic.net&lt;/code&gt; for some of the more mundane day-to-day development coordination. Join &lt;code&gt;#parrot&lt;/code&gt; and hang out some time.&lt;/p&gt;

&lt;p&gt;It looks like The Parrot Conference will be in San Diego, July 22-26, 2002. More info will be forthcoming, but get your vacation notices in now. (Yes, I believe that some other Open Source stuff will be going on, too. :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://members.home.com/bcwarno/Perl6/&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (2 - 8 September 2001)</title>
      <link>http://localhost:1313/pub/2001/09/p6pdigest/20010908.html/</link>
      <pubDate>Sat, 08 Sep 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/09/p6pdigest/20010908.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6 News&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#MY_Goodness&#34;&gt;&lt;code&gt;%MY::&lt;/code&gt; Goodness&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Prototypes&#34;&gt;Prototypes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Documents_Released&#34;&gt;Documents Released&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Math_Functions_To_Add&#34;&gt;Math Functions To Add&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Parroty_Bits&#34;&gt;Parroty Bits&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a busy week in the Perl 6 community with 363 messages contributed by 42 authors across 32 threads. A fourth of the threads comprised over three-fourths of the traffic.&lt;/p&gt;

&lt;h3 id=&#34;span-id-my-goodness-my-goodness-span&#34;&gt;&lt;span id=&#34;MY_Goodness&#34;&gt;&lt;code&gt;%MY::&lt;/code&gt; Goodness&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;There were two huge discussions on the new &lt;code&gt;%MY::&lt;/code&gt; interface to the lexical symbol table.&lt;/p&gt;

&lt;p&gt;(70 posts) The major thread, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08203.html&#34;&gt;started&lt;/a&gt; by Ken Fox, centered around &lt;code&gt;%MY::&lt;/code&gt; as a language feature to be used and abused.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is stuff like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%MY::{&#39;$lexical_var&#39;} = \$other_var;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;supposed to be a compile-time or run-time feature?&lt;/p&gt;

&lt;p&gt;Modifying the caller&amp;rsquo;s environment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$lexscope = caller().{MY};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$lexscope{&#39;&amp;amp;die&#39;} = &amp;amp;die_hard;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;is especially annoying because it means that I can&amp;rsquo;t trust lexical variables anymore. The one good thing about Damian&amp;rsquo;s caller() example is that it appears in an import() function. That implies compile-time, but isn&amp;rsquo;t as clear as Larry&amp;rsquo;s Apocalypse.&lt;/p&gt;

&lt;p&gt;This feature has significant impact on all parts of the implementation, so it would be nice if a little more was known. A basic question: how much performance is this feature worth?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the discussions addressed adjusting lexical variables during runtime, and what semantics that would change with what is currently Perl 5&amp;rsquo;s lexical variables. Of particular concern, how runtime adjustment of lexical variables could defeat the current compile-time optimizations for variable resolution that Perl 5 currently enjoys, and whether &lt;code&gt;%MY::&lt;/code&gt; symbol resolution is confined to a physical scope, whereas a lexical &lt;code&gt;$x&lt;/code&gt; may refer to a lexical in an outer scope. These issues are being mulled over.&lt;/p&gt;

&lt;p&gt;(45 posts) Brent Dax also &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03501.html&#34;&gt;asked&lt;/a&gt; whether &lt;code&gt;%MY::&lt;/code&gt; should be a real symbol table instead of the current scratchpad structure currently used by Perl 5. There was a lot of debate on the differences between lexical and local global variables, and whether that distinction would help or hinder a transition to a true symbol table. Much of this decision will be affected by the linguistic questions discussed above.&lt;/p&gt;

&lt;h3 id=&#34;span-id-prototypes-prototypes-span&#34;&gt;&lt;span id=&#34;Prototypes&#34;&gt;Prototypes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(20 posts) I &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08188.html&#34;&gt;proposed&lt;/a&gt; a method for runtime prototype checking and value assignment that was generally accepted.&lt;/p&gt;

&lt;h3 id=&#34;span-id-documents-released-documents-released-span&#34;&gt;&lt;span id=&#34;Documents_Released&#34;&gt;Documents Released&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(71 posts) Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03519.html&#34;&gt;released&lt;/a&gt; an overview of the Parrot interpreter. This is mostly codifying and coalescing much of the information that has been presented before. Feedback has been rolled into the docs that will be provided with the first Parrot release, so you can catch the updated info there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03574.html&#34;&gt;Later stages&lt;/a&gt; of the thread turned into a debate between Paolo Molaro and Dan Sugalski, centered once again around the decision to do a register-based virtual machine.&lt;/p&gt;

&lt;p&gt;(5 posts) Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03666.html&#34;&gt;re-released&lt;/a&gt; the second version of PDD 6: Parrot Assembly Language.&lt;/p&gt;

&lt;p&gt;(3 posts) Dave Storrs &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08250.html&#34;&gt;released&lt;/a&gt; the next version of his Perl 6 Debugger API PDD.&lt;/p&gt;

&lt;p&gt;(16 posts) I released versions &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08165.html&#34;&gt;one&lt;/a&gt; and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08269.html&#34;&gt;two&lt;/a&gt; of my &amp;ldquo;Statements and Blocks&amp;rdquo; language specification.&lt;/p&gt;

&lt;h3 id=&#34;span-id-math-functions-to-add-math-functions-to-add-span&#34;&gt;&lt;span id=&#34;Math_Functions_To_Add&#34;&gt;Math Functions To Add&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(30 posts) Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03681.html&#34;&gt;queried&lt;/a&gt; the Perl community for math functions to add to Parrot.&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;By the time you read this, the initial Parrot baseline should be available via anonymous CVS. You may find details &lt;a href=&#34;http://dev.perl.org/cvs&#34;&gt;here&lt;/a&gt;. Simon Cozens holds the source pumpkin.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (26 August - 1 September 2001)</title>
      <link>http://localhost:1313/pub/2001/09/p6pdigest/20010901.html/</link>
      <pubDate>Sat, 01 Sep 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/09/p6pdigest/20010901.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6 News&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Expunge_Implicit___Passing&#34;&gt;Expunge Implicit &lt;code&gt;@_&lt;/code&gt; Passing&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Finalization_and_Deterministic_Destruction&#34;&gt;Finalization and Deterministic Destruction&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Multiple_Dispatch_on_Objects&#34;&gt;Multiple Dispatch on Objects&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Program_Metadata&#34;&gt;Program Metadata&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#_versus_&#34;&gt;&lt;code&gt;!&amp;lt;&lt;/code&gt; versus &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Parroty_Bits&#34;&gt;Parroty Bits&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Perl 6 lists saw a little more traffic during this week: 137 messages across 19 threads, with 40 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-expunge-implicit-passing-expunge-implicit-passing-span&#34;&gt;&lt;span id=&#34;Expunge_Implicit___Passing&#34;&gt;Expunge Implicit &lt;code&gt;@_&lt;/code&gt; Passing&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(22 posts) This topic from &lt;a href=&#34;http://localhost:1313/pub/2001/08/p6pdigest/20010818.html#Perl_6_Language&#34;&gt;two weeks ago&lt;/a&gt; came up again, as Ken Fox &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08070.html&#34;&gt;mentioned&lt;/a&gt; its use in redirectors. Michael Schwern suggested using &lt;code&gt;goto &amp;amp;code&lt;/code&gt; instead, and provided this final justification:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not just $method-&amp;gt;(@_); or &amp;amp;{$method}(@_); or goto $method?&lt;/p&gt;

&lt;p&gt;Any time you want to implicitly pass @_, you can just as easily *explicitly* pass it or use goto. As we&amp;rsquo;re not doing pass-throughs all over the place, it&amp;rsquo;s not the sort of thing you want implicit, as opposed to, say $_.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(This thread then &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08082.html&#34;&gt;devolved&lt;/a&gt; into a general debate on the usefulness of Java final classes.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-finalization-and-deterministic-destruction-finalization-and-deterministic-destruction-span&#34;&gt;&lt;span id=&#34;Finalization_and_Deterministic_Destruction&#34;&gt;Finalization and Deterministic Destruction&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) Hong Zhang, however, did &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08089.html&#34;&gt;branch off&lt;/a&gt; and talk about the differentiation between finalization and destruction. There were then quite a few posts lamenting the demise of deterministic destruction with the move away from ref counting towards a more complex garbage collection scheme.&lt;/p&gt;

&lt;p&gt;Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08106.html&#34;&gt;pointed out&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GC has nothing to do with finalization. Many people want it to, and seem to conflate the two, but they&amp;rsquo;re separate. Dead object detection and cleanup doesn&amp;rsquo;t have to be tied to memory GC. It won&amp;rsquo;t be in perl 6. The perl 6 engine will guarantee whatever cleanup/finalization order and timliness that Larry puts into the language definition. That&amp;rsquo;s not a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-multiple-dispatch-on-objects-multiple-dispatch-on-objects-span&#34;&gt;&lt;span id=&#34;Multiple_Dispatch_on_Objects&#34;&gt;Multiple Dispatch on Objects&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(11 posts) The first of two threads on multiple dispatch started &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08110.html&#34;&gt;here&lt;/a&gt;, with two examples &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08113.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08114.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was talk about whether it was an OO technique, how it should work with the dynamicness of Perl, and what the best, most efficient manner of implementing multimethod dispatch is. In the end, Perl will support some form of pluggable multimethod dispatcher, although that was about all that was agreed upon.&lt;/p&gt;

&lt;p&gt;(10 posts) The &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08127.html&#34;&gt;second thread&lt;/a&gt; decoupled multiple dispatch from objects, creating what it essentially subroutine overloading (by signature).&lt;/p&gt;

&lt;h3 id=&#34;span-id-program-metadata-program-metadata-span&#34;&gt;&lt;span id=&#34;Program_Metadata&#34;&gt;Program Metadata&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(15 posts) I &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08129.html&#34;&gt;mentioned&lt;/a&gt; a few pieces of metadata that I would like access to from within a Perl 6 program. The bulk of the thread was about how to &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08132.html&#34;&gt;access&lt;/a&gt; the source of a script from within a script in Perl 5.&lt;/p&gt;

&lt;h3 id=&#34;span-id-versus-versus-span&#34;&gt;&lt;span id=&#34;_versus_&#34;&gt;&lt;code&gt;!&amp;lt;&lt;/code&gt; versus &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(7 posts) Raptor &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08151.html&#34;&gt;suggested&lt;/a&gt; adding &lt;code&gt;!&amp;gt;&lt;/code&gt; and &lt;code&gt;!&amp;lt;&lt;/code&gt; to the logical operators as Another Way To Do It. Reactions were mixed, but no technical reason was given why it couldn&amp;rsquo;t be. (It should be noted that in tri-state logic, where he saw this, &lt;code&gt;!&amp;lt;&lt;/code&gt; is not the same as &lt;code&gt;&amp;gt;=&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-parroty-bits-parroty-bits-span&#34;&gt;&lt;span id=&#34;Parroty_Bits&#34;&gt;Parroty Bits&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Simon Cozens and Dan Sugalski are finishing up the seed code for the Parrot interpreter base.&lt;/p&gt;

&lt;p&gt;Dan:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The broad design of the Parrot internals is sufficiently complete to start implementing parts, and we are. We&amp;rsquo;ve the first cut core of an interpreter and, while I figure we&amp;rsquo;ll probably rewrite the thing at least once before final release, it runs. You can now write code in Parrot assembler, assemble it, and run the results.&lt;/p&gt;

&lt;p&gt;Most of the defined opcodes don&amp;rsquo;t have corresponding code for them, so it&amp;rsquo;s limited at the moment to integer and float operations with some control flow (branch, jump, and if) but more will be on the way soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simon:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve been sitting down and writing bits of Perl 6 (I&amp;rsquo;m working primarily on the string functions at the moment, because I can do that without getting in Dan&amp;rsquo;s hair too much) and also collecting our thoughts on the interpreter into documents that will specify the API and as much of the Grand Design as people need to know to be able to start helping.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next phase of Parrot will be a code review - for the Perl internals community to poke and prod and make sense of what Dan and Simon have done. The community will provide feedback, and Dan and Simon will disappear for a brief period, before the code is opened up for development.&lt;/p&gt;

&lt;p&gt;After going public, work will mostly progress according to Dan&amp;rsquo;s To Do list.&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The last I heard, the next pair of stone tablets from Larry Wall and Damian Conway are coming down the mountain. That&amp;rsquo;s my story, and I&amp;rsquo;m sticking to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (19 - 25 August 2001)</title>
      <link>http://localhost:1313/pub/2001/08/p6pdigest/20010825.html/</link>
      <pubDate>Mon, 27 Aug 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p6pdigest/20010825.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6 News&lt;/p&gt;
&lt;p&gt;• &lt;a href=&#34;#Closures&#34;&gt;Closures&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Method_Signatures&#34;&gt;Method Signatures&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Foobar&#34;&gt;Foo::$bar&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Perl_6_Internals_Yes_There_Are_Some&#34;&gt;Perl 6 Internals (Yes, There Are Some...)&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#More_Modules&#34;&gt;More Modules&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
• &lt;a href=&#34;#Last_Words&#34;&gt;Last Words&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another quiet week, with only 52 messages. 22 authors contributed to 10 threads.&lt;/p&gt;

&lt;h3 id=&#34;span-id-closures-closures-span&#34;&gt;&lt;span id=&#34;Closures&#34;&gt;Closures&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(17 posts) Dave Mitchell &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08032.html&#34;&gt;started&lt;/a&gt; the debate on whether closures should be explicitly declared, by way of having lexical variables not import into nested blocks implicitly. Some areas of discussion centered around whether &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08043.html&#34;&gt;named subs are closures&lt;/a&gt;, &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08034.html&#34;&gt;closures are ever created accidentally&lt;/a&gt;, and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08038.html&#34;&gt;the current behavior is correct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dave further provided some insight into &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08039.html&#34;&gt;how closures actually work&lt;/a&gt;, to help explain his point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the $x:&lt;/p&gt;

&lt;p&gt;foo() is a closure created at compile time. By the time the main {} block has been executed (but before foo() is called), the $outer:x is undef, and $foo:x is &amp;lsquo;bar&amp;rsquo; (standard closure stuff). When foo() is executed, the anon sub is cloned, and at that time, $anon:x is set from from foo&amp;rsquo;s pad, so it gets &amp;lsquo;bar&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Without the $x:&lt;/p&gt;

&lt;p&gt;foo is no longer a closure - ie it doesnt have a private copy of $x in its pad. At cloning time, sub {$x} picks up its value of $x from $outer:x, since there isn&amp;rsquo;t a $x in foo&amp;rsquo;s pad - thus it picks up &amp;lsquo;undef&amp;rsquo; from $outer:x that went out of scope a while ago.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-method-signatures-method-signatures-span&#34;&gt;&lt;span id=&#34;Method_Signatures&#34;&gt;Method Signatures&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(12 posts) Damian Conway &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08052.html&#34;&gt;answered&lt;/a&gt; last week&amp;rsquo;s question on whether subroutine signatures will apply to methods in Perl 6. There was some subsequent debate on how strict Perl&amp;rsquo;s optional typing would need to be, and how easily it would still be to circumvent through regular Perl magic.&lt;/p&gt;

&lt;h3 id=&#34;span-id-foobar-foo-bar-span&#34;&gt;&lt;span id=&#34;Foobar&#34;&gt;&lt;code&gt;Foo::$bar&lt;/code&gt;&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(2 posts) Brent Dax &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08060.html&#34;&gt;asked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was thinking about Perl 6 today, and thought of something: if the sigil is now part of a variable&amp;rsquo;s name, does that mean that $Foo::bar should actually be Foo::$bar in Perl 6?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael Schwern&amp;rsquo;s &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08063.html&#34;&gt;thinking&lt;/a&gt;was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Techincally &amp;lsquo;bar&amp;rsquo; is shorthand for the complete name, &amp;lsquo;Foo::bar&amp;rsquo;. So &amp;lsquo;$Foo::bar&amp;rsquo; would remain.&lt;/p&gt;

&lt;p&gt;Besides, Foo::$bar looks funny.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-perl-6-internals-yes-there-are-some-perl-6-internals-yes-there-are-some-span&#34;&gt;&lt;span id=&#34;Perl_6_Internals_Yes_There_Are_Some&#34;&gt;Perl 6 Internals (Yes, There Are Some&amp;hellip;)&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(5 posts) Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03459.html&#34;&gt;announced&lt;/a&gt; that he&amp;rsquo;s got code:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve got the rudiments of the parrot interpreter and assembler built and running. (I get around 23M ops/sec on a 700MHz Alpha EV6) I&amp;rsquo;m beating it up enough to get it into a reasonably released state, so while I&amp;rsquo;m doing that&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simon Cozens made &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03461.html&#34;&gt;this suggestion&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On an unrelated note, and seeing Dan [and] Bryan&amp;rsquo;s experiments with different kinds of switch/dispatch, I think it makes sense to separate out ops which correspond to PMC vtable functions (add, subtract, etc.) and those which don&amp;rsquo;t. Those which do can be done with a switch to save a function call, and those which don&amp;rsquo;t can use function pointers. This achieves the same objective as auto-generating op wrappers around vtable functions, (saving one level of indirection) while leveraging the gain from a split-level op despatch loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;span-id-more-modules-more-modules-span&#34;&gt;&lt;span id=&#34;More_Modules&#34;&gt;More Modules&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(7 posts) John Siracusa &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00187.html&#34;&gt;continued&lt;/a&gt; the discussion on the Perl 6 module plan, calling for more conformity in APIs, and deepening the namespace heirarchy.&lt;/p&gt;

&lt;p&gt;Kirrily Robert &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00191.html&#34;&gt;pointed&lt;/a&gt; to some work she&amp;rsquo;s been doing on the &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/&#34;&gt;perl5-porters&lt;/a&gt; list - &lt;a href=&#34;http://archive.develooper.com/perl5-porters@perl.org/msg62256.html&#34;&gt;perlmodstyle&lt;/a&gt; - in preparation for Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;We should be seeing Apocalypse 3 (Larry Wall) and Exegesis 3 (Damian Conway) sometime this week, if things are on schedule. Nathan Torkington is currently &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03467.html&#34;&gt;evaluating&lt;/a&gt;&lt;a href=&#34;http://sourceforge.net/&#34;&gt;SourceForge&lt;/a&gt; as the Perl 6 code repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d like to keep the code on Sourceforge from the get-go. I don&amp;rsquo;t have much experience with Sourceforge, though, and would like to talk to someone who has. Which bits work well? Which bits aren&amp;rsquo;t worth the effort? Any tips or tricks to pass on?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;rsquo;ve got some opinions, pass them on to &lt;a href=&#34;mailto:gnat@oreilly.com&#34;&gt;Nat&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week on Perl 6 (12 - 18 August 2001)</title>
      <link>http://localhost:1313/pub/2001/08/p6pdigest/20010818.html/</link>
      <pubDate>Tue, 21 Aug 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p6pdigest/20010818.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 44 messages across 10 threads, with 26 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-the-modules-plan-the-modules-plan-span&#34;&gt;&lt;span id=&#34;The_Modules_Plan&#34;&gt;The Modules Plan&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(21 posts) The discussion &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00163.html&#34;&gt;continued&lt;/a&gt; with talk about CPAN, namespaces, and implementations.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-internals-perl-6-internals-span&#34;&gt;&lt;span id=&#34;Perl_6_Internals&#34;&gt;Perl 6 Internals&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(1 post) Simon Cozens &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03449.html&#34;&gt;gave an update&lt;/a&gt; on what he&amp;rsquo;s up to with Perl 6.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The other front is, of course, code. I have started writing some code which sets up vtables, marshals access to an object&amp;rsquo;s method through its vtable, and helps you write new object types. I&amp;rsquo;m also trying to develop an integer object type. All it does at the moment is the infrastructure that allows you to create a new integer PMC and get and set its value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(1 post) Uri Guttman &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03453.html&#34;&gt;suggested&lt;/a&gt; that some perl ops should be written in Perl.&lt;/p&gt;

&lt;p&gt;(11 posts) Numerous folks continued the &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03441.html&#34;&gt;discussion&lt;/a&gt; on the Coding Conventions PDD.&lt;/p&gt;

&lt;h3 id=&#34;span-id-perl-6-language-perl-6-language-span&#34;&gt;&lt;span id=&#34;Perl_6_Language&#34;&gt;Perl 6 Language&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(2 posts) Michael Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08024.html&#34;&gt;asked&lt;/a&gt; that implicit &lt;code&gt;@_&lt;/code&gt; passing be removed. Damian replied that &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08025.html&#34;&gt;it would be&lt;/a&gt;, although as a side-effect to some new behavior.&lt;/p&gt;

&lt;p&gt;(1 post) Garrett Goebel &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08026.html&#34;&gt;asked&lt;/a&gt; whether subroutine signatures will apply to methods in Perl 6.&lt;/p&gt;

&lt;p&gt;(1 post) John Siracusa &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08027.html&#34;&gt;asked&lt;/a&gt; if properties were &lt;code&gt;temp&lt;/code&gt;able.&lt;/p&gt;

&lt;p&gt;(1 post) I &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08028.html&#34;&gt;brought up&lt;/a&gt; an inconsistency in the visibility of Perl 5&amp;rsquo;s &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, and &lt;code&gt;local&lt;/code&gt;, implicitly asking if it could be changed for Perl 6.&lt;/p&gt;

&lt;p&gt;(3 posts) Raptor &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08029.html&#34;&gt;requested&lt;/a&gt; a way to preserve leading white space in Here Docs. Michael Schwern &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08031.html&#34;&gt;pointed out&lt;/a&gt; that this is capable with the new functionality.&lt;/p&gt;

&lt;h3 id=&#34;span-id-last-words-last-words-span&#34;&gt;&lt;span id=&#34;Last_Words&#34;&gt;Last Words&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Quiet week aside, Perl 6 is alive and well. Dan Sugalski and Simon Cozens are finishing some last minute work that could be the seed for the Perl 6 internals. Larry and Damian are working on the next Apocalypse and Exegesis, respectively. They should be released in about a week.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6 (5 - 11 August 2001)</title>
      <link>http://localhost:1313/pub/2001/08/p6pdigest/20010811.html/</link>
      <pubDate>Sat, 11 Aug 2001 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2001/08/p6pdigest/20010811.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-notes-notes-span&#34;&gt;&lt;span id=&#34;Notes&#34;&gt;Notes&lt;/span&gt;&lt;/h3&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;p&gt;This Week in Perl 6&lt;/p&gt;
•&lt;a href=&#34;#Notes&#34;&gt;Notes&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#Damians_Perl_6_Talk_Take_Two&#34;&gt;Damian&#39;s Perl 6 Talk, Take Two&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#Opcode_Dispatching&#34;&gt;Opcode Dispatching&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#Modules&#34;&gt;Modules&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#given_Properties__when_Proper_&#34;&gt;given (Properties) { when: Proper }&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
•&lt;a href=&#34;#Evalos_Vs_Evil_Woes&#34;&gt;Eval/o&#39;s Vs. Evil Woes&lt;/a&gt;
&lt;a href=&#34;#PDDs_Released&#34;&gt;PDDs Released&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can subscribe to an email version of this summary by sending an empty message to &lt;a href=&#34;mailto:perl6-digest-subscribe@netthink.co.uk&#34;&gt;perl6-digest-subscribe@netthink.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please send corrections and additions to &lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;bwarnock@capita.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were 129 messages across 19 threads, with 31 authors contributing.&lt;/p&gt;

&lt;h3 id=&#34;span-id-damians-perl-6-talk-take-two-damian-s-perl-6-talk-take-two-span&#34;&gt;&lt;span id=&#34;Damians_Perl_6_Talk_Take_Two&#34;&gt;Damian&amp;rsquo;s Perl 6 Talk, Take Two&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Damian Conway has released an updated version of his &lt;a href=&#34;http://dev.perl.org/perl6/talks/Perl6-Notes-200108.v2.pdf&#34;&gt;Perl 6 slides&lt;/a&gt; (PDF). Plenty of hints of things to come in this one&amp;hellip; or of things &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08023.html&#34;&gt;that came&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-opcode-dispatching-opcode-dispatching-span&#34;&gt;&lt;span id=&#34;Opcode_Dispatching&#34;&gt;Opcode Dispatching&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(32 posts) There were some brief peeks into the opcode dispatch engine. &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03391.html&#34;&gt;Here&lt;/a&gt;, Dan Sugalski explains why he wants 32-bit-wide opcode tables&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt;but a pure 32 bit table can be very large (and sparse) if we have those gaps you seem to propose below.&lt;/p&gt;

&lt;p&gt;True, but only if we actually use the whole set. We&amp;rsquo;re 32 bit for a few reasons, none of which are to provide a billion opcodes:&lt;/p&gt;

&lt;p&gt;* So all the pieces of the op stream are the same size&lt;/p&gt;

&lt;p&gt;* It avoids alignment problems we&amp;rsquo;ll see on many processors&lt;/p&gt;

&lt;p&gt;* It means the endian preprocessor we&amp;rsquo;ll need on some platforms can be very fast, as it can just byteswap everything rather than actually need to know which pieces are which size.&lt;/p&gt;

&lt;p&gt;Basically everything gets compacted down at one end, and we&amp;rsquo;ll probably (dynamically) limit the table size to 1K custom opcodes in force at once or something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;hellip;and how multiple dispatch tables will be handled.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simple. As I said, the opcode function table is lexically scoped. Jump into code from another scope and the &amp;lsquo;correct&amp;rsquo; function table is automagically (well, OK, there&amp;rsquo;s an opcode for this, but&amp;hellip;) installed for you. So while opcode 774 used to be &amp;ldquo;socketpair&amp;rdquo;, in the new lexical scope it might be &amp;ldquo;LWP::Simple::get&amp;rdquo;, but that&amp;rsquo;s OK because since we swapped in a new table everything&amp;rsquo;s just fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other brief discussions included Dan on &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03388.html&#34;&gt;opcode numbering&lt;/a&gt;, &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03394.html&#34;&gt;shared libraries&lt;/a&gt;, and &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03401.html&#34;&gt;event handling&lt;/a&gt;; and myself on &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03415.html&#34;&gt;the latest in testing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;span-id-modules-modules-span&#34;&gt;&lt;span id=&#34;Modules&#34;&gt;Modules&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(28 posts) Kirrily Robert &lt;a href=&#34;http://archive.develooper.com/perl6-stdlib@perl.org/msg00136.html&#34;&gt;posted&lt;/a&gt; what she feels the Perl 6 community should do for the next generation of Perl&amp;rsquo;s reusable code base.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At YAPC, I told Nat I wanted to get involved with modules-related work for Perl 6. To that end, I&amp;rsquo;ve put together a bit of a list of what I think needs to be done in that area. The list appears below, in POD format. If you&amp;rsquo;re interested in being involved in this stuff, or just have comments, please follow up to perl6-stdlib@perl.org, which is probably the most suitable place available to us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There was lively discussion, mostly giving examples of the points she made in her posting. (Namespace messes, implementation issues, etc.)&lt;/p&gt;

&lt;h3 id=&#34;span-id-given-properties-when-proper-given-properties-when-proper-span&#34;&gt;&lt;span id=&#34;given_Properties__when_Proper_&#34;&gt;given (Properties) { when: Proper }&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(10 posts) The discussion on properties continued with Damian Conway &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08003.html&#34;&gt;posting&lt;/a&gt; the revised draft he sent to Larry for (re)consideration, and &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08001.html&#34;&gt;answering&lt;/a&gt; a few questions on global variables:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But, yes, I would fully expect that the global punctuation I/O control variables will become attributes/properties/traits of individual filehandles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(2 posts) Damian also &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08002.html&#34;&gt;explained&lt;/a&gt; in detail about the &lt;code&gt;given&lt;/code&gt;/ &lt;code&gt;when&lt;/code&gt; construct.&lt;/p&gt;

&lt;h3 id=&#34;span-id-evalos-vs-evil-woes-eval-o-s-vs-evil-woes-span&#34;&gt;&lt;span id=&#34;Evalos_Vs_Evil_Woes&#34;&gt;Eval/o&amp;rsquo;s Vs. Evil Woes&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(5 posts) David Nicol &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg07996.html&#34;&gt;proposed&lt;/a&gt; an &lt;code&gt;o&lt;/code&gt; switch for string evals - indicating &amp;lsquo;compile once&amp;rsquo;, a la the regex &lt;code&gt;o&lt;/code&gt; switch - to solve some issues he has with alternate syntaxes.&lt;/p&gt;

&lt;p&gt;Bart Lateur and Marc-Oliver Ihm went &lt;a href=&#34;http://archive.develooper.com/perl6-language@perl.org/msg08012.html&#34;&gt;one step further&lt;/a&gt;, by just having &lt;code&gt;eval&lt;/code&gt; compile the code and return the compiled code block.&lt;/p&gt;

&lt;h3 id=&#34;span-id-pdds-released-pdds-released-span&#34;&gt;&lt;span id=&#34;PDDs_Released&#34;&gt;PDDs Released&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;(2 posts) Dave Mitchell &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03383.html&#34;&gt;released&lt;/a&gt; the final draft for his &lt;em&gt;Conventions and Guidelines for Perl Source Code&lt;/em&gt; PDD.&lt;/p&gt;

&lt;p&gt;(20 posts) Dan Sugalski &lt;a href=&#34;http://archive.develooper.com/perl6-internals@perl.org/msg03396.html&#34;&gt;previewed&lt;/a&gt; his first draft on Perl&amp;rsquo;s assembly language. The initial discussion pointed out some areas for needed clarification, and coverage of this document will pick up as it matures.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:bwarnock@capita.com&#34;&gt;Bryan C. Warnock&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

