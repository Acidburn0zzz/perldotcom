<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mohammad Anwar on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/mohammad-anwar/</link>
    <description>Recent content in Mohammad Anwar on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2020 07:30:00 +0000</lastBuildDate>
    <atom:link href="/authors/mohammad-anwar/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Perl Ambassador: Curtis &#39;Ovid&#39; Poe</title>
      <link>http://localhost:1313/article/the-perl-admbassador-curtis-poe/</link>
      <pubDate>Wed, 15 Jul 2020 07:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-admbassador-curtis-poe/</guid>
      <description>

&lt;p&gt;As a part of monthly series of interview, today we are talking to none
other than &lt;strong&gt;Curtis &amp;lsquo;Ovid&amp;rsquo; Poe&lt;/strong&gt; himself. He is one of the tallest
leader of Perl community.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like me to interview you, or know someone you&amp;rsquo;d like me to
interview, let me know. Take the same set of questions and send me your
answers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curtis&lt;/strong&gt; has been building software for decades. He specialize in
building database-driven Websites. He joined The Perl Foundation
&lt;a href=&#34;https://news.perlfoundation.org/post/new_board_member&#34;&gt;boards of directors&lt;/a&gt;
in 2009. He also runs the global global development and consulting firm,
&lt;a href=&#34;https://allaroundtheworld.fr/&#34;&gt;All Around The World&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He wrote some of the very popular books on Perl like
&lt;a href=&#34;https://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840/&#34;&gt;Beginning Perl&lt;/a&gt;
and &lt;a href=&#34;https://www.amazon.com/Perl-Hacks-Programming-Debugging-Surviving/dp/0596526741/&#34;&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He is also the man behind &lt;a href=&#34;https://taustation.space/&#34;&gt;Tau Station&lt;/a&gt;,
text-based Massive Multiplayer Online Browser Game (MMOBG) set in a
vibrant far future universe.&lt;/p&gt;

&lt;p&gt;You can find him blogging &lt;a href=&#34;https://ovid.github.io/blog.html&#34;&gt;here&lt;/a&gt;. If
are interested in the technical blog then you please check out his
&lt;a href=&#34;https://ovid.github.io/articles.html&#34;&gt;collections&lt;/a&gt;. How about his
&lt;a href=&#34;https://ovid.github.io/publicspeaking.html&#34;&gt;public speaking video&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-first-start-using-perl&#34;&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I first started using Perl about 20 years ago, when I was doing mainframe programming. I was trying to fix a problem with a COBOL program that was converting a CSV file from an NT system to the fixed-width format that COBOL prefers. COBOL has many weaknesses and working with text is one of them. The code was 150 lines long, but that’s because the author didn’t understand how the COBOL’s unstring function worked. I got it down to 80 lines of COBOL. Out of curiosity, I tried it in Perl and got it down to 10 lines of code. Everything I touched in Perl was shorter and easier to read, so I jumped ship.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-about-perl-7-do-you-see-the-perl-is-on-the-path-of-recovery&#34;&gt;What do you think about Perl 7? Do you see the Perl is on the path of recovery?&lt;/h4&gt;

&lt;p&gt;I am 100% on board with the project and yes, it&amp;rsquo;s the path for Perl&amp;rsquo;s recovery. I&amp;rsquo;ve seen widespread support for the change, which was heartening, and with the amount of press, even TIOBE moved Perl from 19 to 14th place, though I suspect it will drop back after the press dies down.&lt;/p&gt;

&lt;p&gt;However, there&amp;rsquo;s a difference between having a goal and having a plan. There&amp;rsquo;s widespread agreement on the goal, but there&amp;rsquo;s less agreement about the plan. That&amp;rsquo;s great so long as people can use this to find the best path. It&amp;rsquo;s less great if it devolves into acrimony. Fortunately, Sawyer&amp;rsquo;s been great at projecting a positive message.&lt;/p&gt;

&lt;p&gt;So long as we manage to protect businesses currently using Perl (and that means convincing Linux distros that we&amp;rsquo;re not going to break them), having a plan to better support active and new developers is awesome. And the version number change is a key first step.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-inspired-you-to-start-the-project-cor-when-are-you-planning-to-release-it&#34;&gt;What inspired you to start the project &amp;ldquo;Cor&amp;rdquo;? When are you planning to release it?&lt;/h4&gt;

&lt;p&gt;First, for those who are not familiar with Cor, you can read about it at &lt;a href=&#34;https://github.com/Ovid/Cor/wiki&#34;&gt;https://github.com/Ovid/Cor/wiki&lt;/a&gt;. In short, Cor is a plan to add modern OO to the Perl core. But the motto is &amp;ldquo;&amp;lsquo;Good enough&amp;rsquo; is not good enough.&amp;rdquo; We have to stop settling for what we can have and start dreaming about what we want. For a trivial example, here&amp;rsquo;s a naïve LRU cache implementation in Cor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class Cache::LRU {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Hash::Ordered;

    has $max_size :&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(optional) :reader :isa(PositiveInt) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
    has $created  :reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time;
    has $cache    :handles(get)  :builder;
    method _build_cache () { Hash::Ordered&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; }

    method set ( $key, $value ) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;exists($key) ) {
            $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;delete($key);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ( $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;keys &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $max_size ) {
            $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;shift;
        }
        $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;set( $key, $value );  &lt;span style=&#34;color:#75715e&#34;&gt;# new values in front&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for my motivation, like many developers, I was waiting for Stevan Little to finish his work to get a better OO system for the Perl core. But he was working mostly alone, for a long time, and that&amp;rsquo;s hard to do. So when I decided I wanted something, I was able to take a look at his work and realize it was solid. But I needed a better syntax.&lt;/p&gt;

&lt;p&gt;I tried to refine some of the syntax from Moo/se, but honestly, Moo/se has some serious limitations. Some are design decisions which can be easily corrected, but some are due to limitations in the Perl language itself. Once I had Sawyer&amp;rsquo;s backing, I realized that I didn&amp;rsquo;t just have to steal syntax, I could invent syntax, though I have done so very cautiously. It&amp;rsquo;s important that Cor still be Perl, but just a tiny sprinkling of syntactic sugar in the right spots makes a world of difference. So far it looks promising.&lt;/p&gt;

&lt;p&gt;And Sawyer said he hopes a v1 will be available under a feature guard in 7.2 or 7.4. With Perl 8, the feature guard would be removed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier&#34;&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;Test::Class::Moose (TCM) is a go to module for me. Most Perl developers learn how to test modules, not applications. With TCM, large test suites become easier to build and manage and, when it&amp;rsquo;s written correctly, many test suites can be an order of magnitude faster.&lt;/p&gt;

&lt;p&gt;I also have a module I write for personal code called Less::Boilerplate. It&amp;rsquo;s not on the CPAN because it&amp;rsquo;s too fine-tuned for my personal needs, but naturally it enables strict, warnings, signatures, autodie, and other features without having to type everything out by hand. And it pleases me to have the double meaning of &amp;ldquo;use Less::Boilerplate&amp;rdquo; at the top of my code. Yet it&amp;rsquo;s part of the issue that Sawyer&amp;rsquo;s pointed out with Perl. New Perl developers don&amp;rsquo;t know the strange incantations experienced Perl developers put at the top of their code to get Perl to be reasonable. That hurts the language because they get a poor &amp;ldquo;out of the box&amp;rdquo; experience.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-overuse&#34;&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;It used to be the punctuation variables that I would sprinkle around my code like magic pixie dust. Things like local $&amp;rdquo; = &amp;lsquo;, &amp;rsquo; were natural to me. But I&amp;rsquo;ve stopped doing that because honestly, it&amp;rsquo;s not readable. I do a lot of client work so I take care to ensure that my code is (as much as I can), easy to read and maintain. I&amp;rsquo;ve even rewritten some of my code to &amp;ldquo;dumb it down&amp;rdquo; because I want to ensure that it&amp;rsquo;s maintainable.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-wish-you-could-use-more&#34;&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that clients call me in to help build new systems or fix existing ones, I pretty much get to pick and choose what features I want to use, so I&amp;rsquo;m fortunate in that regard. Thus, there&amp;rsquo;s not much I don&amp;rsquo;t get to use if I think it&amp;rsquo;s useful. However, a feature I wish I could use more is a feature that doesn&amp;rsquo;t exist: more standardized introspection tools, similar to a MOP. Mucking about in the symbol table for the things I need, or pulling in external libraries to find out where my code is located in the filesystem is frustrating. I often write code that magically &amp;ldquo;works&amp;rdquo; without having to be loaded (similar to plugins). But without standardized, cross-platform tools for finding the code, loading it dynamically, converting between package and filenames automatically, I find that I&amp;rsquo;m often rewriting this code again, for a different client, based on their operating system, file system layout, and so on.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-one-thing-you-d-like-to-change-about-perl&#34;&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;How variables behave. There are a few things in that, but mainly, I wish Perl had invariant sigils like Raku and that arrays and hashes wouldn&amp;rsquo;t flatten unless requested. But I&amp;rsquo;m not going to get that, so let&amp;rsquo;s pretend I didn&amp;rsquo;t ask :)&lt;/p&gt;

&lt;p&gt;(Hmm, working threads might be interesting, too)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Perl Ambassador: Gabor Szabo</title>
      <link>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</link>
      <pubDate>Mon, 15 Jun 2020 07:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</guid>
      <description>

&lt;p&gt;This is the launch interview of a monthly series of interviews I&amp;rsquo;ll
publish on perl.com. I can promise you, fun and entertaining
interviews every month. So please watch this space. If you&amp;rsquo;d like me
to interview you, or know someone you&amp;rsquo;d like me to interview, let me
know. Take the same set of questions and send me your answers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gabor Szabo&lt;/strong&gt; is a long time Perl developer and DevOps trainer and the
author of the &lt;a href=&#34;https://perlmaven.com/perl-tutorial&#34;&gt;Perl tutorial&lt;/a&gt; and
of Perl Maven and on &lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt;. He
received a &lt;a href=&#34;http://whitecamel.org/p/gabor_szabo.html&#34;&gt;White Camel
Award&lt;/a&gt; in 2008. He teaches
&lt;a href=&#34;https://hostlocal.com/&#34;&gt;training courses in Israel&lt;/a&gt; and around the
world. He wears the hat of the chief editor of &lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly
newsletter&lt;/a&gt;, and is always happy to receive
notable Perl news items for inclusion in its next issue.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-first-start-using-perl&#34;&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I was working at a start-up company near Jerusalem that had an
AI-based software product which cost 1,000,000 USD with an additional
1-2 million cost for integration. That made sales a bit difficult so
we were working on a related product that would sell for a mere 30,000
USD. Just to get our feet in the door of the potential buyers of our
flagship product. We were using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Scheme_(programming_language)&#34;&gt;Scheme&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/AWK&#34;&gt;AWK&lt;/a&gt; to write our compiler on
Window 3.11. It was great fun, but I was also interested in all the
sysadmin work in the company (we had a Novell NetWare 3.11
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetWare&#34;&gt;network&lt;/a&gt; and all the other
areas that was not that interesting for the regular programmers. For
example our build system.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_NT&#34;&gt;Windows NT&lt;/a&gt; was
introduced in 1993 and I got the opportunity to start setting it up.
At around the same time our office was bought by
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetManage&#34;&gt;NetManage&lt;/a&gt;, one of the
pioneers in TCP/IP for MS Windows, in what is today called an
&lt;a href=&#34;https://en.wikipedia.org/wiki/Acqui-hiring&#34;&gt;Acqui-hiring&lt;/a&gt;. There we
used some &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_ClearCase&#34;&gt;Rational ClearCase&lt;/a&gt;
tools for bug tracking.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the time when I first started to use Perl, probably in 1993 or
1994. I built an in-house web application to allow the developers to
initiate a build of the software they were writing and to get
notification when the build was ready. As I recall it was running on
Windows. I also dealt with some of the bug-tracking automation that
was running on some Unix system.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier&#34;&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;I hardly have any Perl-related work these days so I can&amp;rsquo;t really say,
but when I need a script here and there I often use &lt;a href=&#34;https://metacpan.org/pod/Capture::Tiny&#34;&gt;Capture::Tiny&lt;/a&gt; and
keep re-creating it (partially and badly) in other languages. I love
testing so anything that starts with &lt;code&gt;Test::&lt;/code&gt; is usually interesting
to me.&lt;/p&gt;

&lt;p&gt;I also run the &lt;a href=&#34;https://perlmaven.com/&#34;&gt;Perl Maven&lt;/a&gt; and
&lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt; sites on a Dancer-based
application I wrote ages ago. The source is
&lt;a href=&#34;https://github.com/szabgab/Perl-Maven&#34;&gt;open&lt;/a&gt; though probably not
very useful to anyone besides me. So I use &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Template&#34;&gt;Template Toolkit&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/DateTime&#34;&gt;DateTime&lt;/a&gt;,
and &lt;a href=&#34;https://metacpan.org/pod/DateTime::Tiny&#34;&gt;DateTime::Tiny&lt;/a&gt; just to name a
few. Oh and of course I love &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and
&lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-overuse&#34;&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;I am not sure if any. Well, maybe except of &lt;code&gt;Perl::Critic&lt;/code&gt;. I just
noticed that I configured it that it won&amp;rsquo;t allow double-quotes around
a string if there is nothing to interpolate in it. So &amp;ldquo;perl&amp;rdquo; is bad,
&amp;lsquo;perl&amp;rsquo; is good. I need to relax this.&lt;/p&gt;

&lt;p&gt;I think I hardly ever used the fun features of Perl. I almost never
use the &lt;code&gt;do_this and do_that&lt;/code&gt; construct except for the &lt;code&gt;open or die&lt;/code&gt;.
I hardly use &lt;code&gt;$_&lt;/code&gt; and I think never use it explicitly. Maybe I was never
a real Perl programmer :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-wish-you-could-use-more&#34;&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that I hardly write Perl these days, any feature would be ok
with me :)&lt;/p&gt;

&lt;p&gt;I write mostly Python, Groovy, and recently Golang. So I would say I
miss the autovivification, though definitely not the bug Perl has in
being overenthusiastic about autovivification. I miss the possibility
to move around some code, or comment out some code and try the rest
without re-indenting everything. Though I don&amp;rsquo;t miss the time when I
was begging my Perl students to indent their code.&lt;/p&gt;

&lt;p&gt;I miss the CPAN Testers. (in these other languages). (And I do still
encounter Perl code in some corporation written by people who have
been writing Perl for 5-10 years and I always wonder why don&amp;rsquo;t they
actually learn Perl&amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-one-thing-you-d-like-to-change-about-perl&#34;&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;The community. Whatever that means. I wish people were prouder of
their work and embraced the 21st century.&lt;/p&gt;

&lt;p&gt;I wish they were more public about their work (e.g. announcements of
releases of perl IMHO are only published on the p5porters list.
Not on &lt;a href=&#34;http://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt;, not on &lt;a href=&#34;https://www.perl.org&#34;&gt;perl.org&lt;/a&gt;, and not on
&lt;a href=&#34;https://news.perlfoundation.org/&#34;&gt;https://news.perlfoundation.org/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Very few module authors write about new releases of their code. There
are very few people who write about Perl-related subjects. In many
cases those posts are not linking to each other.&lt;/p&gt;

&lt;p&gt;Some of the bloggers seem to have forgotten (or never learned) that
links are a form of supporting each other. This is sad as it gives the
impression that no-one uses Perl. Of course this is not new, it is
just getting worse every year as the people who used to write about
Perl stopped doing so or are writing about other subjects now.&lt;/p&gt;

&lt;p&gt;It also makes it much harder to fill
&lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly newsletter&lt;/a&gt;. If it wasn&amp;rsquo;t for the
&lt;a href=&#34;https://perlweeklychallenge.org/&#34;&gt;Perl Weekly Challenge&lt;/a&gt; we would
have half the size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-the-future-of-perl&#34;&gt;What is the future of Perl?&lt;/h4&gt;

&lt;p&gt;I think the number of &amp;ldquo;Perl programmers&amp;rdquo; will continue to decline and
with that less and less problems will have a solution on CPAN.&lt;/p&gt;

&lt;p&gt;However, the more interesting thing to me is what happens to the
&amp;ldquo;Perl programmers&amp;rdquo;. The same way the impact of Larry Wall on
programming goes far beyond the people who use (or ever used) Perl.
Or &lt;a href=&#34;https://en.wikipedia.org/wiki/Patch_(Unix)&#34;&gt;patch&lt;/a&gt; for that
matter.&lt;/p&gt;

&lt;p&gt;For example I would love to know what happened to all the people who
received a
&lt;a href=&#34;https://www.perl.org/advocacy/white_camel&#34;&gt;White Camel Award&lt;/a&gt; even
if they don&amp;rsquo;t write Perl any more.&lt;/p&gt;

&lt;p&gt;Same with the most high-profile CPAN authors. Even if they don&amp;rsquo;t write
Perl any more, their thinking was formed by Perl and by all the nice
things the community had throughout the last 32+ years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get your Pull Request accepted</title>
      <link>http://localhost:1313/article/how-to-get-pull-request-accepted-/</link>
      <pubDate>Tue, 05 Mar 2019 20:35:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-get-pull-request-accepted-/</guid>
      <description>

&lt;p&gt;Recently, someone I met online (and a respected name in Perl community), asked me if I could share my tips for how to get a Pull Request accepted. I have been submitting PRs for over 4 years, over the course of which I&amp;rsquo;ve seen a few successful patterns.&lt;/p&gt;

&lt;h2 id=&#34;keep-it-short-and-simple&#34;&gt;Keep it short and simple&lt;/h2&gt;

&lt;p&gt;The golden rule is &amp;ldquo;keep the change simple and minimal&amp;rdquo;. Always remember the distribution owner doesn&amp;rsquo;t have time to go through big changes in a single sitting. So it is better to split the big changes into smaller units. Ideally one commit per PR.&lt;/p&gt;

&lt;p&gt;If you fancy then you may want to have one change per commit in a PR. But the downside is, if a PR has more than 2 commits then you are back to square one, expecting the owner to spend too much time to review. So keep it simple, one PR one commit.&lt;/p&gt;

&lt;h2 id=&#34;pick-active-distributions&#34;&gt;Pick active distributions&lt;/h2&gt;

&lt;p&gt;The second most important thing to keep in mind is to pick an active distribution, i.e. one with regular releases. In my experience, you have more chance of a PR being reviewed and accepted if the author is active. MetaCPAN&amp;rsquo;s recent uploads &lt;a href=&#34;https://metacpan.org/recent?size=500&#34;&gt;page&lt;/a&gt; can help you identify distributions with recent changes.&lt;/p&gt;

&lt;h2 id=&#34;build-rapport&#34;&gt;Build rapport&lt;/h2&gt;

&lt;p&gt;If you can get in the good books of the distribution owner they&amp;rsquo;ll be more likely to accept your PR. Not every PR you submit will be accordance with the owner&amp;rsquo;s coding style or way of thinking. So be prepared to get pushback, or even rejection. This is an opportunity to converse with the owner, find out what they &lt;em&gt;do&lt;/em&gt; want. Maintaining a sense of humor throughout the discussion can go a long way to removing friction.&lt;/p&gt;

&lt;h3 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Those are my tips for getting your PR accepted. If you&amp;rsquo;d like to get started in Open Source but aren&amp;rsquo;t sure where to start, my previous two articles (&lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor-part-2/&#34;&gt;two&lt;/a&gt;) cover how to identify simple fixes for modules.&lt;/p&gt;

&lt;p&gt;Many people have asked me, where do I get the motivation to submit PRs non-stop for so many years. The real joy for me is when the owner acknowledges my PR and says &amp;ldquo;Thank you&amp;rdquo;. It means a lot to me. If you need any help getting started, feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to become a CPAN contributor - part 2</title>
      <link>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</link>
      <pubDate>Wed, 01 Aug 2018 20:20:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-become-cpan-contributor-part-2/</guid>
      <description>

&lt;p&gt;In the previous &lt;a href=&#34;http://localhost:1313/article/how-to-become-cpan-contributor/&#34;&gt;article&lt;/a&gt; I described some typical issues that are good for first time CPAN contributors to tackle. In this article, I will go through the nitty-gritty of fixing issues, and some gotchas to watch out for. If you&amp;rsquo;re not familiar with the differences between a Perl distribution, module and package, check out this &lt;a href=&#34;http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;missing-license-meta-name&#34;&gt;Missing license meta name&lt;/h3&gt;

&lt;p&gt;This is where the build script is missing a license name. It should be an easy fix - just add the license name to the build script. However there is a catch and I have been bitten by it before: the license meta name depends on the build script type. For example, if the distribution document says the license is &amp;ldquo;Artistic 2&amp;rdquo; in Makefile.PL the meta name would be &amp;ldquo;artistic_2&amp;rdquo; whereas in a dist.ini it would be &amp;ldquo;Artistic_2_0&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;E.g. the Makefile.PL from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube&#34;&gt;Map::Tube&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
ABSTRACT_FROM &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lib/Map/Tube.pm&amp;#39;&lt;/span&gt;,
LICENSE       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;artistic_2&amp;#39;&lt;/span&gt;,
EXE_FILES     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;script/map-data-converter&amp;#39;&lt;/span&gt; ],
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared to the dist.ini from my distribution &lt;a href=&#34;https://metacpan.org/release/Map-Tube-Delhi&#34;&gt;Map::Tube::Delhi&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
author  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;mohammad.anwar@yahoo.com&amp;gt;&lt;/span&gt;
license &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Artistic_2_0
copyright_holder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mohammad S Anwar
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are adding a software license to a distribution, &lt;a href=&#34;https://metacpan.org/pod/Software::License&#34;&gt;Software::License&lt;/a&gt; is a good resource which has many different types of Open Source licenses.&lt;/p&gt;

&lt;p&gt;One thing to check for is whether the distribution repository has a META.yml file or not. If it does, adding the license meta name to the build script may cause the build process to warn: &amp;ldquo;Invalid LICENSE value &amp;hellip;&amp;rdquo;. This happens because the META.yml already contains a license value of &amp;ldquo;unknown&amp;rdquo;, which conflicts with the build script. The solution here is to delete the META.yml file and build the distribution, adding the newly-generated META.yml back into the repository.&lt;/p&gt;

&lt;p&gt;You might be thinking, why would you keep META.yml in the project repository as it can be easily generated? I agree it&amp;rsquo;s probably a mistake, but keep in mind your intent is to add the license meta and nothing else. The author might have a good reason for keeping the META.yml file around. One approach would be to discuss with the author if it is good idea to drop it completely.&lt;/p&gt;

&lt;h3 id=&#34;missing-strict-warnings-pragma&#34;&gt;Missing strict/warnings pragma&lt;/h3&gt;

&lt;p&gt;This is the easiest of all: one or more modules in the distribution are missing the [strict]](https://metacpan.org/pod/strict) or &lt;a href=&#34;https://metacpan.org/pod/warnings&#34;&gt;warnings&lt;/a&gt; pragmas. Just add the line &lt;code&gt;use strict;&lt;/code&gt; (or &lt;code&gt;use warnings;&lt;/code&gt;) at the top of the modules missing them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; package_name;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is it that simple? Yes and no. If the module uses Moose or Moo then &lt;code&gt;use strict;&lt;/code&gt; is enabled automatically, so the additional import is redundant. The module &lt;a href=&#34;https://metacpan.org/pod/Test::Strict&#34;&gt;Test::Strict&lt;/a&gt; has the &lt;code&gt;strict_ok&lt;/code&gt; test function to detect whether a module has enabled strict mode or not (full disclosure, I am the distribution maintainer).&lt;/p&gt;

&lt;p&gt;With the warnings pragma, there can be other considerations too. I was giving talk at the German Perl Workshop 2018, during the talk I spoke about one of my pull requests being rejected by the author for adding warnings pragma. At the time I didn&amp;rsquo;t have the courage to question the author, so I apologized and moved on. Surprisingly, the very same author was sitting in the front row attending my talk! And he was none other than [Reini Urban](). At the end of the talk, he explained to me why he rejected the pull request: in some cases, adding the warnings pragma can reduce how fast Perl executes.&lt;/p&gt;

&lt;p&gt;So the moral of the story is, be careful when adding use warnings; line. To be honest with you, I avoid dealing with missing warnings issues unless I know the author personally.&lt;/p&gt;

&lt;h3 id=&#34;missing-meta-json&#34;&gt;Missing META.json&lt;/h3&gt;

&lt;p&gt;Sometimes, you will find a distribution missing the META.json file. Recently, I have noticed many CPAN module authors have adopted &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; as the distribution builder. I am a big fan of this tool, however if the author is moving from a traditional distribution builder like &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::MakeMaker&#34;&gt;ExtUtils::MakeMaker&lt;/a&gt; then they often forget to generate this file.&lt;/p&gt;

&lt;p&gt;There is an easy solution to this problem: just add &lt;code&gt;[MetaJSON]&lt;/code&gt; to the dist.ini file, and Dist::Zilla will generate it during the build process.&lt;/p&gt;

&lt;h3 id=&#34;missing-a-minimum-perl-version&#34;&gt;Missing a minimum Perl version&lt;/h3&gt;

&lt;p&gt;This is where the build script does not declare the minimum version of Perl it requires. I am now going to show you how to add this information depending on what distribution builder is used by the module author.&lt;/p&gt;

&lt;p&gt;In case of ExtUtils::MakeMaker, it is as simple as adding the key &lt;code&gt;MIN_PERL_VERSION&lt;/code&gt; as shown below to the Makefile.PL script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::MakeMaker;

WriteMakefile(
  MIN_PERL_VERSION   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whereas if distribution builder is Module::Build then you can do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Module::Build;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Module::Builder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  requires &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;,
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it is using Dist::Zilla then you can either explicitly set the minimum Perl version in the dist.ini as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[Prereqs]
perl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.006&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can use the plugin &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla::Plugin::MinimumPerlFast&#34;&gt;MinimumPerlFast&lt;/a&gt; which will detect the minimum Perl version needed by the distribution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
[MinimumPerlFast]
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need any help getting started as a CPAN contributor, feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to become a CPAN contributor</title>
      <link>http://localhost:1313/article/how-to-become-cpan-contributor/</link>
      <pubDate>Sun, 13 May 2018 20:46:28 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-to-become-cpan-contributor/</guid>
      <description>

&lt;p&gt;To become a CPAN contributor, you don&amp;rsquo;t need to write a new CPAN distribution, you just need to submit a change to an existing distribution that get&amp;rsquo;s accepted by the author.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never gotten your hands dirty editing Perl modules, the first question that may come to mind is: &amp;ldquo;Do I know enough to contribute to other people&amp;rsquo;s code?&amp;rdquo;. Well in my experience, you don&amp;rsquo;t have to be an expert to become a contributor. There are plenty of opportunities out there suitable for beginner-level Perl programmers.&lt;/p&gt;

&lt;h3 id=&#34;how-about-an-example&#34;&gt;How about an example?&lt;/h3&gt;

&lt;p&gt;Before I answer that question, I would like to point you to where to look for stuff to contribute. The easiest way is to keep an eye on the metacpan &lt;a href=&#34;https://metacpan.org/recent&#34;&gt;recently uploaded&lt;/a&gt; distributions page. I recommend this for beginners as new distributions usually offer plenty of opportunities to contribute.&lt;/p&gt;

&lt;p&gt;As you&amp;rsquo;re clicking through recently uploaded distributions, check the &lt;strong&gt;Kwalitee&lt;/strong&gt; link on each distribution&amp;rsquo;s page, and look to see if any issues are listed. Kwalitee issues are often minor that any beginner can help with.&lt;/p&gt;

&lt;p&gt;In terms of example issues that contributors can help with, I&amp;rsquo;ve listed the most common ones below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code is missing strict/warnings pragma&lt;/li&gt;
&lt;li&gt;Distribution missing META file(s)&lt;/li&gt;
&lt;li&gt;Pod syntax error&lt;/li&gt;
&lt;li&gt;Makefile.PL/Build.PL missing build prereqs&lt;/li&gt;
&lt;li&gt;Missing license meta&lt;/li&gt;
&lt;li&gt;MANIFEST incomplete/lists files not in distribution&lt;/li&gt;
&lt;li&gt;Build script is not executable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are lucky then you might find the distribution source is hosted on GitHub. For your first few contributions, I would suggest focusing on distributions hosted on GitHub as chances are, you already have a GitHub account. To check if a distribution is on GitHub, look for the &amp;ldquo;Clone repository&amp;rdquo; link on the distribution&amp;rsquo;s metacpan page (&lt;a href=&#34;https://metacpan.org/pod/Term::ProgressBar&#34;&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;prepare-the-ground-first&#34;&gt;Prepare the ground first&lt;/h3&gt;

&lt;p&gt;By this point you should have identified a distribution with a Kwalitee issue that is hosted on GitHub. Fork the repository on GitHub so that you have a copy of the distribution source in your own repository. The next step is to open a terminal and clone the forked repository on to your local machine.&lt;/p&gt;

&lt;p&gt;Create a new branch for your proposed changes. Give the branch a meaningful name that describes the nature of the contributions you intend to make (e.g. &amp;ldquo;kwalitee-fixes&amp;rdquo;). Before you make any changes, try building and installing the module to make sure the code compiles and the tests are passing. Lets follow the happy path and assume the distribution is clean and all test pass.&lt;/p&gt;

&lt;h3 id=&#34;action-now&#34;&gt;Action now&lt;/h3&gt;

&lt;p&gt;This is your moment now, you are about to jump into someone else&amp;rsquo;s domain. So be extra &lt;strong&gt;careful&lt;/strong&gt; and &lt;strong&gt;vigilant&lt;/strong&gt;. Make sure you only change the parts you intend to. Watch out in case your text editor swaps tabs for spaces, or removes EOF newlines from files. If you&amp;rsquo;re changing code, follow the coding style of the author so that your changes fit with their way of doing things. This will make your contributions more likely to be accepted by them.&lt;/p&gt;

&lt;p&gt;Once you have made the necessary changes, commit and push the changes to your repository. Now go to your forked repository&amp;rsquo;s GitHub web page and create a pull request. Double check your commit and make sure no other changes are included by accident. Submit the pull request describing your changes what improvements they bring.&lt;/p&gt;

&lt;p&gt;Hopefully the author will merge your pull request and &lt;strong&gt;congratulations&lt;/strong&gt; you are a contributor now! You helped make Open Source better and should be proud. But don&amp;rsquo;t get &lt;em&gt;disheartened&lt;/em&gt; if you don&amp;rsquo;t see a response within a few days. You may get a response within minutes, but it might take months. One author responded to my pull request &lt;strong&gt;after a year&lt;/strong&gt;. In the meantime whilst you&amp;rsquo;re waiting to hear back, there are plenty of new distributions that could use your help!&lt;/p&gt;

&lt;h3 id=&#34;need-help&#34;&gt;Need help?&lt;/h3&gt;

&lt;p&gt;If you need a helping hand then feel free to &lt;a href=&#34;mailto:mohammad.anwar@yahoo.com&#34;&gt;email me&lt;/a&gt; and if necessary, we can remote pair program to get you going. I&amp;rsquo;ll also be speaking about this topic at &lt;a href=&#34;http://act.perlconference.org/tpc-2018-glasgow/&#34;&gt;The Perl Conference in Glasgow&lt;/a&gt;, so come on by and say hi.&lt;/p&gt;

&lt;p&gt;Good luck and all the very best with your CPAN contributions!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

