<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shlomi Fish on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/shlomi-fish/</link>
    <description>Recent content in Shlomi Fish on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Apr 2007 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/shlomi-fish/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lightning Strikes Four Times</title>
      <link>http://localhost:1313/pub/2007/04/12/lightning-four.html/</link>
      <pubDate>Thu, 12 Apr 2007 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2007/04/12/lightning-four.html/</guid>
      <description>

&lt;p&gt;by Mike Friedman&lt;/p&gt;

&lt;p&gt;Good software design principles tell us that we should work to separate unrelated concerns. For example, the popular Model-View-Controller (MVC) pattern is common in web application designs. In MVC, separate modular components form a &lt;em&gt;model&lt;/em&gt;, which provides access to a data source, a &lt;em&gt;view&lt;/em&gt;, which presents the data to the end user, and a &lt;em&gt;controller&lt;/em&gt;, which implements the required features.&lt;/p&gt;

&lt;p&gt;Ideally, it&amp;rsquo;s possible to replace any one of these components without breaking the whole system. A templating engine that translates the application&amp;rsquo;s data into HTML (the &lt;em&gt;view&lt;/em&gt;) could be replaced with one that generates YAML or a PDF file. The &lt;em&gt;model&lt;/em&gt; and &lt;em&gt;controller&lt;/em&gt; shouldn&amp;rsquo;t be affected by changing the way that the &lt;em&gt;view&lt;/em&gt; presents data to the user.&lt;/p&gt;

&lt;p&gt;Other concerns are difficult to separate. In the world of aspect-oriented programming, a &lt;em&gt;crosscutting concern&lt;/em&gt; is a facet of a program which is difficult to modularize because it must interact with many disparate pieces of your system.&lt;/p&gt;

&lt;p&gt;Consider an application that logs copious trace data when in debugging mode. In order to ensure that it is operating correctly, you may want to log when it enters and exits each subroutine. A typical way to accomplish this is by conditionally executing a logging function based on the value of a constant, which turns debugging on and off.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use strict;
    use warnings;

    use constant DEBUG =&amp;gt; 1;

    sub do_something {
        log_message(&amp;quot;I&#39;m doing something&amp;quot;) if DEBUG;

        # do something here

        log_message(&amp;quot;I&#39;m done doing something&amp;quot;) if DEBUG;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution is simple, but it presents a few problems. Perhaps most strikingly, it&amp;rsquo;s simply a lot of code to write. For each subroutine that you want to log, you must write two nearly identical lines of code. In a large system with hundreds or thousands of subroutines, this gets tedious fast, and can lead to inconsistently formatted messages as every copy-paste-edit cycle tweaks them a little bit.&lt;/p&gt;

&lt;p&gt;Further, it offends the simple design goal of an MVC framework, because every component must talk to the logging system directly.&lt;/p&gt;

&lt;p&gt;One way to improve this technique is to automatically wrap every interesting subroutine in a special logging function. There are a few ways to go about this. One of the simplest is to use subroutine attributes to install a dynamically generated wrapper.&lt;/p&gt;

&lt;h3 id=&#34;attributes&#34;&gt;Attributes&lt;/h3&gt;

&lt;p&gt;Perl 5.6 introduced &lt;em&gt;attributes&lt;/em&gt; that allow you to add arbitrary metadata to a variable. Attributes can be attached both to package variables, including subroutines, and lexical variables. Since Perl 5.8, attributes on lexical variables apply at runtime. Attributes on package variables activate at compile-time.&lt;/p&gt;

&lt;p&gt;The interface to Perl attributes is via the &lt;a href=&#34;https://metacpan.org/pod/attributes&#34;&gt;attributes&lt;/a&gt; pragma. (The older attrs is deprecated.) The CPAN module &lt;a href=&#34;https://metacpan.org/pod/Attribute::Handlers&#34;&gt;Attribute::Handlers&lt;/a&gt; makes working with attributes a bit easier. Here&amp;rsquo;s an example of how you might rewrite the logging system using an attribute handler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    use strict;
    use warnings;

    use constant DEBUG =&amp;gt; 1;

    use Attribute::Handlers;

    sub _log : ATTR(CODE) {
        my ($pkg, $sym, $code) = @_;

        if( DEBUG ) {
            my $name = *{ $sym }{NAME};

            no warnings &#39;redefine&#39;;

            *{ $sym } = sub {
                log_message(&amp;quot;Entering sub $pkg\:\:$name&amp;quot;);
                my @ret = $code-&amp;gt;( @_ );
                log_message(&amp;quot;Leaving sub $pkg\:\:$name&amp;quot;);
                return @ret;
            };
        }
    }

    sub do_something : _log {
        print &amp;quot;I&#39;m doing something.\n&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attributes are declared by placing a colon (:) and the attribute name after a variable or subroutine declaration. Optionally, the attribute can receive some data as a parameter; &lt;code&gt;Attribute::Handlers&lt;/code&gt; goes to great lengths to massage the passed data for you if necessary.&lt;/p&gt;

&lt;p&gt;To set up an attribute handler, the code declares a subroutine, &lt;code&gt;_log&lt;/code&gt;, with the &lt;code&gt;ATTR&lt;/code&gt; attribute, passing the string &lt;code&gt;CODE&lt;/code&gt; as a parameter. &lt;code&gt;Attribute::Handlers&lt;/code&gt; provides &lt;code&gt;ATTR&lt;/code&gt;, and the &lt;code&gt;CODE&lt;/code&gt; parameter tells it that the new handler only applies to subroutines.&lt;/p&gt;

&lt;p&gt;During compile time, any subroutine declared with the &lt;code&gt;_log&lt;/code&gt; attribute causes Perl to call the attribute handler with several parameters. The first three are the package in which the subroutine was compiled, a reference to the typeglob where its symbol lives, and a reference to the subroutine itself. These are sufficient for now.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;DEBUG&lt;/code&gt; constant is true, the handler sets to work wrapping the newly compiled subroutine. First, it grabs its name from the typeglob, then it adds a new subroutine to its spot in the symbol table. Because the code redefines a package symbol, it&amp;rsquo;s important to turn off warnings for symbol redefinitions in within this block.&lt;/p&gt;

&lt;p&gt;Because the new function is a lexical closure over &lt;code&gt;$pkg&lt;/code&gt;, &lt;code&gt;$name&lt;/code&gt;, and most importantly &lt;code&gt;$code&lt;/code&gt;, it can use those values to construct the logging messages and call the original function.&lt;/p&gt;

&lt;p&gt;All of this may seem like a lot of work, but once it&amp;rsquo;s done, all you need to do to enable entry and exit logging for any function is to simply apply the &lt;code&gt;_log&lt;/code&gt; attribute. The logging messages themselves get manufactured via closures when the program compiles, so we know they&amp;rsquo;ll always be consistent. If you want to change them, you only have to do it in one place.&lt;/p&gt;

&lt;p&gt;Best of all, because attribute handlers get inherited, if you define your handler in a base class, any subclass can use it.&lt;/p&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;Although this is a powerful technique, it isn&amp;rsquo;t perfect. The code will not properly wrap anonymous subroutines, and it won&amp;rsquo;t necessarily propagate calling context to the wrapped functions. Further, using this technique will significantly increase the number of subroutine dispatches that your program must execute during runtime. Depending on your program&amp;rsquo;s complexity, this may significantly increase the size of your call stack. If blinding speed is a major design goal, this strategy may not be for you.&lt;/p&gt;

&lt;h3 id=&#34;going-further&#34;&gt;Going Further&lt;/h3&gt;

&lt;p&gt;Other common cross-cutting concerns are authentication and authorization systems. Subroutine attributes can wrap functions in a security checker that will refuse to call the functions to callers without the proper credentials.&lt;/p&gt;

&lt;h3 id=&#34;perl-outperforms-c-with-opengl&#34;&gt;Perl Outperforms C with OpenGL&lt;/h3&gt;

&lt;p&gt;by Bob Free&lt;/p&gt;

&lt;p&gt;Desktop developers often assume that compiled languages always perform better than interpreted languages such as Perl.&lt;/p&gt;

&lt;p&gt;Conversely, most LAMP online service developers are familiar with mechanisms for preloading Perl interpreters modules (such as Apache mod_perl and ActivePerl/ISAPI), and know that Perl performance often approaches that of C/C++.&lt;/p&gt;

&lt;p&gt;However, few 3D developers think of Perl when it comes to performance. They should.&lt;/p&gt;

&lt;p&gt;GPUs are increasingly taking the load off of CPUs for number-crunching. Modern GPGPU processing leverages C-like programs and loads large data arrays onto the GPU, where processing executes independent of the CPU. As a result, the overall contribution of CPU-bound programs diminish, while Perl and C differences become statistically insignificant in terms of GPU performance.&lt;/p&gt;

&lt;p&gt;The author has recently published a open source update to CPAN&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/OpenGL&#34;&gt;OpenGL&lt;/a&gt; module, adding support for GPGPU features. With this release, he has also posted OpenGL Perl versus C benchmarks&amp;ndash;demonstrating cases where Perl outperforms C for OpenGL operations.&lt;/p&gt;

&lt;h3 id=&#34;what-is-opengl&#34;&gt;What Is OpenGL?&lt;/h3&gt;

&lt;p&gt;OpenGL is an industry-standard, cross-platform language for rendering 3D images. Originally developed by Silicon Graphics Inc. (SGI), it is now in wide use for 3D CAD/GIS systems, game development, and computer graphics (CG) effects in film.&lt;/p&gt;

&lt;p&gt;With the advent of Graphic Processing Units (GPU), realistic, real-time 3D rendering has become common&amp;ndash;even in game consoles. GPUs are designed to process large arrays of data, such as 3D vertices, textures, surface normals, and color spaces.&lt;/p&gt;

&lt;p&gt;It quickly became clear that the GPU&amp;rsquo;s ability to process large amounts of data could expand well beyond just 3D rendering, and could applied to General Purpose GPU (GPGPU) processing. GPGPUs can process complex physics problems, deal with particle simluations, provide database analytics, etc.&lt;/p&gt;

&lt;p&gt;Over the years, OpenGL has expanded to support GPGPU processing, making it simple to load C-like programs into GPU memory for fast execution, to load large arrays of data in the form of &lt;em&gt;textures&lt;/em&gt;, and to quickly move data between the GPU and CPU via Frame Buffer Objects (FBO).&lt;/p&gt;

&lt;p&gt;While OpenGL is in itself a portable language, it provides no interfaces to operating system (OS) display systems. As a result, Unix systems generally rely on an X11-based library called GLX; Windows relies on a WGL interface. Several libraries, such as &lt;a href=&#34;http://www.opengl.org/resources/libraries/glut/&#34;&gt;GLUT&lt;/a&gt;, help to abstract these differences. However, as OpenGL added new extensions, OS vendors (Microsoft in particular) provided different methods for accessing the new APIs, making it difficult to write cross-platform GPGPU code.&lt;/p&gt;

&lt;h3 id=&#34;perl-opengl-pogl&#34;&gt;Perl OpenGL (POGL)&lt;/h3&gt;

&lt;p&gt;Bob Free of Graphcomp has just released a new, portable, open source Perl OpenGL module (POGL 0.55).&lt;/p&gt;

&lt;p&gt;This module adds support for 52 new OpenGL extensions, including many GPGPU features such as Vertex Arrays, Frame Buffer Objects, Vertext Programs, and Fragment Programs.&lt;/p&gt;

&lt;p&gt;In terms of 3D processing, these extensions allow developers to perform real-time dynamic vertex and texturemap generation and manipulation within the GPU. This module also simplifies GPGPU processing by moving data to and from the CPU through textures, and loading low-level, assembly-like instructions to the GPU.&lt;/p&gt;

&lt;p&gt;POGL 0.55 is a binary Perl module (written in C via XS), that has been tested on Windows (NT/XP/Vista) and Linux (Fedora 6. Ubuntu/Dapper). Source and binaries are available via SVN, PPM, tarball, and ZIP at the &lt;a href=&#34;http://graphcomp.com/opengl&#34;&gt;POGL homepage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;POGL OS Performance&lt;/p&gt;

&lt;p&gt;The POGL homepage includes initial benchmarks comparing POGL on Vista, Fedora, and Ubuntu. These tests show that static texture rendering on an animated object on Fedora was 10x faster than Vista; Ubuntu was 15x faster (using the same nVidia cards, drivers, and machine).&lt;/p&gt;

&lt;p&gt;A subsequent, tighter benchmark eliminated UI and FPS counters, and focused more on dynamic texturemap generation. These results, posted on &lt;a href=&#34;http://graphcomp.com/opengl/bench.html&#34;&gt;OpenGL C versus Perl benchmarks&lt;/a&gt;, show comparable numbers for Fedora and Ubuntu, with both outperforming Vista by about 60 percent.&lt;/p&gt;

&lt;p&gt;Note: a further performance on these benchmarks could be available through the use of GPU vertex arrays.&lt;/p&gt;

&lt;h3 id=&#34;perl-versus-c-performance&#34;&gt;Perl versus C Performance&lt;/h3&gt;

&lt;p&gt;These benchmarks also compare Perl against C code. It found no statistical difference between overall Perl and C performance on Linux. Inexplicably, Perl frequently outperformed C on Vista.&lt;/p&gt;

&lt;p&gt;In general, C performed better than Perl on Vertex/Fragment Shader operations, while Perl outperformed C on FBO operations. In this benchmark, overall performance was essentially equal between Perl and C.&lt;/p&gt;

&lt;p&gt;The similarity in performance is explained by several factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GPU is performing the bulk of the number-crunching operations&lt;/li&gt;
&lt;li&gt;POGL is a compiled C module&lt;/li&gt;
&lt;li&gt;Non-GPU operations are minimal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In cases where code dynamically generates or otherwise modifies the GPU&amp;rsquo;s vetex/fragment shader code, it is conceivable that Perl would provide even better than C, due to Perl&amp;rsquo;s optimized and interpreted string handling.&lt;/p&gt;

&lt;h3 id=&#34;perl-advantages&#34;&gt;Perl Advantages&lt;/h3&gt;

&lt;p&gt;Given that GPGPU performance will be a wash in most cases, the primary reason for using a compiled language is to obfuscate source for intellectual property (IP) reasons.&lt;/p&gt;

&lt;p&gt;For server-side development, there&amp;rsquo;s really no reason to use a compiled language for GPGPU operations, and several reasons to go with Perl:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl OpenGL code is more portable than C; therefore there are fewer lines of code&lt;/li&gt;
&lt;li&gt;Numerous imaging modules for loading GPGPU data arrays (textures)&lt;/li&gt;
&lt;li&gt;Portable, open source modules for system and auxiliary functions&lt;/li&gt;
&lt;li&gt;Perl (under mod-perl/ISAPI) is generally faster than Java&lt;/li&gt;
&lt;li&gt;It is easier to port Perl to/from C than Python or Ruby&lt;/li&gt;
&lt;li&gt;As of this writing, there is no FBO support in Java, Python, or Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a side-by-side code comparison between C and Perl posted on the above benchmark page.&lt;/p&gt;

&lt;p&gt;Desktop OpenGL/GPU developers may find it faster to prototype code in Perl (e.g., simpler string handling and garbage collection), and then port their code to C later (if necessary). Developers can code in one window and execute in another&amp;ndash;with no IDE, no compiling&amp;ndash;allowing innovators/researchers to do real-time experiments with new shader algorithms.&lt;/p&gt;

&lt;p&gt;Physicists can quickly develop new models; researchers and media developers can create new experimental effects and reduce their time to market.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Performance is not a reason a reason to use C over Perl for OpenGL and GPGPU operations, and there are many cases where Perl is preferable to C (or Java/Python/Ruby).&lt;/p&gt;

&lt;p&gt;By writing your OpenGL/GPU code in Perl, you will likely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce your R&amp;amp;D costs and time to market&lt;/li&gt;
&lt;li&gt;Expand your platform/deployment options&lt;/li&gt;
&lt;li&gt;Accelerate your company&amp;rsquo;s GPGPU ramp up&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-test-count&#34;&gt;Using Test::Count&lt;/h3&gt;

&lt;p&gt;by Shlomi Fish&lt;/p&gt;

&lt;p&gt;A typical &lt;a href=&#34;https://metacpan.org/pod/Test::More&#34;&gt;Test::More&lt;/a&gt; test script contains several checks. It is preferable to keep track of the number of checks that the script is running (using &lt;code&gt;use Test::More tests =&amp;gt; $NUM_CHECKS&lt;/code&gt; or the &lt;code&gt;plan tests =&amp;gt; $NUM_CHECKS&lt;/code&gt;), so that if some checks are not run (for whatever reason), the test script will still fail when being run by the harness.&lt;/p&gt;

&lt;p&gt;If you add more checks to a test file, then you have to remember to update the plan. However, how do you keep track of how many tests &lt;em&gt;should&lt;/em&gt; run? I&amp;rsquo;ve already encountered a case where &lt;a href=&#34;http://dbi.perl.org/&#34;&gt;a DBI related module&lt;/a&gt; had a different number of tests with an older version of DBI than with a more recent one.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://metacpan.org/pod/Test::Count&#34;&gt;Test::Count&lt;/a&gt;. Test::Count originated from a &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; script I wrote to keep track of the number of tests by using meta-comments such as &lt;code&gt;# TEST&lt;/code&gt; (for one test) or &lt;code&gt;# TEST*3*5&lt;/code&gt; (for 15 tests). However, there was a limit to what I could do with Vim&amp;rsquo;s scripting language, as I wanted a richer syntax for specifying the tests as well as variables.&lt;/p&gt;

&lt;p&gt;Thus, I wrote the Test::Count module and placed it on CPAN. &lt;a href=&#34;https://metacpan.org/pod/Test::Countlib&#34;&gt;Test::Count::Filter&lt;/a&gt; acts as a filter, counts the tests, and updates them. Here&amp;rsquo;s an example, taken from a code I wrote for a Perl Quiz of the Week:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w

# This file implements various functions to remove
# all periods (&amp;quot;.&amp;quot;&#39;s) except the last from a string.

use strict;

use Test::More tests =&amp;gt; 5;
use String::ShellQuote;

sub via_split
{
    my $s = shift;
    my @components = split(/\./, $s, -1);
    if (@components == 1)
    {
        return $s;
    }
    my $last = pop(@components);
    return join(&amp;quot;&amp;quot;, @components) . &amp;quot;.&amp;quot; . $last;
}

# Other Functions snipped.

# TEST:$num_tests=9
# TEST:$num_funcs=8
# TEST*$num_tests*$num_funcs
foreach my $f (@funcs)
{
    my $ref = eval (&amp;quot;\\&amp;amp;$f&amp;quot;);
    is($ref-&amp;gt;(&amp;quot;hello.world.txt&amp;quot;), &amp;quot;helloworld.txt&amp;quot;, &amp;quot;$f - simple&amp;quot;); # 1
    is($ref-&amp;gt;(&amp;quot;hello-there&amp;quot;), &amp;quot;hello-there&amp;quot;, &amp;quot;$f - zero periods&amp;quot;); # 2
    is($ref-&amp;gt;(&amp;quot;hello..too.pl&amp;quot;), &amp;quot;hellotoo.pl&amp;quot;, &amp;quot;$f - double&amp;quot;); # 3
    is($ref-&amp;gt;(&amp;quot;magna..carta&amp;quot;), &amp;quot;magna.carta&amp;quot;, &amp;quot;$f - double at end&amp;quot;); # 4
    is($ref-&amp;gt;(&amp;quot;the-more-the-merrier.jpg&amp;quot;),
       &amp;quot;the-more-the-merrier.jpg&amp;quot;, &amp;quot;$f - one period&amp;quot;); # 5
    is($ref-&amp;gt;(&amp;quot;hello.&amp;quot;), &amp;quot;hello.&amp;quot;, &amp;quot;$f - one period at end&amp;quot;); # 6
    is($ref-&amp;gt;(&amp;quot;perl.txt.&amp;quot;), &amp;quot;perltxt.&amp;quot;, &amp;quot;$f - period at end&amp;quot;); # 7
    is($ref-&amp;gt;(&amp;quot;.yes&amp;quot;), &amp;quot;.yes&amp;quot;, &amp;quot;$f - one period at start&amp;quot;); # 8
    is($ref-&amp;gt;(&amp;quot;.yes.txt&amp;quot;), &amp;quot;yes.txt&amp;quot;, &amp;quot;$f - period at start&amp;quot;); # 9
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filtering this script through &lt;code&gt;Test::Count::Filter&lt;/code&gt; provides the correct number of tests. I then add this to my &lt;em&gt;.vimrc&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! Perl_Tests_Count()
    %!perl -MTest::Count::Filter -e &#39;Test::Count::Filter-&amp;gt;new({})-&amp;gt;process()&#39;
endfunction

autocmd BufNewFile,BufRead *.t map &amp;lt;F3&amp;gt; :call Perl_Tests_Count()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can press F3 to update the number of checks.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test::Count&lt;/code&gt; supports +,-,*, /, as well as parentheses, so it is expressive enough for most needs.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h3&gt;

&lt;p&gt;Thanks to mrMister from &lt;a href=&#34;http://www.freenode.net/&#34;&gt;Freenode&lt;/a&gt; for going over earlier drafts of this article and correcting some problems.&lt;/p&gt;

&lt;h3 id=&#34;what-s-in-that-scalar&#34;&gt;What&amp;rsquo;s In that Scalar?&lt;/h3&gt;

&lt;p&gt;by brian d foy&lt;/p&gt;

&lt;p&gt;Scalars are simple, right? They hold single values, and you don&amp;rsquo;t even have to care what those values are because Perl figures out if they are numbers or strings. Well, scalars show up just about anywhere and it&amp;rsquo;s much more complicated than single values. I could have &lt;code&gt;undef&lt;/code&gt;, a number or string, or a reference. That reference can be a normal reference, a blessed reference, or even a hidden reference as a tied variable.&lt;/p&gt;

&lt;p&gt;Perhaps I have a scalar variable which should be an object (a blessed reference, which is a single value), but before I call a method on it I want to ensure it is to avoid the &amp;ldquo;unblessed reference&amp;rdquo; error that kills my program. I might try the &lt;code&gt;ref&lt;/code&gt; built-in to get the class name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( ref $maybe_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a bug there. &lt;code&gt;ref&lt;/code&gt; returns an empty string if the scalar isn&amp;rsquo;t an object. It might return &lt;code&gt;0&lt;/code&gt;, a false value, and yes, some Perl people have figured out how to create a package named &lt;code&gt;0&lt;/code&gt; just to mess with this. I might think that checking for defined-ness would work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( defined ref $maybe_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; but the empty string is also defined. I want all the cases where it is not the one value that means it&amp;rsquo;s not a reference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   unless( &#39;&#39; eq ref $maybe_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This still doesn&amp;rsquo;t tell me if I have an object. I know it&amp;rsquo;s a reference, but maybe it&amp;rsquo;s a regular data reference. The &lt;code&gt;blessed&lt;/code&gt; function from &lt;a href=&#34;https://metacpan.org/pod/Scalar::Util&#34;&gt;Scalar::Util&lt;/a&gt; can help:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( blessed $maybe_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This almost has the same problem as &lt;code&gt;ref&lt;/code&gt;. &lt;code&gt;blessed&lt;/code&gt; returns the package name if it&amp;rsquo;s an object, and &lt;code&gt;undef&lt;/code&gt; otherwise. I really need to check for defined-ness.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( defined blessed $maybe_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if &lt;code&gt;blessed&lt;/code&gt; returns &lt;code&gt;undef&lt;/code&gt;, I still might have a hidden object. If the scalar is a tied variable, there&amp;rsquo;s really an object underneath it, although the scalar acts as if it&amp;rsquo;s a normal variable. Although I normally don&amp;rsquo;t need to interact with the secret object, the &lt;code&gt;tied&lt;/code&gt; built-in returns the secret object if there is one, and &lt;code&gt;undef&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $secret_object = tied $maybe_tied_scalar;

        if( defined $secret_object ) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I have the secret object in &lt;code&gt;$secret_object&lt;/code&gt;, I treat it like any other object.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m sure I have an object, but that doesn&amp;rsquo;t mean I know which methods I can call. The &lt;code&gt;isa&lt;/code&gt; function in the &lt;code&gt;UNIVERSAL&lt;/code&gt; package supposedly can figure this out for me. It tells me if a class is somewhere in an object&amp;rsquo;s inheritance tree. I want to know if my object can do what a &lt;code&gt;Horse&lt;/code&gt; can do, even if I have a &lt;code&gt;RaceHorse&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( UNIVERSAL::isa( $object, &#39;RaceHorse&#39; ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;what if the &lt;code&gt;RaceHorse&lt;/code&gt; class is just a factory for objects in some other class that I&amp;rsquo;m not supposed to know about? I&amp;rsquo;ll make a new object as a prototype just to get its reference:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( UNIVERSAL::isa( $object, ref RaceHorse-&amp;gt;new() ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A real object-oriented programmer doesn&amp;rsquo;t care what sort of object it is as long as it can respond to the right method. I should use &lt;code&gt;can&lt;/code&gt; instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( UNIVERSAL::can( $object, $method ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This doesn&amp;rsquo;t always work either. &lt;code&gt;can&lt;/code&gt; only knows about defined subroutine names, and only looks in the inheritance tree for them. It can&amp;rsquo;t detect methods from &lt;code&gt;AUTOLOAD&lt;/code&gt; or traits. I could override the &lt;code&gt;can&lt;/code&gt; method to handle those, but I have to call it as a method (this works for &lt;code&gt;isa&lt;/code&gt; too):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( $object-&amp;gt;can( $method ) ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if &lt;code&gt;$object&lt;/code&gt; wasn&amp;rsquo;t really an object? I just called a method on a non-object! I&amp;rsquo;m back to my original problem, but I don&amp;rsquo;t want to use all of those tests I just went through. I&amp;rsquo;ll fix this with an &lt;code&gt;eval&lt;/code&gt;, which catches the error for non-objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( eval{ $object-&amp;gt;can( $method ) } ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;but what if someone installed a &lt;code&gt;__DIE__&lt;/code&gt; handler that simply &lt;code&gt;exit&lt;/code&gt;-ed instead of &lt;code&gt;die&lt;/code&gt;-ing? Programmers do that sort of thing forgetting that it affects the entire program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $SIG{__DIE__} = sub { exit };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now my &lt;code&gt;eval&lt;/code&gt; tries to &lt;code&gt;die&lt;/code&gt; because it caught the error, but the &lt;code&gt;__DIE__&lt;/code&gt; handler says &lt;code&gt;exit&lt;/code&gt;, so the program stops without an error. I have to localize the &lt;code&gt;__DIE__&lt;/code&gt; handler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   if( eval{ local $SIG{__DIE__}; $object-&amp;gt;can( $method ) } ) {
           $object-&amp;gt;method;
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I&amp;rsquo;m the guy responsible for the &lt;code&gt;__DIE__&lt;/code&gt; handler, I could use &lt;code&gt;$^S&lt;/code&gt; to see if I&amp;rsquo;m in an &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $SIG{__DIE__} = sub { $^S ? die : exit };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s solved it, right? Not quite. Why do all of that checking? I can just call the method and hope for the best. If I get an error, so be it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my $result = eval { $object-&amp;gt;method };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have to wrap all of my method calls in an eval. None of this would really be a problem if Perl were an object language. Or is it? The &lt;a href=&#34;https://metacpan.org/pod/autobox&#34;&gt;autobox&lt;/a&gt; module makes Perl data types look like objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   use autobox;

   sub SCALAR::println { print $_[0], &amp;quot;\n&amp;quot; }

   &#39;Hello World&#39;-&amp;gt;println;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That works because it uses a special package &lt;code&gt;SCALAR&lt;/code&gt;, although I need to define methods in it myself. I&amp;rsquo;ll catch unknown methods with &lt;code&gt;AUTOLOAD&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   sub SCALAR::AUTOLOAD {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, I can just wait for Perl 6 when these things get much less murky because everything is an object.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Navigation Menus</title>
      <link>http://localhost:1313/pub/2005/07/07/navwidgets.html/</link>
      <pubDate>Thu, 07 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/07/navwidgets.html/</guid>
      <description>

&lt;p&gt;Navigation menus are a group of links given at one side of the page that allows users to navigate to different places of a website. Navigation menus allow site visitors to explore other pages of the site and to find what they want more easily. For example, &lt;a href=&#34;http://www.paulgraham.com/&#34;&gt;Paul Graham&amp;rsquo;s home page&lt;/a&gt; contains a simple navigation menu made out of images. It doesn&amp;rsquo;t change as the site visitor move to different pages of the site. The &lt;a href=&#34;https://www.kde.org/&#34;&gt;KDE desktop environment&lt;/a&gt; home page contains a more sophisticated menu. Click on &lt;a href=&#34;https://www.kde.org/screenshots/&#34;&gt;the link to the screenshots&lt;/a&gt; to see a submenu for links to screenshots from multiple versions of KDE. Other menu items have similar expansions.&lt;/p&gt;

&lt;h3 id=&#34;common-patterns-in-navigation-menus-and-site-flow&#34;&gt;Common Patterns in Navigation Menus and Site Flow&lt;/h3&gt;

&lt;p&gt;There are several patterns in maintaining navigation menus and general site flow.&lt;/p&gt;

&lt;h4 id=&#34;a-tree-of-items&#34;&gt;A Tree of Items&lt;/h4&gt;

&lt;p&gt;Usually, the items in the navigation menus are a tree structure (as is the case for the KDE site) or a flat list. Sometimes, branches of the tree can &lt;em&gt;expand&lt;/em&gt; or collapse depending on the current page. This prevents having to display the entire tree at once.&lt;/p&gt;

&lt;h4 id=&#34;next-previous-up-links-to-traverse-a-site&#34;&gt;Next/Previous/Up Links to Traverse a Site&lt;/h4&gt;

&lt;p&gt;Many sites provide links to traverse the pages of the site in order: a &lt;em&gt;Next&lt;/em&gt; link to go to the next page, a &lt;em&gt;Previous&lt;/em&gt; link to go to the previous page, an &lt;em&gt;Up&lt;/em&gt; link to go to the section containing the current page, a &lt;em&gt;Contents&lt;/em&gt; link to go to the main page, and so on.&lt;/p&gt;

&lt;p&gt;HTML can represent these links by using &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag and &lt;code&gt;&amp;lt;link rel=&amp;quot;next&amp;quot; href=&amp;quot;&amp;quot; /&amp;gt;&lt;/code&gt;. directives. Mozilla, Firefox, and Opera all support these tags. They can be also visible in the HTML as normal links, as is the case with &lt;a href=&#34;http://www.gnu.org/software/make/manual/html_node/make_toc.html&#34;&gt;GNU Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;site-maps-and-breadcrumb-trails&#34;&gt;Site Maps and Breadcrumb Trails&lt;/h4&gt;

&lt;p&gt;Other navigation aids provided by sites include a &lt;em&gt;site map&lt;/em&gt; (like &lt;a href=&#34;http://www.catb.org/~esr/sitemap.html&#34;&gt;the one on Eric S. Raymond&amp;rsquo;s home page&lt;/a&gt;) and a &lt;em&gt;breadcrumb trail&lt;/em&gt;. A breadcrumb trail is a path of the components of the navigation menu that leads to the current page. The &lt;a href=&#34;https://metacpan.org/pod/Module::Build::Cookbook&#34;&gt;documentation for Module::Build::Cookbook&lt;/a&gt; provides an example (&amp;ldquo;Ken Williams &amp;gt; Module-Build &amp;gt; Module::Build::Cookbook,&amp;rdquo; in this case).&lt;/p&gt;

&lt;h4 id=&#34;hidden-pages-and-skipped-pages&#34;&gt;Hidden Pages and Skipped Pages&lt;/h4&gt;

&lt;p&gt;Hidden pages are part of the site flow (the next/previous scheme) but don&amp;rsquo;t appear in the navigation menu. Skipped pages are the opposite: they appear in the navigation menu, but are not part of the site flow.&lt;/p&gt;

&lt;h3 id=&#34;introducing-html-widgets-navmenu&#34;&gt;Introducing HTML::Widgets::NavMenu&lt;/h3&gt;

&lt;p&gt;How do you create menus? &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/&#34;&gt;HTML::Widgets::NavMenu&lt;/a&gt; is a &lt;a href=&#34;https://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt; module for maintaining navigation menus and site flow in general. It supports all of the above-mentioned patterns and some others, has a comprehensive test suite, and is under active maintenance. I have successfully used this module to maintain the site flow logic for such sites as &lt;a href=&#34;http://www.shlomifish.org/&#34;&gt;my personal home page&lt;/a&gt; and &lt;a href=&#34;http://perl-begin.berlios.de/&#34;&gt;the Perl Beginners&amp;rsquo; Site&lt;/a&gt;. Other people use it for their own sites.&lt;/p&gt;

&lt;p&gt;This makes it easy to generate and maintain such navigation menus in Perl. It is generic enough so that it can generate static HTML or dynamic HTML on the fly for use within server-side scripts (CGI, &lt;em&gt;mod_perl&lt;/em&gt;, etc.).&lt;/p&gt;

&lt;p&gt;To install it, use a CPAN front end by issuing a command such as &lt;code&gt;perl -MCPANPLUS -e &amp;quot;install HTML::Widgets::NavMenu&amp;quot;&lt;/code&gt; or &lt;code&gt;perl -MCPAN -e &amp;quot;install HTML::Widgets::NavMenu&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-example&#34;&gt;A Simple Example&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example: a navigation tree that contains a home page and two other pages.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/simple/H-W-NM-simple.pl&#34;&gt;the complete code for this example&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;

use HTML::Widgets::NavMenu;
use File::Path;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the standard way to begin a Perl script. It imports the module and the &lt;code&gt;File::Path&lt;/code&gt; module, both of which it uses later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $css_style = &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot;;
a:hover { background-color : palegreen; }
.body {
.
.
.
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code defines a CSS stylesheet to make things nicer visually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $nav_menu_tree =
{
    &#39;host&#39;  =&amp;gt; &amp;quot;default&amp;quot;,
    &#39;text&#39;  =&amp;gt; &amp;quot;Top 1&amp;quot;,
    &#39;title&#39; =&amp;gt; &amp;quot;T1 Title&amp;quot;,
    &#39;subs&#39;  =&amp;gt;
    [
        {
            &#39;text&#39; =&amp;gt; &amp;quot;Home&amp;quot;,
            &#39;url&#39;  =&amp;gt; &amp;quot;&amp;quot;,
        },
        {
            &#39;text&#39;  =&amp;gt; &amp;quot;About Me&amp;quot;,
            &#39;title&#39; =&amp;gt; &amp;quot;About Myself&amp;quot;,
            &#39;url&#39;   =&amp;gt; &amp;quot;me/&amp;quot;,
        },
        {
            &#39;text&#39;  =&amp;gt; &amp;quot;Links&amp;quot;,
            &#39;title&#39; =&amp;gt; &amp;quot;Hyperlinks to other Pages&amp;quot;,
            &#39;url&#39;   =&amp;gt; &amp;quot;links/&amp;quot;,
        },
    ],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this is important. This is the tree that describes the navigation menu. It is a standard nested Perl 5 data structure, with well-specified keys. These keys are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;: A specification of the host on which the sub-tree starting from that node resides. HTML::Widgets::NavMenu menus can span several hosts on several domains. In this case, the menu uses just one host, so &lt;code&gt;default&lt;/code&gt; here is fine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: What to place inside of the &lt;code&gt;&amp;lt;a&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt; tag (or alternatively, the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag, if it&amp;rsquo;s the current page).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Text to place as a &lt;code&gt;title&lt;/code&gt; attribute to a hyperlink (usually displayed as a tooltip). It can display more detailed information, helping to keep the link text itself short.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The path within the host where this item resides. Note that all URLs are relative to the top of the host, not the URL of their supernode. If the supernode has a path of &lt;em&gt;software/&lt;/em&gt; and you wish the subnode to have a path of &lt;em&gt;software/gimp/&lt;/em&gt;, specify &lt;code&gt;url =&amp;gt; &#39;software/gimp/&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subs&lt;/code&gt;: An array reference that contains the node&amp;rsquo;s sub-items. Normally, this will render them in a submenu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final note: HTML::Widgets::NavMenu does not render the top item. The rendering starts from its sub-items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %hosts =
(
    &#39;hosts&#39; =&amp;gt;
    {
        &#39;default&#39; =&amp;gt;
        {
            &#39;base_url&#39; =&amp;gt; (&amp;quot;http://web-cpan.berlios.de/modules/&amp;quot; .
                &amp;quot;HTML-Widgets-NavMenu/article/examples/simple/dest/&amp;quot;),
        },
    },
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the hosts map, which holds the hosts for the site. Here there is only one host, called &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @pages =
(
    {
        &#39;path&#39;    =&amp;gt; &amp;quot;&amp;quot;,
        &#39;title&#39;   =&amp;gt; &amp;quot;John Doe&#39;s Homepage&amp;quot;,
        &#39;content&#39; =&amp;gt; &amp;lt;&amp;lt;&#39;EOF&#39;,
&amp;lt;p&amp;gt;
Hi! This is the homepage of John Doe. I hope you enjoy your stay here.
&amp;lt;/p&amp;gt;
EOF
    },
    .
    .
    .
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The purpose of this array is to enumerate the pages, giving each one the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag, the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; title, and the content that it contains. It&amp;rsquo;s not part of HTML::Widgets::NavMenu, but rather something that this script uses to render meaningful pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach my $page (@pages)
{
    my $path     = $page-&amp;gt;{&#39;path&#39;};
    my $title    = $page-&amp;gt;{&#39;title&#39;};
    my $content  = $page-&amp;gt;{&#39;content&#39;};
    my $nav_menu =

        HTML::Widgets::NavMenu-&amp;gt;new(
            path_info     =&amp;gt; &amp;quot;/$path&amp;quot;,
            current_host  =&amp;gt; &amp;quot;default&amp;quot;,
            hosts         =&amp;gt; \%hosts,
            tree_contents =&amp;gt; $nav_menu_tree,
        );

    my $nav_menu_results = $nav_menu-&amp;gt;render();
    my $nav_menu_text    = join(&amp;quot;\n&amp;quot;, @{$nav_menu_results-&amp;gt;{&#39;html&#39;}});

    my $file_path = $path;
    if (($file_path =~ m{/$}) || ($file_path eq &amp;quot;&amp;quot;))
    {
        $file_path .= &amp;quot;index.html&amp;quot;;
    }
    my $full_path = &amp;quot;dest/$file_path&amp;quot;;
    $full_path =~ m{^(.*)/[^/]+$};

    # mkpath() throws an exception if it isn&#39;t successful, which will cause
    # this program to terminate.  This is what we want.
    mkpath($1, 0, 0755);
    open my $out, &amp;quot;&amp;gt;&amp;quot;, $full_path or
        die &amp;quot;Could not open \&amp;quot;$full_path\&amp;quot; for writing: $!\n&amp;quot;;

    print {$out} &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot;;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html
     PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;
     &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;$title&amp;lt;/title&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
$css_style
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;navbar&amp;quot;&amp;gt;
$nav_menu_text
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;body&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;$title&amp;lt;/h1&amp;gt;
$content
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
EOF

    close($out);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loop iterates over all the pages and renders each one in turn. If the directory up to the file does not exist, the program creates it by using the &lt;code&gt;mkpath()&lt;/code&gt; function. The most important lines are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    my $nav_menu =
        HTML::Widgets::NavMenu-&amp;gt;new(
            path_info     =&amp;gt; &amp;quot;/$path&amp;quot;,
            current_host  =&amp;gt; &amp;quot;default&amp;quot;,
            hosts         =&amp;gt; \%hosts,
            tree_contents =&amp;gt; $nav_menu_tree,
        );

    my $nav_menu_results = $nav_menu-&amp;gt;render();
    my $nav_menu_text    = join(&amp;quot;\n&amp;quot;, @{$nav_menu_results-&amp;gt;{&#39;html&#39;}});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code initializes a new navigation menu, giving it four named parameters. &lt;code&gt;path_info&lt;/code&gt; is the path within the host. Note that, as opposed to the paths in the navigation menu, it starts with a slash. This is to allow some CGI-related redirections. &lt;code&gt;current_host&lt;/code&gt; is the current host (again, it&amp;rsquo;s &lt;code&gt;default&lt;/code&gt;). Finally, &lt;code&gt;hosts&lt;/code&gt; and &lt;code&gt;tree_contents&lt;/code&gt; point to hosts and the tree of contents, respectively.&lt;/p&gt;

&lt;p&gt;The object &lt;code&gt;render()&lt;/code&gt; method returns the results in a hash reference, with the navigation menu results as an array of tags pointed by the &lt;code&gt;html&lt;/code&gt; key. The code finally &lt;code&gt;join&lt;/code&gt;s and returns them.&lt;/p&gt;

&lt;p&gt;The program produces &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/simple/dest/&#34;&gt;this result&lt;/a&gt;, with three entries, placed in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. When a user visits a page, the corresponding menu entry displays in bold and has its link removed.&lt;/p&gt;

&lt;h3 id=&#34;a-more-complex-example&#34;&gt;A More Complex Example&lt;/h3&gt;

&lt;p&gt;Now consider &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/complex/H-W-NM-complex.pl&#34;&gt;a more complex example&lt;/a&gt;. This time, the tree is considerably larger and contains nested items. There are now &lt;code&gt;subs&lt;/code&gt; of other pages.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/complex/dest/&#34;&gt;final site&lt;/a&gt; has a menu. When accessing a page (for example, &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/complex/dest/me/&#34;&gt;the &amp;ldquo;About Myself&amp;rdquo; page&lt;/a&gt;) its expands so visitors can see its sub-items.&lt;/p&gt;

&lt;h3 id=&#34;adding-more-navigation-aids&#34;&gt;Adding More Navigation Aids&lt;/h3&gt;

&lt;p&gt;The next step is to add a breadcrumb trail, navigation links, and a site map to the site. You can inspect &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/with-embellishments/H-W-NM-embellish.pl&#34;&gt;the new code&lt;/a&gt; to see if you understand it and &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/with-embellishments/dest/&#34;&gt;view the final site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The breadcrumb trail appears right at the top of the site. Below it is a toolbar with navigation links like &amp;ldquo;next,&amp;rdquo; &amp;ldquo;previous,&amp;rdquo; and &amp;ldquo;up.&amp;rdquo; Finally, there&amp;rsquo;s &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/with-embellishments/dest/site-map/&#34;&gt;a site map&lt;/a&gt;. Here are the salient points of the &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/complex-2-embellish-delta.diff&#34; title=&#34;the difference from the previous version in patch format&#34;&gt;code&amp;rsquo;s modifications&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The code loads the &lt;a href=&#34;http://www.template-toolkit.org/&#34;&gt;Template Toolkit&lt;/a&gt; to render the page, then fills in the variables of the template to define the template itself and to process it into the output file.&lt;/li&gt;
&lt;li&gt;The CSS stylesheet has several new styles, to make the modified page look nicer.&lt;/li&gt;
&lt;li&gt;A template portion to transform a breadcrumb-trail object as returned by HTML::Widgets::NavMenu into HTML. It should be easy to understand.&lt;/li&gt;
&lt;li&gt;The bottom of the navigation menu tree now has an entry with a link to the site map page.&lt;/li&gt;
&lt;li&gt;The site map is now part of the &lt;code&gt;@pages&lt;/code&gt; array. It initializes an &lt;code&gt;HTML::Widgets::NavMenu&lt;/code&gt; with the appropriate URL, and then uses its &lt;code&gt;gen_site_map()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;There is new code used to generate the navigation links. These links are a hash reference with the keys being the relevance of the link and the value being an object supplying information about the link (such as &lt;code&gt;direct_url()&lt;/code&gt; or &lt;code&gt;title()&lt;/code&gt;). There are two loops that renders each link into both the HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements, or the toolbar to present on the page.&lt;/li&gt;
&lt;li&gt;The text of the breadcrumb trail is a &lt;code&gt;join&lt;/code&gt; of their HTML representations.&lt;/li&gt;
&lt;li&gt;The generated HTML template includes the new page elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;fine-grained-site-flow&#34;&gt;Fine-Grained Site Flow&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/H-W-NM-fine-grained-site-flow.pl&#34;&gt;final example&lt;/a&gt; modifies the site to have a more sophisticated site flow. &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/embellish-2-fine-grained-delta.diff&#34;&gt;Looking at the changes&lt;/a&gt; shows several more additions. Their implications are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Both English resumés have a &lt;code&gt;&#39;skip&#39; =&amp;gt; 1,&lt;/code&gt; pair. This caused these pages to &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/dest/me/resumes/&#34;&gt;appear in the navigation menu&lt;/a&gt;, but not to be part of the traversal flow. Clicking &amp;ldquo;next&amp;rdquo; at that page will skip them both. Pressing &amp;ldquo;prev&amp;rdquo; at &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/dest/humour/&#34;&gt;the page that follows them&lt;/a&gt; leads to the page that precedes them.&lt;/li&gt;
&lt;li&gt;The Humour section has its &lt;code&gt;&#39;show_always&#39;&lt;/code&gt; attribute set, causing it to expand on all pages of the site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;expand&#39;&lt;/code&gt; is a regular expression for the Software section. As a result, accessing &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/dest/perl/japhs/&#34;&gt;a page not specified in the navigation menu&lt;/a&gt; but that matches that regular expression causes the Software section to expand there.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/dest/software-tools&#34;&gt;The software tools page&lt;/a&gt; entry has the attribute &lt;code&gt;&#39;hide&#39; =&amp;gt; 1&lt;/code&gt;. This removes it from the navigation menu but allows it to appear in the site flow. Clicking on &amp;ldquo;next&amp;rdquo; on &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-site-flow/dest/open-source/bits.html&#34;&gt;the preceding page&lt;/a&gt; will reach it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-cgi-script&#34;&gt;A CGI Script&lt;/h3&gt;

&lt;p&gt;Until now, the examples have demonstrated generating a set of static HTML pages. The code can also run dynamically on a server. One approach is to use the ubiquitous &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI.pm&lt;/a&gt;, which comes bundled with Perl.&lt;/p&gt;

&lt;p&gt;Converting to &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/cgi-script/H-W-NM-serve.pl.html&#34;&gt;the CGI script&lt;/a&gt; required &lt;a href=&#34;http://web-cpan.berlios.de/modules/HTML-Widgets-NavMenu/article/examples/fine-grained-2-cgi.diff.html&#34;&gt;few changes&lt;/a&gt;. Inside of the page loop, the code checks if the page matches the CGI path info (the path appended after the CGI script name). If so, the code calls the &lt;code&gt;render_page()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;render_page()&lt;/code&gt; is similar to the rest of the loop except that it prints the output to &lt;code&gt;STDOUT&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; the CGI header. Finally, after the loop ends, the code checks that it has found a page. If not, it displays an error page.&lt;/p&gt;

&lt;p&gt;Note that the way this script looks for a suitable page is suboptimal. A better-engineered script might keep the page paths in a persistent hash or other data structure from which to look up the path info.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article demonstrated how to use HTML::Widgets::NavMenu to maintain navigation menus and organize site flow. Reading its documentation may reveal other useful features. Now you no longer have an excuse for lacking the niceties demonstrated here on your site. Happy hacking!&lt;/p&gt;

&lt;h3 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h3&gt;

&lt;p&gt;Thanks to Diego Iastrubni, Aankehn, and chromatic (my editor) for giving some useful commentary on early drafts of this document.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More Lightning Articles</title>
      <link>http://localhost:1313/pub/2005/03/31/lightning2.html/</link>
      <pubDate>Thu, 31 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/31/lightning2.html/</guid>
      <description>

&lt;h3 id=&#34;span-id-emacsperl-customizing-emacs-with-perl-span&#34;&gt;&lt;span id=&#34;emacsperl&#34;&gt;Customizing Emacs with Perl&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;by Bob DuCharme&lt;/p&gt;

&lt;p&gt;Over time, I&amp;rsquo;ve accumulated a list of Emacs customizations I wanted to implement when I got the chance. For example, I&amp;rsquo;d like macros to perform certain global replaces just within a marked block, and I&amp;rsquo;d like a macro to reformat an Outlook formatted date to an ISO 8609 formatted date. I&amp;rsquo;m not overly intimidated by the elisp language used to customize Emacs behavior; I&amp;rsquo;ve copied elisp code and modified it to make some tweaks before, I had a healthy dose of Scheme and LISP programming in school, and I&amp;rsquo;ve done extensive work with XSLT, a descendant of these grand old languages. Still, as with a lot of postponed editor customization work, I knew I&amp;rsquo;d have to use these macros many, many times before they earned back the time invested in creating them, because I wasn&amp;rsquo;t that familiar with string manipulation and other basic operations in a LISP-based language. I kept thinking to myself, &amp;ldquo;This would be so easy if I could just do the string manipulation in Perl!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Then, I figured out how I could write Emacs functions that called Perl to operate on a marked block (or, in Emacs parlance, a &amp;ldquo;region&amp;rdquo;). Many Emacs users are familiar with the &lt;code&gt;Escape+|&lt;/code&gt; keystroke, which invokes the &lt;code&gt;shell-command-on-region&lt;/code&gt; function. It brings up a prompt in the minibuffer where you enter the command to run on the marked region, and after you press the Enter key Emacs puts the command&amp;rsquo;s output in the minibuffer if it will fit, or into a new &amp;ldquo;*Shell Command Output*&amp;rdquo; buffer if not. For example, after you mark part of an HTML file you&amp;rsquo;re editing as the region, pressing &lt;code&gt;Escape+|&lt;/code&gt; and entering &lt;code&gt;wc&lt;/code&gt; (for &amp;ldquo;word count&amp;rdquo;) at the minibuffer&amp;rsquo;s &amp;ldquo;Shell command on region:&amp;rdquo; prompt will feed the text to this command line utility if you have it in your path, and then display the number of lines, words, and characters in the region at the minibuffer. If you enter &lt;code&gt;sort&lt;/code&gt; at the same prompt, Emacs will run that command instead of &lt;code&gt;wc&lt;/code&gt; and display the result in a buffer.&lt;/p&gt;

&lt;p&gt;Entering &lt;code&gt;perl /some/path/foo.pl&lt;/code&gt; at the same prompt will run the named Perl script on the marked region and display the output appropriately. This may seem like a lot of keystrokes if you just want to do a global replace in a few paragraphs, but remember: &lt;code&gt;Ctrl+|&lt;/code&gt; calls Emacs&amp;rsquo;s built-in &lt;code&gt;shell-command-on-region&lt;/code&gt; function, and you can call this same function from a new function that you define yourself. My recent great discovery was that along with parameters identifying the region boundaries and the command to run on the region, &lt;code&gt;shell-command-on-region&lt;/code&gt; takes an optional parameter that lets you tell it to replace the input region with the output region. When you&amp;rsquo;re editing a document with Emacs, this allows you to pass a marked region outside of Emacs to a Perl script, let the Perl script do whatever you like to the text, and then Emacs will replace the original text with the processed version. (If your Perl script mangled the text, Emacs&amp;rsquo; excellent &lt;code&gt;undo&lt;/code&gt; command can come to the rescue.)&lt;/p&gt;

&lt;p&gt;Consider an example. When I take notes about a project at work, I might write that Joe R. sent an e-mail telling me that a certain system won&amp;rsquo;t need any revisions to handle the new data. I want to make a note of when he told me this, so I copy and paste the date from the e-mail he sent. We use Microsoft Outlook at work, and the dates have a format following the model &amp;ldquo;Tue 2/22/2005 6:05 PM&amp;rdquo;. I already have an Emacs macro bound to &lt;code&gt;alt+d&lt;/code&gt; to insert the current date and time (also handy when taking notes) and I wanted the date format that refers to e-mails to be the same format as the ones inserted with my &lt;code&gt;alt+d&lt;/code&gt; macro: an ISO 8609 format of the form &amp;ldquo;2005-02-22T18:05&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;.emacs&lt;/em&gt; startup file holds customized functions that you want available during your Emacs session. The following shows a bit of code that I put in mine so that I could convert these dates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun OLDate2ISO ()
  (interactive)
  (shell-command-on-region (point)
         (mark) &amp;quot;perl c:/util/OLDate2ISO.pl&amp;quot; nil t))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;(interactive)&lt;/code&gt; declaration tells Emacs that the function being defined can be invoked interactively as a command. For example, I can enter &amp;ldquo;OLDate2ISO&amp;rdquo; at the Emacs minibuffer command prompt, or I can press a keystroke or select a menu choice bound to this function. The &lt;code&gt;point&lt;/code&gt; and &lt;code&gt;mark&lt;/code&gt; functions are built into Emacs to identify the boundaries of the currently marked region, so they&amp;rsquo;re handy for the first and second arguments to &lt;code&gt;shell-command-on-region&lt;/code&gt;, which tell it which text is the region to act on. The third argument is the actual command to execute on the region; enter any command available on your operating system that can accept standard input. To define your own Emacs functions that call Perl functions, just change the script name in this argument from &lt;code&gt;OLDate2ISO&lt;/code&gt; to anything you like and then change this third argument to &lt;code&gt;shell-command-on-region&lt;/code&gt; to call your own Perl script.&lt;/p&gt;

&lt;p&gt;Leave the last two arguments as &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. Don&amp;rsquo;t worry about the fourth parameter, which controls the buffer where the shell output appears. (Setting it to &lt;code&gt;nil&lt;/code&gt; means &amp;ldquo;don&amp;rsquo;t bother.&amp;rdquo;) The fifth parameter is the key to the whole trick: when non-nil, it tells Emacs to replace the marked text in the editing buffer with the output of the command described in the third argument instead of sending the output to a buffer.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with Perl, there&amp;rsquo;s nothing particularly interesting about the &lt;em&gt;OLDate2ISO.pl&lt;/em&gt; script. It does some regular expression matching to split up the string, converts the time to a 24 hour clock, and rearranges the pieces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Convert Outlook format date to ISO 8309 date 
#(e.g. Wed 2/16/2005 5:27 PM to 2005-02-16T17:27)
while (&amp;lt;&amp;gt;) {
  if (/\w+ (\d+)\/(\d+)\/(\d{4}) (\d+):(\d+) ([AP])M/) {
     $AorP = $6;
     $minutes = $5;
     $hour = $4;
     $year = $3;
     $month = $1;
     $day = $2;
     $day = &#39;0&#39; . $day if ($day &amp;lt; 10);
     $month = &#39;0&#39; . $month if ($month &amp;lt; 10);
     $hour = $hour + 12 if ($6 eq &#39;P&#39;);
     $hour = &#39;0&#39; . $hour if ($hour &amp;lt; 10);
     $_ = &amp;quot;$year-$month-$day&amp;quot; . &amp;quot;T$hour:$minutes&amp;quot;;
  }
  print;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you start up Emacs with a function definition like the &lt;code&gt;defun OLDate2ISO&lt;/code&gt; one shown above in your &lt;em&gt;.emacs&lt;/em&gt; file, the function is available to you like any other in Emacs. Press &lt;code&gt;Escape+x&lt;/code&gt; to bring up the Emacs minibuffer command line and enter &amp;ldquo;OLDate2ISO&amp;rdquo; there to execute it on the currently marked buffer. Like any other interactive command, you can also assign it to a keystroke or a menu choice.&lt;/p&gt;

&lt;p&gt;There might be a more efficient way to do the Perl coding shown above, but I didn&amp;rsquo;t spend too much time on it. That&amp;rsquo;s the beauty of it: with five minutes of Perl coding and one minute of elisp coding, I had a new menu choice to quickly do the transformation I had always wished for.&lt;/p&gt;

&lt;p&gt;Another example of something I always wanted is the following &lt;em&gt;txt2htmlp.pl&lt;/em&gt; script, which is useful after plugging a few paragraphs of plain text into an HTML document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Turn lines of plain text into HTML p elements.
while (&amp;lt;&amp;gt;) {
  chop($_);
  # Turn ampersands and &amp;lt; into entity references.
  s/\&amp;amp;/\&amp;amp;amp\;/g;
  s/&amp;lt;/\&amp;amp;lt\;/g;
  # Wrap each non-blank line in a &amp;quot;p&amp;quot; element.
  print &amp;quot;&amp;lt;p&amp;gt;$_&amp;lt;/p&amp;gt;\n\n&amp;quot; if (!(/^\s*$/));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, it&amp;rsquo;s not a particularly innovative Perl script, but with the following bit of elisp in my &lt;em&gt;.emacs&lt;/em&gt; file, I have something that greatly speeds up the addition of hastily written notes into a web page, especially when I create an Emacs menu choice to call this function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun txt2htmlp ()
  (interactive)
  (shell-command-on-region (point) 
         (mark) &amp;quot;perl c:/util/txt2htmlp.pl&amp;quot; nil t))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes when I hear about hot new editors, I wonder whether they&amp;rsquo;ll ever take the place of Emacs in my daily routine. Now that I can so easily add the power of Perl to my use of Emacs, it&amp;rsquo;s going to be a lot more difficult for any other editor to compete with Emacs on my computer.&lt;/p&gt;

&lt;h3 id=&#34;span-id-linetrace-debug-your-programs-with-devel-linetrace-span&#34;&gt;&lt;span id=&#34;linetrace&#34;&gt;Debug Your Programs with Devel::LineTrace&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;by Shlomi Fish&lt;/p&gt;

&lt;p&gt;Often, programmers find a need to use print statements to output information to the screen, in order to help them analyze what went wrong in running the script. However, including these statements verbatim in the script is not such a good idea. If not promptly removed, these statements can have all kinds of side-effects: slowing down the script, destroying the correct format of its output (possibly ruining test-cases), littering the code, and confusing the user. It would be a better idea not to place them within the code in the first place. How, though, can you debug without debugging?&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://metacpan.org/pod/Devel::LineTrace&#34;&gt;Devel::LineTrace&lt;/a&gt;, a Perl module that can assign portions of code to execute at arbitrary lines within the code. That way, the programmer can add print statements in relevant places in the code without harming the program&amp;rsquo;s integrity.&lt;/p&gt;

&lt;h4 id=&#34;verifying-that-use-lib-has-taken-effect&#34;&gt;Verifying That &lt;code&gt;use lib&lt;/code&gt; Has Taken Effect&lt;/h4&gt;

&lt;p&gt;One example I recently encountered was that I wanted to use a module I wrote from the specialized directory where I placed it, while it was already installed in the Perl&amp;rsquo;s global include path. I used a &lt;code&gt;use lib &amp;quot;./MyPath&amp;quot;&lt;/code&gt; directive to make sure this was the case, but now had a problem. What if there was a typo in the path of the &lt;code&gt;use lib&lt;/code&gt; directive, and as a result, Perl loaded the module from the global path instead? I needed a way to verify it.&lt;/p&gt;

&lt;p&gt;To demonstrate how &lt;code&gt;Devel::LineTrace&lt;/code&gt; can do just that, consider a similar script that tries to use a module named &lt;code&gt;CGI&lt;/code&gt; from the path &lt;em&gt;./MyModules&lt;/em&gt; instead of the global Perl path. (It is a bad idea to name your modules after names of modules from CPAN or from the Perl distribution, but this is just for the sake of the demonstration.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl -w

use strict;
use lib &amp;quot;./MyModules&amp;quot;;

use CGI;

my $q = CGI-&amp;gt;new();

print $q-&amp;gt;header();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Name this script &lt;em&gt;good.pl&lt;/em&gt;. To test that Perl loaded the &lt;code&gt;CGI&lt;/code&gt; module from the &lt;em&gt;./MyModules&lt;/em&gt; directory, direct &lt;code&gt;Devel::LineTrace&lt;/code&gt; to print the relevant entry from the &lt;code&gt;%INC&lt;/code&gt; internal variable, at the first line after the &lt;code&gt;use CGI&lt;/code&gt; one.&lt;/p&gt;

&lt;p&gt;To do so, prepare this file and call it &lt;em&gt;test-good.txt&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;good.pl:8
    print STDERR &amp;quot;\$INC{CGI.pm} == &amp;quot;, $INC{&amp;quot;CGI.pm&amp;quot;}, &amp;quot;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Place the file and the line number at which the trace should be inserted on the first line. Then comes the code to evaluate, indented from the start of the line. After the first trace, you can put other traces, by starting the line with the filename and line number, and putting the code in the following (indented) lines. This example is simple enough not to need that though.&lt;/p&gt;

&lt;p&gt;After you have prepared &lt;em&gt;test-good.txt&lt;/em&gt;, run the script through &lt;code&gt;Devel::LineTrace&lt;/code&gt; by executing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ PERL5DB_LT=&amp;quot;test-good.txt&amp;quot; perl -d:LineTrace good.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This assumes a Bourne-shell derivative.). The &lt;code&gt;PERL5DB_LT&lt;/code&gt; environment variable contains the path of the file to use for debugging, and the &lt;code&gt;-d:LineTrace&lt;/code&gt; directive to Perl instructs it to debug the script through the &lt;code&gt;Devel::LineTrace&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;As a result, you should see either the following output to standard error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$INC{CGI.pm} == MyModules/CGI.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;meaning that Perl indeed loaded the module from the &lt;em&gt;MyModules&lt;/em&gt; sub-directory of the current directory. Otherwise, you&amp;rsquo;ll see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$INC{CGI.pm} == /usr/lib/perl5/vendor_perl/5.8.4/CGI.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;which means that it came from the global path and something went wrong.&lt;/p&gt;

&lt;h4 id=&#34;limitations-of-devel-linetrace&#34;&gt;Limitations of &lt;code&gt;Devel::LineTrace&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Devel::LineTrace&lt;/code&gt; has two limitations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Because it uses the Perl debugger interface and stops at every line (to check whether it contains a trace), program execution is considerably slower when the program is being run under it.&lt;/li&gt;
&lt;li&gt;It assigns traces to line numbers, and therefore you must update it if the line numbering of the file changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nevertheless, it is a good solution for keeping those pesky &lt;code&gt;print&lt;/code&gt; statements out of your programs. Happy LineTracing!&lt;/p&gt;

&lt;h3 id=&#34;span-id-mockdbi-using-test-mockdbi-span&#34;&gt;&lt;span id=&#34;mockdbi&#34;&gt;Using Test::MockDBI&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;by Mark Leighton Fisher&lt;/p&gt;

&lt;p&gt;What if you could test your program&amp;rsquo;s use of the DBI just by creating a set of rules to guide the DBI&amp;rsquo;s behavior—without touching a database (unless you want to)? That is the promise of &lt;a href=&#34;https://metacpan.org/pod/Test::MockDBI&#34;&gt;Test::MockDBI&lt;/a&gt;, which by mocking-up the entire DBI API gives you unprecedented control over every aspect of the DBI&amp;rsquo;s interface with your program.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test::MockDBI&lt;/code&gt; uses &lt;a href=&#34;https://metacpan.org/pod/Test::MockObject::Extends&#34;&gt;Test::MockObject::Extends&lt;/a&gt; to mock all of the DBI transparently. The rest of the program knows nothing about using &lt;code&gt;Test::MockDBI&lt;/code&gt;, making &lt;code&gt;Test::MockDBI&lt;/code&gt; ideal for testing programs that you are taking over, because you only need to add the &lt;code&gt;Test::MockDBI&lt;/code&gt; invocation code— you do not have to modify any of the other program code. (I have found this very handy as a consultant, as I often work on other people&amp;rsquo;s code.)&lt;/p&gt;

&lt;p&gt;Rules are invoked when the current SQL matches the rule&amp;rsquo;s SQL pattern. For finer control, there is an optional numeric DBI testing type for each rule, so that a rule only fires when the SQL matches &lt;em&gt;and&lt;/em&gt; the current DBI testing type is the specified DBI testing type. You can specify this numeric DBI testing type (a simple integer matching &lt;code&gt;/^\d+$/&lt;/code&gt;) from the command line or through &lt;code&gt;Test::MockDBI::set_dbi_test_type()&lt;/code&gt;. You can also set up rules to fail a transaction if a specific &lt;code&gt;DBI::bind_param()&lt;/code&gt; parameter is a specific value. This means there are three types of conditions for &lt;code&gt;Test::MockDBI&lt;/code&gt; rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current SQL&lt;/li&gt;
&lt;li&gt;The current DBI testing type&lt;/li&gt;
&lt;li&gt;The current &lt;code&gt;bind_param()&lt;/code&gt; parameter values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under &lt;code&gt;Test::MockDBI&lt;/code&gt;, &lt;code&gt;fetch*()&lt;/code&gt; and &lt;code&gt;select*()&lt;/code&gt; methods default to returning nothing (the empty array, the empty hash, or undef for scalars). &lt;code&gt;Test::MockDBIM&lt;/code&gt; lets you take control of their returned data with the methods &lt;code&gt;set_retval_scalar()&lt;/code&gt; and &lt;code&gt;set_retval_array()&lt;/code&gt;. You can specify the returned data directly in the &lt;code&gt;set_retval_*()&lt;/code&gt; call, or pass a CODEREF that generates a return value to use for each call to the matching &lt;code&gt;fetch*()&lt;/code&gt; or &lt;code&gt;select*()&lt;/code&gt; method. CODEREFs let you both simulate DBI&amp;rsquo;s interaction with the database more accurately (as you can return a few rows, then stop), and add in any kind of state machine or other processing needed to precisely test your code.&lt;/p&gt;

&lt;p&gt;When you need to test that your code handles database or DBI failures, &lt;code&gt;bad_method()&lt;/code&gt; is your friend. It can fail any DBI method, with the failures dependent on the current SQL and (optionally) the current DBI testing type. This capability is necessary to test code that handles bad database &lt;code&gt;UPDATE&lt;/code&gt;s, &lt;code&gt;INSERT&lt;/code&gt;s, or &lt;code&gt;DELETE&lt;/code&gt;s, along with being handy for testing failing &lt;code&gt;SELECT&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test::MockDBI&lt;/code&gt; extends your testing capabilities to testing code that is difficult or impossible to test on a live, working database. &lt;code&gt;Test::MockDBI&#39;s&lt;/code&gt; mock-up of the entire DBI API lets you add &lt;code&gt;Test::MockDBI&lt;/code&gt; to your programs without having to modify their current DBI code. Although it is not finished (not all of the DBI is mocked-up yet), &lt;code&gt;Test::MockDBI&lt;/code&gt; is already a powerful tool for testing DBI programs.&lt;/p&gt;

&lt;h3 id=&#34;unnecessary-unbuffering-unbuffering&#34;&gt;&lt;a href=&#34;#unbuffering&#34;&gt;Unnecessary Unbuffering&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;by chromatic&lt;/p&gt;

&lt;p&gt;A great joy in a programmer&amp;rsquo;s life is removing useless code, especially when its absence improves the program. Often this happens in old codebases or codebases thrown together hastily. Sometimes it happens in code written by novice programmers who try several different ideas all together and fail to undo their changes.&lt;/p&gt;

&lt;p&gt;One such persistent idiom is wholesale, program-wide unbuffering, which can take the form of any of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local $| = 1;
$|++;
$| = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes this is valuable. Sometimes it&amp;rsquo;s vital. It&amp;rsquo;s not the default for very good reason, though, and at best, including one of these lines in your program is useless code.&lt;/p&gt;

&lt;h4 id=&#34;what-s-unbuffering&#34;&gt;What&amp;rsquo;s Unbuffering?&lt;/h4&gt;

&lt;p&gt;By default, modern operating systems don&amp;rsquo;t send information to output devices directly, one byte at a time, nor do they read information from input devices directly, one byte at a time. IO is so slow, especially for networks, compared to processors and memory that adding buffers and trying to fill them before sending and receiving information can improve performance.&lt;/p&gt;

&lt;p&gt;Think of trying to fill a bathtub from a hand pump. You &lt;em&gt;could&lt;/em&gt; pump a little water into a bucket and walk back and forth to the bathtub, or you could fill a trough at the pump and fill the bucket from the trough. If the trough is empty, pumping a little bit of water into the bucket will give you a faster start, but it&amp;rsquo;ll take longer in between bucket loads than if you filled the trough at the start and carried water back and forth between the trough and the bathtub.&lt;/p&gt;

&lt;p&gt;Information isn&amp;rsquo;t exactly like water, though. Sometimes it&amp;rsquo;s more important to deliver a message immediately even if it doesn&amp;rsquo;t fill up a bucket. &amp;ldquo;Help, fire!&amp;rdquo; is a very short message, but waiting to send it when you have a full load of messages might be the wrong thing.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why modern operating systems also let you unbuffer specific filehandles. When you print to an unbuffered filehandle, the operating system will handle the message immediately. That doesn&amp;rsquo;t guarantee that whoever&amp;rsquo;s on the other side of the handle will respond immediately; there might be a pump and a trough there.&lt;/p&gt;

&lt;h4 id=&#34;what-s-the-damage&#34;&gt;What&amp;rsquo;s the Damage?&lt;/h4&gt;

&lt;p&gt;According to Mark-Jason Dominus&amp;rsquo; &lt;a href=&#34;http://perl.plover.com/FAQs/Buffering.html&#34;&gt;Suffering from Buffering?&lt;/a&gt;, one sample showed that buffered reading was 40% faster than unbuffered reading, and buffered writing was 60% faster. The latter number may only improve when considering network communications, where the overhead of sending and receiving a single packet of information can overwhelm short messages.&lt;/p&gt;

&lt;p&gt;In simple interactive applications though, there may be no benefit. When attached to a terminal, such as a command line, Perl operates in line-buffered mode. Run the following program and watch the output carefully:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl

use strict;
use warnings;

# buffer flushed at newline
loop_print( 5, &amp;quot;Line-buffered\n&amp;quot; );

# buffer not flushed until newline
loop_print( 5, &amp;quot;Buffered  &amp;quot; );
print &amp;quot;\n&amp;quot;;

# buffer flushed with every print
{
    local $| = 1;
    loop_print( 5, &amp;quot;Unbuffered  &amp;quot; );
}

sub loop_print
{
    my ($times, $message) = @_;

    for (1 .. $times)
    {
        print $message;
        sleep 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first five greetings appear individually and immediately. Perl flushes the buffer for STDOUT when it sees the newlines. The second set appears after five seconds, all at once, when it sees the newline after the loop. The third set appears individually and immediately because Perl flushes the buffer after every &lt;code&gt;print&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Terminals are different from everything else, though. Consider the case of writing to a file. In one terminal window, create a file named &lt;em&gt;buffer.log&lt;/em&gt; and run &lt;code&gt;tail -f buffer.log&lt;/code&gt; or its equivalent to watch the growth of the file in real time. Then add the following lines to the previous program and run it again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open( my $output, &#39;&amp;gt;&#39;, &#39;buffer.log&#39; ) or die &amp;quot;Can&#39;t open buffer.log: $!&amp;quot;;
select( $output );
loop_print( 5, &amp;quot;Buffered\n&amp;quot; );
{
      local $| = 1;
      loop_print( 5, &amp;quot;Unbuffered\n&amp;quot; );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first five messages appear in the log in a batch, all at once, even though they all have newlines. Five messages aren&amp;rsquo;t enough to fill the buffer. Perl only flushes it when it unbuffers the filehandle on assignment to &lt;code&gt;$|&lt;/code&gt;. The second set of messages appear individually, one second after another.&lt;/p&gt;

&lt;p&gt;Finally, the STDERR filehandle is hot by default. Add the following lines to the previous program and run it yet again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select( STDERR );
loop_print( 5, &amp;quot;Unbuffered STDERR &amp;quot; );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though no code disables the buffer on STDERR, the five messages should print immediately, just as in the other unbuffered cases. (If they don&amp;rsquo;t, your OS is weird.)&lt;/p&gt;

&lt;h4 id=&#34;what-s-the-solution&#34;&gt;What&amp;rsquo;s the Solution?&lt;/h4&gt;

&lt;p&gt;Buffering exists for a reason; it&amp;rsquo;s almost always the right thing to do. When it&amp;rsquo;s the wrong thing to do, you can disable it. Here are some rules of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Never disable buffering by default.&lt;/li&gt;
&lt;li&gt;Disable buffering when and while you have multiple sources writing to the same output and their order matters.&lt;/li&gt;
&lt;li&gt;Never disable buffering for network outputs by default.&lt;/li&gt;
&lt;li&gt;Disable buffering for network outputs only when the expected time between full buffers exceeds the expected client timeout length.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t disable buffering on terminal outputs. For STDERR, it&amp;rsquo;s useless, dead code. For STDOUT, you probably don&amp;rsquo;t need it.&lt;/li&gt;
&lt;li&gt;Disable buffering if it&amp;rsquo;s more important to print messages regularly than efficiently.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t disable buffering until you know that the buffer is a problem.&lt;/li&gt;
&lt;li&gt;Disable buffering in the smallest scope possible.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Solving Puzzles with LM-Solve</title>
      <link>http://localhost:1313/pub/2003/11/17/lmsolve.html/</link>
      <pubDate>Mon, 17 Nov 2003 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2003/11/17/lmsolve.html/</guid>
      <description>

&lt;p&gt;Suppose you encounter a (single-player) riddle or a puzzle that you don&amp;rsquo;t know how to solve. Let&amp;rsquo;s also suppose that this puzzle involves moving between several states of the board with an enumerable number of moves emerging from one state. In this case, &lt;a href=&#34;http://vipe.technion.ac.il/~shlomif/lm-solve/&#34;&gt;LM-Solve&lt;/a&gt; (or Games::LMSolve on CPAN) may be of help.&lt;/p&gt;

&lt;p&gt;LM-Solve was originally written to tackle various types of the so-called &lt;a href=&#34;http://www.logicmazes.com/&#34;&gt;logic mazes&lt;/a&gt; that can be found online. Nevertheless, it can be extended to support many other types of single-player puzzles.&lt;/p&gt;

&lt;p&gt;In this article, I will demonstrate how to use LM-Solve to solve a type of puzzle that it does not know yet to solve.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Use the CPAN.pm module &lt;code&gt;install Games::LMSolve&lt;/code&gt; command to install LM-Solve. For instance, invoke the following command on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MCPAN -e &#39;install Games::LMSolve&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! (LM-Solve does not require any non-base modules, and should run on all recent versions of Perl.)&lt;/p&gt;

&lt;h2 id=&#34;the-puzzle-in-question&#34;&gt;The Puzzle in Question&lt;/h2&gt;

&lt;p&gt;The puzzle in question is called &amp;ldquo;Jumping Cards&amp;rdquo; and is taken from the &lt;a href=&#34;http://mathforum.org/wagon/spring02/p949.html&#34;&gt;Macalester College Problem of the Week No. 949&lt;/a&gt;. In this puzzle, we start with eight cards in a row (labeled 1 to 8). We have to transform it into the 8 to 1 sequence, by swapping two cards at a time, as long as the following condition is met: at any time, two neighboring cards must be in one, two, or three spaces of each other.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s experience with this puzzle a bit. We start with the following formation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s swap 1 and 3, and see what it gives us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3 2 1 4 5 6 7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we cannot exchange 1 and 4, because then, 1 would be close to the 5, and 5-1 is 4, which is more than 3. So let&amp;rsquo;s exchange 2 and 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3 1 2 4 5 6 7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can exchange 2 and 4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3 1 4 2 5 6 7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;h2 id=&#34;let-s-start-coding&#34;&gt;Let&amp;rsquo;s Start &amp;hellip; Coding!&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Games::LMSolve::Base&lt;/code&gt; class tries to solve a game by iterating through its various positions, recording every one it passes through, and trying to reach the solution. However, it does not know in advance what the games rules are, and what the meaning of the positions and moves are. In order for it to know that, we need to inherit it and code several methods that are abstract in the base class.&lt;/p&gt;

&lt;p&gt;We will code a derived class that will implement the logic specific to the Jumping Cards game. It will implement the following methods, which, together with the methods of the base class, enable the solver to solve the game:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;input_board&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pack_state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpack_state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display_state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_if_final_state&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerate_moves&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perform_move&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render_move&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the beginning of the file where we put the script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Jumping::Cards;

use strict;

use Games::LMSolve::Base;

use vars qw(@ISA);

@ISA=qw(Games::LMSolve::Base);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As can be seen, we declared a new package, &lt;code&gt;Jumping::Cards&lt;/code&gt;, imported the &lt;code&gt;Games::LMSolve::Base&lt;/code&gt; namespace, and inherited from it. Now let&amp;rsquo;s start declaring the methods. First, a method to input the board in question.&lt;/p&gt;

&lt;p&gt;Since our board is constant, we just return an array reference that contains the initial sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub input_board
{
    my $self = shift;

    my $filename = shift;

    return [ 1 .. 8 ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;Games::LMSolve::Base&lt;/code&gt; iterates over the states, it stores data about each state in a hash. This means we&amp;rsquo;re going to have to provide a way to convert each state from its expanded form into a uniquely identifying string. The &lt;code&gt;pack_state&lt;/code&gt; method does this, and in our case, it will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A function that accepts the expanded state (as an array ref)
# and returns an atom that represents it.
sub pack_state
{
    my $self = shift;
    my $state_vector = shift;
    return join(&amp;quot;,&amp;quot;, @$state_vector);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is a good idea to use functions like &lt;code&gt;pack&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt; or any other serialization mechanism here. In our case, we simply used &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is not very convenient to manipulate a packed state, and so we need another function to expand it. &lt;code&gt;unpack_state&lt;/code&gt; does the opposite of &lt;code&gt;pack_state&lt;/code&gt; and expands a packed state.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A function that accepts an atom that represents a state 
# and returns an array ref that represents it.
sub unpack_state
{
    my $self = shift;
    my $state = shift;
    return [ split(/,/, $state) ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;display_state()&lt;/code&gt; converts a packed state to a user-readable string. This is so that it can be displayed to the user. In our case, the comma-delimited notation is already readable, so we leave it as that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Accept an atom that represents a state and output a 
# user-readable string that describes it.
sub display_state
{
    my $self = shift;
    my $state = shift;
    return $state;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to determine when we have reached our goal and can terminate the search with a success. The &lt;code&gt;check_if_final_state&lt;/code&gt; function accepts an expanded state and checks if it qualifies as a final state. In our case, it is final if it&amp;rsquo;s the 8-to-1 sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub check_if_final_state
{
    my $self = shift;

    my $coords = shift;
    return join(&amp;quot;,&amp;quot;, @$coords) eq &amp;quot;8,7,6,5,4,3,2,1&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need a function that will tell the solver what subsequent states are available from each state. This is done by enumerating a set of moves that can be performed on the state. The &lt;code&gt;enumerate_moves&lt;/code&gt; function does exactly that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This function enumerates the moves accessible to the state.
sub enumerate_moves
{
    my $self = shift;

    my $state = shift;

    my (@moves);
    for my $i (0 .. 6)
    {
        for my $j (($i+1) .. 7)
        {
            my @new = @$state;
            @new[$i,$j]=@new[$j,$i];
            my $is_ok = 1;
            for my $t (0 .. 6)
            {
                if (abs($new[$t]-$new[$t+1]) &amp;gt; 3)
                {
                    $is_ok = 0;
                    last;
                }
            }
            if ($is_ok)
            {
                push @moves, [$i,$j];
            }
        }
    }
    return @moves;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What &lt;code&gt;enumerate_moves&lt;/code&gt; does is iterate over the indices of the locations twice, and checks every move for the validity of the resultant board. If it&amp;rsquo;s OK, it pushes the exchanged indices to the array &lt;code&gt;@moves&lt;/code&gt;, which is returned at the end.&lt;/p&gt;

&lt;p&gt;We also need a function that will translate an origin state and a move to a resultant state. The &lt;code&gt;perform_move&lt;/code&gt; function performs a move on a state and returns the new state. In our case, it simply swaps the cards in the two indices specified by the move.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This function accepts a state and a move. It tries to perform the
# move on the state. If it is successful, it returns the new state.
sub perform_move
{
    my $self = shift;

    my $state = shift;
    my $m = shift;

    my @new = @$state;

    my ($i,$j) = @$m;
    @new[$i,$j]=@new[$j,$i];
    return \@new;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need a function that will render a move into a user-readable string, so it can be displayed to the user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub render_move
{
    my $self = shift;

    my $move = shift;

    if (defined($move))
    {
        return join(&amp;quot; &amp;lt;=&amp;gt; &amp;quot;, @$move);
    }
    else
    {
        return &amp;quot;&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;invoking-the-solver&#34;&gt;Invoking the Solver&lt;/h2&gt;

&lt;p&gt;To make the solver invokable, create an instance of it in the main namespace, and call its &lt;code&gt;main()&lt;/code&gt; function. This will turn it into a script that will solve the board. The code is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main;

my $solver = Jumping::Cards-&amp;gt;new();
$solver-&amp;gt;main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now save everything to a file, &lt;em&gt;jumping_cards.pl&lt;/em&gt; (or download &lt;a href=&#34;http://t2.technion.ac.il/~shlomif/solving-with-lms/jumping_cards.pl&#34;&gt;the complete one&lt;/a&gt;), and invoke it like this: &lt;code&gt;perl jumping_cards.pl --norle --output-states&lt;/code&gt;. The &lt;code&gt;--norle&lt;/code&gt; option means not to run-length encode the moves. In our case, run-length encoding will do no good, because a move can appear only once (or else its effect will be reversed). &lt;code&gt;--output-states&lt;/code&gt; causes the states to be displayed in the solution.&lt;/p&gt;

&lt;p&gt;The program thinks a little and then outputs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;solved
solved
1,2,3,4,5,6,7,8: Move = 0 &amp;lt;=&amp;gt; 1
2,1,3,4,5,6,7,8: Move = 1 &amp;lt;=&amp;gt; 2
2,3,1,4,5,6,7,8: Move = 1 &amp;lt;=&amp;gt; 3
2,4,1,3,5,6,7,8: Move = 4 &amp;lt;=&amp;gt; 5
2,4,1,3,6,5,7,8: Move = 0 &amp;lt;=&amp;gt; 4
6,4,1,3,2,5,7,8: Move = 2 &amp;lt;=&amp;gt; 3
6,4,3,1,2,5,7,8: Move = 0 &amp;lt;=&amp;gt; 1
4,6,3,1,2,5,7,8: Move = 0 &amp;lt;=&amp;gt; 7
8,6,3,1,2,5,7,4: Move = 6 &amp;lt;=&amp;gt; 7
8,6,3,1,2,5,4,7: Move = 3 &amp;lt;=&amp;gt; 5
8,6,3,5,2,1,4,7: Move = 2 &amp;lt;=&amp;gt; 7
8,6,7,5,2,1,4,3: Move = 1 &amp;lt;=&amp;gt; 2
8,7,6,5,2,1,4,3: Move = 4 &amp;lt;=&amp;gt; 6
8,7,6,5,4,1,2,3: Move = 5 &amp;lt;=&amp;gt; 7
8,7,6,5,4,3,2,1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a correct solution to the problem. If you want to see a run-time display of the solving process, add the &lt;code&gt;--rtd&lt;/code&gt; switch.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;LM-Solve is a usable and flexible framework for writing your own solvers for various kind of puzzles such as the above. Puzzles that are good candidates for implementing solvers have a relatively limited number of states and a small number of states emerging from each origin state.&lt;/p&gt;

&lt;p&gt;I found several solitaire games, such as Freecell, to be solvable by methods similar to the above. On the other hand, Klondike and other games with &lt;code&gt;talon&lt;/code&gt;, are very hard to solve using such methods, because the &lt;code&gt;talon&lt;/code&gt; expands the number of states a great deal.&lt;/p&gt;

&lt;p&gt;Still, for most &amp;ldquo;simple-minded&amp;rdquo; puzzles, LM-Solve is very attractive as a solver framework. Have fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

