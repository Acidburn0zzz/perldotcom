<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt Fowles on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/authors/matt-fowles/</link>
    <description>Recent content in Matt Fowles on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2005 00:00:00 -0800</lastBuildDate>
    <atom:link href="/authors/matt-fowles/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>This Week in Perl 6, August 17-23, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050825.html/</link>
      <pubDate>Thu, 25 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050825.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another Monday summary, which hopefully provides some evidence that Mondays can get better. It always feels like writing summaries is an uphill battle, so perhaps I should switch to writing about &lt;em&gt;Perl 6 Language&lt;/em&gt; first and &lt;em&gt;Perl 6 Compilers&lt;/em&gt; last. Then it will be downhill&amp;ndash;maybe next time.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;&lt;em&gt;Perl 6 Compilers&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;more-random-pictures-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-5df6d5df1f7334c9-b37e4512b56d673a-b37e4512b56d673a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/5df6d5df1f7334c9/b37e4512b56d673a#b37e4512b56d673a&#34;&gt;More Random Pictures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted links to two more images he had created. This time the images were not about Pugs, but were just kind of cute. He also provided an explanation of one when prompted.&lt;/p&gt;

&lt;h4 id=&#34;methods-as-functions-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-991210418285b790-764485d7f50ba0d6-764485d7f50ba0d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/991210418285b790/764485d7f50ba0d6#764485d7f50ba0d6&#34;&gt;Methods as Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu noticed that it was impossible to use a method of one argument as a function. Autrijus offered Yiyi a commit bit, but also kindly posted the resolution to &lt;em&gt;Perl 6 Language&lt;/em&gt;. Thanks, Autrijus!&lt;/p&gt;

&lt;h4 id=&#34;methods-on-code-blocks-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-27b84b1000158dea-c8c3fa783e9e12ff-c8c3fa783e9e12ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/27b84b1000158dea/c8c3fa783e9e12ff#c8c3fa783e9e12ff&#34;&gt;Methods on Code Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu discovered that &lt;code&gt;{ a b c }.pairs&lt;/code&gt; would cause Pugs to spin out of control. Luke Palmer fixed it. Hopefully one of the two of them added a test.&lt;/p&gt;

&lt;h4 id=&#34;autrijus-secret-sauce-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-02299ab5870973c4-8e32342c5609a396-8e32342c5609a396&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/02299ab5870973c4/8e32342c5609a396#8e32342c5609a396&#34;&gt;Autrijus&amp;rsquo; Secret Sauce&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kris Bosland asked a few question I have been wondering about Autrijus&amp;rsquo; new graphics. Autrijus kindly provided the answers.&lt;/p&gt;

&lt;h4 id=&#34;documentation-attack-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-8bd2f4f42b70f313-61b3de1e503a2079-61b3de1e503a2079&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8bd2f4f42b70f313/61b3de1e503a2079#61b3de1e503a2079&#34;&gt;Documentation Attack&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew has decided the best way for him to delurk is to update documentation for Pugs. Dudley Flanders and chromatic both provided support, information, and suggestions for him.&lt;/p&gt;

&lt;h4 id=&#34;neko-vm-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e2bdf956e1e221a1-72f5247ee7649c7f-72f5247ee7649c7f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e2bdf956e1e221a1/72f5247ee7649c7f#72f5247ee7649c7f&#34;&gt;Neko VM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicolas Cannasse announced his release of a high-level, multi-language VM and wondered what others thought of creating a Perl 6-to-Neko compiler. Autrijus and Leo provided a few corrections and comments.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;the-faq-she-is-gone-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2cbcd0b56016f39e-f603de821bd82788-f603de821bd82788&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2cbcd0b56016f39e/f603de821bd82788#f603de821bd82788&#34;&gt;The FAQ, She is &lt;em&gt;Gone&lt;/em&gt;!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amias Channer noticed that the FAQ on &lt;em&gt;parrotcode.org&lt;/em&gt; was gone. While no one responded, the FAQ appears to be back.&lt;/p&gt;

&lt;h4 id=&#34;platform-specific-c-files-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a1a2585585948a0e-1e57f5a3d76d39be-1e57f5a3d76d39be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a1a2585585948a0e/1e57f5a3d76d39be#1e57f5a3d76d39be&#34;&gt;Platform-Specific C Files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stephen Hill wanted to know where to put a platform-specific C file to provide missing functionality. Leo provided a few friendly pointers.&lt;/p&gt;

&lt;h4 id=&#34;tclarray-get-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ef0a4c8f958ef68a-1b62eeff558fafbf-1b62eeff558fafbf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ef0a4c8f958ef68a/1b62eeff558fafbf#1b62eeff558fafbf&#34;&gt;&lt;code&gt;TclArray.get&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amos Robinson provided an implementation of &lt;code&gt;get&lt;/code&gt; for &lt;code&gt;TclArray&lt;/code&gt;. Will gratefully applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;icu-being-passed-up-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d4d70231f322b5a7-09a158e118872b35-09a158e118872b35&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d4d70231f322b5a7/09a158e118872b35#09a158e118872b35&#34;&gt;ICU Being Passed Up&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck wondered if &lt;em&gt;Configure.pl&lt;/em&gt; was passing up ICU. Warnock applied, so Adrian took matter into his own hands by providing a possible solution. Jerry Gay offered to take ownership of the problem if no ICU-enabled soul picked it up. There have been no progress reports since then, though.&lt;/p&gt;

&lt;h4 id=&#34;java-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fb87be7c89a064fd-695419f2c8dff8ff-utoken-6-o-zdcaaadwxq4ss-whfjzzhfxvem0yxapkbptx7zz7xn9-upzohci8neeoqevuhyvpyhchj-rs3vgheuc2bmy-beoegim&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fb87be7c89a064fd/695419f2c8dff8ff?utoken=6-o-ZDcAAADWXQ4sS--whFjzzhFxvEM0yxapKbptX7zZ7xn9_uPzOhCI8nEEOQevUhyvpyHCHJ_Rs3VGheUC2BMy_BEOeGIM&#34;&gt;Java on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce asked some preliminary questions about running Java with Parrot. I provide preliminary answers, and Nattfodd and Autrijus posted links to related work. The important question of what to call it remained unraised. I vote for &amp;ldquo;Jot.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;gdbmhash-t-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfa8a4023a1c428b-04198072ba7640e3-04198072ba7640e3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfa8a4023a1c428b/04198072ba7640e3#04198072ba7640e3&#34;&gt;&lt;em&gt;gdbmhash.t&lt;/em&gt; Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce noticed that &lt;em&gt;gdbmhash.t&lt;/em&gt; was failing with an unhelpful error message. Andy Dougherty provided a patch that made the error message slightly more helpful. Jerry Gay applied it.&lt;/p&gt;

&lt;h4 id=&#34;begin-blocks-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e368bdce610d3a36-6d17bfa68979833b-6d17bfa68979833b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e368bdce610d3a36/6d17bfa68979833b#6d17bfa68979833b&#34;&gt;&lt;code&gt;BEGIN&lt;/code&gt; Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted some &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bca89d6f066ff4d5/ff59334843ed8a09#ff59334843ed8a09&#34;&gt;thoughts and information about &lt;code&gt;BEGIN&lt;/code&gt; blocks in Perl 6 and the &lt;code&gt;@IMMEDIATE&lt;/code&gt; pragma in PIR&lt;/a&gt;. It involved creating constant PMCs and freezing them into the bytecode. Then he made it work.&lt;/p&gt;

&lt;h4 id=&#34;amber-for-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-838867df299aa9d5-50d2592e48e9fca6-50d2592e48e9fca6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/838867df299aa9d5/50d2592e48e9fca6#50d2592e48e9fca6&#34;&gt;Amber for Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Citing chatter overheard on its intelligence networks, Parrot raised the terror alert to Amber, or maybe Roger Browne released version 0.2.3 of his &amp;ldquo;Eiffel-like&amp;rdquo; scripting language, Amber. I can never keep track of these things.&lt;/p&gt;

&lt;h4 id=&#34;tcl-parray-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-50d7bf4bc9de1965-98355c62212be267-98355c62212be267&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/50d7bf4bc9de1965/98355c62212be267#98355c62212be267&#34;&gt;Tcl &lt;code&gt;parray&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amos Robinson offered to provide an implementation of Tcl&amp;rsquo;s &lt;code&gt;parray&lt;/code&gt;, including tests. Will wanted to apply it, but the attachment did not come through.&lt;/p&gt;

&lt;h4 id=&#34;parrot-vs-neko-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-33b939f5da9cd02c-6c3a82da7890e791-6c3a82da7890e791&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33b939f5da9cd02c/6c3a82da7890e791#6c3a82da7890e791&#34;&gt;Parrot Vs. Neko&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicolas Cannasse wondered why Parrot performed so poorly on the fib benchmark. Leo explained that this benchmark stressed a currently unoptimized portion of Parrot (function calls). He also provided a few pointers on which benchmarks Parrot does well.&lt;/p&gt;

&lt;h4 id=&#34;using-pmcs-from-c-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e21e0822d799bc59-c6056fdb34ba43ee-c6056fdb34ba43ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e21e0822d799bc59/c6056fdb34ba43ee#c6056fdb34ba43ee&#34;&gt;Using PMCs from C&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol&amp;rsquo;s Lua compiler uses only PMCs. Thus, he wanted to know how to access these PMCs from NCI functions. Leo provided an answer, but also suggested he look at the new calling conventions, which perform auto-conversion in both directions.&lt;/p&gt;

&lt;h4 id=&#34;pmc-for-reference-counting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7a27e6d3f08791e3-11797f657fac9f96-11797f657fac9f96&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7a27e6d3f08791e3/11797f657fac9f96#11797f657fac9f96&#34;&gt;PMC for Reference Counting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark posted a relatively full analysis of how to generalize the DOD&amp;rsquo;s registration system for further reuse. He also asked for ideas about names. I think the whole thing looks good and that &amp;ldquo;AddrRegistry&amp;rdquo; is a good name. Perhaps that has too many vowels&amp;ndash;&amp;ldquo;AddrRgstry&amp;rdquo; and sometimes &amp;ldquo;AddrRgstr&amp;rdquo; might work.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;type-inferencing-in-perl-5-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5ea04271d14d1735-c3fb0f3d9389ac94-c3fb0f3d9389ac94&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5ea04271d14d1735/c3fb0f3d9389ac94#c3fb0f3d9389ac94&#34;&gt;Type Inferencing in Perl 5&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus (while discussing type inference in Perl 6) recalled that there was a Google Summer of Code project on &lt;a href=&#34;https://metacpan.org/pod/Devel::TypeCheck&#34;&gt;type inferencing in Perl 5&lt;/a&gt;. Gary Jackson, the summer coder, provide a more detailed description of his work.&lt;/p&gt;

&lt;h4 id=&#34;hello-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fc3e95a0ecb80d-9a8a8d8ae66896a5-9a8a8d8ae66896a5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fc3e95a0ecb80d/9a8a8d8ae66896a5#9a8a8d8ae66896a5&#34;&gt;&lt;code&gt;+&amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Daniel Brockman wondered if &lt;code&gt;+&amp;quot;hello&amp;quot;&lt;/code&gt; still evaluated to a NaN. Larry reasoned that it might, and then went on to speculate about the what the extra exception information would do when a &lt;code&gt;Num&lt;/code&gt; gets jammed into a &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;generic-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f5d1415442ec3a4c-b2923a4a9bc6a21f-b2923a4a9bc6a21f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f5d1415442ec3a4c/b2923a4a9bc6a21f#b2923a4a9bc6a21f&#34;&gt;Generic Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus found the frequent use of generic classes confusing, as he thought that only roles were type parameterizable. Larry explained that roles could be promoted to classes pretty easily, but that the distinction between them was still useful and meaningful.&lt;/p&gt;

&lt;h4 id=&#34;gc-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d6bc9237b9210a4b-002483f30c6191a0-002483f30c6191a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d6bc9237b9210a4b/002483f30c6191a0#002483f30c6191a0&#34;&gt;GC API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa posted a revised GC API after the previous discussion. More discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;name-conflicts-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-577cce02541d3c9d-e07672b3e69f9a23-e07672b3e69f9a23&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/577cce02541d3c9d/e07672b3e69f9a23#e07672b3e69f9a23&#34;&gt;Name Conflicts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu wondered what would happen if he declared two lexicals with different declarators. Larry answered that it would be a compile-time error.&lt;/p&gt;

&lt;h4 id=&#34;parsing-numbers-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-61f4044520874f29-bce78cf3287e4b20-bce78cf3287e4b20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/61f4044520874f29/bce78cf3287e4b20#bce78cf3287e4b20&#34;&gt;Parsing Numbers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt posted a list of different possible ways to write numbers, asking which were valid and which not. Many weighed in, including Larry.&lt;/p&gt;

&lt;h4 id=&#34;bindings-and-routine-signatures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-53232788dc4c7341-ae4d28708146c1f7-ae4d28708146c1f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/53232788dc4c7341/ae4d28708146c1f7#ae4d28708146c1f7&#34;&gt;Bindings and Routine Signatures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer noticed that implementing binding as anonymous subroutines and then binding existing variables created delimited continuations, and binding globals, full continuations. While interesting, Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;visibilty-of-self-and-class-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6dadcb39e23cc5a3-814d5f890cb8a43c-814d5f890cb8a43c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6dadcb39e23cc5a3/814d5f890cb8a43c#814d5f890cb8a43c&#34;&gt;Visibilty of &lt;code&gt;$?SELF&lt;/code&gt; and &lt;code&gt;$?CLASS&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered what scopes will have &lt;code&gt;$?SELF&lt;/code&gt; and &lt;code&gt;$?CLASS&lt;/code&gt; available to them. Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;time-to-take-her-home-her-dizzy-head-is-conscience-laden-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c19bea30514933f4-a10c571d683f9567-a10c571d683f9567&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c19bea30514933f4/a10c571d683f9567#a10c571d683f9567&#34;&gt;&amp;ldquo;Time to Take Her Home Her Dizzy Head is Conscience-Laden&amp;rdquo;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amusingly enough, the thread about time has a big gap between July 5 and August 15. The thread also reminded me why I have an analog watch.&lt;/p&gt;

&lt;h4 id=&#34;is-params-validate-necessary-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c1aa2d1bea721f06-f627657ac28724cb-f627657ac28724cb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c1aa2d1bea721f06/f627657ac28724cb#f627657ac28724cb&#34;&gt;Is Params::Validate Necessary?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dave Rolsky hoped that Params::Validate would no longer be necessary in Perl 6. This led to much discussion of the parameter declaration syntax in Perl 6 and a few suggested changes.&lt;/p&gt;

&lt;h4 id=&#34;constants-are-dead-long-live-read-only-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2e66199c576a8436-66d074fed528ff06-66d074fed528ff06&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2e66199c576a8436/66d074fed528ff06#66d074fed528ff06&#34;&gt;Constants are Dead; Long Live Read-Only!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Apparently &lt;code&gt;is constant&lt;/code&gt; is gone and &lt;code&gt;is readonly&lt;/code&gt; is here. The discussion contains mores than that, but that is my take-away point.&lt;/p&gt;

&lt;h4 id=&#34;multidimensional-hyper-ops-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7233bd8e8a597da9-ca18a76f98fb7633-ca18a76f98fb7633&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7233bd8e8a597da9/ca18a76f98fb7633#ca18a76f98fb7633&#34;&gt;Multidimensional Hyper Ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered how hyper ops would work on multi-dimensional inputs. The short answer is &amp;ldquo;recurse when possible, apply when not.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;serializing-code-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9d416d7fa643e7b3-86deff4c1b749572-86deff4c1b749572&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9d416d7fa643e7b3/86deff4c1b749572#86deff4c1b749572&#34;&gt;Serializing Code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted an analysis of a new HTML::Prototype module that hinges on serializing code between the various layers of implementation. Many folks thought this was cool and discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-hash-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f6ed7b076781243d-67cb807fbf3e4432-67cb807fbf3e4432&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f6ed7b076781243d/67cb807fbf3e4432#67cb807fbf3e4432&#34;&gt;Slurpy Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered if one could bind a slurpy hash by name. The answer is no.&lt;/p&gt;

&lt;h4 id=&#34;making-pairs-less-magical-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-14ab4e67088e4bf1-e9b1e791ac08d43b-e9b1e791ac08d43b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/14ab4e67088e4bf1/e9b1e791ac08d43b#e9b1e791ac08d43b&#34;&gt;Making Pairs Less Magical&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wants pairs to be less magical, as their special treatment has caused much confusion of late. Much discussion continues.&lt;/p&gt;

&lt;h4 id=&#34;lazy-scalars-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8953c45b2d6e7d33-5675c9fddfb1612a-5675c9fddfb1612a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8953c45b2d6e7d33/5675c9fddfb1612a#5675c9fddfb1612a&#34;&gt;Lazy Scalars?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yiyi Hu wants lazily evaluated scalars. Ingo Blechschmidt, Luke Palmer, and Larry all provided ways to achieve that end. The simplest solution is to create an anonymous closure, it seems.&lt;/p&gt;

&lt;h4 id=&#34;using-foreign-languages-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3439e609dc66e2a4-8e313d44d1218bf5-8e313d44d1218bf5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3439e609dc66e2a4/8e313d44d1218bf5#8e313d44d1218bf5&#34;&gt;Using Foreign Languages&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to use identifiers from other languages that do not have compatible identifiers. Yuval reasoned that it would be dangerous to try to accommodate them too closely. Perhaps something like the Sinhala &amp;ldquo;karenawa,&amp;rdquo; which marks the preceding word as being foreign (English specifically), will work?&lt;/p&gt;

&lt;h4 id=&#34;symbolic-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-665698a47599cf92-fa397dbfbefc62c2-fa397dbfbefc62c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/665698a47599cf92/fa397dbfbefc62c2#fa397dbfbefc62c2&#34;&gt;Symbolic References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered to use symbolic references of magic variables such as &lt;code&gt;$?SELF&lt;/code&gt;. Larry provided a few answers.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, August 2-9, 2005</title>
      <link>http://localhost:1313/pub/2005/08/p6pdigest/20050811.html/</link>
      <pubDate>Thu, 11 Aug 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/08/p6pdigest/20050811.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another summary, brought to you by Chinese food. The attentive among you will notice that this summary is a day late, because I did not feel like doing it yesterday. If only I could do that at work.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;&lt;em&gt;Perl 6 Compilers&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;pugs-argument-processing-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-be055bd40627492d-a60044757ceb3e61-a60044757ceb3e61&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/be055bd40627492d/a60044757ceb3e61#a60044757ceb3e61&#34;&gt;Pugs Argument Processing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim Konovalov submitted a patch to Pugs affecting &lt;code&gt;@*ARGS&lt;/code&gt; processing. In the world of Pugs, this means that he received a committer bit and applied it himself.&lt;/p&gt;

&lt;h4 id=&#34;type-inferencing-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-114ffdd27a9cb125-e4a4dc51ec90239f-e4a4dc51ec90239f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/114ffdd27a9cb125/e4a4dc51ec90239f#e4a4dc51ec90239f&#34;&gt;Type Inferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wants to type push Perl 6&amp;rsquo;s type inferencing as far as it can go (and maybe a little beyond). To this end, he has been soliciting input from all comers. It looks like he has put a lot of thought and research into it. One day, I expect to be thanking Autrijus for important (if likely difficult to understand) compiler errors and warnings.&lt;/p&gt;

&lt;h4 id=&#34;www-kontent-release-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c27335567a8fc562-f11a7310269764d7-f11a7310269764d7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c27335567a8fc562/f11a7310269764d7#f11a7310269764d7&#34;&gt;&lt;code&gt;WWW::Kontent&lt;/code&gt; Release&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon announced the release of &lt;code&gt;WWW::Kontent&lt;/code&gt; 0.01: &amp;ldquo;a flexible web content management system written in Perl 6 and executable with Pugs.&amp;rdquo; It looks nifty to me. Maybe we need to fight Ruby on Rails with Perl 6 on Pylons or something. That doesn&amp;rsquo;t quite have the right ring to it, but there has to be something catchy there somewhere.&lt;/p&gt;

&lt;h4 id=&#34;array-interpolation-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-338b1f8acccceb81-b635247572c975e7-utoken-yhabadyaaaa7xvmbcvgjeix9iodtufmwhfkjzg-vgvjcjymxbutyydtxzyjpnmpnxytgmavkyeewco1g0jwxn3xylxnej39l&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/338b1f8acccceb81/b635247572c975e7?utoken=YHABADYAAAA7xVMbCVGjeIx9IodtUfMwhFkjZG-vgVJcJYMxbUTYyDTxzYJPNMPNXytgmAvkYeEWcO1g0jwXN3xYLXnEJ39L&#34;&gt;Array Interpolation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Phil Crow wondered why Pugs would not interpolate his arrays. Ingo Blechschmidt and Patrick explained that &lt;code&gt;@foo&lt;/code&gt; does not interpolate, but &lt;code&gt;@foo[]&lt;/code&gt; does. I sense a frequently asked question here.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-9-released-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3ac98d6a866ae1c4-f9e5fa2b6e17c67b-f9e5fa2b6e17c67b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3ac98d6a866ae1c4/f9e5fa2b6e17c67b#f9e5fa2b6e17c67b&#34;&gt;Pugs 6.2.9 Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced the release of Pugs 6.2.9. It is full of nifty new features, including the ability to lay on hands!&lt;/p&gt;

&lt;h4 id=&#34;white-space-before-parens-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3ac98d6a866ae1c4-f9e5fa2b6e17c67b-f9e5fa2b6e17c67b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3ac98d6a866ae1c4/f9e5fa2b6e17c67b#f9e5fa2b6e17c67b&#34;&gt;White Space Before Parens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Shitov wondered why Perl 6 no longer allowed white space between function names and parens. Autrijus explained that it allows &lt;code&gt;print (1+2)*3&lt;/code&gt; to print 9 instead of 3. As someone who just last week explained the peculiarity of Ruby printing 3 in the above situation to a complete novice, I welcome the change.&lt;/p&gt;

&lt;h4 id=&#34;container-model-pictures-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c236932902cb3333-c0a37ac28a00a3d2-c0a37ac28a00a3d2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c236932902cb3333/c0a37ac28a00a3d2#c0a37ac28a00a3d2&#34;&gt;Container Model Pictures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a few pretty pictures explaining the &lt;a href=&#34;http://pugscode.org/images/simple-compilation.png&#34;&gt;compiler model&lt;/a&gt; and the &lt;a href=&#34;http://pugscode.org/images/container.png&#34;&gt;container model&lt;/a&gt;. While the compiler model was readily understandable to me, the container one wasn&amp;rsquo;t. Fortunately, when prompted, Autrijus provided a great explanation to accompany the diagram.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-5-8-7-4-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fbdc7bfb5ff3d803-588edb288e8527c7-588edb288e8527c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fbdc7bfb5ff3d803/588edb288e8527c7#588edb288e8527c7&#34;&gt;PxPerl 5.8.7-4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Upon discovering that Pugs released a new version, Grégoire Péan released a new version of PxPerl that includes the new Pugs. I (and many others) thank Grégoire for lowering the entry bar for Perl 6 hacking on Windows.&lt;/p&gt;

&lt;h4 id=&#34;hosting-lexical-declarations-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-05cc1e19db2fcc14-4814ff30475fc03e-4814ff30475fc03e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/05cc1e19db2fcc14/4814ff30475fc03e#4814ff30475fc03e&#34;&gt;Hosting Lexical Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Declaring lexicals mid-block confuses things, especially declaring them mid-statement, as in &lt;code&gt;$x = $x + my $x if $x;&lt;/code&gt;. Autrijus proposed hoisting declarations of lexicals to the top of the block. Unfortunately, this can make &lt;code&gt;CALLER::&lt;/code&gt; do funny things. Thus, he suggests outlawing it. Larry agreed.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;export-ld-library-path-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a929f3cbfe2aa9ec-25db76653bac717d-25db76653bac717d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a929f3cbfe2aa9ec/25db76653bac717d#25db76653bac717d&#34;&gt;Export &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bdonlan noticed that Parrot&amp;rsquo;s test suite was not setting &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, which makes tests fail. Leo pointed out that most users manually set their &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, as Parrot often needs this, but he agreed that the tests should do it just in case.&lt;/p&gt;

&lt;h4 id=&#34;improved-argument-processing-for-ops2c-pl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cc9242e455d1a63b-5d25c6b934119abe-5d25c6b934119abe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cc9242e455d1a63b/5d25c6b934119abe#5d25c6b934119abe&#34;&gt;Improved Argument Processing for &lt;em&gt;ops2c.pl&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tom submitted a patch that improves the command-line argument processing powers of &lt;em&gt;ops2c.pl&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;ansi-escape-codes-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-be5dc2f14b0dfd42-896d89835150a493-896d89835150a493&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/be5dc2f14b0dfd42/896d89835150a493#896d89835150a493&#34;&gt;ANSI Escape Codes in Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol was having trouble putting special characters like ANSI clear screen and &amp;ldquo;¥&amp;rdquo; into strings. Nick pointed out that he need to be careful with encodings and escapes. In Parrot, &lt;code&gt;\O&lt;/code&gt; is an octal escape. In Lua, it is apparently not.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-3-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b5b68a0cf335822b-4ac938caaa6ff298-4ac938caaa6ff298&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b5b68a0cf335822b/4ac938caaa6ff298#4ac938caaa6ff298&#34;&gt;Parrot 0.2.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced the release of Parrot 0.2.3, &amp;ldquo;Serenity,&amp;rdquo; which reminds me, Firefly is coming back soon! I can&amp;rsquo;t wait! Oddly, Google seems to have swallowed his release notice, but not his warnings.&lt;/p&gt;

&lt;h4 id=&#34;strange-filename-based-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d72580222deb1646-2b5afda2517c90bd-2b5afda2517c90bd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d72580222deb1646/2b5afda2517c90bd#2b5afda2517c90bd&#34;&gt;Strange Filename-Based Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace found a bug that would disappear if the file was renamed. Leo, with the help of valgrind, provided Michal with a pointer. Michal used that to find a likely culprit and provide a patch, which Leo then refined.&lt;/p&gt;

&lt;h4 id=&#34;gdbm-hash-on-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-455218c176531ba6-8bb0656904124f4c-8bb0656904124f4c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/455218c176531ba6/8bb0656904124f4c#8bb0656904124f4c&#34;&gt;GDBM Hash on MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing &lt;code&gt;gdbmhash&lt;/code&gt; on MinGW. Bernhard Schmalhofer applied it.&lt;/p&gt;

&lt;h4 id=&#34;pystring-link-problem-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1b63e4b253bb0eab-b10f19b834c85c0d-b10f19b834c85c0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1b63e4b253bb0eab/b10f19b834c85c0d#b10f19b834c85c0d&#34;&gt;PyString Link Problem&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad also fixed a link problem with &lt;em&gt;pystring.o&lt;/em&gt;. Jonathan Worthington applied that patch.&lt;/p&gt;

&lt;h4 id=&#34;filling-a-large-data-structure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-239e824edb7ff767-f1899af22d2a289e-f1899af22d2a289e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/239e824edb7ff767/f1899af22d2a289e#f1899af22d2a289e&#34;&gt;Filling a Large Data Structure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger wanted to know how to fill a large data structure in PIR, other than explicitly. Leo suggested reading it in from a config file.&lt;/p&gt;

&lt;h4 id=&#34;helping-perl-6-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d0083cd312e17ab1-eb025a6949933347-eb025a6949933347&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0083cd312e17ab1/eb025a6949933347#eb025a6949933347&#34;&gt;Helping Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rjtucke asked the ever-dangerous question, &amp;ldquo;How can I help?&amp;rdquo;. Unfortunately, I think he asked it on Google Groups, and thus no one saw it.&lt;/p&gt;

&lt;h4 id=&#34;pge-glob-escapes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-94887d69a826227d-3f587ac32513e71e-3f587ac32513e71e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/94887d69a826227d/3f587ac32513e71e#3f587ac32513e71e&#34;&gt;PGE Glob Escapes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;PGE Glob Escapes; millions die before it can be rounded up again.&amp;rdquo; Actually, Will Coleda noticed that he could not add a literal &lt;code&gt;*&lt;/code&gt; to globs in PGE. Patrick fixed it so he could.&lt;/p&gt;

&lt;h4 id=&#34;language-test-requirements-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3b9d082baa68c620-1f18c584c09e5053-1f18c584c09e5053&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3b9d082baa68c620/1f18c584c09e5053#1f18c584c09e5053&#34;&gt;Language Test Requirements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger has decided to write a Z-code-to-PIR translator. He wants to integrate its test suite with Parrot&amp;rsquo;s language tests. Unfortunately, it does not use &lt;code&gt;Test::Simple&lt;/code&gt;, or even Perl. Thus he wanted to know a good way to integrate it. Will Coleda, Bernhard Schmalhofer, and chromatic all provided suggestions.&lt;/p&gt;

&lt;h4 id=&#34;mod-parrot-0-3-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-16ec7ea4d9ba4872-b52140fff1d78310-b52140fff1d78310&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/16ec7ea4d9ba4872/b52140fff1d78310#b52140fff1d78310&#34;&gt;&lt;code&gt;mod_parrot&lt;/code&gt; 0.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck provided a patch to fix &lt;em&gt;src/call_list.txt&lt;/em&gt; for &lt;code&gt;mod_parrot-0.3&lt;/code&gt;. chromatic applied it.&lt;/p&gt;

&lt;h4 id=&#34;making-makefile-a-little-too-clean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-91cb1b36db9f3f30-e85db560e0496873-e85db560e0496873&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/91cb1b36db9f3f30/e85db560e0496873#e85db560e0496873&#34;&gt;Making Makefile a Little too Clean&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick noticed that the Parrot build was breaking. Jonathan Worthington narrowed it down to an exact revision number. Leo realized his mistake and fixed it.&lt;/p&gt;

&lt;h4 id=&#34;cygwin-status-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-66c1435caa126e36-98038a170b66dea6-98038a170b66dea6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/66c1435caa126e36/98038a170b66dea6#98038a170b66dea6&#34;&gt;Cygwin Status&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer applied some old patches from Joshua Gatcomb, in the hope of improving Cygwin support. Nick Glencross provided needed &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6e3982c2438d4160/635220a375758f6d#635220a375758f6d&#34;&gt;Parrot Cygwin test results&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;calling-super-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6782c143d9e3f9d7-0ab141d87d211369-0ab141d87d211369&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6782c143d9e3f9d7/0ab141d87d211369#0ab141d87d211369&#34;&gt;Calling &lt;code&gt;SUPER&lt;/code&gt; Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol wondered how to call a specific parent methods (possibly bypassing child methods). Leo answered.&lt;/p&gt;

&lt;h4 id=&#34;compiling-pugs-and-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-065a98fa7217b71a-dedda1b8cd1df427-dedda1b8cd1df427&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/065a98fa7217b71a/dedda1b8cd1df427#dedda1b8cd1df427&#34;&gt;Compiling Pugs and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck was having trouble compiling Pugs against Parrot. Leo worked with him to find a solution, although they haven&amp;rsquo;t resolved it yet.&lt;/p&gt;

&lt;h4 id=&#34;pure-parrot-test-builder-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c040e2a5d3303f6-bdec8011da7b4800-bdec8011da7b4800&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c040e2a5d3303f6/bdec8011da7b4800#bdec8011da7b4800&#34;&gt;Pure Parrot Test::Builder&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;chromatic has written pure-Parrot versions of Test::Builder and Test::Builder::Tester. As always, patches are welcome.&lt;/p&gt;

&lt;h4 id=&#34;adding-a-new-opcode-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-abcba81ef69f865c-b1d018e3114ce1f1-b1d018e3114ce1f1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/abcba81ef69f865c/b1d018e3114ce1f1#b1d018e3114ce1f1&#34;&gt;Adding a New Opcode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wanted to know how to add a new opcode to parrot. Klaas-Jan Stol and Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;more-win32-patches-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5472a5cdd52bd3dc-a48d4d6482a9b13b-a48d4d6482a9b13b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5472a5cdd52bd3dc/a48d4d6482a9b13b#a48d4d6482a9b13b&#34;&gt;More Win32 Patches&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided several patches for MinGW and Win32. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;updated-intro-pod-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e36d2b676a916edf-41d4393ec1a5e334-41d4393ec1a5e334&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e36d2b676a916edf/41d4393ec1a5e334#41d4393ec1a5e334&#34;&gt;Updated &lt;em&gt;intro.pod&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington posted an updated &lt;em&gt;intro.pod&lt;/em&gt;. Autrijus provided a few edits, and Jonathan is planning on committing it.&lt;/p&gt;

&lt;h4 id=&#34;comment-fix-in-pir-mode-el-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f2ea6e2b54a62425-53d23545fd068850-53d23545fd068850&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f2ea6e2b54a62425/53d23545fd068850#53d23545fd068850&#34;&gt;Comment Fix in &lt;em&gt;pir-mode.el&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jim McKim made the mistake of using Emacs. Fortunately, he counterbalanced that failing with the virtue of submitting a patch to fix an error in &lt;em&gt;pir-mode.el&lt;/em&gt; to make the file work better. chromatic applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;commit-bit-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0d69e4b22417d1c7-95e0762f7e93b784-95e0762f7e93b784&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d69e4b22417d1c7/95e0762f7e93b784#95e0762f7e93b784&#34;&gt;Commit Bit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls seemed to be having trouble using his newly acquired commit bit. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;segfault-with-e-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c9d5b091d9f074a-2518470dafaa44f2-2518470dafaa44f2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c9d5b091d9f074a/2518470dafaa44f2#2518470dafaa44f2&#34;&gt;Segfault with &lt;code&gt;-E&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tom noticed that &lt;code&gt;parrot -E&lt;/code&gt; segfaulted and provided a patch. He was not very confident about the patch.&lt;/p&gt;

&lt;h4 id=&#34;make-test-in-bc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-636c7816a8e30105-e03cba61e9968bca-e03cba61e9968bca&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/636c7816a8e30105/e03cba61e9968bca#e03cba61e9968bca&#34;&gt;&lt;code&gt;make test&lt;/code&gt; in &lt;em&gt;bc&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed that &lt;code&gt;make test&lt;/code&gt; in &lt;em&gt;bc&lt;/em&gt; dies because he does not have &lt;code&gt;antlr&lt;/code&gt; installed. Bernhard Schmalhofer said that he would try and fix it up to use the config-test for &lt;code&gt;antlr&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;interpreter-c-breakage-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bed06d6981b46f90-20a4e2bc68c05819-20a4e2bc68c05819&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bed06d6981b46f90/20a4e2bc68c05819#20a4e2bc68c05819&#34;&gt;&lt;em&gt;interpreter.c&lt;/em&gt; Breakage&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed that &lt;em&gt;interpreter.c&lt;/em&gt; broke during a recent compilation. Leo pointed out that he need to &lt;code&gt;make realclean&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;mingw-meets-m4-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-73a2bf56f29a06c3-f6ba5da370dc450d-f6ba5da370dc450d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/73a2bf56f29a06c3/f6ba5da370dc450d#f6ba5da370dc450d&#34;&gt;MinGW Meets m4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided two patches to make m4 work on MinGW. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;substr-segfault-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-383873bdf6b2ae0e-72e13310f799ff92-72e13310f799ff92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/383873bdf6b2ae0e/72e13310f799ff92#72e13310f799ff92&#34;&gt;&lt;code&gt;substr&lt;/code&gt; Segfault&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda posted a short PIR test that will segfault in the &lt;code&gt;substr&lt;/code&gt; opcode. This led to some discussion of variable-width encodings. Leo explained that &lt;code&gt;substr&lt;/code&gt; was a call that would probably force Parrot to rectify variable-width encodings into fixed-width ones (which it does lazily). Then he fixed it (presumably as he had suggested).&lt;/p&gt;

&lt;h4 id=&#34;parrot-cygwin-meets-treefrog-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c34526dde0f3cc4-f0d9ef39989dd4a6-f0d9ef39989dd4a6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c34526dde0f3cc4/f0d9ef39989dd4a6#f0d9ef39989dd4a6&#34;&gt;Parrot Cygwin Meets Treefrog&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve &amp;ldquo;treefrog&amp;rdquo; posted a patch he needed to get Cygwin testing. I think he may have posted it to Google Groups directly, though. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;call-opcode-cleanups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c7402b70371fb311-8c637a3801067f3a-8c637a3801067f3a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c7402b70371fb311/8c637a3801067f3a#8c637a3801067f3a&#34;&gt;Call Opcode Cleanups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo attempted to free himself from the horns of Warnock by reposting his suggested call opcode cleanup. Patrick and I voiced our support. More accurately, I voiced support and Patrick indifference.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;complex-control-flow-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-23345901e82f1cb5-4fb0b85a4f5ffa2c-4fb0b85a4f5ffa2c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/23345901e82f1cb5/4fb0b85a4f5ffa2c#4fb0b85a4f5ffa2c&#34;&gt;Complex Control Flow&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Hamilton began speculating that Perl 6 might have an extremely complicated control flow. Then he began to wonder aloud about a form of control flow I can only describe as brain-melting. Luke Palmer suggested that his proposal might best start as a module.&lt;/p&gt;

&lt;h4 id=&#34;slurpy-parameters-and-flattening-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ebc571b19072db20-307e6736ab46b391-307e6736ab46b391&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ebc571b19072db20/307e6736ab46b391#307e6736ab46b391&#34;&gt;Slurpy Parameters and Flattening&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt&amp;rsquo;s question of the flattening (or not) of slurpy params continued producing some suggestions. Piers seemed somewhat unhappy with earlier answers, but the thread died out.&lt;/p&gt;

&lt;h4 id=&#34;does-if-topicalize-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0465204f271ce9cd-380c684482e0bb78-380c684482e0bb78&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0465204f271ce9cd/380c684482e0bb78#380c684482e0bb78&#34;&gt;Does &lt;code&gt;if&lt;/code&gt; Topicalize?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer noticed &lt;code&gt;if foo() -&amp;gt; $foo { ... }&lt;/code&gt; in an OSCON talk and wondered if &lt;code&gt;if&lt;/code&gt; now topicalized. Stuart Cook offered a workaround.&lt;/p&gt;

&lt;h4 id=&#34;data-constructors-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f00f1d5500c678f6-fb0eaa8a7b334f4d-fb0eaa8a7b334f4d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f00f1d5500c678f6/fb0eaa8a7b334f4d#fb0eaa8a7b334f4d&#34;&gt;Data Constructors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer posted his thoughts on unifying units and data constructors (as in Haskell or ML). Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;calling-methods-on-undef-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-615d21124b153ae0-f6cbeb1d58f527a8-f6cbeb1d58f527a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/615d21124b153ae0/f6cbeb1d58f527a8#f6cbeb1d58f527a8&#34;&gt;Calling Methods on &lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what would happen if he called &lt;code&gt;undef.chars&lt;/code&gt; or &lt;code&gt;char undef&lt;/code&gt;. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon responded that it would return &lt;code&gt;undef&lt;/code&gt; in the absence of &lt;code&gt;use fatal&lt;/code&gt;. Larry confirmed this behavior.&lt;/p&gt;

&lt;h4 id=&#34;reassigning-ref-and-meta-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-21a135e1140c86cc-6b9a07062460e34c-6b9a07062460e34c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/21a135e1140c86cc/6b9a07062460e34c#6b9a07062460e34c&#34;&gt;Reassigning &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what would happen if he assigned to &lt;code&gt;.ref&lt;/code&gt; or &lt;code&gt;.meta&lt;/code&gt;. Luke Palmer figured that it would not be allowed. I think it should cause a large person to come over to your house and kick you. This is probably a good reason I don&amp;rsquo;t write error messages.&lt;/p&gt;

&lt;h4 id=&#34;questioning-ref-and-meta-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-17e69f24e28c43b1-abc3309f3107553b-abc3309f3107553b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/17e69f24e28c43b1/abc3309f3107553b#abc3309f3107553b&#34;&gt;Questioning &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt left a bunch of blanks for people to fill in with respect to &lt;code&gt;.ref&lt;/code&gt; and &lt;code&gt;.meta&lt;/code&gt;. Luke Palmer apparently segfaulted in the attempt to fill in the blanks.&lt;/p&gt;

&lt;h4 id=&#34;subscripting-pairs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-685af26a93bf2de5-5367cfdd8bda29e8-5367cfdd8bda29e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/685af26a93bf2de5/5367cfdd8bda29e8#5367cfdd8bda29e8&#34;&gt;Subscripting Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if one could subscript pairs. Larry declared no.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-test-in-parrot-0-2-3-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ec30cf943e4290b4-17263f56385a6b31-17263f56385a6b31&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ec30cf943e4290b4/17263f56385a6b31#17263f56385a6b31&#34;&gt;Perl 6 Test in Parrot 0.2.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Shitov was having trouble running Perl 6 under the latest Parrot. Autrijus pointed out that he was trying to run the compiler attempt abandoned in June of 2004 and then pointed him toward Pugs.&lt;/p&gt;

&lt;h4 id=&#34;java-gt-perl-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f20535fdbe875d63-c49c08621487c7f6-c49c08621487c7f6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f20535fdbe875d63/c49c08621487c7f6#c49c08621487c7f6&#34;&gt;Java -&amp;gt; Perl ?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered if any work had started on parsing Java interface definitions and translating them to Perl 6. Warnock applies (which probably means no).&lt;/p&gt;

&lt;h4 id=&#34;metaobject-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5ea04271d14d1735-6db35ec67d56d088-6db35ec67d56d088&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5ea04271d14d1735/6db35ec67d56d088#6db35ec67d56d088&#34;&gt;MetaObject Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little posted some of his thoughts on the MetaObject internals for comment. Many questions ensued, my eyes glazed over, the summarizer punted.&lt;/p&gt;

&lt;h4 id=&#34;defined-and-typed-traits-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8c5f8ce3d6b4bbbc-4fcbb26681d490eb-4fcbb26681d490eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8c5f8ce3d6b4bbbc/4fcbb26681d490eb#4fcbb26681d490eb&#34;&gt;&lt;code&gt;defined&lt;/code&gt; and &lt;code&gt;typed&lt;/code&gt; Traits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus mused about how to deal with &lt;code&gt;defined&lt;/code&gt; and &lt;code&gt;typed&lt;/code&gt; traits in Perl 6. This led Larry to wonder about &lt;code&gt;undef&lt;/code&gt; being a class, or a class being &lt;code&gt;undef&lt;/code&gt;, or something confusing.&lt;/p&gt;

&lt;h4 id=&#34;is-constant-sugar-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2e66199c576a8436-728ad09f9782b179-728ad09f9782b179&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2e66199c576a8436/728ad09f9782b179#728ad09f9782b179&#34;&gt;&lt;code&gt;is constant&lt;/code&gt; Sugar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered how &lt;code&gt;is constant&lt;/code&gt; would desugar if it were a special form. Larry came up with suggestions, some of which said it desugared and some of which said it didn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 20-26, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050728.html/</link>
      <pubDate>Thu, 28 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050728.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by microwaved Chinese food and air conditioning. I love the modern era. Without further ado, I bring you:&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;pxperl-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-72ef8db2a30decff-d6cdda584ed03036-d6cdda584ed03036&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/72ef8db2a30decff/d6cdda584ed03036#d6cdda584ed03036&#34;&gt;PxPerl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced the release of PxPerl 5.8.7-3, allowing easy access for people who want to play with Pugs and Parrot on Windows.&lt;/p&gt;

&lt;h4 id=&#34;test-report-for-windows-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-59cbdc5407af6d1d-b5fab8f688683f68-b5fab8f688683f68&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/59cbdc5407af6d1d/b5fab8f688683f68#b5fab8f688683f68&#34;&gt;Test Report for Windows&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ronald Hill reported some failing tests for Pugs on Windows. Fortunately, given Pugs&amp;rsquo; development, there is a reasonable chance of having these problems fixed. Unfortunately, given Pugs&amp;rsquo; development, no such information made it to the list.&lt;/p&gt;

&lt;h4 id=&#34;parsing-perl-6-rules-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b015b73040e20441-1468fa0cd2c60b47-1468fa0cd2c60b47&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b015b73040e20441/1468fa0cd2c60b47#1468fa0cd2c60b47&#34;&gt;Parsing Perl 6 Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered how Jeff Pinyan&amp;rsquo;s parsing-Perl-6-rules project was going. Jeff said that it did not get very far, but he posted what he did have to &lt;a href=&#34;http://feather.perl6.nl/~japhy/&#34;&gt;his feather site&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pugs-problems-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-82ee149bb2d85bc1-4d1fcdb883424696-4d1fcdb883424696&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/82ee149bb2d85bc1/4d1fcdb883424696#4d1fcdb883424696&#34;&gt;Pugs Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim Konovalov found two problems while playing with &lt;code&gt;slurp&lt;/code&gt;. Adriano Ferreira showed him how to work around &lt;code&gt;slurp&lt;/code&gt; not accepting a &lt;code&gt;:raw&lt;/code&gt; option. Nobody commented on the peculiar &lt;code&gt;$*ARGS[0]&lt;/code&gt; value when the argument is &lt;code&gt;-foobarfluffy&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;official-perl-6-rules-grammar-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-0011d8b97dee7e89-55fb939f0dee60c2-55fb939f0dee60c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/0011d8b97dee7e89/55fb939f0dee60c2#55fb939f0dee60c2&#34;&gt;Official Perl 6 Rules Grammar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick announced an &amp;ldquo;official Perl 6 grammar,&amp;rdquo; which he will maintain closely with PGE in Parrot. It is incomplete at this point, but patches are most welcome.&lt;/p&gt;

&lt;h4 id=&#34;pil-nodes-descriptions-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e044f2bf561fe482-6bd06c83cd64f720-6bd06c83cd64f720&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e044f2bf561fe482/6bd06c83cd64f720#6bd06c83cd64f720&#34;&gt;PIL Nodes Descriptions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal posted a request for a clue batting, listing various types of nodes in PIL and explaining her guesses at their descriptions. Stuart Cook and Patrick both provided a little help, although they did not address everything on her list.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-faq-patch-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e390005d62b36314-1f78076fe32525de-1f78076fe32525de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e390005d62b36314/1f78076fe32525de#1f78076fe32525de&#34;&gt;Perl 6 FAQ Patch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus provided a patch for the Perl 6 FAQ to remove an outdated question. Robert Spier applied the patch (modulo some confusion about staged versus live copies).&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;opcode-optimizability-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9d51af690526ca50-7ce11972f9700fc4-7ce11972f9700fc4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9d51af690526ca50/7ce11972f9700fc4#7ce11972f9700fc4&#34;&gt;Opcode Optimizability&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls noted that it is often simpler from an optimizer writer&amp;rsquo;s standpoint to do constant folding and optimization on a smaller set of opcodes (just one variant of &lt;code&gt;add&lt;/code&gt; instead of five (seven, if you count &lt;code&gt;inc&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt;)). Leo explained that removing these opcodes isn&amp;rsquo;t an option, but suggest to add to the FAQ the recommendation for compiler writers to emit only the more verbose codes.&lt;/p&gt;

&lt;h4 id=&#34;refcounting-hash-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5c57948de0eb65d5-4524a529265756a1-4524a529265756a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5c57948de0eb65d5/4524a529265756a1#4524a529265756a1&#34;&gt;Refcounting Hash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wants to use a hash to hold reference counts for Ponie (something like &lt;code&gt;dod_register_pmc&lt;/code&gt; in &lt;em&gt;pmc.c&lt;/em&gt;), but he doesn&amp;rsquo;t want to duplicate code. Leo suggested that he move some of the code into a PMC and then switch the real registry to use that PMC.&lt;/p&gt;

&lt;h4 id=&#34;new-pge-test-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-64c78fe69846258d-5be1667694bf333b-5be1667694bf333b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/64c78fe69846258d/5be1667694bf333b#5be1667694bf333b&#34;&gt;New PGE Test&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Mitchell N. Charity submitted a test for a &amp;ldquo;large&amp;rdquo; Pugs grammar. It currently fails. Patrick noted that the test likely came from &lt;em&gt;rx_grammar.pl&lt;/em&gt; in the Pugs distribution. This probably led to his above addition of an &amp;ldquo;Official Perl 6 Rules Grammar.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;jit-emit-help-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-be7db5a4fa863bf4-e0016e90bd49ac12-utoken-2ft0qzcaaadwxq4ss-whfjzzhfxvem00gqo7azl4xkybyor3fdcx1wpjjkp5fy-ceg7-g7huovyh7ocruduwaccdqfgxnog&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/be7db5a4fa863bf4/e0016e90bd49ac12?utoken=2ft0QzcAAADWXQ4sS--whFjzzhFxvEM00gQo7AZl4XkybyOr3FDcx1wpJJKp5Fy_CeG7_g7HuOvyH7OCrUDUWaccdqfgXNOG&#34;&gt;JIT Emit Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble decided that he would play with an x86_64 code generator. Unfortunately, he hit some stumbling blocks. Leo offered to help him and provided pointers from &lt;em&gt;#parrot&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;call-opcode-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-84a72c2aaf83c847-d2efb9430a077b30-d2efb9430a077b30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/84a72c2aaf83c847/d2efb9430a077b30#d2efb9430a077b30&#34;&gt;Call Opcode Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo wants to clean up some of the various &lt;code&gt;invoke&lt;/code&gt; opcodes. He posted a request for comment, but Warnock applies. It seems that Leo&amp;rsquo;s requests for comments like this get Warnocked a lot.&lt;/p&gt;

&lt;h4 id=&#34;spawnw-return-value-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b3b8c5aecdcc2354-759b9235518ec3e9-759b9235518ec3e9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b3b8c5aecdcc2354/759b9235518ec3e9#759b9235518ec3e9&#34;&gt;&lt;code&gt;spawnw&lt;/code&gt; Return Value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Prompted by Jonathan Worthington submitting a patch to &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/efb75561665e2c80/bb36e3935b3179ad#bb36e3935b3179ad&#34;&gt;make the &lt;code&gt;spawnw&lt;/code&gt; tests pass on Windows&lt;/a&gt; (applied), Jerry Gay opened a TODO ticket for switching &lt;code&gt;spawnw&lt;/code&gt; to return something object-like to wrap platform-specific oddities.&lt;/p&gt;

&lt;h4 id=&#34;bugs-in-ops2vim-pl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1791b6c68817f702-6ba2941807f35823-6ba2941807f35823&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1791b6c68817f702/6ba2941807f35823#6ba2941807f35823&#34;&gt;Bugs in &lt;em&gt;ops2vim.pl&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Amir Karger noticed a bug in &lt;em&gt;ops2vim.pl&lt;/em&gt; and suggested a fix. Jerry Gay fixed it.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-ctx-branch-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3a36357193751b7c-f08ee194474ddbfe-f08ee194474ddbfe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3a36357193751b7c/f08ee194474ddbfe#f08ee194474ddbfe&#34;&gt;Leo&amp;rsquo;s Ctx Branch Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay and Leo worked together to get his branch passing a few more tests on Windows. Nick Glencross wondered if the Python dynclasses tests were running, too. Jonathan Worthington explained that they were being skipped for the moment.&lt;/p&gt;

&lt;h4 id=&#34;raised-by-the-aliens-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5e7adae80c68ae2c-0702375e91fd82a8-0702375e91fd82a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5e7adae80c68ae2c/0702375e91fd82a8#0702375e91fd82a8&#34;&gt;Raised by the Aliens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse was surprised to discover that you cannot use &lt;code&gt;addparent&lt;/code&gt; with a PMC for either argument. He suggested that either should work or should have official documentation.&lt;/p&gt;

&lt;h4 id=&#34;patches-accumulating-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-571902f4a4f653f2-9e8223e529f9ba66-9e8223e529f9ba66&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/571902f4a4f653f2/9e8223e529f9ba66#9e8223e529f9ba66&#34;&gt;Patches Accumulating&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo requested that people with commit bits pick up some of the patches that were building up, as he was running a little low on tuits.&lt;/p&gt;

&lt;h4 id=&#34;dump-cfg-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6ef439c886066b14-55e991eba8cdcd52-55e991eba8cdcd52&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6ef439c886066b14/55e991eba8cdcd52#55e991eba8cdcd52&#34;&gt;Dump CFG&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls moved the &lt;code&gt;dump_cfg&lt;/code&gt; call from &lt;em&gt;reg_alloc.c&lt;/em&gt; to &lt;em&gt;cfg.c&lt;/em&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;string-to-cstring-leaks-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f1a4315013d4c915-672164862ef435bc-672164862ef435bc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f1a4315013d4c915/672164862ef435bc#672164862ef435bc&#34;&gt;&lt;code&gt;string_to_cstring&lt;/code&gt; Leaks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington plugged a few leaks caused by &lt;code&gt;string_to_cstring&lt;/code&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;deleting-globals-lexicals-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e21b573a0ea70bde-65f90008008e2c3c-65f90008008e2c3c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e21b573a0ea70bde/65f90008008e2c3c#65f90008008e2c3c&#34;&gt;Deleting Globals/Lexicals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noted that there was no way to delete globals or lexicals. Leo posted one (untested) way to do it.&lt;/p&gt;

&lt;h4 id=&#34;generating-win32-executables-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6854673d53122c92-607b7bf7c9e361c8-607b7bf7c9e361c8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6854673d53122c92/607b7bf7c9e361c8#607b7bf7c9e361c8&#34;&gt;Generating Win32 Executables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington laid some groundwork for generating executables on Windows. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;library-loading-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f047dcf93759ecab-6e03ce901bb57ca5-6e03ce901bb57ca5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f047dcf93759ecab/6e03ce901bb57ca5#6e03ce901bb57ca5&#34;&gt;Library Loading on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington beefed up the library searching logic in Parrot to be a little more Windowsy. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;pbc-merge-utility-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8b4e5b0f87adba1d-57ed94ccb95085f8-57ed94ccb95085f8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8b4e5b0f87adba1d/57ed94ccb95085f8#57ed94ccb95085f8&#34;&gt;PBC Merge Utility&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a request for a utility that could merge several PBC files into one.&lt;/p&gt;

&lt;h4 id=&#34;calling-super-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2bf16c7f57ee1a2e-59ec396d410b5d29-59ec396d410b5d29&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2bf16c7f57ee1a2e/59ec396d410b5d29#59ec396d410b5d29&#34;&gt;Calling Super Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noticed that there was no way to call the method from a super class. Leo pointed out a way to do it by accessing the slots of the parent directly.&lt;/p&gt;

&lt;h4 id=&#34;cmd-buffer-reallocation-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3b01415e4da2325f-20c2be9a86a7a693-20c2be9a86a7a693&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3b01415e4da2325f/20c2be9a86a7a693#20c2be9a86a7a693&#34;&gt;&lt;code&gt;cmd&lt;/code&gt; Buffer Reallocation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Greg Bacon fixed a bug in the reallocation of the &lt;code&gt;cmd&lt;/code&gt; buffer on Win32. Jonathan Worthington applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;data-dump-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d819d5808bcfa1e3-0c0ef49282c078e7-0c0ef49282c078e7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d819d5808bcfa1e3/0c0ef49282c078e7#0c0ef49282c078e7&#34;&gt;&lt;code&gt;Data::Dump&lt;/code&gt; (PGE)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda added a TODO for making PGE&amp;rsquo;s match objects compatible with &lt;code&gt;Data::Dumper&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;does-hash-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-57829b80613a030f-eba85e09e75dd15e-eba85e09e75dd15e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/57829b80613a030f/eba85e09e75dd15e#eba85e09e75dd15e&#34;&gt;&lt;code&gt;does Hash&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wants &lt;code&gt;Data::Dumper&lt;/code&gt; to check if an object &lt;code&gt;does&lt;/code&gt; &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; and dump it thusly if it has no default &lt;code&gt;dump&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rx-ops-s-future-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5087777195497561-6f8550b9c3e177b1-6f8550b9c3e177b1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5087777195497561/6f8550b9c3e177b1#6f8550b9c3e177b1&#34;&gt;&lt;em&gt;rx.ops&lt;/em&gt;&amp;rsquo;s Future&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered about the future of the rx ops. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon, who wrote them, recons they are not long for this world. He mentioned though that the intstacks and the bitmap handling code might be worth saving.&lt;/p&gt;

&lt;h4 id=&#34;debugger-list-breakpoints-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-caf85c11387a0550-d8343c914258b2f4-d8343c914258b2f4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/caf85c11387a0550/d8343c914258b2f4#d8343c914258b2f4&#34;&gt;Debugger-List Breakpoints&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda noticed that the debugger was not quite compatible with Perl&amp;rsquo;s. Leo replied that the debugger&amp;rsquo;s whole command loop was a mess that required a turn of the crank.&lt;/p&gt;

&lt;h4 id=&#34;u-escape-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c5fec6e374846f70-ea379969e2c28c73-ea379969e2c28c73&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c5fec6e374846f70/ea379969e2c28c73#ea379969e2c28c73&#34;&gt;&lt;code&gt;\u&lt;/code&gt; Escape Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda brought up an old ticket for some Unicode escape issues. Leo asked for a test case.&lt;/p&gt;

&lt;h4 id=&#34;string-gt-int-conversions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1460def887a4d5c6-2423989ff6a521de-2423989ff6a521de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1460def887a4d5c6/2423989ff6a521de#2423989ff6a521de&#34;&gt;&lt;code&gt;string&lt;/code&gt; -&amp;gt; &lt;code&gt;int&lt;/code&gt; Conversions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noticed that there are no opcode octal and hex conversions. Leo suggested adding one of the form &lt;code&gt;set Ix, Sy, Ibase # Ibase = 2..36&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;make-make-languages-failures-non-fatal-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c471cd54c2f4d224-ef07478f722221f5-ef07478f722221f5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c471cd54c2f4d224/ef07478f722221f5#ef07478f722221f5&#34;&gt;Make &lt;code&gt;make languages&lt;/code&gt; Failures Non-Fatal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer suggested that &lt;code&gt;make languages&lt;/code&gt; should not give up after the first failure, but should instead build the remaining languages.&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-on-windows-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2bf0400fe7338eef-5e293e31dfb2e70c-5e293e31dfb2e70c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2bf0400fe7338eef/5e293e31dfb2e70c#5e293e31dfb2e70c&#34;&gt;Dynclasses on Windows&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross and Jonathan Worthington discussed how to make dynclasses build on Windows.&lt;/p&gt;

&lt;h4 id=&#34;resizable-array-allocation-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-292d52cb41823a62-7b5c88c024a74769-7b5c88c024a74769&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/292d52cb41823a62/7b5c88c024a74769#7b5c88c024a74769&#34;&gt;&lt;code&gt;Resizable*Array&lt;/code&gt; Allocation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles submitted a patch making all the various &lt;code&gt;Resizeable*Array&lt;/code&gt; PMCs share their allocation strategy. Bernhard Schmalhofer applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mmd-roundup-take-2-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b1fb0985a8682d17-42a030138f39041a-42a030138f39041a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b1fb0985a8682d17/42a030138f39041a#42a030138f39041a&#34;&gt;MMD Roundup: Take 2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark attempted to de-Warnock a suggested change by Leo. Unfortunately, his thoughts on the matter were, &amp;ldquo;This is really a call for the designer to make, isn&amp;rsquo;t it?&amp;rdquo; Leo suggested starting a &lt;em&gt;WARNOCKED&lt;/em&gt; file for these things. Will countered that adding it to the DESIGN section in &lt;em&gt;docs/ROADMAP&lt;/em&gt;, would mean that Chip needs only look in one place.&lt;/p&gt;

&lt;h4 id=&#34;parrot-failures-on-mac-os-x-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-522f18e94ff1e97b-607ed4ce47a5eab6-607ed4ce47a5eab6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/522f18e94ff1e97b/607ed4ce47a5eab6#607ed4ce47a5eab6&#34;&gt;Parrot Failures on Mac OS X&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark forwarded some failures on Mac OS X to the Parrot list (from the Ponie one).&lt;/p&gt;

&lt;h4 id=&#34;parrot-needs-stderr-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e06edd0f30a68d33-a197458082a6d861-a197458082a6d861&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e06edd0f30a68d33/a197458082a6d861#a197458082a6d861&#34;&gt;Parrot Needs &lt;code&gt;STDERR&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark noticed that running Parrot with a closed &lt;code&gt;STDERR&lt;/code&gt; makes Parrot unhappy.&lt;/p&gt;

&lt;h4 id=&#34;gmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4cd9e2926bc83d64-f8d878256d60c2a1-f8d878256d60c2a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4cd9e2926bc83d64/f8d878256d60c2a1#f8d878256d60c2a1&#34;&gt;GMC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alexandre Buisse and many others have been talking about his Generation Mark and Compact Garbage Collector. Plans are rapidly taking shape.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;user-defined-context-behavior-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-43135a1d4f0bbfcc-80e0a74f25f015a0-80e0a74f25f015a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/43135a1d4f0bbfcc/80e0a74f25f015a0#80e0a74f25f015a0&#34;&gt;User-Defined Context Behavior&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wanted to know how to make his own custom class that would act specially in list context. Thomas Sandlaß suggested overloading &lt;code&gt;&amp;amp;infix:&amp;lt;=&amp;gt;&lt;/code&gt;. Sadly, his answer doesn&amp;rsquo;t seem to have made it to Google Groups.&lt;/p&gt;

&lt;h4 id=&#34;hash-creation-with-duplicate-keys-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c073d7300ae39e81-bd1f191a0b4b4dd7-bd1f191a0b4b4dd7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c073d7300ae39e81/bd1f191a0b4b4dd7#bd1f191a0b4b4dd7&#34;&gt;Hash Creation with Duplicate Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt noticed that in Perl 5 hash definitions, the rightmost duplicate wins, whereas the leftmost wins in Perl 6. He wondered if this was a bug or not. Luke explained that it was that way for named variable bindings. Larry figured it should be that way &lt;em&gt;only&lt;/em&gt; for named variable binding. If Pugs has not done it yet, some brave soul could probably add tests and find it implemented before they had finished committing.&lt;/p&gt;

&lt;h4 id=&#34;tail-calls-methods-and-currying-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6961593735eeb3dc-1b1408f6f11c2504-1b1408f6f11c2504&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6961593735eeb3dc/1b1408f6f11c2504#1b1408f6f11c2504&#34;&gt;Tail Calls, Methods, and Currying&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon wondered about tail calls, noting that the current method (&lt;code&gt;$obj.can(&#39;meth&#39;).goto($obj, *@args);&lt;/code&gt;) is kinda ugly. Larry mused that &lt;code&gt;return g()&lt;/code&gt; should go ahead and tail call. If the code does not want a tailcall there, then it should avoid it manually.&lt;/p&gt;

&lt;h4 id=&#34;pairs-and-binding-play-poorly-together-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0e070011c30ef520-b9aafc0d0d0e27c7-b9aafc0d0d0e27c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0e070011c30ef520/b9aafc0d0d0e27c7#b9aafc0d0d0e27c7&#34;&gt;Pairs and Binding Play Poorly Together&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noted that pairs and bindings (such as in a &lt;code&gt;for&lt;/code&gt; loop) play badly together. Larry supposed that the &lt;code&gt;Bare&lt;/code&gt; code object could have parameters of type &lt;code&gt;Pair|Item&lt;/code&gt; (note no &lt;code&gt;Junction&lt;/code&gt;) by default to solve this problem. Damian supported the exclusion of &lt;code&gt;Junction&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;method-introspection-and-meta-meta-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b64f6f0757aba82f-e7c6e6b4fde0dd38-e7c6e6b4fde0dd38&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b64f6f0757aba82f/e7c6e6b4fde0dd38#e7c6e6b4fde0dd38&#34;&gt;Method Introspection and Meta &lt;code&gt;meta.classes&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic wondered about subroutine and method introspection. Sam Vilain thought he might want to look at Stevan Little&amp;rsquo;s Perl 6 MetaModel. He also talked about closing the loop on meta-meta-meta headaches. Apparently Smalltalk has done this somewhere.&lt;/p&gt;

&lt;h4 id=&#34;big-object-rethink-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-69ce157a34ae688d-50c133e45c608ede-50c133e45c608ede&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/69ce157a34ae688d/50c133e45c608ede#50c133e45c608ede&#34;&gt;Big Object Rethink&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry posted a fairly major rethink of member variables and methods. Honestly I did not quite follow what he described, and there is a lot to summarize&amp;ndash;Hey! Look over there! ::PUNT:: Nothing to see here, move along.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collection-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-087904100f8ba53c-fa49a0002e4742b9-fa49a0002e4742b9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/087904100f8ba53c/fa49a0002e4742b9#fa49a0002e4742b9&#34;&gt;Garbage Collection API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa (after being lightly chastized by an unknown summarizer) started a new thread expanding on his desire for a GC API. I thought there were replies to this, but they don&amp;rsquo;t seem to have made it to Google.&lt;/p&gt;

&lt;h4 id=&#34;exposing-the-gc-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-419828b0fad1dcb8-3eb110889aa7bc0d-3eb110889aa7bc0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/419828b0fad1dcb8/3eb110889aa7bc0d#3eb110889aa7bc0d&#34;&gt;Exposing the GC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley thought that it might be useful to expose the GC to get an array of all objects of a particular class. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon thought that the ability to get such an array would be useful, but that it should merely be an implementation detail of whether an array of weak refs or the GC or Harry Potter was invoked.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists, please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, July 5-12, 2005</title>
      <link>http://localhost:1313/pub/2005/07/p6pdigest/20050714.html/</link>
      <pubDate>Thu, 14 Jul 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/07/p6pdigest/20050714.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Welcome to another summary from the frog house, a house so green you can see it from outer space (according to Google Earth).&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;&lt;em&gt;Perl 6 Compiler&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&#34;building-pugs-workaround-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-970364a0f2f52b9e-3d87824ffe636644-3d87824ffe636644&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/970364a0f2f52b9e/3d87824ffe636644#3d87824ffe636644&#34;&gt;Building Pugs Workaround&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain posted a useful workaround to the error &lt;code&gt;error: field `_crypt_struct&#39; has incomplete type&lt;/code&gt;, which occurs on some systems. Fortunately, &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e6246066a58d0751/ffcfa88d592a26c9#ffcfa88d592a26c9&#34;&gt;Salvador Ortiz Garcia found a fix&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pugs-pirate-pirate-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-49f0827f81def78d-b88e8886f14b55c7-b88e8886f14b55c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/49f0827f81def78d/b88e8886f14b55c7#b88e8886f14b55c7&#34;&gt;Pugs, Pirate. Pirate, Pugs.&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus began plotting with the Pirate folks. Thoughts include unifying PIL and PAST, or possibly retargeting PIL to PAST. Perhaps the result should be a more nautical dog. Maybe schipperke.&lt;/p&gt;

&lt;h4 id=&#34;implicit-invocants-and-pain-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-cb4496b1e466142b-d6a35534fbc745aa-d6a35534fbc745aa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/cb4496b1e466142b/d6a35534fbc745aa#d6a35534fbc745aa&#34;&gt;Implicit Invocants and Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry (as the summary will later explain) ruled that &lt;code&gt;./method&lt;/code&gt; was gone. He further ruled that &lt;code&gt;.method&lt;/code&gt; would pitch fits at either compile or run time if &lt;code&gt;$_ =:= $?SELF&lt;/code&gt; were false. Autrijus found this quite difficult to implement. Talk continues, and my instincts tell me that this too will pass, although Larry assures us that it is absolutely permanent for at least a week.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;key-question-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c182587ef8cbc62-4c48cd30a6a3f878-4c48cd30a6a3f878&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c182587ef8cbc62/4c48cd30a6a3f878#4c48cd30a6a3f878&#34;&gt;Key Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klass-Jan Stol found that using a assigning a floating point value to a key and then using it makes Parrot segfault. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrot-copyrights-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-01fc3ff8a6203ea6-ae4374d359358914-ae4374d359358914&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/01fc3ff8a6203ea6/ae4374d359358914#ae4374d359358914&#34;&gt;Parrot Copyrights&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal hinted that the Perl Foundation has almost finished hammering out some legal stuff and there will soon be sweeping changes throughout the repository addressing copyright issues.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-in-globs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5e4230c5bcd0fc94-0bdb158c243fa88c-0bdb158c243fa88c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5e4230c5bcd0fc94/0bdb158c243fa88c#0bdb158c243fa88c&#34;&gt;Character Classes in Globs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda noted that Tcl would pass more tests if PGE supported character classes in globs. Patrick, unable to resist the siren call of passing tests, implemented it.&lt;/p&gt;

&lt;h4 id=&#34;amber-for-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7f12c68f90744406-667e5992eeedcd29-667e5992eeedcd29&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7f12c68f90744406/667e5992eeedcd29#667e5992eeedcd29&#34;&gt;Amber for Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne announced that he had succeed in extracting viable DNA from a Parrot encased in amber since the Jurassic age. Either that or he released Amber version 0.2.2&amp;ndash;I&amp;rsquo;m not sure which.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fb1b9a5072fcbc55-bf163135cb4a7a27-bf163135cb4a7a27&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fb1b9a5072fcbc55/bf163135cb4a7a27#bf163135cb4a7a27&#34;&gt;Leo&amp;rsquo;s Branch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo has created a branch in SVN (&lt;em&gt;branches/leo-ctx5&lt;/em&gt;) of his work implementing the new calling conventions. This led to some discussion of &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/621435fc758277c1/fa477ead1d6957e1#fa477ead1d6957e1&#34;&gt;how to deal with optional arguments&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-mod-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-520665e89857bff8-24115e27fd5aeb37-24115e27fd5aeb37&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/520665e89857bff8/24115e27fd5aeb37#24115e27fd5aeb37&#34;&gt;Leo&amp;rsquo;s Branch Meets &lt;code&gt;mod_parrot&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz posted some observations and troubles he was having with Leo&amp;rsquo;s branch of new calling conventions. Leo warned that the branch was still young, but would gladly take test cases.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3de317517c40bfa3-157132eab2cbe703-157132eab2cbe703&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3de317517c40bfa3/157132eab2cbe703#157132eab2cbe703&#34;&gt;Leo&amp;rsquo;s Branch Meets PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After the initial discussion of optional parameters, Patrick updated the &lt;em&gt;leo_ctx5&lt;/em&gt; branch of PGE to the new calling conventions. All tests pass.&lt;/p&gt;

&lt;h4 id=&#34;get-onto-the-bus-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4fe4d8d6b23aec8e-41f4834e16082655-41f4834e16082655&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4fe4d8d6b23aec8e/41f4834e16082655#41f4834e16082655&#34;&gt;Get Onto the Bus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse found a Bus Error when running &lt;em&gt;languages/tcl/examples/bench.tcl&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;mingw-patch-resurrection-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-51ac75d80345b160-99254fc869fb1f97-99254fc869fb1f97&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/51ac75d80345b160/99254fc869fb1f97#99254fc869fb1f97&#34;&gt;MinGW Patch Resurrection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad resurrected a patch from mid-June with a set of action items. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;scared-parrots-like-scheme-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7f319f6edcee5fe-88e0bd3eb7606a57-88e0bd3eb7606a57&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7f319f6edcee5fe/88e0bd3eb7606a57#88e0bd3eb7606a57&#34;&gt;Scared Parrots Like Scheme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joh Lenz posted an announcement that he had an alpha version of Chicken (a Scheme to C compiler) backending to Parrot. Leo provided answers to some of his questions.&lt;/p&gt;

&lt;h4 id=&#34;bytecode-vs-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-64ebf15daf416f4a-224e3552a6a356a0-224e3552a6a356a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/64ebf15daf416f4a/224e3552a6a356a0#224e3552a6a356a0&#34;&gt;Bytecode Vs. PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse posted a list of questions about the place of PMCs. Some of the core tradeoffs include maintainability, portability, optimization, duplicate implementations, and security.&lt;/p&gt;

&lt;h4 id=&#34;make-svnclean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8bd8095c14224951-4b2a7f23442595b5-4b2a7f23442595b5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8bd8095c14224951/4b2a7f23442595b5#4b2a7f23442595b5&#34;&gt;&lt;code&gt;make svnclean&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that someone removed &lt;code&gt;make svnclean&lt;/code&gt;, but that he found it useful. Chip suggested renaming it &lt;code&gt;make svnclobber&lt;/code&gt;, as it does more than just clean.&lt;/p&gt;

&lt;h4 id=&#34;pmc2c-pl-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-303a65c78710702d-d277f7d8ed2d9c1f-d277f7d8ed2d9c1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/303a65c78710702d/d277f7d8ed2d9c1f#d277f7d8ed2d9c1f&#34;&gt;&lt;em&gt;pmc2c.pl&lt;/em&gt; Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found a bug in the shortcut to avoid writing a PMC dump file. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;define-cache-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a6ccdcd2d2f1979d-2628963df14329d6-2628963df14329d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a6ccdcd2d2f1979d/2628963df14329d6#2628963df14329d6&#34;&gt;Define &lt;code&gt;cache&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark suggested that it was probably not wise to &lt;code&gt;#define&lt;/code&gt; &lt;code&gt;cache&lt;/code&gt;. They removed it.&lt;/p&gt;

&lt;h4 id=&#34;parrots-getting-smarter-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-36e9e7223850dcbe-c6e71a192649f4e8-c6e71a192649f4e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/36e9e7223850dcbe/c6e71a192649f4e8#c6e71a192649f4e8&#34;&gt;Parrots Getting Smarter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo pointed out that at least one parrot understood the concept of zero, putting it some distance ahead of Romans when it comes to math. Once the Parrots start to grow opposable thumbs, I will welcome our new Parrot overlords.&lt;/p&gt;

&lt;h4 id=&#34;leo-s-branch-meets-exceptions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4762ca5b69bec1cd-e69e85ac96c3ed6f-e69e85ac96c3ed6f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4762ca5b69bec1cd/e69e85ac96c3ed6f#e69e85ac96c3ed6f&#34;&gt;Leo&amp;rsquo;s Branch Meets Exceptions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted two suggestions for how the new calling conventions could interact with exceptions. Autrijus liked the idea of unifying exception handlers with the rest of calls and returns.&lt;/p&gt;

&lt;h4 id=&#34;control-flow-graph-bugs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7cdffa86f6f4ebb6-8ec31c6030b0950e-8ec31c6030b0950e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7cdffa86f6f4ebb6/8ec31c6030b0950e#8ec31c6030b0950e&#34;&gt;Control Flow Graph Bugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls noted what he thought might be a bug in the &lt;code&gt;compute_dominators&lt;/code&gt; function. Leo confirmed that it was likely a bug. Later he posted a note saying he was working on a new implementation for some of the CFG algorithms. He asked for a hand, but Warnock applied. Actually, I think I have looked at that code before. I would help be happy to take a look, Curtis.&lt;/p&gt;

&lt;h4 id=&#34;todo-steal-good-ideas-from-dan-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f5db2c4bec9b285f-4c502fffd9480eab-4c502fffd9480eab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f5db2c4bec9b285f/4c502fffd9480eab#4c502fffd9480eab&#34;&gt;TODO: Steal Good Ideas from Dan&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda opened a ticket suggesting that we open tickets based on some of Dan&amp;rsquo;s latest posts to Squaks of the Parrot. Remember: &amp;ldquo;talent imitates, but genius steals.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;punie-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fa0b911b26481df3-d3aa6dfdb0522d30-d3aa6dfdb0522d30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fa0b911b26481df3/d3aa6dfdb0522d30#d3aa6dfdb0522d30&#34;&gt;Punie&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Allison Randal wants to add Punie (a Perl 1 compiler) to SVN. Response was positive.&lt;/p&gt;

&lt;h4 id=&#34;mobilizing-pm-groups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e09da82d02a0486a-7f74455bca561f06-7f74455bca561f06&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e09da82d02a0486a/7f74455bca561f06#7f74455bca561f06&#34;&gt;Mobilizing PM groups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if there had been any work mobilizing Perl Monger groups for the good of Parrot. Maybe I should finally look up the Cambridge or Boston PM group.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;&lt;em&gt;Perl 6 Language&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;As usual in &lt;em&gt;p6l&lt;/em&gt; land, there are a couple of really long threads. As usual in &lt;em&gt;p6summarizer&lt;/em&gt; land, they will get short summaries. Odd how that happens.&lt;/p&gt;

&lt;h4 id=&#34;conflicting-autogenerated-accessors-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-35bee7deb1a4defc-f959d1b2d0c37f34-f959d1b2d0c37f34&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/35bee7deb1a4defc/f959d1b2d0c37f34#f959d1b2d0c37f34&#34;&gt;Conflicting Autogenerated Accessors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Stevan Little wondered what would happen with conflicting autogenerated accessor names. Larry said they would carp as soon as they were discovered.&lt;/p&gt;

&lt;h4 id=&#34;dbi-v2-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d6ccf668de28e368-5556b425d916aada-5556b425d916aada&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d6ccf668de28e368/5556b425d916aada#5556b425d916aada&#34;&gt;DBI v2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The first really long thread has to do with the next version of DBI. I am not really a database person, but apparently those who are have &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b8d9be2e31c02600/c43179f8586e8b72#c43179f8586e8b72&#34;&gt;strong opinions&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;time-local-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c19bea30514933f4-3b16c5e62f1cffbe-3b16c5e62f1cffbe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c19bea30514933f4/3b16c5e62f1cffbe#3b16c5e62f1cffbe&#34;&gt;Time::Local&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The next really long thread has to do with the next version of Time::Local. I am not really a Time person, but apparently those who are have strong opinions.&lt;/p&gt;

&lt;h4 id=&#34;submethods-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7a159cc98802b975-7eb8b200aa302aac-7eb8b200aa302aac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7a159cc98802b975/7eb8b200aa302aac#7eb8b200aa302aac&#34;&gt;Submethods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little and Larry Wall talked about submethods, their purpose, and their interaction with the metamodel. I must say that I have only partially wrapped my head around metamodels at all.&lt;/p&gt;

&lt;h4 id=&#34;smd-considered-harmful-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f81ec2a928ff59b7-c89f2f00d5c263de-c89f2f00d5c263de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f81ec2a928ff59b7/c89f2f00d5c263de#c89f2f00d5c263de&#34;&gt;SMD Considered Harmful?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week, Yuval Kogman conjectured that MMD should be the one true MD, as it allowed nifty extensibility. This week, Stuart Cook offered a sort of compromise. I rather like Stuart&amp;rsquo;s compromise.&lt;/p&gt;

&lt;h4 id=&#34;dependency-injection-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-322560d7d27fb63c-7332b80612ba1300-7332b80612ba1300&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/322560d7d27fb63c/7332b80612ba1300#7332b80612ba1300&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wants to be able to have classes that inject themselves in correctly at use time, based on what is actually used. Larry commented, but one quote really caught my attention: &amp;ldquo;Globals are bad only if you use them to hold non-global values.&amp;rdquo; &amp;lt;off-topic&amp;gt;There is an important lesson imbedded in that quote. We really should learn rules not to follow them blindly, but so that we understand the spirit behind them and respect that instead. Not that I have had screaming matches with any programmers who blindly eschew globals and &lt;code&gt;goto&lt;/code&gt;s without understanding why. &amp;lt;/off-topic&amp;gt; That was more of a rant then just off-topic. Oh well.&lt;/p&gt;

&lt;h4 id=&#34;file-seek-interface-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ab5aff3faacb3d55-0fabc28358cb62be-0fabc28358cb62be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ab5aff3faacb3d55/0fabc28358cb62be#0fabc28358cb62be&#34;&gt;&lt;code&gt;File.seek&lt;/code&gt; Interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian wondered what the &lt;code&gt;seek&lt;/code&gt; interface would look like for handles. Larry likes the idea of it working entirely through opaque position objects using &lt;code&gt;`&lt;/code&gt; to specify units.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-perl-5-82-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-efafd6d6e69625ad-4006f811870dbf22-4006f811870dbf22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/efafd6d6e69625ad/4006f811870dbf22#4006f811870dbf22&#34;&gt;Perl 6/Perl 5 ~ 82%&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael Hendricks noticed that (according to &lt;a href=&#34;https://metacpan.org/pod/Text::TypingEffort&#34;&gt;Text::TypingEffort&lt;/a&gt;). Perl 6 requires 18 percent less effort than Perl 5. He suggests that this is a bad thing for the community&amp;rsquo;s waistline. I conjecture that Perl developers will use the extra time they save for activities such as running and canoeing, and as a result will paradoxically lose weight from expending less effort at work.&lt;/p&gt;

&lt;h4 id=&#34;creating-value-types-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-afe5ce7665d8c7cb-4d5909caa7ae0e1f-4d5909caa7ae0e1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/afe5ce7665d8c7cb/4d5909caa7ae0e1f#4d5909caa7ae0e1f&#34;&gt;Creating Value Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to create a value type. Luke Palmer suggested using an &lt;code&gt;is value&lt;/code&gt; trait. He then went on to speculate about mutating value traits and COW semantics. Larry though that perhaps an &lt;code&gt;is copy&lt;/code&gt; trait was called for. Oooh, a preposition at the end of a sentence; makes me want to occasionally split infinitives.&lt;/p&gt;

&lt;h4 id=&#34;oo-isa-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-543393430f6292d0-525e5dfe05a1bd18-525e5dfe05a1bd18&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/543393430f6292d0/525e5dfe05a1bd18#525e5dfe05a1bd18&#34;&gt;OO &lt;code&gt;.isa&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt viciously lied when claiming to post a &amp;ldquo;quick&amp;rdquo; &lt;code&gt;isa&lt;/code&gt; question. This quickly went the way of the meta object. I think I mentioned my take on those earlier (powerful, but ow).&lt;/p&gt;

&lt;h4 id=&#34;method-call-on-invocant-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-93f95d3dd9c36110-cd3de4e88dc2868d-cd3de4e88dc2868d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/93f95d3dd9c36110/cd3de4e88dc2868d#cd3de4e88dc2868d&#34;&gt;Method Call on Invocant&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The last really long thread has to do with the next chapter in the &amp;ldquo;method call on self&amp;rdquo; saga. I am a bit of a &amp;ldquo;method call on self&amp;rdquo; person, and apparently those who are have strong opinions. It&amp;rsquo;s worth noting this time that Larry updated the current state of the world. Now &lt;code&gt;./method&lt;/code&gt; is gone and &lt;code&gt;.method&lt;/code&gt; only works when &lt;code&gt;$_ =:= $?SELF&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;use-and-require-question-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8c1270622f08e693-aad674b8d5e852ee-aad674b8d5e852ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8c1270622f08e693/aad674b8d5e852ee#aad674b8d5e852ee&#34;&gt;&lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; Question&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; actually do. Gall Yahas suggested they return the last thing in the used/required file. Larry agreed and held that they would also return the same thing. He also warned that &lt;code&gt;%INC&lt;/code&gt; would probably work differently in Perl 6.&lt;/p&gt;

&lt;h4 id=&#34;user-defined-infix-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c4349076f6416aca-5a12927bc3af87d9-5a12927bc3af87d9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c4349076f6416aca/5a12927bc3af87d9#5a12927bc3af87d9&#34;&gt;User-Defined &lt;code&gt;infix&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if an method &lt;code&gt;infix:&amp;lt;===&amp;gt;&lt;/code&gt; would need marking as export for a script that &lt;code&gt;use&lt;/code&gt;s it to get the method. Larry explained that the method &lt;code&gt;infix:&amp;lt;===&amp;gt;&lt;/code&gt; would be available by name, but would have to be marked as export for the syntactic sugar of &lt;code&gt;A === B&lt;/code&gt; to work.&lt;/p&gt;

&lt;h4 id=&#34;hackathon-notes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c189bc6a1ff45b63-6930a91ec364db48-6930a91ec364db48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c189bc6a1ff45b63/6930a91ec364db48#6930a91ec364db48&#34;&gt;Hackathon Notes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a link to his Hackathon notes. This spawned several threads. David Storrs tried to convince people to change subject lines, with limited success. Much of the discussion focused on MMD and how confusing it was. Damian Conway posted his set of three rules that would prevent AIs from harming humans and his set of eight rules that would prevent MMDs from harming programmers, proving that MMDs are almost three times more dangerous than AIs.&lt;/p&gt;

&lt;h4 id=&#34;raw-binary-data-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-34204e4b08d29684-adb4216e9160ce7d-adb4216e9160ce7d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/34204e4b08d29684/adb4216e9160ce7d#adb4216e9160ce7d&#34;&gt;Raw Binary Data&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Formosa wanted to play with raw binary data in Perl 6. I try and avoid raw things except sushi. Larry suggested that this would just be a string with its maximum abstraction level set to bytes.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, June 21-28, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050630.html/</link>
      <pubDate>Thu, 30 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050630.html/</guid>
      <description>

&lt;p&gt;All&amp;ndash;&lt;/p&gt;

&lt;p&gt;Long time no see &amp;hellip; err, write &amp;hellip; uh, read &amp;hellip; um &amp;hellip; this. Yeah, long time no this. As Piers hinted, two weeks ago I moved. Moving sucks. For those of you who care, I am still in Cambridge; for those of you who care more, I think you misunderstand the summarizer/summary reader relationship. Essentially it revolves around summaries; the summary of my move is Cambridge to Cambridge.&lt;/p&gt;

&lt;p&gt;As Piers noted last week, this is a low-volume, high-action week, in no small part due to the hack-a-thons. Last week&amp;rsquo;s was in Austria, this week&amp;rsquo;s is near Toronto. Perhaps some nice soul who was actually at these hack-a-thons will summarize them when it is over.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pge-announcements-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-abfc8d43c0030ae2-db08ca00d5df5bad-db08ca00d5df5bad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/abfc8d43c0030ae2/db08ca00d5df5bad#db08ca00d5df5bad&#34;&gt;PGE Announcements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick announced that PGE now supports grammars and more built-in rules. He even offered to field requests for built-in rules (although he would prefer patches).&lt;/p&gt;

&lt;h4 id=&#34;caller-s-context-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-f26c2b6b94f58bec-4f9964a9246294c5-4f9964a9246294c5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f26c2b6b94f58bec/4f9964a9246294c5#4f9964a9246294c5&#34;&gt;Caller&amp;rsquo;s Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wanted to know how to determine if his sub is called in void context. He conjectured that &lt;code&gt;want&lt;/code&gt; might fill his wants. There is no response yet.&lt;/p&gt;

&lt;h4 id=&#34;self-hosting-goals-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a7006466f65ed918-649a0c2ebdc39551-649a0c2ebdc39551&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a7006466f65ed918/649a0c2ebdc39551#649a0c2ebdc39551&#34;&gt;Self-Hosting Goals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas explained that one good reason for Perl 6 to be self-hosting is that it would allow the people who love it most (Perl hackers) to hack on it. The theory is that low-level languages like C unnecessarily narrow the field of contributors (especially those that only know Perl). People expressed some concerns expressed over confusion about the language Ponie should be written in. No one disputes that this is C.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;indexing-hashtables-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-47fabb48ef7956e8-b0617764c7f5cf9d-b0617764c7f5cf9d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/47fabb48ef7956e8/b0617764c7f5cf9d#b0617764c7f5cf9d&#34;&gt;Indexing Hashtables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol asked for a clue bat with respect to indexing hash tables in PIR. Joshua Juran and Leo each took a swing.&lt;/p&gt;

&lt;h4 id=&#34;parrot-loses-with-fedora-core-4-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1d557b9589f65929-f387af585e3cea74-f387af585e3cea74&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1d557b9589f65929/f387af585e3cea74#f387af585e3cea74&#34;&gt;Parrot Loses with Fedora Core 4&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick reported that Fedora Core 4 and Parrot don&amp;rsquo;t get along well. Leo suggested a possible solution. Patrick has posted no response.&lt;/p&gt;

&lt;h4 id=&#34;default-method-resolution-order-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-95280ad597d4790d-d5dc071ccab92032-d5dc071ccab92032&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/95280ad597d4790d/d5dc071ccab92032#d5dc071ccab92032&#34;&gt;Default Method Resolution Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne wondered what the default MRO order is. Leo provided the answer: left-to-right, depth-first, discard all but the last occurrence of duplicates, divine intervention.&lt;/p&gt;

&lt;h4 id=&#34;win32-tests-failing-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-30bae80d039db434-38e92b8e886cb1a9-38e92b8e886cb1a9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/30bae80d039db434/38e92b8e886cb1a9#38e92b8e886cb1a9&#34;&gt;Win32 Tests Failing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Craig the Last-Nameless-One posted a list of failing tests and problems on Windows. Leo provided a few answers.&lt;/p&gt;

&lt;h4 id=&#34;method-inheritance-needs-perl-loving-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a0dd2cb3fefa091b-1f5a59bc9780dd12-1f5a59bc9780dd12&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a0dd2cb3fefa091b/1f5a59bc9780dd12#1f5a59bc9780dd12&#34;&gt;Method Inheritance Needs Perl Loving&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced a Perl job for the interested: method inheritance in the PMC compiler. This naturally led to discussion of numerical hierarchies. I was a little disappointed that quaternions appeared, but Hamiltonian and Surreal Numbers did not. Honestly, where are our priorities?&lt;/p&gt;

&lt;h4 id=&#34;tracing-and-debugging-pain-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-63231fc4b4354b74-8308d6a82a7391ee-8308d6a82a7391ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63231fc4b4354b74/8308d6a82a7391ee#8308d6a82a7391ee&#34;&gt;Tracing and Debugging Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse posted a general description of the problems he was having with tracing, debugging, and GC. Warnock might apply in a day or two.&lt;/p&gt;

&lt;h4 id=&#34;segmented-context-and-register-memory-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aac073aea211da64-3eb0faddd82cf78f-3eb0faddd82cf78f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aac073aea211da64/3eb0faddd82cf78f#3eb0faddd82cf78f&#34;&gt;Segmented Context and Register Memory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip posted a partial reply to Leo&amp;rsquo;s context and register overhaul patch. Andy Dougherty responded to some of Chip&amp;rsquo;s finer points. If you find the nuances of C&amp;rsquo;s pointer pain interesting, this thread is for you.&lt;/p&gt;

&lt;h4 id=&#34;improving-parrot-s-test-framework-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d9c6844fdd0370dd-89aeb7672bec78f4-89aeb7672bec78f4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d9c6844fdd0370dd/89aeb7672bec78f4#89aeb7672bec78f4&#34;&gt;Improving Parrot&amp;rsquo;s Test Framework&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic wants to improve Parrot&amp;rsquo;s test framework by stealing ideas from Test::Class. He wants to know if anyone else has an interest.&lt;/p&gt;

&lt;h4 id=&#34;setattribute-fails-with-multi-level-inheritance-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aa53a7af485b291f-7063cd92d09e5fa0-7063cd92d09e5fa0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aa53a7af485b291f/7063cd92d09e5fa0#7063cd92d09e5fa0&#34;&gt;&lt;code&gt;setattribute&lt;/code&gt; Fails with Multi-Level Inheritance&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne opened a ticket describing an error with &lt;code&gt;setattribute&lt;/code&gt; when using several layers of inheritance.&lt;/p&gt;

&lt;h4 id=&#34;register-allocation-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c5863248089d19c-a86685a0a333ba85-a86685a0a333ba85&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c5863248089d19c/a86685a0a333ba85#a86685a0a333ba85&#34;&gt;Register Allocation Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo opened a ticket for a problem with improper control flow tracking. Bill Coffman wondered whether the new register design is in place yet.&lt;/p&gt;

&lt;h4 id=&#34;pass-by-value-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a3e7c1a8234ed020-e249e566eb001b7b-e249e566eb001b7b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a3e7c1a8234ed020/e249e566eb001b7b#e249e566eb001b7b&#34;&gt;Pass by Value PMCs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol mused that the new calling conventions could work to allow passing PMCs by value.&lt;/p&gt;

&lt;h4 id=&#34;parrot-fall-down-go-boom-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a49d5b1ae8374fc1-844cb69766ad6b3e-844cb69766ad6b3e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a49d5b1ae8374fc1/844cb69766ad6b3e#844cb69766ad6b3e&#34;&gt;Parrot Fall Down Go Boom&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Fowles reported a segfaulting Parrot that passes its tests. Sadly, no one solved his problem in the four hours between his posting it and writing the summary.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;you-know-that-but-you-go-on-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-792e4adc208c9568-f4ca247b7b29cf04-f4ca247b7b29cf04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/792e4adc208c9568/f4ca247b7b29cf04#f4ca247b7b29cf04&#34;&gt;You Know That, But You Go On&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;As Piers noted, arguments about &lt;code&gt;./method&lt;/code&gt; versus &lt;code&gt;.method&lt;/code&gt; continue. Like Piers, I don&amp;rsquo;t like &lt;code&gt;./&lt;/code&gt;. I guess I was the only person who liked &lt;code&gt;$^&lt;/code&gt; as the invocant. Ah well, I guess I will just go on summarizing.&lt;/p&gt;

&lt;h4 id=&#34;binding-functions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-257b160616561992-d396c7a60a1d47a7-d396c7a60a1d47a7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/257b160616561992/d396c7a60a1d47a7#d396c7a60a1d47a7&#34;&gt;Binding Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers wanted to use a Ruby idiom involving rebinding functions. Damian told him that he could, but also pointed him to &lt;code&gt;wrap&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;oo-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-caf03c9ef13ce6e5-8b7df20d9c8e6aab-8b7df20d9c8e6aab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/caf03c9ef13ce6e5/8b7df20d9c8e6aab#8b7df20d9c8e6aab&#34;&gt;OO Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András posted a question about method calls in Perl 6. Juerd and Piers provided answers.&lt;/p&gt;

&lt;h4 id=&#34;autoload-and-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-69acf71fe3cc023e-01dcb95c7294c925-01dcb95c7294c925&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/69acf71fe3cc023e/01dcb95c7294c925#01dcb95c7294c925&#34;&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; and &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Last week&amp;rsquo;s thread about &lt;code&gt;AUTOLOAD&lt;/code&gt; continued. It still seems to be fishing for some official decision.&lt;/p&gt;

&lt;h4 id=&#34;magic-mutators-and-proxies-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5196c30a34c9d60a-87bf624ff2f251be-87bf624ff2f251be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5196c30a34c9d60a/87bf624ff2f251be#87bf624ff2f251be&#34;&gt;Magic Mutators and Proxies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain wondered if he could make proxies behave like he wanted to. Luke Palmer explained, yes, but he would need to use binding instead of assignment.&lt;/p&gt;

&lt;h4 id=&#34;quasiquoting-and-ppi-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d1335f4b4c548a25-f4ab8859af6f2269-f4ab8859af6f2269&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d1335f4b4c548a25/f4ab8859af6f2269#f4ab8859af6f2269&#34;&gt;Quasiquoting and PPI&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman asked how Quasiquoting and PPI would interact with the AST. Autrijus posted some explanation and Adam Kennedy cleared up some terms.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 25, 2005-May 31, 2005</title>
      <link>http://localhost:1313/pub/2005/06/p6pdigest/20050602.html/</link>
      <pubDate>Thu, 02 Jun 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/06/p6pdigest/20050602.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to another Perl 6 summary, brought to you by Aliya&amp;rsquo;s new friends, Masha Nannifer and Philippe, and my own secret running joke. Without further ado, I bring you Perl 6 Compiler.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;method-chaining-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-896e66b5cef6d677-e8f9ca07d7b1dc6f-e8f9ca07d7b1dc6f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/896e66b5cef6d677/e8f9ca07d7b1dc6f#e8f9ca07d7b1dc6f&#34;&gt;Method Chaining&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Alex Gutteridge discovered that he couldn&amp;rsquo;t chain attribute access such as &lt;code&gt;$bowl.fish.eyes.say;&lt;/code&gt; in Pugs. Later he provided his example in test form (in case anyone wanted to add it). Maybe someone added them, maybe not; Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pugs-link-issues-on-debian-sid-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-12735f0c524edb53-bdc3f08faf125f5f-bdc3f08faf125f5f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/12735f0c524edb53/bdc3f08faf125f5f#bdc3f08faf125f5f&#34;&gt;Pugs Link Issues on Debian Sid&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András had trouble making Pugs work on Debian Sid with Perl 5 support. Autrijus provided helpful pointers. I assume from his final silence that the final pointer worked.&lt;/p&gt;

&lt;h4 id=&#34;pugs-ast-compilation-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-70f338f3a2256f07-13d6ee45390ecb00-13d6ee45390ecb00&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/70f338f3a2256f07/13d6ee45390ecb00#13d6ee45390ecb00&#34;&gt;&lt;code&gt;Pugs.AST.*&lt;/code&gt; Compilation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson wanted to speed up the compilation of &lt;code&gt;Pugs.AST.*&lt;/code&gt; modules by turning off optimizations. Autrijus told him that this was a core module that needed its speed, and optimizations would stay.&lt;/p&gt;

&lt;h4 id=&#34;pugs-types-export-list-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a13a6669f7555211-29fa93e63a1859e8-29fa93e63a1859e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a13a6669f7555211/29fa93e63a1859e8#29fa93e63a1859e8&#34;&gt;&lt;code&gt;Pugs.Types&lt;/code&gt; Export List&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson added an export list to &lt;code&gt;Pugs.Types&lt;/code&gt;. Autrijus happily applied it and sent him a commit bit.&lt;/p&gt;

&lt;h4 id=&#34;export-withargs-from-main-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fb0bfd20062be074-89c3a26a58d0566a-89c3a26a58d0566a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fb0bfd20062be074/89c3a26a58d0566a#89c3a26a58d0566a&#34;&gt;Export &lt;code&gt;withArgs&lt;/code&gt; from &lt;code&gt;Main&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Samuel Bronson added an export to &lt;code&gt;Main&lt;/code&gt;. Samuel Bronson happily applied it himself this time.&lt;/p&gt;

&lt;h4 id=&#34;out-of-date-hs-plugins-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-473d55dfb23cb82b-dfb2bf1285cb5d68-dfb2bf1285cb5d68&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/473d55dfb23cb82b/dfb2bf1285cb5d68#dfb2bf1285cb5d68&#34;&gt;Out-of-Date hs-plugins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vadim had trouble compiling Pugs with Parrot support. Autrijus helped him fix his problem, and there was much rejoicing.&lt;/p&gt;

&lt;h4 id=&#34;chomp-problem-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-146f4e62d950196a-b457fd0e6bac2224-b457fd0e6bac2224&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/146f4e62d950196a/b457fd0e6bac2224#b457fd0e6bac2224&#34;&gt;&lt;code&gt;chomp&lt;/code&gt; Problem&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks found a problem with &lt;code&gt;chomp&lt;/code&gt; and submitted a test. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pugs-makefile-issue-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e9da852ea30990fc-11806b69b57c9a53-11806b69b57c9a53&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e9da852ea30990fc/11806b69b57c9a53#11806b69b57c9a53&#34;&gt;Pugs &lt;em&gt;makefile&lt;/em&gt; Issue&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan noticed that Pugs was creating a useless &lt;em&gt;Pugs.exe.bat&lt;/em&gt;. Autrijus asked if he would be willing to investigate a patch. He responded that he would put it in his queue.&lt;/p&gt;

&lt;h4 id=&#34;loop-or-do-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-43829f825c10b04e-80f020826b1ec28b-80f020826b1ec28b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/43829f825c10b04e/80f020826b1ec28b#80f020826b1ec28b&#34;&gt;&lt;code&gt;loop&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerd Pokorra wondered why &lt;code&gt;do { ... }&lt;/code&gt; was in Pugs, reasoning that &lt;code&gt;loop { ... } while&lt;/code&gt; was the correct thing. Luke Palmer explained that &lt;code&gt;do { ... }&lt;/code&gt; was part of the with-or-without-a-postfix &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-5-8-6-2-with-pugs-6-2-5-and-parrot-0-2-0-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-44797562829e45bf-0ec9118d0a5df14e-0ec9118d0a5df14e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/44797562829e45bf/0ec9118d0a5df14e#0ec9118d0a5df14e&#34;&gt;PxPerl 5.8.6.2 with Pugs 6.2.5 and Parrot 0.2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced the release of PxPerl 5.8.6.2, which includes Pugs 6.2.5 and Parrot 0.2.0. This means that Windows folk can test Pugs and Parrot without having to fight with compilers.&lt;/p&gt;

&lt;h4 id=&#34;build-errors-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c8d85c57fa0cd9d7-e8d11297c80c534b-e8d11297c80c534b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c8d85c57fa0cd9d7/e8d11297c80c534b#e8d11297c80c534b&#34;&gt;&lt;code&gt;BUILD&lt;/code&gt; Errors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks found the handling of a named argument to a constructor confusing. He asked for confirmation but no one provided it. Perhaps this poor summary can save him.&lt;/p&gt;

&lt;h4 id=&#34;white-space-and-function-calls-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2cd54cc42ccc7faf-e229eeb82b638977-e229eeb82b638977&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2cd54cc42ccc7faf/e229eeb82b638977#e229eeb82b638977&#34;&gt;White Space and Function Calls&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David D. Zuhn didn&amp;rsquo;t know about the forbidding of white space between a function call and its parentheses. Carl told him that and about the &lt;code&gt;.()&lt;/code&gt; variant that allows white space.&lt;/p&gt;

&lt;h4 id=&#34;pug-s-make-clean-issues-long-commands-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-0ad94f1b41e69ee1-1db579766f53aa86-1db579766f53aa86&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/0ad94f1b41e69ee1/1db579766f53aa86#1db579766f53aa86&#34;&gt;Pug&amp;rsquo;s &lt;code&gt;make clean&lt;/code&gt; Issues &lt;em&gt;Long&lt;/em&gt; Commands&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks noticed that &lt;code&gt;make clean&lt;/code&gt; issued a command so long that it broke his &lt;code&gt;nmake&lt;/code&gt;. Fortunately he had a really old &lt;code&gt;nmake&lt;/code&gt; and updating fixed the problem.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;thr-windows-h-with-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-081cb54a4ed511fe-67a7f34afdf97217-67a7f34afdf97217&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/081cb54a4ed511fe/67a7f34afdf97217#67a7f34afdf97217&#34;&gt;&lt;em&gt;thr_windows.h&lt;/em&gt; with MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing two compilation problems in &lt;em&gt;thr_windows.h&lt;/em&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrot-slides-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-42f822db3b2b4c7d-e40c457dca60a311-e40c457dca60a311&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/42f822db3b2b4c7d/e40c457dca60a311#e40c457dca60a311&#34;&gt;Parrot Slides?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble posted a request for slides and notes on Parrot and Perl 6 for a presentation he was working on. Many people provided links in various languages. I usually steal from Dan&amp;rsquo;s presentations when I need something like this.&lt;/p&gt;

&lt;h4 id=&#34;problems-with-perl-5-6-1-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e4f90647f62c3661-0a9baaa67250616b-0a9baaa67250616b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e4f90647f62c3661/0a9baaa67250616b#0a9baaa67250616b&#34;&gt;Problems with Perl 5.6.1&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad had a problem building Parrot with MinGW and Perl 5.6.1, related to Windows and its binary vs. text distinction. This problem will also crop up if you ever try to &lt;code&gt;seek&lt;/code&gt; on files in Windows; not that I have ever lost several days debugging that problem.&lt;/p&gt;

&lt;h4 id=&#34;ordered-hash-thoughts-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-86466b906c8e6e10-24a935c5c2c71aa8-24a935c5c2c71aa8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/86466b906c8e6e10/24a935c5c2c71aa8#24a935c5c2c71aa8&#34;&gt;Ordered Hash Thoughts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted his thoughts on a modification to ordered hash, as adding a new element by index breaks the string-hashing part of it. Dan suggested that the ordered hash just pitch exceptions in the bad cases, as it was designed to be lightweight and fast.&lt;/p&gt;

&lt;h4 id=&#34;subrules-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c600922a3fcec692-759e9ee7e172f6ad-759e9ee7e172f6ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c600922a3fcec692/759e9ee7e172f6ad#759e9ee7e172f6ad&#34;&gt;Subrules Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli provided a patch adding tests for subrules to PGE. Warnock applied, at least until Patrick read this summary.&lt;/p&gt;

&lt;h4 id=&#34;python-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ea055b495d6878a2-23a59ac23ea8606d-23a59ac23ea8606d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ea055b495d6878a2/23a59ac23ea8606d#23a59ac23ea8606d&#34;&gt;Python on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bloves inquired as to the state of Python on Parrot. The phrasing of the question itself provided some confusion. Michal Wallace provided a link to Pirate, hoping it would help.&lt;/p&gt;

&lt;h4 id=&#34;resizable-array-defeats-list-c-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7c24021ab507253d-855d8042ec831341-855d8042ec831341&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7c24021ab507253d/855d8042ec831341#855d8042ec831341&#34;&gt;&lt;code&gt;Resizable*Array&lt;/code&gt; Defeats &lt;em&gt;list.c&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Slowly but steadily, my &lt;code&gt;{Fixed,Resizable}&amp;lt;type&amp;gt;Array&lt;/code&gt; PMCs are defeating the less consistent array implementations. Leo offered the job of slaying &lt;em&gt;list.c&lt;/em&gt; to any interested party. Jerry Gay expressed interest.&lt;/p&gt;

&lt;h4 id=&#34;encodings-on-char-constants-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d71521e3e4e51418-b4da146647db3e6c-b4da146647db3e6c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d71521e3e4e51418/b4da146647db3e6c#b4da146647db3e6c&#34;&gt;Encodings on &amp;ldquo;Char Constants&amp;rdquo;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers wants to be able to supply an encoding for his character constants that use &lt;code&gt;&#39;&lt;/code&gt;. He also wanted to find the integer that corresponds to a character. Leo explained how he could do the former and that &lt;code&gt;ord&lt;/code&gt; is useful for the latter.&lt;/p&gt;

&lt;h4 id=&#34;broken-links-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-01803083e71e519c-05c4703b1d5e89b4-05c4703b1d5e89b4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/01803083e71e519c/05c4703b1d5e89b4#05c4703b1d5e89b4&#34;&gt;Broken Links&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Fayland Lam pointed out that the links from the last summary were a little broken. Hopefully this summary will be better.&lt;/p&gt;

&lt;h4 id=&#34;refcounts-and-dod-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3f1726696d729ec9-c791d65ce745c731-c791d65ce745c731&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3f1726696d729ec9/c791d65ce745c731#c791d65ce745c731&#34;&gt;Refcounts and DOD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Wallace wondered how best to make Python&amp;rsquo;s refcounts work for embedding it in Parrot. Nicholas Clark pointed out that &lt;code&gt;Parrot_[un]register_pmc&lt;/code&gt; would work. Dan noted that if the Python library were to become a Parrot extension, these could become no-ops as Parrot&amp;rsquo;s DOD would do the necessary work.&lt;/p&gt;

&lt;h4 id=&#34;bigint-fixes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c581e03e878f4d8a-d5f8daa08f078f3c-d5f8daa08f078f3c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c581e03e878f4d8a/d5f8daa08f078f3c#d5f8daa08f078f3c&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt; Fixes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew added some tests and fixes to &lt;em&gt;BigInt.pmc&lt;/em&gt;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mingw-and-gmp-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a09a64c88328db95-b9c59f2722a5f595-b9c59f2722a5f595&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a09a64c88328db95/b9c59f2722a5f595#b9c59f2722a5f595&#34;&gt;MinGW and GMP&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing GMP for MinGW. Leo provided a slight correction, which François incorporated. Leo then applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;index-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c81da92bc01890a5-6a6dd5a236cf22eb-6a6dd5a236cf22eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c81da92bc01890a5/6a6dd5a236cf22eb#6a6dd5a236cf22eb&#34;&gt;&lt;code&gt;index&lt;/code&gt; Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne found a failure in the &lt;code&gt;index&lt;/code&gt; opcode. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;mingw-and-gdbm-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-33dfb7a365e4a083-fe4b4af306994134-fe4b4af306994134&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33dfb7a365e4a083/fe4b4af306994134#fe4b4af306994134&#34;&gt;MinGW and GDBM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing GDBMfor MinGW. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mod-operation-fails-with-negative-integers-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8894e415b47b8d24-a2ed829260b2d8dc-a2ed829260b2d8dc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8894e415b47b8d24/a2ed829260b2d8dc#a2ed829260b2d8dc&#34;&gt;&lt;code&gt;mod&lt;/code&gt; Operation Fails with Negative Integers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Browne noticed that &lt;code&gt;mod&lt;/code&gt;ing with or by negative integers could produce negatives, such as &lt;code&gt;3 mod -3 = -3&lt;/code&gt;. Leo fixed them to provide 0. I hate that fact about C; not that I have ever lost several days debugging that problem, either.&lt;/p&gt;

&lt;h4 id=&#34;tracing-and-debugging-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f40aab493be196c2-5d73d39d325ac0df-5d73d39d325ac0df&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f40aab493be196c2/5d73d39d325ac0df#5d73d39d325ac0df&#34;&gt;Tracing and Debugging&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo noted that debugging Parrot has grown more difficult, as the number of abstractions has increased. Is your compiler, IMCC, your PMC, or Parrot broken? Maybe two or three of them? To facilitate debugging, Leo suggested a &lt;code&gt;debug_break&lt;/code&gt; opcode and a &lt;code&gt;Debugger&lt;/code&gt; PMC. It sounds nifty. He also added support for lexically scoped trace and debug flags.&lt;/p&gt;

&lt;h4 id=&#34;adding-unicode-hex-and-octal-escapes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-72ffc881d1d75457-f85ac2dda841e70f-f85ac2dda841e70f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/72ffc881d1d75457/f85ac2dda841e70f#f85ac2dda841e70f&#34;&gt;Adding Unicode, Hex, and Octal Escapes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda added more complete escape sequence support to Tcl. Matt Diephouse integrated the patch into his latest version.&lt;/p&gt;

&lt;h4 id=&#34;the-state-of-partcl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3bba0dbcc811c84d-ad2ff9ee718948b2-ad2ff9ee718948b2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3bba0dbcc811c84d/ad2ff9ee718948b2#ad2ff9ee718948b2&#34;&gt;the State of ParTcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda proudly noted that as of r8193, ParTcl passed all tests, even with &lt;code&gt;gc-debug&lt;/code&gt;. Much praise goes to Matt Diephouse for his cleanup of the Tcl parser.&lt;/p&gt;

&lt;h4 id=&#34;strength-reduction-optimization-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0dcc4f1f752418ce-0c782ec5ad4c954e-0c782ec5ad4c954e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0dcc4f1f752418ce/0c782ec5ad4c954e#0c782ec5ad4c954e&#34;&gt;Strength Reduction Optimization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls provided a flurry of patches improving Parrot&amp;rsquo;s strength reduction optimization. Leo applied the patches.&lt;/p&gt;

&lt;h4 id=&#34;todo-readline-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-82f5be5069a649b7-97de5fb125248fdc-97de5fb125248fdc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/82f5be5069a649b7/97de5fb125248fdc#97de5fb125248fdc&#34;&gt;TODO: &lt;code&gt;readline&lt;/code&gt; Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for adding &lt;code&gt;readline&lt;/code&gt; support to Parrot.&lt;/p&gt;

&lt;h4 id=&#34;get-mmd-dispatch-type-fix-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4533f856ba99f0ae-d00c8b88bcfbd51b-d00c8b88bcfbd51b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4533f856ba99f0ae/d00c8b88bcfbd51b#d00c8b88bcfbd51b&#34;&gt;&lt;code&gt;get_mmd_dispatch_type&lt;/code&gt; Fix&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky provided a patch that fixes a bug in &lt;em&gt;mmd.c&lt;/em&gt;. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;uninitialized-variable-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2f5aa6c61a77aa58-40d686bdf7e7eee9-40d686bdf7e7eee9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2f5aa6c61a77aa58/40d686bdf7e7eee9#40d686bdf7e7eee9&#34;&gt;Uninitialized Variable&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky fixed an uninitialized variable. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;improved-loadlib-handling-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9491a345632a0111-0a09d861dccc0018-0a09d861dccc0018&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9491a345632a0111/0a09d861dccc0018#0a09d861dccc0018&#34;&gt;Improved &lt;code&gt;loadlib&lt;/code&gt; Handling&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers improved &lt;code&gt;loadlib&lt;/code&gt;&amp;rsquo;s handling of absolute paths. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;dod-sweep-fix-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b3bca2ddf30f69ce-17b19f2de2b3ecd2-17b19f2de2b3ecd2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b3bca2ddf30f69ce/17b19f2de2b3ecd2#17b19f2de2b3ecd2&#34;&gt;DOD Sweep Fix&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky prevented the NULL &lt;code&gt;PMC_EXT&lt;/code&gt; from being added to the PMC &lt;code&gt;ext&lt;/code&gt; pool during a DOD sweep. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;packfile-double-destroy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3773a79fd720ee41-2cd1145fa93e777d-2cd1145fa93e777d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3773a79fd720ee41/2cd1145fa93e777d#2cd1145fa93e777d&#34;&gt;Packfile Double Destroy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky fixed a problem with double destruction of nested packfiles. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;tcl-autoconverts-list-lt-gt-string-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0182c9ebfb0736bb-d531fecfb9c449a5-d531fecfb9c449a5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0182c9ebfb0736bb/d531fecfb9c449a5#d531fecfb9c449a5&#34;&gt;Tcl Autoconverts List &amp;lt;-&amp;gt; String&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tcl can autoconvert between lists and strings. Will Coleda wondered how to implement this behavior to best support language interoperability. People offered suggestions, but there was no real agreement on the best solution, though.&lt;/p&gt;

&lt;h4 id=&#34;todo-classification-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-952a2970ad1a2aaa-64d83aa594a8438b-64d83aa594a8438b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/952a2970ad1a2aaa/64d83aa594a8438b#64d83aa594a8438b&#34;&gt;TODO Classification&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chromatic, inspired by Pugs, added TODO classification to Parrot::Test. He threatened to apply the patch if there were no objections &amp;hellip; none yet.&lt;/p&gt;

&lt;h4 id=&#34;hll-group-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-75ed82ed26e93acf-a3e9619005dbeba1-a3e9619005dbeba1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/75ed82ed26e93acf/a3e9619005dbeba1#a3e9619005dbeba1&#34;&gt;HLL Group Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for loading high-level language PMC groups dynamically using the &lt;code&gt;.HLL&lt;/code&gt; directive. This will load the lib dynamically and change the return type of some ops to reflect the HLL&amp;rsquo;s preferences. It is nifty.&lt;/p&gt;

&lt;h4 id=&#34;pistol-wielding-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-56d66dd2f4202b8c-acea6702a7bdbeb4-acea6702a7bdbeb4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/56d66dd2f4202b8c/acea6702a7bdbeb4#acea6702a7bdbeb4&#34;&gt;Pistol-Wielding Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for PIR versions of the &lt;a href=&#34;http://shootout.alioth.debian.org/&#34;&gt;Computer Language Shootout&lt;/a&gt; tests. This will provide a means of gauging Parrot&amp;rsquo;s performance against other languages. Kinda nifty.&lt;/p&gt;

&lt;h4 id=&#34;nmake-v1-5-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7280549fef836ac0-8255877b03808230-8255877b03808230&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7280549fef836ac0/8255877b03808230#8255877b03808230&#34;&gt;&lt;code&gt;nmake&lt;/code&gt; v1.5 Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Sandever also had trouble with overly long lines and &lt;code&gt;nmake&lt;/code&gt;. Upgrading &lt;code&gt;nmake&lt;/code&gt; fixed his problem, too.&lt;/p&gt;

&lt;h4 id=&#34;optimizer-producing-bad-code-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7df5b27c42f22e6-8a84a8e385b74ec1-8a84a8e385b74ec1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7df5b27c42f22e6/8a84a8e385b74ec1#8a84a8e385b74ec1&#34;&gt;Optimizer Producing Bad Code&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross noticed that the optimizer was producing some bad code. Leo fixed one of the problems, but missed the other.&lt;/p&gt;

&lt;h4 id=&#34;keys-design-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0b09cf75ebded75b-a3ac293d1aaace86-a3ac293d1aaace86&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0b09cf75ebded75b/a3ac293d1aaace86#a3ac293d1aaace86&#34;&gt;Keys Design&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan posted an explanation of his original design for keys.&lt;/p&gt;

&lt;h4 id=&#34;loop-improvements-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ef896a743922b55e-91db59b1a73aee04-91db59b1a73aee04&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ef896a743922b55e/91db59b1a73aee04#91db59b1a73aee04&#34;&gt;Loop Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Curtis Rawls provided a patch to improve the loop struct in the IMCC optimizer. Leo applied it and asked if he would take a whack at reducing the resource consumption of Bill Coffman&amp;rsquo;s register allocation patch. Dan and Bob Rogers both expressed interested in speeding up the compiler.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;hash-slices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-fe42b63a7e74721b-04e18f0b56fb64b3-04e18f0b56fb64b3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/fe42b63a7e74721b/04e18f0b56fb64b3#04e18f0b56fb64b3&#34;&gt;Hash Slices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks thought he was having trouble with hash slices. Actually he was having trouble with the &lt;code&gt;s/-&amp;gt;/./&lt;/code&gt; in his Perl 5 conversion.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-and-refactoring-support-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fb02214da27797-0409dbac1ab2d41a-0409dbac1ab2d41a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fb02214da27797/0409dbac1ab2d41a#0409dbac1ab2d41a&#34;&gt;Perl 6 and Refactoring Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Piers Cawley resurrected Matisse Enzer&amp;rsquo;s thread about IDEs and tools for Perl 6. He observed that Perl 6 might provide a great deal of support for such things. Deborah Pickett noted that it might not be theoretically possible to parse Perl 6 safely. Luke Palmer felt that it would not be possible, given &lt;code&gt;BEGIN&lt;/code&gt; blocks and the like.&lt;/p&gt;

&lt;h4 id=&#34;os-but-os-unix-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6f589edd45ffad1e-2eb118f67d19a368-2eb118f67d19a368&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6f589edd45ffad1e/2eb118f67d19a368#2eb118f67d19a368&#34;&gt;&lt;code&gt;$*OS but OS::unix&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon suggested that &lt;code&gt;$*OS&lt;/code&gt; be a class that mixes in the correct &lt;code&gt;OS::class&lt;/code&gt;. Then MMD could do the heavy lifting. I like this idea.&lt;/p&gt;

&lt;h4 id=&#34;reduction-junctions-and-cribbage-scoring-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-35f6c8d0d9aa4371-5eaac5d52de792d6-5eaac5d52de792d6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/35f6c8d0d9aa4371/5eaac5d52de792d6#5eaac5d52de792d6&#34;&gt;Reduction Junctions and Cribbage Scoring&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon wanted to use junctions and reductions to score cribbage hands. Unfortunately, he used junctions as a set. This led to discussions of the correct implementation, and of a Set module that should be part of Perl 6. I want such a set module to have a powerset function that returns the powerset of a particular set (preferably lazily instantiated). Also, my cribbage scoring algorithm is better: 1) lay down hand, 2) announce score, 3) peg.&lt;/p&gt;

&lt;h4 id=&#34;syntax-for-using-perl-5-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8843447d9562a359-79007e1d5ba75d38-79007e1d5ba75d38&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8843447d9562a359/79007e1d5ba75d38#79007e1d5ba75d38&#34;&gt;Syntax for Using Perl 5&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus added support to Pugs for using Perl 5 modules. This led him to wonder what the correct syntax for this actually was. Many suggestions, but no decisions, arrived.&lt;/p&gt;

&lt;h4 id=&#34;mmd-and-smd-interaction&#34;&gt;MMD and SMD Interaction&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wondered how MMD and SMD would interact. Warnock applied.&lt;/p&gt;

&lt;h4 id=&#34;making-perl-6-grammars-generative-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3ba81c6b33ec5605-db8a961b884b69ae-db8a961b884b69ae&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3ba81c6b33ec5605/db8a961b884b69ae#db8a961b884b69ae&#34;&gt;Making Perl 6 Grammars Generative&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aufrank wondered if Perl 6 grammars could be made generative. I would say that this does not belong in the core simply because of its niche application; however, if I were to do this, I would start by using the Perl 6 grammar grammar and modify the way the parse tree is used. Sadly, aufrank posted to Google Groups, so nobody else expressed opinions.&lt;/p&gt;

&lt;h4 id=&#34;links-and-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3d1ff082d4338b04-bd268cbd6f0eb52a-bd268cbd6f0eb52a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3d1ff082d4338b04/bd268cbd6f0eb52a#bd268cbd6f0eb52a&#34;&gt;Links and References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß suggested a &lt;code&gt;Link&lt;/code&gt; class to fill the role of auto-dereferencing variables that Luke called &amp;ldquo;transparent&amp;rdquo; references.&lt;/p&gt;

&lt;h4 id=&#34;use-syntax-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b9b8fb5488a7da33-7e2fe8ee49ea4132-7e2fe8ee49ea4132&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b9b8fb5488a7da33/7e2fe8ee49ea4132#7e2fe8ee49ea4132&#34;&gt;Use Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon wondered how exactly ranges of versions and multi-language interoperability would work in Perl 6. Rod Adams provided a few answers.&lt;/p&gt;

&lt;h4 id=&#34;anonymous-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a5c5cdb1a30742ce-fedb6c6b85ae2f0c-fedb6c6b85ae2f0c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a5c5cdb1a30742ce/fedb6c6b85ae2f0c#fedb6c6b85ae2f0c&#34;&gt;Anonymous Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Simon Cozens announced that he was having a lot of fun converting Maypole to Perl 6. Then he asked how make anonymous subclasses that inherit from other classes and add new methods. Ingo Blechschmidt provided the answers.&lt;/p&gt;

&lt;h4 id=&#34;introspectable-code-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-fe1eb1f7887a4625-0a739544e951e569-0a739544e951e569&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/fe1eb1f7887a4625/0a739544e951e569#0a739544e951e569&#34;&gt;Introspectable Code Objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt thought it would be nifty if code objects were fully introspectable. Luke agreed, but felt that being able to access them at the statement level might be problematic. I think most of what Ingo would want this for is doable with macros that parse normally (or modify a block), but then munge the resulting match object appropriately.&lt;/p&gt;

&lt;h4 id=&#34;signatures-as-first-class-types-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bf516a1c019f25b1-fad6bfc4f1650717-fad6bfc4f1650717&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bf516a1c019f25b1/fad6bfc4f1650717#fad6bfc4f1650717&#34;&gt;Signatures As First-Class Types&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman hoped that signatures would be available as first-class types in Perl 6. Ingo Blechschmidt agreed. Sam Vilain pointed to the start of such a translation.&lt;/p&gt;

&lt;h4 id=&#34;new-and-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8f03c86d34ed66e2-4e33e251e46fa668-4e33e251e46fa668&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8f03c86d34ed66e2/4e33e251e46fa668#4e33e251e46fa668&#34;&gt;&lt;code&gt;new&lt;/code&gt; and MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks wanted to create a specialized on arguments to &lt;code&gt;new&lt;/code&gt; using MMD. Damian told him that his technique was a way to do it, and that &lt;code&gt;bless&lt;/code&gt; would still call &lt;code&gt;BUILDALL&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;code-ownership-and-debuggability-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b5bc2a3c0bec2d57-c0a0aa45d2cf43cd-c0a0aa45d2cf43cd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b5bc2a3c0bec2d57/c0a0aa45d2cf43cd#c0a0aa45d2cf43cd&#34;&gt;Code Ownership and Debuggability&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman posted his thoughts on code ownership and debuggability in the age of frameworks and generated code.&lt;/p&gt;

&lt;h4 id=&#34;strongly-typed-containers-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-99b61afd411441c3-5377eb7fe6083922-5377eb7fe6083922&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/99b61afd411441c3/5377eb7fe6083922#5377eb7fe6083922&#34;&gt;Strongly Typed Containers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wondered how to make a strongly typed container class (similar to C++ templates). Sam Villain provided a pointer to earlier threads and mentioned Haskell&amp;rsquo;s Generic Algebraic Data Types.&lt;/p&gt;

&lt;h4 id=&#34;constants-and-optimizations-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d60365097dfc4f24-55b6d56db611c9c6-55b6d56db611c9c6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d60365097dfc4f24/55b6d56db611c9c6#55b6d56db611c9c6&#34;&gt;Constants and Optimizations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to create constants so that the optimizer would be able to do as much as possible. Damian suggested that macros would be one solution. This makes me wonder if there is a way to declare a function so that the compiler can create a macro version for constants automatically. That would be nifty.&lt;/p&gt;

&lt;h4 id=&#34;date-time-formatting-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9c02afd5621d8f36-065dacbad0d9ddcd-065dacbad0d9ddcd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9c02afd5621d8f36/065dacbad0d9ddcd#065dacbad0d9ddcd&#34;&gt;Date/Time Formatting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered what sort of date/time formating Perl 6 would support. Rob Kinyon suggested porting &lt;code&gt;DateTime&lt;/code&gt;. This certainly sounds like something that belongs in a module.&lt;/p&gt;

&lt;h4 id=&#34;and-pow-i-found-illumination-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-60859d989e786eec-130fd7a73ed5bb7d-130fd7a73ed5bb7d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/60859d989e786eec/130fd7a73ed5bb7d#130fd7a73ed5bb7d&#34;&gt;And Pow, I Found Illumination&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After much discussion, @Larry has weighed in on the thread I started about reductions on empty lists. Damian feels that it should fail, as finding an appropriate identity operator is no simple task. Somehow a discussion of modulus and division slipped in too.&lt;/p&gt;

&lt;h4 id=&#34;sub-call-versus-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-952a0bb378deaa92-ecc8fdcafb41ff92-ecc8fdcafb41ff92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/952a0bb378deaa92/ecc8fdcafb41ff92#ecc8fdcafb41ff92&#34;&gt;Sub Call Versus MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wanted a sanity check on sub calls versus MMD. Larry provided an answer, but did not weigh in on his sanity.&lt;/p&gt;

&lt;h4 id=&#34;1-2-3-4-2-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c5d553fa29733b95-d434d39327b75214-d434d39327b75214&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c5d553fa29733b95/d434d39327b75214#d434d39327b75214&#34;&gt;&lt;code&gt;(1,(2,3),4)[2]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;People continue to feel very divided about &lt;code&gt;(1,(2,3),4)[2]&lt;/code&gt; and &lt;code&gt;@x = [1,2,3]&lt;/code&gt;. There are strong opinions on both sides about arrayrefs in array and scalar contexts. I appear to be allied with the losing side. Hopefully things will change.&lt;/p&gt;

&lt;h4 id=&#34;unicode-cheat-sheet-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ef172220cda5a462-710cc944649b901a-710cc944649b901a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ef172220cda5a462/710cc944649b901a#710cc944649b901a&#34;&gt;Unicode Cheat Sheet&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon posted a request for a Unicode cheat sheet so he could make his own nifty symbols. Gaal Yahas and Sam Vilain provided pointers.&lt;/p&gt;

&lt;h4 id=&#34;comprehensive-list-of-rules-tokens-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e9cfaffbe7ce5364-2335c47b32fa6af6-2335c47b32fa6af6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e9cfaffbe7ce5364/2335c47b32fa6af6#2335c47b32fa6af6&#34;&gt;Comprehensive List of Rules Tokens&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Pinyan wants a comprehensive list of Perl 6 rule tokens so he can create a Perl 5 module to parse them. Much discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;default-invocant-of-methods-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0d33ae0ce9a439fa-cb997504f9511ada-cb997504f9511ada&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0d33ae0ce9a439fa/cb997504f9511ada#cb997504f9511ada&#34;&gt;Default Invocant of Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if a method&amp;rsquo;s &lt;code&gt;Class&lt;/code&gt; could be a default invocant or only instances of it. Somehow this led Larry to musing about &lt;code&gt;Class&lt;/code&gt; as a role than people can mixin instead of inherit from. He confuses me.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, May 3, 2005 - May 17, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050519.html/</link>
      <pubDate>Thu, 19 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050519.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome ot another fortnight&amp;rsquo;s summary. Wouldn&amp;rsquo;t it just figure that I can&amp;rsquo;t think of anything sufficiently non-sequiterish to amuse myself. Perhaps I need a running gag like Leon Brocard or chromatic&amp;rsquo;s cummingesque capitalization. Maybe I should start one and not tell you. That could be fun.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-commit-emails-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1c9e026f0f0e7903-286f5a062264ee23-286f5a062264ee23&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1c9e026f0f0e7903/286f5a062264ee23#286f5a062264ee23&#34;&gt;Pugs commit emails&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you have ever been foolish enough to want an email for every commit in Pugs, Sam Vilain created a way to help you sip from the firehose. Have fun.&lt;/p&gt;

&lt;h4 id=&#34;given-when-nested-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2025f76d55caf683-ae383ce46fd7b5fd-ae383ce46fd7b5fd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2025f76d55caf683/ae383ce46fd7b5fd#ae383ce46fd7b5fd&#34;&gt;&lt;code&gt;given&lt;/code&gt; &lt;code&gt;when&lt;/code&gt; nested&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer had a question about how nested &lt;code&gt;when&lt;/code&gt; statements in a &lt;code&gt;given&lt;/code&gt; block should act. His intuition disagreed with Pugs, but most others supported Pugs.&lt;/p&gt;

&lt;h4 id=&#34;i-don-t-need-to-walk-around-in-circles-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-8523b893c996fa70-76b3a96677269d8c-76b3a96677269d8c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8523b893c996fa70/76b3a96677269d8c#76b3a96677269d8c&#34;&gt;I don&amp;rsquo;t need to walk around in circles&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus has made Pugs into a registered compiler for Parrot. Because Pugs already allowed you to embed Parrot code (PIR anyway) directly into Perl 6, this allows you to embed the Perl 6 in your PIR in your Perl 6. Now the possibilities are endless, at least until you blow your mental stack. Those of you with tail call optimization in your mental stack may simply go into an infinite loop if you prefer.&lt;/p&gt;

&lt;h4 id=&#34;xor-on-lists-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-96465d8b9ad451d9-64a06cc494ffd6ac-64a06cc494ffd6ac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/96465d8b9ad451d9/64a06cc494ffd6ac#64a06cc494ffd6ac&#34;&gt;xor on lists&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Trewth Seeker expressed his opinion about the proper definition of xor quite strongly. Unfortunately, his opinion is at odds with established mathematics, as Mark Biggar pointed out to him.&lt;/p&gt;

&lt;h4 id=&#34;pge-features-update-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-bcca948a1e74f7e7-1c76f7aaa60db60c-1c76f7aaa60db60c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/bcca948a1e74f7e7/1c76f7aaa60db60c#1c76f7aaa60db60c&#34;&gt;PGE features update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick provided an update on the state of the Perl Grammar Engine. It has many nifty new features.&lt;/p&gt;

&lt;h4 id=&#34;pugs-on-cygwin-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-1a6127fc512f3042-1a6127fc512f3042&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/1a6127fc512f3042#1a6127fc512f3042&#34;&gt;Pugs on Cygwin&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon and Gaal Yahas worked to improve Pugs support for Cygwin. Unfortunately the thread winds down with an unanswered question. Fortunately Stevan clued me in on IRC that things are not working just yet.&lt;/p&gt;

&lt;h4 id=&#34;pugs-gets-some-objects-and-some-rules-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1f38571c074915e2-048f7c691486ebfb-048f7c691486ebfb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1f38571c074915e2/048f7c691486ebfb#048f7c691486ebfb&#34;&gt;Pugs gets some objects and some rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus announced that Pugs now has basic support for Objects and Rules. Sometimes he scares me, though usually he just makes me really want to learn Haskell.&lt;/p&gt;

&lt;h4 id=&#34;regression-test-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-329b67f64c39aa38-07e4d4fb94cb9b8c-07e4d4fb94cb9b8c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/329b67f64c39aa38/07e4d4fb94cb9b8c#07e4d4fb94cb9b8c&#34;&gt;regression test&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Miroslav Silovic provided a regression test for hyper ops. Some people just don&amp;rsquo;t appreciate the fun of regressing.&lt;/p&gt;

&lt;h4 id=&#34;basic-test-for-classes-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-299b5349fa11d3ce-fe404aea60d99b7f-fe404aea60d99b7f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/299b5349fa11d3ce/fe404aea60d99b7f#fe404aea60d99b7f&#34;&gt;basic test for classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little provided a patch for a simple object test. Autrijus applied it. That&amp;rsquo;s odd, because I am pretty sure that Stevan has the commit bit&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;torturing-pge-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-038577a4ba20a869-8f58d037069d30c3-8f58d037069d30c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/038577a4ba20a869/8f58d037069d30c3#8f58d037069d30c3&#34;&gt;torturing PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd provided a link to a big rule that could segfault PGE. It kind reminds me of a homework assignment I had to create a regular expression which matched all strings of numbers that did not contain any repeated digits. That&amp;rsquo;s easy in Perl, but hard in math. I think the resultant regex was somewhere around 17 MB.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-3-with-live-cd-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b11fbbc15f76458a-6d583eb2e080a85a-6d583eb2e080a85a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b11fbbc15f76458a/6d583eb2e080a85a#6d583eb2e080a85a&#34;&gt;Pugs 6.2.3 with Live CD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus released Pugs 6.2.3 which contains 10% more awesome then Pugs 6.2.2. You should check it out on the &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/5707e93ba2942868/d8085652bc85fe9d#d8085652bc85fe9d&#34;&gt;live CD&lt;/a&gt; that Ingo Blechschmidt released.&lt;/p&gt;

&lt;h4 id=&#34;pxperl-meets-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a28bef89de27ef42-a4797d46952f98eb-a4797d46952f98eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a28bef89de27ef42/a4797d46952f98eb#a4797d46952f98eb&#34;&gt;PXPerl meets Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Grégoire Péan announced that he has added Pugs binaries to his windows distribution of Perl. Pretty cool. Autrijus innocently asked him to take on the slightly larger task of producing binaries of Parrot too, so that Pugs could be at its most powerful.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;p&gt;Wow, did you see how I mentioned Parrot before going into this new section. That was an awesome transition! My high school English teachers would be so proud.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7fc88a464c05c257-a2cb3834be55832d-a2cb3834be55832d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7fc88a464c05c257/a2cb3834be55832d#a2cb3834be55832d&#34;&gt;character classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick wants character class opcodes of the form find first and find first not. Leo pointed him to some hysterical raisins who might help.&lt;/p&gt;

&lt;h4 id=&#34;pge-on-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-998bbdec6ed1c605-dc9f6a1c35fb2475-dc9f6a1c35fb2475&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/998bbdec6ed1c605/dc9f6a1c35fb2475#dc9f6a1c35fb2475&#34;&gt;PGE on MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad fixed a problem with building PGE on MinGW. Patrick applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;pio-fdopen-return-value-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1855df6e00ad2066-0955bdf6c42d7ad5-0955bdf6c42d7ad5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1855df6e00ad2066/0955bdf6c42d7ad5#0955bdf6c42d7ad5&#34;&gt;&lt;code&gt;PIO_fdopen&lt;/code&gt; return value&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer both intoduced me to the wonderfully cute phrase &amp;ldquo;untodid&amp;rdquo; and provided a patch making &lt;code&gt;PIO_fdopen&lt;/code&gt; return &lt;code&gt;NULL&lt;/code&gt; when given bad flags. Leo applied the patch, but Melvin Smith warned that this might be a bad idea. Silence followed.&lt;/p&gt;

&lt;h4 id=&#34;embedding-initialization-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a639642be132a3ed-340eb5f582823fbc-340eb5f582823fbc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a639642be132a3ed/340eb5f582823fbc#340eb5f582823fbc&#34;&gt;embedding initialization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz was having trouble embedding PIR into C. Leo provided some pointers. Jeff was happy.&lt;/p&gt;

&lt;h4 id=&#34;test-builder-updates-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfe99da639662579-4f4b690aad4b7085-4f4b690aad4b7085&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfe99da639662579/4f4b690aad4b7085#4f4b690aad4b7085&#34;&gt;&lt;code&gt;Test::Builder&lt;/code&gt; updates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Previously, Michael G Schwern announced an update to &lt;code&gt;Test::Builder&lt;/code&gt;. chromatic asked if it was worth the upgrade. Michael replied probably, but I don&amp;rsquo;t think anyone has acted on it.&lt;/p&gt;

&lt;h4 id=&#34;miniparrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-32acc707df5678be-a02606ff9a675e14-a02606ff9a675e14&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/32acc707df5678be/a02606ff9a675e14#a02606ff9a675e14&#34;&gt;miniparrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert Spier created a miniparrot at Bernhard Schmalhofer&amp;rsquo;s request. This miniparrot does not replace our make system, but it does make our website less camel centric.&lt;/p&gt;

&lt;h4 id=&#34;autrijus-gets-the-commit-bit-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8c9fba41dfdb3f3d-4ff623e3cd504a1f-4ff623e3cd504a1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8c9fba41dfdb3f3d/4ff623e3cd504a1f#4ff623e3cd504a1f&#34;&gt;Autrijus gets the commit bit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo, Autrijus, and Chip had one of the nerdiest conversations ever. The summary of which is that Autrijus gets commit priveledges for Parrot. The general consensus was that he was too productive in Haskell and we needed to hobble him with a real man&amp;rsquo;s language like C.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-2-0-nlnet&#34;&gt;Parrot 0.2.0 &amp;ldquo;NLnet&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;Leo announed the release of Parrot 0.2.0. This one didn&amp;rsquo;t seem to make it to Slashdot. That&amp;rsquo;s kinda sad, because I always get a warm feeling when I know about stuff before /. Oddly, Google Groups seems to have lost the email.&lt;/p&gt;

&lt;h4 id=&#34;really-make-realclean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aa874e35b6f28552-18f381f84fa2936d-18f381f84fa2936d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aa874e35b6f28552/18f381f84fa2936d#18f381f84fa2936d&#34;&gt;really &lt;code&gt;make realclean&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;make realclean&lt;/code&gt; failed to find a few files: a flaw forcefully fixed by Jerry Gay.&lt;/p&gt;

&lt;h4 id=&#34;load-bytecode-shouldn-t-segfault-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e10e881681cc12bb-033a9daa09e266dc-033a9daa09e266dc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e10e881681cc12bb/033a9daa09e266dc#033a9daa09e266dc&#34;&gt;&lt;code&gt;load_bytecode&lt;/code&gt; shouldn&amp;rsquo;t segfault&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers made it not. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;tell-me-sweet-little-lies-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-292d8031e69aa7d4-c631eba65d3914ee-c631eba65d3914ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/292d8031e69aa7d4/c631eba65d3914ee#c631eba65d3914ee&#34;&gt;tell me sweet little lies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick put out a request for a rudimentary set of lies and damn lies. People are welcome to provide benchmarks too.&lt;/p&gt;

&lt;h4 id=&#34;parrot-panic-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f60ca9f6570a9f60-0e347dcda6994a2b-0e347dcda6994a2b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f60ca9f6570a9f60/0e347dcda6994a2b#0e347dcda6994a2b&#34;&gt;Parrot Panic&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo found that Parrot was panicking during start up. He rolled that patch back.&lt;/p&gt;

&lt;h4 id=&#34;make-testr-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0b023369b149e2ee-82ed1327511876c2-82ed1327511876c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0b023369b149e2ee/82ed1327511876c2#82ed1327511876c2&#34;&gt;&lt;code&gt;make testr&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for a make test target which would invoke Parrot twice, once to compile to PBC and once to run it. Dino Morelli provided a patch. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;trans-test-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-336fe78e94f31ad3-577a01d8ece6819c-577a01d8ece6819c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/336fe78e94f31ad3/577a01d8ece6819c#577a01d8ece6819c&#34;&gt;trans test failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks opened a ticket for some failing test long ago. Now he wondered if there was a status update. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrotcode-org-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bc41c57d2f7a4d71-0e6d70a3111e7708-0e6d70a3111e7708&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bc41c57d2f7a4d71/0e6d70a3111e7708#0e6d70a3111e7708&#34;&gt;parrotcode.org update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo noticed that parrotcode.org needed a little loving. Robert Spier provided it. He also mentioned that people could provide their own patches for it against &lt;a href=&#34;https://svn.perl.org/perl.org/docs/live/parrotcode/&#34;&gt;https://svn.perl.org/perl.org/docs/live/parrotcode/&lt;/a&gt; . Now is your chance to contribute to Parrot&amp;rsquo;s public face.&lt;/p&gt;

&lt;h4 id=&#34;runtime-parrot-library-search-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b1062fb6face9703-5c3eecc29c906898-5c3eecc29c906898&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b1062fb6face9703/5c3eecc29c906898#5c3eecc29c906898&#34;&gt;&lt;em&gt;runtime/parrot/library&lt;/em&gt; search&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Scott Duff wondered why &lt;em&gt;runtime/parrot/library&lt;/em&gt; wasn&amp;rsquo;t in Parrot&amp;rsquo;s search paths. Leo added it for &lt;code&gt;load_bytecode&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;on-the-road-to-a-tiny-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-049e4a3c48c6274d-3c20fba58ff26540-3c20fba58ff26540&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/049e4a3c48c6274d/3c20fba58ff26540#3c20fba58ff26540&#34;&gt;on the road to a tiny Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo began down the road to miniparrot, creating first a Parrot without a config and using that to generate a &lt;em&gt;config.fpmc&lt;/em&gt; for Parrot. The information provided there helps to create a larger Parrot.&lt;/p&gt;

&lt;h4 id=&#34;mmd-pmcs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1d987d4e9415d34a-12a8965b20f47ffe-12a8965b20f47ffe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1d987d4e9415d34a/12a8965b20f47ffe#12a8965b20f47ffe&#34;&gt;MMD pmcs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers posted some questions about how to work with multi subs and provided a preliminary patch. Leo provided some answers but felt the need to pin down the calling conventions before the patch.&lt;/p&gt;

&lt;h4 id=&#34;commit-bit-for-matt-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ffd93a0d7541b15e-27241f1437349aa8-27241f1437349aa8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ffd93a0d7541b15e/27241f1437349aa8#27241f1437349aa8&#34;&gt;commit bit for Matt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse received a commit bit. Congrats. Leo took the opportunity to remind himself to run &lt;code&gt;make test&lt;/code&gt; before committing.&lt;/p&gt;

&lt;h4 id=&#34;null-deref-in-real-exception-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8614b5f46c5afef5-553050aade71547f-553050aade71547f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8614b5f46c5afef5/553050aade71547f#553050aade71547f&#34;&gt;&lt;code&gt;NULL&lt;/code&gt; deref in &lt;code&gt;real_exception&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found a &lt;code&gt;NULL&lt;/code&gt; reference in &lt;code&gt;real_exception&lt;/code&gt;. Leo explained that he needed to call &lt;code&gt;Parrot_run_native&lt;/code&gt; to allocate the exception structute (and set the stack top pointer). Nicholas didn&amp;rsquo;t want to set the stack top as he was tracking some Perl refcount bugs.&lt;/p&gt;

&lt;h4 id=&#34;pge-hs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-df3de3fb2eeb410a-fe7da5fcfd60abce-fe7da5fcfd60abce&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/df3de3fb2eeb410a/fe7da5fcfd60abce#fe7da5fcfd60abce&#34;&gt;PGE::Hs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus provided a patch to make PGE escape strings as Haskell FFI expects. Patrick suggested a slightly different approach, which Autrijus took.&lt;/p&gt;

&lt;h4 id=&#34;bug-in-boolean-pmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c807b55b5b5fccae-c607085a119c0b8a-c607085a119c0b8a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c807b55b5b5fccae/c607085a119c0b8a#c607085a119c0b8a&#34;&gt;Bug in &lt;em&gt;Boolean.pmc&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;John Lenz found and fixed a bug in &lt;em&gt;Boolean.pmc&lt;/em&gt;. Leo applied the patch and Juergen Boemmels provided a test.&lt;/p&gt;

&lt;h4 id=&#34;svn-revision-number-for-releases-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-405badc06d95e7c0-cc0c17bc1121f0f7-cc0c17bc1121f0f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/405badc06d95e7c0/cc0c17bc1121f0f7#cc0c17bc1121f0f7&#34;&gt;svn revision number for releases&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty noticed that &lt;em&gt;Configure.pl&lt;/em&gt; printed &amp;ldquo;failed&amp;rdquo; for release tarballs as they don&amp;rsquo;t have &lt;em&gt;.svn&lt;/em&gt; directories. He changed it to print &amp;ldquo;done&amp;rdquo;. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;spawnw-args-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bf7035014666b2b9-2943dc9085cadbc7-2943dc9085cadbc7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bf7035014666b2b9/2943dc9085cadbc7#2943dc9085cadbc7&#34;&gt;&lt;code&gt;spawnw @args&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz provided a patch which allows &lt;code&gt;spawnw&lt;/code&gt; to take an array. Leo applied it (with a brief reminder on platform-specific ettiquette).&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-build-problem-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-734aeacca7a2525c-f5cb85bdab6dccba-f5cb85bdab6dccba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/734aeacca7a2525c/f5cb85bdab6dccba#f5cb85bdab6dccba&#34;&gt;dynclasses build problem on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay fixed a problem building dynclasses on Win32. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;basic-jit-questions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-db2456cee6742f2f-70b1228c1a52baec-70b1228c1a52baec&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/db2456cee6742f2f/70b1228c1a52baec#70b1228c1a52baec&#34;&gt;basic JIT questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas had a few basic questions about Parrot&amp;rsquo;s JIT. Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;anon-tests-and-test-fixes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-408a3cb30102dfb8-7e35467c2a796f11-7e35467c2a796f11&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/408a3cb30102dfb8/7e35467c2a796f11#7e35467c2a796f11&#34;&gt;&lt;code&gt;@ANON&lt;/code&gt; tests and test fixes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay fixed some tests and added some more. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;filepath-manipulations-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2db83ca25ad07b27-e8d004953498e264-e8d004953498e264&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2db83ca25ad07b27/e8d004953498e264#e8d004953498e264&#34;&gt;filepath manipulations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for some filepath and string manipulation support in Parrot.&lt;/p&gt;

&lt;h4 id=&#34;call-syntax-abstraction-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0d1f0af755511965-28f480998102a287-28f480998102a287&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d1f0af755511965/28f480998102a287#28f480998102a287&#34;&gt;call syntax abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a failed attempt to dewarnock himself, Leo reported his call syntax abstraction proposal.&lt;/p&gt;

&lt;h4 id=&#34;old-tags-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3e3ea01ccb0a5b8f-66c327425726a9a4-66c327425726a9a4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3e3ea01ccb0a5b8f/66c327425726a9a4#66c327425726a9a4&#34;&gt;Old Tags&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencros suggested renaming (or possibly removing) some old tag files from our CVS days. Leo was unsure about the removing option but liked the renaming one.&lt;/p&gt;

&lt;h4 id=&#34;mingw-build-problems-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0e5de5ce8d80ad28-179f66a06c9a42b1-179f66a06c9a42b1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0e5de5ce8d80ad28/179f66a06c9a42b1#179f66a06c9a42b1&#34;&gt;MinGW build problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch to fix some build problems on MinGW. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;omniscient-debugging-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b664bb995e03f74a-7e3edecbf5fa176f-7e3edecbf5fa176f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b664bb995e03f74a/7e3edecbf5fa176f#7e3edecbf5fa176f&#34;&gt;omniscient debugging in parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Bach wondered how much of Omniscient Debugging would be possibly in Parrot. Leo reasoned that someone could add it with some work. It would involve replacing all mutating vtables with special versions that store extra information to allow them to roll back.&lt;/p&gt;

&lt;h4 id=&#34;embedding-extending-interface-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a3c02b85fe7dab97-0dd2d3aa6c0c6eac-0dd2d3aa6c0c6eac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a3c02b85fe7dab97/0dd2d3aa6c0c6eac#0dd2d3aa6c0c6eac&#34;&gt;embedding/extending interface&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz wondered who else was actively working on mebedding Parrot. Nicholas Clark provided a very uncertain pointer.&lt;/p&gt;

&lt;h4 id=&#34;oo-support-in-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2f54befe55c2801b-13f88903b1e55817-13f88903b1e55817&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2f54befe55c2801b/13f88903b1e55817#13f88903b1e55817&#34;&gt;OO support in Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus explained that Parrot&amp;rsquo;s current implementation made attribute access difficult. Leo went further saying that he felt it was wrong. The consensus is that Parrot needs to allow non-absolute access to attributes, so Leo made it so.&lt;/p&gt;

&lt;h4 id=&#34;config-t-fails-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-609bfa968e2c2748-93c5d7e042370d94-93c5d7e042370d94&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/609bfa968e2c2748/93c5d7e042370d94#93c5d7e042370d94&#34;&gt;&lt;em&gt;config.t&lt;/em&gt; fails&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad found that &lt;em&gt;config.t&lt;/em&gt; fails without first doing a make clean. Leo deemed his initial solution a little too quick and too dirty.&lt;/p&gt;

&lt;h4 id=&#34;find-ops-return-for-not-found-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5042d59e5340262d-36e82c42a485fbf4-36e82c42a485fbf4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5042d59e5340262d/36e82c42a485fbf4#36e82c42a485fbf4&#34;&gt;&lt;code&gt;find&lt;/code&gt; ops return for not found&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick provided a patch which changes the return value of &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;find_not&lt;/code&gt; to the string&amp;rsquo;s length (instead of -1) if the character does not occur. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;clean-config-files-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b7edc1d5b4a79948-a195783cc90b9c74-a195783cc90b9c74&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b7edc1d5b4a79948/a195783cc90b9c74#a195783cc90b9c74&#34;&gt;clean &lt;em&gt;*_config&lt;/em&gt; files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch to clean the &lt;em&gt;_config&lt;/em&gt; files during make clean. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;mmd-for-logical-ops-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e6463d091600d139-af299cdf102930a1-af299cdf102930a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e6463d091600d139/af299cdf102930a1#af299cdf102930a1&#34;&gt;MMD for logical ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo changed the logical ops to return one of their operands as appropriate.&lt;/p&gt;

&lt;h4 id=&#34;warning-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4f9738434ec37119-16502accf94d42c3-16502accf94d42c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4f9738434ec37119/16502accf94d42c3#16502accf94d42c3&#34;&gt;warning cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch to remove a warning on Win32. Bernhard Schmalhofer applied it.&lt;/p&gt;

&lt;h4 id=&#34;namespace-updates-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8fbcda0e4fea46bc-989bedc1fe123bba-989bedc1fe123bba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8fbcda0e4fea46bc/989bedc1fe123bba#989bedc1fe123bba&#34;&gt;Namespace updates?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce wondered whether any resolution with respect to namespaces had come about. Leo told him not much.&lt;/p&gt;

&lt;h4 id=&#34;rules-questions-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1987b48227865162-dc17602c62d57779-dc17602c62d57779&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1987b48227865162/dc17602c62d57779#dc17602c62d57779&#34;&gt;rules questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli was trying to add some unit tests when he ran into questions. Patrick provided some answers but suggested further conversation move to p6l, which it did.&lt;/p&gt;

&lt;h4 id=&#34;md5-library-clean-ups-and-speed-ups-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-84537d46ad68aec8-7c7b42dbc44b14eb-7c7b42dbc44b14eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/84537d46ad68aec8/7c7b42dbc44b14eb#7c7b42dbc44b14eb&#34;&gt;MD5 library clean ups and speed ups&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross posted some updates to the MD5 library. This led to a few rounds of speading it up and comparing its speed with various other MD5 libraries. The final result is: slower than C but MUCH faster than pure Perl.&lt;/p&gt;

&lt;h4 id=&#34;disassemble-segfaults-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d59c059249517f20-61b3155e3eaff442-61b3155e3eaff442&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d59c059249517f20/61b3155e3eaff442#61b3155e3eaff442&#34;&gt;disassemble segfaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers pointed out that disassemble was sefaulting on some byte code. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;s-internal-exception-real-1-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2d8e4d3646a48533-373a611f6b34a423-373a611f6b34a423&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2d8e4d3646a48533/373a611f6b34a423#373a611f6b34a423&#34;&gt;s/internal (exception)/real \1/&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch which changed some internal exceptions to real ones. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;failing-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fd25e1240fc31a36-c6ff787f1079c944-c6ff787f1079c944&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fd25e1240fc31a36/c6ff787f1079c944#c6ff787f1079c944&#34;&gt;failing tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce reported some failing tests on Mac OS X. Leo fixed them.&lt;/p&gt;

&lt;h4 id=&#34;small-typo-in-pbc-compat-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5f95d1a73976ef8f-a73dd18bfb03a1ba-a73dd18bfb03a1ba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5f95d1a73976ef8f/a73dd18bfb03a1ba#a73dd18bfb03a1ba&#34;&gt;small typo in &lt;em&gt;PBC_COMPAT&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Uwe Voelker provided a patch fixing a typo in &lt;em&gt;PBC_COMPAT&lt;/em&gt;, which chromatic applied. He also noticed that &lt;em&gt;p6rules/*.t&lt;/em&gt; did not have plans. Patrick welcomes all updates to PGE tests.&lt;/p&gt;

&lt;h4 id=&#34;t-p6rules-ws-t-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-43fbda5c0bca516d-e25f37048470ebac-e25f37048470ebac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/43fbda5c0bca516d/e25f37048470ebac#e25f37048470ebac&#34;&gt;&lt;em&gt;t/p6rules/ws.t&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dino Morelli added some tests for p6rules. Patrick applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;index-up-bug-in-pge-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b8ff7a2c541316df-46f720060661402f-46f720060661402f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b8ff7a2c541316df/46f720060661402f#46f720060661402f&#34;&gt;index up bug in PGE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay found a bug in PGE involving escaping sequences strangely. Leo tracked it down, and Patrick fixed it.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-python-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3ac1410a897a65a7-fc7d16edadaba47e-fc7d16edadaba47e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3ac1410a897a65a7/fc7d16edadaba47e#fc7d16edadaba47e&#34;&gt;Parrot on Python&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew wondered what the state of Python on Parrot was. Sam Ruby and Michal Wallace provided updates. Hopefully it will take off again soon.&lt;/p&gt;

&lt;h4 id=&#34;paths-with-spaces-need-quoting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-713f7dac40d3e360-60c1fff22857df30-60c1fff22857df30&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/713f7dac40d3e360/60c1fff22857df30#60c1fff22857df30&#34;&gt;paths with spaces need quoting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke provided a patch to quote some paths that needed it in dynclasses. chromatic wondered if that would break with paths that already contain quotes.&lt;/p&gt;

&lt;h4 id=&#34;cvsignore&#34;&gt;&lt;em&gt;.cvsignore&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Juergen Boemmels noticed that the SVN repository still contains some &lt;em&gt;.cvsignore&lt;/em&gt; files. He suggested removing them, but a few things need to be updated to the svn world before that can happen. Bernhard Schmalhofer made it happen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6521054da9c7175e/35b62bf9ee9a9d1a#35b62bf9ee9a9d1a&#34;&gt;request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d922b0043944172c/b7f5598c02bc4d98#b7f5598c02bc4d98&#34;&gt;resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;null-pointer-deref-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-135f3c5e3b6d97a1-1f5a2ab4fd84866a-1f5a2ab4fd84866a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/135f3c5e3b6d97a1/1f5a2ab4fd84866a#1f5a2ab4fd84866a&#34;&gt;&lt;code&gt;NULL&lt;/code&gt; pointer deref&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Taylor found a &lt;code&gt;NULL&lt;/code&gt; pointer problem in Parrot. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;parrot-embedded-in-xslt-2-0-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-30165dd23e622cc6-c4c507469c556412-c4c507469c556412&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/30165dd23e622cc6/c4c507469c556412#c4c507469c556412&#34;&gt;Parrot embedded in XSLT 2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Colin Paul Adams wondered how he could get information back from an embedded parrot. Autrijus pointed him to &lt;code&gt;Parrot_call_sub&lt;/code&gt; with a signature of &lt;code&gt;SS&lt;/code&gt; (takes a string and returns a string).&lt;/p&gt;

&lt;h4 id=&#34;thread-detatch-hangs-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3accff3812d6da9f-036422b041a4fe07-036422b041a4fe07&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3accff3812d6da9f/036422b041a4fe07#036422b041a4fe07&#34;&gt;thread detatch hangs on win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay noticed that thread detatch was hanging on Win32. He provided a patch to skip it so that other tests could fail in its place. Leo applied the patch.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;semantics-of-coroutines-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ebb2304e24db640c-ae65c8bd8165b831-ae65c8bd8165b831&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ebb2304e24db640c/ae65c8bd8165b831#ae65c8bd8165b831&#34;&gt;Semantics of Coroutines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered whether coroutines were invokable with new arguments on successive invocations. Some pointed out that allowing the arguments to change is a more powerful model, but I didn&amp;rsquo;t see anything definitive.&lt;/p&gt;

&lt;h4 id=&#34;function-composition-operator-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-428c785d48667618-2ff554091f0fb10e-2ff554091f0fb10e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/428c785d48667618/2ff554091f0fb10e#2ff554091f0fb10e&#34;&gt;function composition operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi wondered if there was a function composition binary operator. While one does not exist, it&amp;rsquo;s addable (as Ingo Blechschmidt demonstrated much later).&lt;/p&gt;

&lt;h4 id=&#34;initialization-of-state-vars-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ded38746a879d57d-8e4420427d51b692-8e4420427d51b692&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ded38746a879d57d/8e4420427d51b692#8e4420427d51b692&#34;&gt;initialization of state vars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how state vars and parentheses would interact. Larry replied that his examples were probably correct.&lt;/p&gt;

&lt;h4 id=&#34;automap-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3d403aa8ff6e493e-ac666ce340cf819b-ac666ce340cf819b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3d403aa8ff6e493e/ac666ce340cf819b#ac666ce340cf819b&#34;&gt;&lt;code&gt;==&amp;gt;&lt;/code&gt; automap?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman wondered if a single arg sub or block would automatically map when used on the sharp side of a pipe. Luke Palmer thought this might be too much dwimmery.&lt;/p&gt;

&lt;h4 id=&#34;refactoring-ide-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89fb02214da27797-8075562d8daca262-8075562d8daca262&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89fb02214da27797/8075562d8daca262#8075562d8daca262&#34;&gt;refactoring IDE&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;J Matisse Enzer wondered if Perl 6 would have strong IDE tools like refactoring supported or automated syntax completion. Larry explained that he would like to make it possible for Perl 6 to support these things &amp;ldquo;just as Perl 1 built in all the system interfaces&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;reduce-precedence-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-31098c67d7610b76-a80524d587239256-a80524d587239256&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/31098c67d7610b76/a80524d587239256#a80524d587239256&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; precedence&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what the precedence for the &lt;code&gt;reduce&lt;/code&gt; metaoperator was. Luke Palmer said &amp;ldquo;listop&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;piping-into-random-things-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-76e3502dbafa5451-3fa6c4d58fe52fd6-3fa6c4d58fe52fd6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/76e3502dbafa5451/3fa6c4d58fe52fd6#3fa6c4d58fe52fd6&#34;&gt;piping into random things&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered about piping into various things such as arrays, scalars, hashes, and filehandles. Larry gave one of his characteristically speculative answers.&lt;/p&gt;

&lt;h4 id=&#34;that-s-why-they-call-me-mister-bitterness-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bc1df31bfa2b0ac1-ffee56c03be536be-ffee56c03be536be&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bc1df31bfa2b0ac1/ffee56c03be536be#ffee56c03be536be&#34;&gt;That&amp;rsquo;s why they call me Mister Bitterness&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what &amp;ldquo;complain bitterly&amp;rdquo; meant in the context of the yada operator. Larry explained that &lt;code&gt;...&lt;/code&gt; would fail, &lt;code&gt;???&lt;/code&gt; would warn, and &lt;code&gt;!!!&lt;/code&gt; would die.&lt;/p&gt;

&lt;h4 id=&#34;isa-specifics-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5176b3ff12be2364-ac1d8dceea604062-ac1d8dceea604062&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5176b3ff12be2364/ac1d8dceea604062#ac1d8dceea604062&#34;&gt;&lt;code&gt;isa&lt;/code&gt; specifics&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered how &lt;code&gt;isa&lt;/code&gt; would act when called with junctions, nothing, classes, or instances. Larry explained that it would act intelligently by autothreading, returning a list of all options, returning a bool, or something I didn&amp;rsquo;t follow.&lt;/p&gt;

&lt;h4 id=&#34;available-operators-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-affcbfe2b37386a9-d0e890171b91a4ab-d0e890171b91a4ab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/affcbfe2b37386a9/d0e890171b91a4ab#d0e890171b91a4ab&#34;&gt;available operators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd created a somewhat lengthy list of available operators, hoping to inspire someone to come up with a good operator for block labels. This led to a very meandering thread.&lt;/p&gt;

&lt;h4 id=&#34;reduce-meta-operator-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1ed77c281581466c-cc032c3414c33e07-cc032c3414c33e07&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1ed77c281581466c/cc032c3414c33e07#cc032c3414c33e07&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; meta operator&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some of you might be confused by my earlier meantion of a &lt;code&gt;reduce&lt;/code&gt; metaoperator. Larry introduced one. Much debate ensued, but Larry seems fairly set on it.&lt;/p&gt;

&lt;h4 id=&#34;override-built-ins-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ef4af74285e64feb-7f31dec5a5de054a-7f31dec5a5de054a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ef4af74285e64feb/7f31dec5a5de054a#7f31dec5a5de054a&#34;&gt;override built ins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige wondered if he would be able to redefine built in functions such as &lt;code&gt;read&lt;/code&gt; in Perl 6. Larry explained that Perl 6 will give you so much rope that you could hang yourself from several trees while blowing off your own foot with it.&lt;/p&gt;

&lt;h4 id=&#34;opening-stdout-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-be554c423ebff952-0d073403e2d9e2ab-0d073403e2d9e2ab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/be554c423ebff952/0d073403e2d9e2ab#0d073403e2d9e2ab&#34;&gt;opening stdout&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wondered how to open stdout or a file named &amp;ldquo;-&amp;rdquo;. Larry explained that &lt;code&gt;io()&lt;/code&gt; would have the dwimmy parts like opening stdout, while open would not try and dwim.&lt;/p&gt;

&lt;h4 id=&#34;adverbial-blocks-explained-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-44ccdfc251bb3e15-cb47e226098267a2-cb47e226098267a2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/44ccdfc251bb3e15/cb47e226098267a2#cb47e226098267a2&#34;&gt;adverbial blocks explained&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Terrence Brannon stumbled upon the phrase &amp;ldquo;adverbial blocks&amp;rdquo; but didn&amp;rsquo;t understand what it meant. Luke Palmer provided a very clear and cogent explanation.&lt;/p&gt;

&lt;h4 id=&#34;circular-dereferencing-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7f64391fbe1526a5-bdda0e7a23279fcc-bdda0e7a23279fcc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7f64391fbe1526a5/bdda0e7a23279fcc#bdda0e7a23279fcc&#34;&gt;circular dereferencing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noticed that the autodereferencing of references would cause an infinite loop for circular refernce. Larry recanted and decided that the full on autodrill down was not as cool as he had initially thought, but he did warn us that next week he might think it was even cooler.&lt;/p&gt;

&lt;h4 id=&#34;scoping-of-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-10906cbd3833dfe8-c17c3cb539812c71-c17c3cb539812c71&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/10906cbd3833dfe8/c17c3cb539812c71#c17c3cb539812c71&#34;&gt;scoping of &lt;code&gt;$/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what sort of scope &lt;code&gt;$/&lt;/code&gt; would have. Luke Palmer replied that it would be lexical just like Perl 5. Larry corrected him pointing out that it would actually be lexical, unlike Perl 5.&lt;/p&gt;

&lt;h4 id=&#34;binding-subs-return-values-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9a7d2a6903d58234-133ea4e1aee20e19-133ea4e1aee20e19&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9a7d2a6903d58234/133ea4e1aee20e19#133ea4e1aee20e19&#34;&gt;binding subs&amp;rsquo; return values&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered what binding of subs&amp;rsquo; return values would do by default. Juerd answered that it would allow modification only for subs declared as lvalues.&lt;/p&gt;

&lt;h4 id=&#34;use-fatal-no-fatal-exceptions-and-undef-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0bc2bfd53fb240e0-c961990fd9b8090f-c961990fd9b8090f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0bc2bfd53fb240e0/c961990fd9b8090f#c961990fd9b8090f&#34;&gt;&lt;code&gt;use fatal&lt;/code&gt;, &lt;code&gt;no fatal&lt;/code&gt;, exceptions, and &lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wondered how various scopes fatality levels would interact. Luke Palmer explained that you need to do 360s on the control pad while holding block. He also provided some thorough examples.&lt;/p&gt;

&lt;h4 id=&#34;xml-grammar-in-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-76d4ea76b181e160-e99e0455a5a65b9f-e99e0455a5a65b9f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/76d4ea76b181e160/e99e0455a5a65b9f#e99e0455a5a65b9f&#34;&gt;XML grammar in Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A while back Juerd wrote a Perl 5 script to transform the EBNF spec of XML into Perl 6 rules. Now that Pugs might be able to support it, he suggests that it would be a good project for a brave soul. No takers have yet appeared.&lt;/p&gt;

&lt;h4 id=&#34;mailing-list-indexing-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6561aa2cc9862ea7-17956d9845658363-17956d9845658363&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6561aa2cc9862ea7/17956d9845658363#17956d9845658363&#34;&gt;mailing list indexing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman posted a link to his initial version of an annotated version of the mailing list. He asked for comments, but Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;prefix-adverbs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-68f2f37ecdf43bc3-759611c278caea0d-759611c278caea0d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/68f2f37ecdf43bc3/759611c278caea0d#759611c278caea0d&#34;&gt;prefix adverbs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Someone who posted to Google Groups (receiving the unfortunate name mangling of &lt;code&gt;arcadi.sheh...@gmail.com&lt;/code&gt;) asked if it made sense to write &lt;code&gt;$a = stuff @foo, how =&amp;gt; &#39;scrambled&#39;, 1, 2, 3;&lt;/code&gt; as &lt;code&gt;$a = :&amp;gt;how(&#39;scrambled&#39;) stuff @foo, 1, 2, 3;&lt;/code&gt; or some such. Sadly, we will never know.&lt;/p&gt;

&lt;h4 id=&#34;semantics-of-split-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ad8f212972168670-769c309f02b8daa5-769c309f02b8daa5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ad8f212972168670/769c309f02b8daa5#769c309f02b8daa5&#34;&gt;semantics of &lt;code&gt;split&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked if he had Pugs splitting correctly. It wasn&amp;rsquo;t, but it is now.&lt;/p&gt;

&lt;h4 id=&#34;s29-punt-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6a2d3da3e1c1d25c-cf637256c360f285-cf637256c360f285&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6a2d3da3e1c1d25c/cf637256c360f285#cf637256c360f285&#34;&gt;S29: punt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams announced that he found the real world intruding too much and was going to have to leave off his work on S29. Sam Vilain, Aaron Sherman, and Max Maischein all volunteered to take up the effort.&lt;/p&gt;

&lt;h4 id=&#34;chomp-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4397075a85638757-e8f9bc28bf62d8d9-e8f9bc28bf62d8d9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4397075a85638757/e8f9bc28bf62d8d9#e8f9bc28bf62d8d9&#34;&gt;chomp!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wondered exactly what &lt;code&gt;is chomped&lt;/code&gt; did. Larry Wall explained exactly what &lt;code&gt;is chomped&lt;/code&gt; does.&lt;/p&gt;

&lt;h4 id=&#34;character-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8d0b000a2006c805-4ad613ff400c8219-4ad613ff400c8219&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8d0b000a2006c805/4ad613ff400c8219#4ad613ff400c8219&#34;&gt;character classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick, based on his experience with PGE, suggested a slightly new syntax for character classes in Perl 6. Larry liked the syntax and went on to muse about other unresolved issues involving character classes.&lt;/p&gt;

&lt;h4 id=&#34;numification-of-match-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1223c3f11e0a6444-e7c68ffcd90eab2e-e7c68ffcd90eab2e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1223c3f11e0a6444/e7c68ffcd90eab2e#e7c68ffcd90eab2e&#34;&gt;Numification of match objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus noticed that numification of match objects made strings of digits numify to 1 (i.e., true). He didn&amp;rsquo;t like this. Actually no one did, so it has changed to numify as one would expect. After all, it can numify to &lt;code&gt;0 but true&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;traits-and-properties-api-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-16823aec5ef20ced-cec5b69464b40e22-cec5b69464b40e22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/16823aec5ef20ced/cec5b69464b40e22#cec5b69464b40e22&#34;&gt;traits and properties API&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stéphane Payrard wondered when and how traits would interact with properties. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon and Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;single-element-lists-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-89d14842806995e3-26d0e71ecf3a2add-26d0e71ecf3a2add&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/89d14842806995e3/26d0e71ecf3a2add#26d0e71ecf3a2add&#34;&gt;single element lists&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Scott Duff wondered what &lt;code&gt;(1)[0]&lt;/code&gt; would do. Larry though that we would have to specialize &lt;code&gt;()[]&lt;/code&gt; to parse as &lt;code&gt;(,)[]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;void-type-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-10e17e64680febd3-b313716c6e95b3a8-b313716c6e95b3a8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/10e17e64680febd3/b313716c6e95b3a8#b313716c6e95b3a8&#34;&gt;Void type?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß, Rod Adams, and Autrijus speculated about ways to deal with a Void type. Nothing definitive came out of it though.&lt;/p&gt;

&lt;h4 id=&#34;uniquely-identifying-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-09b2db1a9e7db5f9-6077664d96af973e-6077664d96af973e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/09b2db1a9e7db5f9/6077664d96af973e#6077664d96af973e&#34;&gt;uniquely identifying objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered if there was a way to uniquely identify objects in Perl 6. Larry pointed him to the &lt;code&gt;.id&lt;/code&gt; and the associated &lt;code&gt;=:=&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4 id=&#34;begin-and-lexicals-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-49e7c4a0ea58c70e-ff5dc221a156fbdf-ff5dc221a156fbdf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/49e7c4a0ea58c70e/ff5dc221a156fbdf#ff5dc221a156fbdf&#34;&gt;&lt;code&gt;BEGIN&lt;/code&gt; and lexicals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Benjamin Smith wondered if &lt;code&gt;BEGIN&lt;/code&gt; could modify lexicals that don&amp;rsquo;t really exist yet. Larry expressed the opinion that one should be able to modify compiler state in &lt;code&gt;BEGIN&lt;/code&gt; blocks; however, he did not answer the question of what Benjamin&amp;rsquo;s example does.&lt;/p&gt;

&lt;h4 id=&#34;vs-in-rules-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-99f41fce83f47882-0baafe36b1533bac-0baafe36b1533bac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/99f41fce83f47882/0baafe36b1533bac#0baafe36b1533bac&#34;&gt;&lt;code&gt;::&lt;/code&gt; vs &lt;code&gt;:::&lt;/code&gt; in rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick confused many people when he asked about the difference between &lt;code&gt;::&lt;/code&gt; and &lt;code&gt;:::&lt;/code&gt; at the top level of rules. The answer seems to be that &lt;code&gt;:::&lt;/code&gt; will fail the entire match while &lt;code&gt;::&lt;/code&gt; will simply fail it at that offset in the string on which it is attempting to match.&lt;/p&gt;

&lt;h4 id=&#34;negatives-of-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-acba3cb531632d51-81a1eeddf0fe0110-81a1eeddf0fe0110&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/acba3cb531632d51/81a1eeddf0fe0110#81a1eeddf0fe0110&#34;&gt;negatives of junctions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry noticed that &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;!~&lt;/code&gt; will confuse English speakers when applied to junctions. Luke noticed that defining &lt;code&gt;$a != $b&lt;/code&gt; as &lt;code&gt;!( $a == $b )&lt;/code&gt; works, averting tragedy.&lt;/p&gt;

&lt;h4 id=&#34;boxed-types-from-builtins-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-269675add9b4e867-bfd9ff194b555aed-bfd9ff194b555aed&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/269675add9b4e867/bfd9ff194b555aed#bfd9ff194b555aed&#34;&gt;boxed types from builtins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman worried that many built in functions return boxed types which could cause a big speed hit. Rod Adams explained that this was necessary but optimizations would be made available.&lt;/p&gt;

&lt;h4 id=&#34;method-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5325e618c8a13d53-b3e9bc09565e4d0c-b3e9bc09565e4d0c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5325e618c8a13d53/b3e9bc09565e4d0c#b3e9bc09565e4d0c&#34;&gt;&lt;code&gt;./method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd suggested using &lt;code&gt;./method&lt;/code&gt; to mean &lt;code&gt;$?SELF.method&lt;/code&gt; (in an attempt to solve the long standing debate of &lt;code&gt;$?SELF.method&lt;/code&gt; vs &lt;code&gt;$_.method&lt;/code&gt;). Much discussion ensued although the general response seems favorable.&lt;/p&gt;

&lt;h4 id=&#34;operators-everywhere-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-59c945653fd23792-3f82db7c6ffaa285-3f82db7c6ffaa285&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/59c945653fd23792/3f82db7c6ffaa285#3f82db7c6ffaa285&#34;&gt;operators everywhere&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon noted that there seemed to be an extremely large number of operators. He expressed concern, because he had believed that P6 was going to have a small core with modules. Larry explained that most of these operators were the combination of a small set of operators and meta operators in a combinatorially explosive way, giving the wonderfully lucid example of &lt;code&gt;[&amp;gt;&amp;gt;+^=&amp;lt;&amp;lt;]&lt;/code&gt;. Much discussion ensued.&lt;/p&gt;

&lt;h4 id=&#34;build-and-submethods&#34;&gt;&lt;code&gt;BUILD&lt;/code&gt; and submethods&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wanted to be sure that all appropriate submethods would be called when they should and that only the correct one would be called when they shouldn&amp;rsquo;t all be. Larry answered that it did work as he expected.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bc0db43280956c54/e9174e5538ded4a3#e9174e5538ded4a3&#34;&gt;question about subclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/dcb6befb3e298ed6/f1afbb4dcfb70859#f1afbb4dcfb70859&#34;&gt;same question but with roles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;vs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f29e96d82fe0cf63-b6b426ef593bb255-b6b426ef593bb255&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f29e96d82fe0cf63/b6b426ef593bb255#b6b426ef593bb255&#34;&gt;&lt;code&gt;$.&lt;/code&gt; vs &lt;code&gt;$:&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer was having trouble understanding the difference between &lt;code&gt;$.&lt;/code&gt; and &lt;code&gt;$:&lt;/code&gt;. Aaron Sherman prointed out a few differences according to A12.&lt;/p&gt;

&lt;h4 id=&#34;not-4-3-2-1-0-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-37b0c3369432ae1b-497ff7b0b8174f0f-497ff7b0b8174f0f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/37b0c3369432ae1b/497ff7b0b8174f0f#497ff7b0b8174f0f&#34;&gt;&lt;code&gt;not 4,3,2,1,0;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered what the signature for &lt;code&gt;not&lt;/code&gt; was in Perl 6. Larry explained that unlike Perl 5, Perl 6&amp;rsquo;s &lt;code&gt;not&lt;/code&gt; function should act like &lt;code&gt;!&amp;lt;&amp;lt;[4,3,2,1,0]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;multiple-colons-in-mmd-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1c07dcb50dcca284-e3ba8ab5be76d706-e3ba8ab5be76d706&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1c07dcb50dcca284/e3ba8ab5be76d706#e3ba8ab5be76d706&#34;&gt;multiple colons in MMD&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer caught Autrijus off guard when he pointed out that multis could have multiple levels of &lt;code&gt;:&lt;/code&gt;, each of which is less important than the last. Larry surmised that they might not have documented this hard enough.&lt;/p&gt;

&lt;h4 id=&#34;nested-captures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7ee563a776c4282d-f6d7519e8ce9a504-f6d7519e8ce9a504&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7ee563a776c4282d/f6d7519e8ce9a504#f6d7519e8ce9a504&#34;&gt;Nested Captures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Carl Franks started a very long thread when he noted that nested captures caused extra layers in the match array rather than counting parens like Perl 5. This led to discussion of 0 vs 1 indexing. Discussion ensued, with the resulting decision that &lt;code&gt;$0 == $/[0]&lt;/code&gt;. There was much rejoicing.&lt;/p&gt;

&lt;h4 id=&#34;1-28-2-56-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a809c4f79d842213-832fa3e105a673c6-832fa3e105a673c6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a809c4f79d842213/832fa3e105a673c6#832fa3e105a673c6&#34;&gt;&lt;code&gt;&#39;1.28&#39; * &#39;2.56&#39;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered what path &lt;code&gt;&#39;1.28&#39; * &#39;2.56&#39;&lt;/code&gt; should take to arrive at 3.2768. Larry told him that infix * used prefix + to numify non-Num args.&lt;/p&gt;

&lt;h4 id=&#34;methods-from-roles-vs-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c988130fd5e548a3-66c00f93abebc818-66c00f93abebc818&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c988130fd5e548a3/66c00f93abebc818#66c00f93abebc818&#34;&gt;methods from roles vs classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wants to lazily load a role but only the first time it is necessary. Luke Palmer assured him that his example would work correctly.&lt;/p&gt;

&lt;h4 id=&#34;currying-and-defaults-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bbdb12a0d4615470-a3a24b1502bda023-a3a24b1502bda023&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bbdb12a0d4615470/a3a24b1502bda023#a3a24b1502bda023&#34;&gt;currying and defaults&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman, in his efforts to get up to speed on S29, wondered how currying would interact with default values. Larry explained that default values would not be bound until the invocation of the curried function.&lt;/p&gt;

&lt;h4 id=&#34;precedence-of-custom-infix-ops-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-82117b977c93b143-639f21ba2587a6f9-639f21ba2587a6f9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/82117b977c93b143/639f21ba2587a6f9#639f21ba2587a6f9&#34;&gt;precedence of custom infix ops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how to define the precedence of custon infix ops. Luke Palmer pointed out the looser, tighter, and equiv traits (by default it is &lt;code&gt;equiv( &amp;amp;infix:&amp;lt;+&amp;gt; ) )&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, April 26 - May 3, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050505.html/</link>
      <pubDate>Thu, 05 May 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050505.html/</guid>
      <description>

&lt;p&gt;All,&lt;/p&gt;

&lt;p&gt;Welcome to another week&amp;rsquo;s summary. This week I shall endeavor not to delete my summary accidentally or destroy the world. Here we go with p6c.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;implicit-on-for-loops-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-69683b9aa7be224e-04e2d9f3c1e0a485-04e2d9f3c1e0a485&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/69683b9aa7be224e/04e2d9f3c1e0a485#04e2d9f3c1e0a485&#34;&gt;Implicit &lt;code&gt;$_&lt;/code&gt; on &lt;code&gt;for&lt;/code&gt; Loops&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kiran Kumar found a bug in Pugs involving &lt;code&gt;for&lt;/code&gt; loops which use &lt;code&gt;$_&lt;/code&gt; but don&amp;rsquo;t iterate over it. Aaron Sherman and Luke Palmer confirmed the bug. There&amp;rsquo;s no word as to its final status, but given the rate of development of Pugs&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;pugs-darcs-trouble-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-7ba880a18e930ef0-eb57bb2f9e835725-eb57bb2f9e835725&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7ba880a18e930ef0/eb57bb2f9e835725#eb57bb2f9e835725&#34;&gt;Pugs Darcs Trouble&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Glenn Ehrlich noticed that Pugs&amp;rsquo; Darcs repository wasn&amp;rsquo;t updating. Sam Vilain explained that occasionally a daemon needed kicking.&lt;/p&gt;

&lt;h4 id=&#34;memory-game-v0-2-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-27c9aa32b07143ac-d66c656ee7ac6104-d66c656ee7ac6104&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/27c9aa32b07143ac/d66c656ee7ac6104#d66c656ee7ac6104&#34;&gt;Memory Game v0.2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András announced the release of the latest version of Memory. He also put out a call for 85x75 pixel photos for the next version.&lt;/p&gt;

&lt;h4 id=&#34;haddock-for-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-3b3b13aba5edc94a-71bcde78a82cf6e4-71bcde78a82cf6e4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/3b3b13aba5edc94a/71bcde78a82cf6e4#71bcde78a82cf6e4&#34;&gt;Haddock for Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stuart Cook decided that the easiest way for him to understand Pugs internals was to provide better documentation. To that end he started working with &lt;a href=&#34;http://haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt; to automatically generate cross-linked documentation for Pugs. He even met with some success.&lt;/p&gt;

&lt;h4 id=&#34;is-export-trait-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-666781ac15240dd4-f454e750eba3d680-f454e750eba3d680&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/666781ac15240dd4/f454e750eba3d680#f454e750eba3d680&#34;&gt;&lt;code&gt;is export&lt;/code&gt; Trait&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Garrett Rooney wondered why the &lt;code&gt;is export&lt;/code&gt; trait appeared to do nothing in Pugs. Stevan Little explained that it was just a place holder which, though it parses, does nothing semantically yet.&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-2-2-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-c8cfa416b5e7a7c7-c8cfa416b5e7a7c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7&#34;&gt;Pugs 6.2.2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus proudly announced the release of Pugs 6.2.2. It features many, many changes. High on the list is a bunch of speed ups, and also thread-safe, deadlock-free internal storage.&lt;/p&gt;

&lt;h4 id=&#34;pugs-on-cygwin-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-1972b001c76c652c-c8cfa416b5e7a7c7-c8cfa416b5e7a7c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1972b001c76c652c/c8cfa416b5e7a7c7#c8cfa416b5e7a7c7&#34;&gt;Pugs on Cygwin&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rob Kinyon noticed that Pugs had trouble on Cygwin. He has made some headway rectifying the situation, although work remains to be done.&lt;/p&gt;

&lt;h4 id=&#34;pugs-todo-model-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-9483fd2a5aec22e9-54c6a4194d06bb4d-54c6a4194d06bb4d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/9483fd2a5aec22e9/54c6a4194d06bb4d#54c6a4194d06bb4d&#34;&gt;Pugs TODO Model&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan has put some more thought into the TODO model for Pugs. His latest suggestion, annotating TODO tests with a flag indicating why they are not passing, seems a little less hackish then the last one and received general support.&lt;/p&gt;

&lt;h4 id=&#34;parrot-hiding-inside-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b671d5f9c4af29f7-21ab762083e523b7-21ab762083e523b7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b671d5f9c4af29f7/21ab762083e523b7#21ab762083e523b7&#34;&gt;Parrot Hiding Inside Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wanted to embed the newly released PGE, which is PIR code that runs on Parrot. He decided to embed Parrot into Pugs. He also posted an interesting link to &lt;a href=&#34;http://repetae.net/john/computer/jhc/jhc.html&#34;&gt;JHC&lt;/a&gt; as a possible bootstrap solution.&lt;/p&gt;

&lt;h4 id=&#34;new-pge-released-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-013c11d7818c06ce-989a407cc3427641-989a407cc3427641&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/013c11d7818c06ce/989a407cc3427641#989a407cc3427641&#34;&gt;New PGE Released&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Maybe I should have mentioned this first. Patrick R. Michaud released a new version of the Parrot Grammar Engine. It is entirely PIR code and generates PIR code. It has many features but not enough tests&amp;hellip; &amp;lt;cough&amp;gt;hint&amp;lt;/cough&amp;gt;.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;monthly-release-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c84185258e7e0d7b-f7f3543949eda594-f7f3543949eda594&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c84185258e7e0d7b/f7f3543949eda594#f7f3543949eda594&#34;&gt;Monthly Release?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jared Rhine wondered if the monthly releases included April. Chip announced that April&amp;rsquo;s release would be slushier then most, but would start on the fourth.&lt;/p&gt;

&lt;h4 id=&#34;t-op-debuginfo-t-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b03818f8c24a714d-bc38b1b8f82072c2-bc38b1b8f82072c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b03818f8c24a714d/bc38b1b8f82072c2#bc38b1b8f82072c2&#34;&gt;&lt;em&gt;t/op/debuginfo.t&lt;/em&gt; Failure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad noticed a failure in &lt;code&gt;debuginfo&lt;/code&gt;. Leo pointed out that it was an issue of flushing output handles. Francois provided a patch (well, actually two patches). Warnock applies to the second.&lt;/p&gt;

&lt;h4 id=&#34;partcl-happy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-59555e75b86096e7-417caf2641040a92-417caf2641040a92&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/59555e75b86096e7/417caf2641040a92#417caf2641040a92&#34;&gt;ParTcl Happy?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda thought that ParTcl&amp;rsquo;s GC bugs had finally gone away. Leo burst his bubble. Apparently these GC bugs can disappear and reappear according to sunspot activity.&lt;/p&gt;

&lt;h4 id=&#34;s1zzegfault-in-load-bytecode-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-28bb0c982dc96158-4bb715005cd477ff-4bb715005cd477ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/28bb0c982dc96158/4bb715005cd477ff#4bb715005cd477ff&#34;&gt;S1zzegfault in &lt;code&gt;load_bytecode&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross submitted a patch fixing a segfault in &lt;code&gt;load_bytecode&lt;/code&gt;. Jens pointed out that it should use &lt;code&gt;real_exception&lt;/code&gt; instead of &lt;code&gt;internal_exception&lt;/code&gt;. chromatic offered to write the test. There is no official committed message though.&lt;/p&gt;

&lt;h4 id=&#34;large-packfile-tinker-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f66e120a77b7dea1-a76a1532c9d73a71-a76a1532c9d73a71&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f66e120a77b7dea1/a76a1532c9d73a71#a76a1532c9d73a71&#34;&gt;Large &lt;code&gt;PackFile&lt;/code&gt; Tinker&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo implemented a change in the interpreter &lt;code&gt;PackFile&lt;/code&gt; structure which has been under discussion for a long time. Unfortunately, it has the potential to break a lot of JIT stuff. Tests and fixes would be wonderful.&lt;/p&gt;

&lt;h4 id=&#34;pmc-inheritance-issue-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3355689f7d93ef77-efa3de4e8a1773d0-efa3de4e8a1773d0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3355689f7d93ef77/efa3de4e8a1773d0#efa3de4e8a1773d0&#34;&gt;PMC Inheritance Issue&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark had some trouble with his Perl5 PMCs. Later, he posted a &amp;ldquo;mea culpa&amp;rdquo; email, but Leo provided some useful pointers anyway.&lt;/p&gt;

&lt;h4 id=&#34;rt-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e5f150409499a4b9-e90b1895bf492ec0-e90b1895bf492ec0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e5f150409499a4b9/e90b1895bf492ec0#e90b1895bf492ec0&#34;&gt;RT Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer cleaned out an old ticket from RT.&lt;/p&gt;

&lt;h4 id=&#34;rfc-assign-px-py-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8e7c77c1e58a7a63-7521b02224111fd6-7521b02224111fd6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8e7c77c1e58a7a63/7521b02224111fd6#7521b02224111fd6&#34;&gt;RFC &lt;code&gt;assign Px, Py&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some time ago, Leo requested comments on the semantics of &lt;code&gt;assign&lt;/code&gt;. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon tried to de-Warnock the thread with his support. He also suggested a &lt;code&gt;clone&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4 id=&#34;null-in-real-exception-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8614b5f46c5afef5-9127affc3fb8db0f-9127affc3fb8db0f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8614b5f46c5afef5/9127affc3fb8db0f#9127affc3fb8db0f&#34;&gt;NULL in &lt;code&gt;real_exception&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark struggled with a NULL pointer deref in &lt;code&gt;real_exception&lt;/code&gt;. Leo pointed him toward the correct approach.&lt;/p&gt;

&lt;h4 id=&#34;unary-operator-overhaul-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0ada304f7b12b3b9-78369daf6a33d1ec-78369daf6a33d1ec&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0ada304f7b12b3b9/78369daf6a33d1ec#78369daf6a33d1ec&#34;&gt;Unary Operator Overhaul&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Having finished overhauling the infix operators, Leo set to work updating the unary operators to provide variants which allocate their results.&lt;/p&gt;

&lt;h4 id=&#34;die-die-die-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-726a70c07d030bc9-b5218dafc585575b-b5218dafc585575b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/726a70c07d030bc9/b5218dafc585575b#b5218dafc585575b&#34;&gt;Die &lt;code&gt;die&lt;/code&gt;, die!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he was removing the &lt;code&gt;die&lt;/code&gt; opcode and adding a Bruce Willis opcode in its place. Unlike Mr. Willis, the &lt;code&gt;die_hard&lt;/code&gt; opcode actually &lt;code&gt;died&lt;/code&gt; relatively easily. Leo then renamed it to just &lt;code&gt;die&lt;/code&gt; out of popular demand.&lt;/p&gt;

&lt;h4 id=&#34;core-dump-with-computed-goto-core-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5cc6fc1e15d9aca5-2ec2ad5764204fee-2ec2ad5764204fee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5cc6fc1e15d9aca5/2ec2ad5764204fee#2ec2ad5764204fee&#34;&gt;Core Dump with Computed goto Core&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross found a core dump with the computed goto core. Leo explained that a hackish attempted optimization caused it. He also fixed it.&lt;/p&gt;

&lt;h4 id=&#34;ignore-generated-files-in-svn-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6f24da5492f08cf3-fac81156831a7cce-fac81156831a7cce&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6f24da5492f08cf3/fac81156831a7cce#fac81156831a7cce&#34;&gt;Ignore Generated Files in SVN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juergen Boemmels made SVN ignore some &lt;em&gt;.so&lt;/em&gt; files. Leo asked if it could also ignore &lt;em&gt;.rej&lt;/em&gt; and &lt;em&gt;.orig&lt;/em&gt; files.&lt;/p&gt;

&lt;h4 id=&#34;dynsuper-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3afbf12eccf3dd61-a49d30cc2e4850c2-a49d30cc2e4850c2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3afbf12eccf3dd61/a49d30cc2e4850c2#a49d30cc2e4850c2&#34;&gt;&lt;code&gt;DYNSUPER&lt;/code&gt; Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found that &lt;code&gt;DYNSUPER&lt;/code&gt; did not work well with his dynamic classes. Leo provided a suggestion for something to try and also suggested a &lt;code&gt;super&lt;/code&gt; vtable call.&lt;/p&gt;

&lt;h4 id=&#34;mmd-type-info-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a86ffd2aa7f742c0-51154d82ec3ad392-51154d82ec3ad392&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a86ffd2aa7f742c0/51154d82ec3ad392#51154d82ec3ad392&#34;&gt;MMD Type Info&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered how Parrot carries around the type info for MMD. Leo provided answers.&lt;/p&gt;

&lt;h4 id=&#34;imc-http-server-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b00883386e35f9bb-f7f80c8c5ba7c896-f7f80c8c5ba7c896&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b00883386e35f9bb/f7f80c8c5ba7c896#f7f80c8c5ba7c896&#34;&gt;IMC HTTP Server&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Amslser wrote a tiny webserver in IMC. This led to the discovery of that the binary to ASCII transcoding is missing. Leo suggested several possible solutions.&lt;/p&gt;

&lt;h4 id=&#34;ponie-s-use-of-pmc-flag-bits-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-63537ac226178af4-cc3076d2e3060e93-cc3076d2e3060e93&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63537ac226178af4/cc3076d2e3060e93#cc3076d2e3060e93&#34;&gt;Ponie&amp;rsquo;s Use of PMC Flag Bits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark asked how best to use the 8 private bits of PMC in Ponie. His initial thought was to mark type with it. Leo suggested that adding the type to the flag bits was unnecessary, as one can usually just call a vtable or MMD function directly and the type will work out.&lt;/p&gt;

&lt;h4 id=&#34;built-in-mmds-as-methods-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1a771b6b259aba13-264e518a2ae3e29a-264e518a2ae3e29a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1a771b6b259aba13/264e518a2ae3e29a#264e518a2ae3e29a&#34;&gt;Built-in MMDs as Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for calling built-in MMDs on objects as methods.&lt;/p&gt;

&lt;h4 id=&#34;unary-and-infix-ops-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-16710a4ac706a01e-49e7fa9bd58cb829-49e7fa9bd58cb829&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/16710a4ac706a01e/49e7fa9bd58cb829#49e7fa9bd58cb829&#34;&gt;Unary and Infix Ops Update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a summary and TODO for his overhaul of opcodes that return new results. Jerry Gay and Bob Rogers helped fill out the corners. Bob even provided some tests.&lt;/p&gt;

&lt;h4 id=&#34;parrot-and-ref-counting-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c07a32bc11b665cc-d549c4a3dd3225ad-d549c4a3dd3225ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c07a32bc11b665cc/d549c4a3dd3225ad#d549c4a3dd3225ad&#34;&gt;Parrot and Ref Counting&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robin Redeker wondered why Parrot had decided to go with a non-ref counting GC. Dan Sugalski took responsibility for the decision and explained his motivations. Non-ref counting GCs are essentially simpler, cleaner, and faster. You can get a more detailed answer from reading the thread or Dan&amp;rsquo;s &lt;a href=&#34;http://www.sidhe.org/~dan/blog/archives/000200.html&#34;&gt;Squawks of the Parrot: What the heck is: Garbage Collection&lt;/a&gt; from way back when.&lt;/p&gt;

&lt;h4 id=&#34;deprecate-fast-call-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6d7d76ccd034d582-bbf3b646460a8de9-bbf3b646460a8de9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6d7d76ccd034d582/bbf3b646460a8de9#bbf3b646460a8de9&#34;&gt;Deprecate &lt;code&gt;fast_call&lt;/code&gt;?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo mused that he would like to deprecate the &lt;code&gt;fast_call&lt;/code&gt; PIR construct. No one squawked, so I call it officially deprecated.&lt;/p&gt;

&lt;h4 id=&#34;win32-thread-primitives-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-66b98ffd6b21d491-7055c56da4e90399-7055c56da4e90399&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/66b98ffd6b21d491/7055c56da4e90399#7055c56da4e90399&#34;&gt;Win32 Thread Primitives&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vladimir Lipsky and Leo went back and forth a few times working out thread primitives for Windows. I am not sure what state they finally reached.&lt;/p&gt;

&lt;h4 id=&#34;call-syntax-abstraction-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-06c1d2b53c317fda-739ced0badff1626-739ced0badff1626&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06c1d2b53c317fda/739ced0badff1626#739ced0badff1626&#34;&gt;Call Syntax Abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a proposal for a calling convention abstraction. No comments have appeared yet, but it has not been up for long.&lt;/p&gt;

&lt;h4 id=&#34;tailcalls-in-pir-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-06bc2256eb0fa02f-4764b4627545d841-4764b4627545d841&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06bc2256eb0fa02f/4764b4627545d841#4764b4627545d841&#34;&gt;Tailcalls in PIR&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Patrick R. Michaud wondered if PIR supported tailcalls and tailmethods yet. Leo provided a few pointers. Bob Rogers suggested a nice syntax, which Leo implemented.&lt;/p&gt;

&lt;h4 id=&#34;vtables-in-extend-h-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8275c0e33fbe7f73-8afa1165fe253894-8afa1165fe253894&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8275c0e33fbe7f73/8afa1165fe253894#8afa1165fe253894&#34;&gt;Vtables in &lt;em&gt;extend.h&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark noted a need for vtables in &lt;em&gt;extend.h&lt;/em&gt;. Leo agreed that they should be auto-generated. chromatic eagerly requested the chance to write the Perl code that does this auto-generation.&lt;/p&gt;

&lt;h4 id=&#34;s-bailout-bail-out-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cfe99da639662579-fcdb54c7e2a042c0-fcdb54c7e2a042c0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cfe99da639662579/fcdb54c7e2a042c0#fcdb54c7e2a042c0&#34;&gt;&lt;code&gt;s/BAILOUT/BAIL_OUT/&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael G. Schwern announced that he&amp;rsquo;d removed &lt;code&gt;BAILOUT&lt;/code&gt; from Test::Builder in favor of &lt;code&gt;BAIL_OUT&lt;/code&gt;. He admitted that a deprecated &lt;code&gt;BAILOUT&lt;/code&gt; would remain as undocumented. At some point we should update.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;anonymous-roles-and-closures-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-925efba5007e366b-278b07bf0ab6408d-278b07bf0ab6408d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/925efba5007e366b/278b07bf0ab6408d#278b07bf0ab6408d&#34;&gt;Anonymous Roles and Closures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wondered if he could generate anonymous roles that are also closures. It made my head hurt. People seem to think it&amp;rsquo;s possible though.&lt;/p&gt;

&lt;h4 id=&#34;peter-piper-picked-a-hash-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-24e369fba3ed626e-b64aaafcca1c055e-b64aaafcca1c055e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24e369fba3ed626e/b64aaafcca1c055e#b64aaafcca1c055e&#34;&gt;Peter Piper picked a hash&amp;hellip;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what &lt;code&gt;pick&lt;/code&gt; would return when called on a hash. Rod Adams suggested that it would return a pair. Larry thought that would be a good idea, if perhaps difficult to implement.&lt;/p&gt;

&lt;h4 id=&#34;all-junctions-bad-subjects-indecision-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e08f7de7b69df5eb-aba86b97f1a1251c-aba86b97f1a1251c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e08f7de7b69df5eb/aba86b97f1a1251c#aba86b97f1a1251c&#34;&gt;All (Junctions, Bad Subjects, Indecision)&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb found that he could use junctions to quickly answer questions but not provide specifics. Sadly, he is not the first person to have this problem. Junctions naturally provide Boolean operations but do not naturally explain what motivated that answer. Perhaps they should be thrown out along with the axiom of choice. After all, do we really need a basis for ALL of our vector spaces?&lt;/p&gt;

&lt;h4 id=&#34;is-rw-a-no-op-on-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-90ff5afe035da8da-baef5fa481f0fdf3-baef5fa481f0fdf3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/90ff5afe035da8da/baef5fa481f0fdf3#baef5fa481f0fdf3&#34;&gt;&lt;code&gt;is rw&lt;/code&gt; a No-Op on References?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if &lt;code&gt;is rw&lt;/code&gt; did anything for references, as you can still modify the value to which they refer. Juerd answered basically yes.&lt;/p&gt;

&lt;h4 id=&#34;complex-number-package-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2a97f706fe9155c1-cf1a5838783a72ad-cf1a5838783a72ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2a97f706fe9155c1/cf1a5838783a72ad#cf1a5838783a72ad&#34;&gt;Complex Number Package&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Lang wondered about creating a complex number package. Including returning junctions of values for roots of unity. Unfortunately these lists can be quite large, even infinite. Thus, he wondered if he could use lazy junctions. Thomas Sandlaß conjectured that he could by the &amp;ldquo;law of laziness preservation&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;auto-threading-of-junctions-and-threads-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-778dca4cf38a52d8-361f6f87d1cff32c-361f6f87d1cff32c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/778dca4cf38a52d8/361f6f87d1cff32c#361f6f87d1cff32c&#34;&gt;Auto-Threading of Junctions and Threads&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman worried that the auto-threading of junction would actually run in separate threads. This is most assuredly not the common case, although some warped soul could implement it that way.&lt;/p&gt;

&lt;h4 id=&#34;context-of-indices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c96c85ea8f511acc-3ad64e02a95dcf69-3ad64e02a95dcf69&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c96c85ea8f511acc/3ad64e02a95dcf69#3ad64e02a95dcf69&#34;&gt;Context of Indices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked what context &lt;code&gt;want&lt;/code&gt; would provide when used as an index. Larry provided answers.&lt;/p&gt;

&lt;h4 id=&#34;sun-s-fortress-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-017005a999609b34-630048a564c26aed-630048a564c26aed&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/017005a999609b34/630048a564c26aed#630048a564c26aed&#34;&gt;Sun&amp;rsquo;s Fortress&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted a link to a next-generation computer language from Sun called Fortress and then went on to ask about parameterized types, tuple types, and block labels. Bad Autrijus! Make summarizers lives hard. Then we have to punt like this rather than try to extract the three different threads at once.&lt;/p&gt;

&lt;h4 id=&#34;restricting-variable-scopes-with-while-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2ef6fef80e878793-436d5489b9a75b49-436d5489b9a75b49&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2ef6fef80e878793/436d5489b9a75b49#436d5489b9a75b49&#34;&gt;Restricting Variable Scopes With &lt;code&gt;while&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joshua Gatcomb wanted to know how he could restrict the scope of variables used in the conditionals of his &lt;code&gt;while&lt;/code&gt; statement to the loop. This led to some discussion about the implementation of &lt;code&gt;while&lt;/code&gt; as a macro or some other beast. Larry began to ponder the submacro.&lt;/p&gt;

&lt;h4 id=&#34;first-last-et-al-support-in-pugs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-dd5ffb21b1415af0-a0831d58dd4fc1ff-a0831d58dd4fc1ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/dd5ffb21b1415af0/a0831d58dd4fc1ff#a0831d58dd4fc1ff&#34;&gt;&lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt; et al. Support in Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen decided to try to add support for &lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt; blocks and the like into Pugs. This led him to p6l with some questions about traits which are closures. Answers and suggestions followed.&lt;/p&gt;

&lt;h4 id=&#34;junctions-of-classes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a3d674ff66f67da0-fa3e3e7418df928c-fa3e3e7418df928c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a3d674ff66f67da0/fa3e3e7418df928c#fa3e3e7418df928c&#34;&gt;Junctions of Classes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered how junctions of classes would act. The consensus seems to be that they act as type specifiers of a sort, restricting whatever the variables they describe can contain.&lt;/p&gt;

&lt;h4 id=&#34;subtype-declarations-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f221c018f819b86f-4c031821dcb63e17-4c031821dcb63e17&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f221c018f819b86f/4c031821dcb63e17#4c031821dcb63e17&#34;&gt;Subtype Declarations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered what exactly subtype declarations provided and suggested jettisoning them. Larry remained unconvinced.&lt;/p&gt;

&lt;h4 id=&#34;labels-on-blocks-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f9148955e4c08bb2-0b2779b4506808ff-0b2779b4506808ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f9148955e4c08bb2/0b2779b4506808ff#0b2779b4506808ff&#34;&gt;Labels on Blocks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered if there was some way to attach labels to blocks. Discussion ensued, including a comment from Larry that it won&amp;rsquo;t need to be redone.&lt;/p&gt;

&lt;h4 id=&#34;open-and-pipe-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ed05cb58e8f61b17-b22033c9c8530e13-b22033c9c8530e13&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ed05cb58e8f61b17/b22033c9c8530e13#b22033c9c8530e13&#34;&gt;&lt;code&gt;open&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas proposed a basic &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;pipe&lt;/code&gt; built-in for discussion. Discussion followed. Larry mentioned that he has &amp;ldquo;pretty much&amp;rdquo; blessed &lt;code&gt;io&lt;/code&gt; (from &lt;a href=&#34;https://metacpan.org/pod/IO::All&#34;&gt;IO::All&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&#34;is-if-function-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a6c71df5881d333e-f3d3ef24db245638-f3d3ef24db245638&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a6c71df5881d333e/f3d3ef24db245638#f3d3ef24db245638&#34;&gt;Is &lt;code&gt;if&lt;/code&gt; Function?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if &lt;code&gt;if&lt;/code&gt; as a function had unintended consequences. Fortunately, &lt;code&gt;if&lt;/code&gt; is not a function, it is a statement-level construct.&lt;/p&gt;

&lt;h4 id=&#34;junctions-in-use-statements-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-072b19fefc404f80-fbb2a6e537cddab5-fbb2a6e537cddab5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/072b19fefc404f80/fbb2a6e537cddab5#fbb2a6e537cddab5&#34;&gt;Junctions in &lt;code&gt;use&lt;/code&gt; Statements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if he could say &lt;code&gt;use strict &amp;amp; warnings&lt;/code&gt;. Larry explained that there were parsing problems with it and possibly limited utility, but he has not officially ruled it out, as the problems have workarounds.&lt;/p&gt;

&lt;h4 id=&#34;foo-one-foo-self-foo-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d3ab335df56c8fc4-fd9dc1f0e0e1cf20-fd9dc1f0e0e1cf20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d3ab335df56c8fc4/fd9dc1f0e0e1cf20#fd9dc1f0e0e1cf20&#34;&gt;&lt;code&gt;.foo() == one($_.foo(), $?SELF.foo())&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This great quandary continues. This week, Larry is leaning towards the &lt;code&gt;.foo() == $_.foo()&lt;/code&gt; camp, but nothing is yet set. He also suggested &lt;code&gt;$^&lt;/code&gt; as being equivalent to &lt;code&gt;$?SELF&lt;/code&gt; (which I really like). Time will tell how this one will work out. My prediction is that the argument will rage on until Pugs is ready to implement it and needs a definitive answer&amp;hellip;then it will change a few more times.&lt;/p&gt;

&lt;h4 id=&#34;type-system-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-82ecf6620c641ddd-500a69e034596d36-500a69e034596d36&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/82ecf6620c641ddd/500a69e034596d36#500a69e034596d36&#34;&gt;Type System Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked a few questions about the type system, and at which times it did what things. Larry provided some answers.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, April 12 - 19, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050421.html/</link>
      <pubDate>Thu, 21 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050421.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Sadly, a slip of the mouse caused me to delete a partially completed summary, so I am going to push ahead on the rewrite without a witty intro. Feel free to make one up for yourself involving stuffed animals, musicians, and dinner.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;pugs-6-2-0-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-96465d8b9ad451d9-506edf0f1f75fd18-506edf0f1f75fd18&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/96465d8b9ad451d9/506edf0f1f75fd18#506edf0f1f75fd18&#34;&gt;Pugs 6.2.0&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus released Pugs 6.2.0, marking the first major milestone for Pugs. This includes most of the control flow primitives of Perl 6 and is a testament to the solid work that all of the &amp;ldquo;lambdacamels&amp;rdquo; have put in.&lt;/p&gt;

&lt;h4 id=&#34;cgi-pm-and-multibyte-characters&#34;&gt;&lt;em&gt;CGI.pm&lt;/em&gt; and Multibyte Characters&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András had trouble encoding and decoding multibyte characters in &lt;em&gt;CGI.pm&lt;/em&gt;. This led to a general discussion of how to avoid such characters in URLs as well as when to call &lt;code&gt;chr&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/750a78b4aba5ab30/18de224db1c6456a#18de224db1c6456a&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2583cd2ad56bcb8a/b146ba42087af46e#b146ba42087af46e&#34;&gt;More Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;auto-currying-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c188af3a040a766c-2bed10c78e871766-2bed10c78e871766&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c188af3a040a766c/2bed10c78e871766#2bed10c78e871766&#34;&gt;Auto Currying?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matthew D. Swank wondered if he really needed an extra set of parens to call a function generator and its generated function simultaneously. Autrijus told him that yes he did as Perl 6 is not quite Haskell yet.&lt;/p&gt;

&lt;h4 id=&#34;case-insensitive-p5-regex-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e02fee049f84a748-0a265818f9c46346-0a265818f9c46346&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e02fee049f84a748/0a265818f9c46346#0a265818f9c46346&#34;&gt;Case Insensitive P5 Regex&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András wanted to use the &lt;code&gt;:i&lt;/code&gt; switch on P5 regexes. Autrijus implemented it, but Larry noticed that this introduced a flag ordering dependency. As a result, the new way to supply flags to a Perl 5 regex is &lt;code&gt;rx:P5&amp;lt;imsxg&amp;gt;/.../&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;cookbook-ettiquette-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-46d6404cce43e170-0e86f5489b6951e8-0e86f5489b6951e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/46d6404cce43e170/0e86f5489b6951e8#0e86f5489b6951e8&#34;&gt;Cookbook Ettiquette&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Marcus Adair wondered if there were rules of etiquette he should obey when writing examples for the Perl 6 Cookbook. In particular, should examples run and be only one file? Ovid suggested that one file was a good idea, but was open to contrary arguments.&lt;/p&gt;

&lt;h4 id=&#34;austrian-parrot-pugs-hackathon-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-cdccc751c9d251a2-12384146569d9acd-12384146569d9acd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/cdccc751c9d251a2/12384146569d9acd#12384146569d9acd&#34;&gt;Austrian Parrot/Pugs Hackathon&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Klausner announced that on June 9-10 in Vienna, Austria there would be a Hackathon featuring the collective might of Autrijus, Chip, Leo, and more. When that much brain power gets together only two things can happen: much hacking and much drinking.&lt;/p&gt;

&lt;h4 id=&#34;encoding-illegal-byte-sequences-in-strings-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fb83a5437e07b928-ba9781abcd3406ca-ba9781abcd3406ca&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fb83a5437e07b928/ba9781abcd3406ca#ba9781abcd3406ca&#34;&gt;Encoding Illegal Byte Sequences in Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András wanted to know if he could encode an illegal byte sequence in a string. Much discussion ensued, but Larry promised that it would be possible.&lt;/p&gt;

&lt;h4 id=&#34;test-tap&#34;&gt;&lt;code&gt;Test::TAP&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman announced the release of two new modules to CPAN that provide Pugs smoke HTML.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2bb8a11c2456fdce/f27a8093b5667c5e#f27a8093b5667c5e&#34;&gt;Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&amp;ldquo;&lt;a href=&#34;http://nothingmuch.woobling.org/pugs_test_status/&amp;quot;Smoke&#34;&gt;http://nothingmuch.woobling.org/pugs_test_status/&amp;quot;Smoke&lt;/a&gt; &amp;lsquo;em if You Got &amp;lsquo;em&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;quoting-constructs&#34;&gt;Quoting Constructs&lt;/h4&gt;

&lt;p&gt;Roie Marianer noticed that Pugs was missing some quoting constructs. He implemented them. This led to discussion of interpolation and corner cases. As usual, Larry provided both answers and questions. Roie produced a patch which Autrijus applied.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/bb1969aa24008431/f7eb1b0d77d6e3cd#f7eb1b0d77d6e3cd&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/209d5a637ab00993/e7eb743f074c8f8d#e7eb743f074c8f8d&#34;&gt;Useful Pugs Hacking Pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f61f0ef868e0d9e0/653a73b1f938d4e9#653a73b1f938d4e9&#34;&gt;The Patch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;code-block-as-argument-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-82071725b70ea804-992d32212401500b-992d32212401500b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/82071725b70ea804/992d32212401500b#992d32212401500b&#34;&gt;Code Block as Argument&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little found some bugs with passing a code block to a function in Pugs. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;push-pop-shift-and-unshift-on-infinite-lists&#34;&gt;&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, and &lt;code&gt;unshift&lt;/code&gt; on Infinite Lists&lt;/h4&gt;

&lt;p&gt;Stevan Little has been playing with &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, and &lt;code&gt;unshift&lt;/code&gt; on infinite lists. He thinks he has found a bug, although maybe he just hasn&amp;rsquo;t let it run long enough. Larry provided answers regarding the correct semantics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/727e096e9985ffc6/2f200d6cf002ecda#2f200d6cf002ecda&#34;&gt;&lt;code&gt;shift unshift&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/bfa0db91e317104f/41f8dcf309c64d9c#41f8dcf309c64d9c&#34;&gt;&lt;code&gt;push pop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cd-issue-in-makefile-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-d4717e1fcdd5a631-bbd547275ba2f292-bbd547275ba2f292&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/d4717e1fcdd5a631/bbd547275ba2f292#bbd547275ba2f292&#34;&gt;&lt;code&gt;cd&lt;/code&gt; Issue in &lt;em&gt;Makefile&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jonathan Worthington noticed a Win32 issue in the &lt;em&gt;Makefile&lt;/em&gt;. He can point to the offending line in the autogenerated &lt;em&gt;Makefile&lt;/em&gt;, but that is not where the fix belongs. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;hyperoperator-tests-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-ffc05ce65d1302fa-cab2f4338c64478d-cab2f4338c64478d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/ffc05ce65d1302fa/cab2f4338c64478d#cab2f4338c64478d&#34;&gt;Hyperoperator Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen provided a patch for hyperoperators. Unfortunately, character set transcodings ate his patch.&lt;/p&gt;

&lt;h4 id=&#34;shift-oddity-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2a8de017213467c9-7ac0b26446af4265-7ac0b26446af4265&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2a8de017213467c9/7ac0b26446af4265#7ac0b26446af4265&#34;&gt;&lt;code&gt;shift&lt;/code&gt; Oddity&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little noticed that &lt;code&gt;shift&lt;/code&gt; did not act like &lt;code&gt;pop&lt;/code&gt;. Larry noted that the examples were not semantically valid, but even so, Pugs should not freeze.&lt;/p&gt;

&lt;h4 id=&#34;pugs-segv-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-03cfcd08924cf777-758242dfd55d908d-758242dfd55d908d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/03cfcd08924cf777/758242dfd55d908d#758242dfd55d908d&#34;&gt;Pugs SEGV&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman managed to make Pugs segfault. Autrijus thinks someone might already have fixed it.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;dynamic-perl-2-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e458e5ae236f2475-a14a81f3562cabb4-a14a81f3562cabb4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e458e5ae236f2475/a14a81f3562cabb4#a14a81f3562cabb4&#34;&gt;Dynamic Perl 2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda provide the second of his patches to move &lt;code&gt;Perl*PMC&lt;/code&gt; out of the core. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;svn-revision-in-bug-reports-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4470945c9b73132f-8d408c82edcb9eb0-8d408c82edcb9eb0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4470945c9b73132f/8d408c82edcb9eb0#8d408c82edcb9eb0&#34;&gt;SVN Revision in Bug Reports&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens Rieks reported a difficult-to-reproduce bug. This caused Leo to pine for having the SVN revision in the bug report. Brent &amp;ldquo;Dax&amp;rdquo; Royal-Gordon commented that this was a good idea. Jens Rieks offered to implement it.&lt;/p&gt;

&lt;h4 id=&#34;win32-sdl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ec13c071e394b978-75c590055366af40-75c590055366af40&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ec13c071e394b978/75c590055366af40#75c590055366af40&#34;&gt;Win32 SDL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay tried to get SDL working on Windows. There was some give and take, but in the end, it works.&lt;/p&gt;

&lt;h4 id=&#34;l-path-to-icu-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e3b32552ce77272d-8ebf83f7e535740e-8ebf83f7e535740e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e3b32552ce77272d/8ebf83f7e535740e#8ebf83f7e535740e&#34;&gt;&lt;code&gt;-l/path/to/icu&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty provided a patch making &lt;em&gt;Configure.pl&lt;/em&gt; provide a link flag to ICU headers if provided. Jens Rieks applied it.&lt;/p&gt;

&lt;h4 id=&#34;svk-and-svn-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8ab9759222802158-cc3f9249ea9441a9-cc3f9249ea9441a9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8ab9759222802158/cc3f9249ea9441a9#cc3f9249ea9441a9&#34;&gt;Svk and SVN issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roger Hale noticed a small problem with parrotcode.org. Robert Spier fixed it.&lt;/p&gt;

&lt;h4 id=&#34;nci-t-failure-under-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4a44170fc7012544-0638cc2ec3747287-0638cc2ec3747287&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4a44170fc7012544/0638cc2ec3747287#0638cc2ec3747287&#34;&gt;&lt;em&gt;nci.t&lt;/em&gt; Failure Under MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad fixed a MinGW test failure. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;trailing-space-with-ld-out-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-478cb1819d5e4dfb-8e8947f606dab7ff-8e8947f606dab7ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/478cb1819d5e4dfb/8e8947f606dab7ff#8e8947f606dab7ff&#34;&gt;Trailing Space with &lt;code&gt;${LD_OUT}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty fixed an old bug with &lt;code&gt;LD_OUT&lt;/code&gt; having trailing space. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;warnings-cleaning-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-db8a711f8f85bb1c-74874b2eff5780d2-74874b2eff5780d2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/db8a711f8f85bb1c/74874b2eff5780d2#74874b2eff5780d2&#34;&gt;Warnings Cleaning&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay cleaned some warnings from the source tree. Leo applied most of the patch.&lt;/p&gt;

&lt;h4 id=&#34;win32-path-nit-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-413b03fc07ad6c74-65e6069a591a6928-65e6069a591a6928&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/413b03fc07ad6c74/65e6069a591a6928#65e6069a591a6928&#34;&gt;Win32 Path Nit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Philip Taylor fixed a small Win32 path issue. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;cmp-op-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2ecfcdab123baf79-198c31b75714fff0-198c31b75714fff0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2ecfcdab123baf79/198c31b75714fff0#198c31b75714fff0&#34;&gt;&lt;code&gt;cmp&lt;/code&gt; Op Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo found a bug in &lt;code&gt;cmp_p_i_ic&lt;/code&gt; opcodes.&lt;/p&gt;

&lt;h4 id=&#34;sdl-uninitialized-variable-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d69310fb11e75b26-eb47aeb6783e19fe-eb47aeb6783e19fe&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d69310fb11e75b26/eb47aeb6783e19fe#eb47aeb6783e19fe&#34;&gt;SDL Uninitialized Variable&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross provided a patch fixing an uninitialized variable in SDL. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;perlscalar-morph-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2fa7db6f961df407-5f38f717c8d5bfa8-5f38f717c8d5bfa8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2fa7db6f961df407/5f38f717c8d5bfa8#5f38f717c8d5bfa8&#34;&gt;&lt;code&gt;PerlScalar&lt;/code&gt; Morph Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark found a bug in morph for &lt;code&gt;PerlScalar&lt;/code&gt;. Leo verified that it was a bug. Nick Glencross offered to fix it.&lt;/p&gt;

&lt;h4 id=&#34;infix-method-change-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-472630c2b0603134-56a30ffedd8e248f-56a30ffedd8e248f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/472630c2b0603134/56a30ffedd8e248f#56a30ffedd8e248f&#34;&gt;Infix Method Change&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo threatened to continue with his plan to simplify infix methods. No one objected.&lt;/p&gt;

&lt;h4 id=&#34;used-before-set-warning-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-52baedbc2dc5202a-c6de6d510bd2249a-c6de6d510bd2249a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/52baedbc2dc5202a/c6de6d510bd2249a#c6de6d510bd2249a&#34;&gt;Used Before Set Warning?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross wanted a warning for using unset variables in imcc. Leo pointed out that this was not as simple as one might like.&lt;/p&gt;

&lt;h4 id=&#34;remove-temp-files-for-win32-make-clean-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-980a3f7cd83bd1cc-2d53606491e903a0-2d53606491e903a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/980a3f7cd83bd1cc/2d53606491e903a0#2d53606491e903a0&#34;&gt;Remove Temp Files for Win32 &lt;code&gt;make clean&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch removing more files under &lt;code&gt;make clean&lt;/code&gt; in Win32. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;fix-typos-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d75f7b9d5c4c8103-d473935613cca66e-d473935613cca66e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d75f7b9d5c4c8103/d473935613cca66e#d473935613cca66e&#34;&gt;Fix Typos&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross provided a patch which fixes some typos in docs. chromatic applied it with a few extra tweaks.&lt;/p&gt;

&lt;h4 id=&#34;parrot-security-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6285245dd83ead1b-d029a1bd60ba207c-d029a1bd60ba207c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6285245dd83ead1b/d029a1bd60ba207c#d029a1bd60ba207c&#34;&gt;Parrot Security&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András wondered about the general security mechanisms that Parrot would provide. Dan assured him that security would be a fundamental part of Parrot. He also provided &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/becd70c749ed8802/b2cc77c111663f98#b2cc77c111663f98&#34;&gt;a sketch of the Parrot security model&lt;/a&gt; which sparked some discussion.&lt;/p&gt;

&lt;h4 id=&#34;debian-arm-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b06bf58efba82f2e-fb7f013cb9f7acab-fb7f013cb9f7acab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b06bf58efba82f2e/fb7f013cb9f7acab#fb7f013cb9f7acab&#34;&gt;Debian ARM Failure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Falls Huang reported a build failure on Debian-ARM. Leo provided a pointer in the right direction.&lt;/p&gt;

&lt;h4 id=&#34;missing-make-target-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fc24f59f5f8e18bd-1202ce973afc6c31-1202ce973afc6c31&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fc24f59f5f8e18bd/1202ce973afc6c31#1202ce973afc6c31&#34;&gt;Missing Make Target&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad notice that &lt;code&gt;make src/revision.c&lt;/code&gt; couldn&amp;rsquo;t handle &lt;em&gt;.svn/entries&lt;/em&gt;. Jens Rieks fixed the problem.&lt;/p&gt;

&lt;h4 id=&#34;jit-generation-help-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2efaf5a6b85e4fa1-349b6ced77429368-349b6ced77429368&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2efaf5a6b85e4fa1/349b6ced77429368#349b6ced77429368&#34;&gt;JIT Generation Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble put out a call for some general advice on understanding Parrots JIT. Leo provided some general advice.&lt;/p&gt;

&lt;h4 id=&#34;attribute-not-found-exception-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-856b25471e33d77e-9e48338f07dcea83-9e48338f07dcea83&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/856b25471e33d77e/9e48338f07dcea83#9e48338f07dcea83&#34;&gt;&amp;ldquo;Attribute not found&amp;rdquo; Exception&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer provide a patch changing &lt;code&gt;getattribute&lt;/code&gt; to throw a real exception. Jens applied the patch with a few tweaks.&lt;/p&gt;

&lt;h4 id=&#34;stderr-during-bc-configure-step-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-65999ab8b88da37d-b9507ee27d6c606a-b9507ee27d6c606a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/65999ab8b88da37d/b9507ee27d6c606a#b9507ee27d6c606a&#34;&gt;stderr during &lt;code&gt;bc&lt;/code&gt; Configure Step&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jerry Gay provided a patch to suppress stderr during the &lt;code&gt;bc&lt;/code&gt; configure step. There was some debate on how to make this cross platform. I don&amp;rsquo;t think there was a resolution.&lt;/p&gt;

&lt;h4 id=&#34;string-c-segfault-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1ff44911f0e2da89-d604a37767fdc8c7-d604a37767fdc8c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1ff44911f0e2da89/d604a37767fdc8c7#d604a37767fdc8c7&#34;&gt;&lt;em&gt;string.c&lt;/em&gt; Segfault&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross provided a patch fixing a few segfaults in &lt;em&gt;string.c&lt;/em&gt;. Jens applied it.&lt;/p&gt;

&lt;h4 id=&#34;mswin32-icu-linkage-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-94e648ab1d0cd3a7-b0c6963d1198ef36-b0c6963d1198ef36&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/94e648ab1d0cd3a7/b0c6963d1198ef36#b0c6963d1198ef36&#34;&gt;MSWin32 ICU Linkage&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke added ICU to the linkage for Win32. Jens applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;win32-readme-updates-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a9d14d8a39269642-a08a9039624088c4-a08a9039624088c4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a9d14d8a39269642/a08a9039624088c4#a08a9039624088c4&#34;&gt;Win32 Readme Updates&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke updated the &lt;em&gt;README.win32&lt;/em&gt; document. chromatic applied the patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a511e0acef3f8b43/bfb9fed4636e8d30#bfb9fed4636e8d30&#34;&gt;Discussion Before the Patch&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;big-changes-afoot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-3e12c06edb87e91d-e87790daa8de6a28-e87790daa8de6a28&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3e12c06edb87e91d/e87790daa8de6a28#e87790daa8de6a28&#34;&gt;Big Changes Afoot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Our pumpking Leo has some big changes underway and asked someone else to man the pumps for a little while. Jens volunteered to be someone.&lt;/p&gt;

&lt;h4 id=&#34;more-registers-make-dan-s-code-less-unhappy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e9737a0ff59741d1-d222280d60722b24-d222280d60722b24&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e9737a0ff59741d1/d222280d60722b24#d222280d60722b24&#34;&gt;More Registers Make Dan&amp;rsquo;s Code less Unhappy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan has some very ugly generated code. It takes a LONG time to compile. Leo sped it up by giving Parrot more registers.&lt;/p&gt;

&lt;h4 id=&#34;const-weirdness-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-999b9f6c744a4164-c63f9d4079202df9-c63f9d4079202df9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/999b9f6c744a4164/c63f9d4079202df9#c63f9d4079202df9&#34;&gt;&lt;code&gt;.const&lt;/code&gt; Weirdness&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross found some weirdness with &lt;code&gt;.const&lt;/code&gt; in IMCC. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pmc-help-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f111410d97e18467-14bfd19da3a901cc-14bfd19da3a901cc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f111410d97e18467/14bfd19da3a901cc#14bfd19da3a901cc&#34;&gt;PMC Help&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bloves hoped for a pointer on PMC writing. Leo provided a helpful pointer.&lt;/p&gt;

&lt;h4 id=&#34;in-commands-is-not-cross-platform-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1ad9467b1025793a-8791eb8b69566cab-8791eb8b69566cab&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1ad9467b1025793a/8791eb8b69566cab#8791eb8b69566cab&#34;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; in Commands is Not Cross Platform&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jens noticed that &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; in commands causes problems on some platforms. Michael G. Schwern fixed it and Jens applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mmd-migration-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0ecded2105e1a6b3-a959e059396ada4f-a959e059396ada4f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0ecded2105e1a6b3/a959e059396ada4f#a959e059396ada4f&#34;&gt;MMD Migration&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo continued his slow but steady migration to a more MMD-like world.&lt;/p&gt;

&lt;h4 id=&#34;make-config-info-available-at-runtime-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-049e4a3c48c6274d-25976b013f93c575-25976b013f93c575&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/049e4a3c48c6274d/25976b013f93c575#25976b013f93c575&#34;&gt;Make Config Info Available at Runtime&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo wants to have useful config information available at runtime. Steven Philip Schubiger offered to try.&lt;/p&gt;

&lt;h4 id=&#34;remove-old-files-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e5f150409499a4b9-7c45bf5dd6f975e2-7c45bf5dd6f975e2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e5f150409499a4b9/7c45bf5dd6f975e2#7c45bf5dd6f975e2&#34;&gt;Remove Old Files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo opened a ticket for removing some outdated files.&lt;/p&gt;

&lt;h4 id=&#34;small-spelling-errors-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-83fc0d3cb83d9e04-e452b42305facec0-e452b42305facec0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/83fc0d3cb83d9e04/e452b42305facec0#e452b42305facec0&#34;&gt;Small Spelling Errors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steven Philip Schubiger provided a patch fixing some small spelling errors. He worried that perhaps he picked nits needlessly. I don&amp;rsquo;t think so, but Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;win32-icu-error-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a88e134e75e0fb96-7cc20604fbe7b7e6-7cc20604fbe7b7e6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a88e134e75e0fb96/7cc20604fbe7b7e6#7cc20604fbe7b7e6&#34;&gt;Win32 ICU Error&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad fixed a small mistake in the naming of &lt;em&gt;icudt.lib&lt;/em&gt;. chromatic applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;drunken-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bd016ece7efbf6dc-c671582313435f6a-c671582313435f6a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bd016ece7efbf6dc/c671582313435f6a#c671582313435f6a&#34;&gt;Drunken Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer has succeed in making LISP run on Parrot and uncovered a few GC bugs in the process, impressing everyone.&lt;/p&gt;

&lt;h4 id=&#34;python-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9ea5d132cb6a328b-8de3ed74d8f99b17-8de3ed74d8f99b17&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9ea5d132cb6a328b/8de3ed74d8f99b17#8de3ed74d8f99b17&#34;&gt;Python on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Tew wondered about the state of Pyrate. Sam Ruby provided a general explanation.&lt;/p&gt;

&lt;h4 id=&#34;c-gt-parrot-compiler-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-1118ffddecae2eee-2b17b5c039d9f944-2b17b5c039d9f944&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1118ffddecae2eee/2b17b5c039d9f944#2b17b5c039d9f944&#34;&gt;C =&amp;gt; Parrot Compiler&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Philip Taylor posted a few questions about Parrot for help with Carrot, his C to Parrot Compiler. Leo and Chip provided a few answers.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;yet-another-perl-conference-north-america-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ae5d3611ba59254c-3cea8fe11ab66c7b-3cea8fe11ab66c7b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ae5d3611ba59254c/3cea8fe11ab66c7b#3cea8fe11ab66c7b&#34;&gt;Yet Another Perl Conference, North America&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gerard Lim announced YAPC::NA with much information and useful links.&lt;/p&gt;

&lt;h4 id=&#34;subscripts-as-objects-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-357eb32072df6ca1-34e9f3ed3232620b-34e9f3ed3232620b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/357eb32072df6ca1/34e9f3ed3232620b#34e9f3ed3232620b&#34;&gt;Subscripts as Objects&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman threw out the idea of using subscripts as objects. Larry worried that this would hurt speed a little too much.&lt;/p&gt;

&lt;h4 id=&#34;statement-modifiers-and-scopes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-50537b038eb01049-504dc73599f6b0e9-504dc73599f6b0e9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/50537b038eb01049/504dc73599f6b0e9#504dc73599f6b0e9&#34;&gt;Statement Modifiers and Scopes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Paul Seamons posted some examples involving local scopes and statement modifiers. Larry decided that only curlies will delimit scopes, so as not to surprise too many people.&lt;/p&gt;

&lt;h4 id=&#34;whitespace-in-heredocs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f5dd10f62f347193-4f9e9e44613ece7b-4f9e9e44613ece7b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f5dd10f62f347193/4f9e9e44613ece7b#4f9e9e44613ece7b&#34;&gt;Whitespace in heredocs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd posted a question from the p6cookbook asking about spaces v. tabs. Larry took a guess as to the context and pointed to A2 for info.&lt;/p&gt;

&lt;h4 id=&#34;nbsp-in-s-ws-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-cd7710fe025526db-0159190cdac55ae1-0159190cdac55ae1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cd7710fe025526db/0159190cdac55ae1#0159190cdac55ae1&#34;&gt;&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; in &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;&amp;lt;?ws&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what sort of character classes matched nonbreaking spaces. Larry replied that they did, but postulated a &lt;code&gt;&amp;lt;bws&amp;gt;&lt;/code&gt; class for breaking whitespace.&lt;/p&gt;

&lt;h4 id=&#34;trim-and-words-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-42c0bc951df70bc4-a08367349c36ed44-a08367349c36ed44&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/42c0bc951df70bc4/a08367349c36ed44#a08367349c36ed44&#34;&gt;&lt;code&gt;trim()&lt;/code&gt; and &lt;code&gt;words()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Marcus Adair wondered about &lt;code&gt;trim&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; and if they actually existed. It seems that &lt;code&gt;trim&lt;/code&gt; will exist although words might be &lt;code&gt;&amp;lt;&amp;lt;$string&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;ugly-and-hard-to-type-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-539638737ca1c467-1f9b4c87e3ae6219-1f9b4c87e3ae6219&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/539638737ca1c467/1f9b4c87e3ae6219#1f9b4c87e3ae6219&#34;&gt;&lt;code&gt;&amp;lt;[]&amp;gt;&lt;/code&gt; Ugly and Hard to Type&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Some people are complaining that character classes are difficult to type. The design team considers this a feature as character classes do not handle internationalization well.&lt;/p&gt;

&lt;h4 id=&#34;comparing-floats-with-fudge-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a3625d9fefe6f350-bcf5011ed73acc84-bcf5011ed73acc84&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a3625d9fefe6f350/bcf5011ed73acc84#bcf5011ed73acc84&#34;&gt;Comparing Floats with Fudge&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Marcus Adair wants an easy way to compare floats with a fudge factor. Larry seemed to feel that &lt;code&gt;~~&lt;/code&gt; could use more DWIMery.&lt;/p&gt;

&lt;h4 id=&#34;cwd-vs-cwd-and-chdir-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c1ff319f1cf023f5-5c8a97dca9de168c-5c8a97dca9de168c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c1ff319f1cf023f5/5c8a97dca9de168c#5c8a97dca9de168c&#34;&gt;&lt;code&gt;$*CWD&lt;/code&gt; vs &lt;code&gt;cwd()&lt;/code&gt; and &lt;code&gt;chdir()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michael G. Schwern wanted a simple tied variable interface to &lt;code&gt;$*CWD&lt;/code&gt;. This is apparently a sensitive topic. Much discussion ensued of changing directory in bizarre circumstances. It looks like Michael&amp;rsquo;s suggestion will not reach the core, although it looks like a fairly simple module.&lt;/p&gt;

&lt;h4 id=&#34;junction-precedence-error-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9cbe727d2d3c7127-a5b95a51b4f1faba-a5b95a51b4f1faba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9cbe727d2d3c7127/a5b95a51b4f1faba#a5b95a51b4f1faba&#34;&gt;Junction Precedence Error&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brad Bowman noticed an error in some examples involving junction precedence. Larry confirmed the error. Patrick R. Michaud fixed it.&lt;/p&gt;

&lt;h4 id=&#34;spelling-mistake-in-a06-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-10f723c000997305-2f8569964e8d201d-2f8569964e8d201d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/10f723c000997305/2f8569964e8d201d#2f8569964e8d201d&#34;&gt;Spelling Mistake in A06&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steven Philip Schubiger found a spelling error in A06. Patrick R. Michaud applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;a-z-to-become-a-z-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-eb469e49d67ee887-5d5ce1a957b4a656-5d5ce1a957b4a656&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/eb469e49d67ee887/5d5ce1a957b4a656#5d5ce1a957b4a656&#34;&gt;&lt;code&gt;&amp;lt;[a-z]&amp;gt;&lt;/code&gt; to Become &lt;code&gt;&amp;lt;[a..z]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Larry decided that the range operator in character classes should change to &lt;code&gt;..&lt;/code&gt;. Much discussion ensued. I like it.&lt;/p&gt;

&lt;h4 id=&#34;tainted-variables-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9627c979812b1881-18e4deaee9092db2-18e4deaee9092db2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9627c979812b1881/18e4deaee9092db2#18e4deaee9092db2&#34;&gt;Tainted Variables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BÁRTHÁZI András wondered if he could mark variables as tainted. Luke Palmer showed him a way.&lt;/p&gt;

&lt;h4 id=&#34;re-declarable-temp-variables-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a3ee0ad28cfc7358-b954df420903258e-b954df420903258e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a3ee0ad28cfc7358/b954df420903258e#b954df420903258e&#34;&gt;Re-declarable &lt;code&gt;temp&lt;/code&gt; Variables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wants a way to re-declare variables without warnings. He suggested &lt;code&gt;temp&lt;/code&gt;. Larry suggested &lt;code&gt;ok&lt;/code&gt; to turn off a warning, but doesn&amp;rsquo;t think Aaron&amp;rsquo;s feature is really necessary. There&amp;rsquo;s no official ruling yet, I think.&lt;/p&gt;

&lt;h4 id=&#34;hyper-slices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7e5c8e60a262b033-a7e2220ac0c3cc26-a7e2220ac0c3cc26&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7e5c8e60a262b033/a7e2220ac0c3cc26#a7e2220ac0c3cc26&#34;&gt;Hyper Slices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen wants to use hyper slices as a convenient way of dealing with multidimensional data structures. Luke Palmer showed him how.&lt;/p&gt;

&lt;h4 id=&#34;hyperoperator-corner-case-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d19673092609908c-952a1c33601dce87-952a1c33601dce87&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d19673092609908c/952a1c33601dce87#952a1c33601dce87&#34;&gt;Hyperoperator Corner Case&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen wondered how hyperoperators know what to pad with when one side is not long enough. The answer appears to be slightly ill-defined magic, especially when considering subtraction or division.&lt;/p&gt;

&lt;h4 id=&#34;fine-granularity-sleeping-events-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5ef4b7c6b01cd63a-a627dd913e587f72-a627dd913e587f72&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5ef4b7c6b01cd63a/a627dd913e587f72#a627dd913e587f72&#34;&gt;Fine Granularity Sleeping/Events&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas wants to have an &lt;code&gt;alarm&lt;/code&gt; function that takes a double (for systems with sub-second timing promises). He also wants a version that takes a callback (possibly called &lt;code&gt;later&lt;/code&gt;). Warnock applied.&lt;/p&gt;

&lt;h4 id=&#34;junctions-in-subscripts-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2dbde23ef0bb8940-cd9c7a6b2e672cb8-cd9c7a6b2e672cb8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2dbde23ef0bb8940/cd9c7a6b2e672cb8#cd9c7a6b2e672cb8&#34;&gt;Junctions in Subscripts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen wants junctions in subscripts to autothread. Luke Palmer commented that they might. I think they do.&lt;/p&gt;

&lt;h4 id=&#34;quote-operators-and-interpolation-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2d5818a0af6f6232-e190635e9d89b772-e190635e9d89b772&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2d5818a0af6f6232/e190635e9d89b772#e190635e9d89b772&#34;&gt;Quote Operators and Interpolation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Roie Marianer had a few questions about how interpolation and quote operators would work. Larry and Juerd provided some answers. Larry&amp;rsquo;s short version: &amp;ldquo;We pretend we&amp;rsquo;re a top-down parser even if we aren&amp;rsquo;t&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;junctions-with-adverbs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-fa98d6ef70da6f85-8f099d9225ffb5a1-8f099d9225ffb5a1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/fa98d6ef70da6f85/8f099d9225ffb5a1#8f099d9225ffb5a1&#34;&gt;Junctions with Adverbs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Christensen wants to use adverbs to supply exceptions to junctions. Luke Palmer told him that it doesn&amp;rsquo;t work that way.&lt;/p&gt;

&lt;h4 id=&#34;evaluation-order-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f44055d378fa3515-0466f9879137871e-0466f9879137871e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f44055d378fa3515/0466f9879137871e#0466f9879137871e&#34;&gt;&lt;code&gt;++&lt;/code&gt; Evaluation Order&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Lam Fayland found an oddity in Pugs evaluation order for &lt;code&gt;++&lt;/code&gt;. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;statement-modifiers-for-setting-variables-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-121ac8d96c776bb9-6e51a2caa5699e94-6e51a2caa5699e94&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/121ac8d96c776bb9/6e51a2caa5699e94#6e51a2caa5699e94&#34;&gt;Statement Modifiers for Setting Variables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dave Whipp wants to use statement modifiers to restrict the scope for variables in his &lt;code&gt;print&lt;/code&gt; statements. Larry provided a different technique.&lt;/p&gt;

&lt;h4 id=&#34;tie-hashes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4bf493833cdb0e0b-57da4ba88cf2aa4a-57da4ba88cf2aa4a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4bf493833cdb0e0b/57da4ba88cf2aa4a#57da4ba88cf2aa4a&#34;&gt;Tie Hashes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what syntax to use for tying hashes. Larry began to muse aloud.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6, March 22 - April 3, 2005</title>
      <link>http://localhost:1313/pub/2005/04/p6pdigest/20050403.html/</link>
      <pubDate>Thu, 07 Apr 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/04/p6pdigest/20050403.html/</guid>
      <description>

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;ceil-and-floor-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9872651345221180-dfb6e19d48233e5e-dfb6e19d48233e5e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9872651345221180/dfb6e19d48233e5e#dfb6e19d48233e5e&#34;&gt;&lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered if &lt;code&gt;ceil&lt;/code&gt; and &lt;code&gt;floor&lt;/code&gt; would be in the core. Warnock applies, although Unicode operators would let me define circumfix &lt;code&gt;\lfloor&lt;/code&gt; &lt;code&gt;\rfloor&lt;/code&gt; (although I only know how to make those symbols in TeX.). Hmmm&amp;hellip;using TeX to write Perl 6 code is an interesting idea. At least then I could figure out how to make all the special symbols. Maybe someone should make a package for that.&lt;/p&gt;

&lt;h4 id=&#34;s-object-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6c59b6296687b28b-ee4f77b9920d10f7-ee4f77b9920d10f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6c59b6296687b28b/ee4f77b9920d10f7#ee4f77b9920d10f7&#34;&gt;&lt;code&gt;s///&lt;/code&gt; object?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wanted to know if &lt;code&gt;s///&lt;/code&gt; could return some sort of magic object to poke or prod. Larry said &amp;ldquo;no&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;markup-like-features-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a9ed04e00bade7c0-a98a66b19415638c-a98a66b19415638c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a9ed04e00bade7c0/a98a66b19415638c#a98a66b19415638c&#34;&gt;Markup-Like Features&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi asked if Perl 6 would have markup-like features in it. Luke Palmer asked for a more full explanation of what he meant. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;the-many-moods-of-does-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2095c65253615777-846c34493a77f952-846c34493a77f952&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2095c65253615777/846c34493a77f952#846c34493a77f952&#34;&gt;The Many Moods of &lt;code&gt;does&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß wondered if anyone would actually write S14 or if &lt;code&gt;does&lt;/code&gt; ate up &lt;code&gt;tie&lt;/code&gt;/&lt;code&gt;bless&lt;/code&gt;, enumerating the many powers of &lt;code&gt;does&lt;/code&gt;. Larry explained that &lt;code&gt;does&lt;/code&gt; will probably have mutated &lt;code&gt;bless&lt;/code&gt; and then explained the contexts under which &lt;code&gt;does&lt;/code&gt; performs each of its powers.&lt;/p&gt;

&lt;h4 id=&#34;even-more-moods-of-does-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-376a1703e186fdc7-cd926e769f641b48-cd926e769f641b48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/376a1703e186fdc7/cd926e769f641b48#cd926e769f641b48&#34;&gt;Even More Moods of &lt;code&gt;does&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;To follow up on his question about &lt;code&gt;does&lt;/code&gt;, Thomas Sandlaß wondered about &lt;code&gt;is&lt;/code&gt;, specifically whether it stubbed or initialized its variable. Larry explained that &lt;code&gt;is&lt;/code&gt; would probably initialize its variable and explained how to use &lt;code&gt;is Ref&lt;/code&gt; to stub but not initialize something.&lt;/p&gt;

&lt;h4 id=&#34;perl-5-gt-perl-6-converter-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-55f891b192f20c14-83bbcb56abdc82bb-83bbcb56abdc82bb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/55f891b192f20c14/83bbcb56abdc82bb#83bbcb56abdc82bb&#34;&gt;Perl 5 -&amp;gt; Perl 6 Converter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy dropped a line to the list about PPI 0.903, which could form a good base for a Perl 5 to Perl 6 converter. Larry explained that he is actually using PPD (the actual Perl parser) to construct such a tool. He also explained how he was going to do it. Actually, it&amp;rsquo;s a really cool approach for those of you who like elegant design approaches. You should check it out. I&amp;rsquo;ll give you a hint: it starts by writing a glorified version of &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;p5-library-compatibility-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f92eba73771f2ea4-2bbcccff8279f3e8-2bbcccff8279f3e8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f92eba73771f2ea4/2bbcccff8279f3e8#2bbcccff8279f3e8&#34;&gt;p5 Library Compatibility?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige wondered if p6 would maintain the interface for most p5 libraries. chromatic almost died of fright from the suggestion. Juerd suggested a deprecated namespace for such things. Larry gave him a Ponie instead. Later, Larry thought that perhaps a special namespace for those libraries that could be automatically converted might be appropriate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/317bd71bbbdcb75b/f25e44a2a6acaac7#f25e44a2a6acaac7&#34;&gt;Follow-up&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;importing-constants-and-header-files-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e689486905f15375-a66721f161fa1b8f-a66721f161fa1b8f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e689486905f15375/a66721f161fa1b8f#a66721f161fa1b8f&#34;&gt;Importing Constants and Header Files&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Song10 wondered if there was an easy way to import constants from a module and not have to specify their full scope in the includers file. Larry explained that p6 will have &amp;ldquo;policy&amp;rdquo; modules which would allow this. He then began to let his mind explore the possibility of allowing these modules to return a string to evaluate in the user&amp;rsquo;s scope. Then he realized how nasty textual inclusion was in C and C++, and figured that a hygienic policy would be better.&lt;/p&gt;

&lt;h4 id=&#34;giving-lists-more-operators&#34;&gt;Giving Lists More Operators&lt;/h4&gt;

&lt;p&gt;Juerd constructed a table of string, integer, and list operators. He noticed that the list section had blank spots where string and integer both had items. He then suggested quite a few more operators to fill these blanks. This morphed into a discussion of code complexity and reading code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5421becb49cd4d45/93d8d0a1784b26de#93d8d0a1784b26de&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f17650313a30cbd2/13e063f81b8fc046#13e063f81b8fc046&#34;&gt;Complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;string-pain-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a95fa7c746d4701a-cb333037a316bf59-cb333037a316bf59&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a95fa7c746d4701a/cb333037a316bf59#cb333037a316bf59&#34;&gt;String Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip wondered what exactly set &lt;code&gt;str&lt;/code&gt; apart from &lt;code&gt;Str&lt;/code&gt; and the impact this difference had on Unicode support. Larry and Rod Adams explained that &lt;code&gt;str&lt;/code&gt; specifies a raw bytes view of strings and requires explicit casts between different Unicode levels.&lt;/p&gt;

&lt;h4 id=&#34;xx-on-coderefs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f092a633812dd0f2-968acd5602237302-968acd5602237302&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f092a633812dd0f2/968acd5602237302#968acd5602237302&#34;&gt;&lt;code&gt;xx&lt;/code&gt; on Coderefs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered if the &lt;code&gt;xx&lt;/code&gt; operator could include overloading to run a coderef repeatedly and slap the results together. Others liked it, but there was no word from on high.&lt;/p&gt;

&lt;h4 id=&#34;running-pugs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c934ac4a3d8062fb-b2e6bc96f946f634-b2e6bc96f946f634&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c934ac4a3d8062fb/b2e6bc96f946f634#b2e6bc96f946f634&#34;&gt;Running Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble had some strange problems with Pugs&amp;rsquo; &lt;code&gt;make install&lt;/code&gt; target. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;manipulating-many-dimensional-hashes-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-acceda3b5d2f187e-2ec6fd2eccb43de7-2ec6fd2eccb43de7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/acceda3b5d2f187e/2ec6fd2eccb43de7#2ec6fd2eccb43de7&#34;&gt;Manipulating Many Dimensional Hashes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Zhuang Li wanted to know how to manipulate hashes of unknown dimension. Luke Palmer provided the answer.&lt;/p&gt;

&lt;h4 id=&#34;semantics-of-currying-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-24aa21dd6f97b3b0-7ad67c4f07be22f8-7ad67c4f07be22f8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24aa21dd6f97b3b0/7ad67c4f07be22f8#7ad67c4f07be22f8&#34;&gt;Semantics of Currying&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman has been implementing currying in Pugs. As such, he has found some of the under-specified corner cases. Thus he, Larry, Luke Palmer, and Thomas Sandlaß delved into these mysteries.&lt;/p&gt;

&lt;h4 id=&#34;multi-paradigmatic-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4cfcd0a1d4f53443-b41f615fc1e53d96-b41f615fc1e53d96&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4cfcd0a1d4f53443/b41f615fc1e53d96#b41f615fc1e53d96&#34;&gt;Multi-paradigmatic Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Someone named Eddie posted a fairly long message to p6l on the Google Groups interface suggesting that Perl 6 support delegation and other programming paradigms. Sadly, no one told him that it already does both of those things, because nobody saw his email. Google Groups does not send messages back to the list.&lt;/p&gt;

&lt;h4 id=&#34;nb-for-pugs-on-low-memory-machines-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-0af412a7054b8d13-4479115dcdc51e44-4479115dcdc51e44&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0af412a7054b8d13/4479115dcdc51e44#4479115dcdc51e44&#34;&gt;NB for Pugs on Low Memory Machines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble posted a helpful warning about installing Pugs on machines with less than 200 MB of memory. Unfortunately he also posted it to Google Groups. People should stop doing that. Is there some way to tell Google to prevent them from doing that?&lt;/p&gt;

&lt;h4 id=&#34;pleac-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b29d689814d0a50e-bd6ed3ba5ee17ffb-bd6ed3ba5ee17ffb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b29d689814d0a50e/bd6ed3ba5ee17ffb#bd6ed3ba5ee17ffb&#34;&gt;PLEAC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Tim Bunce suggested that people could add programming examples to PLEAC for Perl 6. Of course they should run in Pugs if they are being released to the world at large.&lt;/p&gt;

&lt;h4 id=&#34;annotating-code-with-documentation-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ee84f795b861a961-7df6e2459c0bead8-7df6e2459c0bead8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ee84f795b861a961/7df6e2459c0bead8#7df6e2459c0bead8&#34;&gt;Annotating Code with Documentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip wants to be able to document his code by attaching documentation directly to it. This would allow for nifty introspective features. Larry pointed out that code will have access to the surrounding POD.&lt;/p&gt;

&lt;h4 id=&#34;typo-in-s03&#34;&gt;Typo in S03&lt;/h4&gt;

&lt;p&gt;Aaron Sherman pointed out a typo in S03. Luke Palmer explained that dev.perl.org did not mirror the svn tree just yet. Juerd found one too and received the same answer. This time, though, Robert Spier put in the necessary magic so that dev.perl.org would update from svn.perl.org.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/68a7e0178a8a95f7/09503722ee7bc48d#09503722ee7bc48d&#34;&gt;Aaron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/65be84ce6c31bbbf/f5c9381e2193c02c#f5c9381e2193c02c&#34;&gt;Juerd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;optimization-hints-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a89f6bf2170ebc88-27fab5f0a8dc612c-27fab5f0a8dc612c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a89f6bf2170ebc88/27fab5f0a8dc612c#27fab5f0a8dc612c&#34;&gt;Optimization Hints&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman noted that Perl 6 has some ability to provide lexically scoped hints and suggested a few more things that might be hintable. Larry opened the door for him to try to design such features.&lt;/p&gt;

&lt;h4 id=&#34;s29-update-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-17969d56c1fb86e0-849d4e45300554bd-849d4e45300554bd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/17969d56c1fb86e0/849d4e45300554bd#849d4e45300554bd&#34;&gt;S29 Update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams&amp;rsquo; efforts to update S29 continue to push a very large thread about things including numification of strings and various core operators.&lt;/p&gt;

&lt;h4 id=&#34;string-positions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-afad6d022c082774-1c880e5b9a5d101b-1c880e5b9a5d101b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/afad6d022c082774/1c880e5b9a5d101b#1c880e5b9a5d101b&#34;&gt;String Positions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman wanted a more OO way to look at the OS. Larry did not really agree but suggested that someone could create a proxy object which would reference all of those globals. Then a conversation about having units attached to numbers sprang up. That sounds like a good module to me.&lt;/p&gt;

&lt;h4 id=&#34;modify-and-assign-operators-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1813d3d7b46c1bc5-bf70c18431f210b4-bf70c18431f210b4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1813d3d7b46c1bc5/bf70c18431f210b4#bf70c18431f210b4&#34;&gt;&lt;code&gt;modify&lt;/code&gt; and &lt;code&gt;assign&lt;/code&gt; Operators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige wondered if there was a complete list of operators anywhere, because he could not find &lt;code&gt;~^=&lt;/code&gt; (string xor) documented anywhere. Larry explained that the assign should probably be a meta operator to allow for better extensibility&lt;/p&gt;

&lt;h4 id=&#34;p5-gt-p6-guide-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6bf1b2d4d5ffaf32-b107fe5aac5709d2-b107fe5aac5709d2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6bf1b2d4d5ffaf32/b107fe5aac5709d2#b107fe5aac5709d2&#34;&gt;p5 -&amp;gt; p6 Guide&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble wondered if there was a basic p5 -&amp;gt; p6 guide. Unfortunately he posted to Google Groups.&lt;/p&gt;

&lt;h4 id=&#34;method-vs-self-method-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-cf458503a5ec514f-2ea8a9d3e3e0fc75-2ea8a9d3e3e0fc75&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cf458503a5ec514f/2ea8a9d3e3e0fc75#2ea8a9d3e3e0fc75&#34;&gt;&lt;code&gt;$_.method&lt;/code&gt; vs &lt;code&gt;$self.method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The debate about whether &lt;code&gt;.method&lt;/code&gt; should mean &lt;code&gt;$self.method&lt;/code&gt; or &lt;code&gt;$_.method&lt;/code&gt; continued. &lt;code&gt;$self&lt;/code&gt; is still winning.&lt;/p&gt;

&lt;h4 id=&#34;typo-problems-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f6f0b8c28f4a7e00-d89b9178125802ca-d89b9178125802ca&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f6f0b8c28f4a7e00/d89b9178125802ca#d89b9178125802ca&#34;&gt;Typo Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It seems that Juerd has typing problems. He wanted to know if he could form a support group. Apparently he can only if he uses vim.&lt;/p&gt;

&lt;h4 id=&#34;renaming-flattening-and-slurp&#34;&gt;Renaming Flattening and Slurp&lt;/h4&gt;

&lt;p&gt;Terrence Brannon wants to change the terms &amp;ldquo;flatten&amp;rdquo; and &amp;ldquo;slurp&amp;rdquo; to something else. Larry told him that this usage was unlikely to change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6364ee28da83e810/fe2a9bb6f846a662#fe2a9bb6f846a662&#34;&gt;Flatten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/699cf7f622b1e571/a9bb20ee75538f60#a9bb20ee75538f60&#34;&gt;Slurp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;how-read-only-is-read-only-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4a8eb25e57148fcb-03ba459e92fde91a-03ba459e92fde91a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4a8eb25e57148fcb/03ba459e92fde91a#03ba459e92fde91a&#34;&gt;How Read-Only is Read-Only?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip wondered how deep read-only-ness or &lt;code&gt;is copy&lt;/code&gt;-itude went on arguments. The answer appears to be: shallow. This led to a very long discussion of how much type checking will actually occur.&lt;/p&gt;

&lt;h4 id=&#34;pick-on-non-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-24e369fba3ed626e-6e6a2aad1dcc879d-6e6a2aad1dcc879d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24e369fba3ed626e/6e6a2aad1dcc879d#6e6a2aad1dcc879d&#34;&gt;&lt;code&gt;pick&lt;/code&gt; on Non-Junctions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what &lt;code&gt;pick&lt;/code&gt; would do on an array or a hash. Many folk explained that it would remove and return an item or pair from the container respectively. Larry commented that &lt;code&gt;pick&lt;/code&gt; on a hash could be harder than it looks.&lt;/p&gt;

&lt;h4 id=&#34;built-in-multi-methods-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-50079a618601b80d-e7c815b3765d8103-e7c815b3765d8103&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/50079a618601b80d/e7c815b3765d8103#e7c815b3765d8103&#34;&gt;Built-in Multi Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian wondered if some of the common functions called on strings would actually be methods. Larry answered that they would more likely be multis to allow for easier extension.&lt;/p&gt;

&lt;h4 id=&#34;comparing-two-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a264690496f82a28-383b82ce7c84105e-383b82ce7c84105e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a264690496f82a28/383b82ce7c84105e#383b82ce7c84105e&#34;&gt;Comparing Two References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan wanted to know if &lt;code&gt;=:=&lt;/code&gt; was the correct operator for testing if two variables refer to the same object. Larry explained that it was. This led to a debate about how easily people can deal with chains of references in Perl 6.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-test-failures-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-7ec5b9680b2e2b25-44dd1e2c65a9ec0e-44dd1e2c65a9ec0e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7ec5b9680b2e2b25/44dd1e2c65a9ec0e#44dd1e2c65a9ec0e&#34;&gt;Pugs Test Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda worriedly reported 115 failing subtests in Pugs. Stevan Little explained that this was normal for between releases and was really more of a TODO list than a problem.&lt;/p&gt;

&lt;h4 id=&#34;pugs-darcs-repo-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-403ad974f7e3295d-be5a3ad79573ae3f-be5a3ad79573ae3f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/403ad974f7e3295d/be5a3ad79573ae3f#be5a3ad79573ae3f&#34;&gt;Pugs Darcs Repo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Greg Buchholz noticed that the darcs repo for Pugs has trouble staying up to date. Tupshin Harper suggested using &lt;code&gt;darcs whatsnew --look-for-adds --summary&lt;/code&gt; to find the offending files.&lt;/p&gt;

&lt;h4 id=&#34;begin-time-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-7d0fcc2e85d25883-7c202ea0f1302c96-7c202ea0f1302c96&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7d0fcc2e85d25883/7c202ea0f1302c96#7c202ea0f1302c96&#34;&gt;&lt;code&gt;BEGIN {}&lt;/code&gt; Time&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered when &lt;code&gt;BEGIN&lt;/code&gt; should run. Markus Laire posted a useful summary of when the various CAPITAL things should run. Larry confirmed Autrijus&amp;rsquo; suspicion.&lt;/p&gt;

&lt;h4 id=&#34;yaml-test-output-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-244ea8a4b952c9c2-71eff01bb226d6e1-71eff01bb226d6e1&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/244ea8a4b952c9c2/71eff01bb226d6e1#71eff01bb226d6e1&#34;&gt;YAML Test Output&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nathan Gray wondered if he should change his tests log to YAML output. Stevan Little pointed him to &lt;a href=&#34;https://metacpan.org/pod/Test::Harness::Straps&#34;&gt;Test::Harness::Straps&lt;/a&gt;, which can collect test output and transform it.&lt;/p&gt;

&lt;h4 id=&#34;semicolons-in-p6-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-c08bbb8c8ba05f23-e425757e0f39458d-e425757e0f39458d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/c08bbb8c8ba05f23/e425757e0f39458d#e425757e0f39458d&#34;&gt;Semicolons in p6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige found some strange behavior with respect to statement separation in Pugs. He thought that perhaps semicolons had changed their status. They haven&amp;rsquo;t.&lt;/p&gt;

&lt;h4 id=&#34;ugly-dog-meets-ugly-bird-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2996dd373c00a9f0-bdf1c3471a53045b-bdf1c3471a53045b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2996dd373c00a9f0/bdf1c3471a53045b#bdf1c3471a53045b&#34;&gt;Ugly Dog Meets Ugly Bird&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Pugs r2^10 can compile p6 to imc which Parrot can run. I think I speak for everyone when I say &amp;ldquo;Wow. Nice work, Autrijus.&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;string-interpolation-and-various-special-variables-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-4cff94d05a0f66e8-5865ad1edbec35a3-5865ad1edbec35a3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/4cff94d05a0f66e8/5865ad1edbec35a3#5865ad1edbec35a3&#34;&gt;String Interpolation and Various Special Variables&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige noticed a couple of odd corner cases for string interpolation in Pugs. This led to a discussion of which special variables (like &lt;code&gt;$!&lt;/code&gt;, &lt;code&gt;$/&lt;/code&gt;, and &lt;code&gt;$&amp;quot;&lt;/code&gt;) will continue to exist.&lt;/p&gt;

&lt;h4 id=&#34;code-coverage-metadata-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-92946e6c221cea6e-bee7738ae13d3611-bee7738ae13d3611&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/92946e6c221cea6e/bee7738ae13d3611#bee7738ae13d3611&#34;&gt;Code Coverage Metadata&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Paul Johnson posted a list of requirements he would like to see satisfied so that he can easily generate Perl 6 coverage reports. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;pugs-release&#34;&gt;Pugs Release&lt;/h4&gt;

&lt;p&gt;As is the fashion, Pugs went through two minor releases during this two week period: 6.0.13 and 6.0.14.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/d977531c8c3c26a6/fef6c555d7f2d77f#fef6c555d7f2d77f&#34;&gt;6.0.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/503f0f59d17d6de6/fc3c3dfa03be639b#fc3c3dfa03be639b&#34;&gt;6.0.14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;text-editor-support-for-perl-6-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-06170de60f15c7d1-b8af8ddd9f6668e6-b8af8ddd9f6668e6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/06170de60f15c7d1/b8af8ddd9f6668e6#b8af8ddd9f6668e6&#34;&gt;Text Editor Support for Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan suggested that it might be a good idea for people to begin prepping their favorite text editors to handle Perl 6 syntax correctly. Why stop at syntax? I know I want to be able to type &lt;code&gt;:perl6do&lt;/code&gt; in vim.&lt;/p&gt;

&lt;h4 id=&#34;makefile-pl-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b908159d1d42be9d-4f7c49cf1c4913eb-4f7c49cf1c4913eb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b908159d1d42be9d/4f7c49cf1c4913eb#4f7c49cf1c4913eb&#34;&gt;&lt;code&gt;Makefile.PL&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan noticed that most things in Pugs use Perl 6, while &lt;code&gt;Makefile.PL&lt;/code&gt; was still Perl 5. He suggested writing the &lt;code&gt;Makefile.PL&lt;/code&gt;s in various modules in Perl 6 also. He then began work on a &lt;code&gt;Pugs::Makemaker&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a54799a8447544d7/75deb16e3f23bba6#75deb16e3f23bba6&#34;&gt;Work Begins&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;pugs-to-become-a-perl-6-gt-parrot-ast-compiler-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-a3de948450686dfb-f8bd616ed25e8ba9-f8bd616ed25e8ba9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a3de948450686dfb/f8bd616ed25e8ba9#f8bd616ed25e8ba9&#34;&gt;Pugs to Become a Perl 6 -&amp;gt; Parrot AST Compiler&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus explained that he was planning on steering Pugs toward becoming a Perl 6 -&amp;gt; Parrot compiler which would interpret code (when Parrot is not available) by mapping imc to Haskell.&lt;/p&gt;

&lt;h4 id=&#34;pugs-re-org-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-7c8a2fde84a44680-cc7ccf80f1db6b9f-cc7ccf80f1db6b9f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/7c8a2fde84a44680/cc7ccf80f1db6b9f#cc7ccf80f1db6b9f&#34;&gt;Pugs Re-org&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little suggested rearranging the Pugs repository a bit. The end result is that modules which don&amp;rsquo;t run in Pugs (yet) should go in &lt;code&gt;modules/&lt;/code&gt; while those which do should go in &lt;code&gt;ext/&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;yapc-na-pugs-hack-a-thon-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-b7654876184c315a-e5c177b644291946-e5c177b644291946&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/b7654876184c315a/e5c177b644291946#e5c177b644291946&#34;&gt;YAPC::NA Pugs hack-a-thon&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;John Macdonald posted his plan for the&lt;code&gt;YAPC::NA&lt;/code&gt; Pugs hack-a-thon. His description of the location makes me want to take time off work to go.&lt;/p&gt;

&lt;h4 id=&#34;split-semantics-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-bbfafdaf0f206314-bcb73c32ffd9f8f4-bcb73c32ffd9f8f4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/bbfafdaf0f206314/bcb73c32ffd9f8f4#bcb73c32ffd9f8f4&#34;&gt;&lt;code&gt;split&lt;/code&gt; Semantics&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little found a bug in Pugs&amp;rsquo; &lt;code&gt;split&lt;/code&gt;. Autrijus fixed it, but noted that he had not replicated the full, bizarre semantics of Perl 5 (which come from awk). Larry told him not to work too hard on it, as it would probably work in Perl 6 through a separate function.&lt;/p&gt;

&lt;h4 id=&#34;statement-modifiers-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-e655790aec06ff1c-b6bc7f344224557d-b6bc7f344224557d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/e655790aec06ff1c/b6bc7f344224557d#b6bc7f344224557d&#34;&gt;Statement Modifiers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A bug in Pugs&amp;rsquo; parsing led Autrijus to seek information from a higher authority. Larry explained the power of statement modifiers.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;move-perl-tests-out-of-pmc-pmc-t-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5d07eef5fd6cc4e8-ae7deac783274d56-ae7deac783274d56&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5d07eef5fd6cc4e8/ae7deac783274d56#ae7deac783274d56&#34;&gt;Move Perl Tests Out of &lt;code&gt;pmc/pmc.t&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steven Schubiger volunteered to reorganize &lt;code&gt;pmc/*.t&lt;/code&gt; last time. He did it, and Leo applied the patches.&lt;/p&gt;

&lt;h4 id=&#34;areas-of-focus-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bf62dabc84b701c6-14246cc09d5e5efd-14246cc09d5e5efd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bf62dabc84b701c6/14246cc09d5e5efd#14246cc09d5e5efd&#34;&gt;Areas of Focus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip, in a circumloquacious attempt to come up to speed, indirectly asked what design issues needed attention. Leo explained the CPS issues that bogged down Parrot of late.&lt;/p&gt;

&lt;h4 id=&#34;improving-mingw-docs-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c64adac9b6b4b822-0b570c16d600dffd-0b570c16d600dffd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c64adac9b6b4b822/0b570c16d600dffd#0b570c16d600dffd&#34;&gt;Improving MinGW Docs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch improving the documentation for building with MinGW. Leo applied part of it.&lt;/p&gt;

&lt;h4 id=&#34;moving-pmc2c2-pl-or-pmc2c-pl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0cbe09585e5a3aed-75773e6add39f91b-75773e6add39f91b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0cbe09585e5a3aed/75773e6add39f91b#75773e6add39f91b&#34;&gt;Moving &lt;code&gt;pmc2c2.pl&lt;/code&gt; or &lt;code&gt;pmc2c.pl&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse opened an RT ticket for cleaning up the file system (specifically &lt;code&gt;pmc2c2?.pl&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&#34;the-learned-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-a5c89c1afb285fda-6de665799f024868-6de665799f024868&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a5c89c1afb285fda/6de665799f024868#6de665799f024868&#34;&gt;The Learned Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Christian Aperghis-Tramoni reported that he has had success using Parrot assembly as a teaching tool.&lt;/p&gt;

&lt;h4 id=&#34;performance-and-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-17d6d6f97b715e1c-ca0ffab9e2314369-ca0ffab9e2314369&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/17d6d6f97b715e1c/ca0ffab9e2314369#ca0ffab9e2314369&#34;&gt;Performance and Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Falcon posted a series of questions about Parrot in a fairly general sense. Unfortunately, because he posted it to Google Groups, Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;first-mmd-call-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-98dbeeeefc63093c-e4d842b427760caf-e4d842b427760caf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/98dbeeeefc63093c/e4d842b427760caf#e4d842b427760caf&#34;&gt;First MMD call&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a first MMD call which uses an MMD PMC and a fair amount of hand-made calling conventions set up.&lt;/p&gt;

&lt;h4 id=&#34;openbsd-atan2-trouble-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f0304137d88751b6-7fb8c5d8b405e5ff-7fb8c5d8b405e5ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f0304137d88751b6/7fb8c5d8b405e5ff#7fb8c5d8b405e5ff&#34;&gt;OpenBSD &lt;code&gt;atan2&lt;/code&gt; Trouble&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Peters noticed that &lt;code&gt;atan2&lt;/code&gt; on OpenBSD is not quite right.&lt;/p&gt;

&lt;h4 id=&#34;api-change-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d3e1c7eadf5f7192-71a24123fabd55b8-71a24123fabd55b8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d3e1c7eadf5f7192/71a24123fabd55b8#71a24123fabd55b8&#34;&gt;API Change&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo changed various packfile functions to take an &lt;code&gt;Interp*&lt;/code&gt; argument. This does change the embedding API, but it had to be done.&lt;/p&gt;

&lt;h4 id=&#34;pmc2c2-pl-cleanup&#34;&gt;&lt;code&gt;pmc2c2.pl&lt;/code&gt; Cleanup&lt;/h4&gt;

&lt;p&gt;Leo pointed out that &lt;code&gt;pmc2c2.pl&lt;/code&gt; was not functioning correctly on all platforms. He put out a call for interested parties. Matt Diephouse provided a patch to clean up the internals of &lt;code&gt;pmc2c2.pl&lt;/code&gt; a bit. Leo applied it. Peter Sinnott returned a &lt;code&gt;$&lt;/code&gt; that got lost in the shuffle, and chromatic applied it. Matt went on to add better comments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/06a1f8e695ef1aa1/c47eb087e2a86dd5#c47eb087e2a86dd5&#34;&gt;Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33304f22363ae810/81b48613c09a87ee#81b48613c09a87ee&#34;&gt;Refactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/523ee2c3f024ea21/025c3cf568cdc087#025c3cf568cdc087&#34;&gt;$ Found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/a032216f4e4d4a71/e9221136e02bf015#e9221136e02bf015&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;readme-win32-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-56fd45369cc73260-952fba174cef9d9a-952fba174cef9d9a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/56fd45369cc73260/952fba174cef9d9a#952fba174cef9d9a&#34;&gt;&lt;code&gt;README.win32&lt;/code&gt; Update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Klaas-Jan Stol provided an update to the &lt;code&gt;README.win32&lt;/code&gt; directions. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;set-non-zero-null-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9c9bf38c5ca50048-11363375f1e55224-11363375f1e55224&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9c9bf38c5ca50048/11363375f1e55224#11363375f1e55224&#34;&gt;&lt;code&gt;SET_NON_ZERO_NULL&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip wondered why Parrot had a SET_NON_ZERO_NULL macro and suggested removing it. The answer was, of course, speed. On architectures with a zero null, this can be a no-op allowing the use of &lt;code&gt;calloc()&lt;/code&gt;. Otherwise it has to do something.&lt;/p&gt;

&lt;h4 id=&#34;pmc-constants-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ff04eefc36e9ea76-c72babeefba6f5a3-c72babeefba6f5a3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ff04eefc36e9ea76/c72babeefba6f5a3#c72babeefba6f5a3&#34;&gt;PMC Constants&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for &lt;code&gt;.const&lt;/code&gt; things to imc. Unfortunately, the GC eats them so you can&amp;rsquo;t use it yet.&lt;/p&gt;

&lt;h4 id=&#34;garbage-collection-and-hash-creation-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5b6a6e14efa7b74d-cdd2e03ca8a80a7f-cdd2e03ca8a80a7f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5b6a6e14efa7b74d/cdd2e03ca8a80a7f#cdd2e03ca8a80a7f&#34;&gt;Garbage Collection and Hash Creation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer&amp;rsquo;s LISP implementation revealed a bug in the hash creation sequence. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;md5-update-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f1c260366651efd4-021b233898e21a3a-021b233898e21a3a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f1c260366651efd4/021b233898e21a3a#021b233898e21a3a&#34;&gt;MD5 Update&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross provided an update to the MD5 library. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;tcl-updates&#34;&gt;Tcl Updates&lt;/h4&gt;

&lt;p&gt;Will Coleda has been updating Tcl. He moved the parser into a PMC. Then he tried to add octal and hex escapes only to discover missing transcodings. He also found missing hash functions, but Leo fixed that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/01fb6c6708902757/7e63bfff44b38cf3#7e63bfff44b38cf3&#34;&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f99a9979165e08dd/fd4c8b0780abb7b6#fd4c8b0780abb7b6&#34;&gt;Transcodings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/46298cb009469440/84a812d27e659c62#84a812d27e659c62&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;logging-irc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e21a3949e4760878-5efff144d804f62e-5efff144d804f62e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e21a3949e4760878/5efff144d804f62e#5efff144d804f62e&#34;&gt;Logging IRC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Someone suggested that we start to log IRC. Chip suggested that this might not be cost effective as such logs are 99% dross and 1% value. He suggests instead that people paste the good part into emails for the list. I know that I, for one, would not volunteer to summarize IRC.&lt;/p&gt;

&lt;h4 id=&#34;segfault-generating-config-fpmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e969976fbb944239-7b3eab465b44ab5a-7b3eab465b44ab5a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e969976fbb944239/7b3eab465b44ab5a#7b3eab465b44ab5a&#34;&gt;Segfault Generating &lt;code&gt;config.fpmc&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;chromatic (as his Linux PPC is wont to do) found a bug in the build. He fixed it, and Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;lazy-lazy-steve-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-89a3517b473389fd-860892e9d0f5b12f-860892e9d0f5b12f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/89a3517b473389fd/860892e9d0f5b12f#860892e9d0f5b12f&#34;&gt;Lazy, Lazy Steve&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added a first implementation of a Lazy PMC for Autrijus to play with.&lt;/p&gt;

&lt;h4 id=&#34;win32-make-install-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f047aae076f5df5d-0ab639455638d725-0ab639455638d725&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f047aae076f5df5d/0ab639455638d725#0ab639455638d725&#34;&gt;Win32 &lt;code&gt;make install&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch fixing &lt;code&gt;MANIFEST.generated&lt;/code&gt; for Win32. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;parrot-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5417ba0786150aa6-43f10dcc8c2e9c58-43f10dcc8c2e9c58&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5417ba0786150aa6/43f10dcc8c2e9c58#43f10dcc8c2e9c58&#34;&gt;Parrot on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke spent some time fixing Parrot on Win32, extending it to provide a shared library.&lt;/p&gt;

&lt;h4 id=&#34;mod-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-837c5d3bf114b39e-a67922987c2a4498-a67922987c2a4498&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/837c5d3bf114b39e/a67922987c2a4498#a67922987c2a4498&#34;&gt;mod_parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz released mod_parrot 0.2. It includes nifty features like the beginning of an interpreter pool.&lt;/p&gt;

&lt;h4 id=&#34;c90-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9fa5bf0bf84e783a-f0e37d095ada4337-f0e37d095ada4337&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9fa5bf0bf84e783a/f0e37d095ada4337#f0e37d095ada4337&#34;&gt;C90 Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Peter Sinnott moved a few declarations further up. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;mmd-on-argument-count&#34;&gt;MMD on Argument Count&lt;/h4&gt;

&lt;p&gt;Leo added the ability to MMD on argument count and PMC types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/77ca782dd06c0271/4c42835ce6388c3d#4c42835ce6388c3d&#34;&gt;Count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5326320dee6c5480/6c5f23d859e7a2f4#6c5f23d859e7a2f4&#34;&gt;Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;documentation-typos-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-12f6f0ef9392c03d-8ebff13ccba5eb58-8ebff13ccba5eb58&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/12f6f0ef9392c03d/8ebff13ccba5eb58#8ebff13ccba5eb58&#34;&gt;Documentation Typos&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Offer Kaye fixed a few typos. chromatic applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;pmc-freeze-t-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-eaf8660cb92100bf-006a51cbb9bdc9b3-006a51cbb9bdc9b3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/eaf8660cb92100bf/006a51cbb9bdc9b3#006a51cbb9bdc9b3&#34;&gt;&lt;code&gt;pmc freeze.t&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo admired the trickiness of Bernhard Schmalhofer in his &lt;code&gt;freeze&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h4 id=&#34;sys-t-failure-on-mingw-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c0e9e185719ea7ae-f818bdab1df8b19f-f818bdab1df8b19f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c0e9e185719ea7ae/f818bdab1df8b19f#f818bdab1df8b19f&#34;&gt;&lt;code&gt;sys.t&lt;/code&gt; failure on MinGW&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad fixed a test failure on MinGW. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;builtin-namespaces-issue-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6e795edbac04ef39-23e648965fbcafdf-23e648965fbcafdf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6e795edbac04ef39/23e648965fbcafdf#23e648965fbcafdf&#34;&gt;Builtin Namespaces Issue&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Peter Sinnott pointed out some failing tests. Leo fixed them.&lt;/p&gt;

&lt;h4 id=&#34;locate-runtime-file-error-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c6eb0df40f37237c-6b4165aed54fd51a-6b4165aed54fd51a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c6eb0df40f37237c/6b4165aed54fd51a#6b4165aed54fd51a&#34;&gt;&lt;code&gt;locate_runtime_file&lt;/code&gt; Error&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers provide a patch to switch &lt;code&gt;PARROT_TEST&lt;/code&gt; to 1 by default. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;bytecode-re-entrance-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fe139bf30260fa2e-aa1df4154c4e828a-aa1df4154c4e828a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fe139bf30260fa2e/aa1df4154c4e828a#aa1df4154c4e828a&#34;&gt;Bytecode Re-entrance&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nigel Sandever had some questions about how Parrot and threading worked. Melvin Smith provided the answers.&lt;/p&gt;

&lt;h4 id=&#34;pugs-questions-for-parrot-faq-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2df9d71e603fc2af-0236d8408d5c696f-0236d8408d5c696f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2df9d71e603fc2af/0236d8408d5c696f#0236d8408d5c696f&#34;&gt;Pugs Questions for Parrot FAQ&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark noted that the question of why bother with Parrot when one has Pugs has come up recently. The answer went into the Parrot FAQ: speed.&lt;/p&gt;

&lt;h4 id=&#34;pascal-for-perl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0d03005eee522bfa-7327ab601eeae744-7327ab601eeae744&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d03005eee522bfa/7327ab601eeae744#7327ab601eeae744&#34;&gt;Pascal for Perl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sven Schubert wondered if people had any suggestions for how to get PAPAgei (his Pacal for Parrot compiler) up and running quickly. Leo told him to stick with the tools he knows rather than going too far afield.&lt;/p&gt;

&lt;h4 id=&#34;infix-op-proposal&#34;&gt;Infix Op Proposal&lt;/h4&gt;

&lt;p&gt;Leo posted his proposal for how to revamp infix ops. Nicholas Clark and Luke Palmer asked a few questions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9872731839119930/18f0a04dcae50a5b#18f0a04dcae50a5b&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/472630c2b0603134/0815f5def2528387#0815f5def2528387&#34;&gt;Moae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;lexical-pad-depth-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-27ad49203fb127e9-860547f9152f1c15-860547f9152f1c15&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/27ad49203fb127e9/860547f9152f1c15#860547f9152f1c15&#34;&gt;Lexical Pad Depth&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer wondered how to find the depth of the lexical pad stack. Leo told him.&lt;/p&gt;

&lt;h4 id=&#34;win32-exit-codes-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-212955f9b4d3a2ad-c4c5e050ce386f1b-c4c5e050ce386f1b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/212955f9b4d3a2ad/c4c5e050ce386f1b#c4c5e050ce386f1b&#34;&gt;Win32 Exit Codes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke noticed that there were tests failing on Win32 because the exit code was not in the high 8 bits, but appeared directly. Leo suggested looking to Perl 5 for prior art on what to do.&lt;/p&gt;

&lt;h4 id=&#34;other-languages-on-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-72c0c2401220a3dd-6584831afd40324c-6584831afd40324c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/72c0c2401220a3dd/6584831afd40324c#6584831afd40324c&#34;&gt;Other Languages on Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bloves wondered if any other compilers were currently working toward targeting Parrot. I pointed him to Cardinal, a Ruby compiler for Parrot that appears dead.&lt;/p&gt;

&lt;h4 id=&#34;parrot64-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-efedec7ce9c44b2a-e5769b252a9941c3-e5769b252a9941c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/efedec7ce9c44b2a/e5769b252a9941c3#e5769b252a9941c3&#34;&gt;Parrot64&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble wondered if there has been any work on Parrot for AMD64. The answer is: some, but nobody told him because he posted to Google Groups.&lt;/p&gt;

&lt;h4 id=&#34;parrot-win32-setup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-54aba6b5de626a03-990013f2549886ff-990013f2549886ff&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/54aba6b5de626a03/990013f2549886ff#990013f2549886ff&#34;&gt;Parrot Win32-Setup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch that creates a standard binary distribution for Win32. There was some debate over the name of the make target, but François is ready to send an updated version at Leo&amp;rsquo;s command.&lt;/p&gt;

&lt;h4 id=&#34;calling-convention-abstraction-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d0fe25767929714f-c1f5f17efc7b6560-c1f5f17efc7b6560&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0fe25767929714f/c1f5f17efc7b6560#c1f5f17efc7b6560&#34;&gt;Calling Convention Abstraction&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leopold Toetsch proposed a calling convention abstraction that would allow Parrot to change its ABI a little more freely in the future. Roget Hale asked a few questions which Leo answered.&lt;/p&gt;

&lt;h4 id=&#34;no-0-size-arrays-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-63feffac3e90a07e-c2a932928fb1c823-c2a932928fb1c823&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/63feffac3e90a07e/c2a932928fb1c823#c2a932928fb1c823&#34;&gt;No 0 Size Arrays&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke noticed a broken Windows build, because of a 0 sized array. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;unicode-string-literal-assertion-failed-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5583663eb8a02b6f-7d4a76dfd09b45ee-7d4a76dfd09b45ee&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5583663eb8a02b6f/7d4a76dfd09b45ee#7d4a76dfd09b45ee&#34;&gt;Unicode String Literal Assertion Failed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda discovered a failing assertion in &lt;code&gt;utf8.c&lt;/code&gt;. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;nci-call-signature-change-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-99d4af353893d1a1-b00816d25aff741a-b00816d25aff741a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/99d4af353893d1a1/b00816d25aff741a#b00816d25aff741a&#34;&gt;NCI Call Signature Change&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo changed the call signature for NCI to make &lt;code&gt;I&lt;/code&gt; mean INTVAL and &lt;code&gt;J&lt;/code&gt; mean Parrot Interpreter.&lt;/p&gt;

&lt;h4 id=&#34;builtin-infix-multis-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-cf0aec53e126c012-4fbb010b37b34fec-4fbb010b37b34fec&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cf0aec53e126c012/4fbb010b37b34fec#4fbb010b37b34fec&#34;&gt;Builtin Infix Multis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo added support for MMD on infix multis.&lt;/p&gt;

&lt;h4 id=&#34;touch-vs-utime-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2b4206275a5bf5b6-7c1e998cc73ecac4-7c1e998cc73ecac4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2b4206275a5bf5b6/7c1e998cc73ecac4#7c1e998cc73ecac4&#34;&gt;&lt;code&gt;touch&lt;/code&gt; vs &lt;code&gt;utime&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip asked if there was a reason that the &lt;code&gt;TOUCH&lt;/code&gt; variable doesn&amp;rsquo;t use &lt;code&gt;utime&lt;/code&gt;. Michael G. Schwern suggested &lt;a href=&#34;https://metacpan.org/pod/ExtUtils::Command&#34;&gt;ExtUtils::Command&lt;/a&gt;. Steve Peters points out that &lt;code&gt;utime&lt;/code&gt; works only on existing files.&lt;/p&gt;

&lt;h4 id=&#34;make-imcc-l-for-modern-flex-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8dc8adf441fa6805-173d69e1fc260fda-173d69e1fc260fda&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8dc8adf441fa6805/173d69e1fc260fda#173d69e1fc260fda&#34;&gt;&lt;code&gt;make imcc.l&lt;/code&gt; For Modern Flex&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip opened a TODO for updating &lt;code&gt;imcc.l&lt;/code&gt; to modern flex.&lt;/p&gt;

&lt;h4 id=&#34;mac-os-x-build-broken&#34;&gt;Mac OS X Build Broken&lt;/h4&gt;

&lt;p&gt;Will Coleda reported a broken build on Mac OS X with undefined symbols. Leo found the cause and reverted it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5e58af5059fa2946/356b9e568eca3039#356b9e568eca3039&#34;&gt;Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4d012f6c68ffb933/1b1ec3ecc2e16fb0#1b1ec3ecc2e16fb0&#34;&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;svn-switch-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8eece4a7517b63cd-91249b1c59096f12-91249b1c59096f12&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8eece4a7517b63cd/91249b1c59096f12#91249b1c59096f12&#34;&gt;SVN Switch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After much debate, the decision to switch from CVS to SVN has happened. The move will include the removal of ICU as a dependency. &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/506f637ec0cb36cc/adc0690ef419b75d#adc0690ef419b75d&#34;&gt;Good progress&lt;/a&gt; has occurred on that front.&lt;/p&gt;

&lt;h4 id=&#34;md5-on-64-bits-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7197ff1e2d33d6ec-b0533304331f2186-b0533304331f2186&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7197ff1e2d33d6ec/b0533304331f2186#b0533304331f2186&#34;&gt;MD5 on 64 Bits&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross has been hard at work trying to fix the MD5 library for 64-bit systems. It would be easier if he had access to one.&lt;/p&gt;

&lt;h4 id=&#34;python-version-guesswork-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-caabd5aa219eebc8-d711871c5d49df91-d711871c5d49df91&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/caabd5aa219eebc8/d711871c5d49df91#d711871c5d49df91&#34;&gt;Python Version Guesswork&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke noticed that ActiveState Python reports its build as 2.4 instead of 2.4.0. He provided a patch to account for this.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6, March 7 - March 21, 2005</title>
      <link>http://localhost:1313/pub/2005/03/p6pdigest/20050321.html/</link>
      <pubDate>Thu, 24 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/p6pdigest/20050321.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to yet another fortnight&amp;rsquo;s summary. I believe this is the highest volume I have ever seen the three lists at simultaneously. Hopefully they will keep it up, because they&amp;rsquo;re doing good work. To aid the epic endeavor of summarizing all this, I have had to add some new Jazz to my playlist. We will see how it works out. If it doesn&amp;rsquo;t work well, blame Seton.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;the-actual-name-of-sub-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-038d53bce6baca3a-2bc5895525215f2f-2bc5895525215f2f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/038d53bce6baca3a/2bc5895525215f2f#2bc5895525215f2f&#34;&gt;The Actual Name of &lt;code&gt;&amp;amp;?SUB&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Storrs wanted to know how he could find the name of &lt;code&gt;&amp;amp;?SUB&lt;/code&gt;. Larry told him that &lt;code&gt;$?SUBNAME&lt;/code&gt; would be the most reliable way to get the short name.&lt;/p&gt;

&lt;h4 id=&#34;unlimited-argument-patterns-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2feef37c11edaa9e-4dd34d9d0ae95e5e-4dd34d9d0ae95e5e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2feef37c11edaa9e/4dd34d9d0ae95e5e#4dd34d9d0ae95e5e&#34;&gt;Unlimited Argument Patterns&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer has tasted the forbidden fruit of Haskell, and now he wants more of it in Perl 6. In particular he wants even more powerful pattern matching of arguments for MMD. Rod Adams speculated that Larry had decided Perl 6 would not be ML. In the end there was no real consensus, but the feeling seems to be to say &amp;ldquo;don&amp;rsquo;t hold your breath&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;limited-argument-patterns-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-bb118c7350c76657-6338e5bb22c89ba6-6338e5bb22c89ba6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/bb118c7350c76657/6338e5bb22c89ba6#6338e5bb22c89ba6&#34;&gt;Limited Argument Patterns&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian was a little unsure of what exactly &lt;code&gt;sub foo(0) {...}&lt;/code&gt; meant. Larry explained that it was just sugar for &lt;code&gt;sub foo ( $bar of Int where { $_ == 0 } $bar ) { ... }&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;list-constructors-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-322bd2ced30a06d0-c39068c3b61f780e-c39068c3b61f780e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/322bd2ced30a06d0/c39068c3b61f780e#c39068c3b61f780e&#34;&gt;List Constructors&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian made a list of list constructors, asking what each did. Larry explained: for the most part, they&amp;rsquo;re the same thing as in Perl 5, though a few will produce a warning.&lt;/p&gt;

&lt;h4 id=&#34;decorating-primitives-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-086a99985beac390-80ca81ed0f831948-80ca81ed0f831948&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/086a99985beac390/80ca81ed0f831948#80ca81ed0f831948&#34;&gt;Decorating Primitives&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The question of how decorating objects with roles interacted with low-level types arose. Larry came to the conclusion that it was okay, unless you wanted to decorate a single element in a primitive array.&lt;/p&gt;

&lt;h4 id=&#34;splat-operator-in-assignment-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-31d8c3054628253c-e9f77f4a2edd9551-e9f77f4a2edd9551&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/31d8c3054628253c/e9f77f4a2edd9551#e9f77f4a2edd9551&#34;&gt;Splat Operator in Assignment&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd was unsure how splats and list assignment interacted. The answer is that list assignment is exactly the same as Perl 5 to allow for extending a return list.&lt;/p&gt;

&lt;h4 id=&#34;logic-programming-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-63f9c15e5ef27c17-ccf0a7f26d229344-ccf0a7f26d229344&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/63f9c15e5ef27c17/ccf0a7f26d229344#ccf0a7f26d229344&#34;&gt;Logic Programming&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams pointed out that it&amp;rsquo;s possible to implement much of logic programming using the rules engine. Unfortunately, the syntax gets a little hairy and cumbersome. Larry said that this particular goal might be something that 6.0 does not address, deferring it instead. Ovid rumbled about porting a Warren Abstract Machine to Parrot. I would like it.&lt;/p&gt;

&lt;h4 id=&#34;locale-keyed-text&#34;&gt;Locale-Keyed Text&lt;/h4&gt;

&lt;p&gt;Darren Duncan finished up the first non-core Perl 6 module. Being properly hubristic, he asked for a critique. His questions touched on subjects including subtypes, module loading, and strictness.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5e1c7888b8b771c3/3f03a9a2ace1a375#3f03a9a2ace1a375&#34;&gt;Critique Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/0757424a38d65e97/a4a53ed54d48d7f4#a4a53ed54d48d7f4&#34;&gt;Misc Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;bar-f-f-bar-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d718bf73790d072e-736a522e91cb0870-736a522e91cb0870&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d718bf73790d072e/736a522e91cb0870#736a522e91cb0870&#34;&gt;&lt;code&gt;bar $f =?= $f.bar&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wondered what would happen if he had both a sub and a method named &lt;code&gt;bar&lt;/code&gt;. What would &lt;code&gt;$f.bar&lt;/code&gt; and &lt;code&gt;bar $f&lt;/code&gt; do? Jonathan Scott Duff explained that &lt;code&gt;$f.bar&lt;/code&gt; would call the method while &lt;code&gt;bar $f&lt;/code&gt; would call the sub.&lt;/p&gt;

&lt;h4 id=&#34;mmd-object-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-42a32bb7c727de7e-5891f6a40d031af2-5891f6a40d031af2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/42a32bb7c727de7e/5891f6a40d031af2#5891f6a40d031af2&#34;&gt;MMD Object&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wants a single object to represent all of the possible multi methods associated with a particular short name. It seems that Rod drank some of the Lisp Kool-Aid (although in this case, I agree). He explained how this allowed the dispatch scheme to be changed on a multi by multi basis, and also allowed for nice introspection. This led to a discussion of how this would work with lexically installed multi methods, and if this would trip people up. No real consensus appeared.&lt;/p&gt;

&lt;h4 id=&#34;foo-o-foo-o-foo-o-foo-o-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-77d165f146b6da7f-99893d787d04f496-99893d787d04f496&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/77d165f146b6da7f/99893d787d04f496#99893d787d04f496&#34;&gt;&lt;code&gt;:foo&amp;lt;o&amp;gt; != :foo(&#39;o&#39;); :foo&amp;lt;o&amp;gt; == :foo{&#39;o&#39;}&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered what the implications of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; mapping to &lt;code&gt;(&#39;a&#39;)&lt;/code&gt; were. Larry replied that it did not map in that manner.&lt;/p&gt;

&lt;h4 id=&#34;lazy-loading-of-object-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8d37df23ea9b1429-459494c94afe7681-459494c94afe7681&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8d37df23ea9b1429/459494c94afe7681#459494c94afe7681&#34;&gt;Lazy Loading of Object&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wondered how he could get his objects to load lazily. Larry told him that delegation would probably be the best bet.&lt;/p&gt;

&lt;h4 id=&#34;throwing-from-higher-up-the-call-stack-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1466172da2ed2c32-33e471f95f198b67-33e471f95f198b67&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1466172da2ed2c32/33e471f95f198b67#33e471f95f198b67&#34;&gt;Throwing From Higher Up the Call Stack&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Yandell wants a way to throw from further down the call stack. Sadly, Warnock applied.&lt;/p&gt;

&lt;h4 id=&#34;sprintf-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b02884b476fe87c7-8c7be753bf0ee372-8c7be753bf0ee372&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b02884b476fe87c7/8c7be753bf0ee372#8c7be753bf0ee372&#34;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wants a &lt;code&gt;sprintf&lt;/code&gt;-like function &lt;code&gt;f/FORMAT/EXPR/&lt;/code&gt;. Larry seems to think that &lt;code&gt;EXPR.as(FORMAT)&lt;/code&gt; will suffice, especially if it is a list op.&lt;/p&gt;

&lt;h4 id=&#34;s29-built-in-functions&#34;&gt;S29, Built-in Functions&lt;/h4&gt;

&lt;p&gt;Rod Adams has been hard at work creating &lt;a href=&#34;http://www.rodadams.net/Perl/S29.html&#34;&gt;a list of built-in Perl 6 functions&lt;/a&gt;. This led to good discussions about which things had alternate forms and which did not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1bf5b21a8dbb991a/02c5bfc9ab3bae9e#02c5bfc9ab3bae9e&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/17969d56c1fb86e0/3274abd0d8b8ed5c#3274abd0d8b8ed5c&#34;&gt;More Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;python-to-eliminate-reduce-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d03b4d33ca8b5260-a6526b909001d7b8-a6526b909001d7b8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d03b4d33ca8b5260/a6526b909001d7b8#a6526b909001d7b8&#34;&gt;Python to Eliminate &lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aristotle Pagaltzis posted a link explaining that Python 3000 will eliminate &lt;code&gt;reduce&lt;/code&gt;. This led to a brief discussion of various design philosophies.&lt;/p&gt;

&lt;h4 id=&#34;send-more-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8127c2b44893bed4-387d5076256105db-387d5076256105db&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8127c2b44893bed4/387d5076256105db#387d5076256105db&#34;&gt;SEND + MORE = JUNCTIONS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam Vilain fixed up the SEND + MORE example to work correctly with junctions. Unfortunately, the hoops through which he had to jump are pretty horrendous. Larry mumbled that the option of autothreading all conditionals might work, but would send too many lynch mobs after him. I for one like both Twin Peaks and that idea.&lt;/p&gt;

&lt;h4 id=&#34;for-with-a-function-reference-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f89531093cc2e3da-cd015186c0b67a77-cd015186c0b67a77&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f89531093cc2e3da/cd015186c0b67a77#cd015186c0b67a77&#34;&gt;&lt;code&gt;for&lt;/code&gt; With a Function Reference&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wanted to know how &lt;code&gt;for&lt;/code&gt; would behave with various types of functions or codeblocks. Luke Palmer provided answers.&lt;/p&gt;

&lt;h4 id=&#34;adding-interfaces-to-arguments-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d7d6bd1506544ee5-9433d70b82708e82-9433d70b82708e82&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d7d6bd1506544ee5/9433d70b82708e82#9433d70b82708e82&#34;&gt;Adding Interfaces to Arguments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß wondered when arguments to function would be decorated with roles from the function signature if they didn&amp;rsquo;t exist. Larry conjectured about allowing different views on objects versus mixing in various roles. This led people to talk about covariant typing. An array of ints will always return you a number and an array of numbers will always accept an int, but an array of ints will not necessarily accept a number and an array of numbers will not necessarily return an int. Thus, changing your view can be valid when writing and not when reading, or vice versa.&lt;/p&gt;

&lt;h4 id=&#34;pugs-too-lazy-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2aca524a1203cd41-912bea4d0d05554a-q-surprised-912bea4d0d05554a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2aca524a1203cd41/912bea4d0d05554a?q=surprised#912bea4d0d05554a&#34;&gt;Pugs too Lazy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige noticed that closing a file handle in Pugs did not force all the thunks associated with the file. While this was a bug in Pugs, it led to conversation about whether &lt;code&gt;=&lt;/code&gt; should be lazy or eager. Larry thinks that it will be safer to start eager and become lazy then vice versa.&lt;/p&gt;

&lt;h4 id=&#34;exists-and-delete-as-functions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-52274a6d4736795a-7886d251717dcbcf-7886d251717dcbcf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/52274a6d4736795a/7886d251717dcbcf#7886d251717dcbcf&#34;&gt;&lt;code&gt;exists&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; as Functions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wondered how he would define the signature of &lt;code&gt;exists&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; as they do not evaluate the subscripted variables in their arguments. Larry explained that they are now methods on the hash, so someone will have to do a little macro magic to get it to work the old way.&lt;/p&gt;

&lt;h4 id=&#34;remove-reset-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b83fa0819060ca02-e86555009e886e36-e86555009e886e36&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b83fa0819060ca02/e86555009e886e36#e86555009e886e36&#34;&gt;&lt;code&gt;remove(reset())&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Peters pointed out that &lt;code&gt;reset()&lt;/code&gt; was now almost useless and has been &amp;ldquo;vaguely deprecated&amp;rdquo; for a while. Larry declared it dead.&lt;/p&gt;

&lt;h4 id=&#34;lists-in-string-context-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d14425dbcd70da26-49ce257ba619e231-49ce257ba619e231&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d14425dbcd70da26/49ce257ba619e231#49ce257ba619e231&#34;&gt;Lists in String Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd put out a plea for lists in string context not to provide spaces between elements automatically. Larry pointed out various ways to join on the empty string, which I think is his way of saying &amp;ldquo;too bad&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;popping-a-multidimensional-array-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-00ea49729b4fb348-7352b8e80a4bec26-7352b8e80a4bec26&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/00ea49729b4fb348/7352b8e80a4bec26#7352b8e80a4bec26&#34;&gt;Popping a Multidimensional Array&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wondered what it meant to pop a multidimensional array. Larry agreed that it should pop off entire dimensions. Does this mean that popping such an array in a loop will pop dimensions until there is only one left, at which point it will switch to popping elements?&lt;/p&gt;

&lt;h4 id=&#34;index-out-of-bounds-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5df636005a324a20-edfd61c7066429f0-edfd61c7066429f0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5df636005a324a20/edfd61c7066429f0#edfd61c7066429f0&#34;&gt;Index Out of Bounds&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Laire wondered what &lt;code&gt;index(&amp;quot;Hello&amp;quot;, &amp;quot;&amp;quot;, 999)&lt;/code&gt; would return. Larry explained that it is not as simple as Markus thinks, because strings use magic indices that do Unicode stuff, but it would probably throw an exception.&lt;/p&gt;

&lt;h4 id=&#34;gui-paradigm-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a9ed04e00bade7c0-52337570505cb3f5-52337570505cb3f5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a9ed04e00bade7c0/52337570505cb3f5#52337570505cb3f5&#34;&gt;GUI Paradigm&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michele Dondi wants Perl 6 to support a GUI paradigm better than most languages currently do. He is not quite sure how, but he is sure that it would be cool. I agree.&lt;/p&gt;

&lt;h4 id=&#34;hiding-from-one-s-callee-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-cba8748ebd6084c6-05cbce0b1ca98174-05cbce0b1ca98174&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cba8748ebd6084c6/05cbce0b1ca98174#05cbce0b1ca98174&#34;&gt;Hiding From One&amp;rsquo;s Callee&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wants to call a function but make it appear as if his caller did it. Larry suggested that &lt;code&gt;wrap&lt;/code&gt;/&lt;code&gt;call&lt;/code&gt; would be appropriate.&lt;/p&gt;

&lt;h4 id=&#34;quotemeta-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ae745954ee8361c6-fd6dc65151a03ae9-fd6dc65151a03ae9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ae745954ee8361c6/fd6dc65151a03ae9#fd6dc65151a03ae9&#34;&gt;&lt;code&gt;quotemeta&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams voted for axing &lt;code&gt;quotemeta&lt;/code&gt;. People seemed to agree that it should go, but they disagreed on what to use in its place. Larry suggested an argument to &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;zip-function-signature-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-be17e769ee1b3ae9-4da615a5a91eaf2b-4da615a5a91eaf2b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/be17e769ee1b3ae9/4da615a5a91eaf2b#4da615a5a91eaf2b&#34;&gt;&lt;code&gt;zip&lt;/code&gt; Function Signature&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams &lt;code&gt;had&lt;/code&gt; difficulty determining the function signature for &lt;code&gt;&amp;amp;zip&lt;/code&gt;. This led to a discussion of when &lt;code&gt;is rw&lt;/code&gt; was implied, but not an answer to his question.&lt;/p&gt;

&lt;h4 id=&#34;symbol-table-interactions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-60dce44260f2a93d-8713b16d403879e5-8713b16d403879e5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/60dce44260f2a93d/8713b16d403879e5#8713b16d403879e5&#34;&gt;Symbol Table Interactions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gall Yahas wondered how &lt;code&gt;::()&lt;/code&gt; would react to undefined variables. Larry explained that it might be either legal or illegal as an lvalue depending on whether or not the scope had finished being compiled, and that it would be undefined as an rvalue.&lt;/p&gt;

&lt;h4 id=&#34;propagating-called-context-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-601792cc6008e3b1-f3c5cdf9ab6c7a5c-f3c5cdf9ab6c7a5c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/601792cc6008e3b1/f3c5cdf9ab6c7a5c#f3c5cdf9ab6c7a5c&#34;&gt;Propagating Called Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yuval Kogman wants to call a sub with the same context he was called in so that he can munge the result(s). Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;true-0-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-027584c278aa0ecc-d658af04afb41def-d658af04afb41def&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/027584c278aa0ecc/d658af04afb41def#d658af04afb41def&#34;&gt;&lt;code&gt;true(0)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd suggested renaming &lt;code&gt;true&lt;/code&gt;, as it was really counter-intuitive. Much discussion ensued about alternatives. Larry hemmed for a bit, but decided to stick with &lt;code&gt;true&lt;/code&gt; in the end&lt;/p&gt;

&lt;h4 id=&#34;junction-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c31ccf483dbe1948-0b6c7014b4be8ff4-0b6c7014b4be8ff4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c31ccf483dbe1948/0b6c7014b4be8ff4#0b6c7014b4be8ff4&#34;&gt;Junction Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little wondered if the junctions in Pugs behaved correctly. Luke Palmer assured him that they were for the examples he posted.&lt;/p&gt;

&lt;h4 id=&#34;pod-vs-kwid-round-1-fight-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-171cd34b1e84bf8c-5531a708a6b8a333-5531a708a6b8a333&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/171cd34b1e84bf8c/5531a708a6b8a333#5531a708a6b8a333&#34;&gt;POD vs. kwid : Round 1. FIGHT!&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Aaron Sherman posted a rough draft of a better POD. This led to many people passionately discussing the merits and demerits of POD and kwid. Fortunately, as the summarizer endowed with the power of double speaking, I can definitively report that the conclusion was that everybody prefers both kwid over Pod and vim over emacs.&lt;/p&gt;

&lt;h4 id=&#34;importing-constants-from-another-module-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e689486905f15375-b876a174c00da4b8-b876a174c00da4b8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e689486905f15375/b876a174c00da4b8#b876a174c00da4b8&#34;&gt;Importing Constants From Another Module&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Song10 wanted to know how to import constants from another module into his module without having to specify scope everywhere. Warnock applied.&lt;/p&gt;

&lt;h4 id=&#34;returning-references-vs-copies-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-eaf15ca9e032cfa1-53d856b79ec5aabd-53d856b79ec5aabd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/eaf15ca9e032cfa1/53d856b79ec5aabd#53d856b79ec5aabd&#34;&gt;Returning References vs. Copies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan wants to protect his classes from their malicious enemies who would use his references against him. Thus, he wants to know if his accessor methods return references or copies. Larry explained that they would probably return lazy copies, to provide the requisite protection, except when used inside that class.&lt;/p&gt;

&lt;h4 id=&#34;precedence-of-where-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-376a1703e186fdc7-e30509cf16667057-e30509cf16667057&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/376a1703e186fdc7/e30509cf16667057#e30509cf16667057&#34;&gt;Precedence of &lt;code&gt;where&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Chip Salzenberg wondered if &lt;code&gt;where&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; had higher precedence. Larry replied that &lt;code&gt;where&lt;/code&gt; is part of a magic group of declarational keywords that did some weird stuff.&lt;/p&gt;

&lt;h4 id=&#34;strings-and-pain-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a95fa7c746d4701a-caef6fe695f484cd-caef6fe695f484cd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a95fa7c746d4701a/caef6fe695f484cd#caef6fe695f484cd&#34;&gt;Strings and Pain&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wants to change strings to deal with Unicode differently. Larry thinks his idea forces the programmer into the machine&amp;rsquo;s mindset too much.&lt;/p&gt;

&lt;h4 id=&#34;caller-s-slurpy-array-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-7318f41d1354a449-6cae07180e484d20-6cae07180e484d20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/7318f41d1354a449/6cae07180e484d20#6cae07180e484d20&#34;&gt;Caller&amp;rsquo;s Slurpy Array&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wants access to his caller&amp;rsquo;s slurpy array and suggested that it be &lt;code&gt;@_&lt;/code&gt;. Larry agreed.&lt;/p&gt;

&lt;h4 id=&#34;lvalue-slices-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2095c65253615777-250915713d504ccf-250915713d504ccf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2095c65253615777/250915713d504ccf#250915713d504ccf&#34;&gt;lvalue Slices&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wants to assign to an array slice but doesn&amp;rsquo;t know if he can. He can.&lt;/p&gt;

&lt;h4 id=&#34;method-self-method-method-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-cf458503a5ec514f-9083077118873dd3-9083077118873dd3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/cf458503a5ec514f/9083077118873dd3#9083077118873dd3&#34;&gt;&lt;code&gt;.method&lt;/code&gt;; &lt;code&gt;$self.method&lt;/code&gt;; &lt;code&gt;$_.method&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;As originally specified, &lt;code&gt;.method&lt;/code&gt; means &lt;code&gt;$_.method&lt;/code&gt;. This sets it apart from &lt;code&gt;$.foo&lt;/code&gt;, &lt;code&gt;@.foo&lt;/code&gt;, and &lt;code&gt;%.foo&lt;/code&gt;, which all refer to &lt;code&gt;$self&lt;/code&gt;. Much discussion ensued. I think the pendulum is slowly swinging toward switching the meaning of &lt;code&gt;.method&lt;/code&gt; to refer to &lt;code&gt;$self.method&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;duff-s-device-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a42b280a81d56ae2-90c1b8d03c869e59-90c1b8d03c869e59&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a42b280a81d56ae2/90c1b8d03c869e59#90c1b8d03c869e59&#34;&gt;Duff&amp;rsquo;s Device&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gaal Yahas lamented his inability to use Duff&amp;rsquo;s Device in Perl 6. Larry made noises that it might not be impossible, but would still not be a good idea.&lt;/p&gt;

&lt;h4 id=&#34;the-fate-of-study-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-6534a326e4840512-bed755ec9ba75c14-bed755ec9ba75c14&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6534a326e4840512/bed755ec9ba75c14#bed755ec9ba75c14&#34;&gt;The Fate of &lt;code&gt;study&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wondered what would happen to &lt;code&gt;study&lt;/code&gt;. Because I never did it in high school or college, I doubt I will begin now. Other people seem to think it would be easier to leave it as a no-op in case we want to do it eventually.&lt;/p&gt;

&lt;h4 id=&#34;some-ado-about-nothing-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a1a5bdbf912fd91a-8d1aef1de9edad01-8d1aef1de9edad01&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a1a5bdbf912fd91a/8d1aef1de9edad01#8d1aef1de9edad01&#34;&gt;Some Ado About Nothing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wants a no-op function and suggested nothing. There was some discussion about whether 1 should work. I am surprised that no one suggested &lt;code&gt;study&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;chr-and-ord-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ea49812733e46265-776d142ee2edcb2f-776d142ee2edcb2f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ea49812733e46265/776d142ee2edcb2f#776d142ee2edcb2f&#34;&gt;&lt;code&gt;chr&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams thought that perhaps &lt;code&gt;chr&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt; have a restriction to work only at the code point level. Larry was less sure.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;p&gt;Last week, I tried to link to many of the Pugs patches. I now think that was a mistake for two reasons: first, there are a great many; and second, many more occur off-list where I miss them. Therefore, I will not provide links for specific patches unless they pass this arbitrary test: Are they as important as my pizza?&lt;/p&gt;

&lt;h4 id=&#34;pugs-6-0-12&#34;&gt;Pugs 6.0.12&lt;/h4&gt;

&lt;p&gt;Autrijus released Pugs 6.0.11 and 6.0.12. The features are plentiful and awesome. For a more complete list (which is long) as well as daily blow-by-blow of the Pugs development (which is fast) check out &lt;a href=&#34;http://use.perl.org/~autrijus/journal/&#34;&gt;Autrijus&amp;rsquo;s journal&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/252e51259e2e8668/296f1effec2f7ece#296f1effec2f7ece&#34;&gt;6.0.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/dfb62cfd8d7c9ae8/7701be9639425bc3#7701be9639425bc3&#34;&gt;6.0.12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;helping-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-2f991178dc3f0310-39f0bee1765b05ba-39f0bee1765b05ba&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/2f991178dc3f0310/39f0bee1765b05ba#39f0bee1765b05ba&#34;&gt;Helping Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matthew Campbell wondered how best to help Pugs. Autrijus Tang gave him a helpful nudge.&lt;/p&gt;

&lt;h4 id=&#34;p6ify-algorithm-dependency-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-83250035939400f5-b51d37ddbcbc4b48-b51d37ddbcbc4b48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/83250035939400f5/b51d37ddbcbc4b48#b51d37ddbcbc4b48&#34;&gt;p6ify Algorithm::Dependency&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Kennedy asked for a volunteer to translate Algorithm::Dependency to Perl 6. Darren Duncan did it, and quickly, too.&lt;/p&gt;

&lt;h4 id=&#34;help-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-8192eea1c2584767-db780fa372437a16-db780fa372437a16&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8192eea1c2584767/db780fa372437a16#db780fa372437a16&#34;&gt;Help Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Anthony Kilna knew that one of the best ways to help Pugs was to write tests, but didn&amp;rsquo;t know if there was a database of tests that needed to be written or were written. Stevan Little pointed him to the in-progress attempt to build just such a database, and said that would be a good place to help.&lt;/p&gt;

&lt;h4 id=&#34;sand-traps-abound-when-golfing-in-p6-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-f4005c8df3c892bf-a6efb74699ea57fa-a6efb74699ea57fa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f4005c8df3c892bf/a6efb74699ea57fa#a6efb74699ea57fa&#34;&gt;Sand Traps Abound When Golfing in p6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andrew Savige (a.k.a &amp;ldquo;mad golfer&amp;rdquo;) has been working at &lt;a href=&#34;http://www.perlmonks.org/?node_id=440685&#34;&gt;porting a &amp;ldquo;small&amp;rdquo; program to Perl 6&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;numification-of-strings-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-f4f2cedbc5b97061-eb81ac0b17fd1bd8-eb81ac0b17fd1bd8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/f4f2cedbc5b97061/eb81ac0b17fd1bd8#eb81ac0b17fd1bd8&#34;&gt;Numification of Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;There was some discussion of how to numify a string. Some wanted smart parsing, others wanted simple parsing. For a while simple was winning. I am not sure if it won in the end though.&lt;/p&gt;

&lt;h4 id=&#34;sql-routine-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-6974d4cff16fb2bf-f7786d53603fc773-f7786d53603fc773&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/6974d4cff16fb2bf/f7786d53603fc773#f7786d53603fc773&#34;&gt;SQL::Routine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan announced his intent to port SQL::Routine to Perl 6 shortly. You might be able to hold your breath.&lt;/p&gt;

&lt;h4 id=&#34;pugs-bugs-vs-blue-s-clues-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-d579becc29dec05f-a47f1de3c76b11af-a47f1de3c76b11af&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/d579becc29dec05f/a47f1de3c76b11af#a47f1de3c76b11af&#34;&gt;Pugs&amp;rsquo; Bugs vs. Blue&amp;rsquo;s Clues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little compiled a list of bugs for Pugs. By the time you read this, many will probably have been fixed.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;p&gt;I will start this part with a very large announcement. Dan has decided to step down as Parrot&amp;rsquo;s Chief Architect. Chip Salzenberg (who just earned first name-only status) has taken up the burning parrot&amp;hellip;err&amp;hellip;torch. To forestall questions/outrage/grumbling, Dan explained that Leo did not get the position because he did not want it. I know that I personally have learned a lot from Dan and Squawks of the Parrot (including how to turn crystal sugar into baker&amp;rsquo;s sugar), and want to think him a great deal for the work he put into Parrot. This means the responsibility of returning the pie to Guido now falls on Chip&amp;rsquo;s shoulders.&lt;/p&gt;

&lt;h4 id=&#34;make-install-parrot-headers-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e0d274fbb5120b33-14e48637be806485-14e48637be806485&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e0d274fbb5120b33/14e48637be806485#14e48637be806485&#34;&gt;&lt;code&gt;make install&lt;/code&gt; Parrot Headers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Lambeck noticed that &lt;code&gt;make install&lt;/code&gt; does not install Parrot&amp;rsquo;s header files. It probably should; he filed a bug.&lt;/p&gt;

&lt;h4 id=&#34;atan2-needs-xlibmieee-on-sun-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f41e809121ef5335-2f7420ec96a32121-2f7420ec96a32121&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f41e809121ef5335/2f7420ec96a32121#2f7420ec96a32121&#34;&gt;&lt;code&gt;atan2&lt;/code&gt; needs &lt;code&gt;-xlibmieee&lt;/code&gt; on Sun&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty provided a patch adding appropriate hints to the Solaris build. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;burning-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4b2cc5857c50a76c-48b36b3efb9fe952-48b36b3efb9fe952&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4b2cc5857c50a76c/48b36b3efb9fe952#48b36b3efb9fe952&#34;&gt;Burning Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request to revive the Parrot tinderboxen. Steve Peters suggested integrating it with the current Perl smoke reporting process. Peter Sinnot put up a server on a spare machine in the meantime.&lt;/p&gt;

&lt;h4 id=&#34;ncurses-life-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f3e4cb739062468c-0c3d76d031ac94de-0c3d76d031ac94de&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f3e4cb739062468c/0c3d76d031ac94de#0c3d76d031ac94de&#34;&gt;&lt;code&gt;ncurses_life&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Uwe Voelker reported a bug in &lt;code&gt;ncurses_life&lt;/code&gt;. Leo fixed it and put out a plea for someone to update it. Matt Diephouse updated it.&lt;/p&gt;

&lt;h4 id=&#34;refactor-of-t-pmc-pmc-t-needed-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-329dc516447d2104-eeb2c77b3ca37aeb-eeb2c77b3ca37aeb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/329dc516447d2104/eeb2c77b3ca37aeb#eeb2c77b3ca37aeb&#34;&gt;Refactor of &lt;code&gt;t/pmc/pmc.t&lt;/code&gt; Needed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo suggested that an interested party would be able to factor the &lt;code&gt;Perl*&lt;/code&gt; tests out of &lt;code&gt;pmc.t&lt;/code&gt; and into &lt;code&gt;perl.t&lt;/code&gt;. Steven Schubiger &lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/458c7e0121e480a3/b73023e931faf731#b73023e931faf731&#34;&gt;offered to try&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;string-tasks&#34;&gt;String Tasks&lt;/h4&gt;

&lt;p&gt;Leo posted a set of tasks looking for takers with respect to string stuff. Steven Schubiger and Aldo Calpini each stepped up to some.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/68715e4f35b78064/07b7ae78e013dbcf#07b7ae78e013dbcf&#34;&gt;Initial Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0d7d08d47e33c546/9465b678d81a6bfd#9465b678d81a6bfd&#34;&gt;Aldo&amp;rsquo;s Offer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;thr-primes-imc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-42b4c69ce7b376e5-2b8d1ab0976fa155-2b8d1ab0976fa155&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/42b4c69ce7b376e5/2b8d1ab0976fa155#2b8d1ab0976fa155&#34;&gt;&lt;code&gt;thr-primes.imc&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer updated &lt;code&gt;thr-primes.imc&lt;/code&gt; to not use &lt;code&gt;Perl*&lt;/code&gt; PMCs, which uncovered a bug in &lt;code&gt;Undef.pmc&lt;/code&gt;. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;aggregate-clone-vtable-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8870881652047d2e-111693f3a2d7c6fa-111693f3a2d7c6fa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8870881652047d2e/111693f3a2d7c6fa#111693f3a2d7c6fa&#34;&gt;Aggregate Clone vtable&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo noticed that some aggregates do deep copies while others do shallow. All should do shallow. Takers welcome.&lt;/p&gt;

&lt;h4 id=&#34;arrays-todo&#34;&gt;&lt;code&gt;**Arrays&lt;/code&gt; TODO&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Fixed*Arrays&lt;/code&gt; should have a limited form of &lt;code&gt;splice&lt;/code&gt; available to them. Also, the &lt;code&gt;Resizable*Arrays&lt;/code&gt; should have their allocation schemes adapted to that of the &lt;code&gt;ResizeablePMCArray&lt;/code&gt;, and &lt;code&gt;*BooleanArray&lt;/code&gt; should store just bits. Bernhard Schmalhofer offered to take on the &lt;code&gt;*BooleanArrays&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/48ad2aae2d583d4a/5b5311c4fc191ef0#5b5311c4fc191ef0&#34;&gt;The Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0540dca561770d2/fb27be1eb9fa8112#fb27be1eb9fa8112&#34;&gt;The Offer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;anonymous-subclasses-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-fe09eef1be4f75fd-f05daf33ba86a454-f05daf33ba86a454&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/fe09eef1be4f75fd/f05daf33ba86a454#f05daf33ba86a454&#34;&gt;Anonymous Subclasses&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Simon Glober discovered that anonymous subclasses were not working in December. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-compiler-in-perl-6-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9145d543f52f35bd-e2b62a27a803370a-e2b62a27a803370a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9145d543f52f35bd/e2b62a27a803370a#e2b62a27a803370a&#34;&gt;Perl 6 Compiler in Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Millsa Erlas hoped that writing a Perl 6 compiler in Perl 6 was still a priority. Markus Laire pointed her to Pugs. She seemed happy.&lt;/p&gt;

&lt;h4 id=&#34;object-internals-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e778497a56444f84-db497f0efde11445-db497f0efde11445&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e778497a56444f84/db497f0efde11445#db497f0efde11445&#34;&gt;Object Internals&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo has been steadily hacking away at the object internals. There is now a &lt;code&gt;get_mro&lt;/code&gt; opcode.&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-failure-in-gcc-3-3-3-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4af0306d5b4bdb5d-f9079cdebbfb3651-f9079cdebbfb3651&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4af0306d5b4bdb5d/f9079cdebbfb3651#f9079cdebbfb3651&#34;&gt;Dynclasses Failure in gcc 3.3.3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo committed a workaround to a GC problem with dynamic library loading. Eventually someone needs to implement the real solution.&lt;/p&gt;

&lt;h4 id=&#34;the-many-faces-of-win32&#34;&gt;The Many Faces of Win32&lt;/h4&gt;

&lt;p&gt;It turns out that there are several different flavors of Windows builds with MinGW (not to mention Cygwin or MSVC). This causes pain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aeaf62dbeb16f14a/9d77af5c1c99a840#9d77af5c1c99a840&#34;&gt;MinGW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/82b2988e0777be6b/45b485d60499377c#45b485d60499377c&#34;&gt;Pain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ea4934debf27ef24/2af4665d9f0509a6#2af4665d9f0509a6&#34;&gt;The Many Moods of MinGW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;todo-clean-parrot-s-a-i-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-075f871cfeba125e-f7f0ae2f3d71f5c3-f7f0ae2f3d71f5c3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/075f871cfeba125e/f7f0ae2f3d71f5c3#f7f0ae2f3d71f5c3&#34;&gt;TODO: Clean Parrot&amp;rsquo;s A*I&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jarkko Hietaniemi posted a TODO for cleaning up both Parrot&amp;rsquo;s API and ABI. Leo agreed that it would be very nice.&lt;/p&gt;

&lt;h4 id=&#34;calling-pir-from-a-pmc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-52275131d2b6ba0b-5d04a0e33841544d-5d04a0e33841544d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/52275131d2b6ba0b/5d04a0e33841544d#5d04a0e33841544d&#34;&gt;Calling PIR from a PMC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda wanted to know how to call PIR code from a PMC. Jeff Horwitz pointed him to the &lt;code&gt;Parrot_call_sub_*&lt;/code&gt; API.&lt;/p&gt;

&lt;h4 id=&#34;past-compiler-problems-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0377ffb9409a4db6-d87dcd5b13f79c33-d87dcd5b13f79c33&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0377ffb9409a4db6/d87dcd5b13f79c33#d87dcd5b13f79c33&#34;&gt;PAST Compiler Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer has a program that he can make work in imc, but not from PAST. It turns out that we don&amp;rsquo;t yet have a way to pass options to the &lt;code&gt;compile&lt;/code&gt; opcode. We need that.&lt;/p&gt;

&lt;h4 id=&#34;makefile-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c0dbe1c83c032522-82d308ca303342fb-82d308ca303342fb&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c0dbe1c83c032522/82d308ca303342fb#82d308ca303342fb&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt; Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer offered to clean some old imcc targets out of the &lt;code&gt;Makefile&lt;/code&gt;. Leo told him to go for it.&lt;/p&gt;

&lt;h4 id=&#34;mro-broke-tcl-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ffc411a054b614d6-347b5254037f240d-347b5254037f240d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ffc411a054b614d6/347b5254037f240d#347b5254037f240d&#34;&gt;MRO Broke Tcl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda was sad that Leo kept breaking Tcl. Leo suggested that he add the Tcl tests to the base &lt;code&gt;make test&lt;/code&gt;. Also, there is some funniness going on because tests fail for Leo and not Will.&lt;/p&gt;

&lt;h4 id=&#34;todo-add-multiple-return-values-to-parrot-call-sub-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-8e24f6db5638451b-3aedf5963bbf574a-3aedf5963bbf574a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/8e24f6db5638451b/3aedf5963bbf574a#3aedf5963bbf574a&#34;&gt;TODO: Add Multiple Return Values to &lt;code&gt;Parrot_call_sub&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse posted a TODO for adding the ability to access multiple return values from C.&lt;/p&gt;

&lt;h4 id=&#34;manifest-failures-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-40f344f759cb5df4-b11b606daea1abb6-b11b606daea1abb6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/40f344f759cb5df4/b11b606daea1abb6#b11b606daea1abb6&#34;&gt;MANIFEST Failures&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers was seeing MANIFEST failures. It turns out that he forgot to use the &lt;code&gt;-dP&lt;/code&gt; switch with CVS. We have all done it.&lt;/p&gt;

&lt;h4 id=&#34;pasm-gt-imc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-aabfb7940abc0611-e15c16162f92a6ca-e15c16162f92a6ca&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/aabfb7940abc0611/e15c16162f92a6ca#e15c16162f92a6ca&#34;&gt;PASM -&amp;gt; IMC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer committed a few TODO tests for generating and running PASM from Pir. Jens Rieks pointed out that this does not work and is only a debugging aid. I don&amp;rsquo;t see anything wrong with wanting it to work, though.&lt;/p&gt;

&lt;h4 id=&#34;segfault-on-splice-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-825d0b2ee8e15d73-bd72ed3b4004ce9c-bd72ed3b4004ce9c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/825d0b2ee8e15d73/bd72ed3b4004ce9c#bd72ed3b4004ce9c&#34;&gt;Segfault on &lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross found a segfault when splicing an &lt;code&gt;IntList&lt;/code&gt;. Jens Rieks provided a patch that allowed Parrot to die earlier and more cleanly. Leo fixed the problem.&lt;/p&gt;

&lt;h4 id=&#34;documenting-the-mingw-build-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c64adac9b6b4b822-dcdeb12bb567f52e-dcdeb12bb567f52e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c64adac9b6b4b822/dcdeb12bb567f52e#dcdeb12bb567f52e&#34;&gt;Documenting the MinGW build&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch updating documentation for building with MinGW. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;segfaulting-md5sums-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6ef839077855a882-e90e4226ded8159f-e90e4226ded8159f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6ef839077855a882/e90e4226ded8159f#e90e4226ded8159f&#34;&gt;Segfaulting md5sums&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nick Glencross decided to check up on his md5sum library. It still compiles, but it segfaults. Leo found and fixed the GC bug.&lt;/p&gt;

&lt;h4 id=&#34;parrot-exec-os-command-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-9872aae4f7d39836-e4496796bc505458-e4496796bc505458&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/9872aae4f7d39836/e4496796bc505458#e4496796bc505458&#34;&gt;&lt;code&gt;Parrot_Exec_OS_Command&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad noticed that MinGW was very particular about how you execs OS commands. He wondered if this should be fixed at the configure layer or the &lt;code&gt;Parrot_Exec_OS_Command&lt;/code&gt; layer. Dan explained that he never intended the latter to be language independent, and that a language independent version should go in a library.&lt;/p&gt;

&lt;h4 id=&#34;namespaces-in-pir-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5b0867aaa2381186-2c1e5c08e857421d-2c1e5c08e857421d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5b0867aaa2381186/2c1e5c08e857421d#2c1e5c08e857421d&#34;&gt;Namespaces in PIR&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a call for comments on PIR namespaces. Dan suggested a small addition.&lt;/p&gt;

&lt;h4 id=&#34;builtins-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-478fad3d3c66989b-0768c592db76d962-0768c592db76d962&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/478fad3d3c66989b/0768c592db76d962#0768c592db76d962&#34;&gt;Builtins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo committed a change moving builtins to a class namespace and provided convenient access to them from PIR.&lt;/p&gt;

&lt;h4 id=&#34;mmd-multi-sub-syntax-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bb978033e3dc8b06-7e90050886739a28-7e90050886739a28&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bb978033e3dc8b06/7e90050886739a28#7e90050886739a28&#34;&gt;MMD: Multi Sub Syntax&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a call to develop a syntax for multi subs in PIR. Many people suggested options.&lt;/p&gt;

&lt;h4 id=&#34;returning-a-variable-number-of-arguments-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e6f47902d1c0e9c4-b9cf876745f5e8c8-b9cf876745f5e8c8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e6f47902d1c0e9c4/b9cf876745f5e8c8#b9cf876745f5e8c8&#34;&gt;Returning a Variable Number of Arguments&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers updated PIR code to allow returning a variable number of arguments. Leo applied it.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6, Feb. 23 - March 7, 2005</title>
      <link>http://localhost:1313/pub/2005/03/p6pdigest/20050307.html/</link>
      <pubDate>Thu, 10 Mar 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/03/p6pdigest/20050307.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to yet another fortnight summary, once again brought to you by chocolate chips. This does have the distinction of being the first summary written on a Mac, so if I break into random swear words, just bear with me.&lt;/p&gt;

&lt;h3 id=&#34;off-list-development&#34;&gt;Off-list Development&lt;/h3&gt;

&lt;p&gt;In more related news, someone pointed out to me that development goes on off-list on places like IRC. I briefly contemplated quitting my job and tracking such things full time, but then I decided that it would be better to accept brief submissions for the summary. Thus I will be adding a fourth section to the summaries based on contributions. If you would like to make a contribution, email me with a brief summary. Please include the name by which you would like me to attribute you (though sadly the process I use will likely to mangle any Unicode characters). Please make all links full. I will shorten them. Thanks!&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;not-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-b4e54da6dbda6a06-b0456cc980e83394-b0456cc980e83394&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/b4e54da6dbda6a06/b0456cc980e83394#b0456cc980e83394&#34;&gt;&lt;code&gt;not()&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It turns out that &lt;code&gt;not()&lt;/code&gt; (with no arguments) made Perl 5 core dump for a while, and it took us five years to figure that out. In Perl 6 it will be a list op. Calling it with no arguments will return a null list or an undef depending on context.&lt;/p&gt;

&lt;h4 id=&#34;junctions-and-threading-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-dc72f01f5027f048-48bdbca40022b21c-48bdbca40022b21c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/dc72f01f5027f048/48bdbca40022b21c#48bdbca40022b21c&#34;&gt;Junctions and Threading&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I had hoped that last week someone would have addressed the concerns about threading. I was disappointed in this. A new crop of concerns surfaced and died down fairly quickly (as the chief proponent, Damian, was away).&lt;/p&gt;

&lt;h4 id=&#34;serializing-to-various-languages-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-9b872c9ed83288e0-0ebbcd80853adf38-0ebbcd80853adf38&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/9b872c9ed83288e0/0ebbcd80853adf38#0ebbcd80853adf38&#34;&gt;Serializing to Various Languages&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Somehow the discussion of junctions morphed into a discussion of sets, which morphed back into junctions, which morphed into a discussion of serialization to different languages. Interesting stuff, but I wouldn&amp;rsquo;t hold my breath for it.&lt;/p&gt;

&lt;h4 id=&#34;performance-analysis-and-benchmarks-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-738187afa60b9f0b-f2f3a2da72c3046c-f2f3a2da72c3046c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/738187afa60b9f0b/f2f3a2da72c3046c#f2f3a2da72c3046c&#34;&gt;Performance Analysis and Benchmarks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adam Preble posted an offer to develop some benchmarks for Perl 6. Unfortunately, I think he posted it to Google Groups. Also, he probably should have posted it to p6c or p6i as the language folk tend to wave their hands and say &amp;ldquo;magic occurs but correctness is preserved&amp;rdquo; when it comes to optimization.&lt;/p&gt;

&lt;h4 id=&#34;send-more-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-a6529a02c9846a0d-732df42c2d9be456-732df42c2d9be456&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/a6529a02c9846a0d/732df42c2d9be456#732df42c2d9be456&#34;&gt;Send + More = Junctions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus posted an example using junctions, instead of parents, to solve the classic&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SEND MORE + ===== MONEY&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;problem. Markus Laire asked for a clarification, and Rod Adams pointed out that he felt that it would not work as it did not capture the interdependence of the &amp;ldquo;e&amp;rdquo;s. This lead to the question of how to write Prolog-like code (including unification and backtracking) in Perl 6. No one offered answers.&lt;/p&gt;

&lt;h4 id=&#34;pairs-as-lvalues-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-88aefa68ad27f426-71027b15d05582b0-71027b15d05582b0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/88aefa68ad27f426/71027b15d05582b0#71027b15d05582b0&#34;&gt;Pairs as lvalues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ingo Blechschmidt wondered what the behavior of pairs as lvalues would be. The answer is that you will receive an error for attempting to modify a constant.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-cacd7e002c890924-fe2cfeb1b88ee1a2-fe2cfeb1b88ee1a2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/cacd7e002c890924/fe2cfeb1b88ee1a2#fe2cfeb1b88ee1a2&#34;&gt;Perl 6&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Roberto Bisotto wanted to know where he could download Perl 6 to start playing with it. We embarrassedly told him that a full implementation was not yet available, but Pugs was gaining ground quickly.&lt;/p&gt;

&lt;h4 id=&#34;hash-keys-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-be23b9d50b6559cc-4903cb1bd620edda-4903cb1bd620edda&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/be23b9d50b6559cc/4903cb1bd620edda#4903cb1bd620edda&#34;&gt;Hash Keys&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wanted to know if hash keys were still just strings or if they could be more. The answer is that by default they are strings, but you can declare them as having a different &lt;code&gt;shape&lt;/code&gt;. This led to a discussion of hashing techniques such as the &lt;code&gt;.bits&lt;/code&gt;, &lt;code&gt;.canonicalize&lt;/code&gt;, or &lt;code&gt;.hash&lt;/code&gt; methods.&lt;/p&gt;

&lt;h4 id=&#34;dynamically-scoped-dynamic-scopes-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-9921c45f21ab8a3e-499d9f24e128dbac-499d9f24e128dbac&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/9921c45f21ab8a3e/499d9f24e128dbac#499d9f24e128dbac&#34;&gt;Dynamically-Scoped Dynamic Scopes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dave Whipp wanted to make &amp;ldquo;dynamically-scoped dynamic scopes&amp;rdquo;. My head hurt, but apparently Larry&amp;rsquo;s didn&amp;rsquo;t. He replied, &amp;ldquo;Piece of cake, the syntax [and implementation] are left as an exercise for the would-be module author.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;parameters-to-rules-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-be231afa0b134b41-e1f0673c86848f17-e1f0673c86848f17&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/be231afa0b134b41/e1f0673c86848f17#e1f0673c86848f17&#34;&gt;Parameters to Rules&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams asked how he could specify arguments to rules so they could be more function-like. Larry explained that there were several syntaxes, each of which can coerce its arguments in slightly different ways. He then mused that perhaps there were too many. I agree. There are too many.&lt;/p&gt;

&lt;h4 id=&#34;compile-time-signature-checking-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-6e72e481cee3393d-0066c3b36488fd26-0066c3b36488fd26&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/6e72e481cee3393d/0066c3b36488fd26#0066c3b36488fd26&#34;&gt;Compile Time Signature Checking&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ahbijit Mahabal wondered how type checking will work for cases where it is not easy to determine the types at compile time. The answer: checking will be deferred to run time. In the end it seems that Perl 6 will blur the line between run time and compile time heavily. Perhaps it will provide nifty support for staged programming. Meta-Perl 6 here we come.&lt;/p&gt;

&lt;h4 id=&#34;config-and-config-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-13ac45228fd4409f-56f3ea297b42a06c-56f3ea297b42a06c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/13ac45228fd4409f/56f3ea297b42a06c#56f3ea297b42a06c&#34;&gt;&lt;code&gt;%*CONFIG&lt;/code&gt; and &lt;code&gt;%?CONFIG&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Brian Ingerson asked about the &lt;code&gt;CONFIG&lt;/code&gt; hash and what sort of secondary sigil it would have. Larry explained that &lt;code&gt;$?CONFIG&lt;/code&gt; holds the config for the machine compiling the program and &lt;code&gt;$*CONFIG&lt;/code&gt; holds the config for the machine running the program. Then he made some noise about parsing, compiling, and running all on different machines. Then he suggested that this way led to drug induced madness.&lt;/p&gt;

&lt;h4 id=&#34;sigils-and-structural-subtypes-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-2d48d854b9cbe1a8-040055e6a076a77e-040055e6a076a77e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/2d48d854b9cbe1a8/040055e6a076a77e#040055e6a076a77e&#34;&gt;Sigils and Structural Subtypes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß proposed using sigils to provide a structural type system as opposed to its class/signature-based one and its constraint-based one.&lt;/p&gt;

&lt;h4 id=&#34;optional-binding-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-086a99985beac390-3beae7ddd32a0cd6-3beae7ddd32a0cd6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/086a99985beac390/3beae7ddd32a0cd6#3beae7ddd32a0cd6&#34;&gt;Optional Binding&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered how optional arguments and slurpy ones would interact. Brent and Larry explained that they would snap up whatever arguments they could, but you can always beat them back by piping in your slurpy stuff with &lt;code&gt;==&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;types-classes-and-junctions-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-d8ab55b87c4c5066-d1881a598c201c32-d1881a598c201c32&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/d8ab55b87c4c5066/d1881a598c201c32#d1881a598c201c32&#34;&gt;Types, Classes, and Junctions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß wants to know how the type system and the class system interrelate. He drew a happy tree of A, B, and its junctions. Really it confused me, and I agree with him that I don&amp;rsquo;t understand the value of the one junction in the context of types.&lt;/p&gt;

&lt;h4 id=&#34;code-indentation-http-groups-beta-google-com-group-perl-perl6-language-browse-thread-thread-bb118c7350c76657-b7a518c68403bf90-b7a518c68403bf90&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/bb118c7350c76657/b7a518c68403bf90#b7a518c68403bf90&#34;&gt;Code Indentation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wolverian does not like any of the ways he can indent his long function declaration when it uses traits. He wants to allow a comma in them to solve this dilemma. Larry and others suggested a few alternatives. This led to a discussion of module loading and header/module files. Larry admitted that he would not mind if Perl 6 developed Ada-like module files.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-releases-and-patches&#34;&gt;Pugs Releases and patches&lt;/h4&gt;

&lt;p&gt;Autrijus released Pugs 6.0.9 and 6.0.10 with help from many people.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/110bfecca8f61260/926318dc6a8bfba5#926318dc6a8bfba5&#34;&gt;6.0.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/6160392a79acfb39/7925028a26e8e036#7925028a26e8e036&#34;&gt;6.0.10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;various-pugs-patches&#34;&gt;Various Pugs Patches&lt;/h4&gt;

&lt;p&gt;Luke Palmer added more &lt;code&gt;qq&lt;/code&gt; delimiters and fixed a unary &lt;code&gt;-&lt;/code&gt; bug. Yuval Kogman posted a fix that made anonymous blocks both parse and run. Stevan Little un-TODOed a bunch of tests that started working; he went on to add some new tests that do not yet pass. I suspect that he is just providing more for him to un-TODO later. Yuval Kogman submitted several patches including array interpolation, a &lt;code&gt;CATCH {}&lt;/code&gt; test, a test for an assignment bug, and a fix for a conditional of expected. Garrett Rooney cleaned up &lt;em&gt;given.t&lt;/em&gt;, added a test for &lt;code&gt;%hash.kv&lt;/code&gt;, one for declaring variables in a loop, and another for &lt;code&gt;$?LINE&lt;/code&gt; and &lt;code&gt;$?FILE&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/720e7ebc94d50179/cff970abd6a62365#cff970abd6a62365&#34;&gt;&lt;code&gt;qq&lt;/code&gt; patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/4a35b0c20cde300c/d191b263b71fdb88#d191b263b71fdb88&#34;&gt;unary minus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/afe78094645bca28/30667665e1970717#30667665e1970717&#34;&gt;anon blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/95c0da602e738624/a0640651e3e524ba#a0640651e3e524ba&#34;&gt;un-TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/576d3cb0b3409cae/a6c2c99db32d599f#a6c2c99db32d599f&#34;&gt;more tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/44f942004e0b4c39/36fed91745b2e290#36fed91745b2e290&#34;&gt;array interpolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/2d52d88c5f57a19f/8f7d4e923f476114#8f7d4e923f476114&#34;&gt;&lt;code&gt;CATCH&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/b67fc9faa71887c5/8ec50febb0032f65#8ec50febb0032f65&#34;&gt;more un-TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/a54605f6d983aa28/5b89ee84bbff0601#5b89ee84bbff0601&#34;&gt;assignment bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/4abb0e1a8714014f/adc8edf7725e98ea#adc8edf7725e98ea&#34;&gt;&lt;code&gt;given&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/39aa5f75b45e3e82/8d5ab10e8280682c#8d5ab10e8280682c&#34;&gt;conditional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/2c467a0a78656fab/72d1ea55ef640d1d#72d1ea55ef640d1d&#34;&gt;more &lt;code&gt;given&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/e3e095cffa35fe54/fa72d9e3826e2c07#fa72d9e3826e2c07&#34;&gt;&lt;code&gt;%hash.kv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/980075a4d19b7cc3/398067b4f8988f1f#398067b4f8988f1f&#34;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/24d9f6696db9081e/1e37970e1d99368a#1e37970e1d99368a&#34;&gt;&lt;code&gt;$?FILE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;where-to-post-things-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-854e1c954eee0aff-5d80e1f9dffd78b0-5d80e1f9dffd78b0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/854e1c954eee0aff/5d80e1f9dffd78b0#5d80e1f9dffd78b0&#34;&gt;Where to Post Things?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Abhijit Mahabal wondered if p6c was the correct place to post questions about Pugs and bugs in Pugs. Patrick and Autrijus agreed that p6c was indeed the correct place for most initial questions. Things will escalate to p6l only when the Apocalypses|Exegeses|Synopses are not clear.&lt;/p&gt;

&lt;h4 id=&#34;argument-binding-problems-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-e2a279655e5f0700-055c8989dba2dfb3-055c8989dba2dfb3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/e2a279655e5f0700/055c8989dba2dfb3#055c8989dba2dfb3&#34;&gt;Argument Binding Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Abhijit Mahabal found and analyzed a bug in Pugs argument binding. There is no solution yet.&lt;/p&gt;

&lt;h4 id=&#34;no-more-numeric-postfix-operators-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-d6b0ceec8702a2c2-251aae525ef31ee3-251aae525ef31ee3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/d6b0ceec8702a2c2/251aae525ef31ee3#251aae525ef31ee3&#34;&gt;No More Numeric Postfix Operators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Due to the space-eating postfix dot, Larry declared that there would be no numeric postfix operators. A great cry went out as if there had been a huge disturbance in the force (or not).&lt;/p&gt;

&lt;h4 id=&#34;sub-and-pointy-subs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-ebf76575a5b27f58-93ba223afa857539-93ba223afa857539&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/ebf76575a5b27f58/93ba223afa857539#93ba223afa857539&#34;&gt;&lt;code&gt;&amp;amp;?SUB&lt;/code&gt; and Pointy Subs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Garrett Rooney was having trouble using the &amp;amp;?SUB variable in pointy subs. That is because they don&amp;rsquo;t use it. &amp;amp;?SUB is only for full-fledged subs. That way you can call &amp;amp;?SUB from within a for loop in a sub and get the nice recursive behavior you likely want.&lt;/p&gt;

&lt;h4 id=&#34;when-is-set-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-6faead387ba8d754-c19a5c1095d1dbd7-c19a5c1095d1dbd7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/6faead387ba8d754/c19a5c1095d1dbd7#c19a5c1095d1dbd7&#34;&gt;When is &lt;code&gt;$_&lt;/code&gt; Set&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus asked Larry for clarification of which circumstances set &lt;code&gt;$_&lt;/code&gt;. Larry explained that &lt;code&gt;-&amp;gt;&lt;/code&gt; topicalizes its first argument but full subs undefine it until something else sets it, while methods bind it to their first invocant.&lt;/p&gt;

&lt;h4 id=&#34;parens-on-method-calls-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-310f00f3c793ebbc-aaf8af577ca231b8-aaf8af577ca231b8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/310f00f3c793ebbc/aaf8af577ca231b8#aaf8af577ca231b8&#34;&gt;Parens on Method Calls&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer was having trouble getting &lt;code&gt;for %hash.keys { ... }&lt;/code&gt; to parse correctly. Larry replied that it is problematic if methods parse in the same manner as subs. Fortunately, the parens are mandatory when there are arguments in addition to invocants.&lt;/p&gt;

&lt;h4 id=&#34;x-a-x-a-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-88745bd19ee2408b-5c0b81012cd1c823-5c0b81012cd1c823&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/88745bd19ee2408b/5c0b81012cd1c823#5c0b81012cd1c823&#34;&gt;&lt;code&gt;@x = @a == @x = @a[]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wanted to verify that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @x = @a;
my @x = @a[];
my @x[] = @a;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;were all the same. Larry confirmed it.&lt;/p&gt;

&lt;h4 id=&#34;misleading-compiler-messages-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-2cca457566ec6e31-532ba4fc2b7ba60b-532ba4fc2b7ba60b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/2cca457566ec6e31/532ba4fc2b7ba60b#532ba4fc2b7ba60b&#34;&gt;Misleading Compiler Messages&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Terrence Brannon noticed a very confusing error message from Pugs.&lt;/p&gt;

&lt;h4 id=&#34;integration-testing-http-groups-beta-google-com-group-perl-perl6-compiler-gvc-2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler?gvc=2&#34;&gt;Integration Testing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Darren Duncan has offered to start the ball rolling with Perl 6 integration testing. He will translate a few modules he has written to Perl 6 so that they can act as more holistic tests for Pugs and Perl 6. There is an interesting conversation about CPAN and Perl 6 involved too.&lt;/p&gt;

&lt;h4 id=&#34;refs-in-scalar-context-http-groups-beta-google-com-group-perl-perl6-compiler-browse-thread-thread-cdb15361abe82075-caf5e64af3e9c337-caf5e64af3e9c337&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_thread/thread/cdb15361abe82075/caf5e64af3e9c337#caf5e64af3e9c337&#34;&gt;Refs in Scalar Context&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Stevan Little found a bug involving refs in scalar context.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;parrot-get-runtime-prefix-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-a218dc2b78cea569-7a4f18bec9be251a-7a4f18bec9be251a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/a218dc2b78cea569/7a4f18bec9be251a#7a4f18bec9be251a&#34;&gt;&lt;code&gt;Parrot_get_runtime_prefix&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;William Coleda found a bug in &lt;code&gt;Parrot_get_runtime_prefix&lt;/code&gt;. Leo admitted that it was a mistake.&lt;/p&gt;

&lt;h4 id=&#34;z-machine-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-bf141f7bdf5b2bc9-1bc07cf6370561c5-1bc07cf6370561c5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/bf141f7bdf5b2bc9/1bc07cf6370561c5#1bc07cf6370561c5&#34;&gt;Z Machine&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put up his tiny Z machine for adoption. Steve Peters offered to adopt it.&lt;/p&gt;

&lt;h4 id=&#34;mingw-build-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-881e826e6bff40ad-7620ef482c7fb884-7620ef482c7fb884&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/881e826e6bff40ad/7620ef482c7fb884#7620ef482c7fb884&#34;&gt;MinGW Build&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Michal Jurosz posted a link to his guide to &lt;a href=&#34;http://wiki.kn.vutbr.cz/mj/index.cgi?Build%20Parrot%20with%20MinGW&#34;&gt;building Parrot with MinGW&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;splitting-vtable-into-interfaces-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-9ea5d132cb6a328b-6694c85f337d21b6-6694c85f337d21b6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/9ea5d132cb6a328b/6694c85f337d21b6#6694c85f337d21b6&#34;&gt;Splitting VTABLE into Interfaces&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo and Sam posted their thoughts about splitting VTABLEs.&lt;/p&gt;

&lt;h4 id=&#34;checking-an-attribute-s-existence-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-6a01356f6d07c89f-468a7048d6e6d20f-468a7048d6e6d20f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/6a01356f6d07c89f/468a7048d6e6d20f#468a7048d6e6d20f&#34;&gt;Checking an Attribute&amp;rsquo;s Existence&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Cory Spencer wants to check for the existence of an attribute, or at the very least catch the exception thrown when an attribute is not found. Leo told him that it was on the list of things to do.&lt;/p&gt;

&lt;h4 id=&#34;calling-c-routines-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-7478b503bb00cace-3ce522b99f512582-3ce522b99f512582&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/7478b503bb00cace/3ce522b99f512582#3ce522b99f512582&#34;&gt;Calling C routines&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vlad Florentino wanted to know if he could call C library routines from Parrot. The answer is NCI. Look at the &lt;a href=&#34;https://fastapi.metacpan.org/source/LTOETSCH/parrot-0.1.2/runtime/parrot/library/SDL.imc&#34;&gt;Parrot SDL bindings&lt;/a&gt; as an example.&lt;/p&gt;

&lt;h4 id=&#34;heredoc-for-pir-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-a25f9e51f5e893d5-c8dbea9600f28198-c8dbea9600f28198&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/a25f9e51f5e893d5/c8dbea9600f28198#c8dbea9600f28198&#34;&gt;heredoc for PIR&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer asked about adding heredoc support to PIR. This led to Melvin ranting that PIR is not a language for people to write. PIR&amp;rsquo;s goal was to be to be an intermediate language targeted by compilers and was not supposed to have human niceties like heredoc. Of course, for PIR to reach that state, we need a high level language that actually targets it.&lt;/p&gt;

&lt;h4 id=&#34;ppc-linux-troubles-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-33d379077b32a52a-dce84b845fefd8c5-dce84b845fefd8c5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/33d379077b32a52a/dce84b845fefd8c5#dce84b845fefd8c5&#34;&gt;PPC Linux troubles&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Once more chromatic and Leo worked to try to fix Parrot for PPC Linux.&lt;/p&gt;

&lt;h4 id=&#34;automatic-verification-of-parrot-assembly-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-0785edb412d947b8-11a46c29f113b2ae-11a46c29f113b2ae&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/0785edb412d947b8/11a46c29f113b2ae#11a46c29f113b2ae&#34;&gt;Automatic Verification of Parrot Assembly&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Coleman wants to develop a research project to verify assembly for security purposes, thus he had some questions about Parrot Assembly. Melvin happily provided some answers.&lt;/p&gt;

&lt;h4 id=&#34;tail-call-improvements-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-f81a7fdd8efff573-3280f958d81855a9-3280f958d81855a9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/f81a7fdd8efff573/3280f958d81855a9#3280f958d81855a9&#34;&gt;Tail Call Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers supplied a patch that improved the &lt;code&gt;.tail_call&lt;/code&gt; support in IMCC. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;strings-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-1df03d9a27a03666-006aa1f97a89246e-006aa1f97a89246e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/1df03d9a27a03666/006aa1f97a89246e#006aa1f97a89246e&#34;&gt;Strings Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo announced that he has merged Dan&amp;rsquo;s string patch into the current CVS head. Thanks go to Will Coleda for doing all the heavy lifting. String content in assemblers now assume the iso-8859-1 charset, unless you specify otherwise.&lt;/p&gt;

&lt;h4 id=&#34;where-are-thou-dan-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-9639fe75600596b9-f35ecbe1eb110be2-f35ecbe1eb110be2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/9639fe75600596b9/f35ecbe1eb110be2#f35ecbe1eb110be2&#34;&gt;Where Are Thou, Dan?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Edward Peschko wondered where Dan was. Will Coleda provided the answer. He is MIA.&lt;/p&gt;

&lt;h4 id=&#34;string-encoding-bug-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-b0e33017a867b530-ac6f56d4c1260f28-ac6f56d4c1260f28&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/b0e33017a867b530/ac6f56d4c1260f28#ac6f56d4c1260f28&#34;&gt;String Encoding Bug&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer found a bug with string encoding in PBC files. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-1-2-pheonix-or-counting-is-fun-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-72895abfd4ba1867-cda0ac964ff089b0-cda0ac964ff089b0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/72895abfd4ba1867/cda0ac964ff089b0#cda0ac964ff089b0&#34;&gt;Parrot 0.1.2 &amp;ldquo;Pheonix&amp;rdquo;, or, Counting is Fun&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo proudly announced the release of Parrot 0.1.2. Thanks to everyone for all your hard work.&lt;/p&gt;

&lt;h4 id=&#34;test-suite-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-88068795b1388146-c4828a3fdaf21fa9-c4828a3fdaf21fa9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/88068795b1388146/c4828a3fdaf21fa9#c4828a3fdaf21fa9&#34;&gt;Test Suite Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer provided a large patch which cleans up some of the test suite. Leo gave him the go ahead to apply it.&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-cleanup-wanted-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-3fd73e761f551ac8-a0623ecb52992ed5-a0623ecb52992ed5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/3fd73e761f551ac8/a0623ecb52992ed5#a0623ecb52992ed5&#34;&gt;Dynclasses Cleanup Wanted&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a plea for a cleanup to dynclasses. There are no takers yet.&lt;/p&gt;

&lt;h4 id=&#34;parrot-installer-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-861fca0f3baafaec-d6fd0922b5567ecc-d6fd0922b5567ecc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/861fca0f3baafaec/d6fd0922b5567ecc#d6fd0922b5567ecc&#34;&gt;Parrot Installer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Olivier Thauvin wants to make a Parrot RPM for Mandrake. Leo and Will gave him pointers on where to start.&lt;/p&gt;

&lt;h4 id=&#34;warnocked-documentation-patch-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-c04f3a326b0d745e-df79bca00f4bab84-df79bca00f4bab84&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/c04f3a326b0d745e/df79bca00f4bab84#df79bca00f4bab84&#34;&gt;Warnocked documentation patch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse wondered about the status of a patch he sent in. There is still no response. ::nudge::&lt;/p&gt;

&lt;h4 id=&#34;mac-os-x-build-problem-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-6b9951a30622e444-c1bc9e1b53e14a76-c1bc9e1b53e14a76&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/6b9951a30622e444/c1bc9e1b53e14a76#c1bc9e1b53e14a76&#34;&gt;Mac OS X Build Problem&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda found an Mac OS X build problem. Leo slapped himself on the forehead and fixed it.&lt;/p&gt;

&lt;h4 id=&#34;strip-the-strip-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-58d3f7458f4f9ae4-8da4b3d7e23dd9a0-8da4b3d7e23dd9a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/58d3f7458f4f9ae4/8da4b3d7e23dd9a0#8da4b3d7e23dd9a0&#34;&gt;Strip the Strip&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jarkko Hietaniemi posted a patch fixing a Tru64 build problem. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;gpm-linkage-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-3e814abbed111af7-518a9a1cc4b377d4-518a9a1cc4b377d4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/3e814abbed111af7/518a9a1cc4b377d4#518a9a1cc4b377d4&#34;&gt;Gpm Linkage&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke supplied a patch fixing gpm linkage. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;failing-tests-on-win32-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-ecc6045018cb93db-92135acf907f8161-92135acf907f8161&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/ecc6045018cb93db/92135acf907f8161#92135acf907f8161&#34;&gt;Failing Tests on Win32&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke posted a list of failing Win32 tests. He then mentioned that he was going to fix the missing export symbols problem.&lt;/p&gt;

&lt;h4 id=&#34;objects-and-vtable-changes-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-7ee7a26748bb49d6-50830061f07ca34c-50830061f07ca34c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/7ee7a26748bb49d6/50830061f07ca34c#50830061f07ca34c&#34;&gt;Objects and VTABLE Changes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo posted a summary of his proposed changes and how they effect MMD and objects.&lt;/p&gt;

&lt;h4 id=&#34;rogue-0xa0-characters-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-5f5642087dc2df24-588dcba2b2ac0743-588dcba2b2ac0743&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/5f5642087dc2df24/588dcba2b2ac0743#588dcba2b2ac0743&#34;&gt;Rogue 0xA0 Characters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jarkko Hietaniemi found some random 0xA0 characters in Parrot header files. He removed them and Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;parrot-config-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-4fc77cdafef72824-d2e0eb269256fc08-d2e0eb269256fc08&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/4fc77cdafef72824/d2e0eb269256fc08#d2e0eb269256fc08&#34;&gt;Parrot Config&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adrian Lambeck wondered how he could query Parrot config. Will pointed him to &lt;em&gt;library/config.imc&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;tinderbox-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-4b2cc5857c50a76c-75f2848b7d755eb3-75f2848b7d755eb3&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/4b2cc5857c50a76c/75f2848b7d755eb3#75f2848b7d755eb3&#34;&gt;Tinderbox&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request to revive the tinderboxen. Steve Peters asked if it would be useful to build it into Perl&amp;rsquo;s current smoke report.&lt;/p&gt;

&lt;h4 id=&#34;mac-os-x-test-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-ee4eb100a7c0f6c0-d6dabae0afd70060-d6dabae0afd70060&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/ee4eb100a7c0f6c0/d6dabae0afd70060#d6dabae0afd70060&#34;&gt;Mac OS X Test Failure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo found and fixed a problem with dynclasses tests on Mac OS X.&lt;/p&gt;

&lt;h4 id=&#34;flatten-return-values-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-e6f47902d1c0e9c4-dc06de8aef8cef4c-dc06de8aef8cef4c&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/e6f47902d1c0e9c4/dc06de8aef8cef4c#dc06de8aef8cef4c&#34;&gt;Flatten Return Values&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers wants to flatten a variable number of return values, just as he can flatten a variable number of arguments. Leo felt that it was a reasonable request.&lt;/p&gt;

&lt;h4 id=&#34;major-changes-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-ddfa91a387b9273d-738c963e4b33f57d-738c963e4b33f57d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/ddfa91a387b9273d/738c963e4b33f57d#738c963e4b33f57d&#34;&gt;Major Changes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo proposed a set of core changes that should take parrot to 0.2 and beyond. Roger Browne and Melvin Smith provided comments.&lt;/p&gt;

&lt;h4 id=&#34;ncurses-life-imc-error-http-groups-beta-google-com-group-perl-perl6-internals-browse-thread-thread-f3e4cb739062468c-e07908135bbc2c48-e07908135bbc2c48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_thread/thread/f3e4cb739062468c/e07908135bbc2c48#e07908135bbc2c48&#34;&gt;&lt;em&gt;ncurses_life.imc&lt;/em&gt; error&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Uwe Voelker had a problem with &lt;em&gt;ncurses_life&lt;/em&gt;. chromatic sent him a patch to try and see if it fixed it.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work.&lt;/p&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;a href=&#34;mailto:perl6-internals-subscribe@perl.org&#34;&gt;perl6-internals-subscribe@perl.org&lt;/a&gt;, &lt;a href=&#34;mailto:perl6-language-subscribe@perl.org&#34;&gt;perl6-language-subscribe@perl.org&lt;/a&gt;, or &lt;a href=&#34;mailto:perl6-compiler-subscribe@perl.org&#34;&gt;perl6-compiler-subscribe@perl.org&lt;/a&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6, Feb. 9-22, 2005</title>
      <link>http://localhost:1313/pub/2005/02/p6pdigest/20050222.html/</link>
      <pubDate>Thu, 24 Feb 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/02/p6pdigest/20050222.html/</guid>
      <description>

&lt;p&gt;Welcome to yet another fortnight summary. Lately, p6l has outstripped p6i in volume. While this used to be the norm, it has become a rare occurrence. Strange. Anyway, this summary would be brought to you by cookies, but I ate them all. So instead this summary is brought to you by the remaining chocolate chips. In other news, Autrijus Tang has just officially received a promotion to first-name-only status in these summaries, based on both his stellar work with Pugs and his highly identifiable name. He now joins the ranks of Larry, Dan, Madonna, and Leo.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;do-while-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c9f1db8d113c08d7-027f23343c652443-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-027f23343c652443&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c9f1db8d113c08d7/027f23343c652443?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#027f23343c652443&#34;&gt;&lt;code&gt;do { } while?&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;David Storrs wanted to know the best way to say &lt;code&gt;do { } while($foo);&lt;/code&gt;. Larry told him that &lt;code&gt;s/do/loop/&lt;/code&gt; would suffice.&lt;/p&gt;

&lt;h4 id=&#34;nest-as-a-primitive-looping-operation-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-32db8717ba0e550d-ac779781875c86f0-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-ac779781875c86f0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/32db8717ba0e550d/ac779781875c86f0?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ac779781875c86f0&#34;&gt;&lt;code&gt;nest&lt;/code&gt; as a Primitive Looping Operation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Timothy Nelson receives credit for resurrecting the oldest thread I have seen brought back recently. Over two years ago, he mentioned a powerful looping structure that allowed for recursion. Now he has found a use for it.&lt;/p&gt;

&lt;h4 id=&#34;loop-entry-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-b35c605369380b56-f4fa6b3ece451d3a-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-f4fa6b3ece451d3a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/b35c605369380b56/f4fa6b3ece451d3a?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#f4fa6b3ece451d3a&#34;&gt;Loop Entry&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Joe Gottman wanted to execute a closure on every loop entrance, not upon every iteration. He thought &lt;code&gt;ENTER&lt;/code&gt; happened only once ever, but it turns out that it will do what he wants.&lt;/p&gt;

&lt;h4 id=&#34;pop-hash-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5b644ba7bf32ee8b-2ef0d824408271ad-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-2ef0d824408271ad&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5b644ba7bf32ee8b/2ef0d824408271ad?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#2ef0d824408271ad&#34;&gt;&lt;code&gt;pop %hash&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wants to be able to pop a key value pair out of a hash. Others wondered what to use it for. Someone mentioned an OrderedHash.&lt;/p&gt;

&lt;h4 id=&#34;higher-order-operators-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1a81badb5e7d23e1-3350855574037772-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-3350855574037772&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1a81badb5e7d23e1/3350855574037772?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#3350855574037772&#34;&gt;Higher Order Operators&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Timothy Nelson wanted meta-operators. Larry gave him the full Unicode character set with which to define them. Tim was happy.&lt;/p&gt;

&lt;h4 id=&#34;none-and-nor-delimiters-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f9fce475f19a5353-2b9ded586f3b69a4-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-2b9ded586f3b69a4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f9fce475f19a5353/2b9ded586f3b69a4?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#2b9ded586f3b69a4&#34;&gt;None and Nor Delimiters&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Thomas Sandlaß suggested using &lt;code&gt;\&lt;/code&gt; as a none junction delimiter. He then extended this idea to provide a logical nor, &lt;code&gt;\\&lt;/code&gt;. Autrijus suggested &lt;code&gt;!&lt;/code&gt; for none. There was some argument about whether nor deserved such Huffmanization. Also, I think that the difference between &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt; would continually escape me. I have enough trouble writing code to deal with Windows filesystems.&lt;/p&gt;

&lt;h4 id=&#34;kudos-to-autrijus-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9e827e4150cbb3b6-204b4e76d72484ed-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-204b4e76d72484ed&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9e827e4150cbb3b6/204b4e76d72484ed?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#204b4e76d72484ed&#34;&gt;Kudos to Autrijus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Damian proudly welcomed Autrijus to the ranks of the last-nameless-ones. He also lauded Autrijus&amp;rsquo; amazing work at forcing a lazy language to pull a lazier one. I think we all agree.&lt;/p&gt;

&lt;h4 id=&#34;containers-vs-object-references-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-2d48d854b9cbe1a8-6c319c910f835318-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-6c319c910f835318&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/2d48d854b9cbe1a8/6c319c910f835318?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#6c319c910f835318&#34;&gt;Containers vs. Object References&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rod Adams wondered whether there was a litmus test that could determine if something deserved its own sigil. The answer appears to be mostly history. Larry suggested a simplistic way to create new sigils, although it would not provide interpolation. I think a blessed method for defining new sigils which do interpolate and provide some sort of type constraint and context would be really nifty. Also I want a million dollars in small, non-consecutive, unmarked bills. If you have either, please mail it to me.&lt;/p&gt;

&lt;h4 id=&#34;printing-true-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-a2a26b0100a72e7a-f34c506880675af8-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-f34c506880675af8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/a2a26b0100a72e7a/f34c506880675af8?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#f34c506880675af8&#34;&gt;Printing True&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered about true and false. Are they just 1 and 0? #t and #f? Larry answered &lt;code&gt;bool::true&lt;/code&gt; and &lt;code&gt;bool::false&lt;/code&gt;, but &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; will suffice when there is no ambiguity.&lt;/p&gt;

&lt;h4 id=&#34;quoted-gt-lhs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-8ce3c96d680b43fd-c95c3599e4ec1bb5-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-c95c3599e4ec1bb5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/8ce3c96d680b43fd/c95c3599e4ec1bb5?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c95c3599e4ec1bb5&#34;&gt;Quoted =&amp;gt; LHS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if &lt;code&gt;=&amp;gt;&lt;/code&gt; auto-quotes its left hand side. It does.&lt;/p&gt;

&lt;h4 id=&#34;x-75-zap-x-75-zap-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-ede7a284fa3de442-6846196d7b25e342-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-6846196d7b25e342&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/ede7a284fa3de442/6846196d7b25e342?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#6846196d7b25e342&#34;&gt;&lt;code&gt;&amp;quot;@&amp;quot; x 75 ~ $zap =?= (&amp;quot;@&amp;quot; x 75) ~ $zap&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd mistakenly thought that &lt;code&gt;~&lt;/code&gt; bound more tightly than &lt;code&gt;x&lt;/code&gt;. Only unary &lt;code&gt;~&lt;/code&gt; binds that tightly, so he is safe.&lt;/p&gt;

&lt;h4 id=&#34;getting-the-key-value-of-a-pair-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-15b8cd859be7f54f-b6a226dcb9efa426-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-b6a226dcb9efa426&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/15b8cd859be7f54f/b6a226dcb9efa426?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#b6a226dcb9efa426&#34;&gt;Getting the key|value of a Pair&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Peters wondered how he could get the key or value from a pair. It turns out that the &lt;code&gt;.key&lt;/code&gt; and &lt;code&gt;.value&lt;/code&gt; method does what he wants until some twisted soul overrides them.&lt;/p&gt;

&lt;h4 id=&#34;junctions-and-auto-threading-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-868ab2f20deb00d8-1036a84d6d4f1bc7-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-1036a84d6d4f1bc7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/868ab2f20deb00d8/1036a84d6d4f1bc7?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#1036a84d6d4f1bc7&#34;&gt;Junctions and Auto-threading&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;By far the longest topic this week was junctions. Some people worry that their auto-threaded behavior will cause plagues to ravage the earth and novices programmers to go blind. Others feel that without it Perl 6 will be a language suitable only to pond scum and cobol programmers. While one side believes that auto-threading repetition of sid effects will crash any database that interacts with Perl 6, the other side believes that requiring extra pragmas to unlock their full power will prevent junctions from curing cancer. Either way someone will be unhappy. It looked like the pendulum was swinging towards auto-threading, but its chief proponent will be away next week, so who knows if it can survive undefended. My favorite suggestion in all of this was to make Perl 6 a pure functional language and introduce monads.&lt;/p&gt;

&lt;h4 id=&#34;nullary-vs-non-slurpy-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d794435fc53aeeb4-3d546e5dcdcbcbe9-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-3d546e5dcdcbcbe9&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d794435fc53aeeb4/3d546e5dcdcbcbe9?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#3d546e5dcdcbcbe9&#34;&gt;Nullary vs. Non-slurpy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus found it distressing that he had to make an empty signature slurpy to make his quicksort sort quickly. Larry assured him that it was okay. This also led to a question of MMD tie-breaking. Remember to attach an &lt;code&gt;is default&lt;/code&gt; if you want your ties broken!&lt;/p&gt;

&lt;h4 id=&#34;pairs-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-e375876af57e5ad7-17172a371838d9c7-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-17172a371838d9c7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/e375876af57e5ad7/17172a371838d9c7?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#17172a371838d9c7&#34;&gt;Pairs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Steve Peters had a few more questions about pairs, which made Osfameron notice that he could use pairs like Lisp&amp;rsquo;s dotted pairs. Larry admitted that he could and had hoped that no one would notice.&lt;/p&gt;

&lt;h4 id=&#34;octal-strings-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-3630972c1f5fe7c3-150340a8a903ede8-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-150340a8a903ede8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/3630972c1f5fe7c3/150340a8a903ede8?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#150340a8a903ede8&#34;&gt;Octal Strings&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer wondered which strings would change radix and to what. The consensus was that something needed to change, but no one is sure what.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compilers&#34;&gt;Perl 6 Compilers&lt;/h3&gt;

&lt;h4 id=&#34;pugs-6-0-8&#34;&gt;Pugs 6.0.8&lt;/h4&gt;

&lt;p&gt;Pugs continues to approach 2 * π with the release of 6.0.5. Later Autrijus decided that he should release more stuff and put out 6.0.8. It has many new features and a much improved test suite. You should contribute tests. All the cool people are.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/8edbef4e7c155c76/155ff69eab6c65ea?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#155ff69eab6c65ea&#34;&gt;6.0.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/160da4b6afe8cff6/b7b6510ff0759f7e?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#b7b6510ff0759f7e&#34;&gt;6.0.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;list-of-builtins-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fd1eab71f4989384-c4121f7ec106c925-done-2fgroup-2fperl-perl6-compiler-3f-donetitle-back-to-topics-donetitle-back-d-c4121f7ec106c925&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fd1eab71f4989384/c4121f7ec106c925?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c4121f7ec106c925&#34;&gt;List of builtins&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if there was a list of builtins anywhere. Patrick pointed him to his start.&lt;/p&gt;

&lt;h4 id=&#34;perl-6-now-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-496f6f549a052253-67611a8b0bd750b5-done-2fgroup-2fperl-perl6-compiler-3f-donetitle-back-to-topics-donetitle-back-d-67611a8b0bd750b5&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/496f6f549a052253/67611a8b0bd750b5?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#67611a8b0bd750b5&#34;&gt;Perl 6 Now&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus wondered if the unit tests for Perl 6 Now were available. Scott Walters told him that they were public domain. Autrijus gleefully sicced a small, ugly dog on them.&lt;/p&gt;

&lt;h4 id=&#34;pugs-tests&#34;&gt;Pugs tests&lt;/h4&gt;

&lt;p&gt;??? proved that he was cool by providing Pugs tests. So did Steve Peters, Benjamin Smith, and Stevan Little. I bet you wish you were cool too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/cf1fb64a97586be3/3e1cb81a3e282bf4?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#3e1cb81a3e282bf4&#34;&gt;???&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/a02f28ad5a1a4109/781c0d6e092ad718?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#781c0d6e092ad718&#34;&gt;Steve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/ffb637727347a7ab/19f46916c942883e?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#19f46916c942883&#34;&gt;Benjamin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/83a37a5a08e90017/f4f98b978914173b?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#f4f98b978914173&#34;&gt;Stevan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pugscode-org-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fda6e0e3d06d9b81-36168631eb11950d-done-2fgroup-2fperl-perl6-compiler-3f-donetitle-back-to-topics-donetitle-back-d-36168631eb11950d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fda6e0e3d06d9b81/36168631eb11950d?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#36168631eb11950d&#34;&gt;Pugscode.org&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus registered &lt;a href=&#34;http://pugscode.org/&#34;&gt;pugscode.org&lt;/a&gt; and populated it.&lt;/p&gt;

&lt;h4 id=&#34;env-in-pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-fa51e00fc3e32be7-54d4a42ff2abd895-done-2fgroup-2fperl-perl6-compiler-3f-donetitle-back-to-topics-donetitle-back-d-54d4a42ff2abd895&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/fa51e00fc3e32be7/54d4a42ff2abd895?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#54d4a42ff2abd895&#34;&gt;&lt;code&gt;%*ENV&lt;/code&gt; in pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rafael Garcia-Suarez wanted access to &lt;code&gt;%*ENV&lt;/code&gt;, so he added it with tests.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;gnu-r-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e0e9845d7619554f-797b41e7df0af799-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-797b41e7df0af799&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e0e9845d7619554f/797b41e7df0af799?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#797b41e7df0af799&#34;&gt;GNU R&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Yves Breitmoser wants to improve the support for GNU R in Perl. Aaron Sherman suggested using Parrot as a back-end for Parrot, which would allow any language that targets Parrot to use R.&lt;/p&gt;

&lt;h4 id=&#34;make-html-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-6c14fd2b66c449d3-da930957ecaf740a-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-da930957ecaf740a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/6c14fd2b66c449d3/da930957ecaf740a?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#da930957ecaf740a&#34;&gt;&lt;code&gt;make html&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Amslser submitted a patch to fix &lt;code&gt;make html&lt;/code&gt;. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;win32-bind-accept-listen-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f21946c947860f10-e3f73f70cc579f81-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-e3f73f70cc579f81&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f21946c947860f10/e3f73f70cc579f81?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#e3f73f70cc579f81&#34;&gt;Win32 &lt;code&gt;bind(accept(listen()))&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Amslser submitted a patch adding &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;listen&lt;/code&gt;, and &lt;code&gt;accept&lt;/code&gt; on Win32. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;commit-privileges-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4d8c764063f50446-743fe0d97af8fb20-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-743fe0d97af8fb20&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4d8c764063f50446/743fe0d97af8fb20?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#743fe0d97af8fb20&#34;&gt;Commit Privileges&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer received commit privileges in recognition of his many high quality patches. Congrats Bernhard!&lt;/p&gt;

&lt;h4 id=&#34;tiny-webserver-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-28d2209f38dd22a8-1f3c3a31d79b71f7-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-1f3c3a31d79b71f7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/28d2209f38dd22a8/1f3c3a31d79b71f7?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#1f3c3a31d79b71f7&#34;&gt;Tiny Webserver&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Markus Amslser also provided a patch to allow his tiny webserver to run on Linux. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;freebsd-build-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0249207572737092-dd04c9970791c4a0-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-dd04c9970791c4a0&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0249207572737092/dd04c9970791c4a0?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#dd04c9970791c4a0&#34;&gt;FreeBSD Build Failure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Adriano Ferreira fixed some problems with the FreeBSD build. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-1-2-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f3fab2ac907655ca-217c973cc03ce324-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-217c973cc03ce324&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f3fab2ac907655ca/217c973cc03ce324?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#217c973cc03ce324&#34;&gt;Parrot 0.1.2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda continued pushing for a 0.1.2 release. Leo told him that there would be a release after the German Perl Workshop, which should be ending soon.&lt;/p&gt;

&lt;h4 id=&#34;linux-ppc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-33d379077b32a52a-5b13e8374e061881-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-5b13e8374e061881&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/33d379077b32a52a/5b13e8374e061881?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#5b13e8374e061881&#34;&gt;Linux PPC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo attempted to fix the longstanding issues with Linux PPC configure.&lt;/p&gt;

&lt;h4 id=&#34;failing-python-tests-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7aaad0dcfe9205c-f4b32479194a9920-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-f4b32479194a9920&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7aaad0dcfe9205c/f4b32479194a9920?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#f4b32479194a9920&#34;&gt;Failing Python Tests&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty noticed failures on some of the &lt;code&gt;dynclasses/py*.t&lt;/code&gt; tests. He is working with Leo on providing enough information to solve the problem.&lt;/p&gt;

&lt;h4 id=&#34;pypy-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f27777feb08ea5aa-7a88d1ce65b07f90-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-7a88d1ce65b07f90&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f27777feb08ea5aa/7a88d1ce65b07f90?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#7a88d1ce65b07f90&#34;&gt;PyPy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Christian Tismer posted to the list informing everyone about the PyPy sprint at Washington, DC&amp;rsquo;s PyCon 2005. They are eager to compare notes with other developers.&lt;/p&gt;

&lt;h4 id=&#34;string-init-and-icu-data-dir-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-113ba6bba4850f21-37c99776d01d9c17-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-37c99776d01d9c17&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/113ba6bba4850f21/37c99776d01d9c17?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#37c99776d01d9c17&#34;&gt;&lt;code&gt;string_init&lt;/code&gt; and ICU data dir&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke noticed that Parrot choked on an empty ICU data dir. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;win32-parrot&#34;&gt;Win32 Parrot&lt;/h4&gt;

&lt;p&gt;Ron Blaschke wants to improve Parrot building on Win32. He has offered to add the necessary &lt;code&gt;PARROT_API&lt;/code&gt; macros and do other footwork.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/abac320f8dc6d90d/9130bd5912878379?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#9130bd591287837&#34;&gt;9 PARROT_API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b63bab9684650c32/c4bc15f10e8f7d60?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c4bc15f10e8f7d60&#34;&gt;gdbm Linkage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/eda36ef909e84317/4db270db2ebb7561?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#4db270db2ebb756&#34;&gt;1 outdated rt ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/eb464ab13c6dc054/eadab236b54d5de7?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#eadab236b54d5de7&#34;&gt;old rt ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/cee1de139ac3da71/d79538b415443c79?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#d79538b415443c79&#34;&gt;fix libnci_test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c1cfed051524da21/fc47832e8ad8d9da?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#fc47832e8ad8d9da&#34;&gt;old ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7af573280e794bd1/dbf4ab93a9b7d19c?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#dbf4ab93a9b7d19c&#34;&gt;out of date ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/3e814abbed111af7/4c67e51a63a4c90d?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#4c67e51a63a4c90d&#34;&gt;dbm troubles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tail-calls-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f81a7fdd8efff573-ab739e5ea1d1cc0f-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-ab739e5ea1d1cc0f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f81a7fdd8efff573/ab739e5ea1d1cc0f?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ab739e5ea1d1cc0f&#34;&gt;Tail Calls&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bob Rogers wants to make tail calls without knowing the last call&amp;rsquo;s return values. Currently he just lies to IMCC to make it work. Leo pointed him to &lt;code&gt;interpinfo .INTERPINFO_CURRENT_CONT&lt;/code&gt; and also suggested adding a &lt;code&gt;tail_call&lt;/code&gt; op.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to &lt;a href=&#34;mailto:perl6-internals-subscribe@perl.org&#34;&gt;perl6-internals-subscribe@perl.org&lt;/a&gt;, &lt;a href=&#34;mailto:perl6-language-subscribe@perl.org&#34;&gt;perl6-language-subscribe@perl.org&lt;/a&gt;, or &lt;a href=&#34;mailto:perl6-compiler-subscribe@perl.org&#34;&gt;perl6-compiler-subscribe@perl.org&lt;/a&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Week in Perl 6, Feb. 1 - 8, 2005</title>
      <link>http://localhost:1313/pub/2005/02/p6pdigest/20050208.html/</link>
      <pubDate>Thu, 10 Feb 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/02/p6pdigest/20050208.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to yet another summary in which I will undoubtedly confuse two homophones &amp;ndash; probably more than a few this week as I am a little tired. But perhaps the alien on my window or the vampire on my monitor will help straighten it all out.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;auto-threading-generalization-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f64bc3b208a5cd06-fbc0152bfcef5d9b-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-fbc0152bfcef5d9b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f64bc3b208a5cd06/fbc0152bfcef5d9b?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#fbc0152bfcef5d9b&#34;&gt;Auto-threading Generalization&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer&amp;rsquo;s thread about auto-threading seems to have wound down without much resolution, or at the very least without a syntax that I like.&lt;/p&gt;

&lt;h4 id=&#34;featherweight-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-5e4a1efa105db3c2-b1254f644f628355-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-b1254f644f628355&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/5e4a1efa105db3c2/b1254f644f628355?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#b1254f644f628355&#34;&gt;Featherweight Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus Tang introduced Featherweight Perl 6, a side-effect-free subset of Perl 6. FP6 is the first step on a journey for Pugs to conquer the world.&lt;/p&gt;

&lt;h4 id=&#34;value-types-vs-implementation-types&#34;&gt;Value Types vs. Implementation Types&lt;/h4&gt;

&lt;p&gt;Autrijus Tang became confused by types in his work on FP6. He asked some questions about Types on perl6-language, which told him to go to perl6-compiler. perl6-compiler told him that he should really be on perl6-language. Sorry for the runaround. The proper place for questions about language semantics is perl6-language, where he originally posted. Eventually all of that settled and someone even answered his question.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/38d11214f7fef336/40de97d505000d8a?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#40de97d505000d8a&#34;&gt;Original post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/6f7f3835ecbd0d35/d0d2526bc839747e?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#d0d2526bc839747e&#34;&gt;Retry with less compiler speak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;logic-programming-in-perl-6-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-05e3e963af533c66-556d922352badfe2-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-556d922352badfe2&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/05e3e963af533c66/556d922352badfe2?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#556d922352badfe2&#34;&gt;Logic Programming in Perl 6&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ovid asked how logic programming in Perl 6 would look. No answer came, but I suppose I can pick the low hanging fruit: as a limiting case you could always back out the entire Perl 6 grammar and insert that of Prolog.&lt;/p&gt;

&lt;h4 id=&#34;the-leaning-tower-of-numbers-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c17f00f2dfaaae75-c058273872964662-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-c058273872964662&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c17f00f2dfaaae75/c058273872964662?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c058273872964662&#34;&gt;The Leaning Tower of Numbers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus Tang asked what sort of number tower Perl 6 had. He was planning (and implemented) that of Scheme until he received an answer otherwise.&lt;/p&gt;

&lt;h4 id=&#34;some-quick-questions-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9104105fcb8ce308-0f34dd175d56e95b-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-0f34dd175d56e95b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9104105fcb8ce308/0f34dd175d56e95b?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#0f34dd175d56e95b&#34;&gt;Some Quick Questions&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus Tang asked a few questions about operators in specific contexts. He received a few answers, although I don&amp;rsquo;t think they covered everything.&lt;/p&gt;

&lt;h4 id=&#34;getopt-signature-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d013231e60281c54-0f56b04b11e61c4b-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-0f56b04b11e61c4b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d013231e60281c54/0f56b04b11e61c4b?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#0f56b04b11e61c4b&#34;&gt;Getopt::Signature&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wants to be able to give his script a general signature that magically parses command-line arguments. Many people thought it was a cool idea that should go in a module rather than in the core. This led to talk about creating a signature object to pass to this module so that it doesn&amp;rsquo;t need macros. Sounds good to me.&lt;/p&gt;

&lt;h4 id=&#34;s03-inconsistency-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-1e04c404b2312e4f-5bb4241195ceba2d-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-5bb4241195ceba2d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/1e04c404b2312e4f/5bb4241195ceba2d?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#5bb4241195ceba2d&#34;&gt;S03 Inconsistency&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd found a nit to pick. There were no comments about whether to pick the first or second option, though&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;regex-precedence-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-d7a6bbcadb6503d2-a01fa36ef116dd02-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-a01fa36ef116dd02&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d7a6bbcadb6503d2/a01fa36ef116dd02?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#a01fa36ef116dd02&#34;&gt;Regex Precedence&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nicholas Clark wondered about adding a little operator precedence to regexes so that people could avoid a few common problems. It sounds like a good idea to me.&lt;/p&gt;

&lt;h4 id=&#34;pipedreams-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c5bb4a6d5a6e6ed5-40ff805393136f1f-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-40ff805393136f1f&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c5bb4a6d5a6e6ed5/40ff805393136f1f?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#40ff805393136f1f&#34;&gt;Pipedreams&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if he could mix &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;==&amp;gt;&lt;/code&gt; in a sane way. The answer appears to be no. Once you bring in &lt;code&gt;==&amp;gt;&lt;/code&gt; you should stick with it.&lt;/p&gt;

&lt;h4 id=&#34;4-x-2-true-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-9b872c9ed83288e0-dee3c5ceaccf1882-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-dee3c5ceaccf1882&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/9b872c9ed83288e0/dee3c5ceaccf1882?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#dee3c5ceaccf1882&#34;&gt;&lt;code&gt;4 &amp;lt; $x &amp;lt; 2 == true&lt;/code&gt;?!?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Autrijus Tang wondered how junctions and chained comparators work. He found that under certain semantics, the answers can be very troubling. Larry agreed with Autrijus about the need to avoid unintuitive semantics.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-6-0-0&#34;&gt;Pugs 6.0.0&lt;/h4&gt;

&lt;p&gt;Autrijus Tang released Pugs 6.0.0 after six days of creation. It has many cool features, whether a testament to the power of Haskell or the caffeine intake of Autrijus. (Although to be fair he skipped more version numbers then Java did in its jump to 5.0.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/1f0786afffad7622/78f4c85198dfc803?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#78f4c85198dfc803&#34;&gt;Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://autrijus.org/pugs/&#34;&gt;Pugs website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://use.perl.org/~autrijus/journal/&#34;&gt;Implementation journal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;gdbmhash-warning-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-128cdb957dd589b9-91d9fe1e7bbeacbd-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-91d9fe1e7bbeacbd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/128cdb957dd589b9/91d9fe1e7bbeacbd?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#91d9fe1e7bbeacbd&#34;&gt;Gdbmhash Warning&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer fixed a problem where gdbmhash could make &lt;code&gt;Configure&lt;/code&gt; produce a warning. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;pynci-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2853a00850a9b11c-481de9502b44540e-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-481de9502b44540e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2853a00850a9b11c/481de9502b44540e?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#481de9502b44540e&#34;&gt;PyNCI&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sam and Leo worked out the correct way to create NCI methods for Python. Leo ended by proposing a table to assist Parrot based on the current language, but no answer came for that idea.&lt;/p&gt;

&lt;h4 id=&#34;makefile-cleanup-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b7a3db11e168f072-4db88267262c9915-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-4db88267262c9915&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b7a3db11e168f072/4db88267262c9915?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#4db88267262c9915&#34;&gt;&lt;em&gt;Makefile&lt;/em&gt; Cleanup&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer cleaned up some of the makefiles and configure system. Leo applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;parrotiolayer-const-or-not-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-bc085b85c608b9f2-c40e41ff938107fa-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-c40e41ff938107fa&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/bc085b85c608b9f2/c40e41ff938107fa?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c40e41ff938107fa&#34;&gt;&lt;code&gt;ParrotIOLayer*&lt;/code&gt; Const or Not&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch making the &lt;code&gt;ParrotIOLayer*&lt;/code&gt; const in the API. Leo applied it, but Melvin warned that while this may be safe now, the API intended to allow mutability. I think for the moment it is still in though.&lt;/p&gt;

&lt;h4 id=&#34;win32-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7d149e7e84eb21b-eabf6f6cf0804c47-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-eabf6f6cf0804c47&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7d149e7e84eb21b/eabf6f6cf0804c47?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#eabf6f6cf0804c47&#34;&gt;Win32 Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke helped Parrot back onto its feet in the Windows world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b671ff734d8c1039/61a2dd6745de36b8?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#61a2dd6745de36b8&#34;&gt;Latest results&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;parrot-load-bytecode-failure-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-d0f4b900e21b38cf-caf7071ee6885084-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-caf7071ee6885084&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d0f4b900e21b38cf/caf7071ee6885084?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#caf7071ee6885084&#34;&gt;&lt;code&gt;Parrot_load_bytecode&lt;/code&gt; Failure?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ian Joyce wondered what would happen if &lt;code&gt;Parrot_load_bytecode&lt;/code&gt; failed. The answer: an exception.&lt;/p&gt;

&lt;h4 id=&#34;reading-past-eof-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4c9d3f29c7ed75c8-30378cdaf40babc8-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-30378cdaf40babc8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4c9d3f29c7ed75c8/30378cdaf40babc8?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#30378cdaf40babc8&#34;&gt;Reading Past EOF&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse found it annoying that reading past EOF gave an unhelpful error message. Leo fixed it.&lt;/p&gt;

&lt;h4 id=&#34;freebsd-build-problems-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0249207572737092-a8c5db31dbd75085-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-a8c5db31dbd75085&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0249207572737092/a8c5db31dbd75085?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#a8c5db31dbd75085&#34;&gt;FreeBSD Build Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda found a build problem for Parrot on FreeBSD. Adriano Ferreira provided a workaround, but the build system needs to be smarter, too. On a side note, I want a picture of the BSD daemon (pitchfork included) with a pirate hat, an eye patch, and a parrot on its shoulder.&lt;/p&gt;

&lt;h4 id=&#34;gmake-requirement-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-54c5ba8dfea4eb17-32322a16145c6bcc-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-32322a16145c6bcc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/54c5ba8dfea4eb17/32322a16145c6bcc?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#32322a16145c6bcc&#34;&gt;&lt;code&gt;Gmake&lt;/code&gt; Requirement?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;There was some confusion about what does and does not require &lt;code&gt;gmake&lt;/code&gt; on FreeBSD. IMCC does not. ICU does. Fortunately, Dan&amp;rsquo;s string stuff will make ICU optional and Parrot won&amp;rsquo;t require it.&lt;/p&gt;

&lt;h4 id=&#34;locate-runtime-file-with-absolute-paths-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7f0e6a2425c000c3-50a89a6b9ff0df71-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-50a89a6b9ff0df71&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7f0e6a2425c000c3/50a89a6b9ff0df71?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#50a89a6b9ff0df71&#34;&gt;&lt;code&gt;Locate_runtime_file&lt;/code&gt; with Absolute Paths&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Horwitz noticed that &lt;code&gt;Parrot_locate_runtime_file&lt;/code&gt; could segfault when playing with an absolute path. He put some work in to fix it.&lt;/p&gt;

&lt;h4 id=&#34;expected-vpm-imc-output-error-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-072216c7d2041cc7-c0de5c250dfadc7a-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-c0de5c250dfadc7a&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/072216c7d2041cc7/c0de5c250dfadc7a?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#c0de5c250dfadc7a&#34;&gt;Expected &lt;em&gt;vpm.imc&lt;/em&gt; Output Error&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer fixed a failing benchmark test that just had slightly wrong output expectations. chromatic (whose uncapitalized name does not bother me) applied the patch.&lt;/p&gt;

&lt;h4 id=&#34;subversive-parrot-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-dfd9b5007b42705b-62c826e990b1e567-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-62c826e990b1e567&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/dfd9b5007b42705b/62c826e990b1e567?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#62c826e990b1e567&#34;&gt;Subversive Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke asked if there were plans to move Parrot to SVN. Many argued in favor; few argued against. No word from the powers-that-be.&lt;/p&gt;

&lt;h4 id=&#34;parrot-0-1-2-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f3fab2ac907655ca-ce1e479ab2605ae8-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-ce1e479ab2605ae8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f3fab2ac907655ca/ce1e479ab2605ae8?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ce1e479ab2605ae8&#34;&gt;Parrot 0.1.2?&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda wondered if the time for Parrot 0.1.2 was growing close. Leo pointed out some things that need fixes. Honestly, the real impediment is that we do not yet have a cool code name. I suggest kiwi, because everyone knows they really want to be Parrots.&lt;/p&gt;

&lt;h4 id=&#34;making-an-array-out-of-an-undef-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-95786368b7c49faf-bf845f0561fc65fd-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-bf845f0561fc65fd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/95786368b7c49faf/bf845f0561fc65fd?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#bf845f0561fc65fd&#34;&gt;Making an Array Out of an Undef&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ron Blaschke was surprised when an operation quietly turned an Undef into an array. Leo explained to him that this set of semantics was known and expected.&lt;/p&gt;

&lt;h4 id=&#34;solaris-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-e7aaad0dcfe9205c-9f4ef8cbe4ee97a4-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-9f4ef8cbe4ee97a4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e7aaad0dcfe9205c/9f4ef8cbe4ee97a4?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#9f4ef8cbe4ee97a4&#34;&gt;Solaris Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy Dougherty noticed that Parrot was failing some tests on Solaris. He tried to provide enough info for people to help him, but no one did.&lt;/p&gt;

&lt;h4 id=&#34;linux-ppc-issues-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-0ba5cee8ddebab21-63f81c98b5107480-done-2fgroup-2fperl-perl6-internals-3f-donetitle-back-to-topics-donetitle-back-d-63f81c98b5107480&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/0ba5cee8ddebab21/63f81c98b5107480?_done=%2Fgroup%2Fperl.perl6.internals%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#63f81c98b5107480&#34;&gt;Linux PPC Issues&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Jeff Dik posted a patch that worked around a problem on Linux PPC. chromatic pointed out that there was a more correct patch already in RT. Jeff Dik slapped himself on the forehead and reminded himself to check RT first.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;Posting via the Google Groups interface does not work. To post to any of these mailing lists please subscribe by sending email to . If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This Fortnight in Perl 6, Jan. 19-31, 2005</title>
      <link>http://localhost:1313/pub/2005/02/p6pdigest/2005031.html/</link>
      <pubDate>Thu, 03 Feb 2005 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2005/02/p6pdigest/2005031.html/</guid>
      <description>

&lt;p&gt;All~&lt;/p&gt;

&lt;p&gt;Welcome to another double feature summary. Sadly, this one was delayed because of an argument that I was/am having with my connection. Fortunately, a generous neighbor has allowed me to use his connection for the time being. So, with that random act of kindness in mind, I bring you �&lt;/p&gt;

&lt;h3 id=&#34;perl-6-language&#34;&gt;Perl 6 Language&lt;/h3&gt;

&lt;h4 id=&#34;perl-6-on-e&#34;&gt;Perl 6 on E&lt;/h4&gt;

&lt;p&gt;Rich Morin wondered if Perl 6 would support the features of the language E. Larry told him it would support many of them, and &amp;ldquo;as a limiting case, you can always back out the entire Perl grammar and install the E grammar in its place.&amp;rdquo; He left this as an exercise for the reader.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d7b5679b0c32a7c7/f1f8012e39225a1e?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#f1f8012e39225a1e&#34;&gt;The Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.erights.org/&#34;&gt;E&amp;rsquo;s Homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;challenge-the-palmer-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-60003777d2b8df79-db70f9b005934bf8-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-db70f9b005934bf8&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/60003777d2b8df79/db70f9b005934bf8?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#db70f9b005934bf8&#34;&gt;Challenge the Palmer &amp;hellip;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer produced answers to Austin Hastings&amp;rsquo;s &amp;ldquo;How do I&amp;rdquo; questions. Anyone else with such questions should send them to the list lest Luke&amp;rsquo;s learnedness loses luster.&lt;/p&gt;

&lt;h4 id=&#34;refactoring-perl-automatically&#34;&gt;Refactoring Perl automatically&lt;/h4&gt;

&lt;p&gt;Matisse Enzer re-re-raised the thread on refactoring Perl. This time he posted a link to EPIC, an Eclipse plugin that uses &lt;a href=&#34;https://metacpan.org/pod/Devel::Refactor&#34;&gt;Devel::Refactor&lt;/a&gt;. Unfortunately, I think he is still using the Google Groups interface to post the language. I repeat, emails posted via Google Groups do &lt;em&gt;not&lt;/em&gt; make it to the list itself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/d31481c114e88a11/8fde39f7f7418669?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Bac+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#8fde39f7f7418669%22&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.epic-ide.org&#34;&gt;EPIC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;loops-bare-blocks-and-my-head-hurts-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-c9f1db8d113c08d7-ae57551677fee394-done-2fgroup-2fperl-perl6-language-3f-donetitle-bac-to-topics-donetitle-back-d-ae57551677fee394-22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/c9f1db8d113c08d7/ae57551677fee394?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Bac+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ae57551677fee394%22&#34;&gt;Loops, Bare Blocks, and My Head Hurts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if &lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt; would work outside loops. Larry provided the long answer. The short answer is no, things act basically rationally so that &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, and &lt;code&gt;last&lt;/code&gt; all behave as expected.&lt;/p&gt;

&lt;h4 id=&#34;where-without-type-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-4bcd12915cf71913-932c5f432a874044-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-932c5f432a874044&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/4bcd12915cf71913/932c5f432a874044?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#932c5f432a874044&#34;&gt;Where Without Type&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Juerd wondered if he could use a where clause with a type. The answer is yes, as it will useful to restrict values admitted to a multi-method. This led me to the evil thought of putting side-effects in a where clause on several multi-methods and watching the pain of resolution cause very difficult to find bugs. Sometime I think that my mind looks for nasty ways to write bad code a little too much.&lt;/p&gt;

&lt;h4 id=&#34;auto-threading-http-groups-beta-google-com-group-perl-perl6-language-browse-frm-thread-f64bc3b208a5cd06-a3d89cf334c4bc3d-done-2fgroup-2fperl-perl6-language-3f-donetitle-back-to-topics-donetitle-back-d-a3d89cf334c4bc3d&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/f64bc3b208a5cd06/a3d89cf334c4bc3d?_done=%2Fgroup%2Fperl.perl6.language%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#a3d89cf334c4bc3d&#34;&gt;Auto-threading&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Luke Palmer posted his musing about auto-threading. I must say it looks powerful enough to blow off your entire lower body if you shoot yourself in the foot.&lt;/p&gt;

&lt;h3 id=&#34;perl-6-compiler&#34;&gt;Perl 6 Compiler&lt;/h3&gt;

&lt;h4 id=&#34;pugs-http-groups-beta-google-com-group-perl-perl6-compiler-browse-frm-thread-73a788c2ec58460a-5affb9601639f1dc-done-2fgroup-2fperl-perl6-compiler-3f-donetitle-back-to-topics-donetitle-back-d-5affb9601639f1dc&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.compiler/browse_frm/thread/73a788c2ec58460a/5affb9601639f1dc?_done=%2Fgroup%2Fperl.perl6.compiler%3F&amp;amp;_doneTitle=Back+to+topics&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#5affb9601639f1dc&#34;&gt;Pugs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Not just ugly dogs anymore, they are also P6 interpreters written in Haskel. It sounds really cool to me.&lt;/p&gt;

&lt;h3 id=&#34;parrot&#34;&gt;Parrot&lt;/h3&gt;

&lt;h4 id=&#34;mmd-and-meta-stuff-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-2a32fa21e2795b7f-fd10f5769fb8ed39-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d30-26order-3drecent-26-donetitle-back-d-fd10f5769fb8ed39&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/2a32fa21e2795b7f/fd10f5769fb8ed39?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D30%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#fd10f5769fb8ed39&#34;&gt;MMD and Meta-Stuff&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;In a thread posted also to p6l (sorry about that), I attempt to explain how parrot object system is already very close to the Common Lisp Object System and why it should become even closer. I am not sure if I succeeded. My ability to express really abstract thoughts without a whiteboard is poor.&lt;/p&gt;

&lt;h4 id=&#34;rt-clean-up&#34;&gt;RT Clean Up&lt;/h4&gt;

&lt;p&gt;Will Coleda has put an extensive amount of work into cleaning up Parrot for public presentation with a focus on RT and organization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4c44bbf90d80f5be/d330d20d7fbb4f98?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D30%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#d330d20d7fbb4f98&#34;&gt;Hall of Shame 15308&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/d73ecb43144bf1c3/ef842bfe48337d56?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ef842bfe48337d56&#34;&gt;ROADMAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;argv-0-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-5ac3f1c5375d5da5-6f67663f2c6f1245-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-6f67663f2c6f1245&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/5ac3f1c5375d5da5/6f67663f2c6f1245?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#6f67663f2c6f1245&#34;&gt;&lt;code&gt;argv[0]&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Wukk (who is Will when my fingers slip off key) wants the name of the invoked executable. Dan upped the ante by offering the full and base name variants of the interpreter, the program, and the invoked thing.&lt;/p&gt;

&lt;h4 id=&#34;oscon-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-f9ac71f8f3402597-46c18e5d2658e6cd-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-46c18e5d2658e6cd&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/f9ac71f8f3402597/46c18e5d2658e6cd?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#46c18e5d2658e6cd&#34;&gt;OSCON&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Robert Spier put out a call for OSCON proposals.&lt;/p&gt;

&lt;h4 id=&#34;read-and-readline&#34;&gt;&lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Readline&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse has been cleaning up &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;readline&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/e458ecc388f0b0a7/534af68d76a393ff?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#534af68d76a393ff&#34;&gt;RT Ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/1725d504480fb0bf/ae8d0fcfbcef7b33?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ae8d0fcfbcef7b33&#34;&gt;Discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/14124ddc27011622/0bc232a97c300571?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#0bc232a97c300571&#34;&gt;Partial Resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4c9d3f29c7ed75c8/ecd2934565627820?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ecd2934565627820&#34;&gt;An Offered Patch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;test-main-c-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-358874c77dbe40f8-01806480a1ea7b6e-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-01806480a1ea7b6e&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/358874c77dbe40f8/01806480a1ea7b6e?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#01806480a1ea7b6e&#34;&gt;&lt;em&gt;Test_main.c&lt;/em&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bloves posted a patch updating &lt;em&gt;test_main.c&lt;/em&gt;. Unfortunately, it turns out that this file is obsolete and needs removal.&lt;/p&gt;

&lt;h4 id=&#34;mingw-support-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-172d1adda7469e0d-95945ab76a0f38bf-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-95945ab76a0f38bf&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/172d1adda7469e0d/95945ab76a0f38bf?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#95945ab76a0f38bf&#34;&gt;MinGW Support&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;François Perrad provided a patch to improve MinGW support. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;compile-problems-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-7684b8c1d7e68372-ae4a0d585dd4dc48-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-ae4a0d585dd4dc48&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/7684b8c1d7e68372/ae4a0d585dd4dc48?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#ae4a0d585dd4dc48&#34;&gt;Compile Problems&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Will Coleda has a failing fresh build. Warnock applies.&lt;/p&gt;

&lt;h4 id=&#34;nci-improvements-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-ab24fcf236379e61-438778ca1f18c3df-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-438778ca1f18c3df&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/ab24fcf236379e61/438778ca1f18c3df?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#438778ca1f18c3df&#34;&gt;NCI Improvements&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Bernhard Schmalhofer provided a patch improving NCI stuff. Leo applied it.&lt;/p&gt;

&lt;h4 id=&#34;vs-net-2003-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-dd3cb5e94f1eb835-74b248bf61c2f1f6-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-74b248bf61c2f1f6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/dd3cb5e94f1eb835/74b248bf61c2f1f6?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#74b248bf61c2f1f6&#34;&gt;VS.NET 2003&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sriram Krishnan fought through a build on VS.NET 2003. He overcame problems and even posted a summary. Unfortunately, he posted all of this to the Google Groups interface, as none of it made it back to the list.&lt;/p&gt;

&lt;h4 id=&#34;dynclasses-missing-dependencies-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-b21ec6647812dbc0-6a4502bb3d5316a6-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-6a4502bb3d5316a6&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/b21ec6647812dbc0/6a4502bb3d5316a6?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#6a4502bb3d5316a6&#34;&gt;Dynclasses Missing Dependencies&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo put out a request for fixes to the problem with dynclasses missing dependencies.&lt;/p&gt;

&lt;h4 id=&#34;generational-gc-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-50e56319b876b08c-7904e9a0baf710a7-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-7904e9a0baf710a7&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/50e56319b876b08c/7904e9a0baf710a7?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#7904e9a0baf710a7&#34;&gt;Generational GC&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Leo has put in the first part of his Generational GC system. It has bugs, but it is also cool.&lt;/p&gt;

&lt;h4 id=&#34;preemptive-multi-tasking-via-continuations-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-4d41960215df55fc-59fc22020073e94b-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-59fc22020073e94b&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/4d41960215df55fc/59fc22020073e94b?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#59fc22020073e94b&#34;&gt;Preemptive Multi-tasking via Continuations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Hugh Arnold wants to use timers and continuations to implement preemptive multitasking in a single threaded application. He wants to know if Parrot will support it. I think that the answer is yes.&lt;/p&gt;

&lt;h4 id=&#34;bound-methods-attribute-lookup-and-python-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-c3549ba4ffce05e7-08173698a160df55-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-drecent-26-donetitle-back-d-08173698a160df55-22&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/c3549ba4ffce05e7/08173698a160df55?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#08173698a160df55%22&#34;&gt;Bound Methods, Attribute Lookup, and Python&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dan, Leo, and Sam have started to go around about how to implement method lookup and currying. Best of luck to all.&lt;/p&gt;

&lt;h4 id=&#34;lib-make-pm-http-groups-beta-google-com-group-perl-perl6-internals-browse-frm-thread-87cf2d202be97b9b-e109174d6f56dfc4-done-2fgroup-2fperl-perl6-internals-2fthreads-3fstart-3d0-26order-3drecent-26-donetitle-back-d-e109174d6f56dfc4&#34;&gt;&lt;a href=&#34;http://groups-beta.google.com/group/perl.perl6.internals/browse_frm/thread/87cf2d202be97b9b/e109174d6f56dfc4?_done=%2Fgroup%2Fperl.perl6.internals%2Fthreads%3Fstart%3D0%26order%3Drecent%26&amp;amp;_doneTitle=Back&amp;amp;&amp;amp;d#e109174d6f56dfc4&#34;&gt;lib/Make.pm&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Matt Diephouse noticed that &lt;em&gt;lib/Make.pm&lt;/em&gt; is out of date and unneeded. He asked for its removal.&lt;/p&gt;

&lt;h3 id=&#34;interacting-with-the-mailing-lists&#34;&gt;Interacting with the Mailing Lists&lt;/h3&gt;

&lt;p&gt;Someone suggested that I add a description of the preferred modality for interacting with the mailing lists summarized herein. I think this is a good idea and will add it to the standard footer.&lt;/p&gt;

&lt;h3 id=&#34;the-usual-footer&#34;&gt;The Usual Footer&lt;/h3&gt;

&lt;p&gt;To post to any of these mailing lists please subscribe by sending email to &lt;code&gt;perl6-internals-subscribe@perl.org&lt;/code&gt;, &lt;code&gt;perl6-language-subscribe@perl.org&lt;/code&gt;, or &lt;code&gt;perl6-compiler-subscribe@perl.org&lt;/code&gt;. If you find these summaries useful or enjoyable, please consider contributing to the Perl Foundation to help support the development of Perl. You might also like to send feedback to &lt;a href=&#34;mailto:ubermatt@gmail.com&#34;&gt;ubermatt@gmail.com&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://donate.perl-foundation.org/&#34;&gt;The Perl Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.perl.org/perl6/&#34;&gt;Perl 6 Development site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://planet.parrotcode.org/&#34;&gt;Parrot Blog aggregator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

