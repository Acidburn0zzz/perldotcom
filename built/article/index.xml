<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/article/</link>
    <description>Recent content in Articles on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2020 07:30:00 +0000</lastBuildDate>
    <atom:link href="/article/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Perl Ambassador: Curtis &#39;Ovid&#39; Poe</title>
      <link>http://localhost:1313/article/the-perl-admbassador-curtis-poe/</link>
      <pubDate>Wed, 15 Jul 2020 07:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-admbassador-curtis-poe/</guid>
      <description>

&lt;p&gt;As a part of monthly series of interview, today we are talking to none
other than &lt;strong&gt;Curtis &amp;lsquo;Ovid&amp;rsquo; Poe&lt;/strong&gt; himself. He is one of the tallest
leader of Perl community.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like me to interview you, or know someone you&amp;rsquo;d like me to
interview, let me know. Take the same set of questions and send me your
answers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curtis&lt;/strong&gt; has been building software for decades. He specialize in
building database-driven Websites. He joined The Perl Foundation
&lt;a href=&#34;https://news.perlfoundation.org/post/new_board_member&#34;&gt;boards of directors&lt;/a&gt;
in 2009. He also runs the global global development and consulting firm,
&lt;a href=&#34;https://allaroundtheworld.fr/&#34;&gt;All Around The World&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He wrote some of the very popular books on Perl like
&lt;a href=&#34;https://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840/&#34;&gt;Beginning Perl&lt;/a&gt;
and &lt;a href=&#34;https://www.amazon.com/Perl-Hacks-Programming-Debugging-Surviving/dp/0596526741/&#34;&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He is also the man behind &lt;a href=&#34;https://taustation.space/&#34;&gt;Tau Station&lt;/a&gt;,
text-based Massive Multiplayer Online Browser Game (MMOBG) set in a
vibrant far future universe.&lt;/p&gt;

&lt;p&gt;You can find him blogging &lt;a href=&#34;https://ovid.github.io/blog.html&#34;&gt;here&lt;/a&gt;. If
are interested in the technical blog then you please check out his
&lt;a href=&#34;https://ovid.github.io/articles.html&#34;&gt;collections&lt;/a&gt;. How about his
&lt;a href=&#34;https://ovid.github.io/publicspeaking.html&#34;&gt;public speaking video&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-first-start-using-perl&#34;&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I first started using Perl about 20 years ago, when I was doing mainframe programming. I was trying to fix a problem with a COBOL program that was converting a CSV file from an NT system to the fixed-width format that COBOL prefers. COBOL has many weaknesses and working with text is one of them. The code was 150 lines long, but that’s because the author didn’t understand how the COBOL’s unstring function worked. I got it down to 80 lines of COBOL. Out of curiosity, I tried it in Perl and got it down to 10 lines of code. Everything I touched in Perl was shorter and easier to read, so I jumped ship.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-about-perl-7-do-you-see-the-perl-is-on-the-path-of-recovery&#34;&gt;What do you think about Perl 7? Do you see the Perl is on the path of recovery?&lt;/h4&gt;

&lt;p&gt;I am 100% on board with the project and yes, it&amp;rsquo;s the path for Perl&amp;rsquo;s recovery. I&amp;rsquo;ve seen widespread support for the change, which was heartening, and with the amount of press, even TIOBE moved Perl from 19 to 14th place, though I suspect it will drop back after the press dies down.&lt;/p&gt;

&lt;p&gt;However, there&amp;rsquo;s a difference between having a goal and having a plan. There&amp;rsquo;s widespread agreement on the goal, but there&amp;rsquo;s less agreement about the plan. That&amp;rsquo;s great so long as people can use this to find the best path. It&amp;rsquo;s less great if it devolves into acrimony. Fortunately, Sawyer&amp;rsquo;s been great at projecting a positive message.&lt;/p&gt;

&lt;p&gt;So long as we manage to protect businesses currently using Perl (and that means convincing Linux distros that we&amp;rsquo;re not going to break them), having a plan to better support active and new developers is awesome. And the version number change is a key first step.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-inspired-you-to-start-the-project-cor-when-are-you-planning-to-release-it&#34;&gt;What inspired you to start the project &amp;ldquo;Cor&amp;rdquo;? When are you planning to release it?&lt;/h4&gt;

&lt;p&gt;First, for those who are not familiar with Cor, you can read about it at &lt;a href=&#34;https://github.com/Ovid/Cor/wiki&#34;&gt;https://github.com/Ovid/Cor/wiki&lt;/a&gt;. In short, Cor is a plan to add modern OO to the Perl core. But the motto is &amp;ldquo;&amp;lsquo;Good enough&amp;rsquo; is not good enough.&amp;rdquo; We have to stop settling for what we can have and start dreaming about what we want. For a trivial example, here&amp;rsquo;s a naïve LRU cache implementation in Cor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class Cache::LRU {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Hash::Ordered;

    has $max_size :&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(optional) :reader :isa(PositiveInt) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
    has $created  :reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time;
    has $cache    :handles(get)  :builder;
    method _build_cache () { Hash::Ordered&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; }

    method set ( $key, $value ) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;exists($key) ) {
            $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;delete($key);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ( $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;keys &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $max_size ) {
            $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;shift;
        }
        $cache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;set( $key, $value );  &lt;span style=&#34;color:#75715e&#34;&gt;# new values in front&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for my motivation, like many developers, I was waiting for Stevan Little to finish his work to get a better OO system for the Perl core. But he was working mostly alone, for a long time, and that&amp;rsquo;s hard to do. So when I decided I wanted something, I was able to take a look at his work and realize it was solid. But I needed a better syntax.&lt;/p&gt;

&lt;p&gt;I tried to refine some of the syntax from Moo/se, but honestly, Moo/se has some serious limitations. Some are design decisions which can be easily corrected, but some are due to limitations in the Perl language itself. Once I had Sawyer&amp;rsquo;s backing, I realized that I didn&amp;rsquo;t just have to steal syntax, I could invent syntax, though I have done so very cautiously. It&amp;rsquo;s important that Cor still be Perl, but just a tiny sprinkling of syntactic sugar in the right spots makes a world of difference. So far it looks promising.&lt;/p&gt;

&lt;p&gt;And Sawyer said he hopes a v1 will be available under a feature guard in 7.2 or 7.4. With Perl 8, the feature guard would be removed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier&#34;&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;Test::Class::Moose (TCM) is a go to module for me. Most Perl developers learn how to test modules, not applications. With TCM, large test suites become easier to build and manage and, when it&amp;rsquo;s written correctly, many test suites can be an order of magnitude faster.&lt;/p&gt;

&lt;p&gt;I also have a module I write for personal code called Less::Boilerplate. It&amp;rsquo;s not on the CPAN because it&amp;rsquo;s too fine-tuned for my personal needs, but naturally it enables strict, warnings, signatures, autodie, and other features without having to type everything out by hand. And it pleases me to have the double meaning of &amp;ldquo;use Less::Boilerplate&amp;rdquo; at the top of my code. Yet it&amp;rsquo;s part of the issue that Sawyer&amp;rsquo;s pointed out with Perl. New Perl developers don&amp;rsquo;t know the strange incantations experienced Perl developers put at the top of their code to get Perl to be reasonable. That hurts the language because they get a poor &amp;ldquo;out of the box&amp;rdquo; experience.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-overuse&#34;&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;It used to be the punctuation variables that I would sprinkle around my code like magic pixie dust. Things like local $&amp;rdquo; = &amp;lsquo;, &amp;rsquo; were natural to me. But I&amp;rsquo;ve stopped doing that because honestly, it&amp;rsquo;s not readable. I do a lot of client work so I take care to ensure that my code is (as much as I can), easy to read and maintain. I&amp;rsquo;ve even rewritten some of my code to &amp;ldquo;dumb it down&amp;rdquo; because I want to ensure that it&amp;rsquo;s maintainable.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-wish-you-could-use-more&#34;&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that clients call me in to help build new systems or fix existing ones, I pretty much get to pick and choose what features I want to use, so I&amp;rsquo;m fortunate in that regard. Thus, there&amp;rsquo;s not much I don&amp;rsquo;t get to use if I think it&amp;rsquo;s useful. However, a feature I wish I could use more is a feature that doesn&amp;rsquo;t exist: more standardized introspection tools, similar to a MOP. Mucking about in the symbol table for the things I need, or pulling in external libraries to find out where my code is located in the filesystem is frustrating. I often write code that magically &amp;ldquo;works&amp;rdquo; without having to be loaded (similar to plugins). But without standardized, cross-platform tools for finding the code, loading it dynamically, converting between package and filenames automatically, I find that I&amp;rsquo;m often rewriting this code again, for a different client, based on their operating system, file system layout, and so on.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-one-thing-you-d-like-to-change-about-perl&#34;&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;How variables behave. There are a few things in that, but mainly, I wish Perl had invariant sigils like Raku and that arrays and hashes wouldn&amp;rsquo;t flatten unless requested. But I&amp;rsquo;m not going to get that, so let&amp;rsquo;s pretend I didn&amp;rsquo;t ask :)&lt;/p&gt;

&lt;p&gt;(Hmm, working threads might be interesting, too)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A tour with Net::FTP</title>
      <link>http://localhost:1313/article/a-tour-with-net-ftp/</link>
      <pubDate>Mon, 13 Jul 2020 11:48:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/a-tour-with-net-ftp/</guid>
      <description>

&lt;p&gt;When we want to have a way to exchange files between machines, we often think about rsync, scp, git or even something slow and complex (looking at you Artifactory and S3), but the answer is often right in front of your eyes: FTP!&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;File Transfer Protocol&amp;rdquo; provides a very simple and convenient way to share files. It&amp;rsquo;s battle-tested, requires almost no maintenance, and has a simple anonymous access mechanism. It can be integrated with several standard auth methods and even some virtual ones, none of which I show here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/battlereadymeow.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll install a local FTP server and create a simple FTP client in Perl.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-of-context&#34;&gt;A bit of context&lt;/h2&gt;

&lt;p&gt;At &lt;code&gt;$work&lt;/code&gt; I have to carry on an army of developers that create customized build pipelines from handcrafted local configuration files.&lt;/p&gt;

&lt;p&gt;This file is not hosted &amp;ldquo;by design&amp;rdquo; like you would have with Travis CI or a GitHub Action, but it is used to feed a &amp;ldquo;heavy client&amp;rdquo; that parses, resolves templates, and creates a workspace in some centralized automations servers through HTTP API calls.&lt;/p&gt;

&lt;p&gt;It was a lot of support to help developers to create this file according to the spec (yet another file format), and we were blind when we wanted to help them with failing workspace creation/build (no way to retrieve configuration from workspace).&lt;/p&gt;

&lt;p&gt;I got the idea to backup and centralize automatically the configuration file during the creation of the build pipeline workspace. It was intended to help both developers (configuration &amp;ldquo;samples&amp;rdquo;) and support team (see history, versioned then we can check diffs, file to replay). The constraints were to be able to exchange file from various places with variable users. The FTP protocol is a perfect fit for that.&lt;/p&gt;

&lt;p&gt;I added also a cronjob to autocommit and push to a git repository and we had magically a website listing versioned configurations files.&lt;/p&gt;

&lt;p&gt;In addition, FTP proved later to also require zero support. I mean really zero maintenance!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/toolowmaintenance.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;download-and-install-ftpd&#34;&gt;Download and install ftpd&lt;/h2&gt;

&lt;p&gt;I decided to use &lt;a href=&#34;https://www.pureftpd.org/project/pure-ftpd/&#34;&gt;pure-ftpd&lt;/a&gt; but there are some other good alternatives if you want.&lt;/p&gt;

&lt;p&gt;First I download the tarball, untar it, and change into its directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget https://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.49.tar.gz
$ tar xvzf pure-ftpd-1.0.49.tar.gz
$ cd pure-ftpd-1.0.49/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I configure &lt;code&gt;ftpd&lt;/code&gt; so I can execute it as casual (non-root) user using a non-restricted port, and I&amp;rsquo;ll set the destination directory to my &lt;code&gt;$HOME/ftpd&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/ftpd --with-nonroot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I create two directories. The &lt;em&gt;ftp&lt;/em&gt; is what I&amp;rsquo;ll publish and &lt;em&gt;run&lt;/em&gt; is where I&amp;rsquo;ll put the pidfile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd $HOME/ftpd
$ mkdir ftp
$ mkdir run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the ftp server. I need to give some custom configurations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FTP_ANON_DIR&lt;/code&gt; is the directory I want to publish&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; allows anonymous access&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-M&lt;/code&gt; allows anonymous users to create directories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt; specifies the directory for the pidfile:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ FTP_ANON_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/ftp ; ./sbin/pure-ftpd -e -M -g run &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point I should have a running ftp server. Let&amp;rsquo;s check!&lt;/p&gt;

&lt;h2 id=&#34;test-with-ftp&#34;&gt;Test with ftp&lt;/h2&gt;

&lt;p&gt;First, I test with the preinstalled &lt;code&gt;ftp&lt;/code&gt; client. If everything is fine I see the typical FTP exchange:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ftp localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;
Connected to localhost.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;---------- Welcome to Pure-FTPd ----------
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-You are user number &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; allowed.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-Local time is now &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:56. Server port: &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-Only anonymous FTP is allowed here
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt; You will be disconnected after &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; minutes of inactivity.
Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;localhost:tib&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt; Anonymous user logged in
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I get &lt;code&gt;ftp: connect: Connection refused&lt;/code&gt; it&amp;rsquo;s probably one of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ftpd&lt;/code&gt; is not running (check with &lt;code&gt;ps aux | grep &amp;quot;ftp[d]&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using the wrong port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I get &lt;code&gt;421 Can&#39;t change directory to /home/tib/ftpd/ftp/ [/]&lt;/code&gt; it&amp;rsquo;s probably because I haven&amp;rsquo;t created the directory I specified in &lt;code&gt;FTP_ANON_DIR&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;simple-client-in-perl&#34;&gt;Simple client in Perl&lt;/h2&gt;

&lt;p&gt;Ok that&amp;rsquo;s cool, but I only played with ftp server and preinstalled &lt;code&gt;ftp&lt;/code&gt; client until now. What about writing some Perl now?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/whatif.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::FTP&#34;&gt;Net::FTP&lt;/a&gt; is a superb &lt;a href=&#34;https://metacpan.org/&#34;&gt;CPAN&lt;/a&gt; module dedicated to FTP protocol and I&amp;rsquo;ll use that.&lt;/p&gt;

&lt;h3 id=&#34;simple-listing&#34;&gt;Simple listing&lt;/h3&gt;

&lt;p&gt;First, a very simple listing script &lt;code&gt;ls.pl&lt;/code&gt;. This program connects to the server, asks for a list of files, and outputs each one. It&amp;rsquo;s clear that&amp;rsquo;s super easy and straightforward to play with FTP in Perl!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $f ($ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;upload&#34;&gt;Upload&lt;/h3&gt;

&lt;p&gt;What next?  Maybe upload something? Again, it&amp;rsquo;s super simple. Instead of listing files, I&amp;rsquo;m &lt;code&gt;put&lt;/code&gt;ting them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file(@ARGV) {
    $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;)
    	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot put $file&amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
}
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I run this and supply the files I want to upload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ perl upload.pl file1.txt file2.txt&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;put-things-together&#34;&gt;Put things together&lt;/h2&gt;

&lt;p&gt;I propose a more complete client with some command-line parsing and more actions. In addition to the previous code for listing and uploading, here I added a way to view a file. &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to handle command line parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Slurp;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

GetOptions(
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action|c=s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;},
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file|f=s&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;},
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help|h&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;}
	);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_usage&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;List all files :\n\t$0 -c list\n&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upload file :\n\t$0 -c upload -f file.txt\n&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print file :\n\t$0 -c view -f file.txt\n\n&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_ftp&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
		&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# ls / on remote ftp&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $f ($ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Upload a file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt;($) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
	(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e $file) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot put $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Read a file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;($) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot read $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e $file) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; read_file($file); }
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;) {
	list();
} &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;) {
	upload($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;view&amp;#39;&lt;/span&gt;) {
	view($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	print_usage();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;more-about-design-and-security&#34;&gt;More about design and security&lt;/h2&gt;

&lt;p&gt;This thin wrapper can be extended to do more tasks, such as checking allowed or disallowed name patterns or tidying files depending the uploader or the prefix in the name of the file. Remember, this is only on the client side! If you want real garantees you would better have to implement some kind of protections on the server side too. But, the goal was not to discuss security here but to play with FTP! And I hope you had a pleasant tour with me and &lt;a href=&#34;https://metacpan.org/pod/Net::FTP&#34;&gt;Net::FTP&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shortcode_test</title>
      <link>http://localhost:1313/article/shortcode_test/</link>
      <pubDate>Sun, 12 Jul 2020 09:27:22 +0000</pubDate>
      
      <guid>http://localhost:1313/article/shortcode_test/</guid>
      <description>&lt;p&gt;The article body goes here. Don&amp;rsquo;t forget to delete this stuff!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::ISBN&#34;&gt;Business::ISBN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlipc.html&#34;&gt;perlipc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlsec.html#Taint-mode-and-%40INC&#34;&gt;with anchor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-write-your-first-article-for-perl-com/&#34;&gt;How to write your first article for Perl.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-find-a-programming-topic-to-write-about/&#34;&gt;How to find a programming topic to write about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Listen to Larry Wall&#39;s State of the Onion 2000 on YouTube</title>
      <link>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</link>
      <pubDate>Fri, 10 Jul 2020 09:07:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metacpan.org/author/TODDR&#34;&gt;Todd Rinaldo&lt;/a&gt; has uploaded Larry&amp;rsquo;s State of the Onion talk from YAPC &lt;del&gt;19100&lt;/del&gt; 2000 to &lt;a href=&#34;https://www.youtube.com/watch?v=a1SEt_-QMDo&#34;&gt;YouTube&lt;/a&gt;. Previously it was available in separate mp3 files, but this is much more accessible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a typical Larry talk filled with quirky, humorous observations about life and programming, and notably he announces the Perl 6 project.&lt;/p&gt;

&lt;p&gt;Unfortunately the audio is low quality (hey it was 20 years ago at a low-budget conference); you can read a transcript of the talk &lt;a href=&#34;http://localhost:1313/pub/2000/10/23/soto2000.html/&#34;&gt;here&lt;/a&gt; (with mp3 download links at the bottom). We also have collection of attendees&amp;rsquo; &lt;a href=&#34;http://localhost:1313/pub/2000/07/yapc19101.html/&#34;&gt;reports&lt;/a&gt; from the conference.&lt;/p&gt;

&lt;p&gt;If you enjoy Larry&amp;rsquo;s talks, you might like some of his other &lt;a href=&#34;http://localhost:1313/authors/larry-wall/&#34;&gt;transcribed talks / articles&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing Perl 7</title>
      <link>http://localhost:1313/article/announcing-perl-7/</link>
      <pubDate>Wed, 24 Jun 2020 11:34:35 +0000</pubDate>
      
      <guid>http://localhost:1313/article/announcing-perl-7/</guid>
      <description>

&lt;p&gt;&lt;em&gt;image credit: &lt;a href=&#34;https://www.flickr.com/photos/darren/&#34;&gt;Darren Wood&lt;/a&gt;, &lt;a href=&#34;https://www.flickr.com/photos/darren/3680674672/in/photolist-6Bfqm9-ino1FQ-g9QYp-LBqJ8U-2imZyN9-2g4LBC9-JrtM4R-MsDZU1-MkbMoz-BSxoYD-KHTzJX-JYzksq-G9dfcP-G5Byr3-LrnQMb-6hwfHT-9i4upm-oJfAkJ-8cQQBf-6NVCN1-Ph8487-N1UVUo-mrXQmx-8GoTKf-6fqvZk-Gi1cPH-Mae7Mo-282AxcA-Hvehqx-HbZrvj-YoKVff-H1FRCw-d81uq-jyUXx9-JZGmJj-JTpLp-82ZDob-P19B5f-EQFLnh-aJpXi-LyYS7u-9X3iK-CCTZD-bdCtm-5SGWuB-ET4D6C-9vWh2c-4mieMj-HpYqSw-2iHee4g&#34;&gt;&amp;ldquo;7&amp;rdquo;&lt;/a&gt;, on Flickr.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;This morning at &lt;a href=&#34;https://perlconference.us/tpc-2020-cloud/&#34;&gt;The Perl Conference in the Cloud&lt;/a&gt;, Sawyer X announced that Perl has a new plan moving forward. Work on Perl 7 is already underway, but it&amp;rsquo;s not going to be a huge change in code or syntax. It&amp;rsquo;s Perl 5 with modern defaults and it sets the stage for bigger changes later. My latest book &lt;a href=&#34;https://leanpub.com/preparing_for_perl7&#34;&gt;Preparing for Perl 7&lt;/a&gt; goes into much more detail.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;perl-7-is-going-to-be-perl-5-32-mostly&#34;&gt;Perl 7 is going to be Perl 5.32, mostly&lt;/h2&gt;

&lt;p&gt;Perl 7.0 is going to be v5.32 but with different, saner, more modern defaults. You won&amp;rsquo;t have to enable most of the things you are already doing because they are enabled for you. The major version jump sets the boundary between how we have been doing things and what we can do in the future.&lt;/p&gt;

&lt;p&gt;Remember, Perl was the &amp;ldquo;Do what I mean&amp;rdquo; language where the defaults were probably what you wanted to do. In Perl 4 and the early days of Perl 5, that was easy. But, it&amp;rsquo;s been a couple of decades and the world is more complicated now. We kept adding pragmas, but with Perl&amp;rsquo;s commitment to backward compatibility, we can&amp;rsquo;t change the default settings. Now we&amp;rsquo;re back to the old days of C where we have to include lots of boilerplate before we start doing something:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(signatures)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is slightly better with v5.12 and later because we get &lt;a href=&#34;https://www.effectiveperlprogramming.com/2010/08/implicitly-turn-on-strictures-with-perl-5-12/&#34;&gt;&lt;code&gt;strict&lt;/code&gt; for free&lt;/a&gt; by using setting a minimum version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.32&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(signatures)&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl 7 is a chance to make some of these the default even without specifying the version. Perl 5 still has Perl 5&amp;rsquo;s extreme backward compatibility behavior, but Perl 7 gets modern practice with minimal historical baggage. I&amp;rsquo;m personally hoping signatures makes the cut, but there&amp;rsquo;s still much to be done to make Unicode the default, so you&amp;rsquo;ll probably need to keep some of that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; open &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:std :utf8)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might miss some seedier features that you shouldn&amp;rsquo;t be using anyway, such as the indirect object notation. Larry Wall said he had to do something for the C++ programmers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CGI;  &lt;span style=&#34;color:#75715e&#34;&gt;# indirect object, but not in Perl 7&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# direct object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, the feature doesn&amp;rsquo;t really disappear in Perl 7. It&amp;rsquo;s already &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/&#34;&gt;a setting in v5.32&lt;/a&gt;, but now with a different default.&lt;/p&gt;

&lt;h2 id=&#34;what-s-happening-to-perl-5&#34;&gt;What&amp;rsquo;s happening to Perl 5?&lt;/h2&gt;

&lt;p&gt;No one is taking Perl 5 away from you; it goes into long term maintenance mode—a lot longer than the two years of rolling support for the two latest user versions. That might be up to a decade from now (or half the time Perl 5 has already been around).&lt;/p&gt;

&lt;h2 id=&#34;when-is-this-happening&#34;&gt;When is this happening?&lt;/h2&gt;

&lt;p&gt;The work is happening now, but you won&amp;rsquo;t need to worry about it for about six months when the first release candidate should appear. The target for a user release of Perl 7.0 within the next year, with some release candidates along the way.&lt;/p&gt;

&lt;p&gt;This is an easy promise to keep, too, since Perl 7 is mostly v5.32 with different defaults. There&amp;rsquo;s no big rewrite or new features, although some currently experimental features may stabilize (please choose signatures!).&lt;/p&gt;

&lt;h2 id=&#34;what-about-cpan&#34;&gt;What about CPAN?&lt;/h2&gt;

&lt;p&gt;The Comprehensive Perl Archive Network, CPAN, has almost 200,000 modules. The maintained modules that people are using should still work, and for the rest there will be a compatibility mode. Remember  Perl 7 is mostly v5.32 so you shouldn&amp;rsquo;t need to change much.&lt;/p&gt;

&lt;p&gt;You may not know that the &lt;a href=&#34;https://lists.perl.org/list/perl5-porters.html&#34;&gt;Perl5 Porters&lt;/a&gt; tests new versions against almost all of CPAN. There&amp;rsquo;s a long history of tools to check the effect that changes may have on the Perl community. As a module author, I often get messages from various people, mostly Andreas Koenig or Slaven Rezić, about weird things in my modules that may break with new Perls. Usually, it&amp;rsquo;s something I need to update anyway. Tracking down problems with existing code is a solved problem. Fixing code shouldn&amp;rsquo;t be that onerous because it&amp;rsquo;s still Perl 5, but with better practices.&lt;/p&gt;

&lt;p&gt;Will there be a separate CPAN for Perl 7? No one has said there can&amp;rsquo;t be, but in the jump to Perl 7, the developers don&amp;rsquo;t want to redo what&amp;rsquo;s already working. This change should be manageable with as few side quests as possible.&lt;/p&gt;

&lt;p&gt;Also, PAUSE, the Perl Authors Upload Server, has received quite a bit of love in the past couple of years. That makes it easier for them to adapt to future needs. The people working on that are experienced and talented, and they&amp;rsquo;ve made the codebase much more tractable.&lt;/p&gt;

&lt;h2 id=&#34;why-the-jump-to-a-major-version&#34;&gt;Why the jump to a major version?&lt;/h2&gt;

&lt;p&gt;A major version can have a different contract with the user. A major version jump changes that contract with new default behavior, even if that conflicts with the past. There will be a way to reset all of those settings to the old Perl 5 default if you like. Perl 7 code will still be v5.32 code (mostly) in syntax and behavior though.&lt;/p&gt;

&lt;p&gt;Sawyer speaks about three major market segments of Perl users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who are never going to change their code&lt;/li&gt;
&lt;li&gt;People who use new features&lt;/li&gt;
&lt;li&gt;People starting from scratch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perl 5&amp;rsquo;s social contract is extreme backward compatibility, and has been amazingly successful with that. The problem is that the extreme backward compatibility works for those who won&amp;rsquo;t update their code, but doesn&amp;rsquo;t help the two other segments. The new features crowd has to deal with a longer boilerplate section in every program, and newbies wonder why they have to include so much just to create a program so people on StackOverflow won&amp;rsquo;t hector them over missing pragmas.&lt;/p&gt;

&lt;h2 id=&#34;why-7-and-not-6&#34;&gt;Why 7 and not 6?&lt;/h2&gt;

&lt;p&gt;There are two parts to this answer. First, &amp;ldquo;Perl 6&amp;rdquo; was already taken by what is now known as &lt;a href=&#34;https://raku.org&#34;&gt;Raku&lt;/a&gt;. A long time ago, we thought that a very ambitious rewrite effort would replace v5.8. In short, that&amp;rsquo;s not what happened and the language has gone on to live a life of its own.&lt;/p&gt;

&lt;p&gt;So, 7 was the next available number. That&amp;rsquo;s it. It&amp;rsquo;s just the next cardinal number in line. It&amp;rsquo;s not unheard of to make such a jump: PHP went directly from 5 to 7, and isn&amp;rsquo;t it time to steal something from that community? Consider these other weird jumps in history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solaris 2.6 to Solaris 7&lt;/li&gt;
&lt;li&gt;Java 1.4 to Java 5&lt;/li&gt;
&lt;li&gt;Postgres 9.x as the major version to Postgres 10 as the major version&lt;/li&gt;
&lt;li&gt;Windows 3.1 to Windows 95 (98, ME, 2000, XP, Vista, 7, 8, 10)&lt;/li&gt;
&lt;li&gt;TeX (each new version more closely approximates π)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least it&amp;rsquo;s not Perl 34.&lt;/p&gt;

&lt;h2 id=&#34;what-s-disappearing&#34;&gt;What&amp;rsquo;s disappearing?&lt;/h2&gt;

&lt;p&gt;Not much. Some things will be disabled by default, but again, this is essentially Perl 5.32 with the knobs and dials in different places. There are some things you should learn to live without, even in Perl 5 land. These are the likely candidates for the first round of changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;indirect object notation&lt;/li&gt;
&lt;li&gt;bareword filehandles (except maybe the standard filehandles)&lt;/li&gt;
&lt;li&gt;fake multidimensional arrays and hashes (old Perl 4 trick)&lt;/li&gt;
&lt;li&gt;Old-style prototype definitions (use &lt;code&gt;:prototype()&lt;/code&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-appearing&#34;&gt;What&amp;rsquo;s appearing?&lt;/h2&gt;

&lt;p&gt;Not much. Perl 7 is mostly Perl v5.32, but with all of the features enabled by default. You don&amp;rsquo;t have to do anything to get most new features, such as &lt;a href=&#34;https://www.effectiveperlprogramming.com/2014/09/use-postfix-dereferencing/&#34;&gt;postfix dereferencing&lt;/a&gt;, the new &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/01/use-the-infix-class-instance-operator/&#34;&gt;&lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;, or several other features. That&amp;rsquo;s the benefit of the new social contract a major version provides. It&amp;rsquo;s a hard boundary where new features can exist by default on one side without disturbing the other side.&lt;/p&gt;

&lt;h2 id=&#34;what-should-i-do-right-now&#34;&gt;What should I do right now?&lt;/h2&gt;

&lt;p&gt;If you need an older Perl to run your code, you are going to be fine. Those old versions are not going to disappear. Just like Perl 5.6 is still available, if that&amp;rsquo;s the version you wish to run.&lt;/p&gt;

&lt;p&gt;If your code runs without a problem under strictures and warnings, and you are using modern Perl style, you&amp;rsquo;re probably mostly good. If you have some bareword filehandles, start converting those. Same with the indirect object notation.&lt;/p&gt;

&lt;p&gt;With messy code, you aren&amp;rsquo;t out of luck. There will be compatibility modes to assist you in the transition from Perl 5 to 7 (but not Perl 5 to 8). A pragma will set the knobs and dials back to the old settings (but this is more of a one version thing):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; compat::perl5;  &lt;span style=&#34;color:#75715e&#34;&gt;# act like Perl 5&amp;#39;s defaults&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For modules, there are some issues to shake out, but there will be a compatibility mechanism for those too.&lt;/p&gt;

&lt;p&gt;The good news is that these things are already being tested by major Perl stakeholders in production settings. This isn&amp;rsquo;t a paper plan: it&amp;rsquo;s already happening and the rough edges are being sanded out.&lt;/p&gt;

&lt;p&gt;And, v5.32 has one of these knobs and dials in place already. You can &lt;a href=&#34;https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/&#34;&gt;turn off the indirect object notation&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(indirect)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But expect two more knobs or dials, maybe like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; multidimensional;
&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; bareword::filehandle;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m collecting all of this information in &lt;a href=&#34;https://leanpub.com/preparing_for_perl7&#34;&gt;Preparing for Perl 7&lt;/a&gt;, my latest offering through &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; and LeanPub.&lt;/p&gt;

&lt;h2 id=&#34;the-bottom-line&#34;&gt;The bottom line&lt;/h2&gt;

&lt;p&gt;Perl 7 is v5.32 with different settings. Your code should work if it&amp;rsquo;s not a mess. Expect a user release within a year.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - May 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</link>
      <pubDate>Sat, 20 Jun 2020 13:40:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---may-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perl Layout Executor with &lt;a href=&#34;https://metacpan.org/pod/App::plx&#34;&gt;App::plx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FIDO::Raw&#34;&gt;FIDO::Raw&lt;/a&gt; provides bindings to the libfido2 library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Geo::LibProj::cs2cs&#34;&gt;Geo::LibProj::cs2cs&lt;/a&gt; is a wrapper for the cs2cs command line client, part of the PROJ coordinate transformation library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Graph::Nauty&#34;&gt;Graph::Nauty&lt;/a&gt; provides bindings to Nauty (No AUTomorphisms, Yes?)&lt;/li&gt;
&lt;li&gt;Post OCR requests to ocr.space&amp;rsquo;s API with &lt;a href=&#34;https://metacpan.org/pod/OCR::OcrSpace&#34;&gt;OCR::OcrSpace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create reciples to declare and resolve dependencies between things with &lt;a href=&#34;https://metacpan.org/pod/Beam::Make&#34;&gt;Beam::Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography Library with &lt;a href=&#34;https://metacpan.org/pod/Crypto::ECC&#34;&gt;Crypto::ECC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::Redis&#34;&gt;HealthCheck::Diagnostic::Redis&lt;/a&gt; provides a healthcheck for Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SMTP&#34;&gt;HealthCheck::Diagnostic::SMTP&lt;/a&gt; performs a connectivity healthcheck to an SMTP mail server&lt;/li&gt;
&lt;li&gt;Show diffs of changes to files managed by Rex with &lt;a href=&#34;https://metacpan.org/pod/Rex::Hook::File::Diff&#34;&gt;Rex::Hook::File::Diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mask secrets in log files with &lt;a href=&#34;https://metacpan.org/pod/String::Secret&#34;&gt;String::Secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::Groups&#34;&gt;File::Groups&lt;/a&gt; returns file extensions and media types for different files&lt;/li&gt;
&lt;li&gt;Get Digi-ID implementation with &lt;a href=&#34;https://metacpan.org/pod/DigiByte::DigiID&#34;&gt;DigiByte::DigiID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get elevation data for a given lat/lon using &lt;a href=&#34;https://metacpan.org/pod/Geo::Elevation::HGT&#34;&gt;Geo::Elevation::HGT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Karabiner&#34;&gt;JSON::Karabiner&lt;/a&gt; can easy JSON code generaation for Karabiner-Elements, the macOS keyboard customizer&lt;/li&gt;
&lt;li&gt;Validate JSON against a schema against the latest draft with &lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Draft201909&#34;&gt;JSON::Schema::Draft201909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Documentation and tools for using Platypus with Go: &lt;a href=&#34;https://metacpan.org/pod/FFI::Platypus::Lang::Go&#34;&gt;FFI::Platypus::Lang::Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Future::IO::Impl::Glib&#34;&gt;Future::IO::Impl::Glib&lt;/a&gt; implement Future::IO using Glib&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mu::Tiny&#34;&gt;Mu::Tiny&lt;/a&gt; is an even tinier object system&lt;/li&gt;
&lt;li&gt;Get a Try-Catch block (uses PPI) via &lt;a href=&#34;https://metacpan.org/pod/Nice::Try&#34;&gt;Nice::Try&lt;/a&gt; (great name!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Number::Textify&#34;&gt;Number::Textify&lt;/a&gt; turns numbers into human-readable strings (customizable)&lt;/li&gt;
&lt;li&gt;Write composable, reusable tests with roles and Moo using &lt;a href=&#34;https://metacpan.org/pod/Test2::Roo&#34;&gt;Test2::Roo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Device::Chip::BNO055&#34;&gt;Device::Chip::BNO055&lt;/a&gt; provides a chip driver for BNO055&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/PINE64::GPIO&#34;&gt;PINE64::GPIO&lt;/a&gt; provides an interface to PineA64 and PineA64+ GPIO pins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Catalyst::View::MojoTemplate&#34;&gt;Catalyst::View::MojoTemplate&lt;/a&gt;: use Mojolicious templates in Catalyst views&lt;/li&gt;
&lt;li&gt;Store Dancer2 session data in serealized files using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Session::Sereal&#34;&gt;Dancer2::Session::Sereal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find elements in a HTML::Element DOM using CSS selectors with &lt;a href=&#34;https://metacpan.org/pod/HTML::Selector::Element&#34;&gt;HTML::Selector::Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Place a limit on &amp;ldquo;concurrent&amp;rdquo; promises with &lt;a href=&#34;https://metacpan.org/pod/Mojo::Promise::Limiter&#34;&gt;Mojo::Promise::Limiter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add role-based access with context to a Mojo app via  &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::ContextAuth&#34;&gt;Mojolicious::Plugin::ContextAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/POE::Component::SmokeBox::Recent::HTTP&#34;&gt;POE::Component::SmokeBox::Recent::HTTP&lt;/a&gt; is an extremely minimal HTTP client&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Perl Ambassador: Gabor Szabo</title>
      <link>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</link>
      <pubDate>Mon, 15 Jun 2020 07:30:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-perl-ambassador-gabor-szabo/</guid>
      <description>

&lt;p&gt;This is the launch interview of a monthly series of interviews I&amp;rsquo;ll
publish on perl.com. I can promise you, fun and entertaining
interviews every month. So please watch this space. If you&amp;rsquo;d like me
to interview you, or know someone you&amp;rsquo;d like me to interview, let me
know. Take the same set of questions and send me your answers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gabor Szabo&lt;/strong&gt; is a long time Perl developer and DevOps trainer and the
author of the &lt;a href=&#34;https://perlmaven.com/perl-tutorial&#34;&gt;Perl tutorial&lt;/a&gt; and
of Perl Maven and on &lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt;. He
received a &lt;a href=&#34;http://whitecamel.org/p/gabor_szabo.html&#34;&gt;White Camel
Award&lt;/a&gt; in 2008. He teaches
&lt;a href=&#34;https://hostlocal.com/&#34;&gt;training courses in Israel&lt;/a&gt; and around the
world. He wears the hat of the chief editor of &lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly
newsletter&lt;/a&gt;, and is always happy to receive
notable Perl news items for inclusion in its next issue.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-first-start-using-perl&#34;&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I was working at a start-up company near Jerusalem that had an
AI-based software product which cost 1,000,000 USD with an additional
1-2 million cost for integration. That made sales a bit difficult so
we were working on a related product that would sell for a mere 30,000
USD. Just to get our feet in the door of the potential buyers of our
flagship product. We were using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Scheme_(programming_language)&#34;&gt;Scheme&lt;/a&gt;
and &lt;a href=&#34;https://en.wikipedia.org/wiki/AWK&#34;&gt;AWK&lt;/a&gt; to write our compiler on
Window 3.11. It was great fun, but I was also interested in all the
sysadmin work in the company (we had a Novell NetWare 3.11
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetWare&#34;&gt;network&lt;/a&gt; and all the other
areas that was not that interesting for the regular programmers. For
example our build system.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_NT&#34;&gt;Windows NT&lt;/a&gt; was
introduced in 1993 and I got the opportunity to start setting it up.
At around the same time our office was bought by
&lt;a href=&#34;https://en.wikipedia.org/wiki/NetManage&#34;&gt;NetManage&lt;/a&gt;, one of the
pioneers in TCP/IP for MS Windows, in what is today called an
&lt;a href=&#34;https://en.wikipedia.org/wiki/Acqui-hiring&#34;&gt;Acqui-hiring&lt;/a&gt;. There we
used some &lt;a href=&#34;https://en.wikipedia.org/wiki/Rational_ClearCase&#34;&gt;Rational ClearCase&lt;/a&gt;
tools for bug tracking.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the time when I first started to use Perl, probably in 1993 or
1994. I built an in-house web application to allow the developers to
initiate a build of the software they were writing and to get
notification when the build was ready. As I recall it was running on
Windows. I also dealt with some of the bug-tracking automation that
was running on some Unix system.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier&#34;&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;I hardly have any Perl-related work these days so I can&amp;rsquo;t really say,
but when I need a script here and there I often use &lt;a href=&#34;https://metacpan.org/pod/Capture::Tiny&#34;&gt;Capture::Tiny&lt;/a&gt; and
keep re-creating it (partially and badly) in other languages. I love
testing so anything that starts with &lt;code&gt;Test::&lt;/code&gt; is usually interesting
to me.&lt;/p&gt;

&lt;p&gt;I also run the &lt;a href=&#34;https://perlmaven.com/&#34;&gt;Perl Maven&lt;/a&gt; and
&lt;a href=&#34;https://code-maven.com/&#34;&gt;Code Maven&lt;/a&gt; sites on a Dancer-based
application I wrote ages ago. The source is
&lt;a href=&#34;https://github.com/szabgab/Perl-Maven&#34;&gt;open&lt;/a&gt; though probably not
very useful to anyone besides me. So I use &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Template&#34;&gt;Template Toolkit&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/DateTime&#34;&gt;DateTime&lt;/a&gt;,
and &lt;a href=&#34;https://metacpan.org/pod/DateTime::Tiny&#34;&gt;DateTime::Tiny&lt;/a&gt; just to name a
few. Oh and of course I love &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and
&lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-overuse&#34;&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;I am not sure if any. Well, maybe except of &lt;code&gt;Perl::Critic&lt;/code&gt;. I just
noticed that I configured it that it won&amp;rsquo;t allow double-quotes around
a string if there is nothing to interpolate in it. So &amp;ldquo;perl&amp;rdquo; is bad,
&amp;lsquo;perl&amp;rsquo; is good. I need to relax this.&lt;/p&gt;

&lt;p&gt;I think I hardly ever used the fun features of Perl. I almost never
use the &lt;code&gt;do_this and do_that&lt;/code&gt; construct except for the &lt;code&gt;open or die&lt;/code&gt;.
I hardly use &lt;code&gt;$_&lt;/code&gt; and I think never use it explicitly. Maybe I was never
a real Perl programmer :)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;which-perl-feature-do-you-wish-you-could-use-more&#34;&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that I hardly write Perl these days, any feature would be ok
with me :)&lt;/p&gt;

&lt;p&gt;I write mostly Python, Groovy, and recently Golang. So I would say I
miss the autovivification, though definitely not the bug Perl has in
being overenthusiastic about autovivification. I miss the possibility
to move around some code, or comment out some code and try the rest
without re-indenting everything. Though I don&amp;rsquo;t miss the time when I
was begging my Perl students to indent their code.&lt;/p&gt;

&lt;p&gt;I miss the CPAN Testers. (in these other languages). (And I do still
encounter Perl code in some corporation written by people who have
been writing Perl for 5-10 years and I always wonder why don&amp;rsquo;t they
actually learn Perl&amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-one-thing-you-d-like-to-change-about-perl&#34;&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;The community. Whatever that means. I wish people were prouder of
their work and embraced the 21st century.&lt;/p&gt;

&lt;p&gt;I wish they were more public about their work (e.g. announcements of
releases of perl IMHO are only published on the p5porters list.
Not on &lt;a href=&#34;http://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt;, not on &lt;a href=&#34;https://www.perl.org&#34;&gt;perl.org&lt;/a&gt;, and not on
&lt;a href=&#34;https://news.perlfoundation.org/&#34;&gt;https://news.perlfoundation.org/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Very few module authors write about new releases of their code. There
are very few people who write about Perl-related subjects. In many
cases those posts are not linking to each other.&lt;/p&gt;

&lt;p&gt;Some of the bloggers seem to have forgotten (or never learned) that
links are a form of supporting each other. This is sad as it gives the
impression that no-one uses Perl. Of course this is not new, it is
just getting worse every year as the people who used to write about
Perl stopped doing so or are writing about other subjects now.&lt;/p&gt;

&lt;p&gt;It also makes it much harder to fill
&lt;a href=&#34;https://perlweekly.com/&#34;&gt;Perl Weekly newsletter&lt;/a&gt;. If it wasn&amp;rsquo;t for the
&lt;a href=&#34;https://perlweeklychallenge.org/&#34;&gt;Perl Weekly Challenge&lt;/a&gt; we would
have half the size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-the-future-of-perl&#34;&gt;What is the future of Perl?&lt;/h4&gt;

&lt;p&gt;I think the number of &amp;ldquo;Perl programmers&amp;rdquo; will continue to decline and
with that less and less problems will have a solution on CPAN.&lt;/p&gt;

&lt;p&gt;However, the more interesting thing to me is what happens to the
&amp;ldquo;Perl programmers&amp;rdquo;. The same way the impact of Larry Wall on
programming goes far beyond the people who use (or ever used) Perl.
Or &lt;a href=&#34;https://en.wikipedia.org/wiki/Patch_(Unix)&#34;&gt;patch&lt;/a&gt; for that
matter.&lt;/p&gt;

&lt;p&gt;For example I would love to know what happened to all the people who
received a
&lt;a href=&#34;https://www.perl.org/advocacy/white_camel&#34;&gt;White Camel Award&lt;/a&gt; even
if they don&amp;rsquo;t write Perl any more.&lt;/p&gt;

&lt;p&gt;Same with the most high-profile CPAN authors. Even if they don&amp;rsquo;t write
Perl any more, their thinking was formed by Perl and by all the nice
things the community had throughout the last 32+ years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Hacks, Perl School, and the future of Perl publishing</title>
      <link>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</link>
      <pubDate>Thu, 28 May 2020 09:44:03 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-hacks-perl-school-and-the-future-of-perl-publishing/</guid>
      <description>

&lt;p&gt;Dave Cross, long-time Perl user, trainer, and author, recently released &lt;a href=&#34;https://perlhacks.com/2020/04/the-best-of-perl-hacks/&#34;&gt;The Best of Perl Hacks&lt;/a&gt;, a curated collection of his best posts from his &lt;a href=&#34;https://perlhacks.com&#34;&gt;Perl Hacks blog&lt;/a&gt;. His imprint, &lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt;, has published six e-books, including two that I wrote.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an unrelated book, &lt;a href=&#34;http://shop.oreilly.com/product/9780596526740.do&#34;&gt;Perl Hacks: Tips &amp;amp; Tools For Programming, Debugging, And Surviving&lt;/a&gt;, by chromatic, Damian Conway, and Curtis &amp;ldquo;Ovid&amp;rdquo; Poe. It&amp;rsquo;s also very good, but completely separate from Dave&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-hacks-when-did-you-start-it-and-what-do-you-like-to-post-there&#34;&gt;What is Perl Hacks? When did you start it and what do you like to post there?&lt;/h4&gt;

&lt;p&gt;Perl Hacks is my Perl blog. It&amp;rsquo;s where I post all my Perl-related articles.&lt;/p&gt;

&lt;p&gt;I started it in May 2009. Before then, pretty much everyone in the
Perl community used to blog on a site called &lt;a href=&#34;https://use-perl.github.io&#34;&gt;Use
Perl&lt;/a&gt;. But that site was starting to look
a bit dated and a number of people moved their blogs to other places
at around the same time. It&amp;rsquo;s no coincidence that the
&lt;a href=&#34;https://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; site also dates from the same
year.&lt;/p&gt;

&lt;p&gt;My rule for choosing what to post on the site is basically &amp;ldquo;is this
about Perl?&amp;rdquo; But looking back over the lifetime of the site (which I
did when compiling the book) I noticed that the type of article had
changed over time. When I first started, there were a lot of &amp;ldquo;newsy&amp;rdquo;
entries—&amp;rdquo;London.pm will be holding these meetings&amp;rdquo;, &amp;ldquo;I&amp;rsquo;m running a
training course&amp;rdquo;, things like that. But later I started posting longer
articles about the Perl community or interesting technical corners of
Perl.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-did-you-choose-what-went-into-the-ebook-what-are-some-of-your-favorite-posts-which-ones-got-the-best-responses&#34;&gt;How did you choose what went into the ebook? What are some of your favorite posts? Which ones got the best responses?&lt;/h4&gt;

&lt;p&gt;I basically read through the site over a weekend. I ignored all of the
short articles and anything that was topical and would no longer be
interesting. I then did a second pass, planning to get to about fifty
articles. I think I ended up with fifty-seven.&lt;/p&gt;

&lt;p&gt;There are a couple of technical articles that I&amp;rsquo;m particularly pleased
with. &lt;a href=&#34;https://perlhacks.com/2014/01/dots-perl/&#34;&gt;Dots and Perl&lt;/a&gt;
explains Perl&amp;rsquo;s five operators that are just made of dots. Can you
name them all? Ok, strictly speaking, one of them isn&amp;rsquo;t actually an
operator. And &lt;a href=&#34;https://perlhacks.com/2015/04/subroutines-and-ampersands/&#34;&gt;Subroutines and
Ampersands&lt;/a&gt;
was written so I had somewhere to point people who still insist on
putting ampersands on subroutine calls. It carefully explains why it&amp;rsquo;s
rarely necessary (and hasn&amp;rsquo;t been since Perl 5 was released).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://perlhacks.com/2015/12/long-death-cgi-pm/&#34;&gt;The Long Death of
CGI.pm&lt;/a&gt; which
investigated the effects that removing
&lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;CGI.pm&lt;/a&gt; from the Perl core distribution
would have. I thought there was some nice detective work in there.&lt;/p&gt;

&lt;p&gt;The post that got the most response was called &lt;a href=&#34;https://perlhacks.com/2012/03/you-must-hate-version-control-systems/&#34;&gt;You Must Hate Version
Control
Systems&lt;/a&gt;. The title was taken from a Perl job ad from a company that
no-one seemed to want to work for. The person who posted the ad turned
up in the comments and tried to explain why he wrote that, but I don&amp;rsquo;t
think anyone was convinced. This was the one time that I regretted
that I couldn&amp;rsquo;t use a post&amp;rsquo;s comments in the book.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-is-perl-school-why-did-you-start-it-what-was-the-first-book&#34;&gt;What is Perl School? Why did you start it? What was the first book?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://perlschool.com&#34;&gt;Perl School&lt;/a&gt; was a brand that I started to
use in 2012 for some training I ran in London. I had theory that
people weren&amp;rsquo;t keeping their Perl knowledge up to date and many
employers weren&amp;rsquo;t keen on investing in training about what was &amp;ldquo;just a
scripting language.&amp;rdquo; So, I reasoned, if I ran low-cost training
courses at the weekend, people would come on them and the average
level of Perl knowledge in London would rise.&lt;/p&gt;

&lt;p&gt;I ran these courses for a year before putting them on ice. But I liked
the brand and knew that I wanted to use it again in the future.&lt;/p&gt;

&lt;p&gt;In 2015 I wrote a beginners&amp;rsquo; Perl tutorial for Udemy. They published
it on their site and I often pointed people at it. But a couple of
years later, I checked their site to find that a CSS upgrade had
rendered the page pretty much unreadable. I pointed this out to them
and after a bit of discussion, they told me that they weren&amp;rsquo;t going to
invest the time to fix it but said that I was welcome to publish it
elsewhere.&lt;/p&gt;

&lt;p&gt;At the same time I had been experimenting with building ebooks from
Markdown and had developed the pipeline that I still use today. So the
first Perl School book was the serendipitous meeting between my
experimental ebook pipeline and a long piece of text that I wanted to
get out to as many people as possible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s called &lt;a href=&#34;https://perlschool.com/books/perl-taster/&#34;&gt;Perl Taster: Your First Two Hours With
Perl&lt;/a&gt;. I published it just
before the 2017 London Perl Workshop and announced it in a lighting
talk at that workshop. I invited other people to contribute books,
offering to help with the technical parts of getting them published.
John Davies approached me about the book that became &lt;a href=&#34;https://perlschool.com/books/selenium-perl/&#34;&gt;Selenium and
Perl&lt;/a&gt; and it&amp;rsquo;s just grown from there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-was-your-experience-giving-low-cost-and-free-perl-training-in-the-uk&#34;&gt;What was your experience giving low-cost and free Perl training in the UK?&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve run Perl training at all levels in the UK. Five years ago I&amp;rsquo;d
still get two or three enquiries a year from companies who were
interested in training, but that&amp;rsquo;s all dried up. I can&amp;rsquo;t remember the
last time someone asked me about running a course for them.&lt;/p&gt;

&lt;p&gt;The Perl School courses were popular for a while. I&amp;rsquo;d get twenty or so
people giving up their Saturday and paying a small fee to get Perl
training. But after a year, the interest started to wane. I cancelled
the last one because I didn&amp;rsquo;t get enough attendees to make it
worthwhile.&lt;/p&gt;

&lt;p&gt;For many years I&amp;rsquo;ve run a free ninety-minute or two-hour course as
part of the London Perl Workshop. I always get a pretty good turn-out
for those. But, to be honest, that&amp;rsquo;s about the only place I can
guarantee much interest in Perl training in the UK these days.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;you-previously-wrote-the-print-books-data-munging-with-perl-https-www-manning-com-books-data-munging-with-perl-manning-press-and-template-toolkit-http-www-template-toolkit-org-book-html-o-reilly-associates-with-andy-wardley-and-darren-chamberlain-how-is-perl-school-s-process-different-than-what-you-experienced-with-those-publishers&#34;&gt;You previously wrote the print books &lt;a href=&#34;https://www.manning.com/books/data-munging-with-perl&#34;&gt;Data Munging with Perl&lt;/a&gt; (Manning Press) and &lt;a href=&#34;http://www.template-toolkit.org/book.html&#34;&gt;Template Toolkit&lt;/a&gt; (O&amp;rsquo;Reilly &amp;amp; Associates, with Andy Wardley and Darren Chamberlain). How is Perl School&amp;rsquo;s process different than what you experienced with those publishers?&lt;/h4&gt;

&lt;p&gt;I guess the main difference is that there&amp;rsquo;s a lot less process
involved with the Perl School books.&lt;/p&gt;

&lt;p&gt;With a traditional publisher, there are lots of departments involved.
The editor will want to know when the manuscript will be ready because
they will want to book time from technical reviewers and
proof-readers. They&amp;rsquo;ll also need to plan in designers and even book
printing time on the presses. All of that means there&amp;rsquo;s a lot of
pressure on the author to make a plan for getting the book written and
then to stick to that plan.&lt;/p&gt;

&lt;p&gt;With an ebook, it&amp;rsquo;s all a lot less structured. I largely rely on
authors to arrange their own technical reviewers. I&amp;rsquo;ll do a bit of
proof-reading. And we haven&amp;rsquo;t (as yet) used any designers—that
probably shows, to be honest.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m not going to pressure an author to finish a manuscript. When
you&amp;rsquo;re ready, I&amp;rsquo;ll steer you through turning your Markdown into an
ebook and then publishing it on Amazon. If it takes longer than you
expected, then so what?&lt;/p&gt;

&lt;p&gt;In many ways, I see parallels with the &lt;a href=&#34;http://theleanstartup.com&#34;&gt;Lean
Startup&lt;/a&gt; ideas of Eric Ries. We&amp;rsquo;re small
and we&amp;rsquo;re agile. If you come to me with a completed book, we might
well be able to get it on Amazon in a week or two. For a traditional
publisher, that time will be months.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-do-you-think-are-the-biggest-challenges-to-technical-publishing-today-how-does-something-like-perl-school-respond-to-that&#34;&gt;What do you think are the biggest challenges to technical publishing today? How does something like Perl School respond to that?&lt;/h4&gt;

&lt;p&gt;Traditional publishing is an expensive business. Publishers need to
make a lot of money just to break even on a book. I don&amp;rsquo;t know the
details, but they have to sell a certain number of copies in order to
make it worth publishing a book. And that, in turn, means that they
will rarely take a risk. For a technical publisher, that means only
publishing books about technologies that have reached a certain level
of usage.&lt;/p&gt;

&lt;p&gt;People are also buying fewer technical books. Technologies change
quickly and many books will be out of date before they get to the
bookshops. If you want up to date information about your favourite
technologies then you&amp;rsquo;re probably better off going to the developer&amp;rsquo;s
web site.&lt;/p&gt;

&lt;p&gt;For a publisher like Perl School, the economics are different. We have
far smaller costs and (as I mentioned before) we can get books in
customers&amp;rsquo; hands far more quickly.&lt;/p&gt;

&lt;p&gt;Large technical publishers have largely abandoned Perl. They just
don&amp;rsquo;t see that they would get the level of sales needed to justify a
new Perl book. Perl School is happy to take that risk—because, really,
it&amp;rsquo;s a tiny risk for us.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;what-are-your-personal-reading-preferences-which-device-do-you-like-what-size-screen-do-you-need-and-which-format-works-best-for-you&#34;&gt;What are your personal reading preferences? Which device do you like, what size screen do you need, and which format works best for you?&lt;/h4&gt;

&lt;p&gt;I do like a real book. But they take up too much space, so I&amp;rsquo;ve pretty
much completely stopped buying them over the last five years. I like
being able to access all of the ebook part of my library from a device
that I can carry in my pocket. One thing that would make me really
happy is a device that could rip my existing paper library to ebooks
in the same way that we all ripped our CDs to MP3s.&lt;/p&gt;

&lt;p&gt;Currently, I read ebooks on an 8&amp;rdquo; Amazon Kindle Fire. That&amp;rsquo;s just
bigger than a paperback and fits in a (large) pocket in the same way
that a book would. I also have a 10&amp;rdquo; Pixel Slate which I&amp;rsquo;ll often use
for reading in my house. I&amp;rsquo;m rather firmly locked into the Amazon
ebook ecosystem, so I prefer to find books in Mobi format—but I can
drive Calibre, so I&amp;rsquo;m happy to convert from other formats.&lt;/p&gt;

&lt;p&gt;I get mildly annoyed by web sites that promise me an ebook and then
deliver a PDF. PDFs are made to be read at a certain size and if
you&amp;rsquo;re reading them on a smaller screen it will either be too small to
read or you&amp;rsquo;ll need to scroll back and forth a lot. A proper ebook
format (like Mobi or ePub) will reformat pages for any combination of
screen size and font size.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-can-someone-write-a-book-for-perl-school-what-topics-do-you-think-would-be-most-interesting&#34;&gt;How can someone write a book for Perl School? What topics do you think would be most interesting?&lt;/h4&gt;

&lt;p&gt;Simply email me at hello@perlschool.com with your suggestions. I&amp;rsquo;ll
talk you though the technical side of getting the book written and
published on Amazon—it&amp;rsquo;s really not very hard.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d pretty much consider any Perl-related topic. I would never have
thought of publishing books on Selenium or Cucumber, but John Davies
wrote them and I&amp;rsquo;ve published them. And they seem to be selling.&lt;/p&gt;

&lt;p&gt;But there are books I&amp;rsquo;d like to see. I&amp;rsquo;d love to publish books on the
various &amp;ldquo;Modern Perl&amp;rdquo; tools that we all use—Moose, DBIx::Class, things
like that—and all of Perl&amp;rsquo;s popular web frameworks.&lt;/p&gt;

&lt;p&gt;I think the one I&amp;rsquo;d most like to see is one that, in my head, is
called &amp;ldquo;Modern Core Perl&amp;rdquo;. It covers all of the important changes in
the core Perl language back to version 5.10. Basically, it&amp;rsquo;s a
tutorial based on all of the &lt;code&gt;perldelta&lt;/code&gt;s. I&amp;rsquo;ve thought about writing
it myself a few times, but I just don&amp;rsquo;t have the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - April 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</link>
      <pubDate>Wed, 20 May 2020 01:53:33 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---april-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the open, decentralizedc Matrix communication network with &lt;a href=&#34;https://metacpan.org/pod/Net::Matrix::Webhook&#34;&gt;Net::Matrix::Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Call Docker CLI commands from Perl using &lt;a href=&#34;https://metacpan.org/pod/Docker::CLI::Wrapper&#34;&gt;Docker::CLI::Wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/InfluxDB::Client::Simple&#34;&gt;InfluxDB::Client::Simple&lt;/a&gt; is a lightweight InfluxDB client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Termux::API&#34;&gt;Termux::API&lt;/a&gt; provides a Perly interface to the popular Android terminal emulator&lt;/li&gt;
&lt;li&gt;Get financial data via Yahoo Finance with &lt;a href=&#34;https://metacpan.org/pod/Yahoo::Finance&#34;&gt;Yahoo::Finance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Grant Street Group added more healthcheck modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHCheck&#34;&gt;HealthCheck::Diagnostic::DBHCheck&lt;/a&gt; checks a database handle has read/write permissions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::SFTP&#34;&gt;HealthCheck::Diagnostic::SFTP&lt;/a&gt; checks secure FTP access&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::WebRequest&#34;&gt;HealthCheck::Diagnostic::WebRequest&lt;/a&gt; checks HTTP/HTTPS connectivity&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Moo-ify DBIx::Class rows using &lt;a href=&#34;https://metacpan.org/pod/DBIx::Class::Moo::ResultClass&#34;&gt;DBIx::Class::Moo::ResultClass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Data::Random::Structure::UTF8&#34;&gt;Data::Random::Structure::UTF8&lt;/a&gt; can fill a data structure with random UTF-8 data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/JSON::Schema::Generate&#34;&gt;JSON::Schema::Generate&lt;/a&gt; generates JSON schemas from data structures&lt;/li&gt;
&lt;li&gt;Use named (instead of positional) placeholders with SQL queries via &lt;a href=&#34;https://metacpan.org/pod/SQL::Bind&#34;&gt;SQL::Bind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Docker::Names::Random&#34;&gt;Docker::Names::Random&lt;/a&gt; generates random strings like Docker does for container names (e.g. &amp;ldquo;lazy_fermat&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;A class based approach for scripting options: &lt;a href=&#34;https://metacpan.org/pod/Getopt::Class&#34;&gt;Getopt::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get simple, non-blocking IPC with &lt;a href=&#34;https://metacpan.org/pod/IPC::Simple&#34;&gt;IPC::Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MooseX::amine&#34;&gt;MooseX::amine&lt;/a&gt; ++ for module naming, it let&amp;rsquo;s you examine the methods and properties of Moose objects&lt;/li&gt;
&lt;li&gt;Return from multiple blocks in one go with &lt;a href=&#34;https://metacpan.org/pod/Return::Deep&#34;&gt;Return::Deep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Ability&#34;&gt;Test::Ability&lt;/a&gt; provides property-based testing routines&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/fs::Promises&#34;&gt;fs::Promises&lt;/a&gt; provides a promises interface to non-blocking file system operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage passwords in Dancer2 with Argon2 using &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Argon2&#34;&gt;Dancer2::Plugin::Argon2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the Minion job queue in your Dancer2 apps with &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin::Minion&#34;&gt;Dancer2::Plugin::Minion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Override any method in your Kelp application with &lt;a href=&#34;https://metacpan.org/pod/KelpX::Hooks&#34;&gt;KelpX::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::Log::Role::Color&#34;&gt;Mojo::Log::Role::Color&lt;/a&gt; adds color to your interactive mojo logs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent::Role::Signature&#34;&gt;Mojo::UserAgent::Role::Signature&lt;/a&gt; automatically signs request transactions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Multipart::Encoder&#34;&gt;Multipart::Encoder&lt;/a&gt; is an encoder for mime-type multipart/form-data.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - March 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</link>
      <pubDate>Wed, 29 Apr 2020 01:05:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---march-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get a colorful calendar in the terminal with &lt;a href=&#34;https://metacpan.org/pod/week&#34;&gt;App::week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Google::reCAPTCHA::v3&#34;&gt;Google::reCAPTCHA::v3&lt;/a&gt; is another Google captcha module&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/GraphQL::Client&#34;&gt;GraphQL::Client&lt;/a&gt; … is a GraphQL client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Masscan::Scanner&#34;&gt;Masscan::Scanner&lt;/a&gt; makes it easy to use the masscan port scanner.&lt;/li&gt;
&lt;li&gt;Make non-blocking requests to LastFM with &lt;a href=&#34;https://metacpan.org/pod/Mojo::WebService::LastFM&#34;&gt;Mojo::WebService::LastFM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Telegram&amp;rsquo;s Bot API with &lt;a href=&#34;https://metacpan.org/pod/Net::API::Telegram&#34;&gt;Net::API::Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::OpenVAS&#34;&gt;Net::OpenVAS&lt;/a&gt; let&amp;rsquo;s you program Greenbone&amp;rsquo;s OpenVAS platform with Perl&lt;/li&gt;
&lt;li&gt;Use Elasticsearch 6.x APIs with &lt;a href=&#34;https://metacpan.org/pod/Search::Elasticsearch::Client::6_0&#34;&gt;Search::Elasticsearch::Client::6_0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Block::NJH&#34;&gt;Block::NJH&lt;/a&gt; is interesting; add it to your CPAN distribution to &amp;ldquo;prevent your tests from running on NJH&amp;rsquo;s broken smokers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Config::Structured&#34;&gt;Config::Structured&lt;/a&gt; provides &amp;ldquo;generalized and structured configuration value access&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Ping a database handle to check its health using &lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::DBHPing&#34;&gt;HealthCheck::Diagnostic::DBHPing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/HealthCheck::Diagnostic::FilePermissions&#34;&gt;HealthCheck::Diagnostic::FilePermissions&lt;/a&gt; checks filepaths for expected permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/DB::Object&#34;&gt;DB::Object&lt;/a&gt; is a database abstraction built on top of DBI&lt;/li&gt;
&lt;li&gt;Inspect DBIC objects in a compact format using &lt;a href=&#34;https://metacpan.org/pod/Data::Tersify::Plugin::DBIx::Class&#34;&gt;Data::Tersify::Plugin::DBIx::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/MIME::Base32::XS&#34;&gt;MIME::Base32::XS&lt;/a&gt; is a faster Base32 encoder/decoder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Statistics::Covid&#34;&gt;Statistics::Covid&lt;/a&gt; fetches and manages Covid-19 statistics&lt;/li&gt;
&lt;li&gt;Get a Postgresql mock server for testing via &lt;a href=&#34;https://metacpan.org/pod/Test::PostgreSQL::Docker&#34;&gt;Test::PostgreSQL::Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bind Perl data structures into XML with &lt;a href=&#34;https://metacpan.org/pod/XML::BindData&#34;&gt;XML::BindData&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XML::Minifier&#34;&gt;XML::Minifier&lt;/a&gt; is a configurable XML minifier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Devel::Wherefore&#34;&gt;Devel::Wherefore&lt;/a&gt; helps debug Perl: &amp;ldquo;Where the heck did these subroutines come from?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Create relative symbolic links &lt;a href=&#34;https://metacpan.org/pod/File::Symlink::Relative&#34;&gt;File::Symlink::Relative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Generic&#34;&gt;Module::Generic&lt;/a&gt; is another class library, it uses AUTOLOAD for getter/setter methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/new&#34;&gt;new&lt;/a&gt; saves you from typing module names twice in one liners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Bio::DB::Taxonomy::sqlite&#34;&gt;Bio::DB::Taxonomy::sqlite&lt;/a&gt; stores and manages NCBI data using sqlite&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Polynomial::Chebyshev&#34;&gt;Math::Polynomial::Chebyshev&lt;/a&gt; creates Chebyshev polynomials&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Store Catalyst sessions in Redis with &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Session::Store::RedisFast&#34;&gt;Catalyst::Plugin::Session::Store::RedisFast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not a traditional distribution, but &lt;a href=&#34;https://metacpan.org/pod/Mojo::Server::AWSLambda&#34;&gt;Mojo::Server::AWSLambda&lt;/a&gt; contains a simple example of how to define an AWS Lambda function which uses Mojo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Sticker&#34;&gt;Mojolicious::Plugin::Sticker&lt;/a&gt; combines Mojo apps into a single app&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Observing Coronavirus Pandemic with Raku</title>
      <link>http://localhost:1313/article/observing-coronavirus-with-raku/</link>
      <pubDate>Thu, 02 Apr 2020 08:45:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/observing-coronavirus-with-raku/</guid>
      <description>

&lt;p&gt;Every few years a new unknown virus pops up and starts spreading around the globe. This year, the situation with COVID-19 is different not only because of the nature of the virus but also because of the Internet. Whilst we have instant access to new information (which is often alarmist in tone) we also have the ability to access data for ourselves.&lt;/p&gt;

&lt;p&gt;Johns Hopkins University Center for Systems Science and Engineering synthesizes COVID-19 data from different sources, and displays it on their &lt;a href=&#34;https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6&#34;&gt;online dashboard&lt;/a&gt;. They also publish daily updates in CSV files on &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to ingest their CSV data and display it using different visualizations to reduce panic and provide a way to quickly see real numbers and trends. The result is the website &lt;a href=&#34;https://covid.observer&#34;&gt;covid.observer&lt;/a&gt;. The source files are available in the GitHub &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For years Perl has been known for BioPerl. Let’s see what Raku can bring to society as its great at manipulating text data. The heart of the site is a Raku program and a few modules that parse data and create static HTML pages.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/observing-coronavirus-with-raku/covid-observer.png&#34; alt=&#34;covid-observer&#34; /&gt;
&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to show you a few of the most useful features that Raku offers to developers.&lt;/p&gt;

&lt;h2 id=&#34;the-main-function&#34;&gt;The &lt;code&gt;MAIN&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;The program works in three modes: parsing population data, getting updates from the COVID raw data, and generating HTML files. Raku gives us a very handy way to process command line arguments by defining different variants of the &lt;code&gt;MAIN&lt;/code&gt; function. Each variant is mapped to different command line parameters, and Raku automatically dispatches to the matched variant, which helps me to run the program in the desired mode.&lt;/p&gt;

&lt;p&gt;Here are the variants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;population&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}

multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;generate&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don’t need to parse the command-line options ourselves, nor use any modules such as &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to do it for us. Moreover, Raku emits &amp;ldquo;usage&amp;rdquo; help text if the program is run with incorrect or missing arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./covid.raku
Usage:
  ./covid.raku population
  ./covid.raku fetch
  ./covid.raku generate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Salve J. Nilsen &lt;a href=&#34;https://github.com/ash/covid.observer/pull/5&#34;&gt;proposed to add&lt;/a&gt; another &lt;code&gt;MAIN&lt;/code&gt; function that prints the SQL commands for initializing the database. This example shows how how to define Boolean flags for command line options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;setup&amp;#39;, Bool :$force=False, Bool :$verbose=False) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;code&gt;:&lt;/code&gt; before the parameter name. We’ll see it again later.&lt;/p&gt;

&lt;p&gt;An additional POD comment can be added before each version of the function to print a better usage description, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#| Fetch the latest data and rebuild the database&lt;/span&gt;
multi &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MAIN&lt;/span&gt;(&amp;#39;fetch&amp;#39;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the program prints a more helpful usage message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Usage:
  ./covid.raku population -- Parse population CSV files
  ./covid.raku fetch -- Fetch the latest data and rebuild the database
  ./covid.raku generate -- Generate the website&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reduction-operators&#34;&gt;Reduction operators&lt;/h2&gt;

&lt;p&gt;Reduction operators are really useful. Let me remind you what a reduction operator is. It&amp;rsquo;s actually a meta-operator: an infix operator surrounded by square brackets.&lt;/p&gt;

&lt;p&gt;In the program the reduction operator is widely used for computing totals across the data sets (e.g. for the World, or across Chinese provinces). Let us examine a few cases of increasing complexity:&lt;/p&gt;

&lt;p&gt;First there’s a simple hash, and we need to add up its values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the classic use case for the reduction operator. What I &lt;a href=&#34;https://andrewshitov.com/2020/03/16/a-couple-of-syntax-sweets-in-raku/&#34;&gt;noticed&lt;/a&gt; during the work is that the &lt;code&gt;[-]&lt;/code&gt; construct helps when you need to reduce some value by a few other values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
    failed    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    recovered &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;confirmed recovered failed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$active active cases&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a hash slice in the form of &lt;code&gt;%h&amp;lt;a b c&amp;gt;&lt;/code&gt; also helps to make the code more compact. Compare this with the straightforward approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $active &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;failed&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; %data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;recovered&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;filtering-data&#34;&gt;Filtering data&lt;/h2&gt;

&lt;p&gt;For our second case, the hash values are not scalars but hashes themselves. The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; hyperoperator can be used to extract deeply located data. Let me demonstrate this on a simplified data fragment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    IT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59_138&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# millions&lt;/span&gt;
    },
    CN &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81_397&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1434&lt;/span&gt;
    },
    ES &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28_768&lt;/span&gt;,
        population &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,
    };

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An alternative and cleaner way is using the &lt;code&gt;map&lt;/code&gt; method to access the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $total2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $total2; &lt;span style=&#34;color:#75715e&#34;&gt;# 169303&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, to exclude a country from the results, you can &lt;code&gt;grep&lt;/code&gt; the keys in-place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excl2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excl2; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that calling the hash&amp;rsquo;s &lt;code&gt;grep&lt;/code&gt; method is much handier than trying to loop over the keys and filter them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    [&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] %data{%data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;;
say $excluding&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;china; &lt;span style=&#34;color:#75715e&#34;&gt;# 87906&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hyper-operators&#34;&gt;Hyper operators&lt;/h2&gt;

&lt;p&gt;In the previous section I showed how to apply the same action to each element of a list using &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Now let us take a look at a real example of how I used the hyper operator &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; to compute the deltas of number series:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @confirmed[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/span&gt; @confirmed;
say @delta; &lt;span style=&#34;color:#75715e&#34;&gt;# [10 20 30 80]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The array contains a series of values for the given period of time. The task is to compute how many new cases happen in each day. Instead of using a loop, it is possible to simply ‘subtract‘ an array from itself but shifted by one element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator takes two data series: the slice &lt;code&gt;@confirmed[1..*]&lt;/code&gt; of the original data without the first element, and the original &lt;code&gt;@confirmed&lt;/code&gt; array. For a given binary operator (&lt;code&gt;-&lt;/code&gt; in this example), you can construct four hyper operators: &lt;code&gt;&amp;gt;&amp;gt;-&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;-&amp;lt;&amp;lt;&lt;/code&gt;. The chosen form allows us to ignore the extra item at the end of &lt;code&gt;@confirmed&lt;/code&gt; when it is applied against &lt;code&gt;@confirmed[1..*]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;junctions&#34;&gt;Junctions&lt;/h2&gt;

&lt;p&gt;Let me demonstrate a way of using the junction operator &lt;code&gt;|&lt;/code&gt; which I discovered recently. It chooses the ending for the given ordinal number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $day {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ending &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; given $day {
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;st&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nd&amp;#39;&lt;/span&gt;}
        when &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;}
        default      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;th&amp;#39;&lt;/span&gt;}
    }

    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$day$ending&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; blocks catch the corresponding numbers that need special endings. Junctions such as &lt;code&gt;1|21|31&lt;/code&gt; are more elegant than a regular expression or a chain of comparisons.&lt;/p&gt;

&lt;h2 id=&#34;optional-and-named-parameters&#34;&gt;Optional and named parameters&lt;/h2&gt;

&lt;p&gt;Parameter processing is simple in Raku. This function accepts two positional hash parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals) {
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can easily add optional named parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chart&lt;/span&gt;-daily(%countries, %totals, :$cc?, :$cont?, :$exclude?) {
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A colon before the name makes the parameter named, and the question mark makes it optional. I am using this to modify the behavior of the same statistical function for aggregating data over the whole World, the continents, or to exclude a single country or a region:&lt;/p&gt;

&lt;p&gt;Generating data for the whole World:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a single country:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cc);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a continent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cont &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe&amp;#39;&lt;/span&gt;;
chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, :$cont);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;World data excluding China:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting data for China without its most affected province:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chart&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;daily(%countries, %per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;day, cc &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN&amp;#39;&lt;/span&gt;, exclude &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CN/HB&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;a-built-in-template-engine&#34;&gt;A built-in template engine&lt;/h2&gt;

&lt;p&gt;The project generates more than 200 HTML files, so templating is an important part of it. Fortunately Raku has a great out-of-the-box templating mechanism, which is much more powerful than simple variable interpolation.&lt;/p&gt;

&lt;p&gt;A minimal example is substituting variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;countries-list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        $html
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, notice that Raku lets you keep the indentation of a multi-line string by simply indenting its closing symbol. No extra spaces at the beginning of the lines will appear in the result.&lt;/p&gt;

&lt;p&gt;A more exciting thing is that you can embed Raku code blocks into strings, and those blocks can contain any logic you need to make a right decision somewhere in the middle of the template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qq:to&lt;span style=&#34;color:#e6db74&#34;&gt;/HTML/&lt;/span&gt;;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Coronavirus in {$country&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;div class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;affected&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Affected 1 of every &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;
                    fmtnum((&lt;span style=&#34;color:#ae81ff&#34;&gt;1_000_000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; $population &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
                        $chart2data&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;confirmed&amp;gt;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round())
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nobody affected&amp;#39;&lt;/span&gt;
            }
        }
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    HTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the string builds itself depending on data. For each generated country, the string ’chooses‘ which phrase to embed and how to format the number. The &lt;code&gt;if&lt;/code&gt; block is a relatively big chunk of Raku code that generates a string, which is used in place of the whole block in curly braces. Thus, inside this embedded code block you can freely manipulate data from the outside code.&lt;/p&gt;

&lt;h2 id=&#34;afterword&#34;&gt;Afterword&lt;/h2&gt;

&lt;p&gt;I must say that it is quite exciting to use Raku for a real project. As you can see from the examples, many of its ‘strange‘ features demonstrate how useful they are in different circumstances. Examine the code in the &lt;a href=&#34;https://github.com/ash/covid.observer&#34;&gt;GitHub repository&lt;/a&gt; and follow the updates about the site &lt;a href=&#34;https://andrewshitov.com/category/covid-19/&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - February 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</link>
      <pubDate>Thu, 12 Mar 2020 00:46:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---february-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/API::GitForge&#34;&gt;API::GitForge&lt;/a&gt; is a generic interface to APIs of sites like GitHub, GitLab etc.&lt;/li&gt;
&lt;li&gt;Build GIMP from its git repo using &lt;a href=&#34;https://metacpan.org/pod/App::gimpgitbuild&#34;&gt;App::gimpgitbuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use reCAPTCHA API version v3 with &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA::V3&#34;&gt;Captcha::reCAPTCHA::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Work with the Windows Credential Manager using &lt;a href=&#34;https://metacpan.org/pod/credsman&#34;&gt;credsman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send email via the SendGrid v3 Web API with &lt;a href=&#34;https://metacpan.org/pod/Email::SendGrid::V3&#34;&gt;Email::SendGrid::V3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Annex&#34;&gt;Git::Annex&lt;/a&gt; is a Perl interface for git-annex repositories&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Gtk3::WebKit2&#34;&gt;Gtk3::WebKit2&lt;/a&gt; provides WebKit2 bindings for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Neo4j::Bolt&#34;&gt;Neo4j::Bolt&lt;/a&gt; can communicate with a Neo4j server agent using Bolt protocol&lt;/li&gt;
&lt;li&gt;Control Windows Notepad++ app with code using &lt;a href=&#34;https://metacpan.org/pod/Win32::Mechanize::NotepadPlusPlus&#34;&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/OPCUA::Open62541&#34;&gt;OPCUA::Open62541&lt;/a&gt; is a wrapper for the open62541 &lt;a href=&#34;https://en.wikipedia.org/wiki/OPC_Unified_Architecture&#34;&gt;OPC UA library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query Rundeck&amp;rsquo;s REST API with &lt;a href=&#34;https://metacpan.org/pod/RundeckAPI&#34;&gt;RundeckAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Weather::MOSMIX&#34;&gt;Weather::MOSMIX&lt;/a&gt; downloads and parses the German weather service&amp;rsquo;s forecast data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojo::File::Share&#34;&gt;Mojo::File::Share&lt;/a&gt; aims to provide better local share directory support with Mojo::File&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::DNS::DomainController::Discovery&#34;&gt;Net::DNS::DomainController::Discovery&lt;/a&gt; can discover Microsoft Active Directory domain controllers via DNS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Pb&#34;&gt;Pb&lt;/a&gt; is a workflow system made from Perl and bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Jasonify&#34;&gt;Jasonify&lt;/a&gt; is Just Another Serialized Object Notation library&lt;/li&gt;
&lt;li&gt;Create PDFs with &lt;a href=&#34;https://metacpan.org/pod/Mxpress::PDF&#34;&gt;Mxpress::PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set default PerlIO layers with &lt;a href=&#34;https://metacpan.org/pod/open::layers&#34;&gt;open::layers&lt;/a&gt;, an alternative to the open pragma&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Git::Repository::Plugin::Diff&#34;&gt;Git::Repository::Plugin::Diff&lt;/a&gt; adds a diff method to Git::Repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/LooksLike&#34;&gt;LooksLike&lt;/a&gt; provides more precise alternatives to looks_like_number&lt;/li&gt;
&lt;li&gt;Have a role fire a callback when its applied via &lt;a href=&#34;https://metacpan.org/pod/Role::Hooks&#34;&gt;Role::Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Test::Arrow&#34;&gt;Test::Arrow&lt;/a&gt; is an Object-Oriented testing library with a fun syntax&lt;/li&gt;
&lt;li&gt;Mock method behavior with queued subs using &lt;a href=&#34;https://metacpan.org/pod/Test::Ratchet&#34;&gt;Test::Ratchet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Timer::Milestones&#34;&gt;Timer::Milestones&lt;/a&gt; is an easy-to-use code timing module&lt;/li&gt;
&lt;li&gt;Track changes to scalars (in color!) with &lt;a href=&#34;https://metacpan.org/pod/Var::Mystic&#34;&gt;Var::Mystic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/XS::Manifesto&#34;&gt;XS::Manifesto&lt;/a&gt; describes an approach for creating shared XS code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Zydeco&#34;&gt;Zydeco&lt;/a&gt; is a new OO framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;science-mathematics&#34;&gt;Science &amp;amp; Mathematics&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get Raycast field-of-view and related routines using &lt;a href=&#34;https://metacpan.org/pod/Game::RaycastFOV&#34;&gt;Game::RaycastFOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Math::Spiral&#34;&gt;Math::Spiral&lt;/a&gt; returns an endless stream of X, Y offset coordinates which represent a spiral shape&lt;/li&gt;
&lt;li&gt;Add numbers with fewer numerical errors using &lt;a href=&#34;https://metacpan.org/pod/Math::Summation&#34;&gt;Math::Summation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage an ecosystem of Plack organisms under Kelp with &lt;a href=&#34;https://metacpan.org/pod/Kelp::Module::Symbiosis&#34;&gt;Kelp::Module::Symbiosis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Plack::Middleware::HealthCheck&#34;&gt;Plack::Middleware::HealthCheck&lt;/a&gt; adds a health check endpoint for your Plack app&lt;/li&gt;
&lt;li&gt;Control an embedded WebKit2 engine with &lt;a href=&#34;https://metacpan.org/pod/WWW::WebKit2&#34;&gt;WWW::WebKit2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new on CPAN - January 2020</title>
      <link>http://localhost:1313/article/what-s-new-on-cpan---january-2020/</link>
      <pubDate>Mon, 10 Feb 2020 01:28:47 +0000</pubDate>
      
      <guid>http://localhost:1313/article/what-s-new-on-cpan---january-2020/</guid>
      <description>

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;apis-apps&#34;&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::geoip&#34;&gt;App::geoip&lt;/a&gt; show geological data based on hostname or IP addresses&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/App::url&#34;&gt;App::url&lt;/a&gt; format a URL according to a sprintf-like template&lt;/li&gt;
&lt;li&gt;Push metrics to prometheus exporter with &lt;a href=&#34;https://metacpan.org/pod/Net::Prometheus::Pushgateway&#34;&gt;Net::Prometheus::Pushgateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Shout&#34;&gt;Shout&lt;/a&gt; is a thin wrapper around libshout, the live streaming library&lt;/li&gt;
&lt;li&gt;Report bad actors to AbuseDB via their v2 API: &lt;a href=&#34;https://metacpan.org/pod/WebService::AbuseIPDB&#34;&gt;WebService::AbuseIPDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/WebService::Mailgun&#34;&gt;WebService::Mailgun&lt;/a&gt; is an API client for Mailgun&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-devops&#34;&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clear the terminal using &lt;a href=&#34;https://metacpan.org/pod/Term::Clear&#34;&gt;Term::Clear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Return an endless stream of distinct RGB colors with &lt;a href=&#34;https://metacpan.org/pod/Chart::Colors&#34;&gt;Chart::Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/File::BackupCopy&#34;&gt;File::BackupCopy&lt;/a&gt; makes backing up files easier&lt;/li&gt;
&lt;li&gt;Calculate the mean and variance of a set (Welford&amp;rsquo;s algorithm) using &lt;a href=&#34;https://metacpan.org/pod/Math::StdDev&#34;&gt;Math::StdDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;TOML::Tiny&lt;/a&gt; is a minimal, pure perl TOML parser and serializer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development-version-control&#34;&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Express yourself through moo with &lt;a href=&#34;https://metacpan.org/pod/MooX::Pression&#34;&gt;MooX::Pression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Object::Adhoc&#34;&gt;Object::Adhoc&lt;/a&gt; can mint objects without the hassle of defining a class first&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Sub::HandlesVia&#34;&gt;Sub::HandlesVia&lt;/a&gt; provies another way to define &lt;code&gt;handles_via&lt;/code&gt; in Moo/Moose/Mouse&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Detect User-Agents using &lt;a href=&#34;https://metacpan.org/pod/Duadua&#34;&gt;Duadua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/FTN::Crypt&#34;&gt;FTN::Crypt&lt;/a&gt; can encrypt/decrypt Fido Technology Nets netmail&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Systemd&#34;&gt;Mojolicious::Plugin::Systemd&lt;/a&gt; lets you configure your mojo app with systemd&lt;/li&gt;
&lt;li&gt;The Mozilla Public Suffix List: &lt;a href=&#34;https://metacpan.org/pod/Net::PublicSuffixList&#34;&gt;Net::PublicSuffixList&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JSON, Unicode, and Perl … Oh My!</title>
      <link>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</link>
      <pubDate>Wed, 29 Jan 2020 20:11:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</guid>
      <description>

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might think this a reasonable enough round-trip, just using two
different JSON libraries, &lt;a href=&#34;https://metacpan.org/pod/Mojo::JSON&#34;&gt;Mojo::JSON&lt;/a&gt;
and &lt;a href=&#34;https://metacpan.org/pod/Cpanel::JSON::XS&#34;&gt;Cpanel::JSON::XS&lt;/a&gt;.
In fact, though, when you run
this you’ll see that $decode in the above is &lt;code&gt;&amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;&lt;/code&gt;,
not just the &lt;code&gt;&amp;quot;\xc3\xa9&amp;quot;&lt;/code&gt; that we started with.&lt;/p&gt;

&lt;p&gt;Now invert the encoder/decoder modules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now $decode is just &lt;code&gt;&amp;quot;\x{e9}&amp;quot;&lt;/code&gt;. What’s going on here?&lt;/p&gt;

&lt;h2 id=&#34;what-s-in-a-string&#34;&gt;What’s in a string?&lt;/h2&gt;

&lt;p&gt;To appreciate the above, we first have to grapple with what Perl strings
&lt;em&gt;are&lt;/em&gt;, fundamentally. Unlike C strings, Perl strings aren’t mere arrays
of bytes … but unlike, say, Python 3 strings, Perl strings aren’t arrays of
Unicode characters, either. Perl strings, rather, are arrays of “code
points” in an undefined character set.&lt;/p&gt;

&lt;p&gt;In particular, unlike Python, JavaScript, and many other popular high-level
programming languages, Perl strings do not differentiate between “binary”
and “text”. For example, if Perl reads
bytes 0xff, 0xfe, 0xfd, and 0xfc off of a binary filehandle, the string
that Perl creates from those 4 bytes is understood to contain not 4 &lt;em&gt;bytes&lt;/em&gt;,
but 4 &lt;em&gt;code points&lt;/em&gt;, without reference to any particular character set,
stored in an abstract, internal-use encoding.
(The Perl interpreter may, in fact, use 4 bytes to store the string, but that
would be an implementation detail, of no concern to interpreted Perl code.)&lt;/p&gt;

&lt;p&gt;This point must be stressed: Perl _does not care_—and does not &lt;em&gt;want&lt;/em&gt; to
care—whether a given string’s code points represent bytes or characters.
(More will be said on this later.)&lt;/p&gt;

&lt;h2 id=&#34;back-to-json&#34;&gt;Back to JSON&lt;/h2&gt;

&lt;p&gt;In our examples above we compared round-tripping using different libraries
for the encode and decode. Let’s dig further by comparing just the
encoded JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mojo_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cp_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $mojo_json, $cp_json );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;;
$VAR2 = &amp;quot;[\&amp;quot;\x{c3}\x{a9}\&amp;quot;]&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;
outputs one string using octal escapes
and the other using hex. This reflects another Perl interpreter
implementation detail which, for now, is of no concern.)&lt;/p&gt;

&lt;p&gt;Our input string contains two code points, 0xc3 and 0xa9. Recall that
there is no specific character set associated with those code points; they’re
just numbers. JSON, though, is purely Unicode—and the
latest standard mandates UTF-8 encoding specifically. So we need to translate
our “no-character-set” code points to UTF-8 in order to encode to JSON. But
how to do this?&lt;/p&gt;

&lt;p&gt;We can’t, strictly speaking. It would be like trying
to convert 5 “currency units” to U.S. dollars: we need to know the actual
source currency (Bitcoin? Euros?) to get an answer. Likewise, in Perl, to
express our stored “code points” in UTF-8 we need to know what &lt;em&gt;characters&lt;/em&gt;
those code points represent. For example, your Perl string might store code
point 142 … but which character is that? Perl doesn’t know, and Perl doesn’t
care. Without a defined character set, a code point is just a number.&lt;/p&gt;

&lt;p&gt;To work around this problem, our JSON libraries make reasonable—though
not necessarily correct—assumptions about what the string’s code points
represent.&lt;/p&gt;

&lt;p&gt;Mojo::JSON assumes that our 2 original code points are Unicode. That means
Mojo::JSON thinks we gave it the characters U+00C3 (Ã) and
U+00A9 (©). The reason for the “expansion” from 2 code points to 4 in the
encoded JSON is that
Mojo::JSON encodes our code points as UTF-8: U+00C3 becomes Perl
code points 0303 (0xc3) and 0203 (0x83), and U+00A9 becomes 0302 (0xc2) and
0251 (0xa9).&lt;/p&gt;

&lt;p&gt;Cpanel::JSON::XS makes a different assumption that suits a different
interpretation: This encoder assumes that our 2 original code points
represent whatever bytes of the characters that should go into the eventual
JSON. Unlike with Mojo::JSON, there is no assumption about a desired encoding,
which allows the caller full control over the encoding.&lt;/p&gt;

&lt;p&gt;(This flexibility allows the encoder’s caller to choose, e.g., UTF-16 rather
than UTF-8 for the encoded JSON. That made more sense prior to the latest
JSON specification, which mandates UTF-8 outside closed systems.)&lt;/p&gt;

&lt;p&gt;The same difference in behavior applies to our two decoder functions. They,
too, face an “unsolvable” problem, the reverse of that for encoding. And
their solutions mirror the encoders’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{e9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recall that Mojo::JSON’s encoder interprets its input as Unicode and that
its output code points represent bytes of UTF-8.
Above you’ll see that its decoder does the inverse: it interprets its
input as bytes of UTF-8 and outputs code points understood to be Unicode.
This means the number of code points output will be smaller than the number
input if the input contains any code points above 127 (0x7f), which UTF-8
represents as multiple bytes.&lt;/p&gt;

&lt;p&gt;As for Cpanel::JSON::XS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;decode()&lt;/code&gt; method, like &lt;code&gt;encode()&lt;/code&gt;, assumes that the caller will
handle encoding manually and so simply copies code points.&lt;/p&gt;

&lt;h2 id=&#34;aside-assumptions-of-utf-8&#34;&gt;Aside: Assumptions of UTF-8&lt;/h2&gt;

&lt;p&gt;Mojo::JSON’s behavior of encoding to UTF-8 has precedent: Perl itself!&lt;/p&gt;

&lt;p&gt;You may have run into something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; perl -e&#39;print &amp;quot;\x{100}&amp;quot;&#39;
Wide character in print at -e line 1.
Ā
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For code points 0-255 Perl just outputs the code point as an octet, but
when asked to output a code point that exceeds 255, obviously that doesn’t
work. In this case, Perl assumes you want UTF-8 but throws the “wide
character” warning to tip you off to the fact that you missed something—in
this case, you neglected to encode code point 256 to bytes.&lt;/p&gt;

&lt;h2 id=&#34;abusing-the-system&#34;&gt;Abusing the System&lt;/h2&gt;

&lt;p&gt;Cpanel::JSON::XS’s &lt;code&gt;encode()&lt;/code&gt; allows for a nonstandard use of JSON:
literal binary data. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl -MCpanel::JSON::XS -e&#39;print Cpanel::JSON::XS-&amp;gt;new()-&amp;gt;encode([&amp;quot;\xff&amp;quot;])&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… will output 5 bytes: &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt;, 0xff, &lt;code&gt;&amp;quot;&lt;/code&gt;, and &lt;code&gt;]&lt;/code&gt;. This is invalid JSON
because no Unicode encoding (let alone UTF-8) ever encodes a character to
a single 0xff byte. Only special decoders that understand this “literal
binary” JSON variant will parse this as intended. That reliance on a custom
mode of operation undercuts JSON’s usefulness as a widely-supported
standard—which may seem fine at first but
can easily bite if your application grows in scope.&lt;/p&gt;

&lt;p&gt;Applications that need to serialize strings with arbitrary octets (i.e.,
binary) should apply a secondary encoding (e.g., Base64) to strings prior
to JSON encoding. Or, better yet, prefer a binary-friendly encoding like
&lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-that-flag-behind-the-curtain&#34;&gt;About That Flag Behind the Curtain …&lt;/h2&gt;

&lt;p&gt;If you run the output from our two encoder methods through
&lt;a href=&#34;https://metacpan.org/pod/Devel::Peek&#34;&gt;Devel::Peek&lt;/a&gt;, you’ll
see something like this for Mojo::JSON’s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fdc27802f30) at 0x7fdc27e59c58
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x7fdc28826350 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and this for Cpanel::JSON::XS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fc0cd004d30) at 0x7fc0cd016228
  REFCNT = 1
  FLAGS = (POK,pPOK,UTF8)
  PV = 0x7fc0cce2ef60 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0 [UTF8 &amp;quot;[&amp;quot;\x{c3}\x{a9}&amp;quot;]&amp;quot;]
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;UTF8&lt;/code&gt; flag in the latter. This tells us that Perl’s
internal storage of the string’s code points uses UTF-8 encoding. This
difference is why, as we saw earlier, Data::Dumper encodes Mojo::JSON’s output
using
octal escapes but Cpanel::JSON::XS’s using hex: Data::Dumper recognizes the
UTF8 flag and renders its output based on it.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://perldoc.perl.org/perlunifaq.html#What-is-%22the-UTF8-flag%22%3f&#34;&gt;perldoc perlunifaq&lt;/a&gt; makes clear, though, the UTF8 flag is &lt;strong&gt;not&lt;/strong&gt; meant for
consumption by Perl code. Perl applications should regard strings as
simple sequences of code points, without regard for how the
Perl interpreter may store those strings in memory.&lt;/p&gt;

&lt;p&gt;That being said,
in limited contexts it &lt;em&gt;may&lt;/em&gt; work to imitate the distinction between string
types in languages like Python and JavaScript by regarding
UTF8-flagged strings as “character strings” and non-UTF8-flagged strings as
“byte strings”—indeed, &lt;a href=&#34;https://metacpan.org/pod/Sereal::Encoder&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;serializers&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;on&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;CPAN&lt;/a&gt;, including two of my own,
do exactly this. This isn’t
a supported model, though, for using Perl strings, and any code that
depends on it may behave differently in different Perl versions. Caveat
emptor!&lt;/p&gt;

&lt;h2 id=&#34;making-peace&#34;&gt;Making Peace&lt;/h2&gt;

&lt;p&gt;JSON and Perl are odd bedfellows. Perl’s lack of distinct number and string
types, for example, can yield JSON that uses the wrong type for one
value or the other. Perl’s lack of native booleans produces a similar effect.&lt;/p&gt;

&lt;p&gt;The encoding problems discussed above, though, are especially nefarious
because accommodating them requires a good understanding of all of the above.
Most developers can accommodate something like &lt;code&gt;{&amp;quot;age&amp;quot;: &amp;quot;9&amp;quot;}&lt;/code&gt; easily enough
because typecasting from &lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; (string) to &lt;code&gt;9&lt;/code&gt; (number) is commonplace. But
how many would see &lt;code&gt;&amp;quot;Ã©&amp;quot;&lt;/code&gt; and think, “ah! I simply have to treat those
characters’ code points as bytes then decode those bytes as UTF-8!” Some
would, to be sure—perhaps even many—but likely fewer than can easily coerce
&lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Binary-friendly encodings like &lt;a href=&#34;http://cbor.io&#34;&gt;CBOR&lt;/a&gt;
mitigate against this problem because whatever decodes the Perl-sourced
data can more easily recognize the need to decode from binary. Anyone
who doesn’t know about bytes and encodings will quickly learn! Fundamentally,
though, even CBOR doesn’t really fit Perl’s “pure code points” string model
very well because CBOR distinguishes strongly between binary and text strings,
which Perl does not.&lt;/p&gt;

&lt;p&gt;At the end of the day, Perl’s data model, for all of the conveniences that it
affords us, makes communication with many other languages a challenge. The
best we can do is to anticipate these problems and deal with them as they arise.&lt;/p&gt;

&lt;h2 id=&#34;epilogue-json-alternatives&#34;&gt;Epilogue: JSON Alternatives&lt;/h2&gt;

&lt;p&gt;JSON’s inability to store arbitrary octet strings is, in my experience,
its biggest liability,
but there are other reasons why I often prefer to avoid JSON:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Its inability to store comments and proscription against trailing commas
make it an awkward choice for human-maintained data structures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its &lt;code&gt;\uXXXX&lt;/code&gt; escapes support only characters within Unicode’s
&lt;abbr title=&#34;Basic Multilingual Plane&#34;&gt;BMP&lt;/abbr&gt;; to store emoji or other
non-BMP characters you either have to encode to UTF-8 directly or indicate
a UTF-16 surrogate pair (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-16#U+010000_to_U+10FFFF&#34;&gt;What does that mean?&lt;/a&gt;) in &lt;code&gt;\uXXXX&lt;/code&gt; escapes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It’s inefficient compared with binary formats.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; is a nice serialization format
for human-maintained data structures. It’s line-delimited and—of course!—allows
comments, and any Unicode code point can be expressed in simple hexadecimal.
TOML is fairly new, and its specification is still in flux; nevertheless,
it already undergirds a number of high-profile
software projects like Rust’s &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;
package manager and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;—which powers this site! CPAN
&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;hosts&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;several&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML&#34;&gt;implementations&lt;/a&gt; of this serialization.&lt;/p&gt;

&lt;p&gt;The aforementioned &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; improves upon JSON’s efficiency and
also allows for storage of binary strings. Whereas JSON encoders must
stringify numbers and escape all strings, CBOR stores numbers “literally”
and prefixes strings with their length, which obviates the need to escape those
strings. These dramatically simplify both encoding and decoding. As with
TOML and YAML, CPAN hosts &lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;CBOR&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;implementations&lt;/a&gt;.
(Full disclosure: Two of these are of my own authorship.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Sereal/Sereal&#34;&gt;Sereal&lt;/a&gt; is another great JSON substitute
that confers most of CBOR’s benefits and can even serialize more
“Perl-specific” items like regular expressions. This makes it ideal
for Perl-to-Perl IPC. The reference implementation is CPAN’s
&lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt; distribution.
Sereal isn’t as well-supported as CBOR outside Perl,
though, so if you need to communicate with non-Perl code, Sereal may
not work as well for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; is another format that humans can maintain easily.
Unlike TOML, YAML supports binary strings; in fact, it’s flexible enough
to replace Data::Dumper in many cases. CPAN includes
a &lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;number&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::PP&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::Old&#34;&gt;libraries&lt;/a&gt; that implement YAML.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Rock Pi S Review</title>
      <link>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</link>
      <pubDate>Thu, 23 Jan 2020 10:39:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/</guid>
      <description>&lt;p&gt;When writing articles like these, there is an inevitable comparison to the
Raspberry Pi series. There is no way to fight this,
and for good reason. The first Raspberry Pi ushered in a slew of Single
Board Computers (SBCs), and one of them is the Rock Pi S, a new board from Seeed
Studio.&lt;/p&gt;

&lt;p&gt;In the interest of full disclosure, the Rock Pi S was provided by Seeed
Studio for this review. Specifically, it&amp;rsquo;s the model with 512MB of RAM and
4Gb of built-in flash.&lt;/p&gt;

&lt;p&gt;The Rock Pi S competes in the same segment as the Raspberry Pi Zero, particularly the Zero W
with built-in WiFi. Its form factor is different; where the Zero is
shaped like a stick of gum, the Rock Pi S is closer to a square. The Rock
also has USB-C for power, an ethernet jack, and a USB-A port. Depending on the
project, it can end up being cheaper than the Zero, since you don&amp;rsquo;t have to
buy a micro-USB to USB-A adapter to hook up most other devices.&lt;/p&gt;

&lt;p&gt;You do still need a micro SD card. While there are versions of the Rock with
built-in flash, it&amp;rsquo;s small and not meant for booting an OS. Note that the size of the built-in flash
is listed in giga&lt;em&gt;bits&lt;/em&gt;. The 4Gb version is actually 512 mega&lt;em&gt;bytes&lt;/em&gt;. So get an
SD card.&lt;/p&gt;

&lt;p&gt;Which leaves us the question of which SD card. Some people automatically
reach for a class 10 or UHS-I card, since those have the highest performance on
the box. Trouble is, the traditional class ratings on SD cards only tell you
the sequential read and write performance. That&amp;rsquo;s fine for cameras, but
running an operating system means lots of random reads. Testing often showed
that a good class 4 card was better than a lot of the class 10 cards out there.&lt;/p&gt;

&lt;p&gt;These days, we don&amp;rsquo;t have to worry about that, because the SD Association
came up with the &lt;a href=&#34;https://www.sdcard.org/developers/overview/application/index.html&#34;&gt;Application Performance Classes&lt;/a&gt;
of A1 and A2. These set a minimum of random IO operations per second, which
is just what we want. So get an A1 card and you&amp;rsquo;ll be happy with the results.&lt;/p&gt;

&lt;p&gt;The big thing in the Rock&amp;rsquo;s favor is a quad core ARM processor. While it&amp;rsquo;s not
going to set any Bitcoin mining records, I&amp;rsquo;ve found multicore
processors are handy for hardware projects. On a single core processor running
Linux, your program can get interrupted by something else at any time. This
means that a program running on a mere 16MHz Arduino may run better than a
1GHz Raspberry Pi. A quad core processor mitigates this, since secondary
programs have 3 other cores to work with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/the-rock-pi-s-or-how-to-get-gpio-input-without-a-library/rockpi2.jpg&#34; alt=&#34;The Rock Pi S&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Rock is powered over its USB-C port. I found attaching it to a
laptop USB port provided enough power to get going. This is also handy because
you can run &lt;code&gt;adb shell&lt;/code&gt; to connect to the Rock&amp;rsquo;s OS. &amp;ldquo;ADB&amp;rdquo; is the
Android Debug Bridge, and while the Rock does support running Android, I used
a Ubuntu Bionic image. Yes, &lt;code&gt;adb&lt;/code&gt; did still work with Ubuntu installed. This is great for
headless installs, since you won&amp;rsquo;t have networking available at first boot.&lt;/p&gt;

&lt;p&gt;Since it&amp;rsquo;s running Ubuntu, we have &lt;code&gt;perl&lt;/code&gt; from the start:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -v:

This is perl 5, version 26, subversion 1 (v5.26.1) built for aarch64-linux-gnu-thread-multi
(with 67 registered patches, see perl -V for more detail)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you won&amp;rsquo;t have is an equivalent to &lt;a href=&#34;https://metacpan.org/pod/RPi::WiringPi&#34;&gt;RPi::WiringPi&lt;/a&gt;
to control GPIO (&amp;ldquo;General Purpose Input/Output&amp;rdquo;). GPIO is the most basic
building block for hardware programming. We&amp;rsquo;re either controlling the output
voltage to cause something to happen, like blinking an LED, or we&amp;rsquo;re taking
input to see if something happened, like hitting a switch. It&amp;rsquo;s simple, but
very useful. Tons of hardware projects come down to just seeing if something
is on, or turning something on.&lt;/p&gt;

&lt;p&gt;What we lack is a library to do that on the Rock Pi S. That&amp;rsquo;s OK, because it&amp;rsquo;s
Linux, and Linux provides a simple sysfs interface to access GPIO pins. As long
as there&amp;rsquo;s a GPIO driver for the board, you can control the pins.&lt;/p&gt;

&lt;p&gt;The Rock has two headers, one of which is color coded and has the main pins you want to work with in most projects. Note
that there are a few variations of the pinout depending on the version of
the board you get. The version should be printed on the board (I received a
V12 board), so make sure you&amp;rsquo;re looking at the right pinout for your board.
See the &lt;a href=&#34;https://wiki.radxa.com/RockpiS/hardware/rockpiS#gpio&#34;&gt;GPIO header documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that the pins are specified as 3.3V input. That means you don&amp;rsquo;t want to put 5V
into them. Feeding it 5V might cause glitches, or could break the board
completely.&lt;/p&gt;

&lt;p&gt;To get at the pins, we can use the &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/gpio/sysfs.html&#34;&gt;Linux sysfs interface&lt;/a&gt;.
You will note a big fat deprecation warning at the top. The new way to do it
is with gpio-cdev, which requires some &lt;code&gt;ioctl()&lt;/code&gt; calls. Since this is
more difficult to handle&amp;ndash;it requires importing some constants from the
kernel headers, instead of just accessing files&amp;ndash;we&amp;rsquo;ll stick with the sysfs
interface for now. That said, if someone would like to make a CPAN module
that provides those kernel symbols (and maybe the ones for I2C and SPI, as
well), I would welcome that.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what we need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the pin accessible by writing the pin number to &lt;code&gt;/sys/class/gpio/export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the pin as an input pin by writing &amp;ldquo;in&amp;rdquo; to &lt;code&gt;/sys/class/gpioN/direction&lt;/code&gt; (where N is the pin number)&lt;/li&gt;
&lt;li&gt;Read the current value from &lt;code&gt;/sys/class/gpioN/value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since pullups are active, a pin not connected to anything will output a 1, and connecting it to ground will give you a 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can connect a wire from a ground pin to the pin you select, and the value
output should go from 1 to 0.&lt;/p&gt;

&lt;p&gt;You may be wondering why this is backwards; don&amp;rsquo;t you want to see a 1 when
something is connected? The reason is pullup resistors. If a pin is
disconnected, it will tend to &amp;ldquo;float&amp;rdquo;, picking up interference from the
electronics around it. That results in getting random 0&amp;rsquo;s and 1&amp;rsquo;s. If you
instead connect a resistor tied to high voltage, 1 is what you consistently get
on the pin.
If you then connect that pin to ground, it will see a 0 instead. We
just have to remember that the whole thing is backwards from what we normally
expect&amp;ndash;1 for disconnected, 0 for connected.&lt;/p&gt;

&lt;p&gt;The full program is at the end of the article. The &lt;code&gt;export_pin&lt;/code&gt; and &lt;code&gt;set_input&lt;/code&gt;
functions both take a pin number and ask the kernel to export it for
use or set it as input (respectively).  The &lt;code&gt;read_pin&lt;/code&gt; function takes a pin
and returns its current value (either 1 or 0). The &lt;code&gt;write_pin&lt;/code&gt; function is
just a helper function for doing the file IO for other functions.&lt;/p&gt;

&lt;p&gt;At the very bottom is the code to wrap all this together. We export the pin
passed in from the command line, set it as input, and then read the pin in a
loop. By outputting &amp;ldquo;\r&amp;rdquo;, the previously printed value is overwritten in the
terminal, rather than having one long string of values. Since we&amp;rsquo;re using
the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; version of &lt;code&gt;sleep&lt;/code&gt;, we can use
seconds in floating point to slow the output down without being too slow.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been waiting for a board like this for a while, packing in a multicore
processor, networking, a full sized USB jack, and running on Linux in a sub $20
price range. This might be a new favorite.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.26&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sys/class/gpio&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; constant SLEEP_TIME &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();
$GPIO &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\A\d+\z/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; usage();



&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_input&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;export_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; write_pin( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/export&amp;#39;&lt;/span&gt;, $pin );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($pin) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/gpio&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $pin &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/value&amp;#39;&lt;/span&gt;;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t read from $full_path: $!\n&amp;#34;&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$in&amp;gt;&lt;/span&gt; ) {
        $data &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $line;
    }

    close( $in );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $data;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_pin&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($path, $data) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $full_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BASE_PATH &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $path;
    open( &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, $full_path )
        &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t write to $full_path: $!\n&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$data&amp;#34;&lt;/span&gt;;
    close $out;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;usage&lt;/span&gt;
{
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: rockpi_gpio.pl &amp;lt;pin number&amp;gt;\n&amp;#34;&lt;/span&gt;;
}


export_pin( $GPIO );
set_input( $GPIO );
$| &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# Autoflush output&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_pin( $GPIO );
    chomp $in;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$in\r&amp;#34;&lt;/span&gt;;
    sleep SLEEP_TIME;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>

