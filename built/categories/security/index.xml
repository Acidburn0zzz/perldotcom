<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/security/</link>
    <description>Recent content in Security on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Feb 2018 08:35:11 +0000</lastBuildDate>
    <atom:link href="/categories/security/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How strong is your password?</title>
      <link>http://localhost:1313/article/how-strong-is-your-password-/</link>
      <pubDate>Tue, 06 Feb 2018 08:35:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-strong-is-your-password-/</guid>
      <description>

&lt;p&gt;In the latest &lt;a href=&#34;http://localhost:1313/article/what-s-new-on-cpan---january-2018/&#34;&gt;what-s new on CPAN&lt;/a&gt;, I linked to &lt;a href=&#34;https://metacpan.org/pod/Data::Password::zxcvbn&#34;&gt;Data::Password::zxcvbn&lt;/a&gt;, a new module which estimates the difficulty of cracking a given password. Developed by Gianni Ceccarelli, it&amp;rsquo;s a port of Dropbox&amp;rsquo;s JavaScript implementation by Dan Wheeler.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Dan Wheeler&amp;rsquo;s original blog &lt;a href=&#34;https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/&#34;&gt;post&lt;/a&gt; explains this in detail, but here&amp;rsquo;s a quick summary. To estimate a password&amp;rsquo;s strength we measure its &lt;a href=&#34;https://en.wikipedia.org/wiki/Password_strength#Entropy_as_a_measure_of_password_strength&#34;&gt;entropy&lt;/a&gt;. The zxcvbn algorithm estimates a password&amp;rsquo;s entropy in three stages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;match - matches parts of a password against patterns like: known words, sequences, dates etc&lt;/li&gt;
&lt;li&gt;score - for every matched pattern, calculate its entropy&lt;/li&gt;
&lt;li&gt;search - find the lowest entropy sequence of non-overlapping matches&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Imagine the password &amp;ldquo;baseball2005-59xH}&amp;rdquo;; zxcvbn will match &amp;ldquo;baseball&amp;rdquo; in its popular words dictionary, so its entropy is quite low. Similarly, &amp;ldquo;2005&amp;rdquo; will match the year pattern. On the other hand, the last part &amp;ldquo;-59xH}&amp;rdquo; isn&amp;rsquo;t in our word list, nor does it match any of zxcvbn&amp;rsquo;s common patterns and would require brute-force guessing, which has a very high entropy. Thus zxcvbn&amp;rsquo;s entropy for the password would be in pseudo code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dictionary_entropy(&amp;quot;baseball&amp;quot;) + year_entropy(&amp;quot;2005&amp;quot;) + brute_force_entropy(&amp;quot;59xH{&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it has calculated the entropy of a password, zxcvbn estimates other statistics like how many guesses it would take to crack the password, and the password cracking time.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Data::Password::zxcvbn is on CPAN, so installation can be done with your favorite CPAN client, like &lt;a href=&#34;https://metacpan.org/pod/App::CPAN&#34;&gt;cpan&lt;/a&gt; or &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cpanm Data::Password::zxcvbn
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-use-it&#34;&gt;How to use it&lt;/h3&gt;

&lt;p&gt;Data::Password::zxcvbn is easy to use. It exports a function called &lt;code&gt;password_strength&lt;/code&gt; which accepts a password string parameter. It then returns a hashref containing useful &lt;a href=&#34;https://metacpan.org/pod/Data::Password::zxcvbn#Return-value&#34;&gt;information&lt;/a&gt; about the strength of the password.&lt;/p&gt;

&lt;p&gt;For example, this quick script accepts a password argument, and prints how strong it&amp;rsquo;s estimated to be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Password::zxcvbn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password_strength&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $est_strength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password_strength(shift @ARGV);
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password strength [0-4]: %d, # guesses needed: %d\n&amp;#34;&lt;/span&gt;,
       $est_strength&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{score},
       $est_strength&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{guesses},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;score&lt;/code&gt; is a value between 0 and 4, indicating the estimated password strength, with 0 being ridiculously easy, and 4 being super strong. The &lt;code&gt;guesses&lt;/code&gt; value is an estimated number of guesses needed to correctly guess the password. Keep in mind that depending on how the password is encrypted, and where it is stored, attackers might be able to make billions of guesses per second. So the &lt;code&gt;guesses&lt;/code&gt; number needs to be really large to be considered secure. Saving the script as &lt;code&gt;password-strength&lt;/code&gt;, I can run it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./password_strength foobar
Password strength [0-4]: 0, # guesses needed: 915
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no! My password &amp;ldquo;foobar&amp;rdquo; was rated 0. I suppose it&amp;rsquo;s not very strong. Let&amp;rsquo;s try another favorite example password of mine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./password_strength itsasecret
Password strength [0-4]: 1, # guesses needed: 29445
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm &amp;ldquo;itsasecret&amp;rdquo; was rated a little stronger, but not by much. Let&amp;rsquo;s try a UUID (generated by &lt;a href=&#34;https://metacpan.org/pod/Data::UUID&#34;&gt;Data::UUID&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./password_strength 7E943948-0C75-11E8-A90E-9860F82DAED4
Password strength [0-4]: 4, # guesses needed: -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ding ding ding, we have a winner. The UUID was given the highest score of 4, and the estimated number of guesses was infinite (-1). I&amp;rsquo;ll never remember it though: I should probably use a password manager.&lt;/p&gt;

&lt;h3 id=&#34;detecting-fragile-passwords&#34;&gt;Detecting fragile passwords&lt;/h3&gt;

&lt;p&gt;Some passwords appear strong, but contain data associated with its user, making them fragile. Like my employer&amp;rsquo;s domain name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./password_strength ziprecruiter.com
Password strength [0-4]: 4, # guesses needed: 949660000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;a href=&#34;https://ziprecruiter.com&#34;&gt;ziprecruiter.com&lt;/a&gt; is considered a strong password, but it&amp;rsquo;s not a strong password for &lt;em&gt;me&lt;/em&gt;. How can we detect these instances of fragile passwords?&lt;/p&gt;

&lt;p&gt;Data::Password::zxcvbn&amp;rsquo;s &lt;code&gt;password_strength&lt;/code&gt; function accepts a hashref of options as a second parameter. One option is called &amp;ldquo;user_input&amp;rdquo;, which can be used to supply data known about the user, such as their name, date of birth etc. I&amp;rsquo;ve updated the script to read this from the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Password::zxcvbn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password_strength&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $est_strength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password_strength(shift @ARGV, { user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { @ARGV }});
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password strength [0-4]: %d, # guesses needed: %d\n&amp;#34;&lt;/span&gt;,
       $est_strength&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{score},
       $est_strength&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{guesses};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the script and including my employer data, you can see the password&amp;rsquo;s strength is now rated much lower:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./password_strength ziprecruiter.com employer ziprecruiter
Password strength [0-4]: 2, # guesses needed: 1010000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were using Data::Password::zxcvbn in a web application as part of a user registration form (or a password reset feature), you could pass the user&amp;rsquo;s details to &lt;code&gt;password_strength&lt;/code&gt; to catch these instances of fragile passwords. For users with admin privileges, you might require that their zxcvbn password score is the highest (4). This seems more secure than developing your own password validation function to check a password is of a minimum length, with a certain combinations of characters.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CPAN: &lt;a href=&#34;https://metacpan.org/pod/Data::Password::zxcvbn&#34;&gt;Data::Password::zxcvbn&lt;/a&gt; and Bitbucket &lt;a href=&#34;https://bitbucket.org/broadbean/p5-data-password-zxcvbn/&#34;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Original Dropbox blog &lt;a href=&#34;https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/&#34;&gt;post&lt;/a&gt; discussing zxcvbn&lt;/li&gt;
&lt;li&gt;The Usenix Symposium zxcvbn talk &lt;a href=&#34;https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/wheeler&#34;&gt;page&lt;/a&gt; with video and paper&lt;/li&gt;
&lt;li&gt;The zxcvbn &lt;a href=&#34;https://github.com/dropbox/zxcvbn&#34;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Cover image by &lt;a href=&#34;https://www.freepik.com/free-vector/red-lock-with-password_715015.htm&#34;&gt;freepik&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Free Wildcard TLS with Net::ACME2 and Let’s Encrypt</title>
      <link>http://localhost:1313/article/free-wildcard-tls-with-net-acme2-and-let-s-encrypt/</link>
      <pubDate>Tue, 23 Jan 2018 08:00:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/free-wildcard-tls-with-net-acme2-and-let-s-encrypt/</guid>
      <description>&lt;p&gt;Much of the credit for the recent improvement in TLS deployment across
the Internet must go to &lt;a href=&#34;http://letsencrypt.org&#34;&gt;Let’s Encrypt&lt;/a&gt; (LE),
who provide free TLS certificates via an open-access RESTful API. That
API has a large number of clients in many languages, including Perl.
(The list includes the &lt;a href=&#34;http://cpanel.com&#34;&gt;cPanel&lt;/a&gt;-derived
&lt;a href=&#34;https://metacpan.org/pod/Net::ACME&#34;&gt;Net::ACME&lt;/a&gt;
as well as &lt;a href=&#34;https://metacpan.org/pod/Crypt::LE&#34;&gt;Crypt::LE&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/Protocol::ACME&#34;&gt;Protocol::ACME&lt;/a&gt;,
&lt;a href=&#34;https://metacpan.org/pod/WWW::LetsEncrypt&#34;&gt;WWW::LetsEncrypt&lt;/a&gt;, and
&lt;a href=&#34;https://metacpan.org/pod/Mojo::ACME&#34;&gt;Mojo::ACME&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;LE has worked with the &lt;a href=&#34;http://ietf.org&#34;&gt;IETF&lt;/a&gt; to standardize their
“ACME” (Automated Certificate Management Environment) protocol as an
Internet standard. The forthcoming standard breaks compatibility with the
previous version of the protocol, which necessitates updates to the client
logic.&lt;/p&gt;

&lt;p&gt;As an incentive for clients to adopt the new protocol, though, LE will
offer free wildcard TLS via their new API.&lt;/p&gt;

&lt;p&gt;I thought I would take the opportunity to rework Net::ACME for support of
the new protocol and quickly decided that a new distribution would suit
the need best. Besides the significant protocol changes that have taken
place, I wanted to make some “deeper” changes like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I wanted to incorporate &lt;a href=&#34;https://metacpan.org/pod/X::Tiny&#34;&gt;X::Tiny&lt;/a&gt;
to reduce some logic duplication and gain the benefits of that library.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The new protocol suggests some changes to the class structure that
would have been unwieldy to incorporate in the prior version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so, &lt;a href=&#34;https://metacpan.org/pod/Net::ACME2&#34;&gt;Net::ACME2&lt;/a&gt; is now available.
This is a generic client library for any standard ACME implementation,
though the only known public ACME implementation right now is
Let’s Encrypt’s. Their API only provides testing certificates for now,
but once there’s a production endpoint I will update Net::ACME2 to use it.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Net::ACME2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;… supports both RSA and ECDSA&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… runs anywhere that Perl runs—no XS required except for core
modules. (cf. &lt;a href=&#34;https://metacpan.org/pod/Crypt::Perl&#34;&gt;Crypt::Perl&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… reports detailed errors via typed exceptions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;… has minimal dependencies (no Moose, &amp;amp;c.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve created some example &lt;a href=&#34;https://github.com/FGasper/p5-Net-ACME2/tree/master/examples&#34;&gt;scripts&lt;/a&gt; to get you started. After you&amp;rsquo;ve installed the module, clone the &lt;a href=&#34;https://github.com/FGasper/p5-Net-ACME2&#34;&gt;repo&lt;/a&gt;, change into the root project directory and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./examples/http-01.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./examples/dns-01.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These walk you through the following steps (with Let’s Encrypt):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Read the terms of service and, if you accept them, proceed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an RSA or ECC private key. Net::ACME2 will extract the public
key from it and send it to the ACME server as your account identifier.
(The example scripts create a new key for each invocation, but for a
production deployment you should reuse a key.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a certificate order by telling Net::ACME2 which domains the
certificate will include. The ACME server will respond with options for
“challenges”—i.e., how to prove that you control those domains. Currently
there are two available methods: HTTP and DNS. (NOTE: Wildcard domains
require the DNS method.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up the verification. For HTTP that means making a specific
URL on the domain respond with specific content; for DNS it means creating
a TXT record with a specific name and content. (The example scripts use
the same challenge method for all domains, but your application can be
more flexible.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Indicate to the ACME server which challenge you’re accepting for each
domain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finalize the certificate order. This will tell you if any challenges
failed or are still pending.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If all domains’ challenges succeeded, you’ll get a URL whose content
will be the newly-issued certificate.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Net::ACME2 is, like the ACME standard itself, still subject to
change, but it’ll get the job done for now. Give it a try!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Netanel Rubin&#39;s Perl Jam circus</title>
      <link>http://localhost:1313/article/netanel-rubins-perljam-circus/</link>
      <pubDate>Tue, 01 Mar 2016 08:57:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/netanel-rubins-perljam-circus/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just watched Netanel Rubin&amp;rsquo;s Perl Jam 2 &lt;a href=&#34;https://www.youtube.com/watch?v=eH_u3C2WwQ0&#34;&gt;talk&lt;/a&gt; from this year&amp;rsquo;s Chaos Communication Congress. As he&amp;rsquo;s due to give the same talk at &lt;a href=&#34;https://www.blackhat.com/asia-16/&#34;&gt;Black Hat Asia&lt;/a&gt;, I thought it would be good to set the record straight concerning his claims about Perl (&lt;a href=&#34;https://gist.github.com/preaction/978ce941f05769b064f4&#34;&gt;others&lt;/a&gt; have already done so). He makes 3 major claims:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Perl language is insecure&lt;/li&gt;
&lt;li&gt;Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/li&gt;
&lt;li&gt;Perl doesn&amp;rsquo;t improve&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m going to address each claim in turn and show why it is false. In my view, Perl remains a powerful, general-purpose language well-suited to tasks like building dynamic web applications, processing big data, and managing systems.&lt;/p&gt;

&lt;h3 id=&#34;claim-1-the-perl-language-is-insecure&#34;&gt;Claim 1: The Perl language is insecure&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Function declarations cannot specify argument data types&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn&amp;rsquo;t true. Since 2008 Perl has supported subroutine signatures, with type checks using the &lt;a href=&#34;https://metacpan.org/pod/Method::Signatures&#34;&gt;Method::Signatures&lt;/a&gt; module. Since 2006 the &lt;a href=&#34;https://metacpan.org/pod/Moose&#34;&gt;Moose&lt;/a&gt; object system provided a fully-fledged &lt;a href=&#34;https://metacpan.org/pod/Moose::Util::TypeConstraints&#34;&gt;type system&lt;/a&gt; and meta object programming interface (there&amp;rsquo;s also &lt;a href=&#34;https://metacpan.org/pod/MooseX::Method::Signatures&#34;&gt;MooseX::Method::Signatures&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers treat hashes and arrays as &amp;ldquo;secure&amp;rdquo; data types &amp;hellip; this is the Perl standard. You&amp;rsquo;re not expected to use it, you have to, as you don&amp;rsquo;t have any other choice. This security mess is a fundamental part of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel starts by describing taint mode and claims that hashes are so secure, hash keys bypass Perl&amp;rsquo;s taint check. It&amp;rsquo;s true that hash keys are never considered tainted. This is documented in &lt;a href=&#34;https://perldoc.perl.org/perlsec.html#Taint-mode&#34;&gt;perlsec&lt;/a&gt; and discussed in depth in Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt;. But it&amp;rsquo;s not because hashes are assumed to be secure, it&amp;rsquo;s because hash keys aren&amp;rsquo;t full scalar values. He never explains his claim as to why arrays are considered secure.&lt;/p&gt;

&lt;p&gt;Perl&amp;rsquo;s &lt;code&gt;ref&lt;/code&gt; function is a reliable and secure way to determine the data type of a reference. Arguments passed to functions are always passed as an array of scalars via &lt;code&gt;@_&lt;/code&gt;. There is no doubt, no ambiguity. It&amp;rsquo;s not required security-wise, but if you want to use them you can use function signatures, types and meta-object programming in Perl. They&amp;rsquo;ve been available for years.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I felt all of these points will go unnoticed without an extreme example of Perl&amp;rsquo;s absurdity. So I found an extreme example. One that will clearly show the ridiculousness nature of the language.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the vulnerable code, from an example CGI application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;upload( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt; )) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt; );
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$file&amp;gt;&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_&amp;#34;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The issue with this code is that if &lt;code&gt;$file&lt;/code&gt; has the value of &lt;code&gt;ARGV&lt;/code&gt;, the diamond operator &lt;code&gt;&amp;lt;$file&amp;gt;&lt;/code&gt; will call &lt;code&gt;open&lt;/code&gt; on every value in &lt;code&gt;@ARGV&lt;/code&gt;. CGI populates &lt;code&gt;@ARGV&lt;/code&gt; with the HTTP query parameters which creates the vulnerability. So if the HTTP query parameter is &lt;code&gt;ls|&lt;/code&gt;, Perl will execute &lt;code&gt;ls&lt;/code&gt;. If the CGI program was running in taint mode, this attack vector would fail. Regardless, it&amp;rsquo;s a well-understood risk, the PLEAC project&amp;rsquo;s Perl &lt;a href=&#34;http://ramenlabs.com/pleac-pdf/pleac_perl.pdf&#34;&gt;recommendations&lt;/a&gt; from 1999 shows how to properly parse file descriptors in CGI parameters (ex 19.4). O&amp;rsquo;Reilly&amp;rsquo;s &lt;a href=&#34;http://www.oreilly.com/openbook/cgi/ch07_04.html&#34;&gt;CGI Programming on the Web&lt;/a&gt; by Shishir Gundavaram recommended parsing metacharacters like &lt;code&gt;|&lt;/code&gt; from user input, which also prevents this attack. That book was published in 1996.&lt;/p&gt;

&lt;p&gt;The piping open behavior is well documented in &lt;a href=&#34;https://perldoc.perl.org/functions/open.html&#34;&gt;open&lt;/a&gt;, &lt;a href=&#34;https://perldoc.perl.org/perlipc.html#Using-open%28%29-for-IPC&#34;&gt;perlipc&lt;/a&gt; and &lt;a href=&#34;https://perldoc.perl.org/perlsec.html&#34;&gt;perlsec&lt;/a&gt;. Chapter 2 of &lt;a href=&#34;http://masteringperl.org&#34;&gt;Mastering Perl&lt;/a&gt; also covers it. It&amp;rsquo;s a useful feature when you want to efficiently process a lot of data from an external command: just like a shell pipe, it creates a socket between the Perl program and the external binary, avoiding the need to read the entire output into memory at once.&lt;/p&gt;

&lt;p&gt;Netanel also identified a SQL injection vulnerability in Bugzilla. The weakness was caused by a poorly-coded function which failed to properly validate input used in a dynamic SQL query. The developers should have used the safer pass-by-parameter &lt;a href=&#34;https://metacpan.org/pod/DBI&#34;&gt;DBI&lt;/a&gt; &lt;code&gt;prepare&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;In both cases Perl provided methods for securely parsing untrusted input, but the developers didn&amp;rsquo;t use them.&lt;/p&gt;

&lt;h3 id=&#34;claim-2-bugzilla-cgi-pm-are-representative-of-idiomatic-perl&#34;&gt;Claim 2: Bugzilla &amp;amp; CGI.pm are representative of idiomatic Perl&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Like every other Perl project, Bugzilla is heavily using functions that treat scalar and non-scalar argument types very differently.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel is referring to this code from his talk, which uses the argument type to decide what to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; {
  $arg1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_; &lt;span style=&#34;color:#75715e&#34;&gt;# Get an argument&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ref $arg1 &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HASH&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $arg1{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $arg1;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aside from the fact that Netanel&amp;rsquo;s code contains a big error which means it would never work, the claim that every other Perl project is coded in this way is preposterous. &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; is a popular Perl project with over 20,000 lines of code. Can you guess how frequently Dist::Zilla uses the construct Netanel describes? A quick grep of the code shows zero instances. Bugzilla was developed in 1998, it is not an example of &lt;a href=&#34;http://modernperlbooks.com/books/modern_perl_2014/index.html&#34;&gt;Modern Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding CGI.pm, I can&amp;rsquo;t say it better than the official &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CGI.pm HAS BEEN REMOVED FROM THE PERL CORE&lt;/p&gt;

&lt;p&gt;The rationale for this decision is that CGI.pm is no longer considered good practice for developing web applications, including quick prototyping and small web scripts. There are far better, cleaner, quicker, easier, safer, more scalable, more extensible, more modern alternatives available at this point in time.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;CGI.pm documentation&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;claim-3-perl-doesn-t-improve&#34;&gt;Claim 3: Perl doesn&amp;rsquo;t improve&lt;/h3&gt;

&lt;p&gt;Things get interesting during the Q&amp;amp;A section of the talk when an audience member says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use Perl for almost every module that we have at work, and it works really fine. I don&amp;rsquo;t know why you are picking Perl as a language to attack. It&amp;rsquo;s a really old language, and every language you can pick has problems, it doesn&amp;rsquo;t mean that &amp;hellip; you have to stop using it.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Audience Member, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Netanel responds:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C got criticized and it improved. PHP got criticized and it improved. Why can&amp;rsquo;t Perl be criticized too? &amp;hellip; why don&amp;rsquo;t they improve the language?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The funny thing is Perl is improving all the time. Every year there is a major release of Perl which brings new features and enhancements to the language (&lt;a href=&#34;https://perldoc.perl.org/index-history.html&#34;&gt;history&lt;/a&gt;). Last year&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/perldelta.html&#34;&gt;release&lt;/a&gt; included a new operator, the &lt;a href=&#34;http://www.effectiveperlprogramming.com/2015/05/use-perl-5-22s-operator-for-safe-command-line-handling/&#34;&gt;double diamond&lt;/a&gt; &lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; which disables the piping open behavior shown earlier. CGI.pm was removed from Perl&amp;rsquo;s core modules list in May 2014. Both of those occurrences predate Netanel&amp;rsquo;s talk.&lt;/p&gt;

&lt;p&gt;Instead of waiting for a major release milestone, the Perl development team can fix critical security issues in a minor release if needed (for example see &lt;a href=&#34;https://perldoc.perl.org/perl5163delta.html&#34;&gt;5.16.3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Perl also has a strong toolchain for evaluating Perl code. &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; is a linter that reviews Perl code against recommended coding practices. There is even a &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::PreventSQLInjection&#34;&gt;policy&lt;/a&gt; to check for potential SQL injection vulnerabilities.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t always live in the fear of not knowing what data type you are trying to handle &amp;hellip; not trusting your hashes, not trusting your arrays, what&amp;rsquo;s next, not trusting your own code?&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Netanel Rubin, The Perl Jam 2&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone who has years of experience writing professional Perl code, and working with Perl programmers, I do not recognize this experience at all. All Netanel has shown is an attack on some example code from a neglected module and a SQL injection bug in a legacy application.&lt;/p&gt;

&lt;p&gt;Is the Ruby language to blame for a vulnerability in &lt;a href=&#34;http://arstechnica.com/business/2012/03/hacker-commandeers-github-to-prove-vuln-in-ruby/&#34;&gt;Ruby-on-Rails&lt;/a&gt;? Is PHP insecure because over 950 &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=wordpress&#34;&gt;exploits&lt;/a&gt; were found for WordPress? This isn&amp;rsquo;t a dynamic language issue either; in &lt;a href=&#34;http://danluu.com/empirical-pl&#34;&gt;Static vs. dynamic languages: a literature review&lt;/a&gt; author Dan Luu found little evidence that statically typed languages were safer than dynamic ones.&lt;/p&gt;

&lt;p&gt;Anytime you fail to adequately parse untrusted input you&amp;rsquo;re going to have a bad day. Blaming Perl for developers&amp;rsquo; bad code is like blaming the Alphabet for being turned into 50 Shades of Grey.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Port scanning with Perl, Part II</title>
      <link>http://localhost:1313/article/188/2015/8/15/Port-scanning-with-Perl--Part-II/</link>
      <pubDate>Sat, 15 Aug 2015 15:05:31 +0000</pubDate>
      
      <guid>http://localhost:1313/article/188/2015/8/15/Port-scanning-with-Perl--Part-II/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://perltricks.com/article/183/2015/7/20/Port-scanning-with-Perl&#34;&gt;part I&lt;/a&gt; of this article, I showed how to develop a basic forking &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d&#34;&gt;port scanner&lt;/a&gt; with Perl. In this article, I&amp;rsquo;ll add some enhancements to make this a truly useful tool.&lt;/p&gt;

&lt;h3 id=&#34;scan-a-range-of-ports&#34;&gt;Scan a range of ports&lt;/h3&gt;

&lt;p&gt;The first feature I want to add is the ability to scan user-defined port ranges, instead of the default list of named ports. Because I&amp;rsquo;m using &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to parse command line arguments, I can add &lt;code&gt;range&lt;/code&gt; to the parameter options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;GetOptions (
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip=s&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_ip,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_range,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h|help|?&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { pod2usage(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The port processing &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d#file-port_scanner-L53-L57&#34;&gt;code&lt;/a&gt; becomes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# use named ports if no range was provided&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shuffle &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($port_range)
  {
    map { $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{port} }
      grep { $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name} &lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^unknown$/&lt;/span&gt;
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{proto} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; $protocol } keys %port_directory;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($min, $max) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $port_range &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/([0-9]+)-([0-9]+)/&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port-range must be formatted like this: 100-1000\n&amp;#34;&lt;/span&gt;;
    $min&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$max;
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I check for the presence of the &lt;code&gt;$port_range&lt;/code&gt; variable, and if it&amp;rsquo;s present I try to parse the minimum and maximum ports using a regex capture. I like this code pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($min, $max) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $port_range &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/([0-9]+)-([0-9]+)/&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port-range must be formatted like this: 100-1000\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because either the port range will be successfully parsed into &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt; or an exception with be thrown. By passing a string ending in a newline to &lt;code&gt;die&lt;/code&gt;, it won&amp;rsquo;t print out a line reference, which makes for cleaner &amp;ldquo;usage&amp;rdquo; style messages.&lt;/p&gt;

&lt;h3 id=&#34;tune-processes-and-frequency&#34;&gt;Tune processes and frequency&lt;/h3&gt;

&lt;p&gt;The simple &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d&#34;&gt;port scanner&lt;/a&gt; initiates 50 processes, divides the ports to be scanned evenly between all processes, with each process sending one request per second. There are a few issues with this. Firstly if the user wants to scan all 65,535 ports the program will run for at least 20 minutes, which is quite slow. Secondly, some hosts have dynamic firewalls which will start dropping packets if they detect a port scan, so the user may want to be stealthy and slow down the scan speed &lt;em&gt;further&lt;/em&gt;. Ideally then, we should let the user define how many processes to run and how much to delay between each sent packet.&lt;/p&gt;

&lt;p&gt;To capture those arguments, I can add &lt;code&gt;procs&lt;/code&gt; and &lt;code&gt;delay&lt;/code&gt; to &lt;code&gt;GetOptions&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;GetOptions (
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delay=f&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $delay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip=s&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_ip,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_range,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;procs=i&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $procs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h|help|?&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { pod2usage(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code does a few neat things: by using the &lt;code&gt;=i&lt;/code&gt; definition, &lt;code&gt;GetOptions&lt;/code&gt; will do integer type checking for the number of processors. Likewise &lt;code&gt;=f&lt;/code&gt; will enforce a floating-point number type. The other thing this code does is declare and set a default value for the variables within the &lt;code&gt;GetOptions&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To support &lt;code&gt;sleep&lt;/code&gt; for floating point seconds, I need to import the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; module (part of the Perl core):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the forking &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d#file-port_scanner-L68-L91&#34;&gt;code&lt;/a&gt; can become:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$procs)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ports_to_scan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; splice @ports, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $batch_size;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to fork!\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; defined ($parent);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($parent)
  {
    push(@child_pids, $parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# child waits until the parent signals to continue&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $continue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  local $SIG{CONT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { $continue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; ($continue) {}

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_port (@ports_to_scan)
  {
    sleep($delay);
    send_packet($protocol, $target_port, $flags);
  }
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# exit child&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the scanner will now fork &lt;code&gt;$procs&lt;/code&gt; number of processes, and sleep &lt;code&gt;$delay&lt;/code&gt; seconds between each sent packet. This should give users the ability to fine-tune the frequency of packets sent and the run time of the scan.&lt;/p&gt;

&lt;h3 id=&#34;reporting&#34;&gt;Reporting&lt;/h3&gt;

&lt;p&gt;The simple scanner prints out every scanned port and the port status. This can be too much information - in most cases the user is interested in vulnerable open ports and doesn&amp;rsquo;t care about filtered or closed ones. On the other hand, the output is missing key information that would be required for a security audit: datetime of execution, program version, parameters used, overall runtime etc. So I need to add this information to the output.&lt;/p&gt;

&lt;p&gt;To calculate the program runtime duration, and print the start datetime I can use the &lt;a href=&#34;https://metacpan.org/pod/Time::Piece&#34;&gt;Time::Piece&lt;/a&gt; module. The module is part of core Perl so there is no need to install it, plus you can do &lt;a href=&#34;http://perltricks.com/article/59/2014/1/10/Solve-almost-any-datetime-need-with-Time--Piece&#34;&gt;almost anything&lt;/a&gt; with it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;

&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $duration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $end_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $start_time;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you import Time::Piece it overrides the localtime and gmtime built in functions to construct Time::Piece objects. Subtracting the start and end times returns a Time::Seconds object which is our runtime duration. Both object types nicely format when printed, so that&amp;rsquo;s all we need to do here. Simple!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll add a &lt;code&gt;verbose&lt;/code&gt; option to &lt;code&gt;GetOptions&lt;/code&gt;. If this is present, we&amp;rsquo;ll print out all port results, else just the open ones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;GetOptions (
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delay=f&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $delay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip=s&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_ip,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_range,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;procs=i&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $procs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $verbose,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h|help|?&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { pod2usage(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how for boolean parameters no type declaration is given to &lt;code&gt;GetOptions&lt;/code&gt; (e.g. no &lt;code&gt;=i&lt;/code&gt;). This means that on the command line the user just has to type either &lt;code&gt;--verbose&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; and &lt;code&gt;$verbose&lt;/code&gt; will be given a true value.&lt;/p&gt;

&lt;p&gt;Instead of printing out port results in the &lt;code&gt;read_packet()&lt;/code&gt; &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d#file-port_scanner-L145&#34;&gt;subroutine&lt;/a&gt;, I&amp;rsquo;m going to return the port number and status back to the calling code and defer the printing until later. This simple change has a two benefits: it&amp;rsquo;s more flexible: I can add more packet parsing routines to &lt;code&gt;read_packet()&lt;/code&gt; without having to add multiple print statements and I can sort the port scan results before printing them. The program can scan ports in a random order but the output should be orderly!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (sort { $a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $b } keys %port_scan_results)
{
  printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %5u %-15s %-40s\n&amp;#34;&lt;/span&gt;, $_, $port_scan_results{$_}, ($port_directory{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_/$protocol&amp;#34;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $port_scan_results{$_} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/open/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $verbose;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach has one downside - the results will not be printed to the terminal until all responses have been received or the packet capture times out. What would be &lt;em&gt;really&lt;/em&gt; nice would be to print the sorted results as they are received. For example if we were scanning ports 1 to 100 and had received responses for ports 1 through 10, print those results and wait until we receive a response for port 11. This improvement is left as an exercise for the reader (pull requests welcome!).&lt;/p&gt;

&lt;h3 id=&#34;support-different-types-of-scan&#34;&gt;Support different types of scan&lt;/h3&gt;

&lt;p&gt;The simple scanner does a TCP &amp;ldquo;SYN&amp;rdquo; scan. This is a good default, but there are many different &lt;a href=&#34;http://nmap.org/book/man-port-scanning-techniques.html&#34;&gt;types&lt;/a&gt; of port scans we can undertake, which can yield better results against different systems. For example in my testing I&amp;rsquo;ve found the TCP SYN scan relatively useless against Chromebooks and mobile devices.&lt;/p&gt;

&lt;p&gt;As with the other updates, I&amp;rsquo;m going to add new parameters to the &lt;code&gt;GetOptions&lt;/code&gt; function. I want to capture the protocol to use (e.g. TCP, UDP, ICMP) and any flags that should be added to the sent packet. These two variables should give us enough flexibility to support a variety of scans.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;GetOptions (
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delay=f&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $delay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip=s&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_ip,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_range,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;procs=i&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $procs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt;),
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @flags,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $verbose,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h|help|?&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { pod2usage(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might be wondering how it&amp;rsquo;s possible to read the &lt;code&gt;flag&lt;/code&gt; string parameter into the &lt;code&gt;@flags&lt;/code&gt; array. In this scenario, I want to be able to accept one or more flag arguments, so the user can pass them to the port scanner like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;port_scanner &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flag fin &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flag psh &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;flag urg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or more tersely:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;port_scanner &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f fin &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f psh &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f urg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These values will be captured into &lt;code&gt;@flags&lt;/code&gt;. By the way, those three flags are part of a TCP port scanning technique called the &amp;ldquo;Xmas&amp;rdquo; scan. To process the flags I&amp;rsquo;ll use this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flags are for tcp only!\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $protocol &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; @flags;
$flags[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;syn&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @flags &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; $protocol &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;udp&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; } @flags };
$flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {} &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; exists $flags&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{null};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Flags can only be passed for TCP scans, so the first thing thing I&amp;rsquo;m checking here is if we received any flags and the requested protocol is &lt;em&gt;not&lt;/em&gt; TCP, which will raise an exception. The code then reads &lt;code&gt;@flags&lt;/code&gt; into a hashref, defaulting to SYN if the protocol is TCP and no flags were passed. We also support a special type of scan the &amp;ldquo;null&amp;rdquo; scan where no flags are passed at all.&lt;/p&gt;

&lt;p&gt;Now the &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d#file-port_scanner-L125-L139&#34;&gt;send_packet&lt;/a&gt; subroutine can be updated to handle different protocols and scans:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_packet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($protocol, $target_port, $flags) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  Net::RawIP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({ ip &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      saddr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $local_ip,
                      daddr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $target_ip,
                    },
                    $protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $local_port,
                      dest   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $target_port,
                      %$flags,
                    },
                  })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The updated subroutine transparently passes the arguments received to &lt;a href=&#34;https://metacpan.org/pod/Net::RawIP&#34;&gt;Net::RawIP&lt;/a&gt;, which handles the details. The remaining ip and port variables are globals and already defined by this point in the code.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d#file-port_scanner-L145-L171&#34;&gt;read_packet&lt;/a&gt; subroutine also needs to be updated to parse different packet types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_packet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::Ethernet::strip($raw_data);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip_packet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::IP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($ip_data);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($ip_packet&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{proto} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tcp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::TCP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode(NetPacket::IP::strip($ip_data));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{src_port};

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{flags} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SYN)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ($port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{flags} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; RST)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ($port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ($port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($ip_packet&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{proto} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $udp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::UDP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode(NetPacket::IP::strip($ip_data));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $udp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{src_port};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ($port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received unknown packet protocol: $ip_packet-&amp;gt;{proto}\n&amp;#34;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we receive a TCP packet, the code examines the packet flags to determine the status of the port. A port is considered open if we receive an ACK/SYN response, which can be tested for by checking the presence of the &lt;code&gt;SYN&lt;/code&gt; flag. An &lt;code&gt;RST&lt;/code&gt; flag indicates the port is closed. Note that to test for presence of the flag we use bitwise &lt;code&gt;&amp;amp;&lt;/code&gt; against the flag constants exported by &lt;a href=&#34;https://metacpan.org/pod/NetPacket::TCP&#34;&gt;NetPacket::TCP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;UDP is a simpler affair as it doesn&amp;rsquo;t support flags. If we receive a UDP datagram, we treat the port as open.&lt;/p&gt;

&lt;h4 id=&#34;icmp&#34;&gt;ICMP&lt;/h4&gt;

&lt;p&gt;Even though we&amp;rsquo;re not sending ICMP messages, we may receive them from the target host. Sometimes hosts return an ICMP message of type &amp;ldquo;destination port unreachable&amp;rdquo; instead of replying with a TCP/UDP packet. The ICMP message will include the IP header of the sender&amp;rsquo;s original message, but IP headers do not include destination ports, so how could we determine the destination port from the ICMP response? One way could be to include the destination port in the data portion of the IP packet. Once we receive the ICMP response, we parse out the IP header and extract the destination port from the data component of the message.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not all we can do with ICMP responses. An ICMP response can also indicate that a dynamic firewall has started dropping our packets as we&amp;rsquo;ve exceed a rate-limit. It would be nice if an ICMP message was received, the port scanner automatically increased the delay between sending messages. To communicate this update to the sub-processes, we could install a signal handler. In order to &amp;ldquo;see&amp;rdquo; ICMP message responses, the pcap filter would need to be updated to remove the port clause. This introduces a new problem: we may receive messages from the target host that are unrelated to our scan. For now I&amp;rsquo;ve avoided handling ICMP.&lt;/p&gt;

&lt;h3 id=&#34;running-the-new-port-scanner&#34;&gt;Running the new port scanner&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s it! The full code can be found &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/port_scanner&#34;&gt;here&lt;/a&gt;. Now let&amp;rsquo;s see some examples of how to run the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# tcp syn scan of common ports, 100 processes sending packets every 0.25 sec:&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# same as before but print all closed and filtered ports too&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v

&lt;span style=&#34;color:#75715e&#34;&gt;# udp scan&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t udp

&lt;span style=&#34;color:#75715e&#34;&gt;# tcp fin scan&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f fin

&lt;span style=&#34;color:#75715e&#34;&gt;# tcp null scan&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f null

&lt;span style=&#34;color:#75715e&#34;&gt;# tcp xmas scan&lt;/span&gt;
$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f fin &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f psh &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f urg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve built something that&amp;rsquo;s beginning to resemble a professional tool: a customizable, high performance TCP/UDP port scanner with useful reporting. By developing our own solution and not relying on tools like nmap, we can achieve a deeper understanding of how networking works and the skills required to scan a host.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Port scanning with Perl</title>
      <link>http://localhost:1313/article/183/2015/7/20/Port-scanning-with-Perl/</link>
      <pubDate>Mon, 20 Jul 2015 13:14:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/183/2015/7/20/Port-scanning-with-Perl/</guid>
      <description>

&lt;p&gt;My recent infosec articles have focused on livehost discovery on a network. Inspired by Douglas Berdeaux&amp;rsquo;s &lt;a href=&#34;https://www.packtpub.com/networking-and-servers/penetration-testing-perl-raw&#34;&gt;Penetration Testing with Perl&lt;/a&gt;, I&amp;rsquo;ve assembled a potent &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl&#34;&gt;collection&lt;/a&gt; of livehost scanners including ARP, echo, SMB and Netbios. Each of these have different strengths and weaknesses. Regardless, once you&amp;rsquo;ve discovered a livehost and you want to probe for vulnerabilities, a port scan is the logical next step.&lt;/p&gt;

&lt;h3 id=&#34;port-scanning-explained&#34;&gt;Port Scanning Explained&lt;/h3&gt;

&lt;p&gt;An IP address identifies the network location of a computer, but once the computer receives a UDP datagram or TCP packet it then needs to decide where to route it internally within itself. Every TCP/UDP parcel contains a &amp;ldquo;destination port&amp;rdquo; field, which is where the computer will attempt to deliver the packet/datagram. Every computer has 65,535 available TCP and UDP ports for services to use. Many are already assigned for common services, like 22 for SSH, 25 for SMTP and 80 for HTTP.&lt;/p&gt;

&lt;p&gt;Port scanning is the act of probing the ports of another computer to understand which ports are &amp;ldquo;open&amp;rdquo; (have services listening on them), &amp;ldquo;filtered&amp;rdquo; (prevented access by a firewall) and &amp;ldquo;closed&amp;rdquo; (have no services listening on them). Once the attacker has an idea of which ports are open, they can begin probing those services for weaknesses. For example, if I ran a port scan against a remote server and found port 25 SMTP to be open, I could try a number of attacks against it. I could telnet to the livehost&amp;rsquo;s IP address on port 25, and attempt to discover a username on the system using the &amp;lsquo;VRFY&amp;rsquo; command. Once I had a username, I could proceed with a brute force password cracking attempt - possibly on port 22 or against a web application if it was running on the host. I may not even need a username and password if I succeed in a buffer overflow attack against the email service listening on port 25.&lt;/p&gt;

&lt;h3 id=&#34;port-scanning-with-perl&#34;&gt;Port scanning with Perl&lt;/h3&gt;

&lt;p&gt;A basic port scanner needs to be able to take an IP address of a livehost, enumerate a list of ports, send a packet to each port on the livehost and listen and decode the responses. Perl has a number of modules that make this easier. I&amp;rsquo;m going to step through each requirement one by one.&lt;/p&gt;

&lt;h4 id=&#34;parsing-command-line-arguments&#34;&gt;Parsing command line arguments&lt;/h4&gt;

&lt;p&gt;We can use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Pod::Usage&#34;&gt;Pod::Usage&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Usage;

GetOptions (
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help|?&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { pod2usage(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_ip,
);

&lt;span style=&#34;color:#75715e&#34;&gt;# validate required args are given&lt;/span&gt;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing --ip parameter, try --help\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $target_ip;

&lt;span style=&#34;color:#75715e&#34;&gt;__END__
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=head1 NAME
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;port_scanner - a concurrent randomized tcp/udp port scanner written in Perl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=head1 SYNOPSIS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;port_scanner [options]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; Options:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --ip,     -i   ip address to scan e.g. 10.30.1.52
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  --help,   -h   display this help text&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;GetOptions&lt;/code&gt; function parses command line arguments and assigns them to variables. Getop::Long can handle shortened option names so &lt;code&gt;--ip 10.0.1.5&lt;/code&gt; and &lt;code&gt;-i 10.0.1.5&lt;/code&gt; will both assign the IP address to the variable &lt;code&gt;$target_ip&lt;/code&gt;. If the program receives &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;-?&lt;/code&gt; it will print out the documentation using &lt;code&gt;pod2usage&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;discovering-the-local-ip-and-port&#34;&gt;Discovering the local IP and port&lt;/h4&gt;

&lt;p&gt;To send an IP packet, we need both the destination and the local IP address. We&amp;rsquo;ll also need a local port.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Address::IP::Local;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; IO::Socket::INET;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_ip   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Address::IP::Local&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;public;

&lt;span style=&#34;color:#75715e&#34;&gt;# find a random free port by opening a socket using the protocol&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IO::Socket::INET&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(Proto &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt;, LocalAddr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $local_ip);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $socket_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $socket&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sockport();
  $socket&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;close;
  $socket_port;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get the local ip address, I call the &lt;code&gt;public&lt;/code&gt; method provided by the &lt;a href=&#34;https://metacpan.org/pod/Net::Address::IP::Local&#34;&gt;Net::Address::IP::Local&lt;/a&gt; module. Easy! Finding a local port that is available is more involved. In theory any unnamed port should be available, but there might be another service already using it. Instead I create a new socket object using &lt;a href=&#34;https://metacpan.org/pod/IO::Socket::INET&#34;&gt;IO::Socket::INET&lt;/a&gt; without specifying a local port. Under the hood, this attempts to open a socket on port zero, and the operating system will then automatically assign an available port to the socket (zero is reserved). This has the added benefit of randomizing the local port used by the scanner every time it runs. I then save the port number the socket was opened on, and close the socket.&lt;/p&gt;

&lt;h4 id=&#34;getting-a-list-of-ports-to-scan&#34;&gt;Getting a list of ports to scan&lt;/h4&gt;

&lt;p&gt;For our simple scanner, I&amp;rsquo;ll focus on scanning named ports, that is port numbers pre-assigned to services by the &lt;a href=&#34;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&#34;&gt;IANA&lt;/a&gt;. Fortunately for us, the developers behind the popular NMAP tool have already assembled a text &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/data/nmap-services.txt&#34;&gt;file&lt;/a&gt; of named ports, and I&amp;rsquo;ll use this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; List::Util &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shuffle&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %port_directory;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data/nmap-services.txt&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error reading data/nmap-services.txt $!\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$port_file&amp;gt;&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^#/&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# skip comments&lt;/span&gt;
  chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($name, $number_protocol, $probability, $comments) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($port, $proto) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\//&lt;/span&gt;, $number_protocol;

  $port_directory{$number_protocol} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    port        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $port,
    proto       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $proto,
    name        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $name,
    probability &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $probability,
    comments    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $comments,
  };free
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shuffle &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    map { $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{port} }
      grep { $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name} &lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^unknown$/&lt;/span&gt;
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $port_directory{$_}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{proto} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt; } keys %port_directory;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code starts by importing the &lt;code&gt;shuffle&lt;/code&gt; function from &lt;a href=&#34;https://metacpan.org/pod/List::Util&#34;&gt;List::Util&lt;/a&gt;, which I use later to randomize the order of the list of ports. I then open a filehandle to the nmap-services text file, loop through it building the &lt;code&gt;%port_directory&lt;/code&gt; hash. Finally I loop through the the port directory with &lt;code&gt;grep&lt;/code&gt;, extracting all the tcp ports not labeled &amp;ldquo;unknown&amp;rdquo;, use &lt;code&gt;map&lt;/code&gt; to extract the port number from the hash, shuffling the port numbers to randomize their entry into &lt;code&gt;@ports&lt;/code&gt; (shuffle may be unnecessary in newer versions of Perl as hash key order is randomized anyway).&lt;/p&gt;

&lt;h4 id=&#34;sending-packets-and-listening-for-responses&#34;&gt;Sending packets and listening for responses&lt;/h4&gt;

&lt;p&gt;We need to send packets and listen for responses simultaneously, because if we send the packets first and &lt;em&gt;then&lt;/em&gt; listen for packets, we might have missed some responses in the interim. To do this I use &lt;code&gt;fork&lt;/code&gt; to create child processes for sending packets, and use the parent process to listen for responses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Pcap;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; POSIX &lt;span style=&#34;color:#e6db74&#34;&gt;qw/WNOHANG ceil/&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# apportion the ports to scan between processes&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $procs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $batch_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ceil(@ports &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; $procs);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %total_ports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filtered&amp;#39;&lt;/span&gt; } @ports; &lt;span style=&#34;color:#75715e&#34;&gt;# for reporting&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @child_pids;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$procs)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ports_to_scan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; splice @ports, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $batch_size;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unable to fork!\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; defined ($parent);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($parent)
  {
    push(@child_pids, $parent);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# child waits until the parent signals to continue&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $continue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  local $SIG{CONT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { $continue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; ($continue) {}

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_port (@ports_to_scan)
  {
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    send_packet($target_port);
  }
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# exit child&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# setup parent packet capture&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $device_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pcap_lookupdev(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $err);
pcap_lookupnet($device_name, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $net, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mask, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$err);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pcap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pcap_open_live($device_name, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$err);
pcap_compile(
  $pcap,
  &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $filter,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(src net $target_ip) &amp;amp;&amp;amp; (dst port $local_port)&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  $mask
);
pcap_setfilter($pcap,$filter);

&lt;span style=&#34;color:#75715e&#34;&gt;# signal the child pids to start sending&lt;/span&gt;
kill CONT &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_ &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @child_pids;

&lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; (waitpid(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, WNOHANG) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# until all children exit&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $packet_capture &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pcap_next_ex($pcap,&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %header,&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $packet);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($packet_capture &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  {
    read_packet($packet);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($packet_capture &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  {
    warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libpcap errored while reading a packet\n&amp;#34;&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a lot of code to process, but l&amp;rsquo;m going to cover the broad strokes. The code forks 50 child processes and assigns a batch of ports to each child. I install a signal handler for the &lt;code&gt;CONT&lt;/code&gt; signal in each child, and pause the child processes until that signal is received. This is to stop the children from going ahead and firing off packets that the parent is not ready to capture. Once all the children have been created, the parent process sets up a packet capture object using &lt;a href=&#34;https://metacpan.org/pod/Lib::Pcap&#34;&gt;Lib::Pcap&lt;/a&gt;. The capture object is given a filter for the &lt;code&gt;$target_ip&lt;/code&gt; and the &lt;code&gt;$local_port&lt;/code&gt; which we discovered earlier.&lt;/p&gt;

&lt;p&gt;The parent then signals the children processes using &lt;code&gt;kill&lt;/code&gt; and the children begin sending packets using &lt;code&gt;send_packet&lt;/code&gt; (defined below). Finally the parent process starts a loop listening for packets using &lt;code&gt;waitpid&lt;/code&gt; to determine when all of the children have finished sending their packets and exited. During the loop, the parent calls &lt;code&gt;read_packet&lt;/code&gt; (defined below) every time it receives a new packet.&lt;/p&gt;

&lt;p&gt;You might be wondering what the constant &lt;code&gt;WNOHANG&lt;/code&gt; is for. When &lt;code&gt;waitpid&lt;/code&gt; is called with -1, it attempts to reap any terminated child processes. In the excellent &lt;a href=&#34;http://www.amazon.com/Network-Programming-Perl-Lincoln-Stein/dp/0201615711&#34;&gt;Network Programming with Perl&lt;/a&gt;, Lincoln Stein explains there are three scenarios which can cause &lt;code&gt;waitpid&lt;/code&gt; to hang or lose track of child processes; if a child process is terminated or restarted by a signal, if two child processes terminate at virtually the same time or if the parent process inadvertently creates new children via system calls. &lt;code&gt;WNOHANG&lt;/code&gt; protects against these scenarios to ensure all child processes will be properly reaped by the parent process.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at the &lt;code&gt;send_packet&lt;/code&gt; subroutine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::RawIP;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_packet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($target_port) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  Net::RawIP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;({ ip &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      saddr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $local_ip,
                      daddr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $target_ip,
                    },
                    tcp &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $local_port,
                      dest   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $target_port,
                      syn &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                    },
                  })&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code uses the much under-appreciated &lt;a href=&#34;https://metacpan.org/pod/Net::RawIP&#34;&gt;Net::RawIP&lt;/a&gt; module to craft TCP packets and send them to our target destination. We set the SYN flag to 1 to trigger the beginning of a three-way TCP connection which we will never complete. This is a stealthy way to discover ports - by not completing the handshake our requests will not be logged unless the target has been configured to capture this data.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;read_packet&lt;/code&gt; subroutine is a bit more involved:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; NetPacket::Ethernet;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; NetPacket::IP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; NetPacket::TCP;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_packet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($raw_data) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::Ethernet::strip($raw_data);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip_packet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::IP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($ip_data);

  &lt;span style=&#34;color:#75715e&#34;&gt;# is it TCP&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($ip_packet&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{proto} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tcp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NetPacket::TCP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode(NetPacket::IP::strip($ip_data));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{src_port};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exists $port_directory{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$port/tcp&amp;#34;&lt;/span&gt;}
      ? $port_directory{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$port/tcp&amp;#34;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}
      : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{flags} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; SYN)
    {
      printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %5d %-20s %-20s\n&amp;#34;&lt;/span&gt;, $port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;, $port_name;
      $total_ports{$port} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{flags} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; RST)
    {
      printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %5d %-20s %-20s\n&amp;#34;&lt;/span&gt;, $port, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;, $port_name;
      $total_ports{$port} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use the &lt;a href=&#34;https://metacpan.org/pod/NetPacket&#34;&gt;NetPacket&lt;/a&gt; distribution to parse the incoming packets. The first check &lt;code&gt;if ($ip_packet-&amp;gt;{proto} == 6)&lt;/code&gt; is to check that we&amp;rsquo;re processing a TCP packet (each protocol has a number - see &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers&#34;&gt;list&lt;/a&gt;). The code then parses the TCP packet and looks up the port name in our &lt;code&gt;%port_directory&lt;/code&gt; created earlier. &lt;code&gt;SYN&lt;/code&gt; and &lt;code&gt;RST&lt;/code&gt; are constants exported by &lt;a href=&#34;https://metacpan.org/pod/NetPacket::TCP&#34;&gt;NetPacket::TCP&lt;/a&gt;, which are ANDed against the flags value of the TCP header to identify the type of TCP packet. If we&amp;rsquo;ve received a SYN packet, it looks like the port is open, a RST packet indicates the port is closed.&lt;/p&gt;

&lt;h4 id=&#34;summarizing-the-results&#34;&gt;Summarizing the results&lt;/h4&gt;

&lt;p&gt;Once the port scan has finished, all closed and open ports should have been printed out. But there are also the filtered ports to think about - by definition we&amp;rsquo;ll never receive a response for those. I&amp;rsquo;ve used the &lt;code&gt;%total_ports&lt;/code&gt; hash to track the status of ports. Every port starts as &amp;ldquo;filtered&amp;rdquo;, and is set to &amp;ldquo;open&amp;rdquo; or &amp;ldquo;closed&amp;rdquo; as responses are received. We can then use this data to summarize the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n %d ports scanned, %d filtered, %d closed, %d open\n&amp;#34;&lt;/span&gt;,
  scalar(keys %total_ports),
  scalar(grep { $total_ports{$_} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filtered&amp;#39;&lt;/span&gt; } keys %total_ports),
  scalar(grep { $total_ports{$_} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;   } keys %total_ports),
  scalar(grep { $total_ports{$_} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;     } keys %total_ports);

&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; { pcap_close($pcap) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $pcap }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;END&lt;/code&gt; block executes in the final stage of a Perl program, and closes the packet capture object. This won&amp;rsquo;t execute if the program receives a INT or TERM signal during execution, so I can add signal handlers to ensure Perl shuts down in an orderly way, should a signal be received:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; { $SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $SIG{TERM} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can add this code near the beginning of the program, but the &lt;code&gt;BEGIN&lt;/code&gt; block ensures it will execute early in the program&amp;rsquo;s startup phase, before the main code is executed.&lt;/p&gt;

&lt;h3 id=&#34;putting-it-together&#34;&gt;Putting it together&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve saved the code into a &lt;a href=&#34;https://gist.github.com/dnmfarrell/3db321fc11b0d85f729d&#34;&gt;program&lt;/a&gt;. Now I can run it on the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) port_scanner &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;ip &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0.1.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need to use &lt;code&gt;sudo&lt;/code&gt; because the libpcap requires root privileges to run. The program emits a lot of output, here&amp;rsquo;s a snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
   264 closed               bgmp                
    48 closed               auditd              
  9100 open                 jetdirect 
  2456 closed               altav-remmgt        
  3914 closed               listcrt-port-2      
    42 closed               nameserver          
  1051 closed               optima-vnet         
  1328 closed               ewall               
  4200 closed               vrml-multi-use      
    65 closed               tacacs-ds           
  8400 closed               cvd                 
  8042 closed               fs-agent            
  1516 closed               vpad                
   702 closed               iris-beep           
  1034 closed               zincite-a           
   598 closed               sco-websrvrmg3      

 2258 ports scanned, 25 filtered, 2229 closed, 4 open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the order is randomized, and we&amp;rsquo;ve found 4 open ports. If I run the program with &lt;code&gt;--help&lt;/code&gt; it prints out some useful instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage:
    port_scanner [options]

     Options:
      --ip,     -i   ip address to scan e.g. 10.30.1.52
      --help,   -h   display this help text
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;Our basic port scanner could be improved. For one thing we only scan named ports - it would be nice to accept a range of ports to scan. The supported protocols and TCP flags could also be expanded to yield better results against different machines. The user should also be able to control the number of child processes and the packet frequency to tune the scan to the sensitivities of the target. In part two I&amp;rsquo;ll show how to incorporate these changes and more into a fully-featured port scanner.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Host discovery with broadcast and echo</title>
      <link>http://localhost:1313/article/180/2015/7/6/Host-discovery-with-broadcast-and-echo/</link>
      <pubDate>Mon, 06 Jul 2015 12:27:10 +0000</pubDate>
      
      <guid>http://localhost:1313/article/180/2015/7/6/Host-discovery-with-broadcast-and-echo/</guid>
      <description>

&lt;p&gt;Network host discovery is the attempt to elicit the addresses of the hosts connected to a network. Last week I &lt;a href=&#34;http://perltricks.com/article/179/2015/7/1/Basic-network-hacking-with-Perl&#34;&gt;wrote&lt;/a&gt; about a unicast approach with Perl that enumerated through every address in the network subnet, messaging each address in turn to see if any hosts respond. This week I&amp;rsquo;ve been working on an alternative approach using broadcast and echo.&lt;/p&gt;

&lt;h3 id=&#34;icmp-and-echo&#34;&gt;ICMP and echo&lt;/h3&gt;

&lt;p&gt;Internet Control Message Protocol (ICMP) is a networking protocol used by networking devices to coordinate with each other. ICMP messages contain a type and a code which have predefined &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages&#34;&gt;meanings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An ICMP message of type 8 means echo request and hosts are expected to respond with an ICMP message of type 0 (echo reply). To discover hosts on a network, I can send an echo request to the network and capture the IP address of any echo replies received. Instead of cycling through every possible IP address in the subnet, I can send the echo request to the broadcast IP: &lt;code&gt;255.255.255.255&lt;/code&gt; and the message will automatically be sent to every host on the network.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re running a modern Linux, you can test this out at the command line using &lt;code&gt;ping&lt;/code&gt; (other versions may work without the &amp;ldquo;-b&amp;rdquo; switch):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ ping &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b &lt;span style=&#34;color:#ae81ff&#34;&gt;255.255.255.255&lt;/span&gt;
WARNING: pinging broadcast address
PING &lt;span style=&#34;color:#ae81ff&#34;&gt;255.255.255.255&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;255.255.255.255&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;) bytes of data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes from &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.4&lt;/span&gt;: icmp_seq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ttl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92.9&lt;/span&gt; ms
&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes from &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.4&lt;/span&gt;: icmp_seq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ttl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.04&lt;/span&gt; ms
&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; bytes from &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.4&lt;/span&gt;: icmp_seq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ttl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt; ms
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you see one other host on my network is responding at the address &lt;code&gt;192.168.1.4&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;implementing-echo-in-perl&#34;&gt;Implementing echo in Perl&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to implement ping using nothing but core Perl modules. That is, if Perl is installed, this &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_echo&#34;&gt;script&lt;/a&gt; should work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Socket;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Ping;

&lt;span style=&#34;color:#75715e&#34;&gt;# the checksum must be correct else hosts will ignore the request&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $msg_checksum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Ping&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;checksum(pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C2 n3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C2 n3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, $msg_checksum, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

socket(&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $socket, AF_INET, SOCK_RAW, getprotobyname(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;icmp&amp;#39;&lt;/span&gt;));
setsockopt($socket, SOL_SOCKET, SO_BROADCAST, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
send($socket, $msg, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sockaddr_in(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, inet_aton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;255.255.255.255&amp;#39;&lt;/span&gt;)));
bind($socket,sockaddr_in(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,inet_aton(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)));

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv($socket, &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tmp, $tos, $len, $id, $offset, $tt, $proto, $checksum,
    $src_ip, $dest_ip, $options) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCnnnCCnNNa*&amp;#39;&lt;/span&gt;, $data);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($dest_ip &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4294967295&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# destination != 255.255.255.255&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($port, $peer) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sockaddr_in($addr);
    printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s bytes from %s\n&amp;#34;&lt;/span&gt;, length($data), inet_ntoa($peer);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script starts by importing the &lt;code&gt;Socket&lt;/code&gt; and &lt;code&gt;Net::Ping&lt;/code&gt; modules - both part of the Perl core distribution. It uses the &lt;code&gt;checksum&lt;/code&gt; function from &lt;code&gt;Net::Ping&lt;/code&gt; to calculate the message checksum. The checksum is important because if it is incorrect, hosts will not reply. The script packs the code, the type, checksum and offset into &lt;code&gt;$msg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The script then creates a broadcast socket, and sends the message to the broadcast address (&lt;code&gt;255.255.255.255&lt;/code&gt;). The socket is then bound to the network address, and the script enters a while loop attempting to read data from the socket using &lt;code&gt;recv&lt;/code&gt;. Any received data is unpacked and the packet address saved in &lt;code&gt;$addr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The source and destination IP fields in the unpacked message are stored as 32 bit integers, so the script ignores packets whose destination matches the integer of the broadcast address, as this message was sent by the script. After that the script decodes the packet address and prints the results.&lt;/p&gt;

&lt;p&gt;Running this script on my network, I can see the same host as was returned by &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;livehost_echo                                 
&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; bytes from &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;fingerprinting-hosts&#34;&gt;Fingerprinting hosts&lt;/h3&gt;

&lt;p&gt;The primary issue with this technique is it can only discover hosts that respond to broadcast requests, and many do not. For example Chromebooks, smart phones and Linux machines usually don&amp;rsquo;t reply (OSX machines and many versions of Windows do though). This can be an advantage though: because the response rate to broadcast is different to unicast, the echo script can be used in conjunction with unicast to fingerprint hosts. If a machine responds to a unicast message but not a broadcast, we learn something about the identity of that host. For example if I use the &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_scanner&#34;&gt;livehost_scanner&lt;/a&gt; script on my home network:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) livehost_scanner                                                                                                                  
Gateway IP: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.1&lt;/span&gt;
Starting scan
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;d:7f:81:31:c2
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;c:c5:d4:47:0a:13 (this machine)
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;:e7:d8:00:9a:d5
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.4&lt;/span&gt; e0:ac:cb:5e:d5:da
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.10&lt;/span&gt; cc:3d:82:60:4b:95&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can see that there 2 other livehosts (excluding the router) which show up, but didn&amp;rsquo;t respond to an echo request. The echo script could be adapted to send other types of ICMP messages such as timestamp and subnet mask which can be used to further &lt;a href=&#34;http://www.sans.org/security-resources/idfaq/icmp_misuse.php&#34;&gt;identify&lt;/a&gt; a host.&lt;/p&gt;

&lt;h3 id=&#34;further-thoughts&#34;&gt;Further thoughts&lt;/h3&gt;

&lt;p&gt;The echo script uses the broadcast technique which only works on IPv4 networks. IPv6 networks support multicast instead, but that would require changes to the script. Interestingly the number of potential addresses in a single IPv6 subnet, (I think) renders the unicast technique redundant.&lt;/p&gt;

&lt;p&gt;Another other problem with the echo script is that because it opens a raw socket, it requires root privileges to run. The &lt;code&gt;ping&lt;/code&gt; utility on the other hand is installed with setuserid permissions and runs as root regardless of the user&amp;rsquo;s own privileges.&lt;/p&gt;

&lt;h3 id=&#34;useful-resources&#34;&gt;Useful resources&lt;/h3&gt;

&lt;p&gt;In preparing this script I learned a lot about sockets and network programming. Lincoln Stein&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/Network-Programming-Perl-Lincoln-Stein/dp/0201615711/ref=la_B000APT5P6_1_1&#34;&gt;Network Programming with Perl&lt;/a&gt; was an invaluable resource for understanding sockets and the arcane invocations to use with them. If you&amp;rsquo;re considering working with sockets, the &lt;a href=&#34;https://metacpan.org/pod/IO::Socket&#34;&gt;IO::Socket&lt;/a&gt; module has a cleaner interface than the &lt;a href=&#34;https://metacpan.org/pod/Socket&#34;&gt;Socket&lt;/a&gt; module (and is also part of core). The source code for the excellent &lt;a href=&#34;https://metacpan.org/pod/NetPacket&#34;&gt;NetPacket&lt;/a&gt; distribution was useful in understanding how to parse packets.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic network hacking with Perl</title>
      <link>http://localhost:1313/article/179/2015/7/1/Basic-network-hacking-with-Perl/</link>
      <pubDate>Wed, 01 Jul 2015 12:51:31 +0000</pubDate>
      
      <guid>http://localhost:1313/article/179/2015/7/1/Basic-network-hacking-with-Perl/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been reading &lt;a href=&#34;https://www.packtpub.com/networking-and-servers/penetration-testing-perl-raw&#34;&gt;Penetration Testing With Perl&lt;/a&gt; by Douglas Berdeaux. The book was released late last year, and whilst Dave Cross gave it a fairly scathing &lt;a href=&#34;http://perlhacks.com/2015/02/penetration-testing-perl/&#34;&gt;review&lt;/a&gt; I&amp;rsquo;ve found it interesting so far. I&amp;rsquo;ve been coding and refactoring the scripts presented in the book in a GitHub &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl&#34;&gt;repo&lt;/a&gt; as I go. Here is some of the stuff I&amp;rsquo;ve learned so far.&lt;/p&gt;

&lt;h3 id=&#34;livehost-detection&#34;&gt;Livehost Detection&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re connected to a network, it&amp;rsquo;s helpful to know the IP addresses of all of the other hosts on the same network. This &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/livehost_scanner&#34;&gt;script&lt;/a&gt; starts by detecting the network device name (or accepting it as an argument) and initializing a packet capture object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::ARP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Address::IP::Local;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Frame::Device;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Frame::Dump::Online;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Frame::Simple;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Netmask;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Pcap ();

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $network_device_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @ARGV;

&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($network_device_name)
{
  $network_device_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Pcap::pcap_lookupdev(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $error_msg);
  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pcap device lookup failed &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; ($error_msg &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $error_msg &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; defined $network_device_name;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $device &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Frame::Device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(dev &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $network_device_name);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pcap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Frame::Dump::Online&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  dev &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $network_device_name,
  filter &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arp and dst host &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ip,
  promisc &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  unlinkOnStop &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  timeoutOnNext &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It then detects the gateway IP (the Ip address of the network controller) and sends a broadcast packet to every IP address in the subnet. The packet capture object &lt;code&gt;$pcap&lt;/code&gt; will detect any responses. It then prints out the respondent&amp;rsquo;s IP and MAC address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gateway IP: %s\nStarting scan\n&amp;#34;&lt;/span&gt;, $device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;gatewayIp;

$pcap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip_address (Net::Netmask&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;subnet)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enumerate)
{
  Net::ARP::send_packet(
    $network_device_name,
    $device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ip,
    $ip_address,
    $device&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;mac,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ff:ff:ff:ff:ff:ff&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# broadcast&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;,
  );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; ($pcap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;timeout)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $pcap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $frame &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Frame::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;newFromDump($next);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Address::IP::Local&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;public;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $frame_ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $frame&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ARP}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;srcIp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $frame_mac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $frame&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ref&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ARP}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;src;
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$frame_ip $frame_mac&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; ($local_ip &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; $frame_ip ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; (this machine)&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
  }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; { say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exiting.&amp;#34;&lt;/span&gt;; $pcap&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stop }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I run this script on my home network, I get the following output&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) livehost_scanner
Gateway IP: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.1&lt;/span&gt;
Starting scan
Gateway IP: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.1&lt;/span&gt;
Starting scan
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;d:7f:81:31:c2
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;c:c5:d4:47:0a:13 (this machine)
&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;:d0:35
Exiting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this I can deduce that there is one other machine connected to the network at &lt;code&gt;192.168.1.4&lt;/code&gt;, in addition to the router at &lt;code&gt;192.168.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fingerprinting&#34;&gt;Fingerprinting&lt;/h3&gt;

&lt;p&gt;Now I&amp;rsquo;ve identified the addresses of two hosts on my network, if I was an attacker I would want to try and identify the types of hosts they are, in order to determine which types of attacks to use against them.&lt;/p&gt;

&lt;p&gt;One way to fingerprint a host is using their &lt;a href=&#34;https://en.wikipedia.org/wiki/MAC_address&#34;&gt;MAC address&lt;/a&gt;. The first half of the address is the Organisationally Unique Identifier (OUI). The IEEE provide a &lt;a href=&#34;http://standards-oui.ieee.org/oui.txt&#34;&gt;file&lt;/a&gt; that lists all authorized OUIs and their manufacturer. So to identify the Manufacturer of the network device of the host, all we have to do is lookup their OUI in the file. This &lt;a href=&#34;https://github.com/dnmfarrell/Penetration-Testing-With-Perl/blob/master/id_target&#34;&gt;script&lt;/a&gt; does that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target_mac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage\n\t./id_target \n&amp;#34;&lt;/span&gt;;

printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address: %s, MAC Manufacturer: %s\n&amp;#34;&lt;/span&gt;,
  $target_mac, oui_lookup($target_mac);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oui_lookup&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mac_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  $mac_address &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/:/-/g&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $oui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substr $mac_address, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;

  open (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $oui_file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data/oui.txt&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$oui_file&amp;gt;&lt;/span&gt;)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$oui/i&lt;/span&gt;)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($address, $manufacturer_name) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t+/&lt;/span&gt;, $line;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$manufacturer_name&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I run this script on the Gateway MAC address, I can identify the access point manufacturer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;id_target &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;d:7f:81:31:c2
Address: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;d:7f:81:31:c2, MAC Manufacturer: NETGEAR INC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aha! so the access point is made by Netgear. There was another host detected on my network at address &lt;code&gt;192.168.1.3&lt;/code&gt;. I can try and fingerprint them too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;id_target &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;:d0:35
Address: &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;:d0:35, MAC Manufacturer: Apple&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s an Apple machine. With this data I can either try to fingerprint the hosts further, or I can start testing them for weaknesses, using a port scan or a known vulnerability. A good source of vulnerabilities is &lt;a href=&#34;http://www.exploit-db.com&#34;&gt;exploit-db.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neutralize Shellshock by patching Bash with Perl</title>
      <link>http://localhost:1313/article/118/2014/10/5/Neutralize-Shellshock-by-patching-Bash-with-Perl/</link>
      <pubDate>Sun, 05 Oct 2014 18:13:45 +0000</pubDate>
      
      <guid>http://localhost:1313/article/118/2014/10/5/Neutralize-Shellshock-by-patching-Bash-with-Perl/</guid>
      <description>

&lt;p&gt;The safest way to protect a system from Shellshock is to upgrade to a patched version of Bash. However if you&amp;rsquo;re like me, you may find that a hectic Linux distro release &lt;a href=&#34;https://fedoraproject.org/wiki/Fedora_Release_Life_Cycle&#34;&gt;schedule&lt;/a&gt; has left your current distribution unsupported. Rather than run the risk of attack, you can patch Bash yourself. Unfortunately some versions of Bash have as many as 52 different &lt;a href=&#34;http://ftp.gnu.org/gnu/bash/bash-4.2-patches/&#34;&gt;patches&lt;/a&gt; that must be downloaded and applied. So I wrote a Perl called &lt;a href=&#34;https://github.com/sillymoose/bashfix&#34;&gt;bashfix&lt;/a&gt; to automate it.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Bashfix has a minimal set of requirements, so you should be able to run it on any Linux platform out of the box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl 5.8 or higher and no extra modules required&lt;/li&gt;
&lt;li&gt;Linux with Bash version 3.* or 4.*&lt;/li&gt;
&lt;li&gt;The following C binaries: wget, curl, bison, byacc, gettext, patch, autoconf&lt;/li&gt;
&lt;li&gt;An internet connection to download Bash and associated patches from GNU&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;

&lt;p&gt;Using bashfix is fairly straightforward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;bashfix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
$ cd bashfix
$ chmod &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;x bashfix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;bashfix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
Bash version &lt;span style=&#34;color:#ae81ff&#34;&gt;4.2.13&lt;/span&gt; detected
Created working directory &lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/&lt;/span&gt;PIRKRioxmM
Downloading Bash
Downloading Patches
Bash patched to level &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;
Bash fully patched&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
Configuring Bash &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
Building &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; testing Bash &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
Success&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; New Bash binary built&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;
Making backup copy of &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;bin&lt;span style=&#34;color:#e6db74&#34;&gt;/bash at /&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;bash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bak
Making backup copy of &lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;bash at &lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;bash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bak
Bash version &lt;span style=&#34;color:#ae81ff&#34;&gt;4.2.52&lt;/span&gt; is now installed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bashfix checks that you have Bash installed, and the necessary prerequisites. It then downloads the Bash source for the same Bash version that is already installed on the system (you can patch an old Bash version to be Shellshock-proof). Note that different versions of Bash have different numbers of patches: 4.2 has 52 patches, whilst 4.1 has only 16. After that, bashfix configures, builds and tests Bash, making a backup of your existing Bash binary, before installing the newly patched version.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve tested &lt;a href=&#34;https://github.com/sillymoose/bashfix&#34;&gt;bashfix&lt;/a&gt; on different versions of Fedora and CentOS, and expect that it works with any RHEL flavoured distro. With other Linux distros or Unix systems, your mileage may vary. If you encounter any issues - get in touch and let me know! Check out our recent &lt;a href=&#34;http://perltricks.com/article/115/2014/9/26/Shellshock-and-Perl&#34;&gt;article&lt;/a&gt; on Shellshock and Perl if you&amp;rsquo;d like to know more about the exploit.&lt;/p&gt;

&lt;p&gt;Thanks to Steve Jenkins whose detailed blog &lt;a href=&#34;http://stevejenkins.com/blog/2014/09/how-to-manually-update-bash-to-patch-shellshock-bug-on-older-fedora-based-systems/&#34;&gt;post&lt;/a&gt; on patching Fedora Bash was the inspiration for this script.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shellshock and Perl</title>
      <link>http://localhost:1313/article/115/2014/9/26/Shellshock-and-Perl/</link>
      <pubDate>Fri, 26 Sep 2014 13:28:54 +0000</pubDate>
      
      <guid>http://localhost:1313/article/115/2014/9/26/Shellshock-and-Perl/</guid>
      <description>

&lt;p&gt;Recently the tech media have been foaming at the mouth over a serious Bash &lt;a href=&#34;https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/&#34;&gt;bug&lt;/a&gt; called Shellshock. The media &lt;a href=&#34;http://www.wired.com/2014/09/internet-braces-crazy-shellshock-worm/&#34;&gt;hype machine&lt;/a&gt; was in full-swing, replete with the absurd doomsday-like predictions that are rolled out every time a significant security vulnerability is found (remember heartbleed the &amp;ldquo;&lt;a href=&#34;http://mashable.com/2014/04/09/heartbleed-nightmare/&#34;&gt;ultimate web nightmare&lt;/a&gt;&amp;rdquo;?). Whilst it&amp;rsquo;s wise to ignore the hype, don&amp;rsquo;t ignore the issue; Shellshock is a serious risk that allows remote code injection and execution using Bash environment variables. This is also important for Perl as Perl has several touchpoints with the system shell, from the built-in functions &lt;a href=&#34;https://perldoc.perl.org/functions/exec.html&#34;&gt;exec&lt;/a&gt; and &lt;a href=&#34;https://perldoc.perl.org/functions/system.html&#34;&gt;system&lt;/a&gt; to the &lt;code&gt;%ENV&lt;/code&gt; global variable.&lt;/p&gt;

&lt;h3 id=&#34;is-system-x-affected&#34;&gt;Is system &amp;ldquo;x&amp;rdquo; affected?&lt;/h3&gt;

&lt;p&gt;If the platform is a Unix-based operating system and Bash is the default terminal, it might be at risk. Redhat Linux, CentOS and Fedora, openSUSE, arch Linux as well as Mac OSX are vulnerable out of the box. A surprising number of platforms are not; freeBSD uses &lt;a href=&#34;https://www.freebsd.org/doc/en/articles/linux-users/shells.html&#34;&gt;tsch&lt;/a&gt;, and modern versions of Debian and Ubuntu use &lt;a href=&#34;https://wiki.ubuntu.com/DashAsBinSh&#34;&gt;dash&lt;/a&gt; by default.&lt;/p&gt;

&lt;p&gt;Every version of Bash through 4.3 is vulnerable to Shellshock. To find out your Bash version, fire up the terminal and enter this command to print the version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ echo $BASH_VERSION
&lt;span style=&#34;color:#ae81ff&#34;&gt;4.2.47&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;release&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seeing as my version of Bash is below 4.3, my system is possible vulnerable to Shellshock.&lt;/p&gt;

&lt;h3 id=&#34;how-does-shellshock-work&#34;&gt;How does Shellshock work?&lt;/h3&gt;

&lt;p&gt;Shellshock exploits a flaw in how Bash parses environment variables; Bash allows functions to be stored in environment variables, but the issue is Bash will execute any code placed after the function in the environment variable value. Let&amp;rsquo;s craft an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ export SHELLSHOCK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;() { ignore; };echo danger&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code creates a new environment variable called &lt;code&gt;SHELLSHOCK&lt;/code&gt; (it&amp;rsquo;s customary to have environment variable names in uppercase). The value of the new variable is an anonymous function which does nothing: &lt;code&gt;() { ignore; };&lt;/code&gt; followed by: &lt;code&gt;echo danger&lt;/code&gt; and it&amp;rsquo;s the latter portion of this code which is the risk. Every time Bash processes its environment variables, that code will be executed. For example if I run that statement and then type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ bash &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo Hello, World&amp;#34;&lt;/span&gt;
danger
Hello, World&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that the word danger was printed, indicating my code embedded in the &lt;code&gt;SHELLSHOCK&lt;/code&gt; variable was executed automatically by Bash. In the case of &lt;code&gt;echo danger&lt;/code&gt; it&amp;rsquo;s harmless, but an attacker could craft a malicious payload that caused irreparable harm, such as identity theft, data destruction or hardware damage.&lt;/p&gt;

&lt;p&gt;In order for the Shellshock exploit to work, the attacker would need to achieve two things. First deliver an environment variable containing malicious code to the target host. Second, get the target host to start a new Bash process. The obvious target candidate for this are web servers hosting CGI scripts. CGI works by passing the request parameters as environment variables (such as the user agent name), if the target CGI script starts a new Bash process, the attack will work. You might be wondering why a script would start a new Bash process, which leads me on to how all of this relates to Perl in the first place.&lt;/p&gt;

&lt;h3 id=&#34;perl-shock&#34;&gt;Perl shock&lt;/h3&gt;

&lt;p&gt;The first thing to say is that Perl has nothing to do with Shellshock, but there are a number of places where Perl may invoke the system shell, and it&amp;rsquo;s these cases to be wary of. On Unix based systems Perl uses the shell binary located at &lt;code&gt;/bin/sh&lt;/code&gt;, which is usually a symlink to the default shell binary (such as Bash). This means if Bash is the default shell on your system, when Perl calls out to &lt;code&gt;/bin/sh&lt;/code&gt; a new Bash process will start, and the environment variables will be processed, thus Perl could be a trigger for invoking a Shellshock attack.&lt;/p&gt;

&lt;p&gt;The Perl built-in functions &lt;code&gt;exec&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt; will invoke a new shell process when used. You can also use backticks to invoke a system command. Other Perl functions &lt;em&gt;may&lt;/em&gt; invoke the shell, for example &lt;code&gt;open&lt;/code&gt; can be used to run system commands.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example of Perl triggering Shellshock by invoking the shell via Perl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system &amp;#34;echo test&amp;#34;&amp;#39;&lt;/span&gt;
test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm what happened here? The command ran fine but &amp;ldquo;danger&amp;rdquo; was not printed - Shellshock failed. It turns out that Perl doesn&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; invoke the shell using: &lt;code&gt;/bin/sh -c&lt;/code&gt;. Instead to be more efficient, Perl will usually call &lt;a href=&#34;http://www.csl.mtu.edu/cs4411.ck/www/NOTES/process/fork/exec.html&#34;&gt;execvp&lt;/a&gt;. According to &lt;a href=&#34;https://perldoc.perl.org/functions/system.html&#34;&gt;perldoc&lt;/a&gt;, only when the system command contains &lt;a href=&#34;http://www.sal.ksu.edu/faculty/tim/unix_sg/shell/metachar.html&#34;&gt;metacharacters&lt;/a&gt;, will Perl invoke the shell directly. Let&amp;rsquo;s test that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system &amp;#34;echo test &amp;gt;&amp;gt; test.log&amp;#34;&amp;#39;&lt;/span&gt;
danger&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aha, this worked! We used the metacharacters &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to redirect the output of &lt;code&gt;echo&lt;/code&gt; into a log file, and Perl invoked the shell directly.&lt;/p&gt;

&lt;h3 id=&#34;the-best-defense-is-a-great-offense&#34;&gt;The best defense is a great offense&lt;/h3&gt;

&lt;p&gt;Instead of worrying about whether our system calls contain metacharacters, we can go one better and delete the &lt;code&gt;SHELLSHOCK&lt;/code&gt; environment variable before executing any system command. Perl stores the environment variables in &lt;code&gt;%ENV&lt;/code&gt;, so I&amp;rsquo;ll start by delete the variable from there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete $ENV{SHELLSHOCK};system &amp;#34;echo test &amp;gt;&amp;gt; shellshock.log&amp;#34;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this one liner, I&amp;rsquo;m front-running the risky &lt;code&gt;system&lt;/code&gt;command with a &lt;code&gt;delete&lt;/code&gt; of the &lt;code&gt;SHELLSHOCK&lt;/code&gt; environment variable. I can see this thwarted Shellshock as &amp;ldquo;danger&amp;rdquo; was not printed out. Of course in this test environment I know the name of the dangerous environment variable, but usually I won&amp;rsquo;t, so to find it, you&amp;rsquo;d have to iterate through the &lt;code&gt;%ENV&lt;/code&gt; hash and delete (or substitute) any suspicious variable. This one liner prints risky environment variables by using a regex to identify any environment variable that contains code after a function declaration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (keys %ENV) { say if $ENV{$_} =~ /};.+/ }&amp;#39;&lt;/span&gt;
SHELLSHOCK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it correctly identified the &lt;code&gt;SHELLSHOCK&lt;/code&gt; environment variable and printed it to command line. From here it&amp;rsquo;s a trivial step to delete the variable instead of printing it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (keys %ENV) { delete $ENV{$_} if $ENV{$_} =~ /};./ }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just a proof-of-concept and may not handle all maliciously crafted Shell environment variables, but with more research, a robust regex could be deployed that completely nullified Shellshock.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;To recap, a successful Shellshock attack would need to pass an environment variable containing malicious code to a CGI script on a web server (like Apache), hosted on a vulnerable system, and the CGI script would have to invoke the Shell. For Perl CGI scripts, the system invocation would need to include metacharacters. This seems like a tall order, not yet understood by everyone; like the security &lt;a href=&#34;http://blog.erratasec.com/2014/09/bash-shellshock-bug-is-wormable.html#.VCVkj_ldVqU&#34;&gt;blogger&lt;/a&gt; who mistakenly labelled a cPanel CGI script as vulnerable. Although CGI was popular back in the day, all the modern Perl web frameworks use &lt;a href=&#34;http://www.fastcgi.com/drupal/node/6?q=node/15&#34;&gt;FastCGI&lt;/a&gt; and are immune to Shellshock. Modern web servers do not enable CGI by default and some like nginx do not even ship with CGI capability.&lt;/p&gt;

&lt;p&gt;The safest way to handle Shellshock on a vulnerable system is to patch Bash to the latest version. Although I&amp;rsquo;ve shown it&amp;rsquo;s possible to thwart the attack using Perl, there may be other unanticipated attack vectors that remain open.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correction:&lt;/strong&gt; &lt;em&gt;removed erroneous description of $SHELL as it is the current user&amp;rsquo;s default login shell, not the default shell. Removed reference to .bashrc as Bash will only process .bashrc during interactive shell startup. 2014-09-27&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image Ebola virus particles &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/niaid/8425030684/in/photolist-dQuu6J-o15Y5n-oq5wzY-oD1uxC-oq68Cn-8r1Hp8-oDe3A2-oDe3za-dPiDp3-ossh3B-2j1bum-jQvxq9-oq59Z4-oq5muj-omJEd1-omJzrD-4JZtfw-aronSf-8GSyC4-68Zxqv-9y7vkf-dPzNiw-5WLSVq-6hZDW8-nds12g-5Wtkeh-6hNQv2-6irCWw-6iQKwC-bS1gap-Jx5bZ-bjfWK2-bjfWiv-dQSzhC-6iUKSo-6ik4Ki-6i3YrM-cXXqXy-64vTm8-cCwK63-8LVkQh-sxxGP-dTpMUd-Dj4uW-6mhvwX-6iGBED-9rwqiP-8R5WMy-9yXaMc-6isfVm&#34;&gt;NIAID&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is your login page secure?</title>
      <link>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</link>
      <pubDate>Mon, 28 Apr 2014 03:14:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/84/2014/4/28/Is-your-login-page-secure-/</guid>
      <description>

&lt;p&gt;How many criteria do you think there are for a web application to securely login its users? &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; (affiliate link) lists 5:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prevent information leaks&lt;/li&gt;
&lt;li&gt;Handle credentials secretively&lt;/li&gt;
&lt;li&gt;Validate credentials properly&lt;/li&gt;
&lt;li&gt;Prevent brute-force attacks&lt;/li&gt;
&lt;li&gt;Log, monitor and notify&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there are 5 criteria, but how you do implement them? I&amp;rsquo;ve created a &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login&#34;&gt;new web application&lt;/a&gt; called &amp;ldquo;SecApp&amp;rdquo; using Perl&amp;rsquo;s Catalyst web framework that attempts to satisfy these criteria - we&amp;rsquo;ll step through each one and you can judge for yourself if it does.&lt;/p&gt;

&lt;h3 id=&#34;how-to-setup-the-app&#34;&gt;How to setup the app&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to download the app and follow along you can, but this step is optional. You&amp;rsquo;re going to need at least Perl 5.14.4 and a git installed. To download the app from our github page, just open up the command line and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/&lt;/span&gt;SecApp_login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s no way around it; this app has a lot of dependencies. To ease the burden, start by installing &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanminus&lt;/a&gt; at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::cpanminus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I prefer to use cpanminus when installing lots of modules: it&amp;rsquo;s less of a memory hog than cpan, outputs less line noise by default, and has the useful &amp;ldquo;&amp;ndash;notest&amp;rdquo; option if you want to install modules without testing them (and save a lot of time). Now change into the newly cloned app directory, and use cpanminus to install the app&amp;rsquo;s dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd SecApp_login
$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;installdeps &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Working on &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Configuring SecApp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;==&lt;/span&gt; Installed dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt; Finishing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch instructs cpanminus to search the current directory for dependencies. All of of the app&amp;rsquo;s dependencies are listed in Makefile.PL, so cpanminus finds those and begins installing all of the Perl modules that the app requires but your system does not have installed. If you&amp;rsquo;re working with a fresh install of Perl, this can take up to an hour or so, so go make a cup of coffee or something else whilst the installs happen.&lt;/p&gt;

&lt;p&gt;Once all the modules are installed, test run the application with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;secapp_server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl 
HTTP::Server::PSGI: Accepting connections at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your browsers and navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. You see this simple welcome message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_welcome.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you visit &lt;a href=&#34;http://localhost/login&#34;&gt;http://localhost/login&lt;/a&gt;, it should load the login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the username &amp;ldquo;test_user_01&amp;rdquo; and &amp;ldquo;Hfa *-£(&amp;amp;&amp;amp;%HBbWqpV%&amp;rdquo;_=asd&amp;rdquo; you should be able to login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_credentials.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A successful login will display a simple message and logout link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_landing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-prevent-information-leaks&#34;&gt;1. Prevent information leaks&lt;/h3&gt;

&lt;p&gt;Information leaks give would-be attackers clues that undermine the login security. One way they do this is by giving information about the software running the web application (which may have known weaknesses).&lt;/p&gt;

&lt;p&gt;In SecApp I&amp;rsquo;ve turned off the typical Catalyst information leaks. In the root application file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm&#34;&gt;SecApp.pm&lt;/a&gt; the &amp;ldquo;-Debug&amp;rdquo; plugin has been removed, which prints a full stack trace in the case of an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst &lt;span style=&#34;color:#e6db74&#34;&gt;qw/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Static::Simple
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Authentication
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::Store::File
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Session::State::Cookie
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further down the same file, the &amp;ldquo;X-Catalyst&amp;rdquo; HTTP header has been disabled by modifying the package configuration. This stops the header from being inserted to every response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Disable X-Catalyst header&lt;/span&gt;
enable_catalyst_header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two changes stop the application from informing users the underlying application framework and language. Now they won&amp;rsquo;t know if they&amp;rsquo;re dealing with a Ruby, Python or Perl application!&lt;/p&gt;

&lt;p&gt;The other type of information leak we need to prevent is indicating logical vulnerabilities by responding differently to similar requests. For example, by responding to login attempts with incorrect usernames with the error message &amp;ldquo;incorrect username&amp;rdquo;, attackers can brute-force attack the username until they receive the message &amp;ldquo;incorrect password&amp;rdquo;, at which point they know they have guessed a correct username.&lt;/p&gt;

&lt;p&gt;In SecApp, we want to respond with a generic message every time the login attempt fails, and not indicate which field was incorrect. The login function is implemented in our &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;Root.pm&lt;/a&gt; controller - we&amp;rsquo;ll look at the code later, but for now you can see that there is only one error message returned.&lt;/p&gt;

&lt;h3 id=&#34;2-handle-credentials-secretively&#34;&gt;2. Handle credentials secretively&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.amazon.com/gp/product/1118026470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118026470&amp;amp;linkCode=as2&amp;amp;tag=perltrickscom-20&#34;&gt;The Web Application Hacker&amp;rsquo;s Handbook&lt;/a&gt; summarizes this as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All credentials should be created, stored, and transmitted in a manner that does not lead to unauthorized disclosure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SecApp &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L11&#34;&gt;Root.pm&lt;/a&gt;, we use Catalyst&amp;rsquo;s auto Controller function to check that every request is over SSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this method will be called everytime&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt; :Private {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# 404 unless https/testing &amp;amp; request method is GET/HEAD/POST&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;( ( $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secure &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &lt;span style=&#34;color:#e6db74&#34;&gt;/^(?:GET|HEAD|POST)$/&lt;/span&gt;, $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;method )
        {
            $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;detach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;);
        }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method &amp;ldquo;$c-&amp;gt;req-&amp;gt;secure&amp;rdquo; will return true if the connection is via SSL. If it isn&amp;rsquo;t we detach the request to the &amp;ldquo;default&amp;rdquo; method, which returns a 404 request error. The clause &amp;ldquo;or $c-&amp;gt;config-&amp;gt;{testing} == 1&amp;rdquo; is so that when testing the application we can try out the functions without needing SSL, as Catalyst&amp;rsquo;s test server does not support it.&lt;/p&gt;

&lt;p&gt;Now it could be irritating for users who try to load the login page and get a 404 error. So using Catalyst&amp;rsquo;s end method, we also set the Strict-Transport-Security HTTP header which instructs browsers to load all pages via https. This is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; : ActionClass(&amp;#39;RenderView&amp;#39;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t require TLS for testing&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{testing} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SecApp sets several other security headers in the &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L90&#34;&gt;end method&lt;/a&gt;, you can read about what they do &lt;a href=&#34;http://perltricks.com/article/81/2014/3/31/Perl-web-application-security-HTTP-headers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SecApp only authenticates login requests received via POST. We achieve this by using Catalyst&amp;rsquo;s chained dispatching and HTTP method matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt; :Chained(&amp;#39;/&amp;#39;) PathPart(&amp;#39;login&amp;#39;) CaptureArgs(0) {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication code&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# authentication failed, load the login form&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_form&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) GET {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#75715e&#34;&gt;# load the login template&lt;/span&gt;
    $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(template &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.tt&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Controller/Root.pm#L42&#34;&gt;code&lt;/a&gt; has been abbreviated here for clarity. But effectively the &amp;ldquo;login_auth&amp;rdquo; subroutine will only fire if the request to &amp;ldquo;/login&amp;rdquo; was made via POST, else just load the login page with the &amp;ldquo;login_form&amp;rdquo; sub. Cool right? Catalyst project manager John Napiorkowski mused on these features in an illustrative &lt;a href=&#34;http://jjnapiorkowski.typepad.com/modern-perl/2013/08/thoughts-on-catalyst-soa-and-web-services.html#.U11rEjnXvqg&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, SecApp stores the passwords in an hashed format, using a relatively strong algorithm (bcrypt). The following code in &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp/Schema/Result/User.pm#L130&#34;&gt;User.pm&lt;/a&gt; adds the functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;__PACKAGE__&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_columns(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                passphrase &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rfc2307&amp;#39;&lt;/span&gt;,
                passphrase_class &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BlowfishCrypt&amp;#39;&lt;/span&gt;,
                passphrase_args &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
                    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
                    salt_random &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,
                },
                passphrase_check_method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_password&amp;#39;&lt;/span&gt;,
            });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if attackers obtained the application password file, the passwords are salted and hashed and not easily broken. SecApp comes with a sample SQLite3 test database with one test user account already created.&lt;/p&gt;

&lt;h3 id=&#34;3-validate-credentials-properly&#34;&gt;3. Validate credentials properly&lt;/h3&gt;

&lt;p&gt;The code that validates credentials can also contain weaknesses. Passwords should be validated in full, without modification or truncation and in a case-sensitive comparison. Multi-stage login processes are particularly susceptible to attacks. The login code should be peer-reviewed and substantially tested for errors.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::Authentication&#34;&gt;Catalyst::Plugin::Authentication&lt;/a&gt; module makes authentication easy. SecApp keeps the login process simple: just a username and password form, with an optional CAPTCHA. Here is the full login code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_auth&lt;/span&gt; :Chained(&amp;#39;login&amp;#39;) PathPart(&amp;#39;&amp;#39;) Args(0) POST {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($self, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_response 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_response_field};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $captcha_challenge 
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{recaptcha_challenge_field};

  &lt;span style=&#34;color:#75715e&#34;&gt;# proceed if config has switched off CAPTCHA, or if the submission is valid, proceed&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{enabled} &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; Captcha::reCAPTCHA&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;check_answer(
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Captcha}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{private_key},
                   $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;address,
                   $captcha_challenge,
                   $captcha_response)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{is_valid})
  {
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password};

    &lt;span style=&#34;color:#75715e&#34;&gt;# if username and passwords were supplied, authenticate&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($username &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $password) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;authenticate({ username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username,
                             password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $password } ))
      {
      &lt;span style=&#34;color:#75715e&#34;&gt;# authentication success, check user active and redirect to the secure landing page&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_object&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;active) {
          $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;uri_for($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;controller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;action_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;landing&amp;#39;&lt;/span&gt;)));
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bad username or password.&amp;#34;&lt;/span&gt;);
      }
    }
  }
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;forward(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login_form&amp;#39;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the code. If the CAPTCHA functionality is enabled, the login function will attempt to validate the CAPTCHA. If successful, the code then retrieves the username and password, and if they exist, attempts to validate them using the authenticate method. The authenticate method checks both username and password in full against the database. If the username and password are validated, then the user will be re-directed to the landing page which is in the secure Admin.pm controller. Else an error message will set indicating a bad username or password. In all failing cases, the login form will be reloaded and displayed.&lt;/p&gt;

&lt;p&gt;So the code looks good, but how do we know if it will do the right thing in all cases? Fortunately &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; can make unit testing an application&amp;rsquo;s methods easy. SecApp has the test file &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/t/Root.t&#34;&gt;Root.t&lt;/a&gt; which tests the login function with many different combinations of credentials, such as null, zero-length string, correct username incorrect password etc. Running these tests makes it easy to confirm that the login function does the right thing. Want to check for yourself? At the command line run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ TESTING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Ilib t&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;4-prevent-brute-force-attacks&#34;&gt;4. Prevent brute-force attacks&lt;/h3&gt;

&lt;p&gt;Brute force attacks are attempts to crack the username and password of an account by repeatedly trying different combinations until one succeeds. SecApp uses &lt;a href=&#34;https://metacpan.org/pod/Captcha::reCAPTCHA&#34;&gt;Captcha::reCAPTCHA&lt;/a&gt; to prevent automated brute force attacks. You&amp;rsquo;ll need a Google account and web domain to sign up for it (it&amp;rsquo;s free). The difficulty of the captcha puzzles presented are very difficult to reliably pass with automation. If you do have a Google &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;reCAPtCHA account&lt;/a&gt;, you can try it out with SecApp by updating &lt;a href=&#34;https://github.com/dnmfarrell/SecApp_login/blob/master/lib/SecApp.pm#L54&#34;&gt;SecApp.pm&lt;/a&gt; with your account credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/84/secapp_login_catpcha.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing as brute-force attacks can only succeed if they can try millions of attempts, why not just add a time-delay like &amp;ldquo;sleep(2)&amp;rdquo; to the login function? The problem with that defence is that it opens the web application up to another attack-vector: denial of service. If an attacker can issue several requests every 2 seconds to the login function, it may tie up all of the application&amp;rsquo;s processes and stop it from responding to regular web requests. Not good!&lt;/p&gt;

&lt;p&gt;Using CAPTCHA combined with front-end proxy web server request and connection limiting methods that can largely eliminate the brute-force risk.&lt;/p&gt;

&lt;h3 id=&#34;5-log-monitor-and-notify&#34;&gt;5. Log, monitor and notify&lt;/h3&gt;

&lt;p&gt;Catalyst comes with built-in logging capabilities. If you&amp;rsquo;re using Catalyst::Plugin::Authentication, any failed login attempt automatically logs a critical error. So the good news is if you&amp;rsquo;re using a web server like nginx, Catalyst will write the critical error to the server error log (this is a simplification). SecApp does not implement any monitoring or notification services, but I think this is more the domain of the server and not the web application. It&amp;rsquo;s trivial to configure &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt; to monitor the error.log and jail any suspicious repeat login attempts.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Is the SecApp login function secure? One thing to consider is that although it utilizes many good practices, user registration and password reset is not implemented. These features must be secure too, else they can undermine the login security altogether, for example by allowing weak passwords to be set. We&amp;rsquo;ll consider these areas of authentication in a future article. In the meantime, SecApp is released under the Artistic 2.0 license, feel free to use it.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;text=Is+your+login+page+secure%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F84%2F2014%2F4%2F28%2FIs-your-login-page-secure-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Updated:&lt;/strong&gt; corrected hashing algorithm name and description 04/28/2014*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/motograf/1269439152/in/photolist-2Wbd2W-9VxeqP-8v6WhC-8v3ToK-8v6W4h-fcDhWQ-6boP72-LNv8s-4pkUnM-aj6wD3-4rL1UA-9Ziy7V-jP5Sc-51f4ck-4ppX9S-dWGQed-dWGuMs-dQRyD-b9SUT-9cBRYL-5UB8BE-8BFgnW-6boNpR-6bsWUQ-6bsX9C-FXJTL-8AuQei-8AuRVc-8AuSzH-6gA6Lx-8v5M9x-91rH7R-dWsFmy-ZQRR-jP6a9-4HKkvg-4HPzk1-5eWG8T-8v8Q6d-8v8Q7N-4HKmZ6-kJrvqx-fcp9cZ-4rsdJ3-aFebHa-4HPALy-7HrEuY-6Pk9RC-hX3MVF-7xoEF6&#34;&gt;motograf&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl web application security - HTTP headers</title>
      <link>http://localhost:1313/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</link>
      <pubDate>Mon, 31 Mar 2014 12:27:39 +0000</pubDate>
      
      <guid>http://localhost:1313/article/81/2014/3/31/Perl-web-application-security---HTTP-headers/</guid>
      <description>

&lt;p&gt;&lt;em&gt;HTTP headers are included in every HTTP response from a web server. Setting the appropriate HTTP headers can reduce the risk of man-in-the-middle and cross-site-scripting attacks on a web application. You can also reduce information leaks about the web application configuration - vital data that gives a would-be attacker clues about potential vulnerabilities. Read on to find out how to set the appropriate headers in your Perl web application.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;

&lt;p&gt;All three of major Perl web frameworks provide some kind of identifying header. Dancer and Mojolicious use &amp;ldquo;X-Powered-By&amp;rdquo; and Catalyst uses &amp;ldquo;X-Catalyst&amp;rdquo;. The problem with this header is it informs the requester the language of the application (Perl) and the web framework being used. In some cases it also reveals the version number. With this information a would-be attacker can focus on exploits that are specific to Perl or the web framework. Here&amp;rsquo;s how you can disable it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default Catalyst does not turn on its application header. The header is controlled by the &amp;ldquo;enable_catalyst_header&amp;rdquo; config option, normally located in the root application class (e.g. lib/MyApp.pm) or the application config file.&lt;/li&gt;
&lt;li&gt;Mojolicious does not set this header since &lt;a href=&#34;https://github.com/kraih/mojo/blob/b5da0c7afcdd793c85e8e2a67eb29f7f36bdb601/Changes#L538&#34;&gt;version 4.00&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dancer (and Dancer2) use the &lt;a href=&#34;https://metacpan.org/pod/Dancer2::Config#no_server_tokens-(boolean)&#34;&gt;server tokens&lt;/a&gt; directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Web servers often broadcast information about themselves by default. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Server: nginx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.4.6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is risky for the same reason that revealing information about the underlying Perl web application is. To disable the server header in nginx, just add this line to your nginx.conf or virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;server_tokens off;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Apache 1.3x add these lines to your virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ServerTokens Prod
ServerSignature Off&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Apache 2.x, these lines will load the mod_headers module, and remove the server header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;LoadModule headers_module &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;lib&lt;span style=&#34;color:#e6db74&#34;&gt;/apache/mo&lt;/span&gt;dules&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mod_headers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;so
Header unset Server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the major Perl web frameworks ship with web servers that set the server header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
Server: HTTP::Server::PSGI

&lt;span style=&#34;color:#75715e&#34;&gt;# mojolicious&lt;/span&gt;
Server: Mojolicious (Perl)

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer&lt;/span&gt;
Server: Perl Dancer &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3121&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These headers can be overwritten within the application code. For instance, if we wanted to change the server to appear to be nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Server&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-frame-options&#34;&gt;X-Frame-Options&lt;/h3&gt;

&lt;p&gt;This header can prevent your application responses from being loaded within frame or iframe HTML elements (see the &lt;a href=&#34;http://tools.ietf.org/html/rfc7034&#34;&gt;spec&lt;/a&gt;). This is to prevent clickjacking requests where your application response is displayed on another website, within an invisible iframe, which then hijacks the user&amp;rsquo;s request when they click a link on your website. Here&amp;rsquo;s how to disable it in the respective web frameworks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Frame-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DENY&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;strict-transport-security&#34;&gt;Strict-Transport-Security&lt;/h3&gt;

&lt;p&gt;This header instructs the requester to load all content from the domain via HTTPS and not load any content unless there is a valid ssl certificate. This header can help prevent man-in-middle attacks as it ensures that all HTTP requests and responses are encrypted. The Strict-Transport-Security header has a max-age parameter that defines how long in seconds to enforce the policy for. Here&amp;rsquo;s how to add it to your Perl web application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Strict-Transport-Security&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max-age=3600&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;content-security-policy&#34;&gt;Content-Security-Policy&lt;/h3&gt;

&lt;p&gt;The CSP header sets a whitelist of domains from which content can be safely loaded. This prevents most types of XSS attack, assuming the malicious content is not hosted by a whitelisted domain. For example this line specifies that all content should only be loaded from the responding domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Security&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Policy: default&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;src &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy%0A&#34;&gt;a lot to CSP&lt;/a&gt; (&lt;a href=&#34;http://www.w3.org/TR/CSP/&#34;&gt;spec&lt;/a&gt;) and browser support is &lt;a href=&#34;http://caniuse.com/#feat=contentsecuritypolicy&#34;&gt;fairly good&lt;/a&gt;. One downside to the whitelist approach is it&amp;rsquo;s not compatible with ad services like Google&amp;rsquo;s adsense as you won&amp;rsquo;t know the domains in advance in order to whitelist them. To set the header in your facourite Perl web application, use on of these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Security-Policy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-content-type-options&#34;&gt;X-Content-Type-Options&lt;/h3&gt;

&lt;p&gt;This is an IE only header that is used to disable mime sniffing. The vulnerability is that IE will auto-execute any script code contained in a file when IE attempts to detect the file type. This is disabled by default in IE anyway, but to enforce it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Content-Type-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nosniff&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-download-options&#34;&gt;X-Download-Options&lt;/h3&gt;

&lt;p&gt;This is another IE-only header that prevents IE from opening an HTML file directly on download from a website. The security issue here is, if a browser opens the file directly, it can run as if it were part of the site. To add this header, use one of these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Download-Options&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noopen&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;x-xss-protection&#34;&gt;X-XSS-Protection&lt;/h3&gt;

&lt;p&gt;This is the final IE-only header. It was introduced in IE8 as part of the cross-site-scripting (XSS) filter functionality (more &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx&#34;&gt;here&lt;/a&gt;). The header can force IE to turn on its XSS filter. Additionally it has an optional setting called &amp;ldquo;mode&amp;rdquo; that can force IE to block the entire page if an XSS attempt is detected. Here&amp;rsquo;s how to add it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Catalyst&lt;/span&gt;
$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Mojolicious&lt;/span&gt;
$self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;# Dancer / Dancer2&lt;/span&gt;
header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-XSS-Protection&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1; &amp;#39;mode=block&amp;#39;&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;adding-headers-in-the-web-server&#34;&gt;Adding headers in the web server&lt;/h3&gt;

&lt;p&gt;You may prefer to add these headers in the web server configuration, rather than at the application level. For nginx, use the &amp;ldquo;add_header&amp;rdquo; directive - see &lt;a href=&#34;https://gist.github.com/plentz/6737338&#34;&gt;here&lt;/a&gt; for a good example. For Apache use the &amp;ldquo;Header set&amp;rdquo; directive in mod_headers (&lt;a href=&#34;http://moko.ru/doc/apache/mod/mod_headers.html&#34;&gt;1.3&lt;/a&gt;, &lt;a href=&#34;http://httpd.apache.org/docs/2.0/de/mod/mod_headers.html&#34;&gt;2.x&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;testing-the-headers&#34;&gt;Testing the headers&lt;/h3&gt;

&lt;p&gt;tThere are a number of ways to check which headers your application is returning. Firstly you can use curl (replace perltricks.com with the URL to check):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;curl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will return the HTTP headers only:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;HTTP&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
Server: nginx
Date: Mon, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; GMT
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
Connection: keep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alive
Cache&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Control: max&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;
X&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Frame&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Options: DENY&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;a href=&#34;https://securityheaders.com/&#34;&gt;SecurityHeaders.com&amp;rsquo;s&lt;/a&gt; excellent checking tool. Or you can inspect the headers yourself by using your browser&amp;rsquo;s developer mode.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;These HTTP headers are easy to add and can make a reduce your application&amp;rsquo;s vulnerability to XSS and man-in-the-middle attacks, particularly for applications that allow users to upload content.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;text=Perl+web+application+security+-+HTTP+headers&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F81%2F2014%2F3%2F31%2FPerl-web-application-security-HTTP-headers&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo © &lt;a href=&#34;http://www.flickr.com/photos/rightee/259084010/in/photostream/&#34;&gt;Andy Wright&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updates: Mojolicious application header corrected. Web frameworks server header added. (31/3/2014)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wear the cloak of invisibility with OpenVPN and Perl</title>
      <link>http://localhost:1313/article/50/2013/12/2/Wear-the-cloak-of-invisibility-with-OpenVPN-and-Perl/</link>
      <pubDate>Mon, 02 Dec 2013 04:38:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/50/2013/12/2/Wear-the-cloak-of-invisibility-with-OpenVPN-and-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Screen-scraping useragents can be identified by several characteristics including their IP address and useragent string. This article shows how with the VPN service of &lt;a href=&#34;http://hidemyass.com/vpn/r14824/&#34;&gt;HideMyAss.com&lt;/a&gt; and the Perl module &lt;a href=&#34;https://metacpan.org/pod/Net::OpenVPN::Agent&#34;&gt;Net::OpenVPN::Agent&lt;/a&gt; you can obfuscate these data points and make your useragent harder to detect and monitor.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h3&gt;

&lt;p&gt;The following solution has been tested on Linux and may work on other UNIX-based platforms but is unlikely to work on Windows. Before getting started you&amp;rsquo;ll need to install &lt;a href=&#34;http://openvpn.net/index.php/open-source.html&#34;&gt;OpenVPN&lt;/a&gt; (open source networking software) - this is used to connect to the VPN networks of &lt;a href=&#34;http://hidemyass.com/vpn/r14824/&#34;&gt;HideMyAss.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to install Net::OpenVPN::Agent via CPAN:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan Net::OpenVPN::Agent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally you will need a &amp;ldquo;VPN Pro&amp;rdquo; account with &lt;a href=&#34;http://hidemyass.com/vpn/r14824/&#34;&gt;HideMyAss.com&lt;/a&gt;. They provide 49,000 IP addresses Worldwide. I can recommend their service and have been using them successfully for months. If you have an account with a different VPN provider that uses OpenVPN, you should be able to hack Net::OpenVPN::Agent to use that service instead (contact me if you&amp;rsquo;d like help with this - I&amp;rsquo;m the module author).&lt;/p&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;The Net::OpenVPN::Agent provides a configurable useragent that will automatically connect to a random &lt;a href=&#34;http://hidemyass.com/vpn/r14824/&#34;&gt;HideMyAss.com&lt;/a&gt; server before fetching the target URL. After a configurable number of requests, the useragent will automatically disconnect and re-connect to another random server. When connecting to a new server, the useragent will also select a new useragent string from a configurable list of useragent strings. This way both the IP address and the useragent string will change at the same time to adopt a new identity. The useragent is designed to be resilient: server connections and failed page requests will be attempted multiple times (configurable), new IP addresses are confirmed using a remote service and full logging capability is provided via &lt;a href=&#34;https://metacpan.org/pod/Log::Log4perl&#34;&gt;Log::log4perl&lt;/a&gt; (also configurable).&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::OpenVPN::Agent&#34;&gt;Net::OpenVPN::Agent&lt;/a&gt; requires a YAML file called agent.conf to be present in the root application directory. This is explained in the &lt;a href=&#34;https://metacpan.org/pod/Net::OpenVPN::Agent#new&#34;&gt;module documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;writing-a-covert-scraper&#34;&gt;Writing a covert scraper&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s pull together a simple scraper to demonstrate the concept. The code below initializes uses &lt;a href=&#34;https://metacpan.org/pod/Net::OpenVPN::Agent&#34;&gt;Net::OpenVPN::Agent&lt;/a&gt; to get the main page of the New York times website. It then extracts and requests every URL it finds, with the aim of doing something with that content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::OpenVPN::Agent;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.3&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ua &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::OpenVPN::Agent&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.nytimes.com&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ua&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_page($base_url) &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/\n//g&lt;/span&gt;r;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/href=&amp;#34;($base_url.*?)&amp;#34;/g&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $story &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ua&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_page($_)
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this code at the terminal with full logging gives the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) times&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; setting ip address
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//g&lt;/span&gt;eoip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hidemyass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/ip/&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request limit is zero, resetting the request limit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;ecurenetconnection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/vpnconfig/s&lt;/span&gt;ervers&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cli&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;php
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;ecurenetconnection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/vpnconfig/o&lt;/span&gt;penvpn&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;template&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ovpn
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Connecting to &lt;span style=&#34;color:#ae81ff&#34;&gt;72.11.140.130&lt;/span&gt;, USA, California, Los Angeles (LOC1 S4), us
WARN &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Ip address &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; changed, re&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;requesting ip
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//g&lt;/span&gt;eoip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hidemyass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/ip/&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Ip address changed to &lt;span style=&#34;color:#ae81ff&#34;&gt;72.11.140.138&lt;/span&gt; from &lt;span style=&#34;color:#ae81ff&#34;&gt;172.254.124.113&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;weather
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/s&lt;/span&gt;ports&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/sci&lt;/span&gt;ence&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/&lt;/span&gt;health&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/&lt;/span&gt;arts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request limit is zero, resetting the request limit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Disconnecting from server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Connecting to &lt;span style=&#34;color:#ae81ff&#34;&gt;173.234.233.226&lt;/span&gt;, USA, New York, Manhattan (LOC1 S3), us
WARN &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Ip address &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; changed, re&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;requesting ip
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//g&lt;/span&gt;eoip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hidemyass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/ip/&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Ip address changed to &lt;span style=&#34;color:#ae81ff&#34;&gt;108.62.48.75&lt;/span&gt; from &lt;span style=&#34;color:#ae81ff&#34;&gt;72.11.140.138&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/s&lt;/span&gt;tyle&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; GET: http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nytimes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/pages/o&lt;/span&gt;pinion&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Request successful
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output demonstrates how the useragent first establishes a secure, encrypted connection to a Los Angeles-based VPN before proceeding to request pages from the New York Times website. Once the configured page request limit is reached the useragent automatically disconnects and connects to a new VPN in New York, establishing a new IP and adopting a new useragent string. From the New York Times web server perspective, it received a series of requests from two different users with different IP addresses, one in Los Angeles and the other in New York. And neither of these is the user&amp;rsquo;s actual IP address.&lt;/p&gt;

&lt;h3 id=&#34;warning&#34;&gt;Warning&lt;/h3&gt;

&lt;p&gt;The ability to anonymously scrape websites is a powerful but potentially harmful activity - you should never screen-scrape for unethical or illegal purposes. Adhere to robots.txt. This approach does not guarantee anonymity: the VPN provider may disclose all connections logs if required to by a law enforcement agency.&lt;/p&gt;

&lt;h3 id=&#34;disclosure&#34;&gt;Disclosure&lt;/h3&gt;

&lt;p&gt;As a customer of &lt;a href=&#34;http://hidemyass.com/vpn/r14824/&#34;&gt;HideMyAss.com&lt;/a&gt; I receive an affiliate payment for the successful referrals from the links on this page.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elements of Access Control</title>
      <link>http://localhost:1313/pub/2008/02/13/elements-of-access-control.html/</link>
      <pubDate>Wed, 13 Feb 2008 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2008/02/13/elements-of-access-control.html/</guid>
      <description>

&lt;h3 id=&#34;why-gates&#34;&gt;Why Gates?&lt;/h3&gt;

&lt;p&gt;In a perfect world we wouldn&amp;rsquo;t do things we should not. However the world is not like this; people do forbidden things sometimes. This also applies to computer systems used by more than one person. Almost everyone has tried to read someone else&amp;rsquo;s email, view accounting department salary reports, or something else, or access otherwise hidden data.&lt;/p&gt;

&lt;p&gt;I know &lt;em&gt;you&lt;/em&gt; have never done this, but many people have.&lt;/p&gt;

&lt;h3 id=&#34;in-construction&#34;&gt;In Construction&lt;/h3&gt;

&lt;p&gt;The simplest way to allow or forbid a user account to do something is to check if the account is in a list of permitted accounts somewhere. If you assume that everything is forbidden unless explicitly allowed, the access function can be as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # access_check() return 1 or undef
  sub access_check
  {
    my $user_id     = shift;
    my @allow_users = @_;

    my %quick_allow = map { $_ =&amp;gt; 1 } @allow_users;

    return $quick_allow{ $user_id };
  }

  my @allowed = ( 11, 12, 23, 45 );

  print &amp;quot;User 23 allowed\n&amp;quot; if access_check( 23, @allowed );
  print &amp;quot;User 13 allowed\n&amp;quot; if access_check( 13, @allowed );
  print &amp;quot;User 99 allowed\n&amp;quot; if access_check( 99, @allowed );

  # only &amp;quot;User 23 allowed&amp;quot; will be printed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually access control can be almost as simple as this function. Using user IDs for access control is simple, but tends to be hard to maintain. The problem appears with systems with many users or with public systems where new users may be created at any point. Access lists may become very large for each operation, which needs access controls.&lt;/p&gt;

&lt;p&gt;One solution to this problem is &lt;em&gt;access groups&lt;/em&gt;. Each user may be a member of several groups. The access check will pass if the user is a member of a group with permission for the required operation. This middle level in the access check isolates users from the access check directly. It also helps the system&amp;rsquo;s design&amp;ndash;you can associate preset access groups with all controlled operations at their point of creation. Subsequently created users only need to be attached to one or more of those groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # mimic real system environment:
  # %ALL_USER_GROUPS represents &amp;quot;storage&amp;quot; that contains all
  # groups that each user is attached to
  my %ALL_USER_GROUPS = (
                    23 =&amp;gt; [ qw( g1  g4 ) ],
                    13 =&amp;gt; [ qw( g3  g5 ) ],
                    );
  # user 23 is in groups g1 and g4
  # user 13 -- in g3 and g5

  # return list of user&#39;s groups. read data from storage or
  # from %ALL_USER_GROUPS in this example
  sub get_user_groups
  {
    my $user_id     = shift;

    return @{ $ALL_USER_GROUPS{ $user_id } || [] };
  }

  # access_check_grp() return 1 or 0
  sub access_check_grp
  {
    my $user_id     = shift;
    my @allow_users = @_;

    my %quick_allow = map { $_ =&amp;gt; 1 } @allow_users;

    my @user_groups = get_user_groups( $user_id );

    for my $group ( @user_groups )
    {
      # user groups is listed, allow
      return 1 if $quick_allow{ $group };
    }

    # user group not found, deny
    return 0;
  }

  # this groups list is static and will not be altered
  # when users are added or removed from the system
  my @allowed = qw( g1  g2  g7  g9 );

  print &amp;quot;User 23 allowed\n&amp;quot; if access_check_grp( 23, @allowed );
  print &amp;quot;User 13 allowed\n&amp;quot; if access_check_grp( 13, @allowed );
  print &amp;quot;User 99 allowed\n&amp;quot; if access_check_grp( 99, @allowed );

  # only &amp;quot;User 23 allowed&amp;quot; will be printed
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storage&#34;&gt;Storage&lt;/h3&gt;

&lt;p&gt;Probably the most popular storage for system data nowadays is the SQL database. Here is a simple example of how to store users, groups, and mapping between them. Three tables are required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  SQL CREATE statements:

  create table user  ( id integer primary key, name char(64), pass char(64) );
  create table group ( id integer primary key, name char(64) );
  create table map   ( user integer, group integer );

  TABLE USER:

   Column |     Type      | Modifiers
  --------+---------------+-----------
   id     | integer       | not null
   name   | character(64) |
   pass   | character(64) |

  TABLE GROUP:

   Column |     Type      | Modifiers
  --------+---------------+-----------
   id     | integer       | not null
   name   | character(64) |

  TABLE MAP:

   Column |  Type   | Modifiers
  --------+---------+-----------
   user   | integer |
   group  | integer |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s fill those tables with some data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  letme=# select id, name from user;
   id |       name
  ----+------------------
    1 | Damian
    2 | Clive
    3 | Lana
  (3 rows)

  letme=# select * from group;
   id |       name
  ----+------------------
    1 | Admin
    2 | Users
    3 | Moderators
  (3 rows)

  letme=# select * from map;
   user | group
  -----+-----
     1 |   1
     1 |   2
     3 |   2
     3 |   3
     2 |   2
  (4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Users in this example are attached to those groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Damian: Users, Admin
  Clive:  Users
  Lana:   Users, Moderators
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-time&#34;&gt;Run-Time&lt;/h3&gt;

&lt;p&gt;Applications apply access control after user login. You can combine it with the login procedure&amp;ndash;for example to allow only specific group of users to connect on weekends. Even so, the access check occurs only after the login succeeds, that is, when the username and password are correct.&lt;/p&gt;

&lt;p&gt;A simple approach for loading required access info is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login, check username and password&lt;/li&gt;
&lt;li&gt;For unsuccessful login, deny access, print message, etc.&lt;/li&gt;
&lt;li&gt;For successful login, load group list for the user from database&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check for required group(s) for login&lt;/p&gt;

&lt;p&gt;This may deny login, print a message, or continue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User logged in, continue&lt;/p&gt;

&lt;p&gt;All access checks for operations happen after this point.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The run-time storage for a user&amp;rsquo;s groups can be simple hash. It can be either global or inside the user session object, depending on your system design. I&amp;rsquo;ve used a global hash here for simplicity of the examples, but if you copy and paste this code, remember that it is &lt;em&gt;mandatory&lt;/em&gt; for you to clear and recreate this global hash for every request right after the login or user session changes! You can also use some kind of session object to drop all user data at the end of the session, but this is just an option, not the only correct or possible way.&lt;/p&gt;

&lt;p&gt;(Also, a truly robust system would store a well-hashed version of the password, not the literal password, but that&amp;rsquo;s a story for a different article.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #!/usr/bin/perl
  use strict;
  use DBI;
  use Data::Dumper;

  our $USER_NAME;
  our $USER_ID;
  our %USER_GROUPS;

  my $DBH = DBI-&amp;gt;connect( &amp;quot;dbi:Pg:dbname=letme&amp;quot;, &amp;quot;postgres&amp;quot;, &amp;quot;&amp;quot;,
      { AutoCommit =&amp;gt; 0 } );

  # this is just an example!
  # username and password acquiring depends on the specific application
  user_login( &#39;Damian&#39;, &#39;secret4&#39; );

  print &amp;quot;User logged in: $USER_NAME\n&amp;quot;;
  print &amp;quot;User id:        $USER_ID\n&amp;quot;;
  print &amp;quot;User groups:    &amp;quot; . join( &#39;, &#39;, keys %USER_GROUPS ) . &amp;quot;\n&amp;quot;;

  sub user_login
  {
    my $user_name = shift;
    my $user_pass = shift;

    $USER_NAME   = undef;
    $USER_ID     = undef;
    %USER_GROUPS = ();

    # both name and password are required
    die &amp;quot;Empty user name&amp;quot;     if $user_name eq &#39;&#39;;
    die &amp;quot;Empty user password&amp;quot; if $user_pass eq &#39;&#39;;

    eval
    {
      my $ar = $DBH-&amp;gt;selectcol_arrayref(
          &#39;SELECT ID FROM USER WHERE NAME = ? AND PASS = ?&#39;,
                                        {},
                                        $user_name, $user_pass );

      $USER_ID   = shift @$ar;

      die &amp;quot;Wrong user name or password&amp;quot; unless $USER_ID &amp;gt; 0;

      $USER_NAME = $user_name;

      # loading groups
      my $ar = $DBH-&amp;gt;selectcol_arrayref( &#39;SELECT GROUP FROM MAP WHERE USER = ?&#39;,
                                        {},
                                        $USER_ID );

      %USER_GROUPS = map { $_ =&amp;gt; 1 } @$ar;
    };
    if( $@ )
    {
      # something failed, it is important to clear user data here
      $USER_NAME   = undef;
      $USER_ID     = undef;
      %USER_GROUPS = ();

      # propagate error
      die $@;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If Damian&amp;rsquo;s password is correct, this code will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  User logged in: Damian
  User id:        1
  User groups:    1, 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The group access check function now is even simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub check_access
  {
    my $group = shift;
    return 0 unless $group &amp;gt; 0;
    return $USER_GROUPS{ $group };
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample code for an access check after login will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub edit_data
  {
    # require user to be in group 1 (admin) to edit data...
    die &amp;quot;Access denied&amp;quot; unless check_access( 1 );

    # user allowed, group 1 check successful
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if( check_access( 1 ) )
  {
    # user ok
  }
  else
  {
    # access denied
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;access-instructions&#34;&gt;Access Instructions&lt;/h3&gt;

&lt;p&gt;The next problem is how to define which groups can perform specific operations. Where this information is static (most cases), you can store group lists in configuration (text) files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  LOGIN: 2
  EDIT:  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, the EDIT operation needs group 1 (admin) and LOGIN needs group 2 (all users).&lt;/p&gt;

&lt;p&gt;Another example is to allow only administrators to log in during weekends:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # all users for mon-fri
  LOGIN_WEEKDAYS: 2

  # only admin for sat-sun
  LOGIN_WEEKENDS: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Administrators will be in both groups (1, 2), so they will be able to log in anytime. All regular users cannot login on weekends.&lt;/p&gt;

&lt;p&gt;This group list includes a moderators group. It could be useful to allow moderators do their job on weekends as well, implying an &lt;code&gt;OR&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # only admin or moderators for sat-sun
  LOGIN_WEEKENDS: 1, 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This named set of groups is a &lt;em&gt;policy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For now, there&amp;rsquo;s only one level in the policy and an &lt;code&gt;OR&lt;/code&gt; operation between groups in a list. Real-world policies may be more complex. However there is no need to overdesign this. Even large systems may work with just one more level. Here&amp;rsquo;s an &lt;code&gt;AND&lt;/code&gt; operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  LOGIN_WEEKENDS: 1+3, 4, 1+5+9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This policy will match (allowing login on weekend days) only for users in the following groups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     1 AND 3
  OR 4
  OR 1 AND 5 AND 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The login procedure must match the &lt;code&gt;LOGIN_WEEKENDS&lt;/code&gt; policy before allowing user to continue with other operations. Thus, you need a procedure for reading policy configuration files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  our %ACCESS_POLICY;

  sub read_access_config
  {
    my $fn = shift; # config file name

    open( my $f, $fn );
    while( &amp;lt;$f&amp;gt; )
    {
      chomp;
      next unless /\S/; # skip whitespace
      next if  /^[;#]/; # skip comments

      die &amp;quot;Syntax error: $_\n&amp;quot; unless /^\s*(\S+?):\s*(.+)$/;
      my $n = uc $1; # policy name: LOGIN_WEEKENDS
      my $v =    $2; # groups lsit: 1+3, 4, 1+5+9

      # return list of lists:
      # outer list uses comma separator, inner lists use plus sign separator
      $ACCESS_POLICY{ $n } = access_policy_parse( $v );
    }
    close( $f );
  }

  sub access_policy_parse
  {
    my $policy = shift;
    return [ map { [ split /[\s\+]+/ ] } split /[\s,]+/, $policy ];
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;LOGIN_WEEKENDS&lt;/code&gt; policy, the resulting value in &lt;code&gt;%ACCESS_POLICY&lt;/code&gt; will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ACCESS_POLICY{ &#39;LOGIN_WEEKENDS&#39; } =&amp;gt;

                [
                  [ &#39;1&#39;, &#39;3&#39; ],
                  [ &#39;4&#39; ],
                  [ &#39;1&#39;, &#39;5&#39;, &#39;9&#39; ]
                ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To match this policy, a user must be in every groups listed in any of the inner lists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub check_policy
  {
    my $policy = shift;

    my $out_arr = $ACCESS_POLICY{ $policy };
    die &amp;quot;Invalid policy name; $policy\n&amp;quot; unless $out_arr;

    return check_policy_tree( $out_arr );
  }

  sub check_policy_tree
  {
    my $out_arr = shift;

    for my $in_arr ( @$out_arr )
    {

      my $c = 0; # matching groups count
      for my $group ( @$in_arr )
      {
        $c++ if $USER_GROUPS{ $group };
      }

      # matching groups is equal to all groups count in this list
      # policy match!
      return 1 if $c == @$in_arr;
    }

    # if this code is reached then policy didn&#39;t match
    return 0;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example cases will become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub user_login
  {
      # login checks here
      ...

      # login ok, check weekday policy
      my $wday = (localtime())[6];

      my $policy;
      if( $wday == 0 or $wday == 6 )
      {
        $policy = &#39;LOGIN_WEEKEND&#39;;
      }
      else
      {
        $policy = &#39;LOGIN_WEEKDAY&#39;;
      }

      die &amp;quot;Login denied&amp;quot; unless check_policy( $policy );
  }

  sub edit_data
  {
    # require user to be in group 1 (admin) to edit data...
    die &amp;quot;Access denied&amp;quot; unless check_policy( &#39;EDIT&#39; );

    # user allowed, &#39;EDIT&#39; policy match
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have all the parts of a working access control scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Policy configuration syntax&lt;/li&gt;
&lt;li&gt;Policy parser&lt;/li&gt;
&lt;li&gt;User group storage and mapping&lt;/li&gt;
&lt;li&gt;User group loading&lt;/li&gt;
&lt;li&gt;Policy match function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This scheme may seem complete, but it lacks one thing.&lt;/p&gt;

&lt;h3 id=&#34;data-fences&#34;&gt;Data Fences&lt;/h3&gt;

&lt;p&gt;In a multiuser system there is always some kind of ownership on the data stored in the database. This means that each user must see only those parts of the data that his user groups own.&lt;/p&gt;

&lt;p&gt;This ownership problem solution is separate from the policy scheme. Each row must have one or more fields filled with groups that have access to the data. Any SQL statements for reading data must also check for this field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $rg  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $ug  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $sql = &amp;quot;SELECT * FROM TABLE_NAME
             WHERE READ_GROUP IN ( $rg ) AND UPDATE_GROUP IN ( $ug )&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result set will contain only rows with read and update groups inside the current user&amp;rsquo;s group set. Sometimes you may need all of rows with the same read group for display, even though some of those rows have update restrictions the user does not meet. This case will use only the &lt;code&gt;READ_GROUP&lt;/code&gt; field for select and will cut off users when they try to update the record without permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $rg  = join &#39;,&#39;, grep { $USER_GROUPS{ $_ } } keys %USER_GROUPS;
  my $sql = &amp;quot;SELECT * FROM TABLE_NAME WHERE READ_GROUP IN ( $rg )&amp;quot;;

  $sth = $dbh-&amp;gt;prepare( $sql );
  $sth-&amp;gt;execute();
  $hr = $sth-&amp;gt;fetchrow_hashref();

  die &amp;quot;Edit access denied&amp;quot; unless check_access( $hr-&amp;gt;{ &#39;UPDATE_GROUP&#39; } );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When access checks are explicitly after &lt;code&gt;SELECT&lt;/code&gt; statements it is possible to store full policy strings inside &lt;code&gt;CHAR&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $hr = $sth-&amp;gt;fetchrow_hashref();

  die &amp;quot;Edit access denied&amp;quot; unless check_policy_record( $hr, &#39;UPDATE_GROUP&#39; );

  sub check_policy_record
  {
      my $hr     = shift; # hash with record data
      my $field  = shift; # field containing policy string

      my $policy = $hr-&amp;gt;{ $field };
      my $tree   = access_policy_parse( $policy );

      return check_policy_tree( $tree );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in-the-middle-of-nowhere&#34;&gt;In the Middle of Nowhere&lt;/h3&gt;

&lt;p&gt;This access control scheme is simple and usable as described. It does not cover all possible cases of access control, but every application has its own unique needs. In certain cases, you can push some of these access controls to lower levels &amp;ndash; your database, for example &amp;ndash; depending on your needs. Good luck with building your own great wall!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacking Perl in Nightclubs</title>
      <link>http://localhost:1313/pub/2004/08/31/livecode.html/</link>
      <pubDate>Tue, 31 Aug 2004 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2004/08/31/livecode.html/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve found the experiences of dancing and programming to have a great deal in common. With both I am immersed in an abstract world of animated structures, building up and breaking down many times before finally reaching a conclusion. Indeed, when the operation of even the dullest data-munging computer program is visualized, for example in a debugger, it does seem to be dancing around its loops and conditions &amp;ndash; moving in patterns through time.&lt;/p&gt;

&lt;p&gt;In other words, a musical score is a kind of source code, and a musical performance is a kind of running program. When you play from a musical score or run a program you are bringing instructions to life.&lt;/p&gt;

&lt;p&gt;So a piece of composed music is like a Perl script, but let&amp;rsquo;s not forget improvised music. The rules behind improvised music &amp;ndash; for example improvised jazz &amp;ndash; develop during a performance, perhaps with little or no predefined plan. Where is the comparison with code here? Well, how many times have you sat down to write some Perl without first deciding exactly how you were going to structure it? Perl is great for improvising. The question is, can you write improvised Perl scripts on stage? This article hopes to answer this question.&lt;/p&gt;

&lt;h3 id=&#34;consumer-software-v-live-programming&#34;&gt;Consumer Software v. Live Programming&lt;/h3&gt;

&lt;p&gt;If music and software have so much in common, how do they commonly meet? Well, modern-day music is often composed not at a piano but at a computer. Here the limits of composition are defined by the creators of software, with musicians eagerly waiting for the next upgrade of their favorite music application. However, at the fringes of electronic music, you find musicians who are also programmers, writing their own software to generate their music. This is a diverse world, spanning and mixing all the genres you could think of, from classical cantata form to speed garage to dance hall. Very few of these musicians have chosen Perl to write their musical code, but this article hopes to encourage more Perl hackers to turn their tools to music.&lt;/p&gt;

&lt;p&gt;A little about myself &amp;ndash; I&amp;rsquo;m a musician who for the last few years has used Perl as my only musical instrument. I&amp;rsquo;ve had some successes, with hundreds of people dancing to my Perl, jumping about to my subroutines, whooping as I started up a new script. To this end, I built a whole library of little compositional Perl scripts that I ran together to make music. However, when running my Perl scripts during a performance I grew to feel as if I wasn&amp;rsquo;t really performing &amp;ndash; I was running software I&amp;rsquo;d written earlier, so to some extent the performance was pre-prepared. I could tweak parameters and so on, but the underlying structure was dictated by my software. So what&amp;rsquo;s the alternative?&lt;/p&gt;

&lt;p&gt;Over the last couple of months, I&amp;rsquo;ve moved toward writing software live, in front of an audience. If a programmer is onstage, then they should program! This may seem a little extreme, but I&amp;rsquo;m not the only one making music this way. This approach grew through a collaboration with Adrian Ward called &amp;ldquo;slub,&amp;rdquo; and also from a fast-growing organization called TOPLAP, the Temporary Organisation for the Promotion of Live Algorithm Programming. Check &lt;a href=&#34;http://toplap.org/&#34;&gt;http://toplap.org/&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll introduce my live-programming environment &amp;ndash; &amp;ldquo;feedback.pl&amp;rdquo; &amp;ndash;later. First, I&amp;rsquo;ll talk a little about writing code that generates music.&lt;/p&gt;

&lt;h3 id=&#34;generative-music-in-practice&#34;&gt;Generative Music in Practice&lt;/h3&gt;

&lt;p&gt;When I use the phrase Perl Music, I mean music that is generated live by Perl code. Instead of writing a melodic sequence by hand, a Perl Musician writes a Perl script that algorithmically generates a melody. When making music in this way, the composer is taking a step back from the music, working with the structure behind a composition rather than with the composition itself. This approach is often termed &amp;ldquo;Generative music.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Perl hackers know that programming is a creative endeavour. So instead of starting with someone else&amp;rsquo;s software, why not start with nothing apart from some vague musical idea? Then sit down and start to express that idea as code.&lt;/p&gt;

&lt;p&gt;Now, while musical Perl code doesn&amp;rsquo;t have to be complicated, it doesn&amp;rsquo;t have to make sense either, you don&amp;rsquo;t have to plan on making anything that is at all readable the next day. Saying that, to take full advantage of any inspiration you have found, code needs to be written very quickly, so keen programming skills and good knowledge of Perl is of great advantage.&lt;/p&gt;

&lt;p&gt;In any case, the most important thing is that your code makes a musical pattern that you judge to be good. Sometimes elegant mathematical forms sound good, other times unexpected bugs and chaotic nonsense produce the most interesting results.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s sidetrack to talk a little about how you might build an environment to make live Perl music, starting with a brief tour around some useful CPAN modules.&lt;/p&gt;

&lt;h3 id=&#34;cpan-music-modules&#34;&gt;CPAN Music Modules&lt;/h3&gt;

&lt;p&gt;Sadly Perl isn&amp;rsquo;t quite fast enough to be useful for synthesizing sounds directly. Instead we have to use Perl to trigger sounds by talking to other bits of software or hardware.&lt;/p&gt;

&lt;p&gt;There are a fair few music related Perl modules to be found on CPAN, perhaps the best known being the MIDI-Perl package by Sean Burke. MIDI-Perl concerns itself only with the reading and writing of MIDI files, which are a kind of musical score - this article is concerned with making live music, not writing scores. However, if you do want to create or manipulate MIDI files, the &lt;a href=&#34;https://metacpan.org/pod/MIDI::Simple&#34;&gt;&lt;code&gt;MIDI::Simple&lt;/code&gt;&lt;/a&gt; module in the MIDI-Perl package is a great place to start.&lt;/p&gt;

&lt;p&gt;As well as a file format for storing musical scores, MIDI also provides a real time protocol for triggering sounds on synthesizers and samplers in real time. If you have a MIDI compatible synthesizer or sampler then there are CPAN modules to help you take advantage of them; &lt;a href=&#34;https://metacpan.org/pod/MIDI::Music&#34;&gt;&lt;code&gt;MIDI::Music&lt;/code&gt;&lt;/a&gt; for UNIX and &lt;a href=&#34;https://metacpan.org/pod/Win32API::MIDI&#34;&gt;&lt;code&gt;Win32API::MIDI&lt;/code&gt;&lt;/a&gt; for Windows.&lt;/p&gt;

&lt;p&gt;Software synthesizers are now commonplace and reliable, thanks to the increasing speed of computers and improving latency times of operating systems including the Linux kernel. Most music software is still controllable by MIDI, but for a faster and more modern alternative, have a look at Open Sound Control (OSC).&lt;/p&gt;

&lt;p&gt;OSC is an open network protocol for music, and is well supported by the best free software music applications including pure-data, SuperCollider and CSound. It&amp;rsquo;s most commonly carried over UDP, so you can use your existing TCP/IP network and Internet connection for OSC.&lt;/p&gt;

&lt;p&gt;For sending and receiving OSC messages with Perl, install the &lt;a href=&#34;https://metacpan.org/pod/Audio::OSC&#34;&gt;&lt;code&gt;Audio::OSC&lt;/code&gt;&lt;/a&gt; package from CPAN. Here&amp;rsquo;s an example of its use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  my $osc = 
      Audio::OSC::Client-&amp;gt;new(Host =&amp;gt; &#39;localhost&#39;, Port =&amp;gt; 57120);

  $osc-&amp;gt;send([&#39;#bundle&#39;, time() + 0.25, [&#39;/play&#39;, &#39;i&#39;, &amp;quot;60&amp;quot;]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example sends a message to port 57120 telling it to play number 60 in a quarter of a second&amp;rsquo;s time. The OSC protocol doesn&amp;rsquo;t define the meaning of such commands, it&amp;rsquo;s up to you to make sure that the receiving application understands what the sending application is asking of it. Later I&amp;rsquo;ll show the use of &lt;code&gt;Audio::OSC&lt;/code&gt; to talk to an application called SuperCollider.&lt;/p&gt;

&lt;p&gt;Ecasound is an excellent piece of software useful for live routing and recording of audio. It supports LADSPA plug-ins, allowing you full programmatic control over a wide range of effects such as noise filters, reverb, chorus and so on. For full real time control over ecasound, install the &lt;a href=&#34;https://metacpan.org/pod/Audio::Ecasound&#34;&gt;&lt;code&gt;Audio::Ecasound&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;While not likely to have a place in a professional studio, &lt;a href=&#34;https://metacpan.org/pod/Audio::Beep&#34;&gt;&lt;code&gt;Audio::Beep&lt;/code&gt;&lt;/a&gt; is a fun way of making primitive, monophonic music. I&amp;rsquo;ll use this in an example later.&lt;/p&gt;

&lt;p&gt;Finally, perhaps the most essential CPAN module for live music is &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;&lt;code&gt;Time::HiRes&lt;/code&gt;&lt;/a&gt;. Unless your music is very intense, at some point you&amp;rsquo;ll want your script to pause before triggering the next sound. Normally Perl only lets you sleep for whole seconds at a time, but &lt;code&gt;Time::HiRes&lt;/code&gt; offers a great deal more accuracy. Time is such an important issue in music, that I&amp;rsquo;ve dedicated the whole of the next section to it.&lt;/p&gt;

&lt;h3 id=&#34;time&#34;&gt;Time&lt;/h3&gt;

&lt;p&gt;Time is central to music, and presents a few technical hurdles to jump. If you have more than one music-generating Perl script running at the same time, you&amp;rsquo;ll want to keep them in sync somehow, and if you&amp;rsquo;re playing with someone else, you&amp;rsquo;ll need to keep in sync with them as well. You not only need to make sure all the different scripts are playing at the same speed, but also in phase - that is, everything needs to be able to work out when the start of the bar is. Further, at some point you&amp;rsquo;ll want to change the speed of the music, especially if your crowd are looking a bit restless. And if you want to start up a new script while another is running, how do get it to start at the right moment?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I do it, in brief. I have a central time server called &amp;lsquo;tm.pl&amp;rsquo;, that stores the current bangs per minute (bpm), the number of bangs that have occurred since the script started, the number of bangs since the last bpm tempo change and the time of that change. It keeps this information up to date by referring to the system clock. By fetching these four simple bits of information it&amp;rsquo;s possible for another Perl script to work out what it should be doing and when.&lt;/p&gt;

&lt;p&gt;A &amp;lsquo;bang&amp;rsquo; is like a musical beat, or the regular tick of a clock. Each Perl script keeps its own &amp;lsquo;heart beat&amp;rsquo;, an event that regularly calls a method called &amp;lsquo;bang&amp;rsquo;. I put all my music generating code inside that &amp;lsquo;bang&amp;rsquo; method. If it receives a bpm change from the server it schedules the change of speed at exactly the right moment.&lt;/p&gt;

&lt;p&gt;Well, I say that but of course computers are volatile things, and so in practice events never happen at exactly the right moment. But as long as the math is right, any slight error is corrected, and so the scripts stay in synchrony.&lt;/p&gt;

&lt;h3 id=&#34;introducing-feedback-pl&#34;&gt;Introducing &lt;code&gt;feedback.pl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now as I tried to explain earlier, I like to write code live while practicing and performing. I should really explain what this means.&lt;/p&gt;

&lt;p&gt;I wrote my own little text editor for live coding. The editor is only intended for writing Perl code, but doesn&amp;rsquo;t have a save function. In that case, you might wonder how I execute the code.&lt;/p&gt;

&lt;p&gt;Well if you&amp;rsquo;re using feedback.pl, the code you&amp;rsquo;re writing is running all the time, in the background. In fact feedback.pl has two &amp;ldquo;threads&amp;rdquo; - one thread is the text editor and another runs the code that is being edited. The running code in the second thread re-parses itself whenever you press ctrl-x, leaving all variables intact. mod_perl programmers will be familiar with this concept &amp;ndash; the &lt;a href=&#34;https://metacpan.org/pod/Apache::StatINC&#34;&gt;&lt;code&gt;Apache::StatINC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Apache::Reload&#34;&gt;&lt;code&gt;Apache::Reload&lt;/code&gt;&lt;/a&gt; modules do something very similar.&lt;/p&gt;

&lt;p&gt;It gets weirder &amp;ndash; the running code can edit its own source code. This is really useful for user feedback. I quite often write code that puts comments in its source that tells me what the running code is up to. So, the human interface to the running code is its source code. You edit the code to modify the process; the process edits the code in response. That&amp;rsquo;s why it&amp;rsquo;s called &lt;code&gt;feedback.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see what I mean, download &lt;code&gt;feedback.pl&lt;/code&gt; from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/feedback-0.1.pl&#34;&gt;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/feedback-0.1.pl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need a few modules installed from CPAN to get it to work. &lt;code&gt;Audio::Beep&lt;/code&gt;, &lt;code&gt;Audio::OSC&lt;/code&gt; and &lt;code&gt;Time::HiRes&lt;/code&gt;. Sadly &lt;code&gt;Audio::Beep&lt;/code&gt; only works under Linux and Microsoft Windows at the moment, users of other operating systems will have to fiddle about to get these examples to work.&lt;/p&gt;

&lt;p&gt;Once everything is ready, run &lt;code&gt;feedback.pl&lt;/code&gt; and type this little script in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # 231
  sub bang {
      my $self = shift;
      $self-&amp;gt;code-&amp;gt;[0] = &#39;# &#39; . $self-&amp;gt;{bangs};
      $self-&amp;gt;modified;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press ctrl-x and it will start to run. &lt;code&gt;$self-&amp;gt;{bangs}&lt;/code&gt; contains the number of bangs since the script was started, and this is written to the first line of the code (make sure that line doesn&amp;rsquo;t have anything important in it). Calling &lt;code&gt;$self-&amp;gt;modified&lt;/code&gt; tells the editor that the code has changed, causing it to refresh the screen with the changes.&lt;/p&gt;

&lt;p&gt;OK, lets make some sounds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #
  sub bang {
      my $self = shift;
      my $note = 100;
      $note += 50 if $self-&amp;gt;{bangs} % 4 == 0;  
      $note -= 30 if $self-&amp;gt;{bangs} % 3 == 0;  
      $note += 60 if $self-&amp;gt;{bangs} % 7 == 0;
      beep($note, 40);
      $self-&amp;gt;code-&amp;gt;[0] = &#39;# note: &#39; . $note;
      $self-&amp;gt;modified;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully this should play a bassline through your speaker. &lt;code&gt;beep()&lt;/code&gt; is a routine imported from &lt;code&gt;Audio::Beep&lt;/code&gt;; you just pass it a frequency in Hz and a duration in milliseconds.&lt;/p&gt;

&lt;p&gt;The bassline is surprisingly complex for such a short program. It could almost be the theme tune to an 8-bit computer game. The complexity comes from the use of polyrhythms, in this case three different modulus combined together.&lt;/p&gt;

&lt;p&gt;Polyrhythms are wonderful to play with but largely absent from commercial dance music. You can see one reason for this absence by looking at consumer music software &amp;ndash; while such pieces of software are obsessed with loops, they don&amp;rsquo;t make it very easy for you to mix loops with different time signatures together. Writing our own code brings us freedom from such constraints, and you can really hear that freedom in polyrhythms.&lt;/p&gt;

&lt;p&gt;Now these simple beeps are fun, but quite limited, obviously. You can only play one beep at a time, and have no control over the timbral qualities of the sound. Lets have a quick look at getting better sounds out of our computers by controlling SuperCollider from Perl.&lt;/p&gt;

&lt;h3 id=&#34;beyond-the-beep-supercollider&#34;&gt;Beyond the Beep &amp;ndash; SuperCollider&lt;/h3&gt;

&lt;p&gt;SuperCollider is a powerful language for audio synthesis, is free Software, and runs under both Linux and Mac OS X. It consists of two Parts: &lt;code&gt;scserver&lt;/code&gt;, a real-time sound synthesis server, and &lt;code&gt;sclang&lt;/code&gt;, an Object-Oriented interpreted language based on smalltalk (sclang). Due to SuperCollider&amp;rsquo;s client-server architecture, it&amp;rsquo;s possible for other languages to replace sclang and control scserver directly, although scheme is the only other language with the libraries for this so far. However, with Perl it&amp;rsquo;s easy to control sclang scripts with the aforementioned &lt;code&gt;Audio::OSC&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;As a rich programming language, SuperCollider takes a bit of learning; however, if you want to try making some sounds with Perl and SuperCollider script. Here it is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/simple.sc&#34;&gt;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/simple.sc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have SuperCollider running, you can start up the script like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sclang ./simple.sc -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that SuperCollider users call their programs &amp;ldquo;patches&amp;rdquo; rather than &amp;ldquo;scripts&amp;rdquo;. Patching (or paching) is a historical term that originally referred to the programming of analog synthesizers, but as far as SuperCollider is concerned, it&amp;rsquo;s mostly synonymous with scripting.&lt;/p&gt;

&lt;p&gt;The simple.sc script listens for OSC messages, which you can send from feedback.pl using the built in methods &amp;lsquo;play&amp;rsquo; and &amp;lsquo;trigger&amp;rsquo; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub bang {
      my $self = shift;
      # play a &amp;quot;middle c&amp;quot; note every fourth bang
      $self-&amp;gt;play({num =&amp;gt; 60})
        if $self-&amp;gt;{bangs} % 4 == 0;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also trigger a sample in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sub bang {
      my $self = shift;
      # play a drum sample for 100 milliseconds, panned slightly to the left,
      # every sixth bang
      $self-&amp;gt;trigger({sample =&amp;gt; &#39;/home/alex/samples/drum.wav&#39;
                      ts     =&amp;gt; 100,
                      pan    =&amp;gt; 0.4
                     }
                    )
        if $self-&amp;gt;{bangs} % 6 == 0;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the source code of feedback.pl to see how the OSC message is sent, and to seek out extra parameters to effect the sound further.&lt;/p&gt;

&lt;h3 id=&#34;multiple-scripts&#34;&gt;Multiple Scripts&lt;/h3&gt;

&lt;p&gt;To have multiple scripts running at the same time, you can use my &amp;ldquo;tm.pl&amp;rdquo; script.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/tm-0.1.pl&#34;&gt;http://cpan.org/authors/id/Y/YA/YAXU/perl-music-article/examples/tm-0.1.pl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It requires a spread communication daemon (&lt;a href=&#34;http://spread.org/&#34;&gt;http://spread.org/&lt;/a&gt;) to be running and the &lt;a href=&#34;https://metacpan.org/pod/Spread::Session&#34;&gt;&lt;code&gt;Spread::Session&lt;/code&gt;&lt;/a&gt; Perl module to be installed. Start the tm.pl script, set the environment variable SPREAD to 1, and then multiple invocations of feedback.pl will stay in synch. You can change the bpm (bangs per minute, similar to beats per minute) at any time, for example $self-&amp;gt;set_bpm(800) will set the bpm to 800, which is suitable for fast gabba techno.&lt;/p&gt;

&lt;h3 id=&#34;further-experiments&#34;&gt;Further Experiments&lt;/h3&gt;

&lt;p&gt;I haven&amp;rsquo;t gone into detail about how to generate the music itself - that&amp;rsquo;s really up to you and your imagination. However, here are a few pointers toward some interesting areas of research.&lt;/p&gt;

&lt;p&gt;Markov chains are a way of probabilistically analyzing a one-dimensional structure and then generating new structures based on the original. It&amp;rsquo;s used often for producing amusingly garbled text, but can also be used for making amusingly garbled music. Check Richard Clamp&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Algorithm::MarkovChain&#34;&gt;&lt;code&gt;Algorithm::MarkovChain&lt;/code&gt;&lt;/a&gt; module on CPAN for more details.&lt;/p&gt;

&lt;p&gt;Regular expressions are of course excellent for manipulating chunks of text, but why not instead use them to manipulate sequences of notes while they are playing? Being able to hear as well as see the effect of a regex is rather pleasing.&lt;/p&gt;

&lt;p&gt;Lastly, my best advice when looking for inspiration is to listen to your favorite pieces of music. Listen to the structure behind a piece and think about how you might write an algorithm to create that structure. Once you start writing the code you&amp;rsquo;ll start to get more ideas based upon it, so that the eventual music sounds nothing like what you found inspiration from.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This might all sound like a rather strange and tortured way of making music, but actually the opposite is true. It&amp;rsquo;s not strange, there is structure behind every piece of music, and it&amp;rsquo;s quite normal for composers to think of the composition of this structure in terms of a defined process. The classic example is of Mozart using dice to generate tunes. It&amp;rsquo;s not tortured either. Thanks to Perl, music generating code can be extremely fast to work with.&lt;/p&gt;

&lt;p&gt;The aims of all this are many and varied. One is to make people dance to Perl code, another is to be able to jam freely with others, not only laptop musicians but also drummers, singers and other &amp;lsquo;real&amp;rsquo; musicians. Indeed, although programming does allow a certain unique perspective on things, the overall aim is to be able to reach some kind of level playing field with other musicians. I believe to reach this point, we have to learn how to use the whole computer as a musical instrument, rather than limiting ourselves to consumer software packages. So give it a go with Perl.&lt;/p&gt;

&lt;h3 id=&#34;footnote&#34;&gt;Footnote&lt;/h3&gt;

&lt;p&gt;At the time of writing and due to active development, &lt;code&gt;Audio::OSC&lt;/code&gt; is not currently passing tests under Linux and quite possibly other architectures. It&amp;rsquo;ll be fixed soon but until then users can &lt;a href=&#34;http://yaxu.org/audio-osc.patch-yaxu&#34;&gt;find a patch&lt;/a&gt; that allows it to work under Intel-based Linux. To be truthful, all of this software is heavily experimental, feel free to &lt;a href=&#34;mailto:perl@yaxu.org&#34;&gt;contact me&lt;/a&gt; if you&amp;rsquo;d like some help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preventing Cross-site Scripting Attacks</title>
      <link>http://localhost:1313/pub/2002/02/20/css.html/</link>
      <pubDate>Wed, 20 Feb 2002 00:00:00 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2002/02/20/css.html/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The cross-site scripting attack is one of the most common, yet overlooked, security problems facing web developers today. A web site is vulnerable if it displays user-submitted content without checking for malicious script tags.&lt;/p&gt;

&lt;p&gt;Luckily, Perl and mod_perl provide us with easy solutions to this problem. We highlight these built-in solutions and also a introduce a new mod_perl module: &lt;em&gt;Apache::TaintRequest&lt;/em&gt;. This module helps you secure mod_perl applications by applying perl&amp;rsquo;s powerful &amp;ldquo;tainting&amp;rdquo; rules to HTML output.&lt;/p&gt;

&lt;h3 id=&#34;what-is-cross-site-scripting&#34;&gt;What is &amp;ldquo;Cross-Site Scripting&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;Lately the news has been full of reports on web site security lapses. Some recent headlines include the following grim items: &lt;a href=&#34;http://news.cnet.com/news/0-1003-200-7764433.html&#34;&gt;Security problems open Microsoft&amp;rsquo;s Wallet&lt;/a&gt;, &lt;a href=&#34;http://news.cnet.com/news/0-1007-200-4030388.html&#34;&gt;Schwab financial site vulnerable to attack&lt;/a&gt;, or &lt;a href=&#34;http://techupdate.zdnet.com/techupdate/stories/main/0,14179,2808729,00.html&#34;&gt;New hack poses threat to popular Web services&lt;/a&gt;. In all these cases the root problem was caused by a &lt;em&gt;Cross-Site Scripting&lt;/em&gt; attack. Instead of targeting holes in your server&amp;rsquo;s operating system or web server software, the attack works directly against the users of your site. It does this by tricking a user into submitting web scripting code (JavaScript, Jscript, etc.) to a dynamic form on the targeted web site. If the web site does not check for this scripting code it may pass it verbatim back to the user&amp;rsquo;s browser where it can cause all kinds of damage.&lt;/p&gt;

&lt;p&gt;Consider the following URL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;http://www.example.com/search.pl?text=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If an attacker can get us to select a link like this,and the Web application does not validate input, then our browser will pop up an alert showing our current set of cookies.This particular example is harmless; an attacker can do much more damage, including stealing passwords, resetting your home page, or redirecting you to another Web site.&lt;/p&gt;

&lt;p&gt;Even worse, you might not even need to select the link for this to happen. If the attacker can make your application display a chunk of html, you&amp;rsquo;re in trouble. Both the &lt;strong&gt;IMG&lt;/strong&gt; and &lt;strong&gt;IFRAME&lt;/strong&gt; tags allow for a new URL to load when html is displayed. For example the following HTML chunk is sent by the &lt;a href=&#34;http://www.cert.org/incident_notes/IN-2001-14.html&#34;&gt;BadTrans&lt;/a&gt; Worm. This worm uses the load-on-view feature provided by the IFRAME tag to infect systems running Outlook and Outlook Express.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  --====_ABC1234567890DEF_====
  Content-Type: multipart/alternative;
           boundary=&amp;quot;====_ABC0987654321DEF_====&amp;quot;

  --====_ABC0987654321DEF_====
  Content-Type: text/html;
           charset=&amp;quot;iso-8859-1&amp;quot;
  Content-Transfer-Encoding: quoted-printable


  &amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY bgColor=3D#ffffff&amp;gt;
  &amp;lt;iframe src=3Dcid:EA4DMGBP9p height=3D0 width=3D0&amp;gt;
  &amp;lt;/iframe&amp;gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
  --====_ABC0987654321DEF_====--

  --====_ABC1234567890DEF_====
  Content-Type: audio/x-wav;
           name=&amp;quot;filename.ext.ext&amp;quot;
  Content-Transfer-Encoding: base64
  Content-ID: &amp;lt;EA4DMGBP9p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This particular example results in executable code running on the target computer. The attacker could just as easily insert HTML using the URL format described earlier, like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;http://www.example.com/search.pl?text=&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ldquo;cross-site&amp;rdquo; part of &amp;ldquo;cross-site scripting&amp;rdquo; comes into play when dealing with the web browser&amp;rsquo;s internal restrictions on cookies. The JavaScript interpreter built into modern web browsers only allows the originating site to access it&amp;rsquo;s own private cookies. By taking advantage of poorly coded scripts the attacker can bypass this restriction.&lt;/p&gt;

&lt;p&gt;Any poorly coded script, written in Perl or otherwise, is a potential target. The key to solving cross-site scripting attacks is to never, ever trust data that comes from the web browser. Any input data should be considered guilty unless proven innocent.&lt;/p&gt;

&lt;h3 id=&#34;solutions&#34;&gt;Solutions&lt;/h3&gt;

&lt;p&gt;There are a number of ways of solving this problem for Perl and mod_perl systems. All are quite simple, and should be used everywhere there might be the potential for user submitted data to appear on the resulting web page.&lt;/p&gt;

&lt;p&gt;Consider the following script &lt;em&gt;search.pl&lt;/em&gt;. It is a simple CGI script that takes a given parameter named &amp;lsquo;text&amp;rsquo; and prints it on the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/bin/perl
        use CGI;

        my $cgi = CGI-&amp;gt;new();
        my $text = $cgi-&amp;gt;param(&#39;text&#39;);

        print $cgi-&amp;gt;header();
        print &amp;quot;You entered $text&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script is vulnerable to cross-site scripting attacks because it blindly prints out submitted form data. To rid ourselves of this vulnerability we can either perform input validation, or insure that user-submitted data is always HTML escaped before displaying it.&lt;/p&gt;

&lt;p&gt;We can add input validation to our script by inserting the following line of code before any output. This code eliminates everything but letters, numbers, and spaces from the submitted input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $text =~ s/[^A-Za-z0-9 ]*/ /g;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type of input validation can be quite a chore. Another solution involves escaping any HTML in the submitted data. We can do this by using the HTML::Entities module bundled in the libwww-perl CPAN distribution. The HTML::Entities module provides the function HTML::Entities::encode(). It encodes HTML characters as HTML entity references. For example, the character &lt;strong&gt;&amp;lt;&lt;/strong&gt; is converted to &lt;strong&gt;&amp;lt;&lt;/strong&gt;, &lt;strong&gt;&amp;ldquo;&lt;/strong&gt; is converted to &lt;strong&gt;&amp;quot;&lt;/strong&gt;, and so on. Here is a version of &lt;em&gt;search.pl&lt;/em&gt; that uses this new feature.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #!/usr/bin/perl
        use CGI;
        use HTML::Entities;

        my $cgi = CGI-&amp;gt;new();
        my $text = $cgi-&amp;gt;param(&#39;text&#39;);

        print $cgi-&amp;gt;header();
        print &amp;quot;You entered &amp;quot;, HTML::Entities::encode($text);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;solutions-for-mod-perl&#34;&gt;Solutions for mod_perl&lt;/h3&gt;

&lt;p&gt;All of the previous solutions apply to the mod_perl programmer too. An Apache::Registry script or mod_perl handler can use the same techniques to eliminate cross-site scripting holes. For higher performance you may want to consider switching calls from HTML::Entities::encode() to mod_perl&amp;rsquo;s much faster Apache::Util::escape_html() function. Here&amp;rsquo;s an example of an Apache::Registry script equivilant to the preceding &lt;em&gt;search.pl&lt;/em&gt; script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Apache::Util;
        use Apache::Request;

        my $apr = Apache::Request-&amp;gt;new(Apache-&amp;gt;request);

        my $text = $apr-&amp;gt;param(&#39;text&#39;);

        $r-&amp;gt;content_type(&amp;quot;text/html&amp;quot;);
        $r-&amp;gt;send_http_header;
        $r-&amp;gt;print(&amp;quot;You entered &amp;quot;, Apache::Util::html_encode($text));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a while you may find that typing Apache::Util::html_encode() over and over becomes quite tedious, especially if you use input validation in some places, but not others. To simplify this situation consider using the Apache::TaintRequest module. This module is available from CPAN or from the &lt;a href=&#34;http://www.modperlcookbook.org/&#34;&gt;mod_perl Developer&amp;rsquo;s Cookbook&lt;/a&gt; web site.&lt;/p&gt;

&lt;p&gt;Apache::TaintRequest automates the tedious process of HTML escaping data. It overrides the print mechanism in the mod_perl Apache module. The new &lt;em&gt;print&lt;/em&gt; method tests each chunk of text for taintedness. If it is tainted the module assumes the worst and html-escapes it before printing.&lt;/p&gt;

&lt;p&gt;Perl contains a set of built-in security checks know as &lt;em&gt;taint mode&lt;/em&gt;. These checks protect you by insuring that &lt;em&gt;tainted&lt;/em&gt; data that comes from somewhere outside your program is not used directly or indirectly to alter files, processes, or directories. Apache::TaintRequest extends this list of &lt;em&gt;dangerous&lt;/em&gt; operations to include printing HTML to a web client. To &lt;em&gt;untaint&lt;/em&gt; your data just process it with a regular expression. Tainting is the Perl web developer&amp;rsquo;s most powerful defense against security problems. Consult the &lt;strong&gt;perlsec&lt;/strong&gt; man page and use it for every web application you write.&lt;/p&gt;

&lt;p&gt;To activate Apache::TaintRequest simply add the following directive to your httpd.conf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       PerlTaintCheck on    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This activates taint mode for the entire mod_perl server.&lt;/p&gt;

&lt;p&gt;The next thing we need to do modify our script or handler to use Apache::TaintRequest instead of Apache::Request. The preceding script might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        use Apache::TaintRequest;

        my $apr = Apache::TaintRequest-&amp;gt;new(Apache-&amp;gt;request);

        my $text = $apr-&amp;gt;param(&#39;text&#39;);

        $r-&amp;gt;content_type(&amp;quot;text/html&amp;quot;);
        $r-&amp;gt;send_http_header;

        $r-&amp;gt;print(&amp;quot;You entered &amp;quot;, $text);

        $text =~ s/[^A-Za-z0-9 ]//;
        $r-&amp;gt;print(&amp;quot;You entered &amp;quot;, $text);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script starts by storing the tainted form data &amp;lsquo;text&amp;rsquo; in $text. If we print this data we will find that it is automatically HTML escaped. Next we do some input validation on the data. The following print statement does not result in any HTML escaping of data.&lt;/p&gt;

&lt;h3 id=&#34;tainting-apache-request-apache-taintrequest&#34;&gt;Tainting + Apache::Request&amp;hellip;. Apache::TaintRequest&lt;/h3&gt;

&lt;p&gt;The implementation code for Apache::TaintRequest is quite simple. It&amp;rsquo;s a subclass of the Apache::Request module, which provides the form field and output handling. We override the &lt;em&gt;print&lt;/em&gt; method, because that is where we HTML escape the data. We also override the &lt;em&gt;new&lt;/em&gt; method &amp;ndash; this is where we use Apache&amp;rsquo;s TIEHANDLE interface to insure that output to STDOUT is processed by our print() routine.&lt;/p&gt;

&lt;p&gt;Once we have output data we need to determine if it is tainted. This is where the &lt;em&gt;Taint&lt;/em&gt; module (also available from CPAN) becomes useful. We use it in the &lt;em&gt;print&lt;/em&gt; method to determine if a printable string is tainted and needs to be HTML escaped. If it is tainted we use the mod_perl function Apache::Util::html_escape() to escape the html.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package Apache::TaintRequest;

use strict;
use warnings;

use Apache;
use Apache::Util qw(escape_html);
use Taint qw(tainted);

$Apache::TaintRequest::VERSION = &#39;0.10&#39;;
@Apache::TaintRequest::ISA = qw(Apache);

sub new {
  my ($class, $r) = @_;

  $r ||= Apache-&amp;gt;request;

  tie *STDOUT, $class, $r;

  return tied *STDOUT;
}


sub print {
  my ($self, @data) = @_;

  foreach my $value (@data) {
    # Dereference scalar references.
    $value = $$value if ref $value eq &#39;SCALAR&#39;;

    # Escape any HTML content if the data is tainted.
    $value = escape_html($value) if tainted($value);
  }

  $self-&amp;gt;SUPER::print(@data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To finish off this module we just need the TIEHANDLE interface we specified in our &lt;em&gt;new()&lt;/em&gt; method. The following code implements a &lt;em&gt;TIEHANDLE&lt;/em&gt; and &lt;em&gt;PRINT&lt;/em&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub TIEHANDLE {
  my ($class, $r) = @_;

  return bless { r =&amp;gt; $r }, $class;
}

sub PRINT {
  shift-&amp;gt;print(@_);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The end result is that Tainted data is escaped, and untainted data is passed unaltererd to the web client.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Cross-site scripting is a serious problem. The solutions, input validation and HTML escaping are simple but must be applied every single time. An application with a single overlooked form field is just as insecure as one that does no checking whatsoever.&lt;/p&gt;

&lt;p&gt;To insure that we always check our data Apache::TaintRequest was developed. It builds upon Perl&amp;rsquo;s powerful data tainting feature by automatically HTML escaping data that is not input validated when it is printed.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cert.org/advisories/CA-2000-02.html&#34;&gt;CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.modperlcookbook.org&#34;&gt;The mod_perl Developer&amp;rsquo;s Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.modperlcookbook.org/code.html&#34;&gt;Download Apache::TaintRequest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>

