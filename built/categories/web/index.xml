<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/web/</link>
    <description>Recent content in Web on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jul 2020 09:27:22 +0000</lastBuildDate>
    <atom:link href="/categories/web/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shortcode_test</title>
      <link>http://localhost:1313/article/shortcode_test/</link>
      <pubDate>Sun, 12 Jul 2020 09:27:22 +0000</pubDate>
      
      <guid>http://localhost:1313/article/shortcode_test/</guid>
      <description>&lt;p&gt;The article body goes here. Don&amp;rsquo;t forget to delete this stuff!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Business::ISBN&#34;&gt;Business::ISBN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlipc.html&#34;&gt;perlipc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perldoc.perl.org/perlsec.html#Taint-mode-and-%40INC&#34;&gt;with anchor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-write-your-first-article-for-perl-com/&#34;&gt;How to write your first article for Perl.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/article/how-to-find-a-programming-topic-to-write-about/&#34;&gt;How to find a programming topic to write about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Inspecting Catalyst</title>
      <link>http://localhost:1313/article/inspecting-catalyst/</link>
      <pubDate>Mon, 11 Nov 2019 10:34:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/inspecting-catalyst/</guid>
      <description>

&lt;p&gt;One of the convenient things about &lt;a href=&#34;https://metacpan.org/pod/Catalyst&#34;&gt;Catalyst&lt;/a&gt; is it lets you register controller methods as actions, so you don&amp;rsquo;t need a separate routing table of URIs to controller methods. A consequence of this though, is that when the web app gets large enough it can be tricky to keep track of all the different paths the app is responding to.&lt;/p&gt;

&lt;p&gt;Catalyst&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::DispatchType::Chained&#34;&gt;chained dispatch&lt;/a&gt; promotes code reuse, but exacerbates the issue by obfuscating route matching. Catalyst also permits declaring controller methods which match an unlimited number of paths after a prefix; another recipe for unpredictablity.&lt;/p&gt;

&lt;p&gt;Take a look at the MetaCPAN &lt;a href=&#34;https://github.com/metacpan/metacpan-web&#34;&gt;source code&lt;/a&gt;. Can you tell all of the routes it responds to?&lt;/p&gt;

&lt;p&gt;As far as I know, the only way is to launch the app in debug mode and Catalyst will print a list of all the controller actions and their URIs. I suppose you could try parsing that output, but that feels like a hack. If we&amp;rsquo;re programming a web app, surely we should be able to programmatically retrieve all the routes &lt;em&gt;we&amp;rsquo;ve&lt;/em&gt; created, without having to launch the app.&lt;/p&gt;

&lt;h2 id=&#34;catalyst-plugin-actionpaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/h2&gt;

&lt;p&gt;With that straw man sufficiently propped up, allow me to introduce &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Plugin::ActionPaths&#34;&gt;Catalyst::Plugin::ActionPaths&lt;/a&gt;. I wrote it a while ago to implement some &lt;a href=&#34;http://localhost:1313/article/208/2016/1/5/Save-time-with-compile-tests/&#34;&gt;axiomatic&lt;/a&gt; tests at work which checked for misconfigured Catalyst routes.&lt;/p&gt;

&lt;p&gt;The plugin adds the &lt;code&gt;get_action_paths&lt;/code&gt; method to the Catalyst context object. The method returns an arrayref of the application&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Action&#34;&gt;Catalyst::Action&lt;/a&gt; objects. The way Catalyst&amp;rsquo;s routing works is it loops through every action object until it finds one that matches the request, or returns in failure.&lt;/p&gt;

&lt;p&gt;To use the ActionPaths plugin on the MetaCPAN app I forked and cloned the &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;repo&lt;/a&gt;, and added the ActionPaths plugin to the application &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/08d9a4929887c6bfb39271378415f6190a1a010a&#34;&gt;class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After installing &lt;a href=&#34;https://metacpan.org/pod/Carton&#34;&gt;Carton&lt;/a&gt; from the root project directory I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ carton install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which installed of the applications dependencies into the &lt;code&gt;./local&lt;/code&gt; directory. This is a nice way to avoid clobbering your system or user-installed modules with the application&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;I also had to install the libxml2-dev and node-less Ubuntu packages to provide all of the app&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;Finally I wrote this &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/commit/d17066f41945692a960ba80ed1865f22286efb78&#34;&gt;script&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.16&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cwd;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Basename;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Spec;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $root_dir;
&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bin_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::Basename::dirname(__FILE__);
  $root_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cwd::abs_path(File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;catdir($bin_dir, File::Spec&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;updir));
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/local/lib/perl5&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# carton installed deps&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$root_dir/lib&amp;#34;&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;# root application dir&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Catalyst::Test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MetaCPAN::Web&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($res, $c) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ctx_request(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_action_paths}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It begins by figuring out the root application directory, and adding the paths to the local Carton-installed and the MetaCPAN project modules (it uses &lt;a href=&#34;https://metacpan.org/pod/lib&#34;&gt;lib&lt;/a&gt; to catch architecture specific nested paths).&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Test&#34;&gt;Catalyst::Test&lt;/a&gt; to load the MetaCPAN::Web application. Catalyst::Test exports the &lt;code&gt;ctx_request&lt;/code&gt; method, which returns the Catalyst context object &lt;code&gt;$c&lt;/code&gt;. From there I can call &lt;code&gt;get_action_paths&lt;/code&gt; and print out all the routes served by MetaCPAN.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bin/dump-catalyst-paths
MetaCPAN::Web::Controller::Root   index           /
MetaCPAN::Web::Controller::Root   default         /...
MetaCPAN::Web::Controller::About  about           /about/
MetaCPAN::Web::Controller::About  contact         /about/contact/
MetaCPAN::Web::Controller::About  contributors    /about/contributors/
MetaCPAN::Web::Controller::About  development     /about/development/
MetaCPAN::Web::Controller::About  faq             /about/faq/
MetaCPAN::Web::Controller::About  meta_hack       /about/meta_hack/
MetaCPAN::Web::Controller::About  metadata        /about/metadata/
MetaCPAN::Web::Controller::About  missing_modules /about/missing_modules/
MetaCPAN::Web::Controller::About  resources       /about/resources/
MetaCPAN::Web::Controller::About  sponsors        /about/sponsors/
MetaCPAN::Web::Controller::About  stats           /about/stats/
MetaCPAN::Web::Controller::Author index           /author/*
# output truncated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An asterisk in the path is a placeholder. An ellipses means the path accepts unlimited(!) placeholders.&lt;/p&gt;

&lt;p&gt;In this case I&amp;rsquo;m just printing the controller methods and URIs they match, but you could implement all kinds of checks on the Catalyst::Action objects to detect violations of agreed upon development best practices.&lt;/p&gt;

&lt;h2 id=&#34;a-better-way&#34;&gt;A better way&lt;/h2&gt;

&lt;p&gt;The solution above works, but it feels a bit gross. I&amp;rsquo;ve added a plugin to the Catalyst app which the app doesn&amp;rsquo;t actually use. The script fakes a request to the app &lt;em&gt;just&lt;/em&gt; to get &lt;code&gt;$c&lt;/code&gt;. I&amp;rsquo;m using a test module but running no tests. Surely there is a better way.&lt;/p&gt;

&lt;p&gt;Typically, Catalyst applications call the &lt;code&gt;setup&lt;/code&gt; method in the application module (for MetaCPAN that&amp;rsquo;s &lt;a href=&#34;https://github.com/dnmfarrell/metacpan-web/blob/7866904ca299701bfa850c10a9e0456f73109bc4/lib/MetaCPAN/Web.pm&#34;&gt;MetaCPAN::Web&lt;/a&gt;). The &lt;code&gt;setup&lt;/code&gt; method bootstraps the web application, doing things like configuring directories, initializing the logger, loading plugins and building the request dispatcher. These are stored in the application package which is a singleton.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Catalyst::Plugin::ActionPaths::get_action_paths&lt;/code&gt; uses the Catalyst context to get the dispatcher object, which is all it needs to extract the paths from the Catalyst app. So instead of using &lt;code&gt;request_ctx&lt;/code&gt; to get the context to get the dispatcher, I can just stand up the application myself and pluck the dispatcher out of the application package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; MetaCPAN::Web; &lt;span style=&#34;color:#75715e&#34;&gt;# calls setup()&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dispatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MetaCPAN::Web&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dispatcher;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if I re-write the &lt;code&gt;get_action_paths&lt;/code&gt; method to just use the dispatcher object directly, I can extract all the paths from the app without using &lt;code&gt;request_ctx&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_action_paths($dispatcher);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@{$actions}) {
  say join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{class}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name}, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{path};
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works. Of course if I can dynamically load the MetaCPAN app and extract its routes, then I can do that for any Catalyst app. That&amp;rsquo;s what &lt;a href=&#34;https://gist.github.com/dnmfarrell/cad2c6f6395850cb1ceca48b3ba05b7c&#34;&gt;dump-catalyst-paths&lt;/a&gt; does. To dump a Catalyst app&amp;rsquo;s routes just provide the package name and any additional paths to include:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./dump-catalyst-routes MetaCPAN::Web lib local/lib/perl5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;postscript&#34;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re just a couple of months past the 10th anniversary of the publication of &lt;a href=&#34;https://www.apress.com/gp/book/9781430223658&#34;&gt;Catalyst: The Definitive Guide&lt;/a&gt;. Two of our core applications at work are Catalyst apps. As one of Perl&amp;rsquo;s premier MVC apps, it&amp;rsquo;s remarkable how resilient it&amp;rsquo;s been. That&amp;rsquo;s a testament to the implementation (which got a lot of things right) and more recently the work done by its maintainer &lt;a href=&#34;https://metacpan.org/author/JJNAPIORK&#34;&gt;John Napiorkowski&lt;/a&gt;. Thanks John!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re considering web application programming with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Kelp&#34;&gt;Kelp&lt;/a&gt; frameworks are modern alternatives to Catalyst.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spidering websites with Headless Chrome and Selenium</title>
      <link>http://localhost:1313/article/spidering-websites-with-headless-chrome-and-selenium/</link>
      <pubDate>Sun, 13 Jan 2019 20:31:37 +0000</pubDate>
      
      <guid>http://localhost:1313/article/spidering-websites-with-headless-chrome-and-selenium/</guid>
      <description>

&lt;p&gt;Over the holidays I was working on a project that needed to download content from different websites. I needed a web spider, but the typical Perl options like &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW:Mechanize&lt;/a&gt; wouldn&amp;rsquo;t cut it, as with JavaScript controlling the content on many websites, I needed a JavaScript-enabled browser. But browsers consume lots of memory - what to do?&lt;/p&gt;

&lt;p&gt;The answer was to use headless Chrome, which works exactly like normal except it has no graphical display, reducing its memory footprint. I can control it using &lt;a href=&#34;https://metacpan.org/pod/Selenium::Remote::Driver&#34;&gt;Selenium::Remote::Driver&lt;/a&gt; and Selenium server. Here&amp;rsquo;s how I did it.&lt;/p&gt;

&lt;h2 id=&#34;non-perl-setup&#34;&gt;Non-Perl Setup&lt;/h2&gt;

&lt;p&gt;Obviously I needed to install the Chrome browser. On Linux that usually involves adding the Chrome repo, and then installing the Chrome package. On Fedora it was as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dnf install fedora-workstation-repositories
sudo dnf config-manager --set-enabled google-chrome
sudo dnf install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also needed ChromeDriver, which implements WebDriver&amp;rsquo;s wire protocol for Chrome. In other words, it&amp;rsquo;s the means by which Selenium talks with Chrome:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
unzip chromedriver_linux64.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I put it under &lt;code&gt;/usr/bin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown root:root chromedriver
sudo chmod 755 chromedriver
sudo mv chromedriver /usr/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I downloaded Selenium server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://selenium-release.storage.googleapis.com/3.14/selenium-server-standalone-3.14.0.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This version of Selenium requires Java version 8, which I installed via its package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dnf install java-1.8.0-openjdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally I launched Selenium server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -Dwebdriver.chrome.driver=/usr/bin/chromedriver -jar selenium-server-standalone-3.14.0.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This must be running in order for Perl to communicate with Chrome using Selenium.&lt;/p&gt;

&lt;h2 id=&#34;a-basic-spider&#34;&gt;A basic spider&lt;/h2&gt;

&lt;p&gt;I wrote a basic spider script, here&amp;rsquo;s a simplified version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Selenium::Remote::Driver;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Encode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;encode&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Selenium::Remote::Driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
  browser_name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chrome&amp;#39;&lt;/span&gt;,
  extra_capabilities &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { chromeOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {args &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;window-size=1920,1080&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;headless&amp;#39;&lt;/span&gt;,
  ]}},
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://example.com&amp;#39;&lt;/span&gt;;

spider_site($driver, $url, $depth);

$driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script initializes a &lt;code&gt;Selenium::Remote::Driver&lt;/code&gt; object. Note how it passes options to Chrome: the &lt;code&gt;window-size&lt;/code&gt; option is an example of a key-pair option, whereas &lt;code&gt;headless&lt;/code&gt; is a boolean. Chrome accepts a &lt;em&gt;lot&lt;/em&gt; of &lt;a href=&#34;https://peter.sh/experiments/chromium-command-line-switches/&#34;&gt;options&lt;/a&gt;. Some others which were useful for me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allow-running-insecure-content&lt;/code&gt; - let Chrome load websites with invalid security certificates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disable-infobars&lt;/code&gt; - disable the &amp;ldquo;Chrome is being controlled by software&amp;rdquo; notification&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-sandbox&lt;/code&gt; - disable the sandbox security feature, lets you run headless Chrome as root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The script initializes a &lt;code&gt;%visited&lt;/code&gt; hash to store URLs the browser visits, to avoid requesting the same URL twice. The &lt;code&gt;$depth&lt;/code&gt; variable determines how many levels deep the spider should go: with a value of 1 it will visit all links on the first page it loads, but none after that. The &lt;code&gt;$url&lt;/code&gt; variable determines the starting web page to visit.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;spider_site&lt;/code&gt; function is recursive:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spider_site&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($driver, $url, $depth) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
  warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fetching $url\n&amp;#34;&lt;/span&gt;;
  $driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get($url);
  $visited{$url}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_body;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;, $text);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($depth &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $driver&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find_elements(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag_name&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $l (@links) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $link_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval { $l&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;) };
      push @urls, $link_url &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $link_url;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $u (@urls) {
      spider_site($driver, $u, $depth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($visited{$u});
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It fetches the given &lt;code&gt;$url&lt;/code&gt;, printing the text content of the webpage to STDOUT. It encodes the output before printing it: I found this was necessary to avoid multibyte encoding issues. If the spider hasn&amp;rsquo;t reached full depth, it gets all links on the page, and spiders each one that it hasn&amp;rsquo;t already visited. I wrapped the &lt;code&gt;get_attribute&lt;/code&gt; method call in &lt;code&gt;eval&lt;/code&gt; because it can fail if the link disappears from the website after it was found.&lt;/p&gt;

&lt;h2 id=&#34;an-improved-spider&#34;&gt;An improved spider&lt;/h2&gt;

&lt;p&gt;The spider script shown above is functional but rudimentary. I wrote a more &lt;a href=&#34;https://gist.github.com/dnmfarrell/5dde6d3957bf9ae037e170cdb44f75a5&#34;&gt;advanced&lt;/a&gt; one that has some nice features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pings Selenium server on startup and quits if it&amp;rsquo;s not responding&lt;/li&gt;
&lt;li&gt;Restricts the links followed to those which match the domain of the starting URL to avoid downloading content from unrelated websites&lt;/li&gt;
&lt;li&gt;Converts static variables like &lt;code&gt;$depth&lt;/code&gt; into command line options&lt;/li&gt;
&lt;li&gt;Adds a debugging mode to print out the decisions made by the spider&lt;/li&gt;
&lt;li&gt;Accepts a list of URLs instead of just one at a time&lt;/li&gt;
&lt;li&gt;Spiders URLs in parallel using &lt;a href=&#34;https://metacpan.org/pod/Parallel::ForkManager&#34;&gt;Parallel::ForkManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prints website content as gzipped files to separate content from different starting URLs &lt;em&gt;and&lt;/em&gt; save disk space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other improvements I&amp;rsquo;d like to make, but those were enough to get the job done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl and CGI</title>
      <link>http://localhost:1313/article/perl-and-cgi/</link>
      <pubDate>Mon, 12 Nov 2018 10:36:08 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-and-cgi/</guid>
      <description>

&lt;p&gt;CGI stands for &lt;a href=&#34;https://tools.ietf.org/html/rfc3875#section-6.2.1&#34;&gt;Common Gateway Interface&lt;/a&gt;, it&amp;rsquo;s a protocol for executing scripts via web requests, and in the late 1990&amp;rsquo;s was the main way to write dynamic programs for the Web. It&amp;rsquo;s also the name of the Perl &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;module&lt;/a&gt; we used (and for me, still use) to code for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; you probably don&amp;rsquo;t want to use CGI for modern web development, see &lt;a href=&#34;#why-not-to-use-cgi&#34;&gt;Why Not to Use CGI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-and-http&#34;&gt;CGI and HTTP&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably heard of HTTP (HyperText Transfer Protocol), which is the communications protocol used by most Internet services. Broadly speaking, CGI programs receive HTTP requests, and return HTTP responses. An HTTP response header must include the status and the content-type. CGI (the interface) makes this easy.&lt;/p&gt;

&lt;p&gt;We could hardcode a Perl script to return an HTTP response header and HTML in the body:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
Status: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type: text&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But CGI.pm can handle the header for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!&lt;/span&gt;doctype html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; HTML Goes Here &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you don&amp;rsquo;t have to just send HTML text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END&amp;#39;&lt;/span&gt;;
This is now text
&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that is not the limit, by far. The content-type is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;Multipurpose Internet Mail Extension (MIME) type&lt;/a&gt;, and it determines how the browser handles the message once it returns. The above example treats the &amp;ldquo;This is now text&amp;rdquo; message as text, and displays it as such. If the content-type was &amp;ldquo;text/html&amp;rdquo;, it would be parsed for HTML like a web page. If it was &amp;ldquo;application/json&amp;rdquo;, it might be displayed like text, or formatted into a browsable form, depending on your browser or extensions. If it was &amp;ldquo;application/vnd.ms-excel&amp;rdquo; or even &amp;ldquo;text/csv&amp;rdquo;, the browser would likely open in in Excel or another spreadsheet program, or possibly directly into a gene sequencer, like happens to those I generate at work.&lt;/p&gt;

&lt;p&gt;And, if the program was this &amp;ndash;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpg&amp;#39;&lt;/span&gt; );
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $img, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/user/images/author/dave-jacoby.jpg&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$img&amp;gt;&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;ndash; you would get this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/author/dave-jacoby.jpg&#34; alt=&#34;/images/author/dave-jacoby.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;processing-input&#34;&gt;Processing input&lt;/h2&gt;

&lt;p&gt;The first way to pass data is with the query string, (the portion of a URI beginning with &lt;code&gt;?&lt;/code&gt;), which you see in URLs like &lt;code&gt;https://example.com/?foo=bar&lt;/code&gt;. This uses the &amp;ldquo;GET&amp;rdquo; request method, and becomes available to the program as &lt;code&gt;$ENV-&amp;gt;{QUERY_STRING}&lt;/code&gt;, which in this case is &lt;code&gt;foo=bar&lt;/code&gt; (CGI programs receive their arguments as environment variables). But CGI provides the &lt;code&gt;param&lt;/code&gt; method which parses the query string into key value pairs, so you can work with them like a hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param($_) } $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param() ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qq{PARAM:\N}&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $k ( sort keys %param ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, $k, $param{$k};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;# PARAM:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# foo: bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, now, let&amp;rsquo;s make a web page like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/url/of/simple.cgi&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And click submit. The browser will send an HTTP &amp;ldquo;POST&amp;rdquo; request, with the form input as key value pairs in the request body. CGI handles this and places the data in &lt;code&gt;$cgi-&amp;gt;param&lt;/code&gt;, just like with &amp;ldquo;GET&amp;rdquo;. Only, with &amp;ldquo;POST&amp;rdquo; the size of input can be much larger (URL&amp;rsquo;s are generally limited to 2048 bytes by browsers).&lt;/p&gt;

&lt;h2 id=&#34;generating-html&#34;&gt;Generating HTML&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make that form above, using the HTML-generation techniques that come with CGI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output;
$output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start_form(
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/simple.cgi&amp;#34;&lt;/span&gt;
);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;textfield( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;end_form;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with this, is the code to generate HTML with CGI can get very long and unreadable. The maintainers of CGI agree, which is why this is at the top of &lt;a href=&#34;https://metacpan.org/pod/CGI#HTML-Generation-functions-should-no-longer-be-used&#34;&gt;the documentation for CGI.pm&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All HTML generation functions within CGI.pm are no longer being maintained. [&amp;hellip;] The rationale for this is that the HTML generation functions of CGI.pm are an obfuscation at best and a maintenance nightmare at worst. You should be using a template engine for better separation of concerns. See &lt;a href=&#34;https://metacpan.org/pod/CGI::Alternatives&#34;&gt;CGI::Alternatives&lt;/a&gt; for an example of using CGI.pm with the &lt;a href=&#34;https://metacpan.org/pod/Template::Toolkit&#34;&gt;Template::Toolkit&lt;/a&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Template Toolkit, that form might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; CGI;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Template;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cgi      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGI&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $input    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;DATA&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $data     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { action &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/url/of/program&amp;#39;&lt;/span&gt;} ;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $cgi&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;header;
$template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;process(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$input,$data)
    &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Template process failed&amp;#34;&lt;/span&gt;, $template&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error();

__DATA__
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;form method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[% action %]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;input type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use Template Toolkit for all my server-side web work. It&amp;rsquo;s also the default in many of Perl&amp;rsquo;s web frameworks.&lt;/p&gt;

&lt;h2 id=&#34;configuring-cgi-on-apache&#34;&gt;Configuring CGI on Apache&lt;/h2&gt;

&lt;p&gt;To use CGI, your web server should have &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_cgi.html&#34;&gt;mod_cgi&lt;/a&gt; installed. Once installed, you will have to to configure your server to execute CGI programs.&lt;/p&gt;

&lt;p&gt;The first way is to have &lt;code&gt;cgi-bin&lt;/code&gt; directories where every file gets executed instead of transferred.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www/cgi-bin&amp;quot;&amp;gt;
    Options ExecCGI
    SetHandler cgi-script
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other is to allow CGI to be enabled per directory, with a configuration that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &amp;quot;/home/*/www&amp;quot;&amp;gt;
    Options +ExecCGI
    AddHandler cgi-script .cgi
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add a &lt;code&gt;.htaccess&lt;/code&gt; file in each directory that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler cgi-script .cgi
Options +ExecCGI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that &lt;code&gt;foo.pl&lt;/code&gt; will transfer but &lt;code&gt;foo.cgi&lt;/code&gt; will run, even if both are executable.&lt;/p&gt;

&lt;h2 id=&#34;why-not-to-use-cgi&#34;&gt;Why not to use CGI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg202130.html&#34;&gt;In May 2013, Ricardo Signes, then Perl5 Pumpking, sent this to the Perl5 Porters list&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it&amp;rsquo;s time to seriously consider removing CGI.pm from the core distribution. It is no longer what I&amp;rsquo;d point &lt;em&gt;anyone&lt;/em&gt; at for writing &lt;em&gt;any&lt;/em&gt; sort of web code. It is in the core, as far as I know, because once it was the state of the art, and a major reason for many people to use the language. I don&amp;rsquo;t think either is true now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was marked deprecated with 5.20 and removed from Core with 5.22. This is not catastrophic; it is still available in CPAN, so you would have to install it, or have your administrator install it, depending on your circumstances.&lt;/p&gt;

&lt;p&gt;So, why did CGI drop from &amp;ldquo;state of the art&amp;rdquo; to discouraged by its own maintainers?&lt;/p&gt;

&lt;p&gt;There are two big issues with CGI: speed and complexity. Every HTTP request triggers the forking of a new process on the web server, which is costly for server resources. A more efficient and faster way is to use a multi-process daemon which does its forking on startup and maintains a pool of processes to handle requests.&lt;/p&gt;

&lt;p&gt;CGI isn&amp;rsquo;t good at managing the complexity of larger web applications: it has no MVC architecture to help developers separate concerns. This tends to lead to hard-to-maintain programs.&lt;/p&gt;

&lt;p&gt;The rise of web frameworks such as Ruby on Rails, and the application servers they run on, have done much to solve both problems. There are many web frameworks written in Perl; among the most popular are &lt;a href=&#34;https://metacpan.org/pod/Catalyst::Manual&#34;&gt;Catalyst&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/pod/Mojolicious&#34;&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CGI also contains a security &lt;a href=&#34;https://metacpan.org/pod/distribution/CGI/lib/CGI.pod#Fetching-the-value-or-values-of-a-single-named-parameter&#34;&gt;vulnerability&lt;/a&gt; which must be coded around to avoid parameter injection.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;good&amp;rdquo; parts of CGI.pm, the header creation and parameter parsing, are well-explained in the module&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/CGI&#34;&gt;documentation&lt;/a&gt;. As for the deprecated HTML generation functions, they are documented &lt;a href=&#34;https://metacpan.org/pod/CGI::HTML::Functions&#34;&gt;separately&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lincoln Stein, the creator of CGI.pm also wrote the &lt;a href=&#34;https://www.amazon.com/Official-Guide-Programming-CGI-pm-Lincoln/dp/0471247448&#34;&gt;Official Guide&lt;/a&gt;. The book is 20 years old, and out of date but remains a clear and concise resource about CGI.pm.&lt;/p&gt;

&lt;p&gt;Lee Johnson, the current maintainer of CGI.pm wrote a long form blog &lt;a href=&#34;https://leejo.github.io/2016/02/22/all_software_is_legacy/&#34;&gt;post&lt;/a&gt; about the history of CGI, its current state and future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get an in-browser remote desktop with Mojolicious and noVNC</title>
      <link>http://localhost:1313/article/212/2016/2/2/Get-an-in-browser-remote-desktop-with-Mojolicious-and-noVNC/</link>
      <pubDate>Tue, 02 Feb 2016 13:41:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/212/2016/2/2/Get-an-in-browser-remote-desktop-with-Mojolicious-and-noVNC/</guid>
      <description>

&lt;p&gt;While SSH is a staple of remote system administration, sometimes only a GUI will do. Perhaps the remote system doesn&amp;rsquo;t have a terminal environment to connect to; perhaps the target application doesn&amp;rsquo;t present an adequate command line interface; perhaps there is an existing GUI session you need to interact with. There can be all kinds of reasons.&lt;/p&gt;

&lt;p&gt;For this purpose, a generic type of remote desktop service called VNC is commonly used. The servers are easy to install, start on seemingly all platforms and lots of hardware has a VNC server embedded for remote administration. Clients are similarly easy to use, but when building a management console in the web, wouldn&amp;rsquo;t it be nice to have the console view right in your browser?&lt;/p&gt;

&lt;p&gt;Luckily there is a pure JavaScript VNC client called &lt;a href=&#34;https://github.com/kanaka/noVNC&#34;&gt;noVNC&lt;/a&gt; noVNC listens for VNC traffic over WebSockets, which is convenient for browsers but isn&amp;rsquo;t supported by most VNC servers. To overcome this problem they provide a command-line application called &lt;a href=&#34;https://github.com/kanaka/websockify&#34;&gt;Websockify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Websockify is a relay that connects to a TCP connection (the VNC server) and exposes the traffic as a WebSocket stream such that a browser client can listen on. While this does fix the problem it isn&amp;rsquo;t an elegant solution. Each VNC Server needs its own instance of Websockify requiring a separate port. Further you either need to leave these connected at all times in case of a web client or else spawn them on demand and clean them up later.&lt;/p&gt;

&lt;h2 id=&#34;mojolicious-to-the-rescue&#34;&gt;Mojolicious to the Rescue&lt;/h2&gt;

&lt;p&gt;Mojolicious has a built-in event-based &lt;a href=&#34;http://mojoliciou.us/perldoc/Mojo/IOLoop/Client&#34;&gt;TCP Client&lt;/a&gt; and native &lt;a href=&#34;http://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#WebSockets&#34;&gt;WebSocket&lt;/a&gt; handling. If you are already serving your site with Mojolicious, why not let it do the TCP/WebSocket relay work too? Even if you aren&amp;rsquo;t, the on-demand nature of the solution I&amp;rsquo;m going to show would be useful as a stand-alone app for this single purpose versus the websockify application.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Guides/Tutorial&#34;&gt;Mojolicious::Lite&lt;/a&gt; application which serves the noVNC client when you request a url like &lt;code&gt;/192.168.0.1&lt;/code&gt;. When the page loads, the client requests the WebSocket route at &lt;code&gt;/proxy?target=192.168.0.1&lt;/code&gt; which establishes the bridge. This example is bundled with my forthcoming wrapper module with a working name of &lt;a href=&#34;https://github.com/jberger/Mojo-Websockify/blob/master/ex/client.pl&#34;&gt;Mojo::Websockify&lt;/a&gt;. The code is remarkably simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::IOLoop;

websocket &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/proxy&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render_later&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;on(finish &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;websocket closing&amp;#39;&lt;/span&gt; });

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx;
  $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;with_protocols(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $host &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s{:(\d+)$}{}&lt;/span&gt; ? $1 : &lt;span style=&#34;color:#ae81ff&#34;&gt;5901&lt;/span&gt;;

  Mojo::IOLoop&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;client(address &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $host, port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $port, &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($loop, $err, $tcp) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;finish(&lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TCP connection error: $err&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $err;
    $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;on(error &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;finish(&lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TCP error: $_[1]&amp;#34;&lt;/span&gt;) });

    $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;on(read &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tcp, $bytes) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
      $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send({binary &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $bytes});
    });

    $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;on(binary &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($tx, $bytes) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;
      $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;write($bytes);
    });

    $tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;on(finish &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
      $tcp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;close;
      undef $tcp;
      undef $tx;
    });
  });
};

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/*target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;stash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proxy&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;query(target &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $target);
  $url&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;leading_slash(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# novnc assumes no leading slash :(&lt;/span&gt;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(
    vnc  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
    base &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;tx&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;req&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_abs,
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $url,
  );
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; route shown at the bottom and isn&amp;rsquo;t very exciting. It&amp;rsquo;s the frontend route that renders the noVNC client and tells it the WebSocket url.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;websocket&lt;/code&gt; route is the more interesting one, which I will explain in detail. After shifting off the controller, we tell the server not to attempt to render a template (&lt;code&gt;render_later&lt;/code&gt;), then subscribe to the finish handler. This is actually a hint to the server that we intend to initiate a WebSocket connection later. Typically this is done by either subscribing to one of the message events or else by sending data upon connection, but in this case we won&amp;rsquo;t do either until the TCP connection is established. Then after extracting the target host and port from the query argument we are ready to make the TCP connection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mojolicious.org/perldoc/Mojo/IOLoop#client&#34;&gt;&lt;code&gt;Mojo::IOLoop-&amp;gt;client&lt;/code&gt;&lt;/a&gt; simply takes connection arguments and a callback for what to do once connected. We use this callback to establish our relay. The WebSocket protocol reserves all closing statuses below 4000 for internal use, so I&amp;rsquo;ve taken to using the standard HTTP statuses and prepending a 4 to them. Thus when setting up the TCP error handling, either on initially connecting or for subsequent errors, the status passed to the WebSocket &lt;code&gt;finish&lt;/code&gt; method is 4500.&lt;/p&gt;

&lt;p&gt;The relay itself is the next two method calls. First, when the TCP socket emits a &lt;code&gt;read&lt;/code&gt; event, we take its raw bytes and send them (as binary messages) to the WebSocket client. Then when the WebSocket emits a binary frame (i.e. when it receives a binary message) we write that back to the TCP connection. Finally when the Websocket is closed, we also close the TCP connection and cleanup our handlers.&lt;/p&gt;

&lt;p&gt;Simple, isn&amp;rsquo;t it?!&lt;/p&gt;

&lt;h2 id=&#34;additional-notes&#34;&gt;Additional Notes&lt;/h2&gt;

&lt;p&gt;There are a few things missing. First is that I haven&amp;rsquo;t addressed security in this example. If any part of the stream is publicly available you will want to encrypt the traffic and put the servers behind authentication. Another risk is the issue of &amp;ldquo;back pressure&amp;rdquo; where a stream starts sending floods of data.&lt;/p&gt;

&lt;p&gt;You may have noticed I skipped one line, which until a recent version of Chrome wasn&amp;rsquo;t necessary. When the WebSocket connection is first established it calls &lt;code&gt;with_protocols(&#39;binary&#39;)&lt;/code&gt;. Early versions of noVNC also supported sending the TCP traffic as base64 encoded text, since early implementations of WebSockets didn&amp;rsquo;t distinguish between text and binary frame types as the modern ones do. The WebSocket protocol allows the client to request an application-defined &amp;ldquo;sub-protocol&amp;rdquo; which noVNC used to request binary or base64, the latter of which has long since been deprecated and removed. The client still asks for the binary sub-protocol and recent versions of Chrome have started to refuse to connect if the server doesn&amp;rsquo;t indicate that it can handle this request.&lt;/p&gt;

&lt;h2 id=&#34;shouldn-t-this-be-on-cpan&#34;&gt;Shouldn&amp;rsquo;t This Be On CPAN?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m hoping to wrap this TCP/WebSocket bridge logic up as a module called &lt;code&gt;Mojo::Websockify&lt;/code&gt; and include the noVNC client as an example. It turns out however, that the logic which is simple to show here is remarkably hard to package in a generic, extensible way. For example, you may want to check if the TCP service is already in use via some database-locking table, or to allow remote-takeover of sessions using a message broker between clients. I&amp;rsquo;ll probably just simplify things for the common case and build in some protection for the &amp;ldquo;back pressure&amp;rdquo; problem. In the meantime I hope you have enjoyed seeing how beautifully simple Mojolicious&amp;rsquo; WebSocket and TCP services are.&lt;/p&gt;

&lt;p&gt;Happy Perling!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitter as a datastore</title>
      <link>http://localhost:1313/article/210/2016/1/21/Twitter-as-a-datastore/</link>
      <pubDate>Thu, 21 Jan 2016 13:52:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/210/2016/1/21/Twitter-as-a-datastore/</guid>
      <description>&lt;p&gt;Why doesn&amp;rsquo;t anyone talk about Twitter as a data store? It&amp;rsquo;s a free account, they mostly have uptime, and you can easily control who can see the information. If you can do it in 140 characters (and &lt;a href=&#34;http://www.theverge.com/2015/8/12/9134175/twitter-direct-message-character-limit&#34;&gt;soon to be 10,000&lt;/a&gt;), it&amp;rsquo;s an easy way to store data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/excellent_nums&#34;&gt;Tweets by @excellent_nums&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m doing this for my &lt;a href=&#34;http://www.excellentnums.com&#34;&gt;excellent numbers project&lt;/a&gt; that does quite a bit of computing to find numbers with a particular property. This isn&amp;rsquo;t the only way I&amp;rsquo;m storing the numbers, but I had the idea of tweeting them as soon as I found them in case every other method failed. If I accidentally deleted the output files (did that), truncated and overwrote files (did that), or somehow screwed it up in another way (did that), the numbers are still on Twitter.&lt;/p&gt;

&lt;p&gt;I had another compelling reason, though. I wanted to get an alert on my phone when my program found another excellent number. Unfortunately, I&amp;rsquo;ve hitched my wagon to the iPhone. There are all sorts of complicated ways for me to get an alert but I already use Twitter and get alerts for that. So, I can have a backup store and an alert system using stuff I already have installed. I can spend more time on the math and less time on installing and managing Redis (which is easy too and deserves an article here) then coming up with a way to send new entries to my phone.&lt;/p&gt;

&lt;p&gt;I wrote about my setup in nonspecific terms in &lt;a href=&#34;http://www.masteringperl.org/2015/12/ive-found-over-200-excellent-numbers/&#34;&gt;Mastering Perl&lt;/a&gt;. I didn&amp;rsquo;t show any code, although it&amp;rsquo;s all in &lt;a href=&#34;https://github.com/briandfoy/excellent_numbers&#34;&gt;the excellent_numbers GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start, you need some Twitter credentials to use their API through the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter&#34;&gt;Net::Twitter&lt;/a&gt; module. Start at &lt;a href=&#34;http://apps.twitter.com&#34;&gt;Twitter Application Management&lt;/a&gt; to get the four special strings you&amp;rsquo;ll need (&lt;a href=&#34;http://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/&#34;&gt;&amp;ldquo;How to Register a Twitter App in 8 Easy Steps&amp;rdquo; has a good description of the steps&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Consumer Key (API Key)&lt;/p&gt;

&lt;p&gt;Consumer Secret (API Secret)&lt;/p&gt;

&lt;p&gt;Access Token&lt;/p&gt;

&lt;p&gt;Access Token Secret&lt;/p&gt;

&lt;p&gt;The Net::Twitter module needs these strings to create its object. The module handles all of the OAuth details without me having to think about them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Twitter;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $nt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Twitter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
   traits   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;qw/OAuth API::RESTv1_1/&lt;/span&gt;],
   map { $_ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENV $_ not set&amp;#34;&lt;/span&gt; }
           &lt;span style=&#34;color:#e6db74&#34;&gt;qw(     
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                consumer_secret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                consumer_key
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                access_token
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                access_token_secret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                )&lt;/span&gt;
   );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my excellent number program, I wanted to be as simple as possible. I didn&amp;rsquo;t want to re-tweet numbers I already tweeted so I fetched everything I&amp;rsquo;ve tweeted so far and stored it in a hash. Twitter pages in groups of 200 tweets maximum, and this didn&amp;rsquo;t seem like it would be a problem a couple of months ago but I&amp;rsquo;m now up to over 350 of them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to fetch a bunch of statuses with the &lt;code&gt;user_timeline&lt;/code&gt; method. I need to tell it where to start (&lt;code&gt;min_id&lt;/code&gt; or &lt;code&gt;since_id&lt;/code&gt;). Twitter returns huge JSON structures with lots of information, but Net::Twitter turns that into a Perl data structure for me. I dump what they send and pull out the parts I want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %tweets;
STATUSES: &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
  state $min_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  state $fetch_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $max_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $min_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;since_id&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max_id&amp;#39;&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $statuses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $nt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user_timeline({
          count       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $fetch_size,
          screen_name &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;excellent_nums&amp;#39;&lt;/span&gt;,
          $max_key    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $min_id,
          });     

  say { interactive } &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Found &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; @$statuses &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; statuses&amp;#34;&lt;/span&gt;;
  $min_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $statuses&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]{id} &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $min_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $status ( @$statuses ) {
          $min_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $status&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{id} &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $min_id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $status&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{id};
          &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $number ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $status&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{text} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/(\d+)/&lt;/span&gt;;
          warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[$number] has more than one tweet!\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; exists $tweets{$number};
          $tweets{$number} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undef;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt;( is_excellent( $number ) ) {
                  warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tweet for [$number] is an unexcellent error\n&amp;#34;&lt;/span&gt;;
                  }       
          }       

  &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; @$statuses &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; $fetch_size; &lt;span style=&#34;color:#75715e&#34;&gt;# must be last page&lt;/span&gt;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This part is complicated for another reason. At the start of the project I was generating the excellent numbers sequentially. When that&amp;rsquo;s the case I only needed to look at the previous tweet to see if it was less than the number I just discovered. When I got to the big numbers, I went wide and worked on different parts of the range in parallel and sometimes on several computers simultaneously. I started to discover the numbers out of order and tweet them out of order. Hence, the paging. I could store the list of tweeted numbers locally, but that&amp;rsquo;s a hassle to manage too since that can be out of sync. I still might do that when this method runs out of steam. I&amp;rsquo;m not likely to get far beyond 500 numbers though.&lt;/p&gt;

&lt;p&gt;Notice that I also &lt;code&gt;warn&lt;/code&gt; if I run into a tweet with a number that I think is a duplicate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[$number] has more than one tweet!\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; exists $tweets{$number};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this was a bigger problem (and it&amp;rsquo;s not anymore), I could use the &lt;code&gt;destroy_status&lt;/code&gt; method to automatically get rid of it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$nt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;destroy_status( $status&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{id} ) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; exists $tweets{$number};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I decided not to delete automatically from the program. It&amp;rsquo;s not a problem to have duplicates. It&amp;rsquo;s a bit messy, but it&amp;rsquo;s more messy to delete stuff I want to keep and to retweet it. That risk makes it not worth it for me. I don&amp;rsquo;t want another possible automated mess to clean up.&lt;/p&gt;

&lt;p&gt;Now I know everything I&amp;rsquo;ve tweeted previously and I&amp;rsquo;ve put them in &lt;code&gt;%tweets&lt;/code&gt;. The next part is to tweet what I&amp;rsquo;ve found and haven&amp;rsquo;t stored yet. I also store that in a local file (but remember I want the alerts and the backup!) that I used to populate &lt;code&gt;%numbers&lt;/code&gt;. I skip the numbers I already tweeted and use &lt;code&gt;update&lt;/code&gt; to make the new tweets. Storing new numbers is easy, and when I do it I want to tweet the new numbers in ascending order:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;NUMBER: &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $number ( sort { $a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; $b } keys %numbers ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; NUMBER &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; exists $tweets{$number};

  $nt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;update( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$number is excellent&amp;#34;&lt;/span&gt; );
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This used to be part of the program that found the excellent numbers, but I switched to C for a huge performance bump. I still wanted to tweet from Perl, which is easy. Perl&amp;rsquo;s become the glue holding together lots of different things.&lt;/p&gt;

&lt;p&gt;Once I can read from, post to, and delete from twitter, other applications (or even real people) can follow it. It can be public or private. It&amp;rsquo;s not sophisticated. It&amp;rsquo;s uptime isn&amp;rsquo;t going to win any awards. But it&amp;rsquo;s free and easy for my small task.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to send verification emails using Mojolicious</title>
      <link>http://localhost:1313/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</link>
      <pubDate>Fri, 18 Sep 2015 11:46:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/193/2015/9/18/How-to-send-verification-emails-using-Mojolicious/</guid>
      <description>

&lt;p&gt;Everyone has signed up for a website which confirms your email address by sending you a verification email. This is a simple process: if you can respond to this email, you must have access to the email address. Yet for its simplicity, writing such a system might not seem as easy.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example. I&amp;rsquo;m going to use &lt;a href=&#34;http://mojolicio.us&#34;&gt;Mojolicious&lt;/a&gt; since it is the web framework that I prefer (and contribute to) but also since its ecosystem is suited to this task. If you&amp;rsquo;d like to follow along as I go, check out the finished &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;user-storage&#34;&gt;User Storage&lt;/h3&gt;

&lt;p&gt;The example application is going to need a persistent mechanism to store user information. A tool I reach for in examples and prototyping is &lt;a href=&#34;https://metacpan.org/pod/DBM::Deep&#34;&gt;DBM::Deep&lt;/a&gt;. It is a file-backed system for storing Perl data structures. To use it, simply create an instance (or &lt;code&gt;tie&lt;/code&gt; one) and use it as a hash reference (array references are possible too); any changes will be saved automagically!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DBM::Deep&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filename.db&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll store this object in a helper, named &lt;code&gt;users&lt;/code&gt;. In Mojolicious, a helper is a subroutine that can be called as a method on a controller instance or the app itself, or called as a function in a template. They are often used for linkages between application and business or model logic, though here it is providing database access. When the time comes to need access to user data, say from a controller instance &lt;code&gt;$c&lt;/code&gt;, it is as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And likewise to create a user, simply assign to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  email     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $email,
  password  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt($password),
  confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More fields would be stored in a more complete app but this is all that is needed for this example.&lt;/p&gt;

&lt;h3 id=&#34;password-encryption&#34;&gt;Password encryption&lt;/h3&gt;

&lt;p&gt;I use an encryption called &lt;code&gt;bcrypt&lt;/code&gt; to store the password. &lt;a href=&#34;https://metacpan.org/pod/Mojolicious::Plugin::Bcrypt&#34;&gt;Mojolicious::Plugin::Bcrypt&lt;/a&gt; is a handy plugin to use Bcrypt encryption with Mojolicious; you load it by simply writing &lt;code&gt;plugin &#39;Bcrypt&#39;;&lt;/code&gt;. This plugin provides two helpers, &lt;code&gt;bcrypt&lt;/code&gt; for encryption and &lt;code&gt;bcrypt_validate&lt;/code&gt; for checking that another value is valid.&lt;/p&gt;

&lt;p&gt;Bcrypt is one of many hashing algorithms with properties that are useful for security. There is no &lt;code&gt;decrypt&lt;/code&gt; function, since this is a one-way algorithm. When validating the password, the best you can know is that if some future input hashes to the same result then it must have been the original password. Storing passwords in this way is good because if a hacker gets database access, they don&amp;rsquo;t get the passwords, just the hashes; they can&amp;rsquo;t be leaked because you simply don&amp;rsquo;t have them.&lt;/p&gt;

&lt;h3 id=&#34;sending-an-email&#34;&gt;Sending an email&lt;/h3&gt;

&lt;p&gt;CPAN is replete with modules which can send email. For this example I employ &lt;a href=&#34;https://metacpan.org/pod/Email::Sender&#34;&gt;Email::Sender&lt;/a&gt;, which is the current recommended module (for &lt;a href=&#34;http://shadow.cat/blog/matt-s-trout/mstpan-15/&#34;&gt;example&lt;/a&gt;). Written by our reigning Perl Pumpking Ricardo Signes, this module makes it very easy to send email.&lt;/p&gt;

&lt;p&gt;The app declares a helper to send an email, cleverly called &lt;code&gt;send_email&lt;/code&gt; which takes a target email address, a subject, and a body.&lt;/p&gt;

&lt;p&gt;A nice feature of Email::Sender is that you can specify &lt;a href=&#34;https://metacpan.org/pod/Email::Sender::Manual::QuickStart#specifying-transport-in-the-environment&#34;&gt;transport via the environment&lt;/a&gt;. For prototyping purposes, by setting an environment variable, the email is &amp;ldquo;sent&amp;rdquo; to the terminal. Meanwhile, the Mojolicious &lt;a href=&#34;http://mojolicio.us/perldoc/Mojolicious/Command/eval&#34;&gt;eval&lt;/a&gt; command is a handy way to perform one-line scripts with your app. If I combine these features together, I can see what the resulting email would look like with a one liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EMAIL_SENDER_TRANSPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Print &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app-&amp;gt;send_email(q[me@spam.org], &amp;#34;Care for some SPAM?&amp;#34;, &amp;#34;Well how about it?&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;the-email-body&#34;&gt;The email body&lt;/h3&gt;

&lt;p&gt;Now that the app can send an email, what should it send? Remember that I would like to send an email with a hyperlink that the user can click to confirm their registration. The hyperlink URL needs to be able to identify the transaction, but since it is being sent in clear text it is important to know that the contents haven&amp;rsquo;t been tampered with. A &lt;a href=&#34;http://jwt.io/&#34;&gt;JSON Web Token&lt;/a&gt;, or JWT, lets you store a data structure as a url-safe string and sign it so that you can be sure that it isn&amp;rsquo;t altered.&lt;/p&gt;

&lt;p&gt;Since the user won&amp;rsquo;t be logged in, I need some other way to know which username to confirm! In this example the JWT payload is only going to contain the username, sent on a round trip to the client&amp;rsquo;s email.&lt;/p&gt;

&lt;p&gt;If instead the app were sending a password reset token I would also want to include a timeout on the JWT to prevent replay attacks. For a simple confirmation though that is probably not necessary.&lt;/p&gt;

&lt;p&gt;I create a helper which initializes an instance of &lt;a href=&#34;https://metacpan.org/pod/Mojo::JWT&#34;&gt;Mojo::JWT&lt;/a&gt; and uses the application&amp;rsquo;s primary &lt;a href=&#34;https://metacpan.org/pod/Mojolicious#secrets&#34;&gt;secret&lt;/a&gt; as its secret. The JWT can also use some other secret, but this is convenient. Note that the example app uses the default set of secrets, but yours should change it to something only you know.&lt;/p&gt;

&lt;p&gt;To create the confirmation URL, the app first sets the claims and encodes to a JWT encoded string containing the data structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;claims({username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username})&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then it generates a URL to the &amp;ldquo;confirm&amp;rdquo; route, makes it absolute, and appends the query/value pair to the end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_abs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;query(jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $jwt);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Later when the URL is clicked, the app can retrieve the username from the JWT encoded query parameter like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if the JWT (contained in the query parameter) doesn&amp;rsquo;t pass validation on decoding, an exception is thrown; this way you know that if the code succeeds the JWT hasn&amp;rsquo;t been tampered with.&lt;/p&gt;

&lt;p&gt;From there it is a simple matter to mark the user&amp;rsquo;s account as confirmed.&lt;/p&gt;

&lt;h3 id=&#34;the-job-queue&#34;&gt;The job queue&lt;/h3&gt;

&lt;p&gt;Many tasks that happen as a result of a web request can be quite slow. Sending email is often a slow process and I don&amp;rsquo;t want to slow down the server in order to add email functionality. Mojolicious employs a non-blocking ioloop internally for performance and one thing you never want to do is block the loop for long periods of time.&lt;/p&gt;

&lt;p&gt;A job queue is a system by which you can push the actual work of doing slow work onto another process. Typically a job queue functions by inserting a record into a database indicating which task is to be done and parameters to be passed to it. The job worker then knows how to perform that task and watches the database until a job needs doing.&lt;/p&gt;

&lt;p&gt;Mojolicious has a job queue spinoff project, named &lt;a href=&#34;https://metacpan.org/pod/Minion&#34;&gt;Minion&lt;/a&gt;. It is the perfect tool for sending email from a job worker to keep the site responsive. Minion ships with a Postgres backend but for this example I will be using the SQLite backend from CPAN. &lt;em&gt;(N.B an earlier version of this article used a file backend that has since been removed).&lt;/em&gt; The task is declared as a subroutine reference to &lt;code&gt;add_task&lt;/code&gt; and later jobs can be created by &lt;code&gt;enqueue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The app declares a task, called &lt;code&gt;email_task&lt;/code&gt; which is a wrapper for the &lt;code&gt;send_email&lt;/code&gt; helper. It also declare a helper named &lt;code&gt;email&lt;/code&gt;, a nicely Huffmanized name, which enqueues the job (and takes the same arguments). (I&amp;rsquo;ve called the task &lt;code&gt;email_task&lt;/code&gt; to make it clear where that name is used; it could as easily simply have been called &lt;code&gt;email&lt;/code&gt;, but I didn&amp;rsquo;t want the name to be confused with the helper).&lt;/p&gt;

&lt;p&gt;This helper then is all that is needed to send an email via a job worker, well that and a worker. While prototyping, it is handy to start a worker in another terminal by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ EMAIL_SENDER_TRANSPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Print &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion worker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again by setting the transport to &lt;code&gt;Print&lt;/code&gt;, the result will be output in the terminal. The progress of the job can then be tracked via the &lt;code&gt;minion&lt;/code&gt; command as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;myapp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion job
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;myapp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl minion job &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;id&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;The rest of the web application is a fairly standard Mojolicious app. One thing that I employ is a helper that redirects to the landing (index) page and optionally accepts a message to be displayed after redirect. This message is called a &amp;ldquo;flash&amp;rdquo; message and is stored in the session cookie, valid only on the next request. Using this helper I can easily start the sign-in/sign-up cycle again and tell the user what happened, good or bad. Because setters in Mojolicious are chainable, the helper is simply:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;helper to_index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;flash(message &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect_to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;) };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the template, if the flash message is defined from the previous request, it is used otherwise a default is presented&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; flash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign in or sign up!&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then if the username is already taken, for example, I can stop processing immediately by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username is taken&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you know how the pieces work, check out the final &lt;a href=&#34;https://gist.github.com/jberger/91a853ee223737c1a1d1&#34;&gt;script&lt;/a&gt;, or have a look below. Happy Perling!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojolicious::Lite;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; DBM::Deep;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JWT;

plugin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bcrypt&amp;#39;&lt;/span&gt;;
plugin &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Minion&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {SQLite &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minion.db&amp;#39;&lt;/span&gt;};

helper users &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { state $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DBM::Deep&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;users.db&amp;#39;&lt;/span&gt;) };

helper send_email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($c, $address, $subject, $body) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Email::Simple;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;require&lt;/span&gt; Email::Sender::Simple;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Email::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create(
    header &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
      To      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $address,
      From    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;me@nobody.com&amp;#39;&lt;/span&gt;,
      Subject &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $subject,
    ],
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $body,
  );
  Email::Sender::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send($email);
};

helper jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { Mojo::JWT&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(secret &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;secrets&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; die) };

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;minion&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_task(email_task &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;send_email(@_) });

helper email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;minion&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;enqueue(email_task &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [@_]) };

helper to_index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;flash(message &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; shift)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;redirect_to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;) };

any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;render(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logged_in&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
} &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;;

any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { shift&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(expires &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index };

post &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sign_in&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username not found&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username has not been confirmed&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{confirmed};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password not correct&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt_validate($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, $user&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password});

  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;session(username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index;
};

post &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/sign_up&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Username $username is taken&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username};

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password cannot be blank&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Email cannot be blank&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;);

  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    email     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $email,
    password  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bcrypt($password),
    confirmed &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  };
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;claims({username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $username})&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_abs&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;query(jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $jwt);
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;email($email, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Confirm registration&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please visit $url to confirm&amp;#34;&lt;/span&gt;);
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registration complete, please confirm via email&amp;#39;&lt;/span&gt;);
};

get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/confirm&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;jwt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;param(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jwt&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{username};
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;users&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$username}{confirmed} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  $c&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;registration confirmed, please log in&amp;#39;&lt;/span&gt;);
};

app&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;start;

__DATA__

@@ index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ep

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello Guest&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; flash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign in or sign up!&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; form_for sign_in &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; begin
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for username &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Username&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; text_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;

  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; password_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;

  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; label_for email &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; email_field &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;, placeholder &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign up only&amp;#39;&lt;/span&gt;

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; submit_button &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign In&amp;#39;&lt;/span&gt;
  %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; submit_button &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sign Up&amp;#39;&lt;/span&gt;, formaction &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign_up&amp;#39;&lt;/span&gt;)
% end

@@ logged_in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ep

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome back &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; session &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;!&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;%&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; link_to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Log out&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logout&amp;#39;&lt;/span&gt; %&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cache::Reddit or: how to use social media as a temporary data store</title>
      <link>http://localhost:1313/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</link>
      <pubDate>Mon, 04 May 2015 12:28:31 +0000</pubDate>
      
      <guid>http://localhost:1313/article/171/2015/5/4/Cache--Reddit-or--how-to-use-social-media-as-a-temporary-data-store/</guid>
      <description>

&lt;p&gt;Sometimes crazy ideas are brilliant, but most of the time they are just crazy. I recently uploaded a new module to CPAN: &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt;. It&amp;rsquo;s a caching module with a twist: it saves cached data as text posts on Reddit. Is that a good idea? Probably not, it&amp;rsquo;s definitely crazy.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;You probably don&amp;rsquo;t want to do this, but if you were considering using the module, here&amp;rsquo;s how. First you&amp;rsquo;ll need a Reddit account with enough karma to use the API (usually handful of upvoted links and comments is enough). Second you should create your own &lt;a href=&#34;http://www.reddit.com/subreddits/create/&#34;&gt;subreddit&lt;/a&gt; to post to. Install &lt;a href=&#34;https://metacpan.org/pod/Cache::Reddit&#34;&gt;Cache::Reddit&lt;/a&gt; using the command line clients cpan or cpanm&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Cache::Reddit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpanm Cache::Reddit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally set the environment variables: &lt;code&gt;reddit_username&lt;/code&gt;, &lt;code&gt;reddit_password&lt;/code&gt;, and &lt;code&gt;reddit_subreddit&lt;/code&gt; (the name of the subreddit that data will be posted to). On Linux / OSX you can do this at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ export reddit_username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;somename
$ export reddit_password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;itsasecret
$ export reddit_subreddit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mycache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To set environment variables on Windows 8, these &lt;a href=&#34;http://winaero.com/blog/how-to-edit-environment-variables-quickly-in-windows-8-1-and-windows-8/&#34;&gt;steps&lt;/a&gt; might work.&lt;/p&gt;

&lt;h3 id=&#34;using-cache-reddit&#34;&gt;Using Cache::Reddit&lt;/h3&gt;

&lt;p&gt;The module exports the typical caching functions you&amp;rsquo;d expect: &lt;code&gt;set&lt;/code&gt; for saving data, &lt;code&gt;get&lt;/code&gt; for retrieval and &lt;code&gt;remove&lt;/code&gt; for removal. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cache::Reddit; &lt;span style=&#34;color:#75715e&#34;&gt;#exports get, set, remove&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $monthly_revenues &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { jan &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25000&lt;/span&gt;, feb &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23500&lt;/span&gt;, mar &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31000&lt;/span&gt;, apr &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt; };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set($monthly_revenues); &lt;span style=&#34;color:#75715e&#34;&gt;# serialize and save on reddit&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $revenue_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get($key);
remove($key);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;Although the data is stored in a failsafe, redundant, backed-up environment in the cloud, frequent users of Reddit will appreciate that the service is likely to unavailable for a few seconds multiple times a day.&lt;/p&gt;

&lt;p&gt;Retrieval from the cache using &lt;code&gt;get&lt;/code&gt; doesn&amp;rsquo;t use a hash lookup; instead Cache::Reddit iterates through all available posts on the subreddit until it finds a match. This yields 0(n) performance, which means that the &lt;code&gt;get&lt;/code&gt; function will get slower the more items are cached. This is not likely to be a performance bottleneck though, as typically a subreddit only holds 1,000 links before they are lost to the ether.&lt;/p&gt;

&lt;p&gt;The data is serialized and deserialized using &lt;a href=&#34;https://metacpan.org/pod/Storable&#34;&gt;Storable&lt;/a&gt;, which may open pose a security risk if the cached data is edited by a mod. Up to 40,000 characters of data can be stored at one time. Unless the subreddit permits both links and text posts, in which case the limit is 10,000 characters. But Cache::Reddit does boast 100% test coverage.&lt;/p&gt;

&lt;h3 id=&#34;looking-forwards&#34;&gt;Looking forwards&lt;/h3&gt;

&lt;p&gt;In the future I&amp;rsquo;d like to take advantage of Reddit&amp;rsquo;s voting system to implement a crude &lt;a href=&#34;https://en.wikipedia.org/wiki/Least_Recently_Used#LRU&#34;&gt;LRU&lt;/a&gt; cache. Comments could prove to be a powerful version control system. Patches welcome, the source code is on Instagram.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Twitter bot with Perl</title>
      <link>http://localhost:1313/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</link>
      <pubDate>Mon, 23 Feb 2015 14:12:06 +0000</pubDate>
      
      <guid>http://localhost:1313/article/154/2015/2/23/Build-a-Twitter-bot-with-Perl/</guid>
      <description>

&lt;p&gt;Following on from last week&amp;rsquo;s Reddit bot &lt;a href=&#34;http://perltricks.com/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl&#34;&gt;article&lt;/a&gt;, let&amp;rsquo;s look at how to build a Twitter bot using Perl. As you&amp;rsquo;d expect, Perl makes it easy to do, but before we get to the code, let&amp;rsquo;s talk about advantages.&lt;/p&gt;

&lt;p&gt;Adding tweet automation to an existing app can bring several benefits. Firstly it&amp;rsquo;s a time saver, allowing you to focus on other higher-value activities. Automation provides protection from manual transcription errors like misspelled words and broken urls. Automation also means it&amp;rsquo;s cheaper to increase your tweet volume and all else being equal, a higher tweet volume will lead to more Twitter followers. Sound good? Excellent, let&amp;rsquo;s get to the code then!&lt;/p&gt;

&lt;h3 id=&#34;writing-tweets&#34;&gt;Writing tweets&lt;/h3&gt;

&lt;p&gt;The core code for writing tweets is very simple. I&amp;rsquo;m using the &lt;a href=&#34;https://metacpan.org/pod/Net::Twitter::Lite&#34;&gt;Net::Twitter::Lite&lt;/a&gt; distribution, which supports the latest version of the Twitter &lt;a href=&#34;https://dev.twitter.com/rest/public&#34;&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($text) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $twitter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
    access_token_secret &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_SECRET},
    consumer_secret     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_SECRET},
    access_token        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_TOKEN},
    consumer_key        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_KEY},
    user_agent          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TwitterBotExample&amp;#39;&lt;/span&gt;,
    ssl &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  );
  $twitter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;update($text);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code imports &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; to use the new Twitter API. The subroutine &lt;code&gt;tweet&lt;/code&gt; takes some text as an argument. It then creates a new &lt;code&gt;Net::Twitter::Lite::WithAPIv1_1&lt;/code&gt; object, using environment vars as credentials. If you don&amp;rsquo;t have these credentials already, it&amp;rsquo;s free to register an application for your own Twitter account and &lt;a href=&#34;https://dev.twitter.com/oauth/overview/application-owner-access-tokens&#34;&gt;generate the tokens&lt;/a&gt;. Finally the subroutine calls the &lt;code&gt;update&lt;/code&gt; method to tweet the text.&lt;/p&gt;

&lt;p&gt;Now I can send one tweet by adding this line to my code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;tweet(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a computer speaking!&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;safety-first&#34;&gt;Safety first&lt;/h3&gt;

&lt;p&gt;So far so good huh? However this code isn&amp;rsquo;t very safe. What if &lt;code&gt;$text&lt;/code&gt; is not provided as an argument, or our environment variables are not declared, or the call to Twitter fails? I&amp;rsquo;ll add some checks to handle these scenarios:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Try::Tiny;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($text) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tweet requires text as an argument&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $text;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($ENV{TWITTER_CONSUMER_KEY}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_CONSUMER_SECRET}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_ACCESS_TOKEN}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Required Twitter Env vars are not all defined&amp;#39;&lt;/span&gt;;
  }

  try
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $twitter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
      access_token_secret &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TwitterBotExample&amp;#39;&lt;/span&gt;,
      ssl &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    );
    $twitter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;update($text);
  }
  catch
  {
    die join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error tweeting $text&amp;#34;&lt;/span&gt;,
                   $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;code, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error);
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is largely the same as before, except now it checks for the required variables before processing. The code also imports &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny&#34;&gt;Try::Tiny&lt;/a&gt; as I added a try/catch block around the twitter code. The catch block will activate if the Twitter interaction throws an exception. Because Net::Twitter::Lite throws structured exceptions, the catch block builds an exception string by extracting information from the structured exception, then calls &lt;code&gt;die&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;You might be wondering if it&amp;rsquo;s necessary to call &lt;code&gt;die&lt;/code&gt; at all. Can&amp;rsquo;t we just return &lt;code&gt;undef&lt;/code&gt; instead and keep our code running? The advantage of calling &lt;code&gt;die&lt;/code&gt; is that the caller of the &lt;code&gt;tweet&lt;/code&gt; subroutine is better placed to decide how to handle the issue, and so we defer that decision to them. If the calling code doesn&amp;rsquo;t handle &lt;code&gt;die&lt;/code&gt; correctly, we know the program will exit. But if we returned &lt;code&gt;undef&lt;/code&gt;, we would have no such assurances. This doesn&amp;rsquo;t mean however that the code &lt;em&gt;has&lt;/em&gt; to exit. Let&amp;rsquo;s assume I had hundreds of tweets to send out, maybe I just want to log the error somewhere and keep going:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $text (@tweet_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I was printing a sequence of tweets, where ordering is important, I could still log the error but then call &lt;code&gt;die&lt;/code&gt; to exit the program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $text (@sequence_of_texts)
{
  try
  {
    tweet($text);
  }
  catch
  {
    log_error($_);
    die $_; &lt;span style=&#34;color:#75715e&#34;&gt;# exit the program&lt;/span&gt;
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;better-text-handling&#34;&gt;Better text handling&lt;/h3&gt;

&lt;p&gt;So now the code is safer, how else can it be improved? One famous restriction is that a tweet cannot be longer than 140 characters. Right now if the &lt;code&gt;tweet()&lt;/code&gt; subroutine received a text string longer than 140 characters, the Twitter API would reject it, raise and exception and the code would die. I think we can do better than that.&lt;/p&gt;

&lt;p&gt;When I think about the contents of tweets that I send, I&amp;rsquo;m usually tweeting links to articles about Perl. Invariably they will include some text, a url and a hashtag. It&amp;rsquo;s useful to break these out into separate arguments to &lt;code&gt;tweet()&lt;/code&gt; because to make everything fit, you could truncate the text, but you wouldn&amp;rsquo;t want to truncate a url or hashtag as it might change the meaning and/or break the url.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Try::Tiny;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt;
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($text, $url, $hashtag) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($text &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $url &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $hashtag)
  {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tweet requires text, url and hashtag arguments&amp;#39;&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ($ENV{TWITTER_CONSUMER_KEY}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_CONSUMER_SECRET}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_ACCESS_TOKEN}
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $ENV{TWITTER_ACCESS_SECRET})
  {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Required Twitter Env vars are not all defined&amp;#39;&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# build tweet, max 140 chars&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tweet;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (length(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$text $hashtag&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;)
  {
    $tweet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$text $url $hashtag&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; (length($text) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;)
  {
    $tweet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$text $url&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# shorten text, drop the hashtag&lt;/span&gt;
  {
    $tweet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; substr($text, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;... &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $url;
  }

  try
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $twitter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::Twitter::Lite::WithAPIv1_1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
      access_token_secret &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_SECRET},
      consumer_secret     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_SECRET},
      access_token        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_ACCESS_TOKEN},
      consumer_key        &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{TWITTER_CONSUMER_KEY},
      user_agent          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TwitterBotExample&amp;#39;&lt;/span&gt;,
      ssl &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    );
    $twitter&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;update($tweet);
  }
  catch
  {
    die join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error tweeting $text $url $hashtag&amp;#34;&lt;/span&gt;,
                   $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;code, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message, $_&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;error);
  };
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Twitter treats urls as having a length of 12 characters. Now the code checks the length of our arguments, truncating &lt;code&gt;$text&lt;/code&gt; if necessary. The hashtag will be included only if there is enough space.&lt;/p&gt;

&lt;p&gt;This code works for me, but you may want to do things a little differently. The Twitter credentials could be stored in a &lt;a href=&#34;http://perltricks.com/article/29/2013/9/17/How-to-Load-YAML-Config-Files&#34;&gt;configuration&lt;/a&gt; file, instead of environment variables. The &lt;code&gt;$hashtag&lt;/code&gt; argument could be an arrayref of hashtags, that are incrementally added to the tweet text, instead of a single text string which restricts it to an all-or-nothing basis.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Reddit bot with Perl</title>
      <link>http://localhost:1313/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl/</link>
      <pubDate>Mon, 09 Feb 2015 13:41:04 +0000</pubDate>
      
      <guid>http://localhost:1313/article/151/2015/2/9/Build-a-Reddit-bot-with-Perl/</guid>
      <description>

&lt;p&gt;One of my goals for this year was to post more links to the Perl &lt;a href=&#34;http://www.reddit.com/r/perl&#34;&gt;subreddit&lt;/a&gt;. I&amp;rsquo;m usually good at linking to PerlTricks articles, but not so good at linking to other content. And that&amp;rsquo;s a shame because there are a lot of active Perl blogs out there (I know of at least 25-30).&lt;/p&gt;

&lt;p&gt;A busier Perl subreddit is good for the community; more links on /r/perl should lead to more visitors, and more activity on the subreddit and so on - a virtuous circle. So I built a bot to automate the posting of links. In this article I&amp;rsquo;m going to show you how I did it.&lt;/p&gt;

&lt;h3 id=&#34;reddit-api&#34;&gt;Reddit API&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a Reddit account to use the API. I like to use &lt;a href=&#34;https://metacpan.org/pod/Reddit::Client&#34;&gt;Reddit::Client&lt;/a&gt; as it works well, has good documentation and maintains a session cache. This is a subroutine for posting links to Reddit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Reddit::Client;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_reddit_link&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($title, $url, $subreddit) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_; 

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $reddit       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reddit::Client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
        session_file &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs/session_data.json&amp;#39;&lt;/span&gt;,
        user_agent   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perly_bot/v0.01&amp;#39;&lt;/span&gt;,
    );  

    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ( $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_logged_in ) { 
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login( $ENV{REDDIT_USERNAME}, 
                        $ENV{REDDIT_PASSWORD} );
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;save_session();
    }   
    
    $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit_link(
            subreddit &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $subreddit,
            title     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $title,
            url       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $url
    );
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code should be fairly self-explanatory. The &lt;code&gt;post_reddit_link&lt;/code&gt; subroutine accepts three parameters: the subreddit to post to, the title of the post, and the URL of the link. It initializes a new Reddit::Client object, passing the path of the session file and the user agent string to use when calling the Reddit API. The session file is just a cache for storing a session cookie.&lt;/p&gt;

&lt;p&gt;Next, the subroutine checks if the &lt;code&gt;$reddit&lt;/code&gt; object has an active session or not, triggering a login request if necessary. I like to store credentials in environment variables: that way the code and any config files can still be hosted on a public repository, without risk of sharing your login details with anyone. The last bit of code calls &lt;code&gt;submit_link&lt;/code&gt; method to post the link to the Reddit API.&lt;/p&gt;

&lt;p&gt;This code will work in ideal scenarios, but what if something goes wrong? For example, Reddit imposes restrictions on the posting of links: the same link cannot be posted twice to the same subreddit, proxy domains are banned and links cannot be posted too frequently. In order to capture the error messages, I&amp;rsquo;m going to wrap the &lt;code&gt;submit_link&lt;/code&gt; method in a try/catch block.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Reddit::Client;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Try::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ERROR_LOG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs/error.log&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_reddit_link&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($title, $url, $subreddit) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_; 

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $reddit       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reddit::Client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
        session_file &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs/session_data.json&amp;#39;&lt;/span&gt;,
        user_agent   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perly_bot/v0.01&amp;#39;&lt;/span&gt;,
    );  

    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ( $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_logged_in ) { 
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login( $ENV{REDDIT_USERNAME}, 
                        $ENV{REDDIT_PASSWORD} );
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;save_session();
    }   
    
    try {
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit_link(
            subreddit &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $subreddit,
            title     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $title,
            url       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $url
        );
    } catch {
        log_error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error posting $title $url $_&amp;#34;&lt;/span&gt;);
    };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log_error&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
    say $ERROR_LOG $datetime_now&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;datetime &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t$_[0]&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to the try/catch, I&amp;rsquo;ve added a &lt;code&gt;log_error&lt;/code&gt; subroutine which will write error messages to the error log.&lt;/p&gt;

&lt;h3 id=&#34;reading-blog-feeds&#34;&gt;Reading blog feeds&lt;/h3&gt;

&lt;p&gt;Now I have a subroutine for posting links to Reddit, I need a way to monitor blog feeds and post links to new articles. Most blogs provide feed data via RSS or atom data, for example &lt;a href=&#34;http://blogs.perl.org&#34;&gt;blogs.perl.org&lt;/a&gt; uses atom. I can monitor this feed using &lt;a href=&#34;https://metacpan.org/pod/HTTP::Tiny&#34;&gt;HTTP::Tiny&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/XML::Atom::Client&#34;&gt;XML::Atom::Client&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; XML::Atom::Client;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTTP::Tiny;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_feed&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($url) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ua &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HTTP::Tiny&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ua&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get($url);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{success} )
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
          XML::Atom::Feed&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{content} );

        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $post ( $posts&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;entries )
        {
            post_reddit_link(
                $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;title,
                $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;link&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;href,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl&amp;#39;&lt;/span&gt;
            );
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
        log_error(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error requesting $url. $response-&amp;gt;{status} $response-&amp;gt;{reason}&amp;#34;&lt;/span&gt;
        );
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code declares a subroutine called &lt;code&gt;check_feed&lt;/code&gt; which accepts a URL as parameter. It fetches the URL content using HTTP::Tiny, and if successful, loops through every blog post in an atom feed, calling &lt;code&gt;post_reddit_link&lt;/code&gt; on each post. As it stands, this code is going to cause problems. We only want to post relevant and new content to the Perl subreddit, but this code will post a link for every blog post returned by the feed URL.&lt;/p&gt;

&lt;p&gt;To check for relevant content, I can use a regex to match against keywords. If the text contains words like &amp;ldquo;Perl&amp;rdquo; or &amp;ldquo;CPAN&amp;rdquo;, I assume it&amp;rsquo;s Perl related. This is the regex:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  must contain a Perl keyword to be considered relevant&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $looks_perly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/\b(?:perl|cpan|cpanminus|moose|metacpan|modules?)\b/&lt;/span&gt;i;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To filter out stale content, I need to set a threshold for how long posts should be considered fresh. I can then subtract the publication date of the blog post from the current datetime to see if the publication date exceeds my threshold or not. I&amp;rsquo;m going to use 24 hours as my threshold:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Seconds;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime_post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
  Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime($post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;published, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y-%m-%dT%H:%M:%SZ&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime_now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $datetime_post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $datetime_now &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ONE_DAY )
{
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code uses the &lt;code&gt;strptime&lt;/code&gt; function in Time::Piece to extract the publication datetime of the post. It then compares the datetime of the post with the current datetime minus 24 hours (&amp;ldquo;ONE_DAY&amp;rdquo; is a constant for 24 hours that is exported by Time::Seconds).&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;Putting it all together, the code looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Reddit::Client;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Try::Tiny;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Piece;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::Seconds;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; XML::Atom::Client;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTTP::Tiny;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ERROR_LOG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs/error.log&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#75715e&#34;&gt;#  must contain a Perl keyword to be considered relevant&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $looks_perly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/\b(?:perl|cpan|cpanminus|moose|metacpan|modules?)\b/&lt;/span&gt;i;

&lt;span style=&#34;color:#75715e&#34;&gt;# post links for new posts on blogs.perl.org&lt;/span&gt;
check_feed(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://blogs.perl.org/atom.xml&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_reddit_link&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($title, $url, $subreddit) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $reddit       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reddit::Client&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(
        session_file &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logs/session_data.json&amp;#39;&lt;/span&gt;,
        user_agent   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perly_bot/v0.01&amp;#39;&lt;/span&gt;,
    );

    &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; ( $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_logged_in ) {
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login( $ENV{REDDIT_USERNAME},
                        $ENV{REDDIT_PASSWORD} );
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;save_session();
    }

    try {
        $reddit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;submit_link(
            subreddit &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $subreddit,
            title     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $title,
            url       &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $url
        );
    } catch {
        log_error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error posting $title $url $_&amp;#34;&lt;/span&gt;);
    };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log_error&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;
    say $ERROR_LOG $datetime&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;datetime &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t$_[0]&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_feed&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($url) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @_;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ua &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HTTP::Tiny&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ua&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get($url);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{success} )
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
          XML::Atom::Feed&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( Stream &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{content} );

        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $post ( $posts&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;entries )
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime_post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
              Time::Piece&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;strptime($post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;published, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Y-%m-%dT%H:%M:%SZ&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $datetime_now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; localtime;

            &lt;span style=&#34;color:#75715e&#34;&gt;# if fresh post and contains Perl keyword&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (   $datetime_post &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; $datetime_now &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ONE_DAY
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;summary &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; $looks_perly)
            {
                post_reddit_link(
                    $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;title,
                    $post&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;link&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;href,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;perl&amp;#39;&lt;/span&gt;
                );
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
        log_error(
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error requesting $url. $response-&amp;gt;{status} $response-&amp;gt;{reason}&amp;#34;&lt;/span&gt;
        );
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run, this script will check blogs.perl.org for new posts, and submit them to /r/perl.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more that could be done with this script: for instance it only supports atom feeds, but many blog feeds use RSS. The URLs to check must be hard coded into the script - it would be better to take them from a configurable list. Finally, there is no URL caching, so running this script twice in 24 hours will lead to it attempting to post the same links to Reddit twice. For an extended example that addresses these issues and more, check out my Perly-Bot GitHub &lt;a href=&#34;https://github.com/dnmfarrell/Perly-Bot&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated Internet Explorer screenshots using Win32::OLE</title>
      <link>http://localhost:1313/article/139/2014/12/11/Automated-Internet-Explorer-screenshots-using-Win32--OLE/</link>
      <pubDate>Thu, 11 Dec 2014 14:44:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/139/2014/12/11/Automated-Internet-Explorer-screenshots-using-Win32--OLE/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Some time ago I &lt;a href=&#34;http://blog.nu42.com/2012/06/using-win32ole-with-events-to-capture.html&#34;&gt;wrote&lt;/a&gt; about using Perl&amp;rsquo;s Win32::OLE to drive Internet Explorer in response to a &lt;a href=&#34;http://stackoverflow.com/a/11220026/100754&#34;&gt;question&lt;/a&gt; on Stackoverflow.&lt;/p&gt;

&lt;p&gt;At the time I was still clinging to Windows XP. Since then, I have upgraded to Windows 8.1 Pro 64-bit, and instead of using &lt;a href=&#34;http://www.activestate.com/activeperl/ppm-perl-modules&#34;&gt;PPMs&lt;/a&gt; for &lt;a href=&#34;http://www.activestate.com/activeperl&#34;&gt;ActivePerl&lt;/a&gt;, I have been using &lt;a href=&#34;http://blog.nu42.com/2014/11/64-bit-perl-5201-with-visual-studio.html&#34;&gt;Visual Studio 2013&lt;/a&gt; to build &lt;code&gt;perl&lt;/code&gt;, and the modules I need.&lt;/p&gt;

&lt;p&gt;I have been using Perl&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Win32::OLE&#34;&gt;Win32::OLE&lt;/a&gt; to drive Internet Explorer for various purposes for almost 10 years now. There is really not much to it other than having to read copious amounts of Microsoft documentation. It always amazes me how, after all these years, there is no language or environment as well documented as Perl, not just in terms of the amount of information provided, but also the ease with which you can find clear, correct, and useful information.&lt;/p&gt;

&lt;p&gt;In any case, while the organization of the information leaves a lot to be desired, a good starting point for finding information on driving Internet Explorer via OLE is the InternetExplorer object &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa752084%28v=vs.85%29&#34;&gt;documentation&lt;/a&gt; on MSDN. If you want to interact with the content within an InternetExplorer object, you can consult the MSHTML Scripting Object Interfaces &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh801967%28v=vs.85%29.aspx&#34;&gt;topic&lt;/a&gt;. It also helps to know a little bit about the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/19z074ky.aspx&#34;&gt;OLE&lt;/a&gt; interface.&lt;/p&gt;

&lt;p&gt;Reading brian d foy&amp;rsquo;s article on &lt;a href=&#34;https://perltricks.com/article/138/2014/12/7/Controlling-Firefox-from-Perl&#34;&gt;controlling Firefox from Perl&lt;/a&gt;, I noticed that Win32::IE::Mechanize has disappeared from CPAN. The &lt;a href=&#34;http://www.perlmonks.org?node_id=1061372&#34;&gt;discussion on PerlMonks&lt;/a&gt; did not make much sense to me, as I remember very clearly using Win32::OLE to drive Internet Explorer 8 for a massive scraping job.&lt;/p&gt;

&lt;p&gt;I decided to look at my old screenshot utility, and see what changes were needed to get it to run on Windows 8, using Internet Explorer 10. My &lt;a href=&#34;https://gist.github.com/nanis/3dac6b386bd056095e12&#34;&gt;revised working script is available in a GitHub gist&lt;/a&gt;. Here, I am going to cover the highlights.&lt;/p&gt;

&lt;h3 id=&#34;tracing-execution&#34;&gt;Tracing execution&lt;/h3&gt;

&lt;p&gt;The idea is to use the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa768283%28v=vs.85%29.aspx&#34;&gt;DWebBrowserEvents2&lt;/a&gt; to figure out the right time to capture the browser window. I decided to see if my answer from 2012 still worked. I pointed it to my personal website, and it failed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Win32::OLE(0.1712) error 0x80020009: &amp;quot;Exception occurred&amp;quot;
    in METHOD/PROPERTYGET &amp;quot;StatusText&amp;quot; at iescreenshot.pl line 38.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cause of the problem lay in accessing the &lt;code&gt;StatusText&lt;/code&gt; property of the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa752084%28v=vs.85%29&#34;&gt;Internet Explorer object&lt;/a&gt;. Apparently, IE10 no longer exposes this property. Well, I had only used it so as to give some idea of what was happening. I decided instead to write a quick logging function which could be used with all events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log_browser_event&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval { join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; map valof($_), @_) };
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$event: $args&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not an example of perfect code, but, I am trying to keep this short and sweet.&lt;/p&gt;

&lt;h3 id=&#34;event-handling&#34;&gt;Event handling&lt;/h3&gt;

&lt;p&gt;We are only interested in two events: &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa768282%28v=vs.85%29.aspx&#34;&gt;DocumentComplete&lt;/a&gt;, so we know when to take a screenshot, and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa768340%28v=vs.85%29.aspx&#34;&gt;onQuit&lt;/a&gt;, so we can quit cleanly if the user closes the browser window before we get to that point.&lt;/p&gt;

&lt;p&gt;You initialize OLE events using the call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Win32::OLE&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;WithEvents(
    $object,
    $handler,
    $interface
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, presumably, your &lt;code&gt;$handler&lt;/code&gt; has some giant switch statement, dispatching on the basis of the actual events received. Instead, I opted for a dispatch table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;const &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %BrowserEvents &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (
    DocumentComplete &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        $do_take_screenshot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        Win32::MessageLoop&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;QuitMessageLoop;
    },
    OnQuit &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        $do_take_screenshot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        Win32::MessageLoop&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;QuitMessageLoop;
    },
    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the use of &lt;a href=&#34;https://metacpan.org/pod/Win32::MessageLoop&#34;&gt;Win32::MessageLoop-&amp;gt;QuitMessageLoop&lt;/a&gt; instead of &lt;code&gt;Win32::OLE-&amp;gt;QuitMessageLoop&lt;/code&gt; to avoid spurious sleep calls.&lt;/p&gt;

&lt;p&gt;Then, I initialize the OLE events interface using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Win32::OLE&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;WithEvents(
    $browser,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { $handler&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%BrowserEvents, @_) },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DWebBrowserEvents2&amp;#39;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;$handler&lt;/code&gt; in this case just logs the event, and consults the dispatch table to see if we are interested in the event:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebBrowserEventHandler&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handlers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

    log_browser_event($event, @_);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exists $handlers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$event}
                ? $handlers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{$event}
                : $handlers&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{_}
    ;
    $handler&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;($browser, $event, @_);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upon receiving either &lt;code&gt;DocumentComplete&lt;/code&gt; or &lt;code&gt;onQuit&lt;/code&gt;, we terminate the message loop, which returns control to the navigation function. At that point, the only thing left is to check if we should capture a screenshot. After that, the program terminates.&lt;/p&gt;

&lt;h3 id=&#34;capturing-the-internet-explorer-window&#34;&gt;Capturing the Internet Explorer window&lt;/h3&gt;

&lt;p&gt;When I ran this revised script, and tried to take screenshots using &lt;a href=&#34;https://metacpan.org/pod/Imager::Screenshot&#34;&gt;Imager::Screenshot&lt;/a&gt;, I got screenshots with only the frame of the browser, and none of the content. I am not sure what&amp;rsquo;s going on, and I will try to diagnose that issue later. For now, since I was using the venerable &lt;a href=&#34;https://metacpan.org/pod/Win32::GuiTest&#34;&gt;Win32::GuiTest&lt;/a&gt; module anyway, I decided to use the &lt;code&gt;Win32::GuiTest::DibSect&lt;/code&gt; class it provides:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;take_screenshot&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

    wait_until_ready($browser);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $hwnd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $browser&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{HWND};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $browser&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{Document}{title};
    $title &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;s/[^A-Za-z0-9_-]+/-/g&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Win32::GuiTest::DibSect&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fgwnd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetForegroundWindow();
    SetForegroundWindow $hwnd;
    $ds&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CopyWindow($hwnd);
    SetForegroundWindow $fgwnd;

    $ds&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;SaveAs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$title.bmp&amp;#34;&lt;/span&gt;);
    $ds&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Destroy;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;waiting-for-the-document-to-be-rendered&#34;&gt;Waiting for the document to be rendered&lt;/h3&gt;

&lt;p&gt;With that in place, I was still getting the occasional screenshot with a blank document area. If I understand this correctly, the fact that the &lt;code&gt;DocumentReady&lt;/code&gt; event fired does not mean the document has been fully rendered. It just means that you can manipulate the DOM. So, I added a simple spin loop for the browser to stop being &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa752050%28v=vs.85%29&#34;&gt;busy&lt;/a&gt;. This is by no means foolproof, but it has worked for most sites have tried. Sites with a lot of AJAXy stuff tend to have issues with this. There are site-specific ways of dealing with that, but that&amp;rsquo;s beyond the scope of this article.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wait_until_ready&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    {
        local $| &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($browser&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;Busy) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;
            sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, you can run the script from the command line with a simple &lt;code&gt;perl iescreenshot.pl perltricks.com&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-webdriver-api&#34;&gt;The WebDriver API&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ie/dn725045%28v=vs.85%29.aspx&#34;&gt;WebDriver API&lt;/a&gt; might obviate the need for using any other solution to drive Internet Explorer, but, until that is available everywhere, &lt;a href=&#34;https://metacpan.org/pod/Win32::OLE&#34;&gt;Win32::OLE&lt;/a&gt; is more than adequate.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&#34;https://metacpan.org/pod/Win32::OLE&#34;&gt;Win32::OLE&lt;/a&gt; to drive Internet Explorer has been very helpful to me in the past. Taking a screenshot is just a simple, proof-of-concept exercise. The beauty of using Perl is that once you reach a page containing the information you want, you can use Perl&amp;rsquo;s excellent HTML parsing modules to get exactly what you want out of it, and then, say, save it to an Excel worksheet, generate PDF document, or just stuff it in a database somewhere.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Controlling Firefox from Perl</title>
      <link>http://localhost:1313/article/138/2014/12/8/Controlling-Firefox-from-Perl/</link>
      <pubDate>Mon, 08 Dec 2014 14:13:27 +0000</pubDate>
      
      <guid>http://localhost:1313/article/138/2014/12/8/Controlling-Firefox-from-Perl/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been playing with &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt;. It&amp;rsquo;s like the LWP-backended &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;, but with a browser doing all the work. Instead of doing it all in Perl, I can use it as the glue language that it is.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/LWP::UserAgent&#34;&gt;LWP::UserAgent&lt;/a&gt;, or &lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt; aren&amp;rsquo;t enough. For basic web scraping and automation they work well, but fail miserably for anything that requires JavaScript. Some people have luck with SpiderMonkey (&lt;a href=&#34;https://metacpan.org/search?q=spidermonkey&amp;amp;&#34;&gt;with several Perl interfaces&lt;/a&gt;), but that still isn&amp;rsquo;t the whole browser environment.&lt;/p&gt;

&lt;p&gt;Before you start, you need the &lt;a href=&#34;https://www.mozilla.org&#34;&gt;Firefox&lt;/a&gt; browser (or one of its forks) with the &lt;a href=&#34;https://addons.mozilla.org/en-us/firefox/addon/mozrepl/&#34;&gt;MozRepl&lt;/a&gt; add-on, which provides an interactive JavaScript console that you can telnet into. Once activated, you can connect to the console and can control the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm8.staticflickr.com/7503/15324164413_0a43aeb932.jpg&#34; title=&#34;activate_mozrepl by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7503/15324164413_0a43aeb932.jpg&#34; alt=&#34;activate\_mozrepl&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have to know JavaScript to control Firefox directly. I can telnet into the MozRepl server and issue commands. It&amp;rsquo;s a bit more work than I&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm9.staticflickr.com/8680/15941835341_f064e9e2a3.jpg&#34; title=&#34;mozrepl_telnet by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8680/15941835341_f064e9e2a3.jpg&#34; alt=&#34;mozrepl\_telnet&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to control Firefox directly, though, because I&amp;rsquo;m going to let some Perl modules do that for me. The basic interface of &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; is the same as &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize&#34;&gt;WWW::Mechanize&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/local/perls/perl-5.20.0/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Mechanize::Firefox;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mech &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WWW::Mechanize::Firefox&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;autoclose_tab( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );

$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.perltricks.com&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $link ( $mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;links ) {
    state $count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    say $count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, $link&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;url;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I get a list of the links on the PerlTricks main page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0: http://perltricks.com/favicon.ico
1: http://perltricks.com/feed/atom
2: http://perltricks.com/feed/rss
3: http://perltricks.com/css/bootstrap.min.css
4: http://perltricks.com/css/carousel.css
5: http://perltricks.com/css/perltricks.css
6: https://twitter.com/intent/follow?screen_name=perltricks
7: http://perltricks.com/feed/rss
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not even the good part yet.&lt;/p&gt;

&lt;h3 id=&#34;executing-javascript&#34;&gt;Executing JavaScript&lt;/h3&gt;

&lt;p&gt;Since I&amp;rsquo;m connected to a JavaScript terminal, I can evaluate JavaScript code. The &lt;code&gt;eval&lt;/code&gt; returns the result and its type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Mechanize::Firefox;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mech &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WWW::Mechanize::Firefox&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;autoclose_tab( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;( $result, $type ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;eval( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2+2&amp;#39;&lt;/span&gt; );

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2+2 is $result (type $type)&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;2+2 is 4 (type number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That evaluates the JavaScript in its own context, which isn&amp;rsquo;t that interesting for me. I want to interact and control parts of a web page. To do that, I use the &lt;code&gt;eval_in_page&lt;/code&gt;. That runs the JavaScript with everything else going on in the current tab, including all the JavaScript code it has loaded. Here&amp;rsquo;s an example that uses the StackExchange JavaScript to change the view from the desktop mode to the mobile mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::Mechanize::Firefox;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mech &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WWW::Mechanize::Firefox&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;autoclose_tab( &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );

$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.stackoverflow.com/&amp;#39;&lt;/span&gt; );
sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
$mech&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;eval_in_page( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;StackExchange.switchMobile(&amp;#34;on&amp;#34;)&amp;#39;&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I run this, the screen changes from the full site to the mobile site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://farm9.staticflickr.com/8640/15943126852_07692bfc09.jpg&#34; title=&#34;screenshots by brian d foy, on Flickr&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8640/15943126852_07692bfc09.jpg&#34; alt=&#34;screenshots&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-problems&#34;&gt;Some problems&lt;/h3&gt;

&lt;p&gt;This approach has some problem though, almost none of which come from Perl. If I want to automate something that makes many requests or runs for a long time, Firefox is likely to have problems. Over time, &lt;a href=&#34;https://support.mozilla.org/en-US/kb/firefox-uses-too-much-memory-ram&#34;&gt;it&amp;rsquo;s memory footprint grows&lt;/a&gt;, leading to poor performance and crashes. Sometimes the connection to the console breaks, taking down my program with it.&lt;/p&gt;

&lt;p&gt;Because of this, I limit my use of &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; to the parts of my problem that require JavaScript. I can extract the information I need then use &lt;a href=&#34;https://metacpan.org/pod/Mojo::UserAgent&#34;&gt;Mojo::UserAgent&lt;/a&gt; to handle the other parts.&lt;/p&gt;

&lt;h3 id=&#34;similar-solutions&#34;&gt;Similar solutions&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/WWW::Mechanize::Firefox&#34;&gt;WWW::Mechanize::Firefox&lt;/a&gt; isn&amp;rsquo;t the only way to do this sort of thing. &lt;a href=&#34;http://blogs.perl.org/users/robhammond/2013/02/web-scraping-with-perl-phantomjs.html&#34;&gt;Rob Hammond posted on blogs.perl.org about PhantomJS&lt;/a&gt;, which received some comments about &lt;a href=&#34;https://metacpan.org/pod/WWW::WebKit&#34;&gt;WWW::WebKit&lt;/a&gt;. There used to be a Win32::IE::Mechanize, but apparently it &lt;a href=&#34;http://www.perlmonks.org/?node_id=1061372&#34;&gt;doesn&amp;rsquo;t work in IE 8&lt;/a&gt;. &lt;a href=&#34;http://www.seleniumhq.org&#34;&gt;Selenium&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Test::WWW::Selenium&#34;&gt;Test::WWW::Selenium&lt;/a&gt; is another tool that I could use, but that&amp;rsquo;s more geared to browser acceptance testing and replays.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Join the discussion on the Perl &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2onaz4/controlling_firefox_from_perl_by_brian_d_foy/&#34;&gt;subreddit&lt;/a&gt; about this article!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;last paragraph updated to include Selenium reference. 2014-12-09&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easily check your IP address with Perl</title>
      <link>http://localhost:1313/article/116/2014/9/18/Easily-check-your-IP-address-with-Perl/</link>
      <pubDate>Thu, 18 Sep 2014 12:22:54 +0000</pubDate>
      
      <guid>http://localhost:1313/article/116/2014/9/18/Easily-check-your-IP-address-with-Perl/</guid>
      <description>

&lt;p&gt;Every now and then I&amp;rsquo;ll run into a problem where I need to programmatically check my IP address. Each time I&amp;rsquo;ve hand-crafted a solution, which is fine, but good programming is DRY programming, and so I finally wrote a module to do it. The module is called &lt;a href=&#34;https://metacpan.org/pod/WWW::curlmyip&#34;&gt;WWW::curlmyip&lt;/a&gt; because it uses the &lt;a href=&#34;http://curlmyip.com&#34;&gt;curlmyip.com&lt;/a&gt; service. I find the module useful and you might too.&lt;/p&gt;

&lt;h3 id=&#34;core-perl-solution&#34;&gt;Core Perl solution&lt;/h3&gt;

&lt;p&gt;Before we look at the module, let&amp;rsquo;s consider a Perl solution using only core Perl code. I can grab my IP address from the terminal with a single line of Perl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MHTTP::Tiny &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://curlmyip.com})-&amp;gt;{content}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;121.45.140.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; if you&amp;rsquo;re on Windows use double quotes instead of singles.&lt;/p&gt;

&lt;p&gt;Well that was easy. But notice how I didn&amp;rsquo;t have to append a newline to the output? That&amp;rsquo;s because curlmyip.com returns the IP address with a newline appended. If we want to use the IP address as an input to any other program, we&amp;rsquo;ll need to &lt;code&gt;chomp&lt;/code&gt; that newline away. The code would then be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MHTTP::Tiny &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$ip=HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://curlmyip.com})-&amp;gt;{content}; chomp $ip; say $ip&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;121.45.140.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not so clean anymore is it? In fact it would be a stretch to call this a &amp;ldquo;one liner&amp;rdquo; at all. What about if I wanted to add exception handling, to &lt;code&gt;die&lt;/code&gt; and print a useful error message? Once you get to this stage, it&amp;rsquo;s time to think about putting the code into a module.&lt;/p&gt;

&lt;h3 id=&#34;using-www-curlmyip&#34;&gt;Using WWW::curlmyip&lt;/h3&gt;

&lt;p&gt;The module exports a &lt;code&gt;get_ip&lt;/code&gt; function which returns the IP address. It&amp;rsquo;s super simple to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::curlmyip;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ip();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good. But what can you do with this information? In the past I&amp;rsquo;ve had programs check my IP address when connected to a VPN, or to TOR to confirm my real IP is masked. The other obvious use case is geolocation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; WWW::curlmyip;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Geo::IP;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ip();

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $geoip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Geo::IP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GeoLiteCity.dat&amp;#39;&lt;/span&gt;, GEOIP_STANDARD);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $record &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $geoip&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;record_by_addr($ip);

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You are in $record-&amp;gt;{region_name}, $record-&amp;gt;{country_code}\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this code I retrieve my IP address and then lookup my location using the &lt;a href=&#34;https://metacpan.org/pod/Geo::IP&#34;&gt;Geo::IP&lt;/a&gt; module from MaxMind. Saving the code as &lt;code&gt;whereami.pl&lt;/code&gt; and running it outputs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ whereami&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
You are in New York, US&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The geolocation data could also be used an an input to last week&amp;rsquo;s weather &lt;a href=&#34;http://perltricks.com/article/114/2014/9/11/Get-a-weather-report-at-the-terminal-with-Perl&#34;&gt;script&lt;/a&gt; to automatically retrieve the weather forecast for your local area.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a simple task but hopefully WWW::curlmyip makes obtaining your IP address a little easier. If your interested in Geo::IP, check out Gabor Szabo&amp;rsquo;s recent &lt;a href=&#34;http://perlmaven.com/using-travis-ci-and-installing-geo-ip-on-linux#h2&#34;&gt;guide&lt;/a&gt; on how to install it. Finally, if you want to get your IP address and location in a single request, take a look at my other new module, &lt;a href=&#34;https://metacpan.org/pod/WWW::ipinfo&#34;&gt;WWW::ipinfo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generate static websites from dynamic Perl web apps</title>
      <link>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</link>
      <pubDate>Tue, 15 Jul 2014 12:26:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Static websites aren&amp;rsquo;t suitable for every situation, but they have several advantages over dynamic apps; they&amp;rsquo;re more efficient, more secure and simpler to deploy. That said, developing and maintaining a static site is a pain, there&amp;rsquo;s just too much repetitive boilerplate code. Enter &lt;a href=&#34;https://metacpan.org/pod/wallflower&#34;&gt;Wallflower&lt;/a&gt;, it generates static websites from PSGI compatible Perl web applications. You get the best of both worlds: develop the routes, templates and unit tests in your favourite web framework but deploy it as a static website with Wallflower.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The CPAN Testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=App-Wallflower+1.004&#34;&gt;results&lt;/a&gt; for the latest version (v1.004) of App::Wallflower show it runs on just about any Perl and operating system, including Windows. You can install it from CPAN by going to the command line and typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::Wallflower&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wallflower-in-action&#34;&gt;Wallflower in action&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple application using &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a skeleton application for us. Now change into the root application directory and create a new directory to hold the static files, we&amp;rsquo;ll call it &amp;ldquo;static&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cd MyApp
$ mkdir static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s all we need to generate the static site with wallflower:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wallflower &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;d static&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wallflower will request the application root page (&amp;lsquo;/&amp;rsquo;) and spider all links it finds from there, copying the files to the static folder. This includes files referenced in your html and css, such as JavaScript files. If your app has links to all of its pages, this is all you need.&lt;/p&gt;

&lt;h3 id=&#34;test-the-static-site-with-nginx&#34;&gt;Test the static site with nginx&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s deploy the site with nginx locally (you&amp;rsquo;ll need nginx installed for this). First create the virtual host file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;server {
    listen &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
    server_name localhost;
    root &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#e6db74&#34;&gt;/MyApp/s&lt;/span&gt;tatic;
    location &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; {
        index index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html;
        rewrite &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/$ /i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html break;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming a unix-like platform, save the virtual host file to &amp;ldquo;/etc/nginx/sites-available/localhost&amp;rdquo;. Next enter these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ sudo cp static &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MyApp
$ cd &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/&lt;/span&gt;nginx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sites&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;enabled
$ sudo ln &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/sites-available/&lt;/span&gt;localhost&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to start nginx. On RHEL/Fedora/CentOS you can start nginx with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ sudo nginx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Ubuntu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo service nginx start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now check out the site at &lt;a href=&#34;http://localhost:&#34;&gt;http://localhost:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/102/dancer2.png&#34; alt=&#34;The default Dancer app - statically deployed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty good to me!&lt;/p&gt;

&lt;h3 id=&#34;wallflower-tips&#34;&gt;Wallflower Tips&lt;/h3&gt;

&lt;p&gt;A few things I&amp;rsquo;ve found whilst using Wallflower:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use absolute urls over relative ones. So if you host your font files in your css directory, use: &amp;ldquo;/css/MyFont.ttf&amp;rdquo; instead of &amp;ldquo;MyFont.ttf&amp;rdquo; in your css files.&lt;/li&gt;
&lt;li&gt;Think about files you use but aren&amp;rsquo;t directly linked to in your app&amp;rsquo;s HTML pages, the sitemap.xml file for example. Feed urls for these files to Wallflower with the -F option.&lt;/li&gt;
&lt;li&gt;Watch out for urls in commented code as Wallflower will copy these too!&lt;/li&gt;
&lt;li&gt;The Wallflower docs recommend using extensions in your urls to ensure the correct content-type is set. I found this wasn&amp;rsquo;t required when I deployed the files with nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether you prefer developing applications with Catalyst, Dancer or Mojolicious, Wallflower is a useful tool that can be incorporated into your development and deployment process. For further examples of Wallflower in action, check out the &lt;a href=&#34;https://metacpan.org/pod/Wallflower::Tutorial&#34;&gt;tutorial&lt;/a&gt; and advent calendar &lt;a href=&#34;http://www.perladvent.org/2012/2012-12-22.html&#34;&gt;entry&lt;/a&gt; by Wallflower creator Philippe Bruhat (BooK).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;©&lt;/a&gt; &lt;a href=&#34;https://www.flickr.com/photos/ruthanddave/9432335346/in/photolist-9YgULK-6CwkPH-m68vYZ-4P7TsV-4Pc9dL-7UqEXc-8rbEQq-mPFbgf-Hw6fU-2JcQ24-7ZdMJc-5q1xn5-fnvbFu-fpNhu5-bY6j7J-6HC9cQ-7Y666Z-4RGjZ5-c5bJ5A-5Ma2Kx-7UshUJ-buamir-qLy2D-26mzb-nUfKdk-818aoT-4ne9U5-azaNvR-c7Ztsj-sbu9W-4hrgcG-8r8yrv-hdmVrd-a72iqb-4Kebyi-aEpfqd-6cdRLZ-7iqNqm-6XsteA-b8crZZ-ubPgJ-8pBxDZ-6R63RH-6AnSCX-byKj2-8b97G8-d6X7B-dddPtT-6pUqhf-ejhHg3|&#34;&gt;Ruth Hartnup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just how much heavier is Catalyst than Dancer2?</title>
      <link>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</link>
      <pubDate>Mon, 05 May 2014 12:29:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/85/2014/5/5/Just-how-much-heavier-is-Catalyst-than-Dancer2-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Within the Perl community it is received wisdom that Catalyst is a heavyweight web framework with many dependencies and that Dancer2 is a micro web framework that&amp;rsquo;s more agile than a Cirque du Soleil acrobat. But is it true?&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;tech-specs&#34;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;The comparison was between &lt;a href=&#34;https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90062/lib/Catalyst/Runtime.pm&#34;&gt;Catalyst 5.90062&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/release/XSAWYERX/Dancer2-0.140000&#34;&gt;Dancer2 0.14&lt;/a&gt;. For local tests the machine used was a 2011 MacBook Air running Fedora 19 and Perl 5.16.3.&lt;/p&gt;

&lt;h3 id=&#34;number-of-dependencies&#34;&gt;Number of Dependencies&lt;/h3&gt;

&lt;p&gt;The greatest perceived difference between Catalyst and Dancer2 is the number of dependencies each has, with Catalyst being thought to have &amp;ldquo;too many&amp;rdquo;. For example at the recent German Perl workshop, Dancer2 development lead Sawyer X &lt;a href=&#34;http://www.youtube.com/watch?v=91xDp_Eus5c&amp;amp;t=12m09s&#34;&gt;joked&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re not pulling off half of CPAN like maybe a different web framework [Catalyst]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compare the two frameworks, we need to compare all of their dependencies; not just those first-order dependencies used by the framework, but also those used by the modules used by the framework and so on. Fortunately this is an easy comparison to make using &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created two stacks, one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Catalyst/graphs&#34;&gt;Catalyst&lt;/a&gt; and one for &lt;a href=&#34;https://stratopan.com/sillymoose/WebStuff/Dancer2/graphs&#34;&gt;Dancer2&lt;/a&gt;. Their respective dependency graphs are shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/85/catalyst%20dependencies.png&#34; alt=&#34;Catalyst framework&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/images/85/dancer2%20dependencies.png&#34; alt=&#34;Dancer2 framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tabulating the Stratopan data for the two stacks we get:&lt;/p&gt;

&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;col width=&#34;33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Framework&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Direct Dependencies&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Recursive Dependencies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Catalyst&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Dancer2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Stratopan reveals that while Catalyst required 15 more modules than Dancer2 (+52%), when considering recursive dependencies, the Catalyst stack is only 19% larger than the Dancer2 stack. Interestingly, over 61% of the 96 distributions Dancer2 uses are used by Catalyst.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;When installing a CPAN module, the module tests usually take the longest time of the installation process and can contribute to the perceived &amp;ldquo;size&amp;rdquo; of the module. As the maturer framework, perhaps Catalyst simply has more tests than Dancer2, and therefore it&amp;rsquo;s installation process takes longer?&lt;/p&gt;

&lt;p&gt;To check for this, I tested both frameworks installation tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
$ make
$ make test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Catalyst&amp;rsquo;s test results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3374&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.16&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;172.95&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;4.56&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;178.52&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2&amp;rsquo;s results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, Tests&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; wallclock secs ( &lt;span style=&#34;color:#ae81ff&#34;&gt;0.38&lt;/span&gt; usr  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.07&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19.68&lt;/span&gt; cusr  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.46&lt;/span&gt; csys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21.59&lt;/span&gt; CPU)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These results show that Catalyst ran 3,374 tests over 3 minutes compared to Dancer2&amp;rsquo;s 1,112 tests over 21 seconds. So while Catalyst did run more tests, it was also slower in executing them; Dancer2 executed 53 tests per second and Catalyst managed 19 tests per second.&lt;/p&gt;

&lt;p&gt;What would explain this discrepancy? Perhaps Dancer2 has more trivial tests that run quicker than Catalyst&amp;rsquo;s tests. As a control I checked the code coverage of each framework&amp;rsquo;s test suite using &lt;a href=&#34;https://metacpan.org/pod/Devel::Cover&#34;&gt;Devel::Cover&lt;/a&gt;. Dancer2&amp;rsquo;s total test coverage was 84.7% whilst Catalyst&amp;rsquo;s was 85.5% - a negligible difference.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So is Catalyst&amp;rsquo;s &amp;ldquo;heavyweight&amp;rdquo; reputation deserved? Whilst it does not have a significantly greater number of dependencies than Dancer2, during installation Dancer2&amp;rsquo;s test suite runs far faster than Catalyst&amp;rsquo;s and with a similar code coverage. This doesn&amp;rsquo;t mean Dancer2&amp;rsquo;s test suite is better than Catalyst&amp;rsquo;s (Catalyst&amp;rsquo;s test suite could have higher cyclomatic complexity). But it does show that Dancer2&amp;rsquo;s simpler micro-framework approach offers benefits beyond fast startups and application development time. As a Catalyst user, I&amp;rsquo;ve found Catalyst to be plenty fast for my needs (like PerlTricks.com), however its startup time is noticeably slow and during installation tests the Catalyst test application is started and stopped multiple times. I expect that contributes more to discrepancy in installation times between Dancer2 and Catalyst than anything else.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;text=Just+how+much+heavier+is+Catalyst+than+Dancer2%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F85%2F2014%2F5%2F5%2FJust-how-much-heavier-is-Catalyst-than-Dancer2-&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

