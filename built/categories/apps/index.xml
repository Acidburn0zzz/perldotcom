<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apps on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/apps/</link>
    <description>Recent content in Apps on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Dec 2015 17:20:05 +0000</lastBuildDate>
    <atom:link href="/categories/apps/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quick tip: git push origin hamster?</title>
      <link>http://localhost:1313/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</link>
      <pubDate>Thu, 24 Dec 2015 17:20:05 +0000</pubDate>
      
      <guid>http://localhost:1313/article/206/2015/12/24/Quick-tip--git-push-origin-hamster-/</guid>
      <description>&lt;p&gt;My typing is horrible. I make mistakes all the time. I&amp;rsquo;m an avid &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; user but I still use the arrow keys. I&amp;rsquo;m one of those people who need technology that does what they meant, not what they asked for. So if you&amp;rsquo;re a coder like me, you probably see this a lot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git push origin amster
error: src refspec amster does &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; match any&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately there is a simple workaround: Git&amp;rsquo;s &lt;a href=&#34;https://git-scm.com/docs/git-symbolic-ref&#34;&gt;symbolic references&lt;/a&gt;. I can add a symbolic reference for &lt;code&gt;amster&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git symbolic&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ref refs&lt;span style=&#34;color:#e6db74&#34;&gt;/heads/&lt;/span&gt;amster refs&lt;span style=&#34;color:#e6db74&#34;&gt;/heads/m&lt;/span&gt;aster&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now Git does what I meant:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git push origin amster
Counting objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Delta compression using up to &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Compressing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Writing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#e6db74&#34;&gt;/3), 695 bytes | 0 bytes/s&lt;/span&gt;, done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
Total &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
To git@github&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com:user&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;SomeProject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
   ec208c7&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;fb0cb8f  amster &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because it&amp;rsquo;s a symbolic reference, anytime I mean to type &lt;code&gt;master&lt;/code&gt; but actually type &lt;code&gt;amster&lt;/code&gt;, Git will do the right thing. Try it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run only one instance of a program at a time</title>
      <link>http://localhost:1313/article/2/2015/11/4/Run-only-one-instance-of-a-program-at-a-time/</link>
      <pubDate>Wed, 04 Nov 2015 13:03:49 +0000</pubDate>
      
      <guid>http://localhost:1313/article/2/2015/11/4/Run-only-one-instance-of-a-program-at-a-time/</guid>
      <description>

&lt;p&gt;Recently I wanted to schedule a Perl app to run every minute on a server, but if an instance of the app was already running, it should exit and do nothing. This is a common problem and I was able to solve it with a lockfile. Let&amp;rsquo;s see how to use lockfiles in Perl.&lt;/p&gt;

&lt;h3 id=&#34;lockfiles-you-say&#34;&gt;Lockfiles you say?&lt;/h3&gt;

&lt;p&gt;Most operating systems support file locking - it&amp;rsquo;s an essential tool to prevent multiple processes updating a file at the same time and causing data loss. Processes obtain file locks when they are accessing a file to prevent other processes changing them, and release the file lock when they&amp;rsquo;re done, freeing the file to be used by other processes again.&lt;/p&gt;

&lt;p&gt;Programs can use the lock file principle to prevent multiple instances of themselves running at the same time. When the program starts it tries to lock the lockfile, if successful it executes the program, else it exits. When the program process ends, any locks it obtained are removed by the OS. You may have seen lockfiles before, they are usually ordinary files with a &lt;code&gt;.lock&lt;/code&gt; extension.&lt;/p&gt;

&lt;h3 id=&#34;file-locking-in-perl&#34;&gt;File locking in Perl&lt;/h3&gt;

&lt;p&gt;Perl provides the &lt;a href=&#34;https://perldoc.perl.org/functions/flock.html&#34;&gt;flock&lt;/a&gt; function for file locking. It takes a filehandle and a constant value for the lock type. So to get an exclusive lock on a file, I could do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.lock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
flock $file, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# we have the lock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code starts by opening a write filehandle to the file &lt;code&gt;app.lock&lt;/code&gt;. If successful, it attempts to get an exclusive lock on the file by calling flock with the number 2. An exclusive lock means no other process can access the file whilst the lock is active. Remembering the constant values for lock types can be a pain, so helpfully the &lt;a href=&#34;https://metacpan.org/pod/Fcntl&#34;&gt;Fcntl&lt;/a&gt; module will export constant names if you ask nicely. I&amp;rsquo;ll update the code to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Fcntl &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:flock)&lt;/span&gt;;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.lock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
flock $file, LOCK_EX &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# we have the lock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code does the same thing as before but we don&amp;rsquo;t need to remember the constant value for the lock type (LOCK_EX == exclusive lock). Note there is no need to unlock the file - when the program exits, the lock will be removed automatically.&lt;/p&gt;

&lt;h3 id=&#34;non-blocking-flock&#34;&gt;Non-blocking flock&lt;/h3&gt;

&lt;p&gt;So far so good but we have a problem. If the file is locked, &lt;code&gt;flock&lt;/code&gt; will block and keep our program waiting around until the lock is removed. I want is the program to exit immediately if it can&amp;rsquo;t obtain the lock. The only way to check if a file is locked is with &lt;code&gt;flock&lt;/code&gt; though! Fortunately the &lt;code&gt;flock&lt;/code&gt; developers had considered this issue, and I can pass an extra argument to indicate I want a non-blocking lock.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Fcntl &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:flock)&lt;/span&gt;;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.lock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
flock $file, LOCK_EX&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;LOCK_NB &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# we have the lock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve added &lt;code&gt;|LOCK_NB&lt;/code&gt; to the flock arguments and now it will return false immediately if it cannot obtain an exclusive lock.This provides the non-blocking behavior I need.&lt;/p&gt;

&lt;h3 id=&#34;testing-it-out&#34;&gt;Testing it out&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to put this locking code into a quick script so I can test the lock functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Fcntl &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:flock)&lt;/span&gt;;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.lock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
flock $file, LOCK_EX&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;LOCK_NB &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file: $!&amp;#34;&lt;/span&gt;;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll save the script as &lt;code&gt;sleep60.pl&lt;/code&gt; and test it at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt; sleep60&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;sleep60&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;21505&lt;/span&gt;
$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;sleep60&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
Unable to lock file Resource temporarily unavailable at &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;sleep60&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl line &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking good! I tried to run the script twice and the second time, the system printed the expected error message and exited.&lt;/p&gt;

&lt;h3 id=&#34;avoiding-external-files&#34;&gt;Avoiding external files&lt;/h3&gt;

&lt;p&gt;Using an external file feels kind-of-dirty. What I&amp;rsquo;d really like to do is tidy up by deleting the lockfile once the program has finished. However unlocking and deleting the file involves extra steps which may introduce a &lt;a href=&#34;https://en.wikipedia.org/wiki/Race_condition&#34;&gt;race condition&lt;/a&gt;. Instead of deleting the file, what if we never created it? One way to do this is to use the &lt;a href=&#34;http://perltricks.com/article/24/2013/5/11/Perl-tokens-you-should-know&#34;&gt;__DATA__&lt;/a&gt; filehandle, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Fcntl &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:flock)&lt;/span&gt;;
flock DATA, LOCK_EX&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;LOCK_NB &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file $!&amp;#34;&lt;/span&gt;;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;);
__DATA__&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This version of the script opens a lock on the &lt;code&gt;DATA&lt;/code&gt; filehandle and creates no external files. Mark Jason Dominus &lt;a href=&#34;http://perl.plover.com/yak/flock/samples/slide006.html&#34;&gt;showed&lt;/a&gt; this ingenious trick years ago. Another trick Mark showed was to open the lockfile on the program file itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Fcntl &lt;span style=&#34;color:#e6db74&#34;&gt;qw(:flock)&lt;/span&gt;;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;our&lt;/span&gt; $file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $0 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
flock $file, LOCK_EX&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;LOCK_NB &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lock file $!&amp;#34;&lt;/span&gt;;

sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This frees up &lt;code&gt;DATA&lt;/code&gt; and has the added benefit that the code can be exported by a module (by using &lt;code&gt;our&lt;/code&gt; instead of &lt;code&gt;my&lt;/code&gt;). Note that the &lt;code&gt;open&lt;/code&gt; arguments have been changed to use a read-only filehandle to avoid truncating the source code of the program! If you need this behavior, you can implement it yourself as shown above, or use my module &lt;a href=&#34;https://metacpan.org/pod/IPC::Lockfile&#34;&gt;IPC::Lockfile&lt;/a&gt;, which will do it for you. If you need more refined lockfile functionality, have a look at &lt;a href=&#34;https://metacpan.org/pod/Sys::RunAlone&#34;&gt;Sys::RunAlone&lt;/a&gt; which uses the same trick (thanks to &lt;a href=&#34;https://metacpan.org/author/BOOK&#34;&gt;BooK&lt;/a&gt; for the reference). There are also plenty of other options on &lt;a href=&#34;https://metacpan.org/search?size=20&amp;amp;q=lockfile&amp;amp;search_type=modules&#34;&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;added Sys::RunAlone reference - 2015-11-28.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple, secure backups with Perl</title>
      <link>http://localhost:1313/article/185/2015/8/27/Simple--secure-backups-with-Perl/</link>
      <pubDate>Thu, 27 Aug 2015 13:09:11 +0000</pubDate>
      
      <guid>http://localhost:1313/article/185/2015/8/27/Simple--secure-backups-with-Perl/</guid>
      <description>

&lt;p&gt;Recently I was searching for a backup solution, and ended up rolling my own. The result is &lt;a href=&#34;https://github.com/dnmfarrell/Stasis&#34;&gt;Stasis&lt;/a&gt; a Perl program that uses &lt;code&gt;tar&lt;/code&gt; and &lt;code&gt;gpg&lt;/code&gt; to compress and encrypt files.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Stasis takes a list of file and directory paths and builds a temporary compressed gzip archive using &lt;code&gt;tar&lt;/code&gt;. It then encrypts the temporary archive with &lt;code&gt;gpg&lt;/code&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES 256-bit&lt;/a&gt;, saving it to a new location and removes the temporary archive. Stasis supports backups using a passphrase or a GPG key.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say I wanted to backup all files in my main home directories. I&amp;rsquo;d create a text file called &lt;code&gt;files_to_backup.txt&lt;/code&gt;, that contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/dfarrell/Documents
/home/dfarrell/Downloads
/home/dfarrell/Music
/home/dfarrell/Pictures
/home/dfarrell/Videos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can save all of these directories and files to Dropbox:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis --destination ~/Dropbox --files files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or more tersely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passphrase mysecretkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use passfile instead of passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt --passfile /path/to/passfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the &amp;ldquo;referrer&amp;rdquo; argument to provide a GPG key instead of a passphrase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ignore the files matching patterns in &lt;code&gt;.stasisignore&lt;/code&gt;. This is useful if I wanted to ignore certain types of files, like OSX &lt;code&gt;.DS_Store&lt;/code&gt; index files or more broadly, all hidden files: &lt;code&gt;.*&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r keyname@example.com -i .stasisignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;limiting-the-number-of-backups&#34;&gt;Limiting the number of backups&lt;/h3&gt;

&lt;p&gt;Stasis accepts the &lt;code&gt;--limit&lt;/code&gt; option to only retain the most recent x backups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works really nicely with the &lt;code&gt;--days&lt;/code&gt; option, which tells stasis to only create a new archive if one deosn&amp;rsquo;t already exist within x days. So to keep a months&amp;rsquo; worth of weekly archives, I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com --limit 4 --days 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now stasis will only retain the last 4 archives, and only create one new archive a week. My personal laptop isn&amp;rsquo;t always on, so I have a cron job that checks for this every 30 minutes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/30 * * * * stasis -de ~/Dropbox -f files_to_backup.txt -r mygpgkey@email.com -l 4 -da 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;restoring-a-backup&#34;&gt;Restoring a backup&lt;/h3&gt;

&lt;p&gt;First decrypt the the backup with &lt;code&gt;gpg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg -d /path/to/backup.tar.gz.gpg &amp;gt; /path/to/output.tar.gz
gpg: AES256 encrypted data
gpg: encrypted with 1 passphrase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GPG will ask for the passphrase or GPG key passphrase to unlock the data. You can then inspect the decrypted archive&amp;rsquo;s files with &lt;code&gt;tar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar --list -f /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvtf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To unzip the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -zvxf /path/to/output.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;disadvantages-of-stasis&#34;&gt;Disadvantages of Stasis&lt;/h3&gt;

&lt;p&gt;Stasis suits my needs but it has several drawbacks which mean it might not be ideal for you. For one thing, it creates a standalone, encrypted archive every time it runs instead of incremental backups. Although this is simple, it also wastes space, so consider the implications if you intend to keep many backup copies. Because Stasis creates a temporary copy of the data it archives, it also requires enough disk space to create two compressed archives of the data.&lt;/p&gt;

&lt;p&gt;As Stasis creates a new archive every time, it can be a resource intensive process to backup. On my ultrabook, it takes Stasis about 20 seconds to create a new 400MB new archive. If you are intending to archive large amounts of data, you may need another solution.&lt;/p&gt;

&lt;p&gt;Archive names are fixed and should not be changed. Stasis creates encrypted archives with the ISO 8601 datetime in the filename like:&lt;code&gt;stasis-0000-00-00T00:00:00.tar.gz.gpg&lt;/code&gt;. To detect previous backup files, Stasis looks for files matching this pattern in the backup directory. This comes into play of you use the &lt;code&gt;--limit&lt;/code&gt; option.&lt;/p&gt;

&lt;h3 id=&#34;stasis-cheatsheet&#34;&gt;Stasis cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;stasis [options]

Options:

  --destination -de destination directory to save the encrypted archive to
  --days        -da only create an archive if one doesn&#39;t exist within this many days (optional)
  --files       -f  filepath to a text file of filepaths to backup
  --ignore      -i  filepath to a text file of glob patterns to ignore (optional)
  --limit       -l  limit number of stasis backups to keep in destination directory (optional)
  --passphrase      passphrase to use
  --passfile        filepath to a textfile containing the password to use
  --referrer    -r  name of the gpg key to use (instead of a passphrase or passfile)
  --temp        -t  temp directory path, uses /tmp by default
  --verbose     -v  verbose, print progress statements (optional)
  --help        -h  print this documentation (optional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt;:&lt;em&gt;Added new section covering &amp;ndash;days options, removed scripting section 2016-04-02&lt;/em&gt;
&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rip music from anywhere with Audacity</title>
      <link>http://localhost:1313/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</link>
      <pubDate>Thu, 30 Jul 2015 12:49:46 +0000</pubDate>
      
      <guid>http://localhost:1313/article/186/2015/7/30/Rip-music-from-anywhere-with-Audacity/</guid>
      <description>

&lt;p&gt;Sorry Perlers, this post contains no Perl code. Instead I want to show you how to record music with the open source tool &lt;a href=&#34;http://audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;. If you listen to music on YouTube, Soundcloud, Pandora - wherever, you can rip it and save it using Audacity. Say goodbye to the arms race of YouTube downloaders/decoders and HTTP network analysis to find the direct URL for the underlying MP3 (looking at you Bandcamp - still vulnerable at the time of writing). Instead say hello to a solution that will work as long as music plays through your computer (so - forever).&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First install Audacity. I&amp;rsquo;m a fedora user so I grabbed it with &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt;, but users of other systems can use their package manager or get pre-built &lt;a href=&#34;http://www.fosshub.com/Audacity.html/audacity-minsrc-2.1.1.tar.xz&#34;&gt;binary&lt;/a&gt; for Windows or OSX.&lt;/p&gt;

&lt;p&gt;Disable your microphone, you don&amp;rsquo;t want Audacity recording anything except the sound passing out of your speakers. Navigate to the webpage which you want to record from, but don&amp;rsquo;t start the music yet.&lt;/p&gt;

&lt;h3 id=&#34;recording-and-exporting&#34;&gt;Recording and Exporting&lt;/h3&gt;

&lt;p&gt;Start Audacity, click the &amp;ldquo;Transport&amp;rdquo; menu, and select &amp;ldquo;Sound Activated Recording&amp;rdquo;. Now click the record button, and Audacity should pause recording. Switch to the webpage you wan to record from and start the music. You should see Audacity detect the music and begin recording. Once the music has finished, stop Audacity.&lt;/p&gt;

&lt;p&gt;If the music contains more than one track, you&amp;rsquo;ll need to add labels at the start of each track. A fast way to do this is using the silence analyzer. Click the &amp;ldquo;Analyze&amp;rdquo; menu, and &amp;ldquo;Silence Finder&amp;rdquo;. Press &amp;ldquo;OK&amp;rdquo; and Audacity will add a label at each point of silence in the music. Make sure you add a label to the beginning of the music - sound activated recording usually means the first track is not preceded by silence. To manually add labels, just navigate to the section of music where you want to add a label and press &lt;code&gt;Control + B&lt;/code&gt;. You can give each label a title, or add them on export later.&lt;/p&gt;

&lt;p&gt;To maximize the recorded volume, press &lt;code&gt;Control + A&lt;/code&gt; to select all of the recording, select the &amp;ldquo;effect&amp;rdquo; menu, and &amp;ldquo;normalize&amp;rdquo;. The default value of -1.0 decibel is fine. This will ensure the recording doesn&amp;rsquo;t sound &amp;ldquo;quiet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Finally, select the &amp;ldquo;File&amp;rdquo; menu and &amp;ldquo;Export Audio&amp;rdquo; or &amp;ldquo;Export Multiple&amp;rdquo; if you have more than one track to export. If you&amp;rsquo;re exporting mp3, Audacity will let you add mp3 tags to each track at this point. That&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;automating-the-process&#34;&gt;Automating the process&lt;/h3&gt;

&lt;p&gt;One downside to this method is it is highly manual. One way to automate some of it is by using an Audacity&amp;rsquo;s &lt;a href=&#34;http://manual.audacityteam.org/man/Chains_-_for_batch_processing_and_effects_automation&#34;&gt;chains&lt;/a&gt; feature. To script an audio recording process with Perl, the &lt;a href=&#34;https://metacpan.org/pod/Audio::PortAudio&#34;&gt;Audio::PortAudio&lt;/a&gt; module looks promising, for the capturing and saving of audio data at least.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello perldoc, productivity booster</title>
      <link>http://localhost:1313/article/155/2015/2/26/Hello-perldoc--productivity-booster/</link>
      <pubDate>Thu, 26 Feb 2015 13:42:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/155/2015/2/26/Hello-perldoc--productivity-booster/</guid>
      <description>

&lt;p&gt;Imagine this scenario: you&amp;rsquo;re using the DateTime module but you can&amp;rsquo;t remember the exact name of a function it provides. What do you do? You could open your browser, go to &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt;, search for DateTime and look up the answer in the module&amp;rsquo;s documentation. A faster way would be to switch to the command line, and type &lt;code&gt;perldoc DateTime&lt;/code&gt; to display the module&amp;rsquo;s documentation right there in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc&lt;/code&gt; is a command line program for reading Perl documentation. It comes with Perl, so if you&amp;rsquo;ve got Perl installed, perldoc should be available too. Using perldoc is easy: as you&amp;rsquo;ve already seen, to view the documentation of a module you&amp;rsquo;ve installed, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc Module::Name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;perldoc will search for the module and if it finds it, display the module&amp;rsquo;s documentation (written in Pod). Using perldoc you can learn more about any aspect of Perl almost instantly. Want to know more about Pod? Try &lt;code&gt;perldoc pod&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dial-f-for-functions&#34;&gt;Dial -f for functions&lt;/h3&gt;

&lt;p&gt;Perl has a huge number of built-in functions, about 224 depending on the Perl version. Who can remember exactly how they all work? I know I can&amp;rsquo;t. To lookup a Perl function, use perldoc with the &lt;code&gt;-f&lt;/code&gt; switch. For instance to look up the documentation on the &lt;code&gt;rindex&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f rindex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rindex STR,SUBSTR,POSITION
rindex STR,SUBSTR
      Works just like index() except that it returns the position of the
      last occurrence of SUBSTR in STR. If POSITION is specified,
      returns the last occurrence beginning at or before that position.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! This is all well and good, but what do you do if you can&amp;rsquo;t remember the function name? Well you could use &lt;a href=&#34;https://metacpan.org/pod/B::Keywords&#34;&gt;B::Keywords&lt;/a&gt;, but another way would be to check out &lt;code&gt;perlfunc&lt;/code&gt; the Perl documentation on built-in functions. To read it, with perldoc just type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc perlfunc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;predefined-variables&#34;&gt;Predefined Variables&lt;/h3&gt;

&lt;p&gt;As with functions, Perl has a large number of predefined variables that do everything from storing the program name to tracking the state of the regex engine. They&amp;rsquo;re really useful, but often have obscure names like &lt;code&gt;$^O&lt;/code&gt; (the OS name). So if you find yourself needing to check whether you&amp;rsquo;re looking at a list separator (&lt;code&gt;$&amp;quot;&lt;/code&gt;) or an output separator (&lt;code&gt;$/&lt;/code&gt;), just use perldoc with the &lt;code&gt;-v&lt;/code&gt; switch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v $/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because some predefined variables have weird names, you may need to quote them on the command line for perldoc to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#34;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The predefined variables documentation is known as &lt;code&gt;perlvar&lt;/code&gt;. It&amp;rsquo;s well worth a read through at least once (&lt;code&gt;perldoc perlvar&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;searching-the-documentation&#34;&gt;Searching the documentation&lt;/h3&gt;

&lt;p&gt;Perl has a lot of great documentation, but it can be hard to remember the names of all of the entries. If you ever want to browse the table of contents, use &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Many people recommend perltoc for this, but for finding relevant entries, I think the perl entry is easier to browse than perltoc.&lt;/p&gt;

&lt;p&gt;Perl also has an extensive FAQ, (another entry that&amp;rsquo;s worth a read through). It has loads of answers to common queries. As usual you can read it with &lt;code&gt;perldoc faq&lt;/code&gt;, but you can also search it using the &lt;code&gt;-q&lt;/code&gt; switch. Want to know if there are any good IDEs for Perl? (a common newbie question):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;q ide&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Is there an IDE or Windows Perl Editor?
 Perl programs are just plain text, so any editor will do.

 If you&#39;re on Unix, you already have an IDE--Unix itself. The Unix
 philosophy is the philosophy of several small tools that each do one thing
 and do it well. It&#39;s like a carpenter&#39;s toolbox.

 If you want an IDE, check the following (in alphabetical order, not order
 of preference):

 Eclipse


     The Eclipse Perl Integration Project integrates Perl editing/debugging
     with Eclipse.

 Komodo


     ActiveState&#39;s cross-platform (as of October 2004, that&#39;s Windows,
     Linux, and Solaris), multi-language IDE has Perl support, including a
     regular expression debugger and remote debugging.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-module-install-locations&#34;&gt;Finding module install locations&lt;/h3&gt;

&lt;p&gt;perldoc isn&amp;rsquo;t just about documentation. If you need to find out where a module is installed, using the &lt;code&gt;-l&lt;/code&gt; switch, perldoc will return the filepath of the module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l Test::More&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get the path, you can open it in an editor directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ vi $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l Test::More)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One trick here: some modules don&amp;rsquo;t have any POD in them, for those modules, use &lt;code&gt;-lm&lt;/code&gt; to still return the path.&lt;/p&gt;

&lt;h3 id=&#34;read-module-source-code-in-perldoc&#34;&gt;Read module source code in perldoc&lt;/h3&gt;

&lt;p&gt;Finally, perldoc can also display module source code. Just use the &lt;code&gt;-m&lt;/code&gt; switch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m Test::More&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;This article has covered the most common features, but perldoc has a bunch of other capabilities that you can read about at the command line with &lt;code&gt;man perldoc&lt;/code&gt;. The Perl documentation is also &lt;a href=&#34;http://perldoc.perl.org/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that as you get more proficient with perldoc, you&amp;rsquo;ll need the online resources less and less. Get in the habit of switching to the command line, looking up something in perldoc and flipping right back to programming - it&amp;rsquo;s a productivity win.&lt;/p&gt;

&lt;h3 id=&#34;perldoc-cheatsheet&#34;&gt;perldoc cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;perldoc [option]

Module Options                               
--------------                               
         Module documentation     
-l       Module filepath          
-lm      Module filepath (alt.)   
-m       Module source


Search Options
--------------
-f     Get a built-in function definition
-v     Get a variable definition
-q      Search the faq for a keyword


Commonly Used Entries
---------------------
perl         Language overview, list of all other entries
perltoc      Table of contents
perlfunc     Built-in functions documentation
perlvar      Predefined variables documentation
perlref      References documentation
perlre       Regex documentation
faq          The Perl FAQ

Help
----
man perldoc     List of all perldoc options
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advanced slideshow maneuvers</title>
      <link>http://localhost:1313/article/134/2014/11/13/Advanced-slideshow-maneuvers/</link>
      <pubDate>Thu, 13 Nov 2014 13:38:30 +0000</pubDate>
      
      <guid>http://localhost:1313/article/134/2014/11/13/Advanced-slideshow-maneuvers/</guid>
      <description>

&lt;p&gt;Back in June I wrote an &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;overview&lt;/a&gt; of &lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt;, a Perl app that enables markdown-driven presentations with &lt;a href=&#34;https://github.com/hakimel/reveal.js&#34;&gt;reveal.js&lt;/a&gt;. Today I want to share some of the advanced features that I&amp;rsquo;ve found useful, but are not always intuitive to include when working with reveal.js and markdown.&lt;/p&gt;

&lt;h3 id=&#34;speaker-notes&#34;&gt;Speaker notes&lt;/h3&gt;

&lt;p&gt;The speaker notes screen is one of the &amp;ldquo;killer features&amp;rdquo; of reveal.js. It&amp;rsquo;s a separate browser window that displays your current slide, the next slide, the speaker notes and the time elapsed so far (&lt;a href=&#34;https://camo.githubusercontent.com/69f044f8126bdd09cf4caafa2d9239839612a8de/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3632393432392f313738393338352f62316565323431652d363935362d313165332d383166652d6535363630643531323130612e706e67&#34;&gt;example&lt;/a&gt;). You can even control the slide transition from the speaker notes screen, enabling you to share the presentation on a large screen whilst driving the presentation from the speaker notes screen on your laptop. To add speaker notes to a slide in presentation, use the &lt;code&gt;Note:&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is my title #&lt;/span&gt;

Note:
This is the title slide &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if I launch this presentation I can view the speaker notes by pressing the &lt;code&gt;s&lt;/code&gt; key.&lt;/p&gt;

&lt;h3 id=&#34;slide-transitions&#34;&gt;Slide transitions&lt;/h3&gt;

&lt;p&gt;The default slide transition is cute, but it can get a bit tiresome after a while. The good news is reveal.js gives you fine-grained control of slide transitions, the bad news is that the syntax is ugly as hell. You have to include the slide transition commands as HTML comments within your markdown:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;slide: data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;transition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is my title #&lt;/span&gt;

Note:
This is the title slide &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line of this markdown instructs reveal.js to use &amp;ldquo;none&amp;rdquo; as the slide transition style (you can choose from default/cube/page/concave/zoom/linear/fade). The rest of the markdown is the same as before. Although it&amp;rsquo;s nice to have this control at the slide level, one downside is that you must include the slide-transition instruction on every slide where you don&amp;rsquo;t want the default transition.&lt;/p&gt;

&lt;p&gt;Another option is to use App::revealup&amp;rsquo;s &lt;code&gt;transition&lt;/code&gt; command line option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server slides&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;transition zoom&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will apply the transition style to the entire presentation. What&amp;rsquo;s nice about this option is that you can override the transition style using the inline notation described above. So choose your base transition style on the command line option, and tailor it for specific slides with the inline syntax.&lt;/p&gt;

&lt;h3 id=&#34;fragments&#34;&gt;Fragments&lt;/h3&gt;

&lt;p&gt;Fragments are slide elements that you can introduce sequentially on to a slide. I use them all the time to keep the audience&amp;rsquo;s focus on the item I&amp;rsquo;m currently talking about. This slide displays a rather uncontroversial opinion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;I &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;element: class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment&amp;#34;&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fragment&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; 

 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;❤&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;element: class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment&amp;#34;&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fragment&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; 

Perl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;element: class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment&amp;#34;&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fragment&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like slide transitions, fragments are driven by HTML comments. In this case, when the slide first loads it will be blank, clicking three times will gradually display &amp;ldquo;I ❤ Perl&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Fade your presentation to black and get your audience&amp;rsquo;s undivided attention by pressing the &lt;code&gt;b&lt;/code&gt; key. Press &lt;code&gt;b&lt;/code&gt; again to bring your presentation back. Simple!&lt;/p&gt;

&lt;h3 id=&#34;styling&#34;&gt;Styling&lt;/h3&gt;

&lt;p&gt;Like slide transitions, I found the default reveal.js theme to be a novelty that quickly wears off. The good news is you can define your own CSS to get a style that works for you. Don&amp;rsquo;t start with a blank slate! App::revealup ships with all the &lt;a href=&#34;https://metacpan.org/source/YUSUKEBE/App-revealup-0.14/share/revealjs/css/theme&#34;&gt;standard themes&lt;/a&gt; so grab one of those and edit it to meet your needs. Test out your new theme by loading it at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;theme&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use custom CSS to develop a &amp;ldquo;house-style&amp;rdquo; for your organisation. This can help encourage adoption away from those awful stock PowerPoint templates.&lt;/p&gt;

&lt;h3 id=&#34;save-as-pdf&#34;&gt;Save as PDF&lt;/h3&gt;

&lt;p&gt;Presentations can be saved as PDF but you must be using Google Chrome for this to work. There are step-by-step &lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34;&gt;instructions&lt;/a&gt;, but one thing that wasn&amp;rsquo;t clear to me was that if you&amp;rsquo;re running the presentation on &lt;code&gt;http://localhost:5000&lt;/code&gt; you should append &amp;ldquo;?print-pdf&amp;rdquo; to the URL so it becomes &lt;code&gt;http://localhost:5000?print-pdf&lt;/code&gt;. Then reveal.js will load the presentation ready for saving to PDF.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;Hopefully these tips are useful. Combined with the previous &lt;a href=&#34;http://perltricks.com/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup&#34;&gt;article&lt;/a&gt;, you should have everything you need to craft an awesome markdown-driven presentation. Try &lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; out at your local Perl Mongers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated: *added slide transition command line option 2014-12-19&lt;/strong&gt;*&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello berrybrew, the Strawberry Perl version manager</title>
      <link>http://localhost:1313/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</link>
      <pubDate>Fri, 10 Oct 2014 12:39:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/119/2014/10/10/Hello-berrybrew--the-Strawberry-Perl-version-manager/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://perlbrew.pl/&#34;&gt;Perlbrew&lt;/a&gt; and [plenv]() are tools for managing local Perl installations. They&amp;rsquo;re useful as they let you install and use multiple versions of Perl without administrator privileges. I have a special appreciation for them as I once tried to upgrade my mac system Perl and instead wrecked it and had to reinstall OSX.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m on Windows I use Strawberry Perl, so I wrote &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;berrybrew&lt;/a&gt; to help manage Perl on Windows. It&amp;rsquo;s similar to Perlbrew and plenv; it will download, install and manage multiple versions of Strawberry Perl for you, no administrator privileges required.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;berrybrew is written in C#. If you have git you can install berrybrew by cloning the GitHub &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;repo&lt;/a&gt; and either using the pre-compiled binary, or minting your own with Mono. The pre-compiled binary is &lt;code&gt;bin/berrybrew.exe&lt;/code&gt; and should work out of the box on Windows 7 and 8 (it might work on Windows XP if you have .Net framework 2 or higher installed).&lt;/p&gt;

&lt;p&gt;To download the project with git and compile it with &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; type the following commands at the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;berrybrew
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mcs src&lt;span style=&#34;color:#e6db74&#34;&gt;/berrybrew.cs -lib:lib -r:ICSharpCode.SharpZipLib.dll -out:bin/&lt;/span&gt;berrybrew&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will output a fresh binary in the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;available&lt;/code&gt; command lists available Strawberry Perls and whether they&amp;rsquo;re installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; berrybrew available

The following Strawberry Perls are available:

            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.20.1_64&lt;/span&gt; [installed]
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.20.1_32&lt;/span&gt; [installed]
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.18.4_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.18.4_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.4_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.4_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.12.3_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1_32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that I have both versions of Perl 5.20.1 installed. I can install another version using the &lt;code&gt;install&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; berrybrew install &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1_32&lt;/span&gt;
Downloading http:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;trawberryperl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/download/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1.2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/strawberry-perl-5.10.1.2-portable.zip to C:\Users\dfarrell\AppData\Local\Temp\gp5d33yg.qjo/s&lt;/span&gt;trawberry&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe
rl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;portable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zip
Confirming checksum &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
Extracting C:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Users&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;dfarrell&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;AppData&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Local&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Temp&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;gp5d33yg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;qjo&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;strawberry&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;portable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zip

The following Strawberry Perls are available:

            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.20.1_64&lt;/span&gt; [installed]
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.20.1_32&lt;/span&gt; [installed]
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.18.4_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.18.4_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.4_64&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.4_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.12.3_32&lt;/span&gt;
            &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1_32&lt;/span&gt; [installed]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;berrybrew will download a temporary zip archive, confirm the checksums match, and extract the files to &lt;code&gt;C:\berrybrew&lt;/code&gt;. Finally I can use the newly installed Perl with the &lt;code&gt;switch&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; berrybrew switch &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1_32&lt;/span&gt;
Switched to &lt;span style=&#34;color:#ae81ff&#34;&gt;5.10.1_32&lt;/span&gt;, start a &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; terminal to &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This updates my user &lt;code&gt;%PATH%&lt;/code&gt; environment variable to point at the new Perl binary. berrybrew will also warn if it finds another Perl binary in the system or user path (such as an ActiveState or vanilla Strawberry Perl). The system path can be problematic as Windows appends the user path to the system path which means it will search the system path first for any matching Perl binary and if it finds one, it will ignore the berrybrew binary. The system path also requires administrator privileges to update, which kind of goes against the spirit of berrybrew. One way to handle these would be to ask the user if they want to remove the other path, if they say yes, then berrybrew could prompt for administrator credentials, fire up another berrybrew process and remove them. For now it just warns the user and leaves the path variables untouched.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I plan to add a few more commands to berrybrew: &lt;code&gt;exec&lt;/code&gt; to run a Perl program against every installed Perl, &lt;code&gt;uninstall&lt;/code&gt; to remove a Perl and &lt;code&gt;config&lt;/code&gt; to manage berrybrew&amp;rsquo;s settings. Under the hood a feature I&amp;rsquo;d love to add but am not sure how, is to refresh the current shell&amp;rsquo;s environment variable block, so the user doesn&amp;rsquo;t have to start a new cmd.exe when switching to a new Perl version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s early days but if you have any suggestions for new features or feedback drop me an email or fork the project on &lt;a href=&#34;https://github.com/sillymoose/berrybrew&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create static web apps with Wget</title>
      <link>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</link>
      <pubDate>Tue, 22 Jul 2014 12:44:13 +0000</pubDate>
      
      <guid>http://localhost:1313/article/103/2014/7/22/Create-static-web-apps-with-Wget/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last week we covered &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;Wallflower&lt;/a&gt; an awesome utility for generating static websites from Perl web applications. This week we&amp;rsquo;re covering an alternative method, that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Wget&#34;&gt;Wget&lt;/a&gt;. One benefit of this method is it can be used on any dynamic web application, not just Perl ones.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need Wget installed - if you&amp;rsquo;re using Linux it should already be installed. OSX users can install it with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; and there is a Windows &lt;a href=&#34;http://gnuwin32.sourceforge.net/packages/wget.htm&#34;&gt;version&lt;/a&gt; available. To follow this example you&amp;rsquo;ll also need Dancer2 installed, which you can get via cpan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan Dancer2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-application&#34;&gt;Create the application&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Dancer2 to create a basic skeleton app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ dancer2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;MANIFEST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SKIP
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Makefile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PL
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;views
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/i&lt;/span&gt;ndex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/views/&lt;/span&gt;layouts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tt
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;_index_route&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/t/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;t
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;MyApp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;environments
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;production&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/environments/&lt;/span&gt;development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yml
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;public
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;favicon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ico
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;dispatch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fcgi
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/&lt;/span&gt;javascripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;jquery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;js
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/public/im&lt;/span&gt;ages&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perldancer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets start the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;MyApp&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dancer2 v0&lt;span style=&#34;color:#ae81ff&#34;&gt;.143000&lt;/span&gt; server &lt;span style=&#34;color:#ae81ff&#34;&gt;435&lt;/span&gt; listening on http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-the-static-site&#34;&gt;Create the static site&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll point Wget at the site in recursive mode, so that it pulls all the files we need (up to a depth of 5 by default).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;page&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;requisites&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we pass Wget the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;rdquo;-r 0:3000&amp;rdquo; to recursively follow links from 0:3000&lt;/li&gt;
&lt;li&gt;-&amp;ldquo;d 0:3000&amp;rdquo; to only save static files from the local domain&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ndash;page-requisites&amp;rdquo; to pull all required files for a page, even if beyond our depth limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default Wget will create a directory named after the domain (&amp;ldquo;0:3000&amp;rdquo;) and place all static files there. And that&amp;rsquo;s it, all the files for our static site have been generated.&lt;/p&gt;

&lt;h3 id=&#34;wget-vs-wallflower&#34;&gt;Wget vs Wallflower&lt;/h3&gt;

&lt;p&gt;So if both apps can generate static sites, which one is better? If you&amp;rsquo;re working with a non-Perl site, then Wget is obviously the way to go. In terms of speed, Wget is faster if you combine the command with xargs and request the urls in parallel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cat urls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; xargs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;P16 wget &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To take advantage of the parallel GET requests, you&amp;rsquo;ll need to serve the application on a web server though.&lt;/p&gt;

&lt;p&gt;Wallflower has nice option (&amp;ldquo;-F&amp;rdquo;) to take a list of URLs to download, which can be useful if the entire site cannot be downloaded by following links from the root application page. &lt;a href=&#34;https://metacpan.org/pod/App::Wallflower&#34;&gt;App::Wallflower&lt;/a&gt; is the source library for Wallflower, and extendible through Perl code, so you can further tailor the process to meet your needs. This can be used for post-processing actions like generating a sitemap.xml or advanced setups like a hybrid application, where the public pages of the site are static, but the secure parts remain dynamic. With Wallflower all of this can be scripted in Perl, with Wget you&amp;rsquo;d need to a combination of shell scripts and Perl, which is less convenient.&lt;/p&gt;

&lt;p&gt;As was recommended in last week&amp;rsquo;s &lt;a href=&#34;http://perltricks.com/article/102/2014/7/15/Generate-static-websites-from-dynamic-Perl-web-apps#h3Wallflower%20Tips&#34;&gt;article&lt;/a&gt; make sure you&amp;rsquo;re using absolute urls in your template code to avoid deployment issues with your static files.&lt;/p&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thanks to Steve Schnepp for contacting us with this tip. Thanks to Philippe Bruhat for creating Wallflower and providing additional technical guidance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;Correction:&lt;/strong&gt; technical comparison of Wallflower and Wget updated following clarification from module author. 2014-08-02*&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get GNOME 3 popup alerts for IRC</title>
      <link>http://localhost:1313/article/95/2014/6/9/Get-GNOME-3-popup-alerts-for-IRC/</link>
      <pubDate>Mon, 09 Jun 2014 12:34:25 +0000</pubDate>
      
      <guid>http://localhost:1313/article/95/2014/6/9/Get-GNOME-3-popup-alerts-for-IRC/</guid>
      <description>

&lt;p&gt;&lt;em&gt;IRC is a great medium but chats are often intermittent and it&amp;rsquo;s easy to miss messages if your focus is elsewhere. Lately I&amp;rsquo;ve been using &lt;a href=&#34;http://irssi.org/&#34;&gt;Irssi&lt;/a&gt; which is extendible with Perl and I wrote a quick script to create a desktop popup alert any time my IRC username is mentioned in chat, or I receive a private message.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Warning, this script has a lot of dependencies. To use it, you&amp;rsquo;ll need to be running GNOME 3, have Irssi and install &lt;a href=&#34;https://metacpan.org/pod/Gtk3::Notify&#34;&gt;Gtk3::Notify&lt;/a&gt;. There is an open &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=96108&#34;&gt;issue&lt;/a&gt; on the Gtk3::Notify tests, so you&amp;rsquo;ll have to force install it at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fi Gtk3::Notify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gtk3::Notify has several C library &lt;a href=&#34;https://github.com/dnmfarrell/irssi/blob/master/gnotify.pl#L98&#34;&gt;dependencies&lt;/a&gt;, so you&amp;rsquo;ll need to install those too - your Linux distro&amp;rsquo;s package manager should have them.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Unless you&amp;rsquo;re running any scripts with Irssi already, you&amp;rsquo;ll need to create a scripts directory, and download &lt;a href=&#34;https://raw.githubusercontent.com/dnmfarrell/irssi/master/gnotify.pl&#34;&gt;gnotify.pl&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ mkdir &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.irssi/sc&lt;/span&gt;ripts
$ cd &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.irssi/sc&lt;/span&gt;ripts
$ curl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O https:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;githubusercontent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/dnmfarrell/i&lt;/span&gt;rssi&lt;span style=&#34;color:#e6db74&#34;&gt;/master/g&lt;/span&gt;notify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To have Irssi to autoload the script, create an &amp;ldquo;autorun&amp;rdquo; subdirectory with a symlink back to the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ mkdir &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.irssi/sc&lt;/span&gt;ripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;autorun
$ cd &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.irssi/sc&lt;/span&gt;ripts&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;autorun
$ ln &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;../&lt;/span&gt;gnotify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;test-the-script&#34;&gt;Test the script&lt;/h3&gt;

&lt;p&gt;To make sure gnotify.pl is working, start Irssi and try sending a private message to yourself from within Irssi:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;msg username hey this is a test message&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just replace username with your own IRC username, for me it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/95/irssi_msg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the bottom of the screen you can see the popup alert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/95/irssi_gnotify.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Apart from desktop alerts, there are myriad ways to send IRC alerts: sounds, email and sms. A more sophisticated solution would be to write a script that uses a cloud-based notification service that could then transmit the alerts across all of these channels to the end user.&lt;/p&gt;

&lt;p&gt;What types of IRC alerts do you use? Let us know on &lt;a href=&#34;http://www.reddit.com/r/perl/comments/27ox3d/get_gnome_3_popup_alerts_for_irc/&#34;&gt;Reddit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create professional slideshows in seconds with App::revealup</title>
      <link>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</link>
      <pubDate>Fri, 06 Jun 2014 12:59:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/94/2014/6/6/Create-professional-slideshows-in-seconds-with-App--revealup/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://metacpan.org/pod/App::revealup&#34;&gt;App::revealup&lt;/a&gt; is a command line app that creates slide shows from markdown documents. We listed it in this this month&amp;rsquo;s &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, but the app is so much fun I thought it was worth a separate feature.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to grab App::revealup from CPAN. The latest version (0.03) should run on most platforms including Windows. At the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan App::revealup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-a-presentation&#34;&gt;Create a presentation&lt;/h3&gt;

&lt;p&gt;App::revealup transforms markdown documents into slide shows, so let&amp;rsquo;s start by creating a basic presentation file, called presentation.md:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, markdown is easy to read. The code above is a single slide presentation. The only two interesting things going on here is the use of backticks (&amp;rdquo;`App::revealup`&amp;rdquo;) to create inline code and the hyperlink &amp;ldquo;&lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To view this slide in presentation mode, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open your browser and navigate to &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a second slide to showcase how different headers appear. In App::revealup the horizontal slide separator is three hyphens in a row (&amp;ldquo;&amp;mdash;&amp;rdquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::reveal dynamically reads the source presentation file, so you can leave the process running and just save the changes to the source presentation file. Reloading the browser at &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; should show the updated presentation. Press → to move to the second slide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can add vertical slides too. These are delimited by three underscores (&amp;rdquo;___&amp;rdquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;A quick guide to markdown  as served by &lt;span style=&#34;color:#e6db74&#34;&gt;`App::revealup`&lt;/span&gt;  
David Farrell  
[PerlTricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com](http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;perltricks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com)
June &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;  

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is H1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;## This is H2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;### This is H3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#### This is H4&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Unordered
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lists are
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; made with plus, minus &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; asterisk
___

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Ordered
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lists are
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; made with numbers &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a period&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refreshing the browser, we get two additional slides. Press ↓ to move down one slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of trawling through every slide, I&amp;rsquo;ve completed the rest of the presentation and put it on &lt;a href=&#34;https://gist.github.com/dnmfarrell/1b118c5813a7a10ea7e2&#34;&gt;GitHub&lt;/a&gt;. The presentation content is an overview of the markdown syntax. Try running it with App::revealup!&lt;/p&gt;

&lt;p&gt;One nice feature is if you ever want to zoom out, just press the escape key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/94/slide_zoom.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-app-revealup-works&#34;&gt;How App::revealup works&lt;/h3&gt;

&lt;p&gt;App::revealup is the glue between the &lt;a href=&#34;http://lab.hakim.se/reveal-js/#/&#34;&gt;reveal.js&lt;/a&gt; library and the source markdown file. It launches a PSGI web server, and compiles a basic HTML document which loads reveal.js and any required libraries or css. You can override the default css theme by passing an extra command line option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme solarized&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::revealup installs all of the basic reveal.js &lt;a href=&#34;https://github.com/hakimel/reveal.js/tree/master/css/theme&#34;&gt;themes&lt;/a&gt; or you can provide your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ revealup server presentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;port &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/custom.css&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;App::revealup is great example of Perl as a glue language - pulling together useful libraries to create something greater than the sum of its parts. If you&amp;rsquo;d like to learn more about the markdown syntax, check out this &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheetsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;text=Create+professional+slideshows+in+seconds+with+App%3A%3Arevealup&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F94%2F2014%2F6%2F6%2FCreate-professional-slideshows-in-seconds-with-App-revealup&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: command changed to match v0.10 (see &lt;a href=&#34;https://metacpan.org/changes/distribution/App-revealup&#34;&gt;changelog&lt;/a&gt;) 2014-08-24.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure your passwords with KeePass and Perl</title>
      <link>http://localhost:1313/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</link>
      <pubDate>Mon, 24 Mar 2014 13:00:38 +0000</pubDate>
      
      <guid>http://localhost:1313/article/79/2014/3/24/Secure-your-passwords-with-KeePass-and-Perl/</guid>
      <description>

&lt;p&gt;&lt;em&gt;These days password managers are an &lt;a href=&#34;http://arstechnica.com/information-technology/2013/06/the-secret-to-online-safety-lies-random-characters-and-a-password-manager/&#34;&gt;essential&lt;/a&gt; part of online security. The module File::KeePass provides an easy-to-use Perl API for the KeePass password manager and opens up a world-of-possibilities for programmatically creating, reading and updating passwords securely.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to install &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;File::KeePass&lt;/a&gt;. The CPAN testers &lt;a href=&#34;http://matrix.cpantesters.org/?dist=File-KeePass+2.03&#34;&gt;results&lt;/a&gt; show that it runs on all modern Perls and many platforms including Windows. To install the module with CPAN, fire up the terminal and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpan File::KeePass&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may want to install &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt;, an open source implementation of KeePass to get a GUI. I&amp;rsquo;ve used it on both Windows and Linux and it works great.&lt;/p&gt;

&lt;h3 id=&#34;creating-keepass-databases&#34;&gt;Creating KeePass Databases&lt;/h3&gt;

&lt;p&gt;The KeePass password manager stores all passwords in an encrypted database file. All username/password entries are stored in collections of entries called &amp;ldquo;groups&amp;rdquo;. File::KeePass provides for methods creating all of these items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::KeePass;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kp_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::KeePass&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $app_group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_group({ title &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Apps&amp;#39;&lt;/span&gt; });

$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_entry({ title     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;,
                    username  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;,
                    password  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mumstheword&amp;#39;&lt;/span&gt;,
                    group     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $app_group&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{gid},
                  });

$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;save_db(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MyAppDetails.kdb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itsasecret&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above we start by instantiating a new File::KeePass object. The &amp;ldquo;add_group&amp;rdquo; method adds a new group called &amp;ldquo;Apps&amp;rdquo; to the object. We then add an entry to the &amp;ldquo;Apps&amp;rdquo; group. The entry contains the username/password credentials that we want to store securely. Finally the &amp;ldquo;save_db&amp;rdquo; method saves the KeePass database to &amp;ldquo;MyAppDetails.kdb&amp;rdquo; (the extension is important) with a master password of &amp;ldquo;itsasecret&amp;rdquo; - in reality you would want to use a stronger password than this.&lt;/p&gt;

&lt;p&gt;Save the code as &amp;ldquo;create_keepass_db.pl&amp;rdquo; and run it on the command line with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl create_keepass_db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have KeePassX or KeePass installed, you can open the newly-created &amp;ldquo;MyAppDetails.kdb&amp;rdquo; file. When you do, you&amp;rsquo;ll be asked for the master password that we set:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/79/keepassx_login.png&#34; alt=&#34;keepassx login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve entered the master password, KeePassX will show the main window, which lists the groups and entries in the database file. You can see the &amp;ldquo;Apps&amp;rdquo; group on the left and the &amp;ldquo;email&amp;rdquo; entry that was created listed in the main window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/79/keepassx_group_entry_added.png&#34; alt=&#34;keepassx main screen&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;reading-keepass-databases&#34;&gt;Reading KeePass databases&lt;/h3&gt;

&lt;p&gt;Instead of using a GUI like KeePass or KeePassX, you can read the contents of the database file using File::KeePass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::KeePass;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kp_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::KeePass&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_db(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MyAppDetails.kdb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itsasecret&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $groups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;groups;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we opened our newly-created KeePass database file using the &amp;ldquo;load_db&amp;rdquo; method. The &amp;ldquo;groups&amp;rdquo; method returns an arrayref of groups. Each group is a hashref that also contains an arrayref of entries. Printing $groups with Data::Dumper, we can see this more clearly:&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$VAR1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
          {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;icon&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;entries&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [
                           {
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;icon&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modified&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;comment&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E31rvRS5mqK37mak&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessed&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expires&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2999-12-31 23:23:59&amp;#39;&lt;/span&gt;
                           }
                         ],
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Apps&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2450784255&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessed&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expires&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2999-12-31 23:23:59&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modified&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2014-03-24 08:28:44&amp;#39;&lt;/span&gt;
          }
        ];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;searching-and-updating-a-keepass-database&#34;&gt;Searching and updating a KeePass database&lt;/h3&gt;

&lt;p&gt;File::KeePass provides methods for searching for entries. In order to update an entry, we have to retrieve it, update it, and then save the database file. Because entries are just hashrefs, this is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::KeePass;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kp_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::KeePass&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;load_db(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MyAppDetails.kdb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itsasecret&amp;#39;&lt;/span&gt;);
$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;unlock; &lt;span style=&#34;color:#75715e&#34;&gt;# enable changes&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;find_entry({ title &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt; }); 
$entry&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{password} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mumsnottheword&amp;#39;&lt;/span&gt;;

$kp_db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;save_db(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MyAppDetails.kdb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itsasecret&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above we opened the database file, and used the &amp;ldquo;find_entry&amp;rdquo; method to search for our email entry. We then updated the password for the entry, and re-saved the database file. File::KeePass provides many additional methods for searching and updating groups and entries.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;File::KeePass has a simple API that works great and comes with comprehensive &lt;a href=&#34;https://metacpan.org/pod/File::KeePass&#34;&gt;documentation&lt;/a&gt;. I would recommend using the &amp;ldquo;.kdb&amp;rdquo; format as File::KeePass has &lt;a href=&#34;https://rt.cpan.org/Public/Dist/Display.html?Name=File-KeePass&#34;&gt;open issues&lt;/a&gt; for the &amp;ldquo;.kdbx&amp;rdquo; format.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;text=Secure+your+passwords+with+KeePass+and+Perl&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F79%2F2014%2F3%2F24%2FSecure-your-passwords-with-KeePass-and-Perl&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;Cover image © &lt;a href=&#34;http://www.flickr.com/photos/danielsphotography/466435567/sizes/o/&#34;&gt;DanielSTL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is PearlBee Perl&#39;s next great blogging platform?</title>
      <link>http://localhost:1313/article/69/2014/2/17/Is-PearlBee-Perl-s-next-great-blogging-platform-/</link>
      <pubDate>Mon, 17 Feb 2014 04:09:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/69/2014/2/17/Is-PearlBee-Perl-s-next-great-blogging-platform-/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Last year the Perl-based Movable Type blogging platform turned closed-source and left Perl without a major open source blogging platform. The wait is over; PearlBee is a new open source blogging platform written in Perl and developed by Evozon. But is it any good? We took it for a spin to find out.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;I tested the PearlBee on a machine running Fedora 19, MariaDB v5.5.34 and Perl 5.16.3. Installation was simple, I followed the readme instructions from the project&amp;rsquo;s GitHub &lt;a href=&#34;https://github.com/perl-evozon/pearlbee&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;writing-a-blog-post&#34;&gt;Writing a blog post&lt;/h3&gt;

&lt;p&gt;PearlBee comes with an administration portal from where you can write new blog posts. It&amp;rsquo;s accessed via a login page at /admin. The default login credentials are &amp;ldquo;admin&amp;rdquo; and &amp;ldquo;password&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/admin_login.png&#34; alt=&#34;PearlBee login page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once logged in, by default the new post form will display:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/new_post.png&#34; alt=&#34;PearlBee new post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The form is well put together: it has title, slug and cover image file upload controls and a WYSIWYG editor for the main blog text. To the right of the main form is a details form, for setting the blog post category and adding tags. PearlBee creates a tag object for every tag text entered, allowing the tags to be searched against and reused in later posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/completed_post.png&#34; alt=&#34;PearlBee new post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having completed the form, press &amp;ldquo;Publish&amp;rdquo; to save the post and make it live. PearlBee will display a helpful success message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/saved_post.png&#34; alt=&#34;PearlBee saved post page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the post will now be live on the main blog page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/post_on_frontpage.png&#34; alt=&#34;PearlBee page frontpage screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how PearlBee has updated the categories and tags on the right side of the screen for convenient filtering.&lt;/p&gt;

&lt;p&gt;One thing that could be better is the image handling. I found that a square image was unevenly flattened into landscape proportions (but it displays correctly on the blog front page).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/flat_onion_image.png&#34; alt=&#34;PearlBee saved post flat image page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I tested PearlBee&amp;rsquo;s image upload with both jpeg and png files and both worked fine.&lt;/p&gt;

&lt;h3 id=&#34;basic-administration&#34;&gt;Basic Administration&lt;/h3&gt;

&lt;p&gt;PearlBee&amp;rsquo;s admin portal has a slick and clean interface. Menu drop-down lists expand and contract smoothly and forms are provided to manage the site&amp;rsquo;s data. We&amp;rsquo;ve encountered some of the database model objects already: posts, categories and tags. Here is the post management page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/post_management.png&#34; alt=&#34;PearlBee post management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The page lists all posts and provides there high level attributes such as author, title and categories. It also provides switches to quickly change a post&amp;rsquo;s status. This is useful if a post needs to be taken-down and edited, or re-posted. At the time of review the page contained a couple of typos and unfortunately the link to view the article did not work (neither the link on the title or the eye icon). These can be worked around though.&lt;/p&gt;

&lt;p&gt;One other opportunity for improvement here: PearlBee should create the appropriate META tags for blog posts, using the post&amp;rsquo;s attributes. This would help with SEO.&lt;/p&gt;

&lt;p&gt;There is also a site-wide settings page for the blog. From here you can set the blog&amp;rsquo;s timezone and enable / disable use of social media buttons.&lt;/p&gt;

&lt;h3 id=&#34;comments&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;PearlBee comes with a comments system built-in. The comments form appears beneath a blog post, with existing comments showing there as well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/comment_posted.png&#34; alt=&#34;PearlBee comment management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I thought the styling on the comments form looks professional and reminded me of the &amp;ldquo;Disqus&amp;rdquo; comments system design. PearlBee provides a CAPTCHA on the form out-of-the-box, which is a useful spam filter.&lt;/p&gt;

&lt;p&gt;All comments are moderated, and require approval before going live. I tested the comment submission and moderation process and it worked first time. This is the comments management page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/69/comment_management.png&#34; alt=&#34;PearlBee comment management page screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once approved, comments appear beneath the blog post.&lt;/p&gt;

&lt;p&gt;Comments can be security risk as they allow users to upload text which is then displayed on the site. For example if a user uploads malicious JavaScript, they can carry out a XSS attack whenever a visitor loads the page with the comment (or an administrator reviews it). PearlBee does not yet implement comment content filtering which can prevent this type of attack by removing code characters from the comment text. This would need to be in place before a PearlBee site was used in a production environment.&lt;/p&gt;

&lt;h3 id=&#34;user-management&#34;&gt;User Management&lt;/h3&gt;

&lt;p&gt;PearlBee recognizes two types of users: &amp;ldquo;administrators&amp;rdquo; who can manage the site&amp;rsquo;s data, and &amp;ldquo;authors&amp;rdquo; who can write blog posts but not do much else. As with the other database objects, PearlBee provides a form-driven interface for managing the site&amp;rsquo;s users. During testing I was able to create a new author, login with that author and write blog posts. It worked well. PearlBee created a default, random, encrypted password for the account and sent the new user an email with instructions on how to login (the email actually wasn&amp;rsquo;t sent, more on this later). PearlBee uses &lt;a href=&#34;https://metacpan.org/pod/Crypt::RandPasswd&#34;&gt;Crypt::RandPasswd&lt;/a&gt; to generate the initial password, and &lt;a href=&#34;https://metacpan.org/pod/Digest::SHA1&#34;&gt;Digest::SHA1&lt;/a&gt; to encrypt it. This should be set to a stronger encryption method, as Digest::SHA1 contains &lt;a href=&#34;https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html&#34;&gt;security weaknesses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additional roles might be useful here: an editor role that can edit and publish posts, but not change the site&amp;rsquo;s settings or create new users would bridge the gap between the current admin and author roles. I would probably remove the author role&amp;rsquo;s permission to publish articles.&lt;/p&gt;

&lt;h3 id=&#34;customization&#34;&gt;Customization&lt;/h3&gt;

&lt;p&gt;PearlBee is built in a responsive design with the Twitter Bootstrap framework. The design is clever and works well at many different screen resolutions and form factors. At this time of writing there are no publicly available alternative themes, so you&amp;rsquo;re stuck with the existing theme unless you want to code an alternative one yourself. I did find an example alternative theme online: the &amp;ldquo;Built in Perl&amp;rdquo; &lt;a href=&#34;http://blog.builtinperl.com/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from the design, you&amp;rsquo;ll want to edit the PearlBee templates to use your blog&amp;rsquo;s name, and update the default footer information. It would be awesome if PearlBee were able to read this from the config.yml file, rather than requiring code edits to the template toolkit view files.&lt;/p&gt;

&lt;p&gt;PearlBee requires a local SMTP server to send emails (such as the new user welcome email). I found the email settings were hard-coded to use the default and not configurable, which meant I wasn&amp;rsquo;t able to test the email functionality. Contrary to the Makefile, PearlBee uses &lt;a href=&#34;https://metacpan.org/pod/Email::Template&#34;&gt;Email::Template&lt;/a&gt; and not MIME::Email or Email::Sender::Simple to handle email. PearlBee does come with some pre-configured email templates which look useful.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;PearlBee is a promising platform that is still in development. It looks good, has a solid data model and runs fast on the Dancer2 framework with DBIx::Class. In my interactions with the development team they were responsive and helpful. It feels about 80% complete - the core functionality is in place but there are some rough edges. PearlBee needs better security, SEO integration and to be more configurable. If the development team can resolve these issues in time for the first major release of PearlBee, it could be a milestone Perl development for what has been a barren couple of years in blogging technology.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F69%2F2014%2F2%2F17%2FIs-PearlBee-Perl-s-next-great-blogging-platform-&amp;amp;text=Is+PearlBee+Perl%27s+next+great+blogging+platform%3F&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F69%2F2014%2F2%2F17%2FIs-PearlBee-Perl-s-next-great-blogging-platform-&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The easy way to build stand-alone Perl apps</title>
      <link>http://localhost:1313/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</link>
      <pubDate>Sun, 05 Jan 2014 23:21:55 +0000</pubDate>
      
      <guid>http://localhost:1313/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps/</guid>
      <description>

&lt;p&gt;The Perl toolchain has such a large install base it&amp;rsquo;s tempting to just upload your app to PAUSE and let users install it via CPAN. &lt;a href=&#34;https://metacpan.org/search?q=App%3A%3A&#34;&gt;Many authors&lt;/a&gt; have taken this approach and it makes sense in most cases to reuse the power of the CPAN in providing a common install, dependency management and update mechanism. Sometimes however you want to distribute a dependency-free Perl app in a single executable file, and for these cases you&amp;rsquo;ll want to look at &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need a Unix-based system (Linux, OSX, BSD) and to install &lt;a href=&#34;https://metacpan.org/pod/App::FatPacker&#34;&gt;App::FatPacker&lt;/a&gt;. It runs on every version of Perl from 5.8.8 upwards, so just fire up the terminal and enter the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan App::FatPacker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;coding-your-app&#34;&gt;Coding your app&lt;/h3&gt;

&lt;p&gt;You can convert any typical Perl script into a standalone app, as long as it doesn&amp;rsquo;t have XS dependencies (see &amp;ldquo;Alternatives to App::Fatpacker&amp;rdquo; below for more info on how to create apps with XS dependencies). One suggestion would be to use the following shebang line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shebang line will call the &amp;ldquo;env&amp;rdquo; program passing &amp;ldquo;perl&amp;rdquo; as a parameter. This deals with the issue of the Perl binary beng installed in different locations on platforms as it will use the Perl binary in the user&amp;rsquo;s $PATH. This is documented in &lt;a href=&#34;https://perldoc.perl.org/perlrun.html&#34;&gt;perlrun&lt;/a&gt;. It is also compatible with Perlbrew.&lt;/p&gt;

&lt;h3 id=&#34;producing-the-single-file-app&#34;&gt;Producing the single file app&lt;/h3&gt;

&lt;p&gt;This couldn&amp;rsquo;t be simpler: once you have your Perl script ready to go, open the terminal and enter the following, replacing the paths with your own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;fatpack pack &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#e6db74&#34;&gt;/script &amp;gt; /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will pack all of the dependencies used by your script into a single executable app.&lt;/p&gt;

&lt;h3 id=&#34;running-the-app&#34;&gt;Running the app&lt;/h3&gt;

&lt;p&gt;Now that your app is in a single file, distributing and running it is a piece of cake. Simply copy the file to any directory in your $PATH. In order to be able to run your new app, you&amp;rsquo;ll need to set it&amp;rsquo;s permission to be executable. You can do this with chmod:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the app should run simply by entering the app filename in the terminal.&lt;/p&gt;

&lt;h3 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h3&gt;

&lt;p&gt;Let say we have the following script, BillCalc.pl which calculates how much each person should pay at dinner using the fictitious &amp;ldquo;Math::Bill&amp;rdquo; library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Math::Bill;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Carp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;croak&amp;#39;&lt;/span&gt;;

croak &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: missing arguments. Requires a bill total and number of people at dinner. e.g:\n   BillCalc 100.40 3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @ARGV &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math::Bill&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);

say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Each person should pay: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $bill&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;apportion &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; each&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can pack BillCalc.pl into a single file app using App::Fatpacker:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;fatpack pack BillCalc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; BillCalc
BillCalc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::Fatpacker prints out a confirmation message (&amp;ldquo;BillCalc.pl syntax OK&amp;rdquo;) and we should now have a new file, called &amp;ldquo;BillCalc&amp;rdquo; in our current directory. This file will contain all of the contents of &amp;ldquo;Math::Bill&amp;rdquo; and any other dependencies in BillCalc.pl.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move this to a directory in my $PATH, /home/sillymoose/local/bin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;mv BillCalc &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the file permissions to be executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;BillCalc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can run the BillCalc app at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;BillCalc &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
Each person should pay: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; each&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For an example of a real-world Perl app created with App::FatPacker, check out our article on &lt;a href=&#34;http://perltricks.com/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every&#34;&gt;every&lt;/a&gt;, the cron scheduling app.&lt;/p&gt;

&lt;h3 id=&#34;alternatives-to-app-fatpacker&#34;&gt;Alternatives to App::FatPacker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/pp&#34;&gt;PP&lt;/a&gt; is another Perl tool that can create stand-alone Perl apps. It also supports XS module dependencies (unlike App::FatPacker).&lt;/p&gt;

&lt;p&gt;Of course you can also distribute an application via CPAN, where you have the flexibility of including the dependent modules in your application&amp;rsquo;s inc directory, or include the modules as dependencies in the makefile, and let CPAN install them for you - this is also more disk space efficient. Perl applications on CPAN place the app in the application&amp;rsquo;s bin directory and use &amp;ldquo;EXE_FILES&amp;rdquo; directive in the makefile to install the app to the Perl bin directory. If you&amp;rsquo;re interested in this approach, check out the &lt;a href=&#34;https://metacpan.org/pod/Module::Starter&#34;&gt;Module::Starter source&lt;/a&gt; as a good example to copy from.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schedule jobs like a boss with every</title>
      <link>http://localhost:1313/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</link>
      <pubDate>Sun, 22 Dec 2013 15:08:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/55/2013/12/22/Schedule-jobs-like-a-boss-with-every/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-every&#34;&gt;Get every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scheduling-jobs-with-every&#34;&gt;Scheduling jobs with every&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#further-info&#34;&gt;Further info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;Scheduling jobs on cron is often a trial-and-error process but every, a command line app written in Perl makes it a lot easier.&lt;/p&gt;

&lt;h6 id=&#34;requirements&#34;&gt;Requirements&lt;/h6&gt;

&lt;p&gt;You need to have cron, which comes with most Unix-based platforms (e.g. Linux, Mac OSX, BSD) and have Perl installed.&lt;/p&gt;

&lt;h6 id=&#34;get-every&#34;&gt;Get every&lt;/h6&gt;

&lt;p&gt;every was developed by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt; and is hosted on her &lt;a href=&#34;https://github.com/iarna/App-Every&#34;&gt;Github&lt;/a&gt; page. You can download it directly from the command line using wget:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ wget &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.github.com/iarna/App-Every/master/packed/every&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or curl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ curl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;O &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://raw.github.com/iarna/App-Every/master/packed/every&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save every to /usr/bin or add the parent directory to your PATH variable so you can run every from the command line.&lt;/p&gt;

&lt;h6 id=&#34;scheduling-jobs-with-every&#34;&gt;Scheduling jobs with every&lt;/h6&gt;

&lt;p&gt;The command to every to schedule a job takes the form: &amp;ldquo;every [num] unit program&amp;rdquo; (num defaults to one). So for example if you wanted to schedule a shell script to run every minute, type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every minute script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which creates the following crontab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;SHELL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;bash
PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;perl5&lt;span style=&#34;color:#e6db74&#34;&gt;/perlbrew/&lt;/span&gt;perls&lt;span style=&#34;color:#e6db74&#34;&gt;/perl-5.16.3/&lt;/span&gt;bin:&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;bin:&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/sbin:/&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/sbin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/bin:/&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;bin:
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/1 * * * * cd &amp;#34;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sillymoose&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;;  script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;every translates the command into a new crontab entry and prints it on the command line. Helpfully it will set the SHELL variable and copy the user&amp;rsquo;s PATH into the crontab. The icing on the cake is that every prepends a change directory command to ensure that cron executes the job from the script&amp;rsquo;s parent directory. By doing these things, every eliminates (probably) the three most common causes of failed cron jobs.&lt;/p&gt;

&lt;p&gt;Other units that every recognizes are: hour, day, week, month and the day of the week (e.g. Wednesday). The following are all valid every commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; hours script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh

$ every mon script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh

$ every &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; months script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One really cool feature of modern cron installs is that you can schedule a job to run on reboot. every also supports this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ every @reboot script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;further-info&#34;&gt;Further info&lt;/h3&gt;

&lt;p&gt;every has more options than described above. Run &amp;ldquo;every &amp;ndash;help&amp;rdquo; to see the full panoply of options.&lt;/p&gt;

&lt;p&gt;every was written in Perl by &lt;a href=&#34;http://re-becca.org/&#34;&gt;Rebecca&lt;/a&gt;. She is also on twitter (&lt;a href=&#34;https://twitter.com/ReBeccaOrg&#34;&gt;@ReBeccaOrg&lt;/a&gt;). So if you use every and find it useful, maybe reach out and say thank you.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to schedule Perl scripts using cron</title>
      <link>http://localhost:1313/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</link>
      <pubDate>Fri, 11 Oct 2013 01:54:20 +0000</pubDate>
      
      <guid>http://localhost:1313/article/43/2013/10/11/How-to-schedule-Perl-scripts-using-cron/</guid>
      <description>

&lt;p&gt;Cron is a job scheduling program available on UNIX-like platforms. Most system commands can be scheduled including the execution of Perl programs. Once a job is setup, cron will run it as scheduled even if the user is not logged in, which can be a great way to automate sysadmin tasks or repetitive jobs. This article describes how to run Perl scripts with cron.&lt;/p&gt;

&lt;h3 id=&#34;perl-script-tips&#34;&gt;Perl script tips&lt;/h3&gt;

&lt;p&gt;When preparing a script to be run by cron, there a few things to keep in mind. You may want to add a shebang line to the of the script for the Perl binary you want to execute. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/local/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you plan to run the script on different platforms, you can omit the shebang line, as the location of the Perl binary may vary from platform to platform (more on this later).&lt;/p&gt;

&lt;p&gt;Also ensure that any paths used in the script are absolute paths (such as for opening filehandles, database connection strings and external program paths).&lt;/p&gt;

&lt;h3 id=&#34;setup-a-crontab&#34;&gt;Setup a crontab&lt;/h3&gt;

&lt;p&gt;To schedule a job with cron, the job needs to be added to the user&amp;rsquo;s crontab. To do this open a terminal and type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;crontab &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open the crontab in a text editor. To add a job, a line must be added in the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; command to be executed
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-----&lt;/span&gt; day of week  (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, Sunday&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-------&lt;/span&gt; month        (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+---------&lt;/span&gt; day of month (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+-----------&lt;/span&gt; hour         (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;+-------------&lt;/span&gt; min          (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;)

An asterisk (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) means all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are some example crontab entries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# execute every minute&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; perl &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every 5 minutes&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/5 * * * * perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every hour at 0 minutes past the hour&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; perl &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

&lt;span style=&#34;color:#75715e&#34;&gt;# execute every 12 hours at half past the hour&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/12 * * * perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your script does not contain a shebang line, provide the absolute path to the Perl binary in the crontab. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/12 * * * /&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/local/&lt;/span&gt;bin&lt;span style=&#34;color:#e6db74&#34;&gt;/perl /&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;/to/&lt;/span&gt;Beacon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the crontab and exit the text editor. To check the job has been scheduled, you can check your crontab with this command from the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;crontab &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print your current crontab to the terminal.&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting-cron&#34;&gt;Troubleshooting cron&lt;/h3&gt;

&lt;p&gt;Working with cron is usually straightforward, but if you are having difficulty getting the Perl script to run, check the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the cron log to be sure that cron is running the job as you expect. It is usually found here: /var/log/cron&lt;/li&gt;
&lt;li&gt;Check that you are providing the correct absolute path to the Perl binary. Either in the shebang line inside the script or in crontab (if you are not sure what this is type &amp;ldquo;which perl&amp;rdquo; at the terminal).&lt;/li&gt;
&lt;li&gt;Make sure the script permissions allow execution (e.g. &amp;ldquo;chmod +x /path/to/file&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;If you are running additional programs within the Perl script, consider adding their binary paths to the crontab as cron does not have the same PATH as the user.&lt;/li&gt;
&lt;li&gt;If you need to run a script as root, just create a crontab for root using sudo: &amp;ldquo;sudo crontab -e&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good list of general cron tips can be found &lt;a href=&#34;http://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

