<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/perl-6/</link>
    <description>Recent content in Perl 6 on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Feb 2018 15:22:36 +0000</lastBuildDate>
    <atom:link href="/categories/perl-6/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl 6 Grammars, Part 1</title>
      <link>http://localhost:1313/article/perl-6-grammers-part-1/</link>
      <pubDate>Tue, 13 Feb 2018 15:22:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/perl-6-grammers-part-1/</guid>
      <description>

&lt;p&gt;The Perl 6 language has builtin support of &lt;a href=&#34;https://docs.perl6.org/language/grammars&#34;&gt;&lt;em&gt;grammars&lt;/em&gt;&lt;/a&gt;. You may consider grammars as a combination of the well known regular expressions and utilities such as &lt;code&gt;yacc&lt;/code&gt; or &lt;code&gt;bison&lt;/code&gt;, or more sophisticated grammar tools such as ANTLR. All that—both lexer, parser, and also semantic processing—which are often separate parts of compilers, is built-in and available out of the box with a &lt;a href=&#34;http://rakudo.org/how-to-get-rakudo/&#34;&gt;fresh Perl 6 installation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To feel the power of grammars, it is enough to say that Perl 6’s own grammar is &lt;a href=&#34;https://perl6.online/2018/01/01/the-start-of-the-grammar/&#34;&gt;written in Perl 6&lt;/a&gt; as a huge grammar class &lt;a href=&#34;https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp&#34;&gt;Perl6::Grammar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I will go through a few examples to illustrate the basics of grammars. All the required language constructions will be explained as we go.&lt;/p&gt;

&lt;h3 id=&#34;parsing-numbers&#34;&gt;Parsing numbers&lt;/h3&gt;

&lt;p&gt;Parsing numbers seems to be a simple task until you start thinking about different formats that the user can use, including negative numbers, floating-point numbers, numbers in scientific notation, special forms of numbers such as C‘s long long integers.&lt;/p&gt;

&lt;p&gt;Let us start with the simplest form: a number as a sequence of digits. For example, 1, 42, 123, or 1000. A grammar in Perl 6 is a special kind of classes with its own keywords. The first rule of the grammar must (by default) be called &lt;code&gt;TOP&lt;/code&gt;, and here is the complete program that parses our first set of numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $n {
    say N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($n) ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK $n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT OK $n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the &lt;code&gt;parse&lt;/code&gt; method of the &lt;code&gt;N&lt;/code&gt; grammar is called, Perl tries to match the given string against the &lt;code&gt;TOP&lt;/code&gt; method. In our case, this is a &lt;code&gt;token&lt;/code&gt;, which means that the string cannot contain any optional spaces between the parts of the token. &lt;code&gt;TOP&lt;/code&gt; is only successful when it consumes the whole string, so there is no need to use explicit anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to tie the edges of the token.&lt;/p&gt;

&lt;p&gt;As with regexes, tokens and rules can include other tokens, rules, or regexes referred by their names. In our first example, the &lt;code&gt;TOP&lt;/code&gt; token needs the &lt;code&gt;digit&lt;/code&gt; built-in method that matches digits. The &lt;code&gt;+&lt;/code&gt; quantifier is the same quantifier as in standard Perl 5 regular expressions: it allows one or more repetitions of the previous atom.&lt;/p&gt;

&lt;p&gt;Our simple grammar can parse only unsigned integers so far. Any negative number cannot be parsed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 1
OK 42
OK 123
OK 1000
NOT OK -3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let us update the grammar and introduce the token for the optional sign, which can be either &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;grammar N {
    token TOP {
        [&amp;#39;+&amp;#39; | &amp;#39;-&amp;#39;]?
        &amp;lt;digit&amp;gt;+
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the square brackets group together the two alternatives: &lt;code&gt;&#39;+&#39; | &#39;-&#39;&lt;/code&gt; . The &lt;code&gt;?&lt;/code&gt; quantifier requires that there is only one such character, or there are none. In Perl 6, square brackets only create a group but do not capture its content. Also notice, that both &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are quoted, because Perl 6 treats any non-alphanumeric character as a special character unless it is quoted or escaped with &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step is to add support for the floating point. An ad hoc solution can be creating a character class that includes both numbers and the &lt;code&gt;&#39;.&#39;&lt;/code&gt;  character, but that would be completely wrong, as, for example, strings with two dots such as &lt;code&gt;3..14&lt;/code&gt; pass this filter. So, do it differently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;]?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;]?
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This grammar now allows an optional part consisting of the period and another sequence of digits and works well when the number is either an integer or contains an explicit fractional part, for example, &lt;code&gt;3.14&lt;/code&gt;. It fails for those numbers where one of the parts is missing: &lt;code&gt;3.&lt;/code&gt; or &lt;code&gt;.14&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An attempt to make the parts optional by using quantifiers makes the grammar difficult to read and error-prone. For instance, the following token matches all the above numbers but also a single &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;]?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]?
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s time to introduce more tokens. Factor out the sequence of digits to a separate token and list all the variants explicitly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;?
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
    }
    token sign {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    }
    token digits {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
    token value {
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; token encapsulates the variants: it contains four alternative representations of accepted numbers. Vertical bars separate them. For the sake of unification, it is allowed to add an additional bar before the first alternative, so that all of them are emphasized with a simple ASCII art.&lt;/p&gt;

&lt;p&gt;This current grammar is already smart enough to reject a single period:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 1
OK 42
OK 123
OK 1000
OK -3
OK 3.14
OK 3.
OK .14
NOT OK .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is to support numbers in scientific notation. Adding another alternative is an easy candidate for this task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar N {
    token TOP {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;?
        [
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;exp&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;sign&amp;gt;&lt;/span&gt;? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        ]
    }
    token sign {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    }
    token exp {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
    }
    token digits {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    }
    token value {
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digits&amp;gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test the grammar with the following cases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.14&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10E2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10e2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.2e3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10e-3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10e-3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10.2e-33&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $n {
    say N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($n) ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK $n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT OK $n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All works fine. But wait, in Perl, underscores are also allowed in numbers! Having a proper grammar, adding support for this is easy; only the &lt;code&gt;digits&lt;/code&gt; token should be modified:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token digits {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;digit&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;]?
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Strings that do not follow the rules are still ignored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK 100_000
NOT OK _1
NOT OK 1_
NOT OK 1__0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With a few simple steps, we made a grammar that understands numbers in different formats. As an exercise, you can add support for prefixes &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0b&lt;/code&gt;, &lt;code&gt;0o&lt;/code&gt; (hex, binary and octal) and suffixes (as in &lt;code&gt;1000L&lt;/code&gt; in C). Grammars were only used to check the validity of the number format, and their power does not end there. In Perl 6, you can add &lt;em&gt;actions&lt;/em&gt; to the grammar; these are code blocks that are executed if the corresponding rule or token has successfully matched. But that&amp;rsquo;s a story for another day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Open Letter to the Perl Community</title>
      <link>http://localhost:1313/article/an-open-letter-to-the-perl-community/</link>
      <pubDate>Wed, 17 Jan 2018 08:22:27 +0000</pubDate>
      
      <guid>http://localhost:1313/article/an-open-letter-to-the-perl-community/</guid>
      <description>

&lt;p&gt;The past few months I&amp;rsquo;ve been wracking my brain on how to bring &lt;a href=&#34;https://www.perl.org&#34;&gt;Pumpkin Perl&amp;nbsp;5&lt;/a&gt; (or &lt;code&gt;perl&lt;/code&gt;, as in the version of Perl that is maintained by the Perl&amp;nbsp;5 Porters) and &lt;a href=&#34;https://www.perl6.org&#34;&gt;Rakudo Perl&amp;nbsp;6&lt;/a&gt; (or &lt;code&gt;perl6&lt;/code&gt;, as in the implementation of Perl&amp;nbsp;6 based on NQP and &lt;a href=&#34;http://moarvm.org&#34;&gt;MoarVM&lt;/a&gt;) closer together again. Yes, I haven&amp;rsquo;t given up on this idea, although my first attempt (organizing the &lt;a href=&#34;https://szabgab.com/perl-reunification-summit-2012.html&#34;&gt;Perl Reunification Summit in 2012&lt;/a&gt;) hasn&amp;rsquo;t really worked out the way I had hoped it would. But it did have some positive effects, because it brought together people from the Perl community that normally would never have been in a discussion, and some nice advances were made for Perl&amp;nbsp;6.&lt;/p&gt;

&lt;p&gt;I am still interested in getting Perl&amp;nbsp;5 and Perl&amp;nbsp;6 together, because they both share the same Perl Mindset, a mix of just enough DWIM (Do What I Mean) and not too much of &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;WAT&lt;/a&gt; (What is it doing now???).&lt;/p&gt;

&lt;p&gt;I know Perl&amp;nbsp;6 has had a complicated development process. You could argue that Perl&amp;nbsp;6 is the fourth implementation attempt. It is also the first Perl&amp;nbsp;6 implementation that actually works, interfaces seamlessly with &lt;a href=&#34;http://modules.perl6.org/dist/Inline::Perl5:cpan:NINE&#34;&gt;Perl&amp;nbsp;5&lt;/a&gt; and &lt;a href=&#34;https://github.com/niner/Inline-Python/blob/master/README.md&#34;&gt;Python&lt;/a&gt; or any &lt;a href=&#34;https://docs.perl6.org/language/nativecall&#34;&gt;external C library&lt;/a&gt; out of the box, is beating Perl&amp;nbsp;5 on more and more &lt;a href=&#34;http://news.perlfoundation.org/2017/11/perl-6-performance-and-reliabi-4.html&#34;&gt;micro-benchmarks&lt;/a&gt;, and is being used in production, especially in the area of &lt;a href=&#34;http://mi.cro.services&#34;&gt;Micro Services&lt;/a&gt; and &lt;a href=&#34;https://perl6advent.wordpress.com/2017/12/13/&#34;&gt;parsing of non-ASCII languages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some consider Perl 6 to be a sister language to Perl 5. Personally, I consider Perl 6 more of a genetically engineered daughter language with the best genes from many parents. A daughter with a difficult childhood, in which she alienated many, who is now getting out of puberty into early adulthood. But I digress.&lt;/p&gt;

&lt;h3 id=&#34;the-butterfly-perl-nbsp-5-project&#34;&gt;The Butterfly Perl&amp;nbsp;5 Project&lt;/h3&gt;

&lt;p&gt;There is no clear upgrade path from Perl&amp;nbsp;5 to Perl&amp;nbsp;6 and this means that there is no chance of combining Perl&amp;nbsp;5 and Perl&amp;nbsp;6 to become more than the sum of their parts. The Perl&amp;nbsp;5 Porters are still adding features that are inspired by Perl&amp;nbsp;6, which further confuses the picture.&lt;/p&gt;

&lt;p&gt;A radical idea would be that the Perl&amp;nbsp;5 Porters would go back to their original goal: &lt;strong&gt;porting&lt;/strong&gt; Perl&amp;nbsp;5. But this time, not to different operating systems, but porting Perl&amp;nbsp;5 to different Virtual Machines. Place a moratorium on new features, with development confined to maintenance on the current runtime. This would safeguard the most valued feature of Perl&amp;nbsp;5, its stability and backwards compatibility. But I digress again.&lt;/p&gt;

&lt;p&gt;Porting Perl&amp;nbsp;5 to NQP (Not Quite Perl, one of the implementation languages of Rakudo Perl&amp;nbsp;6) would provide such a migration path. Basically this would be the revival of the &lt;a href=&#34;https://github.com/rakudo-p5/v5&#34;&gt;&amp;ldquo;use v5&amp;rdquo;&lt;/a&gt; project, which implements a version of Perl&amp;nbsp;5 as a slang (sub-language) of Perl&amp;nbsp;6. Such an effort would provide a clear migration path from the 30 year old &lt;code&gt;perl&lt;/code&gt; interpreter to a modern VM, allowing execution of Perl&amp;nbsp;5 source code on MoarVM, JVM and JavaScript backends. Thus guaranteeing a life for Perl&amp;nbsp;5 as a programming language way into the future, taking advantage of all the multi-processing features that a modern VM provides.&lt;/p&gt;

&lt;p&gt;In the short term, it would still be slower than Perl&amp;nbsp;5, but in the long run it would be running faster. This is because of the Just-In-Time compilation of hot code, which optimizes all source code to machine code on the fly, rather than the path of hand-optimizing hot code into XS. Although I wholeheartedly would support a Butterfly Perl&amp;nbsp;5 Project, I&amp;rsquo;ve also come to the conclusion that it is no longer an itch I would want to scratch personally at this moment.&lt;/p&gt;

&lt;h3 id=&#34;the-cpan-butterfly-plan&#34;&gt;The CPAN Butterfly Plan&lt;/h3&gt;

&lt;p&gt;But what does Perl&amp;nbsp;5 consist of anyway? It&amp;rsquo;s a runtime &lt;a href=&#34;https://github.com/Perl/perl5&#34;&gt;written in C and a Macro language&lt;/a&gt;. But it&amp;rsquo;s also a core &lt;a href=&#34;https://github.com/Perl/perl5/tree/blead/lib&#34;&gt;set of modules&lt;/a&gt; with defined APIs and documentation. To many, the modules on CPAN are an integral part of Perl 5. Many of these modules would need to be ported for a Butterfly Perl&amp;nbsp;5 Project. But porting them would be very useful to Perl&amp;nbsp;6 in and of itself because it would make porting user Perl 5 programs to Perl 6 much easier. Therefore I am starting an effort to mass-migrate Perl&amp;nbsp;5 modules to Perl&amp;nbsp;6, both core modules and others on CPAN.&lt;/p&gt;

&lt;p&gt;We are developing a &amp;ldquo;How to port a Perl&amp;nbsp;5 Module to Perl&amp;nbsp;6&amp;rdquo; guide, covering things like naming conventions, exports, translating Perl&amp;nbsp;5 OO into Perl&amp;nbsp;6 OO, scoping gotchas and threading. Plus notes on various built-in features of Perl&amp;nbsp;6 which may be useful when porting semantics rather than code.&lt;/p&gt;

&lt;p&gt;Next we&amp;rsquo;ll create a website to register contributors who will take responsibility for porting a Perl&amp;nbsp;5 module to Perl&amp;nbsp;6 (e.g. from the &lt;a href=&#34;https://github.com/perl6/perl6-most-wanted&#34;&gt;Most Wanted list&lt;/a&gt;). Contributors will link to a GitHub repo from where they&amp;rsquo;ll write the code, handle Pull Requests and give out commit bits. Ported modules would be uploaded to CPAN as new Perl 6 distributions.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll create a leaderboard which ranks contributors progress. The position on the leaderboard could be defined as the product of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;size of the original Perl&amp;nbsp;5 module in lines of code + documentation + tests&lt;/li&gt;
&lt;li&gt;% completion of the migration, to be indicated by the contributor and judged by a jury of peers&lt;/li&gt;
&lt;li&gt;bonus points if the documentation and/or tests are improved on the fly&lt;/li&gt;
&lt;li&gt;bonus points if XS code is involved and there is no Pure Perl implementation available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sponsors would match migrated code with donations to the &lt;a href=&#34;http://www.perlfoundation.org/perl_6_core_development_fund&#34;&gt;Perl&amp;nbsp;6 Core development fund&lt;/a&gt;, so that contributors not only get to support Perl&amp;nbsp;6 directly, but also indirectly support the further development of the core of Perl&amp;nbsp;6. Something in the order of a cent per converted line of Perl&amp;nbsp;5 code / documentation / tests, to be donated at the moment a jury of peers has decided the converted module is functional enough to be &amp;ldquo;published&amp;rdquo; as a 1.0 version.&lt;/p&gt;

&lt;p&gt;The leaderboard would be backed by a website that that tracks all of this activity, along the lines of &lt;a href=&#34;https://alerts.perl6.org&#34;&gt;alerts.perl6.org&lt;/a&gt;, with an API and social media interface.&lt;/p&gt;

&lt;p&gt;This should make 2018 the year that people really start to migrate their code from Perl&amp;nbsp;5 to Perl&amp;nbsp;6. Be it because they can, they want to try, or just to see how Perl&amp;nbsp;6 will work out for them.&lt;/p&gt;

&lt;h3 id=&#34;winding-down&#34;&gt;Winding down&lt;/h3&gt;

&lt;p&gt;I sincerely hope that enough people will support the CPAN Butterfly Plan, and maybe a Butterfly Perl&amp;nbsp;5 Project. So that we can all start moving forward in one direction, rather than two. If you&amp;rsquo;d like to get involved, please join us on the #perl6-dev channel on &lt;a href=&#34;http://freenode.net&#34;&gt;irc.freenode.net&lt;/a&gt;. If you don&amp;rsquo;t have an IRC app installed, you can talk to us in your browser via the &lt;a href=&#34;http://webchat.freenode.net/?channels=perl6-dev&amp;amp;nick=&#34;&gt;web-interface&lt;/a&gt; instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A slow boat to data</title>
      <link>http://localhost:1313/article/a-slow-boat-to-data/</link>
      <pubDate>Mon, 01 Jan 2018 09:28:27 +0000</pubDate>
      
      <guid>http://localhost:1313/article/a-slow-boat-to-data/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree&#34;&gt;Data::Dump::Tree&lt;/a&gt; aims to render your data structures in a more legible way. It&amp;rsquo;s usefulness grows with the amount of data to display.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not the best for dumping three variables that you will never see again but it&amp;rsquo;s good at rendering complex data, rendering what you generate often, and rendering what will be read by other people.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can install it with &lt;a href=&#34;https://github.com/ugexe/zef&#34;&gt;zef&lt;/a&gt;, which comes with &lt;a href=&#34;http://rakudo.org&#34;&gt;Rakudo Star&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zef install Data::Dump::Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Data::Dump::Tree &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree&#34;&gt;repo&lt;/a&gt; has two branches: &lt;code&gt;release&lt;/code&gt; which is the branch &lt;em&gt;zef&lt;/em&gt; installs and &lt;code&gt;master&lt;/code&gt; which is the main development branch. I chose to develop on the latest Rakudo because bugs are fixed there. I may change the release branch to work only with Rakudo releases in the near future. There are tests to check the fitness of the module.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not often that an article starts with a call for help but I have noticed that they tend to be forgotten when put at the end. There are a few things that can get better; please help if you can! The help list is at the end of the article.&lt;/p&gt;

&lt;h3 id=&#34;the-legibility-principles&#34;&gt;The Legibility Principles&lt;/h3&gt;

&lt;p&gt;My idea is to make data rendering so simple and attractive that it removes the need to manually extract the relevant information from the data. Instead via filters present data that is simple enough for the end user and still detailed enough for a developer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Data::Dump::Tree&lt;/code&gt; displays the data vertically which reduces the text/surface ratio. I try to apply a few principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limit the text to area ratio; a screen packed with text is useless; maximal concentration of text has low legibility&lt;/li&gt;
&lt;li&gt;Contrast the rendering with color, symbols, font size, and spacing&lt;/li&gt;
&lt;li&gt;Simplification - show less data as fewer details increases the render legibility&lt;/li&gt;
&lt;li&gt;Organization - transformed or tabulated data can make data easier to interpret&lt;/li&gt;
&lt;li&gt;Relationships - relationships contextualize the data, I achieve that by numbering and coloring the render&lt;/li&gt;
&lt;li&gt;Interactive - you can collapse or expand data to manage the complexity of the render&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dd-vs-ddt&#34;&gt;&lt;code&gt;dd&lt;/code&gt; vs &lt;code&gt;ddt&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There is no doubt whatsoever that the &lt;code&gt;dd&lt;/code&gt; builtin to Rakudo is many times faster than my &lt;code&gt;ddt&lt;/code&gt; but here are some examples that, in my opinion, are much more readable when rendered by &lt;code&gt;ddt&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;1-100-examples&#34;&gt;[1..100] examples&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

dd [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;
ddt [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s output is an example of compactness—clear and to the point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/dd-range.png&#34; alt=&#34;dd-range&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ddt&lt;/code&gt; lists data vertically so we get a long rendering that looks like this (I truncated the output to the first 24 lines):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/ddt-range.png&#34; alt=&#34;ddt-range&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a clear advantage of &lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s horizontal layout but let&amp;rsquo;s see what &lt;code&gt;ddt&lt;/code&gt; can do and when it may be more legible than &lt;code&gt;dd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ddt&lt;/code&gt; has a &lt;code&gt;:flat&lt;/code&gt; mode that changes the rendering orientation. It&amp;rsquo;s true that it can take a long time to render large data structures but I find those large data structure are unreadable in a compact rendering so all I&amp;rsquo;m really doing is exchanging rendering time for comprehension time.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s render the array of 100 elements in columns with 5 elements each:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

ddt [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}) ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/ddt-columns.png&#34; alt=&#34;ddt columns&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a bit better and shorter but all those indexes add a bit of noise. Or does it add noise? The data I am rendering is so simple that I don&amp;rsquo;t need any indexing. What if the data weren&amp;rsquo;t sorted? What if I wanted to look at the value at the 50th index?&lt;/p&gt;

&lt;p&gt;Here is an example with randomized data. I also used columns of 10 rows rather than 5. Still finding &lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s output better?:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;

dd True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] ;
ddt True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}) ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/randomized.png&#34; alt=&#34;randomized&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Still not convinced? What about 300 random integers? Can you navigate that?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/300-entries.png&#34; alt=&#34;300-entries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make it a bit more complicated. I want to see the values that are between 50 and 59. Imagine I am going to present this data over and over and spending a few minutes changing how Arrays are displayed is worth it to me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dump::Tree::DescribeBaseObjects ; &lt;span style=&#34;color:#75715e&#34;&gt;# for DVO&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Terminal::ANSIColor ;

role skinny
{
  multi method get_elements (Array $a)
  {
    $a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map:
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
        ?? DVO(color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold red&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; DVO($_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;))
    }
  }
}

ddt True, [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pick: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;], :flat({&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}), :does[skinny] ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/50-60.png&#34; alt=&#34;50-60&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could have displayed a table or a text mode graph. That&amp;rsquo;s even better when my data has a non-builtin type; I write a handler and give it to &lt;code&gt;ddt&lt;/code&gt; and all instances will be rendered as I wish. I can write a filter and take over how other types are displayed, including the built-ins. Data::Dumper::Tree is all about giving me control of how data is rendered with a few sensible defaults.&lt;/p&gt;

&lt;p&gt;The project repo has more &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/tree/release/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;builtin-versus-user-types&#34;&gt;Builtin versus user types&lt;/h3&gt;

&lt;p&gt;Although &lt;code&gt;ddt&lt;/code&gt; handles quite a few builtin types, there are still some types I have not taken the time to look at. Those types may render wrongly or not at all. If you catch one of those, please open an issue in &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/issues&#34;&gt;GitHub&lt;/a&gt;. And if you add a handler for the type, please submit a pull request! You can look at &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/blob/release/lib/Data/Dump/Tree/DescribeBaseObjects.pm&#34;&gt;DescribeBaseObjects.pm&lt;/a&gt; to see what&amp;rsquo;s already handled.&lt;/p&gt;

&lt;p&gt;User defined types are handled in a generic way. If they define &lt;code&gt;ddt_*&lt;/code&gt; methods those will be called; otherwise the type attributes will be shown. The &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree#handling-specific-types&#34;&gt;documentation&lt;/a&gt; has more information about this.&lt;/p&gt;

&lt;h3 id=&#34;match&#34;&gt;Match&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&#34;https://www.learningperl6.com/2017/01/26/three-ways-to-pretty-print-perl-6/&#34;&gt;review of Dumpers&lt;/a&gt;, brian noted that &lt;code&gt;ddt&lt;/code&gt; output is not very interesting for Matches, and he was right. Not only is the default output not helpful but it even tries to hide all the details of the match. The reason for this is that there are details in a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object that are usually of no use when rendering.&lt;/p&gt;

&lt;p&gt;What if I want to see Match details in a data rendering? &lt;code&gt;ddt&lt;/code&gt; has a role I can use that will make it more useful when working with Matches. There are examples of the Match role usage with and without extra filtering and coloring in &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/blob/release/examples/match.pl&#34;&gt;examples/match.pl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/match.png&#34; alt=&#34;match&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;nativecall-types&#34;&gt;NativeCall Types&lt;/h3&gt;

&lt;p&gt;Look at &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/examples/gumbo.pl&#34;&gt;examples/gumbo.pl&lt;/a&gt;. &lt;code&gt;ddt&lt;/code&gt; can handle Perl 6&amp;rsquo;s &lt;a href=&#34;https://docs.perl6.org/language/nativecall&#34;&gt;NativeCall&lt;/a&gt; support. &lt;code&gt;dd&lt;/code&gt; simply displays the type &lt;code&gt;GumboNode&lt;/code&gt;. The &lt;code&gt;ddt&lt;/code&gt; output breaks it down and annotates the C portions of the data structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/gumbonode.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;filtering&#34;&gt;Filtering&lt;/h3&gt;

&lt;p&gt;You have seen an example of handler in the &lt;code&gt;[1..100]&lt;/code&gt; examples. Here is an example of filter applied to the parsing of a JSON data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;header_filter&lt;/span&gt;
  ($dumper, \r, $s, ($depth, $path, $glyph, @renderings),
   (\k, \b, \v, \f, \final, \want_address))
{
  &lt;span style=&#34;color:#75715e&#34;&gt;# simplifying the rendering&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;pair&amp;gt; with a value that has no sub elements can be&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# displayed in a more compact way&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;pair&amp;gt;&amp;#34;&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %caps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caps ;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; %caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caps[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;
    {
      v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ls(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;%caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; ls(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;%caps&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) ;
      final &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DDT_FINAL ;
    }
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# Below need no details&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;object&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;pairlist&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;array&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;arraylist&amp;gt;&amp;#39;&lt;/span&gt;
  {
    v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ;
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By applying the above filter, the amount of data displayed is reduced by a factor of almost three. The output without the filter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/unfiltered.png&#34; alt=&#34;unfiltered&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The output with the filter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/filtered.png&#34; alt=&#34;filtered&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;folding-and-sharing&#34;&gt;Folding And Sharing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-slow-boat-to-data/folding-animation.gif&#34; alt=&#34;folding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I can display a rendered data structure in a curses interface by using the &lt;code&gt;:curses&lt;/code&gt; adjective:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ddt $data_structure, :curses;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can also send the rendering of a data structure to another process. This makes it easier to debug without cluttering the display for example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ddt $data_structure, :remote;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;less-commonly-used-options&#34;&gt;Less commonly used options&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:nl&lt;/code&gt; adds a blank line at the end of the rendering.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:indent&lt;/code&gt; indents the whole rendering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!display_info&lt;/code&gt;, &lt;code&gt;:!display_address&lt;/code&gt;, &lt;code&gt;:!display_type&lt;/code&gt; these remove the type/address from the rendering, for simple data this can improve the legibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h3&gt;

&lt;p&gt;I can be found on the &lt;em&gt;#perl6&lt;/em&gt; IRC channel and will receive mail if an issue is opened on &lt;a href=&#34;https://github.com/nkh/P6-Data-Dump-Tree/issues&#34;&gt;GitHub&lt;/a&gt;. I&amp;rsquo;m happy to help with general explanations and writing handlers/filters for new types or your types, especially if I can add it to the examples section.&lt;/p&gt;

&lt;h3 id=&#34;lending-a-hand&#34;&gt;Lending a hand&lt;/h3&gt;

&lt;p&gt;There are several areas that could use some help. Perhaps you can work on one of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a DHTML renderer which could use some love. There is no visual cue for folded containers. The search functionality needs polishing too. I am no web person so the code represents my best effort so far&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ddt&lt;/code&gt; support for builtin types can be expanded. That is best done by testing in your scripts and reporting when a type is not supported&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ddt&lt;/code&gt; is sluggish; it does a lot of things but it could do them faster. I tried profiling it but did not get very far. If you are proficient in Perl 6 and would like to have a look at the code, I will be happy to assist&lt;/li&gt;
&lt;li&gt;You could write a data display application that would accept data structures via a socket and present them to the user. It should display multiple renderings and let the user chose which rendering to display. A bit like a log viewer but for data renderings&lt;/li&gt;
&lt;li&gt;Become a co-maintainer and help maintain the module!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-articles-links&#34;&gt;Other articles/links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.perl.org/users/nadim_khemir/2017/08/perl-6-datadumptree-version-15.html&#34;&gt;Perl 6 Data::Dump::Tree version 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.perl.org/users/nadim_khemir/2017/08/take-a-walk-on-the-c-side.html&#34;&gt;Take a walk on the C side, ddt, du du, du du &amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://perl6advent.wordpress.com/2016/12/21/show-me-the-data/&#34;&gt;Show me the data!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data::Dump::Tree&lt;/code&gt; is the continuation of my Perl 5 module &lt;a href=&#34;https://metacpan.org/pod/Data::TreeDumper&#34;&gt;Data::TreeDumper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Plotting With Perl 6</title>
      <link>http://localhost:1313/article/plotting-with-perl-6/</link>
      <pubDate>Thu, 24 Aug 2017 15:27:57 +0000</pubDate>
      
      <guid>http://localhost:1313/article/plotting-with-perl-6/</guid>
      <description>

&lt;p&gt;(This chapter originally appeared in &lt;a href=&#34;http://www.apress.com/9781484228982&#34;&gt;Perl 6 Fundamentals: A Primer with
Examples, Projects, and Case Studies&lt;/a&gt;, by Moritz Lenz, published 2017 by Apress Media, LLC. Reprinted with permission.)&lt;/p&gt;

&lt;p&gt;Occasionally I come across git repositories where I want to know how active
they are and who the main developers are.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s develop a script that plots the commit history, and explore how to
use Python modules in Perl 6.&lt;/p&gt;

&lt;h2 id=&#34;extracting-the-stats&#34;&gt;Extracting the Stats&lt;/h2&gt;

&lt;p&gt;We want to plot the number of commits by author and date.
We can get this information easily by passing some options to &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $proc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; run :out, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;git log &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;short &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format:%ad&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;%an&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (%total, %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author, %dates);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $proc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $line {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ( $date, $author ) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    %total{$author}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$date}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    %dates{$date}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; executes an external command and &lt;code&gt;:out&lt;/code&gt; tells it to capture the
command&amp;rsquo;s output, making it available as &lt;code&gt;$proc.out&lt;/code&gt;. The command is
a list, with the first element being the actual executable and the rest of
the elements are command line arguments to this executable.&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;git log&lt;/code&gt; gets the options &lt;code&gt;--date short --pretty=format:%ad!%an&lt;/code&gt;, which
instructs it to produce lines like &lt;code&gt;2017-03-01!John Doe&lt;/code&gt;. This line
can be parsed with a simple call to &lt;code&gt;$line.split: &#39;!&#39;, 2&lt;/code&gt;, which splits
on the &lt;code&gt;!&lt;/code&gt; and limits the result to two elements. Assigning it to a
two-element list &lt;code&gt;( $date, $author )&lt;/code&gt; unpacks it. We then use hashes to
count commits by author (in &lt;code&gt;%total&lt;/code&gt;), by author and date (&lt;code&gt;%by-author&lt;/code&gt;),
and finally by date. In the second case, &lt;code&gt;%by-author{$author}&lt;/code&gt; isn&amp;rsquo;t
even a hash yet and we can still hash-index it. This is due to a feature
called &lt;em&gt;autovivification&lt;/em&gt;, which automatically creates (&amp;ldquo;vivifies&amp;rdquo;) objects
where we need them. The use of &lt;code&gt;++&lt;/code&gt; creates integers, &lt;code&gt;{...}&lt;/code&gt; indexing creates
hashes, &lt;code&gt;[...]&lt;/code&gt; indexing, &lt;code&gt;.push&lt;/code&gt; creates arrays, and so on.&lt;/p&gt;

&lt;p&gt;To get from these hashes to the top contributors by commit count, we can
sort &lt;code&gt;%total&lt;/code&gt; by value. Since this sorts in ascending order, sorting
by the negative value returns the list in descending order. The list contains
&lt;a href=&#34;https://docs.perl6.org/types/Pair&#34;&gt;Pair&lt;/a&gt; objects, where we only want the
first five, and only their keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %total&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(&lt;span style=&#34;color:#f92672&#34;&gt;-*.&lt;/span&gt;value)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;key);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each author, we can extract the dates of their activity and their
commit counts like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{@dates};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last line uses &lt;em&gt;slicing&lt;/em&gt;, that is, indexing a hash with a list to return
a list of elements.&lt;/p&gt;

&lt;h2 id=&#34;plotting-with-python&#34;&gt;Plotting with Python&lt;/h2&gt;

&lt;p&gt;Matplotlib is a very versatile library for all sorts of plotting and
visualization tasks. It is based on &lt;a href=&#34;http://www.numpy.org/&#34;&gt;NumPy&lt;/a&gt;, a Python library
for scientific and numeric computing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/&#34;&gt;Matplotlib&lt;/a&gt; is written in Python and for Python programs, but that
won&amp;rsquo;t stop us from using it in a Perl 6 program.&lt;/p&gt;

&lt;p&gt;But first, let&amp;rsquo;s take a look at a basic plotting example that uses dates
on the x-axis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt

fig, subplots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()
subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(
    [datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)],
    [ &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; ],
    label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;An example&amp;#39;&lt;/span&gt;,
)
subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;, shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autofmt_xdate()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this run, you have to install Python 2.7 and matplotlib&lt;sup&gt;&lt;a href=&#34;#python2-only&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You can do
this on Debian-based Linux systems with &lt;code&gt;apt-get install -y python-matplotlib&lt;/code&gt;.
The package name is the same on RPM-based distributions such as CentOS or SUSE
Linux. MacOS users are advised to install Python 2.7 through homebrew and
macports and then use &lt;code&gt;pip2 install matplotlib&lt;/code&gt; or &lt;code&gt;pip2.7 install
matplotlib&lt;/code&gt; to get the library. Windows installation is probably easiest
through the &lt;a href=&#34;https://conda.io/docs/&#34;&gt;conda&lt;/a&gt; package manager, which offers
pre-built binaries of both Python and matplotlib.&lt;/p&gt;

&lt;p&gt;When you run this script with &lt;code&gt;python2.7 dates.py&lt;/code&gt;, it opens a GUI window,
showing the plot and some controls, which allow you to zoom, scroll, and
write the plot graphic to a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/matplotlib-window.png&#34; alt=&#34;Basic matplotlib plotting window&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;bridging-the-gap&#34;&gt;Bridging the Gap&lt;/h2&gt;

&lt;p&gt;The Rakudo Perl 6 compiler comes with a handy &lt;a href=&#34;https://docs.perl6.org/language/nativecall&#34;&gt;library for calling foreign
functions&lt;/a&gt; &amp;ndash; called &lt;code&gt;NativeCall&lt;/code&gt; &amp;ndash; which allows you to
call functions written in C, or anything with a compatible binary interface.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/niner/Inline-Python&#34;&gt;Inline::Python&lt;/a&gt; library uses
the native call functionality to talk to Python&amp;rsquo;s C API and offers
interoperability between Perl 6 and Python code. At the time of writing, this
interoperability is still fragile in places, but can be worth using for
some of the great libraries that Python has to offer.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;Inline::Python&lt;/code&gt;, you must have a C compiler available, and then
run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ zef install Inline::Python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start to run Python 2 code in your Perl 6 programs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Inline::Python;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print(&amp;#34;Hello, Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides the &lt;code&gt;run&lt;/code&gt; method, which takes a string of Python code and executes it,
you can also use &lt;code&gt;call&lt;/code&gt; to call Python routines by specifying the namespace,
the routine to call, and a list of arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Inline::Python;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import datetime&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print&amp;#39;&lt;/span&gt;, $date);    &lt;span style=&#34;color:#75715e&#34;&gt;# 2017-01-31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments that you pass to &lt;code&gt;call&lt;/code&gt; are Perl 6 objects, such as the three &lt;code&gt;Int&lt;/code&gt;
objects in this example. &lt;code&gt;Inline::Python&lt;/code&gt; automatically translates them into
the corresponding Python built-in data structure. It translates numbers,
strings, arrays, and hashes. Return values are also translated in the opposite
direction, though since Python 2 does not distinguish properly between
byte and Unicode strings, Python strings end up as buffers in Perl 6.&lt;/p&gt;

&lt;p&gt;Objects that &lt;code&gt;Inline::Python&lt;/code&gt; cannot translate are handled as opaque objects
on the Perl 6 side. You can pass them back into Python routines (as shown
with the &lt;code&gt;print&lt;/code&gt; call above) and you can call methods on them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isoformat()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode;               &lt;span style=&#34;color:#75715e&#34;&gt;# 2017-01-31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl 6 exposes attributes through methods, so Perl 6 has no syntax for
accessing attributes from foreign objects directly. For instance, if you try to access
the &lt;code&gt;year&lt;/code&gt; attribute of &lt;code&gt;datetime.date&lt;/code&gt; through the normal method
call syntax, you get an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;year;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dies with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;int&#39; object is not callable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, you have to use the &lt;code&gt;getattr&lt;/code&gt; builtin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getattr&amp;#39;&lt;/span&gt;, $date, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-the-bridge-to-plot&#34;&gt;Using the Bridge to Plot&lt;/h2&gt;

&lt;p&gt;We need access to two namespaces in Python, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;matplotlib.pyplot&lt;/code&gt;,
so let&amp;rsquo;s start by importing them and writing some short helpers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import datetime&amp;#39;&lt;/span&gt;);
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(Str $name, |c) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pydate&lt;/span&gt;(Str $d) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, $d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;Int));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now call &lt;code&gt;pydate(&#39;2017-03-01&#39;)&lt;/code&gt; to create a Python &lt;code&gt;datetime.date&lt;/code&gt;
object from an ISO-formatted string and call the &lt;code&gt;plot&lt;/code&gt; function to access
functionality from matplotlib:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subplots&amp;#39;&lt;/span&gt;);
$figure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autofmt_xdate();

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot:
    $[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)],
    $[ %dates{@dates} ],
    label     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Total&amp;#39;&lt;/span&gt;,
    marker    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
    linestyle &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Perl 6 call &lt;code&gt;plot(&#39;subplots&#39;)&lt;/code&gt; corresponds to the Python code
&lt;code&gt;fig, subplots = plt.subplots()&lt;/code&gt;. Passing arrays to Python functions needs
a bit of extra work, because &lt;code&gt;Inline::Python&lt;/code&gt; flattens arrays. Using an extra &lt;code&gt;$&lt;/code&gt;
sigil in front of an array puts it into an extra scalar and thus prevents
the flattening.&lt;/p&gt;

&lt;p&gt;Now we can actually plot the number of commits by author, add a legend, and
plot the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $author {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{@dates};
    $subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot:
        $[ @dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate) ],
        $@counts,
        label     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $author,
        marker    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
        linestyle &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
}


$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;, shadow&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;True);

plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run in the &lt;a href=&#34;https://github.com/ugexe/zef&#34;&gt;zef git repository&lt;/a&gt;, it produces
this plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors.png&#34; alt=&#34;Contributions to zef, a Perl 6 module installer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;stacked-plots&#34;&gt;Stacked Plots&lt;/h2&gt;

&lt;p&gt;I am not yet happy with the plot, so I want to explore using stacked
plots for presenting the same information. In a regular plot, the
y-coordinate of each plotted value is proportional to its value. In a
stacked plot, it is the distance to the previous value that is
proportional to its value. This is nice for values that add up to a
total that is also interesting.&lt;/p&gt;

&lt;p&gt;Matplotlib offers a &lt;a href=&#34;http://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.stackplot.html&#34;&gt;method called
&lt;code&gt;stackplot&lt;/code&gt;&lt;/a&gt;
for this task. Contrary to multiple &lt;code&gt;plot&lt;/code&gt; calls on a subplot object, it
requires a shared x-axis for all data series. Hence we must construct
one array for each author of git commits, where dates with no value are
set to zero.&lt;/p&gt;

&lt;p&gt;This time we have to construct an array of arrays where each inner array
has the values for one author:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $d {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
        @stack[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$d} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now plotting becomes a simple matter of a method call, followed by the
usual commands to add a title and show the plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$subplots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stackplot($[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)], @stack);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result (again run on the zef source repository) is this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-stacked-1.png&#34; alt=&#34;Stacked plot of zef contributions over time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Comparing this to the previous visualization reveals a discrepancy:
There were no commits in 2014, and yet the stacked plot makes it appear
this way. In fact, the previous plots would have shown the same
&amp;ldquo;alternative facts&amp;rdquo; if we had chosen lines instead of points. It comes
from matplotlib (like nearly all plotting libraries) interpolates
linearly between data points. But in our case, a date with no data
points means zero commits happened on that date.&lt;/p&gt;

&lt;p&gt;To communicate this to matplotlib, we must explicitly insert zero values
for missing dates. This can be achieved by replacing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with the line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minmax;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.perl6.org/routine/minmax#class_Any&#34;&gt;&lt;code&gt;minmax&lt;/code&gt; method&lt;/a&gt;
finds the minimal and maximal values, and returns them in a
&lt;a href=&#34;https://docs.perl6.org/type/Range&#34;&gt;Range&lt;/a&gt;. Assigning the range to an
array turns it into an array of all values between the minimal and the
maximal value. The logic for assembling the &lt;code&gt;@stack&lt;/code&gt; variable already
maps missing values to zero.&lt;/p&gt;

&lt;p&gt;The result looks a bit better, but still far from perfect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-stacked-2.png&#34; alt=&#34;Stacked plot of zef contributions over time, with missing dates mapped to zero&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thinking more about the problem, contributions from separate days should
not be joined together, because it produces misleading results.
Matplotlib doesn&amp;rsquo;t support adding a legend automatically to stacked
plots, so this seems to be to be a dead end.&lt;/p&gt;

&lt;p&gt;Since a dot plot didn&amp;rsquo;t work very well, let&amp;rsquo;s try a different kind of
plot that represents each data point separately: a bar chart, or more
specifically, a stacked bar chart. Matplotlib offers the &lt;code&gt;bar&lt;/code&gt; plotting
method where the named parameter &lt;code&gt;bottom&lt;/code&gt; can be used to generate the
stacking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $[] xx @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @dates &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $d {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
        @bottom[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: $bottom;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; %by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;author{$author}{$d} &lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        @stack[$idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: $value;
        $bottom &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; $value;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to supply color names ourselves and set the edge color of the
bars to the same color, otherwise the black edge color dominates the
result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @colors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;red green blue yellow black&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @plots;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; @top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kv &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $idx, $author {
    @plots&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push: plot(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;,
        $[@dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pydate)],
        @stack[$idx],
        $width,
        bottom &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @bottom[$idx],
        color &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @colors[$idx],
        edgecolor &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; @colors[$idx],
    );
}
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;legend&amp;#39;&lt;/span&gt;, $@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);

plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces the first plot that&amp;rsquo;s actually informative and not
misleading (provided you&amp;rsquo;re not color blind):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/plotting-with-perl-6/zef-contributors-bars.png&#34; alt=&#34;Stacked bar plot of zef contributions over time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to improve the result further, you could experiment with
limiting the number of bars by lumping together contributions by week or
month (or maybe &lt;code&gt;$n&lt;/code&gt;-day period).&lt;/p&gt;

&lt;h2 id=&#34;idiomatic-use-of-inline-python&#34;&gt;Idiomatic Use of Inline::Python&lt;/h2&gt;

&lt;p&gt;Now that the plots look informative and correct, it&amp;rsquo;s time to explore how
to better emulate the typical Python APIs through &lt;code&gt;Inline::Python&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;types-of-python-apis&#34;&gt;Types of Python APIs&lt;/h3&gt;

&lt;p&gt;Python is an object-oriented language, so many APIs involve method
calls, which &lt;code&gt;Inline::Python&lt;/code&gt; helpfully automatically translates for us.&lt;/p&gt;

&lt;p&gt;But the objects must come from somewhere and typically this is by
calling a function that returns an object, or by instantiating a class.
In Python, those two are really the same under the hood, since
instantiating a class is the same as calling the class as if it were a
function.&lt;/p&gt;

&lt;p&gt;An example of this (in Python) would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subplots
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subplots()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the matplotlib documentation tends to use another, equivalent
syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This uses the &lt;code&gt;subplots&lt;/code&gt; symbol (class or function) as a method on the
module &lt;code&gt;matplotlib.pyplot&lt;/code&gt;, which the import statement aliases to &lt;code&gt;plt&lt;/code&gt;.
This is a more object-oriented syntax for the same API.&lt;/p&gt;

&lt;h3 id=&#34;mapping-the-function-api&#34;&gt;Mapping the Function API&lt;/h3&gt;

&lt;p&gt;The previous code examples used this Perl 6 code to call the &lt;code&gt;subplots&lt;/code&gt;
symbol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
$py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;(Str $name, |c) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subplots&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to call &lt;code&gt;subplots()&lt;/code&gt; instead of &lt;code&gt;plot(&#39;subplots&#39;)&lt;/code&gt;, and
&lt;code&gt;bar(args)&lt;/code&gt; instead of &lt;code&gt;plot(&#39;bar&#39;, args)&lt;/code&gt;, we can use a function to
generate wrapper functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Inline::Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen&lt;/span&gt;(Str $namespace, *@names) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; @names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map: &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $name {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; (|args) {
            $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;subplots, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bar, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;legend, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;title, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;show)
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;subplots bar legend title show&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subplots();

&lt;span style=&#34;color:#75715e&#34;&gt;# more code here&lt;/span&gt;

legend($@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);
title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
show();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes the functions&amp;rsquo; usage quite nice, but comes at the cost
of duplicating their names. One can view this as a
feature, because it allows the creation of different aliases, or as a
source for bugs when the order is messed up, or a name misspelled.&lt;/p&gt;

&lt;p&gt;How could we avoid the duplication should we choose to create wrapper
functions?&lt;/p&gt;

&lt;p&gt;This is where Perl 6&amp;rsquo;s flexibility and introspection abilities pay off.
There are two key components that allow a nicer solution: the fact that
declarations are expressions, and that you can introspect variables for
their names.&lt;/p&gt;

&lt;p&gt;The first part means you can write &lt;code&gt;mysub my ($a, $b)&lt;/code&gt;, which
declares the variables &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt;, and calls a function with those
variables as arguments. The second part means that &lt;code&gt;$a.VAR.name&lt;/code&gt; returns
a string &lt;code&gt;&#39;$a&#39;&lt;/code&gt;, the name of the variable.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s combine this to create a wrapper that initializes subroutines for
us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pysub&lt;/span&gt;(Str $namespace, |args) {
    $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;-&amp;gt;&lt;/span&gt; $sub {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;VAR&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;substr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        $sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; (|args) {
            $py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
        }
    }
}

pysub &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;subplots, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bar, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;legend, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;title, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;show);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This avoids duplicating the name, but forces us to use some lower-level
Perl 6 features in sub &lt;code&gt;pysub&lt;/code&gt;. Using ordinary variables means that accessing their
&lt;code&gt;.VAR.name&lt;/code&gt; results in the name of the variable, not the name of the
variable that&amp;rsquo;s used on the caller side. So we can&amp;rsquo;t use slurpy
arguments as in&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pysub&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Str&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subs&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead we must use
&lt;code&gt;|args&lt;/code&gt; to obtain the rest of the arguments in a
&lt;a href=&#34;https://docs.perl6.org/type/Capture.html&#34;&gt;Capture&lt;/a&gt;. This doesn&amp;rsquo;t
flatten the list of variables passed to the function, so when we iterate
over them, we must do so by accessing &lt;code&gt;args[0]&lt;/code&gt;. By default, loop
variables are read-only, which we can avoid by using &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; instead of
&lt;code&gt;-&amp;gt;&lt;/code&gt; to introduce the signature. Fortunately, that also preserves the
name of the caller side variable.&lt;/p&gt;

&lt;h3 id=&#34;an-object-oriented-interface&#34;&gt;An Object-Oriented Interface&lt;/h3&gt;

&lt;p&gt;Instead of exposing the functions, we can also create types that emulate
the method calls on Python modules. For that we can implement a class with a
method &lt;code&gt;FALLBACK&lt;/code&gt;, which Perl 6 calls for us when calling a method that is not
implemented in the class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class PyPlot is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;import matplotlib.pyplot&amp;#39;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PyPlot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($figure, $subplots) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots;
&lt;span style=&#34;color:#75715e&#34;&gt;# plotting code goes here&lt;/span&gt;
$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend($@plots, $@top&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;authors);

$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Contributions per day&amp;#39;&lt;/span&gt;);
$pyplot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Class &lt;code&gt;PyPlot&lt;/code&gt; inherits directly from &lt;code&gt;Mu&lt;/code&gt;, the root of the Perl 6 type
hierarchy, instead of &lt;code&gt;Any&lt;/code&gt;, the default parent class (which in turn inherits
from &lt;code&gt;Mu&lt;/code&gt;). &lt;code&gt;Any&lt;/code&gt; introduces a large number of methods that Perl 6 objects
get by default and since &lt;code&gt;FALLBACK&lt;/code&gt; is only invoked when a method is not
present, this is something to avoid.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;TWEAK&lt;/code&gt; is another method that
Perl 6 calls automatically for us, after the object has been fully
instantiated. All-caps method names are reserved for such special purposes.
It is marked as a &lt;code&gt;submethod&lt;/code&gt;, which means it is not inherited into subclasses.
Since &lt;code&gt;TWEAK&lt;/code&gt; is called at the level of each class, if it were a regular
method, a subclass would call it twice implicitly. Note that &lt;code&gt;TWEAK&lt;/code&gt; is only
supported in Rakudo version 2016.11 and later.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing specific to the Python package &lt;code&gt;matplotlib.pyplot&lt;/code&gt; in class
&lt;code&gt;PyPlot&lt;/code&gt;, except the namespace name. We could easily generalize it to any
namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class PythonModule is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;namespace;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $!namespace&amp;#34;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PythonModule&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py, :namespace&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;matplotlib.pyplot&amp;gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is one Perl 6 type that can represent any Python module. If instead we
want a separate Perl 6 type for each Python module, we could use roles, which
are optionally parameterized:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;role PythonModule[Str $namespace] is Mu {
    has $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;py;
    submethod TWEAK {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import $namespace&amp;#34;&lt;/span&gt;);
    }
    method FALLBACK($name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args) {
        $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;py&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call($namespace, $name, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;args);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pyplot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PythonModule[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matplotlib.pyplot&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(:$py);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this approach, we can create type constraints for Python modules in
Perl 6 space:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plot&lt;/span&gt;-histogram(PythonModule[&amp;#39;matplotlib.pyplot&amp;#39;], @data) {
    &lt;span style=&#34;color:#75715e&#34;&gt;# implementation here&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing in any wrapped Python module other than &lt;code&gt;matplotlib.pyplot&lt;/code&gt; results
in a type error.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve explored several ways to represent commit occurrence in plots and
utilized &lt;code&gt;Inline::Python&lt;/code&gt; to interface with a Python based plotting library.&lt;/p&gt;

&lt;p&gt;A bit of Perl 6 meta programming allowed us to emulate different kinds of
Python APIs pretty directly in Perl 6 code, allowing a fairly direct
translation of the original library&amp;rsquo;s documentation into Perl 6 code.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;a name=&#34;python2-only&#34;&gt;1&lt;/a&gt;: The reason why Python 2.7 has to be used is that, at the time of writing, &lt;code&gt;Inline::Python&lt;/code&gt; does not yet support Python 3.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty Printing Perl 6</title>
      <link>http://localhost:1313/article/pretty-printing-perl-6/</link>
      <pubDate>Wed, 26 Jul 2017 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/pretty-printing-perl-6/</guid>
      <description>&lt;p&gt;As I was working on &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;Learning Perl 6&lt;/a&gt;, I wanted a way to pretty print a hash to show the reader what happened. I didn&amp;rsquo;t want to output from the builtin routines and a module I found was a good start but needed more work. So I created the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I get to my module, Perl 6 already has some nice ways to summarize objects. My first task was to dump a match object to see what it matched. Here&amp;rsquo;s a bit of code that matches a string against a regex and saves the result in &lt;code&gt;$match&lt;/code&gt;. That&amp;rsquo;s a &lt;a href=&#34;https://docs.perl6.org/type/Match&#34;&gt;Match&lt;/a&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I output that with &lt;a href=&#34;https://docs.perl6.org/routine/put&#34;&gt;put&lt;/a&gt;, I get the part of the string that matched:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could change the code slightly to use &lt;a href=&#34;https://docs.perl6.org/routine/say&#34;&gt;say&lt;/a&gt;. That&amp;rsquo;s like &lt;code&gt;put&lt;/code&gt; but calls the &lt;a href=&#34;https://docs.perl6.org/routine/gist&#34;&gt;.gist&lt;/a&gt; method on the object first to provide a human-compatible version of the object. Each object can decide on it&amp;rsquo;s own what that means.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match;  &lt;span style=&#34;color:#75715e&#34;&gt;# put $match.gist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, the output is almost the same. There are some fancy quotes around it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｢c1｣
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of &lt;code&gt;.gist&lt;/code&gt;, which &lt;code&gt;say&lt;/code&gt; gives me for free, I could call the &lt;a href=&#34;https://docs.perl6.org/routine/perl&#34;&gt;perl&lt;/a&gt; method explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;put $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a string that represents what Perl 6 thinks the data structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could also use &lt;a href=&#34;https://docs.perl6.org/programs/01-debugging#Dumper_function_dd&#34;&gt;dd&lt;/a&gt;, a Rakudo-specific dumping feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;dd $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is similar to the string for &lt;code&gt;.perl&lt;/code&gt;, but also slightly different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match $match = Match.new(list =&amp;gt; (), made =&amp;gt; Any, pos =&amp;gt; 7, hash =&amp;gt; Map.new(()), orig =&amp;gt; &amp;quot;:::abc123::&amp;quot;, from =&amp;gt; 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t particularly like any of formats because they are squished together and rather ugly to my eyes (but being pleasing to me personally shows up in exactly zero designs). I looked for a module, and even though the Perl 6 module ecosystem is fairly young, I found &lt;a href=&#34;https://github.com/drforr/perl6-pp&#34;&gt;Pretty::Printer&lt;/a&gt; from Jeff Goff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pretty::Printer; &lt;span style=&#34;color:#75715e&#34;&gt;# From Jeff Goff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

Pretty::Printer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pp: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, I didn&amp;rsquo;t get anything (or, more exactly, I got literally &amp;ldquo;anything&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Any
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Pretty::Printer&lt;/code&gt; was nice for the few data types that it handled, but not a &lt;code&gt;Match&lt;/code&gt; object. It had some builtin handlers that it selected with a &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth) }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth) }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I started to work on &lt;code&gt;Pretty::Printer&lt;/code&gt; to add a &lt;code&gt;Match&lt;/code&gt; handler, and then a few others, but I quickly realized I was getting far away from Jeff&amp;rsquo;s original code. Not only that, but I didn&amp;rsquo;t want to add more and more branches to the &lt;code&gt;given-when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method _pp($ds,$depth)
  {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;
  given $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WHAT
    {
    &lt;span style=&#34;color:#75715e&#34;&gt;# Check more derived types first.&lt;/span&gt;
    when Match   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Match($ds,$depth) }
    when Hash    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Hash($ds,$depth)  }
    when Array   { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Array($ds,$depth) }
    when Map     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Map($ds,$depth) }
    when List    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List($ds,$depth) }
    when Pair    { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Pair($ds,$depth)  }
    when Str     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl }
    when Numeric { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;$ds }
    when Nil     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Nil}&lt;/span&gt; }
    when Any     { $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;q{Any}&lt;/span&gt; }
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string($str,$depth);
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I changed my module name to &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump&lt;/a&gt; and ended up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $rx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rx&lt;span style=&#34;color:#e6db74&#34;&gt;/ &amp;lt;[ a .. z ]&amp;gt; &amp;lt;[ 1 .. 9 ]&amp;gt; /&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:::abc123::&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $string &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; $rx;

put PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $match;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was much more pleased with the output which allowed me easily pick out the part of the object I wanted to inspect:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Match.new(
  :from(5),
  :hash(Map.new()),
  :list($()),
  :made(Mu),
  :orig(&amp;quot;:::abc123::&amp;quot;),
  :pos(7),
  :to(7)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solves that problem. But what about all the other types? One of my first improvements was a way to dump a class that my module did not know about. I knew about the &lt;code&gt;TO_JSON&lt;/code&gt; method that the Perl 5 &lt;a href=&#34;https://metacpan.org/pod/JSON&#34;&gt;JSON&lt;/a&gt; module. With that, a class could decide its own JSON representation. I could do that with &lt;code&gt;PrettyDump&lt;/code&gt;. If a class or object has a &lt;code&gt;PrettyDump&lt;/code&gt; method, my module will use that preferentially:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class SomeClass {
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
    method PrettyDump ( $pretty, $ds, $depth ) {
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;
        }
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $some&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class doesn&amp;rsquo;t need to define that method. I could decorate an object with a &lt;code&gt;PrettyDump&lt;/code&gt; method through a role. The &lt;a href=&#34;https://docs.perl6.org/language/operators#infix_but&#34;&gt;but&lt;/a&gt; operator can do that for me by creating a new object in a new class that includes that role mixed into the original class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; PrettyDump;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Int $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;;
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $a but role {
  method PrettyDump ( $pretty, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({self.^name}) {self}&amp;#34;&lt;/span&gt;;
    }
  };
put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $b;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code looks different from Jeff&amp;rsquo;s, but it&amp;rsquo;s not that different. Instead of a &lt;code&gt;given-when&lt;/code&gt;, I have an &lt;code&gt;if&lt;/code&gt; structure. I collapsed Jeff&amp;rsquo;s branches into &lt;code&gt;self.can: $ds.^name&lt;/code&gt; to look for a matching method to the object type (and introduced a bug while doing it. See it?). The first branch looks for the &lt;code&gt;PrettyDump&lt;/code&gt; method. The second does some special handling for numeric things. If none of those work, I &lt;code&gt;die&lt;/code&gt;, which is another stupid thing I did at first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
  put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In dump. Got &amp;#34;&lt;/span&gt;, $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Numeric: $ds, $depth;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
    $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not handle &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl;
    }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I kept going. I wanted a way to add (and remove) handlers to a &lt;code&gt;PrettyDump&lt;/code&gt; object. I could add those as roles, but I thought about doing this repeatedly and often and didn&amp;rsquo;t like the idea of the frankenclass that would create. I added a way to do it on my own (although I might change my mind later):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pretty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PrettyDump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

class SomeClass { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; ( $pretty, $ds, Int $depth = 0 ) {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  }

$pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;handler: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SomeClass&amp;#39;&lt;/span&gt;, $handler;

put $pretty&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump: $SomeClass&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;object;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My code added a couple more branches (and some code comments to elucidate the process). First, I&amp;rsquo;d look for a handler. If I&amp;rsquo;d defined one of those, I&amp;rsquo;d use it. Otherwise, I went through the same process. I did add some more checks at the end. If nothing else worked, I try a &lt;code&gt;.Str&lt;/code&gt; method. Instead of &lt;code&gt;die&lt;/code&gt;-ing at the end, I add an &amp;ldquo;unhandled thingy&amp;rdquo; string for that object. That way I know that I didn&amp;rsquo;t handle something and the rest of the program keeps going. That turned out to be more important than I thought. I use this to peek at a program as it executes. It&amp;rsquo;s not part of the program flow and shouldn&amp;rsquo;t interrupt it because my dumping code is incomplete:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method dump ( $ds, Int $depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Str ) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the PrettyDump object has a user-defined handler&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for this type, prefer that one&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handles: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;handle: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# The object might have its own method to dump&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# its structure&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrettyDump&amp;#39;&lt;/span&gt; {
      $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PrettyDump: self;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s any sort of Numeric, we&amp;#39;ll handle it&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# and dispatch further&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; Numeric {
      self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Numeric: $ds, $depth;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we have a method name that matches the class, we&amp;#39;ll&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# use that.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
      self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;( $ds, $depth );
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If the class inherits from something that we know&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# about, use the most specific one that we know about&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grep( { self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: $_&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Str $str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;parents &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $type {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $what &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $type&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;name;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can( $what );
        $str &lt;span style=&#34;color:#f92672&#34;&gt;~=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$what&amp;#34;&lt;/span&gt;(
         $ds, $depth, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$ds.^name}.new(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
        }
      $str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# If we&amp;#39;re this far and the object has a .Str method,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# we&amp;#39;ll use that:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;can: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Str&amp;#39;&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({$ds.^name}): &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; $ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str;
      }
    &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, we&amp;#39;ll put a placeholder method there&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(Unhandled {$ds.^name})&amp;#34;&lt;/span&gt;
      }
    };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;indent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string: $str, $depth;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I got further into this code, I looked at Perl 5&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;, but discovered that this isn&amp;rsquo;t the same sort of thing. That module outputs Perl code that I could &lt;a href=&#34;https://perldoc.perl.org/functions/eval.html&#34;&gt;eval&lt;/a&gt; to get back the same data structure. I didn&amp;rsquo;t want that &lt;a href=&#34;https://www.masteringperl.org/2012/12/the-storable-security-problem/&#34;&gt;can of worms&lt;/a&gt; in my module.&lt;/p&gt;

&lt;p&gt;Beyond what I&amp;rsquo;ve shown here, I&amp;rsquo;ve been fiddling with formatting and other minor things as I run into problems. If there&amp;rsquo;s something that you&amp;rsquo;d like to do with the code, you can contribute through the &lt;a href=&#34;https://github.com/briandfoy/perl6-PrettyDump&#34;&gt;PrettyDump GitHub repo&lt;/a&gt;, or even fork my code as the basis for your own experiments.&lt;/p&gt;

&lt;p&gt;(Part of this work was supported by a travel grant from &lt;a href=&#34;http://www.perlfoundation.org&#34;&gt;The Perl Foundation&lt;/a&gt;. I presented talks about my work at &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/pretty-dump-perl-6&#34;&gt;Amsterdam.pm&lt;/a&gt;, &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/dumping-perl-6-french-perl-workshop&#34;&gt;French Perl Workshop 2017&lt;/a&gt;, and &lt;a href=&#34;https://www.slideshare.net/brian_d_foy/prettydump-perl-6-londonpm&#34;&gt;London.pm&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thinking about Perl 6</title>
      <link>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</link>
      <pubDate>Tue, 25 Apr 2017 08:23:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/an-interview-with-laurent-rosenfeld/</guid>
      <description>&lt;p&gt;&lt;em&gt;brian d foy interviews Laurent Rosenfeld, whose new book &lt;a href=&#34;http://shop.oreilly.com/product/0636920065883.do&#34;&gt;Think Perl 6&lt;/a&gt; from O&amp;rsquo;Reilly Media, comes out this summer and is available for pre-order. This book joins a series of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think &amp;hellip;&lt;/a&gt; books targeting different subjects and is provided for free under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/3.0/&#34;&gt;Creative Commons license&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was made possible through a reward on brian&amp;rsquo;s &lt;a href=&#34;https://www.kickstarter.com/projects/1422827986/learning-perl-6&#34;&gt;Kickstarter project for Learning Perl 6&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your Perl programming background? How did you discover the language, how did it help you solve problems, and what did you like about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Laurent)&lt;/em&gt; I started to program in Perl 5 in 2002. At the time I was using mainly Python (and also a bit of TCL/TK) for my scripting needs.&lt;/p&gt;

&lt;p&gt;The integration and implementation team for which I started to work at the time was using a number of mostly relatively small Perl programs in the context of a data migration suite.&lt;/p&gt;

&lt;p&gt;Although I wasn&amp;rsquo;t working as a developer at the time, I felt it would be good to get to get acquainted to the language. So I picked up a tutorial on the Internet and started to work on it, and I found the language to be quite pleasant.&lt;/p&gt;

&lt;p&gt;At that point, we received some large improperly formatted data files that needed to be pre-processed before we could use them. I first thought about writing quickly a Python script and then changed my mind: since I was trying to learn about Perl, maybe I could try to write that script in Perl. Within a day or so, I had a Perl script doing what was needed. That script was probably quite clumsy, and certainly did not comply with the best practices, but it worked exactly as needed.&lt;/p&gt;

&lt;p&gt;I was quite impressed how easily I had been able to write a script for real professional use with the small subset of Perl that I knew at the time. I continued with Perl. It is really a few years later that I started to really consider Perl as a programming language, rather than simply a scripting language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have made various tests and experiments with Perl 6 in 2012 and early 2013, but I started to work seriously with Perl 6 during the second half of 2013. I started to write about Perl 6 in 2014.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some of your favorite features of the new language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first that it belongs to the Perl family, with the same spirit (TIMTOWTDI, DWIM, etc.). This made it easy for me to learn it, even though Perl 5 and Perl 6 are different languages.&lt;/p&gt;

&lt;p&gt;Then the features I prefer are its powerful object model, the very good support for functional style programming, the enhanced regex features and grammars. I love the built-in possibilities of extending the languages, such as constructing new operators, extending the Perl 6 grammar, etc.&lt;/p&gt;

&lt;p&gt;The support for concurrent programming and parallel processing also seems to be great, but I have only played with that, I haven&amp;rsquo;t done anything serious with it at this point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your new book, &lt;em&gt;Think Perl 6&lt;/em&gt;, is based on a similar Python book. How did you discover that book? Were you doing Python at the time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many years ago I read the first edition of &lt;a href=&#34;http://greenteapress.com/wp/think-python/&#34;&gt;Think Python&lt;/a&gt; and had found it was a great book, because it wasn&amp;rsquo;t teaching Python, but rather teaching computer science and programming, using Python. This is the main idea of &lt;em&gt;Think Perl 6&lt;/em&gt;: teaching computer science using Perl 6.&lt;/p&gt;

&lt;p&gt;I have been using Python in the past, but I don&amp;rsquo;t remember if was using it regularly when I first read &lt;em&gt;Think Python&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How alike are the two books? Did you have to change much of the book to accommodate Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The early chapters are quite similar (except of course for the code examples and differences in syntactic features).&lt;/p&gt;

&lt;p&gt;As I said, both books are about teaching computer programming more than teaching the specific language. So most of what is about the art of programming is quite similar. But when it comes to the languages&amp;rsquo; features, there are obviously some major differences.&lt;/p&gt;

&lt;p&gt;The chapter on strings, for example, is quite different because there is a long part on regular expressions or regexes in &lt;em&gt;Think Perl 6&lt;/em&gt;, whereas the Python book does not even mention them.&lt;/p&gt;

&lt;p&gt;The later chapters, such as those about object-oriented programming, grammars or functional programming are completely different or even brand new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You started translating &lt;em&gt;Think Python&lt;/em&gt; into French. What motivated you to do that?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I said, I had loved the first edition of that book. When friends of mine considered translating that book into French I strongly supported the idea.&lt;/p&gt;

&lt;p&gt;Initially, someone else (whom I knew well for having worked on other projects with her) started to translate the book, and I initially acted as a technical editor of the translation. Then I was dragged more into the project and translated myself the more technical parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What else have you translated?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have translated a number of other things. Concerning items that have the size of a book, I should mention &lt;em&gt;Modern Perl&lt;/em&gt;, the book by chromatic, and I am currently working on the translation of a book about Scala.&lt;/p&gt;

&lt;p&gt;Besides that, I have translated many shorter tutorials and articles on various features of programming languages such as Perl 5, Perl 6, Python, C++, Go, etc., as well as various articles about big data and also some pieces on the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you think about the subject differently in French than English? Do these spoken languages affect how you explain things?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, I don&amp;rsquo;t think that the human language I use affects the way I think. Sometimes I think in English when writing something in French, and sometimes the other way around, but, most of the time, I think in the language in which I will try to express myself. I even dream in both languages (although more frequently in French). I think that I am truly bilingual in the sense that I can really think in both languages with no real difference (although, of course, my command of English is less fluent than my command of French, my mother tongue).&lt;/p&gt;

&lt;p&gt;But the language I use does of course change to a certain extent the way to express ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Think Perl 6&lt;/em&gt;&amp;rsquo;s subtitle is &amp;ldquo;Think Like a Computer Scientist&amp;rdquo;. Do you think that the programming world needs more academic rigor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More academic rigor, well, yes, in a certain way, but I am not sure that&amp;rsquo;s really what is lacking. A broader understanding of computer science is certainly needed. Sometimes I see people developing in one language, say PHP, and not really knowing any other language or any other way of doing things; that&amp;rsquo;s not very good. I tend to think you can&amp;rsquo;t really be a good programmer if you know only one language. I personally love programming languages and I have used at least three dozens of them over the last thirty years. I think it opens the mind to other approaches and better ways of doing things.&lt;/p&gt;

&lt;p&gt;I really agree with Tom Christiansen who said that a programmer that hasn&amp;rsquo;t been exposed to imperative or procedural programming, object-oriented programming, functional programming, and logical or declarative programming has some conceptual blindspots.&lt;/p&gt;

&lt;p&gt;And I also don&amp;rsquo;t think you can become a good programmer in just one semester or by simply reading &amp;ldquo;Programming X for Dummies.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What book has most influenced your programming habits?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relatively recently, definitely &lt;em&gt;&lt;a href=&#34;http://hop.perl.plover.com&#34;&gt;Higher Order Perl&lt;/a&gt;&lt;/em&gt;, the book by Mark Jason Dominus about functional programming in Perl 5. It is probably, in my opinion, the best IT/CS book I&amp;rsquo;ve read in the last ten years. It has changed really the way I program not only in Perl, but also how I write code in other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which books using languages other than Perl have made you a better Perl programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is hard to make a list and not to forget some important ones. Just naming a few, in no particular order: &lt;em&gt;The Practice of Programming&lt;/em&gt; (Kernighan and Pike), &lt;em&gt;Structure and Interpretation of Programming Languages&lt;/em&gt; (Abelson and Sussman), &lt;em&gt;Think Python&lt;/em&gt; (A. Downey), &lt;em&gt;Programming Pearls&lt;/em&gt; (Jon Bentley), &lt;em&gt;Mastering Regular Expressions&lt;/em&gt; (Jeffrey Friedl).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even if someone isn&amp;rsquo;t going to work in Perl 6, what lessons from your book can people take to other languages?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, I certainly wish that people that use my book to learn programming will continue to program in Perl 6, but I&amp;rsquo;ll be very happy if they learned programming with my book and become good programmers in another languages.&lt;/p&gt;

&lt;p&gt;Personally, when I was studying, I had to use a number of programming languages that I never or seldom used afterwards for any real-life purpose (Basic, Fortran, Pascal, Lisp, Scheme, Caml, Ada, Prolog, Modula-2, etc.). But I learned quite a bit from them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future do you see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I frankly don&amp;rsquo;t know. I think this language is really very good and efficient, but that&amp;rsquo;s not enough to become the leading language. There is an element of luck: is the language coming at the right time? Let&amp;rsquo;s face it: Perl 6 took way too long to come out. But that&amp;rsquo;s doesn&amp;rsquo;t matter too much if Perl 6 is the good match for today&amp;rsquo;s needs; I think it probably is. The good point about Perl 6 is that it can easily be extended; so, it is likely to satisfy not only current needs, but also tomorrow&amp;rsquo;s needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What future would you like to see in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I really think it is the greatest programming language I have seen so far. I hope people will start recognizing that.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Six more things I like about 6</title>
      <link>http://localhost:1313/article/6-more-things-about-6/</link>
      <pubDate>Tue, 07 Feb 2017 08:26:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/6-more-things-about-6/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.theperlshop.com&#34;&gt;The Perl Shop&lt;/a&gt; recently sponsored me to speak about Perl 6 at a meeting of the &lt;a href=&#34;http://boston.pm.org&#34;&gt;Boston Perl mongers&lt;/a&gt;. They had backed the Kickstarter project for &lt;a href=&#34;https://www.learningperl6.com&#34;&gt;Learning Perl 6&lt;/a&gt;. As part of that, I&amp;rsquo;m giving talks to Perl mongers groups about what I like about the language. These aren&amp;rsquo;t necessarily the most exciting or advanced features or the newest computer science features. They are merely things that I like.&lt;/p&gt;

&lt;p&gt;Many of these features are scattered across the languages landscape, and I&amp;rsquo;ve long said that I&amp;rsquo;d gladly abandon Perl when I found a language I liked better. Now I&amp;rsquo;m getting some of the features I may have coveted in languages that are missing some of the stuff I still enjoy about Perl.&lt;/p&gt;

&lt;h3 id=&#34;rats&#34;&gt;Rats&lt;/h3&gt;

&lt;p&gt;Perl 6 can maintain precision as long as possible by keeping rational numbers as ratios instead of making them native floating points (although you can still do that too). This means that we don&amp;rsquo;t have to deal with the variety of problems that come with relying on the underlying storage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl5 -le &#39;print 0.3 - 0.2 - 0.1&#39;
-2.77555756156289e-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a little off, but we&amp;rsquo;ve come to accept that (for example, multiplying all money amounts so you only deal in integers). Perl 6 however, stores them exactly as long as it can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl6
To exit type &#39;exit&#39; or &#39;^D&#39;
&amp;gt; my $rat = 0.3
0.3
&amp;gt; $rat.numerator
3
&amp;gt; $rat.denominator
10
&amp;gt; 0.3 - 0.2 - 0.1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A repeating decimal is still a rational number, although Perl 6 doesn&amp;rsquo;t yet have a feature to put the overbar on the repeating part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;lt;1/3&amp;gt;
0.333333
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;soft-failures&#34;&gt;Soft Failures&lt;/h3&gt;

&lt;p&gt;Perl 6 has &lt;a href=&#34;https://docs.perl6.org/type/Failure&#34;&gt;Failure&lt;/a&gt; objects, which wrap an exception. Many things may return such an object when something goes wrong. A &lt;a href=&#34;https://docs.perl6.org/type/Failure&#34;&gt;Failure&lt;/a&gt; is always &lt;code&gt;False&lt;/code&gt; in Boolean context, but Perl 6 also marks it as handled when it&amp;rsquo;s checked like that. Otherwise, if I try to use that object as if everything succeeded, it immediately throws its exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open $file {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In unless: exception is {$fh.exception.^name}&amp;#34;&lt;/span&gt;
	}

CATCH {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught {.^name}: {.message}&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output shows that I handled the problem in the &lt;code&gt;unless&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In unless: exception is X::AdHoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare this with code that doesn&amp;rsquo;t check the result of the &lt;code&gt;open&lt;/code&gt; and keep going as if the filehandle is good:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open $file;

$fh&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines;

CATCH {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caught {.^name}: {.message}&amp;#34;&lt;/span&gt;;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the exception takes over and the &lt;code&gt;CATCH&lt;/code&gt; block handles it. There&amp;rsquo;s a strack trace that comes with that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Caught X::AdHoc: Failed to open file not-there: no such file or directory
Failed to open file not-there: no such file or directory
  in any  at ... CORE.setting.moarvm line 1
  in block &amp;lt;unit&amp;gt; at ...

Actually thrown at:
  in block &amp;lt;unit&amp;gt; at ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love that this lets me decide how to check the error. I&amp;rsquo;ve always thought that the various syntaxes for &lt;code&gt;try&lt;/code&gt; (in any language) bullied their ways into the language and took over the source code.&lt;/p&gt;

&lt;p&gt;And, I&amp;rsquo;m sufficiently besotted with this idea of object-oriented programming that I have a Perl 5 module that does a similar thing: &lt;a href=&#34;https://metacpan.org/pod/ReturnValue&#34;&gt;ReturnValue&lt;/a&gt;. I use that to return values where the caller can determine what happened by calling methods on the result.&lt;/p&gt;

&lt;h3 id=&#34;resumable-exceptions&#34;&gt;Resumable Exceptions&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s talk about exceptions. I haven&amp;rsquo;t liked the fake ones people tried to push on me in Perl 5. If I can&amp;rsquo;t actually handle it and continue the program, I don&amp;rsquo;t think it&amp;rsquo;s a proper exception. It&amp;rsquo;s just a different way to return a value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;CATCH {
	default {
		put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Problem with file: {.^name} --&amp;gt; {.message}&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resume
		}
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not-there&amp;#39;&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;-a-line ( $file ) {
	X::AdHoc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( :payload&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Oh &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; Mr Bill&lt;span style=&#34;color:#f92672&#34;&gt;!&amp;gt;&lt;/span&gt; )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;throw;
	say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hey, I can keep going!&amp;#34;&lt;/span&gt;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I see that &lt;code&gt;CATCH&lt;/code&gt; handled the exception, but then let the code in the subroutine continue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Problem with file: X::AdHoc --&amp;gt; Oh no Mr Bill!
Hey, I can keep going!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not every exception can resume, but I see a lot of promise in this ability.&lt;/p&gt;

&lt;h3 id=&#34;easier-interpolation&#34;&gt;Easier Interpolation&lt;/h3&gt;

&lt;p&gt;My estimation of a language is mostly based on how easy I can create new strings. Perl 5 was pretty good about that, but Perl 6 is even better.&lt;/p&gt;

&lt;p&gt;Scalars, arrays, and hashes (yes, hashes!) can interpolate directly, although you need to add the subscript characters for the latter two:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This one has a $scalar&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The array needs braces: @array[]&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The hash needs curlies: %hash{}&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better than that, though, is that I can interpolate anything by enclosing it in braces within the string. Perl 6 evaluates the code in the braces and replaces the block with the last evaluated expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There are { $scalar.elems } elements&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The object&amp;#39;s name is { $object.^name }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The sum is { 2 + 2 }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lowest is { @array.sort.[1] }&amp;#34;&lt;/span&gt;;
say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The lowest is { @array.min }&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could do this with &lt;code&gt;sprintf&lt;/code&gt;, and sometimes I think that&amp;rsquo;s more appropriate. But I&amp;rsquo;ve often played reference-dereference games in strings to do what I can now do by design. I really like this (and so will Ruby programmers, I think).&lt;/p&gt;

&lt;h3 id=&#34;fmt&#34;&gt;fmt&lt;/h3&gt;

&lt;p&gt;Have something in a scalar that you want to format in a different way? There&amp;rsquo;s a method for that. This isn&amp;rsquo;t one of the exciting new features because &lt;code&gt;printf&lt;/code&gt; has been around forever. Similar to the interpolation, this might seem like a small thing, put in the times I&amp;rsquo;ve used it I&amp;rsquo;ve been quite pleased despite the voice at the back of my head that says &amp;ldquo;It&amp;rsquo;s just &lt;code&gt;sprintf&lt;/code&gt; you idiot!&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; );
@buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map( { &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%02x&amp;#34;&lt;/span&gt; } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I forego the parens there and give the arguments to &lt;code&gt;.fmt&lt;/code&gt; by putting a colon after the method name. Since I didn&amp;rsquo;t specify an object this uses the topic (what you call &lt;code&gt;$_&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For some reason I really like this more than what everyone reading this article is thinking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map( { sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%02x&amp;#34;&lt;/span&gt;, $_ } )&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;lists-of-lists&#34;&gt;Lists of lists&lt;/h3&gt;

&lt;p&gt;Perl 6 has lists of lists (ever since the &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/14/day-15-2015-the-year-of-the-great-list-refactor/&#34;&gt;Great List Refactor&lt;/a&gt;). This will be a bit disconcerting to those use to the &amp;ldquo;always flat&amp;rdquo; lists of Perl 5, but I think you&amp;rsquo;ll get used to them. This is quite handy for keeping related values together.&lt;/p&gt;

&lt;p&gt;And, a list is an object, and as a single thingy you can store it in a scalar variable. It knows that it is a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $scalar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; );
&lt;span style=&#34;color:#75715e&#34;&gt;# my $scalar = 1, 2, 3;  # Nope!&lt;/span&gt;

put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scalar: $scalar&amp;#34;&lt;/span&gt;;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scalar: { $scalar.^name }&amp;#34;&lt;/span&gt;;

scalar: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
scalar: List&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can have literal lists of lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ( ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ), &lt;span style=&#34;color:#e6db74&#34;&gt;qw/a b/&lt;/span&gt; );

put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;elems: { @array.elems }&amp;#34;&lt;/span&gt;;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@array[]&amp;#34;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# the whole thing&lt;/span&gt;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@array[0]&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# the first thing&lt;/span&gt;
put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ @array[0].^name }&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; a b
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
List&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But here&amp;rsquo;s something even better. You can go the other way. I go from the flat list of this buffer (list of numbers representing octets in this case) to two-element lists that I can iterate over. This is quite handy for dealing with binary formats:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; Buf $buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	Buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt; );

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; $buf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotor(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $c {
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c is $c&amp;#34;&lt;/span&gt;;
	put &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word is &amp;#34;&lt;/span&gt;,
	( $c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] )
		&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fmt( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%02X&amp;#39;&lt;/span&gt; );
	}

c is &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;
word is DEAD
c is &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;239&lt;/span&gt;
word is BEEF&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s much more that I can write about lists of lists, but this article is long enough already. I&amp;rsquo;ll save some of that for later articles. You can see more of my Perl 6 stuff at &lt;a href=&#34;https://www.learningperl6.com/&#34;&gt;https://www.learningperl6.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get Perl 6 now</title>
      <link>http://localhost:1313/article/207/2015/12/31/How-to-get-Perl-6-now/</link>
      <pubDate>Thu, 31 Dec 2015 19:08:59 +0000</pubDate>
      
      <guid>http://localhost:1313/article/207/2015/12/31/How-to-get-Perl-6-now/</guid>
      <description>

&lt;p&gt;Great news, Perl 6 was &lt;a href=&#34;https://perl6advent.wordpress.com/2015/12/25/christmas-is-here/&#34;&gt;released&lt;/a&gt; on Christmas Day; finally us geeks got something we wanted for Christmas. Send the books back Grandma! (unless you got &lt;a href=&#34;http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review&#34;&gt;Modern Perl&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;installation-on-linux-osx&#34;&gt;Installation on Linux, OSX&lt;/h3&gt;

&lt;p&gt;On Linux and Mac the easiest way to get Perl 6 is with &lt;a href=&#34;https://github.com/tadzik/rakudobrew&#34;&gt;rakudobrew&lt;/a&gt;. You&amp;rsquo;ll need the typical software development tools like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;. On OSX Apple&amp;rsquo;s &lt;a href=&#34;https://developer.apple.com/opensource/&#34;&gt;Command Line Tools app&lt;/a&gt; provides most of these and is easy to install. On Linux they&amp;rsquo;re available via the package manager. Once you have the prerequisite tools installed, you can install rakudobrew via the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/tadzik/&lt;/span&gt;rakudobrew &lt;span style=&#34;color:#f92672&#34;&gt;~/.&lt;/span&gt;rakudobrew
$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.rakudobrew/&lt;/span&gt;bin:$PATH
$ rakudobrew build moar
$ rakudobrew build panda&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install &lt;code&gt;perl6&lt;/code&gt; and &lt;code&gt;panda&lt;/code&gt; the Perl 6 package manager.&lt;/p&gt;

&lt;h3 id=&#34;installation-on-windows&#34;&gt;Installation on Windows&lt;/h3&gt;

&lt;p&gt;On Windows it&amp;rsquo;s a different story. I was unable to get rakudobrew to work on Windows, which is a shame as it&amp;rsquo;s such a convenient tool. If you&amp;rsquo;re feeling adventurous, you can &lt;a href=&#34;http://perltricks.com/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013&#34;&gt;build your own Perl 6 with Visual Studio&lt;/a&gt;. Sinan Unur has &lt;a href=&#34;https://www.nu42.com/2015/12/perl6-rakudo-released.html&#34;&gt;blogged&lt;/a&gt; about building panda with the same toolset.&lt;/p&gt;

&lt;p&gt;Alternatively you can use the latest &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;Rakudo Star distribution&lt;/a&gt; which comes with a convenient &lt;code&gt;.msi&lt;/code&gt; installer. Unfortunately the most recent Rakudo Star distribution is from September, so you won&amp;rsquo;t benefit from the last 3 months of updates to Perl 6 (a new version should be available soon). If you&amp;rsquo;ve installed Rakudo Star, you&amp;rsquo;ll need to add the Perl 6 binaries to your path. You can do that using &lt;code&gt;cmd.exe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; SETX PATH &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%PATH%;C:\rakudo\bin&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now start a new &lt;code&gt;cmd.exe&lt;/code&gt; terminal, and you&amp;rsquo;ll be use Perl 6. Rakudo Star ships with Panda too, so you&amp;rsquo;ll be able to start installing Perl 6 modules right away.&lt;/p&gt;

&lt;h3 id=&#34;useful-perl-6-resources&#34;&gt;Useful Perl 6 resources&lt;/h3&gt;

&lt;p&gt;So you&amp;rsquo;ve got Perl 6 installed, now what? To keep up to date with Perl 6 developments, I read the &lt;a href=&#34;https://p6weekly.wordpress.com/&#34;&gt;Perl 6 Weekly&lt;/a&gt; blog. The &lt;a href=&#34;http://perlweekly.com/&#34;&gt;Perl Weekly&lt;/a&gt; newsletter also includes Perl 6 articles, so be sure to subscribe if you haven&amp;rsquo;t already. The official website &lt;a href=&#34;http://perl6.org/&#34;&gt;Perl6.org&lt;/a&gt; is a good reference for all things Perl 6 related. Wendy has posted a &lt;a href=&#34;https://wendyga.wordpress.com/2015/12/25/why-would-you-want-to-use-perl-6-some-answers/&#34;&gt;useful list&lt;/a&gt; of Perl 6 features.&lt;/p&gt;

&lt;p&gt;Here at PerlTricks.com, we&amp;rsquo;ve got several Perl 6 articles that may be of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;How to create a Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6&#34;&gt;Parsing Perl 5 Pod with Perl 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/136/2014/11/20/Get-started-with-Perl-6-one-liners&#34;&gt;Get started with Perl 6 One Liners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse&#34;&gt;How to run Perl 6 tests with prove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim&#34;&gt;Activate Perl 6 syntax highlighting in Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - Visual Studio article now includes instructions for VS2015. Added link to nu42.com. 2016-01-04&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing Perl 5 pod with Perl 6</title>
      <link>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</link>
      <pubDate>Thu, 30 Apr 2015 13:14:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/170/2015/4/30/Parsing-Perl-5-pod-with-Perl-6/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just finished developing a Perl 5 pod &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5&#34;&gt;parser&lt;/a&gt; written in Perl 6. Developing the grammar was surprisingly easy, which is a testament to Perl 6 as I&amp;rsquo;m no genius coder. With help from the folks at #perl6, I did learn some interesting things along the way, and wanted to share them. Plus, code!&lt;/p&gt;

&lt;p&gt;By the way, if you haven&amp;rsquo;t read my &lt;a href=&#34;http://perltricks.com/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6&#34;&gt;introduction&lt;/a&gt; to Perl 6 grammars, check it out first, and the rest of this article should make more sense.&lt;/p&gt;

&lt;h3 id=&#34;developing-the-grammar&#34;&gt;Developing the grammar&lt;/h3&gt;

&lt;p&gt;In Perl 6 a grammar is a special type of class for parsing text. The idea is to declare a series of regexes using the &lt;code&gt;token&lt;/code&gt; method, which are then used to parse input. For &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/Grammar.pm&#34;&gt;Pod::Perl5::Grammar&lt;/a&gt; I literally worked my way through &lt;a href=&#34;https://perldoc.perl.org/perlpod.html&#34;&gt;perlpod&lt;/a&gt;, the Perl 5 pod specification, writing tokens as I went.&lt;/p&gt;

&lt;p&gt;There were a few challenges. First, consider how would you define a regex for lists? In pod, lists can contain lists, so can a definition include itself? The answer is yes, a recursive definition is fine, as long as it doesn&amp;rsquo;t match a zero length string, which leads to an infinite loop. Here&amp;rsquo;s the definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token over_back { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over&amp;gt;&lt;/span&gt;
                    [
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_item&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;verbatim_paragraph&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;_for&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;begin_end&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;encoding&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;over_back&amp;gt;&lt;/span&gt;
                    ]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;back&amp;gt;&lt;/span&gt;
                  }

token over      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;over [&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[0..9]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ]? &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }
token _item     { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;item &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;
                    [
                        [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;  ]
                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [ &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;blank_line&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;? ]
                    ]
                  }
token back      { &lt;span style=&#34;color:#f92672&#34;&gt;^^\=&lt;/span&gt;back &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;n }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The token &lt;code&gt;over_back&lt;/code&gt; describes an entire list from start to finish. It basically says that a list must begin with an &lt;code&gt;=over&lt;/code&gt; and end with &lt;code&gt;=back&lt;/code&gt;, and can have a whole bunch of things in between, including another &lt;code&gt;over_back&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For simplicity&amp;rsquo;s sake, I tried to name the tokens the same as how they&amp;rsquo;re written in pod. In some cases this wasn&amp;rsquo;t possible, for instance &lt;code&gt;item&lt;/code&gt; causes a namespace clash with another method that the Grammar class inherits. So watch out for those cases, you&amp;rsquo;ll get weird errors (this is a &lt;a href=&#34;https://rt.perl.org/rt3//Public/Bug/Display.html?id=77350&#34;&gt;bug&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is one pattern I really love and used over and over in the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;[ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;?&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;before &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is useful when you have a pattern to capture, but if there&amp;rsquo;s no matching pattern ignore everything else. In this case, &lt;code&gt;pod_section&lt;/code&gt; is a token that defines a section of pod, but pod is often written inline with Perl code, which the grammar should ignore. So the second half of the definition uses a negative lookahead &lt;code&gt;?!before&lt;/code&gt; to check the next character is not a &lt;code&gt;pod_section&lt;/code&gt;, and uses a period &lt;code&gt;.&lt;/code&gt; to match everything else (including newlines). Both conditions are grouped in square brackets with an asterisk placed &lt;strong&gt;outside&lt;/strong&gt; the group in order to check one character at a time.&lt;/p&gt;

&lt;p&gt;The grammar can be used to parse standalone and inline pod. It will extract every pod section it finds into match object (basically a Perl data structure), ready for processing. It&amp;rsquo;s easy to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parsefile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/some.pod&amp;#34;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action classes&lt;/h3&gt;

&lt;p&gt;So far so cool, but we can do more. Action classes are regular Perl 6 classes that can be given to the grammar at parse time. They provide behavior (actions) for token matching events. Just name the methods in the action class the same as the token they should be executed on. I wrote a pod-to-HTML action &lt;a href=&#34;https://github.com/dnmfarrell/Pod-Perl5/blob/master/lib/Pod/Perl5/ToHTML.pm&#34;&gt;class&lt;/a&gt;. Here is the method for converting &lt;code&gt;=head1&lt;/code&gt; to HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time the grammar matches a head1 token, this method executes. It&amp;rsquo;s passed the regex capture variable &lt;code&gt;$/&lt;/code&gt;, which contains the head1 regex capture, from which it extracts the text string.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool fact: action classes are even easier to write than grammars. It would be trivial to write a pod to markdown converter using Pod::Perl5::Grammar, unless someone beats me to it (hint, hint). That said, I did encounter a few challenges along the way.&lt;/p&gt;

&lt;p&gt;Essentially for HTML conversion, each action class method can just extract the text from it&amp;rsquo;s matching token, reformat it as required, and print it out. This approach worked great until I encountered nested tokens like formatting codes, which sit within a paragraph of text. You don&amp;rsquo;t want to go from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i&amp;gt;this is in italics&amp;lt;/i&amp;gt;
&amp;lt;b&amp;gt;this is in bold&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;There are different ways to emphasize text, I&amp;lt;this is in italics&amp;gt; and  B&amp;lt;this is in bold&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can happen because the italics and bold token regexes match first. So to get around this issue, I used a buffer to store the HTML from the transformed sub-tokens, and then when a paragraph token is matched, it substitutes its own text with the contents of the buffer. The action class code for this looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method paragraph ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $original_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chomp;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; $pair &lt;span style=&#34;color:#75715e&#34;&gt;# reverse as we&amp;#39;re working outside in&lt;/span&gt;
  {
    $para_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $para_text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subst($pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key, {$pair&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value});
  }
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;{$para_text}&amp;lt;/p&amp;gt;\n&amp;#34;&lt;/span&gt;);
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;);
  }

method italic ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;i&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/i&amp;gt;&amp;#34;&lt;/span&gt;);
}

method bold ($/)
{
  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;, $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;{$/&amp;lt;multiline_text&amp;gt;.Str}&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to watch out for with action classes is regex handling. &lt;strong&gt;Every&lt;/strong&gt; action class example I&amp;rsquo;ve seen uses &lt;code&gt;$/&lt;/code&gt; in the method signature. This is a mistake, as guess what this does:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $/&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# silly example&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$/&amp;lt;singleline_text&amp;gt;.Str}\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Cannot assign to a readonly variable or a value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mushroom cloud-style boom. When &lt;code&gt;$/&lt;/code&gt; is passed to &lt;code&gt;head1&lt;/code&gt; it is read only. Executing &lt;strong&gt;any&lt;/strong&gt; regex in the same lexical scope will attempt to overwrite &lt;code&gt;$/&lt;/code&gt;. This bit me a few times and with help from #perl6, I ended up using this pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($/ is copy)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $/;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding &lt;code&gt;is copy&lt;/code&gt; to the signature creates a copy instead of a reference for &lt;code&gt;$/&lt;/code&gt;. I then copy the match variable into &lt;code&gt;$match&lt;/code&gt;, so that the following regex can clobber &lt;code&gt;$/&lt;/code&gt;. I *think* a better solution is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;method head1 ($match)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;~~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/foobar/&lt;/span&gt;
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_html(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;{$match&amp;lt;singleline_text&amp;gt;.Str}&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think it&amp;rsquo;s that simple, just don&amp;rsquo;t name the signature parameter &lt;code&gt;$/&lt;/code&gt; and all the headaches disappear. I haven&amp;rsquo;t tested this extensively&amp;hellip;&lt;/p&gt;

&lt;p&gt;To use an action class, just pass it to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::Grammar;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Pod::Perl5::ToHTML;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::ToHTML&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :$actions);

&lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pod::Perl5::Grammar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($pod, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example I used a named positional argument &lt;code&gt;:$actions&lt;/code&gt;. This &lt;strong&gt;must&lt;/strong&gt; be called actions to work. In the second example I named the argument like this: &lt;code&gt;:actions($actions)&lt;/code&gt;, in which case the action class object can be called whatever you want.&lt;/p&gt;

&lt;h3 id=&#34;improving-pod&#34;&gt;Improving pod&lt;/h3&gt;

&lt;p&gt;PerlTricks.com articles are written in HTML. Special snowflake style HTML with class names and &lt;code&gt;span&lt;/code&gt; tags. This is a pain for writers to use and a pain to edit. I&amp;rsquo;d love to use pod as the source - it would be easier for writers to use and faster for me to edit. That said, I&amp;rsquo;d like to extend pod with some useful features for blogging. For instance, you may be familiar with formatting codes like &lt;code&gt;B&amp;lt;...&amp;gt;&lt;/code&gt; for bold and the like. Well, what about &lt;code&gt;@&amp;lt; ... &amp;gt;&lt;/code&gt; for a Twitter references, or &lt;code&gt;M&amp;lt; ... &amp;gt;&lt;/code&gt; for &lt;a href=&#34;https://metacpan.org/&#34;&gt;MetaCPAN&lt;/a&gt; links?&lt;/p&gt;

&lt;p&gt;As Perl 6 grammars are classes, they can be inherited and overridden. So I can add my Twitter and Metacpan formatting codes to the grammar like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ll also need to override the &lt;code&gt;format_codes&lt;/code&gt; token to include the new tokens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;token format_codes  {
  [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;italic&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;bold&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;escape&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;singleline&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;index&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;zeroeffect&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;twitter|&amp;lt;metacpan&amp;gt;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s that easy. The new grammar will parse all pod, plus my two new formatting codes. Of course the action class Pod::Perl5::Pod can be extended and overridden too, and would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Pod::Perl5::ToHTML::PerlTricks is Pod::Perl5::ToHTML
{
  method twitter ($match)
  {
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_to_buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;,
      $match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;a href=&amp;#34;&lt;/span&gt;http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;twitter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&amp;gt;{$match&amp;lt;name&amp;gt;.Str}&amp;lt;/&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  method metacpan ($match)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    self.add_to_buffer(&amp;#39;paragraph&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      $match.Str =&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{$match&amp;lt;name&amp;gt;.Str}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{$match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;wait-there-s-more&#34;&gt;Wait, there&amp;rsquo;s more&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a cleaner way to manage groups of tokens, it&amp;rsquo;s called &lt;a href=&#34;http://design.perl6.org/S06.html#Routine_modifiers&#34;&gt;multi-dispatch&lt;/a&gt;. Instead of defining &lt;code&gt;format_codes&lt;/code&gt; as a list of alternative tokens it can match against, we declare a prototype method, and declare each formatting method as a &lt;code&gt;multi&lt;/code&gt; of the prototype. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;proto token format_codes  { &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; }
multi token format_codes:italic { I&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:bold   { B&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
multi token format_codes:code   { C&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;multiline_text&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt;  }
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when this grammar is inherited, there is no need to override &lt;code&gt;format_codes&lt;/code&gt;. Instead I can declare the new tokens as multis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Pod::Perl5::Grammar::PerlTricks is Pod::Perl5::Grammar
{
  token format_codes:twitter  { @&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
  token format_codes:metacpan { M&lt;span style=&#34;color:#f92672&#34;&gt;\&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&amp;gt;&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using multi-dispatch also has the modest benefit of simplifying the data extraction path when working with a match object. For instance, these code extracts the link section from the 3rd paragraph of a pod block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# regular version&lt;/span&gt;
is $match&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;pod_section&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;paragraph&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;text&amp;gt;&amp;lt;format_codes&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str &lt;span style=&#34;color:#75715e&#34;&gt;# multi dispatch equivalent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first example, the format token name &lt;code&gt;link&lt;/code&gt; is required. But with multi-dispatch, we can remove that, as shown in the second example.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s what I learned; overall writing a pod parser in Perl 6 was straightforward. If you&amp;rsquo;re programming in Perl 6 and have questions, I&amp;rsquo;d highly recommend the &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt; irc channel on freenode, the people there were friendly and responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;Multi-dispatch example added. Thanks to Jonathan Scott Duff for providing the multi-dispatch explanation and code. 2015-05-01&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a grammar in Perl 6</title>
      <link>http://localhost:1313/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6/</link>
      <pubDate>Tue, 13 Jan 2015 15:45:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/144/2015/1/13/How-to-create-a-grammar-in-Perl-6/</guid>
      <description>

&lt;p&gt;In programming, a grammar is a set of rules for parsing text. They&amp;rsquo;re incredibly useful, for instance you can use a grammar to check if a text string conforms to a specific standard or not. Perl 6 has native support for grammars - they&amp;rsquo;re so easy to write that once you start using them, you&amp;rsquo;ll find yourself using them everywhere.&lt;/p&gt;

&lt;p&gt;Recently I&amp;rsquo;ve been working on Module::Minter, a simple app to create a base skeleton structure for a new Perl 6 module. I needed a way to check that the proposed module name would conform to Perl 6&amp;rsquo;s naming conventions.&lt;/p&gt;

&lt;p&gt;Module names can be described as identifiers separated by 2 colons, &lt;a href=&#34;https://github.com/labster/perl6-File-Compare/&#34;&gt;File::Compare&lt;/a&gt; for example*. An identifier must begin with an alpha character (a-z) or an underscore, followed by zero or more alphanumeric characters. So far so good, but it&amp;rsquo;s not that simple; some module names only have a single identifier and no colons like &lt;a href=&#34;https://github.com/tadzik/Bailador/&#34;&gt;Bailador&lt;/a&gt; whilst other modules are more of a mouthful like &lt;a href=&#34;https://github.com/tony-o/perl6-http-server-async-plugins-router-simple/&#34;&gt;HTTP::Server::Async::Plugins::Router::Simple&lt;/a&gt;. This sounds like a job for a grammar!&lt;/p&gt;

&lt;h3 id=&#34;defining-the-grammar&#34;&gt;Defining the grammar&lt;/h3&gt;

&lt;p&gt;Perl 6 Grammars are built from regexes. I need two regexes: one for matching identifiers and one for matching the double colon separators. For the identifier regex, I&amp;rsquo;ll use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# begins with letter or underscore&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# zero or more alpanumeric&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember we&amp;rsquo;re using Perl 6 regexes, so things might look a little different if you&amp;rsquo;re used to Perl 5 style regexes. A character class is defined by &lt;code&gt;&amp;lt;[ ... ]&amp;gt;&lt;/code&gt; and ranges are defined using the range operator &lt;code&gt;..&lt;/code&gt; instead of a hyphen. This regex matches any leading letter or underscore followed by zero or more alphanumeric characters. Matching two colons is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grammars are defined using the &lt;code&gt;grammar&lt;/code&gt; keyword, followed by the name of the grammar. I&amp;rsquo;m going to call this grammar &lt;code&gt;Legal::Module::Name&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can add the regexes as tokens to the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  token identifier
  {
    &lt;span style=&#34;color:#75715e&#34;&gt;# leading alpha or _ only&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;
  } 
  token separator
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every Grammar needs a token called &lt;code&gt;TOP&lt;/code&gt;, which is the starting point for the grammar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;grammar Legal::Module::Name
{
  token TOP
  { &lt;span style=&#34;color:#75715e&#34;&gt;# identifier followed by zero or more separator identifier pairs&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;identifier&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;separator&amp;gt;&amp;lt;identifier&amp;gt;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt; $
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
  token identifier
  {
    &lt;span style=&#34;color:#75715e&#34;&gt;# leading alpha or _ only&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z_]&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;[A..Za..z0..9]&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..*&lt;/span&gt;
  } 
  token separator
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# colon pairs&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;TOP&lt;/code&gt; token defines a valid module name as one that begins with an identifier token, followed by zero or more separator and identifier token pairs. This is nice to write and maintain - let&amp;rsquo;s say I wanted to change the rules for separators to include hyphens (&amp;lsquo;-&amp;rsquo;), I could just update the separator token regex and the effect would bubble up to the &lt;code&gt;TOP&lt;/code&gt; token definition.&lt;/p&gt;

&lt;h3 id=&#34;using-the-grammar&#34;&gt;Using the grammar&lt;/h3&gt;

&lt;p&gt;Now I&amp;rsquo;ve got the grammar, it&amp;rsquo;s time to put it into action. The &lt;code&gt;parse&lt;/code&gt; method runs the grammar on a string and if successful, returns a match object. This code parses the &lt;code&gt;$proposed_module_name&lt;/code&gt; string, and either prints out the match object or an error message if the propose module name is invalid.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $proposed_module_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Super::New::Module&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Legal::Module::Name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($proposed_module_name);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $match_obj
{
    say $match_obj;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
{
    say &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid module name!&amp;#39;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code prints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Super::New::Module&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Super&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 separator &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;New&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 separator &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;
 identifier &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｢&lt;/span&gt;Module&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;｣&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;extracting-content-from-the-match-object&#34;&gt;Extracting content from the match object&lt;/h3&gt;

&lt;p&gt;Rather than dumping the contents of the match object to the command line, we can extract matched tokens from the match object. This uses the same quoting syntax often used elsewhere in Perl 6 (e.g. named regexes and hash keys):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# Super&lt;/span&gt;
say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# New&lt;/span&gt;
say $match_obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Str; &lt;span style=&#34;color:#75715e&#34;&gt;# Module&lt;/span&gt;

say $match_obj; &lt;span style=&#34;color:#75715e&#34;&gt;# all 3 captures&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;action-classes&#34;&gt;Action Classes&lt;/h3&gt;

&lt;p&gt;So far the grammar can detect if a proposed module name is legal or not, and produces a match object from which it&amp;rsquo;s easy to extract the components of the module name. Perl 6 also let&amp;rsquo;s you add an action class which defines extra behaviour for matched tokens. I&amp;rsquo;d like to add a warning when a module name has too many identifiers, in other words, it&amp;rsquo;s a legal module name, but the user might want to shorten it. First I define the action class itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;class Module::Name::Actions
{
  method TOP($/)
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;identifier&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;.&lt;/span&gt;elems &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    {
      warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Module name has a lot of identifiers, consider simplifying the name&amp;#39;&lt;/span&gt;;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see this is an ordinary Perl 6 class definition. I&amp;rsquo;ve added one method called &lt;code&gt;TOP&lt;/code&gt; which matches the first token in the grammar. I use the named regex syntax to count all identifier matches, and if there are more than 5, fire a warning. This won&amp;rsquo;t stop the code from running, but it might cause the user to reconsider their choice of module name.&lt;/p&gt;

&lt;p&gt;I then initialize the action class and pass it as an argument in to &lt;code&gt;parse&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $actions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Module::Name::Actions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $match_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Legal&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Module&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse($proposed_module_name, :actions($actions));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The grammar will call the matching action class method every time the token is encountered during parsing. In this case that&amp;rsquo;s once per parse, but we could add an additional length length on identifier tokens for example. Check out the &lt;a href=&#34;https://github.com/sillymoose/Module-Minter/blob/master/lib/Module/Minter.pm6&#34;&gt;Module::Minter&lt;/a&gt; source to see how to incorporate a grammar into a module.&lt;/p&gt;

&lt;h3 id=&#34;grammars-in-perl-5&#34;&gt;Grammars in Perl 5&lt;/h3&gt;

&lt;p&gt;You can also write grammars in Perl 5. For a solution similar to the Perl 6 implementation, have a look at &lt;a href=&#34;https://metacpan.org/pod/Regexp::Grammars&#34;&gt;Regexp::Grammars&lt;/a&gt; or Ingy Döt Net&amp;rsquo;s &lt;a href=&#34;https://metacpan.org/pod/Pegex&#34;&gt;Pegex&lt;/a&gt; distribution. For a different approach, check out chapter 1 of &lt;a href=&#34;http://www.masteringperl.org/&#34;&gt;Mastering Perl&lt;/a&gt; by brian d foy, which contains an example JSON grammar.&lt;/p&gt;

&lt;p&gt;* This isn&amp;rsquo;t strictly correct - the entire name (colons included) is the identifier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;added link to Regexp::Grammars. 2015-01-13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get started with Perl 6 one liners</title>
      <link>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</link>
      <pubDate>Thu, 20 Nov 2014 14:04:56 +0000</pubDate>
      
      <guid>http://localhost:1313/article/136/2014/11/20/Get-started-with-Perl-6-one-liners/</guid>
      <description>

&lt;p&gt;One thing that sets Perl apart from other languages is the ability to write small programs in a single line of code, known as a &amp;ldquo;one liner&amp;rdquo;. It&amp;rsquo;s often faster to type a program directly into the terminal than to write a throwaway script. And one liners are powerful too; they&amp;rsquo;re complete Perl programs that can load external libraries but also integrate into the terminal. You can pipe data in or out of a one liner.&lt;/p&gt;

&lt;p&gt;Like its predecessor, Perl 6 supports one liners. And in the same way Perl 6 cleaned up Perl 5&amp;rsquo;s warts elsewhere, the one liner syntax is also better. It&amp;rsquo;s cleaner with fewer special variables and options to memorize. This article aims to get you up-and-running with Perl 6 one liners.&lt;/p&gt;

&lt;h3 id=&#34;the-basics&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;To get started with one liners, all you really need to understand is the &lt;code&gt;-e&lt;/code&gt; option. This tells Perl to execute what follows as a program. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl6 -e &#39;say &amp;quot;Hello, World!&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s step through this code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;perl6&lt;/code&gt; invokes the Perl 6 program&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; tells Perl 6 to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;say &amp;quot;Hello, World!&amp;quot;&#39;&lt;/code&gt; is the program. Every program must be surrounded in single quotes (except on Windows, see (&lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners#converting-for-windows&#34;&gt;converting for Windows&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To run a one-liner, just type it into the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say &amp;#34;Hello, World!&amp;#34;&amp;#39;&lt;/span&gt;
Hello, World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;file-processing&#34;&gt;File processing&lt;/h3&gt;

&lt;p&gt;If you want to load a file, just add the path to the file after the program code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program prints every line in &lt;code&gt;/path/to/file.txt&lt;/code&gt;. You may know that &lt;code&gt;$_&lt;/code&gt; is the default variable, which in this case is the current line being looped through. &lt;code&gt;lines&lt;/code&gt; is a list that is automatically created for you whenever you pass a filepath to a one-liner. Now let&amp;rsquo;s re-write that one liner, step-by-step. These one liners are all equivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { say $_ }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { $_.say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for (lines) { .say }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for (lines)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.say for lines&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like &lt;code&gt;$_&lt;/code&gt; is the default variable, methods called on the default variable can omit the variable name. They become default methods. So &lt;code&gt;$_.say&lt;/code&gt; becomes &lt;code&gt;.say&lt;/code&gt;. This brevity pays off with one liners - it&amp;rsquo;s less typing!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; option changes the behavior of the program: it executes the code once for every line of the file. To uppercase and print every line of &lt;code&gt;/path/to/file.txt&lt;/code&gt; you can type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.uc.say&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option is just like &lt;code&gt;-n&lt;/code&gt; except that it will automatically print &lt;code&gt;$_&lt;/code&gt;. This means that another way we could uppercase a file would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$_ = $_.uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or by applying a shortcut, this does the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.=uc&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/path/&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options are really useful and often spare the programmer from extra typing.&lt;/p&gt;

&lt;h3 id=&#34;load-modules&#34;&gt;Load modules&lt;/h3&gt;

&lt;p&gt;The final thing you should know is how to load a module. This is really powerful as you can extend Perl 6&amp;rsquo;s capabilities by importing external libraries. The &lt;code&gt;-M&lt;/code&gt; switch stands for load module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code &lt;code&gt;-M URI::Encode&lt;/code&gt; loads the URI::Encode module, which exports the &lt;code&gt;encode_uri&lt;/code&gt; subroutine. It prints:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;%2F10%20ways%20to%20crush%20it%20with%20Perl%206&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if you have a module that is not installed in a standard location? In this case using &lt;code&gt;-M&lt;/code&gt; alone won&amp;rsquo;t work, as Perl won&amp;rsquo;t find the module. For these scenarios, just pass use the &lt;code&gt;-I&lt;/code&gt; switch to include the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I lib &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M URI::Encode &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;say encode_uri(&amp;#34;www.example.com/10 ways to crush it with Perl 6&amp;#34;)&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Perl 6 will search for URI::Encode in &lt;code&gt;lib&lt;/code&gt; as well as the standard install locations.&lt;/p&gt;

&lt;p&gt;Finally, if you want a summary of all of these options, just use the &lt;code&gt;-h&lt;/code&gt; option:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;    With &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; arguments, enters a REPL&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; With a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[programfile]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-e&amp;#34;&lt;/span&gt; option, compiles the given program &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; by default also executes the compiled code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
 
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c                   check syntax only (runs &lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHECK&lt;/span&gt; blocks)
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc                extract documentation &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; it as text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e program           one line of program
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;h, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help           display this help text
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n                   run program once &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each line of input
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p                   same as &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n, but also &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $_ at the end of lines
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I path              adds the path to the module search path
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;M module            loads the module prior to running the program
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[stage]     specify compilation stage to emit
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;optimize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[level]   &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; the given level of optimization (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;trace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[flags]  enable trace flags, see &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parrot --help-debug&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[mode]    specify string encoding mode
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[name]  specify name of output file
    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version        display version information
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;stagestats         display time spent in the compilation stages
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;exception       display a low level backtrace on errors
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; profile information to standard error
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;doc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[module]       Use Pod::To::[module] to render inline documentation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
     
    Note that only boolean single&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;letter options may be bundled&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    Output from &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;profile can be visualized by kcachegrind&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

    To modify the include path, you can set the PERL6LIB environment variable:

    PERL6LIB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt; perl6 example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl

    For more information, see the perl6(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) man page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article was adapted from my open source &lt;a href=&#34;https://github.com/sillymoose/Perl6-One-Liners&#34;&gt;book&lt;/a&gt;, which has lots of example Perl 6 one liners, many of which were contributed by the Perl 6 community. If you&amp;rsquo;re interested in learning more Perl 6, I&amp;rsquo;d recommend visiting the official &lt;a href=&#34;http://perl6.org/&#34;&gt;website&lt;/a&gt;, which has links to the IRC channel and official documentation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Perl 6 with Visual Studio 2013</title>
      <link>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</link>
      <pubDate>Tue, 18 Nov 2014 13:34:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/135/2014/11/18/Building-Perl-6-with-Visual-Studio-2013/</guid>
      <description>

&lt;p&gt;I think the last time I tried playing around with anything related to Perl 6 was at least two years ago. Recently, &lt;a href=&#34;https://fosdem.org/2015/schedule/event/get_ready_to_party/&#34;&gt;an understated entry&lt;/a&gt; in Fosdem &amp;lsquo;15 schedule caught the Perl community&amp;rsquo;s attention:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The last pieces are finally falling into place. After years of design and implementation, 2015 will be the year that Perl 6 officially launches for production use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since then, Microsoft made &lt;a href=&#34;http://blog.nu42.com/2014/11/64-bit-perl-5201-with-visual-studio.html&#34;&gt;Visual Studio 2013 freely available&lt;/a&gt; for individuals and small teams. Up to this point, I had been using the compiler that comes with Windows SDK 7.1 with decent results, but, of course, couldn&amp;rsquo;t resist the temptation to build Perl 5.20.1 with the new compiler.&lt;/p&gt;

&lt;p&gt;This was followed by an encouraging question from &lt;a href=&#34;http://www.reddit.com/r/perl/comments/2m3t6s/%CE%BD42_64bit_perl_5201_with_visual_studio_2013/cm1iqnb&#34;&gt;David Farrell&lt;/a&gt;: &amp;ldquo;Have you thought about compiling Rakudo?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well, I hadn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;I had been anticipating too many headaches from not using *nix tools, but I decided to give it a shot. Perl 6 really couldn&amp;rsquo;t be ready enough that I could just get the source and build it, could it?&lt;/p&gt;

&lt;p&gt;I started with Rakudo Star - a Perl 6 distribution that bundles some useful modules and a package manager. I downloaded &lt;a href=&#34;http://rakudo.org/downloads/star/&#34;&gt;rakudo-star-2014.09.tar.gz&lt;/a&gt;, extracted it and ran the configure script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;C:&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;Src&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configures Perl 6 to use &lt;a href=&#34;http://moarvm.com/&#34;&gt;MoarVM&lt;/a&gt;, one of several virtual machines that Perl 6 can be built for. From that point on, it was just a matter of following a few prompts and soon I had a &lt;code&gt;perl6&lt;/code&gt; that was churning through the specification tests.&lt;/p&gt;

&lt;p&gt;Those did take a while. In the end there were about a dozen test failures which represent a tiny fraction of the total number of tests.&lt;/p&gt;

&lt;h3 id=&#34;compiling-rakudo-from-source&#34;&gt;Compiling Rakudo from source&lt;/h3&gt;

&lt;p&gt;Using the two months old Rakudo Star distribution left me wanting more. So I headed over to &lt;a href=&#34;https://github.com/rakudo/rakudo/&#34;&gt;Rakudo&amp;rsquo;s GitHub repository&lt;/a&gt; and proceeded to checkout and build the default branch.&lt;/p&gt;

&lt;p&gt;If you want to build Rakudo from source you will need &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; for this to work. There are several options available, including &lt;a href=&#34;https://windows.github.com/&#34;&gt;GitHub Windows&lt;/a&gt; and &lt;a href=&#34;http://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;. I prefer to use &lt;a href=&#34;https://www.cygwin.com/&#34;&gt;Cygwin&lt;/a&gt; versions of *nixy utilities by adding Cygwin&amp;rsquo;s executable locations &lt;em&gt;last&lt;/em&gt; in my &lt;code&gt;%PATH%&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a version of Git installed, these are the steps to follow:&lt;/p&gt;

&lt;p&gt;Open a &amp;ldquo;VS2013 x64 Native Tools Command Prompt&amp;rdquo;. You can find the shortcuts under &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\Shortcuts&lt;/code&gt; (with Visual Studio 2015, the shortcut is under: &lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Visual Studio 2015\Visual Studio Tools\Windows Desktop Command Prompts&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Run the following commands to get the Rakudo source and build it for MoarVM:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; git clone https:&lt;span style=&#34;color:#e6db74&#34;&gt;//gi&lt;/span&gt;thub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/rakudo/&lt;/span&gt;rakudo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cd rakudo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl Configure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;gen&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;nqp &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;backends&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;moar &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;C:&lt;span style=&#34;color:#e6db74&#34;&gt;/opt/&lt;/span&gt;Perl6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N.B. Make sure this is a native Windows &lt;code&gt;perl&lt;/code&gt;, not a Cygwin version in case you have those on the path. If you want to be absolutely certain, specify the full path. E.g., in my case, &lt;code&gt;C:\opt\perl-5.20.1\bin\perl Configure.pl ...&lt;/code&gt;. You may also have to adjust the &lt;code&gt;--prefix&lt;/code&gt; path to suit your system.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;Configure.pl&lt;/code&gt; will pull in the rest of the components necessary to build Rakudo. The rest is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake test
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake spectest
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nmake install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run spectest only if you are really patient or curious. When those tests were done, I had seven spectest failures. I didn&amp;rsquo;t care much about those at this point. My purpose was to have a &lt;code&gt;perl6&lt;/code&gt; working well enough to let me try, (for the first time ever!), some Perl 6 examples.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;Perl6\bin&lt;/code&gt; path to your user path. If everything worked as smoothly as it did for me, try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v
This is perl6 version &lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gf8f6feb built on MoarVM version
&lt;span style=&#34;color:#ae81ff&#34;&gt;2014.10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g05b25a6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just for fun:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; perl6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Hello World!&amp;#39;.say&amp;#34;&lt;/span&gt;
Hello World&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;installing-perl-6-modules&#34;&gt;Installing Perl 6 Modules&lt;/h3&gt;

&lt;p&gt;What is Perl without the ability to exploit other people&amp;rsquo;s hard work for your gain?&lt;/p&gt;

&lt;p&gt;Perl 6, just like Perl 5, has a module system. You can find contributed modules at &lt;a href=&#34;http://modules.perl6.org/&#34;&gt;modules.perl6.org&lt;/a&gt;, and install them using &lt;a href=&#34;https://github.com/tadzik/panda/&#34;&gt;panda&lt;/a&gt;. Unfortunately bootstrapping panda didn&amp;rsquo;t work for me due to &lt;a href=&#34;https://github.com/tadzik/File-Find/blob/master/t/01-file-find.t&#34;&gt;test failures with File::Find&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am not sure if these indicate problems with the underlying library, or problems with the way tests are written. I suspect the latter, but that will have to wait. In the mean time, I will &lt;a href=&#34;http://perl6.org/documentation/&#34;&gt;explore the basic language&lt;/a&gt; to get a better feel for Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; - added VS2015 instructions. 2016-01-04&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Moritz Lenz</title>
      <link>http://localhost:1313/pub/2010/09/people-of-perl-6-moritz-lenz.html/</link>
      <pubDate>Mon, 13 Sep 2010 17:04:35 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/09/people-of-perl-6-moritz-lenz.html/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://perlgeek.de/&#34;&gt;Moritz Lenz&lt;/a&gt; is a contributor to Perl 6 and &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt;. You may know him as the writer of the popular &lt;a href=&#34;http://perlgeek.de/blog-en/perl-6/&#34;&gt;Perlgeek.de Perl 6 blog&lt;/a&gt; or a chief wrangler of the Perl 6 test suite. Here are his own words on Perl 6 and Rakudo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a physicist by education and profession. Programming is my hobby, and occasionally I earn a small bit of money with it. I started programming at the age of 15 or so, and was very impressed by Perl 5&amp;rsquo;s expressiveness when I eventually learned about Perl.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was most fascinated by the community, and found it such a friendly and open place that I stayed. I also find it a technically very interesting project. So it&amp;rsquo;s a very nice hobby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I joined the #perl6 IRC channel in February 2007 to tell the people about a broken link on a website; I got a commit bit and stayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I began with the test suite, which is still my largest area of expertise. I also contributed to Rakudo, documentation efforts, a book, various Perl 6 modules and finally I blog about Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The regexes and grammars. Also Perl 6 is designed to be extensible, which manifests in many features; designing for extensions and grows is something that more programming languages should and will embrace&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The openness. Basically everyone can get write access to the synopsis, and improve what they want to. So far we [have] had no single case of vandalism.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some through a document describing the differences between Perl 5 and Perl 6, some through reading tests and the specification, and much by following the discussions on the mailings list and IRC channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I generally point novices to &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;, which contains pointers to multiple resources. For Perl 5 programmers I wrote a series of blog posts documenting &lt;a href=&#34;http://perlgeek.de/blog-en/perl-5-to-6/&#34;&gt;differences to Perl 6&lt;/a&gt;, for programmers of other languages a book is being written. There are already some chapters online, and we are always keen on feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You take a language designer who has experience with such a language; you let him go crazy, try to implement what he comes up with, and then negotiate compromises between what he envisions and what can be done. You make the language mutable and design it for growth: the syntax can be modified with macros and grammar changes, the object system can be extended by the meta object protocol and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, &amp;ldquo;Perlish&amp;rdquo; means to work towards human intuition, not against it. A feature should do what the user expects, instead of sticking to the smallest possible set of rules to deduce the behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Perl 6 it is much easier to do proper object orientation than in Perl 5: You just use the &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; keywords; you get a constructor for free, you have syntactic sugar for attribute defaults. So you need to understand less of the object system to work with it, and you need less boilerplate code. Also working with references is much easier. All builtins are available as methods, and can be called directly without any dereferencing, so most cases of explicit dereferencing can go away. Parsing is often considered a hard task, but with Perl 6 grammars it is a piece of cake.&lt;/p&gt;

&lt;p&gt;With representation polymorphism it will be possible to write an object-relation matter for a database without any changes to the objects themselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature are you most awaiting before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rakudo needs to become faster and less memory hungry; apart from that it is mostly missing IO and modules, like database access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An infrastructure for deploying and installing modules; there are also some seemingly small features which would make a huge difference, like reliable line numbers in error messages (&lt;em&gt;editor&amp;rsquo;s note: recent changes to Rakudo after the interview took place have improved this&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after Rakudo Star?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hopefully the release of our &lt;a href=&#34;http://github.com/perl6/book&#34;&gt;Perl 6 book&lt;/a&gt;; then the next monthly release, and after that another one. Development will go on, we just hope to increase public interest in Rakudo and Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Concurrency and object pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I read the perl6-language mailing list, where all changes are sent to as diffs, and all major changes are discussed. Most of the time there is also a discussion on our IRC channel, which usually gives more background informations on the reasoning behind the changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many things to do, and not all of them are directly related to programming. The obvious things are helping to write a compiler, tests, documentation and books. Other important tasks are related to the infrastructure: keep the websites up to date, administer the servers and services. Then we need marketing, funding, conferences and hackathons, designers and people who just spread the word. Most importantly we need users and module authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some people think that Perl 6 is killing Perl 5. Fact is that development of both languages is mostly independent these days. Other people think that it&amp;rsquo;s hopeless because it&amp;rsquo;s been 10 years in the making, and there is still no version 1.0 (or 6.0) released. They don&amp;rsquo;t realize that the difference between Perl 5 and Perl 6 is much larger than a difference of 1 in the version number suggests—they should think of Perl 6 as Perl 12 or so, and ask how much time you should allocate for 7 major versions in one—probably much more than 10 years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Projects that encourage contributions from women.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Carl Mäsak</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</link>
      <pubDate>Tue, 31 Aug 2010 06:00:01 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-carl-masak.html/</guid>
      <description>&lt;p&gt;Carl Mäsak is a developer of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt; and arguably the most dedicated bug wrangler. He&amp;rsquo;s contributed to more bug reports than anyone else. If you find that Rakudo does not do as you expect, you&amp;rsquo;ll likely talk to him on #perl6 for help triaging and categorizing your bug.&lt;/p&gt;

&lt;p&gt;In his own words, here&amp;rsquo;s how he&amp;rsquo;s helped make Perl 6 real.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent my teens learning programming by writing hundreds of small graphical games in BASIC. A combination of university studies and employment has given me a more solid foundation in programming, but I&amp;rsquo;m still catching up on the theory in many places.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helping bring it from the world of ideas into the world of implementations. As part of that, helping build up all the things around the implementations: libraries, tooling, documentation, culture. Making Perl 6 practically usable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got pulled in during the early Pugs days in 2005, but only staying on the outskirts of the community. I saw with regret how the Pugs development slowed and stopped during 2007, and with growing excitement how the Rakudo development got going in 2008. My real entrance as a contributor was that summer, when I secretly co-wrote &lt;a href=&#34;http://november-wiki.org/&#34;&gt;a wiki engine on top of Rakudo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A wiki engine (November), a 3-d connection game (&lt;a href=&#34;http://github.com/masak/druid/&#34;&gt;Druid&lt;/a&gt;), a Perl 6 project installer (&lt;a href=&#34;http://github.com/masak/proto/&#34;&gt;proto&lt;/a&gt;), a set of web development modules (&lt;a href=&#34;http://github.com/masak/web/&#34;&gt;Web.pm&lt;/a&gt;), a grammar engine (&lt;a href=&#34;http://github.com/masak/gge/&#34;&gt;GGE&lt;/a&gt;), and a dozen smaller modules and projects.&lt;/p&gt;

&lt;p&gt;I also occasionally contribute commits to Rakudo, to the Perl 6 specification, and I regularly blog about the progress and culture of Perl 6. My biggest single contribution is probably submitting hundreds of Rakudo bugs that I or others have found in the course of using Rakudo Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just remember being awed by the visionary tone and promise of the Apocalypses as they were rolled out. I no longer have any memory of like one particular feature more than the others. Since I program more in Perl 6 than in any other language nowadays, I tend to take them for granted. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think the new regex/grammar features will be so attractive that other languages won&amp;rsquo;t be able to keep their grubby hands off them. Of course, they also won&amp;rsquo;t get the pervasiveness of regexes and grammars just by tacking them onto an existing language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Primarily the extremely low amounts of vandalism, considering that hundreds of people have write access to the documents which specify the language itself. Accidental damage is also often quickly corrected, and more subtle errors get discovered and corrected in a wiki-like manner in the long term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also gained a new respect for what a &amp;ldquo;holistic&amp;rdquo; process the design of a language such as Perl 6 can be sometimes. Whether some feature turns out to be a good idea is determined by dozens of minute interactions in the spec, not all of them &amp;ldquo;local&amp;rdquo;, and some of them outright emergent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hard way. :-) By trying to express every new thought I have and seeing what fails: Perl 6, Rakudo, or my thought. I&amp;rsquo;m still learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Come to &lt;a href=&#34;http://perl6.org/community/irc&#34;&gt;#perl6&lt;/a&gt;. Familiarize yourself with &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt;. Get a pet project. Experiment. Have fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not qualified to fully answer that. The one piece of the puzzle I do have is that some pieces of software out there are stale and dead, whereas others are limber, extensible and moving. It&amp;rsquo;s important to design for the eventuality that the user of the language knows best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A number of small, sometimes contradictory criteria. It gets the job done. It&amp;rsquo;s down-to-earth rather than abstraction-laden. It&amp;rsquo;s practical rather than orthogonal. It&amp;rsquo;s often consistent in strange and unexpected ways. It favours you rather than the compiler implementor. It goes an extra mile to be user friendly rather than cryptic. It doesn&amp;rsquo;t oversimplify. It encapsulates some linguistic notion. It scales with your needs. It&amp;rsquo;s as much about language culture as it is about language implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sub/method signatures, the type system, grammars, extending the language, the metamodel&amp;hellip; all of these make things that were possible but tricky or ugly before downright easy or beautiful. Perl 5 can do a whole lot of the above things using modules, but with Perl 6 you get them out-of-the-box, and fully integrated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most await before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to more speed and stability in the existing implementations, mostly in Rakudo. I think excellent database and web support will create great changes in the way Perl 6 is used and presented.&lt;/p&gt;

&lt;p&gt;As for actual features, I&amp;rsquo;m excited that &lt;a href=&#34;http://perlcabal.org/syn/S09.html&#34;&gt;Synopsis 9&lt;/a&gt; might be mostly implemented this year—it contains a lot of exciting syntactic sugar.&lt;/p&gt;

&lt;p&gt;Also very much looking forward to playing with macros—I&amp;rsquo;ve been waiting five years for them now! :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m delighted that what drives Rakudo development and makes it efficient is the fact that the group of people organized around it are able to communicate their needs and abilities, able to delegate as well as do large chunks of work in isolation as called for by the situation. I&amp;rsquo;m thinking of Patrick when I say that, but I see those traits in others as well.&lt;/p&gt;

&lt;p&gt;It also doesn&amp;rsquo;t hurt that those of us involved in development form an increasingly knit-together group of people who enjoy each other&amp;rsquo;s company, not only on IRC but away from the keyboard as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the time before it gets the obvious the-more-the-better features— stability and speed—what Rakudo needs most is people who are brave enough to deploy it in new and interesting situations. It is still the case that when we try new things with Rakudo, we discover new bugs and corner cases, and as a result the whole development process benefits. So we need people who want to break new ground.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you mean the name, there&amp;rsquo;s no consensus yet. Suggestions welcome. All we agree on is that Rakudo Nova might not fly, Rakudo Neutron Star sounds a bit heavy, and Rakudo Black Hole would kinda suck.&lt;/p&gt;

&lt;p&gt;As for what features come next after Rakudo Star, I think an important part of the development after the Rakudo Star release will be to get feedback from people who use it, in order to know better what to focus on next. I know the core devs have some ideas, but there&amp;rsquo;s also room for course corrections. Whether the next distribution release will be after half a year, a full year, or some other timespan, depends a lot on that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A future version of Perl 6 the specification? The mind boggles. I think I don&amp;rsquo;t have any further demands on the specification than what we already have in there. I&amp;rsquo;m fully occupied trying to think up ways to abuse the features from the current spec as they come online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People seem to agree that the #perl6 channel on freenode is a generally friendly place. It&amp;rsquo;s at least partly the result of conscious effort. On the &lt;a href=&#34;http://dev.perl.org/perl6/lists/&#34;&gt;perl6-* emailing lists&lt;/a&gt; you will at times see the most informative and friendly RTFM emails you&amp;rsquo;ve ever read.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s still an open question for me is how these community features will scale, as the ratio of newbies to regulars skyrockets, as the frequently asked questions become more frequent, and as Perl 6 enters an &amp;ldquo;Eternal September&amp;rdquo; phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tend to get involved in the discussion about them. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear in retrospect that we should have started both Rakudo and Pugs in 2001, not years later. Of course, we had neither the knowledge we do today, nor the people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being curious about Perl 6, by writing their first little script, by finding a module (new or extant) to work on, by reporting bugs or proposing enchancements in Rakudo or the various projects, by bringing interesting discussions to the channel, by interacting with the community, and by being nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most misconceptions seem to me to be merely the result of a deplorable lack of correct information, mixed with blindly cargo-culted mockery.&lt;/p&gt;

&lt;p&gt;Some people seem to think that working on a language design for ten years, adapting it both to new ideas and to the feedback from implementations, in itself qualifies as a failure of some sort. I see a language growing both more real and more realistic every day.&lt;/p&gt;

&lt;p&gt;Some people haven&amp;rsquo;t been reached by the news that we actually have runnable implementations of Perl 6, and have had so for the past five years. Those people usually become very happy to hear that we do.&lt;/p&gt;

&lt;p&gt;Others consider the Perl 6 effort as &amp;ldquo;merely an academic effort&amp;rdquo;, whose purpose will in the end only be to inform Perl 5 in certain ways, and whose ivory-tower denizens will never truly reconnect with reality. This is the only misconception that I, having written dozens of Perl 6 modules which actually run, and having as my focus making Perl 6 more practically usable, can sometimes feel saddened by.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nearly all of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carl and other Perl 6 developers are hard at work on both the Perl 6 specification as well as the Rakudo Perl 6 implementation. &lt;a href=&#34;http://rakudo.org/announce/rakudo-star/2010.08&#34;&gt;Rakudo Star 2010.08 is now available&lt;/a&gt;, with better performance, fewer bugs, and more features.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>People of Perl 6: Jonathan Worthington</title>
      <link>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</link>
      <pubDate>Wed, 11 Aug 2010 15:29:27 -0800</pubDate>
      
      <guid>http://localhost:1313/pub/2010/08/people-of-perl-6-jonathan-worthington.html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jnthn.net/&#34;&gt;Jonathan Worthington&lt;/a&gt; is one of the lead developers of &lt;a href=&#34;http://www.rakudo.org/&#34;&gt;Rakudo Perl 6&lt;/a&gt;. A couple of months before the &lt;a href=&#34;http://localhost:1313/pub/2010/07/welcome-rakudo-star.html&#34;&gt;Rakudo Star release&lt;/a&gt;, Perl.com interviewed him about his work on Perl 6 and what the rest of us should expect as we explore this new language. Follow Jonathan&amp;rsquo;s work at &lt;a href=&#34;http://6guts.wordpress.com/&#34;&gt;6guts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your background?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered programming when I was about eight years old, and got hooked. It started out with Logo and BBC Micro BASIC on some computers at school. Several years and a couple of PC-based dialects of Basic later, my family got internet access at home, and a couple of years later I ran across Perl.&lt;/p&gt;

&lt;p&gt;I ended up going off to university to do Computer Science. I questioned it a bit—I wasn&amp;rsquo;t certain my childhood hobby would still be interesting as a topic of study and a future career. Happily, it deepened my curiosity rather than bored me. I took a particular interest in languages, compilers and type systems, though the natural language processing courses kind of caught my interest too.&lt;/p&gt;

&lt;p&gt;That all came to an end several years back, when I graduated. Since then, I&amp;rsquo;ve done a few years freelancing and living abroad, and recently joined a startup company in Sweden. Amusingly, it makes the third country starting with an &amp;ldquo;S&amp;rdquo; that I&amp;rsquo;ve lived in since graduating—the other two were sunny Spain and the lesser-known but lovely Slovakia, a place I remain very fond of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s your primary interest in Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the moment, I&amp;rsquo;m primarily interested in writing a good compiler for it. Beyond that, I&amp;rsquo;d like to use it to build more cool things, though I&amp;rsquo;ve little idea what yet. We&amp;rsquo;ll see what comes along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When did you start contributing to Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in 2003, a couple of years after discovering Perl, I heard about Perl 6. I found the &lt;a href=&#34;http://dev.perl.org/perl6/apocalypse/&#34;&gt;apocalypses&lt;/a&gt; engaging, and joined a couple of mailing lists. A lot of perl6-language bewildered me. Well, some things never change. :-) I felt way out of my depth on the language design front back then, but then found the &lt;a href=&#34;http://www.parrot.org/&#34;&gt;Parrot&lt;/a&gt; project, which was a little more concrete. I wrote a couple of patches to improve Windows support.&lt;/p&gt;

&lt;p&gt;I did more bits with Parrot over the following years—mostly on the bytecode format and some object orientation bits. I didn&amp;rsquo;t really get involved with the Perl 6 compiler itself until 2007. That summer, I went to OSCON, drank a few beers and then told Larry Wall, of all people, that implementing junctions in the Perl 6 on Parrot compiler sounded interesting.&lt;/p&gt;

&lt;p&gt;Sadly, autumn of 2007 saw me pretty depressed. I withdrew from hacking on just about everything, went to wander around China for a month and hurriedly arranged to move abroad, in hope of putting some distance between myself and things. With the Spanish sun to improve my mood, and noticing that the latest iteration of the Perl 6 compiler—built on the &lt;a href=&#34;http://docs.parrot.org/parrot/devel/html/PCT_Tutorial.html&#34;&gt;Parrot Compiler Toolkit&lt;/a&gt;—had landed, it felt like time to try and make good on my junctions remark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What have you worked on?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, not long after digging in to junctions, I discovered that doing junctions properly meant doing multiple dispatch&amp;hellip; and doing multiple dispatch meant doing a bunch of the type system stuff&amp;hellip; and doing that meant being able to declare classes and roles. A couple of years of hacking later, and with plenty of input and help from others, we&amp;rsquo;re doing pretty well on all of those areas now in Rakudo. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature was your moment of epiphany with Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a hard one. There are many interesting features in Perl 6—some of them big things, some of them much smaller. What I&amp;rsquo;ve really come to admire isn&amp;rsquo;t so much the features themselves, but rather the much smaller number of fundamentals that they&amp;rsquo;re all built on top of, and how they them form a coherent whole that is greater than its parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature of Perl 6 will (and should) other languages steal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perl has long been a leader in regexes, and in many senses &lt;a href=&#34;http://perlcabal.org/syn/S05.html&#34;&gt;Perl 6 grammars and its new regex syntax&lt;/a&gt; are a game changer. Parsing problems that are beyond traditional regexes are now often easily expressible. Additionally, the changes in Perl 6 seriously try to address the cultural problems; good software development practices, such as code re-use, should also apply to regexes, and that—amongst other things—is now made easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The willingness to revisit things when an implementation points out issues, and an overriding commitment to get it right, rather than just get it out the door in whatever shape as soon as possible. While it is somewhat frustrating for those waiting to use Perl 6 in production, and to some degree for those of us implementing it too when things get re-hashed, I&amp;rsquo;m also convinced that the Perl 6 we deliver will be better for the time that&amp;rsquo;s been taken over it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By implementing a chunk of it. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does an interested novice start to learn the language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Drop along to &lt;a href=&#34;http://perl6.org/&#34;&gt;perl6.org&lt;/a&gt; for links to the latest and greatest in terms of documentation and tutorials. Some of us are also working on a book (&lt;a href=&#34;http://github.com/perl6/book/&#34;&gt;Using Perl 6&lt;/a&gt;). And of course, don&amp;rsquo;t forget to join the #perl6 IRC channel. It&amp;rsquo;s a friendly place, and a great place to get questions answered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you make a language intended to last for 20 years?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While 20 years sounds a long time, in many senses if a language gets a reasonable level of adoption—which I do hope Perl 6 will—it&amp;rsquo;s easy enough for legacy code to still be in production 20 years on.&lt;/p&gt;

&lt;p&gt;The more interesting challenge is how to make a language that can stay at the forefront for 20 years and still be considered modern. Since what&amp;rsquo;s considered modern will of course mutate, that means the language has to be able to be designed with the ability to mutate too. Handling language mutations sanely, and making sure it&amp;rsquo;s always clear what &amp;ldquo;dialect&amp;rdquo; of Perl 6 is being spoken, has been one of the big challenges in making Perl 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes a feature or a technique &amp;ldquo;Perlish&amp;rdquo;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It makes an easy thing easy, or a hard thing possible. The amount of code is proportional to the task at hand. It feels natural. It solves a real, practical problem, so you can get your work done efficiently and have time to go for a beer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What easy things are easier and which harder things are more possible now? Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d say writing OO code is decidedly easier now, particularly for those coming from other non-Perl language backgrounds. At the same time, so is writing functional code. And writing clean code is most certainly easier. Language extensions are an example of a harder thing that is made much more possible in Perl 6; introducing a new operator isn&amp;rsquo;t that much harder than writing a subroutine, you just have to give it an interesting looking name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature are you most awaiting before you use Perl 6 for your own serious projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a slightly odd sense, I am using Perl 6 for a serious project; big chunks of Rakudo are actually written in Perl 6. That aside, though, feature wise I think Rakudo is doing pretty well; the things I&amp;rsquo;m most waiting on—and helping us improve on—are issues like performance, stability and having a good range of modules to draw on. If I had to identify the next big features we need, though, it&amp;rsquo;s concurrency support and native type support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has surprised you about the process of development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The high standards at which it is conducted. For example, we have a lot of effort going in to testing, and test coverage is taken seriously and highly valued by all all of those working on Rakudo. People often code-review each other&amp;rsquo;s patches. Discussion on the channel and on the mailing lists—even in the face of opposing views—is just about always polite and friendly. The Perl 6 team is easily the best I&amp;rsquo;ve ever had the privilege to work with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does Rakudo need for wider deployment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wider deployment means growing the users base. People should choose a technology primarily on the merits of the technology itself. Therefore, to grow a user base, Rakudo needs to deliver not only the benefits of the Perl 6 language itself, but also a stable and performant implementation of it. It&amp;rsquo;s a wider issue than Rakudo, but we also need lots of good modules and, perhaps, some kind of killer app. Those kinds of things will come from the community at large rather than just the core Rakudo team, however they matter significantly to Rakudo&amp;rsquo;s own success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next after Rakudo Star?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I often talk about Rakudo development as being like going for a hike up a mountain. While the most impressive view will be at that top—when we have a complete Perl 6 implementation—at some points along the way there will be good views, and it&amp;rsquo;s good to pause and enjoy them. Rakudo is one of those points on the journey—in fact, the most significant so far.&lt;/p&gt;

&lt;p&gt;Rakudo has caused us to focus for a while on trying to get something useful and usable. That has been valuable, however there are still some big items to take care of on the way to the mountain peak. Those will once again take center stage after Rakudo *.&lt;/p&gt;

&lt;p&gt;Two big areas of focus will be on native type handling and parallelism. Part of the native type handling will involve a re-visit of how objects look internally. Part of this is being able to store native types in them, not just other objects. Additionally, we can actually do the vast majority of object attribute lookups as index offsets instead of hash lookups, which should be a big performance win. Lexical variable access can also be optimized in a similar fashion. We have a lot of statically known information about a Perl 6 program that we pretty much just throw away today.&lt;/p&gt;

&lt;p&gt;We will also be transforming Rakudo from a compiler with one backend—Parrot—into a compiler with multiple backends. We&amp;rsquo;ve had an architecture open to such things for some time now, but getting the core features in place and actually delivering something of note have been far more important goals so far.&lt;/p&gt;

&lt;p&gt;However, at this point, I think some things—especially parallelism, an area where Parrot is currently weak—will be much easier to do an initial implementation of for another backend. It usually takes at least a first cut implementation and some iteration to get the specification solidified and refined, and it will be easier to do that on a base that offers solid concurrency primitives. I also hope that having other backends will help us grow both the user base and the developer base.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What feature do you most look forward to in a future version of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really looking forward to having good threading and parallel programming support—but perhaps that&amp;rsquo;s mostly because we&amp;rsquo;ll be done with the hard work of making it happen!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larry wanted the community to rewrite itself just as it redesigned and implemented the language. How have you seen that process work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The state of the Perl 6 community today is something that is dear to many of us who are a part of it. People frequently comment how the #perl6 IRC channel is somehow different to the norm; it&amp;rsquo;s very open to newcomers and beginners, and people tend to have a very slow burning fuse. The challenge, of course, is scaling that community without losing all of the nice things about it. Significantly, the key players all really want to work out how to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you keep up with spec changes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mostly through a very regular presence on #perl6, where a lot of them are thrashed out. I also read the spec change commits as they are reported on the perl6-language list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What one thing would you change about the implementation history so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implementation having been started sooner. Implementations have been the primary driver towards the spec converging on something implementable and sane. That said, the pre-implementation, tossing-about-ideas phase was, of course, important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can people help you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s so much that needs doing in the Perl 6 world today! Generally, I just advise interested people to take a look around, spot something interesting to help with or something that&amp;rsquo;s missing that they would like to work on, and dig in! Perl 6 is very much about &lt;a href=&#34;http://www.slideshare.net/autang/ofun-optimizing-for-fun&#34;&gt;-Ofun&lt;/a&gt;. For some of us, fun is compiler guts. For others, fun is web frameworks. For others, fun is making awesome documentation. If you want to help, find what&amp;rsquo;s fun for you, do it well, and make your mark on the evolving Perl 6 community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What misconceptions do people have about the project that need addressing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perhaps the biggest one is that some people equate &amp;ldquo;taking a long time&amp;rdquo; with &amp;ldquo;not going to happen&amp;rdquo;. It&amp;rsquo;s an easy enough misconception to form given the project&amp;rsquo;s long time scale, especially for anyone not really following the day-to-day progress. Of course, it&amp;rsquo;s a hard misconception to understand for those who are following it too. :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What projects are missing in the world of Perl 6?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, there&amp;rsquo;s thousands of modules to be written for all kinds of needs from popular to niche. One area that certainly needs more effort, however, is documentation. It&amp;rsquo;s not like there aren&amp;rsquo;t projects started, more just too few hands for the amount of work that needs to be done.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

