<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/development/</link>
    <description>Recent content in Development on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 11:48:52 +0000</lastBuildDate>
    <atom:link href="/categories/development/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A tour with Net::FTP</title>
      <link>http://localhost:1313/article/a-tour-with-net-ftp/</link>
      <pubDate>Mon, 13 Jul 2020 11:48:52 +0000</pubDate>
      
      <guid>http://localhost:1313/article/a-tour-with-net-ftp/</guid>
      <description>

&lt;p&gt;When we want to have a way to exchange files between machines, we often think about rsync, scp, git or even something slow and complex (looking at you Artifactory and S3), but the answer is often right in front of your eyes: FTP!&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;File Transfer Protocol&amp;rdquo; provides a very simple and convenient way to share files. It&amp;rsquo;s battle-tested, requires almost no maintenance, and has a simple anonymous access mechanism. It can be integrated with several standard auth methods and even some virtual ones, none of which I show here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/battlereadymeow.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll install a local FTP server and create a simple FTP client in Perl.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-of-context&#34;&gt;A bit of context&lt;/h2&gt;

&lt;p&gt;At &lt;code&gt;$work&lt;/code&gt; I have to carry on an army of developers that create customized build pipelines from handcrafted local configuration files.&lt;/p&gt;

&lt;p&gt;This file is not hosted &amp;ldquo;by design&amp;rdquo; like you would have with Travis CI or a GitHub Action, but it is used to feed a &amp;ldquo;heavy client&amp;rdquo; that parses, resolves templates, and creates a workspace in some centralized automations servers through HTTP API calls.&lt;/p&gt;

&lt;p&gt;It was a lot of support to help developers to create this file according to the spec (yet another file format), and we were blind when we wanted to help them with failing workspace creation/build (no way to retrieve configuration from workspace).&lt;/p&gt;

&lt;p&gt;I got the idea to backup and centralize automatically the configuration file during the creation of the build pipeline workspace. It was intended to help both developers (configuration &amp;ldquo;samples&amp;rdquo;) and support team (see history, versioned then we can check diffs, file to replay). The constraints were to be able to exchange file from various places with variable users. The FTP protocol is a perfect fit for that.&lt;/p&gt;

&lt;p&gt;I added also a cronjob to autocommit and push to a git repository and we had magically a website listing versioned configurations files.&lt;/p&gt;

&lt;p&gt;In addition, FTP proved later to also require zero support. I mean really zero maintenance!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/toolowmaintenance.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;download-and-install-ftpd&#34;&gt;Download and install ftpd&lt;/h2&gt;

&lt;p&gt;I decided to use &lt;a href=&#34;https://www.pureftpd.org/project/pure-ftpd/&#34;&gt;pure-ftpd&lt;/a&gt; but there are some other good alternatives if you want.&lt;/p&gt;

&lt;p&gt;First I download the tarball, untar it, and change into its directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ wget https://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.49.tar.gz
$ tar xvzf pure-ftpd-1.0.49.tar.gz
$ cd pure-ftpd-1.0.49/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I configure &lt;code&gt;ftpd&lt;/code&gt; so I can execute it as casual (non-root) user using a non-restricted port, and I&amp;rsquo;ll set the destination directory to my &lt;code&gt;$HOME/ftpd&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/ftpd --with-nonroot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I create two directories. The &lt;em&gt;ftp&lt;/em&gt; is what I&amp;rsquo;ll publish and &lt;em&gt;run&lt;/em&gt; is where I&amp;rsquo;ll put the pidfile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd $HOME/ftpd
$ mkdir ftp
$ mkdir run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the ftp server. I need to give some custom configurations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FTP_ANON_DIR&lt;/code&gt; is the directory I want to publish&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; allows anonymous access&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-M&lt;/code&gt; allows anonymous users to create directories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt; specifies the directory for the pidfile:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ FTP_ANON_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/ftp ; ./sbin/pure-ftpd -e -M -g run &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point I should have a running ftp server. Let&amp;rsquo;s check!&lt;/p&gt;

&lt;h2 id=&#34;test-with-ftp&#34;&gt;Test with ftp&lt;/h2&gt;

&lt;p&gt;First, I test with the preinstalled &lt;code&gt;ftp&lt;/code&gt; client. If everything is fine I see the typical FTP exchange:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ftp localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;
Connected to localhost.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;---------- Welcome to Pure-FTPd ----------
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-You are user number &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; allowed.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-Local time is now &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:56. Server port: &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;.
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;-Only anonymous FTP is allowed here
&lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt; You will be disconnected after &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; minutes of inactivity.
Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;localhost:tib&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt; Anonymous user logged in
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I get &lt;code&gt;ftp: connect: Connection refused&lt;/code&gt; it&amp;rsquo;s probably one of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ftpd&lt;/code&gt; is not running (check with &lt;code&gt;ps aux | grep &amp;quot;ftp[d]&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using the wrong port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I get &lt;code&gt;421 Can&#39;t change directory to /home/tib/ftpd/ftp/ [/]&lt;/code&gt; it&amp;rsquo;s probably because I haven&amp;rsquo;t created the directory I specified in &lt;code&gt;FTP_ANON_DIR&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;simple-client-in-perl&#34;&gt;Simple client in Perl&lt;/h2&gt;

&lt;p&gt;Ok that&amp;rsquo;s cool, but I only played with ftp server and preinstalled &lt;code&gt;ftp&lt;/code&gt; client until now. What about writing some Perl now?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/a-tour-with-net-ftp/whatif.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Net::FTP&#34;&gt;Net::FTP&lt;/a&gt; is a superb &lt;a href=&#34;https://metacpan.org/&#34;&gt;CPAN&lt;/a&gt; module dedicated to FTP protocol and I&amp;rsquo;ll use that.&lt;/p&gt;

&lt;h3 id=&#34;simple-listing&#34;&gt;Simple listing&lt;/h3&gt;

&lt;p&gt;First, a very simple listing script &lt;code&gt;ls.pl&lt;/code&gt;. This program connects to the server, asks for a list of files, and outputs each one. It&amp;rsquo;s clear that&amp;rsquo;s super easy and straightforward to play with FTP in Perl!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $f ($ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;upload&#34;&gt;Upload&lt;/h3&gt;

&lt;p&gt;What next?  Maybe upload something? Again, it&amp;rsquo;s super simple. Instead of listing files, I&amp;rsquo;m &lt;code&gt;put&lt;/code&gt;ting them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file(@ARGV) {
    $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;)
    	&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot put $file&amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
}
$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I run this and supply the files I want to upload:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ perl upload.pl file1.txt file2.txt&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;put-things-together&#34;&gt;Put things together&lt;/h2&gt;

&lt;p&gt;I propose a more complete client with some command-line parsing and more actions. In addition to the previous code for listing and uploading, here I added a way to view a file. &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to handle command line parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; File::Slurp;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Net::FTP;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2121&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ();

GetOptions(
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;action|c=s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;},
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file|f=s&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;},
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help|h&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;$options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;}
	);

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_usage&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;List all files :\n\t$0 -c list\n&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Upload file :\n\t$0 -c upload -f file.txt\n&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print file :\n\t$0 -c view -f file.txt\n\n&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_ftp&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Net::FTP&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($HOST, Port &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
		&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# ls / on remote ftp&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $f ($ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Upload a file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt;($) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
	(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e $file) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot put $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Read a file&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;($) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot read $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;message;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e $file) { &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; read_file($file); }
	$ftp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;) {
	list();
} &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;) {
	upload($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt;($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;view&amp;#39;&lt;/span&gt;) {
	view($options{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	print_usage();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;more-about-design-and-security&#34;&gt;More about design and security&lt;/h2&gt;

&lt;p&gt;This thin wrapper can be extended to do more tasks, such as checking allowed or disallowed name patterns or tidying files depending the uploader or the prefix in the name of the file. Remember, this is only on the client side! If you want real garantees you would better have to implement some kind of protections on the server side too. But, the goal was not to discuss security here but to play with FTP! And I hope you had a pleasant tour with me and &lt;a href=&#34;https://metacpan.org/pod/Net::FTP&#34;&gt;Net::FTP&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSON, Unicode, and Perl … Oh My!</title>
      <link>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</link>
      <pubDate>Wed, 29 Jan 2020 20:11:44 +0000</pubDate>
      
      <guid>http://localhost:1313/article/json-unicode-and-perl-oh-my-/</guid>
      <description>

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might think this a reasonable enough round-trip, just using two
different JSON libraries, &lt;a href=&#34;https://metacpan.org/pod/Mojo::JSON&#34;&gt;Mojo::JSON&lt;/a&gt;
and &lt;a href=&#34;https://metacpan.org/pod/Cpanel::JSON::XS&#34;&gt;Cpanel::JSON::XS&lt;/a&gt;.
In fact, though, when you run
this you’ll see that $decode in the above is &lt;code&gt;&amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;&lt;/code&gt;,
not just the &lt;code&gt;&amp;quot;\xc3\xa9&amp;quot;&lt;/code&gt; that we started with.&lt;/p&gt;

&lt;p&gt;Now invert the encoder/decoder modules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decoded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($json)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $json, $decoded );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now $decode is just &lt;code&gt;&amp;quot;\x{e9}&amp;quot;&lt;/code&gt;. What’s going on here?&lt;/p&gt;

&lt;h2 id=&#34;what-s-in-a-string&#34;&gt;What’s in a string?&lt;/h2&gt;

&lt;p&gt;To appreciate the above, we first have to grapple with what Perl strings
&lt;em&gt;are&lt;/em&gt;, fundamentally. Unlike C strings, Perl strings aren’t mere arrays
of bytes … but unlike, say, Python 3 strings, Perl strings aren’t arrays of
Unicode characters, either. Perl strings, rather, are arrays of “code
points” in an undefined character set.&lt;/p&gt;

&lt;p&gt;In particular, unlike Python, JavaScript, and many other popular high-level
programming languages, Perl strings do not differentiate between “binary”
and “text”. For example, if Perl reads
bytes 0xff, 0xfe, 0xfd, and 0xfc off of a binary filehandle, the string
that Perl creates from those 4 bytes is understood to contain not 4 &lt;em&gt;bytes&lt;/em&gt;,
but 4 &lt;em&gt;code points&lt;/em&gt;, without reference to any particular character set,
stored in an abstract, internal-use encoding.
(The Perl interpreter may, in fact, use 4 bytes to store the string, but that
would be an implementation detail, of no concern to interpreted Perl code.)&lt;/p&gt;

&lt;p&gt;This point must be stressed: Perl _does not care_—and does not &lt;em&gt;want&lt;/em&gt; to
care—whether a given string’s code points represent bytes or characters.
(More will be said on this later.)&lt;/p&gt;

&lt;h2 id=&#34;back-to-json&#34;&gt;Back to JSON&lt;/h2&gt;

&lt;p&gt;In our examples above we compared round-tripping using different libraries
for the encode and decode. Let’s dig further by comparing just the
encoded JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Cpanel::JSON::XS;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $e_acute &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xc3\xa9&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mojo_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::encode_json([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cp_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;encode([$e_acute]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $mojo_json, $cp_json );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;;
$VAR2 = &amp;quot;[\&amp;quot;\x{c3}\x{a9}\&amp;quot;]&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that &lt;a href=&#34;https://metacpan.org/pod/Data::Dumper&#34;&gt;Data::Dumper&lt;/a&gt;
outputs one string using octal escapes
and the other using hex. This reflects another Perl interpreter
implementation detail which, for now, is of no concern.)&lt;/p&gt;

&lt;p&gt;Our input string contains two code points, 0xc3 and 0xa9. Recall that
there is no specific character set associated with those code points; they’re
just numbers. JSON, though, is purely Unicode—and the
latest standard mandates UTF-8 encoding specifically. So we need to translate
our “no-character-set” code points to UTF-8 in order to encode to JSON. But
how to do this?&lt;/p&gt;

&lt;p&gt;We can’t, strictly speaking. It would be like trying
to convert 5 “currency units” to U.S. dollars: we need to know the actual
source currency (Bitcoin? Euros?) to get an answer. Likewise, in Perl, to
express our stored “code points” in UTF-8 we need to know what &lt;em&gt;characters&lt;/em&gt;
those code points represent. For example, your Perl string might store code
point 142 … but which character is that? Perl doesn’t know, and Perl doesn’t
care. Without a defined character set, a code point is just a number.&lt;/p&gt;

&lt;p&gt;To work around this problem, our JSON libraries make reasonable—though
not necessarily correct—assumptions about what the string’s code points
represent.&lt;/p&gt;

&lt;p&gt;Mojo::JSON assumes that our 2 original code points are Unicode. That means
Mojo::JSON thinks we gave it the characters U+00C3 (Ã) and
U+00A9 (©). The reason for the “expansion” from 2 code points to 4 in the
encoded JSON is that
Mojo::JSON encodes our code points as UTF-8: U+00C3 becomes Perl
code points 0303 (0xc3) and 0203 (0x83), and U+00A9 becomes 0302 (0xc2) and
0251 (0xa9).&lt;/p&gt;

&lt;p&gt;Cpanel::JSON::XS makes a different assumption that suits a different
interpretation: This encoder assumes that our 2 original code points
represent whatever bytes of the characters that should go into the eventual
JSON. Unlike with Mojo::JSON, there is no assumption about a desired encoding,
which allows the caller full control over the encoding.&lt;/p&gt;

&lt;p&gt;(This flexibility allows the encoder’s caller to choose, e.g., UTF-16 rather
than UTF-8 for the encoded JSON. That made more sense prior to the latest
JSON specification, which mandates UTF-8 outside closed systems.)&lt;/p&gt;

&lt;p&gt;The same difference in behavior applies to our two decoder functions. They,
too, face an “unsolvable” problem, the reverse of that for encoding. And
their solutions mirror the encoders’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mojo::JSON::decode_json($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{e9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recall that Mojo::JSON’s encoder interprets its input as Unicode and that
its output code points represent bytes of UTF-8.
Above you’ll see that its decoder does the inverse: it interprets its
input as bytes of UTF-8 and outputs code points understood to be Unicode.
This means the number of code points output will be smaller than the number
input if the input contains any code points above 127 (0x7f), which UTF-8
represents as multiple bytes.&lt;/p&gt;

&lt;p&gt;As for Cpanel::JSON::XS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Mojo::JSON;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper;
$Data::Dumper::Useqq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\303\203\302\251\&amp;#34;]&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[\&amp;#34;\x{c3}\x{a9}\&amp;#34;]&amp;#34;&lt;/span&gt;;

$from_mojo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_mojo)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
$from_cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cpanel::JSON::XS&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;decode($from_cp)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper( $from_mojo, $from_cp );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$VAR1 = &amp;quot;\x{c3}\x{83}\x{c2}\x{a9}&amp;quot;;
$VAR2 = &amp;quot;\x{c3}\x{a9}&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;decode()&lt;/code&gt; method, like &lt;code&gt;encode()&lt;/code&gt;, assumes that the caller will
handle encoding manually and so simply copies code points.&lt;/p&gt;

&lt;h2 id=&#34;aside-assumptions-of-utf-8&#34;&gt;Aside: Assumptions of UTF-8&lt;/h2&gt;

&lt;p&gt;Mojo::JSON’s behavior of encoding to UTF-8 has precedent: Perl itself!&lt;/p&gt;

&lt;p&gt;You may have run into something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; perl -e&#39;print &amp;quot;\x{100}&amp;quot;&#39;
Wide character in print at -e line 1.
Ā
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For code points 0-255 Perl just outputs the code point as an octet, but
when asked to output a code point that exceeds 255, obviously that doesn’t
work. In this case, Perl assumes you want UTF-8 but throws the “wide
character” warning to tip you off to the fact that you missed something—in
this case, you neglected to encode code point 256 to bytes.&lt;/p&gt;

&lt;h2 id=&#34;abusing-the-system&#34;&gt;Abusing the System&lt;/h2&gt;

&lt;p&gt;Cpanel::JSON::XS’s &lt;code&gt;encode()&lt;/code&gt; allows for a nonstandard use of JSON:
literal binary data. Consider the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perl -MCpanel::JSON::XS -e&#39;print Cpanel::JSON::XS-&amp;gt;new()-&amp;gt;encode([&amp;quot;\xff&amp;quot;])&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… will output 5 bytes: &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt;, 0xff, &lt;code&gt;&amp;quot;&lt;/code&gt;, and &lt;code&gt;]&lt;/code&gt;. This is invalid JSON
because no Unicode encoding (let alone UTF-8) ever encodes a character to
a single 0xff byte. Only special decoders that understand this “literal
binary” JSON variant will parse this as intended. That reliance on a custom
mode of operation undercuts JSON’s usefulness as a widely-supported
standard—which may seem fine at first but
can easily bite if your application grows in scope.&lt;/p&gt;

&lt;p&gt;Applications that need to serialize strings with arbitrary octets (i.e.,
binary) should apply a secondary encoding (e.g., Base64) to strings prior
to JSON encoding. Or, better yet, prefer a binary-friendly encoding like
&lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-that-flag-behind-the-curtain&#34;&gt;About That Flag Behind the Curtain …&lt;/h2&gt;

&lt;p&gt;If you run the output from our two encoder methods through
&lt;a href=&#34;https://metacpan.org/pod/Devel::Peek&#34;&gt;Devel::Peek&lt;/a&gt;, you’ll
see something like this for Mojo::JSON’s output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fdc27802f30) at 0x7fdc27e59c58
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x7fdc28826350 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and this for Cpanel::JSON::XS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SV = PV(0x7fc0cd004d30) at 0x7fc0cd016228
  REFCNT = 1
  FLAGS = (POK,pPOK,UTF8)
  PV = 0x7fc0cce2ef60 &amp;quot;[\&amp;quot;\303\203\302\251\&amp;quot;]&amp;quot;\0 [UTF8 &amp;quot;[&amp;quot;\x{c3}\x{a9}&amp;quot;]&amp;quot;]
  CUR = 8
  LEN = 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;UTF8&lt;/code&gt; flag in the latter. This tells us that Perl’s
internal storage of the string’s code points uses UTF-8 encoding. This
difference is why, as we saw earlier, Data::Dumper encodes Mojo::JSON’s output
using
octal escapes but Cpanel::JSON::XS’s using hex: Data::Dumper recognizes the
UTF8 flag and renders its output based on it.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://perldoc.perl.org/perlunifaq.html#What-is-%22the-UTF8-flag%22%3f&#34;&gt;perldoc perlunifaq&lt;/a&gt; makes clear, though, the UTF8 flag is &lt;strong&gt;not&lt;/strong&gt; meant for
consumption by Perl code. Perl applications should regard strings as
simple sequences of code points, without regard for how the
Perl interpreter may store those strings in memory.&lt;/p&gt;

&lt;p&gt;That being said,
in limited contexts it &lt;em&gt;may&lt;/em&gt; work to imitate the distinction between string
types in languages like Python and JavaScript by regarding
UTF8-flagged strings as “character strings” and non-UTF8-flagged strings as
“byte strings”—indeed, &lt;a href=&#34;https://metacpan.org/pod/Sereal::Encoder&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;serializers&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;on&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;CPAN&lt;/a&gt;, including two of my own,
do exactly this. This isn’t
a supported model, though, for using Perl strings, and any code that
depends on it may behave differently in different Perl versions. Caveat
emptor!&lt;/p&gt;

&lt;h2 id=&#34;making-peace&#34;&gt;Making Peace&lt;/h2&gt;

&lt;p&gt;JSON and Perl are odd bedfellows. Perl’s lack of distinct number and string
types, for example, can yield JSON that uses the wrong type for one
value or the other. Perl’s lack of native booleans produces a similar effect.&lt;/p&gt;

&lt;p&gt;The encoding problems discussed above, though, are especially nefarious
because accommodating them requires a good understanding of all of the above.
Most developers can accommodate something like &lt;code&gt;{&amp;quot;age&amp;quot;: &amp;quot;9&amp;quot;}&lt;/code&gt; easily enough
because typecasting from &lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; (string) to &lt;code&gt;9&lt;/code&gt; (number) is commonplace. But
how many would see &lt;code&gt;&amp;quot;Ã©&amp;quot;&lt;/code&gt; and think, “ah! I simply have to treat those
characters’ code points as bytes then decode those bytes as UTF-8!” Some
would, to be sure—perhaps even many—but likely fewer than can easily coerce
&lt;code&gt;&amp;quot;9&amp;quot;&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Binary-friendly encodings like &lt;a href=&#34;http://cbor.io&#34;&gt;CBOR&lt;/a&gt;
mitigate against this problem because whatever decodes the Perl-sourced
data can more easily recognize the need to decode from binary. Anyone
who doesn’t know about bytes and encodings will quickly learn! Fundamentally,
though, even CBOR doesn’t really fit Perl’s “pure code points” string model
very well because CBOR distinguishes strongly between binary and text strings,
which Perl does not.&lt;/p&gt;

&lt;p&gt;At the end of the day, Perl’s data model, for all of the conveniences that it
affords us, makes communication with many other languages a challenge. The
best we can do is to anticipate these problems and deal with them as they arise.&lt;/p&gt;

&lt;h2 id=&#34;epilogue-json-alternatives&#34;&gt;Epilogue: JSON Alternatives&lt;/h2&gt;

&lt;p&gt;JSON’s inability to store arbitrary octet strings is, in my experience,
its biggest liability,
but there are other reasons why I often prefer to avoid JSON:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Its inability to store comments and proscription against trailing commas
make it an awkward choice for human-maintained data structures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its &lt;code&gt;\uXXXX&lt;/code&gt; escapes support only characters within Unicode’s
&lt;abbr title=&#34;Basic Multilingual Plane&#34;&gt;BMP&lt;/abbr&gt;; to store emoji or other
non-BMP characters you either have to encode to UTF-8 directly or indicate
a UTF-16 surrogate pair (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-16#U+010000_to_U+10FFFF&#34;&gt;What does that mean?&lt;/a&gt;) in &lt;code&gt;\uXXXX&lt;/code&gt; escapes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It’s inefficient compared with binary formats.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; is a nice serialization format
for human-maintained data structures. It’s line-delimited and—of course!—allows
comments, and any Unicode code point can be expressed in simple hexadecimal.
TOML is fairly new, and its specification is still in flux; nevertheless,
it already undergirds a number of high-profile
software projects like Rust’s &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;
package manager and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;—which powers this site! CPAN
&lt;a href=&#34;https://metacpan.org/pod/TOML::Tiny&#34;&gt;hosts&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML::Parser&#34;&gt;several&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/TOML&#34;&gt;implementations&lt;/a&gt; of this serialization.&lt;/p&gt;

&lt;p&gt;The aforementioned &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; improves upon JSON’s efficiency and
also allows for storage of binary strings. Whereas JSON encoders must
stringify numbers and escape all strings, CBOR stores numbers “literally”
and prefixes strings with their length, which obviates the need to escape those
strings. These dramatically simplify both encoding and decoding. As with
TOML and YAML, CPAN hosts &lt;a href=&#34;https://metacpan.org/pod/CBOR::XS&#34;&gt;multiple&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::Free&#34;&gt;CBOR&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/CBOR::PP&#34;&gt;implementations&lt;/a&gt;.
(Full disclosure: Two of these are of my own authorship.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Sereal/Sereal&#34;&gt;Sereal&lt;/a&gt; is another great JSON substitute
that confers most of CBOR’s benefits and can even serialize more
“Perl-specific” items like regular expressions. This makes it ideal
for Perl-to-Perl IPC. The reference implementation is CPAN’s
&lt;a href=&#34;https://metacpan.org/pod/Sereal&#34;&gt;Sereal&lt;/a&gt; distribution.
Sereal isn’t as well-supported as CBOR outside Perl,
though, so if you need to communicate with non-Perl code, Sereal may
not work as well for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;YAML&lt;/a&gt; is another format that humans can maintain easily.
Unlike TOML, YAML supports binary strings; in fact, it’s flexible enough
to replace Data::Dumper in many cases. CPAN includes
a &lt;a href=&#34;https://metacpan.org/pod/YAML::XS&#34;&gt;number&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::PP&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;https://metacpan.org/pod/YAML::Old&#34;&gt;libraries&lt;/a&gt; that implement YAML.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Porting a Dancer plugin to Dancer2</title>
      <link>http://localhost:1313/article/porting-a-dancer-plugin-to-dancer2/</link>
      <pubDate>Fri, 10 Jan 2020 13:37:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/porting-a-dancer-plugin-to-dancer2/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;https://metacpan.org/pod/Dancer2&#34;&gt;Dancer2&lt;/a&gt; web application, I want to know which requests come from smartphones.  There’s a plugin for that — but only in the older &lt;a href=&#34;https://metacpan.org/pod/Dancer&#34;&gt;Dancer (v1)&lt;/a&gt; framework.  I’m no expert, but even I was easily able to port the Dancer plugin, &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin::MobileDevice&#34;&gt;Dancer::Plugin::MobileDevice&lt;/a&gt;, to Dancer2!  In this article, we’ll explore Dancer2 and the way it handles plugins.  We’ll get our hands dirty working with the framework, and examine the main changes I made to port the plugin from Dancer to Dancer2.  By the end of this article, you’ll be ready to rock &lt;em&gt;and&lt;/em&gt; you’ll have a handy reference to use when porting plugins yourself.&lt;/p&gt;

&lt;h2 id=&#34;the-dancer2-web-framework&#34;&gt;The Dancer2 web framework&lt;/h2&gt;

&lt;p&gt;Dancer2 applications run on a Web server and process requests from a browser.  The application’s Perl code uses keywords in Dancer2’s domain-specific language (DSL) to access information about a request.&lt;/p&gt;

&lt;p&gt;Try it out: Install &lt;a href=&#34;https://metacpan.org/pod/Task::Dancer2&#34;&gt;Task::Dancer2&lt;/a&gt;.  Then, save this as &lt;code&gt;app.psgi&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer2;
get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (query_parameters&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{name} &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;;
};
to_app;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run &lt;code&gt;plackup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Enter the URL &lt;code&gt;http://localhost:5000&lt;/code&gt; in a browser and you will see “Hello, world!”, or visit &lt;code&gt;http://localhost:5000/?name=genius&lt;/code&gt; to see “Hello, genius!”.  The “genius” comes from &lt;code&gt;query_parameters&lt;/code&gt;, a DSL keyword that returns the values after the &lt;code&gt;?&lt;/code&gt; in the URL.  You can use those values when building a response to a request.&lt;/p&gt;

&lt;h2 id=&#34;dancer-and-dancer2-plugins&#34;&gt;Dancer and Dancer2 plugins&lt;/h2&gt;

&lt;p&gt;Dancer and Dancer2 plugins define new DSL keywords for the plugin’s users.  They also install “hooks,” subroutines that run while Dancer processes a request.  The hooks collect information for the DSL keywords to access.&lt;/p&gt;

&lt;p&gt;For example, a hook in Dancer::Plugin::MobileDevice detects whether a request is coming from a mobile device.  The plugin defines the &lt;code&gt;is_mobile_device&lt;/code&gt; DSL keyword so your code can react appropriately. To port the plugin, I changed code for the keyword, the hooks, and the test suite.&lt;/p&gt;

&lt;h2 id=&#34;porting-keywords&#34;&gt;Porting keywords&lt;/h2&gt;

&lt;p&gt;Dancer plugins use the Dancer DSL and a &lt;a href=&#34;https://metacpan.org/pod/Dancer::Plugin&#34;&gt;plugin-specific DSL&lt;/a&gt; to define DSL keywords. In Dancer (v1), the &lt;code&gt;is_mobile_device&lt;/code&gt; keyword is created with the &lt;code&gt;register&lt;/code&gt; plugin-DSL function (code examples simplified to focus on the porting):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;register &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_mobile_device&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user_agent &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$regex/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
};
register_plugin;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2 plugins are &lt;a href=&#34;https://metacpan.org/pod/Moo&#34;&gt;Moo&lt;/a&gt; objects, and new DSL keywords are member functions on those objects.  Therefore, I changed &lt;code&gt;is_mobile_device()&lt;/code&gt; to a member function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_mobile_device&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;       &lt;span style=&#34;color:#75715e&#34;&gt;# get the plugin’s object instance&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ($self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dsl&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;user_agent &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$regex/&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ;
}
plugin_keywords &lt;span style=&#34;color:#e6db74&#34;&gt;qw(is_mobile_device)&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;# replaces register_plugin()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the body of the function, the Dancer plugin directly accessed the DSL keyword &lt;code&gt;request&lt;/code&gt;.  The Dancer2 plugin instead accesses the request via &lt;code&gt;$self-&amp;gt;dsl-&amp;gt;request&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;porting-hooks&#34;&gt;Porting hooks&lt;/h2&gt;

&lt;p&gt;Dancer plugins add hooks using the DSL &lt;code&gt;hook&lt;/code&gt; keyword.  For example, this &lt;code&gt;before_template&lt;/code&gt; hook makes &lt;code&gt;is_mobile_device&lt;/code&gt; available in templates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;hook before_template &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    $tokens&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_mobile_device&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_mobile_device();
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2 handles hooks very differently.  The plugin’s Moo constructor, &lt;code&gt;BUILD&lt;/code&gt;, is called when a plugin instance is created.  In &lt;code&gt;BUILD&lt;/code&gt;, the plugin registers the hook.  I added &lt;code&gt;BUILD&lt;/code&gt; and called
&lt;code&gt;$self-&amp;gt;dsl-&amp;gt;hook&lt;/code&gt; to add the hook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BUILD&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
    $self&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dsl&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;hook( before_template_render &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tokens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
        $tokens&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{is_mobile_device} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $plugin&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_mobile_device;
    });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your hook functions are too long to move into &lt;code&gt;BUILD&lt;/code&gt;, you can leave them where they are and say &lt;code&gt;$self-&amp;gt;dsl-&amp;gt;hook( hook_name =&amp;gt; \&amp;amp;sub_name );&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;porting-the-tests&#34;&gt;Porting the tests&lt;/h2&gt;

&lt;p&gt;Dancer::Plugin::MobileDevice has a full test suite.  These tests are extremely useful to developers, as they allow you to to see if a Dancer2 port behaves the same as the Dancer original. That said, you have to port the tests themselves before you can use them to test your ported plugin! We’ll look at the Dancer way, then I’ll show you the Dancer2 changes.&lt;/p&gt;

&lt;p&gt;The Dancer tests define a simple Web application using the plugin.  They exercise that application using helpers in &lt;a href=&#34;https://metacpan.org/pod/Dancer::Test&#34;&gt;Dancer::Test&lt;/a&gt;.  For example (simplified from &lt;code&gt;t/01-is-mobile-device.t&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;{   &lt;span style=&#34;color:#75715e&#34;&gt;# The simple application&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer::Plugin::MobileDevice;
    get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; is_mobile_device; };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer::Test;

$ENV{HTTP_USER_AGENT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iPhone&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dancer_response GET &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# dancer_response() is from Dancer::Test&lt;/span&gt;
is( $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{content}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2, on the other hand, uses the &lt;a href=&#34;https://metacpan.org/pod/Plack&#34;&gt;Plack&lt;/a&gt; ecosystem for testing instead of its own helpers.  To work in that ecosystem, I changed the
above test as described in the
&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Manual#TESTING&#34;&gt;Dancer2 manual’s “testing” section&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Plack::Test;                        &lt;span style=&#34;color:#75715e&#34;&gt;# Additional testing modules&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; HTTP::Request::Common;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; TestApp;     &lt;span style=&#34;color:#75715e&#34;&gt;# Still a simple application, but now with a name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Dancer2::Plugin::MobileDevice;

    get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; is_mobile_device; };
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Plack::Test&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;create(TestApp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;to_app);     &lt;span style=&#34;color:#75715e&#34;&gt;# a fake Web server&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dut&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;request(GET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iPhone&amp;#39;&lt;/span&gt;);
is( $response&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;content, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dancer2 tests use more boilerplate than Dancer tests, but Dancer2 tests are more modular and flexible than Dancer tests.  With Plack, you don’t have to use the global state (&lt;code&gt;%ENV&lt;/code&gt;) any more, and you can test more than one application or use case per &lt;code&gt;.t&lt;/code&gt; file.  Seeing the tests pass is good indication that your porting job is done.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I am a newbie at Dancer2, and have never used Dancer.  But I was able to port Dancer::Plugin::MobileDevice to Dancer2 in less than a day — including time to read the documentation and figure out how!  When you need a Dancer function in Dancer2, grab the quick reference below and you’ll be off and running!&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;My thanks to Kelly Deltoro-White for her insights, and to the authors of Dancer::Plugin::MobileDevice and Dancer2 for a strong foundation to build on.&lt;/p&gt;

&lt;h2 id=&#34;more-information-on-dancer2-plugins&#34;&gt;More information on Dancer2 plugins&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;“&lt;a href=&#34;http://advent.perldancer.org/2016/22&#34;&gt;The new Dancer2 plugin system&lt;/a&gt;” by Sawyer X, for an overview&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Dancer2::Plugin&#34;&gt;Dancer2::Plugin&lt;/a&gt;, for details&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quick-reference-porting-plugins-from-dancer-to-dancer2&#34;&gt;Quick reference: porting plugins from Dancer to Dancer2&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Port keywords:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make keywords freestanding &lt;code&gt;sub&lt;/code&gt;s, not arguments of &lt;code&gt;register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access data through &lt;code&gt;$self&lt;/code&gt; rather than DSL keywords&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;register_plugin&lt;/code&gt; to &lt;code&gt;plugin_keywords&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Port hooks:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;BUILD&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Move the hook functions into &lt;code&gt;BUILD&lt;/code&gt;, or refer to them from &lt;code&gt;BUILD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wrap each hook function in a &lt;code&gt;$self-&amp;gt;dsl-&amp;gt;hook&lt;/code&gt; call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Port tests:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import &lt;a href=&#34;https://metacpan.org/pod/Plack::Test&#34;&gt;Plack::Test&lt;/a&gt; and
&lt;a href=&#34;https://metacpan.org/pod/HTTP::Request::Common&#34;&gt;HTTP::Request::Common&lt;/a&gt;
instead of Dancer::Test&lt;/li&gt;
&lt;li&gt;Give the application under test a &lt;code&gt;package&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;Create a Plack::Test instance representing the application&lt;/li&gt;
&lt;li&gt;Create requests using HTTP::Request::Common methods&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;$response-&amp;gt;{content}&lt;/code&gt; to &lt;code&gt;$response-&amp;gt;content&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating IP address tools from scratch</title>
      <link>http://localhost:1313/article/creating-ip-address-tools-from-scratch/</link>
      <pubDate>Thu, 19 Sep 2019 11:00:07 +0000</pubDate>
      
      <guid>http://localhost:1313/article/creating-ip-address-tools-from-scratch/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been researching how the Internet is organized, and working with &lt;a href=&#34;https://en.wikipedia.org/wiki/WHOIS&#34;&gt;whois&lt;/a&gt; data. I&amp;rsquo;ve been creating simple tools that process IP addresses without any help from CPAN. At work we tend to use &lt;a href=&#34;https://metacpan.org/pod/Net::IP::XS&#34;&gt;Net::IP::XS&lt;/a&gt; for these tasks, but sometimes it&amp;rsquo;s fun to figure out how things work under the hood.&lt;/p&gt;

&lt;h2 id=&#34;converting-to-decimal&#34;&gt;Converting to decimal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;re familiar with the IPv4 address &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4#Addressing&#34;&gt;format&lt;/a&gt;; the &amp;ldquo;dotted quad&amp;rdquo; consists of four numbers between 0 and 255 separated by periods. Your home wifi network probably starts at 192.168.0.0. The format is just another way of representing a 32-bit integer; here are the numbers and their equivalent in binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     192      168        0        0
11000000 10101000 00000000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To figure out the value of the address in decimal, you need to read all 32 bits in one go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11000000101010000000000000000000
                      3232235520
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I find it useful to convert IPv4 addresses to decimals for storing them in a database; it&amp;rsquo;s much faster to search integers than text. So how would we do that in Perl? Here&amp;rsquo;s one way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.0.0&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $ipv4;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 3232235520&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code splits the IPv4 string &lt;code&gt;192.168.0.0&lt;/code&gt; into an array of 4 numbers (192,168,0,0). I use &lt;a href=&#34;https://perldoc.perl.org/functions/pack.html&#34;&gt;pack&lt;/a&gt; to convert each number from Perl&amp;rsquo;s representation into an unsigned 8-bit integer (the &amp;ldquo;C&amp;rdquo; is for char, the C language type). Then I use &lt;a href=&#34;https://perldoc.perl.org/functions/unpack.html&#34;&gt;unpack&lt;/a&gt; to read all 32 bits at once (the &amp;ldquo;N&amp;rdquo; is for an unsigned long in Network order - i.e. big endian).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; is convenient, but it&amp;rsquo;s not the fastest way to convert those numbers into a single 32-bit integer. We can accomplish the same feat with multiplication and exponentiation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This multiplies each number by 2 raised to the appropriate power (&lt;code&gt;**&lt;/code&gt; is Perl&amp;rsquo;s exponentiation operator): 192 must be multiplied by 2^24 as we want it to be moved 24 bits to the left, 168 should be multiplied by 2^16 and so on. Alternatively I could use bit-shifting to do the same thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ($bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using exponents or bit-shifting are both over 3x faster than my pack-unpack routine. That isn&amp;rsquo;t unusual: aside from avoiding subroutine calls, compilers are optimized for base 2 operations.&lt;/p&gt;

&lt;p&gt;You might be wondering how this would work for an &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv6#Addressing&#34;&gt;IPv6&lt;/a&gt; address. In principle the steps are the same, but it&amp;rsquo;s more complicated: IPv6 addresses are 128-bit integers, which is larger than Perl can natively handle. IPv6 addresses also have more involved representation &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv6_address#Representation&#34;&gt;rules&lt;/a&gt;. I&amp;rsquo;ll tackle IPv6 in a future article.&lt;/p&gt;

&lt;h2 id=&#34;changing-decimal-back-to-dotted-quad&#34;&gt;Changing decimal back to dotted quad&lt;/h2&gt;

&lt;p&gt;To get back from a decimal number to an IPv4 address, just reverse the process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3232235776&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $decimal;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 192.168.1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I&amp;rsquo;ve used the pack-unpack routine again. I&amp;rsquo;m not sure if there&amp;rsquo;s a exponent/bit-shift solution that&amp;rsquo;s faster. I could right shift the decimal 24 bits to get 192, then left shift 192 24 bits and subtract it from the decimal, then shift the decimal 16 bits right and so on. But that seems like a lot of work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Dave Cross posted a &lt;a href=&#34;https://www.reddit.com/r/perl/comments/d6kncb/creating_ip_address_tools_from_scratch/f0vas6d?utm_source=share&amp;amp;utm_medium=web2x&#34;&gt;solution&lt;/a&gt; using bitmaps.&lt;/p&gt;

&lt;h2 id=&#34;extracting-a-range-from-cidr-notation&#34;&gt;Extracting a range from CIDR notation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing&#34;&gt;CIDR&lt;/a&gt; notation is shorthand way of describing a range of contiguous IP addresses belonging to a network. For instance your home network is commonly administered on &lt;code&gt;192.168.0.0/16&lt;/code&gt;. This can be read as &amp;ldquo;the network begins at 192.168.0.0 and the network mask is 16 bits long&amp;rdquo;. In other words the network begins at &lt;code&gt;192.168.0.0&lt;/code&gt; and ends at &lt;code&gt;192.168.255.255&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;CIDR is powerful though because the network mask doesn&amp;rsquo;t have to be a factor of 8; it&amp;rsquo;s harder to read &lt;code&gt;105.201.192.0/19&lt;/code&gt; and know where the network ends. And that&amp;rsquo;s where Perl can help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $prefixlen) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\//&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;105.201.192.0/19&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $prefixlen;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $end_decimal;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes; &lt;span style=&#34;color:#75715e&#34;&gt;# 105.201.223.255&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code starts by splitting the network &lt;code&gt;105.201.192.0/19&lt;/code&gt; into its starting IPv4 address and the network mask prefix length. I then use the same routine as before to obtain the decimal starting address. To figure out the last network address, I can use exponentiation again: 2 to the power of the remaining bits, minus 1 tells me how much larger the end address is than the start. To get the dotted quad I use pack-unpack to read the end decimal back into 4 bytes, and join them together again.&lt;/p&gt;

&lt;h2 id=&#34;a-quick-note-on-scripting&#34;&gt;A quick note on scripting&lt;/h2&gt;

&lt;p&gt;All of my code examples so far have used fixed variables to keep things simple. But I don&amp;rsquo;t actually write scripts like this. Text streams are the lingua franca of Unix systems; so it&amp;rsquo;s much more useful to write scripts that read streams of text and print streams of text. Then you can pipe data in and out of the script, chaining programs together to get the transformation you need. Here&amp;rsquo;s an example if what I&amp;rsquo;m talking about:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $prefixlen) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\//&lt;/span&gt;, $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $bytes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $prefixlen;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; $bits_remaining &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; $end_decimal) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, $start_decimal;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, @bytes;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, $ipv4, @columns;
    $start_decimal&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script enumerates all the IP addresses in a network. I use the &lt;a href=&#34;https://www.masteringperl.org/2014/10/the-double-diamond-a-more-secure/&#34;&gt;double diamond&lt;/a&gt; operator to read input from STDIN or treat its arguments like filenames automatically opening and streaming them. I expect tab-separated columns of text, and that the first column contains the CIDR to enumerate. It performs the conversion and prints the answer along with the original input in tab-separated form.&lt;/p&gt;

&lt;p&gt;I can run it by piping input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;129.232.156.16/29&#39; | enum-ips
129.232.156.16  129.232.156.16/29
129.232.156.17  129.232.156.16/29
129.232.156.18  129.232.156.16/29
129.232.156.19  129.232.156.16/29
129.232.156.20  129.232.156.16/29
129.232.156.21  129.232.156.16/29
129.232.156.22  129.232.156.16/29
129.232.156.23  129.232.156.16/29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or pass it filenames to read from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ enum-ips cidrs-1.txt cidrs-2.txt | head
102.32.0.0  102.32.0.0/15
102.32.0.1  102.32.0.0/15
102.32.0.2  102.32.0.0/15
102.32.0.3  102.32.0.0/15
102.32.0.4  102.32.0.0/15
102.32.0.5  102.32.0.0/15
102.32.0.6  102.32.0.0/15
102.32.0.7  102.32.0.0/15
102.32.0.8  102.32.0.0/15
102.32.0.9  102.32.0.0/15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;representing-a-range-in-cidr-notation&#34;&gt;Representing a range in CIDR notation&lt;/h2&gt;

&lt;p&gt;CIDR notation is compact and convenient; but the &lt;a href=&#34;https://www.ripe.net/manage-ips-and-asns/db/support/documentation/ripe-database-documentation/rpsl-object-types/4-2-descriptions-of-primary-objects/4-2-4-description-of-the-inetnum-object&#34;&gt;inetnum whois object&lt;/a&gt; defines each netblock by its starting and ending IPv4 address, like this: &amp;ldquo;197.232.80.0 - 197.232.83.255&amp;rdquo;. So I wrote a script to convert that string back into a CIDR:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\t/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; ($start_ipv4, $end_ipv4) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/\s+-\s+/&lt;/span&gt;, $columns[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start_decimal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $start_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $end_decimal   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, pack &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CCCC&amp;#39;&lt;/span&gt;, split &lt;span style=&#34;color:#e6db74&#34;&gt;/\./&lt;/span&gt;, $end_ipv4;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $prefixlen     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; length sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%0b&amp;#34;&lt;/span&gt;, $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $start_decimal;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$start_ipv4/$prefixlen&amp;#34;&lt;/span&gt;, @columns;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script reads input one line at a time. It splits the string up into the starting and ending IPv4 addresses, and uses that same pack-unpack routine to convert each to its decimal. It then calculates the prefix length by finding the difference between the start and end addresses, stringifying it to binary with &lt;a href=&#34;https://perldoc.perl.org/functions/sprintf.html&#34;&gt;sprintf&lt;/a&gt; and subtracting the number of bits from 32 (because IPv4 addresses are 32-bit integers).&lt;/p&gt;

&lt;p&gt;The trouble with the prefix length calculation is it uses stringification - sticking with numbers should be faster if there was a way to do it. Let&amp;rsquo;s recap what we know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can calculate the maximum (unsigned) 32-bit integer value using a base of 2: 2&lt;sup&gt;32&lt;/sup&gt; - 1&lt;/li&gt;
&lt;li&gt;IPv4 addresses are just another way of representing unsigned 32-bit integers&lt;/li&gt;
&lt;li&gt;With an input like &lt;code&gt;197.232.80.0 - 197.232.83.255&lt;/code&gt; we can calculate the difference between the two values (1023)&lt;/li&gt;
&lt;li&gt;We know the base is 2 and the result is 1023; we just don&amp;rsquo;t know what the exponent is: 2&lt;sup&gt;x&lt;/sup&gt; - 1 = 1023&lt;/li&gt;
&lt;li&gt;To solve for &lt;code&gt;x&lt;/code&gt;, we can use the logarithm function which is the inverse of exponentiation&lt;/li&gt;
&lt;li&gt;The solution is: x = log&lt;sub&gt;2&lt;/sub&gt; ⋅ (1023 + 1)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s the Perl solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $prefixlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $end_decimal &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $start_decimal) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; log(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It uses the &lt;a href=&#34;https://perldoc.perl.org/functions/log.html&#34;&gt;log&lt;/a&gt; function which uses the natural logarithm base &lt;em&gt;e&lt;/em&gt; (like the &lt;code&gt;ln&lt;/code&gt; button on a calculator), so it must be divided by &lt;code&gt;log(2)&lt;/code&gt; to act like log&lt;sub&gt;2&lt;/sub&gt;. Benchmarking this I was surprised to find that the &lt;code&gt;log&lt;/code&gt; solution is only a few percent faster than using &lt;code&gt;sprintf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Dan Book posted an IP address to decimal &lt;a href=&#34;https://www.reddit.com/r/perl/comments/d6kncb/creating_ip_address_tools_from_scratch/f0u1flu?utm_source=share&amp;amp;utm_medium=web2x&#34;&gt;solution&lt;/a&gt; that uses &lt;a href=&#34;https://metacpan.org/pod/Socket&#34;&gt;Socket&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How do I Open This?</title>
      <link>http://localhost:1313/article/how-do-i-open-this-/</link>
      <pubDate>Mon, 03 Jun 2019 18:26:42 +0000</pubDate>
      
      <guid>http://localhost:1313/article/how-do-i-open-this-/</guid>
      <description>

&lt;p&gt;When I&amp;rsquo;m working on code, I have to open a lot of files.  I work primarily at the command line, inside a vim editor.  On any given day I may need to translate some or all of the following into file paths that vim can understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack traces&lt;/li&gt;
&lt;li&gt;Perl module names&lt;/li&gt;
&lt;li&gt;Perl module names suffixed with subroutine names&lt;/li&gt;
&lt;li&gt;git-grep results&lt;/li&gt;
&lt;li&gt;GitHub URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figuring this stuff out isn&amp;rsquo;t generally that hard, but it can make your day just a little longer than it needs to be, so I wrote &lt;a href=&#34;https://metacpan.org/pod/ot&#34;&gt;ot&lt;/a&gt;: a command line utility provided by &lt;a href=&#34;https://metacpan.org/pod/Open::This&#34;&gt;Open::This&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using vim in examples, but ot also supports nvim, emacs,nano and pico, defaulting to whatever you have set in &lt;code&gt;$ENV{EDITOR}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;following-along&#34;&gt;Following Along&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be working out of a repository at &lt;a href=&#34;https://github.com/oalders/git-helpers&#34;&gt;https://github.com/oalders/git-helpers&lt;/a&gt;.  If you&amp;rsquo;d like to follow along:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oalders/git-helpers.git
$ cd git-helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;using-a-perl-module-name&#34;&gt;Using a Perl Module Name&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now in the root of the &lt;strong&gt;git-helpers&lt;/strong&gt; Git repository.  Let&amp;rsquo;s say we want to open the Git::Helpers module.  Translating a Perl module name into a file path isn&amp;rsquo;t all that hard.  Given something like Git::Helpers, I know that I&amp;rsquo;m likely (but not always) looking for a file called &lt;code&gt;Git/Helpers.pm&lt;/code&gt;.  This could be in lib, t/lib or some custom directory.  If I know exactly where to find this file, I can invoke vim directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if I&amp;rsquo;m not sure, or if I&amp;rsquo;m just lazy, this will get me to the same place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works because, by default, ot will search your lib and t/lib directories for local files. You can override this via the &lt;code&gt;$ENV{OPEN_THIS_LIBS}&lt;/code&gt; variable. It accepts a comma-separated list of libs.&lt;/p&gt;

&lt;p&gt;If the file can&amp;rsquo;t be found in one of the standard lib locations, ot will try to find an installed file on the system.  So, if we&amp;rsquo;re not in the root of the git-helpers repository, but we&amp;rsquo;ve previously installed Git::Helpers from CPAN&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot Git::Helpers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;might open open the following file: &lt;code&gt;~/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Git/Helpers.pm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-perl-module-at-a-subroutine-declaration&#34;&gt;Opening a Perl Module at a Subroutine Declaration&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take this a step further.  What if we want to open a file for a module but we also want to go straight to the correct subroutine declaration?  Something like &lt;code&gt;Git::Helpers::is_inside_work_tree()&lt;/code&gt;.  We could probably craft a fancy one-liner to do this, but today we are lazy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it.  This will Do The Right Thing.  (Note that in this case we had to quote the args to ot.  Your shell will likely require this as well.)&lt;/p&gt;

&lt;p&gt;We can do exactly the same thing for an installed module.  Try this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test::More::subtest()&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case it opens &lt;code&gt;/.plenv/versions/5.26.1/lib/perl5/site_perl/5.26.1/Test/More.pm&lt;/code&gt; at line 807, which is &lt;code&gt;sub subtest {&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-using-a-line-number&#34;&gt;Opening a File Using a Line Number&lt;/h2&gt;

&lt;h4 id=&#34;stack-traces&#34;&gt;Stack Traces&lt;/h4&gt;

&lt;p&gt;I see a lot of stack traces on any given day.  A relevant chunk of a stack trace might look like: &lt;code&gt;Died at lib/Git/Helpers.pm line 50.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Doing this by hand I might copy the file path and enter the following at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I&amp;rsquo;m feeling fancy, I might translate the line number into something that vim understands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim +50 lib/Git/Helpers.pm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, I can just copy the file location and line number and feed it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm line &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do the right thing and open &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; in vim at line 50.&lt;/p&gt;

&lt;h4 id=&#34;git-grep&#34;&gt;git-grep&lt;/h4&gt;

&lt;p&gt;The results of some searches, like &lt;code&gt;git grep&lt;/code&gt;, can contain line numbers as well as file names.  To configure this behaviour in git use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git config --global grep.lineNumber true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t want to configure this directly in git you can also search via &lt;code&gt;git grep --line-number foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got line numbers in our git grep output, we can use its output to give hints to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub _build_latest_release&amp;#39;&lt;/span&gt; .
lib/Git/Helpers/CPAN.pm:70:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having run the above search, we can copy paste the results to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers/CPAN.pm:70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 70.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-at-an-arbitrary-line-and-column&#34;&gt;Opening a File at an Arbitrary Line and Column&lt;/h2&gt;

&lt;p&gt;As we saw above, ot can open files at the correct line number.  Let&amp;rsquo;s get even lazier and have ot open our files at the correct line &lt;strong&gt;and&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;If you use  the &lt;code&gt;--vimgrep&lt;/code&gt; option with &lt;code&gt;ripgrep&lt;/code&gt; then you will see column numbers as well as line numbers with your search results.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rg --vimgrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt; .
./lib/Git/Helpers/CPAN.pm:20:17:    builder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_build_latest_release&amp;#39;&lt;/span&gt;,
./lib/Git/Helpers/CPAN.pm:70:5:sub _build_latest_release &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To open &lt;code&gt;lib/Git/Helpers/CPAN.pm&lt;/code&gt; at line 20 and column 17, simply copy/paste the rg output and pass it to ot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot ./lib/Git/Helpers/CPAN.pm:20:17&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-github-links-locally&#34;&gt;Opening Github Links Locally&lt;/h2&gt;

&lt;p&gt;Passing a full GitHub URL &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/a&gt;, to &lt;code&gt;ot&lt;/code&gt; will allow you to open the file locally, if it can be found in your relative file path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;lib/Git/Helpers.pm&lt;/code&gt; at line 50.&lt;/p&gt;

&lt;p&gt;Passing a truncated URL path is also valid, if the path parts exist locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot lib/Git/Helpers.pm#L50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;opening-a-locally-checked-out-file-at-github&#34;&gt;Opening a Locally Checked Out File at GitHub&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; flag will allow you to open your local files on GitHub.&lt;/p&gt;

&lt;p&gt;Any of the following commands can launch a browser with a GitHub URL (hopefully) containing the file you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers
$ ot -b &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Git::Helpers::is_inside_work_tree()&amp;#34;&lt;/span&gt;
$ ot -b Git::Helpers:75
$ ot -b Git::Helpers line &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, from the top level of the git-helpers repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot -b Git::Helpers:75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;a href=&#34;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&#34;&gt;https://github.com/oalders/git-helpers/blob/master/lib/Git/Helpers.pm#L75&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;opening-a-file-in-your-env-path&#34;&gt;Opening a File in Your &lt;code&gt;$ENV{PATH}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ot can also be used as a shortcut to inspect files which can be found inside your &lt;code&gt;$ENV{PATH}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ot perldoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;opens &lt;code&gt;~/.plenv/versions/5.26.1/bin/perldoc&lt;/code&gt; on my machine.  You can think of this as shorthand for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ which perldoc | xargs -o vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to add support for more editors or other formats of data, please &lt;a href=&#34;https://github.com/oalders/open-this/issues&#34;&gt;get in touch with me&lt;/a&gt; and we&amp;rsquo;ll see what we can do.&lt;/p&gt;

&lt;h2 id=&#34;see-also&#34;&gt;See Also&lt;/h2&gt;

&lt;p&gt;For other solutions to the problem of finding and opening files, I highly recommend &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/PathPicker&#34;&gt;fpp&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the right dictionary with Perl and Vim</title>
      <link>http://localhost:1313/article/using-the-right-dictionary-with-perl-and-vim/</link>
      <pubDate>Thu, 30 May 2019 08:45:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/using-the-right-dictionary-with-perl-and-vim/</guid>
      <description>

&lt;p&gt;I recently read James Summers&amp;rsquo; excellent article, &lt;a href=&#34;http://jsomers.net/blog/dictionary&#34;&gt;You&amp;rsquo;re probably using the wrong dictionary&lt;/a&gt; and was inspired to start using Webster&amp;rsquo;s 1913 edition myself. Using the instructions in the article, I was able to integrate searching the dictionary into my browser, but I spend most of my time working in the terminal, and wanted a command line solution.&lt;/p&gt;

&lt;p&gt;I got a text version of the dictionary from &lt;a href=&#34;https://archive.org/details/webstersunabridg29765gut&#34;&gt;archive.org&lt;/a&gt;, and set about writing a Perl script to search it.&lt;/p&gt;

&lt;h2 id=&#34;a-naive-search&#34;&gt;A naive search&lt;/h2&gt;

&lt;p&gt;Every entry in the 1913 text edition begins with the capitalized term at the beginning of a line followed by a newline, and the details about the entry. Webster&amp;rsquo;s definition for &amp;ldquo;llama&amp;rdquo; is typical:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LLAMA
Lla&amp;quot;ma, n. Etym: [Peruv.] (Zoöl.)

Defn: A South American ruminant (Auchenia llama), allied to the
camels, but much smaller and without a hump. It is supposed to be a
domesticated variety of the guanaco. It was formerly much used as a
beast of burden in the Andes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case it tells us that &amp;ldquo;llama&amp;rdquo; is a noun, originating from Peru. The abbreviation &amp;ldquo;Zoöl.&amp;rdquo; means it&amp;rsquo;s a Zoölogical term. Wiktionary has a handy &lt;a href=&#34;https://en.wiktionary.org/wiki/Wiktionary:Abbreviations_in_Webster&#34;&gt;list&lt;/a&gt; of Webster&amp;rsquo;s abbreviations.&lt;/p&gt;

&lt;p&gt;A single term can contain uppercase letters, numbers, spaces, dashes and single quotes. When there are alternative spellings for the same term, each spelling appears on the same line separated by a semicolon and space, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WOLVERENE; WOLVERINE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find matching entries in the dictionary, I want to search for matching terms, print their content and stop printing when I get to the next term:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uc join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, @ARGV;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $entry_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^[A-Z][A-Z0-9&amp;#39; ;-]*$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^$search_term/&lt;/span&gt;;

open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$search_term/&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $next_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readline $dict;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($next_line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt;) {
     seek $dict, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;length($next_line), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
     &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
   }
   $output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $next_line;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $output;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script reads a search term from its command line args, converting it to uppercase. It then opens the dictionary which is encoded in &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO/IEC_8859-1&#34;&gt;Latin 1&lt;/a&gt;, and scans for lines matching the pattern: &lt;code&gt;qr/^[A-Z][A-Z0-9&#39; ;-]*$/&lt;/code&gt;, which tries to only match lines marking the beginning of an entry (&amp;ldquo;WOLVERENE; WOLVERINE&amp;rdquo;). It then uses &lt;code&gt;readline&lt;/code&gt; to slurp the dictionary definition, until it finds the next entry, at which point it sets the filehandle pointer back one line, and prints the text it matched.&lt;/p&gt;

&lt;p&gt;One of the nice properties of Latin 1 is every character is a single byte, which means I don&amp;rsquo;t need to worry about &lt;a href=&#34;https://perldoc.perl.org/functions/seek.html&#34;&gt;seek&lt;/a&gt; breaking on a character because &lt;a href=&#34;https://perldoc.perl.org/functions/length.html&#34;&gt;length&lt;/a&gt; was counting in characters, but &lt;code&gt;seek&lt;/code&gt; uses bytes.&lt;/p&gt;

&lt;p&gt;Run run the script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./webster-search.pl tower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my laptop it takes about a second to run, which isn&amp;rsquo;t bad considering the dictionary is 27mb.&lt;/p&gt;

&lt;h2 id=&#34;a-faster-search&#34;&gt;A faster search&lt;/h2&gt;

&lt;p&gt;One obvious improvement is to have the script exit once it finds an entry which is alphabetically higher than the search term. The entry after &amp;ldquo;LLAMA&amp;rdquo; is &amp;ldquo;LLANDEILO GROUP&amp;rdquo;, which I can compare using &lt;a href=&#34;https://perldoc.perl.org/functions/cmp.html&#34;&gt;cmp&lt;/a&gt;. If the search term sorts earlier than the comparison term, &lt;code&gt;cmp&lt;/code&gt; will return 1, if they match 0, otherwise it will return -1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LLAMA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LLANDEILO GROUP&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# -1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An interesting property of Webster&amp;rsquo;s 1913 dictionary as a data source is that it never changes, so I can take advantage of that by building a static index for each letter&amp;rsquo;s starting point. Each letter&amp;rsquo;s section begins with the capitalized letter alone on a line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @alphabet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^$alphabet[0]$/&lt;/span&gt;;
  printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s =&amp;gt; %d\n&amp;#34;&lt;/span&gt;, shift @alphabet, tell $dict;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @alphabet;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this script encounters a new letter&amp;rsquo;s section, it calls &lt;a href=&#34;https://perldoc.perl.org/functions/tell.html&#34;&gt;tell&lt;/a&gt; on the filehandle to determine the byte location, and then prints the details to stdout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./build-index.pl
A =&amp;gt; 601
B =&amp;gt; 1796502
C =&amp;gt; 3293436
D =&amp;gt; 6039049
E =&amp;gt; 7681559
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curiously this index data stopped at &amp;ldquo;S&amp;rdquo; the first time I ran it. That&amp;rsquo;s because the copies of Webster&amp;rsquo;s 1913 dictionary on archive.org are missing the &amp;ldquo;T&amp;rdquo; entry! I found the entry &lt;a href=&#34;http://www.webster-dictionary.org/definition/T&#34;&gt;online&lt;/a&gt; and added it to my copy.&lt;/p&gt;

&lt;p&gt;By incorporating this index data into my script, I&amp;rsquo;ll jump to the section of the first letter of the search term, and start searching from there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uc join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, @ARGV;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $entry_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^[A-Z][A-Z0-9&amp;#39; ;-]*$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $search_pattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qr/^$search_term/&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
  A &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;601&lt;/span&gt;,
  B &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1796502&lt;/span&gt;,
  C &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3293436&lt;/span&gt;,
  D &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6039049&lt;/span&gt;,
  E &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7681559&lt;/span&gt;,
  F &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8833301&lt;/span&gt;,
  G &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10034091&lt;/span&gt;,
  H &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10926753&lt;/span&gt;,
  I &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11930292&lt;/span&gt;,
  J &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13148994&lt;/span&gt;,
  K &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13380269&lt;/span&gt;,
  L &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13586035&lt;/span&gt;,
  M &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14532408&lt;/span&gt;,
  N &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15916448&lt;/span&gt;,
  O &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16385339&lt;/span&gt;,
  P &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17042770&lt;/span&gt;,
  Q &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19439223&lt;/span&gt;,
  R &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19610041&lt;/span&gt;,
  S &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21015876&lt;/span&gt;,
  T &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24379537&lt;/span&gt;,
  U &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25941093&lt;/span&gt;,
  V &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26405366&lt;/span&gt;,
  W &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26925697&lt;/span&gt;,
  X &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27748359&lt;/span&gt;,
  Y &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27774096&lt;/span&gt;,
  Z &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27866401&lt;/span&gt;,
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $index{ substr $search_term, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; };
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dict, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;:encoding(latin1)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-1913.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die $!;
seek $dict, $start, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $found_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undef;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;$dict&amp;gt;&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $_ &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; $entry_pattern;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($_ &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; $search_term) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $next_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readline $dict;
     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($next_line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/$entry_pattern/&lt;/span&gt;) {
       seek $dict, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;length($next_line), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt;;
     }
     $output &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; $next_line;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; $output;
    $found_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $found_match &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ($search_term &lt;span style=&#34;color:#f92672&#34;&gt;cmp&lt;/span&gt; $_) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Searching for &amp;ldquo;tower&amp;rdquo; this script finishes in 70ms, which is a 14x improvement over the initial script. Not bad for 2 simple optimizations. I could spend time tuning this further with a more specific index, or an optimized regex, but this is fast enough for now.&lt;/p&gt;

&lt;h2 id=&#34;searching-from-vim&#34;&gt;Searching from Vim&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s fairly straightforward to integrate the Perl script into Vim with vimscript plugin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; webster-search.vim&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;parent_dir&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;sfile&amp;gt;:p:h&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;perl_script&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;webster-search.pl&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; =  &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;parent_dir&lt;/span&gt; . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; . &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;perl_script&lt;/span&gt; . &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; . &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; &amp;#34;let output = system(&amp;#39;&amp;#34; . l:command . &amp;#34;&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vnew&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;setlocal&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nobuflisted&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buftype&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;nofile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bufhidden&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;wipe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noswapfile&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setline&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt; &amp;#34;\n&amp;#34;))&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;&amp;gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line obtains the parent directory of the plugin file, to avoid hard coding a path to the Perl script. Next it adds a function called &amp;ldquo;WebsterSearch&amp;rdquo; which calls the Perl script with a search term, printing the output into a new vertical window. The last line calls the &lt;code&gt;command&lt;/code&gt; function to register the user defined function, and avoid having to dispatch to it using &lt;code&gt;call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use the plugin, I map a shortcut in my .vimrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;cWORD&amp;gt;&amp;#39;&lt;/span&gt;))&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now whenever my cursor is over a word I want to lookup in the dictionary, I press &amp;ldquo;\d&amp;rdquo; and I get Webster&amp;rsquo;s entry right there in my terminal! One downside of &lt;code&gt;cWORD&lt;/code&gt; is it will only match the first word under the cursor, but some dictionary entries contain spaces (&amp;ldquo;ad hominem&amp;rdquo;). For those rarer cases, I can highlight the words in visual mode, and then execute a dictionary search:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WebsterSearch&lt;/span&gt;(@*)&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This maps the same shortcut when Vim is in visual mode; &lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; clears the range automatically entered by Vim, then it calls the function passing the register variable &lt;code&gt;@*&lt;/code&gt; (the last highlighted text) as the search term.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve uploaded this code to &lt;a href=&#34;https://github.com/dnmfarrell/WebsterSearch&#34;&gt;GitHub&lt;/a&gt;, along with Vim install instructions.&lt;/p&gt;

&lt;p&gt;An alternative to searching the raw dictionary text is to use &lt;a href=&#34;http://gcide.gnu.org.ua/&#34;&gt;GCIDE&lt;/a&gt; (h/t &lt;a href=&#34;https://blog.afoolishmanifesto.com/&#34;&gt;frew&lt;/a&gt;) which is based on Webster&amp;rsquo;s 1913 dictionary, and has machine-readable markup for easier parsing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork yeah! Part 2</title>
      <link>http://localhost:1313/article/fork-yeah-part-2/</link>
      <pubDate>Sat, 27 Apr 2019 17:28:43 +0000</pubDate>
      
      <guid>http://localhost:1313/article/fork-yeah-part-2/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/article/fork-yeah-/&#34;&gt;part one&lt;/a&gt; of this article I described how to use Perl&amp;rsquo;s &lt;code&gt;fork&lt;/code&gt; function to write concurrent programs. Here are a couple of other ways.&lt;/p&gt;

&lt;h2 id=&#34;wnohang&#34;&gt;WNOHANG&lt;/h2&gt;

&lt;p&gt;Usually &lt;code&gt;waitpid&lt;/code&gt; is a blocking call which returns when a child process exits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}

waitpid $pid, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example the second argument to &lt;code&gt;waitpid&lt;/code&gt; is 0, which is the flags &lt;a href=&#34;https://perldoc.perl.org/functions/waitpid.html&#34;&gt;argument&lt;/a&gt;. But what if we wanted to do additional processing in the parent process, whilst still occasionally checking for reaped children?&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://metacpan.org/pod/POSIX&#34;&gt;POSIX&lt;/a&gt; module includes the &lt;code&gt;WNOHANG&lt;/code&gt; constant which makes the &lt;code&gt;waitpid&lt;/code&gt; call non-blocking. Instead it returns immediately with an integer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-1 indicates no child process exists for that process id, or none at all if pid of -1 was supplied&lt;/li&gt;
&lt;li&gt;0 indicates there is a child process but it has not changed state yet&lt;/li&gt;
&lt;li&gt;2-32768 is the pid of the child process which exited (it will never be 1 - that&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Init&#34;&gt;init&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; POSIX &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WNOHANG&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kid;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;# do additional processing&lt;/span&gt;
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  $kid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitpid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, WNOHANG;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($kid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve changed the code to wait for the child to exit in a &lt;code&gt;do&lt;/code&gt; &lt;code&gt;while&lt;/code&gt; loop, each iteration calling &lt;code&gt;waitpid&lt;/code&gt; with &lt;code&gt;WNOHANG&lt;/code&gt; to allow me to undertake any additional processing I want to in the body of the &lt;code&gt;do&lt;/code&gt; block. Without &lt;code&gt;WNOHANG&lt;/code&gt;, this would loop once per reaped child; with it, I can still collect exiting child processes, but the loop may iterate thousands of times in the meantime.&lt;/p&gt;

&lt;h2 id=&#34;wuntraced&#34;&gt;WUNTRACED&lt;/h2&gt;

&lt;p&gt;The POSIX module provides &lt;a href=&#34;https://metacpan.org/pod/POSIX#WAIT&#34;&gt;waitpid&lt;/a&gt; constants and macros. The other constant is &lt;code&gt;WUNTRACED&lt;/code&gt; which causes &lt;code&gt;waitpid&lt;/code&gt; to return if the child process is stopped (but not exited).&lt;/p&gt;

&lt;p&gt;The parent can then take appropriate action: it might record the stopped process somewhere, or choose to resume the child by sending it a continue signal (SIGCONT):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; POSIX &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:sys_wait_h&amp;#39;&lt;/span&gt;;
$SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { exit };

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child going to sleep\n&amp;#34;&lt;/span&gt;;
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child PID: $pid\n&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitpid $pid, WUNTRACED;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (WIFSTOPPED(${&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;CHILD_ERROR_NATIVE})) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending SIGCONT to child\n&amp;#34;&lt;/span&gt;;
    kill &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONT&amp;#39;&lt;/span&gt;, $kid;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    exit;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve used the group &lt;code&gt;sys_wait_h&lt;/code&gt; to import multiple symbols from the POSIX module. This time, both child and parent are in infinite while loops. If I pause the child by sending it SIGSTOP, &lt;code&gt;waitpid&lt;/code&gt; will return. The parent tests whether the child was stopped with the macro &lt;code&gt;WIFSTOPPED&lt;/code&gt;, if so it sends SIGCONT to the child via &lt;code&gt;kill&lt;/code&gt;, resuming it.&lt;/p&gt;

&lt;p&gt;Running the script as &lt;code&gt;wuntraced.pl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./wuntraced.pl
child PID: 15013
child going to sleep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another terminal I send SIGSTOP to the child:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill -s STOP 15013
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the parent resumes the child:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sending SIGCONT to child
child going to sleep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both processes keep running until I send SIGINT to the child:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kill -s INT 15013
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;combining-constants&#34;&gt;Combining Constants&lt;/h2&gt;

&lt;p&gt;WNOHANG and WUNTRACED are not mutually exclusive: I can change waitpid&amp;rsquo;s behavior by combining both constants into a single flag value with binary or (&lt;code&gt;|&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Data::Dumper &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dumper&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; POSIX &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:sys_wait_h&amp;#39;&lt;/span&gt;;

$SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { exit };
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %pids;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    $pids{$pid} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
      duration &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; undef,
      started  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; time,
      stops    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    };
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitpid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, WNOHANG &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; WUNTRACED;

  &lt;span style=&#34;color:#75715e&#34;&gt;# do additional processing&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; Dumper(&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%pids);
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (WIFSTOPPED(${&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;CHILD_ERROR_NATIVE})) {
    $pids{$kid}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{stops}&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    kill &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONT&amp;#39;&lt;/span&gt;, $kid;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($kid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $exit_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time;
    $pids{$kid}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{duration} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $exit_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; $pids{$kid}&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{started};
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($kid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    exit;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code forks 3 children which run forever, and the parent tracks statistics for each child: the start time, duration and number of times it received SIGSTOP. The parent will resume any stopped child with SIGCONT. The parent prints the stats every 3 seconds, and exits when all the children have exited.&lt;/p&gt;

&lt;p&gt;Running this code, I can play around by sending SIGSTOP and SIGINT to different child processes and watch the stats update. Although this is a simple example, by using &lt;code&gt;WNOHANG&lt;/code&gt; and &lt;code&gt;WUNTRACED&lt;/code&gt; you can see how they change the parent process&amp;rsquo;s role from a passive observer to a supervisor which can actively manage its sub-processes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Consistency in TMTOWTDI Perl</title>
      <link>http://localhost:1313/article/consistency-in-tmtowtdi-perl/</link>
      <pubDate>Mon, 08 Apr 2019 20:46:23 +0000</pubDate>
      
      <guid>http://localhost:1313/article/consistency-in-tmtowtdi-perl/</guid>
      <description>

&lt;p&gt;As a Perl developer I have a lot of freedom. TMTOWTDI (There&amp;rsquo;s More Than One Way To Do It) allows me to code how I want to code. I can solve a problem using whatever method I feel works best, whatever works for me. That&amp;rsquo;s a cool thing to have, but at the same time, after working on someone else&amp;rsquo;s code for a while and hating the experience, I can understand TMTOWTDIBSCINABTE (There&amp;rsquo;s More Than One Way To Do It, But Sometimes Consistency Is Not A Bad Thing Either) better as a principle.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been coding in Perl for about 9 years. I&amp;rsquo;ve been around the block a few times, at Evozon we work on a few legacy projects, so I&amp;rsquo;ve seen my fair share of code that makes me a proponent of always coding for the maintainer.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a quote floating around the internet for quite some time now, that sums up things pretty well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m not going to lie, I&amp;rsquo;ve been in a few situations where knowing the person who coded the monstrosity that I had to handle would have resulted in some very bad decisions on my part.&lt;/p&gt;

&lt;p&gt;Freedom is great, consistency is better. It&amp;rsquo;s better for you, when you end up working on your own code in a year, it&amp;rsquo;s better for your team and it&amp;rsquo;s better for whoever else will end up working on that project in the future.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re involved in a project that has multiple developers you will have different ideas and different ways of writing code. I work in a cross-functional team of more than 20 people and for consistent code, we use some small tricks that keeps the code easy to maintain - and us happy. Consistent code improves code quality and eliminates some potential bugs.&lt;/p&gt;

&lt;p&gt;My recommendation is to use a git pre-commit hook that runs &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/perltidy&#34;&gt;perltidy&lt;/a&gt;. The latter might be more cosmetic than anything else, but I find it helpful. I know that there are other possible tools, but I think that these three are a good combination to use, in order to have practical coding standards and consistent-looking code.&lt;/p&gt;

&lt;h2 id=&#34;set-up-perl-critic-and-perl-tidy&#34;&gt;Set Up Perl::Critic and Perl::Tidy&lt;/h2&gt;

&lt;p&gt;You can install &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt; and &lt;a href=&#34;{{ mcpan &amp;quot;Perl::Tidy&amp;quot; &amp;gt;}}&#34;&gt;Perl::Tidy&lt;/a&gt; from CPAN or they might be available on your package manager. Once installed, you&amp;rsquo;ll need to configure them.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;.perlcriticrc&lt;/code&gt; my suggestion is to start with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;severity = 5
verbose = %f: [%p] %m at line %l, column %c (Severity %s).\n%d\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These options are described in the Perl::Critic &lt;a href=&#34;https://metacpan.org/pod/Perl::Critic#CONFIGURATION&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a basic configuration, which you can build upon based on your project and team needs. Increasing the severity might block simple changes from being commited, but in the long run makes your codebase more readable and easier to use.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;.perltidyrc&lt;/code&gt; I would suggest to have a team discussion to determine the following items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;brace styling&lt;/li&gt;
&lt;li&gt;length of lines (my suggestions is to have it at least 120 characters, but I know there are many people that still like it at 80),&lt;/li&gt;
&lt;li&gt;number of spaces or tabs per indentation&lt;/li&gt;
&lt;li&gt;whatever else you think that your team needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example with my file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-i=4
-ci=4
-bar
-ce
-nsbl
-cti=0
-sct
-sot
-pt=0
-sbt=1
-bt=1
-bbt=0
-nsfs
-nolq
-l=120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are described in the Perl::Tidy &lt;a href=&#34;https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy#FORMATTING-OPTIONS&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Commit both &lt;code&gt;.perlcriticrc&lt;/code&gt; and &lt;code&gt;.perltidyrc&lt;/code&gt; to your repo.&lt;/p&gt;

&lt;h2 id=&#34;set-up-the-git-pre-commit-hook&#34;&gt;Set Up the Git Pre-commit Hook&lt;/h2&gt;

&lt;p&gt;For existing projects, you&amp;rsquo;ll want to run perlcritic and perltidy on all existing files &lt;em&gt;before&lt;/em&gt; creating this pre-commit hook, fixing any files which don&amp;rsquo;t pass perlcritic or break perltidy. This is so that each subsequent commit will only be critiqued and tidied on the changes contained in the commit.&lt;/p&gt;

&lt;p&gt;To setup the pre-commit hook, create the file &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; in your root project directory. This file will be executed every time you type the &lt;code&gt;git commit&lt;/code&gt; command and ru on the files included in the commit.&lt;/p&gt;

&lt;p&gt;The file is a shell script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;files_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git diff --cached --name-only&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in $files_commit; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ pm|pl$ &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#run perlcritic first so that we avoid unnecessary tidying
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ! &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perlcritic $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source OK&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There was some error when running perlcritic on &lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perlcritic $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
            exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perltidy -b -bext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bk&amp;#39;&lt;/span&gt; $file&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
         echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;There was an error when running perltidy on &lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;; please see the error file for more info&amp;#34;&lt;/span&gt;
           exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

git add $files_commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every file being committed, this code first runs perlcritic - if it reports a problem, then the script exits, canceling the commit. If perlcritic passes, then it runs perltidy on the same file, and if perltidy exits with an error, then it also aborts the commit. In this example, I am checking only for .pm and .pl files, you can add other type of files there too, like test files, pod files and so on.&lt;/p&gt;

&lt;p&gt;I know that this won&amp;rsquo;t solve every problem, but I think combining Perl::Critic and Perl::Tidy and running them automatically is good step towards having a consistent and readable codebase.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork yeah!</title>
      <link>http://localhost:1313/article/fork-yeah-/</link>
      <pubDate>Mon, 01 Apr 2019 12:00:51 +0000</pubDate>
      
      <guid>http://localhost:1313/article/fork-yeah-/</guid>
      <description>

&lt;p&gt;Recently at work I had to speed up a Perl script that processed files. Perl can spawn multiple processes with the &lt;code&gt;fork&lt;/code&gt; function, but things can go awry unless you manage the subprocesses correctly. I added forking to the script and was able to improve the script&amp;rsquo;s throughput rate nearly 10x, but it took me a few attempts to get it right. In this article I&amp;rsquo;m going to show you how to use &lt;code&gt;fork&lt;/code&gt; safely and avoid some common mistakes.&lt;/p&gt;

&lt;p&gt;N.B. Windows users: as the &lt;code&gt;fork&lt;/code&gt; system call is unavailable on Windows, these examples may not work as described, as the behavior is &lt;a href=&#34;https://perldoc.perl.org/perlfork.html&#34;&gt;emulated&lt;/a&gt; by Perl.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
&lt;span style=&#34;color:#75715e&#34;&gt;# now two processes are executing&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}

waitpid $pid, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script creates a child process with &lt;code&gt;fork&lt;/code&gt; which returns the process id of the child to the parent process, and 0 to the (newly created) child process. At this point two processes are executing the remainder of the code, the parent and the child. The clause &lt;code&gt;if ($pid == 0)&lt;/code&gt; will be only be true for the child, causing it to execute the if block. The if block simply sleeps for 1 second and the &lt;code&gt;exit&lt;/code&gt; function causes the child process to terminate. Meanwhile the parent has skipped over the &lt;code&gt;if&lt;/code&gt; block and calls &lt;code&gt;waitpid&lt;/code&gt; which will not return until the child exits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B.&lt;/em&gt; I can replace the &lt;code&gt;sleep&lt;/code&gt; calls with any arbitrary processing I want the subprocesses to do, but sleep is a good stand in, as it makes analyzing the program easier.&lt;/p&gt;

&lt;p&gt;This is such a simple example, what could go wrong with it? Well for one thing, the &lt;code&gt;fork&lt;/code&gt; call may fail if the machine doesn&amp;rsquo;t have enough spare memory. So we need to check for that condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to fork: $!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; defined $pid;

&lt;span style=&#34;color:#75715e&#34;&gt;# now two processes are executing&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}

waitpid $pid, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve inserted a conditional die statement which will be thrown if &lt;code&gt;fork&lt;/code&gt; fails. But is there a deeper problem here? What if instead of sleeping for one second, the child called a function which returned immediately? We might have a race between the parent and the child - if the child exits before the parent calls &lt;code&gt;waitpid&lt;/code&gt; what could happen?&lt;/p&gt;

&lt;p&gt;It wouldn&amp;rsquo;t be unreasonable to think that the operating system might reuse the child&amp;rsquo;s process id for a different program, and our parent process would suddenly be waiting for an arbitrary process to exit. Not what we had intended at all!&lt;/p&gt;

&lt;p&gt;Fortunately this is not a risk: when a child process exits, the operating system is not allowed to reclaim its resources until the parent calls &lt;code&gt;wait&lt;/code&gt; (or &lt;code&gt;waitpid&lt;/code&gt;) on it, which &amp;ldquo;reaps&amp;rdquo; the child. Secondly &lt;code&gt;waitpid&lt;/code&gt; only works on child processes of the calling process: if I pass a pid of a completely separate process, &lt;code&gt;waitpid&lt;/code&gt; returns immediately with -1.&lt;/p&gt;

&lt;h2 id=&#34;multiple-workers&#34;&gt;Multiple workers&lt;/h2&gt;

&lt;p&gt;As far as concurrency goes, the simple example isn&amp;rsquo;t very good. It only spawns one subprocess and we&amp;rsquo;re unable to scale it with additional processes without re-writing the code. Here&amp;rsquo;s my new version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $max_workers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$max_workers) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
  die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to fork: $!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; defined $pid;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $pid;

  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kid;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
  $kid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitpid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($kid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script reads an argument for the number of workers, or defaults to 1. It then forks &lt;code&gt;$max_workers&lt;/code&gt; number of child processes. Notice how &lt;code&gt;next if $pid&lt;/code&gt; causes the parent to jumps to the next loop iteration, where it forks another worker over and over until it exits the loop. Meanwhile the child processes sleep for 1 second and exit.&lt;/p&gt;

&lt;p&gt;So whilst the child processes are sleeping, the parent process has to wait for them. Unfortunately now we have more than one child &lt;code&gt;$pid&lt;/code&gt; to monitor, so which value should I pass to &lt;code&gt;waitpid&lt;/code&gt;? Luckily waitpid has a shortcut for this, I can pass &lt;code&gt;-1&lt;/code&gt; as the process id, and it will block until &lt;em&gt;any&lt;/em&gt; child process exits, returning the pid of the exiting child. So I wrap this in a &lt;code&gt;do..while&lt;/code&gt; loop, which will call &lt;code&gt;waitpid&lt;/code&gt; over and over until it returns -1 or zero, both of which indicate there are no more children to reap.&lt;/p&gt;

&lt;p&gt;This code is better than the simple example as it can scale to an arbitrary number of worker subprocesses. But it contains (at least) two issues.&lt;/p&gt;

&lt;p&gt;Imagine we run this script with 5 workers, it&amp;rsquo;s possible that the &lt;code&gt;fork&lt;/code&gt; call may fail as the machine runs out of memory. The parent would then call &lt;code&gt;die&lt;/code&gt; printing the error and exiting, but that would leave several child processes still running, with no parent process. These become zombie processes, given the parent process id 1 (init), which calls wait on them cleaning them up.&lt;/p&gt;

&lt;p&gt;The second issue is related to using &lt;code&gt;waitpid -1, 0&lt;/code&gt; to catch any exiting child process. Imagine this script is run by a wrapper program, which captures its output and streams it to another process. The wrapper program forks a child, which will stream the script&amp;rsquo;s output, then it execs the script in its own parent process, effectively injecting a child process into the script. That will cause my script to hang permanently, as the injected child won&amp;rsquo;t exit until the script finishes.&lt;/p&gt;

&lt;h2 id=&#34;multiple-workers-redux&#34;&gt;Multiple workers, redux&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;

$SIG{INT} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $SIG{TERM} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; { exit };

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $max_workers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $parent_pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$$&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @children;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$max_workers) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;defined $pid) {
    warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to fork: $!&amp;#34;&lt;/span&gt;;
    kill &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TERM&amp;#39;&lt;/span&gt;, @children;
    exit;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; ($pid) {
    push @children, $pid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;;
  }
  sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  exit;
}
wait_children();

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wait_children&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (scalar @children) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $children[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $kid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitpid $pid, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reaped $pid ($kid)\n&amp;#34;&lt;/span&gt;;
    shift @children;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($parent_pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $$) {
    wait_children();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an improved version of my multiple workers script. I&amp;rsquo;ve added signal handlers for INT (press Ctrl-C on the keyboard) and TERM that cause Perl to exit cleanly. If &lt;code&gt;fork&lt;/code&gt; fails, the parent sends a TERM to all child processes and then exits itself. I figure that if &lt;code&gt;fork&lt;/code&gt; fails, the machine is probably out of memory, and the OOM Killer can&amp;rsquo;t be far away, so it&amp;rsquo;s better to shutdown orderly than have processes meet an untimely end from the Grim (process) Reaper.&lt;/p&gt;

&lt;p&gt;The sub &lt;code&gt;wait_children&lt;/code&gt; performs a blocking wait call on the pids forked by the parent. This avoids the issue of waiting for child processes not created by the script itself. Note that it doesn&amp;rsquo;t remove any element from &lt;code&gt;@children&lt;/code&gt; &lt;em&gt;until&lt;/em&gt; the reap is successful. That avoids the error where the script starts running, the parent forks the child processes and shifts &lt;code&gt;@children&lt;/code&gt;, starts a blocking waitpid call, then receives an INT/TERM signal, which would cause &lt;code&gt;wait_children&lt;/code&gt; to return immediately, and then be called again in the &lt;code&gt;END&lt;/code&gt; block, however one of of the pids will now be missing from &lt;code&gt;@children&lt;/code&gt; and become a zombie process.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;END&lt;/code&gt; block fires when every process exits. If the exiting process is the parent, it will call &lt;code&gt;wait_children&lt;/code&gt; again to cleanup any resident subprocesses. In a Real World™ script, with workers that do more than &lt;code&gt;sleep&lt;/code&gt;, this might be a good place to add any additional cleanup needed for the child process; such deleting any temporary files created.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Perl makes it easy to write concurrent code, and easy to make mistakes. If you&amp;rsquo;re not worried about &lt;code&gt;fork&lt;/code&gt; failing, I recommend using &lt;a href=&#34;https://metacpan.org/pod/Parallel::ForkManager&#34;&gt;Parallel::ForkManager&lt;/a&gt;, which has a nice interface, tracks the pids it creates for you, and provides a data-sharing mechanism for subprocesses.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re writing concurrent Perl and struggling, run your code with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ strace -e process,signal /path/to/your/program
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so you can see precisely when child processes are exiting and what signals are being sent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validating untrusted input: numbers</title>
      <link>http://localhost:1313/article/validating-untrusted-input-numbers/</link>
      <pubDate>Mon, 03 Dec 2018 09:10:38 +0000</pubDate>
      
      <guid>http://localhost:1313/article/validating-untrusted-input-numbers/</guid>
      <description>

&lt;p&gt;Validating untrusted input safely is critical for application security: SQL injection, XSS and malicious file upload are common attacks which succeed because the user&amp;rsquo;s input is not vetted correctly.&lt;/p&gt;

&lt;p&gt;Numbers are problematic: negative numbers (&amp;ldquo;the sales price was -$500&amp;rdquo;), very large numbers (&amp;ldquo;my account balance is 9,223,372,036,854,775,807&amp;rdquo;) or not-a-number (&amp;ldquo;rm -rf /&amp;rdquo;) can all wreak havoc if not handled with care.&lt;/p&gt;

&lt;p&gt;Fortunately, Perl has robust capabilities for validating input but there are some edge cases to be aware of that make answering &amp;ldquo;is $x a number?&amp;rdquo; more difficult than you might think it would be.&lt;/p&gt;

&lt;h2 id=&#34;pattern-matching&#34;&gt;Pattern matching&lt;/h2&gt;

&lt;p&gt;Part of the problem of course, is that numbers come in more varieties than we commonly assume there to be. Regexes are a natural fit for common cases like decimal integer validation: for example &lt;code&gt;/^\d+$/&lt;/code&gt; would confirm the input contains only digits. That might be enough for your application but be aware that it doesn&amp;rsquo;t handle all permutations of integers. What if you want to accept negative numbers?&lt;/p&gt;

&lt;p&gt;You could update the regex to accept an optional minus:  &lt;code&gt;/^-?\d+$/&lt;/code&gt; or use a standardized regex from &lt;a href=&#34;https://metacpan.org/pod/Regexp::Common::number&#34;&gt;Regexp::Common::number&lt;/a&gt;, which also has patterns for matching decimal places, thousands separators and other common-but-tricky things to match.&lt;/p&gt;

&lt;p&gt;Large integers may also fail to match &lt;code&gt;\d&lt;/code&gt;. Perl has three different ways to store numbers: as native C integers, as 8 byte floating point, or as decimal strings in &amp;ldquo;e&amp;rdquo; notation (see &lt;a href=&#34;https://perldoc.perl.org/perlnumber.html&#34;&gt;perlnumber&lt;/a&gt;). On my machine, Perl stores &lt;code&gt;123456789012345678905&lt;/code&gt; as the decimal string &lt;code&gt;1.23456789012346e+20&lt;/code&gt;, which doesn&amp;rsquo;t match an integer-only regex. 8 byte floating point and decimal strings are imprecise, so if you need to accept integers larger than your machine architecture (32bit or 64 bit), you should use a module like &lt;a href=&#34;https://metacpan.org/pod/Math::BigInt&#34;&gt;Math::BigInt&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;If you have Perl&amp;rsquo;s &lt;a href=&#34;https://perldoc.perl.org/perlsec.html&#34;&gt;taint mode&lt;/a&gt; enabled, regex captures are the correct way to &amp;ldquo;de-taint&amp;rdquo; input, in which case you&amp;rsquo;ll have no choice but to use them.&lt;/p&gt;

&lt;h2 id=&#34;looks-like-a-number&#34;&gt;Looks like a number&lt;/h2&gt;

&lt;p&gt;A complementary technique to using a regex is to use the function &lt;code&gt;looks_like_number&lt;/code&gt; from &lt;a href=&#34;https://metacpan.org/pod/Scalar::Util&#34;&gt;Scalar::Util&lt;/a&gt;. This is a boolean function which returns true if the variable looks like a number to the Perl interpreter.&lt;/p&gt;

&lt;p&gt;Unlike simple regexes, it recognizes negative numbers and decimal strings just fine, but it has its own quirks that you should know about. For example, all of these strings &amp;ldquo;look like numbers&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NaN
-nan
inf
infinity
-infinity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uh oh!&lt;/p&gt;

&lt;p&gt;The other quirk of &lt;code&gt;looks_like_number&lt;/code&gt; exists in older versions of Scalar::Util (up to v1.38, which shipped with Perl 5.20): its return value changes depending on the value of the variable being checked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MScalar::Util=looks_like_number -e &#39;print looks_like_number($_), &amp;quot;\n&amp;quot; for (1,&amp;quot;5&amp;quot;,&amp;quot;5e60&amp;quot;)&#39;
16842752
1
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because &lt;code&gt;looks_like_number&lt;/code&gt; is returning the Perl interpreter&amp;rsquo;s C function return value which may include a binary ORing of several different flags Perl keeps for each variable (&lt;a href=&#34;https://stackoverflow.com/questions/19201234/behavior-of-scalarutillooks-like-number-in-perl/19202153#19202153&#34;&gt;stackoverflow&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;All of these &lt;em&gt;are&lt;/em&gt; true values, so it shouldn&amp;rsquo;t be a problem if you don&amp;rsquo;t write conditions expecting the return value to be 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Scalar::Util &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;looks_like_number&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# wrong&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (looks_like_number($foo) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# right!&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (looks_like_number($foo)) &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-observer-effect&#34;&gt;The Observer Effect&lt;/h2&gt;

&lt;p&gt;Another edge case in Perl is that the act of observing a scalar&amp;rsquo;s value can change the scalar&amp;rsquo;s type from number to string.&lt;/p&gt;

&lt;p&gt;Perl scalars can contain different types like strings, integers and floating point numbers. This is usually convenient: if you need to print a number, you don&amp;rsquo;t have to cast it to a string first because Perl tries to Do the Right Thing™. Scalars are &lt;a href=&#34;https://www.effectiveperlprogramming.com/2011/12/create-your-own-dualvars/&#34;&gt;dualvars&lt;/a&gt;, for efficiency, the Perl interpreter casts the number to a string and stores it in the scalar&amp;rsquo;s struct string slot, so if the scalar is interpolated a second time, Perl doesn&amp;rsquo;t need to cast it to a string again.&lt;/p&gt;

&lt;p&gt;A common way this issue manifests itself is when serializing a Perl data structure to JSON. Scalars which contain numbers when stringified, are then serialized to JSON as strings, instead of integers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -MJSON -E &#39;my $n = 1; say encode_json([$n]); say &amp;quot;$n&amp;quot;; say encode_json([$n])&#39;
[1]
1
[&amp;quot;1&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interpolating a number in a string or matching it against a regex both cause the number to string conversion. Depending on your requirements, this might not matter, but if it does, when validating number input, make a local copy of the variable first so that your validation routines don&amp;rsquo;t subtly change the variable type.&lt;/p&gt;

&lt;h2 id=&#34;combining-techniques&#34;&gt;Combining techniques&lt;/h2&gt;

&lt;p&gt;Combining these ideas into a sub:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Scalar::Util &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;looks_like_number&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_number&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; looks_like_number($num) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $num &lt;span style=&#34;color:#f92672&#34;&gt;!~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/inf|nan/i&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve defined the sub &lt;code&gt;is_number&lt;/code&gt; as a boolean function which accepts a value and returns true if it looks like a number to Perl, and isn&amp;rsquo;t infinity or not-a-number. It copies the variable and does not change its type. This will work for a wide-range of number types, including the really-large numbers Perl converts to decimal string (of dubious benefit!).&lt;/p&gt;

&lt;p&gt;Your application&amp;rsquo;s requirements determine which types of numbers you should accept, just keep in mind that the more varieties of number you accept, the more complicated the validation becomes. If you&amp;rsquo;re familiar with these edge cases however, the task becomes a little easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use terminal colors to distinguish information</title>
      <link>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</link>
      <pubDate>Tue, 23 Oct 2018 20:07:36 +0000</pubDate>
      
      <guid>http://localhost:1313/article/use-terminal-colors-to-distinguish-information/</guid>
      <description>&lt;p&gt;The module &lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; is one of my favorite Perl tools. It doesn&amp;rsquo;t make my program work better but it allows me to quickly identify the output that&amp;rsquo;s important to me without missing out on the other stuff. I recently used it to track the shipments of my latest book.&lt;/p&gt;

&lt;p&gt;When &lt;a href=&#34;https://www.learningperl6.com&#34;&gt;Learning Perl 6&lt;/a&gt; was published and the paper versions were available, I owed about 100 people a signed copy. From my years of publishing a print Perl magazine, I know that physically shipping stuff is an exercise in pain and memory. Did I send the book? When did I send it? I&amp;rsquo;m never quite sure the task is finished because a parcel might go missing without the recipient realizing they are missing something. Months later I get a complaint. No big whoop—that&amp;rsquo;s life in retail.&lt;/p&gt;

&lt;p&gt;I ship these through the US Postal Service and get a tracking number for each parcel. I could check those by hand at the USPS website, but I also wrote the &lt;a href=&#34;https://metacpan.org/pod/Business::US::USPS::WebTools&#34;&gt;Business::US::USPS::WebTools&lt;/a&gt; module to handle that for me. I can use the post office&amp;rsquo;s web API (rudimentary as it is) to get the status of packages.&lt;/p&gt;

&lt;p&gt;Curiously, this summer I had just given up this module because I didn&amp;rsquo;t want to maintain it anymore. I hadn&amp;rsquo;t used it in a couple of years and the web API interfaces had changed slightly. A couple weeks later I had another use for it. Go figure. It now lives in the &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules&#34;&gt;CPAN Adoptable Modules&lt;/a&gt; GitHub organization that I set up. If you have repos for modules that you no longer want, let me know about them. I&amp;rsquo;ll pull them into that organization and you can delete them from your own account. Anyone who wants to maintain them later will still find them. And, there&amp;rsquo;s also &lt;a href=&#34;https://github.com/gitpan&#34;&gt;GitPAN&lt;/a&gt;, but that&amp;rsquo;s not quite the same thing.&lt;/p&gt;

&lt;p&gt;To use this program, grab the module source from &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools&#34;&gt;GitHub&lt;/a&gt;. I had to update a few things to make it work and I might make further changes. &lt;a href=&#34;https://github.com/CPAN-Adoptable-Modules/business-us-usps-webtools/commit/27c9443cc918d67f19f9a3a594e364a22fc5d16f&#34;&gt;Commit 27c9443&lt;/a&gt; from October 2, 2018 should be good. (And yes, it feels very strange not to point to a version on CPAN).&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need credentials from the &lt;a href=&#34;https://www.usps.com/business/web-tools-apis/welcome.htm&#34;&gt;WebTools site&lt;/a&gt;. They make it sound like a government official is going to scrutinize your application but you&amp;rsquo;ll get an email a couple of minutes later. No one from the USPS has ever contacted me to ask me what I was doing with the module. One curiosity of the US Government is that the Post Office has their own police force (mostly for  mail theft or mail fraud). But I don&amp;rsquo;t need to worry about that because my program adheres to the intended use of the service.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with a short program that gets the record for a single tracking number. I have my credentials in the environment so I can easily grab them for any other WebTools program I create. This one  prints a summary of the shipment (although there is a chain of steps from acceptance when I drop off the parcel to when they deliver it):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity)&lt;/span&gt;;
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;,
		$tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is serviceable but boring (and I&amp;rsquo;ve mutated the tracking numbers so they aren&amp;rsquo;t valid and don&amp;rsquo;t represent actual shipments):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl track-one.pl 84058036993006920289
84058036993006920289  8:38 am September 14, 2018   Delivered, In/At Mailbox NEW YORK
$ perl track-one.pl CJ6467937US
CJ6467937US           9:38 am September 26, 2018   Departed PARIS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this program is much quicker than me going to the USPS website to paste numbers into their form. It can be better—what I really want to know is if I need to do anything for a shipment. I can read the output to figure that out. If it&amp;rsquo;s &amp;ldquo;Delivered&amp;rdquo; than I should be fine. If not, it can still be lost. But reading is hard! Adding color to that relieves me of the burden of scanning a whole line of text. The program can read the text for me and categorize it with color.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt; works by outputting &lt;a href=&#34;http://wiki.bash-hackers.org/scripting/terminalcodes&#34;&gt;special escape sequences&lt;/a&gt; that instruct the (ANSI) terminal to switch colors. The new color is in effect until you output the special reset sequence (or change to another color):&lt;/p&gt;

&lt;pre&gt;$ perl -MTerm::ANSIColor=:constants -e &#39;print RED, &#34;Hello World&#34;, RESET&#39;
&lt;code style=&#34;color:red&#34;&gt;Hello World&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can do that in my tracking program. I&amp;rsquo;ll use green to indicate an outstanding shipment (a brighter color on my dark background) and blue (a darker color that subdues the line) to indicate a delivered shipment. I can know the status just by the color:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracking_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $ARGV[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $tracking_number );

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
	warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
	}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
	state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
		$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
		);
	printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $tracking_number, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
	&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s fine, but I don&amp;rsquo;t want to do these individually. I have all the tracking numbers in a file (a spreadsheet really, but that&amp;rsquo;s not important here). I want to check them all at once. I can do that in a &lt;code&gt;while&lt;/code&gt; loop that takes the lines from standard input. Of course the data are a bit dirty so I remove whitespace (the USPS formats it in different ways on different pages) and then skip lines that are empty. I do have some could that checks the validity of tracking numbers but it&amp;rsquo;s a bit old and doesn&amp;rsquo;t cover some of the new (undocumented) numbers they have been giving me. So I&amp;rsquo;m stuck with these simple checks. Otherwise, the program is mostly the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.28&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; utf8;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; lib &lt;span style=&#34;color:#e6db74&#34;&gt;qw(/path/to/business-us-usps-webtools/lib)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Term::ANSIColor;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $tracker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Business::US::USPS::WebTools::TrackConfirm&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( {
	UserID   &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_USERID},
	Password &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $ENV{USPS_WEBTOOLS_PASSWORD},
	} );

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ) {
	chomp;
	&lt;span style=&#34;color:#e6db74&#34;&gt;s/\s+//g&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; length $_;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $details &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;track( TrackID &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $_ );

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( $tracker&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;is_error ) {
		warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oh No! $tracker-&amp;gt;{error}{description}\n&amp;#34;&lt;/span&gt;;
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; warnings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uninitialized&amp;#39;&lt;/span&gt;;
		state @keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;qw(EventTime EventDate Event EventCity )&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(
			$details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]{Event} &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;m/Delivered/&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;
			);
		printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-22s %8s %-20s %s %s\n&amp;#34;&lt;/span&gt;, $_, $details&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;@{@keys};
		&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; color(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;);
		}

	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the outstanding shipments stand out from the delivered ones. Even with the heavily blurred screenshot I can make out which lines are the ones that I want to investigate. I&amp;rsquo;ve blurred this image a bit to protect personal information but even then I can pick out the shipments that are still out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/use-terminal-colors-to-distinguish-information/blurred-term-ansicolor.png&#34; alt=&#34;blurred output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s amazing that this works. The international cooperation for many countries is pretty good. I can get tracking all the way to the final delivery in many countries.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git bisect and Perl</title>
      <link>http://localhost:1313/article/git-bisect-and-perl/</link>
      <pubDate>Tue, 08 Aug 2017 20:27:16 +0000</pubDate>
      
      <guid>http://localhost:1313/article/git-bisect-and-perl/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;https://ziprecruiter.com&#34;&gt;work&lt;/a&gt; we have many developers committing code to a large Git repo, and a huge test suite which runs to check the software builds and operates correctly. Inevitably, developers push commits which break a test or two, and in particularly hectic moments, it can be difficult to figure out &amp;ldquo;who broke the build&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Enter Git&amp;rsquo;s bisect &lt;a href=&#34;https://git-scm.com/docs/git-bisect&#34;&gt;command&lt;/a&gt;. I feed it the SHA of the earliest bad commit I know of (or &amp;ldquo;HEAD&amp;rdquo;) and the SHA of the last working commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start HEAD b507d1a
Bisecting: 41 revisions left to test after this (roughly 5 steps)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it running, using the failing test script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect run t/foo.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git will checkout a commit between &lt;code&gt;HEAD&lt;/code&gt; to &lt;code&gt;b507d1a&lt;/code&gt; and run &lt;code&gt;t/foo.t&lt;/code&gt; to determine if it is good or not. It will then select a subset of those commits, checkout one of them and run the test again. Git will keep going, subdividing commits into groups and testing them, until it&amp;rsquo;s found the earliest commit which the test fails on. It&amp;rsquo;s kind of fun:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/WjAkrAvSA0XV6/giphy.gif&#34; class=&#34;center&#34; alt=&#34;HUD targeting fighter jet&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually it will output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6717e8dd92ccc6b8f1a058799e895a716bbbb3fd is the first bad commit
commit 6717e8dd92ccc6b8f1a058799e895a716bbbb3fd
Author: Spider &amp;lt;spider@example.com&amp;gt;
Date:   Mon Jul 24 10:56:41 2017 -0700

    Add some feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I know who to contact about the broken build, so I can exit the bisect process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect reset
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bisect-and-exit-values&#34;&gt;Bisect and exit values&lt;/h3&gt;

&lt;p&gt;Bisect run treats certain exit values specially: 125 means the code cannot be tested, and 128 or higher will abort the bisect process. If Perl throws an exception it exits with 255 (instead of 0 for a pass and 1 for a test fail), aborting the bisect altogether:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bisect run failed:
exit code 141 from &#39;t/foo.t&#39; is &amp;lt; 0 or &amp;gt;= 128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this, wrap the call to &lt;code&gt;t/foo.t&lt;/code&gt; in a shell script which caps the return value of the test script at 127:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$@&amp;#34;&lt;/span&gt;
rv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$?
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; [ $rv &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;gt&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt; ]; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  exit $rv
fi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The variable &lt;code&gt;&amp;quot;$@&amp;quot;&lt;/code&gt; is a string of the commands passed to the shell script, with spaces within each argument preserved, so it literally executes whatever arguments are passed to it (unlike &lt;code&gt;$*&lt;/code&gt; which would split each argument up with spaces before executing). Just like in Perl, &lt;code&gt;$?&lt;/code&gt; is the exit value of the last run command, which here I assign to &lt;code&gt;rv&lt;/code&gt;. Then the script exits either with 127 or the value of &lt;code&gt;rv&lt;/code&gt;. I save the script as &lt;code&gt;cap-exit-value&lt;/code&gt;, and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start HEAD b507d1a
Bisecting: 41 revisions left to test after this (roughly 5 steps)
$ git bisect run ./cap-exit-value t/foo.t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when Git is bisecting, if the test fails or Perl throws an exception, it will be treated as a failure and bisect can continue.&lt;/p&gt;

&lt;p&gt;Hat tip to my colleague Frew, who first explained this issue and solution to me. If you like articles like these, you might enjoy his &lt;a href=&#34;https://blog.afoolishmanifesto.com/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Sigils</title>
      <link>http://localhost:1313/article/on-sigils/</link>
      <pubDate>Sun, 14 May 2017 15:45:24 +0000</pubDate>
      
      <guid>http://localhost:1313/article/on-sigils/</guid>
      <description>

&lt;p&gt;One thing that distinguishes Perl from other languages is its use of sigils; the funny looking symbols placed in front of variable names. As experienced Perl programmers, we assume sigils are an essential part of Perl, but when I dream about my ideal version of Perl, I go back-and-forth as to how sigils would work, and even whether they&amp;rsquo;re required at all.&lt;/p&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;First though, some background. In Perl there are 5 kinds of sigils:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sigil&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scalar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Hash&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subroutine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Typeglob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; for subroutines is usually only needed when creating references to them. The typeglob is rarely used so I&amp;rsquo;m going to ignore it for the rest of this article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sigils have many benefits, not least of which is that variables can be
interpolated into strings with no additional syntax. Perl scripts are also easy to
read (for people who have bothered to learn Perl!) because the nouns stand out
from verbs. And new verbs can be added to the language without breaking old
scripts.&lt;/p&gt;

&lt;p&gt;Programming Perl, Chapter 1, 4th Edition&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This quote neatly articulates the main arguments in favor of sigils, to which I&amp;rsquo;d add type declaration terseness for arrays and hashes.  I&amp;rsquo;m going to step through these arguments one by one.&lt;/p&gt;

&lt;h3 id=&#34;simpler-string-interpolation&#34;&gt;Simpler string interpolation&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s undeniable that string interpolation is easier with sigils, compared to using &lt;code&gt;sprintf&lt;/code&gt;, concatenation or &lt;code&gt;join&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$greeting, $name&amp;#34;&lt;/span&gt;;
sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s, %s&amp;#39;&lt;/span&gt;, greeting, name;
greeting &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; name;
join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;, greeting, name;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not only is the syntax simpler, it&amp;rsquo;s easier to read as the declaration looks like the end result. It does mean that dollar signs need to be escaped in double quoted strings, but this is a rare use case it doesn&amp;rsquo;t seem important.&lt;/p&gt;

&lt;h3 id=&#34;readability&#34;&gt;Readability&lt;/h3&gt;

&lt;p&gt;Programming Perl claimed using sigils makes &amp;ldquo;the nouns stand out from the verbs&amp;rdquo;, and that&amp;rsquo;s probably true: sigils do clearly demarcate variables from built-in functions and subroutines. However when I&amp;rsquo;m programming in other languages like C, I don&amp;rsquo;t seem to have difficulty identifying variables. Text editors usually color variables differently from other words, which helps.&lt;/p&gt;

&lt;p&gt;This claim is subjective; I know of other Perl programmers believe it is more readable &lt;em&gt;because&lt;/em&gt; of the sigils. Part of the problem I think, is that Perl has a huge syntax; with over 220 built-in functions. Even with a plaintext editor, if your language has only 20 keywords, it&amp;rsquo;s much easier to identify variables and functions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sigils separate variables into different namespaces. It&amp;rsquo;s possible—though
confusing—to declare multiple variables of the same name with different types&lt;/p&gt;

&lt;p&gt;Modern Perl, Chapter 3, 4th Edition&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perl 5 uses variant sigils: the symbol changes depending on the type being accessed. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;;
say $num[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here all three variables are different; Perl maintains a sub-namespace of scalars, arrays, hashes and subroutines (and more) for every global and lexical context. This permits the confusing behavior of multiple variables with the same name of different types. The fact that the sigil changes depending on the context it&amp;rsquo;s used in is also confusing: Perl 6 dropped this behavior, which I think settles the argument over whether variant sigils impinge readability or not.&lt;/p&gt;

&lt;h3 id=&#34;extendability&#34;&gt;Extendability&lt;/h3&gt;

&lt;p&gt;This is the idea that by using sigils, new keywords can be added to the language and not break old code, as they won&amp;rsquo;t contain variables whose names clash with keywords. Whilst this is undoubtedly true, I have a few problems with this.&lt;/p&gt;

&lt;p&gt;First, if we believe the Programming Perl claim that variables are nouns and keywords are verbs, then they should rarely clash anyway. Second, Perl allows subroutines to be used without sigils. These are surely much more likely to clash with keywords, both being &amp;ldquo;verbs&amp;rdquo; so to speak. Third, Perl allows &amp;ldquo;constants&amp;rdquo; to be declared without sigils at all. So if sigils reduce the risk of new keywords breaking old code, they don&amp;rsquo;t handle the most common cases.&lt;/p&gt;

&lt;p&gt;Another way to reduce the risk of clashes is to use far fewer builtin keywords, and instead make them class methods. Instead of the &lt;code&gt;open&lt;/code&gt; function for example, provide a &lt;code&gt;IO&lt;/code&gt; class with an &lt;code&gt;open&lt;/code&gt; method.&lt;/p&gt;

&lt;h3 id=&#34;type-declaration-terseness&#34;&gt;Type declaration terseness&lt;/h3&gt;

&lt;p&gt;For arrays and hashes, instead of providing a class name and calling a constructor method, in Perl we can simply use &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt;. This reduces the amount of text needed, consider:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; numbers  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Array&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first way is obviously shorter. What about other types though? Suppose we wanted to create a new ordered hash type. Even though it&amp;rsquo;s an ordered collection of pairs, much like an array, we can&amp;rsquo;t use the &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; sigils. We have to create an object and use the &lt;code&gt;$&lt;/code&gt; sigil instead. That&amp;rsquo;s inconsistent. Same goes for stacks, queues, or any other data type not provided natively by the language. What could we do instead, provide new sigils for all types? We&amp;rsquo;d run out of symbols!&lt;/p&gt;

&lt;h3 id=&#34;perl-6&#34;&gt;Perl 6&lt;/h3&gt;

&lt;p&gt;Perl 6 takes a different approach: the &lt;a href=&#34;https://docs.perl6.org/language/variables&#34;&gt;sigil&lt;/a&gt; denotes a interface supported by the underlying type. For example &lt;code&gt;@&lt;/code&gt; means positional, &lt;code&gt;%&lt;/code&gt; means associative and &lt;code&gt;&amp;amp;&lt;/code&gt; means callable. You can also define &lt;a href=&#34;https://docs.perl6.org/language/subscripts#Custom_type_example&#34;&gt;custom types&lt;/a&gt;. This approach preserves the look and feel of Perl 5 whilst placing the syntax on a more logical footing. But it&amp;rsquo;s not without its peculiarities. For instance the scalar sigil &lt;code&gt;$&lt;/code&gt; denotes &amp;ldquo;no type constraint&amp;rdquo;. So you can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code declares two hashes one with the associate sigil &lt;code&gt;%&lt;/code&gt; and one with the &amp;ldquo;no type constraints&amp;rdquo; sigil &lt;code&gt;$&lt;/code&gt;. What&amp;rsquo;s the difference between the two? You might think that only the one declared with the associative sigil can use the postcircumfix accessor, but they both work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;say %h&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;a&amp;gt;&lt;/span&gt;;
say $h&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So with Perl 6, an &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; sigil indicates an interface you can use, but the &lt;code&gt;$&lt;/code&gt; doesn&amp;rsquo;t indicate that you can&amp;rsquo;t use the associative or positional interfaces too. Furthermore, these two variables have the same name, and the same type. Yet they coexist merrily in the same scope. So the sigil &lt;em&gt;does&lt;/em&gt; denote an underlying difference, even if only in the way the variable is stored in the namespace.&lt;/p&gt;

&lt;p&gt;This dichotomy can be stretched to absurdity: with the callable &lt;code&gt;&amp;amp;&lt;/code&gt; sigil; between the block, arrow and &lt;code&gt;sub&lt;/code&gt; syntaxes, and being able to use &lt;code&gt;$&lt;/code&gt; as well as &lt;code&gt;&amp;amp;&lt;/code&gt; I can count 10 different ways to assign a &lt;a href=&#34;https://docs.perl6.org/type/Callable&#34;&gt;callable&lt;/a&gt; type.&lt;/p&gt;

&lt;p&gt;Is this better than Perl 5&amp;rsquo;s variant sigils? Consider my example of the ordered hash type. In Perl 6 it would do both the associative and the positional roles. But we can only use one sigil when declaring the variable. Should I choose: &lt;code&gt;$&lt;/code&gt; (typeless), &lt;code&gt;%&lt;/code&gt; (associative) or &lt;code&gt;@&lt;/code&gt; (positional)?&lt;/p&gt;

&lt;p&gt;Now imagine if the sigil truly were an interface only in Perl 6, we could apply any of the sigils to the same variable depending on the context we required:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $ordered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OrderedHash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;();
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (%ordered&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (@ordered) { &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One improvement here is that different variables cannot have the same name in the same scope. But these are variant sigils, which reduces readability.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Clearly the question of whether to use sigils in programming languages is a subjective one, and not something that can be &amp;ldquo;proved&amp;rdquo;. But I do think it&amp;rsquo;s possible to show that the different implementations of sigils in the Perl languages have drawbacks. In particular using different sigils to denote an underlying type or interface seems the most troublesome, with meager benefits.&lt;/p&gt;

&lt;p&gt;In my ideal, fantasy Perl, everything would be object oriented. It would be a simpler Perl, with much less syntax than the Perls of today. I think it would have sigils, but only &lt;code&gt;$&lt;/code&gt;. All variables would begin with dollar, à la PHP. This simpler approach would net the main benefits claimed for sigils (readability, string interpolation) without the confusion from variance and the kind of sigil used informing the underlying type being accessed. It would prevent multiple variables of the same name but different types existing in the same scope. And it improves the chances that newcomers would grok Perl faster, especially if they have programmed in PHP or shell before.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.c2.com/?TheProblemWithSigils&#34;&gt;The Problem With Sigils&lt;/a&gt; is a collection of arguments for and against sigils&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Programming-Perl-Unmatched-processing-scripting/dp/0596004923&#34;&gt;Programming Perl 4th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pragprog.com/book/swperl/modern-perl-fourth-edition&#34;&gt;Modern Perl, 4th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl 6 variables &lt;a href=&#34;https://docs.perl6.org/language/variables&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl 6 &lt;a href=&#34;https://docs.perl6.org/language/subscripts#Custom_type_example&#34;&gt;custom types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl 6 &lt;a href=&#34;https://docs.perl6.org/type/Callable&#34;&gt;callable role&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Cloudfront cache invalidation with Paws</title>
      <link>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</link>
      <pubDate>Mon, 03 Apr 2017 08:12:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/aws-cloudfront-cache-invalidation-with-paws/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/&#34;&gt;Deploy a static website with Paws&lt;/a&gt;, I developed a simple script to upload files to AWS S3, using &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;. In this article I&amp;rsquo;ll describe a script to invalidate CloudFront caches: this can be used to force CloudFront to re-cache files which have changed on S3.&lt;/p&gt;

&lt;h3 id=&#34;aws-cloudfront&#34;&gt;AWS CloudFront&lt;/h3&gt;

&lt;p&gt;CloudFront is Amazon&amp;rsquo;s Content Delivery Network service. It&amp;rsquo;s used to cache local versions of files so that they can be delivered to requests faster; for example if you used S3 to host your website in Amazon&amp;rsquo;s US East region, files on the website might load faster for East Coast customers than those on the West Coast. With a CDN like CloudFront however, copies of the website files can be saved all over the World, so that visitor&amp;rsquo;s browsers fetch the website files from closer geographic locations, improving the website speed.&lt;/p&gt;

&lt;p&gt;When cached website files are updated on S3, they need to be invalidated from the CloudFront cache. This forces CloudFront to fetch fresh copies of invalidated files.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;Using CloudFront with Paws is pretty easy. For cache invalidation all you really need is a CloudFront distribution id, and a list of files to be invalidated. This is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; strict;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; warnings;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Time::HiRes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gettimeofday&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;distribution-id=s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DISTRIBUTION_ID,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keys=s&amp;#39;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @KEYS,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--distribution-id and --region are required&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $DISTRIBUTION_ID &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION;

&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no objects to invalidate!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @KEYS;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalidating cached keys: %s\n&amp;#34;&lt;/span&gt;, join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;, @KEYS;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();

$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, I use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to process the command line options. The script requires a CloudFront distribution id and an AWS region string. The &lt;code&gt;--keys&lt;/code&gt; switch is optional as the script also reads keys from &lt;code&gt;STDIN&lt;/code&gt;. This snippet is curious:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# don&amp;#39;t block on empty STDIN&lt;/span&gt;
STDIN&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;blocking(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
@KEYS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map { chomp;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/$_&amp;#34;&lt;/span&gt; } @KEYS, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It sets the &lt;code&gt;STDIN&lt;/code&gt; filehandle to non-blocking mode. That way, if STDIN is empty when the script tries to read from it, it won&amp;rsquo;t block. On the next line, &lt;code&gt;map&lt;/code&gt; is used to prepend a slash to every key. This is required by CloudFront.&lt;/p&gt;

&lt;p&gt;The script then creates a Paws CloudFront object, and the &lt;a href=&#34;https://metacpan.org/pod/Time::HiRes&#34;&gt;Time::HiRes&lt;/a&gt; &lt;code&gt;gettimeofday&lt;/code&gt; function is used to calculate a cheap unique id (it returns the current epoch seconds and microseconds).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $cfront &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CloudFront&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $uid    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, gettimeofday();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the script calls the &lt;code&gt;CreateInvalidation&lt;/code&gt; method to send the data to AWS CloudFront:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$cfront&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateInvalidation(
  DistributionId    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $DISTRIBUTION_ID,
  InvalidationBatch &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      CallerReference &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $uid,
      Paths           &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        Quantity &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; scalar @KEYS,
        Items    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;@KEYS,
      }
  }
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;combining-tools&#34;&gt;Combining tools&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;s3-upload&lt;/code&gt; script prints the keys it updated on STDOUT, and &lt;code&gt;cf-invalid&lt;/code&gt; can read keys from STDIN. This makes for convenient chaining:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload --files static --bucket example.com --region us-east-1 \
| ./cf-invalid --distribution-id e9d4922bd9120 --region us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And because the scripts use &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt;, the option names can be shortened:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./s3-upload -f static -b example.com -r us-east-1 | ./cf-invalid -d e9d4922bd9120 -r us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, keys (filenames) can be specified as arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./cf-invalid -d e9d4922bd9120 -r us-east-1 -k index.html -k about.html -k contact.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both scripts are available on &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a static website with AWS S3 and Paws</title>
      <link>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</link>
      <pubDate>Tue, 21 Feb 2017 10:04:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/deploy-a-static-website-with-aws-s3-and-paws/</guid>
      <description>

&lt;p&gt;Amazon Web Services (AWS) is Amazon&amp;rsquo;s cloud services platform and S3 is the AWS file storage service. S3 is commonly used to host static websites. With Perl we have many modules for using AWS, but I like &lt;a href=&#34;https://metacpan.org/pod/Paws&#34;&gt;Paws&lt;/a&gt;, developed by &lt;a href=&#34;https://metacpan.org/author/JLMARTIN&#34;&gt;Jose Luis Martinez&lt;/a&gt; which supports many AWS services, including S3. In this article I&amp;rsquo;ll walk you through a Perl script I developed to upload and maintain a static website using S3 and Paws.&lt;/p&gt;

&lt;h3 id=&#34;aws-setup&#34;&gt;AWS setup&lt;/h3&gt;

&lt;p&gt;To use AWS from the command line you&amp;rsquo;ll need a to generate a key id and secret key for your account which you can get from the &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS website&lt;/a&gt;. Once you login with your Amazon credentials, click on your account name and go to &amp;ldquo;My Security Credentials&amp;rdquo;. Once you have a key id and secret key, you need to create the credentials files as used by &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;awscli&lt;/a&gt;. You can either install awscli and run &lt;code&gt;aws configure&lt;/code&gt;, else create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/.aws/default:
[default]
output = JSON
region = us-east

~/.aws/config:
[default]
aws_access_key_id = XXXXXXXXXXXX
aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the region value to the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html&#34;&gt;AWS region&lt;/a&gt; you want to use, and replace the &amp;ldquo;XXX&amp;rdquo; values with your own key id and secret key values. These files are stored in a different &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence&#34;&gt;location&lt;/a&gt; on Windows.&lt;/p&gt;

&lt;h3 id=&#34;create-an-s3-bucket&#34;&gt;Create an S3 bucket&lt;/h3&gt;

&lt;p&gt;S3 organizes files by bucket. Every bucket has URI-like name, which is unique across AWS. So if you&amp;rsquo;re going to host a website on S3, you&amp;rsquo;ll need to create a bucket for the website. This can be done via the AWS &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;web interface&lt;/a&gt;, the command-line &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/reference/s3/mb.html&#34;&gt;app&lt;/a&gt; or with Paws:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;);
$s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateBucket(Bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mystaticwebsite.com&amp;#39;&lt;/span&gt;, ACL &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;ACL&lt;/code&gt; argument specifies that the bucket can be read publicly, but not edited, which makes sense for website files. At some point, you&amp;rsquo;ll need to enable the &amp;ldquo;static web hosting&amp;rdquo; &lt;a href=&#34;https://console.aws.amazon.com/s3/buckets/&#34;&gt;option&lt;/a&gt; for the bucket, but that&amp;rsquo;s not necessary to upload files to it.&lt;/p&gt;

&lt;h3 id=&#34;upload-files-to-s3&#34;&gt;Upload files to S3&lt;/h3&gt;

&lt;p&gt;S3 files are stored as objects in buckets. Every file has a key, which is similar to the filename. I&amp;rsquo;ve developed a &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;script&lt;/a&gt; called &lt;code&gt;s3-upload&lt;/code&gt; which uses Paws to upload files to S3 buckets. It uses &lt;a href=&#34;https://metacpan.org/pod/Getopt::Long&#34;&gt;Getopt::Long&lt;/a&gt; to parse command line options. It requires &lt;code&gt;--bucket&lt;/code&gt; for the S3 bucket name, &lt;code&gt;--region&lt;/code&gt; for the AWS region, and &lt;code&gt;--files&lt;/code&gt; for the directory filepath:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Getopt::Long &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GetOptions&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Paws;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Path::Tiny &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;;

GetOptions(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bucket=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BUCKET,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files=s&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $BASEPATH,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;region=s&amp;#39;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $REGION,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;delete-stale&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $DELETE_STALE,
) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unrecognized arguments&amp;#39;&lt;/span&gt;;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;must provide --bucket --region --files&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $BUCKET &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $REGION &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $BASEPATH;

die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directory $BASEPATH not found&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d $BASEPATH;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $s3             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paws&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;service(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S3&amp;#39;&lt;/span&gt;, region &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $REGION);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $remote_objects &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_remote_objects($s3);
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $local_objects  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upload($s3, $remote_objects);

delete_stale_objects($s3, $remote_objects, $local_objects) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $DELETE_STALE;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve omitted the subroutine definitions for brevity (see the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; for details). The script begins by validating the input options, then creates an &lt;code&gt;$s3&lt;/code&gt; object. It calls &lt;code&gt;get_remote_objects&lt;/code&gt; which returns a hashref of keys (files) and their last modified time currently in the bucket. It passes this to &lt;code&gt;upload&lt;/code&gt; which only uploads files that have been modified since being uploaded to S3 (you don&amp;rsquo;t want to upload the entire website if only one file has changed). &lt;code&gt;upload&lt;/code&gt; does many things, but essentially, it uses &lt;a href=&#34;https://metacpan.org/pod/Paws::S3::PutObject&#34;&gt;PutObject&lt;/a&gt; to upload files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  $s3&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;PutObject(
    Bucket  &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $BUCKET,
    Key     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $key,
    ACL     &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt;,
    Body    &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $path&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;slurp_raw,
  );
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;Key&lt;/code&gt; is the filename and &lt;code&gt;Body&lt;/code&gt; the raw bytes of the file. The &lt;code&gt;upload&lt;/code&gt; subroutine also returns a hashref of local keys and their last modified time. Optionally, the script can call &lt;code&gt;delete_stale_objects&lt;/code&gt; which deletes files from S3 which do not exist in the local tree.&lt;/p&gt;

&lt;p&gt;The script can be run like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will print any files uploaded to STDOUT and all other output to STDERR. The intention is to make it possible to pipe the filenames uploaded to other programs. A useful one might be a Cloudfront script which invalidates the cache for any files uploaded.&lt;/p&gt;

&lt;h3 id=&#34;more-features&#34;&gt;More features&lt;/h3&gt;

&lt;p&gt;Whilst the above script does the job, there are some features missing that are useful for static websites. Firstly, you might want to specify the MIME type of the files being uploaded. This is so when browsers fetch the files, S3 responds with the correct content type &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&#34;&gt;header&lt;/a&gt;. Otherwise, HTML files may not be displayed as websites, images may be downloaded instead of displayed, and so on. I use &lt;a href=&#34;https://metacpan.org/pod/Media::Type::Simple&#34;&gt;Media::Type::Simple&lt;/a&gt; for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Media::Type::Simple;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# setup mime types, add missing&lt;/span&gt;
open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime_types, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, $MIME_TYPES &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t find $MIME_TYPES $!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $media &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Media::Type::Simple&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;($mime_types);
$media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;add_type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/font-woff2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; @ext  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $path &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/\.(\w+)$/&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $mime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval { @ext ? $media&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;type_from_ext($ext[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) : undef };
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; STDERR $@ &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $@;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve uploaded a copy of &lt;code&gt;mime.types&lt;/code&gt; to the &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/mime.types&#34;&gt;repo&lt;/a&gt;, and added a &lt;code&gt;--mime-types&lt;/code&gt; option for the filepath to a mime.types file (defaulting to &lt;code&gt;/etc/mime.types&lt;/code&gt;). Also not all media types are defined, so the code adds a custom definition for &lt;code&gt;woff2&lt;/code&gt;. The mime type is passed to &lt;code&gt;PutObject&lt;/code&gt; when a file is uploaded.&lt;/p&gt;

&lt;p&gt;Other useful options supported by the script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--strip&lt;/code&gt;- it seems cleaner to visit: &lt;code&gt;/home&lt;/code&gt; than &lt;code&gt;/home.html&lt;/code&gt;. The &lt;code&gt;--strip&lt;/code&gt; option can be used to specify any extensions to strip from filenames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--max-age&lt;/code&gt; - set a cache control header to have browsers cache files instead of downloading them on every page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt; - override the default behavior and upload all files, regardless of whether they already exist in the S3 bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These options can be used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./s3-upload --bucket mystaticwebsite.com --region us-east-1 --files mywebsite/static --delete-stale --mime-types mime.types --strip html --max-age 31536000 --force
static/index.html
static/about.html
static/news.html
static/products.html
static/css/styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script &lt;a href=&#34;https://github.com/dnmfarrell/Paws-tools/blob/master/s3-upload&#34;&gt;source&lt;/a&gt; is on GitHub. If you need help configuring a static website for AWS, Amazon have provided a good &lt;a href=&#34;http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

