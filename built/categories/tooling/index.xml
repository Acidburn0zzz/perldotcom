<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on Perl.com - programming news, code and culture</title>
    <link>http://localhost:1313/categories/tooling/</link>
    <description>Recent content in Tooling on Perl.com - programming news, code and culture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Feb 2016 09:29:18 +0000</lastBuildDate>
    <atom:link href="/categories/tooling/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>An introduction to Tmux</title>
      <link>http://localhost:1313/article/an-introduction-to-tmux/</link>
      <pubDate>Wed, 24 Feb 2016 09:29:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/an-introduction-to-tmux/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://tmux.github.io/&#34;&gt;Tmux&lt;/a&gt; is a terminal multiplexer: it&amp;rsquo;s like a power-up for terminal programming. You can manage several terminals under a session, split terminal screens, detach and re-attach sessions and much more. If you do most of your programming at the command line, you&amp;rsquo;ll find using a terminal multiplexer invaluable.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First you&amp;rsquo;ll need to install Tmux via your package manager or &lt;a href=&#34;https://tmux.github.io/&#34;&gt;download&lt;/a&gt; it. Tmux is highly configurable but the first change I&amp;rsquo;d recommend is to ssh, not Tmux. Make ssh &amp;ldquo;keep alive&amp;rdquo; for all connections by adding this to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host *
   ServerAliveInterval 300
   ServerAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the file doesn&amp;rsquo;t exist, create it. This configuration instructs your local machine for all user ssh sessions to send a server alive message every 300 seconds to keep the ssh session alive. If the local machine sends 3 unanswered messages, it will disconnect the session. You should tweak these settings to suit your needs: for instance by restricting the &lt;code&gt;host&lt;/code&gt; to specific domains you can have different settings per domain. If you have a slow or unreliable internet connection, consider changing &lt;code&gt;ServerAliveInterval&lt;/code&gt; to a lower number to send more frequent messages.&lt;/p&gt;

&lt;p&gt;If you have permission on the servers you use, you can update them with a similar configuration, in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClientAliveInterval 300
ClientAliveCountMax 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-prefix-and-one-true-command-trade&#34;&gt;The Prefix and One True Command&amp;trade;&lt;/h3&gt;

&lt;p&gt;Once Tmux is installed, start a new Tmux session from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b&lt;/code&gt; is the &lt;strong&gt;prefix&lt;/strong&gt; combination. Press the Ctrl key AND the letter b at the same time. When inside a Tmux session, the prefix is nearly always pressed before the shortcut key to trigger a command.&lt;/p&gt;

&lt;p&gt;The prefix combination is really important. Once you get the hang of the prefix combination, you can pretty much bootstrap yourself into learning Tmux with just one command. To display a list of Tmux commands, type: &lt;code&gt;Ctrl-b ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That means press &lt;code&gt;Control&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; together, release, then press &lt;code&gt;?&lt;/code&gt;. Tmux should display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind-key        C-b send-prefix
bind-key        C-o rotate-window
bind-key        C-z suspend-client
bind-key      Space next-layout
bind-key          ! break-pane
bind-key          &amp;quot; split-window
bind-key          # list-buffers
bind-key          $ command-prompt -I #S &amp;quot;rename-session &#39;%%&#39;&amp;quot;
bind-key          % split-window -h
bind-key          &amp;amp; confirm-before -p &amp;quot;kill-window #W? (y/n)&amp;quot; kill-window
bind-key          &#39; command-prompt -p index &amp;quot;select-window -t &#39;:%%&#39;&amp;quot;
bind-key          ( switch-client -p
bind-key          ) switch-client -n
bind-key          , command-prompt -I #W &amp;quot;rename-window &#39;%%&#39;&amp;quot;
bind-key          - delete-buffer
bind-key          . command-prompt &amp;quot;move-window -t &#39;%%&#39;&amp;quot;
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9
bind-key          : command-prompt
bind-key          ; last-pane
bind-key          = choose-buffer
bind-key          ? list-keys
bind-key          D choose-client
bind-key          L switch-client -l
bind-key          [ copy-mode
bind-key          ] paste-buffer
bind-key          c new-window
bind-key          d detach-client
bind-key          f command-prompt &amp;quot;find-window &#39;%%&#39;&amp;quot;
bind-key          i display-message
bind-key          l last-window
bind-key          n next-window
bind-key          o select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the prefix combination (see the Config options section). If you do that, remember to use your prefix combination instead of &lt;code&gt;Ctrl-b&lt;/code&gt; in the examples below.&lt;/p&gt;

&lt;h3 id=&#34;window-control&#34;&gt;Window control&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at a key Tmux feature: windows. They&amp;rsquo;re similar to tabs in browsers. Each one is a different terminal from where you can run different commands at the same time. To create a new window press&lt;code&gt;Ctrl-b c&lt;/code&gt;. You can cycle between windows: &lt;code&gt;Ctrl-b n&lt;/code&gt; for the next window and &lt;code&gt;Ctrl-b p&lt;/code&gt; takes you to the prior window. &lt;code&gt;Ctrl-b w&lt;/code&gt; list all windows in a session and let&amp;rsquo;s you select which one to active (using the arrow keys and enter).&lt;/p&gt;

&lt;p&gt;If you know the window number you can also jump straight to it with &lt;code&gt;Ctrl-b #&lt;/code&gt; replacing &amp;ldquo;#&amp;rdquo; with the window number. By default they begin at 0, not 1!&lt;/p&gt;

&lt;p&gt;You might be wondering what&amp;rsquo;s the benefit of using Tmux windows over tabbed terminals. First, with regular terminals if the window manager crashes, you&amp;rsquo;ll lose the terminals as well. This won&amp;rsquo;t happen with Tmux: it will keep the terminals running in the background and you can re-attach a new terminal to them at any time. Windows can also be subdivided into panes, all running pseudo-terminals. Let&amp;rsquo;s look at them now.&lt;/p&gt;

&lt;h3 id=&#34;pane-control&#34;&gt;Pane control&lt;/h3&gt;

&lt;p&gt;Panes are great. You can split a window horizontally, vertically and with any dimensions you like. Have you ever wanted to quickly look up a man page whilst coding? Instead of dropping back to the terminal, looking up the man page and then foregrounding your editor, just open a new vertical pane, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/an-introduction-to-tmux/tmux-split-screen.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can read the man page and code at the same time; you can even copy and paste between the two panes. Much more convenient!&lt;/p&gt;

&lt;p&gt;Recently I was processing a huge set of data; I arranged my Tmux window with 3 panes running the data processing and 1 pane monitoring the server resources with &lt;a href=&#34;http://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt;. This server is almost overloaded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/an-introduction-to-tmux/tmux-panes.png&#34; alt=&#34;Tmux Panes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These are the key pane controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-b &amp;quot;      split pane horizontally
Ctrl-b %      split pane vertically
Ctrl-b o      next pane
Ctrl-b ;      prior pane
Ctrl-b ←↑→↓   jump to pane
Ctrl-b Ctrl-o swap panes
Ctrl-b space  arrange panes
Ctrl-b-←↑→↓   change pane size
Ctrl-b !      pop a pane into a new window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arrows &lt;code&gt;←↑→↓&lt;/code&gt; represent the arrow keys, just use one of these. For example to jump to a pane on the right, you&amp;rsquo;d press &lt;code&gt;Ctrl-b →&lt;/code&gt;. The change pane size controls are a little different. To make that work you first have to have more than one pane. Next press &lt;code&gt;Ctrl-b&lt;/code&gt; and keep the control key held down. Now you can repeatedly press an arrow key to change the pane size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-b !&lt;/code&gt; is one of my favorite features. It pops the current pane out of the window and moves it to its own window. This is wonderful if you find yourself doing some unrelated activity in one pane and want to re-organize your setup.&lt;/p&gt;

&lt;h3 id=&#34;scrolling-and-copy-paste&#34;&gt;Scrolling and copy/paste&lt;/h3&gt;

&lt;p&gt;If you can master scrolling and copy/paste in Tmux, you can master anything. I won&amp;rsquo;t lie, this is the clunkiest feature. But it&amp;rsquo;s really useful. The interface is modal, so start by entering scroll mode by typing &lt;code&gt;Ctrl-b [&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pressing &lt;code&gt;esc&lt;/code&gt; will exit scroll mode. You should know you&amp;rsquo;re in scroll mode because an orange line count appears in the top-right corner of the pane.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re in scroll mode, you can move the cursor using the arrow keys and page up and down. By default Tmux doesn&amp;rsquo;t retain much history, but you can change that (see the Config options section).&lt;/p&gt;

&lt;p&gt;You can copy and paste in scroll mode. This is useful when you have split screens as a regular highlight and copy using the mouse won&amp;rsquo;t work across vertically split panes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/an-introduction-to-tmux/tmux-copy-fail.png&#34; alt=&#34;copy fail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To copy, position the cursor where you want to start copying. Press &lt;code&gt;Ctrl-space&lt;/code&gt; to begin highlighting the text to copy. Press &lt;code&gt;Alt-w&lt;/code&gt; to copy the highlighted text. Pressing &lt;code&gt;Ctrl-b ]&lt;/code&gt; will paste the copied text. There are ways to make copy and paste easier: Tmux has a &amp;ldquo;vim like&amp;rdquo; copy mode (see the Config options section and the &lt;a href=&#34;http://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man&lt;/a&gt; page for details).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/an-introduction-to-tmux/tmux-copy-win.png&#34; alt=&#34;copy win&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; You can jump into scroll mode and page up in one fell swoop with &lt;code&gt;Ctrl-b PgUp&lt;/code&gt; (thanks to Ludovic Tolhurst for the tip).&lt;/p&gt;

&lt;h4 id=&#34;bonus-feature-search&#34;&gt;Bonus feature - search&lt;/h4&gt;

&lt;p&gt;If you took the time to learn scroll mode, you deserve something extra, something special. Here is your prize: you can search the Tmux buffer! Just enter scroll mode with &lt;code&gt;Ctrl-b [&lt;/code&gt; and then press &lt;code&gt;Ctrl-r&lt;/code&gt;. Type your search text and press enter. Tmux will jump to the last match it finds. You can press &lt;code&gt;n&lt;/code&gt; to jump to the next match or &lt;code&gt;Shift-n&lt;/code&gt; to jump back one match.&lt;/p&gt;

&lt;p&gt;There is also &lt;code&gt;Ctrl-s&lt;/code&gt; to search down the buffer, but I hardly ever use it.&lt;/p&gt;

&lt;h3 id=&#34;session-control&#34;&gt;Session control&lt;/h3&gt;

&lt;p&gt;Sessions are one of the most useful features of Tmux. They let you group multiple terminal processes into a single Tmux session which can be worked on (attached), put into the background (detached) and discarded as you see fit. Programmers will often have different sessions for different projects. Because Tmux operates under a client-server architecture, even if the original terminal that started Tmux dies or your desktop GUI crashes, the Tmux session will be preserved, along with all of the terminal sessions in it.&lt;/p&gt;

&lt;p&gt;Detach your Tmux session with &lt;code&gt;Ctrl-b d&lt;/code&gt;. This will return you to a regular terminal prompt.&lt;/p&gt;

&lt;p&gt;To list existing Tmux sessions just use the &lt;code&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux ls
0: 1 windows (created Thu Jan 28 08:15:20 2016) [190x50] (attached)
2: 2 windows (created Thu Jan 28 09:11:59 2016) [190x50]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows that I have two Tmux sessions running, one of which is attached to a terminal window already. To attach to a session just use the &lt;code&gt;attach&lt;/code&gt; command at the terminal prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default Tmux attaches to the next unattached session (&amp;ldquo;2&amp;rdquo;) in this case. If I have many different sessions and want to attach to a particular one, I can specify it with &lt;code&gt;-t&lt;/code&gt; for target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux attach -t 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-options&#34;&gt;Config options&lt;/h3&gt;

&lt;p&gt;The file &lt;code&gt;~/.tmux.conf&lt;/code&gt; is a plaintext file used by Tmux for local config. This is what mine looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# set scroll history to 10,000 lines
set -g history-limit 10000

# modern encoding and colors
set -g utf8 on set-window-option -g utf8 on
set -g default-terminal screen-256color

# don&#39;t use a login shell
set -g default-command /bin/bash

# unbind the prefix and bind it to Ctrl-a like screen
unbind C-b set -g prefix C-a bind C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tmux starts with a tiny scroll history, so I like to bump that up. The modern encoding and colors are there to jive with my terminal setup - they may even be the default Tmux settings by now. By default Tmux uses a login shell, so every new pane will execute &lt;code&gt;.bash_profile&lt;/code&gt;. I prefer to disable that behavior and just launch regular non-login shells.&lt;/p&gt;

&lt;p&gt;Tmux has hundreds more options: many users will switch to a different shell like zsh, enable pane switching with the trackpad, display custom data in the Tmux footer (like weather info!) and so on. Copying other programmers&amp;rsquo; &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=.tmux.conf&#34;&gt;conf files&lt;/a&gt; is a great way to learn and experiment.&lt;/p&gt;

&lt;p&gt;To reload your &lt;code&gt;.tmux.conf&lt;/code&gt; within a Tmux session, type: &lt;code&gt;Ctrl-b :&lt;/code&gt; then &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tmux-resources&#34;&gt;Tmux resources&lt;/h3&gt;

&lt;p&gt;The official Tmux &lt;a href=&#34;https://tmux.github.io/&#34;&gt;website&lt;/a&gt; is a good starting point with summary information, a changelog, downloads and a link to the extensive &lt;a href=&#34;http://man.openbsd.org/OpenBSD-current/man1/tmux.1&#34;&gt;man page&lt;/a&gt;. The Arch Linux &lt;a href=&#34;https://wiki.archlinux.org/index.php/Tmux&#34;&gt;tmux documentation&lt;/a&gt; covers advanced features and troubleshooting tips. The book &lt;a href=&#34;https://pragprog.com/book/bhtmux/tmux&#34;&gt;tmux - Productive Mouse-Free Development&lt;/a&gt; by Pragmatic Bookshelf is thorough introduction to Tmux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://perltricks.com/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/&#34;&gt;GNU Screen&lt;/a&gt; is another terminal multiplexer program. It&amp;rsquo;s older than Tmux and a little bit crufty, but it has most of the features Tmux has. The controls for Screen and Tmux are similar enough that if you know one of them you can get by using the other. The Tmux &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/FAQ&#34;&gt;FAQ&lt;/a&gt; lists the differences between them.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install any* Perl module</title>
      <link>http://localhost:1313/article/200/2015/11/28/How-to-install-any--Perl-module/</link>
      <pubDate>Sat, 28 Nov 2015 00:11:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/200/2015/11/28/How-to-install-any--Perl-module/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s our 200th article! Installing CPAN modules can be a pain, particularly for users not familiar with the Perl toolchain. To try something different, I&amp;rsquo;m uploading the article as an image file under creative commons. Feel free to share it, use it, whatever. If you use Perl at your office, maybe print it out for reference. You can download a copy &lt;a href=&#34;http://localhost:1313/images/200/chart.png&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/200/chart.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[*] You can install any Perl module, but it may not be a good idea™&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Activating Perl 6 syntax highlighting in Vim</title>
      <link>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</link>
      <pubDate>Tue, 22 Sep 2015 22:16:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/</guid>
      <description>

&lt;p&gt;Modern versions of the Vim text editor ship with Perl 6 syntax highlighting, but automatically activating it is tricky because Perl 6 files can have ambiguous file extensions. It can get tiresome to correct the file type every time you open a Perl 6 file, so I&amp;rsquo;m going to show you a few tricks that I use to make Vim detect Perl 6 files automatically.&lt;/p&gt;

&lt;h3 id=&#34;showing-and-setting-the-filetype-in-vim&#34;&gt;Showing and setting the filetype in Vim&lt;/h3&gt;

&lt;p&gt;First of all I want to make sure that syntax highlighting is turned on by default, so I add this option to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To edit your &lt;code&gt;.vimrc&lt;/code&gt; just start Vim and enter this command &lt;code&gt;:e $MYVIMRC&lt;/code&gt;. Save your changes with &lt;code&gt;:w&lt;/code&gt;, and then reload your &lt;code&gt;.vimrc&lt;/code&gt; with &lt;code&gt;:so %&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that I have syntax highlighting turned on, I need to know how set Vim&amp;rsquo;s file type to Perl 6 when I&amp;rsquo;m working with Perl 6 files. I can see the current file type by typing this command &lt;code&gt;:set filetype?&lt;/code&gt;. To set the file type to Perl 6, I use this command &lt;code&gt;:set filetype=perl6&lt;/code&gt;. The &lt;code&gt;filetype&lt;/code&gt; keyword can be shortened to &lt;code&gt;ft&lt;/code&gt;. In which case the last command becomes &lt;code&gt;:set ft=perl6&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;detecting-perl-6-files&#34;&gt;Detecting Perl 6 files&lt;/h3&gt;

&lt;p&gt;Now the challenge becomes correctly detecting when I&amp;rsquo;m working with Perl 6 files in Vim. Perl 6 scripts shouldn&amp;rsquo;t be a problem: Vim (not Vi) automatically parses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_line&#34;&gt;shebang&lt;/a&gt; line to determine the file type. However this fails when the script has an extension like &lt;code&gt;.pl&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;use-the-pm6-file-extension&#34;&gt;Use the .pm6 file extension&lt;/h4&gt;

&lt;p&gt;Vim will automatically use Perl 6 syntax highlighting if the file extension is &lt;code&gt;.pm6&lt;/code&gt;. So when working with Perl 6 module files, it&amp;rsquo;s better to use this extension. This doesn&amp;rsquo;t help when I&amp;rsquo;m working on other people&amp;rsquo;s Perl 6 projects however. It also doesn&amp;rsquo;t help for test files, which do not have an equivalent Perl 6 file extension (&lt;code&gt;.t6&lt;/code&gt; test files are ignored when installing Perl 6 modules).&lt;/p&gt;

&lt;h4 id=&#34;use-a-modeline&#34;&gt;Use a modeline&lt;/h4&gt;

&lt;p&gt;A modeline is a line of code in the text of the file which Vim reads and executes. So to activate Perl 6 syntax highlighting I just need to add this modeline to every Perl 6 file I work with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim: filetype=perl6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look at the &lt;a href=&#34;https://github.com/Mouq/json5/blob/master/lib/JSON5/Tiny.pm6#L54&#34;&gt;source code&lt;/a&gt; of JSON5::Tiny for a real-World example. To Perl 6 this code looks just like an ordinary comment, but Vim will use it to turn on Perl 6 syntax highlighting. The modeline can appear anywhere in the code, but it&amp;rsquo;s better to place it at the start or end of the file.&lt;/p&gt;

&lt;p&gt;Older versions of Vim (pre 7.3) and when Vim is run under root privileges, disable modelines as a security risk. Don&amp;rsquo;t run Vim as root! But if you have an older Vim, you can turn on modelines with &lt;code&gt;:set modeline&lt;/code&gt;. As with &lt;code&gt;filetype&lt;/code&gt;, modeline can be abbreviated to &lt;code&gt;ml&lt;/code&gt;, so &lt;code&gt;set ml&lt;/code&gt; works too. To activate modelines automatically, add this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set ml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The downside of using modelines? First there is aforementioned security risk for older Vims. Also it feels impure to add editor directives to the code I&amp;rsquo;m working with, as not everyone uses Vim. These seem like minor issues though.&lt;/p&gt;

&lt;h4 id=&#34;use-a-local-vimrc&#34;&gt;Use a local vimrc&lt;/h4&gt;

&lt;p&gt;Often different Open Source projects will have different coding conventions that I need to follow, so it can be helpful to use a local vimrc file to store these project-specific settings. This works for syntax highlighting too. In order to use local vimrc files, I add the following code to my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will check the current working directory for &lt;code&gt;.vimrc.local&lt;/code&gt; file, and automatically execute it if it finds it. &lt;strong&gt;Warning&lt;/strong&gt; this is a security risk - Vim will execute ANY instruction in a local vimrc, so I am very careful when working with projects that are not my own. Next I create a &lt;code&gt;.vimrc.local&lt;/code&gt; file in the root project directory and add this auto command to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au Bufnewfile,bufRead *.pm,*.t,*.pl set filetype=perl6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I open or create any file with a Perl extension, Vim will set the syntax highlighting to Perl 6. I like this technique because it&amp;rsquo;s not intrusive: it doesn&amp;rsquo;t require any changes to the Perl 6 files themselves, so it works well on shared projects (I never check-in my local vimrc to the Git repo).&lt;/p&gt;

&lt;h4 id=&#34;use-code-detection&#34;&gt;Use code detection&lt;/h4&gt;

&lt;p&gt;I can also have Vim try to detect Perl 6 code automatically. Two directives which would indicate we&amp;rsquo;re working with Perl 6 instead of Perl 5 code: the shebang line and the &lt;code&gt;use v6;&lt;/code&gt; directive. To check for these, I&amp;rsquo;ll add a function to my .vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function uses &lt;code&gt;getline()&lt;/code&gt; to check the first line of the file to see if it looks like a Perl 6 shebang. This should work well for &lt;code&gt;.pl&lt;/code&gt; scripts, but Perl 6 module files will not have a shebang, so the next part of the script checks the first 5 lines of the file for the &lt;code&gt;use v6;&lt;/code&gt; directive. The last line of code is an auto command which will call the function anytime we open file with a Perl file extension.&lt;/p&gt;

&lt;p&gt;The main drawback of this technique is that not all Perl 6 code uses the &lt;code&gt;use v6;&lt;/code&gt; directive, and so when working with module files, the code detection can fail. However the code detection could be improved to use more rules for detecting Perl 6 code such as class declarations. The &lt;a href=&#34;https://github.com/vim-perl/vim-perl&#34;&gt;vim-perl&lt;/a&gt; plugin has more sophisticated Perl 6 code detection &lt;a href=&#34;https://github.com/vim-perl/vim-perl/blob/master/ftdetect/perl11.vim&#34;&gt;rules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;complete-vimrc&#34;&gt;Complete .vimrc&lt;/h3&gt;

&lt;p&gt;This &lt;code&gt;.vimrc&lt;/code&gt; contains all the code shown above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax on

&amp;quot;Recognize modeline # vim: filetype=perl6
set ml

&amp;quot;check for a local vimrc
if filereadable(&amp;quot;.vimrc.local&amp;quot;)
  so .vimrc.local
endif

&amp;quot;check for Perl 6 code
function! LooksLikePerl6 ()
  if getline(1) =~# &#39;^#!.*/bin/.*perl6&#39;
    set filetype=perl6
  else
    for i in [1,2,3,4,5]
      if getline(i) == &#39;use v6;&#39;
        set filetype=perl6
        break
      endif
    endfor
  endif
endfunction

au bufRead *.pm,*.t,*.pl call LooksLikePerl6()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So that&amp;rsquo;s it, four useful-but-imperfect techniques for detecting file types in Vim. I tend to use a combination of all four. This would be a nice problem not to have. I&amp;rsquo;d like the Perl 6 community to agree and encourage unambiguous file extensions like &lt;code&gt;.pm6&lt;/code&gt;, &lt;code&gt;.t6&lt;/code&gt; and &lt;code&gt;.pl6&lt;/code&gt;. Larry Wall called this &amp;ldquo;free advertising&amp;rdquo;. It&amp;rsquo;s also a simple way to make Perl 6 programmers more productive. Not every text editor is as customizable as Vim.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A preview of Perl 5.22</title>
      <link>http://localhost:1313/article/165/2015/4/10/A-preview-of-Perl-5-22/</link>
      <pubDate>Fri, 10 Apr 2015 14:29:14 +0000</pubDate>
      
      <guid>http://localhost:1313/article/165/2015/4/10/A-preview-of-Perl-5-22/</guid>
      <description>

&lt;p&gt;Perl v5.22 is bringing myriad new features and ways of doing things, making its &lt;em&gt;perldelta&lt;/em&gt; file much more interesting than most releases. While I normally wait until after the first stable release to go through these features over at &lt;a href=&#34;http://www.effectiveperlprogramming.com&#34;&gt;The Effective Perler&lt;/a&gt;, here&amp;rsquo;s a preview of some of the big news.&lt;/p&gt;

&lt;h3 id=&#34;a-safer-argv&#34;&gt;A safer ARGV&lt;/h3&gt;

&lt;p&gt;The line input operator, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; looks at the &lt;code&gt;@ARGV&lt;/code&gt; array for filenames to open and read through the &lt;code&gt;ARGV&lt;/code&gt; filehandle. It has the same meta-character problem as the two-argument &lt;code&gt;open&lt;/code&gt;. Special characters in the filename might do shell things. To get around this unintended feature (which I think might be useful if that&amp;rsquo;s what you want), there&amp;rsquo;s a new line-input operator, &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;, that doesn&amp;rsquo;t treat any character as special:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ) {  &lt;span style=&#34;color:#75715e&#34;&gt;# new, safe line input operator&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;cgi-pm-and-module-build-disappear-from-core&#34;&gt;CGI.pm and Module::Build disappear from core&lt;/h3&gt;

&lt;p&gt;The Perl maintainers have been stripping modules from the Standard Library. Sometimes that&amp;rsquo;s because no one uses (or should use) that module anymore, no one wants to maintain that module, or it&amp;rsquo;s better to get it from CPAN where the maintainer can update it faster than the Perl release cycle. You can still find these modules on CPAN, though.&lt;/p&gt;

&lt;p&gt;The CGI.pm module, only one of Lincoln Stein&amp;rsquo;s amazing contributions to the Perl community, is from another era. It was light years ahead of its Perl 4 predecessor, &lt;em&gt;cgi.pl&lt;/em&gt;. It did everything, including HTML generation. This was the time before robust templating systems came around, and CGI.pm was good. But, they&amp;rsquo;ve laid it to rest.&lt;/p&gt;

&lt;p&gt;Somehow, Module::Build fell out of favor. Before then, building and installing Perl modules depended on a non-perl tool, &lt;em&gt;make&lt;/em&gt;. That&amp;rsquo;s a portability problem. However, we already know they have Perl, so if there were a pure Perl tool that could do the same thing we could solve the portability problem. We could also do much more fancy things. It was the wave of the future. I didn&amp;rsquo;t really buy into Module::Build although I had used it for a distributions, but I&amp;rsquo;m still a bit sad to see it go. It had some technical limitations and was unmaintained for a bit, and now it&amp;rsquo;s been cut loose. David Golden explains more about that in &lt;a href=&#34;http://www.dagolden.com/index.php/2140/paying-respect-to-modulebuild/&#34;&gt;Paying respect to Module::Build&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This highlights a long-standing and usually undiscovered problem with modules that depend on modules in the Standard Library. For years, most authors did not bother to declare those dependencies because Perl was there and its modules must be there too. When those modules move to a CPAN-only state, they end up with an undeclared dependencies. This also shows up in some linux distributions that violate the Perl license by removing some modules or putting them in a different package. Either way, always declare a dependency on everything you use despite its provenance.&lt;/p&gt;

&lt;h3 id=&#34;hexadecimal-floating-point-values&#34;&gt;Hexadecimal floating point values&lt;/h3&gt;

&lt;p&gt;Have you always felt too constrained by ten digits, but were also stuck with non-integers? Now your problems are solved with hexadecimal floating point numbers.&lt;/p&gt;

&lt;p&gt;We already have the exponential notation with uses the &lt;code&gt;e&lt;/code&gt; to note the exponent, as in &lt;code&gt;1.23e4&lt;/code&gt;. But that &lt;code&gt;e&lt;/code&gt; is a hexadecimal digit, so we can&amp;rsquo;t use that to denote the exponent. Instead, we use &lt;code&gt;p&lt;/code&gt; and an exponent that&amp;rsquo;s a power of two:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.22&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deadbeefp2;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;variable-aliases&#34;&gt;Variable aliases&lt;/h3&gt;

&lt;p&gt;We can now assign to the reference version of a non-reference variable. This creates an alias for the referenced value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.22&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(refaliasing)&lt;/span&gt;;

&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%other_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;%hash;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think we&amp;rsquo;ll discover many interesting uses for this, and probably some dangerous ones, but the use case in the docs looks interesting. We can now assign to something other than a scalar for the &lt;code&gt;foreach&lt;/code&gt; control variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.22&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; feature &lt;span style=&#34;color:#e6db74&#34;&gt;qw(refaliasing)&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; %hash ( @array_of_hashes ) { &lt;span style=&#34;color:#75715e&#34;&gt;# named hash control variable&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $key ( keys %hash ) { &lt;span style=&#34;color:#75715e&#34;&gt;# named hash now!&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;;
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;ll use that particular pattern since I&amp;rsquo;m comfortable with references, but if you really hate the dereferencing arrow, this might be for you. Note that v5.12 allows us to write &lt;code&gt;keys $hash_ref&lt;/code&gt; without the dereferencing &lt;code&gt;%&lt;/code&gt;. See my &lt;a href=&#34;http://www.effectiveperlprogramming.com/&#34;&gt;Effective Perl&lt;/a&gt; items &lt;a href=&#34;http://www.effectiveperlprogramming.com/2010/11/use-array-references-with-the-array-operators/&#34;&gt;Use array references with the array operators&lt;/a&gt;, but also &lt;a href=&#34;http://www.effectiveperlprogramming.com/2012/03/dont-use-auto-dereferencing-with-each/&#34;&gt;Don’t use auto-dereferencing with each or keys&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;repetition-in-list-assignment&#34;&gt;Repetition in list assignment&lt;/h3&gt;

&lt;p&gt;Perl can assign one list of scalars to another. In &lt;a href=&#34;http://www.learning-perl.com&#34;&gt;Learning Perl&lt;/a&gt; we show assigning to &lt;code&gt;undef&lt;/code&gt;. I could make dummy variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;($name, $card_num, $addr, $home, $work, $count) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/:/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if I don&amp;rsquo;t need all of those variable, I can put placeholder &lt;code&gt;undef&lt;/code&gt;s in the assignment list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;(undef, $card_num, undef, undef, undef, $count) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/:/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those consecutive &lt;code&gt;undef&lt;/code&gt;s can be a problem, as well as ugly. I don&amp;rsquo;t have to count out separate &lt;code&gt;undef&lt;/code&gt;s now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.22&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt;(undef, $card_num, (undef)x3, $count) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split &lt;span style=&#34;color:#e6db74&#34;&gt;/:/&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;list-pipe-opens-on-win32&#34;&gt;List pipe opens on Win32&lt;/h3&gt;

&lt;p&gt;The three-argument &lt;code&gt;open&lt;/code&gt; can take a pipe mode, which didn&amp;rsquo;t previously work on Windows. Now it does, to the extent that the list form of &lt;code&gt;system&lt;/code&gt; works on Win32:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;open &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $fh, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some external command&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; die;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I always have to check my notes to remember that the &lt;code&gt;-&lt;/code&gt; in the pipe mode goes on the side of the pipe that has the pipe. Those in the unix world know &lt;code&gt;-&lt;/code&gt; as a special filename for standard input in many commands.&lt;/p&gt;

&lt;h3 id=&#34;various-small-fixes&#34;&gt;Various small fixes&lt;/h3&gt;

&lt;p&gt;We also get many smaller fixes I think are worth a shout out. Many of these are clean ups to warts and special cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;/x&lt;/code&gt; regex operator flag now ignores Unicode space characters instead of just ASCII whitespace. If you tried to do that with multiple &lt;code&gt;/x&lt;/code&gt; on an operator, you can&amp;rsquo;t do that anymore either (it didn&amp;rsquo;t work before anyway but it wasn&amp;rsquo;t an error).&lt;/li&gt;
&lt;li&gt;A literal &lt;code&gt;{&lt;/code&gt; in a pattern should now be escaped. I mostly do that anyway.&lt;/li&gt;
&lt;li&gt;A bad &lt;code&gt;close&lt;/code&gt; now sets &lt;code&gt;$!&lt;/code&gt;. We don&amp;rsquo;t have to fiddle with &lt;code&gt;$?&lt;/code&gt; to find out what happened.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defined(@array)&lt;/code&gt; and &lt;code&gt;defined(%hash)&lt;/code&gt; are now fatal. They&amp;rsquo;ve been deprecated for a long time, and now they are gone. This does not apply to assignments, though, such as &lt;code&gt;defined(@array = ...)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using a named array or hash in a place where Perl expects a reference is now fatal.&lt;/li&gt;
&lt;li&gt;Omitting % and @ on hash and array names is no longer permitted. No more &lt;code&gt;my %hash = (...); my @keys = keys hash&lt;/code&gt; where Perl treats the bareword &lt;code&gt;hash&lt;/code&gt; as &lt;code&gt;%hash&lt;/code&gt;. This is a Perl 4 feature that is no longer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get to grips with GNU Screen</title>
      <link>http://localhost:1313/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</link>
      <pubDate>Mon, 16 Feb 2015 14:15:50 +0000</pubDate>
      
      <guid>http://localhost:1313/article/153/2015/2/16/Get-to-grips-with-GNU-Screen/</guid>
      <description>

&lt;p&gt;GNU Screen is a terminal multiplexer, a program that manages terminal windows. It&amp;rsquo;s been around for 28 years, which makes it older than Perl 5. So if you thought Perl had some archaic conventions, you ain&amp;rsquo;t seen nothing yet. But despite it&amp;rsquo;s age Screen is a powerful tool for managing terminals; if you often find yourself using more than one terminal, you owe it to yourself to start using a multiplexer for major productivity gains. Screen is the most widely used multiplexer, another popular option is &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt;, but this article is about Screen.&lt;/p&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Start Screen by simply typing &lt;code&gt;screen&lt;/code&gt; at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All commands in Screen start with the prefix &lt;code&gt;Control + a&lt;/code&gt;. The first command to learn is the most important; how to display the commands menu! To do this type &lt;code&gt;Control + a, ?&lt;/code&gt; (that is, press Control and the &amp;ldquo;A&amp;rdquo; key, release the keys and then type question mark). If you remember this one command, you can always get yourself out of trouble, even if you forget some of the other commands.&lt;/p&gt;

&lt;h3 id=&#34;managing-windows&#34;&gt;Managing windows&lt;/h3&gt;

&lt;p&gt;To open a new terminal window, type &lt;code&gt;Control + a, c&lt;/code&gt;. Screen will create a new window - this is a new terminal process. To see a list of open windows, type &lt;code&gt;Control + a, &amp;quot;&lt;/code&gt;. You can press up and down to highlight the window you want to use, and press enter to open it.&lt;/p&gt;

&lt;p&gt;You can also cycle through windows, by pressing &lt;code&gt;Control + a, n&lt;/code&gt; to move to the next window and &lt;code&gt;Control + a, p&lt;/code&gt; to move to the previous one. Every window is assigned a number, and you can jump straight to a window with: &lt;code&gt;Control + a, #&lt;/code&gt; where the pound key is the number window to jump to.&lt;/p&gt;

&lt;p&gt;Finally if you want to kill a window type &lt;code&gt;Control + a, k&lt;/code&gt;. To kill all windows and exit screen the combination is: &lt;code&gt;Control + a, \&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;split-screen&#34;&gt;Split Screen&lt;/h3&gt;

&lt;p&gt;Screen can split the terminal window into multiple windows. This is really helpful if you need to look at multiple terminals simultaneously. Any window can be split vertically or horizontally and multiple times, leading to all kinds of &lt;a href=&#34;https://encrypted.google.com/search?tbm=isch&amp;amp;q=gnu%20screen&amp;amp;tbs=imgo:1&#34;&gt;combinations&lt;/a&gt;. To vertically split the screen type: &lt;code&gt;Control + a, |&lt;/code&gt; and to horizontally split type: &lt;code&gt;Control + a, S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To highlight the next split window, type &lt;code&gt;Control + a, tab&lt;/code&gt; (there&amp;rsquo;s also a config option to select by mouse click, more on that later). The combination &lt;code&gt;Control + a, Q&lt;/code&gt;. will quit split screen mode.&lt;/p&gt;

&lt;h3 id=&#34;copy-and-paste&#34;&gt;Copy and paste&lt;/h3&gt;

&lt;p&gt;Copying and pasting with Screen isn&amp;rsquo;t super easy. So much so that I often found myself using the terminal copy and paste instead (highlight with mouse, then &lt;code&gt;Control + C&lt;/code&gt;, &lt;code&gt;Control + V&lt;/code&gt;). However it&amp;rsquo;s useful to know Screen&amp;rsquo;s copy and paste because terminal copy and paste just crumbles on split screen mode, and you may want to use the mouse select for something more useful anyway.&lt;/p&gt;

&lt;p&gt;Copy and paste is modal, so you first have to enter &amp;ldquo;copy mode&amp;rdquo;. To do that type &lt;code&gt;Control + a, [&lt;/code&gt;. Now move the cursor to the beginning of the text you want to copy. Press &lt;code&gt;space&lt;/code&gt; to mark it and use the arrow keys (or h, j, k, l) to move the cursor to the end of the text you want to copy. Pressing &lt;code&gt;space&lt;/code&gt; again will copy the highlighted text. To paste, type &lt;code&gt;Control + a, ]&lt;/code&gt;. Ew.&lt;/p&gt;

&lt;h3 id=&#34;scrolling&#34;&gt;Scrolling&lt;/h3&gt;

&lt;p&gt;By default Screen prevents scrolling using the X-Window scrollbar (it also doesn&amp;rsquo;t keep much history). This can be get very annoying, so you&amp;rsquo;ll want to know how to scroll. To do so, you need to enter copy mode with &lt;code&gt;Control + a, [&lt;/code&gt;. and then press &lt;code&gt;Control + u&lt;/code&gt; to scroll up and &lt;code&gt;Control + d&lt;/code&gt; to go down. Press &lt;code&gt;escape&lt;/code&gt; to exit copy mode. And until you can remember the combinations for scrolling, you&amp;rsquo;ll find yourself piping output to &lt;code&gt;less&lt;/code&gt; more than you ever imagined.&lt;/p&gt;

&lt;h3 id=&#34;detaching-screen-sessions&#34;&gt;Detaching Screen Sessions&lt;/h3&gt;

&lt;p&gt;Screen sessions can be put into the background just like any other terminal process. Screen will keep open any terminal processes (like ssh sessions). This is very useful - if you find yourself working with more than 5 or 6 windows, it might be easier to detach and start a new screen session than adding more windows. To detach screen, the combination is &lt;code&gt;Control + a, d&lt;/code&gt;. When you detach, screen will print the session name and return to the terminal prompt. To re-attach to a detached session just use &lt;code&gt;screen -r&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have more than one screen session, you can display all detached sessions with &lt;code&gt;-ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ls
There are screens on:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;30549&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pts&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;localhost   (Detached)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;30498&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pts&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;localhost   (Detached)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;29207&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pts&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;localhost   (Detached)
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Sockets in &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;run&lt;span style=&#34;color:#e6db74&#34;&gt;/screen/&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sillymoose&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then just re-attach to the session you want by providing the session name as an option to &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r &lt;span style=&#34;color:#ae81ff&#34;&gt;29207&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you&amp;rsquo;ve really got multiple Screen sessions going, it can be hard to remember what they&amp;rsquo;re all doing. So when you start Screen, use the &lt;code&gt;-S&lt;/code&gt; option to give the session a name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;S aws_ec2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you name all your sessions, it&amp;rsquo;s much easier to know which one to re-attach to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ls
There are screens on:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;31155&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aws_ec2   (Detached)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;30866&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email_servers (Detached)
    &lt;span style=&#34;color:#ae81ff&#34;&gt;30815&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ecommerce_app (Detached)
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Sockets in &lt;span style=&#34;color:#e6db74&#34;&gt;/var/&lt;/span&gt;run&lt;span style=&#34;color:#e6db74&#34;&gt;/screen/&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sillymoose&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

$ screen &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r email_servers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;customizing-screen&#34;&gt;Customizing Screen&lt;/h3&gt;

&lt;p&gt;Screen is highly configurable which is good because you&amp;rsquo;ll probably want to change a few of the default options. The first option you should consider isn&amp;rsquo;t a Screen option at all however.&lt;/p&gt;

&lt;p&gt;To stop your ssh sessions from timing out, add the following to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# dont timeout connections&lt;/span&gt;
ServerAliveInternal &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the &lt;code&gt;~/.ssh/config&lt;/code&gt; file didn&amp;rsquo;t already exist, you may have to change the permissions on the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;644&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.ssh/co&lt;/span&gt;nfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option will have ssh send a byte every 10 minutes to the remote server to keep the session alive. You may want to change the frequency depending on your needs. Now you can have multiple ssh windows within screen, detach them for hours and return and you&amp;rsquo;ll still be logged in.&lt;/p&gt;

&lt;p&gt;Like many other terminal programs, screen will look for a runcom config file (&lt;code&gt;~/.screenrc&lt;/code&gt;). I like the following options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# no welcome message&lt;/span&gt;
startup_message off

&lt;span style=&#34;color:#75715e&#34;&gt;# keep running processes on detach&lt;/span&gt;
autodetach on

&lt;span style=&#34;color:#75715e&#34;&gt;# start windows at 1 instead of 0&lt;/span&gt;
bind c screen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
bind &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;c screen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
bind &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; select &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
screen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# large scrollback buffer&lt;/span&gt;
defscrollback &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# on split screen, switch window focus by clicking&lt;/span&gt;
mousetrack on

&lt;span style=&#34;color:#75715e&#34;&gt;# refresh screen after closing a program&lt;/span&gt;
altscreen on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are loads more options to choose from. Screen has a huge online &lt;a href=&#34;https://www.gnu.org/software/screen/manual/screen.html&#34;&gt;manual&lt;/a&gt; and it&amp;rsquo;s terminal man page is comprehensive too. Any typed command listed in the manual can be run from within screen, or added to the &lt;code&gt;~/.screenrc&lt;/code&gt; file. For instance if you don&amp;rsquo;t like Screen&amp;rsquo;s default key bindings, checkout the &lt;code&gt;bindkey&lt;/code&gt; command for overriding them, as you don&amp;rsquo;t want to be typing them for another 28 years.&lt;/p&gt;

&lt;h3 id=&#34;screen-cheatsheet&#34;&gt;Screen Cheatsheet&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# Type before other commands
Prefix: Control + a

Shortcuts menu: ?

New window:    c      Split Vertical:   |       Copy mode:     [
Close window:  k      Split Horizontal: S       Start copy:    space
Next window:   n      Focus next region: tab    Scroll up:     u
Prior window:  p      Quit split screem: Q      Scroll down:   d
Jump window #: 0-9                              End copy:      space
List windows:  &amp;quot;                                Paste:         ]
                                                End copy mode: escape

Detach: d
Quit:   \

# Terminal commands
Launch Screen:     screen
Named session:     screen -S &amp;lt;name&amp;gt;
List sessions:     screen -ls
Re-attach session: screen -r [name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build Perl on Android 4.4</title>
      <link>http://localhost:1313/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</link>
      <pubDate>Mon, 16 Jun 2014 12:57:21 +0000</pubDate>
      
      <guid>http://localhost:1313/article/97/2014/6/16/How-to-build-Perl-on-Android-4-4/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The recent release of Perl 5.20 came with the exciting news that Perl was now installable on Android, Google&amp;rsquo;s mobile operating system. But before you get grand visions of flying phone-controlled drones via &lt;a href=&#34;https://metacpan.org/pod/UAV::Pilot&#34;&gt;UAV::Pilot&lt;/a&gt;, know that right now, how to get a working Perl binary is just about all that&amp;rsquo;s documented. This article shows you how to get that far - solving the rest is left for the pioneers!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To build Perl on Android you&amp;rsquo;ll need a unix-like environment (Cygwin may work too). This article describes installing Perl on an Android Virtual Device (AVD), so you do not need an Android phone to try Perl on Android.&lt;/p&gt;

&lt;h3 id=&#34;preparation&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Download the Android &amp;ldquo;SDK Tools Only&amp;rdquo; &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;tarball&lt;/a&gt;, and the NDK &lt;a href=&#34;https://developer.android.com/tools/sdk/ndk/index.html&#34;&gt;tarball&lt;/a&gt;. At the command line, change to the directory where you downloaded the tarballs to and untar both tarballs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ tar xvf android&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ndk&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r9d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bz2
$ tar xvf android&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sdk_r22&lt;span style=&#34;color:#ae81ff&#34;&gt;.6.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save typing later, add &amp;ldquo;android-sdk-*/tools&amp;rdquo; and &amp;ldquo;android-sdk-*/platform-tools&amp;rdquo; to $PATH (you&amp;rsquo;ll need to provide the absolute paths to the directories). For example if I had extracted android-sdk-tools to my user directory, on Linux I could add it to PATH with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/android-sdk-linux/&lt;/span&gt;tools:$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/android-sdk-linux/&lt;/span&gt;platform&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tools&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With your PATH updated, launch the Android SDK Manager:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ android&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open a GUI menu from where you can download and install the required Android tools and libraries. Using the menu, install Android SDK Tools, Android SDK Platform-tools, Android SDK Build-tools and Android 4.2.2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_sdk_manager.png&#34; alt=&#34;The Android SDK Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need a copy of the Perl 5.20.0 &lt;a href=&#34;http://www.cpan.org/src/5.0/perl-5.20.0.tar.gz&#34;&gt;tarball&lt;/a&gt;. Untar this at the command line too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ tar xvf perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.20.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;setup-the-android-emulator&#34;&gt;Setup the Android emulator&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re going to create an Android Virtual Device that can be used by the emulator to run Android on your machine. At the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ android avd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will launch the Android Virtual Device Manager:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_avd_1.png&#34; alt=&#34;The Android Virtual Device Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click &amp;ldquo;new&amp;rdquo; to create a new AVD. I created one with the following settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_avd_2.png&#34; alt=&#34;Create a new AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you select &amp;ldquo;ARM (androideabi-v7a)&amp;rdquo; as the CPU/ABI option. Keep in mind your platform&amp;rsquo;s hardware when choosing these settings. I found higher resolution devices ran very slowly on my old MacBook. The &amp;ldquo;use snapshot&amp;rdquo; option is a timesaver that saves the virtual device&amp;rsquo;s state post-boot, so saves you from waiting for the virtual device to boot up again after the first time. Once you&amp;rsquo;ve created the AVD, you should see it listed in the AVD Manager window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_avd_4.png&#34; alt=&#34;The AVD has been created&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having created a new AVD, you can close the AVD Manager window.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The following commands will create environment variables we&amp;rsquo;ll need for the install. Be sure to adjust the path for ANDROID_NDK to the location where you untarred the Android NDK archive earlier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ export ANDROID_NDK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;android&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ndk&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;r9d
$ export TARGET_ARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;androideabi
$ export ANDROID_TOOLCHAIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/m&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;toolchain&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;androideabi
$ export SYSROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ANDROID_TOOLCHAIN&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sysroot
$ export TARGETDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/mnt/&lt;/span&gt;asec&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perl
$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$ANDROID_NDK&lt;span style=&#34;color:#e6db74&#34;&gt;/toolchains/&lt;/span&gt;$TARGET_ARCH&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/prebuilt/&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create the toolchain, run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt; $ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;ANDROID_NDK&lt;span style=&#34;color:#e6db74&#34;&gt;/build/&lt;/span&gt;tools&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;make&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;standalone&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;toolchain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;platform&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;android&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;install&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$ANDROID_TOOLCHAIN &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;system&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`uname | tr &amp;#39;[A-Z]&amp;#39; &amp;#39;[a-z]&amp;#39;`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x86_64 &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;toolchain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;androideabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Launch your AVD with the emulator (replace kitkat with the name of the avd you created. If you can&amp;rsquo;t remember the name, just run &amp;ldquo;android avd&amp;rdquo; again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ emulator @kitkat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see your emulated device start booting in a new window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_boot.png&#34; alt=&#34;The loaded AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once it&amp;rsquo;s booted, it will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/97/android_loaded.png&#34; alt=&#34;The AVD is booting&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the fully booted AVD still running, return to the command line and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ adb devices&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print out the names of all the connected Android devices.For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;List of devices attached 
emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt;   device&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;rsquo;ve got the device name, we&amp;rsquo;ll use adb to run shell commands on our emulated device. It&amp;rsquo;s important that the AVD is booted and running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;adb &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt; shell &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo sh -c &amp;#39;\&amp;#34;mkdir $TARGETDIR\&amp;#34;&amp;#39; | su --&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now change into the untarred perl-5.20.0 directory, and run configure (replace &amp;ldquo;emulator-5554&amp;rdquo; with your device name):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;./&lt;/span&gt;Configure &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;des &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dusedevel &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dusecrosscompile &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dtargetrun&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;adb &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dcc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;androideabi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gcc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dsysroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$SYSROOT &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dtargetdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$TARGETDIR &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Dtargethost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can now run make and make test to build and test Perl on the device:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ make
$ make test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bear in mind that the make test can take a long time - on my machine it ran for 4 hours. It will appear like the process has hung, this is because adb only prints out the results once the command has completed. Make isntall does not work, but this does not matter, as you can still run the Perl binary and use core modules. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ adb &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt; shell &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/mnt/asec/perl/perl -v&amp;#34;&lt;/span&gt;
This is perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, version &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, subversion &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.20.0&lt;/span&gt;) built &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;androideabi

Copyright &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;, Larry Wall

Perl may be copied only under the terms of either the Artistic License &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the
GNU General Public License, which may be found in the Perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; source kit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Complete documentation &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Perl, including FAQ lists, should be found on
this system using &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;man perl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc perl&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  If you have access to the
Internet, point your browser at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;, the Perl Home Page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Core modules are located in /mnt/asec/perl/lib. To load them, just use the -I switch. For example this one liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;adb &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt; shell &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib -MHTTP::Tiny -E &amp;#34;say  HTTP::Tiny-&amp;gt;new-&amp;gt;get(q{http://perltricks.com})-&amp;gt;{content}&amp;#34;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if running a script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;adb &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s emulator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5554&lt;/span&gt; shell &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/mnt/asec/perl/perl -I/mnt/asec/perl/lib my_script.pl&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Be warned - if you stop the AVD, Perl will be removed.&lt;/strong&gt; You can Google for solutions on how to persist changes across AVD reboots - I have not done this yet. Let me know if you find a reliable solution!&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is not the only way to get Perl running on Android. For a different approach, checkout the &lt;a href=&#34;https://github.com/damonkohler/sl4a&#34;&gt;Scripting Layer 4 Android&lt;/a&gt; project, however it is under-documented and the project may have stagnated.&lt;/p&gt;

&lt;p&gt;This article would not have been possible without the excellent Android perldoc page by Brian Fraser. You can read it on &lt;a href=&#34;https://github.com/Perl/perl5/blob/blead/README.android&#34;&gt;Github&lt;/a&gt; or with Perl 5.20.0 installed you can read it with perldoc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perldoc android&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks Brian!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;text=How+to+build+Perl+on+Android+4.4&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F97%2F2014%2F6%2F16%2FHow-to-build-Perl-on-Android-4-4&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl distributions, modules, packages explained</title>
      <link>http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</link>
      <pubDate>Fri, 13 Jun 2014 12:26:00 +0000</pubDate>
      
      <guid>http://localhost:1313/article/96/2014/6/13/Perl-distributions--modules--packages-explained/</guid>
      <description>

&lt;p&gt;&lt;em&gt;It can be confusing for new Perl programmers to understand the terminology used to describe Perl distributions and their accompanying files. This article explains the core concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-module-distribution&#34;&gt;Package, Module, Distribution&lt;/h3&gt;

&lt;p&gt;A Perl package is just a section of code defined in a .pm file, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; Data::Connector;

&lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;# do something&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The start of the package begins with the &amp;ldquo;package&amp;rdquo; declaration. A package is a lot like a class, except that it can denote a collection of subroutines and variables, and not necessarily be instantiated as an object. Usually a .pm file will have one package declaration per file, but you can have multiple packages in a .pm file, similar to Java and C# where you can have multiple classes in a single file.&lt;/p&gt;

&lt;p&gt;A module is a .pm file (&amp;ldquo;pm&amp;rdquo; means Perl Module). When you import a module with &amp;ldquo;require&amp;rdquo; or &amp;ldquo;use&amp;rdquo;, you are literally referencing the file name and not the package(s) contained in the file. For example to import the &amp;ldquo;Data::Connector&amp;rdquo; package defined above, we could save it in a file called &amp;ldquo;Whatever.pm&amp;rdquo; and later reference it in a script like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; Whatever;

&lt;span style=&#34;color:#75715e&#34;&gt;# call connect subroutine declared in Data::Connector package&lt;/span&gt;
Data::Connector::connect();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All .pm files must end with a &amp;ldquo;true&amp;rdquo; value per Perl&amp;rsquo;s requirements, so most authors either place &amp;ldquo;1;&amp;rdquo; or &amp;ldquo;__PACKAGE__;&amp;rdquo; as the last line of the .pm file. In Perl a true value is any value that is not: null, zero or a zero-length string.&lt;/p&gt;

&lt;p&gt;A distribution is a collection of files that usually includes a Perl module and several other files. There is no strict standard as to which files must be included in a distribution, however for the distribution to be indexed on CPAN and install-able by the CPAN command line client, the distribution needs to include some core files. Distributions have versions - so a Perl module on CPAN will have one distribution for every version of the module. These are the main files and directories you&amp;rsquo;ll encounter in distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README - a brief description of how to install the distribution, sometimes includes a license and examples of how to use the module(s).&lt;/li&gt;
&lt;li&gt;LICENSE - the license for the code - a non-commercial license like the GPL, artistic, BSD etc are common.&lt;/li&gt;
&lt;li&gt;META.yml/ META.json - files that contain the metadata describing the distribution: the author, license, version, pre-requisite modules for use etc. They are auto-generated as part of the distribution build process and can be ignored.&lt;/li&gt;
&lt;li&gt;Makefile.PL and or Build.PL - these are Perl files that are used to install the module(s) in the distribution. Worth looking at when you&amp;rsquo;re having installation issues.&lt;/li&gt;
&lt;li&gt;MANIFEST - a list of the files included in the distribution.&lt;/li&gt;
&lt;li&gt;lib - a directory containing Perl modules - usually the core code of the distribution.&lt;/li&gt;
&lt;li&gt;t - the test files directory. These are run when the module is installed. If you have failing tests on installation, it can be helpful to review the test files in the t/ directory to find out the specifics of the test.&lt;/li&gt;
&lt;li&gt;bin - if the distribution contains an app, (Perl script) it will be in here. Often the app uses modules contained in the lib directory.&lt;/li&gt;
&lt;li&gt;Changes - a list of changes from distribution version to version.&lt;/li&gt;
&lt;li&gt;xt - the extended test files directory, usually used for author tests that you don&amp;rsquo;t need to run.&lt;/li&gt;
&lt;li&gt;eg - a directory of example Perl scripts, using the module(s) contained in the distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the typical directories and files found in a Perl distribution but as there is no fixed standard, distribution authors are free to include and exclude the files they wish. For a good example, check out the files provided by David Golden in a distribution of the the popular &lt;a href=&#34;https://metacpan.org/source/DAGOLDEN/HTTP-Tiny-0.043&#34;&gt;HTTP::Tiny&lt;/a&gt; module.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you get to grips with Perl packages, modules and distributions it&amp;rsquo;s far easier to start hacking on Perl modules that don&amp;rsquo;t work the way you want them to. For example, in the case of a module that won&amp;rsquo;t install, you can download the distribution from CPAN (at the command line &amp;ldquo;cpan -g Module::Name&amp;rdquo;), untar it, and patch the failing tests, or examine the source code in the lib directory and resolve a bug or two. Before long you&amp;rsquo;ll be releasing your own distributions to CPAN!&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;text=Perl+distributions%2C+modules%2C+packages+explained&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F96%2F2014%2F6%2F13%2FPerl-distributions-modules-packages-explained&amp;amp;via=perltricks&#34;&gt;tweet&lt;/a&gt; about it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy application dependency management with Stratopan</title>
      <link>http://localhost:1313/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</link>
      <pubDate>Thu, 20 Feb 2014 03:55:29 +0000</pubDate>
      
      <guid>http://localhost:1313/article/71/2014/2/20/Easy-application-dependency-management-with-Stratopan/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Good Perl authors write modular code and leverage CPAN as much as possible. The downside of this approach is that Perl applications accumulate hundreds of CPAN module dependencies. Fortunately for Perl, Stratopan makes it simple to manage your application dependencies and quickly deploy it to new environments.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-many-dependencies&#34;&gt;How many dependencies?!&lt;/h3&gt;

&lt;p&gt;Perl application dependencies grow rapidly. This is because every time you import a module, you take on that module&amp;rsquo;s dependencies, and those of its imports and so on. The cover picture above shows the dependencies graph for the PerlTricks.com application; it&amp;rsquo;s 283 modules. That&amp;rsquo;s a lot of code to manage.&lt;/p&gt;

&lt;h3 id=&#34;manage-module-dependencies-with-stratopan&#34;&gt;Manage module dependencies with Stratopan&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stratopan.com&#34;&gt;Stratopan&lt;/a&gt;, the cloud-based module hosting service, let&amp;rsquo;s you upload Perl modules to a personal repository in the cloud. On our &lt;a href=&#34;https://stratopan.com/sillymoose/webstuff/perltricks&#34;&gt;PerlTricks&lt;/a&gt; stack, we&amp;rsquo;ve uploaded the exact versions of all of the modules used in our production environment. Many of the modules are not up to date, but that doesn&amp;rsquo;t matter as these are the module versions that &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;rapid-deployment&#34;&gt;Rapid Deployment&lt;/h3&gt;

&lt;p&gt;Deploying this stack to a fresh environment couldn&amp;rsquo;t be easier. We can use &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt; to read our Makefile.PL and recursively install our application dependencies, using Stratopan as the source. In the terminal we navigate to the root application directory and enter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;installdeps &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;mirror&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;mirror https:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;tratopan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;WebStuff&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;perltricks &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s review this code: first we use cpanm&amp;rsquo;s &amp;ldquo;-n&amp;rdquo; switch to turn off module tests to install the modules super-fast. The &amp;ldquo;&amp;ndash;installdeps&amp;rdquo; switch makes cpanm look for application dependencies. The &amp;ldquo;mirror&amp;rdquo; switches instruct cpan to use our Stratopan stack as the install source. The trailing period indicates to search for dependencies in the current directory. This is the perfect marriage: Stratopan recursively pulled our module dependencies into our stack, and cpanm recursively installs all dependencies it finds. Even though our Makefile lists ~40 modules, cpanm ends up installing all 283.&lt;/p&gt;

&lt;p&gt;When we want to upgrade our modules we can do it in a controlled way by making a copy of our stack upgrading the modules for testing in a development environment, before upgrading production.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Without Stratopan and cpanm, deploying the PerlTricks application to a new server would be a lot more work. We&amp;rsquo;d either have to list and source the specific module versions and deploy them manually, or else install the newest versions of all of 283 dependencies and hope they still play nice with each other. Two of our dependences are no longer even on CPAN!&lt;/p&gt;

&lt;p&gt;Want to get started with Stratopan? Check out our &lt;a href=&#34;http://perltricks.com/article/48/2013/11/15/A-Stratopan-quick-start-user-guide&#34;&gt;quick start user guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoyed this article? Help us out and &lt;a href=&#34;https://twitter.com/intent/tweet?original_referer=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;text=Easy+application+dependency+management+with+Stratopan&amp;amp;tw_p=tweetbutton&amp;amp;url=http%3A%2F%2Fperltricks.com%2Farticle%2F71%2F2014%2F2%2F20%2FEasy-application-dependency-management-with-Stratopan&amp;amp;via=perltricks&#34;&gt;retweet&lt;/a&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shazam! Use Image::Magick with Perlbrew in minutes</title>
      <link>http://localhost:1313/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</link>
      <pubDate>Wed, 01 Jan 2014 23:43:09 +0000</pubDate>
      
      <guid>http://localhost:1313/article/57/2014/1/1/Shazam--Use-Image--Magick-with-Perlbrew-in-minutes/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The open source ImageMagick software provides amazing tools for creating and manipulating images in over 100 formats. Unfortunately, installing ImageMagick&amp;rsquo;s Perl module under Perlbrew can be a frustrating and time-consuming task. However it doesn&amp;rsquo;t have to be this way - with the method described below you can have the module installed in minutes, no root access required!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;update-07-01-2014&#34;&gt;&lt;em&gt;Update 07-01-2014&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Zaki (&lt;a href=&#34;https://twitter.com/zmughal&#34;&gt;@zhmughal&lt;/a&gt;) has worked up a sweet &lt;a href=&#34;https://gist.github.com/zmughal/8264712/raw/8831e421393143c5b48f22dcfa12eeda51c5cfbf/install-imagemagick-perl&#34;&gt;shell script&lt;/a&gt; to automate the installation process for you, so you can save the finger work for using ImageMagick with your next Perl program:)&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to have Perlbrew and a local Perl installation via Perlbrew on Unix-based platform. This has been tested on Perl 5.16.3 but should work on any modern Perl version.&lt;/p&gt;

&lt;h3 id=&#34;preparation&#34;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;Create a local directory: we will install ImageMagick here. Open up the terminal and enter the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;mkdir &lt;span style=&#34;color:#f92672&#34;&gt;~/&lt;/span&gt;local&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;installing-image-magick-don-t-use-cpan&#34;&gt;Installing Image::Magick - don&amp;rsquo;t use CPAN&lt;/h3&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://metacpan.org/pod/Image::Magick&#34;&gt;Image::Magick&lt;/a&gt; module is available on CPAN, installing it via CPAN is usually a fruitless task as the process croaks on make. Instead download the whole &lt;a href=&#34;http://www.imagemagick.org/download/ImageMagick.tar.gz&#34;&gt;ImageMagick tarball&lt;/a&gt;. Once downloaded, navigate to the tarball&amp;rsquo;s parent directory using the terminal and un-tar the archive with the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;tar xvfz ImageMagick&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now change into the new directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cd ImageMagick&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.8.8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the following command, replacing [username], [path to CORE] and [path to Perl bin] with your system&amp;rsquo;s details. Remove the &amp;ldquo;&amp;ndash;without-threads&amp;rdquo; text if your Perl was compiled with threads (here is how to check).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;LDFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;L&lt;span style=&#34;color:#e6db74&#34;&gt;/home/&lt;/span&gt;[username]&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;[path to CORE] &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/configure --prefix /&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/[username]/&lt;/span&gt;local &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/&lt;/span&gt;[username]&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;[path to Perl bin] &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;without&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;threads&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a completed example for my system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;LDFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;L&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/x86_64-linux/&lt;/span&gt;CORE &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/configure --prefix /&lt;/span&gt;home&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;local &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;without&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;threads&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this command should cause ImageMagick to run a series of configuration checks, at the end of which it will print a configuration summary, which should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;ImageMagick is configured as follows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Please verify that this configuration
matches your expectations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Host system type: x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unknown&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu
Build system type: x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;unknown&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu

                  Option                        Value
&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
Shared libraries  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shared&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
Static libraries  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;static&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
Module support    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;modules&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;     no
GNU ld            &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gnu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ld&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes     yes
Quantum depth     &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;quantum&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
High Dynamic Range Imagery
                  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;hdri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;      no

Delegate Configuration:
BZLIB             &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bzlib&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes      yes
Autotrace         &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;autotrace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;       no
Dejavu fonts      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dejavu&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;font&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;default    &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/s&lt;/span&gt;hare&lt;span style=&#34;color:#e6db74&#34;&gt;/fonts/&lt;/span&gt;dejavu&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
DJVU              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;djvu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
DPS               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
FFTW              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fftw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
FlashPIX          &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fpx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
FontConfig        &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fontconfig&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes     &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
FreeType          &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;freetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
GhostPCL          None              pcl6 (unknown)
GhostXPS          None              gxps (unknown)
Ghostscript       None              gs (&lt;span style=&#34;color:#ae81ff&#34;&gt;9.10&lt;/span&gt;)
Ghostscript fonts &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gs&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;font&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;default    &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/s&lt;/span&gt;hare&lt;span style=&#34;color:#e6db74&#34;&gt;/fonts/&lt;/span&gt;default&lt;span style=&#34;color:#e6db74&#34;&gt;/Type1/&lt;/span&gt;
Ghostscript lib   &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gslib&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;       no
Graphviz          &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gvc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;     
JBIG              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jbig&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
JPEG v1           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jpeg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
JPEG&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jp2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        yes
LCMS v1           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lcms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
LCMS v2           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lcms2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes      &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
LQR               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lqr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
LTDL              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ltdl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
LZMA              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lzma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
Magick&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;magick&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;plus&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;plus&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes   &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt; (failed tests)
MUPDF             &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;mupdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;       no
OpenEXR           &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;openexr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
PANGO             &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pango&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes      &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
PERL              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl        &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl
PNG               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;png&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        yes
RSVG              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rsvg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;        no
TIFF              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tiff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes
WEBP              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;webp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       &lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;
Windows fonts     &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;windows&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;font&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  none
WMF               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wmf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;     no
X11               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;         yes
XML               &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xml&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes        yes
ZLIB              &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;with&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;zlib&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes       yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check that the image file formats you expect to be working with are showing as &amp;ldquo;yes&amp;rdquo;. If any are showing as &amp;ldquo;no&amp;rdquo; that you require, you&amp;rsquo;ll need to install the appropriate C library (e.g. libpng for PNG files) and re-run the previous command.&lt;/p&gt;

&lt;p&gt;To install ImageMagick and the Image::Magick Perl module, run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;confirm-installation&#34;&gt;Confirm Installation&lt;/h3&gt;

&lt;p&gt;Confirming that the Image::Magick module has installed is not quite straightforward either. With version Image Magick 6.8.8, the $VERSION variable is stored in the super class Image::Magick::Q16. Hence you&amp;rsquo;ll need to type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MImage::Magick::Q16&lt;span style=&#34;color:#f92672&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which should yield:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;Image::Magick::Q16 version &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt; required&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;this is only version &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;

&lt;p&gt;Thanks to Jason Galea - his invaluable &lt;a href=&#34;https://github.com/lecstor/DevNotes/wiki/Image-Magick-with-Perlbrew&#34;&gt;GitHub notes&lt;/a&gt; formed the basis of this solution.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Stratopan quick start user guide</title>
      <link>http://localhost:1313/article/48/2013/11/15/A-Stratopan-quick-start-user-guide/</link>
      <pubDate>Fri, 15 Nov 2013 04:23:53 +0000</pubDate>
      
      <guid>http://localhost:1313/article/48/2013/11/15/A-Stratopan-quick-start-user-guide/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; is a cloud-based Perl module repository service. Users can create repositories of modules in the cloud and use them to manage their local installations of Perl modules. This makes it easy to configure a network of machines to have exactly the same modules (and versions), deploy Perl applications quickly and cleanly and host private (i.e. non CPAN) Perl software in a secure, central location. The &lt;a href=&#34;https://stratopan.com/&#34;&gt;Stratopan&lt;/a&gt; beta has officially started and so there has never been a better time to check out this amazing service. Read on for an unofficial quick start guide to Stratopan!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-started-create-a-repository&#34;&gt;Getting started - create a repository&lt;/h3&gt;

&lt;p&gt;Head over to Stratopan, sign up to create a new account and login. You should be presented with this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_1_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the create repository link and complete the information on the following screen. Be sure to select the private option if you want your repository not to be publicly visible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_2_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should now have a new repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_19_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-or-pull-modules&#34;&gt;Add or pull modules&lt;/h3&gt;

&lt;p&gt;Modules reside in &amp;ldquo;stacks&amp;rdquo; which belong to a repository and helpfully Stratopan creates a default &amp;ldquo;master&amp;rdquo; stack for you. To insert modules into a stack you can &amp;ldquo;pull&amp;rdquo; them from CPAN or &amp;ldquo;add&amp;rdquo; them from a local machine. Let&amp;rsquo;s start by pulling a module onto our master stack. Click the &amp;ldquo;pulling&amp;rdquo; link to launch the pull module screen and start typing the name of the module you want to pull. Note that this must be the distribution name and not the module name. For example to pull the module &amp;ldquo;Method::Signatures&amp;rdquo;, you should type &amp;ldquo;Method-Signatures&amp;rdquo;. Helpfully Stratopan provides a case-insensitive predictive text search and lists the module version numbers available too, in case you need a specific variant. Let&amp;rsquo;s pull my wildly unpopular &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_3_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Decide if you want Stratopan to recursively pull all module dependencies; this is usually a good option. What&amp;rsquo;s nice about this is the &amp;ldquo;recursive&amp;rdquo; pull will grab all the modules dependent on your chosen module&amp;rsquo;s dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_4_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It can be surprising how many dependencies there are - for example &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; has 5 direct dependencies and 69 indirect ones. Obviously when there are more dependent modules, Stratopan will take longer to pull them into the stack (usually a minute or two). When it&amp;rsquo;s finished, Stratopan will present the the latest view of the stack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_5_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Stratopan provides some useful stack features. A link to &lt;a href=&#34;https://metacpan.org&#34;&gt;metapcan&lt;/a&gt; is provided for every module (except for private modules that have been added from a local machine) and it&amp;rsquo;s possible to browse the *.pm files in a module by clicking on it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_20_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each stack has it&amp;rsquo;s own commit history, accessed via the aptly-named &amp;ldquo;history&amp;rdquo; link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_22_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;graphs&amp;rdquo; link is much more interesting. It opens this cool, rotatable dependencies chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_21_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally the &amp;ldquo;settings&amp;rdquo; link let&amp;rsquo;s you update the stack name, description and target Perl version. You can also delete the stack from here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_23_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-modules-from-your-stratopan-stack&#34;&gt;Installing modules from your Stratopan stack&lt;/h3&gt;

&lt;p&gt;To install modules from Stratopan you&amp;rsquo;ll need &lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;cpanm&lt;/a&gt;. You can install this via cpan from the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan App::cpanminus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once cpanm has installed, open one of your stacks on Stratopan and copy the stack URL (shown in red below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Stratopan/stratopan_24_600.png&#34; alt=&#34;stratopan screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the terminal type &amp;ldquo;cpanm &amp;ndash;mirror-only &amp;ndash;mirror &amp;rdquo; and paste your copied stack URL and enter one or more module names that you wish to install. For example to install &lt;a href=&#34;https://metacpan.org/pod/WWW::CheckHTML&#34;&gt;WWW::CheckHTML&lt;/a&gt; from my master stack:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;mirror&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;mirror
https:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;tratopan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;WebStuff&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;master WWW::CheckHTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well you should see the following installation dialogue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Working on WWW::CheckHTML
Fetching https:&lt;span style=&#34;color:#e6db74&#34;&gt;//s&lt;/span&gt;tratopan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#e6db74&#34;&gt;/sillymoose/&lt;/span&gt;WebStuff&lt;span style=&#34;color:#e6db74&#34;&gt;/master/&lt;/span&gt;authors&lt;span style=&#34;color:#e6db74&#34;&gt;/id/&lt;/span&gt;S&lt;span style=&#34;color:#e6db74&#34;&gt;/SI/&lt;/span&gt;SILLYMOOS&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WWW&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CheckHTML&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
Configuring WWW&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CheckHTML&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
Building &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; testing WWW&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CheckHTML&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; OK
Successfully installed WWW&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;CheckHTML&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; distribution installed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://stratopan.com&#34;&gt;Stratopan&lt;/a&gt; is an awesome new service which can hugely simplify the configuration of your Perl platforms. Hopefully this guide has given you a better idea of how to get started with it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get detailed Perl version configuration information</title>
      <link>http://localhost:1313/article/41/2013/9/27/Get-detailed-Perl-version-configuration-information/</link>
      <pubDate>Fri, 27 Sep 2013 01:25:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/41/2013/9/27/Get-detailed-Perl-version-configuration-information/</guid>
      <description>&lt;p&gt;Most Perl programmers know they can find out the current Perl version by typing &amp;ldquo;perl -v&amp;rdquo; as the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;v

This is perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, version &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, subversion &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (v5&lt;span style=&#34;color:#ae81ff&#34;&gt;.16.3&lt;/span&gt;) built &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux

Copyright &lt;span style=&#34;color:#ae81ff&#34;&gt;1987&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt;, Larry Wall

Perl may be copied only under the terms of either the Artistic License &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the
GNU General Public License, which may be found in the Perl &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; source kit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

Complete documentation &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Perl, including FAQ lists, should be found on
this system using &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;man perl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perldoc perl&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;  If you have access to the
Internet, point your browser at http:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;, the Perl Home Page&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get detailed version information type &amp;ldquo;perl -&lt;strong&gt;V&lt;/strong&gt;&amp;rdquo; (capital V) at the command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;V

Summary of &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; perl5 (revision &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; version &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; subversion &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) configuration:
   
  Platform:
    osname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux, osvers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.8.4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fc17&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x86_64, archname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux
    uname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux localhost.localdomain 3.8.4-102.fc17.x86_64 #1 smp sun mar 24 13:09:09 utc 2013 x86_64 x86_64 x86_64 gnulinux &amp;#39;&lt;/span&gt;
    config_args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-de -Dprefix=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3 -Aeval:scriptdir=/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin&amp;#39;&lt;/span&gt;
    hint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;recommended, useposix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true, d_sigaction&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define
    useithreads&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef, usemultiplicity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef
    useperlio&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, d_sfio&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef, uselargefiles&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, usesocks&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef
    use64bitint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, use64bitall&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, uselongdouble&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef
    usemymalloc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n, bincompat5005&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef
  Compiler:
    cc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;, ccflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&amp;#39;&lt;/span&gt;,
    optimize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-O2&amp;#39;&lt;/span&gt;,
    cppflags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include&amp;#39;&lt;/span&gt;
    ccversion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, gccversion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4.7.2 20120921 (Red Hat 4.7.2-2)&amp;#39;&lt;/span&gt;, gccosandvers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    intsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, longsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, ptrsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, doublesize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, byteorder&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12345678&lt;/span&gt;
    d_longlong&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, longlongsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, d_longdbl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define, longdblsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
    ivtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;long&amp;#39;&lt;/span&gt;, ivsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, nvtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;double&amp;#39;&lt;/span&gt;, nvsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, Off_t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;off_t&amp;#39;&lt;/span&gt;, lseeksize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    alignbytes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, prototype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;define
  Linker &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Libraries:
    ld&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;, ldflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; -fstack-protector -L/usr/local/lib&amp;#39;&lt;/span&gt;
    libpth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#e6db74&#34;&gt;/lib /&lt;/span&gt;lib&lt;span style=&#34;color:#e6db74&#34;&gt;/../&lt;/span&gt;lib64 &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;lib&lt;span style=&#34;color:#e6db74&#34;&gt;/../&lt;/span&gt;lib64 &lt;span style=&#34;color:#e6db74&#34;&gt;/lib /&lt;/span&gt;usr&lt;span style=&#34;color:#e6db74&#34;&gt;/lib /&lt;/span&gt;lib64 &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;lib64 &lt;span style=&#34;color:#e6db74&#34;&gt;/usr/&lt;/span&gt;local&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib64
    libs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;lnsl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ldl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lm &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lcrypt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lutil &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lc
    perllibs&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;lnsl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ldl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lm &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lcrypt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lutil &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lc
    libc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, so&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;so, useshrplib&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false, libperl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libperl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a
    gnulibc_version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.15&amp;#39;&lt;/span&gt;
  Dynamic Linking:
    dlsrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dl_dlopen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xs, dlext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;so, d_dlsymun&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;undef, ccdlflags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-Wl,-E&amp;#39;&lt;/span&gt;
    cccdlflags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-fPIC&amp;#39;&lt;/span&gt;, lddlflags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-shared -O2 -L/usr/local/lib -fstack-protector&amp;#39;&lt;/span&gt;


Characteristics of this binary (from libperl): 
  Compile&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;time options: HAS_TIMES PERLIO_LAYERS PERL_DONT_CREATE_GVSV
                        PERL_MALLOC_WRAP PERL_PRESERVE_IVUV USE_64_BIT_ALL
                        USE_64_BIT_INT USE_LARGE_FILES USE_LOCALE
                        USE_LOCALE_COLLATE USE_LOCALE_CTYPE
                        USE_LOCALE_NUMERIC USE_PERLIO USE_PERL_ATOF
  Built under linux
  Compiled at Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;
  %ENV:
    PERLBREW_BASHRC_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.62&amp;#34;&lt;/span&gt;
    PERLBREW_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/sillymoose/.perlbrew&amp;#34;&lt;/span&gt;
    PERLBREW_MANPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/man&amp;#34;&lt;/span&gt;
    PERLBREW_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/sillymoose/perl5/perlbrew/bin:/home/sillymoose/perl5/perlbrew/perls/perl-5.16.3/bin&amp;#34;&lt;/span&gt;
    PERLBREW_PERL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl-5.16.3&amp;#34;&lt;/span&gt;
    PERLBREW_ROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/sillymoose/perl5/perlbrew&amp;#34;&lt;/span&gt;
    PERLBREW_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.62&amp;#34;&lt;/span&gt;
  @INC:
    &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/si&lt;/span&gt;te_perl&lt;span style=&#34;color:#e6db74&#34;&gt;/5.16.3/x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86_64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux
    &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/si&lt;/span&gt;te_perl&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux
    &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prints detailed information on the installed Perl&amp;rsquo;s configuration including: the options that Perl was compiled with, whether iThreads are enabled or not and a host of directory information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run local Perl as root</title>
      <link>http://localhost:1313/article/36/2013/8/10/Run-local-Perl-as-root/</link>
      <pubDate>Sat, 10 Aug 2013 14:33:18 +0000</pubDate>
      
      <guid>http://localhost:1313/article/36/2013/8/10/Run-local-Perl-as-root/</guid>
      <description>&lt;p&gt;This is a simple trick for conveniently running local Perl as a root user on UNIX-based systems.&lt;/p&gt;

&lt;p&gt;Occasionally it&amp;rsquo;s necessary to run locally-installed Perl as root. However at the command line if you type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo perl program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the Perl that is executed is the system Perl binary. This can be problematic as the System Perl may not have the modules required, or even be the correct version of Perl that you need to run. An easy fix for this is to use the which command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;sudo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl) program&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By nesting which between a dollar sign parentheses, the terminal will resolve the command first, which returns a string to the local Perl binary. Sudo then operates on this binary instead of the system Perl binary. You can prove this with the following terminal commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;which perl
&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl

sudo which perl
&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl

sudo echo $&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;which perl)
&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.16.3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Module::Version to get the version of an installed Perl module</title>
      <link>http://localhost:1313/article/22/2013/4/25/Use-Module--Version-to-get-the-version-of-an-installed-Perl-module/</link>
      <pubDate>Thu, 25 Apr 2013 18:39:48 +0000</pubDate>
      
      <guid>http://localhost:1313/article/22/2013/4/25/Use-Module--Version-to-get-the-version-of-an-installed-Perl-module/</guid>
      <description>&lt;p&gt;In response to our article &lt;a href=&#34;http://www.perltricks.com/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal&#34;&gt;3 quick ways to find out the version number of an installed Perl module from the terminal&lt;/a&gt;, programmer &lt;a href=&#34;https://metacpan.org/author/RSAVAGE&#34;&gt;Ron Savage&lt;/a&gt; got in touch to point out that it&amp;rsquo;s possible to use the Perl module &lt;a href=&#34;https://metacpan.org/pod/Module::Version&#34;&gt;Module::Version&lt;/a&gt; to get the version number of an installed module.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/Module::Version&#34;&gt;Module::Version&lt;/a&gt; comes with a useful command line program, &lt;strong&gt;mversion&lt;/strong&gt; which when passed the name of a module, will print the version out. Simply install &lt;a href=&#34;https://metacpan.org/pod/Module::Version&#34;&gt;Module::Version&lt;/a&gt; via CPAN and mversion will be installed automatically.&lt;/p&gt;

&lt;p&gt;Once &lt;a href=&#34;https://metacpan.org/pod/Module::Version&#34;&gt;Module::Version&lt;/a&gt; is installed, to get the version number of Module::Build (for example) using mversion, go to the command line and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;mversion Module::Build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to cleanly uninstall a Perl module</title>
      <link>http://localhost:1313/article/3/2013/3/27/How-to-cleanly-uninstall-a-Perl-module/</link>
      <pubDate>Wed, 27 Mar 2013 00:00:17 +0000</pubDate>
      
      <guid>http://localhost:1313/article/3/2013/3/27/How-to-cleanly-uninstall-a-Perl-module/</guid>
      <description>

&lt;p&gt;CPAN makes installing Perl modules easy but when it comes to removing Perl modules, you have to roll your own solution*. Fortunately the Perl core includes the ExtUtils modules that can help. The script below accepts the Module::Name as an argument, and will delete all files and empty directories associated with that module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# uninstall_perl_module.pl from PerlTricks.com&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::Installed;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ExtUtils::Packlist;

&lt;span style=&#34;color:#75715e&#34;&gt;# Exit unless a module name was passed&lt;/span&gt;
die (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: no Module::Name passed as an argument. E.G.\n\t perl $0 Module::Name\n&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; $#ARGV &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $module &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shift @ARGV;

&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $installed_modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ExtUtils::Installed&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# iterate through and try to delete every file associated with the module&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $file ($installed_modules&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;files($module)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;removing $file\n&amp;#34;&lt;/span&gt;;
    unlink $file &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not remove $file: $!\n&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# delete the module packfile&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $packfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $installed_modules&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;packlist($module)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;packlist_file;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;removing $packfile\n&amp;#34;&lt;/span&gt;;
unlink $packfile &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not remove $packfile: $!\n&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;# delete the module directories if they are empty&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;my&lt;/span&gt; $dir (sort($installed_modules&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;directory_tree($module))) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;removing $dir\n&amp;#34;&lt;/span&gt;);
    rmdir $dir &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; warn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not remove $dir: $!\n&amp;#34;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the script code above into a text file saved as &amp;lsquo;uninstall_perl_module.pl&amp;rsquo;. So if we wanted to uninstall the venerable &lt;code&gt;Acme::Dot&lt;/code&gt; module, we would open up the terminal, navigate to directory containing uninstall_perl_module.pl and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ perl uninstall_perl_module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pl Acme::Dot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the script will remove the module for you. It will &lt;strong&gt;retain non-empty directories&lt;/strong&gt;, as it uses &lt;a href=&#34;https://perldoc.perl.org/functions/rmdir.html&#34;&gt;rmdir&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;removing &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/man/m&lt;/span&gt;an3&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Acme::Dot&lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;
removing &lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/si&lt;/span&gt;te_perl&lt;span style=&#34;color:#e6db74&#34;&gt;/5.14.2/&lt;/span&gt;Acme&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Dot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;app-cpanminus&#34;&gt;*App::cpanminus&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/pod/App::cpanminus&#34;&gt;App::cpanminus&lt;/a&gt; is a popular alternative CPAN client that can be used to manage Perl distributions. It has many great features, including uninstalling modules. Once you&amp;rsquo;ve installed App::cpanminus, to remove the &lt;code&gt;Acme::Dot&lt;/code&gt; module, at the command line type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$ cpanm &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;uninstall Acme::Dot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;App::cpanminus has loads of other great features, to see them, just run &lt;code&gt;cpanm --help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; added cpanm example and clarified directory removal process. 2015-02-21**&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 quick ways to find out the version number of an installed Perl module from the terminal</title>
      <link>http://localhost:1313/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal/</link>
      <pubDate>Sun, 24 Mar 2013 17:30:19 +0000</pubDate>
      
      <guid>http://localhost:1313/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal/</guid>
      <description>

&lt;p&gt;Perl module features and behaviour can change from version to version and so knowing the version number of an installed Perl module can be useful in several scenarios. Below are three different command line methods for finding out the version number of an installed module that work on Bash and Windows Powershell. So fire up the terminal and get typing!&lt;/p&gt;

&lt;h3 id=&#34;1-use-cpan-with-the-d-flag&#34;&gt;1. Use CPAN with the -D flag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;cpan &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;D Moose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type the code above into the terminal replacing &amp;lsquo;Moose&amp;rsquo; with the Perl module name of your choice (in the typical Perl format of Namespace::ModuleName, e.g. Catalyst::Runtime). CPAN will report the module&amp;rsquo;s version, installed location, the latest version number available on CPAN, and whether the locally installed version of the module is up to date or not. The resulting output looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;D&lt;span style=&#34;color:#e6db74&#34;&gt;/DO/&lt;/span&gt;DOY&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Moose&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0604&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz
&lt;span style=&#34;color:#e6db74&#34;&gt;/home/si&lt;/span&gt;llymoose&lt;span style=&#34;color:#e6db74&#34;&gt;/perl5/&lt;/span&gt;perlbrew&lt;span style=&#34;color:#e6db74&#34;&gt;/perls/&lt;/span&gt;perl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.14.2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/si&lt;/span&gt;te_perl&lt;span style=&#34;color:#e6db74&#34;&gt;/5.14.2/x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86_64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Moose&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pm
Installed: &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0603&lt;/span&gt;
CPAN:      &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0604&lt;/span&gt;  Not up to date
Jesse Luehrs (DOY)
doy@cpan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;2-use-a-perl-one-liner-to-load-and-print-the-module-version-number&#34;&gt;2. Use a Perl one-liner to load and print the module version number&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;perl &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;MMoose &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print $Moose::VERSION .&amp;#34;\n&amp;#34;;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command loads the module with Perl&amp;rsquo;s -M flag, and then prints the version variable. This should always be available under $MODULENAME::VERSION. Using a one-liner avoids the need to use CPAN, plus it neatly returns only the version number, which can easily be used for further processing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0603&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;3-use-perldoc-with-the-m-flag-to-load-the-module-s-source-code-and-extract-the-version-number&#34;&gt;3. Use Perldoc with the -m flag to load the module&amp;rsquo;s source code and extract the version number.&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# If you are using Bash:&lt;/span&gt;
perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m Moose &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; grep VERSION

&lt;span style=&#34;color:#75715e&#34;&gt;# If you are using Powershell:&lt;/span&gt;
perldoc &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m Moose &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; select&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;string VERSION&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Admittedly somewhat of a hack, but this will usually work. Don&amp;rsquo;t forget to replace Moose with the module name you are searching for.The output can be a messy, but you can usually locate the version number. This is a good option if methods 1 and 2 above do not work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;$Moose::VERSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.0603&amp;#39;&lt;/span&gt;;
die &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Class::MOP version $Moose::VERSION required--this is version $Class::MOP::VERSION&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; $Moose::VERSION &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $Class::MOP::VERSION &lt;span style=&#34;color:#f92672&#34;&gt;ne&lt;/span&gt; $Moose::VERSION;
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head1 VERSION&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This article was originally posted on &lt;a href=&#34;http://perltricks.com&#34;&gt;PerlTricks.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

